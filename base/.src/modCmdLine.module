' Gambas module file

' utilities for managing the command line
' 
Export

Public Function GetOptions() As Collection
   
   Dim opt As New Collection
   Dim i As Integer
   Dim sh As New Regexp("n", "^-([a-zA-Z])$")
   Dim lo As New RegExp("n", "^--([a-z\\-]+)=(.*)")
   Dim lo2 As New RegExp("n", "^--([a-z\\-]+)$")
   Dim short_to_long As New Collection
   
   
   short_to_long!h = "host"
   short_to_long!U = "username"
   short_to_long!d = "dbname"
   short_to_long!L = "log-file"
   short_to_long!r = "run"
   short_to_long!t = "test"
   
   i = 1
   opt!extras = New String[]
   While i < Application.Args.Count
      If Application.Args[i] <> "" Then
        lo.Exec(Application.Args[i])
        If lo.Offset <> -1 Then
          opt[lo[1].Text] = lo[2].Text
        Else
          sh.Exec(Application.Args[i])
          If sh.Offset <> -1 Then
            Inc i
            If Not short_to_long.Exist(sh[1].Text) Then Error.Raise("Option " & sh[1].text & " not recognised")
            If i >= Application.Args.Count Then Error.Raise("required argument not provided")
            opt[short_to_long[sh[1].Text]] = Application.Args[i]
          Else
            lo2.Exec(Application.Args[i])
            If lo2.Offset <> -1 Then
              Inc i
              If i >= Application.Args.Count Then Error.Raise("required argument not provided")
              opt[lo2[1].Text] = Application.Args[i]
            Else  ' doesn't match any option so throw into the "extras" array
              opt!extras.Add(Application.Args[i])
            Endif
          Endif
        Endif
      Endif
      
      Inc i
   Wend
   If opt.Exist("log-file") Then Log.Set_Logfile(opt["log-file"])
   Return opt
   
End

Public Sub Main()
  Dim opt As Collection
  
  opt = GetOptions()
  If Not opt.Exist("host") Then opt!host = "unix"
  modDBConnect.dbConnect_global(opt)
  modDBConnect.exec_query("select 1")
   
End
