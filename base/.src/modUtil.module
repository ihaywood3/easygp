' Gambas module file

' Copyright (C) 2008-2014 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' PURPOSE: A module to assist in validation of input areas with key restriction
'-------------------------------------------------------------------------------
Export

Private tempdir As String

Public Function Read_PDF_Page_Count(filename As String) As Integer
  '-------------------------------------------------------------------
  'Reads the number of page in a pdf with filename and path = filename
  '-------------------------------------------------------------------
  
  Dim page_count As String
  Dim sText As String = "pdfinfo " & filename & "  | grep Pages | /bin/sed 's/[^0-9]*//'"
  
  Shell (sText) To page_count
  If IsInteger(page_count) Then Return Val(page_count)
  
End

Public Function Fix_HTML(s As String, lastspan As String[]) As String
  'Attempt to clean up the crappy html that comes out of the QT widgit 
  
  Dim r As Regexp
  Dim newtag As String
  
  If s = "" Then Return s
  r = New Regexp(s, "<([^>]+)>")
  If r.Offset = -1 Then
    Return s
  Else
    newtag = Make_New_Tag(LCase$(r[1].Text), ByRef lastspan)
    If IsNull(newtag) Or If newtag = "" Then
      Return Left$(s, r.Offset) & Fix_HTML(Right$(s, - (r.Offset + Len(r.Text))), lastspan)
    Else
      Return Left$(s, r.Offset) & "<" & newtag & ">" & Fix_HTML(Right$(s, - (r.Offset + Len(r.Text))), lastspan)
    Endif
  Endif
  
End

Private Function Make_New_Tag(tag As String, ByRef lastspan As String[]) As String
  
  Dim r As Regexp
  Dim tokens As New String[]
  Dim tokens_close As New String[]
  
  If IsNull(lastspan) Then lastspan = New String[]
  r = New Regexp(tag, "^span.*")
  If r.Offset = 0 Then
    If InStr(tag, "font-weight:600") Then
      tokens.Add("b")
      tokens_close.Add("/b")
    Endif
    If InStr(tag, "font-style:italic") Then
      tokens.Add("i")
      tokens_close.Add("/i")
    Endif
    If InStr(tag, "text-decoration: underline") Then
      tokens.Add("u")
      tokens_close.Add("/u")
    Endif
    If Not IsNull(tokens) And If Not IsNull(tokens_close) And If tokens.Length > 0 And If tokens_close.Length > 0 Then
      lastspan.Push(tokens_close.Join("><"))  ' calling code adds the final outer < >
      Return tokens.Join("><")
    Else  ' we didn't recognise anything in the span, so add nothing to the translated HTML stream
      lastspan.Add("")
      Return Null
    Endif
  Endif
  If tag = "/span" Then
    If lastspan.Length > 0 Then
      Return lastspan.Pop()
    Else
      Return Null
    Endif
  Endif
  r = New Regexp(tag, "^p.*")
  If r.Offset = 0 Then
    Return "p"
  Endif
  If tag = "/p" Then
    Return "/p"
  Endif
  Return Null
  
End

Public Function As_Percent(num As Integer, data_count As Integer) As String
  
  Return Str(Round((num / data_count) * 100)) & "%"
  
End

Public Sub Show_in_external_pdf_viewer(filename As String, bIsDocument As Boolean)
  'displays a pdf in an external viewer currently fixed to okular
  
  If Lower(File.Ext(filename)) <> "pdf" Then Return  
  If IsNull(modUtil.FindProgram("okular", "okular")) Then 
    Error.Raise("The program 'okular' to view pdf's was not found.\n\nYou can install this at at terminal with this command:\n\nsudo apt-get install okular")
    Return   'fixme make this configurable  
  End If   
  Try Shell "okular " & filepath_fix_Blanks(Filename)    
  
End

Public Sub text_gt_lt_protect(s As String) As String
  ' Replace(Replace(PH!aim_of_plan, "<", "&lt;"), ">", "&gt;") & ", " & Replace(PH!management_summary, "<", "&lt;") & "</P>"
  'protects the > and < eg bp<130/80 or bp>130/8 0
  
  Return Replace(Replace(s, "<", "&lt;"), ">", "&gt;")
  
End

Public Sub Splitter_Defaults(values As Integer[], sz As Integer) As Integer[]
  
  Dim ret As New Integer[]
  Dim i As Integer
  
  For Each i In values
    ret.Add(CInt(sz * i / 100))
  Next
  Return ret
  
End

Public Sub Calc_BMI(height As Variant, weight As Variant) As Variant
  '---------------------------------------------------------------------------------
  'fix me there are calc_BMI's all over the place
  ' eg  modDecision_Support.BMI_DecSupp
  '     modMeasurements.Calc_BMI
  'They all are different and do differnet things names don't represent what they do
  '---------------------------------------------------------------------------------
  
  Dim BMI As Float
  
  BMI = Format((weight / (height ^ 2)) * 10000, "##.#")
  ' BMI = Val(height) / ((height / 100) * (height / 100))
  Return BMI
  '    Return BMI = Val(Format(Str$(BMI), "##.#"))
  
End

Public Sub Calc_md5sum_File(filename As String) As String
  
  Dim md5Output As String
  
  Exec ["/usr/bin/md5sum", filename] To md5Output
  Return Left(md5Output, InStr(md5Output, " ") - 1)
  
End

Public Sub filepath_fix_Blanks(filepath As String) As String
  
  filepath = Replace(filepath, " ", "\\ ")
  Return filepath
  
End

Public Function Restore_Case(txt As String, lower_case As Boolean) As String
  
End

Public Function Filename_Protect(fname As String) As String
  'change the filename to remove characters that upset BASH or printing.
  'something odd here - has always lived in this module I think and disappeared recently
  
  Dim s As String = ""
  Dim i As Integer
  Dim a As Integer
  
  For i = 0 To Len(fname)
    a = String.Code(fname, i)
    If a = 32 Then s &= "_"
    If a = 38 Then s &= "_and_"
    If a = 40 Then s &= ""            '(
    If a = 41 Then s &= ""            ')
    If a = 39 Then s &= ""         'apostrophe eg O'Brien
    If a = 45 Then s &= "-"
    If a = 95 Then s &= "_"
    If a = 46 Then s &= "_"
    If a >= 48 And a <= 57 Then s &= Chr$(a) ' numbers
    If a >= 65 And a <= 90 Then s &= Chr$(a + 32) ' letters: to lowercase
    If a >= 97 And a <= 122 Then s &= Chr$(a) ' letters
  Next
  
  Return s
  
End

Public Function Make_Plural(txt As String) As String
  '-------------------------------------------------
  'Makes a word plural
  '------------------------------------------------
  
  Dim lastchar As String
  Dim lower_case As Boolean = False
  
  If txt = Lower(txt) Then
    lower_case = True
  Else
    txt = Lower(txt)
  Endif
  Select Case txt
    Case "child"
      txt = "children"
    Case "ox"
      txt = "oxen"
    Case "sheep"
      txt = "sheep"
    Case "deer"
      txt = "deer"
    Case "salmon"
      txt = "salmon"
    Case "fish"
      txt = "fish"
    Case "moose"
      txt = "moose"
    Case "goose"
      txt = "geese"
    Case "monkey"
      txt = "monkeys"
    Case "money"
      txt = "monies"
    Case "brother"
      txt = "brethren"
    Case "foot"
      txt = "feet"
    Case "louse"
      txt = "lice"
    Case "man"
      txt = "men"
    Case "mouse"
      txt = "mice"
    Case "tooth"
      txt = "teeth"
    Case "woman"
      txt = "women"
    Case "key"
      txt = "keys"
    Case Else
      Select Case Right$(txt)
        Case "y"
          txt = Left(txt, -1) & "ies"
        Case "f"
          txt = Left(txt, -1) & "ves"
        Case "s"
          txt &= "es"
        Case Else
          txt &= "s"
      End Select
  End Select
  
  If Not lower_case Then txt = Upper$(txt)
  
  Return txt
  
End

Public Function Ucase_Word_First_Letter(txt As String) As String
  'ucase the first word in a string, but preserve 'I'
  'fixme needs to be much more sophisticated

  txt = UCase(Left(txt)) & Lower(Right(txt, Len(txt) - 1))
  txt = Replace(txt, " i ", " I ")
  txt = Replace(txt, "i ", "I ")
  Return txt
  
End

Public Function Calc_age(dob As Date) As Integer
  
  Dim months As Integer
  
  months = DateDiff(dob, Now, gb.Month)
  If Day(dob) > Day(Now) Then
    Dec months
  Endif
  Return months Div 12
  
End

Public Function Is_Birthday(dob As Date) As Boolean
    
    If Month(dob) = Month(Now) And Day(dob) = Day(Now) Then Return True
  
End

Public Function Write_HTML(sHTML As String, Optional prefix As String = "html") As String
  '----------------------------------------------------------------
  'expects some html, returns a temporary filename it is written to
  'IAN BEFORE REMOVING THIS AGAIN CAN YOU MAKE SURE THE ROUTINES
  'CALLING IT HAVE ANOTHER WAY OF WORKING OR TELL ME WHAT YOU
  'WANT AND i'LL TRY AND IMPLEMENT IT
  '----------------------------------------------------------------
  
  Dim wFile As File
  Dim sFilename As String
  
  sFilename = Temp$(prefix) & ".html"
  wfile = Open sFilename For Write Create
  Print #wfile, sHTML
  Close #wfile
  Return sFilename
  
End

Public Function Convert_rtf_to_html(sHtml As String) As String
  '-------------------------------------------------------------------------------
  'converts a medrec *.rtf letter to html sort of
  'returns string of formatted html text
  '
  'sample letter format:
  ' {\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fswiss MS Sans Serif;}{\f1\froman\fcharset2 Symbol;}{\f2\fswiss Small Fonts;}{\f3\froman Times New Roman;}{\f4\froman Times New Roman;}{\f5\fscript Comic Sans MS;}}
  ' {\colortbl\red0\green0\blue0;}
  ' \deflang1033\pard\plain\f4\fs24 A Practice
  ' \par 141 Peter Close
  ' \par ANYTOWN 9999
  ' \par Phone:02 48 999999
  ' \par Fax  :02 49 11111
  ' \par Email:
  ' \par
  ' \par 19/11/2001
  ' \par
  ' \par Dr Whoever
  ' \par Unit1
  ' \par 199 Whatever ST
  ' \par BROADMEADOW 2292
  ' \par 42222222
  ' \par
  ' \par Dear Lindsay,
  ' \par Re: A Patient An Address  KAHIBAH 2290 DOB: 22/01/1922 Age:73.6
  ' \par
  ' \par TYPE OF REFERRAL: ONGOING MANAGEMENT
  ' \par
  ' \par Merle is troubled by her left knee osteoarthritis and would like to discuss of replacement with you.
  ' \par
  ' \par Allergies: Reversible Inhibitors Of Monoamine Oxidase Type A - reaction allergic rash noted with the drug Aurorix [DEFINATE], Penicillin - reaction diarrhoea noted with the drug Abbocillin VK [DEFINATE].
  ' \par
  ' \par
  ' \par Yours sincerely,
  ' \par
  ' \par
  ' \par
  ' \par Dr Bruce Blogs(Prov No.:111111A)\plain\f3\fs24
  ' \par }
  '
  ' Ian would probably do this in a one liner, but for my simple brain
  'I inserted a couple of pipes to split the text, took out the letter
  'and replace the paragraph returns with <BR>
  '-------------------------------------------------------------------------
  
  Dim bits As String[]
  Dim charpos As Integer
  Dim badcount As Integer
  '------------------------------------------------------------------
  'Some letters seem to have been re-saved in word which has altered
  'the simple rtf file headers I constructed in VB, so replace these
  'out of 11,000 letters, was only in the order of 20 or so, and these
  'also had 'par }}' at the end of the letter
  '------------------------------------------------------------------
  charpos = InStr(shtml, "cgrid0")
  
  If charpos Then
    sHtml = "{sometext here\\fs24" & Right(shtml, Len(shtml) - charpos - 5)
    sHtml = Replace(shtml, "\\par }}", "\\par }")
    ' Message.info(shtml)
    Inc badcount
  End If
  '-----------------------------------------------------
  'There appears some variation at the end of the letter
  'to be removed IAN FIX ME
  '-----------------------------------------------------
  sHtml = Replace(sHtml, "\\plain\\f2\\fs24", "|")
  sHtml = Replace(sHtml, "\\plain\\f3\\fs24", "|")
  sHtml = Replace(sHtml, "\\plain\\f4\\fs24", "|")
  sHtml = Replace(sHtml, "\\plain\\f5\\fs24", "|")
  sHtml = Replace(sHtml, "\\plain\\f6\\fs24", "|")
  sHtml = Replace(sHtml, "\\plain\\f7\\fs24", "|")
  sHtml = Replace(sHtml, "\\plain\\f8\\fs24", "|")
  sHtml = Replace(sHtml, "\\plain\\f5\\fs10\\cf0", "|")
  sHtml = Replace(sHtml, "\\plain\\f5\\fs18\\cf0", "|")
  '----------------------------------------------------
  'Replace the last par } at end of the letter and
  'then the fs24 just before the practice name
  'Now we can split on the | character and take seg 1
  '----------------------------------------------------
  sHtml = Replace(sHtml, "\\par }", "|")
  sHtml = Replace(sHtml, "\\fs24 ", "|")
  bits = Split(sHtml, "|", "", True)
  sHtml = Trim(sHtml)
  '-----------------------------------------
  'Convert paragraph returns to <BR> in html
  '-----------------------------------------
  sHtml = Replace(bits[1], "\\par", "<BR>")
  ' If charpos Then Message.info(shtml)
  'Just in case we missed an odd one
  
  Return sHtml
  
End

Public Function COct(num As Integer) As String
  
  Dim octnumber As New Integer[]
  Dim octstring As String
  
  octnumber.Add(Int(num / 64))
  octnumber.Add(Int((num Mod 64) / 8))
  octnumber.Add((num Mod 64) Mod 8)
  octstring = octnumber[0] & octnumber[1] & octnumber[2]
  Return octstring
  
End

Public Function SplitStrings_into_collection(sstring As String, delimiter As String, Optional key_name As String) As Collection
  '----------------------------------------------------------------------------
  'Splits a line of delimited text into individual elements > into a collection
  '----------------------------------------------------------------------------
  
  Dim the_array As String[]
  Dim element As String
  Dim C As New Collection
  
  the_array = Split(sString, delimiter)
  For Each element In the_array
    C.Add(element, C.count)
  Next
  Return C
  
End

Public Function DateString_Encode(datestring As String) As String
  'turns eg 01/02/2010 into '20100201'
  
  Dim bits As String[]
  
  If datestring <> "" Then
    bits = Split(datestring, "/")
    Return bits[2] & bits[1] & bits[0]
  Else
    Return
  End If
  
End

Public Function DateString_Decode(Datestring As String) As Date
  
  Dim sTemp As String
  Dim d1 As Date
  
  d1 = Null
  sTemp = Left(Datestring, 8)
  Try d1 = Date(Val(Left(sTemp, 4)), Val(Mid(sTemp, 5, 2)), Val(Right(sTemp, 2)))
  Return d1
  
End

Public Function Copy_Collection(cSource As Collection) As Collection
  
  Dim vVal As Variant
  Dim cDestination As New Collection
  
  For Each vVal In cSource
    cDestination.Add(vVal, cSource.Key)
  Next
  Return cDestination
  
End

' get one item from a collection
Public Function Get_One(coll As Collection) As Variant
  
  Dim i As Variant
  
  For Each i In coll
    Return i
  Next
  
End

Public Function Copy_Collection_Keyed_Sequentially(cSource As Collection) As Collection
  '-----------------------------------------------------------------------------------------------------
  'copies a collection key'ed 0,1,2,3... etc
  'Note syntax in calling routine must be for example:
  'StaffTypes = modUtil.Copy_Collection_Keyed_Sequentially(modAdminDBI.Staff_Types_Get())
  'This is mainly used in loading combo's so that retreiving the data can use the zero based combo index
  'e.g  staff_member!fk_lu_staff_type = StaffTypes[cmbStafftype.index]!pk
  '------------------------------------------------------------------------------------------------------
  
  Dim vVal As Variant
  Dim NewVal As Variant
  Dim x As Integer
  Dim cDestination As New Collection
  
  If IsNull(cSource) Then Return Null ' NULL passthrough
  For Each vVal In cSource
    newVal = vVal
    cDestination[x] = NewVal
    Inc x
  Next
  Return cDestination
  
End

Public Function Make_Date_From_String(d As String) As Date
  'Create a date type from a string representing a date. We always represent string dates as eg. 01/01/1900
  
  Dim bits As String[]  

  bits = Split(d, "/")
  If bits.Length <> 3 Then Error.Raise("date " & d & " isn't valid")
  Return Date(bits[2], bits[1], bits[0])
  
End

Public Function Format_Date(d As Date) As String
  '--------------------------------------------
  'Expects a date and returns a formatted string
  '---------------------------------------------
  
  Return Format(d, "dd/mm/yyyy")
  
End

Public Function CapsLockStatus() As Boolean
  
  Dim res As String
  
  ' xset q = xset query returns report about X console, then use awk to parse out the hex digit we want
  Try Shell "xset q | awk '/.*LED mask.*/ { print and(1,strtonum(\"0x\" substr($10,8,1))) }'" To res
  If Error Then Return False
  res = Trim$(res)
  If res = "1" Then
    Return True
  Else
    Return False
  Endif
  
End

Public Sub Medicare_Number_Check(mcn As String) As String
  '----------------------
  ' strip out any non-numeric characters and check validity of 10-digit Medicare number
  '----------------------
  
  Dim i As Integer
  Dim Magic As Byte[] = [1, 3, 7, 9, 1, 3, 7, 9]
  Dim proper_mcn As String = ""
  Dim check_total As Integer = 0
  Dim proper_pos As Integer
  
  For i = 1 To Len(mcn)
    If Asc(mcn, i) >= Asc("0") And If Asc(mcn, i) <= Asc("9") Then
      proper_pos = Len(proper_mcn)
      If proper_pos < 8 Then
        check_total += Magic[proper_pos] * (Asc(mcn, i) - Asc("0"))
      Endif
      If proper_pos = 8 Then ' this is digit nine: the check digit
        If (Asc(mcn, i) - Asc("0")) <> check_total Mod 10 Then
          Return "*INVALID*"
        Endif
      Endif
      proper_mcn &= Mid$(mcn, i, 1)
    Endif
  Next
  If Len(proper_mcn) <> 10 Then Return "*INVALID*"
  Return proper_mcn
  
End

Public Sub Medicare_Number_Format(mcn As String) As String
  ' return a 10-digit medicare number formatted in a nice way
  
  Dim s As String
  
  mcn = Trim$(mcn)
  s = Mid$(mcn, 1, 4) & " " & Mid$(mcn, 5, 5) & " " & Mid$(mcn, 10, 1) & " " & Mid$(mcn, 11, 1)
  Return Trim(s)
  
End

Public Sub Medicare_Create_Expiry_date(s As String) As String
  '-------------------------------------------------------------
  'expects string like 09/2012, returns last-day-in-month/mm/yyyy
  '--------------------------------------------------------------
  
  Dim re As Regexp
  Dim m As Integer
  Dim y As Integer
  Dim d As Integer
  
  If s = "" Then Return
  re = New Regexp(s, "^([0-9]{1,2})/([0-9]{2,4})$")
  If re.Offset < 0 Then Return Null
  m = Val(re[1].Text)
  y = Val(re[2].text)
  If y < 100 Then y += 2000
  Select Case m
    Case 2
      d = 28
      If ((y Mod 4 = 0) And (y Mod 100 <> 0)) Or (y Mod 400 = 0) Then d = 29
    Case 9, 4, 6, 11 ' 30 days hath..
      d = 30
    Case Else
      d = 31
  End Select
  Return Str(d) & "/" & s
  
End

Public Function Provider_Number_Check(pn As String) As String
  ' cleans up an checks validity of Medicare provider numbers
  ' example: 246564AK
  
  Dim re As Regexp
  Dim i As Integer
  Dim check_total As Integer = 0
  Dim Magic As Integer[] = [3, 5, 8, 4, 2, 1]
  Dim PLV As String[] = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R", "T", "U", "V", "W", "X", "Y"]
  Dim Check_Digits As String[] = ["Y", "X", "W", "T", "L", "K", "J", "H", "F", "B", "A"]
  
  pn = Upper$(pn)
  If Len(pn) = 7 Then pn = "0" & pn
  re = New Regexp(pn, "^[0-9]{6}[0-9A-Y][A-Y]$")
  If re.Offset = -1 Then Return "*INVALID*"
  For i = 1 To 6
    check_total += (Asc(pn, i) - Asc("0")) * Magic[i - 1]
  Next
  i = PLV.Find(Mid$(pn, 7, 1))
  If i = -1 Then Return "*INVALID*"
  check_total += i * 6
  check_total = check_total Mod 11
  If Mid$(pn, 8, 1) <> Check_Digits[check_total] Then Return "*INVALID*"
  Return pn
  Catch                       'something bad happened eg passing a null string the routine bombs with the reg-ex
    Return "*INVALID*" 
End

Public Function Check_Coding_Missing() As Boolean
  '------------------------------------------------------ 
  ' Returns True if we have not installed a coding system
  ' -----------------------------------------------------
  
  Dim R As Result
  
  R = modDBConnect.exec_query("Select count(code) as total from coding.generic_terms")
  Print R!total   
  If R!total > 0 Then Return True
  
End

Public Function FindProgram(prg As String, package As String) As String
  '------------------------------------------------------------------
  ' checks that an executable is available on the system
  ' prg: the name of the program
  ' package: the name of the Debian/RedHat package, only used to
  ' create a more helpful error message
  ' returns
  '   - NULL if the program isn't found on the system. Calling
  '      code should just exit directly, there is no need to have an
  '      error message as the function does this for you
  '   - if found the full path of the program which can be used for
  '     Shell or Exec commands
  'If bSuppressMessage =  True then no popup not found message is shown
  '---------------------------------------------------------------------
  
  Dim sMsg As String
  
  If Not IsNull(Settings["Paths/" & prg]) Then Return Settings["Paths/" & prg]
  If Access("/usr/bin" &/ prg, gb.Exec) Then Return "/usr/bin/" & prg
  If Access("/usr/local/bin" &/ prg, gb.Exec) Then Return "/usr/local/bin" &/ prg
  Log.ErrorMsg(Subst$("&1 not found anywhere", prg))
  Error.Raise(Subst$("&1 Not found anywhere ", prg))
  
End

Public Function Find_File(fname As String) As String
  ' looks for a file in "common" places: in SVN,
  ' and where files should be stored in end-user deployments
  ' returns NULL if can't be found anywhere
  
  Dim paths As String[] = [Application.Path &/ "..", "/usr/local/share/easygp/", "/usr/share/easygp/"]
  Dim i As String
  
  For Each i In paths
    If Access(i &/ fname, gb.Read) Then Return i &/ fname
  Next
  Return Null
  
End

Public Function StripAllBlanks(s1 As String) As String
  '---------------------------------------------------------
  'strips all ascii 32 characters from a string
  'front,back or internal
  '---------------------------------------------------------
  
  Dim s2 As String = ""
  
  s2 = Replace$(s1, " ", "")
  While s2 <> s1
    s1 = s2
    s2 = Replace$(s1, " ", "")
  Wend
  Return Trim(s2)
  
End

Public Function StripExtraBlanks(s1 As String) As String
  '---------------------------------------------------------
  'strips any extra ascii 32 characters plus any off the end
  'this will leave internal ascii 32's but not eg 3232
  '---------------------------------------------------------
  
  Dim s2 As String = ""
  
  s2 = Replace$(s1, "  ", " ")
  While s2 <> s1
    s1 = s2
    s2 = Replace$(s1, "  ", " ")
  Wend
  Return Trim(s2)
  
End

' true if the two dates are the same day (i.e. but different times)
Public Function IsSameDay(d1 As Date, d2 As Date) As Boolean
  
  If Day(d1) = Day(d2) And If Month(d1) = Month(d2) And If Year(d1) = Year(d2) Then
    Return True
  Else
    Return False
  Endif
  
End

Public Sub SendMailToDeveloper(subject As String, text As String)
  
  Dim smtp As New SmtpClient
  Dim s As String
  
  smtp.Port = 10025
  s = modDBConnect.currentUser_FullName()
  If Not IsNull(modDBConnect.currentUser) Then
    If Lower$(modDBConnect.currentUser!branch) <> "head office" Then
      s &= " " & modDBConnect.currentUser!branch
    Endif
    s &= " " & modDBConnect.currentUser!organisation & " " & modDBConnect.currentUser!town
  Endif
  s = Replace$(s, " ", "-")
  s = Lower$(s)
  smtp.Encrypt = Net.TLS
  smtp.From = s
  smtp.Host = "haywood.id.au"
  smtp.Add(text)
  smtp.To.Add("ian@haywood.id.au")
  smtp.Subject = "[EASYGP] " & subject
  smtp.Send()
  
End

Public Sub SendContribution(f As String, sMsg As String)
  
  sMsg = "-- date: " & Now() & "\n" & sMsg
  SendMailToDeveloper("[EASYGP] drug contribution", sMsg)
  
End

Public Function Money_Format(money As Variant) As String
  
  Dim s2 As String[]
  
  If money = "" Then Return
  If TypeOf(money) = gb.Float Or If TypeOf(money) = gb.Single Then
    Return "$" & Format(money, "#.00")
  Else
    s2 = Split(money, ".")
    If Left$(s2[0], 1) <> "$" Then
      s2[0] = "$" & s2[0]
    Endif
    If s2.Length = 1 Then
      Return s2[0] & ".00"
    Else
      If Len(s2[1]) = 1 Then
        s2[1] = s2[1] & "0"
      Endif
      If Len(s2[1]) = 0 Then
        s2[1] = "00"
      Endif
      If Len(s2[1]) > 2 Then
        s2[1] = Left$(s2[1], 2)
      Endif
      Return s2[0] & "." & s2[1]
    Endif
  Endif
  
End

Public Function isMoney(s As String) As Boolean
  
  Dim re As Regexp
  
  If s = "" Then Return
  re = New Regexp(s, "^\\$[0-9]+\\.?[0-9]{0,2}$")
  If re.Offset = -1 Then Return False
  Return True
  
End

' accepts a money value formatted as from Format_Money or Postgres money type
Public Function MoneyToFloat(s As String) As Float
  
  If s = "" Then Return CFloat(0)
  If Left$(s, 1) = "$" Then s = Right$(s, -1)
  Return Val(s)
  
End

Public Sub Split_Firstname(name As String, ByRef firstname As String, ByRef initial As String)
  
  Dim sa As String[]
  
  sa = Split(name, " ", "", True)
  firstname = sa[0]
  If sa.Length > 1 Then
    initial = Left$(sa[1], 1)
  Else
    initial = ""
  Endif
  
End

Public Sub Kill_If_Temp(fname As String)
  
  If Not IsNull(fname) And If Left$(fname, 5) = "/tmp/" Then
    Try Kill fname
  Endif
  
End

Public Sub Get_Temp_Dir() As String
  
  Dim re As Regexp
  
  If Not IsNull(tempdir) Then Return tempdir
  re = New Regexp(Temp$(), "(/.*/)[0-9]+\\.tmp$")
  tempdir = re[1].Text
  Return tempdir
  
End

' true if string contains no numeric chars 
Public Function Not_Numeric(s As String) As Boolean
  
  Dim re As RegExp
  
  re = New RegExp(s, "[0-9]")
  If re.Offset = -1 Then Return True
  Return False
  
End

Public Function Is_Loinc(loinc As String) As Boolean

  Dim re As Regexp

  re = New RegExp(loinc, "^[0-9]{4,6}-[0-9]$")
  If re.Offset = -1 Then Return False
  Return True

End

