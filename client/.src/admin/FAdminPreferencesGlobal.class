' Gambas class file

' Copyright (C) 2008-2016 Drs. Richard Terry, Ian Haywood
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' A module to set global preferences for easyGP eg paths to documents etc
'-------------------------------------------------------------------------
'PURPOSE       Enable admin to set basic stuff like eg path to hl7,  path
'              where scanned documents are kept
'-------------------------------------------------------------------------
Private iHBoxHeight As Integer
Private fk_clinic As Variant
Private bExit As Boolean
Private staff_members As Collection
Private staff_members_appointment_defaults As Collection
Private Form_Help As FHtmlViewer
Private Clinics As Collection
Private cvwGeneralPreferences_key As Variant
Private Const cTab_DocumentsEmailHl7 As Integer = 0
Private Const cTab_Clerical As Integer = 1
Private Const cTab_Clinical As Integer = 2
Private Const cTab_Library As Integer = 3
Private Help_files As String[]

Public Sub Init()
   '-----------------------------------------------------
   'Basic housekeeping, this is called from FAdmin.Init()
   '-----------------------------------------------------
   
   staff_members = modUtilGUI.LoadCombo(cmbStaffMembers, modInboxDBI.Inbox_Staff_Get(), "wholename")
   staff_members_appointment_defaults = modUtilGUI.LoadCombo(cmbStaffMembersAppointmentDefaults, modInboxDBI.Inbox_Staff_Get(), "wholename")
   Help_files = New String[]
   Help_files.Add("global-preferences-documents-email-hl7.html")
   Help_files.Add("global-preferences-clerical.html")
   Help_files.Add("global-preferences-clinical.html")
   Help_files.Add("global-preferences-library.html")
 
   With Form_Help = New FHtmlViewer(Vbox_Help)
      .tbWebBrowserZoomIn.Visible = True
      .tbWebBrowserZoomOut.Visible = True
      .Help_Show("global-preferences-documents-email-hl7.html")
   End With
   Settings_Load()
   lblmeasure.text = " Path to Drug Product Information  "
   modEditAreaHelpers.Resize_labels(VBox_Documents, lblmeasure)
   modEditAreaHelpers.Resize_labels(VBox_PracticeDetails, lblmeasure)
   modEditAreaHelpers.Resize_labels(VBox_BillingDefaults, lblmeasure)
   modEditAreaHelpers.Resize_labels(VBox_ClinicalDefaults, lblmeasure)
   modEditAreaHelpers.Resize_labels(VBox_LibraryDefaults, lblmeasure)
   modEditAreaHelpers.Resize_label(lblDefaultStaffMember, lblmeasure)
    With cvwGeneralPreferences
      .columns.count = 3
      .Columns[0].width = 150
      .Columns[0].text = "Location"
      .Columns[1].width = 200
      .Columns[2].width = cvwGeneralPreferences.Parent.width - 350
   End With
   HBox_ToolBar_Right.width = HSplit_GlobalSettings.Children[1].Width
   Reload
   
End

Public Sub Form_Show()
   
   iHBoxHeight = HBox_DocumentHeading.Height
   Resize_HBoxes_Other_EditAreas(VBox_BillingDefaults)
   Resize_HBoxes_Other_EditAreas(VBox_ClinicalDefaults)
   Resize_HBoxes_Other_EditAreas(VBox_LibraryDefaults)

End

Public Sub Resize_HBoxes_Other_EditAreas(VB As Vbox)
   
   Dim hctrl As Control
   Dim HB As HBox
   
   For Each hctrl In VB.Children
      If hCtrl Is Hbox Then
         HB = hctrl
         Hb.Height = iHBoxHeight
      Endif
   Next 
   
End

Public Sub Save()
   '----------------------------------------------------------------
   ' Saves the global preferences
   '----------------------------------------------------------------
   
   Dim v As String
   
   If Not (HBox_EditArea.Padding) Then Return       'no padding = nothing changed
   If Not EditArea_Data_Valid() Then                'ensure minimal valid data
      Return
   Else
      HBox_EditArea.Enabled = False
      modDBConnect.exec_query("lock admin.global_preferences in exclusive mode") ' implictly begins a transaction
      modAdminDBI.Config_Save(fk_clinic, "reply-to-email", Trim(txtReplyToEmail.text))
      modAdminDBI.Config_Save(fk_clinic, "admin_email", Trim(txtAdminEmail.text))
      modAdminDBI.Config_Save(fk_clinic, "document_scanning_directory", Trim(txtFilePathScannedDocuments.text))
      modAdminDBI.Config_Save(fk_clinic, "document_archiving_directory", Trim(txtFilePathArchivedDocuments.text))
      modAdminDBI.Config_Save(fk_clinic, "hl7_incoming_directory", Trim(txtHL7Incoming.text))
      modAdminDBI.Config_Save(fk_clinic, "hl7_outgoing_directory", Trim(txtHL7Outgoing.text))
      modAdminDBI.Config_Save(fk_clinic, "fk_hl7_fallback_staff_member", staff_members[cmbStaffMembers.index]!fk_staff)
      modAdminDBI.Config_Save(fk_clinic, "fk_default_staff_member_appointments", staff_members[cmbStaffMembersAppointmentDefaults.index]!fk_staff)
      modAdminDBI.Config_Save(fk_clinic, "library_directory_network", Trim(txtLibraryPathNetwork.text))
      modAdminDBI.Config_Save(fk_clinic, "product_information_directory", Trim(txtProductInformationPath.text))
      modAdminDBI.Config_Save(fk_clinic, "area_of_need", CBool(chkAreaOfNeed.value))
      modAdminDBI.Config_Save(fk_clinic, "use_ozefax", CBool(cbOzefax.Value))
      modAdminDBI.Config_Save(fk_clinic, "smtp_server", Trim(txtSMTPServer.text))
      modAdminDBI.Config_Save(fk_clinic, "smtp_username", Trim(txtSMTPUserName.text))
      modAdminDBI.Config_Save(fk_clinic, "smtp_password", Trim(txtSMTPPassword.text))
      modAdminDBI.Config_Save(fk_clinic, "dictation_ftp_server", Trim(txtDictationsFTPServer.text))
      modAdminDBI.Config_Save(fk_clinic, "dictation_ftp_username", Trim(txtDictationsFTPUserName.text))
      modAdminDBI.Config_Save(fk_clinic, "dictation_ftp_password", Trim(txtDictationsFTPPassword.text))
      modAdminDBI.Config_Save(fk_clinic, "user_can_add_requests", CBool(chkUserCanAddRequests.value))
      modAdminDBI.Config_Save(fk_clinic, "transcription_tab_in_clerical", CBool(chkTranscriptionTabInClerical.value))
      modAdminDBI.Config_Save(fk_clinic, "share_new_requests", CBool(chkShareRequestswithEasyGPCentral.value))
      modAdminDBI.Config_Save(fk_clinic, "display_unbilled_consults_in_billing", CBool(chkShowUnbilledConsultationsInBilling.value))
      modAdminDBI.Config_Save(fk_clinic, "default_task_display_by_role", CBool(chkGroupTasksForRoles.value))
      modAdminDBI.Config_Save(fk_clinic, "appointments_show_weekends", CBool(chkAppointmentsShowWeekendsByDefault.value))
      modAdminDBI.Config_Save(fk_clinic, "use-practice-abn-on-accounts", CBool(chkBillingUsePracticeABNonAccounts.value))
      If rbReferralLaTeX.Value Then
         v = "l"
      Else
         v = "h"
      Endif
      modAdminDBI.Config_Save(fk_clinic, "referral_engine", v)
      modDBConnect.CommitTrans()
      EditArea_Notify_Datachanged(False)
      modAdminDBI.Config_Refresh()
      Reload()
   End If
   
End

Public Sub Form_KeyPress()
   
   Dim CtrlDown As Boolean
   
   If key.code = Key.f12 Then
      Save()
   Endif
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
         Case Asc("=")
            Try form_help.Zoom_In()
         Case Asc("-")
            Try form_help.Zoom_Out
      End Select
   End If
   
End

Public Sub Reload()
   
   Dim clinic As Collection
   Dim x As Integer
   
   EditArea_Clear
   cvwGeneralPreferences.Clear()
   clinics = modutil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Clinics_Get())
   If Not clinics.count Then Return
   For Each clinic In clinics
      cvwGeneralPreferences.Add(x, 0)
      cvwGeneralPreferences[x][0] = clinic!branch
      cvwGeneralPreferences[x][1] = Trim(clinic!street1 & " " & clinic!street2)
      cvwGeneralPreferences[x][2] = clinic!town & " " & clinic!postcode
      Inc x
   Next
   With cvwGeneralPreferences
      .MoveFirst()
      .SetFocus()
      .Item.Selected = True   
   End With
End

Public Function EditArea_Data_Valid() As Boolean
   '-------------------------------------------
   'make sure directories etc are valid paths
   '-------------------------------------------
   
   If Not Check_Dir(Trim(txtFilePathScannedDocuments.text), "incoming scans") Then
      With txtFilePathScannedDocuments
         .BackGround = Color.rgb(95, 255, 175)
         .SetFocus()
      End With
      Return False
   End If
   If Not Check_Dir(Trim(txtFilePathArchivedDocuments.text), "archived documents") Then
      With txtFilePathArchivedDocuments
         .BackGround = Color.rgb(95, 255, 175)
         .SetFocus()
      End With
      Return False
   End If
   If Not Check_Dir(Trim(txtLibraryPathNetwork.text), "library files") Then
      With txtLibraryPathNetwork
         .BackGround = Color.rgb(95, 255, 175)
         .SetFocus()
      End With
      Return False
   End If
   If Not Check_Dir(Trim(txtProductInformationPath.text), "production information PDF files") Then
      With txtProductInformationPath
         .BackGround = Color.rgb(95, 255, 175)
         .SetFocus()
      End With
      Return False
   End If
   If Not Check_Dir(Trim(txtHL7Incoming.text), "incoming HL7 files") Then
      With txtHL7Incoming
         .BackGround = Color.rgb(95, 255, 175)
         .SetFocus()
      End With
      Return False
   End If
   If Not staff_members.Exist(cmbStaffMembers.Index) Then
      Message.Info("Please specify a staff member to receive unmatched results")
      cmbStaffMembers.SetFocus()
      Return False
   End If
   
   If IsNull(fk_clinic) Then
      Message.info("Please select a clinic you wish to apply these global preferences to\nfrom the combo box at the bottom")
      cvwGeneralPreferences.SetFocus()
      Return False
   End If
   Return True
   
End

Private Function Check_Dir(sDir As String, desc As String) As Boolean
   
   Dim errmsg As String
   
   If sDir = "*notused*" Then Return True
   If IsDir(sDir) Then
      If Not Access(sDir, gb.Read And gb.Write) Then
         errmsg = "The path for &1 exists but EasyGP does not have permission to read and write it.\n\n"
         "please change the permissions for this directory on disk and try again."
         errmsg = Subst$(errmsg, desc)
         Message.Error(errmsg, "OK")
         Return False
      Else
         Return True
      Endif
   Endif
   If modAdminDBI.Check_Dir_On_Server(sDir) Then Return True
   errmsg = "Please supply a valid path for the &1. \n\n"
   "You may browse for a file path by clicking the browse button next to this textbox"
   errmsg = Subst$(errmsg, desc)
   Message.Error(errmsg, "OK")
   Return False
   
End

Public Sub EditArea_Notify_Datachanged(flag As Boolean)
   '--------------------------------------------------
   'Adds or removes padding around edit area
   'to indicate if data is changed and unsaved
   '--------------------------------------------------
   
   If Bexit Then Return
   If flag Then
      HBox_EditArea.Padding = 1
      HBox_EditArea.Background = Color.red
      tbSave.Foreground = color.red
      
   Else
      HBox_EditArea.Padding = 0
      HBox_EditArea.Background = Color.white
      tbSave.Foreground = color.black
   End If
   
End

Public Sub EditArea_TextBox_Activate()
   
   If Bexit Then Return
   Select Case Last.tag
      Case "scanned document path"
         txtFilePathArchivedDocuments.SetFocus()
   End Select
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.white
   Last.pos = 0
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   If Last.enabled Or Last.readonly Then Return
   
End

Public Sub EditArea_TextBox_Change()
   
   EditArea_Notify_Datachanged(True)
   
End

Public Sub Settings_Save()
   
   Settings["FAdminPreferencesGlobal/HSplit_GlobalSettings.layout"] = HSplit_GlobalSettings.layout
   Settings["FAdminPreferencesGlobal/VSplit_EditArea.layout"] = VSplit_EditArea.layout
   Settings["FAdminPreferencesGlobal/Help_Zoom"] = Form_Help.WebView1.Zoom
   
End

Private Sub Settings_Load()
   
   HSplit_GlobalSettings.layout = Settings["FAdminPreferencesGlobal/HSplit_GlobalSettings.layout", modUtilGUI.HSplit([915, 792])]
   VSplit_EditArea.layout = Settings["FAdminPreferencesGlobal/VSplit_EditArea.layout", modUtilGUI.VSplit([320, 609])]
   Form_Help.WebView1.Zoom = Settings["FAdminPreferencesGlobal/Help_Zoom", 1.0]
   cvwGeneralPreferences.Font = Font[Settings["FAdminPreferencesGlobal/cvwGeneralPreferences.font", "DejaVu Sans,9"]]
   
End

Public Sub Preference_Show()
   '----------------------------------------------------------------------------------------
   'User has selected one of the clinics, show the defaults for that clinic at it's address
   '----------------------------------------------------------------------------------------
   
   Dim v As Variant
   Dim clinic As Collection
   Dim sm As Collection
   Dim fk_staff_fallback As Variant
   Dim fk_staff_default_appointments As Variant
   
   If Not cvwGeneralPreferences.count Then Return
   Preference_new()
   fk_clinic = clinics[cvwGeneralPreferences_key]!fk_clinic
   clinic = clinics[cvwGeneralPreferences_key]
   lblOrganisation.Text = "Global Preferences for " & clinic!organisation
   txtOrganisation.text = clinic!organisation
   txtBranch.text = clinic!branch
   txtBranch_Street1.Text = clinic!street1
   txtBranch_Street2.Text = clinic!street2
   txtBranch_Suburb.Text = clinic!town
   txtBranch_State.Text = clinic!state
   txtBranch_Postcode.Text = clinic!postcode
   txtReplyToEmail.text = modAdminDBI.Config_Get("reply-to-email", "", Null, fk_clinic)
   txtAdminEmail.text = modAdminDBI.Config_Get("admin_email", Null)
   chkAreaOfNeed.value = modAdminDBI.Config_Get("area_of_need", False, Null, fk_clinic)
   chkUserCanAddRequests.value = modAdminDBI.Config_Get("user_can_add_requests", False, Null, fk_clinic)
   chkTranscriptionTabInClerical.value = modAdminDBI.Config_Get("transcription_tab_in_clerical", False, Null, fk_clinic)
   chkShareRequestswithEasyGPCentral.value = modAdminDBI.Config_Get("share_new_requests", False, Null, fk_clinic)
   chkShowUnbilledConsultationsInBilling.value = modAdminDBI.Config_Get("display_unbilled_consults_in_billing", False, Null, fk_clinic)
   chkGroupTasksForRoles.value = modAdminDBI.Config_Get("default_task_display_by_role", False, Null, fk_clinic)
   chkAppointmentsShowWeekendsByDefault.value = modAdminDBI.Config_Get("appointments_show_weekends", False, Null, fk_clinic)
   chkBillingUsePracticeABNonAccounts.value = modAdminDBI.Config_Get("use-practice-abn-on-accounts", False, Null, fk_clinic)
   bExit = True
   v = modAdminDBI.Config_Get("referral_engine", "h", Null, fk_clinic)
   If v = "h"
      rbReferralHTML.Value = True
      rbReferralLaTeX.Value = False
   Else
      rbReferralHTML.Value = False
      rbReferralLaTeX.Value = True
   Endif
   If modAdminDBI.Config_Get("use_ozefax", False, Null, fk_clinic) Then
      cbOzefax.Value = cbOzefax.True
   Else
      cbOzefax.Value = cbOzefax.False
   Endif
   txtFilePathScannedDocuments.text = modAdminDBI.Config_Get("document_scanning_directory", Null, Null, fk_clinic)
   txtFilePathArchivedDocuments.text = modAdminDBI.Config_Get("document_archiving_directory", "", Null, fk_clinic)
   txtHL7Incoming.text = modAdminDBI.Config_Get("hl7_incoming_directory", Null, Null, fk_clinic)
   txtHL7Outgoing.text = modAdminDBI.Config_Get("hl7_outgoing_directory", Null, Null, fk_clinic)
   fk_staff_fallback = modAdminDBI.Config_Get("fk_hl7_fallback_staff_member", -1, Null, fk_clinic)
   fk_staff_default_appointments = modAdminDBI.Config_Get("fk_default_staff_member_appointments", -1, Null, fk_clinic)
   Print fk_staff_default_appointments
   For Each sm In staff_members
      If sm!fk_staff = fk_staff_fallback Then
         cmbStaffMembers.index = cmbStaffMembers.Find(sm!wholename)
         Break
      Endif
   Next
   For Each sm In staff_members
      If sm!fk_staff = fk_staff_default_appointments Then
         cmbStaffMembersAppointmentDefaults.index = cmbStaffMembersAppointmentDefaults.Find(sm!wholename)
         Break
      Endif
   Next
   Try txtLibraryPathNetwork.text = modAdminDBI.Config_Get("library_directory_network", "", Null, fk_clinic)
   Try txtProductInformationPath.text = modAdminDBI.Config_Get("product_information_directory", "", Null, fk_clinic)
   txtSMTPServer.text = modAdminDBI.Config_Get("smtp_server", "", Null, fk_clinic)
   txtSMTPUserName.text = modAdminDBI.Config_Get("smtp_username", "", Null, fk_clinic)
   txtSMTPPassword.text = modAdminDBI.Config_Get("smtp_password", "", Null, fk_clinic)
   txtDictationsFTPServer.text = modAdminDBI.Config_Get("dictation_ftp_server", "", Null, fk_clinic)
   txtDictationsFTPUserName.text = modAdminDBI.Config_Get("dictation_ftp_username", "", Null, fk_clinic)
   txtDictationsFTPPassword.text = modAdminDBI.Config_Get("dictation_ftp_password", "", Null, fk_clinic)
   bExit = False
   EditArea_Notify_Datachanged(False)
   HBox_EditArea.Enabled = True
   
End

Public Sub Preference_new()
   
   bexit = False
   fk_clinic = Null
   lblOrganisation.Text = "Branch"
   With txtBranch
      .text = ""
     ' .ReadOnly = False
      .SetFocus
   End With
   EditArea_Notify_Datachanged(False)
   bExit = False
   
End

Public Sub EditArea_Clear()
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(VBox_Documents)
   modEditAreaHelpers.EditArea_Clear(VBox_BillingDefaults)
   modEditAreaHelpers.EditArea_Clear(VBox_ClinicalDefaults)
   modEditAreaHelpers.EditArea_Clear(VBox_LibraryDefaults)
   cmbStaffMembers.index = -1
   cmbStaffMembersAppointmentDefaults.index = -1
   bExit = False
   
End

Public Sub EditArea_Buttons_Click()
   
   Dim hCtrl As Control
   Dim aTextbox As TextBox
   
   If bexit Then Return
   Select Case Last.tag
      Case "save"
         Save()
      Case "reload"
         Reload
      Case "new"
         Preference_new()
      Case "Path to find scanned documents", "Path to place archived documents", "Path to library files network", "Path to library files local"
         If Dialog.SelectDirectory() Then Return
         Print Dialog.Path
         For Each hctrl In Last.parent.children
            If hctrl Is Textbox Then
               aTextbox = hctrl
               aTextbox.text = Dialog.Path
               Break
            End If
         Next
   End Select
   
End

Public Sub EditArea_RadioButtons_Click()
   
   If bexit Then Return
   EditArea_Notify_Datachanged(True)
   
End

Public Sub cvwGeneralPreferences_Select()
   
   cvwGeneralPreferences.MoveCurrent
   cvwGeneralPreferences_key = cvwGeneralPreferences.Item.Key
   EditArea_Clear
   Preference_Show
   
End

Public Sub cmbStaffMembers_Click()
   
   If bexit Then Return
   EditArea_Notify_Datachanged(True)
   
End

Public Sub EditArea_CheckBox_Click()
   
   If bexit Then Return
   EditArea_Notify_Datachanged(True)
   
End

Public Sub HSplit_GlobalSettings_Resize()
   
   modEditAreaHelpers.Resize_labels(VBox_Documents, lblmeasure)
   HBox_ToolBar_Right.width = HSplit_GlobalSettings.Children[1].Width
   
End

Public Sub mnuGeneralPreferences_Click()
   
   Select Case Last.tag
      Case "edit"
         VBox_Documents.Enabled = True
         VBox_BillingDefaults.Enabled = True 
         VBox_ClinicalDefaults.Enabled = True   
         VBox_LibraryDefaults.Enabled = True 
         
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwGeneralPreferences, "FAdminPreferencesGlobal")
   End Select
   
Catch
   Return
   
End

Public Sub cvwGeneralPreferences_Menu()
   
   If cvwGeneralPreferences.count Then
      mnuGeneralPreferences.Popup()
   Endif
   
End

Public Sub Form_Resize()
   
   HSplit_GlobalSettings_Resize()
   
End

Public Sub EditArea_TextBox_KeyPress()
   
End

Public Sub Vbox_Staff1_MouseDown()
   
End

Public Sub cmbStaffMembersAppointmentDefaults_Click()

   EditArea_Notify_Datachanged(True)

End

Public Sub TabStrip1_Click()
    
   
  Form_Help.Help_Show(Help_files[Last.index])

End
