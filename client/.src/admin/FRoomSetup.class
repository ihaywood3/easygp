' Gambas class file

' Copyright (C) 2008-2012 Dr. Richard Terry, Dr. I Haywood

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
' A module to allow setting up of room preferences such as printers
'----------------------------------------------------------------------
Private allprinters As String[]
Private audios As Collection
Private FHelp As FHtmlViewer
Private Settings_Section As String

Public Sub form_Open()
   
   Init()
   
End

Public Sub form_Close()
   
   Settings_Save()
   
End

Public Sub Init()
   
   Dim s As String
   Dim i As Integer
   Dim sLastDeviceName As String
   
   Settings_Section = "Admin_Room_Setup"
   With FHelp = New FHtmlViewer(Vbox_Help)
      .tbWebBrowserZoomIn.Visible = True
      .tbWebBrowserZoomOut.Visible = True  
   End With
   FHelp.Help_Show("room-setup.html")
   
   allprinters = modPrinting.Printers_Load()
   audios = FDictaphone.GetSoundCards()
   For Each s In audios
      Print audios.Key
      cmbAudioDevice.Add(audios.Key)
      If Len(audios.key) > Len(sLastDeviceName) Then
         sLastDeviceName = audios.Key
      Endif
   Next
   lblMeasure.text = "  " & sLastDeviceName & " " 
   
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblMeasure)
   i = cmbAudioDevice.Find(Settings["Audio/device", "Default"])
   Try cmbAudioDevice.Index = cmbAudioDevice.Find(i)
   LoadPrinterOptions(cmbPlain, tbPlain, "plain")
   LoadPrinterOptions(cmbScript, tbScript, "script")
   LoadPrinterOptions(cmbLong, tbLong, "long")
   LoadPrinterOptions(cmbRequest, tbRequest, "request")
   Try Settings_Load()
   
End

Private Sub LoadPrinterOptions(cmb As ComboBox, opts As TextBox, printername As String)
   
   Dim i As String
   
   cmb.Add("Default")
   For Each i In allprinters
      cmb.Add(i)
   Next
   cmb.Index = cmb.Find(Settings[Subst$("Printers/&1", printername), "Default"])
   opts.Text = Settings[Subst$("Printers/&1_options", printername), ""]
   
End

Public Sub Settings_Save()
   
   Settings[Settings_Section & "/Help_Zoom"] = FHelp.WebView1.Zoom
   Settings[Settings_Section & "/HSplit_ClinicRooms.Layout"] = HSplit_ClinicRooms.Layout
   Settings[Settings_Section & "/VSplit_EditARea.Layout"] = VSplit_EditARea.Layout
   
End

Private Sub Settings_Load()
   
   FHelp.WebView1.Zoom = Settings[Settings_Section & "/Help_Zoom"]
   HSplit_ClinicRooms.Layout = Settings[Settings_Section & "/HSplit_ClinicRooms.Layout"]
   VSplit_EditARea.Layout = Settings[Settings_Section & "/VSplit_EditARea.Layout"]
   cmbAudioDevice.index = cmbAudioDevice.Find(Settings["Audio/device"])
End

Public Sub tbTestPrinter_Click()
   
   Inc Application.Busy
   PrintTestPage(cmbPlain, tbPlain, "plain", Last.tag)
   PrintTestPage(cmbScript, tbScript, "script", Last.tag)
   PrintTestPage(cmbLong, tbLong, "long", Last.tag)
   PrintTestPage(cmbRequest, tbRequest, "request", Last.tag)
   Dec Application.Busy
   
End

Private Sub PrintTestPage(cmb As ComboBox, opts As TextBox, printername As String, tag As String)
   
   Dim lpr_opts_str As String
   Dim dvips_opts_str As String
   Dim cmd As String
   Dim f As File
   Dim fname As String
   Dim coll As New Collection
   
   If printername <> tag Then Return ' only do the clicked-on widget
   lpr_opts_str = cmb.Text
   dvips_opts_str = ""
   If lpr_opts_str = "Default" Then
      lpr_opts_str = ""
   Else
      lpr_opts_str = Subst$("-P &1 ", lpr_opts_str)
   Endif
   If opts.Text <> "" Then
      coll = modPrinting.SplitOptions(opts.Text) 
      lpr_opts_str &= coll!lpr
      dvips_opts_str = coll!dvips
   Endif
   ' we can't use this filename as a parameter to lpr
   ' as in production system all application files
   ' are wrapped up in the executable file, only 
   ' gambas can read them
   fname = Temp$("example-print")
   f = Open fname & ".tex" For Write Create
   Print #f, File.Load(modUtil.Find_File("templates/test-printing.tex"))
   Close #f
   cmd = modUtil.FindProgram("latex", "texlive-latex-base")
   If IsNull(cmd) Then 
      Return
   Endif
   cmd = "cd `dirname " & fname & "` ; " & cmd 
   cmd &= " \\\\nonstopmode\\\\input example-print.tmp.tex ; "
   cmd &= Subst$("dvips example-print.tmp.dvi &1 -o", dvips_opts_str)
   cmd &= Subst$(" '!lpr &1'", lpr_opts_str)
   Log.DebugMsg("Printing using command " & cmd)
   Shell cmd Wait
   Try Kill fname & ".tex"
   Try Kill fname & ".dvi"
   Try Kill fname & ".aux"
   Try Kill fname & ".log"
   
Catch
   Message.Error(Error.Text, "OK")
   
End

Public Sub tbSave_Click()
   
   '--------------------------------------------------------
   'Save defaults for a room - at this stage - just printers
   '--------------------------------------------------------
   Settings.Clear("Printers")
   Settings["Audio/device"] = cmbAudioDevice.Text
   SavePrinterOptions(cmbPlain, tbPlain, "plain")
   SavePrinterOptions(cmbScript, tbScript, "script")
   SavePrinterOptions(cmbLong, tbLong, "long")
   SavePrinterOptions(cmbRequest, tbRequest, "request")
   
End

Private Sub SavePrinterOptions(cmb As ComboBox, opts As TextBox, printername As String)
   
   If cmb.Text = "Default" Then
      Settings[Subst$("Printers/&1", printername)] = Null
   Else
      Settings[Subst$("Printers/&1", printername)] = cmb.Text
   Endif
   
   If Trim$(opts.Text) = "" And If IsNull(Settings[Subst$("Printers/&1_options", printername)]) Then
      ' do nothing
   Else 
      Settings[Subst$("Printers/&1_options", printername)] = opts.Text
   Endif
   
   Settings.Save()
   
End

Public Sub cmbAudioDevice_Click()

    Settings["Audio/device"] = cmbAudioDevice.Text

End

Public Sub tbTestSound_Click()

   FDictaphone.TestSound(cmbAudioDevice.Text)

End
