' Gambas module file

' Copyright (C) 2008-2014 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
Private prefs As Collection
Private prefs_staff As Collection

Public Function Pathways_Exist_And_Writable(fk_clinic As Integer) As Boolean
   '---------------------------------------------------------------------------------------------
   'check if EasyGP has Access and write-access to the necessary pathways to be able to function
   '  txtFilePathScannedDocuments.text = modAdminDBI.Config_Get("document_scanning_directory", "/var/lib/easygp/scanning", Null, fk_clinic)
   '    txtFilePathArchivedDocuments.text = modAdminDBI.Config_Get("document_archiving_directory", "", Null, fk_clinic)
   '    txtHL7Incoming.text = modAdminDBI.Config_Get("hl7_incoming_directory", "/var/lib/easygp/hl7/incoming", Null, fk_clinic)
   '    txtHL7Outgoing.text = modAdminDBI.Config_Get("hl7_outgoing_directory", "/var/lib/easygp/hl7/outgoing", Null, fk_clinic)
   '    fk_staff_fallback = modAdminDBI.Config_Get("fk_hl7_fallback_staff_member", -1, Null, fk_clinic)
   '    For Each sm In staff_members
   '       If sm!fk_staff = fk_staff_fallback Then
   '          cmbStaffMembers.index = cmbStaffMembers.Find(sm!wholename)
   '          Break
   '       Endif
   '    Next
   '    Try txtLibraryPathNetwork.text = modAdminDBI.Config_Get("library_directory_network", "", Null, fk_clinic)
   '    Try txtProductInformationPath.text = modAdminDBI.Config_Get("product_information_directory", "", Null, fk_clinic)
   '    txtSMTPServer.text = modAdminDBI.Config_Get("smtp_server", "", Null, fk_clinic)
   '    txtSMTPUserName.text = modAdminDBI.Config_Get("smtp_username", "", Null, fk_clinic)
   '    txtSMTPPassword.text = modAdminDBI.Config_Get("smtp_password", "", Null, fk_clinic)
   '    txtDictationsFTPServer.text = modAdminDBI.Config_Get("dictation_ftp_server", "", Null, fk_clinic)
   '    txtDictationsFTPUserName.text = modAdminDBI.Config_Get("dictation_ftp_username", "", Null, fk_clinic)
   '    txtDictationsFTPPassword.text = modAdminDBI.Config_Get("dictation_ftp_password", "", Null, fk_clinic)
   ' 
   ' Returns True if all is ok
   '-------------------------------------------------------------------------------------------- 
   
   Dim params As New Collection[]
   Dim param As Collection 
   Dim sMsg As String 
   Dim sDir As String
   Dim bParametersMissing As Boolean
   Dim fk_staff_fallback As Integer
   Dim staff_members As Collection
   Dim sm As Collection  
   Dim user_role As String
   
   
   params.Add(["config_item": "Incoming Documents", "config": "document_scanning_directory"])
   params.Add(["config_item": "Archived Documents", "config": "document_archiving_directory"])
   params.Add(["config_item": "Incoming HL7", "config": "hl7_incoming_directory"])
   'params.Add(["config_item": "Outgoing HL7", "config": "hl7_outgoing_directory"])
   params.Add(["config_item": "Library Network", "config": "library_directory_network"])
   params.Add(["config_item": "Product Information", "config": "product_information_directory"])
   For Each param In params
      sDir = modAdminDBI.Config_Get(Param!config, Null, Null, fk_clinic)
      param!val = sDir
      Param!dotcolour = "green"
      If sDir <> "*notused*" And If modFiles.Dir_Status(Param!config, fk_clinic) = modFiles.DirNotAvail Then
        Param!dotcolour = "red"
        bParametersMissing = True
      Endif
   Next  
   '----------------------
   'Default staff member
   '----------------------
   param = New Collection
   Param!config_item = "Default Staff for HL7 Receipt"
   fk_staff_fallback = modAdminDBI.Config_Get("fk_hl7_fallback_staff_member", -1, Null, fk_clinic)
   staff_members = modInboxDBI.Inbox_Staff_Get()
   For Each sm In staff_members
      If sm!fk_staff = fk_staff_fallback Then
         Param!val = sm!wholename
         Param!dotcolour = "green"
         Break
      Endif
   Next
   If IsNull(Param!val) Then
      Param!val = "Not Allocated"
      Param!dotcolour = "red"
      bParametersMissing = True  
   Endif
   params.Add(param)
   If bParametersMissing Then    
      sMsg = "<P ALIGN='center'><B>Default Parameters Missing<BR></P>" 
      sMsg &= "<TABLE WIDTH=100% BORDER=1  CELLPADDING=5 CELLSPACING=0> <COL WIDTH=45%><COL WIDTH=45%>"
      If params.count > 0 Then
         For Each param In params
            sMsg &= "<TR VALIGN=TOP>"
            sMsg &= "<TD width=45%><P><B>" & param!config_item & "</B></P></TD>"
            sMsg &= "<TD width=45%><P><B>" & param!val & "</B></P></TD>"
            sMsg &= "<TD width=10%><P><B><span style=\"color:" & Param!dotcolour & ";\">&#x2B24;</span></B></P></TD>"
         Next
         sMsg &= "</TR>"
      Endif
      sMsg &= "</TABLE>"
      user_role = modDBConnect.currentUser!role
      sMsg &= "<P><B>User Role:</B>" & user_role
      If user_role <> "sysadmin" Then
         If modDBConnect.Is_Superuser() Then
            sMsg &= " with postgres superuser priviledges<P>"
         Else   
            sMsg &= "<P>Af you are not a sysadmin or a postgres superuser then you should get the SysAdmin to logon to this database to correct the problems.<P>"
         '   Message.Info(sMsg)
         ''   Return 
         End If
      End If   
      sMsg &= "Please go to the Admin.GlobalPreferences section of the program and fix these vital configuration items. Until this is done sections which rely on these pathways will be disabled</P>" 
      Message.Info(sMsg)
      Return True
   End If   
   Return True 
End

Public Function Check_Dir_On_Server(sDir As String) As Boolean
   Dim r As Result
   
   r = modDBConnect.exec_query("select admin.check_dir(&1) as chk_dir", [sDir])
   Return r!chk_dir 
   
End


Public Function Clinical_Toolbuttons_Get(fk_staff As Integer) As Collection
   '-----------------------------------------------------------------------------------
   'Gets toolbuttons user wants to be viewing in Fclinical, in order they have selected
   '-----------------------------------------------------------------------------------
   
   Return modDBConnect.exec_query_collection("Select * from admin.vwStaffToolbarButtons where fk_staff =" & fk_staff & " And deleted = False")
   
End

Public Sub Toolbuttons_Add_All(fk_staff As Integer)
   '-----------------------------------------------------------------------------
   'put in default toolbar for clinical users who are doctors 'fixme later nurses
   '-----------------------------------------------------------------------------
   '    Create TABLE admin.staff_clinical_toolbar
   ' (
   '   pk serial Not Null,
   '   fk_module integer Not Null,
   '   fk_staff integer Not Null,
   '   display_order integer Not Null,
   '   deleted boolean Default False,
   '   CONSTRAINT staff_clinical_toolbar_pkey PRIMARY KEY(pk)
   ' )
   ' With (
   '   OIDS = False
   ' );
   ' ------------------------------------------------------------------------------
   
   Dim toolbar_button As CRow
   Dim clinical_modules As Collection
   Dim clinical_module As Collection
   Dim display_order As Integer
   
   clinical_modules = modDBConnect.exec_query_collection("Select * from admin.lu_clinical_modules where in_use is True") 'excludes skin excision (not used) and dictaphone"
   For Each clinical_module In clinical_modules
      toolbar_button = New CRow  
      toolbar_button!fk_module = clinical_module!pk
      toolbar_button!fk_staff = fk_staff
      toolbar_button!display_order = display_order
      toolbar_button.Save("admin.staff_clinical_toolbar", "fk_toolbutton")
      Inc display_order
   Next
   
End

Public Sub Prefs_Staff_Reset()
   
   prefs_staff = Null
   
End

Public Function Clinics_Get() As Collection
   '---------------------------------------------------
   'Returns a collection of clinics in our organisation
   '---------------------------------------------------
   
   Return modDBConnect.exec_query_collection("Select * from admin.vwClinics")
   
End

Public Function Clinical_Toolbuttons_Remove(pk_staff_clinical_toolbar As Integer)
   '-----------------------------------------------------------------------------
   'Deletes a record from the table containing lists of toolbuttons for each user
   '-----------------------------------------------------------------------------
   
   modDBConnect.exec_query("Update admin.staff_clinical_toolbar set deleted = True  WHERE pk = " & pk_staff_clinical_toolbar)
   modDBConnect.CommitTrans()
   
End

Public Sub Clinical_Toolbuttons_Save(pnl As Panel, fk_staff As Integer, toolbuttons As Collection)
   '---------------------------
   'Saves the users toolbuttons
   '   pk serial NOT NULL,
   '   fk_module integer NOT NULL,
   '   fk_staff integer NOT NULL,
   '   display_order integer NOT NULL,
   '
   
   'fixme only do this if they have changed back in Fclinical
   '---------------------------
   Dim c As Collection
   Dim hCtrl As Control
   Dim tb As ToolButton
   Dim x As Integer
   Dim sql As String
   Dim R As Result
   
   For Each Hctrl In pnl.Children
      
      'For each toolbutton on the panel
      If hctrl Is ToolButton Then
         tb = hctrl
         If tb.tag <> "New General Notes" Then
            c = New Collection
            c!fk_module = tb.tag
            c!fk_staff = fk_staff
            c!display_order = x
            sql = "Select * from admin.staff_clinical_toolbar where fk_staff =" & fk_staff & " AND fk_module=" & tb.tag
            R = modDBConnect.exec_query(sql)
            If R.count Then
               modDBConnect.update("admin.staff_clinical_toolbar", ToolButtons[tb.tag], c, "fk_staff_clinical_toolbar")
            Else
               modDBConnect.insert("admin.staff_clinical_toolbar", c)
            End If
            Inc x
         End If
      End If
   Next
   modDBConnect.CommitTrans()
   
End

Public Function Clinical_Modules_Get_Names() As Collection
   '-----------------------------------------------
   'Returns collection of names of clinical modules
   'e.g Allergies, Past History, Workcover etc
   '-----------------------------------------------
   
   Return modDBConnect.exec_query_collection("Select * from admin.lu_clinical_modules where in_use is True order by name")
   
End

Public Function Clinical_Module_Save(olddata As Collection, fk_module As Integer, newdata As Collection) As Integer
   '-------------------------------------------------------
   'Saves any new or changed module data - names/icons path
   '-------------------------------------------------------
   
   If fk_module = 0 Then
      Return modDBConnect.insert("admin.lu_clinical_modules", newdata)
   Else
      modDBConnect.update("admin.lu_clinical_modules", olddata[fk_module], newdata)
   Endif
   
End

Public Function Roles_Get() As Collection
   
   Return modCache.Query("admin.lu_roles", "Select pk as pk_role, role  from admin.lu_staff_roles")
   
End

Public Function Staff_Types_Get() As Collection
   '----------------------------------------------------------------------------
   'Returns a collection of staff type eg 'medical', 'nursing', 'administrative'
   '----------------------------------------------------------------------------
   
   Return modCache.Get("admin.lu_staff_type")
   
End

Public Function Config_Get_Staff_Member(config As String, Optional default_value As Variant = "no-default", local_setting As String = Null, fk_clinic As Integer = 0, fk_staff As Integer = 0) As Variant
   ' obtains a database-based configuration value
   ' default_value is returned if not found
   ' local_setting is a value to check in the Gambas Settings collection, this is also if present and no global config exist
   ' fk_clinic is the associated clinic for the config
   ' if unset, the clinic of the currently logged-in user is used
   
   Dim v As String
   
   If fk_clinic = 0 Then
      fk_clinic = modDBConnect.currentUser!fk_clinic
   Endif
   If fk_staff = 0 Then
      fk_staff = modDBConnect.currentUser!fk_staff
   Endif
   If IsNull(prefs_staff) Then
      LoadPrefs_staff(fk_staff)
   End If
   If prefs_staff.Exist(fk_staff) And If prefs_staff[fk_staff].Exist(config) Then
      Return prefs_staff[fk_staff][config]!value
   Endif
   If IsNull(prefs) Then LoadPrefs()
   If prefs.Exist(0) And If prefs[0].Exist(config) Then
      Return prefs[0][config]!value
   Endif
   If IsNull(local_setting) Then
     CheckDefault(config, default_value)
     Return default_value
   Endif
   v = Settings[local_setting, Null]
   If IsNull(v) Then
      CheckDefault(config, default_value)
      Return default_value
   Else
     Return PrefCast(v)
   Endif
   
End

Public Function Config_Get(config As String, Optional default_value As Variant = "no-default", local_setting As String = Null, fk_clinic As Integer = 0) As Variant
   ' obtains a database-based configuration value
   ' default_value is returned if not found
   ' local_setting is a value to check in the Gambas Settings collection, this is also if present and no global config exist
   ' fk_clinic is the associated clinic for the config
   ' if unset, the clinic of the currently logged-in user is used
   
   Dim v As String
   
   If fk_clinic = 0 And If Not IsNull(modDBConnect.currentUser) Then
      fk_clinic = modDBConnect.currentUser!fk_clinic
   Endif
   If IsNull(prefs) Then LoadPrefs()
   If prefs.Exist(fk_clinic) And If prefs[fk_clinic].Exist(config) Then
      Return prefs[fk_clinic][config]!value
   Endif
   If Not IsNull(local_setting) Then
      v = Settings[local_setting, Null]
      If Not IsNull(v) Then Return PrefCast(v)
   Endif
   If prefs.Exist(0) And If prefs[0].Exist(config) Then
     Return prefs[0][config]!value
   Endif
   CheckDefault(config, default_value)
   Return default_value
   
End

' return the full collection of config metadata
Public Sub Config_Get_Full(config As String, Optional fk_clinic As Integer = 0) As Collection

   If fk_clinic = 0 And If Not IsNull(modDBConnect.currentUser) Then
      fk_clinic = modDBConnect.currentUser!fk_clinic
   Endif   
   If IsNull(prefs) Then LoadPrefs()
   If prefs.Exist(fk_clinic) And If prefs[fk_clinic].Exist(config) Then
      Return prefs[fk_clinic][config]
   Endif
   If prefs.Exist(0) And If prefs[0].Exist(config) Then
     Return prefs[0][config]
   Endif
   Return Null
End

Private Sub CheckDefault(config As String, def As Variant)
   
   Dim s As String
   
   If def = "no-default" Then
      ' special value, we shold crack it at this point
      s = Subst$("Configuration option &1 unset when it should not be", config)
      Log.WarningMsg(s)
      Error.Raise(s)
   Endif
   
End

Public Sub Config_Refresh()
   
   prefs = Null
   
End

Private Sub LoadPrefs()
   
   Dim coll As Collection
   Dim fk_clinic As Variant
   
   prefs = New Collection
   For Each coll In modDBConnect.exec_query_collection("select * from admin.vwpreferences where fk_staff is null")
      If IsNull(coll!fk_clinic) Then   
         fk_clinic = 0
      Else
         fk_clinic = coll!fk_clinic
      Endif
      If Not prefs.Exist(fk_clinic) Then prefs[fk_clinic] = New Collection
      coll!value = PrefCast(coll!value)
      prefs[fk_clinic][coll!name] = coll
   Next
   
End

Private Sub LoadPrefs_staff(fk_staff As Integer)
   
   Dim coll As Collection
   
   prefs_staff = New Collection
   For Each coll In modDBConnect.exec_query_collection("select * from admin.vwpreferences where fk_staff=" & fk_staff)
      If Not prefs_staff.Exist(coll!fk_staff) Then prefs_staff[coll!fk_staff] = New Collection
      coll!value = PrefCast(coll!value)
      prefs_staff[coll!fk_staff][coll!name] = coll
   Next
   
End

Private Function PrefCast(s As String) As Variant
   
   Dim re As Regexp
   
   If s = "true" Or s = "True" Then Return True  'not sure how but True is possible instead of true
   If s = "false" Or s = "False" Then Return False
   If s = "" Then Return Null
   re = New Regexp(s, "^[0-9]+$")
   If re.Offset <> -1 Then Return CInteger(s)
   Return s
   
End

Public Sub Config_Save_staff_member(fk_clinic As Integer, config As String, value As Variant, fk_staff As Integer)
   
   Dim $result As Result
   
   If TypeOf(value) = gb.Boolean Then
      If value Then
         value = "true"
      Else
         value = "false"
      Endif
   Else
      value = Str$(value)
   Endif
   If value = "" Or value = "-1" Then
      modDBConnect.exec_query(Subst$("delete from admin.global_preferences where fk_clinic = &1 and \"name\" = $$&2$$", fk_clinic, config))
   Else
      $result = modDBConnect.exec_query(Subst$("select 1 from admin.global_preferences where \"name\" = $$&1$$ and fk_clinic = &2 and fk_staff=&3", config, fk_clinic, fk_staff))
      If $result.Count = 0 Then
         modDBConnect.exec_query(Subst$("insert into admin.global_preferences (value,\"name\",fk_clinic, fk_staff) values ($$&1$$,$$&2$$,&3,&4)", value, config, fk_clinic, fk_staff))
      Else
         modDBConnect.exec_query(Subst$("update admin.global_preferences set value=$$&1$$ where \"name\" = $$&2$$ and fk_clinic = &3 and fk_staff= &4", value, config, fk_clinic, fk_staff))
      Endif
   Endif
   
End

Public Sub Config_Save(fk_clinic As Integer, config As String, value As Variant)
   
   Dim $result As Result
   
   If TypeOf(value) = gb.Boolean Then
      If value Then
         value = "true"
      Else
         value = "false"
      Endif
   Else
      value = Str$(value)
   Endif
   If value = "" Or value = "-1" Then
      modDBConnect.exec_query(Subst$("delete from admin.global_preferences where fk_clinic = &1 and \"name\" = $$&2$$", fk_clinic, config))
   Else
      $result = modDBConnect.exec_query(Subst$("select 1 from admin.global_preferences where \"name\" = $$&1$$ and fk_clinic = &2", config, fk_clinic))
      If $result.Count = 0 Then
         modDBConnect.exec_query(Subst$("insert into admin.global_preferences (value,\"name\",fk_clinic) values ($$&1$$,$$&2$$,&3)", value, config, fk_clinic))
      Else
         modDBConnect.exec_query(Subst$("update admin.global_preferences set value=$$&1$$ where \"name\" = $$&2$$ and fk_clinic = &3", value, config, fk_clinic))
      Endif
   Endif
   
End

Public Function Clinics_Setup() As Boolean
   
   If modContactsDBI.Clinics_Get().Count > 0 Then
      Return True
   Else
      Return False
   Endif
   
End

Public Function Clinic_Save(clinic As Collection) As Integer
   '-------------------------------
   'save branch address as a clinic
   '-------------------------------
   
   If IsNull(clinic!fk_clinic) Then
      clinic!fk_clinic = modDBConnect.insert("admin.clinics", clinic)
   Else
   End If
   modContactsDBI.Staff_Cache_Wipe()
   modDBConnect.CommitTrans()
   Return clinic!fk_clinic
   
End
