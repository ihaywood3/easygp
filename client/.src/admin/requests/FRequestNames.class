' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-----------------------------------------------------------------------------------
' PURPOSE         A module to assist in maintenance of request names
' DATABASE        See clin_requests schema and associated tables lu_requests and
'                 lu_request_type
' HOW THIS WORKS  The pre-defined request categories are loaded into one list
'                 when selected, all requests associated with this type are loaded
'                 into the adjacent list - (see its popup menu for actions
'                 mnRequests_Click()
'                 New terms added via the editing area as usual, or mod's made.
' BUGS            Please email to rterry@pacific.net
' CAVEATS         Until I put in referential integrity deletion will fuck any ordered
'                 requests, such is life with a pre-alpha program! You fix it
'-----------------------------------------------------------------------------------

Private RequestTypes As Collection
Private RequestType As Collection 
Private REquests As Collection
Private CurrentRequest As Collection
Private FHelp As FHtmlViewer
Private pk_view As Integer
Private fk_request As Integer
Private fk_lu_request_type As Integer
Private bExit As Boolean
Private Member As Collection 

Public Sub Init()
   '------------------------------------------------------------------------------
   'Basic initialisation of the module
   '  - load settings to make splits correct sizes
   '  - get collection of all types of requests eg audiology, pathology, imaging
   '  - display these in left hand list
   '  - load the basic help page
   '  - lblMeasure set to widest text expected in edit area for re-sizing purposes
   '------------------------------------------------------------------------------
   
   Dim x As Integer
   
   Settings_Load()           
   RequestTypes = modUtil.LoadCombo(cmbRequesttypes, modRequestsDBI.RequestTypes_Get(), "type")
   lvRequestTypes.Clear()
   For Each RequestType In RequestTypes 
      lvRequestTypes.Add(x, RequestType!type)
      Inc x
   Next
   lvRequestTypes.MoveFirst()
   lvRequestTypes.Item.Selected = True
   lvRequestTypes.SetFocus()
   With cvwRequestNames
      .Columns.count = 1
   End With
   With FHelp = New FHtmlViewer(Vbox_Help)
      .tbWebBrowserZoomIn.Visible = True
      .tbWebBrowserZoomOut.Visible = True
      .Help_Show("maintaining-requests.html")  
   End With
   lblMeasure.text = "  Lateralisation  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Inner, lblMeasure)
   modEditAreaHelpers.Resize_label(lblButtons, lblMeasure)
   EditArea_Clear()
   
End

Private Sub Settings_Load()
   
   HSplit_Main.layout = Settings["FRequestNames/HSplit_Main.layout", modUtil.HSplit([793, 910])]
   VSplit_Main.layout = Settings["FRequestNames/VSplit_Main.layout", modUtil.VSplit([173, 755])]
   HSplit_Request_Defaults.layout = Settings["FRequestNames/HSplit_Request_Defaults.layout", modUtil.HSplit([184, 608])]
   cvwRequestNames.font = Font[Settings["FRequestNames/cvwRequestNames.font", "DejaVu Sans,9"]]
   lvRequestTypes.font = cvwRequestNames.Font

End

Public Sub Settings_Save()
   
   Settings["FRequestNames/HSplit_Request_Defaults.layout"] = HSplit_Request_Defaults.layout
   Settings["FRequestNames/VSplit_Main.layout"] = VSplit_Main.layout
   Settings["FRequestNames/HSplit_Main.layout"] = HSplit_Main.layout
   HSplit_Request_Defaults.layout = [184, 608]
   
End

Public Sub EditArea_Clear()
   '--------------------------------------
   'Clear the input area, reset basic keys
   '--------------------------------------
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_Inner)
   pk_view = 0
   fk_request = 0
   fk_lu_request_type = 0
   bExit = False
   EditArea_Notify_DataChange(False)
   lblEditAreaHeading.Foreground = Color.Black
   lblEditAreaHeading.text = "Request Name"
   cmbRequesttypes.index = -1
   Vbox_EditArea_Inner.Enabled = False 
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   
   If bExit Then Return 
   If Flag Then 
      Vbox_EditArea_Outer.Padding = 1
      tbSave.Foreground = Color.Red
   Else
      Vbox_EditArea_Outer.Padding = 0
      tbSave.Foreground = Color.Black
      
   End If
   
End

Public Sub lvRequestTypes_Select()
   '------------------------------------------------
   'If request type list selected, re-set filter
   'default to displaying all requests of that type
   '-----------------------------------------------
   
   If Bexit Then Return 
   txtFilter.text = ""
   Vbox_EditArea_Inner.Enabled = False 
   EditArea_Clear()
   Requests_Refresh()
   
End

Public Sub Reload()
   
   EditArea_Clear()
   tbSave.Enabled = False  
   Requests_Refresh()
   
End

Public Sub Requests_Refresh()
   '-----------------------------------------------------
   'Fetches all names for a particular request category 
   'ie clin_request.lu_request_type, unless the checkbox
   'to indicate search all has been checked
   '-----------------------------------------------------
   
   If chkSearchAll.value = False Then fk_lu_request_type = RequestTypes[lvRequestTypes.Item.key]!pk
   lvRequestTypes.MoveCurrent()
   Requests = modRequestsDBI.Requests_Get_By_Request_Type(fk_lu_request_type, Trim(txtFilter.text))
   cvwRequestNames.Clear()
   For Each Member In Requests
      cvwRequestNames.Add(Member!pk, 0)
      cvwRequestNames[Member!pk][0] = Member!item
   Next
   lblRequestNames.text = "Requests"
   If REquests.count Then
      lblRequestNames.text &= " (" & Str$(Requests.count) & ")"
   Endif
   
End

Public Sub txtFilter_KeyRelease()
   
   EditArea_Clear()
   Requests_Refresh()
   
End

Public Sub cvwRequestNames_Menu()
   
   If Last.count Then mnuRequests.Popup()
   
End

Public Sub mnuRequests_Click()
   
   Select Case Last.tag
      Case "edit"
         Request_Edit()
      Case "delete"
         Request_Delete()
      Case "help"
         Request_Help()
      Case "font'"
         modUtil.Columnview_SetFont(cvwRequestNames, "FRequestNames")
   End Select
   
End

Public Sub Request_Save()
   '-----------------------------------------------------------------------
   'Saves a new or  modified request
   'Decision support and instructions to accompany request not implemented
   '----------------------------------------------------------------------
   '   pk serial NOT NULL,
   '   fk_type integer NOT NULL, -- foreign key to clin_requests.lu_Request_type table
   '   item text NOT NULL, -- the actual request eg Xray of wrist
   '   fk_laterality integer DEFAULT 0, -- foreign key to common.lu_laterality, ie left/right/both
   '   fk_decision_support integer DEFAULT 0, -- foreign key to decision_support.decision_support table neither of which exist yet
   '   fk_instruction integer DEFAULT 0, -- foreign key to lu_instructions ie patient instructions for a particular test
   '-----------------------------------------
   
   If Vbox_EditArea_Outer.Padding = 0 Then Return
   If Not Request_IsValid() Then Return
   Inc Application.Busy
   ' RequestTypes = modUtil.LoadCombo(cmbRequesttypes, modRequestsDBI.RequestTypes_Get(), "type")
   CurrentRequest = New Collection
   
   If pk_view Then CurrentRequest!pk = pk_view
   CurrentRequest!item = Trim(txtRequestName.text)
   CurrentRequest!fk_lu_request_type = RequestTypes[lvRequestTypes.Item.Key]!pk
   If rbLateralityBoth.value = True Then CurrentRequest!fk_laterality = const.LateralityBoth
   If rbLateralityNone.value = True Then CurrentRequest!fk_laterality = const.LateralityNone
   '-----------------------------------
   'First check this is not a duplicate
   '-----------------------------------
   If pk_view = 0 Then 
      If modRequestsDBI.Request_Item_?exists(CurrentRequest!item, CurrentRequest!fk_lu_request_type) Then 
         Dec Application.Busy
         Message.info("The request you wish to save:\n\n" & CurrentRequest!item & " - " & cmbRequesttypes.Text & "\n\nalready exists In the Database.")
         Return
      End If   
   Endif
   modDBConnect.BeginTrans()
   modRequestsDBI.Request_Save(Requests, pk_view, CurrentRequest)                                                    
   modDBConnect.CommitTrans()
   Reload()
   Dec Application.Busy
   
End

Public Function Request_IsValid() As Boolean
   '-------------------------------------
   'At mimumum a request must have a name
   '-------------------------------------   
   
   If Trim(txtRequestName.text) = "" Then
      txtRequestName.SetFocus()
      Return False
   Endif
   Return True
   
End

Public Sub Request_Edit()
   '----------------------------------------------------
   'Allow editing of the currently selected request name
   '----------------------------------------------------   
   
   lblEditAreaHeading.text = "Edit Existing Request Name"
   lblEditAreaHeading.Foreground = Color.Red
   Vbox_EditArea_Inner.Enabled = True  
   tbSave.Enabled = True   
   
End

Public Sub Request_Display()
   '--------------------------------------------------------------------
   'Display's the currently highlighted request without enabling editing
   '--------------------------------------------------------------------
   
   EditArea_Clear()
   tbSave.Enabled = False  
   cvwRequestNames.MoveCurrent
   fk_request = Requests[cvwRequestNames.Item.key]!pk '?not used
   pk_view = Requests[cvwRequestNames.Item.key]!pk
   bExit = True
   
   cmbRequesttypes.index = cmbRequesttypes.Find(lvRequestTypes.Item.Text)
   txtRequestName.text = Requests[cvwRequestNames.Item.key]!item
   Select Case Requests[cvwRequestNames.Item.key]!fk_laterality
      Case const.LateralityBoth
         rbLateralityBoth.value = True
      Case const.LateralityNone
         rbLateralityNone.Value = True
   End Select
   bExit = False  
   
End

Public Sub Request_Delete()
   '----------------------------------------
   'Delete the currently highlighted request
   '----------------------------------------   
   
   Dim sMsg As String
   
   cvwRequestNames.MoveCurrent
   sMsg = "Request:" & cvwRequestNames.Item.text & "\n\n"  
   sMsg &= "Are you sure you wish to delete this request"
   If Message.Warning(sMsg, "Yes", "No") = 2 Then Return
   modDBConnect.BeginTrans()
   modRequestsDBI.Request_Delete(Requests[cvwRequestNames.Item.key]!pk)
   modDBConnect.CommitTrans()  
   Requests_Refresh()
   
End

Public Sub Request_Help()
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "new"
         Request_New()
      Case "save"
         Request_Save()
   End Select
   
End

Public Sub Request_New()
   
   EditArea_Clear()
   tbSave.Enabled = True
   lblEditAreaHeading.text = "Add new request name"
   lblEditAreaHeading.Foreground = Color.Red
   Vbox_EditArea_Inner.Enabled = True
   rbLateralityNone.value = True 'default to no laterality
   ' cmbRequesttypes.index = cmbRequesttypes.Find(RequestTypes[lvRequestTypes.Item.key]!type)
   
End

Public Sub chkSearchAll_Click()
   
   If Last.value = True Then
      bExit = True
      lvRequestTypes.UnSelectAll()
      bexit = False  
   Endif
   EditArea_Clear()
   Requests_Refresh()
   
End

Public Sub cvwRequestNames_Select()
   
   Dim x As Integer
   
   Vbox_EditArea_Inner.Enabled = False       'no data entry unless explicity selecte Edit
   EditArea_Clear()                          'clear input area each time
   cvwRequestNames.MoveCurrent               'set internal cursor
   bExit = True
   lvRequestTypes.UnSelectAll()           'remove marquee from types of request list
   lvRequestTypes.MoveFirst()                'run through list until find a match between
   For x = 0 To lvRequestTypes.count - 1     'this requests type and that in the list
      If RequestTypes[lvRequestTypes.Item.key]!pk = Requests[cvwRequestNames.item.key]!fk_lu_request_type Then
         lvRequestTypes.Item.Selected = True
         lvRequestTypes.SetFocus()           'then set marquee on list to match the type
         Break
      Else
         lvRequestTypes.Movenext()
      End If 
   Next
   bExit = False   
   Request_Display()
   
End

Public Sub EditArea_TextBox_Change()
   '---------------------------------------------------------------------
   'User has changed data, reflect this with red outline around edit area
   '---------------------------------------------------------------------
   
   If bExit = True Then Return 
   EditArea_Notify_DataChange(True)
   
End

Public Sub lvRequestTypes_Click()
   '--------------------------------------------------------------
   'When click on type eg pathogy, or audiology, assume user just
   'want to see requests for that type, so remove search all check
   '--------------------------------------------------------------
   
   chkSearchAll.value = False
   
End

Public Sub cmbRequestTypes_Click()
   '--------------------------------------------------------------------
   'User is adding a new type of request
   'Could be just clicking on this combo without clicking the new button
   'Make sure the listview of request types is set to the correct row
   '--------------------------------------------------------------------
   
   Dim x As Integer
   Dim old_index As Integer = cmbRequesttypes.Index  'keep current index of type of request showing
   
   If Bexit Then Return 
   If pk_view <> 0 Then EditArea_Clear()
   cmbRequesttypes.index = old_index                 'switch combo back to one user selected
   bExit = True
   lvRequestTypes.UnSelectAll()
   lvRequestTypes.MoveFirst()
   For x = 0 To lvRequestTypes.count - 1
      If RequestTypes[lvRequestTypes.Item.key]!pk = RequestTypes[cmbRequesttypes.index]!pk Then
         lvRequestTypes.Item.Selected = True
         lvRequestTypes.SetFocus()
         Break
      Else
         lvRequestTypes.Movenext()
      End If 
   Next
   lblEditAreaHeading.Foreground = Color.Red
   lblEditAreaHeading.text = "Add new request name"
   bExit = False   
   Requests_Refresh
   txtRequestName.SetFocus()
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)  
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.white
   
End

Public Sub rblaterality_Click()
   
   EditArea_Notify_DataChange(True)
   
End
