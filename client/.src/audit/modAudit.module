' Gambas module file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

Public Sub MakeAudit(consult As CConsult, audit_action As Variant, tbl As String, fk_row As Integer, fk_section As Integer, Optional notes As String) As Boolean
   '---------------------------------------------------------------------------------------
   ' Creates an audit entry, uses FAudit not an instance as this is a modal window
   '
   ' consult      = the current consult
   ' audit_action = the action as a string, must be from clin_consult.lu_audit_actions
   ' tbl          = the name primary key of the row being auditing
   ' fk_section   = key to clin_consult.lu_progressnote_section table e.g could be workcover
   ' notes        = the free-html description of the change provided by calling code
   '
   'Returns True if succeeds
   'The calling routine must commit the transaction or roll it back as appropriate
   'Returns False for two reasons i) user cancelled apopup dialog requesting an audit reason
   '                             ii) The audit action is unrecognised.
   '-----------------------------------------------------------------------------------------
   
   Dim audit As New Collection
   Dim s As String
   Dim action_coll As Collection
   Dim sMsg As String

  
   audit!notes = notes
   
   If TypeOf(audit_action) = gb.String Then
      action_coll = modCache.Get("clin_consult.lu_audit_actions", audit_action, "action")
      If IsNull(action_coll) Then
        s = "Unrecognised audit action '" & audit_action & "'"
        Log.ErrorMsg(s)
        ' Error.Raise(s)
        Message.Title = "Auditing Error"
        sMsg = "EasyGP has encounter a system error whilst carrying out an audit function.\n\n"
        sMsg &= "This is a serious problem, you should immediately contact the system adminstrator "
        sMsg &= "show them this dialog or write down the error so they can examine the log file before you do anything else.\n\n"
        sMsg &= s
        Message.Warning(sMsg, "Ok")
        Return False
     Endif
     audit!fk_audit_action = action_coll!pk
   Else
      audit!fk_audit_action = audit_action
   Endif
   audit!fk_row = fk_row
   audit!linked_table = tbl
   audit!fk_section = fk_section 
   
   If Not IsNull(action_coll) And If action_coll!insist_reason Then
      '------------------------------------------------------------
      'clin_consult.lu_audit_actions has column to enforce a reason
      'for pre-defined actions eg 'Delete'
      'FAudit returns the key of clin_consult.lu_audit_reasons
      '-------------------------------------------------------------
      Faudit.Init(action_coll!action, tbl, notes)
      audit!fk_audit_reason = FAudit.ShowModal() 
      audit!notes &= ". The reason given for the "
      Select Case audit_action
         Case "mark deleted", "staff task deleted"
            audit!notes &= "deletion "
         Case "completed with explanation"
            audit!notes &= "completion "
         Case "refused with explanation"
            audit!notes &= "refusal "
         Case "return for re-filing"
            audit!notes &= "return for re-filing "
         Case "progress note edited"
            audit!notes &= "editing "
         Case "staff task finalised with explanation"
            audit!notes &= "finalisation "
      End Select
      audit!notes &= "was:<BR> '" & const.globalstring & "'."
      If audit!fk_audit_reason = 0 Then 
         Message.title = "Audit Cancelled"
         sMsg = "You have decided not to complete the audit trail, the database transaction will be rolled back."
         Message.Warning(smsg)
         Return False
      Endif
   Endif
   audit!fk_consult = consult.GetPK()  'BUG here will crash if delete a non-patient document.
   modDBConnect.insert("clin_consult.progressnotes", audit) 
   Return True 
   
End

Public Function Get_Reasons(reason As String) As Collection 
   '-----------------------------------------------------------
   'Gets  a user-specific list of reasons for the audit action
   'e.g could be "written for the wrong patient" or
   '             "patient has left practice"
   '-----------------------------------------------------------
   
   Dim sql As String
   
   sql = "SELECT * FROM clin_consult.lu_audit_reasons WHERE fk_staff = &1 "
   " AND reason ILIKE $$%&2%$$ LIMIT 10"
   sql = Subst$(sql, modDBConnect.currentUser!fk_staff, reason) 
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Get_Reason_Using_pk(fk_reason As Integer) As String
   
   Dim R As Result 

   R = modDBConnect.exec_query("Select * from clin_consult.lu_audit_reasons where pk=" & fk_reason) 
   If R.count Then
      Return R!reason
   End If  
   
End

Public Function New_Reason(reason As String) As Integer
   
   ' accepts a new reason and returns the PK
   Dim sql As String
   Dim coll As Collection
   Dim fk_staff As Integer
   
   fk_staff = modDBConnect.currentUser!fk_staff
   sql = "SELECT pk FROM clin_consult.lu_audit_reasons WHERE fk_staff = &1 "
   " AND reason ILIKE $$&2$$ LIMIT 1"
   sql = Subst$(sql, fk_staff, reason) 
   coll = modDBConnect.exec_query_first(sql)
   If IsNull(coll) Then
      Return modDBConnect.insert("clin_consult.lu_audit_reasons", ["reason": reason, "fk_staff": fk_staff])
   Else
      Return coll!pk
   Endif
   
End
'Public Function MakeTrail(...) As String
Public Function MakeTrail(...) As String
   '-------------------------------------------------------------------------------------------------------------   
   ' creates a audit trail as HTML
   ' parameters are an alternating sequence of table names and row PKs
   ' EXAMPLE: modAudit.MakeTrail("documents.documents", 435, "clin_request.request", 653, "clin_tasks.tasks", 34)
   ' the trail consists of all audits related to all the rows provided in time order.
   ' ------------------------------------------------------------------------------------------------------------
   
   Dim sql As String
   Dim row_selector As New String[]
   Dim i As Integer
   Dim sHTML As String
   Dim r As Result
   Dim r1 As Result 
   Dim document_user_tag As String 
   Dim bUnfiled As Boolean 
   Dim importDatasql As String
   
   '-------------------------------------------------------
   'importDatasql - this will only apply to document audits
   'the returned recordset is null in any other situation
   'IAN FIXME: problem here
   'I passed ("clin_recalls", 2) and it dies on this next line
   '-------------------------------------------------------
   importDatasql = "select * from documents.vwDocuments where pk_document = &1"
   
   i = 0
   While i < Param.Count
      sql = "(linked_table = '&1'::regclass AND fk_row = &2)"
      If Param[i] = "documents.documents" Then
         importDatasql = Subst$(importDatasql, Param[i + 1])
      End If
      sql = Subst$(sql, Param[i], Param[i + 1])
      row_selector.Add(sql)
      i += 2
   Wend
   sql = row_selector.Join(" OR ")
   sql = "SELECT * FROM clin_consult.vwprogressnotes WHERE " & sql & " ORDER BY pk_progressnote"
   '----------------------------------------------------------------------------------------------
   'Will only apply to documents
   'Construct the details of the document which was imported
   'Note this may not be 'filed', though could have been actioned but left in the inbox
   'If not filed, there will be no user_tag or description in users language, or summary of letter
   '----------------------------------------------------------------------------------------------
   If Not InStr(importDatasql, "&1") Then 
      r1 = modDBConnect.exec_query(importDatasql)
      For Each R1
         sHtml = "<TR><TD>"
         If Not IsNull(R1!tag_user) Then
            document_user_tag = R1!tag_user
            If Right(document_user_tag) = ";" Then document_user_tag = Left(document_user_tag, Len(document_user_tag) - 1)
         Else
            document_user_tag = R1!tag
            bUnfiled = True   
         End If 
         sHtml &= "<B>" & document_user_tag 
         
         If R1!style = "result" Then
            sHtml &= " - " & R1!sending_entity_request_type & " result"
         Else
            sHtml &= "Letter"
         Endif
         
         If bUnfiled Then
            sHtml &= " ** STILL IN INBOX NOT FILED **"
         End If
         sHtml &= "</B><small> [source file: " & r1!source_file & "]</small><BR><BR>"
         
         If Not IsNull(r1!date_requested) Then
            sHtml &= "- requested on " & Format(r1!date_requested, "dd/mm/yyyy") 
         Endif
         sHtml &= "- document originated from " & r1!originator
         If r1!msh_sending_entity <> "" Then 
            sHtml &= " and was sent by " & r1!msh_sending_entity & " imported on " 
         Else
            sHtml &= " and was scanned into the database on "
         End If
         sHtml &= Format(r1!imported_time, "dd/mm/yyyy:hh:nn:ss")
         sHtml &= "<BR> - destination staff member was " & r1!staff_destination_wholename & "<BR>"
      Next
   End If   
   '-------------------------------
   'Now the rest of the audit trail
   '-------------------------------
   r = modDBConnect.exec_query(sql)
   sHtml = ""
   i = 0
   For Each r 
      sHtml &= modHTML.HTML_Template_Audit_Row()
      If i = 0 Then
         sHtml = Replace(sHtml, "%date_logged", Format$(r!consult_date, "dd/mm/yyyy") & "<BR><small><small>" & Format$(r!consult_date, "hh:nn:ss") & "</small></small>")
         sHtml = Replace(sHtml, "%logged_by", r!title & " " & r!firstname & " " & r!surname & "<BR><small><small>" & "(" & r!role & ")" & "<small><small>")
         sHtml = Replace(sHtml, "%date_updated", "")
         sHtml = Replace(sHtml, "%updated_by", "")
         sHtml = Replace(sHtml, "%action", r!audit_action)
      Else
         sHtml = Replace(sHtml, "%date_updated", Format$(r!consult_date, "dd/mm/yyyy") & "<BR><small><small>" & Format$(r!consult_date, "hh:nn:ss") & "</small></small>")
         sHtml = Replace(sHtml, "%date_logged", "")
         sHtml = Replace(sHtml, "%logged_by", "")
         sHtml = Replace(sHtml, "%updated_by", r!title & " " & r!firstname & " " & r!surname & "<BR><small><small>" & "(" & r!role & ")" & "</small></small>")
         sHtml = Replace(sHtml, "%action", r!audit_action)
      End If
      sHtml = Replace(sHtml, "%action", r!audit_action)
      If Not IsNull(r!audit_reason) Then
         sHtml = Replace(sHtml, "%data", r!audit_reason)
      Else
         sHtml = Replace(sHtml, "%data", r!notes)
      End If 
      Inc i 
   Next
   Return sHTML

End

