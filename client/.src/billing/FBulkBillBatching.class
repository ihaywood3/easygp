' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' A class to record the save and manipulate medicare/veteran bulk bill claims
'-----------------------------------------------------------------------------
'TODO: just about everything
'      Investigate how medclaims work to lodge electronically
'-----------------------------------------------------------------------------
Private staff As Collection                              'all staff loaded into staff combo
Private clinics As Collection                            'all clinics in the location combo
Private fk_staff As Variant                              'the current user
Private fk_branch As Variant                             'the current branch
Private vouchers As Collection                           'available vouchers for the claim.
Private voucher As Collection
Private claims_vouchers As Collection                    'the vouchers in the claim
Public fk_lu_bulk_billing_type As Variant                'const.BulkBilling_Type_Medicare/Veteran do not make private
Private bExit As Boolean
Private bKeyValid As Boolean
Private fk_claim As Variant                              'key to billing.bulk_billing_claims
Private claim As Collection                              'the currently selected claim (i.e already batched and saved claim)
Private bVouchersPaid As Boolean = True
Private bVouchersUnpaid As Boolean = False
Private Medicare_Error_Codes As Collection
Private running_total_billed As Float
Private running_total_paid As Float
Private total_selected_to_pay_off As Float
Private invoices_in_claim As Integer
Private CheckBoxes As CheckBox[]

Public Sub _new()
   
   tlInstructions.text = Instructions_Help()
   
End

Public Sub init(s As Collection, c As Collection)
   '------------------------------------------------
   'Initialise form
   'clear editing area, default to medicare batching
   'check this but I think staff, clinics are zero based.
   '------------------------------------------------
   
   staff = s
   clinics = c
   ' modUtilGUI.LoadCombo(cmbStaff, staff, "wholename")
   ' clinics = modUtilGUI.LoadCombo(cmbClinic, clinics, "branch")
   lblMeasure.text = "Max Number of Vouchers  "
   bExit = True
   '   cmbClinic.index = -1
   ' cmbStaff.Index = -1
   'rbBulkBillMedicare.value = True 'set fk_lu_bulk_billing_type
   
   lblMeasure.text = "Total Selected to Pay Off       "
   modEditAreaHelpers.Resize_labels(VBox_EditArea, lblMeasure)
   fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare
   Medicare_Error_Codes = modBillingDBI.Medicare_Error_Codes() 
   lblBulkBIllingInformation.text = "Bulk BIlling Type Medicare"
   EditArea_Clear()
   bExit = False
   
End

Public Sub EditArea_Clear()
   'clear input, zero running totals, clear the scrollview
   
   bExit = True   
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea)
   Running_totals_Reset
   scrollview1.Children.Clear
   scrollview1.Background = Color.White
   With chkSelectAll
      .value = False 
      .text = "Select All"
   End With
   bexit = False  
   
End

Public Sub Running_totals_Reset()
   
   running_total_billed = 0
   running_total_paid = 0
   total_selected_to_pay_off = 0
   invoices_in_claim = 0
   
End

Public Function Staff_Member(fk_staff As Variant) As Collection
   
   Dim c As Collection
   'fixeme do something else and remove me
   For Each c In staff
      If c!fk_staff = fk_staff Then
         Return c
      Endif
   Next
   
End

Public Function Branch_Get_Name(fk_branch As Variant) As String
   
   Dim c As Collection
   
   For Each c In clinics
      If c!fk_branch = fk_branch Then
         Return c!branch
      Endif
   Next
   
End

Public Sub Days_Vouchers_Display(the_date As Date, fk_lu_bulk_billing_type As Variant)
   
   Dim smsg As String 
   
   fk_lu_bulk_billing_type = fk_lu_bulk_billing_type
   Vouchers_Refresh(fk_lu_bulk_billing_type, the_date)
   
End

Public Sub Vouchers_Refresh(fk_lu_bulk_billing_type As Integer, Optional the_date As Date)
   ' When user clicks on Tabstrip1 and selects the Batch Bulk Bililng tab
   ' the columnview is filled with distinct dates where vouchers have not been paid
   ' this sub displays a list of those unpaid vouchers
   
   Dim grand_total As Variant
   Dim fk_last_invoice As Variant
   Dim invoice_count As Integer
   Dim running_total As Float
   Dim x As Integer
   Dim HB As HBox                                         'container to hold each days notes
   Dim RowBox As VBox                                     'the ultimate row, could contain one or more HB rows eg if multiple items
   Dim tl As TextLabel
   Dim hlinetop As Separator
   Dim hlinebottom As Separator
   Dim col1 As Label
   Dim col2 As Label
   Dim col3 As Label
   Dim col4 As Label
   Dim col5 As Label
   Dim col6 As Label
   Dim col7 As Label
   Dim lblErrorDescription As Label
   Dim last_label_for_total As Label
   Dim last_total_bill As String
   
   Dim NotesBox As VBox
   
   Dim chkbox As CheckBox
   Dim chkbox_Container As Vbox
   Dim chkbox_spacer As Label
   Dim txtCode As TextBox
   
   EditArea_Clear   'clear input, zero running totals, clear the scrollview
   If bexit Then Return
   bexit = True   
   claims_vouchers = New Collection
   CheckBoxes = New CheckBox[]
   Inc Application.Busy
   Vouchers = modBillingDBI.Bulk_BIll_Vouchers_Get_UnPaid(modDBConnect.currentUser!fk_branch, fk_lu_bulk_billing_type, the_date)
   For Each voucher In Vouchers
      If fk_last_invoice <> voucher!fk_invoice Then                                 'for each new invoice generate a new row in the scrollivew
         If last_total_bill <> "" Then
            last_label_for_total.text = last_total_bill
         Endif
         Inc invoices_in_claim
         If voucher!paid = False Then  
            With RowBox = New Vbox(scrollview1) As "Invoice_Row"
               .AutoResize = True   
               .expand = False   
               .Height = 28
               .Width = scrollview1.Width
               .Background = Color.white
               If voucher!paid = True Then
                  .Enabled = False  
               Endif
            End With
         End If
      Endif
      If voucher!paid = False Then
         With HB = New HBox(Rowbox) 
            .width = ScrollView1.Width
            .AutoResize = False
            .Height = 28
            .Padding = 0
            .Background = Color.Transparent
         End With
         
         With col1 = New Label(HB)
            .width = 150
            .height = HB.height
            If fk_last_invoice <> voucher!fk_invoice Then
               .text = voucher!wholename
            End If  
         End With
         
         With col2 = New Label(HB)
            .width = 100
            .height = HB.height
            .text = Format(voucher!visit_date, "dd/mm/yyyy")
            .Alignment = Align.Center
         End With
         With col3 = New Label(HB)
            .width = 50
            .height = HB.height
            .Alignment = Align.Right
            .text = voucher!item
         End With
         With col4 = New Label(HB)
            .width = 80
            .height = HB.height
            .Alignment = Align.Right
            .text = modUtil.Money_Format(voucher!amount)
         End With
         
         With col6 = New Label(HB)
            .width = 80
            .height = HB.height
            .Alignment = Align.Right
         End With
         last_label_for_total = Col6 
         last_total_bill = modUtil.Money_Format(voucher!total_bill)
         With col5 = New Label(HB)  'just a spacer
            .width = 25
            .height = HB.height
         End With
         With col7 = New Label(HB)
            .width = 225
            .height = HB.height
            .Expand = False
            .text = voucher!descriptor_brief
         End With
         With txtCode = New TextBox(HB) As "TxtReturnCode"
            .width = 50
            .Height = HB.Height
            .Expand = False   
            .Border = True
            .Background = Color.White
            .border = False   
            .text = ""
            .Visible = False  
         End With
         With lblErrorDescription = New Label(HB)
            .height = HB.Height
            .Expand = False
            .width = 270
            If voucher!paid = True Then
               .text = "PAID"
            End If   
            .Font.size = 8
         End With
         With chkbox_Container = New Vbox(HB)
            .width = 28
            .height = HB.Height
            .Expand = False      
         End With
         If voucher!paid = False Then
            With chkbox = New CheckBox(chkbox_Container) As "chkSelected"
               .width = 28
               .height = 28
               .Background = Color.White
               .value = False 
               .tag = voucher
            End With
            CheckBoxes.Add(chkbox, CheckBoxes.Count)
         End If
         With chkbox_spacer = New Label(chkbox_Container)
            .width = 25
            .Height = 25
            .expand = True 
            .Background = Color.White
         End With
         txtCode.tag = lblErrorDescription               ' so when user types in code > we load the description into this label
         If x = 0 Then
            lblPatientHeading.Width = col1.Width 
            lblCol2.Width = col2.Width
            lblCol3.Width = col3.Width
            lblCol4.width = col4.Width
            lblCol7.Width = col7.width   'col5= just a spacer, col6 = the descriptor
         Endif
      End If   
      fk_last_invoice = voucher!fk_invoice   
      running_total_billed += modUtil.MoneyToFloat(voucher!amount)
      If voucher!paid = True Then
         running_total_paid += modUtil.MoneyToFloat(voucher!amount)
      Endif
   Next
   If last_total_bill <> "" Then
      last_label_for_total.text = last_total_bill
   Endif
   Try lblBottomRowSpacer.width = chkbox_Container.left + 5 '5= 1 pixel spacers
   txtclaimDate.text = Format(the_date, "dd/mm/yyyy")
   txtVouchersInClaim.text = Str(invoices_in_claim)
   txtClaimTotal.text = modUtil.Money_Format(running_total_billed)
   txtAlreadyPaid.text = Format(modUtil.MoneyToFloat(running_total_paid), "$####.00")
   txtTotalPaid.text = "$    .00"
   Dec Application.Busy
   bExit = False  
   
End

Public Sub Mark_Paid()
   ' updates the back-end for each voucher as paid
   ' clears the editing area and scollview containing the vouchers list
   ' updates the columnview on parent form (FRecordVisit) with list of unpaid days vouchers
   ' if the same patient is currently the selected one in FRecordVisit (the create/pay invoices)
   ' then updates the lists under the edit area or on the account history tabs
   
   Dim cb As CheckBox
   Dim invoice As CRow 
   Dim payment As CRow
   Dim fk_last_invoice As Variant = 0 'must be zero  not null value of an initialised variant
   Dim total_paid As Float
   Dim total_bill As Float
   Dim bsaved As Boolean   
   Dim fk_patient_in_billing As Variant   'the key if the patient currently being viewed/used in FRecordVisit, can be null
   Dim fk_patient_in_billing_keys As New Collection
   Dim patient_key As Variant
   
   If Trim(txtTotalPaid.text) = "" Or Trim(txtTotalPaid.text) = "$    .00" Then
      Message.Title = "Paying Off Vouchers"
      Message.Info("Please select the vouchers you wish to pay off.")
      Return
   Else
      If Message.Warning("Please confirm you wish to mark off all this vouchers.\n\nThis cannot be undone.", "Yes - Pay Off Vouchers", "Cancel") = 2 Then Return
   End If   
   Inc Application.Busy
   Wait
   For Each cb In CheckBoxes
      If fk_last_invoice <> cb.tag!fk_invoice Then                         
         If fk_last_invoice <> 0 Then                                                                  'if it's not the first one on the list
            If total_paid <> 0 Then                                                                    'it something has been paid
               If total_bill = modUtil.MoneyToFloat(total_paid) Then      'and it = the amount of the bill
                  invoice!paid = True                                                                  ' save to the back end
                  invoice.Save("billing.invoices", "fk_invoice")
                  bSaved = False 
                  total_bill = 0
                  total_paid = 0
               End If  
            End If   
         End If  
         If cb.value = True Then 
            invoice = New CRow 
            invoice.put_unchanged(cb.tag!fk_invoice, "fk_invoice")
            bSaved = False 
            total_paid = 0
            total_bill = modUtil.MoneyToFloat(cb.Tag!total_bill)
         End If   
      End If    
      If cb.value = True Then
         fk_last_invoice = cb.Tag!fk_invoice 
         total_paid += modUtil.MoneyToFloat(cb.tag!amount)
         payment = New CRow
         payment!fk_invoice = cb.tag!fk_invoice
         payment!amount = cb.tag!amount 
         If fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare Then    
            payment!fk_lu_payment_method = const.payment_method_medicare
         Else
            payment!fk_lu_payment_method = const.payment_method_veterans
         End If   
         payment!date_paid = modUtil.Make_Date_From_String(txtclaimDate.Text)
         payment!fk_staff_receipted = modDBConnect.currentUser!fk_staff
         payment.Save("billing.payments_received", "fk_payment")
         If Not fk_patient_in_billing_keys.Exist(cb.tag!fk_patient) Then
            fk_patient_in_billing_keys.Add(cb.tag!fk_patient, cb.tag!fk_patient)
         Endif
      End If   
   Next
   If Not bsaved And Not IsNull(invoice) Then
      invoice.Save("billing.invoices", "fk_invoice")
   Endif
   modDBConnect.CommitTrans()
   Wait
   For Each patient_key In fk_patient_in_billing_keys
      If patient_key = FRecordVisit.fk_patient_Key() Then
         FRecordVisit.Patient_Invoices_Update_External(patient_key)
      Endif
   Next
   EditArea_Clear                          ' clear input, zero running totals, clear the scrollview
   FRecordVisit.Bulk_Billing_Claims_Reload ' re-load list of unpaid claims in FRecordVisit
   Dec Application.Busy
   Wait  
   
End

Public Function Bulk_Billing_Summary_Row_Template() As String
   
   Return ""
   "<TD WIDTH=30%>"
   "   <P><B>%row_label%</B></P>"
   "</TD>"
   "<TD WIDTH=70%>"
   "   <P>%row_text%</P>"
   "</TD>"
   
End

Public Sub txtReturnCode_LostFocus()
   
   Last.Background = Color.White
   
End

Public Sub txtReturnCode_GotFocus()
   'User has clicked on the textbox to enter an error code for the bulk billed item
   
   Last.Background = Color.rgb(95, 255, 175)
   
End

Public Sub TxtReturnCode_KeyPress()
   
   If Not modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, Key.code) Then
      Stop Event
      Return 
   End If 
   
End

Public Sub TxtReturnCode_KeyRelease()
   
   If Medicare_Error_Codes.Exist(Trim(Last.text)) Then
      Last.tag.text = Medicare_Error_Codes[Trim(Last.text)]!description
   Else
      Last.tag.text = "Code not recognised"
   End If   
   
End

Public Sub invoice_row_Enter()
   
   Dim sep As Separator
   Dim Hctrl As Control
   
   If Last.Enabled = True Then   
      Last.Background = color.RGB(215, 232, 240) 'Color.LightBackground 
      Last.Children[0].Children[7].Background = color.RGB(215, 232, 240) 
   End If   
Catch
   Return
   
End

Public Sub invoice_Row_Leave()
   
   Dim sep As Separator
   Dim Hctrl As Control
   
   Last.Children[0].Children[7].Background = Color.White 'the code text box
   Last.Background = Color.white
Catch
   Return
   
End

Public Sub lblNotes_mousedown()
   
   ' Try Last_Row_Clicked.Background = Color.RGB(255, 255, 220)
   ' Last.Parent.background = Color.RGB(215, 232, 240) 'Color.LightBackground
   ' Last_Row_Clicked = Last.Parent 
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   bKeyValid = True
   Select Case Tag
      Case "number of vouchers"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   If bexit Then Return
   
   If Not EditAreaTextBox_ExcludeKeys(key.code, Last.tag) Then
      Stop Event
      Return
   End If
   
End

Public Sub claim_New()
   '---------------------------------------------------------
   'Prepare a new claim for lodging with Medicare or Veterans
   '---------------------------------------------------------
   ' 
   ' Dim smsg As String
   ' 
   ' Message.Title = "Medicare & Veteran Batching"
   ' If cmbStaff.index = -1 Or cmbClinic.index = -1 Then
   '    Message.Info("You must select both a staff member and a branch to be able to start the batching.")
   '    Return
   ' End If
   ' lblHeading.text = "New Claim"
   ' fk_staff = staff[cmbStaff.index]!fk_staff
   ' fk_branch = clinics[cmbClinic.Index]!fk_branch
   ' fk_claim = Null
   ' If rbBulkBillMedicare.value = True Then
   '    fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare
   ' Else
   '    fk_lu_bulk_billing_type = const.BulkBilling_Type_Veteran
   ' Endif
   ' Vouchers_Refresh()
   ' If cvwVouchers.count = 0 Then
   '    Message.Title = "Prepare Claim"
   '    Message.info("There are no outstanding vouchers for this doctor and branch")
   '    lblHeading.text = ""
   '    Return
   ' Endif
   ' tbProcessClaim.Enabled = True
   ' txtClaimIDNumber.SetFocus()
   
End

' 
' Public Function Bulk_Bill_Html_Row_Template() As String
'    
'    Return ""
'    "<TD WIDTH=8%>"
'    "   <P>%invoice_no%</P>"
'    "</TD>"
'    "<TD WIDTH=30%>"
'    "   <P>%patient%</P>"
'    "</TD>"
'    "<TD WIDTH=15%>"
'    "   <P>%date_visit%</P>"
'    "</TD>"
'    "<TD WIDTH=20%>"
'    "   <P>%item%</P>"
'    "</TD>"
'    "<TD WIDTH=10%>"
'    "   <P>%amount%</P>"
'    "</TD>"
'    
' End
' 
' Public Function Bulk_Bill_Html_Heading_Row_Template() As String
'    
'    Return ""
'    "<TR VALIGN=TOP>"
'    "<TD WIDTH=20%>"
'    "   <P<B>%heading%</B></P>"
'    "</TD>"
'    "<TD WIDTH=80%>"
'    "   <P>%value%</P>"
'    "</TD>"
'    "</TR>"
'    
' End

Public Sub EditArea_TextBox_Lost_Focus()
   
   Last.BackGround = Color.White
   
End

Public Sub tbSave_Click()
   
   Mark_Paid
   
End

Public Sub chkSelected_Click()
   
   If bexit Then Return
   If Last.value = False Then
      total_selected_to_pay_off -= modUtil.MoneyToFloat(Last.tag!amount)
      txtTotalPaid.text = "$" & Format(total_selected_to_pay_off, "####.00")
   Else
      total_selected_to_pay_off += modUtil.MoneyToFloat(Last.tag!amount)
      txtTotalPaid.text = "$" & Format(total_selected_to_pay_off, "####.00")
   End If   
   Print total_selected_to_pay_off
   
End

Public Sub chkSelectAll_Click()
   
   Dim cb As Checkbox
   
   If bexit Then Return 
   If chkSelectAll.value = False Then
      bexit = True                   'stop chkSelected_Click executing - it adds up the amounts
   End If   
   total_selected_to_pay_off = 0
   txtTotalPaid.text = "$    .00"
   For Each cb In CheckBoxes
      cb.value = Last.value
   Next
   If Last.value = True Then
      chkSelectAll.Text = "Unselect All" '
   Else
      chkSelectAll.text = "Select All"
   Endif
   bExit = False  
   
End

Public Function Instructions_Help() As String
   
   Dim smsg As String
   
   Return ""
   "Compare the on-line list for the date you have selected with this list"
   "<UL>"
   "<LI>Select a date from the 'Claims with Unpaid Invoices' list and vouchers will be displayed </LI>"
   "<LI>Click the 'select all' checkbox at the bottom of the list</LI>"
   "<LI>Uncheck any item numbers which have not been paid </LI>"
   "<LI>Note that if a consult was invoiced after 6pm it will appear in the next days payments </LI>" 
   "<LI>When happy click on the 'Mark Paid' button'</LI>"
   "</UL>"
   
End

Public Sub Form_Resize()
   
   VBox_EditArea.Height = tlInstructions.height
   
End
