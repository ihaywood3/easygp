' Gambas class file

' Copyright (C) 2008-2014 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' A class to display the medicare benefits schedule and fee list
' ---------------------------------------------------------------------
' TODO - fix the method of displaying txtFee's as per FRecordVisit
'        or the gambas IDE.
'----------------------------------------------------------------------
Private $hEditor_gridview1 As Object
Private Fee_Schedule_Item As Collection
Private Fees_For_Item_Number As Collection
Private bExit As Boolean
Private bCloning As Boolean                              'true if cloning an existing record
Private timer_count As Integer
Private pk_fee_schedule_item As Integer
Private Billingtypes As Collection
Private BillingType As Collection
Private cGridColumn_ItemFee_Level As Integer = 0
Private OnRow As Integer
Private OnCol As Integer
Private timercount As Integer = 0
Private ama_mbs_or_both As String
Private bEditBillingType As Boolean                'If True we can edit the user-defined billing types
Private sAmount_Before_Edit As String              'the fee amount before user edited the grid cell
Private bKeyValid As Boolean
Private Existing_Fee_keys As Collection              'the fees keys for each item.

Public Sub Init()
   '---------------------------------------------------------------------------------------------
   'Called from parent form usually FRecordVisit, initialise gui, load billing types to fee grid
   '---------------------------------------------------------------------------------------------
   
   lblMeasure.text = " Number of Patient's Included "
   modEditAreaHelpers.Resize_labels(Vbox_Editarea, lblmeasure)
   '  modEditAreaHelpers.Resize_label(lblSearch, lblMeasure)
   modEditAreaHelpers.Resize_label(lblItemTypes, lblMeasure)
   Billingtypes = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Billing_Types_Get())
   Gridview1_Init()
   ama_mbs_or_both = "mbs"
   Settings_Load()
   
End

Public Function Fee_Schedule_Item_Duplicated(item As String) As Boolean
   
   If modBillingDBI.Item_Exists(item) Then
      Dec Application.Busy
      Message.Info("The item you are trying to add:" & item & " already exists in the fee schedule.")
      Return True
   End If
   
End

Public Sub Fee_Schedule_Item_Set(fsi As Collection)
   '---------------------------------------------------------------------
   'Set the current fee schedule item from parent form using FRecordvisit
   '---------------------------------------------------------------------
   
   Fee_Schedule_Item = fsi
   
End

Public Sub Gridview1_ClearFees()
   '------------------------------
   'Clear the fee grid of all fees
   '------------------------------
   
   Dim x As Integer
   
   For x = 0 To gridview1.Rows.count - 1
      gridview1[x, 1].text = ""
   Next
   
End

Public Sub Gridview1_Init()
   
   Dim x As Integer
   
   With gridview1
      .Rows.H = 20
      .Columns.Count = 2
      .Rows.count = Billingtypes.Count
   End With
   x = 0
   For Each Billingtype In Billingtypes
      gridview1.row = x
      gridview1[x, 0].text = Billingtype!type
      Inc x
   Next
   
End

Public Sub gridview1_lblOverLay_KeyPress()
   '----------------------------------------------------------------
   'This is a transparent label, "hiding" the editing textbox
   'Pass the keypress character into the underlying textbox if empty
   'and enter 'edit mode'
   '----------------------------------------------------------------
   
   gridview1_Cell_Overlay_Remove(key.Text)
   
End

Public Sub gridview1_lblOverLay_DblClick()
   '-------------------------------------------------------------
   'Looks to use like double clicking on a grid row
   'actually clicking on the transparent label over the grid cell
   'remove this transparent label and enter 'edit mode'
   '-------------------------------------------------------------
   
   gridview1_Cell_Overlay_Remove("")
   
End

Public Sub gridview1_Cell_Overlay_Remove(char As String)
   '----------------------------------------------------------------
   'use the underlying cell text to either set the fee combox index
   'or the textbox 1 editing textbox
   'remove the label hiding the control in the grid to allow use
   'either a combobox or a textbox
   '-----------------------------------------------------------------
   ' Dim hEditor As Object
   
   Dim Cell_Text As String
   
   If gridview1.Row = -1 Then Return
   cell_text = gridview1[gridview1.Row, gridview1.column].Text
   If gridview1.column <> cGridColumn_ItemFee_Level Then
      If cell_text = "" Then
         txtFee.text = char
      Else
         txtFee.text = Cell_Text
      End If
      $hEditor_gridview1 = txtFee
      gridview1_lblOverLay.Visible = False
   End If
   $hEditor_gridview1.visible = True
   $hEditor_gridview1.SetFocus
   
End

Public Function EditArea_Set_Editable(bEditable As Boolean, Optional bNewItem As Boolean = False)
   '-----------------------------------------------------------------------------------
   'allows or disallows the editing area to be editable
   'i.e if flag=true can edit (parts of) the data
   'the billing.fee_schedule table is filled from PBS supplied data
   'we don't allow editing of any of this but the descriptor brief can always be edited
   'if truely a item, enable all textboxes and checkboxes except AMA + MBS
   '-----------------------------------------------------------------------------------
   
   If bEditable Then                          'we want to allow some editing to add or clone item number
      txtAMAItemNumber.ReadOnly = True
      txtMBSItemNumber.ReadOnly = True
      txtUserItemNumber.ReadOnly = False
      txtUserItemNumber.Enabled = True
      txtDescriptor.ReadOnly = True
      txtDescriptorBrief.ReadOnly = False
      txtDescriptorBrief.enabled = True
      chkPercentageRuleApplies.Enabled = True
      txtNumberOfPatients.ReadOnly = False
      txtGSTRate.ReadOnly = False
   Else                                  'we don't want any editing bar the descriptor_brief
      txtAMAItemNumber.ReadOnly = True
      txtMBSItemNumber.ReadOnly = True
      txtUserItemNumber.ReadOnly = True
      txtDescriptor.Enabled = True
      txtDescriptorBrief.Enabled = True
      chkPercentageRuleApplies.Enabled = False
      txtNumberOfPatients.ReadOnly = True
      txtGSTRate.ReadOnly = True
   End If
   If bNewItem Then
      txtDescriptor.ReadOnly = False
      txtDescriptor.Enabled = True
   Endif
   
End

Public Function Fee_Schedule_Item_Valid() As Boolean
   '--------------------------------------------
   'returns True if edit area contents are valid
   '--------------------------------------------
   
   Print
   Return
   
End

' Public Sub Reload()
'
'    Inc Application.Busy
'    Timer1.enabled = False
'    lcDescriptors.Clear()
'    Descriptors = modBillingDBI.Descriptors_Get(Trim(txtMBSItemNumber.text), True, False)
'
'    For Each Descriptor In Descriptors
'       lcRow = New CDescriptorRow(lcDescriptors, descriptor)
'    Next
'    Dec Application.Busy
'
' End

' Public Sub Search()
'    '-------------------------------------------------------------------
'    ' Once timercount = 3 then search 'fixme make this user configurable
'    ' ------------------------------------------------------------------
'
'    Timer1.Stop          'stop timer hence stop timercount incrementing
'    timercount = 0       'until another keyrelease in txtsearch
'    If Trim(TxtSearch.text) = "" Then Return
'    Inc Application.Busy
'    descriptors = modBillingDBI.Descriptors_Get(txtSearch.Text, True, False)
'    ' FIXME: respect AMA excluder flags
'    lcDescriptors.Clear
'    lblSQLCount.Text = Str$(Descriptors.count) & " records returned"
'    For Each Descriptor In Descriptors
'       lcRow = New CDescriptorRow(lcDescriptors, descriptor)
'    Next
'    Dec Application.Busy
'    If lcDescriptors.Count = 1 Then
'       Display()
'    Endif
'
' End

Public Sub Save()
   '--------------------------
   'Save a modified descriptor
   'CREATE TABLE billing.fee_schedule
   ' (
   '   pk serial NOT NULL,
   '   item text,
   '   mbs_item text, -- the item number in the Medicare Benefits Schedule or user schedule, NULL only if only appears on AMA Schedule
   '   user_item text, -- if the item is defined by the user
   '   ama_item text, -- the item number in the AMA version of the schedule, if used, otherwise NULL
   '   descriptor text NOT NULL,
   '   ceased_date date,
   '   "group" text,
   '   derived_fee text,
   '   descriptor_brief text, -- a brief description of a long descriptor
   '   gst_rate integer DEFAULT 0, -- the goods and services tax rate
   '   percentage_fee_rule boolean DEFAULT false,
   '   number_of_patients integer DEFAULT 1, -- the number of patients to which this item applies, usually 1, but e.g nursing homes or group therapy sessions can be up to 7
   '   CONSTRAINT fee_schedule_pkey PRIMARY KEY (pk),
   '   CONSTRAINT schedule_ama_item_key UNIQUE (ama_item),
   '   CONSTRAINT schedule_item_key UNIQUE (item),
   '   CONSTRAINT schedule_check CHECK (NOT mbs_item IS NULL OR NOT ama_item IS NULL OR NOT user_item IS NULL)
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   
   '--------------------------
   
   Dim Schedule_Item As New CRow
   Dim cPrice As New CRow
   Dim billing_type As Collection
   Dim row As Integer
   Dim fee As Collection
   Dim sSql As String
   Dim hSql_File As File
   
   If VBox_EditArea_Outer.padding = 0 Then Return
   '   If Not Fee_Schedule_Item_Valid() Then Return
   tbSave.Enabled = False
   '---------------------------------------------------------------------------------------
   'We will never be saving the mbs-item or ama-item or descriptor as they are pre-supplied
   'We can change the user defined brief descriptor
   '----------------------------------------------------------------------------------------
   Inc Application.Busy
   If pk_fee_schedule_item <> 0 Then
      Schedule_Item.put_unchanged(pk_fee_schedule_item, "fk_descriptor") 'fixme align the nomenclature backend/front end
   Else
      '--------------------------------------------------------------
      ' Do another validation check - ensure user_item does not exist
      '--------------------------------------------------------------
      Schedule_Item = New CRow
      If Not bcloning Then
         If Fee_Schedule_Item_Duplicated(Trim(txtUserItemNumber.text)) Then
            tbSave.Enabled = True
            Return
         End If
      Else
         If Fee_Schedule_Item_Duplicated(Trim(txtMBSItemNumber.text)) Then
            tbSave.Enabled = True
            Return
         End If
         '---------------------------------------------------------------
         'We have displayed the new item as eg 24/3 to make sense to user
         'however we only want the 'core' item number
         '---------------------------------------------------------------
         Schedule_Item!mbs_item = Split(Trim(txtMBSItemNumber.text), "/")[0]
      End If
   Endif
   Schedule_Item!user_item = Trim(txtUserItemNumber.text)
   Schedule_Item!descriptor = Trim(txtDescriptor.text)
   Schedule_Item!group = Trim(txtGroup.text) 'if cloned will not be null
   Schedule_Item!descriptor_brief = Trim(txtDescriptorBrief.text)
   Schedule_Item!percentage_fee_rule = CBool(chkPercentageRuleApplies.value)
   Schedule_Item!number_of_patients = Val(txtNumberOfPatients.text)
   If txtGSTRate.text = "" Then
      Schedule_Item!gst_rate = 0
   Else
      Schedule_Item!gst_rate = Val(Replace(txtGSTRate.text, "%", "")) 'fix me then can't remove it
   Endif
   
   '--------------------------------------------------------------------------------------
   'if this fee schedule item already exists, then update, but only allow brief descriptor
   'as most of the schedule is pre-supplied.
   '--------------------------------------------------------------------------------------
   If pk_fee_schedule_item Then
      If User.Home &/ "descriptors_update.sql" Then
         hSql_File = Open User.Home &/ "descriptors_update.sql" For Write Append
         ssql = "Update billing.fee_schedule "
         ssql &= "Set descriptor_brief = $$" & Schedule_Item!descriptor_brief & "$$ "
         ssql &= "WHERE  pk = " & pk_fee_schedule_item
         Print #hSql_File, ssql
         Close #hSql_File
      Endif
   Else
      '---------------------------------------------
      'Otherwise, we are adding a new fee descriptor
      '---------------------------------------------
      hSql_File = Open User.Home &/ "descriptors_new.sql" For Write Append
      ssql = "Insert into billing.fee_schedule"
      ssql &= "(mbs_item, ama_item,user_item, descriptor, descriptor_brief, \"group\", percentage_fee_rule, number_of_patients, gst_rate)"
      ssql &= " VALUES ("
      If Trim(txtMBSItemNumber.text) <> "" Then
         ssql &= "$$" & Trim(txtMBSItemNumber.text) & "$$,"
      Else
         ssql &= "Null,"
      Endif
      If Trim(txtAMAItemNumber.text) <> "" Then
         ssql &= "$$" & Trim(txtAMAItemNumber.text) & "$$,"
      Else
         ssql &= "Null,"
      Endif
      If Trim(txtUserItemNumber.text) <> "" Then
         ssql &= "$$" & Trim(txtUserItemNumber.text) & "$$,"
      Else
         ssql &= "Null,"
      Endif
      ssql &= "$$" & Trim(txtDescriptor.text) & "$$,"
      ssql &= "$$" & Trim(txtDescriptorBrief.text) & "$$,"
      If Trim(txtGroup.text) <> "" Then
         ssql &= "$$" & Trim(txtGroup.text) & "$$,"
      Else
         ssql &= "Null,"
      End If
      If chkPercentageRuleApplies.value = True Then
         ssql &= "True,"
      Else
         ssql &= "False,"
      Endif
      ssql &= Val(txtNumberOfPatients.text) & ","
      If Trim(txtGSTRate.text) <> "" Then
         ssql &= Val(txtGSTRate.text)
      Else
         ssql &= "NULL"
      Endif
      ssql &= ")"
      Print ssql
      Print #hSql_File, ssql
      Close #hSql_File
   End If
   Schedule_Item.Save("billing.fee_schedule", "fk_descriptor")
   ' Descriptor.Save(
   '------------------------------------------------------------------------
   'Check if any fees have been changed, added or deleted
   'For each row in the grid - check first if we have an existing fee
   'If we do, then compare this to the a'mount we first loaded into the grid
   '------------------------------------------------------------------------
   For row = 0 To gridview1.rows.count - 1                              'for each row in the grid
      If Not IsNull(Existing_Fee_keys[row]) Then
         If Fees_For_Item_Number.Exist(Existing_Fee_keys[row]) Then     'existing entry in clerical.prices
            Print Fees_For_Item_Number[Existing_Fee_keys[row]]
            fee = Fees_For_Item_Number[Existing_Fee_keys[row]]
            If fee!price <> gridview1[row, 1].Text Then            'if price has changed, save it
               cPrice = New CRow
               cPrice.put_unchanged(fee!fk_price, "fk_price")
               cPrice!price = gridview1[row, 1].Text
               cPrice.Save("billing.prices", "fk_price")
            Endif
         Endif
      Else
         '----------------------------------------------------------------------------
         'There is no existing fee amount for this grid row
         'so if the amounts column of grid has a fee, create new row in billing.prices
         '----------------------------------------------------------------------------
         
         If Trim(gridview1[row, 1].Text) <> "" Then
            cPrice = New CRow
            cPrice!price = gridview1[row, 1].Text
            cPrice!fk_fee_schedule = Schedule_Item!fk_descriptor
            cPrice!fk_lu_billing_type = Billingtypes[row]!pk
            cPrice.Save("billing.prices", "fk_price")
         Endif
      End If
   Next
   modDBConnect.CommitTrans()
   Dec Application.Busy
   EditArea_Notify_Datachange(False)
   FRecordVisit.Fee_Schedule_Reload_Static() 'reload the fee schedules columnview
   
End

Public Sub Settings_Save()
   
   Settings["FDescriptorsBrowser/VSplit_Main.Layout"] = Vsplit_Main.Layout
   
End

Private Sub Settings_Load()
   
   Vsplit_Main.Layout = Settings["FDescriptorsBrowser/VSplit_Main.Layout", modUtil.VSplit([354, 533, 100])]
   
End

Public Sub txtFilterDescriptor_KeyRelease()
   
   If Timer1.Enabled = False Then Timer1.Enabled = True
   timer_count = 0
   
End

Public Sub txtFilterDescriptor_GotFocus()
   
   Timer1.Start()
   
End

Public Sub EditArea_Clear()
   '---------------------------------
   'Clears the input or display area
   '---------------------------------
   
   modEditAreaHelpers.EditArea_Clear(Vbox_Editarea)   'clear the input area
   bEditBillingType = False                           'not in fee edit mode
   With txtFee                                        'disappear the fee textbox
      .Visible = False
      .text = ""
   End With
   VBox_EditArea.Enabled = False
   Gridview1_ClearFees
   tbClone.Enabled = True
   tbNew.Enabled = True
   tbSave.Enabled = True
   pk_fee_schedule_item = 0
   bCloning = False
   
End

Public Sub Fee_Schedule_Item_New()
   '----------------------------------------------------------------
   'user wants to add an entirely new item number to user_item field
   '----------------------------------------------------------------
   
   EditArea_Clear()
   lblEditArea.text = "Add New Item to Fee Schedule"
   tbClone.Enabled = False
   bexit = True
   EditArea_Set_Editable(True, True)
   txtNumberOfPatients.text = 1
   bexit = False
   VBox_EditArea.Enabled = True
   Existing_Fee_keys = New Collection
   txtUserItemNumber.SetFocus()
   
End

Public Sub Fee_Schedule_Item_Clone()
   '-------------------------------------------------------------
   'Clones the item number by removing the pk, for mbs-items only
   '------------------------------------------------------------
   
   If IsNull(Fee_Schedule_Item) Then Return
   pk_fee_schedule_item = 0
   tbNew.Enabled = False
   If Not IsNull(Fee_Schedule_Item!user_item) Then
      EditArea_Set_Editable(True, True)
      lblEditArea.text = "Clone Existing User Defined Item"
   Else
      bexit = True
      EditArea_Set_Editable(True)
      lblEditArea.text = "Clone Existing Item MBS or AMA Item Number"
      txtUserItemNumber.Enabled = False
      bexit = False
   End If
   bCloning = True
   
End

Public Sub Fee_Schedule_Item_Display()
   '-------------------------------------------------------------------------------------
   'Displays the fee schedule item loaded when user clicked on columnview in FRecordVisit
   'The descriptor has been set by Descriptor_Set()
   'If the fee schedule item has the precentage fee rule, display as item/num_patients
   '-------------------------------------------------------------------------------------
   
   Dim num_patients As String = ""
   
   EditArea_Clear()                                                      'clear the input area
   EditArea_Set_Editable(False)                                          'no editing except descriptor_brief
   lblEditArea.text = "Item Number and Descriptor Details"
   bexit = True
   If Fee_Schedule_Item!percentage_fee_rule Then
      num_patients = "/" & Str(Fee_Schedule_Item!number_of_patients)
      chkPercentageRuleApplies.value = True
   Else
      chkPercentageRuleApplies.value = False
   Endif
   txtMBSItemNumber.text = Fee_Schedule_Item!mbs_item & num_patients
   Try txtAMAItemNumber.text = Fee_Schedule_Item!ama_item
   Try txtUserItemNumber.text = Fee_Schedule_Item!user_item
   txtNumberOfPatients.text = Fee_Schedule_Item!number_of_patients
   With txtDescriptor
      .text = Fee_Schedule_Item!descriptor
      .pos = 0
   End With
   pk_fee_schedule_item = Fee_Schedule_Item!pk
   With txtDescriptorBrief
      .text = Fee_Schedule_Item!descriptor_brief
      .pos = 0
   End With
   Try txtDateceased = Format(Fee_Schedule_Item!ceased_date, "dd/mm/yyyy")
   chkPercentageRuleApplies.Enabled = True
   txtGroup.text = Fee_Schedule_Item!group
   txtGSTRate.text = Fee_Schedule_Item!gst_rate & "%"
   Fees_For_Item_Number_Show(pk_fee_schedule_item)
   bexit = False
   VBox_EditArea.Enabled = True
   EditArea_Notify_Datachange(False)
   
End

Public Sub Fees_For_Item_Number_Show(pk_descriptor As Integer)
   
   Dim row As Integer
   Dim Fee As Collection
   
   Fees_For_Item_Number = modBillingDBI.Fees_Get_For_Descriptor(pk_descriptor)
   Existing_Fee_keys = New Collection
   For row = 0 To gridview1.rows.Count - 1
      For Each Fee In Fees_For_Item_Number
         If gridview1[row, 0].text = Fee!fee_type Then
            gridview1[row, 1].text = Fee!price
            Existing_Fee_keys.Add(Fee!fk_price, row)
            Break
         Endif
      Next
   Next
   
End

' Public Sub lcDescriptors_Click()
'
'    '----------------------------------------------------------------------------------
'    'User has clicked on one row of the list container - hence selecting a patient
'    'put that patient into the current patient collection, and photo into patient_photo
'    '----------------------------------------------------------------------------------
'
'    Dim hctrl As Control
'    Dim HB As HBox
'    Dim Tl As TextLabel
'
'    If lcDescriptors.Count Then
'       descriptor = Descriptors[Last.children[Last.index].tag]
'       Display()
'    Endif
'
' End

Public Sub EditArea_Notify_Datachange(bFlag As Boolean)
   
   If bFlag Then
      VBox_EditArea_Outer.Padding = 1
   Else
      VBox_EditArea_Outer.Padding = 0
   End If
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "save"
         Save()
      Case "clone"
         Fee_Schedule_Item_Clone()
      Case "new"
         Fee_Schedule_Item_New()
   End Select
   
End

Public Sub EditAreaTextBox_GotFocus()
   '-----------------------------------------------------------------------
   'User clicks on search textbox, start the time which controls the search
   '-----------------------------------------------------------------------
   
   Last.BackGround = Color.rgb(95, 255, 175)
   ' If Last.tag = "search" Then
   '    Timer1.Start
   '    Timercount = 0
   ' Else
   '    Timer1.Stop
   ' End If
   
End

Public Sub EditAreaTextBox_Change()
   
   If bexit Then Return
   If Last.tag <> "search" Then
      EditArea_Notify_Datachange(True)
   End If
   Select Case Last.tag
      Case "mbs item number"
         EditArea_Clear()
         EditArea_Notify_Datachange(False)
      Case "number of patients"
         'could be cloning eg mbs_item = 24/1, user typed num patiest = 2, want 24/2 to display
         If bCloning Then
            bexit = True
            If Trim(Last.text) = "" Then                              'number of patients removed
               txtMBSItemNumber.text = Fee_Schedule_Item!mbs_item     'replace original item number
            Else
               txtMBSItemNumber.text = Split(txtMBSItemNumber.text, "/")[0] & "/" & Str(Last.text)
            End If
            bexit = False
         End If
      Case "long description"
         If InStr(Last.text, "\n\n") Then
            bexit = True
            Last.text = Replace(Last.text, "\n\n", "\n")
            Last.pos = 0
            bexit = False
         Endif
   End Select
   
End

Public Sub EditAreaTextBox_KeyRelease()
   
   If Last.tag = "search" Then
      timercount = 0
      Timer1.start
   End If
   
End

Public Sub Gridview1_MouseUp()
   
   If gridview1.column = cGridColumn_ItemFee_Level Then Return
   
   Gridview1_ShowProperty
   
End

Public Sub gridview1_ShowProperty()
   '--------------------------------------------------------------------------------
   'nicked from the gambas IDE FProperty.class
   'Shows the control we are using to 'edit' the grid cell aligned over that cell
   'Maybe un-necessariily complex due to my simple brain but does this
   'The pangridview1BilledEditor = a Hbox holding 3 controls
   ' - a textbox for editing
   ' - a combobox for choosing the fee levels
   ' - a transparent label to let user click on something without entering edit mode
   '   which is what happens in the gambas IDE - I didn't use this because then I
   '   couldn't show a menu over the grid
   '--------------------------------------------------------------------------------
   
   Dim hEditor As Object
   
   txtfee.Hide
   
   gridview1_lblOverLay.Hide
   pangridview1Editor.Hide
   
   hEditor = gridview1_lblOverLay
   $hEditor_gridview1 = hEditor
   gridview1_MoveProperty        ' Move the Hbox pangridview1BilledEditor into position over the cell
   $hEditor_gridview1.Show             ' Make transparent label "visible" or the combo box visible
   pangridview1Editor.Show       ' Show the container, hence the  control
   $hEditor_gridview1.SetFocus         ' give control focus > responded to key and click events
   
End

Public Sub Gridview1_Scroll()
   '------------------------------------------------------
   'As the grid scrolls re-position the overlying control
   '-----------------------------------------------------
   
   Gridview1_MoveProperty
   
End

Private Sub Gridview1_HideProperty()
   
   txtFee.Visible = False
   pangridview1Editor.Hide
   gridview1_lblOverLay.Hide
   
End

Private Sub Gridview1_MoveProperty()
   '------------------------------------------------------------------------
   'Move the editing Hbox control to match a grid cell co-ordinates and size
   '------------------------------------------------------------------------
   
   If IsNull($hEditor_gridview1) Or gridview1.Row = - 1 Then Return
   With gridview1[gridview1.Row, gridview1.column]
      pangridview1Editor.Move(gridview1.X + .X - gridview1.ScrollX, gridview1.Y + .Y - gridview1.ScrollY, .Width, .Height)
      pangridview1Editor.Raise
   End With
   
End

Public Sub GridView1_Click()
   
   onrow = gridview1.Row
   OnCol = gridview1.Column
   
End

Public Sub GridView1_DblClick()
   ' 'bEditBillingType
   '
   ' Dim i As Integer
   ' Dim iSlotCount As Integer
   '
   ' If oncol = 0 Then Return                        'Cannot edit billing type unless in edit mode
   ' If lcDescriptors.count = 0 Then Return
   ' If IsNull(descriptor) Then Return
   '
   ' txtFee.text = ""                              'clear search textbox
   '
   ' bFoundFirst = False
   '
   ' onrow = gridview1.Row
   ' iLeft = gridview1[onrow, oncol].Left
   ' iTop = ((onrow + 1) * 20) + 3  'iSlotCount * 20
   ' With txtFee
   '    .left = iLeft + 1
   '    .top = iTop
   '    .width = gridview1.Columns[oncol].Width + 3
   '    .Height = ((iLastRow - iFirstRow) + 1) * gridview1.Rows[0].Height + 4
   '    .Visible = True
   '    .SetFocus()
   '    .text = gridview1[onrow, oncol].Text
   '
   ' End With
   ' sAmount_Before_Edit = gridview1[onrow, oncol].Text
   
End

Public Sub Timer1_Timer()
   '--------------------------------------------------------------
   'if txtSearch has focus, each keystroke sets timercount to 0
   'once users pauses in the keystrokes, the timer will increment
   'to over 3 and search will begin.
   '--------------------------------------------------------------
   '
   ' Inc timercount
   ' If timercount > 3 Then
   '    If Trim(txtSearch.text) <> "" Then Search()
   ' Endif
   '
   
End

Public Sub txtFee_Activate()
   
   'fix me get IAN to do proper money validation input/display
   If Left(Last.text) <> "$" Then
      Last.text = "$" & Last.text
   Endif
   gridview1[onrow, oncol].text = Last.text
   If sAmount_Before_Edit <> gridview1[onrow, oncol].text Then
      EditArea_Notify_Datachange(True)
   Endif
   Last.Visible = False
   
End

Public Function EditArea_TxtBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case tag
      Case "fee", "gst rate"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersDecimal, keycode)
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid
   
End

Public Sub rbEditArea_Click()
   
   ' ama_mbs_or_both = Last.tag
   ' EditArea_Clear()
   ' Search()
   '
End

Public Sub txtFee_KeyPress()
   
   If bexit Then Return
   bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code, Last.tag)
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   
End

Public Sub VBox5_Leave()
   '-------------------------------------------------------------------
   'If mouse leaves the gridview1 container then remove the fee textbox
   '-------------------------------------------------------------------
   
   Gridview1_HideProperty
   
End

Public Sub Resize_Grids()
   
   Dim lastwidth As Integer
   
   For Each BillingType In BillingTypes
      lblmeasure.text = BillingType!type
      If lblmeasure.width + 2 > lastwidth Then
         lastwidth = lblmeasure.width + 2
      Endif
   Next
   'lblmeasure.width = "$1000.00 "
   With gridview1
      .Columns[0].Width = Max(lastwidth, gridview1.width - 120)
      .Columns[1].width = 100
   End With
   With lblcol1
      .text = "Type"
      .width = gridview1.Columns[0].Width
   End With
   With lblcol2
      .text = "Fee"
      .Width = gridview1.Columns[1].width
   End With
   
End

Public Sub Form_Resize()
   
   Try Resize_Grids()
   gridview1_MoveProperty
   
End

Public Sub Form_Leave()
   
   ' HSplit_EditArea.Enabled = False
   Gridview1_HideProperty
   
End

Public Sub Form_Show()
   
   Try Resize_Grids()
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   bKeyValid = True
   Select Case Tag
      Case "number of patients", "gst rate"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, key.code)
      Case Else
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_SQLCrash, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub EditAreaTextBox_KeyPress()
   
   If bexit Then Return
   If Not EditAreaTextBox_ExcludeKeys(key.code, Last.tag) Then
      Stop Event
      Return
   End If
   If key.Code = key.Return Then
      Select Case Last.tag
         Case "user item number"
            txtDescriptorBrief.SetFocus
         Case "brief description"
            txtDescriptor.SetFocus
         Case "long description"
            txtGSTRate.SetFocus
      End Select
   End If
   
End

Public Sub chkPercentageRuleApplies_Click()
   
   EditArea_Notify_Datachange(True)
   
End

Public Sub EditAreaTextBox_LostFocus()
   
   Last.BackGround = Color.White
   
End
