' Gambas class file

' Copyright (C) 2008-2012 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' A class to record the patients visit and raise the invoice
'----------------------------------------------------------------------
'THIS FORM WILL NOT WORK IT IS VERY MUCH PROTOTYPE PRE-ALPHA ONLY
'ONLY FOR PROOF OF CONCEPT, much of the code is really bad
'many routines are redundant/duplicated
'many of the database calls are redundant duplicated
'-----------------------------------------------------------------
Private currentconsult As CConsult
Private bexit As Boolean
Private timer_count As Integer
Private OnRow As Integer
Private OnCol As Integer
Private GridData As Collection 
Private GridRows As Collection
Private iLeft As Integer
Private iTop As Integer
Private i As Integer
Private iFirstRow As Integer
Private iLastRow As Integer
Private bFoundFirst As Integer
Private SeenBy As Collection 
Private clinic As Collection
Private clinics As Collection
Private items As Collection 
Private item As Collection
Private Scheduled_Fee As Collection
Private consult_item_number As String 
Private fk_lu_default_billing_level As Integer
Private iBilling_Category As Integer
Private Const cBilling_Category_Private As Integer = 0
Private Const cBilling_Category_Medicare As Integer = 1
Private Const cBilling_Category_Veteran As Integer = 2
Private Const cBilling_Category_Other As Integer = 3
Private iAccountDisplayMode As Integer  'const.Billing_Accounts_Paid,  Billing_Accounts_UnPaid, Billing_Accounts_All
Private form_billingcards As FPatientBillingCards
Private appointment_icons As Collection   
Private staff As Collection
Private Staff_Member As Collection
Private fk_staff As Integer                  'whichever staff saw the patient
Private fk_patient As Integer
Private Unbilled_Consultations As Collection 
Private Unbilled_consultation As Collection
Private payers As Collection
Private payer As Collection   'could be patient/organisation etc
Private cGridColumn_ItemNumber As Integer = 0
Private cGridColumn_BriefDescriptor As Integer = 1
Private cGridColumn_Fee As Integer = 2
Private cGridColumn_FeeType As Integer = 4
Private Payment_Methods As Collection
Private InvoiceComments As Collection
Private InvoiceComment As Collection
Private FeeTypes As Collection
Private FeeType As Collection
Private Duration As Integer                           'the duration of the appointment - at least what they were booked in for
Private Descriptors_Brief As Collection
Private descriptor_brief As Collection
Private Items_Billed As Collection
Private Item_Billed As Collection
Private iTimer_Search_Mode As Integer
Private cTimer_SearchMode_Patient As Integer = 0
Private cTimer_SearchMode_Descriptor As Integer = 1
Private Patients As Collection
Private Patient As Collection
Private Const cTabPatientsUnbilled As Integer = 0
Private Const cTabPatientsAccounts As Integer = 1

Public Sub Init() 
   '---------------------------------------------------------
   'Do all the form initialisation stuff like adding stuff to 
   'combo's, setting numbers of columns in lists, displaying
   'the patients contact details
   '---------------------------------------------------------
   
   Dim x As Integer
   
   With form_billingcards = New FPatientBillingCards(Vbox_PatientBillingCards)
      .Init(VBox_EditArea_Outer)
      .HBox_NextOfKin.Visible = False   
      .Hbox_LegacyFileNumber.Visible = False  
      .HBox_FindNextOfKin.Visible = False  
      .HBox_ResponsiblePayer.Visible = False  
   End With
   With cvwUnBilled
      .Columns.count = 2
   End With
   lblmeasure.text = "  Payment By "
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Inner, lblmeasure)
   modEditAreaHelpers.Resize_label(lblItems, lblmeasure)
    modEditAreaHelpers.Resize_label(lblDisplayAccounts, lblmeasure)
   Payment_methods = modUtil.LoadCombo(cmbPaymentMethods, modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Payment_Methods_Get()), "method")
   InvoiceComments = modUtil.LoadCombo(cmbInvoiceComments, modBillingDBI.Invoice_Comments_Get(), "comment")
   FeeTypes = modUtil.LoadCombo(cmbFeeType, modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Fee_Types_Get()), "type") 'fixme
   staff = modUtil.LoadCombo(cmbStaff, modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get()), "wholename")  
   seenBy = modUtil.LoadCombo(cmbSeenBy, modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get()), "wholename")  
   clinics = modUtil.LoadCombo(cmbLocation, modAdminDBI.Clinics_Get(), "branch")
   With cvwPatients
      .Columns.count = 2
   End With
   With cvwItemsBilled
      .Columns.count = 11
      .Columns[0].text = "Patient"
      .Columns[1].text = "Seen By"
      .Columns[2].text = "Location"
      .Columns[3].text = "Visit Date"
      .Columns[4].text = "Item"
      .Columns[5].text = "Descriptor"
      .Columns[6].text = "Fee"
      .Columns[7].text = "GST"
      .Columns[8].text = "Due"
      .Columns[9].text = "Paid"
      .Columns[10].text = "Rebate"
   End With
   Me.Center()
   Try Settings_Load()         'load settings for this form
   cvwUnBilled_Refresh()
   GridRows = New Collection
   columnview1.Columns.count = 4
   cmbInvoiceComments.index = -1
   Gridview1_Init()  
   
End

Public Sub EditArea_Clear() 
   
   bExit = True
  
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Inner) 
   textlabelPayer.text = ""
   Unbilled_consultation = Null
   gridview1.Clear
   ' fk_payer = 0
   fk_lu_default_billing_level = const.Billing_Default_Level_Private
   fk_patient = 0
   cmbFeeType.Visible = False 
   cvwItemsBilled.Clear()
   Items_Billed = New Collection
   Item_Billed = New Collection
   iAccountDisplayMode = const.Billing_Accounts_Unpaid
   rbAccountsDisplayUnPaid.value = True
   lblInvoiceTotal.text = ""
   EditArea_Notify_Data_Change(False)
   bexit = False
   
End

Public Sub Reset_Keys()
  
   
End

Public Sub cvwItemsBilled_Menu()
   
   If cvwItemsBilled.count Then
      mnuItemsBilled.Popup()
   End If    
   
End

Public Sub cvwUnBilled_Refresh()
   '------------------------------------------------------------------------
   'Display a list of all unbilled consultations ordered by appointment date
   '-------------------------------------------------------------------------
   
   EditArea_Clear()
   Unbilled_Consultations = modBillingDBI.Consultations_UnBilled_Get()
   cvwUnBilled.Clear()
   For Each Unbilled_consultation In Unbilled_Consultations
      cvwUnBilled.Add(Unbilled_consultation!pk, 0)
      cvwUnBilled[Unbilled_consultation!pk][0] = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
      cvwUnBilled[Unbilled_consultation!pk][1] = Unbilled_consultation!wholename
   Next
   If cvwUnBilled.count Then
      cvwUnBilled.MoveFirst()
      cvwUnBilled.Item.Selected = True
      cvwUnBilled_Select()
      
   Endif
   
End

Public Sub cvwUnBilled_Select()
   '------------------------------------------------------------------------------
   'User ha  If Bexit Then Return s clicked on one of the unbilled patients in the left hand list
   'Display their details in the edit area, match staff combo to whoever saw them
   'assume a standard consultation FIXME make this user configureable
   '------------------------------------------------------------------------------
   
   cvwUnBilled.MoveCurrent()
   EditArea_Clear()
  
   Unbilled_consultation = Unbilled_Consultations[cvwUnBilled.Item.key]
   Try fk_lu_default_billing_level = Unbilled_consultation!fk_lu_default_billing_level
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private
   fk_patient = Unbilled_consultation!fk_patient
    bExit = True   
   txtpatient.text = Unbilled_consultation!wholename
   txtDate.text = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
   Try Payer_Get(Unbilled_consultation)
   fk_staff = Unbilled_consultation!fk_staff 
   For Each Staff_Member In staff
      If Staff_Member!fk_staff = fk_staff Then
         cmbSeenBy.index = cmbSeenBy.Find(Staff_Member!wholename)
      Endif
   Next
   duration = Val(Split(Unbilled_consultation!duration, ":")[1]) + Val(Split(Unbilled_consultation!duration, ":")[0]) * 60        ' e.g 10, 20, 30, 50, 60, 70 .... etc!
   txtDuration.text = Str(duration) & " minutes"
   Select Case duration
      Case 1 To 19
         consult_item_number = "23"
      Case 20 To 40
         consult_item_number = "36"
      Case 40 To 100
   End Select
   cmbFeeType.Enabled = True  
   
   Select Case fk_lu_default_billing_level
      Case const.Billing_Default_Level_BulkBill
         cmbFeeType.Enabled = False 
         If Unbilled_consultation!veteran_number <> "" Then
            rbInvoiceToVeterans.value = True
         Else
            rbInvoiceToMedicare.value = True
         Endif
      Case const.Billing_Default_Level_Private
         rbInvoiceToPatient.value = True
      Case const.Billing_Default_Level_HealthCareCardConcession
      Case const.Billing_Default_Level_PensionerConcession
      Case const.Billing_Default_Level_MedicoLegal 
         
   End Select
   bExit = False  
   form_billingcards.Display_Patient_Data(Unbilled_consultation) 
   VBox_EditArea_Outer.Enabled = True 
   GridView1.Enabled = True 
   cvwItemsBilled_Refresh()
   Print cmbFeeType.Enabled
   
End

Public Sub cvwItemsBilled_Refresh()
   '-----------------------------------------------------------------------------------------------------
   'Refresh all previous items billed for the patient E.g a single row could be Item 23 standard consult
   'Display in columnview, if more than 1 item per invoice, only display name/dr/date once
   '----------------------------------------------------------------------------------------------------
   
   Dim item As String
   Dim fk_last_invoice As Integer
   
   cvwItemsBilled.Clear
   Items_Billed = modBillingDBI.Items_Billed_Get(fk_patient, iAccountDisplayMode)
   For Each Item_Billed In Items_Billed
      
      cvwItemsBilled.Add(Item_Billed!pk_items_billed, 0)
      If fk_last_invoice <> Item_Billed!fk_invoice Then  
         cvwItemsBilled[Item_Billed!pk_items_billed][0] = Item_Billed!patient_firstname
         cvwItemsBilled[Item_Billed!pk_items_billed][1] = Item_Billed!staff_provided_service_wholename
         cvwItemsBilled[Item_Billed!pk_items_billed][2] = Item_Billed!branch
         cvwItemsBilled[Item_Billed!pk_items_billed][3] = Format(Item_Billed!visit_date, "dd/mm/yyyy")
      Else
         cvwItemsBilled[Item_Billed!pk_items_billed][0] = ""
         
      End If   
      
      If Not IsNull(Item_Billed!mbs_item) Then item = Item_Billed!mbs_item
      If Not IsNull(Item_Billed!ama_item) Then item = Item_Billed!ama_item
      If Not IsNull(Item_Billed!user_item) Then item = Item_Billed!user_item
      cvwItemsBilled[Item_Billed!pk_items_billed][4] = item
      cvwItemsBilled[Item_Billed!pk_items_billed][5] = Item_Billed!descriptor_brief
      cvwItemsBilled[Item_Billed!pk_items_billed][6] = Item_Billed!amount
      cvwItemsBilled[Item_Billed!pk_items_billed][7] = Item_Billed!gst_amount
      If Item_Billed!paid = True Then
         cvwItemsBilled[Item_Billed!pk_items_billed][8] = "$0.0"
         cvwItemsBilled[Item_Billed!pk_items_billed][9] = Item_Billed!amount
      Else
         cvwItemsBilled[Item_Billed!pk_items_billed][8] = Item_Billed!amount
         cvwItemsBilled[Item_Billed!pk_items_billed][9] = "$0.0"
      Endif
      fk_last_invoice = Item_Billed!fk_invoice  
      '   cvwItems_Billed[Item_Billed!pk_items_billed][6 ] =FIXME ADD THE GST
      
      ' cvwItemsBilled[Item_Billed!pk_items_billed][ 7 ] =  fixme add the amount still due
      
      '  cvwItemsBilled[Item_Billed!pk_items_billed][8] =     fixme add the amount paid
      
      '   cvwItemsBilled[Item_Billed!pk_items_billed][9 ] =    fixme add the medicare rebate
      
   Next
   
End

Public Sub cvwItemsBilled_Select()
   '--------------------------------------------------------------------
   'User has clicked on the list of items billed for the current patient
   '--------------------------------------------------------------------   
   
   cvwItemsBilled.MoveCurrent
   Item_Billed = Items_Billed[cvwItemsBilled.Item.key] 
   txtDate.text = Item_Billed!visit_date
   txtReferenceDetails.text = Item_Billed!reference
   cmbSeenBy.index = cmbSeenBy.Find(Item_Billed!staff_provided_service_wholename)
   cmbLocation.index = cmbLocation.Find(Item_Billed!branch)
   '---------------------------------------------------------
   'now create an items collection to load back into the grid
   '---------------------------------------------------------
   onrow = 0
   gridview1.Clear()
   Do Until Items_Billed[cvwItemsBilled.Item.key]!fk_invoice <> Item_Billed!fk_invoice
      gridview1[onrow, 0].text = cvwItemsBilled[Items_Billed[cvwItemsBilled.Item.key]!pk_items_billed][4]
      gridview1[onrow, 1].text = Items_Billed[cvwItemsBilled.Item.key]!descriptor_brief
      gridview1[onrow, 2].text = Items_Billed[cvwItemsBilled.Item.key]!amount
      gridview1[onrow, 4].text = Items_Billed[cvwItemsBilled.Item.key]!billing_type
      gridview1[onrow, 5].text = Items_Billed[cvwItemsBilled.Item.key]!gst_rate
      Inc onrow
      If cvwItemsBilled.MoveNext() Then Break
   Loop
   
End

Public Sub Payer_Get(patient As Collection) 'fix me to fk_patient
   'temp code get the responsible person FIXME  body code only whilst developin
   'need more inclusive way of getting the payer - eg might not be a patient
   
   bExit = True   
   cvwUnBilled.MoveCurrent()
   payer = modBillingDBI.Responsible_Payer_Get(Patient!fk_patient)
   If Not IsNull(Payer) Then  
      If Patient!fk_patient <> payer!fk_patient Then
         rbInvoiceToOther.value = True 
      Endif
      Try textlabelPayer.text = payer!wholename & "<BR>" & Trim(payer!street1 & " " & payer!street2) & "<BR>" & payer!town & " " & payer!postcode
   End If  
   bExit = False   
   
End

Public Sub Gridview1_Init()
   
   Dim x As Integer
   
   With gridview1
      .Rows.H = 20 
      .Columns.Count = 6
      .Rows.count = 5
      For x = 0 To 5
         If x <> 1 And x <> 4 Then 
            .Columns[x].Width = 75
            label101.width = 75
            lblInvoiceTotal.width = 75
            label104.width = 750
            label105.width = 75
         Else
            .Columns[1].width = gridview1.width - 500
            label200.width = gridview1.width - 500
            .Columns[4].width = 200
         End If
      Next
      .Columns[0].text = "Item"
      .Columns[1].text = "Description"
      .Columns[2].text = "Fee"
      .Columns[3].text = "Gap"
      .Columns[4].text = "Rate"
      .Columns[5].text = "GST"
      
   End With
   ' With cmbFeeType
   '    .width = gridview1.Columns[onCol].Width
   '    .height = gridview1.Rows[onrow].Height + 5
   '    .left = gridview1[onrow, oncol].Left + 2
   '    .top = ((onrow + 1) * 20) + 2
   ' End With
   gridview1.height = 100
   
End

Public Sub Gridview1_Rebuild(data As Collection)
   
   Dim i As Integer
   
   gridview1.Clear()
   gridview1.Rows.count = data.count
   For i = 0 To data.count - 1
      gridview1[i, 0].text = data[i]!time
      gridview1[i, 1].picture = data[i]!picture
      gridview1[i, 2].text = data[i]!name
      gridview1.Rows[i].height = data[i]!slots * 20
   Next
   
End

Public Sub GridView1_Menu()
   '-------------------------------------------------------------
   'if any of the cells in the grid have text then popup the menu
   '-------------------------------------------------------------
   
   Dim row As Integer
   Dim col As Integer
   Dim bHaveText As Boolean
   
   For row = 0 To gridview1.Rows.count - 1
      For col = 0 To 4
         If gridview1[row, col].Text <> "" Then
            mnuItems.Popup
            bHaveText = True
            Break
         Endif
      Next
      If bHaveText Then Break
   Next  
   
End

Public Sub Gridview1_Delete_Row(onrow As Integer)
   
   Dim col As Integer
   
   For col = 0 To 4
      gridview1[onrow, col].text = ""
   Next
   HBox_Descriptor.Visible = False  
   columnview1.Visible = False   
   Invoice_Calculate_Total()
   
End

Public Sub GridView1_Click()
   
   If txtpatient.text = "" Then
      Message.Info("Please select a patient to invoice, either by clicking on the patients list, or searching for a patient.")
      Return 
   End If   
   
   onrow = gridview1.Row
   OnCol = gridview1.Column
   If textbox1.Visible = False Then HBox_Descriptor.Visible = False  
   If Oncol <> cGridColumn_BriefDescriptor Then HBox_Descriptor.Visible = False   
   Select Case oncol
      Case cGridColumn_FeeType
         With cmbFeeType
            .width = gridview1.Columns[onCol].Width
            .height = gridview1.Rows[onrow].Height + 5
            .left = gridview1[onrow, oncol].Left + 2
            .top = ((onrow + 1) * 20) + 2
            If gridview1[onrow, 0].text <> "" Then 
               .Visible = True  
            Else
               .Visible = False  
            End If
         End With
      Case Else
         
         cmbFeeType.Visible = False   
         
   End Select
   
End

Public Sub GridView1_DblClick()
   
   Dim i As Integer
   Dim iSlotCount As Integer
   
   If oncol = 4 Or If txtpatient.text = "" Then Return
   If gridview1[onrow, oncol].text <> "" Then Return
   TextBox1.text = ""                              'clear search textbox
   bFoundFirst = False  
   
   For i = 0 To gridview1.rows.count - 1           'figure out which rows are selected
      If gridview1.rows[i].selected = True Then
         If bfoundfirst = False Then
            bfoundfirst = True
            ifirstrow = i
         End If 
         ilastrow = i
         Print "row " & i & " is selected"
      End If 
   Next   
   Select Case oncol
      Case 1 'the brief descriptor, allow searching
         Try txtDescriptor.text = item!descriptor
         If Not Error Then
            txtDescriptor.Pos = 0
            HBox_Descriptor.Visible = True   
         Endif
      Case Else
   End Select
   onrow = gridview1.Row 
   iLeft = gridview1[onrow, oncol].Left
   iTop = ((onrow + 1) * 20) + 4 'iSlotCount * 20
   TextBox1.left = iLeft + 2
   TextBox1.top = iTop
   TextBox1.width = gridview1.Columns[oncol].Width + 4
   TextBox1.Height = ((iLastRow - iFirstRow) + 1) * gridview1.Rows[0].Height + 5
   TextBox1.Visible = True
   TextBox1.SetFocus()
   Print "should have set focus"
   
End

Public Sub GridView1_Select()
   
   TextBox1.Visible = False   
   
End

Public Sub gridview_Keypress()
   
   If bExit Then Return 
   If key.code = key.return Then
      oncol = 0
      onrow = 0
      GridView1_DblClick()
   Endif
   
End

Public Sub cmbEditArea_Click()
   
   If bExit Then Return 
   
   Select Case Last.tag
      Case "staff"
         '   For Each window1 In Workspace1.windows
         '   If window1.Caption = staff[cmbstaff.index]!wholename & " from " & Format(Now, gb.LongDate) Then
         '     Workspace1.ActiveWindow = Window1
         '     Workspace1.Tag = Staff_Member
         '    Return
         '  Endif
         '  Next
         '  Staff_Member = staff[cmbStaff.Index]
         '  form_appointments.Init(Staff_Member, Now(), modDBConnect.currentUser!fk_clinic, Appointment_Icons)
      Case "fee type"
         'User is changing the fee type
         gridview1[onrow, 4].text = cmbFeeType.Text
         Print FeeTypes[cmbFeeType.index]
         Try gridview1[onrow, 2].text = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(gridview1[onrow, 0].text, FeeTypes[cmbFeeType.index]!pk)!price
         If Error Then
            Message.info("No fee's exist for the billing level you selected")
         Endif
         Invoice_Calculate_Total
   End Select
   
End

Public Sub TextBox1_GotFocus()
   '-----------------------------------------------------
   'If searching for brief descriptor then activate timer
   '-----------------------------------------------------   
   
   If oncol = cGridColumn_BriefDescriptor Then
      With columnview1
         .top = Hbox_InvoiceGrid.top + TextBox1.top + TextBox1.height
         .left = VBox_InvoiceGrid.Left + TextBox1.Left
         .width = TextBox1.Width
         .Visible = False  
      End With
      With HBox_Descriptor
         .top = columnview1.Top
         .Width = columnview1.Width
         .left = columnview1.left
         .Height = VBox_InvoiceGrid.height - TextBox1.top - textbox1.height
         If Last.text = "" And gridview1[onrow, 0].text <> "" Then .Visible = True 
      End With
      iTimer_Search_Mode = cTimer_SearchMode_Descriptor
   Endif
   
End

Public Sub TextBox1_Activate()
   
   If bexit Then Return 
   Print "textbox1_activate", oncol, " is the column we are in"
   Select Case oncol
      Case cGridColumn_ItemNumber
         gridview1[gridview1.row, 0].Text = TextBox1.text
         TextBox1.Visible = False  
         Get_Items(TextBox1.text)
      Case cGridColumn_Fee
         gridview1[gridview1.row, 2].text = "$" & Trim(TextBox1.text)
         TextBox1.Visible = False   
         gridview1.SetFocus()
      Case cGridColumn_BriefDescriptor
         If IsNull(item) Then Return 
         If IsNull(item!descriptor_brief) Then
            Message.Title = "Brief Descriptors"
            gridview1[gridview1.row, 1].Text = Trim(TextBox1.text)
            If Message.question("Do you want to save this brief descriptor?", "Yes", "No") = 1 Then
               modDBConnect.update("billing.fee_schedule", Null, ["pk": item!fk_fee_schedule, "descriptor_brief": gridview1[gridview1.row, 1].Text])   
               item!descriptor_brief = gridview1[gridview1.row, 1].Text
               modDBConnect.CommitTrans()
               TextBox1.Visible = False   
               HBox_Descriptor.Visible = False 
               txtDescriptor.text = "" 
               gridview1.SetFocus()
            Endif
         Endif
   End Select
   
End

Public Sub textbox1_KeyPress()
   
   Select Case key.Code
      Case key.Down
         If oncol = cGridColumn_BriefDescriptor Then
            If columnview1.Visible Then
               With columnview1
                  .MoveFirst
                  .Item.Selected = True 
                  .SetFocus()
               End With
            End If 
         End If      
   End Select
   
End

Public Sub Textbox1_KeyRelease()
   '--------------------------------------------------------------------
   'if user searching for brief descriptor zero the timer count
   'then once they stop typing and timer_count which is incremented by
   'Timer1_Timer > 3 the search is triggered see   Descriptors_Brief_Get
   '--------------------------------------------------------------------
   
   If Trim(TextBox1.text) = "" Then Return  
   timer_count = 0
   If oncol = cGridColumn_BriefDescriptor Then
      timer1.Enabled = True   
      timer1.Start
   Else
      timer1.Enabled = False  
      timer1.Stop
   Endif
   
End

Public Sub Form_Close()
   
   Settings_Save() 
   
End

Private Sub Settings_Load()
   
   Try Vsplit_Main.layout = Settings["Billing_RecordVisit/VSplit_Main.Layout"]
   Try Hsplit_Main.Layout = Settings["Billing_RecordVisit/HSplit_Main.Layout"] 
   Hsplit_EditArea.Layout = Settings["Billing_RecordVisit/HSplit_EditArea.Layout", [2, 1]]  
   Try cvwItemsBilled.Font = Font[Settings["Billing_RecordVisit/cvwItemsBilled.font"]] 
   
End

Public Sub Settings_Save()
   
   Settings["Billing_RecordVisit/VSplit_Main.Layout"] = Vsplit_Main.Layout
   Settings["Billing_RecordVisit/HSplit_Main.Layout"] = Hsplit_Main.Layout
   Settings["Billing_RecordVisit/HSplit_EditArea.Layout"] = Hsplit_EditArea.Layout
   
End

Public Sub Save(Optional bPrint As Boolean = True, Optional bAccount As Boolean = False, Optional bPaid As Boolean = False)
   ' Public Sub Make_Invoice(pk_patient As Integer, items As Collection[], fk_lu_billing_type As Integer, date_printed As Date Default Null, fk_staff As Integer = 0, Optional notes As String = "") As Integer
   ' CREATE TABLE billing.invoices
   ' (
   '  pk serial NOT NULL,
   '   fk_staff_invoicing integer NOT NULL, -- the staff member raising the invoice
   '   date_printed timestamp without time zone,
   '   notes text,
   '   reference text,
   '   fk_staff_provided_service integer NOT NULL, -- the staff member who provider the service on which the invoice is based
   '   fk_patient integer,
   '   date_invoiced timestamp without time zone NOT NULL DEFAULT now(),
   '   paid boolean NOT NULL DEFAULT false,
   '   fk_payer_person integer, -- if not null then the key to the person who pays the bill
   '   fk_payer_branch integer, -- if not null then payer is an organisation/branch
   '   latex text NOT NULL, -- the LaTeX definition of the invoice generated
   '   fk_branch integer NOT NULL, -- The branch at which the patient was provided with the service
   '   visit_date date, -- The date time of the patient visit - may be null because the invoice could be raised not in relation to a visit
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   ' CREATE TABLE billing.items_billed
   
   Dim invoice As New CRow
   Dim i As Collection
   Dim new_item As Collection
   Dim items As New Collection
   Dim item As CRow
   Dim row As Integer
   '------------------
   'Create the invoice
   '------------------
   invoice!fk_staff_invoicing = modDBConnect.currentUser!fk_staff
   If bPrint Then 
      invoice!date_printed = Now()
   Endif
   invoice!notes = cmbInvoiceComments.Text
   invoice!reference = Trim(txtReferenceDetails.text)
   '  invoice!fk_staff_provided_service = Unbilled_consultation!fk_staff
   If cmbSeenBy.Index <> -1 Then    
      invoice!fk_staff_provided_service = staff[cmbSeenBy.index]!fk_staff
   End If   
   ' invoice!fk_patient = Unbilled_consultation!fk_patient 
   Try invoice!fk_patient = fk_patient 'may not be for a patient
   invoice!date_invoiced = Now()
   invoice!fk_branch = modDBConnect.currentUser!fk_branch   
   invoice!visit_date = Val(txtDate.text)
   If bPaid Then invoice!paid = True     
   invoice.Save("billing.invoices", "fk_invoice")
   '------------------------------------
   'Get the items from the grid and save
   'FIXME - will later keep the underlying grid data in an array of some sort
   'and dispose of some of these backend calls
   '------------------------------------
   For row = 0 To gridview1.Rows.count - 1  'fixme check all necessary data is in grids cells
      If gridview1[row, cGridColumn_ItemNumber].Text <> "" Then  
         item = New CRow
         item!fk_fee_schedule = modBillingDBI.fk_fee_shedule_Get_For_Item_Number(gridview1[row, cGridColumn_ItemNumber].Text)
         item!amount = gridview1[row, cGridColumn_Fee].Text
         item!fk_invoice = invoice!fk_invoice
         item!fk_lu_billing_type = Billing_Type_Get_Pk(gridview1[row, cGridColumn_FeeType].Text)
         item.Save("billing.items_billed", "fk_item_billed")
      End If   
   Next
   '------------------------------------------
   'finally mark this appointment as invoiced
   '-----------------------------------------
   Try modDBConnect.update("clerical.bookings", Null, ["pk": Unbilled_consultation!pk, "invoiced": True])  'may not have an appt.
   invoice!latex = modBillingDBI.Print_Invoice(invoice) 
   modDBConnect.update("billing.invoices", Null, ["pk": invoice!fk_invoice, "latex": invoice!latex])
   modDBConnect.CommitTrans
   cvwUnBilled_Refresh()
   
End 

Public Sub Save_old(Optional bPrint As Boolean = True, Optional bAccount As Boolean = False, Optional bPaid As Boolean = False)
   ' Public Sub Make_Invoice(pk_patient As Integer, items As Collection[], fk_lu_billing_type As Integer, date_printed As Date Default Null, fk_staff As Integer = 0, Optional notes As String = "") As Integer
   ' CREATE TABLE billing.invoices
   ' (
   '  pk serial NOT NULL,
   '   fk_staff_invoicing integer NOT NULL, -- the staff member raising the invoice
   '   date_printed timestamp without time zone,
   '   notes text,
   '   reference text,
   '   fk_staff_provided_service integer NOT NULL, -- the staff member who provider the service on which the invoice is based
   '   fk_patient integer,
   '   date_invoiced timestamp without time zone NOT NULL DEFAULT now(),
   '   paid boolean NOT NULL DEFAULT false,
   '   fk_payer_person integer, -- if not null then the key to the person who pays the bill
   '   fk_payer_branch integer, -- if not null then payer is an organisation/branch
   '   latex text NOT NULL, -- the LaTeX definition of the invoice generated
   '   fk_branch integer NOT NULL, -- The branch at which the patient was provided with the service
   '   visit_date date, -- The date time of the patient visit - may be null because the invoice could be raised not in relation to a visit
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   ' CREATE TABLE billing.items_billed
   
   Dim invoice As New CRow
   Dim i As Collection
   Dim new_item As Collection
   Dim items As New Collection
   Dim item As CRow
   Dim row As Integer
   '------------------
   'Create the invoice
   '------------------
   invoice!fk_staff_invoicing = modDBConnect.currentUser!fk_staff
   If bPrint Then 
      invoice!date_printed = Now()
   Endif
   invoice!notes = cmbInvoiceComments.Text
   invoice!reference = Trim(txtReferenceDetails.text)
   invoice!fk_staff_provided_service = Unbilled_consultation!fk_staff
   invoice!fk_patient = Unbilled_consultation!fk_patient 
   invoice!date_invoiced = Now()
   invoice!fk_branch = modDBConnect.currentUser!fk_branch   
   invoice!visit_date = Unbilled_consultation!begin
   If bPaid Then invoice!paid = True     
   invoice.Save("billing.invoices", "fk_invoice")
   '------------------------------------
   'Get the items from the grid and save
   'FIXME - will later keep the underlying grid data in an array of some sort
   'and dispose of some of these backend calls
   '------------------------------------
   For row = 0 To gridview1.Rows.count - 1  'fixme check all necessary data is in grids cells
      If gridview1[row, cGridColumn_ItemNumber].Text <> "" Then  
         item = New CRow
         item!fk_fee_schedule = modBillingDBI.fk_fee_shedule_Get_For_Item_Number(gridview1[row, cGridColumn_ItemNumber].Text)
         item!amount = gridview1[row, cGridColumn_Fee].Text
         item!fk_invoice = invoice!fk_invoice
         item!fk_lu_billing_type = Billing_Type_Get_Pk(gridview1[row, cGridColumn_FeeType].Text)
         item.Save("billing.items_billed", "fk_item_billed")
      End If   
   Next
   '------------------------------------------
   'finally mark this appointment as invoiced
   '-----------------------------------------
   modDBConnect.update("clerical.bookings", Null, ["pk": Unbilled_consultation!pk, "invoiced": True])  
   invoice!latex = modBillingDBI.Print_Invoice(invoice) 
   modDBConnect.update("billing.invoices", Null, ["pk": invoice!fk_invoice, "latex": invoice!latex])
   modDBConnect.CommitTrans
   cvwUnBilled_Refresh()
   
End 

Public Sub Billing_Type_Get_Pk(txt As String) As Integer
   
   Dim type As Collection
   
   For Each type In FeeTypes
      If type!type = txt Then
         Return type!pk
      Endif
   Next 
   
End

Public Sub Form_Resize()
   
   Gridview1_Init()
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   rbInvoiceToOther.value = True
   If Last.tag = "find patient" Then
      EditArea_Clear()
      iTimer_Search_Mode = cTimer_SearchMode_Patient
   End If
   
End

Public Sub Appointment_icons_Get_Picture(Appointment_Icons As Collection) As Collection 
   '-----------------------------------------------------------------------------------------
   'Loads the actual picture of the appointment icon into the collection got from the backend
   '-----------------------------------------------------------------------------------------
   
   Dim Appointment_icon As Collection
   
   For Each Appointment_Icon In Appointment_Icons
      Appointment_Icon!picture = Picture.Load(Appointment_Icon!icon_path)
   Next
   Return Appointment_Icons
   
End

Public Sub Descriptors_Brief_Get()
   
   If Trim(TextBox1.text) = "" Then Return  
   timer1.Stop
   With columnview1
      .Clear
      .Visible = False
   End With
   Descriptors_Brief = modBillingDBI.Descriptors_Brief_Get(Trim(TextBox1.text))
   If Descriptors_Brief.count Then
      For Each Descriptor_Brief In Descriptors_Brief  
         columnview1.Add(Descriptor_Brief!pk, 0)
         columnview1[Descriptor_Brief!pk][0] = Descriptor_Brief!mbs_item
         columnview1[Descriptor_Brief!pk][1] = Descriptor_Brief!descriptor_brief
      Next
      With columnview1
         .Raise
         .Visible = True   
      End With
   Else
      
   End If
   
End

Public Sub Patients_Get()
   
   Inc Application.Busy
   Wait
   timer1.Stop
   timer1.Enabled = False  
   cvwPatients.Clear
   patients = modContactsDBI.patients_get_firstname_surname(Trim(txtFindPatient.text))       
   patients.Remove("sql_in_english")
   If patients.count Then
      For Each patient In patients
         cvwPatients.Add(patient!pk_view, 0)
         cvwPatients[patient!pk_view][0] = patient!wholename
         cvwPatients[patient!pk_view][1] = Format(patient!birthdate, "dd/mm/yyyy")
      Next
      If patients.count = 1 Then
         With cvwPatients
            .SetFocus()
            .MoveFirst
            .Item.Selected = True
         End With
         cvwPatients_Select()
      Endif
   Endif
   Dec Application.Busy

End

Public Sub Get_Items(txt As String)
   'developmental prototype only doesn't just get items.
   'A patient may have a default 'billing_level' eg. private or health care concession
   ' "1";"Bulk Bill"
   ' "2";"Private"
   ' "3";"Health Care Card Concession"
   ' "4";"Pensioner Concession"
   ' "5";"Medico-Legal"
   'however these billing_levels are not the same as the concept of billing_types in the backend
   ' "1";"AMA Fee"
   ' "2";"DVA (Non LMO rate)"
   ' "3";"DVA (LMO rate)"
   ' "4";"Health Care Card Concession"
   ' "5";"Pensioner Concession"
   ' "6";"Private Fee"
   ' "7";"TAC (Transport Accident Commission)"
   ' "8";"Schedule Fee"
   ' For example a patient may be bulk billed as either medicare or veteran (for some things) or both
   ' or a practice may bill privately at the AMA rate, or privately at a concession rate
   
   Dim fk_lu_billing_type As Integer
   Dim bMissingBriefDescriptor As Boolean
   Dim billing_type As String
   
   txtDescriptor.text = ""
   bExit = True
   Select Case fk_lu_default_billing_level     
      Case const.Billing_Default_Level_BulkBill
         fk_lu_billing_type = const.Billingtype_Scheduled_Fee
         billing_type = "Schedule Fee"
      Case const.Billing_Default_Level_PensionerConcession
         fk_lu_billing_type = const.Billingtype_Pensioner_Concession
         billing_type = "Pensioner Concession"
      Case const.Billing_Default_Level_HealthCareCardConcession
         fk_lu_billing_type = const.Billingtype_Health_Care_Card_Concession
         billing_type = "Health Care Card Concession"
      Case const.Billing_Default_Level_Private
         fk_lu_billing_type = const.Billingtype_Private
         billing_type = "Private Fee"
      Case const.Billing_Default_Level_MedicoLegal
         fk_lu_billing_type = const.Billingtype_Private
         billing_type = "Private Fee" 'fixme
      Case Else 'is null
         fk_lu_billing_type = const.Billingtype_Private                         'default to private billing
         billing_type = "Private Fee"
   End Select
   
   If IsNull(fk_lu_default_billing_level) Then
      cmbFeeType.index = cmbFeeType.Find("Private Fee")
      gridview1[gridview1.row, 4].Text = "Private Fee"
   Else
      cmbFeeType.index = cmbFeeType.Find(billing_type)
      gridview1[gridview1.row, 4].Text = billing_type
   Endif
   Scheduled_Fee = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(Trim(txt), const.Billingtype_Scheduled_Fee)
   Items = modBillingDBI.Items_Get(Trim(txt), fk_lu_billing_type)
   If items.count Then
      For Each item In items 'fixme ?proper way of doing this
         If IsNull(item!descriptor_brief) Then
            bMissingBriefDescriptor = True   
         Endif
         gridview1[gridview1.row, 1].Text = item!descriptor_brief
         gridview1[gridview1.row, 2].Text = item!price
         Try gridview1[gridview1.row, 3].Text = Format(Str(CFloat(Val(Replace(item!price, "$", ""))) - CFloat(Val(Replace(Scheduled_Fee!price, "$", "")))), "$#.###")
         Break
      Next
      bExit = False 
      Invoice_Calculate_Total()
      If bMissingBriefDescriptor = False Then gridview1.row = gridview1.row + 1
   Else
      item = Null 
      
   Endif
   If bMissingBriefDescriptor = True Then
      oncol = 1
      textbox1.SetFocus()
      Wait
      GridView1_DblClick()
      Return
   End If  
   oncol = 0
   ' gridview1.SetFocus()
   bExit = True
   GridView1_DblClick()
   gridview1.SetFocus()
   bExit = False  
   EditArea_Notify_Data_Change(True)
End

Public Sub columnview1_KeyPress()
   
   If key.code = key.return Then
      columnview1_DblClick
   End If  
   
End

Public Sub columnview1_DblClick()
   
   columnview1.MoveCurrent()
   columnview1.Visible = False   
   Descriptor_Brief = Descriptors_Brief[columnview1.Item.key]
   If Not IsNull(Descriptor_Brief!mbs_item) Then
      gridview1[onrow, 0].text = Descriptor_Brief!mbs_item 'double done in get_items, prototype only fixme
   End If
   If Not IsNull(Descriptor_Brief!ama_item) Then
      gridview1[onrow, 0].text = Descriptor_Brief!ama_item
   End If
   If Not IsNull(Descriptor_Brief!user_item) Then
      gridview1[onrow, 0].text = Descriptor_Brief!user_item
   End If
   Get_Items(gridview1[onrow, 0].text) 'duplication in a way 'see note in subroutine
   textbox1.Visible = False   
   gridview1.SetFocus()
   
End

Public Sub mnuItems_Click()
   
   Dim x As Integer
   
   Select Case Last.tag
      Case "delete item"
         Gridview1_Delete_Row(onrow)
      Case "delete all items"
         Gridview1_Clear()
   End Select 
   
End

Public Sub mnuItemsBilled_Click()
   
   Select Case Last.tag
      Case "font"
         modUtil.Columnview_SetFont(cvwItemsBilled, "Billing_RecordVisit")
   End Select 
   
End

Public Sub Gridview1_Clear()
   
   gridview1.Clear()
   item = Null
   oncol = 0
   onrow = 0
   
End

Public Sub Gridview1_Load()
   '------------------------------------------------------------ 
   'Takes items for an invoice and puts them back into the grid 
   '------------------------------------------------------------ 
   
End

Public Sub Invoice_Calculate_Total()
   
   Dim x As Integer
   Dim total As Float
   
   For x = 0 To gridview1.Rows.Count - 1
      If gridview1[x, 2].text = "" Then Break
      total = total + CFloat(Val(Replace(gridview1[x, 2].text, "$", "")))
   Next
   
   lblInvoiceTotal.text = "  " & Format$(total, "$,#.###")
   
End

Public Sub rbInvoiceTo_Click()
   'fixme put integer as tag
   
   If bExit Then Return 
   textlabelPayer.text = ""
   Select Case Last.tag
      Case "other"
         '   Try Payer_Get(Patient)
         ' Case "medicare"
         '    iBilling_Category = cBilling_Category_Private
         ' Case "veteran"
         '    iBilling_Category = cBilling_Category_Private
         '    
         ' Case "patient"
         '    iBilling_Category = cBilling_Category_Other   
         
   End Select
   
End

Public Sub Items_Refresh()
   
   Select Case iBilling_Category
      Case cBilling_Category_Medicare
         
      Case cBilling_Category_Veteran
         
      Case cBilling_Category_Private
         
      Case cBilling_Category_Other
         
   End Select
   
End

Public Sub Button1_Click()
   
   HBox_Descriptor.Visible = False  
   'modBillingDBI.Fee_Schedule_Import_From_Pracsoft()
   
End

Public Sub timer1_Timer()
   
   Inc timer_count
   Print timer_count
   If timer_count > 3 Then
      Select Case iTimer_Search_Mode
         Case cTimer_SearchMode_Patient
            Patients_Get
         Case cTimer_SearchMode_Descriptor
            Descriptors_Brief_Get
      End Select
      
   Endif
   
End

Public Sub VBox_InvoiceGrid_Leave()
   
   TextBox1.Visible = False  
   timer1.Enabled = False   
   
End

Public Sub MainToolbar_Click()
   
   Select Last.tag
      Case "new invoice"
         With cvwUnBilled
            .UnselectAll()
            .Foreground = Color.LightGray
         End With
         EditArea_Clear()
         txtpatient.SetFocus
      Case "new receipt"
         Gridview1_Clear()
      Case "print receipt"
         Save(True, False, True)
      Case "save without printing"
         Save(False, True)
      Case "print account"
         Save(True, True)
   End Select
   
End

Public Sub cvwUnBilled_Menu()
   
   If Last.count Then mnuUnBIlled.Popup()
   
End

Public Sub mnuUnbilled_Click()
   
   Select Case Last.tag
      Case "font"
         modUtil.Columnview_SetFont(cvwUnBilled, "Billing_RecordVisit")
   End Select 
   
End



Private Sub EditArea_Notify_Data_Change(bFlag As Boolean)
 
   If bFlag Then
      VBox_EditArea_Outer.Padding = 1
   Else
      VBox_EditArea_Outer.Padding = 0
   End If   
   
End

Public Sub EditArea_Textbox_KeyRelease()
   If bExit Then Return 
   If Last.tag = "find patient" Then
      timer_count = 0      
      timer1.Enabled = True
      timer1.Start         
   End If  
   
End

Public Sub EditArea_TextBox_Change()
   
   If Bexit Then Return
   If Last.tag = "patient" Then
      If Trim(Last.text) = "" Then
         EditArea_Clear()
         txtpatient.SetFocus()
      Endif
   Endif
   EditArea_Notify_Data_Change(True)

End

Public Sub cvwPatients_Select()
   ' patient name (have this) and hence fk_patient
   ' date as visit_date
   ' duration (not kept at this point)
   ' seen by (dr combo) as staff_provider_service_title, wholename match combo text
   ' location combo as branch (match combo text)
   ' Invoice to (patient/medicare/veteran/other)
   ' Find and display the payer
   ' Reference (not yet in the back end)
   ' Items: item/description/fee/gap/rate/gst
   ' fk_item_billed (is there as pk_items_billed)
   ' have fk_invoice, billing_type, fk_lu_billing_type, mbs_item etc, descriptor & descriptor_brief, gst_rate, percentage_fee_rule
   ' also have fk_staff_invoicing and associate datae., patient details, but not the medicare numbers etc.
   
   If cvwPatients.count = 0 Then Return
   EditArea_Clear()
   cvwPatients.MoveCurrent
   Patient = patients[cvwPatients.Item.Key]
   fk_patient = Patient!fk_patient  
   Try fk_lu_default_billing_level = patient!fk_lu_default_billing_level
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private 
   bExit = True   
   form_billingcards.Display_Patient_Data(Patient)
   txtpatient.text = Patient!wholename  
   Try Payer_Get(Patient)    
   VBox_EditArea_Outer.Enabled = True 
   GridView1.Enabled = True           
   cvwItemsBilled_Refresh()                
   bExit = False  
End

Public Sub Item_Billed_Display()
   
End

Public Sub TabStripPatients_Click()
   '-------------------------------------------------------
   'User has clicked on the tabstip containing either 
   'the unbilled patients already seen or the tab to allow
   'staff to search for a patient's accounts
   '-------------------------------------------------------

   Select Case Last.index
      Case cTabPatientsUnbilled
         cvwUnBilled.SetFocus()
      Case cTabPatientsAccounts
         txtFindPatient.SetFocus() 'and clear the edit area
         
   End Select
   
End

Public Sub tbRefreshUnbilled_Click()
   
   cvwUnBilled_Refresh()
   
End


Public Sub rbAccounts_Click()
   '-------------------------------------------------------------------------
   'User has clicked on the radiobuttons above the invoices/billed items list
   'The tags are:
   'const.Billing_Accounts_Unpaid = 0
   'const.Billing_Accounts_Paid = 1
   'const.Billing_Accounts_All = 2
   '-------------------------------------------------------------------------
  If bExit Then Return  
 
  iAccountDisplayMode = Last.tag 
  cvwItemsBilled_Refresh()       
End
