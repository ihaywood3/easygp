' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' A class to record the patients visit and raise the invoice
'----------------------------------------------------------------------
'' -----------------------------------------------------------------------------------------------
' Claim Num: PatientName: MedicareNumber DateSeen Item_Number Assigned$ Payable$ ExplanationCode
'  U1892     Peter patient 2111111111    10 July 12   31265    150.90    0.00        374
'
'     bla bla
'                                                TOTAL eft aMOUNT Paid             3838.00
'  Explanation of codes
'  374 Old card issue used - benefit not payable - also refer @ (whatever the @ means I don't know)
'
'  Sometimes they may include **NB:medicare number issued**, providing us with a new number
'
'  The secretarial work flow is hence.
'  1) Examine the printout - this money has already been put into the doctors/practice account
'  2) Where **NB:medicare number issued** under item > update the patients file
'  3) - Select the Claim coverslip number from the GUI
'     - Receipt the cheque for the amount received
'     - reconcile the voucher list
'     - for each voucher that has not been paid > set its fee amount to 0.00 (i.e decrement batch total%)
'     - If EFTRecieved now = reducedUnbilled_Consultation total from what we claimed all is well
'     - If not there can be 'hidden' amounts in the batch where the medicare girls keying in the data
'       actually make a mistake and miss stuff, or they put it through for incorrect patient name eg
'       another familVeteran Bulk Bill Claimsy member eg we may have claimed 23 + 10991, they forget to put the 10991, so that
'       item on the batch vocher list has to bbille reduced to 00.00 and the voucher re-submitted.
'      - once the two balances match > click as matched
'    4) Then the program will need to aggegate these zero'd vouchers into a new batch to send off and re-claim
'       or to give the user the chance to write off the debt.
'       e.g girls may have charged a consultation wrongly if it was aftercare. (i.e staff mistake)
'       Sometimes Medicare "miss" entire vouchers - maybe this won't happen when done electronically
'    fixme - put in code in cvwAccounts_select > get payer for branch as a payer

'-----------------------------------------------------------------------------------------------

Private bulk_billed_Distinct_Dates As Collection
Private Payment_Refusal_Reasons As Collection 'of non-medical easygp-user codes where payment refused e.g 'Insurance won't pay'
Private running_total As Float
Private running_total_gst As Float
Private running_total_medicare As Float
Private running_total_veterans As Float
Private running_total_workcover As Float
Private running_total_old_invoices As Float
Private running_total_private_paid As Float
Private running_total_private_account As Float
Private running_total_private_account_part_paid As Float
Private txtPayment_Last_Value As String
Private payment_totals As New Float[8] 'use 1>7 = billing.lu_payment_method keys
Private day_list_patients_billed_count As Integer
Private day_list_patients_billed_medicare_count As Integer
Private day_list_patients_billed_medicare_not_today_count As Integer 
Private day_list_patients_billed_veterans_count As Integer
Private day_list_patients_billed_veterans_not_today_count As Integer
Private day_list_patients_billed_private_count As Integer
Private day_list_patients_billed_workcover_count As Integer
Private day_list_patients_old_invoices_count As Integer
Private day_list_patients_paid_count As Integer
Private day_list_doctor As Collection
Private day_list_doctors As Collection    'of all doctors who had appointments/takings on the day
'Private income_generated As Float
Private cell_text_gvwItemsBIlled As String
Private cell_text_gvwPayments As String
Private bgvwPayments_First_Focus As Boolean
Private currentconsult As CConsult
Private payment_methods As Collection
Private last_Fee_type As String
Public bexit As Boolean
Private bHSplit_Resized As Boolean        'true if user has re-sized the main horizontal split
Private $hEditor_gvwItems As Object
Private $hEditor_gvwPayments As Object
Private appointment_icons As Collection
Private current_gvwItemsBilled_Row As Integer
'save flags for readability
Private bBulkBill_Yes As Boolean = True
Private bBulkBill_No As Boolean = False
Private bPrint_Yes As Boolean = True
Private bPrint_No As Boolean = False
Private bAccount_Yes As Boolean = True
Private bAccount_No As Boolean = False
Private bPaid_Yes As Boolean = True
Private bPaid_No As Boolean = False
Private bSearchingAccounts As Boolean  'if True the patient has been found by an account search, not an unbilled appointment
Private VSplitMain_Layout As Integer[]
Private bKeyValid As Integer
Private bPayingInvoice As Boolean
Private timer_count As Integer
Private onrow_items As Integer
Private OnCol_Items As Integer
Private Bulk_Bill_Batching_type As Integer = const.BulkBilling_Type_Medicare
' holds the "special" Medicare flags (not related, not normal aftercare, etc)
' keyed on the gvwItemsBilled row.
Private item_flags As Collection
Private GridData As Collection
Private GridRows As Collection
Private iLeft As Integer
Private iTop As Integer
Private i As Integer
Private iFirstRow As Integer
Private iLastRow As Integer
Private bFoundFirst As Integer
Private SeenBy As Collection
Private clinic As Collection
Private clinics As Collection
Private fees_for_an_item_numbers_billing_levels As Collection
' "1";"AMA Fee"
' "2";"DVA (Non LMO rate)"
' "3";"DVA (LMO rate)"
' "4";"Health Care Card Concession"
' "5";"Pensioner Concession"
' "6";"Private Fee"
' "7";"TAC (Transport Accident Commission)"
' "8";"Schedule Fee"
Private selected_item_num_and_billing_level As Collection

Private items As Collection
Private item As Collection
Private workcover_claims As Collection
Private Scheduled_Fee As Collection
Private cvwAccountHistory_Key As Variant
'Private Scheduled_Fees As Collection
Private consult_item_number As String
Private fk_lu_default_billing_level As Variant
Private iBilling_Category As Integer
Private iAccountDisplayMode As Integer  'const.Billing_Accounts_Paid,  Billing_Accounts_UnPaid, Billing_Accounts_All
Private form_billingcards As FPatientBillingCards
Private form_patient_photo As FPatientPhoto 
Private form_reports As FHtmlViewer
Private form_banking As FHtmlViewer
Private form_unbilled_comment As FUnbilledComment
Private sPatient_Collection_Key As Variant
Private staff As Collection
Private Staff_Member As Collection
Private fk_staff As Variant                  'whichever staff saw the patient
Public fk_patient As Variant                 'must be public. If not null = patient whose account/appointment currently being used
Private fk_payer_branch As Variant  'if non zero the invoice is to an organisation at branch level
Private fk_payer_person As Variant                 'if non zero the invoice is to a person
Private fk_appointment As Variant
Private fk_invoice As Variant                      'if non zero then key to billing.invoices table
Private fk_invoice_for_printing As Variant
Private Unbilled_Consultations As Collection
Private Unbilled_consultation As Collection
Private payers As Collection
Private payer As Collection   'could be patient/organisation etc
Private Bulk_Billed_Consultations As Collection
Private Bulk_Billed_Consultation As Collection
Private Bulk_Billed_Claims As Collection
Private Bulk_Billed_Claim As Collection
Private cGridColumnItem_ItemNumber As Integer = 0
Private cGridColumnItem_BriefDescriptor As Integer = 1
Private cGridColumnItem_Fee As Integer = 2
Private cGridColumnItem_Gap As Integer = 3
Private cGridColumnItem_AmountPaid As Integer = 3
Private cGridColumnItem_FeeType As Integer = 4
Private cGridColumnItem_gst_amount As Integer = 5
Private cGridColumnItem_Reason_Not_Paid As Integer = 6
Private oncol_payments As Integer
Private onrow_payments As Integer
Private cGridColumnPayments_Amount As Integer = 0
Private cGridColumnPayments_PaymentMethod As Integer = 1
Private cGridColumnPayments_Date As Integer = 2
Private cGridColumnPayments_Comment As Integer = 3

Private cAll_ItemNumbers As Integer = 0
Private cMBS_ItemNumbers As Integer = 2
Private cAMA_ItemNumbers As Integer = 3
Private cUser_Defined_ItemNumbers As Integer = 4
Private Item_Number_Categories As String[]
Private InvoiceComments As Collection
Private InvoiceComment As Collection
Private Invoice_total As Float
Private Amount_Paid As Float
Private FeeTypes As Collection
Private FeeType As Collection
Private Duration As Integer                           'the duration of the appointment - at least what they were booked in for
Private Descriptors_Brief As Collection
Private descriptor_brief As Collection
Private Report_Titles As Collection
Private Report_title As Collection
Private Items_Billed As Collection
Private Items_Today_Or_Unpaid As Collection
Private invoice As Crow
Private ScheduledFeeItems As Collection
Private FilteredScheduledFeeItems As Collection

Private FeeItem As Collection
Private iLast_Invoice_Type As Integer
Private Const cLast_Invoice_Type_Private As Integer = 0
Private Const cLast_Invoice_Type_Medicare As Integer = 1
Private Const cLast_Invoice_Type_Veteran As Integer = 2
Private Const cLast_Invoice_Type_Other As Integer = 3
Private iTimer_Search_Mode As Integer
Private cTimer_SearchMode_Patient As Integer = 0
Private cTimer_SearchMode_Descriptor As Integer = 1
Private cTimer_SearchMode_Payer As Integer = 2
Private cTimer_SearchMode_Institutional_Account As Integer = 2
Private cTimer_SearchMode_FeeSchedule As Integer = 3
Private Patients As Collection
Private Patient As Collection

Private branches As Collection
Private branch As Collection
Private persons As Collection
Private Area_of_Need_Fees As Collection  'loaded once
Private form_html_viewer As FHtmlViewer
Private from_fee_schedule As FFeeSchedule
'the main (large) tabstrip - tabstrip1
Private Const cTab_Invoices_Receipts As Integer = 0
Private Const cTab_Batching As Integer = 1
Private Const cTab_Banking As Integer = 2
Private Const cTab_Reports As Integer = 3
Private Const cTab_ScheduleFees As Integer = 4
'the sub-tabs on main tab cTab_Invoices_Receipts
Private Const cTab_Visits_And_Payments As Integer = 0
Private Const cTabAccountHistory As Integer = 1

Private fk_lu_billing_type_scheduled_Fee As Variant = 8
Private form_batching As FBulkBillBatching
Private cInvoiceDisplayMode_Overdue_1Month As Integer = 0
Private cInvoiceDisplayMode_Overdue_2Month As Integer = 1
Private cInvoiceDisplayMode_Overdue_Over3Months As Integer = 2
Private cInvoiceDisplayMode_InstitutionalAccounts As Integer = 3
Private Reasons_not_billed As Collection
Private gvwItemsBIlled_columnWidths As Integer
Private bAreaOfNeed As Boolean 'see FAdminGlobalPreferences/billing help if true the area attracts 10991 item numbers
Private bComplainedAboutNoItem As Boolean 'don't complain to the user multiple times about not finding a item/fee code.
Private pic_annual_checkup As Picture = Picture["icons/22/heart.png"]
Private pic_home_visit As Picture = Picture["icons/22/user-home.png"]
Private pic_procedure As Picture = Picture["icons/24/glove-scalple_2424.png"]
Private pic_empty As Picture = Picture["icons/20/empty2020.png"]
'The column order for the main invoice display columnview, can be changed as you want
Private Const grid_col_visit_date As Integer = 0
Private Const grid_col_firstname As Integer = 1
Private Const grid_col_seen_by As Integer = 2
Private Const grid_col_branch As Integer = 3
Private Const grid_col_item As Integer = 4
Private Const grid_col_descriptor As Integer = 5
Private Const grid_col_account_to As Integer = 6
Private Const grid_col_amount As Integer = 7
Private Const grid_col_amount_gst As Integer = 8
Private Const grid_col_total_bill As Integer = 9
Private Const grid_col_total_paid As Integer = 10
Private Const grid_col_payment_type As Integer = 11
Private Const grid_col_amount_due As Integer = 12
Private Const grid_col_notes As Integer = 13
Private form_calc As FCalculator
Static Private Form_Billing As FRecordVisit

Static Public Sub Enable_BOKBIllingSaveButton(bFlag As Boolean)
   
   If Form_Billing.bexit = True Then Return
   Try Form_Billing.tbSaveBillingNextOfKin.enabled = True 'the form may not exist
Catch
   Return
   
End

Static Public Function fk_patient_Key() As Variant
   ' Used in bulk bill batching to see if this patient needs to have
   ' their past history accounts lists updated after payments made
   
   Return Form_Billing.fk_patient 
   
End

Static Public Function Is_Same_Patient(fkp As Variant) As Boolean
   
   If Not IsNull(Form_Billing.fk_patient) Then
      If Form_Billing.fk_patient = fkp Then
         Return True
      Endif
   Endif
   
End

Static Public Sub Patient_Invoices_Update_External(fk_patient As Variant)
   ' Called from bulk billing batching FBulkBillBatching
   ' after vouchers are marked as paid off, when the patient in the billing
   ' section is one of the ones in the vouchers which were just paid off
   
   Form_Billing.Account_History_Show
   Form_Billing.Items_Today_Or_Unpaid_Reload
   
End

Static Public Sub Fee_Schedule_Reload_Static()
   
   Form_Billing.Fee_Schedule_Reload()
   
End

Static Public Sub Billing_Save_Defaults()
   
   Form_Billing.Billing_Defaults_Save
   
End

Static Public Sub Bulk_Billing_Claims_Reload()
   'currently not using medicare online
   'show list of distinct dates which have claims in them not paid   
   
   Form_Billing.Bulk_Billing_Show_Dates
   
End

Public Sub Init()
   '---------------------------------------------------------
   'Do all the form initialisation stuff like adding stuff to
   'combo's, setting numbers of columns in lists, displaying
   'the patients contact details
   '---------------------------------------------------------
   
   Dim hCtrl As Control
   Dim HB As HBox
   
   Form_Billing = Me
   tlPatientDetails.Background = lblEditAreaHeading.Background 
   Appointment_Icons = Appointment_icons_Get_Picture(modAppointmentsDBI.Appointment_icons_get())  
   With form_patient_photo = New FPatientPhoto(Vbox_Photo)
      .lblID.Visible = False 
      .lblLeft.Visible = True 
      .lblRight.Visible = True 'spacers just for this module
   End With
   With form_billingcards = New FPatientBillingCards(VBox_PatientBillingCards)
      .Init(VBox_EditArea_Outer, "FRecordVisit")
      .Hbox_LegacyFileNumber.Visible = False
   End With
   Area_of_Need_Fees = modBillingDBI.Area_Of_Need_Fees("10991")  'area of need supplement keyed by billing.lu_biling_type key
   gvwAccountNames.Columns.Count = 2
   With gvwUnpaidVisits
      .Columns.count = 3
      .Columns[0].Width = 80
   End With
   Form_Billing = Me
   lblmeasure.text = "  Medicare Voucher  "
   tbUniversal.width = lblmeasure.Width
   Item_Number_Categories = New String[]
   Item_Number_Categories.Add("all items")
   Item_Number_Categories.Add("mbs item")
   Item_Number_Categories.Add("ama item")
   Item_Number_Categories.Add("user item")
   Report_Titles = modBillingDBI.Report_Get()
   lblmeasure.text = "  Invoiced Items "
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Inner, lblmeasure)
   modEditAreaHelpers.Resize_label(lblInvoiceItems, lblmeasure)
   modEditAreaHelpers.Resize_label(lblPayment, lblmeasure)
   modEditAreaHelpers.Resize_label(lblComment, lblmeasure)
   lblMeasure.text = "   Show all Overdue by       "
   modEditAreaHelpers.Resize_label(lblOverDueBy, lblMeasure)
   lblName.width = lblOverDueBy.Width
   lblDeceased.width = lblName.Width
   modEditAreaHelpers.Resize_label(lblFilter, lblMeasure)
   modEditAreaHelpers.Resize_label(lblfilterDate, lblMeasure)
   Vbox_Photo.width = lblmeasure.Width
   
   Payment_methods = modBillingDBI.Payment_Methods_Get()
   'fix this duplication but check save to see why I did it.
   modUtilGUI.LoadCombo(cmbPaymentMethods, modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Payment_Methods_Get()), "method") 'show on top 3 methods
   InvoiceComments = modUtilGUI.LoadCombo(cmbInvoiceComments, modBillingDBI.Invoice_Comments_Get(), "comment")
   FeeTypes = modUtilGUI.LoadCombo(cmbFeeType, modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Billing_Types_Get()), "type") 'fixme
   Reasons_not_billed = modBillingDBI.Reasons_not_billed_Get()
   Payment_Refusal_Reasons = modBillingDBI.Payment_Refusal_Reasons()    'key is the description, easier to use in Save()
   modUtilGUI.LoadCombo(cmbReasonNotPaid, Payment_Refusal_Reasons, "description") 'discard ordered collection returned which is zero based, keep the original
   staff = modUtilGUI.LoadCombo(cmbStaff, modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get("", Null, False)), "wholename")
   ' modUtilGUI.LoadCombo(cmbstaff_Takings, staff, "wholename")
   seenBy = modUtilGUI.LoadCombo(cmbSeenBy, modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get("", Null, False)), "wholename")
   cmbSeenBy.Add("Not Selected")
   cmbSeenBy.Index = cmbSeenBy.Find("Not Selected")
   clinics = modUtilGUI.LoadCombo(cmbLocation, modContactsDBI.Clinics_Get(), "branch")
   With cvwItemsTodayOrUnpaid
      .Columns.count = 14
      .Columns[grid_col_visit_date].text = "Visit Date  "
      .Columns[grid_col_firstname].text = "Patient   "
      .Columns[grid_col_seen_by].text = "Seen By   "
      .Columns[grid_col_branch].text = "Location  "
      .Columns[grid_col_item].text = "Item"
      .Columns[grid_col_descriptor].text = "Descriptor   "
      .Columns[grid_col_account_to].text = "Payer   "
      .Columns[grid_col_amount].text = "Fee  "
      .Columns[grid_col_amount_gst].text = "GST  "
      .Columns[grid_col_total_bill].text = "Total"
      .Columns[grid_col_total_paid].text = "Paid  "
      .Columns[grid_col_payment_type].text = "Paid By  "
      .Columns[grid_col_amount_due].text = "Owing  "
      .Columns[grid_col_notes].text = "Comment"
   End With
   With cvwAccountHistory
      .Columns.count = 14
      .Columns[grid_col_firstname].text = "Patient   "
      .Columns[grid_col_seen_by].text = "Seen By   "
      .Columns[grid_col_branch].text = "Location  "
      .Columns[grid_col_visit_date].text = "Visit Date  "
      .Columns[grid_col_item].text = "Item"
      .Columns[grid_col_descriptor].text = "Descriptor   "
      .Columns[grid_col_account_to].text = "Payer   "
      .Columns[grid_col_amount].text = "Fee  "
      .Columns[grid_col_amount_gst].text = "GST  "
      .Columns[grid_col_total_bill].text = "Invoice Total"
      .Columns[grid_col_total_paid].text = "Paid  "
      .Columns[grid_col_payment_type].text = "Paid By  "
      .Columns[grid_col_amount_due].text = "Owing  "
      .Columns[grid_col_notes].text = "Comment"
   End With
   With cvwWorkcoverClaims                            ' columnview is in the editing area
      .Columns.count = 2                             ' to display any active claims
      .Columns[0].Alignment = Align.Center           ' when 'other' biller is selected
      .Columns[1].Alignment = Align.Center
   End With
   cmbUnpaidInvoices.Clear
   cmbUnpaidInvoices.Add("1 Month", 0)
   cmbUnpaidInvoices.Add("2 Month", 1)
   cmbUnpaidInvoices.Add("3 Months", 2)
   cmbUnpaidInvoices.Add("Institutional Payers", 3)
   cmbUnpaidInvoices.index = -1
   bAreaOfNeed = modAdminDBI.Config_Get("area_of_need", False)
   Settings_Load()         'load settings for this form
   GridRows = New Collection
   columnview1.Columns.count = 4
   cmbInvoiceComments.index = -1
   gvwItemsBIlled_Init()
   gvwPayments_Init()
   bHSplit_Resized = False
   bComplainedAboutNoItem = False
   fk_invoice = Null
   fk_invoice_for_printing = Null
   payment_methods = modBillingDBI.Payment_Methods_Get()
   UnBilled_Appointments_Reload
   modDBConnect.Register_Listener("invoice_print", Me)
   
End

Public Function Notify(its_us As Boolean, param As String) As Variant
   
   Dim pk_invoice As Variant
   Dim invoice_print As CRow
   Dim latex As String
   
   If its_us Then
      Log.DataMsg("ignoring invoice event as from us. param: " & param)
      Return Null
   Endif
   pk_invoice = CInt(Param)
   Log.DataMsg("fk_invoice_for_printing = " & fk_invoice_for_printing & " pk_invoice = " & pk_invoice)
   If fk_invoice_for_printing = pk_invoice Then
      Log.DataMsg("matches so now printing invoice pk = " & pk_invoice)
      invoice_print = modBillingDBI.Get_Invoice_PK(fk_invoice_for_printing)
      If IsNull(invoice_print!latex) And If invoice_print!online Then
         latex = modBillingDBI.Generate_Online_Latex(fk_invoice_for_printing)
      Else
         latex = invoice_print!latex
      Endif
      If Not IsNull(latex) Then modPrinting.Print_latex(latex)
      fk_invoice_for_printing = Null
      modDBConnect.CommitTrans()
   Endif
   If pk_invoice = fk_invoice Then
      ' we match the invoice being displayed as well/instead
      If IsNull(invoice_print) Then
         invoice_print = modBillingDBI.Get_Invoice_PK(fk_invoice)
         Set_Online_Data(invoice_print)
      Endif
   Endif
   Return Null
Catch
   Log.ErrorMsg("FRecordVist.Notfiy failed" & Error.Text & " " & Error.Backtrace.Join(" "))
   
End

Public Sub Reload()
   
   columnview99_Refresh()
   
End

Public Sub AccountHistory_Clear()
   'The account history lives on tabstrip2
   'gives user the options of displaying all billed items either paid, unpaid or together + filtering
   
   Items_Billed = New Collection
   bExit = True
   txtFilterDescriptor.text = ""
   cmbInvoiceToFilter.Clear
   rbAccountHistoryNotUsed.Value = True   'not visible but turns off all the others
   bExit = False
   cvwAccountHistory.Clear
   
End

Public Sub EditArea_Clear()
   
   'Clears all the input areas, data on any  associated tabs
   bExit = True
   form_billingcards.TabStrip1.index = 0                                 ' billing/NOK/Pharmacy/Contacts tab set to billing = 0
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Inner)                ' clear edit area text and check boxes in the invoices main screen
   cmbInvoiceComments.Clear
   With form_billingcards                                                ' clear all the patient billing data etc
      .EditArea_Clear()
      .Currentconsult_Set_Null()
   End With
   AccountHistory_Clear
   lblEditAreaHeading.text = ""
   tlPatientDetails.text = ""
   LblEditAreaHeading.text = ""
   form_patient_photo.Patient_Picture_Clear
   cell_text_gvwItemsBIlled = ""
   VBox_Workcover_Claims.Visible = False
   cvwWorkcoverClaims.Clear
   With lblInvoiceTotalAndPaid
      .text = ""
      .visible = False
   End With
   bgvwPayments_First_Focus = False 
   txtPayment_Last_Value = ""
   textlabelPayer.text = ""
   VBox_InvoiceGrid.Visible = True
   gvwItemsBIlled_Init                                       'reset to default 4 rows
   gvwItemsBIlled_Clear                                      'clear them ?still need this
   HBox_InvoiceGrid.height = (gvwItemsBIlled.rows.count + 3) * gvwItemsBIlled.rows[0].height
   fk_lu_default_billing_level = const.Billing_Default_Level_Private
   columnview1.Visible = False  
   iAccountDisplayMode = const.Billing_Accounts_Unpaid
   rbPayerNotUsed.value = True                               'switches off rbInvoiceOrganisation and rbInvoicePerson
   With lblInvoiceOwing
      .text = ""
      .Border = Border.None
   End With
   Hbox_InvoiceGrid.Enabled = True
   HBox_InvoiceComments.Enabled = True
   gvwPayments_Clear
   bPayingInvoice = False  
   bComplainedAboutNoItem = False
   EditArea_Notify_Data_Change(False)
   FBankDetails.account_name = Null
   FBankDetails.account_number = Null
   FBankDetails.bsb = Null
   current_gvwItemsBilled_Row = 0
   GridData = New Collection
   cvwItemsTodayOrUnpaid.clear
   bexit = False
   
End

Public Sub columnview99_Refresh()
   
   Select Case TabStrip1.Index
         
      Case cTab_Batching
         Bulk_Billing_Show_Dates
      Case cTab_Reports
         
         Reports_Available_Refresh()
         ' Case cTab_ScheduleFees
         '    Fee_Schedule_Reload()
   End Select
   
End

Public Sub Bulk_Billing_Show_Dates()
   'Displays all distinct dates where there are unpaid vouchers
   'type determained by 
   'rbBulkBilledMedicare.tag = const.BulkBilling_Type_Medicare
   'rbBulkBillVeterans.tag = const.BulkBilling_Type_Veteran
   
   Dim a_date As Collection
   Dim x As Integer
   
   columnview99.Clear
   bulk_billed_Distinct_Dates = modBillingDBI.Bulk_Billed_Vouchers_Unpaid_distinct_dates(modDBConnect.currentUser!fk_branch, Bulk_Bill_Batching_type)
   For Each a_date In bulk_billed_Distinct_Dates
      columnview99.Add(a_date!pk, 0)
      columnview99[a_date!pk][0] = Format(a_date!date_invoiced, "dd mmmm yyyy")
   Next
   
End

Public Sub Scheduled_Fees_Reload()
   '----------------------------------------------------
   'display the fee schedule items filtered by txtFilter
   '----------------------------------------------------
   
   Dim bskip As Boolean
   Dim num_patients As String = ""
   Dim x As Integer
   
   FilteredScheduledFeeItems = New Collection 
   With gvwFeeScheduleItems
      .Clear
      .Columns.count = 2
      .Rows.count = 0
   End With
   If IsNull(ScheduledFeeItems) Then Return
   For Each FeeItem In ScheduledFeeItems
      bSkip = False
      If txtFilter.text <> "" Then
         If Not IsNull(FeeItem!descriptor_brief) Then
            If Not InStr(Lower(FeeItem!descriptor_brief), Lower(Trim(txtFilter.text))) Then
               bskip = True
            Endif
         Else
            If Not InStr(Lower(FeeItem!descriptor), Lower(Trim(txtFilter.text))) Then
               bskip = True
            Endif
         End If
      End If
      
      If Not bskip Then
         Inc gvwFeeScheduleItems.rows.count
         num_patients = ""
         If FeeItem!number_of_patients <> 0 Then
            num_patients = "/" & Str(FeeItem!number_of_patients)
         Endif
         gvwFeeScheduleItems[x, 0].text = Trim(FeeItem!mbs_item & " " & FeeItem!ama_item & " " & FeeItem!user_item) & num_patients
         If Not IsNull(FeeItem!descriptor_brief) Then
            gvwFeeScheduleItems[x, 1].text = FeeItem!descriptor_brief
            gvwFeeScheduleItems[x, 1].WordWrap = True
            gvwFeeScheduleItems.rows[x].Height = -1
         Else
            gvwFeeScheduleItems[x, 1].text = FeeItem!descriptor
            gvwFeeScheduleItems[x, 1].WordWrap = True
            gvwFeeScheduleItems.rows[x].Height = -1
         End If
         FilteredScheduledFeeItems.Add(FeeItem, FilteredScheduledFeeItems.count)
         Inc x
      End If
   Next
   If gvwFeeScheduleItems.Rows.count Then
      gvwFeeScheduleItems.row = 0
      gvwFeeScheduleItems.Rows[0].Selected = True
   Endif
   
End

Public Sub Scheduled_Fees_Search()
   '-----------------------------------------------------
   'User has typed in txtSearch for fee item
   'They will have typed either a number, or text phrase
   '-----------------------------------------------------
   
   timer1.Stop
   Inc Application.Busy
   ScheduledFeeItems = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Descriptors_Get(txtSearch.Text, True, False))
   Scheduled_Fees_Reload
   Dec Application.Busy
   
End

Public Sub Fee_Schedule_Edit()
   
   from_fee_schedule.VBox_EditArea.Enabled = True
   from_fee_schedule.lblEditArea.text = "Edit Item Number"
   from_fee_schedule.txtuserItemNumber.SetFocus()
   If Not IsNull(ScheduledFeeItems[columnview99.item.key]!user_item) Then
      from_fee_schedule.EditArea_Set_Editable(True, True)
   End If
   
End

Public Sub Fee_Schedule_Reload()
   
   timer1.Stop
   bexit = True
   combobox1.index = 0 'items with brief descriptor
   bexit = False
   With gvwFeeScheduleItems
      .Clear
      .Columns.count = 2
      .Rows.count = 0
   End With
   Inc Application.Busy
   ScheduledFeeItems = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Fees_Get_With_Brief_Descriptor())
   FilteredScheduledFeeItems = modUtil.Copy_Collection(ScheduledFeeItems)
   If Trim(txtFilter.text) <> "" Then
      Scheduled_Fees_Reload
   Endif
   gvwFeeScheduleItems_FillGrid()
   Dec Application.Busy
   
End

Public Sub Reports_Available_Refresh()
   
   Dim x As Integer
   
   With columnview99
      .Clear
      .Columns.count = 1
      .Header = True
      .Columns[0].Text = "Report Name"
   End With
   ' columnview99.Add(x, 0)
   ' columnview99[x][0] = "Days Takings"
   ' Inc x
   columnview99.Add(x, 0)
   columnview99[x][0] = "Day List - Invoices/Payments"
   columnview99.Add(1, 0)
   columnview99[1][0] = "GST Report"
   
   ' For Each Report_title In Report_Titles
   '    columnview99.Add(Report_title!pk, 0)
   '    columnview99[Report_title!pk][0] = Report_title!report_title
   ' Next
   
End

Public Sub UnBilled_Appointments_Reload(Optional single_day As Date = Null)
   
   Dim pic As Picture
   Dim widest_name As String
   Dim name_length As Integer
   Dim x As Integer
   Dim sFontHeight As Integer = gvwUnpaidVisits.Font.Height
   
   EditArea_Clear
   With gvwUnpaidVisits
      .Clear
      .Columns.count = 2
   End With
   fk_patient = Null
   If Trim(txtFilterAccountDate.text) <> "" And IsDate(Trim(txtFilterAccountDate.text)) Then
      single_day = Val(txtFilterAccountDate.text)
   Endif
   Unbilled_Consultations = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Consultations_UnBilled_Get(single_day, fk_patient))
   For Each Unbilled_consultation In Unbilled_Consultations
      Inc gvwUnpaidVisits.Rows.Count
      ' If Not IsNull(Unbilled_consultation!fk_lu_appointment_icon) Then
      '    ' "1";"pregnancy"
      '    ' "2";"blood test"
      '    ' "3";"mental health plan"
      '    ' "4";"home visit"
      '    ' "5";"over 75 health assessment"
      '    ' "6";"procedure"
      '    ' "7";"immunization"
      '    ' "8";"workcover"
      '    ' "9";"annual checkup"
      '    ' "10";"prescription"
      '    ' "11";"diabetes cycle of care"
      '    Select Case Unbilled_consultation!fk_lu_appointment_icon
      '       Case 4
      '          pic = pic_home_visit
      '       Case 6
      '          pic = pic_procedure
      '       Case 9
      '          pic = pic_annual_checkup
      '       Case Else
      '          pic = pic_empty
      '    End Select
      ' Else
      '    pic = pic_empty
      ' Endif
      
      gvwUnpaidVisits[x, 0].Text = Format(Unbilled_consultation!begin, "dd/mm/yyyy") 
      
      gvwUnpaidVisits[x, 0].Alignment = Align.TopLeft
      ' gvwUnpaidVisits[x, 1].Picture = pic
      gvwUnpaidVisits[x, 1].RichText = "<P><B>" & Unbilled_consultation!title & " " & Left(Unbilled_consultation!firstname, 1) & " " & Unbilled_consultation!surname & "</B>"
      If Not IsNull(Unbilled_consultation!comment_for_billing) Then
         gvwUnpaidVisits[x, 1].RichText &= "<BR>" & Unbilled_consultation!comment_for_billing & "</P>"
         gvwUnpaidVisits[x, 0].Foreground = Color.Red 'the date
         gvwUnpaidVisits[x, 1].Foreground = Color.red  ' the comment 
         gvwUnpaidVisits.Rows[x].Height = sFontHeight * 2.2  
      Endif
      If Len(Unbilled_consultation!wholename) > name_length Then
         lblMeasure.text = Unbilled_consultation!wholename
         name_length = Len(Unbilled_consultation!wholename)
      Endif
      Inc x
   Next
   If gvwUnpaidVisits.Rows.count Then
      With gvwUnpaidVisits
         .row = 0
         .SetFocus
      End With
      sPatient_Collection_Key = 0
   End If   
   
End

Public Sub Patient_Unbilled_Consultation_Display()
   '----------------------------------------------------------------------------------
   'User has selected to show unbilled consultations and has clicked on a patient name
   'Display the patient and consultation details in the editing area
   '----------------------------------------------------------------------------------
   
   EditArea_Clear()                                                                    'clear input area
   tbSaveBillingNextOfKin.Enabled = False
   bPayingInvoice = False
   txtpatient.ReadOnly = True
   txtDate.ReadOnly = True
   Unbilled_consultation = Unbilled_Consultations[gvwUnpaidVisits.Item.key]
   Try fk_lu_default_billing_level = Unbilled_consultation!fk_lu_default_billing_level
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private
   fk_patient = Unbilled_consultation!fk_patient
   fk_appointment = Unbilled_consultation!pk
   bExit = True
   With txtpatient
      .text = Unbilled_consultation!wholename
      .pos = 0
   End With
   txtAge.text = Unbilled_consultation!age_display
   txtDate.text = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
   LblEditAreaHeading.text = " Raise Invoice for UnBilled Consultation on " & txtDate.Text
   fk_staff = Unbilled_consultation!fk_staff
   For Each Staff_Member In staff
      If Staff_Member!fk_staff = fk_staff Then
         cmbSeenBy.index = cmbSeenBy.Find(Staff_Member!wholename)
         Break
      Endif
   Next
   Invoice_To_Set_Billing_To_Details(Unbilled_consultation)
   bExit = False
   With form_billingcards
      .TabStrip1.index = 0 'the card & billing data tab
      .Display_Patient_Data(Unbilled_consultation)
   End With
   VBox_EditArea_Outer.Enabled = True
   gvwItemsBIlled.Enabled = True
   Items_Today_Or_Unpaid_Reload
   EditArea_Notify_Data_Change(False)
   VBox_EditArea_Inner.Enabled = True
   VBox_EditArea_And_Grids.Enabled = True
   HBox_InvoiceGrid.Enabled = True
   VBox_InvoiceGrid.Enabled = True
   
End

Public Sub Columnview99_Menu()
   '-----------------------------------------------------------------------
   'User has clicked on the data columnview on left hand side of the screen
   'contexturally popup the menu
   '-----------------------------------------------------------------------
   
   Dim mnu As Menu
   Dim reason As Collection
   
   columnview99.MoveCurrent()
   If columnview99.count = 0 Then Return
   Select Case TabStrip1.Index
      Case cTab_Banking
      Case cTab_Batching
      Case cTab_Reports
      Case cTab_ScheduleFees
         mnuFeeSchedule.Popup()
   End Select
Catch
   Return
   
End

Public Sub mnuUnpaidVisits_Click()
   
   Dim comment_for_billing As Variant 'see text, don't want to save a "" empty string as empty string but null
   Dim sFontHeight As Integer = gvwUnpaidVisits.Font.Height
   
   Select Case Last.tag
      Case "font"
         modUtilGUI.Columnview_SetFont(gvwUnpaidVisits, Me.Name)
      Case "wait for histology", "clarify with doctor", "remove comment" 'tag of remove comment = ""
         If Last.tag = "remove comment" Then
            comment_for_billing = ""
         Else
            comment_for_billing = Last.tag
         Endif
         modDBConnect.update("clerical.bookings", Null, ["pk": patient!fk_appointment, "comment_for_billing": comment_for_billing])
         modDBConnect.CommitTrans
         gvwUnpaidVisits[sPatient_Collection_Key, 1].RichText = "<P><B>" & patient!title & " " & Left(patient!firstname, 1) & " " & patient!surname & "</B>"
         If comment_for_billing <> "" Then
            gvwUnpaidVisits[sPatient_Collection_Key, 1].RichText &= "<BR>" & comment_for_billing & "</P>"
            gvwUnpaidVisits.Rows[sPatient_Collection_Key].Height = sFontHeight * 2.2  
         Endif
      Case "add free text"
         With form_unbilled_comment = New FUnbilledComment
            .Init(patient!fk_appointment, gvwUnpaidVisits, sPatient_Collection_Key, patient)
            .ShowModal
         End With
      Case "did not arrive"
         modDBConnect.update("clerical.bookings", Null, ["pk": patient!fk_appointment, "fk_lu_appointment_status": const.Appointment_Status_Did_Not_Arrive]) 
         modDBConnect.CommitTrans()
         UnBilled_Appointments_Reload()
      Case Else   'tag is a number = reason not billed key to billing.lu_reasons_not_billed table
         Message.Title = "Unbilled Appointments - No Invoice?"
         If Message.Question(Patient!wholename & "\n\nMark this patient not to be charged:\n\n" & Last.text, "Yes", "No") = 2 Then Return
         modDBConnect.update("clerical.bookings", Null, ["pk": patient!pk, "fk_lu_reason_not_billed": Last.tag])
         modDBConnect.CommitTrans()
         UnBilled_Appointments_Reload
   End Select
   
End

Public Sub columview99_Menu()
   
   If Last.count Then mnuUnpaidVisits.Popup()
   
End

Public Sub columnview99_Select()
   
   Dim period As Integer
   Dim fk_staff As Variant
   
   columnview99.MoveCurrent
   Select Case TabStrip1.Index
      Case cTab_Batching
         form_batching.Days_Vouchers_Display(bulk_billed_Distinct_Dates[columnview99.Item.key]!date_invoiced, Bulk_Bill_Batching_type)
      Case cTab_Reports
         'just experimenting for the moment
         ' If rbMonth.Value Then period = 1
         ' If rbQuarter.Value Then period = 2
         ' If combobox1.Text = "All Staff" Then
         '    fk_staff = Null
         ' Else
         '    fk_staff = staff[combobox1.index]!fk_staff
         ' Endif
         ' form_reports.Report_Show(Report_Titles[columnview99.Item.key], DateChooserAccountDate.value, fk_staff, period)
         Select Case columnview99[columnview99.Item.key][0]
               
            Case "Day List - Invoices/Payments"
               Vbox_Reports_GST_Box.visible = False
               Report_Show_HTML(Day_List_Create_HTML(DateChooser1.Value))
            Case "GST Report"
               Vbox_Reports_GST_Box.Visible = True 
               txtGSTFromDate.SetFocus
               Report_Show_HTML(GST_Create_HTML())
         End Select
   End Select
   
End

Public Function GST_Create_HTML() As String
   
   Dim sHtml As String
   Dim sTable As String
   Dim GST_Items As Collection
   Dim gst_item As Collection
   Dim total_gst As Float
   
   GST_Items = modBillingDBI.GST_Paid(txtGSTFromDate.text, txtGSTToDate.text)
   sHtml = "<HTML><BODY>"
   sTable = "<TABLE  width=100% CELLPADDING=5 CELLSPACING=0 BORDER=1>"     
   "<COL WIDTH=3%>"
   "<COL WIDTH=10%>"
   "<COL WIDTH=15%>"
   "<COL WIDTH=3%>"
   "<COL WIDTH=20%>"
   "<COL WIDTH=5%>"
   "<COL WIDTH=5%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=5%>"
   "<P align='center'<h3><B>Date Paid</h3></B></P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P align='center'<h3><B>Patient</h3></B></P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P align='center'<h3><B>Account To</h3></B></P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P align='center'<h3><B>Item</h3></B></P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P align='center'<h3><B>Descriptor</h3></B></P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P align='center'<h3><B>Amount</h3></B></P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P align='center'<h3><B>GST</h3></B></P>"
   "</TD>"
   "</TR>"
   
   sHtml &= sTable
   For Each gst_item In GST_Items
      sHtml &= GST_Table_Row()
      sHtml = Replace(shtml, "%date_paid%", Format(gst_item!date_paid, "dd/mm/yyyy"))
      sHtml = Replace(shtml, "%patient%", gst_item!wholename)
      sHtml = Replace(shtml, "%account_to%", gst_item!account_to_name)
      sHtml = Replace(shtml, "%item%", gst_item!item)
      sHtml = Replace(shtml, "%descriptor%", gst_item!descriptor_brief)
      sHtml = Replace(shtml, "%amount%", gst_item!amount)
      sHtml = Replace(shtml, "%gst%", gst_item!amount_gst)
      total_gst += modUtil.MoneyToFloat(gst_item!amount_gst)
      
   Next
   shtml &= "</TABLE>"
   shtml &= "<P><B>Total GST " & modUtil.Money_Format(total_gst)
   sHTml &= "</BODY></HTML>"
   Return sHTML
   
End

Public Function GST_Table_Row() As String
   
   Return ""
   "<TR VALIGN=TOP>"
   "<TD WIDTH=3%>"
   "<P align='center'>%date_paid%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P align='left'>%patient%</P>"
   "</TD>"
   "<TD WIDTH=15%>"
   "<P align='left'>%account_to%</P>"
   "</TD>"
   "<TD WIDTH=3%>"
   "<P align='left'>%item%</P>"
   "</TD>"
   "<TD WIDTH=20%>"
   "<P align='left'>%descriptor%</P>"
   "</TD>"
   "<TD WIDTH=5%>"
   "<P align='left'>%amount%</P>"
   "</TD>"
   "<TD WIDTH=5%>"
   "<P align='left'>%gst%</P>"
   "</TD>"
   "</TR>"
   
End

Public Sub Payer_Get(patient As Collection) 'fix me to fk_patient
   'temp code get the responsible person FIXME  body code only whilst developin
   'need more inclusive way of getting the payer - eg might not be a patient
   'fixme put in code for responsible party as a branch (must be put in contacts first)
   'fixme put in fk_payer_branch code
   
   Payer = Null
   bExit = True
   If Not IsNull(patient!fk_payer_person) Then
      payer = modContactsDBI.Person_Including_Patients_Get_Using_Pk(patient!fk_payer_person)
   End If
   If Not IsNull(Payer) Then
      rbInvoiceToNotUsed.value = True
      rbInvoicePerson.value = True
      Try textlabelPayer.text = payer!wholename & "<BR>" & Trim(payer!street1 & " " & payer!street2) & "<BR>" & payer!town & " " & payer!postcode
      fk_payer_person = payer!fk_person
      bExit = False
   End If
   bExit = False
   
End

Public Function gvwPayments_DataValid() As Boolean
   
   ' Returns True If the data In the payments grid Is Valid 
   Dim row As Integer
   Dim item As Collection
   Dim sMsg As String
   
   For row = 0 To gvwPayments.Rows.Max
      If gvwPayments[row, cGridColumnPayments_Amount].Text <> "" Then                                      'if there is a payment amount
         If gvwPayments[row, cGridColumnPayments_PaymentMethod].text = "CHEQUE" Then                       'if its paying by cheque
            If gvwPayments[row, cGridColumnPayments_Comment].text = "" Then                                'if nothing in the comment field
               Message.Title = "Cheque Details"
               sMsg = "<p><B>Mininum Data for Cheque Payment</B></P>"
               "If the current invoice is being paid by a cheque, to properly pepare a banking slip, EasyGP needs to know:"
               "<UL><LI>The payee, person or company eg  'NRMA Insurance'"
               "<LI>The bank eg.WESTPAC"
               "<LI>The branch e.g WALLSEND</ul>"
               "<P>This data needs to be entered in the Comment field of the payments grid as a single string, for example:</P>" 
               "NRMA Insurance WESPAC WALLEND"
               Message.Warning(sMsg)
               Return   
            End If   
         End If 
      Endif
   Next
   Return True 
   
End

Public Sub gvwPayments_Init()
   '------------------------------------------------------------------------
   'Construct the grid which will hold the payments for items on the invoice
   '------------------------------------------------------------------------
   
   With gvwPayments
      .Rows.count = 3
      .Rows.H = 20
      .Columns.count = 4
      lblmeasure.text = " Amount "
      .Columns[0].width = lblmeasure.Width
      lblmeasure.text = "Medicare Cheque  "
      .Columns[1].width = lblmeasure.Width
      lblmeasure.text = "Comment  (If paying by cheque enter Payer on Cheque, Bank, Branch)"
      .Columns[2].width = 200
      .Columns[3].width = lblmeasure.Width
   End With
   With gwPaymentLabel1
      .text = "Amount"
      .width = gvwPayments.Columns[0].Width
   End With
   With gwPaymentLabel2
      .text = "Payment Type"
      .width = gvwPayments.Columns[1].Width
   End With
   With gwPaymentLabel3
      .text = "Date Paid"
      .width = gvwPayments.Columns[2].Width
   End With
   With gwPaymentLabel4
      .text = "Comment  (If paying by cheque enter Payer on Cheque, Bank, Branch)"
      .width = gvwPayments.Columns[3].Width
   End With
   
End

Public Function Item_Number_Selected() As Boolean
   
   If gvwItemsBIlled[0, cGridColumnItem_ItemNumber].Text <> "" Then
      Return True
   Endif
   
End

Public Sub txtPayment_GotFocus()
   
   If gvwPayments.row = -1 Then Return
   txtPayment.text = gvwPayments[gvwPayments.row, gvwPayments.Column].Text
   
End

Public Sub txtPayment_KeyPress()
   
   Select Case gvwPayments.Column
      Case cGridColumnPayments_Amount
         If Not modUtilGUI.AllowKeys(const.allowkeys_money, key.code) Then Stop Event 
      Case cGridColumnPayments_Date
         If Not modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, Key.Code) Then Stop Event
   End Select
   
End

Public Sub txtPayment_Change()
   
   Select Case gvwPayments.Column
      Case cGridColumnPayments_Comment 
         Last.text = UCase(Last.text)
   End Select
   
End

Public Sub txtPayment_Activate()
   '----------------------------------------------------------------------------
   'User has hit <enter> key whilst typing in the textbox over the payments grid
   '----------------------------------------------------------------------------
   
   If bexit Then Return
   gvwPayments_AutoFill_Validate_Row
   gvwPayments_SaveProperty
   gvwPayments_HideProperty
   gvwPayments.SetFocus
   
End

Public Sub gvwPayments_SaveProperty()
   
   Dim s As String
   
   If IsNull($hEditor_gvwPayments) Or gvwPayments.row = -1 Then Return
   Select Case oncol_payments
      Case cGridColumnPayments_Amount
         gvwPayments[gvwPayments.row, 0].Text = modUtil.Money_Format(txtPayment.text)                       'format money correctly
         If gvwPayments[gvwPayments.row, cGridColumnPayments_PaymentMethod].Text = "" And gvwPayments[gvwPayments.row, 0].Text <> "" Then   'if have no payment method but have money
            gvwPayments[gvwPayments.row, cGridColumnPayments_PaymentMethod].text = "EFTPOS"
         Endif
         If gvwPayments[gvwPayments.row, cGridColumnPayments_Date].Text = "" And gvwPayments[gvwPayments.row, 0].Text <> "" Then   'if have no payment method but have money
            gvwPayments[gvwPayments.row, cGridColumnPayments_Date].Text = Format$(Now(), "dd/mm/yy")
         Endif
         Invoice_Calculate_Amount_Paid()
      Case cGridColumnPayments_PaymentMethod
         cmbPaymentMethods.index = cmbPaymentMethods.Find(gvwPayments[gvwPayments.row, oncol_payments].Text)
      Case cGridColumnPayments_Date
         s = Trim(txtPayment.Text)
         Try modUtil.Make_Date_From_String(s)
         If Error Then
            If bExit Then Return
            bExit = True
            Message.Error("Date string \"" & s & "\" is not a valid date")
            bExit = False
         Else
            gvwPayments[gvwPayments.row, oncol_payments].Text = s
         Endif
      Case Else
         gvwPayments[gvwPayments.row, oncol_payments].Text = Trim(txtPayment.Text)
   End Select
   EditArea_Notify_Data_Change(True)
   gvwPayments_HideProperty()
   
End

Public Sub gvwPayments_HideProperty() As Boolean
   
   cmbPaymentMethods.Visible = False
   txtPayment.Visible = False
   panGvwPaymentsEditor.Hide
   
End

Public Sub gvwPayments_ShowProperty()
   '--------------------------------------------------------------------------------
   'nicked from the gambas IDE FProperty.class
   'Shows the control we are using to 'edit' the grid cell aligned over that cell
   'Maybe un-necessariily complex due to my simple brain but does this
   'The panGvwItemsBilledEditor = a Hbox holding 3 controls
   ' - a textbox for editing
   ' - a combobox for choosing the fee levels
   ' - a transparent label to let user click on something without entering edit mode
   '   which is what happens in the gambas IDE - I didn't use this because then I
   '   couldn't show a menu over the grid
   '--------------------------------------------------------------------------------
   
   Dim sProp As String  'contents of the grid cell
   Dim hEditor As Object
   
   txtPayment.Hide
   txtPayment.text = ""
   If cell_text_gvwPayments <> "" Then txtPayment.text = cell_text_gvwPayments
   cmbPaymentMethods.Hide
   panGvwPaymentsEditor.Hide
   Select Case gvwPayments.column
      Case cGridColumnPayments_PaymentMethod
         cmbPaymentMethods.Index = cmbPaymentMethods.Find(gvwPayments[gvwPayments.Row, gvwPayments.column].Text)
         hEditor = cmbPaymentMethods
      Case Else
         hEditor = txtPayment
   End Select
   oncol_payments = gvwPayments.Column
   $hEditor_gvwPayments = hEditor
   GvwPayments_MoveProperty        ' Move the Hbox panGvwItemsBilledEditor into position over the cell
   $hEditor_gvwPayments.Show       ' Make transparent label "visible" or the combo box visible
   pangvwPaymentsEditor.Show       ' Show the container, hence the  control
   $hEditor_gvwPayments.SetFocus   ' give control focus > responded to key and click events
   
End

Private Sub gvwPayments_MoveProperty()
   '------------------------------------------------------------------------
   'Move the editing Hbox control to match a grid cell co-ordinates and size
   '------------------------------------------------------------------------
   
   If IsNull($hEditor_gvwPayments) Or gvwPayments.Row = - 1 Then Return
   With gvwPayments[gvwPayments.Row, gvwPayments.column]
      pangvwPaymentsEditor.Move(gvwPayments.X + .X - gvwPayments.ScrollX, gvwPayments.Y + .Y - gvwPayments.ScrollY, .Width, .Height)
      panGvwPaymentsEditor.Raise
   End With
   
End

Public Sub gvwPayments_MouseDown()
   
   'For inexplicable reasons in gambas you can sometimes click on a grid row
   'and it doesn't set the row or
   'even if the grid and its contained is disabled then it still responds to 
   'the click events
   
   If gvwPayments.row = -1 Or gvwItemsBilled_IsEmpty() Then Return
   If gvwPayments[gvwPayments.row, gvwPayments.Column].Text <> "" Then
      cell_text_gvwPayments = gvwPayments[gvwPayments.row, gvwPayments.Column].Text
   Endif
   
End

Public Sub gvwPayments_MouseUp()
   '------------------------------------------------------------------------
   'User has clicked on one of the cells in the grid
   'Don't know why this responds to a disabled grid
   'If total payment <> invoice total, allow them to use the row clicked on
   'also could be an 'invalid' row, i.e, total may already be reached
   'if so re-set the row back to the last valid one
   '------------------------------------------------------------------------
   
   Dim row As Integer
   Dim cumulative_paid As Float
   Dim on_Row As Integer = gvwPayments.Row
   
   If gvwPayments.row = -1 Or gvwItemsBilled_IsEmpty() Then Return
   If gvwPayments.Column = 0 Then 
      If (CInt(Invoice_Calculate_Amount_Paid()) >= CInt(invoice_total)) Then 
         For row = 0 To gvwPayments.Rows.Max                                                               ' now add up all the rows 
            If gvwPayments[row, cGridColumnPayments_Amount].text <> "" Then                                ' with money in them             
               cumulative_paid += modUtil.MoneyToFloat(gvwPayments[row, cGridColumnPayments_Amount].text)  ' as the cumulative total    
               If cumulative_paid = invoice_total Then                                                     ' if is equal to the invoice total
                  If on_Row <= row Then row = on_Row                                                       ' if user had clicked on a valid row 
                  gvwPayments.row = row                                                                    ' then leave focus on that row of the grid
                  Break                                                                                    ' or the last valid one
               Endif
            End If   
         Next
         gvwPayments_ShowProperty
         
      Else
         gvwPayments_AutoFill_Validate_Row                                                                 'Not yet reached the invoice total, auto-fill grid
      End If   
   Else
      gvwPayments_ShowProperty
   End If   
   
End

Public Sub gvwPayments_AutoFill_Validate_Row() 
   '---------------------------------------------------------------------------
   'Enable the payments grid if there is something to pay and not bulk billing
   'Auto-insert the probable amount of money being payed for the first rows
   'default to EFTPos which is the  most common method
   'If user tries to click on another row below this, and the totals in the grid
   'already add up to the invoice total, don't allow them, reset row to the last
   'row which when the rows add up made up to the invoice total
   '--------------------------------------------------------------------------
   
   Dim row As Integer
   Dim paid_to_date As Float
   Dim s As String
   Dim x As Integer
   Dim cumulative_paid As Float
   
   paid_to_date = Invoice_Calculate_Amount_Paid()
   If gvwItemsBIlled[0, 0].text <> "" And gvwItemsBIlled[0, 0].text <> "" Then        'if we have an item we have added to invoice
      If rbInvoiceToMedicare.value = True Or rbInvoiceToVeterans.value = True Then    'disable the payments grid if this is bulk billed item
         gvwPayments.Enabled = False
         If bExit Then Return
         bExit = True
         Message.Error("You can't pay when billing mode set to Medicare or Veterans.\n\nTo pay off these categories please click on the Bulk Bill Batching Tab")
         bExit = False
         Return
      End If
   Else                                                                               'nothing in the items billed grid
      gvwPayments.Enabled = False                                                     ' don't let them pay
      Return
   Endif
   
   If Not GvwPayments_IsEmpty() Then 
      bgvwPayments_First_Focus = False 
   Else
      bgvwPayments_First_Focus = True  
      gvwPayments.Row = 0
   End If  
   'ensure they are not clicking on empty row out of sequence, if are then set next empty row underneaeth existing text
   If gvwPayments.Row > 0 And If gvwPayments[gvwPayments.Row, 0].text = "" Then 'if user clicks on row and row above not filled in move back FIXME THIS CODE DOES NOT DO THIS
      For row = 0 To gvwPayments.Rows.Max    
         If gvwPayments[row, 0].text = "" Then
            gvwPayments.Row = row
            Break
         Endif
      Next
   End If   
   gvwPayments.Enabled = True                                                         'otherwise, enable the payments grid
   s = "*INVALID*"
   Try s = gvwPayments[gvwPayments.row, cGridColumnPayments_Amount].text              'get the amount for this row
   If s = "" Then                                                                     'if not re-clicking on a filled in row
      For row = 0 To gvwPayments.Rows.Max                                          'now add up all the rows and check if the cumulative amount    
         If gvwPayments[row, cGridColumnPayments_Amount].text <> "" Then
            cumulative_paid += modUtil.MoneyToFloat(gvwPayments[row, cGridColumnPayments_Amount].text) ' if is the invoice total
            If cumulative_paid = invoice_total Then                                   'if it is 
               gvwPayments.row = row                                                 'then leave focus on that row of the grid
               Return
            Else If cumulative_paid > invoice_total Then
               Message.Info("Can't pay more than the invoice")
               Return
            Endif
         End If   
      Next
      'there is money left to pay on the bill, fill it in
      gvwPayments[gvwPayments.row, cGridColumnPayments_Amount].text = modUtil.Money_Format(invoice_total - cumulative_paid)  'put in the amount to complete payment
      gvwPayments[gvwPayments.row, cGridColumnPayments_PaymentMethod].text = "EFTPOS"                                     'its usually EFTPOS
      gvwPayments[gvwPayments.Row, cGridColumnPayments_Date].Text = Format$(Now(), "dd/mm/yy")                            'and most likely being paid on the day 
      Wait
      Invoice_Calculate_Amount_Paid()                                                      'work out amount now paid, and prominantly display total under the grid
      EditArea_Notify_Data_Change(True)
   Else
      '    cell_text_gvwPayments = ""
      '    gvwPayments_ShowProperty
   End If
   
End

Public Function gvwPayments_IsEmpty() As Boolean
   '
   
   Dim row As Integer
   
   For row = 0 To gvwPayments.Rows.Max
      If gvwPayments[row, cGridColumnPayments_Amount].Text <> "" Then
         Return False    
      Endif
   Next
   Return True 
   
End

Public Sub gvwPayments_Click()
   
   If Mouse.Right Then
      Stop Event
      mnuPayments.Popup
   Endif
   
End

Public Sub gvwPayments_Clear()
   '------------------------------------------
   'Clears the payments grid and total showing
   '------------------------------------------
   
   With gvwPayments
      .clear
      .Enabled = False
      .Rows.count = 3
   End With
   With lblPaymentTotal
      .text = ""
      .Border = Border.None
   End With
   Vbox_PaymentGrid.height = (gvwPayments.rows.count + 3) * gvwPayments.rows[0].height
   txtPayment.text = ""   
   
End

Public Sub gvwPayments_Add_Row()
   
   Dim rows As Integer
   
   For rows = 0 To gvwPayments.rows.Max
      If gvwPayments[rows, 0].text = "" Then
         Return
      Endif
   Next
   Inc gvwPayments.Rows.Count
   
   HBox_PaymentGrid.height = (gvwPayments.rows.count + 3) * gvwPayments.rows[0].height
   Vsplit_Main.layout = [Vsplit_Main.layout[0] + 20, VSplit_Main.layout[1] - 20]
   
End

Public Sub gvwPayments_Delete_Row()
   '------------------------------------------------------------
   'Called by mnuPayments_Click - delete the current payment row
   '------------------------------------------------------------
   
   Dim col As Integer
   
   For col = 0 To 3
      gvwPayments[gvwPayments.row, col].text = ""
   Next
   txtPayment.text = ""
   Invoice_Calculate_Amount_Paid()
   
End

Public Sub gvwItemsBilled_HideProperty() As Boolean
   
   cmbFeeType.Visible = False
   txtFindItemNumber.Visible = False
   panGvwItemsBilledEditor.Hide
   $hEditor_gvwItems = Null
   
End

Public Function gvwItemsBilled_IsEmpty() As Boolean
   '
   
   Dim row As Integer
   
   For row = 0 To gvwItemsBilled.Rows.Max
      If gvwItemsBilled[row, cGridColumnItem_ItemNumber].Text <> "" Then
         Return False    
      Endif
   Next
   Return True 
   
End

Public Sub gvwItemsBilled_ShowProperty()
   '--------------------------------------------------------------------------------
   'nicked from the gambas IDE FProperty.class
   'Shows the control we are using to 'edit' the grid cell aligned over that cell
   'Maybe un-necessariily complex due to my simple brain but does this
   'The panGvwItemsBilledEditor = a Hbox holding 3 controls
   ' - a textbox for editing
   ' - a combobox for choosing the fee levels
   ' - a transparent label to let user click on something without entering edit mode
   '   which is what happens in the gambas IDE - I didn't use this because then I
   '   couldn't show a menu over the grid
   '--------------------------------------------------------------------------------
   
   Dim hEditor As Object
   
   txtFindItemNumber.Hide
   txtFindItemNumber.text = ""
   If cell_text_gvwItemsBIlled <> "" Then txtFindItemNumber.text = cell_text_gvwItemsBIlled
   cmbFeeType.Hide
   cmbReasonNotPaid.Hide   
   panGvwItemsBilledEditor.Hide
   If Not bPayingInvoice Then
      Select Case gvwItemsBIlled.column
         Case cGridColumnItem_FeeType
            hEditor = cmbFeeType
            oncol_items = cGridColumnItem_FeeType
         Case Else
            hEditor = txtFindItemNumber
      End Select
   Else
      If gvwItemsBIlled.Column <> cGridColumnItem_Reason_Not_Paid Then Return
      hEditor = cmbReasonNotPaid
   End If   
   $hEditor_gvwItems = hEditor
   gvwItemsBilled_MoveProperty        ' Move the Hbox panGvwItemsBilledEditor into position over the cell
   $hEditor_gvwItems.Show             ' Make transparent label "visible" or the combo box visible
   panGvwItemsBilledEditor.Show       ' Show the container, hence the  control
   $hEditor_gvwItems.SetFocus         ' give control focus > responded to key and click events
   
End

Public Sub gvwItemsBIlled_Clear()
   '----------------------------------------------------------
   'Clear the grid which the staff use to type in item numbers
   '----------------------------------------------------------
   
   gvwItemsBIlled.Clear()
   item = Null
   selected_item_num_and_billing_level = Null
   OnCol_Items = 0
   onrow_items = 0
   
End

Public Sub gvwItemsBIlled_Init()
   '----------------------------------------------------------
   'Contruct the grid which will hold the items on the invoice
   '----------------------------------------------------------
   
   With gvwItemsBIlled
      .Rows.H = 20
      .Columns.Count = 7
      .Rows.count = 4
   End With
   
End

Public Sub gvwItemsBIlled_Delete_Row()
   
   Dim col As Integer
   
   If bPayingInvoice Then Return
   For col = 0 To 5
      gvwItemsBIlled[gvwItemsBIlled.row, col].text = ""
   Next
   HBox_Descriptor.Visible = False
   columnview1.Visible = False
   Invoice_Calculate_Total("Total Owing")
   cell_text_gvwItemsBIlled = ""
   
End

Public Sub gvwItemsBIlled_Data_Valid() As Boolean
   '-----------------------------------------------------------------------
   'Checks the item data in the grid is value, start of row must be an item
   'number in the backend need at minimum item number,an amount and a type
   'returns true if rows are valid
   '-----------------------------------------------------------------------
   
   Dim row As Integer
   Dim item As Collection
   Dim bNoDAta As Boolean = True
   
   For row = 0 To gvwItemsBIlled.Rows.Max
      If gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text <> "" Then
         item = modBillingDBI.Items_Get(gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text, -1, 1)
         If IsNull(item) Then Return
         If gvwItemsBIlled[row, cGridColumnItem_Fee].Text = "" Then
            Return
         Endif
         If gvwItemsBIlled[row, cGridColumnItem_FeeType].Text = "" Then
            Return False
         Endif
         bNoDAta = False
      End If
   Next
   If bNoDAta Then Return False
   Return True
   
End

Public Sub gvwItemsBilled_MouseDown()
   'User has clicked somewhere on a row in the items billed grid
   
   If IsNull(patient) Then Return
   
   onrow_items = gvwItemsBIlled.Row
   If gvwItemsBIlled.Column > cGridColumnItem_BriefDescriptor Then
      If Not Valid_Item_And_Descriptor() Then Return
   End If   
   gvwItemsBilled[gvwItemsBIlled.row, gvwItemsBIlled.Column].Text
   If gvwItemsBilled[gvwItemsBIlled.row, gvwItemsBIlled.Column].Text <> "" Then
      cell_text_gvwItemsBIlled = gvwItemsBilled[gvwItemsBIlled.row, gvwItemsBIlled.Column].Text
   Endif
Catch
   
End

Public Sub gvwItemsBIlled_MouseUp()
   '---------------------------------------------------------------------
   ' User has clicked on one of the cells in the grid
   ' By design it seems the grid responds to mouse-up clicks if disabled
   '---------------------------------------------------------------------
   
   Dim onRow As Integer = gvwItemsBIlled.Row
   
   If IsNull(patient) Then Return
   If bexit Or gvwItemsBIlled.Enabled = False Then Return                  'no-go if paying an invoice -can't change existing items
   If bPayingInvoice Then
      
   Else
      If gvwItemsBIlled.Column = 1 Then Return
      If gvwItemsBIlled.Column > cGridColumnItem_BriefDescriptor Then
         If Not Valid_Item_And_Descriptor() Then Return
      End If  
      cell_text_gvwItemsBIlled = ""
      oncol_items = gvwItemsBIlled.Column
      If Last_Billing_Row_Used() + 1 <> gvwItemsBIlled.Row And gvwItemsBIlled.column = 0 Then
         gvwItemsBIlled.Row = Last_Billing_Row_Used() + 1
         cell_text_gvwItemsBIlled = ""
         onrow_items = gvwItemsBIlled.Row 
      Endif
      If gvwItemsBIlled[gvwItemsBIlled.row, 0].text = "10991" Then Return
   End If   
   gvwItemsBilled_ShowProperty                              'bad name but show the control we want to overlay a cell
   
End

Public Function Last_Billing_Row_Used() As Integer
   
   Dim x As Integer
   
   For x = 0 To gvwItemsBIlled.Rows.Count - 1
      If Trim(gvwItemsBIlled[x, 0].text) = "" Then
         Return x - 1
      Endif
   Next
   Return x
   
End

Public Sub gvwItemsBIlled_Area_Of_Need_Add()
   ' If user changing fee types, add in area of need if now bulk billing
   ' and other criteria safisfy
   
   Dim patient_age_in_years As Integer
   Dim bEntitledVeteran As Boolean
   Dim fk_lu_billing_type As Variant
   Dim AreaOfNeed_Item As Collection
   Dim price As Variant
   Dim Backup_GridData As New Collection
   
   If Not IsNull(form_billingcards.Veteran_Card_Type()) Then     'they must be an entitled veteran in some capacity
      bEntitledVeteran = True
      fk_lu_billing_type = const.Billingtype_DVA_LM0
   Else
      fk_lu_billing_type = const.Billingtype_Scheduled_Fee
   End If
   If txtAge.text <> "" And InStr(txtAge.text, "y") Then patient_age_in_years = Val(Split(txtAge.text, "y")[0])
   If bEntitledVeteran Or patient_age_in_years < 16 Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Health_Care_Card Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Pensioner_concession_card Then
      AreaOfNeed_Item = Area_of_Need_Fees[fk_lu_billing_type]
      If Not IsNull(AreaOfNeed_Item) Then
         onrow_items = Min(gvwItemsBIlled.row + 1, 3)
         price = Replace(AreaOfNeed_Item!price, "$", "")
         gvwItemsBIlled.row = onrow_items
         gvwItemsBIlled_FillRow(price, AreaOfNeed_Item)
      Endif
   End If
   
End

Public Sub gvwItemsBIlled_Area_Of_Need_Remove()
   ' A condition has happened where we need to auto-remove any item of need monies
   ' eg. a patient who usually gets this has been converted to a private fee
   ' shufle up kosha rows and adjust the underlying grid collection
   ' this is currently not working
   
   Dim x As Integer
   Dim col As Integer
   Dim a_row As Collection
   Dim kosha_rows As New Collection
   Dim Kosha_row As Collection
   Dim Backup_GridData As New Collection
   
   For x = 0 To gvwItemsBIlled.Rows.count - 1
      If gvwItemsBIlled[x, 0].text = "10991" Then
         For col = 0 To 5
            gvwItemsBIlled[x, col].text = ""
         Next
         Invoice_Calculate_Total("Total Owing")
         cell_text_gvwItemsBIlled = ""
      Else
         If gvwItemsBIlled[x, 0].text <> "" Then
            a_row = New Collection
            a_row!item = gvwItemsBIlled[x, cGridColumnItem_ItemNumber].text
            a_row!brief_descriptor = gvwItemsBIlled[x, cGridColumnItem_BriefDescriptor].text
            a_row!fee = gvwItemsBIlled[x, cGridColumnItem_Fee].text
            a_row!gap = gvwItemsBIlled[x, cGridColumnItem_Gap].text
            a_row!fee_type = gvwItemsBIlled[x, cGridColumnItem_FeeType].Text
            a_row!gst = gvwItemsBIlled[x, cGridColumnItem_gst_amount].text
            kosha_rows.Add(a_row, kosha_rows.count)
            Backup_GridData.Add(GridData[x], Backup_GridData.Count)
         End If
      Endif
   Next
   GridData = New Collection
   x = 0
   If kosha_rows.count Then
      gvwItemsBIlled_Clear
      For Each Kosha_row In kosha_rows
         gvwItemsBIlled[x, cGridColumnItem_ItemNumber].text = Kosha_row!item
         gvwItemsBIlled[x, cGridColumnItem_BriefDescriptor].text = Kosha_row!brief_descriptor
         gvwItemsBIlled[x, cGridColumnItem_Fee].text = Kosha_row!fee
         gvwItemsBIlled[x, cGridColumnItem_Gap].text = Kosha_row!gap
         gvwItemsBIlled[x, cGridColumnItem_FeeType].text = Kosha_row!fee_type
         gvwItemsBIlled[x, cGridColumnItem_gst_amount].text = Kosha_row!gst
         GridData.Add(Backup_GridData[x], x)
         Inc x
      Next
   Endif
   
End

Public Sub gvwItemsBIlled_Scroll()
   '------------------------------------------------------
   'As the grid scrolls re-position the overlying control
   '-----------------------------------------------------
   
   gvwItemsBilled_MoveProperty
   
End

Public Sub gvwItemsBIlled_Select()
   
   onrow_items = gvwItemsBIlled.Row
   
End

Private Sub gvwItemsBilled_MoveProperty()
   '------------------------------------------------------------------------
   'Move the editing Hbox control to match a grid cell co-ordinates and size
   '------------------------------------------------------------------------
   
   If IsNull($hEditor_gvwItems) Or gvwItemsBIlled.Row = -1 Then Return
   With gvwItemsBIlled[gvwItemsBIlled.Row, gvwItemsBIlled.column]
      panGvwItemsBilledEditor.Move(gvwItemsBIlled.X + .X - gvwItemsBIlled.ScrollX, gvwItemsBIlled.Y + .Y - gvwItemsBIlled.ScrollY, .Width, .Height)
      panGvwItemsBilledEditor.Raise
   End With
   
End

Public Sub cmbEditArea_LostFocus()
   
   Select Case Last.tag
      Case "fee type", "payment method"
         Last.visible = False
   End Select
   
End

Public Sub cmbPaymentMethods_Menu()
   
   mnuPayments.Popup
   
End

Public Sub cmbReasonNotPaid_Click()
   
   If bexit Then 
      Stop Event
      Return 
   End If   
   If cmbReasonNotPaid.text = "Remove Reason" Then    
      gvwItemsBIlled[gvwItemsBIlled.Row, cGridColumnItem_Reason_Not_Paid].text = ""
   Else
      gvwItemsBIlled[gvwItemsBIlled.Row, cGridColumnItem_Reason_Not_Paid].text = cmbReasonNotPaid.Text
   End If   
   
End

Public Sub cmbFeeType_Click()
   
   If bexit Then
      Stop Event
      Return
   End If
   gvwItemsBIlled_Set_Fee_Level(Last.text)
   bexit = True
   gvwItemsBIlled_Calculate_Fees
   bexit = False
   
End

Public Sub gvwItemsBIlled_Set_Fee_Level(level As String)
   
   Dim row As Integer
   
   Select Case Lower(level)
      Case "schedule fee", "veteran"
         For row = 0 To gvwItemsBIlled.Rows.Max
            If gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text <> "" Then
               gvwItemsBIlled.row = row
               gvwItemsBIlled[row, cGridColumnItem_FeeType].text = level
            End If
         Next
      Case "private fee", "other"
         For row = 0 To gvwItemsBIlled.Rows.Max
            If gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text <> "" Then
               gvwItemsBIlled.row = row
               If Lower(gvwItemsBIlled[row, cGridColumnItem_FeeType].text) = "schedule fee" Or Lower(gvwItemsBIlled[row, cGridColumnItem_FeeType].text) = "veteran" Then
                  gvwItemsBIlled[row, cGridColumnItem_FeeType].text = level
               End If
            End If
         Next
      Case Else
         gvwItemsBIlled[row, cGridColumnItem_FeeType].text = level
   End Select
   
End

Public Sub cmbPaymentMethods_Leave()
   
   gvwPayments_HideProperty 
   
End

Public Sub cmbPaymentMethods_Click()
   
   gvwPayments[gvwPayments.row, cGridColumnPayments_PaymentMethod].Text = cmbPaymentMethods.Text
   If cmbPaymentMethods.Text <> "CHEQUE" Then
      gvwPayments[gvwPayments.row, cGridColumnPayments_Comment].text = ""
   Endif
   EditArea_Notify_Data_Change(True)
   gvwPayments_HideProperty
   
End

Public Sub txtFindItemNumber_Activate()
   'This is the textbox which overlays the cells in the grid
   'user has hit the <enter> key
   
   Dim fee As String
   Dim fee_float As Float
   Dim old_fee As Float
   Dim gst As Float
   Dim old_gap As Float
   
   If bexit Or gvwItemsBIlled.row = -1 Then Return 
   panGvwItemsBilledEditor.Hide
   $hEditor_gvwItems = Null
   Select Case OnCol_Items
      Case cGridColumnItem_ItemNumber
         gvwItemsBIlled[gvwItemsBIlled.row, 0].Text = txtFindItemNumber.text
         txtFindItemNumber.Visible = False
         Item_Number_Get_Fee_Levels_Fill_Invoice_Row(txtFindItemNumber.text)
      Case cGridColumnItem_Fee
         fee = Trim(txtFindItemNumber.text)
         fee = Replace$(fee, "$", "")
         Try fee_float = modUtil.MoneyToFloat(fee)
         If Error Then
            Message.Error("Not a valid monetary value")
         Else
            old_fee = 0
            Try old_fee = modUtil.MoneyToFloat(gvwItemsBilled[gvwItemsBilled.Row, 2].Text)
            gvwItemsBilled[gvwItemsBilled.Row, 2].Text = "$" & fee
            txtFindItemNumber.Visible = False
            gvwItemsBIlled.SetFocus()
            ' re-compute GST amounts if required
            Print selected_item_num_and_billing_level!gst_rate
            If selected_item_num_and_billing_level!gst_rate <> 0 Then
               gst = fee_float / selected_item_num_and_billing_level!gst_rate
               gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_gst_amount].Text = modUtil.Money_Format(gst)
            Endif
            ' Try gst = modUtil.MoneyToFloat(gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_gst_amount].Text)
            ' If Not Error And If gst > 0 And If old_fee > 0 Then
            '    gst = fee_float * (gst / old_fee)
            '    gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_gst_amount].Text = modUtil.Money_Format(gst)
            ' Endif
            ' re-compute the gap if required
            Try old_gap = modUtil.MoneyToFloat(gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_Gap].Text)
            If Not Error And If old_gap > 0 Then
               old_gap = old_gap + fee_float - old_fee
               gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_Gap].Text = modUtil.Money_Format(old_gap)
            Endif
            Invoice_Calculate_Total("Total Owing")
         Endif
      Case cGridColumnItem_gst_amount
         selected_item_num_and_billing_level
         
      Case cGridColumnItem_BriefDescriptor
         If IsNull(item) Then Return
         If IsNull(item!descriptor_brief) Then
            Message.Title = "Brief Descriptors"
            gvwItemsBIlled[gvwItemsBIlled.row, 1].Text = Trim(txtFindItemNumber.text)
            If Message.question("Do you want to save this brief descriptor?", "Yes", "No") = 1 Then
               modDBConnect.update("billing.fee_schedule", Null, ["pk": item!fk_fee_schedule, "descriptor_brief": gvwItemsBIlled[gvwItemsBIlled.row, 1].Text])
               item!descriptor_brief = gvwItemsBIlled[gvwItemsBIlled.row, 1].Text
               modDBConnect.CommitTrans()
               txtFindItemNumber.Visible = False
               HBox_Descriptor.Visible = False
               txtDescriptor.text = ""
               gvwItemsBIlled.SetFocus()
            Endif
         Endif
   End Select
   
End

Public Sub txtFindItemNumber_KeyPress()
   
   Select Case key.Code
      Case key.Down
         If OnCol_Items = cGridColumnItem_BriefDescriptor Then
            If columnview1.Visible Then
               With columnview1
                  .MoveFirst
                  .Item.Selected = True
                  .SetFocus()
               End With
            End If
         End If
   End Select
   
End

Public Sub txtFindItemNumber_Activate_old()
   'This is the textbox which overlays the cells in the grid
   'user has hit the <enter> key
   
   Dim fee As String
   Dim fee_float As Float
   Dim old_fee As Float
   Dim gst As Float
   Dim old_gap As Float
   
   If bexit Or gvwItemsBIlled.row = -1 Then Return 
   panGvwItemsBilledEditor.Hide
   $hEditor_gvwItems = Null
   Select Case OnCol_Items
      Case cGridColumnItem_ItemNumber
         gvwItemsBIlled[gvwItemsBIlled.row, 0].Text = txtFindItemNumber.text
         txtFindItemNumber.Visible = False
         Item_Number_Get_Fee_Levels_Fill_Invoice_Row(txtFindItemNumber.text)
      Case cGridColumnItem_Fee
         fee = Trim(txtFindItemNumber.text)
         fee = Replace$(fee, "$", "")
         Try fee_float = modUtil.MoneyToFloat(fee)
         If Error Then
            Message.Error("Not a valid monetary value")
         Else
            old_fee = 0
            Try old_fee = modUtil.MoneyToFloat(gvwItemsBilled[gvwItemsBilled.Row, 2].Text)
            gvwItemsBilled[gvwItemsBilled.Row, 2].Text = "$" & fee
            txtFindItemNumber.Visible = False
            gvwItemsBIlled.SetFocus()
            ' re-compute GST amounts if required
            Print selected_item_num_and_billing_level!gst_rate
            Try gst = modUtil.MoneyToFloat(gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_gst_amount].Text)
            If Not Error And If gst > 0 And If old_fee > 0 Then
               gst = fee_float * (gst / old_fee)
               gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_gst_amount].Text = modUtil.Money_Format(gst)
            Endif
            ' re-compute the gap if required
            Try old_gap = modUtil.MoneyToFloat(gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_Gap].Text)
            If Not Error And If old_gap > 0 Then
               old_gap = old_gap + fee_float - old_fee
               gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_Gap].Text = modUtil.Money_Format(old_gap)
            Endif
            Invoice_Calculate_Total("Total Owing")
         Endif
      Case cGridColumnItem_gst_amount
         selected_item_num_and_billing_level
         
      Case cGridColumnItem_BriefDescriptor
         If IsNull(item) Then Return
         If IsNull(item!descriptor_brief) Then
            Message.Title = "Brief Descriptors"
            gvwItemsBIlled[gvwItemsBIlled.row, 1].Text = Trim(txtFindItemNumber.text)
            If Message.question("Do you want to save this brief descriptor?", "Yes", "No") = 1 Then
               modDBConnect.update("billing.fee_schedule", Null, ["pk": item!fk_fee_schedule, "descriptor_brief": gvwItemsBIlled[gvwItemsBIlled.row, 1].Text])
               item!descriptor_brief = gvwItemsBIlled[gvwItemsBIlled.row, 1].Text
               modDBConnect.CommitTrans()
               txtFindItemNumber.Visible = False
               HBox_Descriptor.Visible = False
               txtDescriptor.text = ""
               gvwItemsBIlled.SetFocus()
            Endif
         Endif
   End Select
   
End

' Public Sub txtFindItemNumber_KeyPress()
'    
'    Select Case key.Code
'       Case key.Down
'          If OnCol_Items = cGridColumnItem_BriefDescriptor Then
'             If columnview1.Visible Then
'                With columnview1
'                   .MoveFirst
'                   .Item.Selected = True
'                   .SetFocus()
'                End With
'             End If
'          End If
'    End Select
'    
' End

Public Sub txtFindItemNumber_KeyRelease()
   '--------------------------------------------------------------------
   'if user searching for brief descriptor zero the timer count
   'then once they stop typing and timer_count which is incremented by
   'Timer1_Timer > 3 the search is triggered see   Descriptors_Brief_Get
   '--------------------------------------------------------------------
   
   If Trim(txtFindItemNumber.text) = "" Then Return
   timer_count = 0
   If OnCol_Items = cGridColumnItem_BriefDescriptor Then
      timer1.Enabled = True
      timer1.Start
   Else
      timer1.Enabled = False
      timer1.Stop
   Endif
   
End

Public Sub Form_Close()
   
   Settings_Save()
   
End

Private Sub Settings_Load()
   
   Vsplit_Main.layout = Settings[Me.Name & "/VSplit_Main.Layout", modUtilGUI.VSplit([604, 283])]
   Hsplit_Main.Layout = Settings[Me.Name & "/HSplit_Main.Layout", modUtilGUI.HSplit([362, 1335])]
   Hsplit_EditArea.Layout = Settings[Me.Name & "/HSplit_EditArea.Layout", modUtilGUI.HSplit([653, 658])]
   cvwItemsTodayOrUnpaid.Font = Font[Settings[Me.Name & "/cvwItemsBilled.font", "DejaVu Sans, 9"]]
   cvwWorkcoverClaims.Font = Font[Settings[Me.Name & "/cvwWorkcoverClaims.font", "DejaVu Sans, 8"]]
   gvwUnpaidVisits.Font = Font[Settings[Me.Name & "/gvwUnpaidVisits.font", " DejaVu Sans, 9 "]]
   gvwAccountNames.Font = Font[Settings[Me.Name & "/gvwAccountNames.font", "DejaVu Sans, 9"]]
   cvwAccountHistory.font = Font[Settings[Me.Name & "/cvwAccountHistory.font", "DejaVu Sans, 9"]]
   VSplit_INvoices.Layout = Settings[Me.name & "/VSplit_Invoices.Layout", modUtilGUI.VSplit([1, 1, 1])]
   
End

Public Sub Settings_Save()
   
   Settings["FRecordVisit/VSplit_Main.Layout"] = Vsplit_Main.Layout
   Settings["FRecordVisit/HSplit_Main.Layout"] = Hsplit_Main.Layout
   Settings["FRecordVisit/HSplit_EditArea.Layout"] = Hsplit_EditArea.Layout
   Try from_fee_schedule.Settings_Save()
   
End

Public Function gwvPayments_Rows_With_Payment() As Integer
   
   Dim grid_row As Integer
   Dim row_count As Integer
   
   For grid_row = 0 To gvwPayments.Rows.count - 1
      If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then
         Inc row_count
      Else ' nothing in this row 
         Return row_count
      Endif
   Next
   Return row_count
   
End

Public Sub Save(bBulkBill As Boolean, Optional bPrint As Boolean = True)
   '--------------------------------------------------------------------------------------
   ' Saves a new or edited invoice (if the invoice is unpaid)
   ' Note the Invoice collection Is global to this billing module, so that if an invoice
   ' has been displayed by clicking on an invoice under the editing area, and edited then
   ' all the collection is filled. Only the date_invoiced and staff invoiced is kept when
   ' editing, the rest is added back in
   '
   ' Saves record of payment
   '--------------------------------------------------------------------------------------
   ' CREATE TABLE billing.invoices
   ' (
   '   pk serial NOT NULL,
   '   fk_staff_invoicing integer NOT NULL, -- the staff member raising the invoice
   '   date_printed timestamp without time zone,
   '   notes text, -- Any additional comments pertaining to the invoice or any of it's...
   '   fk_staff_provided_service integer NOT NULL, -- the staff member who provider the service on which the invoice is based
   '   fk_patient integer,
   '   date_invoiced timestamp without time zone NOT NULL DEFAULT now(),
   '   paid boolean NOT NULL DEFAULT false,
   '   fk_payer_person integer, -- if not null then the key to the person who pays the bill
   '   fk_payer_branch integer, -- if not null then payer is an organisation/branch
   '   latex text, -- the LaTeX definition of the invoice generated
   '   fk_branch integer NOT NULL, -- The branch at which the patient was provided with the service
   '   visit_date date, -- The date time of the patient visit - may be null because the invoice could be raised not in relation to a visit
   '   reference text, -- text of any insurance or bill reference eg 'CLAIM NO:1234'
   '   fk_lu_bulk_billing_type integer, -- if not null then the type of bulk-bill 1=medicare 2=veteran
   '   fk_appointment integer,
   '   total_bill money NOT NULL DEFAULT '$0.00'::money,
   '   total_gst money NOT NULL DEFAULT '$0.00'::money,
   '   total_paid money NOT NULL DEFAULT '$0.00'::money,
   '   online boolean NOT NULL DEFAULT false, -- true if the invoice is to be uploaded via Medicare Online
   '   result_code integer DEFAULT (-1), -- text returned by medicare Online driver, only significant if result_code > 0
   '   result_text text,
   '   fk_claim integer,
   '   voucher_id character varying(2),
   '   referrer_provider_number character varying(8),
   '   referral_date date,
   '   referral_duration integer,
   '   pms_claim_id text, -- Medicare Online returns a claim transaction ID, which their documentaiton misleadingly calls the PMS Claim ID
   '   error_level character(1), -- Medicare Online's one-char error level code, A=acceptable, U=aunacceptable, not very useful compared to the error numeric code
   '   claimant_address_upload boolean NOT NULL DEFAULT false, -- true if claimant's address is to be uploaded using Medicare Online
   '   bank_details_upload boolean NOT NULL DEFAULT false, -- true if claimant's bank details are to be uploaded using Medicare Online
   '   CONSTRAINT invoices_pkey PRIMARY KEY (pk),
   '   CONSTRAINT invoices_fk_appointment_fkey FOREIGN KEY (fk_appointment)
   '       REFERENCES clerical.bookings (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_branch_fkey FOREIGN KEY (fk_branch)
   '       REFERENCES contacts.data_branches (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_claim_fkey FOREIGN KEY (fk_claim)
   '       REFERENCES billing.claims (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_doctor_raising_fkey FOREIGN KEY (fk_staff_provided_service)
   '       REFERENCES admin.staff (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_lu_bulk_billing_type_fkey FOREIGN KEY (fk_lu_bulk_billing_type)
   '       REFERENCES billing.lu_bulk_billing_type (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_patient_fkey FOREIGN KEY (fk_patient)
   '       REFERENCES clerical.data_patients (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_payer_branch_fkey FOREIGN KEY (fk_payer_branch)
   '       REFERENCES contacts.data_branches (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_payer_person_fkey FOREIGN KEY (fk_payer_person)
   '       REFERENCES contacts.data_persons (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_staff_invoicing_fkey FOREIGN KEY (fk_staff_invoicing)
   '       REFERENCES admin.staff (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT flags_online CHECK (NOT (NOT online AND (bank_details_upload OR claimant_address_upload))),
   '   CONSTRAINT has_claimant CHECK (NOT (claimant_address_upload AND fk_payer_person IS NULL))
   ' )
   ' WITH (
   '   OIDS=FALSE
   '--------------------------------------------------------------------------------------------------------
   
   Dim item As CRow
   Dim payment As CRow
   Dim payment_method As Collection
   Dim bPaid As Boolean = False
   Dim grid_row As Integer
   Dim total_paid As Float
   Dim invoice_total As Float
   Dim sMsg As String
   Dim referrer As Collection
   Dim date_paid As Date
   Dim latex As String
   Dim item_Previously_Billed As Collection 'used when editing and resaving
   Dim bItemExists As Boolean               'true if an edited item exists
   Dim bEditedItemDeleted As Boolean  'True if an invoice idited and an item has been deleted
   
   If VBox_EditArea_Outer.Padding = 0 Then
      If IsNull(invoice) Then Return
      If Not bPrint Then Return
      If IsNull(invoice!latex) And If invoice!online Then
         latex = modBillingDBI.Generate_Online_Latex(invoice!fk_invoice)
      Else
         latex = invoice!latex
      Endif
      If Not IsNull(latex) Then modPrinting.Print_latex(latex)
      Return           'no data change no save
   Endif
   If Not Valid_Invoice_Items(bBulkBill) Then Return                 'items invalid no save
   '-----------------------------------------------------
   'Now, work out if being paid, if so ?all, is it valid?
   '-----------------------------------------------------
   If lblPaymentTotal.text <> "" Then
      Message.Title = "Payment of Invoice"
      For grid_row = 0 To gvwPayments.Rows.Max
         If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then            'if have an amount
            If gvwPayments[grid_row, cGridColumnPayments_PaymentMethod].text = "" Then
               gvwPayments.Row = grid_row
               gvwPayments.Column = cGridColumnPayments_PaymentMethod
               Message.Info("Please enter type of payment.\n\n")
               Return
            Endif
            total_paid = total_paid + CFloat(Val(Replace(gvwPayments[grid_row, cGridColumnPayments_Amount].text, "$", "")))
         Else
            If grid_row = 0 Then
               gvwPayments.Row = 0
               gvwPayments.Column = 0
               Message.Info("Please enter amount of payment.\n\n")
               Return
            End If
         End If
      Next
   End If
   '------------------------------------------------------------
   'finally if being paid, does the paid amount match the total?
   '------------------------------------------------------------
   Try invoice_total = modUtil.MoneyToFloat(invoice!total_bill)
   If Error Then 
      invoice_total = CFloat(Val(Right(lblInvoiceOwing.text, Len(lblInvoiceOwing.text) - InStr(lblInvoiceOwing.text, " $") - 1)))
   End If   
   If total_paid <> 0 Then
      If total_paid > invoice_total Then
         Message.Info("The amount being paid is greater than the invoice total.")
         Return
      Endif
   End If
   '-----------------------------------------------------------------------------
   'At this point validation finished total_paid 0 or amount <= invoice total
   'Create or edit the invoice
   'If editing (e.g paying) then user will not have been able to change
   'any of the core invoice details, ie date originally invoiced, who invoiced it
   '-----------------------------------------------------------------------------
   If Not IsNull(fk_invoice) Then                                       ' existing invoice
      invoice.put_unchanged(fk_invoice, "fk_invoice")                   ' edit the record
   Else                                                                 ' an edited invoice
      invoice!fk_staff_invoicing = modDBConnect.currentUser!fk_staff    'new - then current user is doing the invoicing
      invoice!date_invoiced = Now() 'was "now()"                        'today
   End If
   invoice!notes = cmbInvoiceComments.Text
   invoice!reference = Trim(txtReferenceDetails.text)
   If bBulkBill Then
      If rbInvoiceToMedicare.value = True Then invoice!fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare
      If rbInvoiceToVeterans.value = True Then invoice!fk_lu_bulk_billing_type = const.BulkBilling_Type_Veteran
   Endif
   If rbOnline_Yes.Value Then
      invoice!online = True
      If bBulkBill Then
         invoice!result_code = 4003
      Else
         invoice!result_code = 4005
      Endif
   Else
      invoice!online = False
      If bBulkBill Then
         invoice!result_code = 4002
      Else
         invoice!result_code = 4001
      Endif
   Endif
   If cmbSeenBy.Index <> -1 Then
      invoice!fk_staff_provided_service = staff[cmbSeenBy.index]!fk_staff
   End If
   If Not IsNull(fk_patient) Then invoice!fk_patient = fk_patient     'may not be for a patient
   If Not IsNull(fk_appointment) Then invoice!fk_appointment = fk_appointment
   invoice!fk_branch = clinics[cmbLocation.Index]!fk_branch   'branch at which service was provided
   If Not IsNull(fk_payer_branch) Then invoice!fk_payer_branch = fk_payer_branch
   If Not IsNull(fk_payer_person) Then invoice!fk_payer_person = fk_payer_person
   invoice!visit_date = Val(txtDate.text)
   '----------------------------------
   'has the invoice been paid in full?- fix this code
   '----------------------------------
   If invoice_total = total_paid Then
      '  invoice!paid = True      'this is done in the backend via  billing.update_invoice_payment() trigger function
      bpaid = True
   Else
      bpaid = False
   End If
   If invoice.Exist("fk_patient") Then
      fk_patient = invoice!fk_patient
   Endif
   If IsNull(fk_patient) Or If fk_patient < 1 Then 'fix me ?<1 kosha
      ' referrer has no PN, so leave it all blank
   Else
      referrer = modBillingDBI.Find_Referrer(fk_patient, invoice!visit_date)
      If Not IsNull(referrer) Then
         invoice!referrer_provider_number = referrer!provider_number
         invoice!referral_date = referrer!date_created
         If referrer!indefinite Then
            invoice!referral_duration = 13
         Else
            invoice!referral_duration = referrer!months
         Endif
      Endif
   Endif
   If invoice!online And If Not IsNull(fk_payer_person) And If cbSendClaimantAddress.Value = True Then
      invoice!claimant_address_upload = True
   Endif
   If invoice!online And If Not IsNull(FBankDetails.account_number) And If Not Len(FBankDetails.account_number) < 4 Then
      invoice!bank_details_upload = True
   Endif
   invoice.Save("billing.invoices", "fk_invoice")
   fk_invoice_for_printing = invoice!fk_invoice
   If Not IsNull(invoice!online) And If Not IsNull(FBankDetails.account_number) And If Not Len(FBankDetails.account_number) < 4 Then
      modBillingDBI.Save_Bank_Details(invoice!fk_invoice, FBankDetails.account_name, FBankDetails.bsb, FBankDetails.account_number)
   Endif
   ' never 'remember' bank details across invoices or patients
   FBankDetails.account_name = Null
   FBankDetails.account_number = Null
   FBankDetails.bsb = Null
   '------------------------------------
   'Get the items from the grid and save
   'FIXME - will later keep the underlying grid data in an array of some sort
   'and dispose of some of these backend calls
   '------------------------------------
   '  Then  'FIXME MAY HAVE TO ALLOW EDITING OF THIS
   If IsNull(fk_invoice)                            'a new invoice
      For grid_row = 0 To gvwItemsBIlled.Rows.count - 1  'fixme check all necessary data is in grids cells
         If gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text <> "" Then
            item = New CRow
            item!fk_fee_schedule = modBillingDBI.fk_fee_shedule_Get_For_Item_Number(gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text) 'could be compound eg 35/1
            item!amount = gvwItemsBIlled[grid_row, cGridColumnItem_Fee].Text
            item!fk_invoice = invoice!fk_invoice
            item!fk_lu_billing_type = Billing_Type_Get_Pk(gvwItemsBIlled[grid_row, cGridColumnItem_FeeType].Text)
            item!amount_gst = gvwItemsBIlled[grid_row, cGridColumnItem_gst_amount].Text
            If gvwItemsBIlled[grid_row, cGridColumnItem_Reason_Not_Paid].Text <> "" Then
               item!reason_code = Reasons_not_billed[gvwItemsBIlled[grid_row, cGridColumnItem_Reason_Not_Paid].Text]!reason_code   
               item!error_level = "U"
            Endif
            item.Save("billing.items_billed", "fk_item_billed")
         End If
      Next
   Else                                                       'the invoice is being edited Items_Billed contains the previously billed item numbers
      'Firstly, have any items which were billed before editing too place actually been removed?
      For Each item_Previously_Billed In Items_Billed         'check each previously billed item
         bEditedItemDeleted = True                            'assume it has been deleted
         For grid_row = 0 To gvwItemsBIlled.Rows.count - 1    'against every row in the grid
            If Lower(item_Previously_Billed!common_item) = Trim(Lower(gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text)) Then
               bEditedItemDeleted = False                     'if still in the grid 
               Break                                          'jump out to try the next one
            End If  
         Next
         If bEditedItemDeleted = True Then                    'if that item number now not in the grid             '
            item = New CRow                                   'mark it deleted
            item.put_unchanged(item_Previously_Billed!pk_items_billed, "fk_item_billed")
            item!deleted = True
            item.Save("billing.items_billed", "fk_item_billed")
         Endif
      Next
      For grid_row = 0 To gvwItemsBIlled.Rows.count - 1       'check each row in the grid, could be a new item or an edited old one
         If gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text <> "" Then        'if there is data in the grid cell
            item = New CRow                                                           
            bEditedItemDeleted = False                                                   
            bItemExists = False 
            For Each item_Previously_Billed In Items_Billed                             'run through all those items attatched to the edited invoice
               bEditedItemDeleted = True                                                 'assume its been deleted
               If Lower(item_Previously_Billed!common_item) = Trim(Lower(gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text)) Then
                  If item_Previously_Billed!amount = gvwItemsBIlled[grid_row, cGridColumnItem_Fee].Text Then
                     bItemExists = True  
                     bEditedItemDeleted = False  
                     Break
                  End If   
               Endif
            Next
            If bEditedItemDeleted = True And bItemExists = True Then                                                   
               item.put_unchanged(item_Previously_Billed!pk_item_billed, "fk_item_billed")
               item!deleted = True 
            Else      
               If bItemExists Then 
                  item.put_unchanged(item_Previously_Billed!pk_items_billed, "fk_item_billed")
               End If   
               item!fk_fee_schedule = modBillingDBI.fk_fee_shedule_Get_For_Item_Number(gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text) 'could be compound eg 35/1
               item!amount = gvwItemsBIlled[grid_row, cGridColumnItem_Fee].Text
               item!fk_invoice = invoice!fk_invoice
               item!fk_lu_billing_type = Billing_Type_Get_Pk(gvwItemsBIlled[grid_row, cGridColumnItem_FeeType].Text)
               item!amount_gst = gvwItemsBIlled[grid_row, cGridColumnItem_gst_amount].Text
               If gvwItemsBIlled[grid_row, cGridColumnItem_Reason_Not_Paid].Text <> "" Then
                  item!reason_code = Payment_Refusal_Reasons[gvwItemsBIlled[grid_row, cGridColumnItem_Reason_Not_Paid].Text]!reason_code   
                  item!error_level = "U"
               Endif
               
            Endif
            item.Save("billing.items_billed", "fk_item_billed")
         Endif
      Next
   End If   
   '----------------------------------------------------
   'Now, is this invoice being paid? in part or in full?
   '----------------------------------------------------
   If total_paid > 0 Then
      For grid_row = 0 To gvwPayments.Rows.count - 1
         If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then
            payment = New CRow
            payment!fk_invoice = invoice!fk_invoice
            payment!amount = gvwPayments[grid_row, cGridColumnPayments_Amount].Text
            For Each payment_method In Payment_Methods
               If payment_method!method = gvwPayments[grid_row, cGridColumnPayments_PaymentMethod].text Then
                  payment!fk_lu_payment_method = payment_method!pk
                  Break
               Endif
            Next
            sMsg = gvwPayments[grid_row, cGridColumnPayments_Date].Text
            date_paid = modUtil.Make_Date_From_String(smsg)
            payment!date_paid = date_paid
            payment!referent = gvwPayments[grid_row, cGridColumnPayments_Comment].Text  '?used for cheque details
            payment!fk_staff_receipted = modDBConnect.currentUser!fk_staff
            ' If payment!fk_lu_payment_method <> const.payment_method_cash Or payment!fk_lu_payment_method <> const.payment_method_cheque Then
            '    payment!date_banked = payment!date_paid
            ' End If   
            payment.Save("billing.payments_received", "fk_payment")
         End If
      Next
   Endif
   '------------------------------------------
   'finally mark this appointment as invoiced
   'fixme only update  this on first pass
   'fime  misnomer invoice or reciept
   '-----------------------------------------
   If Not IsNull(fk_appointment) Then
      If Not bPayingInvoice Then
         modDBConnect.update("clerical.bookings", Null, ["pk": fk_appointment, "invoiced": True])
      Endif
   End If   
   'fixme won't always be printed, but need to always save latex
   invoice!latex = modBillingDBI.Print_Invoice(invoice!fk_invoice, bPrint, bBulkBill, Null, referrer)
   If Not IsNull(invoice!latex) Then
      modDBConnect.update("billing.invoices", Null, ["pk": invoice!fk_invoice, "latex": invoice!latex, "date_printed": "now()"])
   Endif
   modDBConnect.CommitTrans() ' do this last to prevent new transaction from forming
   fk_invoice = Null
   EditArea_Notify_Data_Change(False)
   If Not bSearchingAccounts Then
      UnBilled_Appointments_Reload
   Else
      Items_Today_Or_Unpaid_Reload                   'refresh the invoices under the edit area
   End If
Catch
   Message.Info("An error occured whilst trying to save the invoice")
   
End

Public Sub Items_Today_Or_Unpaid_Reload()
   
   Items_Today_Or_Unpaid = Fill_Columnview(cvwItemsTodayOrUnpaid, modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Items_Invoices_Get(fk_patient, iAccountDisplayMode)))
   
End

Public Sub Billing_Type_Get_Pk(txt As String) As Variant
   
   Dim type As Collection
   
   For Each type In FeeTypes
      If type!type = txt Then
         Return type!pk
      Endif
   Next
   
End

Public Sub Form_Show()
   
   Try Resize_Grids()
   Vbox_Photo.width = lblInvoiceDate.Width 
   
End

Public Sub Form_Resize()
   
   Try Resize_Grids()
   gvwItemsBilled_MoveProperty
   
End
'

Public Sub HSplit_Main_Resize()
   
   Select Case TabStrip1.Index
      Case cTab_Invoices_Receipts
         Try Resize_Grids
   End Select
   
   bHSplit_Resized = True
   Settings["FRecordVisit/Tabstrip1_" & Str(TabStrip1.index) & ".HSplit_Main.Layout"] = Hsplit_Main.Layout
   
End

Public Sub gvwFeeScheduleItems_FillGrid()
   
   Dim FeeItem As Collection
   Dim num_patients As String = ""
   Dim x As Integer
   
   ' For Each FeeItem In ScheduledFeeItems
   For Each FeeItem In FilteredScheduledFeeItems   
      num_patients = ""
      If FeeItem!number_of_patients <> 0 Then
         num_patients = "/" & Str(FeeItem!number_of_patients)
      Endif
      Inc gvwFeeScheduleItems.rows.count
      gvwFeeScheduleItems.row = x
      gvwFeeScheduleItems[gvwFeeScheduleItems.row, 0].text = Trim(FeeItem!mbs_item & " " & FeeItem!ama_item & " " & FeeItem!user_item) & num_patients
      gvwFeeScheduleItems[gvwFeeScheduleItems.row, 1].text = FeeItem!descriptor_brief
      gvwFeeScheduleItems[gvwFeeScheduleItems.row, 1].WordWrap = True
      gvwFeeScheduleItems.Rows[gvwFeeScheduleItems.row].Height = -1
      Inc x
   Next
   If gvwFeeScheduleItems.rows.count Then
      With gvwFeeScheduleItems
         .SetFocus
         .row = 0
      End With
   Endif
   
End

Public Sub Resize_Grids()
   
   With gvwItemsBIlled
      .Columns[0].width = 60
      .Columns[1].width = gvwItemsBIlled.width - 720 '- 470
      .Columns[2].width = 60
      .Columns[3].width = 60
      .Columns[4].width = 200
      .Columns[5].width = 60
      .Columns[6].width = 150
      lblmeasure.text = "Invoice Total "
      lblPaymentLeft.width = gvwItemsBIlled.Columns[0].width + gvwItemsBIlled.Columns[1].width - lblmeasure.width
      lblPaymentTotal.width = lblmeasure.width + gvwItemsBIlled.Columns[3].width
      lblInvoiceOwing.width = lblPaymentTotal.Width
      lblInvoiceLeft.width = lblPaymentLeft.Width
      lblInvoiceRight.width = lblPaymentRight.Width
      With lblcol1
         .width = gvwItemsBIlled.Columns[0].Width
         .text = "Item"
      End With
      With lblcol2
         .width = gvwItemsBIlled.Columns[1].Width
         .text = "Brief Descriptor"
      End With
      With lblcol3
         .width = gvwItemsBIlled.Columns[2].Width
         .text = "Fee"
      End With
      With lblcol4
         .width = gvwItemsBIlled.Columns[3].Width
         .text = "Gap"
      End With
      With lblcol5
         .width = gvwItemsBIlled.Columns[4].Width
         .text = "Rate"
      End With
      With lblcol6
         .width = gvwItemsBIlled.Columns[5].Width
         .text = "GST"
      End With
      With lblcol7
         .width = gvwItemsBIlled.Columns[6].Width
         If Trim(lblInvoiceItems.text) = "Invoice Items" Then
            .text = ""
         Else
            .text = "Reason Not Paid"
         Endif
      End With
   End With
   
End

Public Sub Appointment_icons_Get_Picture(Appointment_Icons As Collection) As Collection
   '-----------------------------------------------------------------------------------------
   'Loads the actual picture of the appointment icon into the collection got from the backend
   '-----------------------------------------------------------------------------------------
   
   Dim Appointment_icon As Collection
   
   For Each Appointment_Icon In Appointment_Icons
      Appointment_Icon!picture = Picture.Load(Appointment_Icon!icon_path)
   Next
   Return Appointment_Icons
   
End

Public Sub Descriptors_Brief_Get()
   
   If Trim(txtFindItemNumber.text) = "" Then Return
   timer1.Stop
   With columnview1
      .Clear
      .Visible = False
   End With
   Descriptors_Brief = modBillingDBI.Descriptors_Brief_Get(Trim(txtFindItemNumber.text))
   If Descriptors_Brief.count Then
      For Each Descriptor_Brief In Descriptors_Brief
         columnview1.Add(Descriptor_Brief!pk, 0)
         columnview1[Descriptor_Brief!pk][0] = Descriptor_Brief!mbs_item
         columnview1[Descriptor_Brief!pk][1] = Descriptor_Brief!descriptor_brief
      Next
      With columnview1
         .Raise
         .Visible = True
      End With
   End If
   
End

Public Sub Patients_Get()
   '-------------------------------------------------------------------
   'Get patients ILIKE txtSearchInvoices
   'Note as this returns multiple lines if there are multiple addresses
   'keep only one instance of the patient
   '-------------------------------------------------------------------
   
   timer1.Stop
   If Trim(txtSearchAccountNames.text) = "" Then Return
   Inc Application.Busy
   patients = modContactsDBI.patients_get_firstname_surname(Trim(txtSearchAccountNames.text), chkIncludeDeceased.value) 'exclude decesased but can include a checkbox(could be looking at old accounts)
   patients.Remove("sql_in_english")
   patients = modUtil.Copy_Collection_Keyed_Sequentially(patients)
   Dec Application.Busy
   Patients_Display
   
End

Public Sub Patients_Display()
   '-------------------------------------------------------------------
   'Get patients ILIKE txtSearchInvoices
   'Note as this returns multiple lines if there are multiple addresses
   'keep only one instance of the patient
   '-------------------------------------------------------------------
   
   Dim last_fk_patient As Variant
   Dim x As Integer
   Dim iWidestPatientName As Integer
   Dim sFontHeight As Integer = gvwAccountNames.Font.Height
   Dim sPatientName As String
   
   With gvwAccountNames
      .Clear
      .Rows.count = 0
   End With
   If patients.count Then
      For Each patient In patients
         last_fk_patient = patient!fk_patient
         Inc gvwAccountNames.Rows.Count
         sPatientName = patient!wholename
         sPatientName = Replace(sPatientName, "Mrs", "")
         sPatientName = Replace(sPatientName, "Mr", "")
         sPatientName = Replace(sPatientName, "Miss", "")
         sPatientName = Replace(sPatientName, "Prof", "")  'fix me, just put firstname, surname in the view results
         sPatientName = Replace(sPatientName, "Master", "") 
         gvwAccountNames[x, 0].RichText = "<B>" & sPatientName & "</B>"
         gvwAccountNames[x, 0].Alignment = Align.TopLeft
         gvwAccountNames[x, 1].RichText = "<P>" & Format(patient!birthdate, "dd/mm/yyyy") & "<BR>"
         gvwAccountNames[x, 1].RichText &= patient!street1 & "<BR>" & patient!town & " " & patient!postcode & "</P"
         If patient!preferred_address = True Then
            gvwAccountNames[x, 1].RichText &= "<BR>*** Preferred Address ***"
         Endif
         gvwAccountNames.Rows[x].Height = sFontHeight * (5.0)   
         gvwAccountNames[x, 1].WordWrap = True
         gvwAccountNames.Height = -1
         lblMeasure.text = patient!wholename 
         iWidestPatientName = Max(lblMeasure.Width, iWidestPatientName)
         Inc x
      Next
      If gvwAccountNames.Rows.count Then 
         gvwAccountNames.Columns[0].width = iWidestPatientName
      End If     
      If patients.count = 1 Then
         sPatient_Collection_Key = 0
         fk_appointment = Null
         EditArea_Clear()
         Account_Patient_Display(True)
         txtSearchAccountNames_LostFocus()
      End If   
   Endif
   Dec Application.Busy
   
End

Public Sub Item_Number_Get_Fee_Levels_Fill_Invoice_Row(txt As String)
   '---------------------------------------------------------------------------------------------
   'This has passed to it number or text the user as typed in when biling an item number
   'eg may have typed in 23 or a string like 24/1 (multiple patient rule) or 
   'workcover eg WCO001
   'This sub:
   ' * works out what the scheduled fee would be For the item number(the rebate amount)
   ' * retrieves a collection of default fee levels the practice has set in the Fee Schedule tab
   '   for the various billing types as per the table:billing.lu_billing_types:
   ' "1";"AMA Fee"
   ' "2";"DVA (Non LMO rate)"
   ' "3";"DVA (LMO rate)"
   ' "4";"Health Care Card Concession"
   ' "5";"Pensioner Concession"
   ' "6";"Private Fee"
   ' "7";"TAC (Transport Accident Commission)"
   ' "8";"Schedule Fee"
   '
   ' * fills in the row of the grid with fee descriptor, billing level, amount
   ' * adds an area of need row if needed
   ' * calculates the payment totals
   '
   'A patient may have a default 'billing_level' eg. private or health care concession
   ' "1";"Bulk Bill"
   ' "2";"Private"
   ' "3";"Health Care Card Concession"
   ' "4";"Pensioner Concession"
   ' "5";"Medico-Legal"
   
   ' For example a patient may be bulk billed as either medicare or veteran (for some things) or both
   ' or a practice may bill privately at the AMA rate, or pripatientsvately at a concession rate
   '-------------------------------------------------------------------------------------------------
   Dim fk_lu_billing_type As Variant
   Dim bMissingBriefDescriptor As Boolean
   Dim billing_type As String
   Dim price As Variant
   Dim AreaOfNeed_Item As Collection
   Dim patient_age_in_years As Integer
   Dim sMsg As String
   Dim bEntitledVeteran As Boolean
   
   If txtFindItemNumber.text = "" Then Return                        'no item number to search for
   txtDescriptor.text = ""
   bExit = True
   If Not IsNull(form_billingcards.Veteran_Card_Type()) Then     'they must be an entitled veteran in some capacity
      bEntitledVeteran = True
      If form_billingcards.Veteran_Card_Type() = const.Veteran_Entitlement_Specific Then
         sMsg = "The Veteran is listed for specific entitlements only.\n\n"
         "Was the consultation for one of their listed entitlements?"
         If Message.Question(sMsg, "Yes", "No") = 2 Then
            bEntitledVeteran = False
            rbInvoiceToPatient.Value = True
            fk_lu_default_billing_level = const.Billing_Default_Level_Private
         End If
      Endif
   Endif
   If rbInvoiceToMedicare.Value = True Or rbInvoiceToVeterans.value = True Then
      fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill
   Endif
   Select Case fk_lu_default_billing_level
      Case const.Billing_Default_Level_BulkBill
         If rbInvoiceToVeterans.Value = True Then
            fk_lu_billing_type = const.Billingtype_DVA_LM0    'fixme in config file put in dvo lmo or non lmo rate
            billing_type = "DVA (LMO rate)"
         Else
            fk_lu_billing_type = const.Billingtype_Scheduled_Fee
            billing_type = "Schedule Fee"
         End If
      Case const.Billing_Default_Level_PensionerConcession
         fk_lu_billing_type = const.Billingtype_Pensioner_Concession
         billing_type = "Pensioner Concession"
      Case const.Billing_Default_Level_HealthCareCardConcession
         fk_lu_billing_type = const.Billingtype_Health_Care_Card_Concession
         billing_type = "Health Care Card Concession"
      Case const.Billing_Default_Level_Private
         fk_lu_billing_type = const.Billingtype_Private
         billing_type = "Private Fee"
      Case const.Billing_Default_Level_MedicoLegal
         fk_lu_billing_type = const.Billingtype_AMA
         billing_type = "AMA"
      Case Else 'is null
         fk_lu_billing_type = const.Billingtype_Private                         'default to private billing
         billing_type = "Private Fee"
   End Select
   txt = Trim(txt)
   Scheduled_Fee = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(txt, const.Billingtype_Scheduled_Fee)
   If IsNull(scheduled_fee) Then
      fk_lu_billing_type = const.Billingtype_Private  
      If rbInvoiceToOther.value = False Then    
         rbInvoiceToPatient.Value = True     'though sets this,  bInvoiceTo_Click() won't execute because bExit=True
      End If   
   Endif
   fees_for_an_item_numbers_billing_levels = modBillingDBI.Fees_Get_All_Levels_For_Item(txt) ', fk_lu_billing_type)
   If fees_for_an_item_numbers_billing_levels.count = 0 Then
      ' if fail and we have a non-patient payer - try workcover
      If textlabelPayer.text <> "" Then
         fees_for_an_item_numbers_billing_levels = modBillingDBI.Items_Get(txt, const.Billingtype_Workcover)
      Else
         fees_for_an_item_numbers_billing_levels = modBillingDBI.Items_Get(txt, const.Billingtype_Scheduled_Fee) ' try schedule fee
         If fees_for_an_item_numbers_billing_levels.count = 0 Then
            fees_for_an_item_numbers_billing_levels = modBillingDBI.Items_Get(txt, const.Billingtype_Private) ' try private
            If fees_for_an_item_numbers_billing_levels.count = 0 Then
               fees_for_an_item_numbers_billing_levels = modBillingDBI.Items_Get(txt, -1, 1) ' if all else fails, look for any billing level
            Endif
         Endif
      Endif
   End If
   If fees_for_an_item_numbers_billing_levels.count = 0 Then
      Message.title = "Fee Search"
      sMsg = "Item:" & txt & "\n\n"
      sMsg &= "The item number could not be found.\n\n"
      sMsg &= "Please check this in the Fee Schedule and try again"
      Message.Info(sMsg)
      gvwItemsBIlled[gvwItemsBIlled.row, 0].text = ""
      cell_text_gvwItemsBIlled = ""
      bExit = False
      selected_item_num_and_billing_level = Null
      Return
   Endif
   If Not IsNull(scheduled_fee) Then   
      If IsNull(Scheduled_Fee!descriptor_brief) Then
         Message.Title = "Missing Brief Descriptor"
         sMsg = "This item number has no brief descriptor and cannot be billed.\n\nYou should go to the Fee Schedule tab "
         "and correct the problem, also ensuring you have at least one other fee level e.g the private fee"
         Goto Invalid_Item_Number
         Return 
      End If  
      'check not a multiple fee rule
      If Scheduled_Fee!number_of_patients Then
         Message.Title = "Missing Item Number Data"
         sMsg = "This item number applies to one or more patients being seen at the same time, hence you will need to modify your item number.\n\n"
         sMsg &= "For example if you mean to apply this to one patient, you should type " & Str(txt) & "/1"
         
         If InStr(txt, "/") Then
            If Split(txt, "/", "", True).Count = 1 Then
               Message.Warning(sMsg)
               Goto Invalid_Item_Number
               Return
            End If 
         Else
            Goto Invalid_Item_Number
            Return
         End If   
      Endif
   End If   
   GridData.Add(fees_for_an_item_numbers_billing_levels, gvwItemsBIlled.row) 'keep all feel levels for the item on this row
   ' For Each item In items 'get the first item returned, don't care about others
   selected_item_num_and_billing_level = fees_for_an_item_numbers_billing_levels[fk_lu_billing_type]
   
   If IsNull(selected_item_num_and_billing_level) Then Try selected_item_num_and_billing_level = fees_for_an_item_numbers_billing_levels[6]  'private workcover
   If IsNull(selected_item_num_and_billing_level!descriptor_brief) Then 
      bMissingBriefDescriptor = True
   Endif
   If selected_item_num_and_billing_level!percentage_fee_rule Then
      selected_item_num_and_billing_level = Precentage_Fee_Rule_Adjust_Price(selected_item_num_and_billing_level)
   Endif
   price = Replace(selected_item_num_and_billing_level!price, "$", "")
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_BriefDescriptor].Text = selected_item_num_and_billing_level!descriptor_brief
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].Text = selected_item_num_and_billing_level!price
   
   If rbInvoiceToVeterans.value = True Or rbInvoiceToMedicare.value = True Then
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = "$0.00"
   Else
      If fk_lu_billing_type <> const.Billingtype_DVA_LM0 Or fk_lu_billing_type <> const.Billingtype_Scheduled_Fee Then
         Try gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = modUtil.Money_Format(Str(CFloat(Val(Replace(selected_item_num_and_billing_level!price, "$", ""))) - CFloat(Val(Replace(Scheduled_Fee!price, "$", "")))))
      Else
         gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = "$0.00"
      End If
   End If   
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].text = selected_item_num_and_billing_level!fee_type
   last_Fee_type = selected_item_num_and_billing_level!fee_type
   If Not IsNull(selected_item_num_and_billing_level!gst_rate) And selected_item_num_and_billing_level!gst_rate <> 0 Then 'FIX ME ?CONVERT BACKEND TO NULL IN THIS FIELD NOT ZERO.
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_gst_amount].Text = modUtil.Money_Format(modUtil.MoneyToFloat(price) / selected_item_num_and_billing_level!gst_rate)
   Endif
   bExit = False
   '-------------------------------------------------------------------------------------------------------
   'If the practice is in an area of need it attracts the 10091 item number
   'Need to work out if patient is a veteran and entitled
   'Also a child <16yrs could be being bulk billed whose parents are not covered by health cards or pension
   '-------------------------------------------------------------------------------------------------------
   If bAreaOfNeed Then
      If fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill And selected_item_num_and_billing_level!mbs_item <> "10991" Then
         'if child <12 months eg e.g 4m20d hence defaults to patient_age_in_years = 0
         If txtAge.text <> "" And InStr(txtAge.text, "y") Then patient_age_in_years = Val(Split(txtAge.text, "y")[0])
         If bEntitledVeteran Or patient_age_in_years < 16 Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Health_Care_Card Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Pensioner_concession_card Then
            AreaOfNeed_Item = Area_of_Need_Fees[fk_lu_billing_type]
            If Not IsNull(AreaOfNeed_Item) Then
               onrow_items = Min(gvwItemsBIlled.row + 1, 3)
               price = Replace(AreaOfNeed_Item!price, "$", "")
               gvwItemsBIlled.row = onrow_items
               gvwItemsBIlled_FillRow(price, AreaOfNeed_Item)
            Endif
         End If
      Endif
   Endif
   Invoice_Calculate_Total("Total Owing")
   EditArea_Notify_Data_Change(True)
   OnCol_Items = 0
   onrow_items = Min(onrow_items + 1, 3)
   With gvwItemsBIlled
      .Column = OnCol_Items
      .Row = onrow_items
      .SetFocus()
   End With
   current_gvwItemsBilled_Row = onrow_items
   HBox_InvoiceGrid.height = (gvwItemsBIlled.rows.count + 3) * gvwItemsBIlled.rows[0].height
   bExit = False
   Return
Invalid_Item_Number:
   Message.Warning(sMsg)
   bexit = False  
   gvwItemsBilled_Delete_Row()
   
End

Public Function Precentage_Fee_Rule_Adjust_Price(selected_item_num_and_billing_level As Collection) As Collection   
   'precentage fee rule = 100% for the first, 50% for the second, 25% for the third and subsequent?
   
   Dim x As Integer
   Dim price As String
   Dim occurence_of_item_count As Integer
   Dim mbs_item As String = selected_item_num_and_billing_level!mbs_item  
   
   price = Replace(selected_item_num_and_billing_level!price, "$", "")
   
   For x = 0 To gvwItemsBIlled.Rows.count - 1
      If gvwItemsBIlled[x, 0].text = mbs_item Then 
         Inc occurence_of_item_count
      Endif
   Next
   Select Case occurence_of_item_count 
      Case 1        'full fee is ok
         Return selected_item_num_and_billing_level
      Case 2        'need 1/2 fee
         selected_item_num_and_billing_level!price = modUtil.Money_Format(modUtil.MoneyToFloat(price) * 0.5)
         Print price 
      Case Else     'need 1/4 fee
         selected_item_num_and_billing_level!price = modUtil.Money_Format(modUtil.MoneyToFloat(price) * 0.25)
         
   End Select
   Return selected_item_num_and_billing_level

End

Public Sub gvwItemsBIlled_Add_Row()
   '--------------------------------------------------------
   'Add a row to the items billed grid
   'force the main split to enlarge so user can see all rows
   '--------------------------------------------------------
   
   Inc gvwItemsBIlled.Rows.count
   gvwItemsBIlled.row = gvwItemsBIlled.Rows.Max
   current_gvwItemsBilled_Row = gvwItemsBIlled.row
   HBox_InvoiceGrid.height = (gvwItemsBIlled.rows.count + 3) * gvwItemsBIlled.rows[0].height
   Vsplit_Main.layout = [Vsplit_Main.layout[0] + 20, VSplit_Main.layout[1] - 20]
   
End

Public Sub gvwItemsBIlled_FillRow(price As Float, item As Collection)
   '-------------------------------------------
   'Adds a row of data to the items billed grid
   '-------------------------------------------
   
   price = Replace(item!price, "$", "")
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].Text = item!mbs_item
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_BriefDescriptor].Text = item!descriptor_brief
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].Text = item!price
   If item!mbs_item <> "10991" Then
      Try gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = modUtil.Money_Format(Str(CFloat(Val(Replace(item!price, "$", ""))) - CFloat(Val(Replace(Scheduled_Fee!price, "$", "")))))
   Else
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = "$0.00"
   End If
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].text = item!fee_type
   last_Fee_type = item!fee_type
   If Not IsNull(item!gst_rate) And item!gst_rate <> 0 Then 'FIX ME ?CONVERT BACKEND TO NULL IN THIS FIELD NOT ZERO.
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_gst_amount].Text = modUtil.Money_Format(price / item!gst_rate)
   Endif
   
End

Public Sub columnview1_KeyPress()
   
   If key.code = key.return Then
      columnview1_DblClick
   End If
   
End

Public Sub columnview1_DblClick()
   
   columnview1.MoveCurrent()
   If Last.tag = "payer org" Then
      Organisation_Select()
      Return
   Endif
   If Last.tag = "payer person" Then
      Payer_Person_Select()
      Return
   Endif
   
   If Last.tag.tag = "something" Then
      
      Descriptor_Brief = Descriptors_Brief[columnview1.Item.key]
      If Not IsNull(Descriptor_Brief!mbs_item) Then
         gvwItemsBIlled[onrow_items, 0].text = Descriptor_Brief!mbs_item 'double done in Item_Number_Get_Fee_Levels_Fill_Invoice_Row, prototype only fixme
      End If
      If Not IsNull(Descriptor_Brief!ama_item) Then
         gvwItemsBIlled[onrow_items, 0].text = Descriptor_Brief!ama_item
      End If
      If Not IsNull(Descriptor_Brief!user_item) Then
         gvwItemsBIlled[onrow_items, 0].text = Descriptor_Brief!user_item
      End If
      Item_Number_Get_Fee_Levels_Fill_Invoice_Row(gvwItemsBIlled[onrow_items, 0].text) 'duplication in a way 'see note in subroutine
      txtFindItemNumber.Visible = False
      gvwItemsBIlled.SetFocus()
   Endif
   
End

Public Sub mnuPayments_Click()
   '----------------------------------------------------------------
   'This is the popup menu over the gvwpayments in the editing area
   '---------------------------------------------------------------
   
   Select Case Last.tag
      Case "add payment"
         gvwPayments_Add_Row
      Case "delete payment"
         gvwPayments_Delete_Row
      Case "delete all payments"
         gvwPayments.Clear
         Invoice_Calculate_Amount_Paid
         txtPayment.text = ""
   End Select
Catch
   Return
   
End

Public Sub mnuItemsBilled_Click()
   '------------------------------------------------------------------
   'This is the popup menu over the gvwItemsBilled in the editing area
   '------------------------------------------------------------------
   
   Select Case Last.tag
      Case "delete item"
         gvwItemsBilled_Delete_Row()
         gvwPayments_Clear
      Case "delete all items"
         gvwItemsBIlled_Clear()
         Invoice_Calculate_Total("Total Owing")
         cell_text_gvwItemsBIlled = ""
         gvwPayments_Clear
      Case "add item"
         If Last_Billing_Row_Used() >= 3 Then
            gvwItemsBIlled_Add_Row
         End If
      Case "medicare"
         
   End Select
Catch
   Log.PanicMsg(Error.Text, Error.Backtrace)
   
End

Public Sub mnuFeeSchedule_Click()
   
   Select Case Last.tag
      Case "change font"
         modUtilGUI.Columnview_SetFont(columnview99, "FRecordVisit_Billing_FeeSchedule")
      Case "edit item number"
         Fee_Schedule_Edit
      Case "delete item number"
         modUtilGUI.NotImplemented("Deleting an existing item number")
   End Select
Catch
   Log.PanicMsg(Error.Text, Error.Backtrace)
   
End

Public Sub Invoice_Edit()
   'When user  selects an invoice from the cvwItemsTodayOrUnpaid in the sub
   'cvwItemsTodayOrUnpaid_Select() sub
   'the data is loaded into the edit area and fk_invoice set
   'the actual invoice collection is also set to that rows data
   
   Dim item_billed As Collection
   Dim grid_row As Integer
   
   If invoice!paid Then
      Message.Info("You cannot edit a paid invoice")
      Return 
   Endif
   lblEditAreaHeading.text = "EDIT INVOICE"
   VBox_EditArea_Inner.Enabled = True
   bPayingInvoice = False  
   Hbox_InvoiceGrid.Enabled = True
   VBox_EditArea_And_Grids.Enabled = True
   gvwItemsBIlled.Rows.count = 4 
   gvwItemsBIlled.Enabled = True
   
   With lblInvoiceTotalAndPaid
      .text = ""
      .Visible = False  
   End With
   If Not IsNull(invoice!fk_lu_bulk_billing_type) Then
      If invoice!fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare Then
         bExit = True
         rbInvoiceToMedicare.value = True 
         bExit = False  
      Endif
   Endif
   If Not IsNull(invoice!fk_appointment) Then 'was it linked to an appointment?
      fk_appointment = invoice!fk_appointment 
   Endif
   If Not IsNull(invoice!fk_payer_branch) Then
      fk_payer_branch = invoice!fk_payer_branch
   Endif
   If Not IsNull(invoice!fk_payer_person) Then
      fk_payer_person = invoice!fk_payer_person
   Endif
   ' Now that we are going to edit an item, a fee level could be changed
   ' so we need to fill the gridData collection for each item number
   For Each item_billed In items_billed
      fees_for_an_item_numbers_billing_levels = modBillingDBI.Fees_Get_All_Levels_For_Item(item_billed!common_item)
      GridData.Add(fees_for_an_item_numbers_billing_levels, grid_row)
      Inc grid_row
   Next
   
End

Public Sub mnuItemsTodayOrUnpaid_Click()
   '--------------------------------------------------------------------------------------
   'this is the popup menu over the the invoices for the account holder, usually a patient
   '--------------------------------------------------------------------------------------
   
   Dim item_billed As Collection
   Dim latex As String
   Dim form_sdd As FSameDayDelete
   Dim pdf_path As String
   
   cvwItemsTodayOrUnpaid.MoveCurrent()
   Item_Billed = Items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]
   Select Case Last.tag
      Case "edit"
         Invoice_Edit
      Case "view as pdf"
         If Not IsNull(Item_Billed!latex) Then
            pdf_path = modPrinting.Latex_To_PDF(Item_Billed!latex)
            modArchiveDocumentsDBI.Launch_External_PDF_Viewer(pdf_path)
         Else
            Message.Info("Sorry, there is  no LaTex definition for this invoice")
         End If   
      Case "invoice delete"
         If Message.Question("Are you sure you want to delete this invoice.\n\nThis Cannot be undone.", "Yes", "Cancel") = 2 Then Return 
         modBillingDBI.Delete_Invoice(Item_Billed!fk_invoice)   'commit is in the sub
         If item_billed!online And If Day(item_billed!date_invoiced) = Day(Now()) And If Month(item_billed!date_invoiced) = Month(Now()) And If Year(item_billed!date_invoiced) = Year(Now()) Then
            form_sdd = New FSameDayDelete
            form_sdd.SetInvoicePK(item_billed!fk_invoice)
            form_sdd.Show()
         Endif
         If Not IsNull(Item_Billed!fk_appointment) Then
            modDBConnect.update("clerical.bookings", Null, ["pk": Item_Billed!fk_appointment, "invoiced": False])
            modDBConnect.CommitTrans
            UnBilled_Appointments_Reload
         End If   
         Items_Today_Or_Unpaid_Reload
         Invoice_New()
      Case "invoice mark unpaid"
         ' If Message.Question("Mark this invoice as unpaid?", "Yes", "No") = 2 Then Return
         ' modDBConnect.update("billing.invoices", Null, ["pk": Item_Billed!fk_invoice, "paid": False])
         ' 
         ' modDBConnect.CommitTrans()
         ' ' Items_Today_Or_Unpaid = Reload_Billed_Items(cvwItemsTodayOrUnpaid, Items_Today_Or_Unpaid)
         ' Items_Today_Or_Unpaid_Reload
         ' lblInvoiceTotalAndPaid.text = ""
         ' lblInvoiceTotalAndPaid.visible = False   
         ' If cvwItemsTodayOrUnpaid.count Then
         '    cvwItemsTodayOrUnpaid.MoveFirst
         '    cvwItemsTodayOrUnpaid.Item.Selected = True  'should trigger loading the edit area
         ' Endif
      Case "reprint invoice"
         If IsNull(item_billed!latex) And If item_billed!online Then
            latex = modBillingDBI.Generate_Online_Latex(item_billed!fk_invoice)
            modDBConnect.CommitTrans()
         Else
            latex = item_billed!latex
         Endif
         If Not IsNull(latex) Then modPrinting.Print_latex(latex)
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwItemsTodayOrUnpaid, "FRecordVisit")
      Case "print account statement"
         Accounts_Print_Statement
   End Select
   'Catch
   '' Log.ErrorMsg(Error.text & " " & Error.where)
   Return
   
End

Public Sub cvwItemsTodayOrUnpaid_Menu()
   
   If cvwItemsTodayOrUnpaid.count Then
      mnuItemsTodayOrUnpaid.Popup()
   End If
   
End

Public Sub Invoice_Calculate_Total(sTotalType As String)
   '----------------------------------------------------------------
   'Calculates the total amount of all items billed for this invoice
   '----------------------------------------------------------------
   
   Dim x As Integer
   
   Invoice_total = 0
   Amount_paid = 0
   For x = 0 To gvwItemsBIlled.Rows.Count - 1
      If gvwItemsBIlled[x, cGridColumnItem_Fee].text = "" Then Break
      Invoice_total = Invoice_total + CFloat(Val(Replace(gvwItemsBIlled[x, cGridColumnItem_Fee].text, "$", "")))
      If gvwItemsBIlled[x, cGridColumnItem_gst_amount].text <> "" Then
         Invoice_total = Invoice_total + CFloat(Val(Replace(gvwItemsBIlled[x, cGridColumnItem_gst_amount].text, "$", "")))
      Endif
   Next
   If invoice_total <> 0 Then gvwPayments.Enabled = True
   HBox_InvoiceGrid.enabled = True
   With lblInvoiceOwing
      .text = sTotalType & "  " & modUtil.Money_Format(Invoice_total - amount_paid)
      .Font.Bold = False
      .Foreground = Color.Black
      .Border = Border.Plain
   End With
   
End

Public Function Money_Format(money As Variant) As String
   
   Dim s2 As String[]
   
   If money = "" Then Return
   If TypeOf(money) = gb.Float Or If TypeOf(money) = gb.Single Then
      Return "$" & Format(money, "#.00")
   Else
      s2 = Split(money, ".")
      If Left$(s2[0], 1) <> "$" Then
         s2[0] = "$" & s2[0]
      Endif
      If s2.Length = 1 Then
         Return s2[0] & ".00"
      Else
         If Len(s2[1]) = 1 Then
            s2[1] = s2[1] & "0"
         Endif
         If Len(s2[1]) = 0 Then
            s2[1] = "00"
         Endif
         If Len(s2[1]) > 2 Then
            s2[1] = Left$(s2[1], 2)
         Endif
         Return s2[0] & "." & s2[1]
      Endif
   Endif
   
End

Public Function Invoice_Calculate_Amount_Paid() As Float
   '-----------------------------------------------------------------
   'Calculates the total amount of all payments made for this invoice
   'returns the total
   '------------------------------------------------------------------
   
   Dim x As Integer
   Dim total As Float = 0
   Dim amount_paid As Float
   
   For x = 0 To gvwPayments.Rows.Max
      If gvwPayments[x, cGridColumnPayments_Amount].text = "" Then 
         Break
      Else
         total += modUtil.MoneyToFloat(gvwPayments[x, cGridColumnPayments_Amount].text)
      End If   
   Next
   With lblPaymentTotal
      .text = "Payment Total  " & modUtil.Money_Format(total)
      .Font.Bold = False
      .Foreground = Color.Black
      .Border = Border.Plain
   End With
   If invoice_total = total Then
      tbUniversal.text = "Print Receipt"
      tbUniversal.Enabled = True
      tbSaveNoPrint.Enabled = True
      tbSaveNoPrint.text = "Receipt No Print"
   End If
   If total <> 0 And total < invoice_total Then
      tbUniversal.text = "Print Account"
      tbUniversal.Enabled = True
      tbSaveNoPrint.Enabled = True
      tbSaveNoPrint.Text = "Account No Print"
   Endif
   Return total 
   
End

Public Sub Online_Click()
   
   If rbOnline_Yes.Value = True Then
      If rbInvoiceToOther.Value = True Then
         cbSendClaimantAddress.Visible = True
         Return
      Endif
   Endif
   cbSendClaimantAddress.Visible = False
   
End

Public Sub rbInvoiceTo_Click()
   '-------------------------------------------------------------------
   ' If user changes billing level, change data in grid appropriately
   ' loop variable must be local but set gvwItemsBIlled = row
   ' so that when cmbFeeType.index = cmbFeeType.Find(Last.tag) triggers
   ' cmbFeeType_Click we are on the correct row in cmbFeeType_Click()
   '-------------------------------------------------------------------
   
   Dim row As Integer
   
   If bExit Then Return
   textlabelPayer.text = ""
   VBox_Workcover_Claims.Visible = False
   cmbFeeType.index = -1
   Select Case Lower(Last.tag)
      Case "private fee"
         iLast_Invoice_Type = cLast_Invoice_Type_Private
      Case "schedule fee"
         iLast_Invoice_Type = cLast_Invoice_Type_Medicare
      Case "veteran"
         iLast_Invoice_Type = cLast_Invoice_Type_Veteran
      Case "other"
         iLast_Invoice_Type = cLast_Invoice_Type_Other
   End Select
   cbSendClaimantAddress.Visible = False
   If rbInvoiceToPatient.value = True Then
      If form_billingcards.Billing_Level_Get() <> const.Billingtype_Health_Care_Card_Concession Or form_billingcards.Billing_Level_Get() <> const.Billingtype_Pensioner_Concession Then
         fk_lu_default_billing_level = const.Billing_Default_Level_Private
         tbUniversal.text = "Print Account"
      Endif
   Endif
   If rbInvoiceToOther.value = True Then
      fk_lu_default_billing_level = const.Billing_Default_Level_Private
      tbUniversal.text = "Print Account"
      txtFindPayer.SetFocus()
      If rbOnline_Yes.Value = True Then
         cbSendClaimantAddress.Visible = True
      Endif
   Endif
   If rbInvoiceToMedicare.Value = True Then
      tbUniversal.text = "Medicare Voucher"
   Endif
   If rbInvoiceToVeterans.Value = True Then
      tbUniversal.text = "Veterans Voucher"
   Endif
   gvwItemsBIlled_Set_Fee_Level(Last.tag)
   bexit = True                      'prevent recursion into this sub
   gvwItemsBIlled_Calculate_Fees
   bexit = False
   
End

Public Sub gvwItemsBIlled_Calculate_Fees()
   '--------------------------------------------------------------------------------------------------
   'This event is raised by either user clicking on the combo in the billing grid
   ' Or medicare, private or veterans option buttons next to the Invoice To label.
   'Change the fee type re-calculate the columns
   're - calculate the gap payment or set to zero If this is veterans or medicare patyment patient
   '
   'Each row in the grid has a corresponding collection of feel levels in gridData[gvwItemsBIlled.row]
   ' loaded in the Item_Number_Get_Fee_Levels_Fill_Invoice_Row() sub which is a collection of collections for each fee level,
   ' usually eg 5 or 6 which correspond to the backend table billing.lu_billing_type contents:
   '
   ' 1;"AMA Fee"
   ' 2;"DVA (Non LMO rate)"
   ' 3;"DVA (LMO rate)"
   ' 4;"Health Care Card Concession"
   ' 5;"Pensioner Concession"
   ' 6;"Private Fee"
   ' 7;"TAC (Transport Accident Commission)"
   ' 8;"Schedule Fee"
   '
   ' This is a sample of gridData[0][5], this is for pensioner concession rate at my surgery
   ' and in the gui would correspond to the first row in a grid already populated with data.
   ' The keys and info will be different at your site:
   '
   ' Key                          Value
   ' pk                           5
   ' mbs_item                     23
   ' user_item                    null
   ' ama_item                     null
   ' descriptor                   professional attendance at......
   ' descriptor_brief             level B consult at Surgery
   ' gst_rate                     0
   ' number_of_patients           0
   ' fk_fee_schedule              4070
   ' fk_price                     6105
   ' price                        $52.05
   ' fk_lu_billing_type           5
   ' notes
   ' fee_type                     Pensioner Conscession
   '
   '--------------------------------------------------------------------------------------------------
   
   Dim gap_payment As Float
   Dim row As Integer
   Dim item_number As String                           ' for readability the item number
   Dim fee_type As String                              ' for readability the type of fee.g private or schedule fee
   Dim fk_lu_billing_type As Variant                   ' for readability the key to lu_billing_type
   Dim the_fees As Collection
   Dim item As Collection
   Dim scheduled_fee As String
   
   For row = 0 To gvwItemsBIlled.Rows.Max                                                        ' for each row in the fees grid, we start with 4 by default
      gvwItemsBIlled.row = row
      If gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].text <> "" Then          ' if there is text in the grid item number column
         item_number = gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].text       ' for readability this is the item number
         fee_type = gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].Text             ' for readability this is the fee type
         If fee_type = "other" Then
            fk_lu_billing_type = const.Billingtype_Private
         Else
            fk_lu_billing_type = Billing_Type_Get_Pk(fee_type)                                      ' for readability this is the key to lu_billing_type
         Endif
         If GridData.Exist(row) Then                                                             ' won't exist for area of need rows
            If GridData[gvwItemsBIlled.Row].Exist(fk_lu_billing_type) Then                          ' if the GridData[row][fk_lu_billing_type] collection exists
               gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text = GridData[gvwItemsBIlled.row][fk_lu_billing_type]!price  'set the price in the item fee col
               Try scheduled_fee = GridData[gvwItemsBIlled.row][fk_lu_billing_type_scheduled_Fee]!price ' and work out the medicare scheduled fee , may not exist
               If gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text = "$0.00" Then       ' delete the row if no fee
                  gvwItemsBIlled_Delete_Row()
               Else                                                                                 'otherwise work out the gap payment = current price - the scheduled fee
                  gap_payment = modUtil.MoneyToFloat(gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text) - modUtil.MoneyToFloat(scheduled_fee)
                  If gap_payment = 0 Or rbInvoiceToVeterans.value = True Or rbInvoiceToMedicare.value = True Then     ' If this is nothing  $0.00 then
                     gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].text = "$0.0"                            ' set the gap to $0.00
                  Else                                                                                                ' otherwise
                     gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].text = modUtil.Money_Format(gap_payment) ' display the gap $
                  End If
               End If
            Else                                                                                    ' if we don't have collection data for this fee level
               Message.info("No fees exist for the billing level you selected")                     ' e.g user's site may not have put it in
               gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].Text = last_Fee_type     ' return the grid type to the last one used
               Return
            End If   
         End If                                                                                       ' an area of need row  
      End If
   Next      
   If InStr(fee_type, "Private") Or InStr(fee_type, "AMA") Or InStr(fee_type, "Concession") Or InStr(fee_type, "TAC") Then
      If bAreaOfNeed = True Then
         gvwItemsBIlled_Area_Of_Need_Remove
      End If
   Endif
   If fee_type = "Schedule Fee" And last_Fee_type <> "Schedule Fee" Then
      If bAreaOfNeed = True Then
         gvwItemsBIlled_Area_Of_Need_Add
      End If
   Endif
   last_Fee_Type = fee_type
   Invoice_Calculate_Total("Total Owing")
   
End

Public Sub timer1_Timer()
   '-----------------------------------------------------------------------
   ' How this works for example
   ' EditArea_TextBox_GotFocus()   - enables the timer
   '                               - turns on the timer
   ' iTimer_Search_Mode            - set to  cTimer_SearchMode_Patient
   '
   ' EditArea_Textbox_KeyRelease() - zeros timer_count to 0
   '                               - when user stops typing timer_count > 3
   '                                 and the search starts
   ' Whichever routine is searching eg Patients_Get() - stops timer
   ' VBox_PatientsList_Leave() - disables and turns off timer
   ' Note that EditArea_TextBox_LostFocus() is not used for this
   ' because it is a unreliable event - does not always trigger
   ' depends on which control after the textbox receives focus!
   ' ----------------------------------------------------------------------
   
   Inc timer_count
   If timer_count > 3 Then
      Select Case iTimer_Search_Mode
         Case cTimer_SearchMode_Patient
            Patients_Get
         Case cTimer_SearchMode_Descriptor
            Descriptors_Brief_Get
         Case cTimer_SearchMode_Payer
            Payer_Search()
         Case cTimer_SearchMode_FeeSchedule
            Scheduled_Fees_Search
      End Select
   Endif
   
End

Public Sub Billing_Defaults_Save()
   '-----------------------------------------------------------------
   'Save the billing defaults from the embedded FPatientBillingCards
   'Updating the collection in use appropriately
   '-----------------------------------------------------------------
   
   Dim patient_billing_data As New CRow
   
   If Not form_billingcards.Valid_Data() Then Return
   patient_billing_data.put_unchanged(fk_patient, "fk_patient")
   If IsNull(form_billingcards.Responsible_Payer_Get_fk_Person()) Then
      patient_billing_data!fk_payer_person = Null
   Else
      patient_billing_data!fk_payer_person = form_billingcards.Responsible_Payer_Get_fk_person()
   Endif
   patient_billing_data!medicare_number = form_billingcards.Medicare_Number()
   patient_billing_data!medicare_ref_number = form_billingcards.Medicare_Reference_number()
   patient_billing_data!medicare_expiry_date = modUtil.Medicare_Create_Expiry_date(form_billingcards.Medicare_Card_Expiry_Date())
   patient_billing_data!ihi = form_billingcards.Patient_IndividualHealthIdentifier()  'fixme put in ?date for last updated.
   patient_billing_data!pcehr_consent = form_billingcards.PCEHR_Consent()
   patient_billing_data!veteran_number = form_billingcards.Veteran_Card_Number()
   If patient_billing_data!veteran_number <> "" Then
      patient_billing_data!fk_lu_veteran_card_type = form_billingcards.Veteran_Card_Type()
      patient_billing_data!veteran_specific_condition = form_billingcards.veteran_specific_condition()
   Else
      patient_billing_data!fk_lu_veteran_card_type = Null
      patient_billing_data!veteran_specific_condition = Null
   End If
   patient_billing_data!concession_card_number = form_billingcards.Concession_Card_Number()
   If patient_billing_data!concession_card_number <> "" Then
      patient_billing_data!concession_card_expiry_date = form_billingcards.Concession_Card_Expiry_Date()
      patient_billing_data!fk_lu_centrelink_card_type = form_billingcards.Centrelink_Card_Type()
   Else
      patient_billing_data!concession_card_expiry_date = Null
      patient_billing_data!fk_lu_centrelink_card_type = Null
   Endif
   patient_billing_data!fk_lu_default_billing_level = form_billingcards.Billing_level_Get()
   patient_billing_data!fk_lu_private_health_fund = form_billingcards.Private_Health_Fund()
   If patient_billing_data!fk_lu_private_health_fund <> const.PrivateHealthFund_None Then
      patient_billing_data!private_insurance = True
   Else
      patient_billing_data!private_insurance = False
   Endif
   patient_billing_data!nursing_home_resident = form_billingcards.Nursing_home_resident()
   patient_billing_data!fk_doctor = form_billingcards.Preferred_Doctor()
   If Not IsNull(form_billingcards.fk_patient_pharmacy_get()) Then    'get pharmacy stuff if it exists
      patient_billing_data!fk_branch_pharmacy = form_billingcards.fk_patient_pharmacy_get()
   Else
      patient_billing_data!fk_branch_pharmacy = Null
   End If
   If form_billingcards.patient_pharmacy_memo_get() <> "" Then
      patient_billing_data!memo_for_pharmacy = form_billingcards.patient_pharmacy_memo_get()
   Else
      patient_billing_data!memo_for_pharmacy = Null
   Endif
   patient_billing_data!uses_webster_pack = form_billingcards.webster_pack_get()
   patient_billing_data.Save("clerical.data_patients", "fk_patient")
   form_billingcards.Contacts_Save()
   modDBConnect.CommitTrans()
   '-----------------------------------------------------------------------------------
   'Update the current patient collection by re-loading it from the backend
   'Insert it back into the appropriate spot in its collection
   'First get the correct key for either patients or unbilled_consultations collection
   '-----------------------------------------------------------------------------------
   If Not IsNull(patient) Then 
      If bSearchingAccounts Then
         patients[gvwAccountNames.row] = modContactsDBI.Patient_Get_Using_PK(patients[gvwAccountNames.row]!fk_patient)
         patient = patients[gvwAccountNames.row]
      Else
         Unbilled_Consultations[sPatient_Collection_Key] = modBillingDBI.Consultation_Ubilled_Get(fk_appointment)
         patient = Unbilled_Consultations[sPatient_Collection_Key]
      Endif
      If IsNull(patient!fk_payer_person) Then
         textlabelPayer.text = ""
      Else
         Try Payer_Get(Patient)     
      Endif
   Endif
   form_billingcards.VBox_Notify_Data_Changed.Padding = 0
   '
   
End

Public Function Billing_Defaults_Valid() As Boolean
   '--------------------------------------------------------------------------
   'Validates dates in the embedded form of patients card and billing defaults
   'returns true if ok
   '--------------------------------------------------------------------------
   
   If form_billingcards.txtMedicareCardExpiryDate.text <> "" Then              'only validate if user has entered something
      If Not IsDate(modUtil.Medicare_Create_Expiry_date(form_billingcards.txtMedicareCardExpiryDate.text)) Then
         form_billingcards.txtMedicareCardExpiryDate.SetFocus()
         Return
      Endif
   Endif
   If form_billingcards.txtConcessionExpiryDate.text <> "" Then                 'only validate if user has entered something
      If Not IsDate(form_billingcards.txtConcessionExpiryDate.text) Then
         form_billingcards.txtConcessionExpiryDate.SetFocus()
         Return
      Endif
   Endif
   Return True
   
End

Public Sub MainToolbar_Click()
   
   Dim sCardType As String
   
   pnlToolButtons.Enabled = False
   Select Last.tag
      Case "save billing defaults"
         Billing_Defaults_Save()
      Case "new invoice"
         Invoice_New()
      Case "new receipt"
         gvwItemsBIlled_Clear()
      Case "print voucher"
         'medicare/veterans vouchers never paid on the day, currently only do medicare
         If Not IsNull(patient) Then
            If IsNull(patient!medicare_number) And IsNull(patient!veteran_number) Then
               sCardType = "medicare"
               Goto Missing_CardNumber
            Endif
            If rbInvoiceToVeterans.value = True And IsNull(patient!veteran_number) Then
               sCardType = "veteran"
               Goto Missing_CardNumber
            Endif
         Endif
         Save(bBulkBill_Yes, bPrint_Yes)
      Case "print receipt"
         Save(bBulkBill_No, bPrint_Yes)
         
      Case "receipt no print"
         Save(bBulkBill_No, bPrint_No)
         
      Case "print account"
         Save(bBulkBill_No, bPrint_Yes)
   End Select
   pnlToolButtons.Enabled = True
   Return
   
Missing_CardNumber:
   Message.title = modUtil.Ucase_Word_First_Letter(sCardType) & " Numbers "
   Message.Info("This patient's " & sCardType & " number is not recorded.\n\nPlease update their record before proceeding.")
   pnlToolButtons.Enabled = True
   Return
   
End

Public Sub Invoice_New()
   '---------------------------------------------
   'patient loaded either from the unbilled appointment list
   'Or searching via accounts
   '---------------------------------------------
   
   bexit = True
   Unbilled_consultation = Null                 'the invoice is not being raised from appointment list
   With gvwItemsBIlled
      .Clear                    'clear the grid the user will type in the item numbers
      .Enabled = True
      .Rows.count = 4
      .row = 0
   End With
   lblcol7.text = ""                            'in payment mode this says "Reason Not Paid"
   lblInvoiceItems.text = " Invoice Items"
   item_flags = New Collection
   tbSaveNoPrint.Enabled = True                 'new invoice can be saved (either paid/unpaid) without printing
   lblEditAreaHeading.text = "NEW INVOICE"
   bPayingInvoice = False
   fk_invoice = Null
   invoice = New Crow
   gvwPayments.clear
   lblInvoiceOwing.text = ""
   lblPaymentTotal.text = ""
   EditArea_Notify_Data_Change(False)
   Hbox_InvoiceGrid.Enabled = True
   With txtDate
      .ReadOnly = False
      .text = Format(Now, "dd/mm/yyyy")
   End With
   VBox_EditArea_Inner.Enabled = True
   VBox_EditArea_And_Grids.Enabled = True
   gvwPayments.Enabled = False   
   rbOnline_Yes.Visible = True
   rbOnline_No.Visible = True
   lblOnlineStatus.text = ""
   HBox_InvoiceGrid.Visible = True 
   cvwItemsTodayOrUnpaid.UnselectAll() 
   bExit = False
   
End

Public Function Fill_Columnview(CVW As Columnview, coll As Collection, Optional bFirstLoad As Boolean = False) As Collection
   '------------------------------------------------------------------------------------------------------
   ' A generic routine used to display all previous items billed for the patient
   ' E.g a single row could be Item 23 standard consult etc
   ' if more than 1 item per invoice, only display name/dr/date once
   ' coll = items_Billed_or_unpaid if user details loaded into the
   '        edit area
   ' coll = items_Billed if viewing the account_history
   ' If this is the first time the columnview is filled on the Accounts History Tab
   ' then fill the payer combo with unique names
   ' sub is called by  
   ' txtFilterDescriptor_Change   - this textbox is on the Accounts tab showing patients account history
   ' Account_History_Show         - on the Accounts tab to show the patients account history
   ' Items_Today_Or_Unpaid_Reload - on the main billing screen - shows everything invoiced
   '                                today + those which are unpaid
   '-------------------------------------------------------------------------------------------------------
   
   Dim item As String
   Dim fk_last_invoice As Variant
   Dim total_due As Float
   Dim amount_owing As Float
   Dim monies As Variant[]
   Dim payment As Collection
   Dim items_on_invoice As Integer
   Dim invoice_total As Float
   Dim invoice_amount_paid As Float
   Dim x As Integer
   Dim item_billed As Collection
   Dim bSkipRow As Boolean
   Dim bFirstPaymentMethod As Boolean 
   
   If IsNull(coll) Then Return 'shouldn't happen but looking for a bug here
   CVW.Clear
   For Each Item_Billed In coll
      If Trim(txtFilterDescriptor.text) <> "" And CVW.Name = "cvwAccountHistory" Then              ' ?user trying to filter collection on brief descriptor in account history tab
         If InStr(Lower(Item_Billed!descriptor_brief), Lower(Trim(txtFilterDescriptor.text))) Then ' next brief descriptor matches text
            bSkipRow = False                                                                          ' display in the columnview
         Else                                                                                      ' otherwise
            bSkipRow = True                                                                           ' don't
         Endif
      Else                                                                                         ' no filtering?
         bSkipRow = False                                                                             ' don't skip
      End If
      If bSkipRow = False Then
         CVW.Add(x, 0)
         If fk_last_invoice <> Item_Billed!fk_invoice Then
            items_on_invoice = 1
            bFirstPaymentMethod = True    
            CVW[x][grid_col_firstname] = Split(Item_Billed!patient_firstname, " ")[0] & "  "
            CVW[x][grid_col_seen_by] = Item_Billed!staff_provided_service_wholename & "  "
            CVW[x][grid_col_branch] = Item_Billed!branch & "  "
            CVW[x][grid_col_visit_date] = Format(Item_Billed!visit_date, "dd/mm/yyyy") & "  "
            CVW[x][grid_col_total_bill] = modUtil.Money_Format(Item_Billed!total_bill) & "  "
            CVW[x][grid_col_total_paid] = modUtil.Money_Format(Item_Billed!total_paid) & "  "
            If item_Billed!paid Then
               If item_billed!payments.count Then
                  For Each payment In item_billed!payments
                     If bFirstPaymentMethod Then 
                        CVW[x][grid_col_payment_type] &= payment!payment_method
                        bFirstPaymentMethod = False   
                     Else
                        If Not InStr(CVW[x][grid_col_payment_type], payment!payment_method) Then
                           CVW[x][grid_col_payment_type] &= "/" & payment!payment_method  
                        End If   
                     End If   
                  Next
               Endif
            Else
               CVW[x][grid_col_payment_type] = "            "
            Endif
            CVW[x][grid_col_amount_due] = modUtil.Money_Format(Item_Billed!due) & "  "
            CVW[x][grid_col_notes] = Item_Billed!notes
         Else
            CVW[x][grid_col_firstname] = ""
            CVW[x][grid_col_visit_date] = ""
            If Not IsNull(item_Billed!reason_code_description) Then
               CVW[x][grid_col_payment_type] = item_Billed!reason_code_description
            Endif
            
            Inc items_on_invoice
         End If
         If Not IsNull(Item_Billed!mbs_item) Then item = Item_Billed!mbs_item
         If Not IsNull(Item_Billed!ama_item) Then item = Item_Billed!ama_item
         If Not IsNull(Item_Billed!user_item) Then item = Item_Billed!user_item
         If Item_Billed!number_of_patients <> 0 Then
            item &= "/" & Str(item_Billed!number_of_patients)
         Endif
         CVW[x][grid_col_item] = item & "  "
         CVW[x][grid_col_descriptor] = Item_Billed!descriptor_brief & "  "
         '------------------------------
         'work out who the invoice is to
         '------------------------------
         If Not IsNull(Item_Billed!fk_lu_bulk_billing_type) Then
            If Item_Billed!fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare Then
               CVW[x][grid_col_account_to] = "Medicare    "
            Else
               CVW[x][grid_col_account_to] = "Veterans    "
            Endif
         Endif
         If Not IsNull(Item_Billed!account_to_name) Then
            CVW[x][grid_col_account_to] = Item_Billed!account_to_name & "  "
         End If   
         If CVW[x][grid_col_account_to] = "" Then 
            CVW[x][grid_col_account_to] = "Patient"
         Endif
         CVW[x][grid_col_amount] = Item_Billed!amount & "  "
         If IsNull(Item_Billed!amount_gst) Then
            CVW[x][grid_col_amount_gst] = "          "
         Else
            CVW[x][grid_col_amount_gst] = Item_Billed!amount_gst & "  "
         Endif
         fk_last_invoice = Item_Billed!fk_invoice
         If bFirstLoad Then
            If cmbInvoiceToFilter.Find(CVW[x][grid_col_account_to]) = -1 Then 
               cmbInvoiceToFilter.Add(CVW[x][grid_col_account_to])
            Endif
         Endif
         Inc x
      End If
   Next
   lblmeasure.font = CVW.Font
   modUtilGUI.Columnview_Columns_Set_Size(CVW, lblmeasure)
   Return coll
   
End

Public Sub cvwItemsTodayOrUnpaid_Select()
   '-------------------------------------------------------------------------------------------
   'cvwItemsBilled:This is the list of items on invoices which have been billed to the
   'patient and already saved - either accounts or receipts for visits
   'Items in this list may be single - ie only one per invoice or multiple - many on an invoice
   'If they click on a row without the patient name showing on the list - then that row will be
   'an item one a multi-item invoice. Move back To the row with the patient's name on it
   'ie start of the invoice, so that this routine will load the edit area with all items from
   'this point in the list until the fk_invoice changes
   '--------------------------------------------------------------------------------------------
   
   If cvwItemsTodayOrUnpaid.count = 0 Then Return                   'exit if no invoices
   bexit = True
   lblInvoiceTotalAndPaid.Visible = False                 'don't know yet how much will be pain
   bPayingInvoice = True                                  'set paying invoice flag
   VBox_EditArea_Inner.Enabled = False                    'don't allow any access to the editing area input area
   cvwItemsTodayOrUnpaid.MoveCurrent()                              'align key with the columnview row
   If cvwItemsTodayOrUnpaid[cvwItemsTodayOrUnpaid.Item.key][0] = "" Then      'user has clicked on row with no patient name
      Do Until cvwItemsTodayOrUnpaid[cvwItemsTodayOrUnpaid.Item.key][0] <> "" 'so move backwards until on a patients name
         cvwItemsTodayOrUnpaid.MovePrevious()
      Loop
   Endif
   cvwItemsTodayOrUnpaid.MoveCurrent()
   fk_invoice = Items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]!fk_invoice                    'gives us the key to billing.invoices table
   invoice = modBillingDBI.Get_Invoice_PK(fk_invoice)
   If Not IsNull(invoice!fk_appointment) Then
      fk_appointment = invoice!fk_appointment    'needed for save to ensure correct linkages
   Else
      fk_appointment = Null  
   Endif
   lblInvoiceItems.text = " Items to Pay"
   Reload_Invoice_Data()
   bExit = False
   gvwPayments.row = 0
   
End

Private Sub Set_Online_Data(inv As Crow, Optional items As Collection)
   
   Dim i As Collection
   Dim item_with_error As Collection
   Dim s As String
   Dim rcode As Integer
   
   ' set online data
   rbOnline_No.Visible = False
   rbOnline_Yes.Visible = False
   'lblOnlineStatus.Visible = True
   If inv!result_code = 4006 Then
      If IsNull(items) Then
         items = modBillingDBI.Get_Billed_Items(inv)
      Endif
      For Each i In Items
         If i!fk_invoice = inv!fk_invoice And If Not IsNull(i!reason_code) And If i!reason_code <> 0 Then
            item_with_error = i
         Endif
      Next
      rcode = item_with_error!reason_code
      s = item_with_error!description & " " & item_with_error!comment
   Else If inv!result_code = 4007 Then
      rcode = inv!claim_result_code
      s = inv!claim_description & " " & inv!claim_result_text
   Else
      rcode = inv!result_code
      s = inv!description & " " & inv!result_text
   Endif
   lblOnlineStatus.Text = "(" & Str$(rcode) & ") " & Left$(s, 30)
   lblOnlineStatus.Tooltip = s
   Select Case rcode
      Case 0
         lblOnlineStatus.Foreground = Color.DarkGreen
      Case Else
         lblOnlineStatus.Foreground = Color.Red
   End Select
   
End

Private Sub Reload_Invoice_Data()
   'User has clicked on an invoice under the edit area
   'display items to pay  
   '
   
   Dim item_billed As Collection  
   
   items_billed = modBillingDBI.Get_Billed_Items(invoice) 'get indidual item numbers on an invoice
   Set_Online_Data(invoice, items)
   If Not invoice!paid Then                           'if this invoice is not paid
      tbSaveNoPrint.Enabled = False                       'as are paying disable the save no print button
      lblEditAreaHeading.text = "PAY INVOICE"
      VBox_EditArea_And_Grids.Enabled = True                                'contains the edit area (disabled) items grid and payement grid '   fixme
   Else
      lblEditAreaHeading.text = "PAID INVOICE"
      VBox_EditArea_And_Grids.Enabled = False
   Endif
   txtDate.text = Format(invoice!visit_date, "dd/mm/yyyy")                    'now fill the edit area with the invoice data
   txtReferenceDetails.text = invoice!reference
   cmbSeenBy.index = cmbSeenBy.Find(invoice!staff_provided_service_wholename)
   cmbLocation.index = cmbLocation.Find(invoice!branch)
   rbInvoiceToPatient.Value = True ' cheating a little bit: medicare/DVA invoices won't get printed again
   textlabelPayer.text = ""
   If Not IsNull(invoice!fk_payer_branch) Then
      fk_payer_branch = invoice!fk_payer_branch
      rbInvoiceOrganisation.Value = True
      rbInvoiceToOther.Value = True
   Else
      fk_payer_branch = Null
   Endif
   If Not IsNull(invoice!fk_payer_person) Then
      fk_payer_person = invoice!fk_payer_person
      rbInvoicePerson.Value = True
      rbInvoiceToOther.Value = True
   Else
      fk_payer_person = Null
   Endif
   If Not IsNull(invoice!account_to_name) Then
      textlabelPayer.text = invoice!account_to_name
      If Not IsNull(invoice!account_to_branch) Then
         textlabelPayer.text &= "<BR>" & invoice!account_to_branch
      End If
      If Not IsNull(invoice!account_to_street) Then
         textlabelPayer.text &= "<BR>" & invoice!account_to_street
      Endif
      If Not IsNull(invoice!account_to_town_postcode) Then
         textlabelPayer.text &= " " & invoice!account_to_town_postcode
      Endif
   Endif
   cmbInvoiceComments.text = invoice!notes
   '---------------------------------------------------------
   'now create an items collection to load back into the grid
   '---------------------------------------------------------
   onrow_items = 0
   gvwItemsBIlled.Clear
   lblcol7.text = "Reason Not Paid"
   invoice_total = modUtil.MoneyToFloat(Items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]!total_bill)
   amount_paid = modUtil.MoneyToFloat(items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]!total_paid)
   lblInvoiceTotalAndPaid.text = "  Invoice Total: " & modUtil.Money_Format(items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]!total_bill)
   lblInvoiceTotalAndPaid.text &= "   Paid: " & modUtil.Money_Format(items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]!total_paid) & "   "
   lblInvoiceTotalAndPaid.Visible = True
   With lblInvoiceOwing
      .text = "Total Owing " & modUtil.Money_Format(items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]!due)
      .Font.Bold = False
      .Foreground = Color.Black
      .Border = Border.Plain
   End With
   For Each Item_Billed In items_billed
      If Item_Billed!fk_invoice = fk_invoice Then
         gvwItemsBIlled.Rows.count = onrow_items + 1
         gvwItemsBIlled[onrow_items, 0].text = Trim(Item_Billed!mbs_item & " " & Item_Billed!ama_item & " " & Item_Billed!user_item)
         gvwItemsBIlled[onrow_items, 1].text = Item_Billed!descriptor_brief
         gvwItemsBIlled[onrow_items, 2].text = Item_Billed!amount
         gvwItemsBIlled[onrow_items, 4].text = Item_Billed!billing_type
         Try gvwItemsBIlled[onrow_items, 5].text = Item_Billed!amount_gst
         Inc onrow_items
      Endif
   Next
   gvwPayments.Clear()                                                        'clear the payments grid
   EditArea_Notify_Data_Change(False)                                         'don't allow access to the invoice items grid
   gvwPayments.row = 0
   gvwPayments[gvwPayments.row, cGridColumnPayments_Amount].text = modUtil.Money_Format(invoice_total - amount_paid)  'put in the amount to complete payment
   gvwPayments[gvwPayments.row, cGridColumnPayments_PaymentMethod].text = "EFTPOS"                                     'its usually EFTPOS
   gvwPayments[gvwPayments.Row, cGridColumnPayments_Date].Text = Format$(Now(), "dd/mm/yy")                            'and most likely being paid on the day 
   Invoice_Calculate_Amount_Paid()                                                      'work out amount now paid, and prominantly display total under the grid
   EditArea_Notify_Data_Change(True)
   Hbox_InvoiceGrid.Enabled = True
   gvwPayments.Enabled = True
   gvwItemsBIlled.Enabled = True
   
End

Public Sub Batching_Show_Vouchers_In_Claim()
   
   Columnview99.MoveCurrent()
   Columnview99.Item.Selected = True
Catch
   Log.PanicMsg(Error.Text, Error.Backtrace)
   
End

Public Sub txtSearch_GotFocus()
   
   txtSearch.Text = ""
   Last.BackGround = Color.rgb(95, 255, 175)
   txtSearch.Clear()
   With columnview99
      .clear
      .Columns.count = 2
   End With
   Select Case TabStrip1.Index
      Case cTab_Batching
      Case cTab_ScheduleFees
         combobox1.index = -1
         txtFilter.text = ""                                   'don't allow filter on the brief descriptor whilst searching
         iTimer_Search_Mode = cTimer_SearchMode_FeeSchedule
   End Select
   
End

Public Sub txtSearch_KeyRelease()
   
   timer_count = 0
   timer1.Enabled = True
   timer1.Start
   
End

Public Sub txtSearch_LostFocus()
   
   Last.BackGround = Color.White
   timer1.stop
   
End

Private Sub EditArea_Notify_Data_Change(bFlag As Boolean)
   
   If bFlag Then
      With VBox_EditArea_Outer
         .Padding = 1
         .Background = Color.Red
      End With
   Else
      With VBox_EditArea_Outer
         .Padding = 0
         .Background = Color.Background
      End With
   End If
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   If bexit Then Return
   If Not EditAreaTextBox_ExcludeKeys(key.code, Last.tag) Then
      Stop Event
      Return
   End If
   Select Case key.Code
      Case key.down
         If columnview1.Visible Then
            bexit = True
            With columnview1
               .MoveFirst
               .Item.Selected = True
               .SetFocus()
            End With
            bexit = False
         End If
      Case key.return
         Select Case Last.tag
            Case "reference details", "date"
               gvwItemsBIlled.row = 0
               gvwItemsBIlled.Column = 0
               
         End Select
   End Select
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   bKeyValid = True
   Select Case Tag
      Case "date"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case "notes", "payer search", "reference details"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_SQLCrash, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
         
      Case "payer search"
         'user has clicked on the textbox where you can search for a payer (organisation or person)
         bExit = True
         textlabelPayer.text = ""
         rbInvoiceToNotUsed.value = True                'switches off radio buttons for patient, medicare and veterans
         rbInvoiceOrganisation.value = True
         rbInvoiceToOther.value = True
         bExit = False
         iTimer_Search_Mode = cTimer_SearchMode_Payer
         With columnview1
            .top = Last.Parent.parent.top + Last.height
            .left = Last.Parent.left
            .width = textlabelPayer.Width
            .Visible = False
            .Columns.count = 4
         End With
   End Select
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.White
   timer1.stop
   
End

Public Sub EditArea_Textbox_KeyRelease()
   
   If bExit Then Return
   Select Case Last.tag
      Case "payer search"
         timer_count = 0
         timer1.Enabled = True
         timer1.Start
   End Select
   
End

Public Sub EditArea_TextBox_Change()
   
   If Bexit Then Return
   Select Case Last.tag
      Case "find account"
         Return
      Case "payer search"
         If Trim(Last.text) = "" Then
            textlabelPayer.text = ""
         Endif
   End Select
   EditArea_Notify_Data_Change(True)
   
End

Public Sub Account_Patient_Display(Optional bFromSearchingAccounts As Boolean = False)
   '----------------------------------------------------------------------------------------
   ' columnview2:
   ' This is the list of patient's which user has searched for on the accounts tab
   ' the patient collection is set in columnview2_dblclick()
   ' and  gives us this stuff:
   ' patient name (have this) and hence fk_patient
   ' date as visit_date
   ' duration (not displayed)
   ' seen by (dr combo) as staff_provider_service_title, wholename match combo text
   ' location combo as branch (match combo text)
   ' Invoice to (patient/medicare/veteran/other)
   ' Find and display the payer
   ' Reference (not yet in the back end)
   ' Items: item/description/fee/gap/rate/gst
   ' fk_item_billed (is there as pk_items_billed)
   ' have fk_invoice, billing_type, fk_lu_billing_type, mbs_item etc, descriptor
   ' & descriptor_brief, gst_rate, percentage_fee_rule
   ' also have fk_staff_invoicing and associated datae, patient details,
   ' but not the medicare numbers etc.
   '-----------------------------------------------------------------------------------------
   
   If bFromSearchingAccounts Then                                             ' this sub called from cvwAccounts_Select
      If IsNull(patients) Then Return                                         ' should never be but ?there's a bug
      Patient = Patients[sPatient_Collection_Key]                             ' where user has searched for patients 
   Else                                                                       ' otherwise called from the appointments seen list.
      If IsNull(Unbilled_Consultations) Then Return                       ' should never be but ?there's a bug
      Patient = Unbilled_Consultations[sPatient_Collection_Key]            ' select an unbilled consultation
      fk_appointment = Unbilled_Consultations[sPatient_Collection_Key]!pk
      fk_staff = Unbilled_Consultations[sPatient_Collection_Key]!fk_staff
      For Each Staff_Member In staff                                       ' match the staff member in the combo
         If Staff_Member!fk_staff = fk_staff Then 
            cmbSeenBy.index = cmbSeenBy.Find(Staff_Member!wholename)
            Break
         Endif
      Next
      lblInvoiceDate.text = "Date Seen"
   End If
   fk_patient = Patient!fk_patient
   Try fk_lu_default_billing_level = patient!fk_lu_default_billing_level            'if no billling level in backend
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private  'default to private $$
   Invoice_To_Set_Billing_To_Details(patient)
   bExit = True                                                                     'prevent textbox events firing
   currentconsult = New CConsult(patient, const.ConsultType_ClericalNote)
   form_patient_photo.Init(currentconsult)
   form_billingcards.Display_Patient_Data(currentconsult)                           'load billing defaults into embedded form
   txtBirthdate.text = Format(Patient!birthdate, "dd/mm/yyyy")
   txtAddress.text = Patient!street1 & Trim(" " & patient!street2) & " " & patient!town & " " & patient!postcode
   txtAge.text = Patient!age_display
   lblPatient_Show_Details(patient)
   With txtpatient
      .text = Patient!wholename
      .pos = 0
   End With
   fk_payer_branch = Null '
   fk_payer_person = Null
   Try Payer_Get(Patient)                                                           ' show payer if exists eg could be parent
   gvwItemsBIlled.Enabled = True
   iAccountDisplayMode = const.Billing_Accounts_Paid_Today_And_Unpaid_All
   Items_Today_Or_Unpaid_Reload                                                    'display today's visits + all unpaid
   If Not bFromSearchingAccounts Then
      VBox_EditArea_Outer.Enabled = True
      Invoice_New()
      txtDate.text = Format(patient!begin, "dd/mm/yyyy")
   Else
      VBox_EditArea_Inner.Enabled = False 
      HBox_InvoiceGrid.Enabled = False   
      gvwItemsBilled.Enabled = False   
   Endif
   bExit = False
Catch
   Log.PanicMsg(Error.Text, Error.Backtrace)
   
End

Public Sub lblPatient_Show_Details(Patient As Collection)
   
   tlPatientDetails.text = Patient!wholename & " " & Format(Patient!birthdate, "dd/mm/yyyy") & " Age:" & Patient!age_display
   tlPatientDetails.text &= "<BR>" & Patient!street1 & Trim(" " & patient!street2) & " " & patient!town & " " & patient!postcode
   
End

Public Sub Item_Billed_Display()
   
End

Public Sub TabStripBilling_Click()
   '-------------------------------------------------------
   'User has clicked on the tabstip containing either
   'the unbilled patients already seen or the tab to allow
   'staff to search for a patient's accounts
   '-------------------------------------------------------
   
   If BExit Then Return
   Select Case Last.index
      Case cTab_Visits_And_Payments
         
         '   cvwUnBilled.SetFocus()
      Case cTabAccountHistory
         '  txtFindPatient.SetFocus() 'and clear the edit area
   End Select
   
End

Public Sub Payer_Search()
   '-----------------------------------------------------------------
   'User is typing in search textbox, first try and find organisation
   '-----------------------------------------------------------------
   
   Dim person As Collection
   
   timer1.Stop
   If Trim(txtFindPayer.text) = "" Then
      columnview1.Visible = False
      Return
   End If
   branches = modContactsDBI.Organisations_Get(Trim(txtFindPayer.text))
   columnview1.Clear
   If branches.count > 0 Then
      For Each branch In branches
         Columnview1.Add(branch!pk_view, 0)
         Columnview1[branch!pk_view][0] = Branch!organisation
         Columnview1[branch!pk_view][1] = Branch!branch
         Columnview1[branch!pk_view][2] = Trim(Branch!street1 & " " & Branch!street2)
         Columnview1[branch!pk_view][3] = Branch!suburb & " " & Branch!postcode
      Next
      If branches.count > 1 Then
         With Columnview1
            .Visible = True
            .Raise
            .tag = "payer org"
         End With
      Else
         Organisation_Select(branch!pk_view)
      End If
   Else
      persons = modContactsDBI.Person_Get_By_Surname(txtFindPayer.Text)
      For Each person In persons
         Columnview1.Add(person!pk_view, 0)
         Columnview1[person!pk_view][0] = person!wholename
         Columnview1[person!pk_view][1] = person!street1 & " " & person!street2
         Columnview1[person!pk_view][2] = person!suburb & " " & person!postcode
      Next
      If persons.count > 1 Then
         With Columnview1
            .Visible = True
            .Raise
            .tag = "payer person"
         End With
      Else
         If persons.count <> 0 Then Payer_Person_Select(person!pk_view)
      End If
   Endif
   
End Sub

Public Sub Organisation_Select(Optional branch_pk As Variant)
   'Really a branch select FIXME consistancy throughout entire project
   
   Dim c As Collection
   
   bexit = True
   If IsNull(branch_pk) Then
      If IsNull(columnview1.Item) Then
         Log.ErrorMsg("FRecordVisit.Organisation_Select: columnview1.Item is NULL")
         Error.Raise("No available selection for payer columnview1")
      Endif
      columnview1.MoveCurrent()
      branch_pk = columnview1.Item.Key
   Endif
   c = branches[branch_pk]
   textlabelPayer.text = c!organisation & "<BR>"
   textlabelPayer.text &= c!branch & "<BR>"
   textlabelPayer.text &= Trim(c!street1 & " " & c!street2) & "<BR>"
   textlabelPayer.text &= c!town & " " & c!postcode
   columnview1.Visible = False
   txtFindPayer.text = ""
   fk_payer_branch = c!fk_branch
   Workcover_Show_Claims   'now get workcover claims, most 'others' will be workcover
   txtReferenceDetails.SetFocus()
Finally
   bexit = False
   
End

Public Sub Workcover_Show_Claims()
   'Find and display any active workcover claims
   
   Dim WCC As Collection
   Dim sMsg As String
   
   cvwWorkcoverClaims.Clear
   workcover_claims = modWorkCoverDBI.Claims_Get_Distinct(fk_patient)
   If workcover_claims.count Then
      For Each WCC In workcover_claims
         cvwWorkcoverClaims.Add(WCC!identifier, 0)
         cvwWorkcoverClaims[WCC!identifier][0] = WCC!identifier
         If IsNull(WCC!claim_number) Then
            cvwWorkcoverClaims[WCC!identifier][1] = "claim?"
            If Not modAdminDBI.Has_User_Seen_Tip("FRecordVisit.WorkcoverAddingClaimNumbers") Then
               sMsg = "<P>This patient's workcover claims are missing one or more claim numbers.</P>"
               "<P>Did you know that clerical users can add these numbers via the 'Patient Summaries, Forms, Results Tab?</P>"
               "<P>Once you have selected this tab, just search for the patient and by selecting the workcover tab,  you can "
               "click on and edit any visit in a claim, and type in the claim number. You will not be permitted of course to "
               "change any clinical details. When finished, just click the Save button.</P>"
               "Next time your bill the patient, the claim number will appear in the list.</P>"
               With FUsageTip
                  .Init("Updating a Workcover Claim Number", "FRecordVisit.WorkcoverAddingClaimNumbers", sMsg)
                  .ShowModal()
               End With
            End If
         Else
            cvwWorkcoverClaims[WCC!identifier][1] = WCC!claim_number
         End If
      Next
      With cvwWorkcoverClaims
         .SetFocus
         .Item.Selected = True
      End With
      VBox_Workcover_Claims.Visible = True
   End If
   
End

Public Sub Payer_Person_Select(Optional person_pk As Variant)
   'Really a branch select FIXME consistancy throughout entire project
   
   Dim c As Collection
   
   bexit = True
   If IsNull(person_pk) Then
      If IsNull(columnview1.Item) Then
         Log.ErrorMsg("FRecordVisit.Payer_Person_Select: columnview1.Item is NULL")
         Error.Raise("No available selection for payer columnview1")
      Endif
      columnview1.MoveCurrent()
      person_pk = columnview1.Item.Key
   Endif
   c = persons[person_pk]
   textlabelPayer.text = c!wholename & "<BR>"
   textlabelPayer.text &= Trim(c!street1 & " " & c!street2) & "<BR>"
   textlabelPayer.text &= c!town & " " & c!postcode
   columnview1.Visible = False
   Debug "setting fk_payer_person to "; c!fk_person
   fk_payer_person = c!fk_person
   txtFindPayer.text = ""
   txtReferenceDetails.SetFocus()
Finally
   bexit = False
   
End

Public Function Valid_Invoice_Items(bBulkBill As Boolean) As Boolean
   '--------------------------------------------------
   'Validates if the item data on the invoice is valid
   '--------------------------------------------------
   
   Dim grid_row As Integer
   
   If IsNull(fk_patient) Then
      Message.Info("Please select a valid patient")
      Return
   Endif
   If Trim(txtDate.text) = "" Or Not IsDate(Trim(txtDate.text)) Then
      txtDate.SetFocus()
      txtDate.Background = Color.rgb(95, 255, 175)
      Return
   Endif
   If Not gvwItemsBIlled_Data_Valid() Then
      Message.Info("Invalid item number or missing fee amount")
      Return
   Endif
   If cmbSeenBy.Text = "Not Selected" Then
      Message.Info("You must select a doctor")
      Return
   Endif
   If Not gvwPayments_DataValid() Then
      Return
   Endif
   If bBulkBill = False Then  
      If rbInvoiceToPatient.Value = False Then
         If rbInvoiceToOther.value = False Then
            Message.Info("Please select the person or organisation resonsible for this invoice")
            Return
         Endif
      Endif
   Endif
   For grid_row = 0 To gvwItemsBIlled.Rows.count - 1  'fixme check all necessary data is in grids cells
      If gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text <> "" Then
         If modUtil.MoneyToFloat(gvwItemsBIlled[grid_row, cGridColumnItem_Fee].Text) <= 0 Then
            Message.Info("Please enter a valid amount of money for any items in the billing grid")
            Return
         Endif
      End If  
   Next
   Return True
   
End

Public Sub Valid_Payment() As Boolean
   '---------------------------------------------------------
   'If the account or the consultation of today is being paid
   'make sure there actually is paid data and if only part of
   'the invoice is being paid off - prompt the user.
   '---------------------------------------------------------
   
   Dim grid_row As Integer
   Dim total As Float
   Dim sMsg As String
   
   Message.Title = "Payment of Invoice"
   For grid_row = 0 To gvwPayments.Rows.Max
      If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then            'if have an amount
         If gvwPayments[grid_row, cGridColumnPayments_PaymentMethod].text = "" Then
            gvwPayments.Row = grid_row
            gvwPayments.Column = cGridColumnPayments_PaymentMethod
            Message.Info("Please enter type of payment.\n\n")
            Return
         Endif
         total = total + CFloat(Val(Replace(gvwPayments[grid_row, cGridColumnPayments_Amount].text, "$", "")))
      Else
         If grid_row = 0 Then
            gvwPayments.Row = 0
            gvwPayments.Column = 0
            Message.Info("Please enter amount of payment.\n\n")
            Return
         End If
         
      End If
   Next
   Return True
   
End

Public Sub HBox_PaymentGrid_Leave()
   
   'gvwPayments_HideProperty
   'cmbPaymentMethods.Visible = False
   
End

Public Sub pnlToolButtons_Leave()
   
   tbUniversal.Enabled = False
   
End

Public Sub Invoice_To_Set_Billing_To_Details(patient_collection As Collection)
   '-----------------------------------------------------------------------------------
   'sets the appropriate radio buttons to indicate who pays
   'and gets the responsible payer.
   'patient_collection = either Unbilled_consultation collection or Patient collection
   'Called by Patient_Unbilled_Consultation_display()
   '          Account_Patient_Display()a
   '--------------------------------------------------------------------------------- -
   
   Try fk_lu_default_billing_level = patient_collection!fk_lu_default_billing_level
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private
   Try Payer_Get(patient_collection)
   bExit = True
   Select Case fk_lu_default_billing_level
      Case const.Billing_Default_Level_BulkBill
         If patient_collection!veteran_number <> "" Then
            With rbInvoiceToVeterans
               .value = True               'leave medicare enabled as could be partial veteran
               .Enabled = True
            End With
            With rbInvoiceToMedicare
               .Value = False
               .Enabled = True           'can still bill as both
            End With
            tbUniversal.text = "Veterans Voucher"
         Else
            With rbInvoiceToMedicare
               .value = True
               .Enabled = True
            End With
            rbInvoiceToVeterans.Enabled = False
            tbUniversal.text = "Medicare Voucher"
         Endif
      Case const.Billing_Default_Level_Private
         rbInvoiceToPatient.value = True
         tbUniversal.text = "Print Account"
         rbInvoiceToMedicare.Enabled = True             'so can switch to this if needs be
      Case const.Billing_Default_Level_HealthCareCardConcession
         rbInvoiceToPatient.value = True
         tbUniversal.text = "Print Account"
         rbInvoiceToMedicare.Enabled = True
      Case const.Billing_Default_Level_PensionerConcession
         rbInvoiceToPatient.value = True
         tbUniversal.text = "Print Account"
         rbInvoiceToMedicare.Enabled = True
      Case const.Billing_Default_Level_MedicoLegal
         rbInvoiceToPatient.value = True
         tbUniversal.text = "Print Account"
   End Select
   If patient_collection!veteran_number = "" Then
      rbInvoiceToVeterans.Enabled = False
   Endif
   bexit = False
   
End

Public Sub pnlToolButtons_Enter()
   '---------------------------------------------------------------------
   'Enable or disable buttons appropriately as per the edit area contents
   '---------------------------------------------------------------------
   
   Dim fee As String
   Dim payment As String
   
   gvwPayments_HideProperty 
   fee = Right(lblInvoiceOwing.text, Len(lblInvoiceOwing.text) - InStr(lblInvoiceOwing.text, " $"))
   payment = Right(lblPaymentTotal.text, Len(lblPaymentTotal.text) - InStr(lblPaymentTotal.text, " $"))
   
   If fee = payment And fee <> "" And payment <> "" Then
      With tbUniversal
         .text = "Print Receipt"
         .tag = "print receipt"
         .Enabled = True
      End With
      tbSaveNoPrint.Enabled = True
      tbSaveNoPrint.text = "Receipt No Print"
      Return
   Endif
   If fee = "" And payment = "" Then
      tbSaveNoPRint.Enabled = False
      tbNewInvoice.Enabled = True
      tbUniversal.Enabled = False
      Return
   Endif
   If fee <> "" And payment = "" Then
      If rbInvoiceToMedicare.value = True Or rbInvoiceToVeterans.value = True Then
         If rbInvoiceToMedicare.value = True Then
            tbUniversal.Text = "Medicare Voucher"
         Else
            tbUniversal.text = "Veterans Voucher"
         Endif
         tbUniversal.tag = "print voucher"
         tbUniversal.Enabled = True
         tbSaveNoPrint.Visible = False  
      Else
         With tbUniversal
            .text = "Print Account"
            .tag = "print account"
            .Enabled = True
         End With
         With tbSaveNoPrint
            .Enabled = True
            .visible = True   
            .Text = "Account No Print"
         End With
         Return
      End If
   Endif
   If fee <> "" And Payment <> "" Then
      With tbUniversal
         .text = "Print Receipt"
         .tag = "print receipt"
         .enabled = True
      End With
      tbSaveNoPrint.Enabled = True
      tbSaveNoPrint.Text = "Receipt No Print"
   End If
   
End

Public Sub combobox1_Click()
   'Combobox clicked on tabs otherthan the invoices tab
   
   If bexit Then Return
   Select Case TabStrip1.Index
      Case cTab_Invoices_Receipts
         Reload()
      Case cTab_Banking
      Case cTab_ScheduleFees
         txtSearch.text = ""
         txtFilter.text = ""
         Fee_Schedule_Reload()
   End Select
   
End

Public Sub comboBox1_Load()
   
   combobox1.Clear()
   bExit = True
   Select Case TabStrip1.Index
      Case cTab_Invoices_Receipts
         combobox1.Add("All Unbilled Consultations", 0)
         combobox1.Add("Unbilled  Consultations Today", 1)
         combobox1.Add("Accounts Overdue 1 Month", 2)
         combobox1.Add("Accounts Overdue 2 Month", 3)
         combobox1.Add("Accounts Overdue > 3 Months", 4)
         combobox1.Add("Accounts - Institutional Payers", 5)
      Case cTab_Banking
         combobox1.Index = 0
      Case cTab_Batching
         combobox1.Add("All Bulk Billed Claims", 0)
         combobox1.Add("Medicare Bulk Billed Claims", 1)
         combobox1.Add("Veteran Bulk Billed Claims", 2)
      Case cTab_Reports
         modUtilGUI.LoadCombo(combobox1, staff, "wholename")
         combobox1.Add("All Staff", 0)
         combobox1.index = cmbSeenBy.Index  'most likely want to report on the same doctor being billed.
      Case cTab_ScheduleFees
         combobox1.Add("Brief Descriptors", 0)
         combobox1.Add("MBS Item Numbers", 1)
         combobox1.Add("AMA Item Numbers", 2)
         combobox1.Add("User Defined Item Numbers", 3)
   End Select
   bExit = False
   
End

Public Sub TabStrip1_Click()
   
   Try Hsplit_Main.Layout = Settings["FRecordVisit/Tabstrip1_" & Str(TabStrip1.index) & ".HSplit_Main.Layout", [1, 4]]
   comboBox1_Load()
   txtSearch.text = ""
   Select Case TabStrip1.index
      Case cTab_Invoices_Receipts
         DateChooser1.visible = False
         VBox_ForOtherTabs.Visible = False
         'VBox_Invoices.Visible = True
         VBox_Accounts.Visible = True
         Hbox_Filter.Visible = True
         HBox_Veterans_or_medicare.Visible = False
         bexit = True
         bexit = False
         lblUnpaidBulkBIllingInvoices.Visible = False 
         Return
      Case cTab_Batching                                              'User has clicked on the medicare batching tab
         combobox1.Visible = False                                    'don't need this
         gvwFeeScheduleItems.Visible = False                          'don't want to see the scheduled fee list
         Hbox_Filter.Visible = False                                  'or the filtering stuff for scheduled fees
         HBox_Search.visible = False                                  'or the search stuff for scheduled fees
         DateChooser1.visible = True                                  'calender will allow viewing any date even if paid
         lblUnpaidBulkBIllingInvoices.Visible = True                  'the heading 'Claims with unpaid vouchers'
         HBox_Veterans_or_medicare.Visible = True                     'holds the radio buttons for medicare/veterans
         VBox_Accounts.Visible = False                                'the VBox holding the lists of unbilled appts or account  holders for visits & Payments
         VBox_ForOtherTabs.Visible = True                             'the box holding all the gui stuff for batching
         Wait                                                         'ensure the left hand side of screen is visible now
         If IsNull(form_batching) Then                                'if the first time accessed this tab
            With form_batching = New FBulkBillBatching(Vbox_Batching) 'show the form
               .Init(staff, clinics)
            End With
         Endif
         With columnview99
            .clear
            .Columns.count = 1
            .Header = False
            .Visible = True   
         End With
         Bulk_Billing_Show_Dates                                      'show all bulk billing dates with unpaid vouchers
         Wait
         With columnview99
            .MoveLast 
            .SetFocus
            .Item.Selected = True 
         End With
         columnview99.MoveLast 
         columnview99.SetFocus
         Try columnview99.Item.Selected = True 
      Case cTab_Reports
         HBox_Veterans_or_medicare.Visible = False 
         lblUnpaidBulkBIllingInvoices.Visible = False 
         Hbox_Filter.Visible = False
         VBox_Accounts.Visible = False
         VBox_ForOtherTabs.Visible = True
         gvwFeeScheduleItems.Visible = False
         columnview99.Visible = True          'generic columnview
         DateChooser1.visible = True
         VBox_Accounts.Visible = False
         VBox_ForOtherTabs.Visible = True
         combobox1.Visible = True
         HBox_Search.Visible = False
         modEditAreaHelpers.Resize_labels(VBox_ForOtherTabs, lblmeasure)
         lblColumnviewHeading.Visible = False
         columnview99_Refresh()
         Wait 
         Report_Show_HTML(Day_List_Create_HTML(DateChooser1.Value))
      Case cTab_ScheduleFees
         lblUnpaidBulkBIllingInvoices.Visible = False 
         VBox_Accounts.Visible = False  
         Hbox_Filter.Visible = True
         lblFilter.Text = "Filter"
         HBox_Search.Visible = True
         HBox_Veterans_or_medicare.Visible = False
         VBox_ForOtherTabs.Visible = True
         
         DateChooser1.visible = False
         gvwFeeScheduleItems.visible = True
         columnview99.Visible = False
         VBox_Accounts.Visible = False
         VBox_ForOtherTabs.Visible = True
         lblFilter.Text = "Filter         "
         lblMeasure.text = lblFilter.Text
         modEditAreaHelpers.Resize_labels(VBox_ForOtherTabs, lblmeasure)
         If IsNull(from_fee_schedule) Then
            With from_fee_schedule = New FFeeSchedule(Vbox_FeeSchedule)
               .Init()
            End With
            combobox1.index = cAll_ItemNumbers 'loads the fee schedule
            combobox1.Visible = True
            HBox_Search.Visible = True
            Try gvwFeeScheduleItems.font = Font[Settings["FRecordVisit_Billing_FeeSchedule/gvwFeeScheduleItems.font"]]
            gvwFeeScheduleItems.row = 0
            gvwFeeScheduleItems.SetFocus()
            gvwFeeScheduleItems.Rows[0].Selected = True
         End If
         Wait
         
      Case cTab_Banking
         DateChooser1.Visible = True
         HBox_Veterans_or_medicare.Visible = False
         With columnview99
            .Visible = False
            .header = False
            .Clear
         End With
         Hbox_Filter.Visible = False
         gvwFeeScheduleItems.Visible = False
         Banking_Show_Html(Banking_Create_Banking_Slip_HTML())
   End Select
   
End

Public Function Banking_Create_Banking_Slip_HTML() As String
   
   Dim Unbanked_Payments As Collection
   Dim unbanked_payment As Collection
   Dim total_cash As Float
   Dim total_cheques As Float
   Dim sHtml As String
   Dim sRow_Template As String
   Dim banking_total As Float
   Dim surgery_name As String
   Dim cheque_details_html As String
   Dim bFirstCheque As Boolean
   Dim last_fk_invoice As Integer
   
   Unbanked_Payments = modBillingDBI.Payments_Unbanked_Get() 
   For Each unbanked_payment In Unbanked_Payments
      If unbanked_payment!fk_lu_payment_method = const.payment_method_cash Then
         total_cash += modUtil.MoneyToFloat(unbanked_payment!total_paid)
      Else
         If Not bFirstCheque Then
            bFirstCheque = True 
            cheque_details_html &= "<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=1 >"
            "<COL WIDTH=80%>"
            "<COL WIDTH=10%>" 
         End If  
         If last_fk_invoice <> Unbanked_Payment!fk_invoice Then
            cheque_details_html &= "<TR VALIGN=TOP>"
            cheque_details_html &= totals_html_row_template()   
            cheque_details_html = Replace(cheque_details_html, "%payment_method%", unbanked_payment!referent)
            cheque_details_html = Replace(cheque_details_html, "%total_amount%", unbanked_payment!total_paid) 
            total_cheques += modUtil.MoneyToFloat(unbanked_payment!total_paid)
            cheque_details_html &= "</TR>"
            last_fk_invoice = Unbanked_Payment!fk_invoice
         End If   
      Endif
   Next
   surgery_name = modDBConnect.currentUser!organisation 
   banking_total = modUtil.MoneyToFloat(total_cheques) + modUtil.MoneyToFloat(total_cash)
   sHtml = "<HTML><BODY><H3><B><p align='center'>" & modDBConnect.currentUser!organisation & "</H3></P>"
   sHtml &= "<HTML><BODY><H3><B><p align='center'>Banking Summary for period from x to " & Format(Now(), "dd/mm/yyyy") & "</H3></P>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=50%>"
   "<COL WIDTH=50%>"
   shtml &= "<TR VALIGN=TOP>"
   sHtml &= totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "Total Cash")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(total_cash))
   sHtml &= "</TR>"
   shtml &= "<TR VALIGN=TOP>"
   sHtml &= totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "Total Cheques")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(total_cheques))
   sHtml &= "</TR>"
   sHtml &= "</TABLE>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=50%>"
   "<COL WIDTH=50%>"
   shtml &= "<TR VALIGN=TOP>"
   sHtml &= totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "")
   shtml = Replace(shtml, "%total_amount%", "________")
   sHtml &= "</TR>"
   shtml &= "<TR VALIGN=TOP>"
   sHtml &= totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "Total Amount for Banking")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(banking_total))
   sHtml &= "</TR>"
   sHtml &= "</TABLE>"
   If total_cheques <> 0 Then
      sHtml &= "<P><B>Cheque Details</B></P>" & cheque_details_html & "</TABLE>"
   Endif
   sHtml &= "</HTML>"
   Return shtml
   
End

Public Sub day_list_html_row_template()
   
   'remove this when remove the old routines 
   
End

Public Sub Day_List_Create_HTML(Optional for_date As Date = Now()) As String
   
   Dim patient_visits As Collection
   Dim visit As Collection
   Dim sHtml As String
   Dim Last_fk_invoice As Variant
   Dim payment_method As Collection
   Dim x As Integer
   Dim invoices_others As New Collection
   Dim bSameInvoice As Boolean
   Dim last_fk_patient As Variant
   Dim item_numbers_total As Float
   Dim row_template As String
   Dim item_count As Integer
   Dim bOldAccount As Boolean     
   Dim visits_medicare As New Collection                  'all medicare visits seen today and invoiced today
   Dim visits_medicare_not_today As New Collection       'medicare visits invoiced today but not seen today
   Dim visits_veterans As New Collection
   Dim visits_veterans_not_today As New Collection
   Dim visits_workcover As New Collection
   Dim visits_private_account As New Collection
   Dim visits_private_other As New Collection
   Dim visits_private_today As New Collection
   Dim group_name As String
   Dim visit_subset As Collection
   Dim Income_Summary_Warning_Table As String
   Dim Income_summary_html As String
   Dim warning_html As String
   Dim income_consults_today As Float  'just for consults, not for paid bills
   Dim bIsWorkcoverInvoice As Boolean
   Dim Appointments_Not_Billed As Collection
   Dim bulk_bill_percentage As Integer
   Dim running_total_all_payments As Float
   Dim sMain_Top_Table As String
   Dim sPatients_Seen_Table As String
   Dim sMonies_Taken As String
   Dim sDay_Sheet_Mini_Help As String
   
   day_list_patients_billed_count = 0
   day_list_patients_billed_medicare_count = 0
   day_list_patients_billed_veterans_count = 0
   day_list_patients_billed_private_count = 0
   day_list_patients_billed_workcover_count = 0
   day_list_patients_old_invoices_count = 0
   day_list_patients_billed_private_count = 0
   day_list_patients_paid_count = 0
   
   running_total = 0
   running_total_gst = 0
   running_total_medicare = 0
   running_total_veterans = 0
   running_total_workcover = 0
   running_total_old_invoices = 0
   running_total_private_paid = 0
   running_total_private_account = 0
   running_total_private_account_part_paid = 0
   payment_totals = New Float[8] 
   
   day_list_doctors = New Collection
   sMain_Top_Table = "<TABLE  width=100% CELLPADDING=5 CELLSPACING=0 BORDER=1>"     
   "<COL WIDTH=33%>"
   "<COL WIDTH=33%>"
   "<COL WIDTH=33%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=35%>"
   "<P align='center'<h3><B>INVOICES</h3></B></P>"
   "</TD>"
   "<TD WIDTH=35%>"
   "<P align='center'<h3><B>MONIES TAKEN</h3></B></P>"
   "</TD>"
   "<TD WIDTH=35%>"
   "<P align='center'<h3><B>CAVEATS</h3></B></P>"
   "</TD>"
   "</TR>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=35%>"
   "<P>%patients_seen_table%</P>"
   "</TD>"
   "<TD WIDTH=35%>"
   "<P>%monies_taken_table%</P>"
   "</TD>"
   "<TD WIDTH=35%>"
   "<P>%mini_help_table%</P>"
   "</TD>"
   "</TR></TABLE>"
   sHtml = "<HTML><BODY><H3><B><p align='center'><U>Front Desk Day Activity Sheet - Billings, Invoices and Payments For " & Format(for_date, "dd mmmm yyyy") & "</H3><u></P>"
   sHtml &= "<H3><P align='center'><B>FOR PATIENTS SEEN TODAY (%total_seen_today%)</B></P></H3>"
   shtml &= sMain_Top_Table
   Appointments_Not_Billed = modBillingDBI.Days_Appointments_Not_Billed(DateChooser1.value, modDBConnect.currentUser!fk_branch) 
   If Appointments_Not_Billed.count Then
      shtml &= Appointments_Not_Billed_HTML(Appointments_Not_Billed) 
   Endif
   patient_visits = modBillingDBI.Day_List_Get(DateChooser1.value, modDBConnect.currentUser!fk_branch) ', staff[combobox1.index]!fk_staff)
   For Each visit In patient_visits
      If Last_fk_invoice <> visit!fk_invoice Then
         Last_fk_invoice = visit!fk_invoice
         bIsWorkcoverInvoice = False   
         If Not day_list_doctors.Exist(visit!fk_staff_provided_service) Then
            day_list_doctor = New Collection
            day_list_doctor!fk_staff = visit!fk_staff_provided_service
            day_list_doctor!wholename = UCase(Left(visit!staff_firstname)) & " " & modUtil.Ucase_Word_First_Letter(visit!staff_surname)
            day_list_doctor!takings = CFloat(0)
            day_list_doctors.Add(day_list_doctor, visit!fk_staff_provided_service)
         Endif
      Endif
      If Not IsNull(visit!fk_lu_bulk_billing_type) Then
         Select Case visit!fk_lu_bulk_billing_type
            Case const.BulkBilling_Type_Medicare
               If modUtil.IsSameDay(visit!visit_date, DateChooser1.value) Then
                  visits_medicare.Add(visit, visits_medicare.count)
               Else
                  visits_medicare_not_today.Add(visit, visits_medicare_not_today.count)
               End If   
            Case const.BulkBilling_Type_Veteran
               If modUtil.IsSameDay(visit!visit_date, DateChooser1.value) Then
                  visits_veterans.Add(visit, visits_veterans.count)
               Else
                  visits_veterans_not_today.Add(visit, visits_veterans_not_today.count)
               End If   
         End Select
      Else   
         If Not IsNull(visit!account_to_name) Then                                                         ' there is an account to name (could be private or workcover)
            If InStr(Lower(visit!descriptor_brief), "workcover") Or bIsWorkcoverInvoice = True Then        ' If its workcover
               If modUtil.IsSameDay(DateChooser1.value, visit!appointment_date) Or modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then   ' and the same day
                  visits_workcover.Add(visit, visits_workcover.count)                                      ' add to the workcover collection
                  bIsWorkcoverInvoice = True                                                               ' all subsequent on same invoice must be workcover 
               Else                                                                                        ' not workcover OR not on the same day
                  visits_private_other.Add(visit, visits_private_other.count)                              ' must be an account being paid (workcover or private)         
               End If
            Else                                                                                           ' not workcover must be private or insurance 
               If modUtil.IsSameDay(DateChooser1.value, visit!appointment_date) Or modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then
                  If visit!paid = True Then  
                     visits_private_today.Add(visit, visits_private_today.count)                        ' generated today? then is a private for today
                  Else
                     visits_private_account.Add(visit, visits_private_account.count)
                  End If   
               Else                                                                                        ' otherwise, must be a private on another date
                  visits_private_other.Add(visit, visits_private_other.count)
               End If   
            Endif
            
         Else                                                                                             ' there is no account name, is private
            If modUtil.IsSameDay(DateChooser1.Value, visit!appointment_date) Or modUtil.IsSameDay(DateChooser1.Value, visit!visit_date) Then   'if date is same as date-chooser
               If modUtil.IsSameDay(DateChooser1.Value, visit!visit_date) Then                            ' if visit is on that date 
                  If visit!paid = True Then                                                               ' if paid
                     If modUtil.IsSameDay(visit!visit_date, visit!date_paid) Then                         ' if paid on same day as seen
                        visits_private_today.Add(visit, visits_private_today.count)                       ' is a private paid today
                     Else
                        visits_private_other.Add(visit, visits_private_other.count)                       ' wasn't paid on same day as visit - hence is payment for old account                '    
                     End If  
                  Else                                                                                    'else wasn't paid today
                     visits_private_account.Add(visit, visits_private_account.count)                      'must have taken the account
                  End If   
               End If   
            Else                                                                                           'Visit_date or appointment_date <> the datechooser date
               'must be an old invoice
               If visit!payments.count Then                                                               ' if paid
                  visits_private_other.Add(visit, visits_private_other.count)
               Else
                  visits_private_account.Add(visit, visits_private_account.count) 
               End If 
            End If   
         End If
      End If   
   Next
   If visits_medicare.count Then
      shtml &= visit_create_html_bulk_billing(visits_medicare, "Medicare") 
   Endif
   
   If visits_veterans.count Then 
      shtml &= visit_create_html_bulk_billing(visits_veterans, "Veterans") 
   Endif
   If visits_workcover.count Then
      shtml &= visit_type_create_html(visits_workcover, "Workcover") 
   Endif
   If visits_private_account.count Then
      shtml &= visit_type_create_html(visits_private_account, "Private Account") 
   Endif
   If visits_private_today.count Then
      shtml &= visit_type_create_html(visits_private_today, "Private Paid") 
   Endif
   
   '---------------------------------------------------------------------------------------
   'Now add a table which summarizes amounts for Cash, Cheques, EFPos or EFT (direct debit)
   '---------------------------------------------------------------------------------------
   If visits_medicare_not_today.count Or visits_private_other.count Or visits_veterans_not_today.count Then
      sHtml &= "<HR><H3><P align='center'><b>FOR PATIENTS NOT SEEN TODAY</b></P></H3>" 
      If visits_medicare_not_today.count Then
         shtml &= visit_create_html_bulk_billing(visits_medicare_not_today, "Medicare Not Seen Today")
      Endif
      If visits_veterans_not_today.count Then
         shtml &= visit_create_html_bulk_billing(visits_veterans_not_today, "Veterans Not Seen Today")
      Endif
      If visits_private_other.count Then
         shtml &= visit_type_create_html(visits_private_other, "Old Account") 
      Endif
   End If   
   sMonies_Taken = "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=212>"
   "<COL WIDTH=208>"
   For Each payment_method In payment_methods           'the pk's in this collection are not in order 1>5
      If payment_method!pk <> const.payment_method_bad_debt Then   
         sMonies_Taken &= "<TR VALIGN=TOP>"
         sMonies_Taken &= totals_html_row_template()
         sMonies_Taken = Replace(sMonies_Taken, "%payment_method%", UCase(payment_method!method))
         sMonies_Taken = Replace(sMonies_Taken, "%total_amount%", modUtil.Money_Format(payment_totals[payment_method!pk]))
         running_total_all_payments += modUtil.MoneyToFloat(payment_totals[payment_method!pk])
         sMonies_Taken &= "</TR>"
      End If   
   Next
   sMonies_Taken &= totals_html_row_template()
   sMonies_Taken = Replace(sMonies_Taken, "%payment_method%", "")
   sMonies_Taken = Replace(sMonies_Taken, "%total_amount%", "")
   sMonies_Taken &= "</TR>"
   sMonies_Taken &= totals_html_row_template()
   sMonies_Taken = Replace(sMonies_Taken, "%payment_method%", "Total (Including GST)")
   sMonies_Taken = Replace(sMonies_Taken, "%total_amount%", modUtil.Money_Format(running_total_all_payments))
   sMonies_Taken &= "</TR>"
   sMonies_Taken &= totals_html_row_template()
   sMonies_Taken = Replace(sMonies_Taken, "%payment_method%", "Total GST")
   sMonies_Taken = Replace(sMonies_Taken, "%total_amount%", modUtil.Money_Format(running_total_gst))
   sMonies_Taken &= "</TR>"
   sMonies_Taken &= "</TABLE>"
   shtml = Replace(sHTML, "%monies_taken_table%", sMonies_Taken)
   If day_list_patients_billed_count Then                                                           ' if patient's seen today
      sHtml = Replace(shtml, "%total_seen_today%", Str(Appointments_Not_Billed.Count + day_list_patients_billed_count))
      'First create a two column table the left part holds the income, the right the warning
      
      Income_Summary_Warning_Table = "<TABLE  width=100% CELLPADDING=0 CELLSPACING=0 >"         
      Income_Summary_Warning_Table &= "<COL WIDTH=35%>"
      Income_Summary_Warning_Table &= "<COL WIDTH=5%>"
      Income_Summary_Warning_Table &= "<COL WIDTH=60%>"
      Income_Summary_Warning_Table &= "<TR VALIGN=TOP>"
      Income_Summary_Warning_Table &= "<TD WIDTH=35%>"
      Income_Summary_Warning_Table &= "<P>%income_summary_html%</P>"
      Income_Summary_Warning_Table &= "</TD>"
      Income_Summary_Warning_Table &= "<TD WIDTH=5%></TD>" 
      Income_Summary_Warning_Table &= "<TD WIDTH=60%>"
      Income_Summary_Warning_Table &= "<P>%warning%</P>"
      Income_Summary_Warning_Table &= "</TD>"
      Income_Summary_Warning_Table &= "</TR></TABLE>"
      'Warning table
      warning_html = "<TABLE  width = 100%  BORDER = 1 CELLPADDING=5 CELLSPACING=0>"    
      warning_html &= "<COL WIDTH100%>"
      warning_html &= "<TR VALIGN=TOP>"
      warning_html &= "<TD WIDTH=100%>"
      warning_html &= "<P>" & day_list_warning() & "</P>"
      warning_html &= "</TD></TR></TABLE>"
      Income_Summary_Warning_Table = Replace(Income_Summary_Warning_Table, "%warning%", warning_html)
      'Now the html of the table to go in the first cell of the above table
      Income_summary_html = "<TABLE  width = 100% CELLPADDING=0 CELLSPACING=0>"                                    ' create a stats table 
      Income_summary_html &= "<COL WIDTH=60%>"
      Income_summary_html &= "<COL WIDTH=15%>"
      Income_summary_html &= "<COL WIDTH=10%>"
      Income_summary_html &= "<COL WIDTH=10%>"
      'Income_summary_html &= "<tr><td colspan=9><hr size=1 width=100%></td></tr>"
      'Income_summary_html &= "<tr><td colspan=9><hr size=1 width=100%></td></tr>"
      Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row() 
      Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Patients invoiced")
      Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_count))
      income_consults_today = running_total_medicare + running_total_veterans + running_total_private_paid + running_total_workcover + running_total_private_account - running_total_private_account_part_paid
      'running_total_medicare 
      '+ running_total_veterans
      '+ running_total_private_paid 
      '+ running_total_workcover 
      '+ running_total_private_account '
      ' - running_total_private_account_part_paid
      If Appointments_Not_Billed.count Then
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row() 
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Patients not invoiced")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(Appointments_Not_Billed.count))
         
      Endif
      Income_summary_html = Replace(Income_summary_html, "%billedamount%", "")
      If day_list_patients_billed_medicare_count Then                                               ' patients billed to medicare
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Billed to Medicare")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_medicare_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_medicare))
      End If   
      If day_list_patients_billed_veterans_count Then    
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Billed to Veterans")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_veterans_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_veterans))
      End If  
      If day_list_patients_billed_private_count Then     'patient took account didn't pay
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Accounts Private Patients")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_private_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_private_account))
         If running_total_private_account_part_paid Then
            Income_summary_html &= "<TR VALIGN=TOP<p style='color:red;'>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
            Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Accounts Private Patients Part Paid")
            Income_summary_html = Replace(Income_summary_html, "%data%", "")
            Income_summary_html = Replace(Income_summary_html, "%billedamount%", "(" & modUtil.Money_Format(running_total_private_account_part_paid) & ")")
         Endif
      Endif
      If day_list_patients_billed_workcover_count Then
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Accounts to Workcover")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_workcover_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_workcover))
      Endif
      If day_list_patients_paid_count Then                  
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Paid Private Patients")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_paid_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_private_paid))      
      Endif
      Income_summary_html &= "<tr><td colspan=9><hr size=1 width=100%></td></tr>"
      For Each day_list_doctor In day_list_doctors
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row() 
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Invoiced " & day_list_doctor!wholename)
         Income_summary_html = Replace(Income_summary_html, "%data%", "")
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(day_list_doctor!takings))
      Next
      Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row() 
      Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Total Invoiced for " & Format(DateChooser1.value, "dd/mm/yyyy"))
      Income_summary_html = Replace(Income_summary_html, "%data%", "")
      Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(income_consults_today))
      Income_summary_html &= "<tr><td colspan=9><hr size=1 width=100%></td></tr>"
      If day_list_patients_old_invoices_count Then
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Old Invoices Paid")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_old_invoices_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_old_invoices))
      Endif
      Print day_list_patients_billed_veterans_count, "veterans"
      Print day_list_patients_billed_medicare_count, "medicare"
      Print day_list_patients_billed_private_count, "took account"
      Print day_list_patients_billed_workcover_count, "workcover"
      Print day_list_patients_paid_count, "private, paid on the day"   
      Print day_list_patients_billed_count, " = total patients billed"
      Print day_list_patients_billed_medicare_count, " = total medicare patients billed"
      bulk_bill_percentage = ((day_list_patients_billed_medicare_count + day_list_patients_billed_veterans_count) / day_list_patients_billed_count) * 100
      Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
      Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Approx Bulk Billing Percentage")
      Income_summary_html = Replace(Income_summary_html, "%data%", Str(bulk_bill_percentage) & "%")
      Income_summary_html = Replace(Income_summary_html, "%data%", "")
      Income_summary_html = Replace(Income_summary_html, "%billedamount%", "")
      Income_summary_html &= "</TABLE>"
      sHTMl = Replace(sHTml, "%patients_seen_table%", Income_summary_html)
      sHtml = Replace(sHTML, "%mini_help_table%", day_list_warning())
   End If
   Return shtml
   
End

Public Sub Day_List_Create_HTML_to_30June16(Optional for_date As Date = Now()) As String
   
   Dim patient_visits As Collection
   Dim visit As Collection
   Dim sHtml As String
   Dim Last_fk_invoice As Variant
   Dim payment_method As Collection
   Dim x As Integer
   Dim invoices_others As New Collection
   Dim bSameInvoice As Boolean
   Dim last_fk_patient As Variant
   Dim item_numbers_total As Float
   Dim row_template As String
   Dim item_count As Integer
   Dim bOldAccount As Boolean     
   Dim visits_medicare As New Collection                  'all medicare visits seen today and invoiced today
   Dim visits_medicare_not_today As New Collection       'medicare visits invoiced today but not seen today
   Dim visits_veterans As New Collection
   Dim visits_veterans_not_today As New Collection
   Dim visits_workcover As New Collection
   Dim visits_private_account As New Collection
   Dim visits_private_other As New Collection
   Dim visits_private_today As New Collection
   Dim group_name As String
   Dim visit_subset As Collection
   Dim Income_Summary_Warning_Table As String
   Dim Income_summary_html As String
   Dim warning_html As String
   Dim income_consults_today As Float  'just for consults, not for paid bills
   Dim bIsWorkcoverInvoice As Boolean
   Dim Appointments_Not_Billed As Collection
   Dim bulk_bill_percentage As Integer
   Dim running_total_all_payments As Float
   
   day_list_patients_billed_count = 0
   day_list_patients_billed_medicare_count = 0
   day_list_patients_billed_veterans_count = 0
   day_list_patients_billed_private_count = 0
   day_list_patients_billed_workcover_count = 0
   day_list_patients_old_invoices_count = 0
   day_list_patients_billed_private_count = 0
   day_list_patients_paid_count = 0
   
   running_total = 0
   running_total_gst = 0
   running_total_medicare = 0
   running_total_veterans = 0
   running_total_workcover = 0
   running_total_old_invoices = 0
   running_total_private_paid = 0
   running_total_private_account = 0
   running_total_private_account_part_paid = 0
   payment_totals = New Float[8] 
   
   day_list_doctors = New Collection
   
   sHtml = "<HTML><BODY><H3><B><p align='center'><U>Front Desk Day Activity Sheet - Billings, Invoices and Payments For " & Format(for_date, "dd mmmm yyyy") & "</H3><u></P>"
   sHtml &= "<H3><P align='center'><B>FOR PATIENTS SEEN TODAY (%total_seen_today%)</B></P></H3>"
   sHtml &= "%income_summary_and_warning_table%"
   Appointments_Not_Billed = modBillingDBI.Days_Appointments_Not_Billed(DateChooser1.value, modDBConnect.currentUser!fk_branch) 
   If Appointments_Not_Billed.count Then
      shtml &= Appointments_Not_Billed_HTML(Appointments_Not_Billed) 
   Endif
   patient_visits = modBillingDBI.Day_List_Get(DateChooser1.value, modDBConnect.currentUser!fk_branch) ', staff[combobox1.index]!fk_staff)
   For Each visit In patient_visits
      If Last_fk_invoice <> visit!fk_invoice Then
         Last_fk_invoice = visit!fk_invoice
         bIsWorkcoverInvoice = False   
         If Not day_list_doctors.Exist(visit!fk_staff_provided_service) Then
            day_list_doctor = New Collection
            day_list_doctor!fk_staff = visit!fk_staff_provided_service
            day_list_doctor!wholename = UCase(Left(visit!staff_firstname)) & " " & modUtil.Ucase_Word_First_Letter(visit!staff_surname)
            day_list_doctor!takings = CFloat(0)
            day_list_doctors.Add(day_list_doctor, visit!fk_staff_provided_service)
         Endif
      Endif
      If Not IsNull(visit!fk_lu_bulk_billing_type) Then
         Select Case visit!fk_lu_bulk_billing_type
            Case const.BulkBilling_Type_Medicare
               If modUtil.IsSameDay(visit!visit_date, DateChooser1.value) Then
                  visits_medicare.Add(visit, visits_medicare.count)
               Else
                  visits_medicare_not_today.Add(visit, visits_medicare_not_today.count)
               End If   
            Case const.BulkBilling_Type_Veteran
               If modUtil.IsSameDay(visit!visit_date, DateChooser1.value) Then
                  visits_veterans.Add(visit, visits_veterans.count)
               Else
                  visits_veterans_not_today.Add(visit, visits_veterans_not_today.count)
               End If   
         End Select
      Else   
         If Not IsNull(visit!account_to_name) Then                                                         ' there is an account to name (could be private or workcover)
            If InStr(Lower(visit!descriptor_brief), "workcover") Or bIsWorkcoverInvoice = True Then        ' If its workcover
               If modUtil.IsSameDay(DateChooser1.value, visit!appointment_date) Or modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then   ' and the same day
                  visits_workcover.Add(visit, visits_workcover.count)                                      ' add to the workcover collection
                  bIsWorkcoverInvoice = True                                                               ' all subsequent on same invoice must be workcover 
               Else                                                                                        ' not workcover OR not on the same day
                  visits_private_other.Add(visit, visits_private_other.count)                              ' must be an account being paid (workcover or private)         
               End If
            Else                                                                                           ' not workcover must be private or insurance 
               If modUtil.IsSameDay(DateChooser1.value, visit!appointment_date) Or modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then
                  If visit!paid = True Then  
                     visits_private_today.Add(visit, visits_private_today.count)                        ' generated today? then is a private for today
                  Else
                     visits_private_account.Add(visit, visits_private_account.count)
                  End If   
               Else                                                                                        ' otherwise, must be a private on another date
                  visits_private_other.Add(visit, visits_private_other.count)
               End If   
            Endif
            
         Else                                                                                             ' there is no account name, is private
            If modUtil.IsSameDay(DateChooser1.Value, visit!appointment_date) Or modUtil.IsSameDay(DateChooser1.Value, visit!visit_date) Then   'if date is same as date-chooser
               If modUtil.IsSameDay(DateChooser1.Value, visit!visit_date) Then                            ' if visit is on that date 
                  If visit!paid = True Then                                                               ' if paid
                     If modUtil.IsSameDay(visit!visit_date, visit!date_paid) Then                         ' if paid on same day as seen
                        visits_private_today.Add(visit, visits_private_today.count)                       ' is a private paid today
                     Else
                        visits_private_other.Add(visit, visits_private_other.count)                       ' wasn't paid on same day as visit - hence is payment for old account                '    
                     End If  
                  Else                                                                                    'else wasn't paid today
                     visits_private_account.Add(visit, visits_private_account.count)                      'must have taken the account
                  End If   
               End If   
            Else                                                                                           'Visit_date or appointment_date <> the datechooser date
               'must be an old invoice
               If visit!payments.count Then                                                               ' if paid
                  visits_private_other.Add(visit, visits_private_other.count)
               Else
                  visits_private_account.Add(visit, visits_private_account.count) 
               End If 
            End If   
         End If
      End If   
   Next
   If visits_medicare.count Then
      shtml &= visit_create_html_bulk_billing(visits_medicare, "Medicare") 
   Endif
   
   If visits_veterans.count Then 
      shtml &= visit_create_html_bulk_billing(visits_veterans, "Veterans") 
   Endif
   If visits_workcover.count Then
      shtml &= visit_type_create_html(visits_workcover, "Workcover") 
   Endif
   If visits_private_account.count Then
      shtml &= visit_type_create_html(visits_private_account, "Private Account") 
   Endif
   If visits_private_today.count Then
      shtml &= visit_type_create_html(visits_private_today, "Private Paid") 
   Endif
   
   '---------------------------------------------------------------------------------------
   'Now add a table which summarizes amounts for Cash, Cheques, EFPos or EFT (direct debit)
   '---------------------------------------------------------------------------------------
   If visits_medicare_not_today.count Or visits_private_other.count Or visits_veterans_not_today.count Then
      sHtml &= "<HR><H3><P align='center'><b>FOR PATIENTS NOT SEEN TODAY</b></P></H3>" 
      If visits_medicare_not_today.count Then
         shtml &= visit_create_html_bulk_billing(visits_medicare_not_today, "Medicare Not Seen Today")
      Endif
      If visits_veterans_not_today.count Then
         shtml &= visit_create_html_bulk_billing(visits_veterans_not_today, "Veterans Not Seen Today")
      Endif
      If visits_private_other.count Then
         shtml &= visit_type_create_html(visits_private_other, "Old Account") 
      Endif
   End If   
   sHtml &= "<HR><P><B><H3>Money Taken</B></H3></P>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=212>"
   "<COL WIDTH=208>"
   For Each payment_method In payment_methods           'the pk's in this collection are not in order 1>5
      If payment_method!pk <> const.payment_method_bad_debt Then   
         shtml &= "<TR VALIGN=TOP>"
         shtml &= totals_html_row_template()
         shtml = Replace(shtml, "%payment_method%", UCase(payment_method!method))
         shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(payment_totals[payment_method!pk]))
         running_total_all_payments += modUtil.MoneyToFloat(payment_totals[payment_method!pk])
         sHtml &= "</TR>"
      End If   
   Next
   shtml &= totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "")
   shtml = Replace(shtml, "%total_amount%", "")
   sHtml &= "</TR>"
   shtml &= totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "Total (Including GST)")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(running_total_all_payments))
   sHtml &= "</TR>"
   shtml &= totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "Total GST")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(running_total_gst))
   sHtml &= "</TR>"
   sHtml &= "</TABLE>"
   If day_list_patients_billed_count Then                                                           ' if patient's seen today
      sHtml = Replace(shtml, "%total_seen_today%", Str(Appointments_Not_Billed.Count + day_list_patients_billed_count))
      'First create a two column table the left part holds the income, the right the warning
      Income_Summary_Warning_Table = "<TABLE  width = 100% CELLPADDING=0 CELLSPACING=0>"         
      Income_Summary_Warning_Table &= "<COL WIDTH=35%>"
      Income_Summary_Warning_Table &= "<COL WIDTH=5%>"
      Income_Summary_Warning_Table &= "<COL WIDTH=60%>"
      Income_Summary_Warning_Table &= "<TR VALIGN=TOP>"
      Income_Summary_Warning_Table &= "<TD WIDTH=35%>"
      Income_Summary_Warning_Table &= "<P>%income_summary_html%</P>"
      Income_Summary_Warning_Table &= "</TD>"
      Income_Summary_Warning_Table &= "<TD WIDTH=5%></TD>" 
      Income_Summary_Warning_Table &= "<TD WIDTH=60%>"
      Income_Summary_Warning_Table &= "<P>%warning%</P>"
      Income_Summary_Warning_Table &= "</TD>"
      Income_Summary_Warning_Table &= "</TR></TABLE>"
      'Warning table
      warning_html = "<TABLE  width = 100%  BORDER = 1 CELLPADDING=5 CELLSPACING=0>"    
      warning_html &= "<COL WIDTH100%>"
      warning_html &= "<TR VALIGN=TOP>"
      warning_html &= "<TD WIDTH=100%>"
      warning_html &= "<P>" & day_list_warning() & "</P>"
      warning_html &= "</TD></TR></TABLE>"
      Income_Summary_Warning_Table = Replace(Income_Summary_Warning_Table, "%warning%", warning_html)
      'Now the html of the table to go in the first cell of the above table
      Income_summary_html = "<TABLE  width = 100% CELLPADDING=0 CELLSPACING=0>"                                    ' create a stats table 
      Income_summary_html &= "<COL WIDTH=60%>"
      Income_summary_html &= "<COL WIDTH=15%>"
      Income_summary_html &= "<COL WIDTH=10%>"
      Income_summary_html &= "<COL WIDTH=10%>"
      Income_summary_html &= "<tr><td colspan=9><hr size=1 width=100%></td></tr>"
      Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row() 
      Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Patients invoiced")
      Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_count))
      income_consults_today = running_total_medicare + running_total_veterans + running_total_private_paid + running_total_workcover + running_total_private_account - running_total_private_account_part_paid
      'running_total_medicare 
      '+ running_total_veterans
      '+ running_total_private_paid 
      '+ running_total_workcover 
      '+ running_total_private_account '
      ' - running_total_private_account_part_paid
      If Appointments_Not_Billed.count Then
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row() 
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Patients not invoiced")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(Appointments_Not_Billed.count))
         
      Endif
      Income_summary_html = Replace(Income_summary_html, "%billedamount%", "")
      If day_list_patients_billed_medicare_count Then                                               ' patients billed to medicare
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Billed to Medicare")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_medicare_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_medicare))
      End If   
      If day_list_patients_billed_veterans_count Then    
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Billed to Veterans")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_veterans_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_veterans))
      End If  
      If day_list_patients_billed_private_count Then     'patient took account didn't pay
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Accounts Private Patients")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_private_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_private_account))
         If running_total_private_account_part_paid Then
            Income_summary_html &= "<TR VALIGN=TOP<p style='color:red;'>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
            Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Accounts Private Patients Part Paid")
            Income_summary_html = Replace(Income_summary_html, "%data%", "")
            Income_summary_html = Replace(Income_summary_html, "%billedamount%", "(" & modUtil.Money_Format(running_total_private_account_part_paid) & ")")
         Endif
      Endif
      If day_list_patients_billed_workcover_count Then
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Accounts to Workcover")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_workcover_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_workcover))
      Endif
      If day_list_patients_paid_count Then                  
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Paid Private Patients")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_paid_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_private_paid))      
      Endif
      Income_summary_html &= "<tr><td colspan=9><hr size=1 width=100%></td></tr>"
      For Each day_list_doctor In day_list_doctors
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row() 
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Invoiced " & day_list_doctor!wholename)
         Income_summary_html = Replace(Income_summary_html, "%data%", "")
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(day_list_doctor!takings))
      Next
      Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row() 
      Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Total Invoiced for " & Format(DateChooser1.value, "dd/mm/yyyy"))
      Income_summary_html = Replace(Income_summary_html, "%data%", "")
      Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(income_consults_today))
      Income_summary_html &= "<tr><td colspan=9><hr size=1 width=100%></td></tr>"
      If day_list_patients_old_invoices_count Then
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Old Invoices Paid")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_old_invoices_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_old_invoices))
      Endif
      Print day_list_patients_billed_veterans_count, "veterans"
      Print day_list_patients_billed_medicare_count, "medicare"
      Print day_list_patients_billed_private_count, "took account"
      Print day_list_patients_billed_workcover_count, "workcover"
      Print day_list_patients_paid_count, "private, paid on the day"   
      Print day_list_patients_billed_count, " = total patients billed"
      Print day_list_patients_billed_medicare_count, " = total medicare patients billed"
      Print (15 / 25) * 100
      bulk_bill_percentage = ((day_list_patients_billed_medicare_count + day_list_patients_billed_veterans_count) / day_list_patients_billed_count) * 100
      Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
      Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Approx Bulk Billing Percentage")
      ' Income_summary_html = Replace(Income_summary_html, "%data%", Str(bulk_bill_percentage) & "%")
      Income_summary_html = Replace(Income_summary_html, "%data%", "")
      Income_summary_html = Replace(Income_summary_html, "%billedamount%", "")
      Income_summary_html &= "</TABLE>"
      Income_Summary_Warning_Table = Replace(Income_Summary_Warning_Table, "%income_summary_html%", Income_summary_html)
      shtml = Replace(shtml, "%income_summary_and_warning_table%", Income_Summary_Warning_Table)
   Else
      shtml = Replace(shtml, "%income_summary_and_warning_table%", "")
   End If
   Return shtml
   
End

Public Sub Day_List_Create_HTML_to29june16(Optional for_date As Date = Now()) As String
   
   Dim patient_visits As Collection
   Dim visit As Collection
   Dim sHtml As String
   Dim Last_fk_invoice As Variant
   Dim payment_method As Collection
   Dim x As Integer
   Dim invoices_others As New Collection
   Dim bSameInvoice As Boolean
   Dim last_fk_patient As Variant
   Dim item_numbers_total As Float
   Dim row_template As String
   Dim item_count As Integer
   Dim bOldAccount As Boolean     
   Dim visits_medicare As New Collection                  'all medicare visits seen today and invoiced today
   Dim visits_medicare_not_today As New Collection       'medicare visits invoiced today but not seen today
   Dim visits_veterans As New Collection
   Dim visits_veterans_not_today As New Collection
   Dim visits_workcover As New Collection
   Dim visits_private_account As New Collection
   Dim visits_private_other As New Collection
   Dim visits_private_today As New Collection
   Dim group_name As String
   Dim visit_subset As Collection
   Dim Income_Summary_Warning_Table As String
   Dim Income_summary_html As String
   Dim warning_html As String
   Dim income_consults_today As Float  'just for consults, not for paid bills
   Dim bIsWorkcoverInvoice As Boolean
   Dim Appointments_Not_Billed As Collection
   Dim bulk_bill_percentage As Integer
   Dim running_total_all_payments As Float
   
   day_list_patients_billed_count = 0
   day_list_patients_billed_medicare_count = 0
   day_list_patients_billed_veterans_count = 0
   day_list_patients_billed_private_count = 0
   day_list_patients_billed_workcover_count = 0
   day_list_patients_old_invoices_count = 0
   day_list_patients_billed_private_count = 0
   day_list_patients_paid_count = 0
   
   running_total = 0
   running_total_gst = 0
   running_total_medicare = 0
   running_total_veterans = 0
   running_total_workcover = 0
   running_total_old_invoices = 0
   running_total_private_paid = 0
   running_total_private_account = 0
   running_total_private_account_part_paid = 0
   payment_totals = New Float[8] 
   
   day_list_doctors = New Collection
   
   sHtml = "<HTML><BODY><H3><B><p align='center'<UL>Front Desk Day Activity Sheet - Billings, Invoices and Payments For " & Format(for_date, "dd mmmm yyyy") & "</H3></P>"
   sHtml &= "<B>FOR PATIENTS SEEN TODAY (%total_seen_today%):</B><BR>"
   sHtml &= "%income_summary_and_warning_table%"
   Appointments_Not_Billed = modBillingDBI.Days_Appointments_Not_Billed(DateChooser1.value, modDBConnect.currentUser!fk_branch) 
   If Appointments_Not_Billed.count Then
      shtml &= Appointments_Not_Billed_HTML(Appointments_Not_Billed) 
   Endif
   patient_visits = modBillingDBI.Day_List_Get(DateChooser1.value, modDBConnect.currentUser!fk_branch) ', staff[combobox1.index]!fk_staff)
   For Each visit In patient_visits
      If Last_fk_invoice <> visit!fk_invoice Then
         Last_fk_invoice = visit!fk_invoice
         bIsWorkcoverInvoice = False   
         If Not day_list_doctors.Exist(visit!fk_staff_provided_service) Then
            day_list_doctor = New Collection
            day_list_doctor!fk_staff = visit!fk_staff_provided_service
            day_list_doctor!wholename = UCase(Left(visit!staff_firstname)) & " " & modUtil.Ucase_Word_First_Letter(visit!staff_surname)
            day_list_doctor!takings = CFloat(0)
            day_list_doctors.Add(day_list_doctor, visit!fk_staff_provided_service)
         Endif
      Endif
      If Not IsNull(visit!fk_lu_bulk_billing_type) Then
         Select Case visit!fk_lu_bulk_billing_type
            Case const.BulkBilling_Type_Medicare
               If modUtil.IsSameDay(visit!visit_date, DateChooser1.value) Then
                  visits_medicare.Add(visit, visits_medicare.count)
               Else
                  visits_medicare_not_today.Add(visit, visits_medicare_not_today.count)
               End If   
            Case const.BulkBilling_Type_Veteran
               If modUtil.IsSameDay(visit!visit_date, DateChooser1.value) Then
                  visits_veterans.Add(visit, visits_veterans.count)
               Else
                  visits_veterans_not_today.Add(visit, visits_veterans_not_today.count)
               End If   
         End Select
      Else   
         If Not IsNull(visit!account_to_name) Then                                                         ' there is an account to name (could be private or workcover)
            If InStr(Lower(visit!descriptor_brief), "workcover") Or bIsWorkcoverInvoice = True Then        ' If its workcover
               If modUtil.IsSameDay(DateChooser1.value, visit!appointment_date) Or modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then   ' and the same day
                  visits_workcover.Add(visit, visits_workcover.count)                                      ' add to the workcover collection
                  bIsWorkcoverInvoice = True                                                               ' all subsequent on same invoice must be workcover 
               Else                                                                                        ' not workcover OR not on the same day
                  visits_private_other.Add(visit, visits_private_other.count)                              ' must be an account being paid (workcover or private)         
               End If
            Else                                                                                           ' not workcover must be private or insurance 
               If modUtil.IsSameDay(DateChooser1.value, visit!appointment_date) Or modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then
                  If visit!paid = True Then  
                     visits_private_today.Add(visit, visits_private_today.count)                        ' generated today? then is a private for today
                  Else
                     visits_private_account.Add(visit, visits_private_account.count)
                  End If   
               Else                                                                                        ' otherwise, must be a private on another date
                  visits_private_other.Add(visit, visits_private_other.count)
               End If   
            Endif
            
         Else                                                                                             ' there is no account name, is private
            If modUtil.IsSameDay(DateChooser1.Value, visit!appointment_date) Or modUtil.IsSameDay(DateChooser1.Value, visit!visit_date) Then   'if date is same as date-chooser
               If modUtil.IsSameDay(DateChooser1.Value, visit!visit_date) Then                            ' if visit is on that date 
                  If visit!paid = True Then                                                               ' if paid
                     If modUtil.IsSameDay(visit!visit_date, visit!date_paid) Then                         ' if paid on same day as seen
                        visits_private_today.Add(visit, visits_private_today.count)                       ' is a private paid today
                     Else
                        visits_private_other.Add(visit, visits_private_other.count)                       ' wasn't paid on same day as visit - hence is payment for old account                '    
                     End If  
                  Else                                                                                    'else wasn't paid today
                     visits_private_account.Add(visit, visits_private_account.count)                      'must have taken the account
                  End If   
               End If   
            Else                                                                                           'Visit_date or appointment_date <> the datechooser date
               'must be an old invoice
               If visit!payments.count Then                                                               ' if paid
                  visits_private_other.Add(visit, visits_private_other.count)
               Else
                  visits_private_account.Add(visit, visits_private_account.count) 
               End If 
            End If   
         End If
      End If   
   Next
   Print day_list_patients_billed_count
   If visits_medicare.count Then
      shtml &= visit_create_html_bulk_billing(visits_medicare, "Medicare") 
   Endif
   If visits_medicare_not_today.count Then
      shtml &= visit_create_html_bulk_billing(visits_medicare_not_today, "Medicare Not Seen Today")
   Endif
   If visits_veterans.count Then 
      shtml &= visit_create_html_bulk_billing(visits_veterans, "Veterans") 
   Endif
   If visits_workcover.count Then
      shtml &= visit_type_create_html(visits_workcover, "Workcover") 
   Endif
   If visits_private_account.count Then
      shtml &= visit_type_create_html(visits_private_account, "Private Account") 
   Endif
   If visits_private_today.count Then
      shtml &= visit_type_create_html(visits_private_today, "Private Paid") 
   Endif
   If visits_private_other.count Then
      shtml &= visit_type_create_html(visits_private_other, "Old Account") 
   Endif
   '---------------------------------------------------------------------------------------
   'Now add a table which summarizes amounts for Cash, Cheques, EFPos or EFT (direct debit)
   '---------------------------------------------------------------------------------------
   sHtml &= "<HR><P><B><H3>Money Taken</B></H3></P>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=212>"
   "<COL WIDTH=208>"
   For Each payment_method In payment_methods           'the pk's in this collection are not in order 1>5
      If payment_method!pk <> const.payment_method_bad_debt Then   
         shtml &= "<TR VALIGN=TOP>"
         shtml &= totals_html_row_template()
         shtml = Replace(shtml, "%payment_method%", UCase(payment_method!method))
         shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(payment_totals[payment_method!pk]))
         running_total_all_payments += modUtil.MoneyToFloat(payment_totals[payment_method!pk])
         sHtml &= "</TR>"
      End If   
   Next
   shtml &= totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "")
   shtml = Replace(shtml, "%total_amount%", "")
   sHtml &= "</TR>"
   shtml &= totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "Total (Including GST)")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(running_total_all_payments))
   sHtml &= "</TR>"
   shtml &= totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "Total GST")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(running_total_gst))
   sHtml &= "</TR>"
   sHtml &= "</TABLE>"
   If day_list_patients_billed_count Then                                                           ' if patient's seen today
      sHtml = Replace(shtml, "%total_seen_today%", Str(Appointments_Not_Billed.Count + day_list_patients_billed_count))
      'First create a two column table the left part holds the income, the right the warning
      Income_Summary_Warning_Table = "<TABLE  width = 100% CELLPADDING=0 CELLSPACING=0>"         
      Income_Summary_Warning_Table &= "<COL WIDTH=35%>"
      Income_Summary_Warning_Table &= "<COL WIDTH=5%>"
      Income_Summary_Warning_Table &= "<COL WIDTH=60%>"
      Income_Summary_Warning_Table &= "<TR VALIGN=TOP>"
      Income_Summary_Warning_Table &= "<TD WIDTH=35%>"
      Income_Summary_Warning_Table &= "<P>%income_summary_html%</P>"
      Income_Summary_Warning_Table &= "</TD>"
      Income_Summary_Warning_Table &= "<TD WIDTH=5%></TD>" 
      Income_Summary_Warning_Table &= "<TD WIDTH=60%>"
      Income_Summary_Warning_Table &= "<P>%warning%</P>"
      Income_Summary_Warning_Table &= "</TD>"
      Income_Summary_Warning_Table &= "</TR></TABLE>"
      'Warning table
      warning_html = "<TABLE  width = 100%  BORDER = 1 CELLPADDING=5 CELLSPACING=0>"    
      warning_html &= "<COL WIDTH100%>"
      warning_html &= "<TR VALIGN=TOP>"
      warning_html &= "<TD WIDTH=100%>"
      warning_html &= "<P>" & day_list_warning() & "</P>"
      warning_html &= "</TD></TR></TABLE>"
      Income_Summary_Warning_Table = Replace(Income_Summary_Warning_Table, "%warning%", warning_html)
      'Now the html of the table to go in the first cell of the above table
      Income_summary_html = "<TABLE  width = 100% CELLPADDING=0 CELLSPACING=0>"                                    ' create a stats table 
      Income_summary_html &= "<COL WIDTH=60%>"
      Income_summary_html &= "<COL WIDTH=15%>"
      Income_summary_html &= "<COL WIDTH=10%>"
      Income_summary_html &= "<COL WIDTH=10%>"
      Income_summary_html &= "<tr><td colspan=9><hr size=1 width=100%></td></tr>"
      Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row() 
      Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Patients invoiced")
      Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_count))
      income_consults_today = running_total_medicare + running_total_veterans + running_total_private_paid + running_total_workcover + running_total_private_account - running_total_private_account_part_paid
      'running_total_medicare 
      '+ running_total_veterans
      '+ running_total_private_paid 
      '+ running_total_workcover 
      '+ running_total_private_account '
      ' - running_total_private_account_part_paid
      If Appointments_Not_Billed.count Then
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row() 
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Patients not invoiced")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(Appointments_Not_Billed.count))
         
      Endif
      Income_summary_html = Replace(Income_summary_html, "%billedamount%", "")
      If day_list_patients_billed_medicare_count Then                                               ' patients billed to medicare
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Billed to Medicare")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_medicare_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_medicare))
      End If   
      If day_list_patients_billed_veterans_count Then    
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Billed to Veterans")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_veterans_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_veterans))
      End If  
      If day_list_patients_billed_private_count Then     'patient took account didn't pay
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Accounts Private Patients")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_private_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_private_account))
         If running_total_private_account_part_paid Then
            Income_summary_html &= "<TR VALIGN=TOP<p style='color:red;'>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
            Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Accounts Private Patients Part Paid")
            Income_summary_html = Replace(Income_summary_html, "%data%", "")
            Income_summary_html = Replace(Income_summary_html, "%billedamount%", "(" & modUtil.Money_Format(running_total_private_account_part_paid) & ")")
         Endif
      Endif
      If day_list_patients_billed_workcover_count Then
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Accounts to Workcover")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_billed_workcover_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_workcover))
      Endif
      If day_list_patients_paid_count Then                  
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Paid Private Patients")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_paid_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_private_paid))      
      Endif
      Income_summary_html &= "<tr><td colspan=9><hr size=1 width=100%></td></tr>"
      For Each day_list_doctor In day_list_doctors
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row() 
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Invoiced " & day_list_doctor!wholename)
         Income_summary_html = Replace(Income_summary_html, "%data%", "")
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(day_list_doctor!takings))
      Next
      Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row() 
      Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Total Invoiced for " & Format(DateChooser1.value, "dd/mm/yyyy"))
      Income_summary_html = Replace(Income_summary_html, "%data%", "")
      Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(income_consults_today))
      Income_summary_html &= "<tr><td colspan=9><hr size=1 width=100%></td></tr>"
      If day_list_patients_old_invoices_count Then
         Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
         Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Old Invoices Paid")
         Income_summary_html = Replace(Income_summary_html, "%data%", Str(day_list_patients_old_invoices_count))
         Income_summary_html = Replace(Income_summary_html, "%billedamount%", modUtil.Money_Format(running_total_old_invoices))
      Endif
      Print day_list_patients_billed_veterans_count, "veterans"
      Print day_list_patients_billed_medicare_count, "medicare"
      Print day_list_patients_billed_private_count, "took account"
      Print day_list_patients_billed_workcover_count, "workcover"
      Print day_list_patients_paid_count, "private, paid on the day"   
      Print day_list_patients_billed_count, " = total patients billed"
      Print day_list_patients_billed_medicare_count, " = total medicare patients billed"
      Print (15 / 25) * 100
      bulk_bill_percentage = ((day_list_patients_billed_medicare_count + day_list_patients_billed_veterans_count) / day_list_patients_billed_count) * 100
      Income_summary_html &= "<TR VALIGN=TOP>" & Day_List_Heading_Stats_Row()                       ' patients billed to repat
      Income_summary_html = Replace(Income_summary_html, "%rowheader%", "Approx Bulk Billing Percentage")
      Income_summary_html = Replace(Income_summary_html, "%data%", Str(bulk_bill_percentage) & "%")
      Income_summary_html = Replace(Income_summary_html, "%billedamount%", "")
      Income_summary_html &= "</TABLE>"
      Income_Summary_Warning_Table = Replace(Income_Summary_Warning_Table, "%income_summary_html%", Income_summary_html)
      shtml = Replace(shtml, "%income_summary_and_warning_table%", Income_Summary_Warning_Table)
   Else
      shtml = Replace(shtml, "%income_summary_and_warning_table%", "")
   End If
   Return shtml
   
End

Public Function day_list_warning() As String
   
   Dim sMsg As String
   
   smsg = ""
   "<UL>"
   "<LI>All workcover item number brief descriptors must contain the text 'workcover'"
   " otherwise they will not be grouped correctly."
   "<LI>Any consultations for the day not yet billed will not be reflected in the tables and statistics"
   " for example consultations which are awaiting histology before billings."
   "<LI>Similarly, the bulk billing precentage will not be accurate until all consultations for the day "
   "have been billed."
   "</UL"
   Return sMsg 
   
End

Public Function row_template_appointments_not_billed(Optional bMergeCols As Boolean = False) As String   
   
   Dim row_html As String
   
   If bmergeCols = True Then
      row_html = "<td colspan='2'>%table_heading%</td>"
   Else
      row_html =
         "<TD WIDTH=1%>"
      "   <P>%time%</P>"
      "</TD>"
      "<TD WIDTH=5%>"
      "   <P>%patient%</P>"
      "</TD>"
   End If   
   row_html &= ""
   "<TD WIDTH=5%>"
   "   <P>%doctor%</P>"
   "</TD>"
   "<TD WIDTH=20%>"
   "   <P>%comment_or_reason_not_billed%</P>"
   "</TD>"
   
   Return row_html
   
End

Public Function Appointments_Not_Billed_HTML(Appointments_Not_Billed As Collection) As String
   
   Dim visit As Collection
   Dim sHtml As String
   Dim row_template As String
   Dim scomment As String
   
   row_template = row_template_appointments_not_billed(True)
   sHtml = "<BR><TABLE WIDTH=100% CELLPADDING=3 CELLSPACING=0>"
   "<COL WIDTH=1%>"
   "<COL WIDTH=5%>"
   "<COL WIDTH=5%>"
   "<COL WIDTH=20%>"
   sHtml &= "<TR VALIGN=TOP style= 'background-color:gainsboro;color:black;'>" & row_template & "</TR>"
   sHtml = Replace(shtml, "%table_heading%", "<B>PATIENTS NOT BILLED</B>")
   shtml = Replace(shtml, "%time%", "")
   shtml = Replace(shtml, "%patient%", "")
   shtml = Replace(shtml, "%doctor%", "Booked For")
   shtml = Replace(shtml, "%comment_or_reason_not_billed%", "Comment")
   For Each visit In Appointments_Not_Billed
      scomment = ""
      row_template = row_template_appointments_not_billed()
      sHtml &= "<TR VALIGN=TOP>" & row_template & "</TR>"
      shtml = Replace(shtml, "%time%", Format(Time(visit!appointment_date), "hh:nn"))
      shtml = Replace(shtml, "%patient%", visit!patient_wholename) 'if not, print name
      sHtml = Replace(sHtml, "%doctor%", UCase(Left(visit!staff_firstname)) & " " & modUtil.Ucase_Word_First_Letter(visit!staff_surname))
      If visit!fk_lu_appointment_status = const.Appointment_Status_booked Then
         sComment = "Booked - appointment not actioned ?status"
      Else If visit!fk_lu_appointment_status = const.Appointment_Status_Did_Not_Arrive Then
         sComment = "Patient did not arrive"
      Else
         If Not IsNull(visit!comment_for_billing) Then
            scomment = visit!comment_for_billing
         Endif
         If Not IsNull(visit!reason_not_billed) Then
            scomment &= " " & visit!reason_not_billed
         End If  
      End If   
      shtml = Replace(shtml, "%comment_or_reason_not_billed%", scomment) 
   Next
   shtml &= "</TABLE>"
   Return shtml
   
End

Public Function visit_type_create_html(visit_subset As Collection, group_name As String) As String
   'Note the Caveat to bInvoiceIsWorkcover:
   '  - the workcover item number must contain the text 'workcover' eg AA020 'level BStandard Workcover Consultation'
   '  - then it is considered all subsequent items on that invoice pertain to workcover, not private billing
   
   Dim patient_visits As Collection
   Dim visit As Collection
   Dim item_number As String
   Dim sHtml As String
   Dim Last_fk_invoice As Variant
   Dim ipatientCount As Integer
   Dim running_total As Float
   Dim payment_method As Collection
   Dim all_payment_methods As String
   Dim x As Integer
   Dim invoices_others As New Collection
   Dim bSameInvoice As Boolean
   Dim last_fk_patient As Variant
   'Dim income_generated As Float
   Dim item_numbers_total As Float
   Dim row_template As String
   Dim item_count As Integer
   Dim bOldAccount As Boolean                'If true user is paying an old account
   Dim bInvoiceIsWorkcover As Boolean         'True if the first item is a workcover item, then applies to all items on invoice
   Dim bInvoiceisPrivate As Boolean
   Dim bmergeCols As Boolean = True 
   Dim total_paid_all_items_on_invoice As Float
   Dim payment As Collection
   Dim bad_debt As Float
   Dim part_payment_of_invoice As Float
   
   Select Case group_name
      Case "Medicare", "Veterans", "Medicare Not Seen Today"
         row_template = day_list_html_row_template_Bulk_Bill(bmergeCols)
         sHtml = "<BR><TABLE WIDTH=100% CELLPADDING=3 CELLSPACING=0>"
         "<COL WIDTH=1%>"
         "<COL WIDTH=5%>"
         "<COL WIDTH=5%>"
         "<COL WIDTH=4%>"
         "<COL WIDTH=3%>"
         "<COL WIDTH=2%>"
         "<TD WIDTH=2%>"
         ""
         sHtml &= "<TR VALIGN=TOP style= 'background-color:gainsboro;color:black;'>" & row_template & "</TR>"
         sHtml = Replace(shtml, "%table_heading%", "<B>BILLED " & UCase(group_name) & "</B>")
         shtml = Replace(shtml, "%time%", "")
         shtml = Replace(shtml, "%patient%", "")
         shtml = Replace(shtml, "%doctor%", "")
         shtml = Replace(shtml, "%item%", "<B>Item(s)</B>")
         shtml = Replace(shtml, "%notes%", "<B>Notes</B>")
         shtml = Replace(shtml, "%amount%", "<B>Fee(s)</B>")
         shtml = Replace(shtml, "%total%", "<B>Total</B>")
         row_template = day_list_html_row_template_Bulk_Bill() 'no merge cols
      Case "Workcover", "Insurance"
         row_template = day_list_html_row_template_Workcover_Insurance(bmergeCols)
         sHtml &= "<BR><TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=0>"
         sHtml &= "<TR VALIGN=TOP style= 'background-color:gainsboro;color:black;'>" & row_template & "</TR>"
         sHtml = Replace(shtml, "%table_heading%", "<B>BILLED TO " & UCase(group_name) & "</B>")
         shtml = Replace(shtml, "%time%", "")
         shtml = Replace(shtml, "%patient%", "")
         shtml = Replace(shtml, "%doctor%", "")
         shtml = Replace(shtml, "%payee%", "<B>Payee</B>")
         shtml = Replace(shtml, "%item%", "<B>Item(s)</B>")
         shtml = Replace(shtml, "%notes%", "<B>Notes</B>")
         shtml = Replace(shtml, "%amount%", "<B>Fee(s)</B>")
         shtml = Replace(shtml, "%tax%", "<B>Tax</B>")
         shtml = Replace(shtml, "%total%", "<B>Total</B>")
         shtml = Replace(shtml, "%paid%", "<B>Paid</B>") 
         shtml = Replace(shtml, "%paymentmethod%", "") 
         row_template = day_list_html_row_template_Workcover_Insurance() 
      Case "Private Paid", "Old Account", "Private Account"
         row_template = day_list_html_row_template_Non_Bulk_Bill(bmergeCols)
         sHtml &= "<BR><TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=0>"
         sHtml &= "<TR VALIGN=TOP style= 'background-color:gainsboro;color:black;'>" & row_template & "</TR>"
         Select Case group_name  
            Case "Private Paid" 
               sHtml = Replace(shtml, "%table_heading%", "<B>PRIVATE - PAID TODAY </B>")
            Case "Old Account"
               sHtml = Replace(shtml, "%table_heading%", "<B>PAID OLD ACCOUNTS</B>")
            Case "Private Account"
               sHtml = Replace(shtml, "%table_heading%", "<B>PRIVATE - ACCOUNTS</B>")
         End Select
         shtml = Replace(shtml, "%doctor%", "")
         shtml = Replace(shtml, "%payee%", "<B>Payee</B>")
         shtml = Replace(shtml, "%item%", "<B>Item(s)</B>")
         shtml = Replace(shtml, "%notes%", "<B>Notes</B>")
         shtml = Replace(shtml, "%amount%", "<B>Fee(s)</B>")
         shtml = Replace(shtml, "%tax%", "<B>Tax</B>")
         shtml = Replace(shtml, "%total%", "<B>Total</B>")
         shtml = Replace(shtml, "%paid%", "<B>Paid</B>") 
         shtml = Replace(shtml, "%paymentmethod%", "") 
         If group_name = "Old Account" Then bOldAccount = True   
         row_template = day_list_html_row_template_Non_Bulk_Bill() 'no merging for subsequent rows  
   End Select
   
   For Each visit In visit_subset
      If Last_fk_invoice <> visit!fk_invoice Then
         bad_debt = 0
         For x = 1 To 5                     'fixme - guessing won't have more than 5 items a consult, make a variable and keep count of max
            sHtml = Replace(shtml, "%item%" & Str(x), "")
            sHtml = Replace(shtml, "%amount%" & Str(x), "")
         Next
         If item_numbers_total <> 0 Then  
            sHtml = Replace(shtml, "%total%", modUtil.Money_Format(item_numbers_total))
            item_numbers_total = 0
         End If   
         sHtml &= "<TR VALIGN=TOP>" & row_template & "</TR>"
         If bOldAccount Then shtml = Replace(shtml, "%time%", Format(visit!visit_date, "dd/mm/yyyy"))
         
         If Not IsNull(visit!appointment_date) Then   
            shtml = Replace(shtml, "%time%", Format(Time(visit!appointment_date), "hh:nn"))
         Else
            shtml = Replace(shtml, "%time%", "")
         End If   
         shtml = Replace(shtml, "%patient%", visit!wholename) 'if not, print name
         If group_name = "Private Account" Then
            If Not modUtil.IsSameDay(visit!visit_date, DateChooser1.Value) Then
               shtml = Replace(shtml, "%notes%", "seen on " & Format(visit!visit_date, "dd/mm/yyyy"))
            Endif
         Endif
         If Not IsNull(visit!notes) Then
            If group_name <> "Medicare Not Seen Today" Then
               shtml = Replace(shtml, "%notes%", visit!notes)
            Else
               shtml = Replace(shtml, "%notes%", "seen on " & Format(visit!visit_date, "dd/mm/yyyy"))
            End If   
         Else
            If group_name <> "Medicare Not Seen Today" Then
               shtml = Replace(shtml, "%notes%", "")
            Else
               shtml = Replace(shtml, "%notes%", "seen on " & Format(visit!visit_date, "dd/mm/yyyy"))
            End If   
         End If   
         
         If Not IsNull(visit!account_to_name) And IsNull(visit!fk_lu_bulk_billing_type) Then 'a patient eg child with responsible adult has an account to name
            invoices_others.Add(visit, invoices_others.count)                                'but could have been bulk billed
         Endif
         Print group_name
         If group_name <> "Medicare Not Seen Today" And group_name <> "Old Account" Then   
            Print group_name
            If modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then
               Inc day_list_patients_billed_count
            End If   
         End If   
         Last_fk_invoice = visit!fk_invoice
         last_fk_patient = visit!fk_patient
         item_count = 0
         bSameInvoice = False 
         bInvoiceIsWorkcover = False   
         bInvoiceisPrivate = False  
      Else
         shtml = Replace(shtml, "%time%", "")
         shtml = Replace(shtml, "%patient%", "") 
         shtml = Replace(shtml, "%notes%", "") 
         bSameInvoice = True
         Inc item_count
      End If   
      sHtml = Replace(sHtml, "%doctor%", UCase(Left(visit!staff_firstname)) & " " & modUtil.Ucase_Word_First_Letter(visit!staff_surname))
      
      If Not IsNull(visit!fk_lu_bulk_billing_type) Then                                    ' First is it a bulk billed visit
         Select Case visit!fk_lu_bulk_billing_type                                         ' if so what type
            Case const.BulkBilling_Type_Medicare                                           ' its medicare
               running_total_medicare += modUtil.MoneyToFloat(visit!amount)                ' increase running total of income from medicare
               If Not bSameInvoice Then                                                    ' if a new invoice 
                  If modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then          ' if its the same date as the datechooser
                     Inc day_list_patients_billed_medicare_count                           ' increment the count of medicare patients billed
                  Else
                     Inc day_list_patients_billed_medicare_not_today_count
                  End If   
               End If   
            Case const.BulkBilling_Type_Veteran                                            ' ditto for veterans
               running_total_veterans += modUtil.MoneyToFloat(visit!amount)
               If Not bSameInvoice Then 
                  If modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then       
                     Inc day_list_patients_billed_veterans_count
                  Else
                     Inc day_list_patients_billed_veterans_not_today_count
                  End If
               End If   
         End Select
      Else          
         ' not a bulk billed visit becomes a little harder
         ' e.g account_to_name may not be that of the patient, it may be a relative, may be a workcover or insurance company
         ' to be absolutely sure its workcover, need (currently) to have a descriptor brief for workcover numbers fixme check against item numbers
         ' also, if staff don't put the first workcover consult item on the top of list this will fail
         If Not IsNull(visit!account_to_name) Then                                         ' If account not to medicare veterans, and has a name
            If InStr(Lower(visit!descriptor_brief), "workcover") Then                      ' first item is workcover
               shtml = Replace(shtml, "%payee%", visit!account_to_name & " (Workcover)")   ' payee = company name + (workcover)
               bInvoiceIsWorkcover = True                                                  ' rest of items on invoice now considered workcover
            Else
               shtml = Replace(shtml, "%payee%", visit!account_to_name)                    ' payee = responsible party name
               If Not bInvoiceIsWorkcover Then 
                  bInvoiceisPrivate = True   
               End If   
            Endif
            If bInvoiceIsWorkcover Then                                                    ' if workcover
               If modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then 
                  running_total_workcover += modUtil.MoneyToFloat(visit!amount)               ' inc running workcover total
                  If Not IsNull(visit!amount_gst) Then
                     running_total_workcover += modUtil.MoneyToFloat(visit!amount_gst)
                  Endif
               End If   
               If Not bSameInvoice Then
                  If modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then             ' and its the same date as the date chose
                     Inc day_list_patients_billed_workcover_count                             '
                  Endif   
               Endif
            Else                                                                           ' otherwise, not workcover, is private
               If modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then             ' if this consult on same date as the date chosen to display 
                  Inc day_list_patients_billed_private_count
               End If
            End If   
         Else                                                                                'not a named account, must be for a patient 
            If Last_fk_invoice = visit!fk_invoice Then 
               shtml = Replace(shtml, "%payee%", "Patient") 
               If Not bSameInvoice Then                                                      ' if the first item on the invoice
                  bInvoiceisPrivate = True   
                  If modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then            ' if its the same date as the date chosen to display 
                     If visit!paid = True Then                                               ' if the visit is paid
                        If modUtil.IsSameDay(visit!date_paid, visit!appointment_date) Then
                           Inc day_list_patients_paid_count                                     ' increase paid count
                        Else
                           If IsNull(visit!appointment_date) And modUtil.IsSameDay(visit!date_paid, visit!visit_date) Then
                              Inc day_list_patients_paid_count 
                           Endif
                        End If   
                     Else
                        Inc day_list_patients_billed_private_count
                     End If   
                  End If
               End If  
            End If   
         Endif
      Endif
      item_number = visit!item
      If visit!number_of_patients <> 0 And (Not IsNull(visit!number_of_patients)) Then
         item_number &= "/" & Str(visit!number_of_patients)
      Endif
      If Not bSameInvoice Then    
         shtml = Replace(shtml, "%item%", item_number & "%item%" & Str(item_count + 1))
         shtml = Replace(shtml, "%amount%", visit!amount & "%amount%" & Str(item_count + 1))
      Else
         shtml = Replace(shtml, "%item%" & Str(item_count), ", " & item_number & "%item%" & Str(item_count + 1))
         shtml = Replace(shtml, "%amount%" & Str(item_count), ", " & visit!amount & "%amount%" & Str(item_count + 1)) ' ":&nbsp;&nbsp;&nbsp;&nbsp;amount_total")
      End If   
      item_numbers_total += modUtil.MoneyToFloat(visit!amount)
      If Not IsNull(visit!amount_gst) Then item_numbers_total += modUtil.MoneyToFloat(visit!amount_gst)
      If Not bOldAccount Then 
         
         If modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then   
            day_list_doctors[visit!fk_staff_provided_service]!takings += modUtil.MoneyToFloat(visit!amount)
         End If   
         If Not IsNull(visit!amount_gst) Then
            day_list_doctors[visit!fk_staff_provided_service]!takings += modUtil.MoneyToFloat(visit!amount_gst)
         Endif
      End If   
      'income_generated += modUtil.MoneyToFloat(visit!amount)
      If (visit!paid = True And modUtil.IsSameDay(visit!date_paid, visit!appointment_date)) Or (visit!paid = True And modUtil.IsSameDay(visit!date_paid, visit!date_invoiced) And IsNull(visit!appointment_date)) Then
         total_paid_all_items_on_invoice = modUtil.MoneyToFloat(visit!total_paid)
         For Each payment In visit!payments
            If payment!fk_lu_payment_method = const.payment_method_bad_debt Then
               total_paid_all_items_on_invoice -= modUtil.MoneyToFloat(payment!amount)
            Endif
         Next
         shtml = Replace(shtml, "%paid%", modUtil.Money_Format(total_paid_all_items_on_invoice))
         shtml = Replace(shtml, "%paymentmethod%", UCase(visit!payment_method))
         payment_totals[visit!fk_lu_payment_method] = payment_totals[visit!fk_lu_payment_method] + CFloat(Replace(visit!amount, "$", "")) 'EFTPOS, Cheque, Cash etc
         If Not IsNull(visit!amount_gst) Then
            payment_totals[visit!fk_lu_payment_method] = payment_totals[visit!fk_lu_payment_method] + CFloat(Replace(visit!amount_gst, "$", "")) 
         Endif 
         running_total += modUtil.MoneyToFloat(visit!amount)   'fixme ?used at all?
         If Not IsNull(visit!appointment_date) Then
            If Not modUtil.IsSameDay(DateChooser1.Value, visit!appointment_date) Or Not modUtil.IsSameDay(DateChooser1.Value, visit!visit_date) Then  
               running_total_old_invoices += modUtil.MoneyToFloat(visit!amount) + modUtil.MoneyToFloat(visit!amount_gst)
            Else
               If bInvoiceisPrivate Then running_total_private_paid += modUtil.MoneyToFloat(visit!amount) 
            Endif
         Else 'appointment date is null, staff could have put it in through accounts searching and not the appt book (against office instructions)
            If Not modUtil.IsSameDay(DateChooser1.Value, visit!visit_date) Then
               running_total_old_invoices += modUtil.MoneyToFloat(visit!amount) + modUtil.MoneyToFloat(visit!amount_gst)
            Else
               If bInvoiceisPrivate Then running_total_private_paid += modUtil.MoneyToFloat(visit!amount) 
            Endif
         End If   
         If Not bSameInvoice Then
            If Not modUtil.IsSameDay(DateChooser1.Value, visit!appointment_date) Then  
               Inc day_list_patients_old_invoices_count
            Endif
         End If       
      Else
         If bOldAccount Then 
            total_paid_all_items_on_invoice = modUtil.MoneyToFloat(visit!total_paid)
            'substract any bad debt and collect payment methods into one string
            If Not bSameInvoice Then
               all_payment_methods = ""
               For Each payment In visit!payments
                  If Not InStr(all_payment_methods, payment!payment_method) Then
                     If payment!fk_lu_payment_method <> const.payment_method_bad_debt Then
                        If modUtil.IsSameDay(payment!date_paid, DateChooser1.Value) Then
                           all_payment_methods &= payment!payment_method
                        End If   
                     End If   
                  Endif
                  If modUtil.IsSameDay(payment!date_paid, DateChooser1.Value) Then
                     payment_totals[payment!fk_lu_payment_method] = payment_totals[payment!fk_lu_payment_method] + CFloat(Replace(payment!amount, "$", "")) 'EFTPOS, Cheque, Cash etc
                  Else   
                     total_paid_all_items_on_invoice -= modUtil.MoneyToFloat(payment!amount)
                  Endif
                  If bad_debt = 0 Then                                                        ' each visit has replica of all payments                             
                     If payment!fk_lu_payment_method = const.payment_method_bad_debt Then
                        total_paid_all_items_on_invoice -= modUtil.MoneyToFloat(payment!amount)
                        bad_debt += modUtil.MoneyToFloat(payment!amount)
                     Endif
                  End If   
               Next
               shtml = Replace(shtml, "%paid%", modUtil.Money_Format(total_paid_all_items_on_invoice))
               shtml = Replace(shtml, "%paymentmethod%", UCase(all_payment_methods))
               running_total_old_invoices += modUtil.MoneyToFloat(visit!amount) + modUtil.MoneyToFloat(visit!amount_gst)
            End If   
         Else
            'though not fully paid, it could be part paid ie total_paid not null but < amount
            If (visit!paid = True Or Not IsNull(visit!total_paid)) And modUtil.IsSameDay(visit!date_paid, visit!appointment_date) Then
               part_payment_of_invoice = 0
               If visit!payments.count Then
                  If part_payment_of_invoice = 0 Then 
                     For Each payment In visit!payments  
                        If Not InStr(all_payment_methods, payment!payment_method) Then
                           If payment!fk_lu_payment_method <> const.payment_method_bad_debt Then
                              all_payment_methods &= payment!payment_method
                           End If   
                        Endif
                        payment_totals[payment!fk_lu_payment_method] = payment_totals[payment!fk_lu_payment_method] + CFloat(Replace(payment!amount, "$", "")) 
                        part_payment_of_invoice += modUtil.MoneyToFloat(payment!amount)
                        running_total_private_paid += part_payment_of_invoice
                        running_total_private_account_part_paid += part_payment_of_invoice
                        shtml = Replace(shtml, "%paymentmethod%", all_payment_methods)
                     Next
                     shtml = Replace(shtml, "%paid%", modUtil.Money_Format(part_payment_of_invoice))
                  End If   
               Else
                  shtml = Replace(shtml, "%paid%", "$0.00") 
                  shtml = Replace(shtml, "%paymentmethod%", "") 
               Endif
            Else
               'could be part paid
               
               shtml = Replace(shtml, "%paid%", "$0.00") 
               shtml = Replace(shtml, "%paymentmethod%", "") 
            End If  
         End If   
         If modUtil.IsSameDay(DateChooser1.Value, visit!appointment_date) Or modUtil.IsSameDay(DateChooser1.Value, visit!visit_date) Then  
            If bInvoiceisPrivate Then 
               If visit!paid = False Then   
                  running_total_private_account += modUtil.MoneyToFloat(visit!amount) 
               End If   
            End If   
         Endif
      Endif
      If Not IsNull(visit!amount_gst) Then  
         shtml = Replace(shtml, "%tax%", visit!amount_gst)
      Else
         shtml = Replace(sHtml, "%tax%", "")
      End If   
   Next
   sHtml = Replace(shtml, "%total%", modUtil.Money_Format(item_numbers_total))
   For x = 1 To 5
      sHtml = Replace(shtml, "%item%" & Str(x), "")
      sHtml = Replace(shtml, "%amount%" & Str(x), "")
   Next
   If bad_debt <> 0 Then
      '  sHtml &= "<TR VALIGN=TOP style= 'background-color:gainsboro;color:black;'>" & row_template & "</TR>"
      sHtml &= "<TR VALIGN=TOP <p style='color:red;'>" & row_template & "</TR>"
      shtml = Replace(shtml, "%doctor%", "")
      shtml = Replace(shtml, "%time%", "")
      shtml = Replace(shtml, "%patient%", "")
      shtml = Replace(shtml, "%payment%", "")
      shtml = Replace(shtml, "%payee%", "")
      shtml = Replace(shtml, "%item%", "")
      shtml = Replace(shtml, "%notes%", "")
      shtml = Replace(shtml, "%amount%", "")
      shtml = Replace(shtml, "%tax%", "")
      shtml = Replace(shtml, "%total%", "")
      shtml = Replace(shtml, "%paid%", " (" & modUtil.Money_Format(bad_debt) & ")") 
      shtml = Replace(shtml, "%paymentmethod%", "BAD DEBT") 
   Endif
   shtml &= "</TABLE>"
   Return shtml
   
End

Public Function visit_create_html_bulk_billing(visit_subset As Collection, group_name As String) As String
   'Note the Caveat to bInvoiceIsWorkcover:
   '  - the workcover item number must contain the text 'workcover' eg AA020 'level BStandard Workcover Consultation'
   '  - then it is considered all subsequent items on that invoice pertain to workcover, not private billing
   
   Dim patient_visits As Collection
   Dim visit As Collection
   Dim item_number As String
   Dim sHtml As String
   Dim Last_fk_invoice As Variant
   Dim ipatientCount As Integer
   Dim running_total As Float
   Dim payment_method As Collection
   Dim all_payment_methods As String
   Dim x As Integer
   Dim invoices_others As New Collection
   Dim bSameInvoice As Boolean
   Dim last_fk_patient As Variant
   ' Dim income_generated As Float
   Dim item_numbers_total As Float
   Dim row_template As String
   Dim item_count As Integer
   Dim bOldAccount As Boolean                'If true user is paying an old account
   Dim bInvoiceIsWorkcover As Boolean         'True if the first item is a workcover item, then applies to all items on invoice
   Dim bInvoiceisPrivate As Boolean
   Dim bmergeCols As Boolean = True 
   Dim total_paid_all_items_on_invoice As Float
   Dim payment As Collection
   Dim bad_debt As Float
   Dim part_payment_of_invoice As Float
   
   row_template = day_list_html_row_template_Bulk_Bill(bmergeCols)
   sHtml = "<BR><TABLE WIDTH=100% CELLPADDING=3 CELLSPACING=0>"
   "<COL WIDTH=1%>"
   "<COL WIDTH=5%>"
   "<COL WIDTH=5%>"
   "<COL WIDTH=4%>"
   "<COL WIDTH=3%>"
   "<COL WIDTH=2%>"
   "<TD WIDTH=2%>"
   ""
   sHtml &= "<TR VALIGN=TOP style= 'background-color:gainsboro;color:black;'>" & row_template & "</TR>"
   sHtml = Replace(shtml, "%table_heading%", "<B>BILLED " & UCase(group_name) & "</B>")
   shtml = Replace(shtml, "%time%", "")
   shtml = Replace(shtml, "%patient%", "")
   shtml = Replace(shtml, "%doctor%", "")
   shtml = Replace(shtml, "%item%", "<B>Item(s)</B>")
   shtml = Replace(shtml, "%notes%", "<B>Notes</B>")
   shtml = Replace(shtml, "%amount%", "<B>Fee(s)</B>")
   shtml = Replace(shtml, "%total%", "<B>Total</B>")
   row_template = day_list_html_row_template_Bulk_Bill() 'no merge cols
   For Each visit In visit_subset
      If Last_fk_invoice <> visit!fk_invoice Then
         '   bad_debt = 0
         For x = 1 To 5                     'fixme - guessing won't have more than 5 items a consult, make a variable and keep count of max
            sHtml = Replace(shtml, "%item%" & Str(x), "")
            sHtml = Replace(shtml, "%amount%" & Str(x), "")
         Next
         If item_numbers_total <> 0 Then  
            sHtml = Replace(shtml, "%total%", modUtil.Money_Format(item_numbers_total))
            item_numbers_total = 0
         End If   
         sHtml &= "<TR VALIGN=TOP>" & row_template & "</TR>"
         If group_name = "Medicare Not Seen Today" Or group_name = "Veterans Not Seen Today" Then
            shtml = Replace(shtml, "%time%", Format(visit!appointment_date, "dd/mm/yyyy"))
         Endif
         If Not IsNull(visit!appointment_date) Then   
            shtml = Replace(shtml, "%time%", Format(Time(visit!appointment_date), "hh:nn"))
         Else
            shtml = Replace(shtml, "%time%", "")
         End If   
         shtml = Replace(shtml, "%patient%", visit!wholename) 'if not, print name
         If Not IsNull(visit!notes) Then
            If group_name <> "Medicare Not Seen Today" Or group_name <> "Veterans Not Seen Today" Then
               shtml = Replace(shtml, "%notes%", visit!notes)
            End If   
         Else
            If group_name <> "Medicare Not Seen Today" Or group_name <> "Veterans Not Seen Today" Then
               shtml = Replace(shtml, "%notes%", "")
            End If   
         End If   
         If modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then
            Inc day_list_patients_billed_count
         End If   
         Last_fk_invoice = visit!fk_invoice
         last_fk_patient = visit!fk_patient
         item_count = 0
         bSameInvoice = False 
         bInvoiceIsWorkcover = False   
         bInvoiceisPrivate = False  
      Else
         shtml = Replace(shtml, "%time%", "")
         shtml = Replace(shtml, "%patient%", "") 
         shtml = Replace(shtml, "%notes%", "") 
         bSameInvoice = True
         Inc item_count
      End If   
      sHtml = Replace(sHtml, "%doctor%", UCase(Left(visit!staff_firstname)) & " " & modUtil.Ucase_Word_First_Letter(visit!staff_surname))
      Select Case visit!fk_lu_bulk_billing_type                                         ' if so what type
         Case const.BulkBilling_Type_Medicare                                           ' its medicare
            If modUtil.IsSameDay(DateChooser1.Value, visit!visit_date) Then
               running_total_medicare += modUtil.MoneyToFloat(visit!amount)                ' increase running total of income from medicare
            End If   
            If Not bSameInvoice Then                                                    ' if a new invoice 
               If modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then          ' if its the same date as the datechooser
                  Inc day_list_patients_billed_medicare_count                           ' increment the count of medicare patients billed
               Else
                  Inc day_list_patients_billed_medicare_not_today_count
               End If   
            End If   
         Case const.BulkBilling_Type_Veteran                                            ' ditto for veterans
            If modUtil.IsSameDay(DateChooser1.Value, visit!visit_date) Then
               running_total_veterans += modUtil.MoneyToFloat(visit!amount)
            End If   
            If Not bSameInvoice Then 
               If modUtil.IsSameDay(DateChooser1.value, visit!visit_date) Then       
                  Inc day_list_patients_billed_veterans_count
               Else
                  Inc day_list_patients_billed_veterans_not_today_count
               End If
            End If   
      End Select
      
      item_number = visit!item
      If visit!number_of_patients <> 0 And (Not IsNull(visit!number_of_patients)) Then
         item_number &= "/" & Str(visit!number_of_patients)
      Endif
      If Not bSameInvoice Then    
         shtml = Replace(shtml, "%item%", item_number & "%item%" & Str(item_count + 1))
         shtml = Replace(shtml, "%amount%", visit!amount & "%amount%" & Str(item_count + 1))
      Else
         shtml = Replace(shtml, "%item%" & Str(item_count), ", " & item_number & "%item%" & Str(item_count + 1))
         shtml = Replace(shtml, "%amount%" & Str(item_count), ", " & visit!amount & "%amount%" & Str(item_count + 1)) ' ":&nbsp;&nbsp;&nbsp;&nbsp;amount_total")
      End If   
      item_numbers_total += modUtil.MoneyToFloat(visit!amount)
      If modUtil.IsSameDay(DateChooser1.Value, visit!visit_date) Then   
         day_list_doctors[visit!fk_staff_provided_service]!takings += modUtil.MoneyToFloat(visit!amount)
      End If   
      shtml = Replace(shtml, "%paid%", "$0.00") 
      shtml = Replace(shtml, "%paymentmethod%", "") 
      shtml = Replace(sHtml, "%tax%", "")
   Next
   sHtml = Replace(shtml, "%total%", modUtil.Money_Format(item_numbers_total))
   For x = 1 To 5
      sHtml = Replace(shtml, "%item%" & Str(x), "")
      sHtml = Replace(shtml, "%amount%" & Str(x), "")
   Next
   shtml &= "</TABLE>"
   Return shtml
   
End

Public Function Day_List_Heading_Stats_Row(Optional bcolour As String) As String
   
   Dim shtml As String
   
   If bcolour <> "" Then  
      bcolour = "BGCOLOR='#" & bcolour & "'"
   Endif
   shtml = ""
   "<TD  bg WIDTH=60%>"
   "   <P><B>%rowheader%</B></P>"
   "</TD>"
   "<TD bg WIDTH=15%>"
   "   <P>%data%</P>"
   "</TD>"
   "<TD bg WIDTH=10%>"
   "   <P><B>%billedamount%</B></P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "   <P><B></P>" 
   "</TD>"
   sHtml = Replace(shtml, "bg", bcolour)
   Print shtml
   Return shtml
   
End

Public Function Day_List_html_row_template_Bulk_Bill(Optional bmergeCols As Boolean = False) As String
   
   Dim row_html As String
   
   If bmergeCols = True Then
      row_html = "<td colspan='2'>%table_heading%</td>"
   Else
      row_html =
         "<TD WIDTH=1%>"
      "   <P>%time%</P>"
      "</TD>"
      "<TD WIDTH=5%>"
      "   <P>%patient%</P>"
      "</TD>"
   End If   
   row_html &= ""
   "<TD WIDTH=5%>"
   "   <P>%doctor%</P>"
   "</TD>"
   "<TD WIDTH=4%>"
   "   <P>%item%</P>"
   "</TD>"
   "<TD WIDTH=3%>"
   "   <P>%notes%</P>"
   "</TD>"
   "<TD WIDTH=2%>"
   "   <P>%amount%</P>"
   "</TD>"
   "<TD WIDTH=2%>"
   "   <P>%total%</P>"
   "</TD>"
   Return row_html
   
End

Public Function day_list_html_row_template_Non_Bulk_Bill(Optional bmergeCols As Boolean = False) As String
   
   Dim row_html As String
   
   If bmergeCols = True Then
      row_html = "<td colspan='2'>%table_heading%</td>"
   Else
      row_html =
         "<TD WIDTH=1%>"
      "   <P>%time%</P>"
      "</TD>"
      "<TD WIDTH=5%>"
      "   <P>%patient%</P>"
      "</TD>"
   End If   
   row_html &= ""
   "<TD WIDTH=5%>"
   "   <P>%doctor%</P>"
   "</TD>"
   "<TD WIDTH=5%>"
   "   <P>%payee%</P>"
   "</TD>"
   "<TD WIDTH=2%>"
   "   <P>%item%</P>"
   "</TD>"
   "<TD WIDTH=3%>"
   "   <P>%notes%</P>"
   "</TD>"
   "<TD WIDTH=5%>"
   "   <P>%amount%</P>"
   "</TD>"
   "<TD WIDTH=2%>"
   "   <P>%tax%</P>"
   "</TD>"
   "<TD WIDTH=2%>"
   "   <P>%total%</P>"
   "</TD>"
   "<TD WIDTH=3%>"
   "   <P>%paid%</P>"
   "</TD>"
   "<TD WIDTH=3%>"
   "   <P>%paymentmethod%</P>"
   "</TD>"
   Return row_html
   
End

Public Function day_list_html_row_template_Workcover_Insurance(Optional bmergeCols As Boolean = False) As String
   
   Dim row_html As String
   
   If bmergeCols = True Then
      row_html = "<td colspan='2'>%table_heading%</td>"
   Else
      row_html =
         "<TD WIDTH=1%>"
      "   <P>%time%</P>"
      "</TD>"
      "<TD WIDTH=5%>"
      "   <P>%patient%</P>"
      "</TD>"
   End If   
   row_html &= ""
   "<TD WIDTH=5%>"
   "   <P>%doctor%</P>"
   "</TD>"
   "<TD WIDTH=5%>"
   "   <P>%payee%</P>"
   "</TD>"
   "<TD WIDTH=2%>"
   "   <P>%item%</P>"
   "</TD>"
   "<TD WIDTH=3%>"
   "   <P>%notes%</P>"
   "</TD>"
   "<TD WIDTH=5%>"
   "   <P>%amount%</P>"
   "</TD>"
   "<TD WIDTH=2%>"
   "   <P>%tax%</P>"
   "</TD>"
   "<TD WIDTH=2%>"
   "   <P>%total%</P>"
   "</TD>"
   "<TD WIDTH=3%>"
   "   <P>%paid%</P>"
   "</TD>"
   "<TD WIDTH=3%>"
   "   <P>%paymentmethod%</P>"
   "</TD>"
   Return row_html
   
End

Public Function takings_html_row_template() As String
   
   Return ""
   "<TD WIDTH=8%>"
   "   <P>%receipt_no%</P>"
   "</TD>"
   "<TD WIDTH=25%>"
   "   <P>%payer%</P>"
   "</TD>"
   "<TD WIDTH=5%>"
   "   <P>%item%</P>"
   "</TD>"
   "<TD WIDTH=15%>"
   "   <P>%payment type%</P>"
   "</TD>"
   "<TD WIDTH=20%>"
   "   <P>%drawer%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "   <P>%amount%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "   <P>%tax%</P>"
   "</TD>"
   
End

Public Function totals_html_row_template() As String
   
   Return ""
   "<TD WIDTH=212>"
   "<P>%payment_method%</P>"
   "</TD>"
   "<TD WIDTH=208>"
   "<P>%total_amount%</P>"
   "</TD>"
   
End

Public Sub cmbFeeType_Leave()
   
   gvwItemsBilled_HideProperty
   
End

Public Sub txtFilter_Activate()
   
   Reload()
   
End

Public Sub txtFilter_KeyRelease()
   
   Select Case TabStrip1.Index
      Case cTab_Invoices_Receipts
      Case cTab_Banking
      Case cTab_Batching
      Case cTab_Reports
      Case cTab_ScheduleFees
         Scheduled_Fees_Reload
   End Select
   
End

Public Sub txtFilter_LostFocus()
   
   Last.BackGround = Color.White
   
End

Public Sub txtFilter_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub Accounts_Print_Statement()
   '-----------------------------------------------
   'Prints out all the patients invoice transactions
   '------------------------------------------------
   
End

Public Sub UnPaid_Invoices_Reload()
   'reloads the grid view with eg. all unbilled appointments
   
   EditArea_Clear()
   tbNewInvoice.Visible = False
   Select Case cmbUnpaidInvoices.Index
      Case cInvoiceDisplayMode_Overdue_1Month
         Accounts_Overdue_Display("1 month", "6 month")
      Case cInvoiceDisplayMode_Overdue_2Month
         Accounts_Overdue_Display("2 month", "6 month")
      Case cInvoiceDisplayMode_Overdue_Over3Months
         Accounts_Overdue_Display("3 month", "12 month")
      Case cInvoiceDisplayMode_InstitutionalAccounts
         
   End Select
   
End

Private Sub Accounts_Overdue_Display(start_duration As String, end_duration As String)
   
   Dim p As Collection
   
   patients = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Accounts_Overdue_Find_Patients(start_duration))
   Patients_Display
   
End

Public Sub cmbUnpaidInvoices_Click()
   'This is the combo on the billing tab located under the 'Seach Accounts' label
   ' Clickong on this will load all outstanding accounts for periods of
   ' >1 month, 2 month 3 months, i.e whatever the cmbUnpaidInvoices.text is
   
   If Bexit Then Return
   txtSearchAccountNames.text = ""
   gvwUnpaidVisits.UnselectAll                 ' if a marquee showing on the appointments not billed list remove it
   gvwAccountNames.Clear                    ' clear the grid
   bSearchingAccounts = True 
   If TabStrip1.index <> 0 Then TabStrip1.index = 0
   If TabVisitsPaymentsAccountHistory.index <> 0 Then 
      bexit = True   
      TabVisitsPaymentsAccountHistory.Index = 0
      bexit = False   
   End If 
   Wait
   EditArea_Clear
   Reset_Keys_Collections
   bexit = True                              ' stop triggering code in   txtSearchAccountNames_Change(
   txtSearchAccountNames.Text = ""
   bexit = False  
   
   UnPaid_Invoices_Reload()
   
End

Public Sub gvwUnpaidVisits_Select()
   'If the doctor or nurse posted an item number in the patient!comment_for_billing field
   'the try and auto-bill
   'cvwItemsTodayOrUnpaid = the columnview under the billing area bottom right screen
   'cvwAccounts           = the columnview at top left = where user searches for accounts/patients
   'gvwUnpaidVisits      = the columnview at bottom left auto-populated from the appointment list
   'TabVisitsPaymentsAccountHistory = tab where user generates invoice, pays invoice or views account history
   
   Dim Possible_Item_Numbers As String[] 
   Dim sPossible_Item_Numbers As String
   Dim item As String
   Dim Real_Items As New String[]
   Dim gwItemsBilled_Row As Integer
   Dim dr_says_bulk_bill As Boolean 'if the comment_on_billing passed from clinical has "BB" in it
   
   If bexit Or gvwUnpaidVisits.row = -1 Or IsNull(Unbilled_Consultations) Then Return  '-1 = no row selected
   gvwAccountNames.UnSelectAll                ' remove the marequee from the top grid of account holders
   bSearchingAccounts = False                 ' we are not searching that list
   EditArea_Clear                             ' clears the input area and associated lists, billing data
   Wait
   If TabVisitsPaymentsAccountHistory.index <> cTab_Visits_And_Payments Then 
      bExit = True                                                       'stop events triggering
      TabVisitsPaymentsAccountHistory.index = cTab_Visits_And_Payments
      bExit = False  
   End If   
   Inc Application.Busy
   sPatient_Collection_Key = gvwUnpaidVisits.Row
   Account_Patient_Display()                        ' display patient details
   If IsNull(patient) Then
      Dec Application.Busy
      Return
   Endif
   If InStr(patient!comment_for_billing, "BB") Then
      dr_says_bulk_bill = True
      patient!comment_for_billing = Replace(patient!comment_for_billing, "BB", "")
   End If
   patient!comment_for_billing = Replace(patient!comment_for_billing, "+", "")
   sPossible_Item_Numbers = Replace(patient!comment_for_billing, ", ", ",")
   Possible_Item_Numbers = Split(Trim(sPossible_Item_Numbers), ",")
   'now check any numbers are valid
   gvwItemsBIlled.row = 0
   For Each Item In Possible_Item_Numbers
      If IsInteger(item) Then
         If modBillingDBI.Item_Exists(Item) Then
            Real_Items.Add(item)
         Endif
      End If
   Next
   For Each item In Real_Items
      txtFindItemNumber.text = item
      If dr_says_bulk_bill Then
         rbInvoiceToMedicare.Value = True
      Endif
      txtFindItemNumber_Activate()
   Next
   Dec Application.Busy
   
End

Public Sub txtSearchAccountNames_KeyRelease()
   
   timer_count = 0
   timer1.Enabled = True
   timer1.Start
   
End

Public Sub txtSearchAccountNames_KeyPress()
   
   If Key.code = Key.down
      If cvwAccountHistory.Visible Then
         With cvwAccountHistory
            .MoveFirst()
            .SetFocus()
         End With
      Endif
   End If
   
End

Public Sub Reset_Keys_Collections()
   
   fk_patient = Null
   fk_payer_branch = Null
   fk_payer_person = Null
   fk_appointment = Null
   Items_Billed = New Collection            'collection of patients past_invoices
   Items_Today_Or_Unpaid = New Collection
   Payer = Null
   Patient = Null
   Unbilled_consultation = Null
   
End

Public Sub txtSearchAccountNames_GotFocus()
   'User has clicked on the textbox to find either patient or company's account
   
   cmbUnpaidInvoices.index = -1
   gvwUnpaidVisits.UnselectAll                 ' if a marquee showing on the appointments not billed list remove it
   gvwAccountNames.Clear                    ' clear the grid
   bSearchingAccounts = True
   If TabStrip1.index <> 0 Then TabStrip1.index = 0
   If TabVisitsPaymentsAccountHistory.index <> 0 Then 
      bexit = True   
      TabVisitsPaymentsAccountHistory.Index = 0
      bexit = False   
   End If 
   Wait
   EditArea_Clear
   Reset_Keys_Collections
   bexit = True                              ' stop triggering code in   txtSearchAccountNames_Change(
   txtSearchAccountNames.Text = ""
   bexit = False  
   Last.BackGround = Color.rgb(95, 255, 175)
   iTimer_Search_Mode = cTimer_SearchMode_Patient
   
End

Public Sub txtSearchAccountNames_Change()
   
   If bexit Then Return
   If Trim(txtSearchAccountNames.text) = "" Then
      EditArea_Clear()
      Reset_Keys_Collections
      gvwAccountNames.Clear
      
   Endif
   
End

Public Sub txtSearchAccountNames_LostFocus()
   
   txtSearchAccountNames.BackGround = Color.White
   timer1.stop
   
End

Public Sub tbFilterDateAccounts_Click()
   '--------------------------------------------
   'Popup a calender to allow user to pick dates
   '---------------------------------------------
   
   Dim hctrl As Control
   Dim hTextbox As TextBox
   
   If HBox_Calander.Visible Then
      HBox_Calander.Visible = False
   Else
      For Each hctrl In Last.parent.children
         If hctrl Is TextBox Then
            hTextbox = hctrl
            DateChooserAccountDate.tag = hTextbox
            Break
         End If
      Next
      With HBox_Calander
         .top = Last.Parent.Parent.top + Last.Parent.Height + Hbox_FilterAccounts.padding + HBox_FilterDate.Padding
         .left = Last.Parent.left + Hbox_FilterAccounts.width / 2
         .width = Last.Parent.width / 2
         .height = .Width
         .Raise()
      End With
      DateChooserAccountDate.Parent.Visible = True
      DateChooserAccountDate.Parent.Raise
   End If
   
End

Public Sub DateChooserAccountDate_Activate()
   
   Last.tag.text = Format(Last.value, "dd/mm/yyyy")
   UnPaid_Invoices_Reload()
   HBox_Calander.Visible = False
   DateChooserAccountDate.tag.SetFocus() 'fixme do the rest
   
End

Public Sub DateChooserAccountDate_LostFocus()
   
   HBox_Calander.Visible = False
   
End

Public Sub gvwFeeScheduleItems_Select()
   '----------------------------------------------------------------------
   'User has clicked on the gridview containing the list of scheduled fees
   '----------------------------------------------------------------------
   
   Dim sfi1 As Collection = ScheduledFeeItems[gvwFeeScheduleItems.row]
   
   Dim sfi As Collection = FilteredScheduledFeeItems[gvwFeeScheduleItems.row]
   
   Print ScheduledFeeItems
   With from_fee_schedule
      .Fee_Schedule_Item_Set(sfi)
      .Fee_Schedule_Item_Display()
   End With
   
End

Public Sub EditArea_Buttons_Click()
   
   If Last.tag = "save billing next of kin" Then
      Billing_Defaults_Save
      
      form_billingcards.form_next_of_kin.Save()
   Endif
   
End

Public Sub txtSearch_KeyPress()
   
End

Public Sub tbBankDetails_Click()
   
   Dim form_bank As FBankDetails
   
   form_bank = New FBankDetails
   form_bank.ShowModal()
   
End

Public Sub VSplit_Invoices_Resize()
   
   modUtilGUI.Split_Save_Settings(Me.Name, VSplit_INvoices)
   
End

Public Sub gvwItemsBilled_Menu()
   
   If lblEditAreaHeading.text <> "PAY INVOICE" Then
      mnuItemsBilled.Popup()
   Endif
   
End

Public Sub txtFindItemNumber_Change()
   
   If Bexit Then Return
   bexit = True
   txtFindItemNumber.text = UCase(txtFindItemNumber.text)
   bexit = False
   
End

Public Function Valid_Item_And_Descriptor() As Boolean
   
   If Trim(gvwItemsBilled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].Text) = "" Or Trim(gvwItemsBilled[gvwItemsBIlled.row, cGridColumnItem_BriefDescriptor].text) = "" Then
      Return
   End If
   Return True
   
End

Public Sub panGvwItemsBilledEditor_Enter()
   
   If gvwItemsBIlled.Column = 4 Then
      bexit = True
      With cmbFeeType
         .Index = cmbFeeType.Find(gvwItemsBIlled[gvwItemsBIlled.Row, cGridColumnItem_FeeType].Text)
         .Visible = True
      End With
      bexit = False
   Endif
   
End

Public Sub gvwUnpaidVisits_Menu()
   
   sPatient_Collection_Key = gvwUnpaidVisits.row
   If gvwUnpaidVisits.Rows.count Then mnuUnpaidVisits.Popup()
   
End

Public Sub txtFilter_KeyPress()
   
End

Public Sub tbWipePayer_Click()
   
   txtFindPayer.SetFocus
   cvwWorkcoverClaims.Clear
   VBox_Workcover_Claims.Visible = False
   
End

Public Sub cvwAccountHistory_Menu()
   
   cvwAccountHistory.MoveCurrent
   If cvwAccountHistory.count = 0 Then Return 
   If cvwAccountHistory.Selection.count = 0 Then Return
   cvwAccountHistory_Key = cvwAccountHistory.Item.Key
   If cvwAccountHistory.count Then 
      mnuAccountHistory_Change_Payment_Type.Enabled = items_billed[cvwAccountHistory_Key]!paid
      mnuAccountHistory.Popup
   End If   
   
End

Public Sub mnuAccountHistory_Click()
   'User has clicked over the columview containing all the invoices
   'ever raised for the patient, or filtered by paid/unpaid/text or payer
   'acount  used synonymously with invoice
   'If an invoice is deleted, then as usually comes as an unbilled appointment
   'this list must be reloaded if the patient came from that list
   
   Dim pdf_path As String
   Dim smsg As String
   Dim Latex As String
   
   Select Case Last.tag
      Case "delete invoice"
         Print items_billed[cvwAccountHistory_Key]
         If Message.Question("Are you sure you want to delete this invoice.\n\nThis Cannot be undone.", "Yes", "Cancel") = 2 Then
            Return 
         End If   
         modBillingDBI.Delete_Invoice(items_billed[cvwAccountHistory_Key]!fk_invoice)
         If Not IsNull(items_billed[cvwAccountHistory_Key]!fk_appointment) Then
            modDBConnect.update("clerical.bookings", Null, ["pk": items_billed[cvwAccountHistory_Key]!fk_appointment, "invoiced": False])
            modDBConnect.CommitTrans
         End If   
         Items_Today_Or_Unpaid_Reload                         'reload the list of items under the edit area
         Account_History_Show                                 'reload the accounts history
         '  If Not bSearchingAccounts Then                       'if the data source was patient from the unbilled appointments list
         UnBilled_Appointments_Reload                      'reload this to re-show the now un-billed consultation 
         '  Endif
      Case "mark unpaid"
         If Message.Question("Mark this invoice as unpaid?", "Yes", "No") = 2 Then Return
         If modBillingDBI.invoice_Mark_Unpaid(items_billed[cvwAccountHistory_Key]!fk_invoice) Then
            modDBConnect.CommitTrans
            Account_History_Show
            Items_Today_Or_Unpaid_Reload
         Endif
      Case "invoice copy"
         modPrinting.Print_latex(items_billed[cvwAccountHistory_Key]!latex)
      Case "receipt copy"
         modPrinting.Print_latex(items_billed[cvwAccountHistory_Key]!latex)
      Case "external viewer"
         pdf_path = modPrinting.Latex_To_PDF(items_billed[cvwAccountHistory_Key]!latex)
         modArchiveDocumentsDBI.Launch_External_PDF_Viewer(pdf_path)
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwAccountHistory, Me.Name)
      Case Else 'is a change in paymemnt method see billing.lu_paymemnt_method table, the tag is a number
         Latex = items_billed[cvwAccountHistory_Key]!latex
         Print latex
         If InStr(Latex, "Payment: EFTPOS") Then
            latex = Replace(latex, "Payment: EFTPOS", "Payment: " & Last.text)
         Else If InStr(Lower(Latex), "payment: cash") Then
            latex = Replace(latex, "Payment: cash", "Payment: " & Last.text)
            latex = Replace(latex, "Payment: Cash", "Payment: " & Last.text)  'For historical reasons need both
            latex = Replace(latex, "Payment: CASH", "Payment: " & Last.text)
         Else If InStr(Lower(Latex), "payment: cheque") Then
            latex = Replace(latex, "Payment: Cheque", "Payment: " & Last.text)  'For historical reasons need both
            latex = Replace(latex, "Payment: CHEQUE", "Payment: " & Last.text)  
            latex = Replace(latex, "Payment: cheque", "Payment: " & Last.text)   
         Else If InStr(Latex, "Payment: EFT") Then 
            latex = Replace(latex, "Payment: EFT", "Payment: " & Last.text)  
         Endif
         Message.Title = "Change Payment type"
         sMsg = "Please confirm a change of payment method from " & items_billed[cvwAccountHistory_Key]!payment_method 
         sMsg &= " to " & Last.text & "."
         If Message.Question(sMsg, "Yes - Change Please", "Cancel") = 2 Then Return  
         If modBillingDBI.Payment_method_Change(Last.tag, items_billed[cvwAccountHistory_Key]!fk_invoice) Then
            If modDBConnect.update("billing.invoices", Null, ["pk": items_billed[cvwAccountHistory_Key]!fk_invoice, "latex": latex]) Then
               modDBConnect.CommitTrans
               If modUtil.IsSameDay(items_billed[cvwAccountHistory_Key]!visit_date, Now()) Then
                  Items_Today_Or_Unpaid_Reload
               End If  
               Account_History_Show
            End If   
         Else
            Message.Info("Sorry, we failed to change the payment method")
         Endif
   End Select 
   
End

Public Sub gvwAccountNames_Select()
   
   If gvwAccountNames.row = -1 Then Return 
   sPatient_Collection_Key = gvwAccountNames.Row 
   gvwUnpaidVisits.UnselectAll
   bSearchingAccounts = True  
   EditArea_Clear                             ' clears the input area and associated lists, billing data
   Wait
   If TabVisitsPaymentsAccountHistory.index <> cTab_Visits_And_Payments Then 
      bExit = True    
      TabVisitsPaymentsAccountHistory.index = cTab_Visits_And_Payments
      bExit = False 
   End If   
   If IsNull(patient) Then 
      Dec Application.Busy
      Return
   Endif
   
   Account_Patient_Display(True)   'True signals this sub we are searching from accounts
   txtSearchAccountNames_LostFocus
   
End

Public Sub cvwAccountHistory_Select()
   'User has clicked on the patient's account history
   
   cvwAccountHistory.MoveCurrent
   cvwAccountHistory_Key = cvwAccountHistory.Item.Key
   Print items_billed[cvwAccountHistory_Key]
   
End

Public Sub txtFilterDescriptor_Change()
   'Already have the items billed collection, don't fetch from backend, just filter
   
   If bexit Then Return
   Items_Billed = Fill_Columnview(cvwAccountHistory, Items_Billed)
   
End

Public Sub cmbInvoiceToFilter_Click()
   
   If bExit Then Return 'yes I know there's no code in here yet!
   
End

Public Sub TabVisitsPaymentsAccountHistory_Click()
   
   Wait                                         'let tab click event finish, otherwise gui can hang
   If bexit = True Or IsNull(patient) Then 
      Return  
   End If   
   If rbAccountHistoryNotUsed.Value = True Then    
      rbAccountHistoryAll.value = True    'will trigger  Account_History_Show(True)
      cmbInvoiceToFilter.Add("No Filter")
   End If   
   
End

Public Sub Account_History_Show(Optional bfirstLoad As Boolean = False)
   'display the patient's account history
   
   Inc Application.Busy
   If IsNull(fk_patient) Then Return
   Items_Billed = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Items_Invoices_Get(fk_patient, iAccountDisplayMode))
   Items_Billed = Fill_Columnview(cvwAccountHistory, Items_Billed, bfirstLoad)
   Dec Application.Busy
   
End

Public Sub rbAccountHistory_Click()
   
   '-------------------------------------------------------------------------
   'User has clicked on the radiobuttons above the invoices/billed items list
   'The tags are:
   'const.Billing_Accounts_Unpaid = 0 for rbAccountHistoryPaid
   'const.Billing_Accounts_Paid = 1  for rbAccountHistoryUnpaid
   'const.Billing_Accounts_All = 2   for rbAccountHistoryAll
   'rbAccountHistoryNotUsed is there just to re-set the radiobuttons
   'so all the visible ones are not set.
   '-------------------------------------------------------------------------
   
   If bExit Then
      Return
   End If
   iAccountDisplayMode = Last.tag
   Account_History_Show
   
End

Public Sub cvwWorkcoverClaims_Select()
   
   cvwWorkcoverClaims.MoveCurrent
   txtReferenceDetails.text = workcover_claims[cvwWorkcoverClaims.Item.Key]!claim_number
   
End 

Public Sub cvwWorkcoverClaims_Menu()
   
   If cvwWorkcoverClaims.count Then mnuWorkCoverClaims.Popup 
   
End

Public Sub mnuWorkCoverClaims_Click()
   
   Select Case Last.tag
      Case "mark as finalised"
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwWorkcoverClaims, Me.Name)
   End Select
   
End

Public Sub DateChooser1_Change()
   
   Report_Show_HTML(Day_List_Create_HTML(DateChooser1.Value))
   
End

Public Sub Banking_Show_Html(shtml As String)
   
   If IsNull(form_banking) Then 
      With form_banking = New FHtmlViewer(Vbox_Banking)
         .WebView1.Zoom = 1.0
         .tbWebBrowserPrint.Visible = True   
         .tbWebBrowserZoomIn.Visible = True  
         .tbWebBrowserZoomOut.Visible = True 
         .Set_Landscape_Printing(False)
      End With
   End If   
   With form_banking
      .WebView1.HTML = sHtml
      .WebView1.Zoom = 1.0
   End With
   
End

Public Sub Report_Show_HTML(sHtml As String)
   
   If IsNull(form_reports) Then 
      With form_reports = New FHtmlViewer(Vbox_Reports)
         .Parent_Form_Set(Me.Name)
         .Section_Set("Reports")
         .tbWebBrowserPrint.Visible = True   
         .tbWebBrowserZoomIn.Visible = True  
         .tbWebBrowserZoomOut.Visible = True 
         .Set_Landscape_Printing(True)
      End With
   End If   
   form_reports.WebView1.HTML = sHtml
   
End

Public Sub chkIncludeDeceased_Click()
   
   Patients_Get
   
End

Public Sub gvwAccountNames_Menu()
   
   If gvwAccountNames.row = -1 Then Return 'no row selected
   If gvwAccountNames.Rows.count Then
      mnuAccountNames.Popup
   Endif
   
End

Public Sub mnuAccountNames_Click()
   
   Select Case Last.tag
      Case "font"
         modUtilGUI.Columnview_SetFont(gvwAccountNames, Me.Name)
      Case "mark deceased'"
      Case "mark left practice"
   End Select 
   
End

Public Sub tbAppointmentsNotBilledReload_Click()
   
   UnBilled_Appointments_Reload
   
End

Public Sub rbBulkBillBatching_Click()
   ' rbBulkBilledMedicare.tag = const.BulkBilling_Type_Medicare
   ' rbBulkBillVeterans.tag = const.BulkBilling_Type_Veteran
   ' This determines what is shown by Bulk_Billing_Show_Dates()
   ' Clear the headings, lists on the batching form
   ' Get a list of all dates with outstanding vouchers for bulk billing type
   ' set heading on the bulk bill batching form appropriately
   
   If Bexit Then Return
   Bulk_Bill_Batching_type = Last.tag
   With form_batching
      .EditArea_Clear 
      .lblBulkBIllingInformation.Text = "Bulk Billing Type "
      If Bulk_Bill_Batching_type = const.BulkBilling_Type_Medicare Then
         .lblBulkBIllingInformation.Text &= "Medicare"
         .fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare
      Else
         .lblBulkBIllingInformation.text &= "Veterans"
         .fk_lu_bulk_billing_type = const.BulkBilling_Type_Veteran
      Endif
   End With
   Bulk_Billing_Show_Dates
   
End

Public Sub gvwPayments_Scroll()
   
   GvwPayments_MoveProperty
   
End

Public Sub txtSearch_Change()
   
   If TabStrip1.Index = cTab_ScheduleFees Then 
      If Trim(txtSearch.text) = "" Then
         timer1.Stop
         combobox1.index = 0
         gvwFeeScheduleItems.SetFocus
      End If   
   End If   
   
End

Public Sub txtGSTDate_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub txtGSTDate_LostFocus()
   
   Last.BackGround = Color.white
   If Not IsDate(Last.text) And Trim(Last.text) <> "" Then
      Message.Info("Invalid Date")
      Last.text = ""
   Endif
   
End

Public Sub txtGSTDate_KeyPress()
   
   If Not modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, Key.code) Then
      Stop Event
      Return
   Endif
   If Key.code = Key.return Or Key.code = Key.Tab Then
      Select Case Last.tag
         Case "gst from date"
            txtGSTToDate.SetFocus
         Case "gst to date"
            tbCalculateGST.SetFocus()
      End Select
   Endif
   
End

Public Sub tbGST_Click()
   
   Select Case Last.tag
      Case "reset gst"
         txtGSTFromDate.text = ""
         txtGSTToDate.text = ""
   End Select
   Report_Show_HTML(GST_Create_HTML())
   
End
