' Gambas class file

' Copyright (C) 2008-2012 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' A class to record the patients visit and raise the invoice
'----------------------------------------------------------------------
'THIS FORM WILL NOT WORK IT IS VERY MUCH PROTOTYPE PRE-ALPHA ONLY
'ONLY FOR PROOF OF CONCEPT, much of the code is really bad
'many routines are redundant/duplicated
'many of the database calls are redundant duplicated
'fix this constraint in back end which is named wrong.
' CONSTRAINT invoices_fk_doctor_raising_fkey FOREIGN KEY (fk_staff_provided_service)
'       REFERENCES admin.staff (pk) MATCH SIMPLE
'       ON UPDATE NO ACTION ON DELETE NO ACTION,
' NOTE:  Ian - don't get hung up on all the inappriopriate names
'        for columnviews and controls - work in progress - will fix
'-----------------------------------------------------------------
Private currentconsult As CConsult
Private last_Fee_type As String
Private bexit As Boolean
'save flags for readability
Private bBulkBill_Yes As Boolean = True
Private bBulkBill_No As Boolean = False
Private bPrint_Yes As Boolean = True
Private bPrint_No As Boolean = False
Private bAccount_Yes As Boolean = True
Private bAccount_No As Boolean = False
Private bPaid_Yes As Boolean = True
Private bPaid_No As Boolean = False 
Private VSplitMain_Layout As Integer[]
Private bKeyValid As Integer
Private bPayingInvoice As Boolean
Private timer_count As Integer
Private onrow_items As Integer
Private OnCol_Items As Integer
Private GridData As Collection 
Private GridRows As Collection
Private iLeft As Integer
Private iTop As Integer
Private i As Integer
Private iFirstRow As Integer
Private iLastRow As Integer
Private bFoundFirst As Integer
Private SeenBy As Collection 
Private clinic As Collection
Private clinics As Collection
Private items As Collection 
Private item As Collection
Private Scheduled_Fee As Collection
Private consult_item_number As String 
Private fk_lu_default_billing_level As Integer
Private iBilling_Category As Integer
Private iAccountDisplayMode As Integer  'const.Billing_Accounts_Paid,  Billing_Accounts_UnPaid, Billing_Accounts_All
Private form_billingcards As FPatientBillingCards
Private appointment_icons As Collection   
Private staff As Collection
Private Staff_Member As Collection
Private fk_staff As Integer                  'whichever staff saw the patient
Private fk_patient As Integer
Private fk_payer_branch As Integer                 'if non zero the invoice is to an organisation at branch level
Private fk_payer_person As Integer                 'if non zero the invoice is to a person
Private fk_invoice As Integer                      'if non zero then key to billing.invoices table
Private Unbilled_Consultations As Collection 
Private Unbilled_consultation As Collection
Private payers As Collection
Private payer As Collection   'could be patient/organisation etc
Private Bulk_Billed_Consultations As Collection
Private Bulk_Billed_Consultation As Collection
Private Bulk_Billed_Claims As Collection
Private Bulk_Billed_Claim As Collection
Private cGridColumnItem_ItemNumber As Integer = 0
Private cGridColumnItem_BriefDescriptor As Integer = 1
Private cGridColumnItem_Fee As Integer = 2
Private cGridColumnItem_FeeType As Integer = 4
Private cGridColumnItem_gst_amount As Integer = 5
Private oncol_payments As Integer
Private onrow_payments As Integer 
Private cGridColumnPayments_Amount As Integer = 0
Private cGridColumnPayments_PaymentType As Integer = 1
Private cGridColumnPayments_Drawer As Integer = 2
Private cGridColumnPayments_ChequeNumber As Integer = 3
Private cGridColumnPayments_Bank As Integer = 4
Private cGridColumnPayments_Branch As Integer = 5
Private Payment_Methods As Collection
Private InvoiceComments As Collection
Private InvoiceComment As Collection
Private FeeTypes As Collection
Private FeeType As Collection
Private Duration As Integer                           'the duration of the appointment - at least what they were booked in for
Private Descriptors_Brief As Collection
Private descriptor_brief As Collection
Private Items_Billed As Collection
Private Item_Billed As Collection
Private iTimer_Search_Mode As Integer
Private cTimer_SearchMode_Patient As Integer = 0
Private cTimer_SearchMode_Descriptor As Integer = 1
Private cTimer_SearchMode_Payer As Integer = 2
Private Patients As Collection
Private Patient As Collection
Private Const cTabPatientsUnbilled As Integer = 0
Private Const cTabPatientsAccounts As Integer = 1
Private branches As Collection
Private branch As Collection
Private form_html_viewer As FHtmlViewer
'the main (large) tabstrip - tabstrip1
Private Const cTab_Invoices As Integer = 0
Private Const cTab_Takings As Integer = 1
Private Const cTab_Batching As Integer = 2
Private Const cTab_Banking As Integer = 3
Private form_batching As FBulkBillBatching

Static Private Form_Billing As FRecordVisit

Public Sub Init() 
   '---------------------------------------------------------
   'Do all the form initialisation stuff like adding stuff to 
   'combo's, setting numbers of columns in lists, displaying
   'the patients contact details
   '---------------------------------------------------------
   
   Dim x As Integer
   
   Form_Billing = Me
   With form_billingcards = New FPatientBillingCards(Vbox_PatientBillingCards)
      .Init(VBox_EditArea_Outer)
      .HBox_NextOfKin.Visible = False   
      .Hbox_LegacyFileNumber.Visible = False  
      .HBox_FindNextOfKin.Visible = False  
      .HBox_ResponsiblePayer.Visible = False  
   End With
   With cvwUnBilled
      .Columns.count = 2
   End With
   lblmeasure.text = "  Payment By "
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Inner, lblmeasure)
   modEditAreaHelpers.Resize_label(lblItems, lblmeasure)
   modEditAreaHelpers.Resize_label(lblDisplayAccounts, lblmeasure)
   modEditAreaHelpers.Resize_label(lblPayment, lblmeasure)
   modEditAreaHelpers.Resize_label(lblComment, lblmeasure)
   Payment_methods = modBillingDBI.Payment_Methods_Get()
   'fix this duplication but check save to see why I did it.
   modUtil.LoadCombo(cmbPaymentMethods, modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Payment_Methods_Get()), "method") 'show on top 3 methods
   InvoiceComments = modUtil.LoadCombo(cmbInvoiceComments, modBillingDBI.Invoice_Comments_Get(), "comment")
   FeeTypes = modUtil.LoadCombo(cmbFeeType, modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Billing_Types_Get()), "type") 'fixme
   staff = modUtil.LoadCombo(cmbStaff, modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get()), "wholename")  
   modUtil.LoadCombo(cmbstaff_Takings, staff, "wholename")
   seenBy = modUtil.LoadCombo(cmbSeenBy, modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get()), "wholename")  
   clinics = modUtil.LoadCombo(cmbLocation, modContactsDBI.Clinics_Get(), "branch")
   modUtil.LoadCombo(cmbLocationTakings, clinics, "branch")
   With cvwPatients
      .Columns.count = 2
   End With
   With cvwItemsBilled
      .Columns.count = 12
      .Columns[0].text = "Patient"
      .Columns[1].text = "Seen By"
      .Columns[2].text = "Location"
      .Columns[3].text = "Visit Date"
      .Columns[4].text = "Item"
      .Columns[5].text = "Descriptor"
      .Columns[6].text = "Invoice To"
      .Columns[7].text = "Fee"
      .Columns[8].text = "GST"
      .Columns[9].text = "Due"
      .Columns[10].text = "Paid"
      .Columns[11].text = "Rebate"
   End With
   VSplitMain_Layout = VSplitMain_Layout  
   Me.Center()
   Try Settings_Load()         'load settings for this form
   
   GridRows = New Collection
   columnview1.Columns.count = 4
   cmbInvoiceComments.index = -1
   gvwItemsBIlled_Init()  
   gvwPayments_Init()
   cvwUnBilled_Refresh()
   
End

Public Sub EditArea_Clear() 
   
   bExit = True
   
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Inner) 
   form_billingcards.EditArea_Clear()
   lblEditAreaHeading.text = ""
   textlabelPayer.text = ""
   Unbilled_consultation = Null
   With gvwItemsBIlled
      .Clear
      .Rows.count = 2
      .Parent.Height = gvwItemsBIlled.Height   
   End With
   VsplitMain_layout = VSplit_Main.Layout 
   fk_lu_default_billing_level = const.Billing_Default_Level_Private
   fk_patient = 0
   fk_payer_branch = 0
   fk_payer_person = 0
   cmbFeeType.Visible = False 
   cvwItemsBilled.Clear()
   Items_Billed = New Collection
   Item_Billed = New Collection
   iAccountDisplayMode = const.Billing_Accounts_Unpaid
   rbAccountsDisplayUnPaid.value = True
   rbPayerNotUsed.value = True 'switches off rbInvoiceOrganisation and rbInvoicePerson
   With lblInvoiceTotal
      .text = ""
      .Border = Border.None
   End With
   gvwPayments.clear
   With lblPaymentTotal
      .text = ""
      .Border = Border.None
   End With
   EditArea_Notify_Data_Change(False)
   bexit = False
   
End

Public Sub Reset_Keys()
   
End

Public Sub cvwUnBilled_Refresh()
   '------------------------------------------------------------------------
   'Display a list of all unbilled consultations ordered by appointment date
   '-------------------------------------------------------------------------
   Dim single_day As Date
   
   Select Case TabStrip1.Index
      Case cTab_Invoices                 'generate and save invoice/receipt
         EditArea_Clear()
         If chkTodayOnly.value = True Then
            single_day = Now()
         Else
            single_day = Null
         Endif
         Unbilled_Consultations = modBillingDBI.Consultations_UnBilled_Get(single_day)
         cvwUnBilled.Clear()
         For Each Unbilled_consultation In Unbilled_Consultations
            cvwUnBilled.Add(Unbilled_consultation!pk, 0)
            cvwUnBilled[Unbilled_consultation!pk][0] = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
            cvwUnBilled[Unbilled_consultation!pk][1] = Unbilled_consultation!wholename
         Next
         If cvwUnBilled.count Then
            cvwUnBilled.MoveFirst()
            cvwUnBilled.Item.Selected = True
            cvwUnBilled_Select()
         Endif
      Case cTab_Batching                  'medicare and veteran batching tab
         cvwUnBilled.Clear()
         Bulk_Billed_Claims = modBillingDBI.Bulk_Bill_Batching_Get_Claims()
         For Each Bulk_Billed_Claim In Bulk_Billed_Claims
            cvwUnBilled.Add(Bulk_Billed_Claim!pk, 0)
            cvwUnBilled[Bulk_Billed_Claim!pk][0] = Format(Bulk_Billed_Claim!claim_date, "dd/mm/yyyy")
            cvwUnBilled[Bulk_Billed_Claim!pk][1] = Bulk_Billed_Claim!claim_id
         Next
         If Bulk_Billed_Claims.count Then
            cvwUnBilled.MoveFirst()
            cvwUnBilled.Item.Selected = True  
         Endif
   End Select
   
End

Public Sub cvwUnBilled_Select()
   '-------------------------------------------------------------------------------------
   'User has clicked on the list of patients seen and mared as 'gone' in appointment book
   'Display their details in the edit area, match staff combo to whoever saw them
   'assume a standard consultation 
   'Ian going to bypass some of this by parsing consult item numbers in the consult
   '-------------------------------------------------------------------------------------

   Select Case TabStrip1.Index
      Case cTab_Invoices
         TabStrip1.index = 0
         cvwUnBilled.MoveCurrent()
         EditArea_Clear()                                                                    'clear input area
         ' bPayingInvoice = True
         Unbilled_consultation = Unbilled_Consultations[cvwUnBilled.Item.key]
         Try fk_lu_default_billing_level = Unbilled_consultation!fk_lu_default_billing_level
         If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private
         fk_patient = Unbilled_consultation!fk_patient
         bExit = True   
         txtpatient.text = Unbilled_consultation!wholename
         txtDate.text = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
         Try Payer_Get(Unbilled_consultation)
         fk_staff = Unbilled_consultation!fk_staff 
         For Each Staff_Member In staff
            If Staff_Member!fk_staff = fk_staff Then
               cmbSeenBy.index = cmbSeenBy.Find(Staff_Member!wholename)
            Endif
         Next
         duration = Val(Split(Unbilled_consultation!duration, ":")[1]) + Val(Split(Unbilled_consultation!duration, ":")[0]) * 60        ' e.g 10, 20, 30, 50, 60, 70 .... etc!
         txtDuration.text = Str(duration) & " minutes"
         Select Case duration
            Case 1 To 19
               consult_item_number = "23"
            Case 20 To 40
               consult_item_number = "36"
            Case 40 To 100
         End Select
         cmbFeeType.Enabled = True  
         
         Select Case fk_lu_default_billing_level
            Case const.Billing_Default_Level_BulkBill
               cmbFeeType.Enabled = False 
               If Unbilled_consultation!veteran_number <> "" Then
                  rbInvoiceToVeterans.value = True
               Else
                  rbInvoiceToMedicare.value = True
               Endif
            Case const.Billing_Default_Level_Private
               rbInvoiceToPatient.value = True
            Case const.Billing_Default_Level_HealthCareCardConcession
            Case const.Billing_Default_Level_PensionerConcession
            Case const.Billing_Default_Level_MedicoLegal 
         End Select
         bExit = False  
         form_billingcards.Display_Patient_Data(Unbilled_consultation) 
         VBox_EditArea_Outer.Enabled = True 
         gvwItemsBIlled.Enabled = True 
         cvwItemsBilled_Refresh()
      Case cTab_Batching
          form_batching.Claim_Display(cvwUnBilled.Item.key)
   End Select
   
End

Public Sub Payer_Get(patient As Collection) 'fix me to fk_patient
   'temp code get the responsible person FIXME  body code only whilst developin
   'need more inclusive way of getting the payer - eg might not be a patient
   
   bExit = True   
   cvwUnBilled.MoveCurrent()
   payer = modBillingDBI.Responsible_Payer_Get(Patient!fk_patient)
   If Not IsNull(Payer) Then  
      If Patient!fk_patient <> payer!fk_patient Then
         bexit = False  
         rbInvoiceOrganisation.value = True 
         
      Else
         Try textlabelPayer.text = payer!wholename & "<BR>" & Trim(payer!street1 & " " & payer!street2) & "<BR>" & payer!town & " " & payer!postcode
         bExit = False  
      End If   
   End If  
   
End

Public Sub gvwPayments_Init()
   '------------------------------------------------------------------------
   'Construct the grid which will hold the payments for items on the invoice
   '------------------------------------------------------------------------   
   
   With gvwPayments
      .Rows.count = 1
      .Rows.H = 20 
      .Columns.count = 6
      .Columns[0].text = "Amount"
      .Columns[0].width = 75
      lblmeasure.text = "Medicare Cheque  "
      .Columns[1].text = "Payment Type"
      .Columns[1].width = lblmeasure.Width
      lblmeasure.text = "Cheque Number"
      .Columns[2].text = "Drawer on Cheque"
      .Columns[2].width = 200
      .Columns[3].text = "Cheque Number"
      .Columns[3].width = lblmeasure.Width
      .Columns[4].text = "Bank"
      .Columns[4].width = 100
      .Columns[5].text = "Branch"
      .Columns[5].width = 100
   End With
   
End

Public Sub gvwPayments_Enter()
   '--------------------------------------------------
   'if cursor comes within bounds of the payments grid
   'position the payment method combo
   '---------------------------------------------------
   
   With cmbPaymentMethods
      .width = gvwPayments.Columns[cGridColumnPayments_PaymentType].Width
      .height = gvwPayments.Rows[0].Height + 5
      .left = gvwPayments.left + gvwPayments[onrow_payments, cGridColumnPayments_PaymentType].Left + 2
      .top = ((onrow_payments + 1) * 20) + 2
      If gvwPayments.Column <> cGridColumnPayments_PaymentType Then
         .Visible = False   
      Else
         .Visible = True
      End If
   End With
   
End

Public Sub gvwPayments_Click()
   '----------------------------------------
   'User has clicked on the payment gridview
   '----------------------------------------  
   ' 
   
   If gvwPayments.column = cGridColumnPayments_PaymentType Then
      cmbPaymentMethods.Visible = True
   Else
      cmbPaymentMethods.Visible = False   
   Endif
   
End

Public Sub gvwPayments_DblClick()
   '------------------------------------------------------------------------------
   'User has clicked on the payments grid, to make a payment record
   'User will be physically unable to click on column 2 (payment type)
   'as the payment type combo appears via gvwPayments_Enter) and overlays the grid
   '------------------------------------------------------------------------------  
   
   Dim i As Integer
   Dim iSlotCount As Integer
   
   oncol_payments = gvwPayments.Column
   onrow_payments = gvwPayments.Row
   txtPayment.text = gvwPayments[onrow_payments, oncol_payments].text
   If oncol_payments = cGridColumnPayments_PaymentType Then Return 
   bFoundFirst = False  
   onrow_payments = gvwPayments.Row 
   iLeft = gvwPayments[onrow_payments, oncol_payments].Left + gvwPayments.Left
   iTop = ((onrow_payments + 1) * 20) + 2 
   txtPayment.left = iLeft + 2
   txtPayment.top = iTop
   txtPayment.width = gvwPayments.Columns[oncol_payments].Width + 2
   txtPayment.Height = gvwPayments.Rows[0].Height + 5
   txtPayment.Visible = True
   txtPayment.SetFocus()
   
End

Public Sub txtPayment_Activate()
   '----------------------------------------------------------------------------
   'User has hit <enter> key whilst typing in the textbox over the payments grid
   '----------------------------------------------------------------------------
   
   If bexit Then Return 
   Select Case oncol_payments
      Case cGridColumnPayments_Amount
         gvwPayments[gvwPayments.row, 0].Text = modUtil.Money_Format(txtPayment.text)
         If gvwPayments[gvwPayments.row, 1].Text = "" Then
            cmbPaymentMethods.Visible = True  
         Endif
         Payment_Calculate_Total
      Case Else
         gvwPayments[gvwPayments.row, oncol_payments].Text = Trim(txtPayment.Text)
   End Select 
   txtPayment.Visible = False   
   EditArea_Notify_Data_Change(True)
   
End

Public Sub gvwItemsBIlled_Init()
   '----------------------------------------------------------
   'Contruct the grid which will hold the items on the invoice
   '----------------------------------------------------------   
   
   Dim x As Integer
   
   With gvwItemsBIlled
      .Rows.H = 20 
      .Columns.Count = 6
      .Rows.count = 4
      .height = 100
      .Columns[0].text = "Item"
      .Columns[1].text = "Description"
      .Columns[2].text = "Fee"
      .Columns[3].text = "Gap"
      .Columns[4].text = "Rate"
      .Columns[5].text = "GST"
      For x = 0 To 5
         If x <> 1 And x <> 4 Then 
            .Columns[x].Width = 75
         Else
            .Columns[1].width = gvwItemsBIlled.width - 500
            .Columns[4].width = 200
         End If
      Next
      lblmeasure.text = "Invoice Total "
      lblPaymentLeft.width = gvwItemsBIlled.Columns[0].width + gvwItemsBIlled.Columns[1].width - lblmeasure.width   
      lblPaymentTotal.width = lblmeasure.width + gvwItemsBIlled.Columns[3].width 
      lblInvoiceTotal.width = lblPaymentTotal.Width
      lblInvoiceLeft.width = lblPaymentLeft.Width
      lblInvoiceRight.width = lblPaymentRight.Width 
   End With
   
End

Public Sub gvwItemsBIlled_Menu()
   '-------------------------------------------------------------
   'if any of the cells in the grid have text then popup the menu
   '-------------------------------------------------------------
   
   Dim row As Integer
   Dim col As Integer
   Dim bHaveText As Boolean
   
   If bPayingInvoice Then Return 
   For row = 0 To gvwItemsBIlled.Rows.count - 1
      For col = 0 To 4
         If gvwItemsBIlled[row, col].Text <> "" Then
            mnuItems.Popup
            bHaveText = True
            Break
         Endif
      Next
      If bHaveText Then Break
   Next  
   
End

Public Sub gvwItemsBIlled_Delete_Row(onrow_items As Integer)
   
   Dim col As Integer
   
   If bPayingInvoice Then Return 
   For col = 0 To 5
      gvwItemsBIlled[onrow_items, col].text = ""
   Next
   HBox_Descriptor.Visible = False  
   columnview1.Visible = False   
   Invoice_Calculate_Total("Invoice Total")
   
End

Public Sub gvwItemsBIlled_Click()
   
   If gvwItemsBIlled.column = cGridColumnItem_FeeType Then 
      With cmbFeeType
         .width = gvwItemsBIlled.Columns[cGridColumnItem_FeeType].Width
         .height = gvwItemsBIlled.Rows[0].Height + 5
         .left = gvwItemsBIlled[0, cGridColumnItem_FeeType].Left + 2
         .top = ((gvwItemsBIlled.row + 1) * 20) + 2
         .Visible = True
      End With
   Else
      cmbFeeType.Visible = False   
   Endif 
   onrow_items = gvwItemsBIlled.Row
   OnCol_Items = gvwItemsBIlled.Column
   
End

Public Sub gvwItemsBilled_DblClick()
   
   Dim i As Integer
   Dim iSlotCount As Integer
   
   Print "onrow_itmes, oncol_items", onrow_items, OnCol_Items
   Print "gvwBilled.row", gvwItemsBIlled.Row
   Print "bexit is", bexit
   If gvwItemsBIlled.row = - 1 Then
      gvwItemsBIlled.SetFocus()
      Return
   Endif
   If bPayingInvoice Or bexit Or gvwItemsBIlled.Column = 4 Or txtpatient.text = "" Or gvwItemsBIlled[gvwItemsBIlled.Row, gvwItemsBIlled.column].text <> "" Then Return 
   If gvwItemsBIlled.Row > 0 And gvwItemsBIlled[0, 0].text = "" Then 'if user clicks on row and row above not filled in move back FIXME THIS CODE DOES NOT DO THIS
      onrow_items = 0
      gvwItemsBIlled.row = 0
   Endif
   If textbox1.Visible = False Then HBox_Descriptor.Visible = False  
   If gvwItemsBIlled.Column <> cGridColumnItem_BriefDescriptor Then HBox_Descriptor.Visible = False   
   
   TextBox1.text = ""                                  'clear search textbox
   If gvwItemsBIlled.column = 1 Then  'the brief descriptor, allow searching
      Try txtDescriptor.text = item!descriptor
      If Not Error Then
         txtDescriptor.Pos = 0
         HBox_Descriptor.Visible = True   
      Endif
   End If  
   iLeft = gvwItemsBIlled[gvwItemsBIlled.row, gvwItemsBIlled.Column].Left
   iTop = ((gvwItemsBIlled.row + 1) * 20) + 4 'iSlotCount * 20
   With TextBox1
      .left = iLeft + 2
      .top = iTop
      .width = gvwItemsBIlled.Columns[gvwItemsBIlled.Column].Width + 4
      .Height = gvwItemsBIlled.Rows[0].Height + 5
      .Visible = True
      .SetFocus()
   End With
   
End

Public Sub gvwItemsBilled_DblClick_old()
   
   Dim i As Integer
   Dim iSlotCount As Integer
   
   Print "onrow_itmes, oncol_items", onrow_items, OnCol_Items
   Print "gvwBilled.row", gvwItemsBIlled.Row
   Print "bexit is", bexit
   If bPayingInvoice Or bexit Or OnCol_Items = 4 Or txtpatient.text = "" Or gvwItemsBIlled[onrow_items, OnCol_Items].text <> "" Then Return 
   If gvwItemsBIlled.Row > 0 And gvwItemsBIlled[0, 0].text = "" Then 'if user clicks on row and row above not filled in move back FIXME THIS CODE DOES NOT DO THIS
      onrow_items = 0
      gvwItemsBIlled.row = 0
   Endif
   If textbox1.Visible = False Then HBox_Descriptor.Visible = False  
   If OnCol_Items <> cGridColumnItem_BriefDescriptor Then HBox_Descriptor.Visible = False   
   
   TextBox1.text = ""                                  'clear search textbox
   If gvwItemsBIlled.column = 1 Then  'the brief descriptor, allow searching
      Try txtDescriptor.text = item!descriptor
      If Not Error Then
         txtDescriptor.Pos = 0
         HBox_Descriptor.Visible = True   
      Endif
   End If  
   iLeft = gvwItemsBIlled[onrow_items, OnCol_Items].Left
   iTop = ((onrow_items + 1) * 20) + 4 'iSlotCount * 20
   With TextBox1
      .left = iLeft + 2
      .top = iTop
      .width = gvwItemsBIlled.Columns[OnCol_Items].Width + 4
      .Height = gvwItemsBIlled.Rows[0].Height + 5
      .Visible = True
      .SetFocus()
   End With
   
End

Public Sub gvwItemsBIlled_Select()
   
   TextBox1.Visible = False   
   
End

Public Sub gvwItems_Keypress()
   'FIXME ?NOT USED AT ALL NOW
   
   If bExit Or bPayingInvoice Then Return 
   If key.code = key.return Then
      OnCol_Items = 0
      onrow_items = 0
      gvwItemsBIlled_DblClick()
   Endif
   
End

Public Sub cmbEditArea_Enter()
   
   If Last.tag = "fee type" Then last_Fee_Type = cmbFeeType.text
   
End

Public Sub cmbEditArea_KeyPress()
   
   If key.code = key.return And Last.tag = "payment method" Then
      cmbEditArea_Click()
   Endif
   
End

Public Sub cmbEditArea_LostFocus()
   
   Select Case Last.tag
      Case "fee type", "payment method"
         Last.visible = False 
   End Select
   
End

Public Sub cmbFeeType_Click()
   
   'User is changing the fee type
   gvwItemsBIlled[onrow_items, cGridColumnItem_FeeType].text = cmbFeeType.Text
   If gvwItemsBIlled[onrow_items, 0].text <> "" Then  
      Try gvwItemsBIlled[onrow_items, cGridColumnItem_Fee].text = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(gvwItemsBIlled[onrow_items, 0].text, FeeTypes[cmbFeeType.index]!pk)!price
      If Error Then
         Message.info("No fee's exist for the billing level you selected")
         cmbFeeType.index = cmbFeeType.Find(last_Fee_type)
      Endif
   End If   
   Invoice_Calculate_Total("Invoice Total")
   EditArea_Notify_Data_Change(True)
   
End

Public Sub cmbEditArea_Click()
   
   Dim chequedetails As Collection 
   
   If bExit Then Return 
   
   Select Case Last.tag
      Case "fee type"
         ' 'User is changing the fee type
         ' gvwItemsBIlled[onrow_items, cGridColumnItem_FeeType].text = cmbFeeType.Text
         ' Try gvwItemsBIlled[onrow_items, cGridColumnItem_Fee].text = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(gvwItemsBIlled[onrow_items, 0].text, FeeTypes[cmbFeeType.index]!pk)!price
         ' If Error Then
         '    Message.info("No fee's exist for the billing level you selected")
         '    cmbFeeType.index = cmbFeeType.Find(last_Fee_type)
         ' Endif
         ' Invoice_Calculate_Total
      Case "payment method"
         gvwPayments[onrow_payments, cGridColumnPayments_PaymentType].Text = cmbPaymentMethods.Text
         If InStr(cmbPaymentMethods.Text, "Cheque") Then  
            Select Case cmbPaymentMethods.Text
               Case "Medicare Cheque"
                  gvwPayments[onrow_payments, cGridColumnPayments_Bank].Text = "Reserve"
                  gvwPayments[onrow_payments, cGridColumnPayments_Branch].text = "Sydney"
               Case "Veteran Cheque"
                  
               Case "Cheque"
                  '--------------------------------------------------- 
                  'Find if this patient has payed by cheque previously
                  '---------------------------------------------------
                  chequedetails = modBillingDBI.Cheque_Details_Get(fk_patient)
                  If Not IsNull(chequedetails) Then
                     gvwPayments[onrow_payments, cGridColumnPayments_Bank].Text = chequedetails!bank
                     gvwPayments[onrow_payments, cGridColumnPayments_Branch].text = chequedetails!branch
                     oncol_payments = cGridColumnPayments_ChequeNumber
                     gvwPayments_DblClick()
                  Endif
            End Select
            cmbPaymentMethods.Visible = False
            gvwPayments.Column = 2   'anything but cGridColumnPayments_PaymentType otherwise combo won't disappear
            gvwPayments.SetFocus() 
         Else
            gvwPayments[onrow_payments, cGridColumnPayments_Bank].Text = ""
            gvwPayments[onrow_payments, cGridColumnPayments_Branch].text = ""
            gvwPayments[onrow_payments, cGridColumnPayments_ChequeNumber].text = ""
         End If   
   End Select
   EditArea_Notify_Data_Change(True)
   
End

Public Sub TextBox1_GotFocus()
   '-----------------------------------------------------
   'If searching for brief descriptor then activate timer
   '-----------------------------------------------------   
   
   If OnCol_Items = cGridColumnItem_BriefDescriptor Then
      With columnview1
         .top = Hbox_InvoiceGrid.top + TextBox1.top + TextBox1.height
         .left = VBox_InvoiceGrid.Left + TextBox1.Left
         .width = TextBox1.Width
         .Visible = False  
      End With
      With HBox_Descriptor
         .top = columnview1.Top
         .Width = columnview1.Width
         .left = columnview1.left
         .Height = VBox_InvoiceGrid.height - TextBox1.top - textbox1.height
         If Last.text = "" And gvwItemsBIlled[onrow_items, 0].text <> "" Then .Visible = True 
      End With
      iTimer_Search_Mode = cTimer_SearchMode_Descriptor
   Endif
   
End

Public Sub TextBox1_Activate()
   
   If bexit Then Return 
   Select Case OnCol_Items
      Case cGridColumnItem_ItemNumber
         gvwItemsBIlled[gvwItemsBIlled.row, 0].Text = TextBox1.text
         TextBox1.Visible = False  
         Get_Items(TextBox1.text)
      Case cGridColumnItem_Fee
         gvwItemsBIlled[gvwItemsBIlled.row, 2].text = "$" & Trim(TextBox1.text)
         TextBox1.Visible = False   
         gvwItemsBIlled.SetFocus()
      Case cGridColumnItem_BriefDescriptor
         If IsNull(item) Then Return 
         If IsNull(item!descriptor_brief) Then
            Message.Title = "Brief Descriptors"
            gvwItemsBIlled[gvwItemsBIlled.row, 1].Text = Trim(TextBox1.text)
            If Message.question("Do you want to save this brief descriptor?", "Yes", "No") = 1 Then
               modDBConnect.update("billing.fee_schedule", Null, ["pk": item!fk_fee_schedule, "descriptor_brief": gvwItemsBIlled[gvwItemsBIlled.row, 1].Text])   
               item!descriptor_brief = gvwItemsBIlled[gvwItemsBIlled.row, 1].Text
               modDBConnect.CommitTrans()
               TextBox1.Visible = False   
               HBox_Descriptor.Visible = False 
               txtDescriptor.text = "" 
               gvwItemsBIlled.SetFocus()
            Endif
         Endif
   End Select
   
End

Public Sub textbox1_KeyPress()
   
   Select Case key.Code
      Case key.Down
         If OnCol_Items = cGridColumnItem_BriefDescriptor Then
            If columnview1.Visible Then
               With columnview1
                  .MoveFirst
                  .Item.Selected = True 
                  .SetFocus()
               End With
            End If 
         End If 
   End Select
   
End

Public Sub Textbox1_KeyRelease()
   '--------------------------------------------------------------------
   'if user searching for brief descriptor zero the timer count
   'then once they stop typing and timer_count which is incremented by
   'Timer1_Timer > 3 the search is triggered see   Descriptors_Brief_Get
   '--------------------------------------------------------------------
   
   If Trim(TextBox1.text) = "" Then Return  
   timer_count = 0
   If OnCol_Items = cGridColumnItem_BriefDescriptor Then
      timer1.Enabled = True   
      timer1.Start
   Else
      timer1.Enabled = False  
      timer1.Stop
   Endif
   
End

Public Sub Form_Close()
   
   Settings_Save() 
   
End

Private Sub Settings_Load()
   
   Try Vsplit_Main.layout = Settings["Billing_RecordVisit/VSplit_Main.Layout"]
   Try Hsplit_Main.Layout = Settings["Billing_RecordVisit/HSplit_Main.Layout"] 
   Hsplit_EditArea.Layout = Settings["Billing_RecordVisit/HSplit_EditArea.Layout", [2, 1]]  
   Try cvwItemsBilled.Font = Font[Settings["Billing_RecordVisit/cvwItemsBilled.font"]] 
   
End

Public Sub Settings_Save()
   
   Settings["Billing_RecordVisit/VSplit_Main.Layout"] = Vsplit_Main.Layout
   Settings["Billing_RecordVisit/HSplit_Main.Layout"] = Hsplit_Main.Layout
   Settings["Billing_RecordVisit/HSplit_EditArea.Layout"] = Hsplit_EditArea.Layout
   
End

Public Sub Save(bBulkBill As Boolean, Optional bPrint As Boolean = True, Optional bAccount As Boolean = False) ', Optional bPaid As Boolean = False)
   ' Public Sub Make_Invoice(pk_patient As Integer, items As Collection[], fk_lu_billing_type As Integer, date_printed As Date Default Null, fk_staff As Integer = 0, Optional notes As String = "") As Integer
   ' CREATE TABLE billing.invoices
   ' (
   '  pk serial NOT NULL,
   '   fk_staff_invoicing integer NOT NULL, -- the staff member raising the invoice
   '   date_printed timestamp without time zone,
   '   notes text,
   '   reference text,
   '   fk_staff_provided_service integer NOT NULL, -- the staff member who provider the service on which the invoice is based
   '   fk_patient integer,
   '   date_invoiced timestamp without time zone NOT NULL DEFAULT now(),
   '   paid boolean NOT NULL DEFAULT false,
   '   fk_payer_person integer, -- if not null then the key to the person who pays the bill
   '   fk_payer_branch integer, -- if not null then payer is an organisation/branch
   '   latex text NOT NULL, -- the LaTeX definition of the invoice generated
   '   fk_branch integer NOT NULL, -- The branch at which the patient was provided with the service
   '   visit_date date, -- The date time of the patient visit - may be null because the invoice could be raised not in relation to a visit
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   ' CREATE TABLE billing.items_billed
   
   Dim invoice As New CRow
   Dim i As Collection
   Dim new_item As Collection
   Dim items As New Collection
   Dim item As CRow
   Dim payment As CRow
   Dim x As Integer
   Dim payment_method As Collection  
   Dim payment_total As Variant
   Dim bPaid As Boolean = False
   Dim grid_row As Integer
   Dim total_paid As Float
   Dim invoice_total As Float
   Dim sMsg As String
   
   If VBox_EditArea_Outer.Padding = 0 Then Return           'no data change no save
   If Not Valid_Invoice_Items() Then Return                 'items invalid no save
   '-----------------------------------------------------
   'Now, work out if being paid, if so ?all, is it valid?
   '-----------------------------------------------------
   If lblPaymentTotal.text <> "" Then  
      Message.Title = "Payment of Invoice"   
      For grid_row = 0 To gvwPayments.Rows.Max
         If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then            'if have an amount
            If gvwPayments[grid_row, cGridColumnPayments_PaymentType].text = "" Then
               gvwPayments.Row = grid_row
               gvwPayments.Column = cGridColumnPayments_PaymentType
               Message.Info("Please enter type of payment.\n\n")
               gvwPayments_Click()
               Return
            Endif
            total_paid = total_paid + CFloat(Val(Replace(gvwPayments[grid_row, cGridColumnPayments_Amount].text, "$", ""))) 
         Else
            If grid_row = 0 Then   
               gvwPayments.Row = 0
               gvwPayments.Column = 0
               Message.Info("Please enter amount of payment.\n\n")
               gvwPayments_DblClick()
               Return
            End If
         End If  
      Next
   End If   
   '------------------------------------------------------------
   'finally if being paid, does the paid amount match the total?
   '------------------------------------------------------------
   invoice_total = CFloat(Val(Right(lblInvoiceTotal.text, Len(lblInvoiceTotal.text) - InStr(lblInvoiceTotal.text, " $") - 1)))
   If total_paid <> 0 Then 
      If total_paid < invoice_total Then  
         sMsg = "The invoice amount and amount paid do not match.\n\n"
         "Do you wish to accept part payment of this invoice?\n\n"
         If Message.Question(sMsg, "Yes - accept part payment", "No") = 2 Then Return
      Else
         If total_paid > invoice_total Then 
            Message.Info("The amount being paid is greater than the invoice total.")
            Return
         Endif
         
      Endif
   End If   
   '-----------------------------------------------------------------------------
   'At this point validation finished total_paid 0 or amount <= invoice total
   'Create or edit the invoice
   'If editing (e.g paying) then user will not have been able to change
   'any of the core invoice details, ie date originally invoiced, who invoiced it
   '-----------------------------------------------------------------------------
   If fk_invoice Then                                                   'existing invoice
      invoice.put_unchanged(fk_invoice, "fk_invoice")                   'edit the record
   Else
      invoice!fk_staff_invoicing = modDBConnect.currentUser!fk_staff    'new - then current user is doing the invoicing
      invoice!date_invoiced = Now()
      invoice!date_printed = Now()
      invoice!notes = cmbInvoiceComments.Text
      invoice!reference = Trim(txtReferenceDetails.text)
      If bBulkBill Then
         If rbInvoiceToMedicare.value = True Then invoice!fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare
         If rbInvoiceToVeterans.value = True Then invoice!fk_lu_bulk_billing_type = const.BulkBilling_Type_Veteran
      Endif
      If cmbSeenBy.Index <> -1 Then    
         invoice!fk_staff_provided_service = staff[cmbSeenBy.index]!fk_staff
      End If 
      If fk_patient <> 0 Then invoice!fk_patient = fk_patient     'may not be for a patient
      invoice!fk_branch = modDBConnect.currentUser!fk_branch      'branch at which service was provided
      If fk_payer_branch <> 0 Then invoice!fk_payer_branch = fk_payer_branch
      If fk_payer_person <> 0 Then invoice!fk_payer_person = fk_payer_person
      invoice!visit_date = Val(txtDate.text)
   End If   
   '----------------------------------
   'has the invoice been paid in full?- fix this code
   '----------------------------------
   If invoice_total = total_paid Then 
      invoice!paid = True  
      bpaid = True
   Else
      bpaid = False 
   End If  
   invoice.Save("billing.invoices", "fk_invoice")
   '------------------------------------
   'Get the items from the grid and save
   'FIXME - will later keep the underlying grid data in an array of some sort
   'and dispose of some of these backend calls
   '------------------------------------
   If fk_invoice = 0 Then  'FIXME MAY HAVE TO ALLOW EDITING OF THIS
      For grid_row = 0 To gvwItemsBIlled.Rows.count - 1  'fixme check all necessary data is in grids cells
         If gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text <> "" Then  
            item = New CRow
            item!fk_fee_schedule = modBillingDBI.fk_fee_shedule_Get_For_Item_Number(gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text)
            item!amount = gvwItemsBIlled[grid_row, cGridColumnItem_Fee].Text
            item!fk_invoice = invoice!fk_invoice
            item!fk_lu_billing_type = Billing_Type_Get_Pk(gvwItemsBIlled[grid_row, cGridColumnItem_FeeType].Text)
            item!amount_gst = gvwItemsBIlled[grid_row, cGridColumnItem_gst_amount].Text
            item.Save("billing.items_billed", "fk_item_billed")
         End If   
      Next
   End If   
   '----------------------------------------------------
   'Now, is this invoice being paid? in part or in full?
   '----------------------------------------------------
   If total_paid > 0 Then
      '  pk serial NOT NULL,
      '   fk_invoice integer NOT NULL,
      '   amount money NOT NULL,
      '   fk_lu_payment_method integer,
      '   date_paid timestamp without time zone NOT NULL DEFAULT now(),
      For grid_row = 0 To gvwPayments.Rows.count - 1
         If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then 
            payment = New CRow
            payment!fk_invoice = invoice!fk_invoice  
            payment!amount = gvwPayments[grid_row, cGridColumnPayments_Amount].Text
            For Each payment_method In Payment_Methods
               If payment_method!method = gvwPayments[grid_row, cGridColumnPayments_PaymentType].text Then
                  payment!fk_lu_payment_method = payment_method!pk
                  Break
               Endif
            Next
            'this simple way screwed by ians smart changes.
            '   payment!fk_lu_payment_method = Payment_Methods[gvwPayments[x, cGridColumnPayments_PaymentType].text]!fk_lu_payment_method  
            payment!date_paid = Now()
            payment!fk_staff_receipted = modDBConnect.currentUser!fk_staff
            payment.Save("billing.payments_received", "fk_payment")
         End If   
      Next
   Endif
   '------------------------------------------
   'finally mark this appointment as invoiced
   'fixme only update  this on first pass
   'fime  misnomer invoice or reciept
   '-----------------------------------------
   
   Try modDBConnect.update("clerical.bookings", Null, ["pk": Unbilled_consultation!pk, "invoiced": True])  'may not have an appt.
   'fixme won't always be printed.
   If fk_invoice = 0 And Not bpaid Then 
      invoice!latex = modBillingDBI.Print_Invoice(invoice, bPrint, bBulkBill) 
      modDBConnect.update("billing.invoices", Null, ["pk": invoice!fk_invoice, "latex": invoice!latex])
   End If   
   modDBConnect.CommitTrans
   If TabStripBilling.index = 0 Then 
      cvwUnBilled_Refresh()
   Else
      cvwItemsBilled_Refresh()  
   End If 
   
End 

Public Sub Billing_Type_Get_Pk(txt As String) As Integer
   
   Dim type As Collection
   
   For Each type In FeeTypes
      If type!type = txt Then
         Return type!pk
      Endif
   Next 
   
End

Public Sub Form_Resize()
   
   gvwItemsBIlled_Init()
   
End

Public Sub Appointment_icons_Get_Picture(Appointment_Icons As Collection) As Collection 
   '-----------------------------------------------------------------------------------------
   'Loads the actual picture of the appointment icon into the collection got from the backend
   '-----------------------------------------------------------------------------------------
   
   Dim Appointment_icon As Collection
   
   For Each Appointment_Icon In Appointment_Icons
      Appointment_Icon!picture = Picture.Load(Appointment_Icon!icon_path)
   Next
   Return Appointment_Icons
   
End

Public Sub Descriptors_Brief_Get()
   
   If Trim(TextBox1.text) = "" Then Return  
   timer1.Stop
   With columnview1
      .Clear
      .Visible = False
   End With
   Descriptors_Brief = modBillingDBI.Descriptors_Brief_Get(Trim(TextBox1.text))
   If Descriptors_Brief.count Then
      For Each Descriptor_Brief In Descriptors_Brief  
         columnview1.Add(Descriptor_Brief!pk, 0)
         columnview1[Descriptor_Brief!pk][0] = Descriptor_Brief!mbs_item
         columnview1[Descriptor_Brief!pk][1] = Descriptor_Brief!descriptor_brief
      Next
      With columnview1
         .Raise
         .Visible = True   
      End With
   Else
      
   End If
   
End

Public Sub Patients_Get()
   '-------------------------------------------------------------------
   'Get patients ILIKE txtFindPatient
   'Note as this returns multiple lines if there are multiple addresses
   'keep only one instance of the patient
   '-------------------------------------------------------------------
   
   Dim last_fk_patient As Integer
   
   If Trim(txtFindPatient.text) = "" Then Return 
   Inc Application.Busy
   timer1.Stop
   cvwPatients.Clear
   patients = modContactsDBI.patients_get_firstname_surname(Trim(txtFindPatient.text))       
   patients.Remove("sql_in_english")
   Dec Application.Busy
   If patients.count Then
      For Each patient In patients
         If last_fk_patient <> patient!fk_patient Then   
            cvwPatients.Add(patient!pk_view, 0)
            cvwPatients[patient!pk_view][0] = patient!wholename
            cvwPatients[patient!pk_view][1] = Format(patient!birthdate, "dd/mm/yyyy")
            last_fk_patient = patient!fk_patient   
         End If   
      Next
      If patients.count = 1 Then
         With cvwPatients
            .SetFocus()
            .MoveFirst
            .Item.Selected = True  'trigger cvwPatients_Select()
         End With
      Endif
   Endif
   
End

Public Sub Get_Items(txt As String)
   'developmental prototype only doesn't just get items.
   'A patient may have a default 'billing_level' eg. private or health care concession
   ' "1";"Bulk Bill"
   ' "2";"Private"
   ' "3";"Health Care Card Concession"
   ' "4";"Pensioner Concession"
   ' "5";"Medico-Legal"
   'however these billing_levels are not the same as the concept of billing_types in the backend
   ' "1";"AMA Fee"
   ' "2";"DVA (Non LMO rate)"
   ' "3";"DVA (LMO rate)"
   ' "4";"Health Care Card Concession"
   ' "5";"Pensioner Concession"
   ' "6";"Private Fee"
   ' "7";"TAC (Transport Accident Commission)"
   ' "8";"Schedule Fee"
   ' For example a patient may be bulk billed as either medicare or veteran (for some things) or both
   ' or a practice may bill privately at the AMA rate, or pripatientsvately at a concession rate
   
   Dim fk_lu_billing_type As Integer
   Dim bMissingBriefDescriptor As Boolean
   Dim billing_type As String
   Dim price As Variant
   
   txtDescriptor.text = ""
   bExit = True
   Select Case fk_lu_default_billing_level     
      Case const.Billing_Default_Level_BulkBill
         fk_lu_billing_type = const.Billingtype_Scheduled_Fee
         billing_type = "Schedule Fee"
      Case const.Billing_Default_Level_PensionerConcession
         fk_lu_billing_type = const.Billingtype_Pensioner_Concession
         billing_type = "Pensioner Concession"
      Case const.Billing_Default_Level_HealthCareCardConcession
         fk_lu_billing_type = const.Billingtype_Health_Care_Card_Concession
         billing_type = "Health Care Card Concession"
      Case const.Billing_Default_Level_Private
         fk_lu_billing_type = const.Billingtype_Private
         billing_type = "Private Fee"
      Case const.Billing_Default_Level_MedicoLegal
         fk_lu_billing_type = const.Billingtype_Private
         billing_type = "Private Fee" 'fixme
      Case Else 'is null
         fk_lu_billing_type = const.Billingtype_Private                         'default to private billing
         billing_type = "Private Fee"
   End Select
   
   ' If IsNull(fk_lu_default_billing_level) Then
   '    cmbFeeType.index = cmbFeeType.Find("Private Fee")
   '    gvwItemsBIlled[gvwItemsBIlled.row, 4].Text = "Private Fee"
   ' Else
   '    cmbFeeType.index = cmbFeeType.Find(billing_type)
   '    gvwItemsBIlled[gvwItemsBIlled.row, 4].Text = billing_type
   ' Endif
   Scheduled_Fee = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(Trim(txt), const.Billingtype_Scheduled_Fee)
   'Look in ordinary items first,if fail and we have a non-patient payer - try workcover
   Items = modBillingDBI.Items_Get(Trim(txt), fk_lu_billing_type)
   If items.count = 0 And textlabelPayer.text <> "" Then 
      Items = modBillingDBI.Items_Get(Trim(txt), const.Billingtype_Workcover)
   End If
   If items.count = 0 Then 
      Message.Info("The item number was not found")
      gvwItemsBIlled_Delete_Row(gvwItemsBIlled.row)
      bExit = False  
      Return
   End If  
   
   If items.count Then
      For Each item In items 'fixme ?proper way of doing this
         If IsNull(item!descriptor_brief) Then
            bMissingBriefDescriptor = True   
         Endif
         price = Replace(item!price, "$", "") 
         gvwItemsBIlled[gvwItemsBIlled.row, 1].Text = item!descriptor_brief
         gvwItemsBIlled[gvwItemsBIlled.row, 2].Text = item!price
         Try gvwItemsBIlled[gvwItemsBIlled.row, 3].Text = Format(Str(CFloat(Val(Replace(item!price, "$", ""))) - CFloat(Val(Replace(Scheduled_Fee!price, "$", "")))), "$#.###")
         gvwItemsBIlled[gvwItemsBIlled.row, 4].text = item!fee_type
         last_Fee_type = item!fee_type
         If Not IsNull(item!gst_rate) And item!gst_rate <> 0 Then 'FIX ME ?CONVERT BACKEND TO NULL IN THIS FIELD NOT ZERO.
            gvwItemsBIlled[gvwItemsBIlled.row, 5].Text = modUtil.Money_Format(price / item!gst_rate)
         Endif
         Break
      Next
      bExit = False 
      Invoice_Calculate_Total("Invoice Total")
      ' If bMissingBriefDescriptor = False Then gvwItemsBIlled.row = gvwItemsBIlled.row + 1
   Else
      item = Null 
      
   Endif
   If bMissingBriefDescriptor = True Then
      OnCol_Items = 1
      gvwItemsBIlled_DblClick()
      Return
   End If  
   EditArea_Notify_Data_Change(True)
   OnCol_Items = 0
   onrow_items = Min(onrow_items + 1, 3)
   With gvwItemsBIlled
      .Column = OnCol_Items
      .Row = onrow_items
      .SetFocus()
   End With
   bExit = False  
   
End

Public Sub columnview1_KeyPress()
   
   If key.code = key.return Then
      columnview1_DblClick
   End If  
   
End

Public Sub columnview1_DblClick()
   
   columnview1.MoveCurrent()
   Select Case Last.tag.tag
         
      Case "something"
         
         Descriptor_Brief = Descriptors_Brief[columnview1.Item.key]
         If Not IsNull(Descriptor_Brief!mbs_item) Then
            gvwItemsBIlled[onrow_items, 0].text = Descriptor_Brief!mbs_item 'double done in get_items, prototype only fixme
         End If
         If Not IsNull(Descriptor_Brief!ama_item) Then
            gvwItemsBIlled[onrow_items, 0].text = Descriptor_Brief!ama_item
         End If
         If Not IsNull(Descriptor_Brief!user_item) Then
            gvwItemsBIlled[onrow_items, 0].text = Descriptor_Brief!user_item
         End If
         Get_Items(gvwItemsBIlled[onrow_items, 0].text) 'duplication in a way 'see note in subroutine
         textbox1.Visible = False   
         gvwItemsBIlled.SetFocus()
      Case "payer search"
         Organisation_Select()
   End Select
   
End

Public Sub mnuItems_Click()
   
   Dim x As Integer
   
   Select Case Last.tag
      Case "delete item"
         gvwItemsBIlled_Delete_Row(onrow_items)
      Case "delete all items"
         gvwItemsBIlled_Clear()
      Case "add item"
         Inc gvwItemsBIlled.Rows.count
         gvwItemsBIlled.row = gvwItemsBIlled.Rows.Max
         gvwItemsBilled_DblClick()
   End Select 
   
End

Public Sub mnuItemsBilled_Click()
   
   cvwItemsBilled.MoveCurrent()
   Item_Billed = Items_Billed[cvwItemsBilled.Item.key] 
   Select Case Last.tag
      Case "invoice delete"
      Case "invoice mark unpaid"
         If Message.Question("Mark this invoice as unpaid?", "Yes", "No") = 2 Then Return 
         modDBConnect.update("billing.invoices", Null, ["pk": Item_Billed!fk_invoice, "paid": False])
         modDBConnect.CommitTrans()
         cvwItemsBilled_Refresh()
         If cvwItemsBilled.count Then
            cvwItemsBilled.MoveFirst
            cvwItemsBilled.Item.Selected = True  'should trigger loading the edit area
         Endif
      Case "item delete"
         Invoice_Delete_Item(Item_Billed)
      Case "font"
         modUtil.Columnview_SetFont(cvwItemsBilled, "Billing_RecordVisit")
   End Select 
   
End

Public Sub cvwItemsBilled_Menu()
   
   If cvwItemsBilled.count Then
      mnuItemsBilled.Popup()
   End If    
   
End

Public Sub Invoice_Delete_Item(i As Collection)
   
End

Public Sub gvwItemsBIlled_Clear()
   
   gvwItemsBIlled.Clear()
   item = Null
   OnCol_Items = 0
   onrow_items = 0
   
End

Public Sub Invoice_Calculate_Total(sTotalType As String)
   '----------------------------------------------------------------
   'Calculates the total amount of all items billed for this invoice
   '----------------------------------------------------------------   
   
   Dim x As Integer
   Dim total As Float
   
   For x = 0 To gvwItemsBIlled.Rows.Count - 1
      If gvwItemsBIlled[x, cGridColumnItem_Fee].text = "" Then Break
      total = total + CFloat(Val(Replace(gvwItemsBIlled[x, cGridColumnItem_Fee].text, "$", "")))
      If gvwItemsBIlled[x, cGridColumnItem_gst_amount].text <> "" Then
         total = total + CFloat(Val(Replace(gvwItemsBIlled[x, cGridColumnItem_gst_amount].text, "$", "")))
      Endif
   Next
   With lblInvoiceTotal
      .text = sTotalType & "  " & modUtil.Money_Format(total)
      .Font.Bold = False   
      .Foreground = Color.Black
      .Border = Border.Plain
   End With
   
End

Public Sub Payment_Calculate_Total()
   '-----------------------------------------------------------------
   'Calculates the total amount of all payments made for this invoice
   '------------------------------------------------------------------  
   
   Dim x As Integer
   Dim total As Float
   
   For x = 0 To gvwPayments.Rows.Count - 1
      If gvwPayments[x, cGridColumnPayments_Amount].text = "" Then Break
      total = total + CFloat(Val(Replace(gvwPayments[x, cGridColumnPayments_Amount].text, "$", "")))
   Next
   With lblPaymentTotal
      .text = "Payment Total  " & modUtil.Money_Format(total)
      .Font.Bold = False   
      .Foreground = Color.Black
      .Border = Border.Plain
   End With
   
End

Public Function Money_Add(monies As Variant[]) As String
   'IAN FIXME I NEED FUNCTION TO ADD UP MONEY 
   
End

Public Sub rbInvoiceTo_Click()
   '-------------------------------------------------------------------
   'If user changes billing level, change data in grid appropriately
   ' loop variable must be local but want onrow_items set to the row
   ' so that when cmbFeeType.index = cmbFeeType.Find(Last.tag) triggers
   ' cmbFeeType_Click we are on the correct row
   '-------------------------------------------------------------------
   
   Dim row As Integer
   
   If bExit Then Return 
   textlabelPayer.text = ""
   
   gvwItemsBIlled.row = 0
   gvwItemsBIlled.Select
   For row = 0 To gvwItemsBIlled.Rows.Max
      onrow_items = row                           
      If gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text <> "" Then
         If gvwItemsBIlled[row, cGridColumnItem_FeeType].text <> Last.tag Then
            cmbFeeType.index = cmbFeeType.Find(Last.tag)
         End If  
      End If 
   Next
   
End

Public Sub timer1_Timer()
   '-----------------------------------------------------------------------
   ' How this works for example
   ' EditArea_TextBox_GotFocus()   - enables the timer
   '                               - turns on the timer
   ' iTimer_Search_Mode            - set to  cTimer_SearchMode_Patient
   '                
   ' EditArea_Textbox_KeyRelease() - zeros timer_count to 0
   '                               - when user stops typing timer_count > 3
   '                                 and the search starts
   ' Whichever routine is searching eg Patients_Get() - stops timer
   ' VBox_PatientsList_Leave() - disables and turns off timer
   ' Note that EditArea_TextBox_LostFocus() is not used for this
   ' because it is a unreliable event - does not always trigger
   ' depends on which control after the textbox receives focus!
   ' ----------------------------------------------------------------------
   
   Inc timer_count
   If timer_count > 3 Then
      Select Case iTimer_Search_Mode
         Case cTimer_SearchMode_Patient
            Patients_Get
         Case cTimer_SearchMode_Descriptor
            Descriptors_Brief_Get
         Case cTimer_SearchMode_Payer
            Organisations_Get()
      End Select
   Endif
   
End

Public Sub VBox_InvoiceGrid_Leave()
   
   ' onrow_items = gvwItemsBIlled.Row
   'gvwItemsBIlled_Click()
   ' Wait
   If textbox1.Visible Then
      If OnCol_Items = cGridColumnItem_ItemNumber Then
         If gvwItemsBIlled[onrow_items, cGridColumnItem_BriefDescriptor].text = "" Then
            TextBox1_Activate()
         Endif
      Endif
      gvwItemsBIlled[onrow_items, OnCol_Items].text = Trim(textbox1.text)
   Endif
   If cmbFeeType.Visible Then
      gvwItemsBIlled[onrow_items, cGridColumnItem_FeeType].text = cmbFeeType.Text
      cmbFeeType.Visible = False 
   Endif
   TextBox1.Visible = False  
   timer1.Enabled = False   
   
End

Public Sub Billing_Defaults_Save()
   '-----------------------------------------------------------------
   'Save the billing defaults from the embedded FPatientBillingCards
   '-----------------------------------------------------------------
   
   Dim patient_billing_data As New CRow
   
   If Not form_billingcards.Valid_Data() Then Return 
   patient_billing_data.put_unchanged(fk_patient, "fk_patient")
   If form_billingcards.Responsible_Payer_Get_fk_Patient() = 0 Then
      patient_billing_data!fk_payer = Null
   Else
      patient_billing_data!fk_payer = form_billingcards.Responsible_Payer_Get_fk_Patient()
   Endif
   patient_billing_data!medicare_number = form_billingcards.Medicare_Number()
   patient_billing_data!medicare_ref_number = form_billingcards.Medicare_Reference_number()
   patient_billing_data!medicare_expiry_date = modUtil.Medicare_Create_Expiry_date(form_billingcards.Medicare_Card_Expiry_Date())
   patient_billing_data!veteran_number = form_billingcards.Veteran_Card_Number()
   If patient_billing_data!veteran_number <> "" Then 
      patient_billing_data!fk_lu_veteran_card_type = form_billingcards.Veteran_Card_Type()
      patient_billing_data!veteran_specific_condition = form_billingcards.veteran_specific_condition()
   Else
      patient_billing_data!fk_lu_veteran_card_type = Null
      patient_billing_data!veteran_specific_condition = Null
   End If  
   patient_billing_data!concession_card_number = form_billingcards.Concession_Card_Number()
   If patient_billing_data!concession_card_number <> "" Then
      patient_billing_data!concession_card_expiry_date = form_billingcards.Concession_Card_Expiry_Date()
      patient_billing_data!fk_lu_centrelink_card_type = form_billingcards.Centrelink_Card_Type()
   Else
      patient_billing_data!concession_card_expiry_date = Null
      patient_billing_data!fk_lu_centrelink_card_type = Null
   Endif
   patient_billing_data!fk_lu_default_billing_level = form_billingcards.Billing_level_Get()
   patient_billing_data!fk_lu_private_health_fund = form_billingcards.Private_Health_Fund()
   If patient_billing_data!fk_lu_private_health_fund <> const.PrivateHealthFund_None Then
      patient_billing_data!private_insurance = True
   Else
      patient_billing_data!private_insurance = False  
   Endif
   patient_billing_data!fk_doctor = form_billingcards.Preferred_Doctor()   
   patient_billing_data.Save("clerical.data_patients", "fk_patient")
   modDBConnect.CommitTrans()
   'now update the already loaded data
   If Not IsNull(patient) Then
      Patients_Get()
      ' patients[cvwPatients.Item.key]!fk_payer = patient_billing_data!fk_payer
      ' Payer_Get(patients[cvwPatients.Item.key])
      ' patients[cvwPatients.Item.key]!medicare_number = patient_billing_data!medicare_number
      ' patients[cvwPatients.Item.key]!medicare_ref_number = patient_billing_data!medicare_ref_number
      ' patients[cvwPatients.Item.key]!medicare_expiry_date = patient_billing_data!medicare_expiry_date
      ' patients[cvwPatients.Item.key]!veteran_number = patient_billing_data!veteran_number
      ' If patient_billing_data!veteran_number <> "" Then 
      '    patients[cvwPatients.Item.key]!fk_lu_veteran_card_type = patient_billing_data!fk_lu_veteran_card_type 
      '    patients[cvwPatients.Item.key]!veteran_specific_condition = patient_billing_data!veteran_specific_condition
      ' End If
      ' patients[cvwPatients.Item.key]!Concession_Card_Number = patient_billing_data!concession_card_number 
      ' If patient_billing_data!concession_card_number <> "" Then
      '    patients[cvwPatients.Item.key]!concession_card_expiry_date = patient_billing_data!concession_card_expiry_date
      '    patients[cvwPatients.Item.key]!fk_lu_centrelink_card_type = patient_billing_data!fk_lu_centrelink_card_type
      ' End If
      ' patients[cvwPatients.Item.key]!fk_lu_default_billing_level = patient_billing_data!fk_lu_default_billing_level 
      ' patients[cvwPatients.Item.key]!fk_lu_private_health_fund = patient_billing_data!fk_lu_private_health_fund
      ' If patient_billing_data!fk_lu_private_health_fund <> const.PrivateHealthFund_None Then
      '    patients[cvwPatients.Item.key]!private_insurance = True
      ' Else
      '    patients[cvwPatients.Item.key]!private_insurance = False  
      ' Endif
      ' patients[cvwPatients.Item.key]!fk_doctor = patient_billing_data!fk_doctor 
   Endif
   
End

Public Function Billing_Defaults_Valid() As Boolean
   '--------------------------------------------------------------------------
   'Validates dates in the embedded form of patients card and billing defaults
   'returns true if ok
   '--------------------------------------------------------------------------   
   
   If form_billingcards.txtMedicareCardExpiryDate.text <> "" Then              'only validate if user has entered something
      If Not IsDate(modUtil.Medicare_Create_Expiry_date(form_billingcards.txtMedicareCardExpiryDate.text)) Then
         form_billingcards.txtMedicareCardExpiryDate.SetFocus()
         Return 
      Endif
   Endif
   If form_billingcards.txtConcessionExpiryDate.text <> "" Then                 'only validate if user has entered something
      If Not IsDate(form_billingcards.txtConcessionExpiryDate.text) Then
         form_billingcards.txtConcessionExpiryDate.SetFocus()
         Return
      Endif
   Endif
   Return True
   
End

Public Sub MainToolbar_Click()
   
   Select Last.tag
      Case "save billing defaults"
         Billing_Defaults_Save()
      Case "new invoice"
         Unbilled_consultation = Null  'the invoice is not being raised from appointment list
         Invoice_New()
      Case "new receipt"
         gvwItemsBIlled_Clear()
      Case "print voucher"
         'medicare/veterans vouchers never paid on the day, currently only do medicare
         If Not IsNull(patient) Then
            If IsNull(patient!medicare_number) Then
               Goto Missing_MedicareNumber
            Endif
         Endif
         If Not IsNull(Unbilled_consultation) Then
            If IsNull(Unbilled_consultation!medicare_number) Then
               Goto Missing_MedicareNumber
            Endif
         Endif
         Save(bBulkBill_Yes, bPrint_No, bAccount_No) ', bPaid_No) 'FIXME TO bPrint_Yes to print
      Case "print receipt"
         Save(bBulkBill_No, bPrint_Yes, bAccount_No) ', bPaid_Yes)
      Case "receipt no print"
         Save(bBulkBill_No, bPrint_No, bAccount_No) ', bPaid_Yes)
      Case "print account"
         Save(bBulkBill_No, bPrint_Yes, bAccount_Yes) ', bPaid_No)
   End Select
   Return   
   
Missing_MedicareNumber:
   Message.title = "Medicare Numbers"
   Message.Info("This patient's medicare number is not recorded.\n\nPlease update their record before proceeding.")
   Return
   
End

Public Sub Invoice_New()
   '--------------------------------------------- 
   'patient loaded either from the unbilled appointment list
   'Or searching via accounts
   '--------------------------------------------- 
   
   gvwItemsBIlled.Clear
   tbAccount.Enabled = True                    'new invoice can take account
   tbVoucher.Enabled = True                    'new invoice can take be bulk billed
   tbSaveNoPrint.Enabled = True                ''new invoice can be saved (either paid/unpaid) without printing
   lblEditAreaHeading.text = "New Invoice"
   bPayingInvoice = False 
   fk_payer_branch = 0
   fk_payer_person = 0
   fk_invoice = 0
   gvwPayments.clear
   cmbFeeType.Visible = False 
   rbPayerNotUsed.value = True 'switches off rbInvoiceOrganisation and rbInvoicePerson
   lblInvoiceTotal.text = ""
   lblPaymentTotal.text = ""
   EditArea_Notify_Data_Change(False)
   Hbox_InvoiceGrid.Enabled = True 
   ' txtDate.SetFocus()
   
End

Public Sub cvwItemsBilled_Refresh()
   '-----------------------------------------------------------------------------------------------------
   'Refresh all previous items billed for the patient E.g a single row could be Item 23 standard consult
   'Display in columnview, if more than 1 item per invoice, only display name/dr/date once
   '----------------------------------------------------------------------------------------------------
   
   Dim item As String
   Dim fk_last_invoice As Integer
   Dim total As Float
   Dim monies As Variant[]
   
   cvwItemsBilled.Clear
   Items_Billed = modBillingDBI.Items_Billed_Get(fk_patient, iAccountDisplayMode)
   For Each Item_Billed In Items_Billed
      cvwItemsBilled.Add(Item_Billed!pk_items_billed, 0)
      If fk_last_invoice <> Item_Billed!fk_invoice Then  
         cvwItemsBilled[Item_Billed!pk_items_billed][0] = Item_Billed!patient_firstname
         cvwItemsBilled[Item_Billed!pk_items_billed][1] = Item_Billed!staff_provided_service_wholename
         cvwItemsBilled[Item_Billed!pk_items_billed][2] = Item_Billed!branch
         cvwItemsBilled[Item_Billed!pk_items_billed][3] = Format(Item_Billed!visit_date, "dd/mm/yyyy")
      Else
         cvwItemsBilled[Item_Billed!pk_items_billed][0] = ""
      End If   
      If Not IsNull(Item_Billed!mbs_item) Then item = Item_Billed!mbs_item
      If Not IsNull(Item_Billed!ama_item) Then item = Item_Billed!ama_item
      If Not IsNull(Item_Billed!user_item) Then item = Item_Billed!user_item
      cvwItemsBilled[Item_Billed!pk_items_billed][4] = item
      cvwItemsBilled[Item_Billed!pk_items_billed][5] = Item_Billed!descriptor_brief
      '------------------------------
      'work out who the invoice is to
      '------------------------------
      If Not IsNull(Item_Billed!fk_lu_bulk_billing_type) Then
         If Item_Billed!fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare Then
            cvwItemsBilled[Item_Billed!pk_items_billed][6] = "Medicare"
         Else
            cvwItemsBilled[Item_Billed!pk_items_billed][6] = "Veterans"
         Endif
      Endif
      If Not IsNull(Item_Billed!payer_organisation) Then
         cvwItemsBilled[Item_Billed!pk_items_billed][6] = Item_Billed!payer_organisation
      Endif
      If Not IsNull(Item_Billed!payer_person_wholename) Then
         cvwItemsBilled[Item_Billed!pk_items_billed][6] = Item_Billed!payer_person_wholename
      Endif
      cvwItemsBilled[Item_Billed!pk_items_billed][7] = Item_Billed!amount
      cvwItemsBilled[Item_Billed!pk_items_billed][8] = Item_Billed!amount_gst
      If Item_Billed!paid = True Then
         cvwItemsBilled[Item_Billed!pk_items_billed][9] = "$0.0" 'amount due column
      Else
         cvwItemsBilled[Item_Billed!pk_items_billed][9] = Item_Billed!total_owing  
      End If
      cvwItemsBilled[Item_Billed!pk_items_billed][10] = Item_Billed!total_paid   
      
      'FIXME ADD UP
      ' Else
      '    cvwItemsBilled[Item_Billed!pk_items_billed][8] = Item_Billed!amount 'FIXME ADD UP AMOUNT
      '   cvwItemsBilled[Item_Billed!pk_items_billed][9] = Item_Billed!amount_paid 
      '  Endif
      fk_last_invoice = Item_Billed!fk_invoice  
   Next
   
End

Public Sub cvwItemsBilled_Select()
   '-------------------------------------------------------------------------------------------
   'cvwItemsBilled:This is the list of items on invoices which have been billed to the
   'patient and already saved - either accounts or receipts for visits
   'Items in this list may be single - ie only one per invoice or multiple - many on an invoice
   'If they click on a row without the patient name showing on the list - then that row will be
   'an item one a multi-item invoice. Move back To the row with the patient's name on it
   'ie start of the invoice, so that this routine will load the edit area with all items from
   'this point in the list until the fk_invoice changes
   '--------------------------------------------------------------------------------------------   
   
   If cvwItemsBilled.count = 0 Then Return  
   
   bexit = True
   cvwItemsBilled.MoveCurrent
   HBox_InvoiceCommentS.Visible = False  
   If cvwItemsBilled[cvwItemsBilled.Item.key][0] = "" Then
      Do Until cvwItemsBilled[cvwItemsBilled.Item.key][0] <> ""
         cvwItemsBilled.MovePrevious()
      Loop
      cvwItemsBilled.Item.Selected = True 'will re-enter
   Endif
   Item_Billed = Items_Billed[cvwItemsBilled.Item.key] 
   fk_invoice = Item_Billed!fk_invoice 
   If Not Item_Billed!paid Then
      tbAccount.Enabled = False  
      tbVoucher.Enabled = False  
      tbSaveNoPrint.Enabled = False 
      lblEditAreaHeading.text = "Pay Invoice"
      VBox5.Enabled = True 
   Else
      lblEditAreaHeading.text = "Paid Invoice"
      VBox5.Enabled = False  
   Endif
   txtDate.text = Format(Item_Billed!visit_date, "dd/mm/yyyy")
   txtReferenceDetails.text = Item_Billed!reference
   cmbSeenBy.index = cmbSeenBy.Find(Item_Billed!staff_provided_service_wholename)
   cmbLocation.index = cmbLocation.Find(Item_Billed!branch)
   rbInvoiceToNotUsed.value = True
   Try fk_payer_branch = Item_Billed!fk_payer_branch
   If Not Error Then
      rbInvoiceOrganisation.Value = True  
   Endif
   Try fk_payer_person = Item_Billed!fk_payer_person
   If Not Error Then
      rbInvoicePerson.Value = True
   Endif
   Try textlabelPayer.text = Item_Billed!payer_details
   '---------------------------------------------------------
   'now create an items collection to load back into the grid
   '---------------------------------------------------------
   onrow_items = 0
   gvwItemsBIlled.Clear()
   Do Until Items_Billed[cvwItemsBilled.Item.key]!fk_invoice <> Item_Billed!fk_invoice
      gvwItemsBIlled[onrow_items, 0].text = cvwItemsBilled[Items_Billed[cvwItemsBilled.Item.key]!pk_items_billed][4]
      gvwItemsBIlled[onrow_items, 1].text = Items_Billed[cvwItemsBilled.Item.key]!descriptor_brief
      gvwItemsBIlled[onrow_items, 2].text = Items_Billed[cvwItemsBilled.Item.key]!amount
      gvwItemsBIlled[onrow_items, 4].text = Items_Billed[cvwItemsBilled.Item.key]!billing_type
      Try gvwItemsBIlled[onrow_items, 5].text = Items_Billed[cvwItemsBilled.Item.key]!amount_gst
      Inc onrow_items
      If cvwItemsBilled.MoveNext() Then Break
   Loop
   gvwItemsBIlled.Rows.count = onrow_items
   gvwPayments.Clear()
   gvwPayments.Rows.count = onrow_items + 2 'to allow payment by eg cash + cheque for medicare items.
   Invoice_Calculate_Total("Total Owing")
   EditArea_Notify_Data_Change(False)       
   Hbox_InvoiceGrid.Enabled = False 
   HBox_InvoiceComments.Enabled = False   
   bexit = False  
   
End

Public Sub cvwUnBilled_Menu()
   
   If Last.count Then mnuUnBIlled.Popup()
   
End

Public Sub mnuUnbilled_Click()
   
   Select Case Last.tag
      Case "font"
         modUtil.Columnview_SetFont(cvwUnBilled, "Billing_RecordVisit")
   End Select 
   
End

Private Sub EditArea_Notify_Data_Change(bFlag As Boolean)
   
   If bFlag Then
      VBox_EditArea_Outer.Padding = 1
   Else
      VBox_EditArea_Outer.Padding = 0
   End If   
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   If bexit Then Return
   If Not EditAreaTextBox_ExcludeKeys(key.code, Last.tag) Then
      Stop Event
      Return 
   End If   
   Select Case key.Code
      Case key.down
         If columnview1.Visible Then
            bexit = True   
            With columnview1
               .MoveFirst
               .Item.Selected = True   
               .SetFocus()
            End With
            bexit = False  
         End If   
      Case key.return
         Select Case Last.tag
            Case "reference details", "date"
               gvwItemsBIlled.row = 0
               gvwItemsBIlled.Column = 0
               gvwItemsBIlled_DblClick()
         End Select
   End Select
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   bKeyValid = True
   Select Case Tag
      Case "date"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case "notes", "payer search", "reference details"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_SQLCrash, keycode) 
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
      Case "find patient" 
         EditArea_Clear()
         iTimer_Search_Mode = cTimer_SearchMode_Patient
         With timer1
            .Enabled = True
            .Start
         End With
      Case "payer search"
         'user has clicked on the textbox where you can search for a payer (organisation or person)
         bExit = True
         textlabelPayer.text = ""
         fk_payer_branch = 0                            'zero keys
         fk_payer_person = 0
         rbInvoiceToNotUsed.value = True                'switches off radio buttons for patient, medicare and veterans
         rbInvoiceOrganisation.value = True  
         bExit = False  
         iTimer_Search_Mode = cTimer_SearchMode_Payer
         With columnview1
            .top = Last.Parent.parent.top + Last.height
            .left = Last.Parent.left
            .width = textlabelPayer.Width
            .Visible = False  
            .Columns.count = 4
         End With
   End Select
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   ' Last.BackGround = Color.White
   ' If Last.tag = "date" And Trim(txtDate.text) <> "" Then
   '    If Not IsDate(txtDate.text) Then
   '       Message.Info("Please supply a valid date")    
   '       bexit = True
   '       txtDate.text = ""
   '       bexit = False
   '    End If   
   ' End If   
   
End

Public Sub EditArea_Textbox_KeyRelease()
   
   If bExit Then Return 
   Select Case Last.tag
      Case "find patient", "payer search"
         timer_count = 0 
         timer1.Start    
   End Select
   
End

Public Sub EditArea_TextBox_Change()
   
   If Bexit Then Return
   Select Case Last.tag
      Case "patient"
         If Trim(Last.text) = "" Then
            EditArea_Clear()
            txtpatient.SetFocus()
         Endif
      Case "find patient"
         Return 
      Case "payer search"
         If Trim(Last.text) = "" Then
            fk_payer_branch = 0
            fk_payer_person = 0
            textlabelPayer.text = "" 
         Endif
   End Select
   EditArea_Notify_Data_Change(True)
   
End

Public Sub cvwPatients_Select()
   '----------------------------------------------------------------------------------------
   ' cvwPatients:
   ' This is the list of patient's which user has searched for on the accounts tab
   ' the underlying collection patients[cvwPatients.Item.Key] gives us this stuff:
   ' patient name (have this) and hence fk_patient
   ' date as visit_date
   ' duration (not displayed)
   ' seen by (dr combo) as staff_provider_service_title, wholename match combo text
   ' location combo as branch (match combo text)
   ' Invoice to (patient/medicare/veteran/other)
   ' Find and display the payer
   ' Reference (not yet in the back end)
   ' Items: item/description/fee/gap/rate/gst
   ' fk_item_billed (is there as pk_items_billed)
   ' have fk_invoice, billing_type, fk_lu_billing_type, mbs_item etc, descriptor 
   ' & descriptor_brief, gst_rate, percentage_fee_rule
   ' also have fk_staff_invoicing and associated datae, patient details,
   ' but not the medicare numbers etc.
   '-----------------------------------------------------------------------------------------
   
   If cvwPatients.count = 0 Then Return 'Or fk_patient = Patient!fk_patient Then Return
   TabStrip1.index = 0
   cvwPatients.Movecurrent()                                                    'set internal index
   EditArea_Clear()
   Patient = patients[cvwPatients.Item.Key]
   fk_patient = Patient!fk_patient                                                 
   Try fk_lu_default_billing_level = patient!fk_lu_default_billing_level            'if no billling level in backend
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private  'default to private $$
   bExit = True                                                                     'prevent textbox events firing
   form_billingcards.Display_Patient_Data(Patient)                                  'load billing defaults into embedded form
   txtpatient.text = Patient!wholename  
   Try Payer_Get(Patient)                                                           'show payer if exists 
   VBox_EditArea_Outer.Enabled = True 
   gvwItemsBIlled.Enabled = True   
   iAccountDisplayMode = const.Billing_Accounts_Unpaid       
   cvwItemsBilled_Refresh()                                                         'show this patients owing's
   Invoice_New()  
   bExit = False  
   
End

Public Sub Item_Billed_Display()
   
End

Public Sub TabStripBilling_Click()
   '-------------------------------------------------------
   'User has clicked on the tabstip containing either 
   'the unbilled patients already seen or the tab to allow
   'staff to search for a patient's accounts
   '-------------------------------------------------------
   
   If BExit Then Return 
   Select Case Last.index
      Case cTabPatientsUnbilled
         
         cvwUnBilled.SetFocus()
      Case cTabPatientsAccounts
         txtFindPatient.SetFocus() 'and clear the edit area
   End Select
   
End

Public Sub tbRefreshUnbilled_Click()
   
   cvwUnBilled_Refresh()
   
End

Public Sub Organisations_Get()
   '-----------------------------------------------------------------
   'User is typing in search textbox, first try and find organisation
   '-----------------------------------------------------------------   
   
   timer1.Stop
   If Trim(txtSearch.text) = "" Then 
      columnview1.Visible = False   
      Return 
   End If   
   branches = modContactsDBI.Organisations_Get(Trim(txtSearch.text))
   If Not branches.count Then Return 
   columnview1.Clear
   For Each branch In branches
      Columnview1.Add(branch!pk_view, 0)
      Columnview1[branch!pk_view][0] = Branch!organisation
      Columnview1[branch!pk_view][1] = Branch!branch
      Columnview1[branch!pk_view][2] = Trim(Branch!street1 & " " & Branch!street2)
      Columnview1[branch!pk_view][3] = Branch!suburb & " " & Branch!postcode
   Next 
   If branches.count > 1 Then 
      With Columnview1
         .Visible = True
         .Raise
         .tag = txtSearch
      End With
   Else
      Organisation_Select()
   End If  
   
End Sub

Public Sub Organisation_Select()
   'Really a branch select FIXME consistancy throughout entire project   
   
   columnview1.MoveCurrent()
   bexit = True   
   textlabelPayer.text = branches[columnview1.Item.key]!organisation & "<BR>"
   textlabelPayer.text &= branches[columnview1.Item.key]!branch & "<BR>"
   textlabelPayer.text &= Trim(branches[columnview1.Item.key]!street1 & " " & branches[columnview1.Item.key]!street2) & "<BR>"
   textlabelPayer.text &= branches[columnview1.Item.key]!town & " " & branches[columnview1.Item.key]!postcode
   columnview1.Visible = False 
   txtSearch.text = ""  
   fk_payer_branch = branches[columnview1.Item.key]!fk_branch
   txtReferenceDetails.SetFocus()
   bExit = False  
   
End

Public Sub rbAccounts_Click()
   '-------------------------------------------------------------------------
   'User has clicked on the radiobuttons above the invoices/billed items list
   'The tags are:
   'const.Billing_Accounts_Unpaid = 0
   'const.Billing_Accounts_Paid = 1
   'const.Billing_Accounts_All = 2
   '-------------------------------------------------------------------------
   
   If bExit Then
      Return  
   End If    
   iAccountDisplayMode = Last.tag 
   cvwItemsBilled_Refresh()       
   
End

Public Sub HBox_ReceiptPayment_leave()
   
   cmbPaymentMethods.Visible = False  
   
End

Public Sub gvwItemsBIlled_Data_Valid() As Boolean
   '-----------------------------------------------------------------------
   'Checks the item data in the grid is value, start of row must be an item 
   'number in the backend need at minimum item number,an amount and a type
   'returns true if rows are valid
   '-----------------------------------------------------------------------
   
   Dim row As Integer
   Dim item As Collection
   Dim bNoDAta As Boolean = True
   
   For row = 0 To gvwItemsBIlled.Rows.Max
      If gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text <> "" Then 
         item = modBillingDBI.Items_Get(gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text, -1, 1)   
         If IsNull(item) Then Return 
         If gvwItemsBIlled[row, cGridColumnItem_Fee].Text = "" Then
            Return 
         Endif
         If gvwItemsBIlled[row, cGridColumnItem_FeeType].Text = "" Then
            Return False
         Endif
         bNoDAta = False   
      End If  
   Next
   If bNoDAta Then Return False
   Return True
   
End

Public Sub txtPayment_GotFocus()
   
   cmbPaymentMethods.Visible = False   
   
End

Public Function Valid_Invoice_Items() As Boolean
   '--------------------------------------------------
   'Validates if the item data on the invoice is valid
   '--------------------------------------------------
   
   If fk_patient = 0 Then 
      Message.Info("Please select a valid patient")
      Return
   Endif
   If Trim(txtDate.text) = "" Or Len(Trim(txtDate.text)) <> 10 Or Not IsDate(Trim(txtDate.text)) Then
      txtDate.SetFocus()
      txtDate.Background = Color.rgb(95, 255, 175)
      Return 
   Endif
   If Not gvwItemsBIlled_Data_Valid() Then
      Message.Info("Invalid item number or missing fee amount")
      Return
   Endif
   Return True
   
End

Public Sub Valid_Payment() As Boolean
   '---------------------------------------------------------
   'If the account or the consultation of today is being paid
   'make sure there actually is paid data and if only part of
   'the invoice is being paid off - prompt the user.
   '---------------------------------------------------------   
   
   Dim grid_row As Integer
   Dim total As Float
   Dim sMsg As String
   
   Message.Title = "Payment of Invoice"   
   For grid_row = 0 To gvwPayments.Rows.Max
      If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then            'if have an amount
         If gvwPayments[grid_row, cGridColumnPayments_PaymentType].text = "" Then
            gvwPayments.Row = grid_row
            gvwPayments.Column = cGridColumnPayments_PaymentType
            Message.Info("Please enter type of payment.\n\n")
            gvwPayments_Click()
            Return
         Endif
         total = total + CFloat(Val(Replace(gvwPayments[grid_row, cGridColumnPayments_Amount].text, "$", ""))) 
      Else
         If grid_row = 0 Then   
            gvwPayments.Row = 0
            gvwPayments.Column = 0
            Message.Info("Please enter amount of payment.\n\n")
            gvwPayments_DblClick()
            Return
         End If
         
      End If  
   Next
   '------------------------------------------------------------
   'finally if being paid, does the paid amount match the total?
   '------------------------------------------------------------
   If modUtil.Money_Format(total) <> Right(lblInvoiceTotal.text, Len(lblInvoiceTotal.text) - InStr(lblInvoiceTotal.text, " $")) Then  'IAN FIXME
      sMsg = "The invoice amount and amount paid do not match.\n\n"
      "Do you wish to accept part payment of this invoice?\n\n"
      If Message.Question(sMsg, "Yes - accept part payment", "No") = 2 Then Return
   Endif
   Return True
   
End

Public Sub VBox_PaymentGrid_Leave()
   
   If txtPayment.Visible Then
      If oncol_payments = cGridColumnPayments_Amount Then
         If gvwPayments[onrow_payments, cGridColumnPayments_Amount].text = "" Then
            txtPayment_Activate()
         Endif
      Endif
      gvwPayments[onrow_payments, oncol_payments].text = Trim(txtPayment.text)
   Endif
   If cmbPaymentMethods.Visible Then
      gvwPayments[onrow_payments, cGridColumnPayments_PaymentType].text = cmbPaymentMethods.Text
   Endif
   txtPayment.Visible = False  
   
End

Public Sub pnlToolButtons_Leave()
   
   tbVoucher.Enabled = True
   tbAccount.Enabled = True 
   tbReceipt.Enabled = True  
   tbSaveNoPRint.Enabled = True 
   tbNewInvoice.Enabled = True  
   
End

Public Sub pnlToolButtons_Enter()
   '---------------------------------------------------------------------
   'Enable or disable buttons appropriately as per the edit area contents
   '---------------------------------------------------------------------
   
   Dim fee As String
   Dim payment As String
   
   fee = Right(lblInvoiceTotal.text, Len(lblInvoiceTotal.text) - InStr(lblInvoiceTotal.text, " $"))
   payment = Right(lblPaymentTotal.text, Len(lblPaymentTotal.text) - InStr(lblPaymentTotal.text, " $"))
   If fee = payment And fee <> "" And payment <> "" Then
      tbVoucher.Enabled = False
      tbAccount.Enabled = False 
      tbReceipt.Enabled = True  
      tbSaveNoPRint.Enabled = True 
   Endif
   If fee = "" And payment = "" Then
      tbVoucher.Enabled = False
      tbAccount.Enabled = False 
      tbReceipt.Enabled = False  
      tbSaveNoPRint.Enabled = False 
      tbNewInvoice.Enabled = True  
   Endif
   If fee <> "" And payment = "" Then
      If rbInvoiceToMedicare.value = True Or rbInvoiceToVeterans.value = True Then
         tbVoucher.Enabled = True
         tbAccount.Enabled = False 
         tbReceipt.Enabled = False  
         tbSaveNoPRint.Enabled = False 
      Else
         tbVoucher.Enabled = False
         tbAccount.Enabled = True 
         tbReceipt.Enabled = False  
         tbSaveNoPRint.Enabled = False  
      End If   
   Endif
   
End

Public Sub VBox_PatientsList_Leave()
   
   timer1.Enabled = False  
   timer1.Stop
   
End

Public Sub txtPayment_Change()
   
End

Public Sub txtPayment_KeyPress()
   
   If Not modUtil.AllowKeys(const.allowkeys_money, key.code) Then
      Stop Event
   End If  
   
End

Public Sub TabStrip1_Click()
   
   Select Case TabStrip1.index
      Case 0
         bExit = True   
         TabStripBilling.index = 1
         TabStripBilling.text = "Existing Accounts"
         TabStripBilling.index = 0
         TabStripBilling.text = "UnBilled"
         chkTodayOnly.Visible = True   
         bExit = False  
         cvwUnBilled_Refresh
         TabStripBilling.index = 0 
      Case 1
         
         If IsNull(form_html_viewer) Then
            With form_html_viewer = New FHtmlViewer(Vbox_DaysTakings)
               .WebView1.HTML = Days_Takings_Create_HTML()
               .tbWebBrowserPrint.Visible = True   
               .tbWebBrowserZoomIn.Visible = True  
               .tbWebBrowserZoomOut.Visible = True
            End With
         Endif
         
      Case 2
         bExit = True
         If IsNull(form_batching) Then 
            With form_batching = New FBulkBillBatching(Vbox_Batching)
               .Init(staff, clinics)
            End With
         Endif
         TabStripBilling.index = 1
         TabStripBilling.text = "Paid Claims"
         TabStripBilling.index = 0
         TabStripBilling.text = "Upaid Claim"
         chkTodayOnly.Visible = False 
         cvwUnBilled_Refresh() 
         bExit = False  
   End Select
   
End

Public Sub Days_Takings_Create_HTML(Optional for_date As Date = Now()) As String
   'creates html table of a days takings
   
   Dim monies_received As Collection
   Dim sHtml As String
   Dim sRow As String
   Dim amount As Collection
   Dim Payment_Methods As Collection
   Dim payment_method As Collection
   Dim payment_totals As New Float[7] 'use 1>6 = billing.lu_payment_method keys
   Dim x As Integer
   
   payment_methods = modBillingDBI.Payment_Methods_Get()
   monies_received = modBillingDBI.Receipts_Get_For_Day(for_date)
   If IsNull(monies_received) Then
      Message.Info("No takings recorded for" & Format(for_date, "dd/mm/yyyy"))
      Return
   Endif
   sHtml = "<HTML><BODY><P><B>Summary of Receipts Taken on " & Format(for_date, "dd/mm/yyyy") & "</B></P>"
   sHtml &= "<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=0>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   '------------------------------------------------------
   'now add a row for each money recieved
   'receipt no|Payer|payment type|Cheque Drawer|Amount|Tax
   '------------------------------------------------------
   sHtml &= "<TR VALIGN=TOP>" & takings_html_row_template() & "</TR>"
   shtml = Replace(shtml, "%receipt_no%", "<B>Receipt</B>")
   shtml = Replace(shtml, "%payer%", "<B>Payer</B>")
   shtml = Replace(shtml, "%payment type%", "<B>Type</B>")
   shtml = Replace(shtml, "%drawer%", "<B>Cheque Drawer</B>")
   shtml = Replace(shtml, "%amount%", "<B>Amount</B>") 
   shtml = Replace(shtml, "%tax%", "<B>Tax</B>") 
   For Each amount In monies_received
      sHtml &= "<TR VALIGN=TOP>" & takings_html_row_template()
      sHtml = Replace(sHtml, "%receipt_no%", Str$(amount!pk_payments_received))
      If Not IsNull(amount!payer_details) Then 
         If Not IsNull(amount!fk_payer_branch) Then 
            
            sHtml = Replace(sHtml, "%payer%", amount!payer_organisation & " " & amount!payer_branch)
         End If
         If Not IsNull(amount!fk_payer_person) Then 
            sHtml = Replace(sHtml, "%payer%", amount!payer_person_wholename) 
         End If   
      Else
         sHtml = Replace(sHtml, "%payer%", amount!patient_wholename) 
      End If   
      sHtml = Replace(sHtml, "%payment type%", amount!payment_method)
      sHtml = Replace(sHtml, "%drawer%", " ") 'FIXME
      sHtml = Replace(sHtml, "%amount%", modUtil.Money_Format(amount!amount_paid))
      sHtml = Replace(sHtml, "%tax%", " ") 'FIXME put in gst
      sHtml &= "</TR>"
      payment_totals[amount!fk_lu_payment_method] = payment_totals[amount!fk_lu_payment_method] + CFloat(Replace(amount!amount_paid, "$", ""))
   Next 
   shtml &= "</TABLE>"
   '---------------------------------------------------------------------------------------
   'Now add a table which summarizes amounts for Cash, Cheques, EFPos or EFT (direct debit)
   '---------------------------------------------------------------------------------------
   sHtml &= "<P><B>Totals</B></P>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=212>"
   "<COL WIDTH=208>"
   
   For Each payment_method In payment_methods
      Inc x                                  'billing.lu_payment_method keys 1>6
      shtml &= "<TR VALIGN=TOP>"
      shtml &= totals_html_row_template()
      shtml = Replace(shtml, "%payment_method%", payment_method!method)
      shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(payment_totals[x]))
      sHtml &= "</TR>"
   Next
   sHtml &= "</TABLE></BODY></HTML>" 
   Return shtml
   
End

Public Sub DateChooser1_Activate()
   
   form_html_viewer.WebView1.html = Days_Takings_Create_HTML(Last.value)
   
End

Public Function takings_html_row_template() As String
   
   Return ""
   "<TD WIDTH=8%>"
   "   <P>%receipt_no%</P>"
   "</TD>"
   "<TD WIDTH=30%>"
   "   <P>%payer%</P>"
   "</TD>"
   "<TD WIDTH=15%>"
   "   <P>%payment type%</P>"
   "</TD>"
   "<TD WIDTH=20%>"
   "   <P>%drawer%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "   <P>%amount%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "   <P>%tax%</P>"
   "</TD>"
   
End

Public Function totals_html_row_template() As String
   
   Return ""
   "<TD WIDTH=212>"
   "<P>%payment_method%</P>"
   "</TD>"
   "<TD WIDTH=208>"
   "<P>%total_amount%</P>"
   "</TD>"
   
End


Public Sub chkTodayOnly_Click()

   cvwUnBilled_Refresh()

End

' Create Or Replace FUNCTION billing.total_paid(integer)
'   RETURNS money As
' $BODY$
' DECLARE
'   total_paid money;
'   total numeric;
'   payment numeric;
' BEGIN
'  - - get the amounts paid
'   For payment In Select amount:: numeric From billing.payments_received where fk_invoice = $1 Loop
'     total: = payment;
'   End Loop ;
'   If total = 0 Then 
'    total_paid = Null;
'    Else
'      total_paid: = total:: money;
'    End If ;
'   Return total_paid;
' End ;
' $BODY$
'   LANGUAGE plpgsql VOLATILE
'   COST 100;
' ALTER FUNCTION billing.total_paid(integer)
'   OWNER To richard;
' 
' - - View: billing.vwitemsbilled
' 
' DROP VIEW billing.vwitemsbilled cascade;
' 
' Create Or Replace VIEW billing.vwitemsbilled As 
'  Select items_billed.pk As Pk_items_billed, vwstaffinclinics.firstname As Staff_invoiced_firstname, 
'  vwstaffinclinics.surname As Staff_invoiced_surname, vwstaffinclinics.wholename As Staff_invoiced_wholename, 
'  vwstaffinclinics.title As Staff_invoiced_title, invoices.fk_staff_invoicing, invoices.date_printed, invoices.notes, 
'  invoices.fk_lu_bulk_billing_type, invoices.fk_staff_provided_service, invoices.fk_patient, invoices.fk_branch,
'  vwpatients.firstname As Patient_firstname, vwpatients.surname As Patient_surname, vwpatients.title As Patient_title, 
'  vwpatients.fk_sex As Patient_fk_sex, vwpatients.sex As Patient_sex, vwpatients.wholename As Patient_wholename, 
'  invoices.fk_payer_person, invoices.fk_payer_branch, invoices.date_invoiced, invoices.paid, invoices.latex, 
'  invoices.visit_date, invoices.reference, vwstaffinclinics1.provider_number As Staff_provided_service_provider_number, 
'  vwstaffinclinics1.firstname As Staff_provided_service_firstname, 
'  vwstaffinclinics1.surname As Staff_provided_service_surname, 
'  vwstaffinclinics1.wholename As Staff_provided_service_wholename, vwstaffinclinics1.title As Staff_provided_service_title, 
'  data_branches.branch, items_billed.fk_fee_schedule, items_billed.amount, items_billed.amount_gst, 
'  billing.total_paid(items_billed.fk_invoice) As Total_paid_invoice, items_billed.fk_invoice, 
'         Case
'             WHEN invoices.paid Is TRUE Then 
'             Case
'                 WHEN items_billed.amount_gst Is NOT Null Then items_billed.amount + items_billed.amount_gst
'                 Else items_billed.amount
'             End
'             Else billing.total_paid(items_billed.fk_invoice)
'         End As Total_paid, 
'         Case
'             WHEN invoices.paid Is FALSE Then 
'             Case
'                 WHEN billing.total_paid(items_billed.fk_invoice) Is NOT Null Then 
'                 Case
'                     WHEN items_billed.amount_gst Is NOT Null Then items_billed.amount + items_billed.amount_gst - billing.total_paid(items_billed.fk_invoice)
'                     Else items_billed.amount - billing.total_paid(items_billed.fk_invoice)
'                 End
'                 Else 
'                 Case
'                     WHEN items_billed.amount_gst Is NOT Null Then items_billed.amount + items_billed.amount_gst
'                     Else items_billed.amount
'                 End
'             End
'             Else NULL:: money
'         End As Total_owing, items_billed.fk_lu_billing_type, lu_billing_type.type As Billing_type, 
'         fee_schedule.item, fee_schedule.mbs_item, fee_schedule.user_item, fee_schedule.ama_item, 
'         fee_schedule.descriptor, fee_schedule.descriptor_brief, fee_schedule.gst_rate, fee_schedule.percentage_fee_rule, 
'         Case
'             WHEN invoices.fk_payer_branch Is NOT Null Then (((((vworganisations.organisation || '<BR>'::text) || (vworganisations.branch || '<BR>'::text)) || COALESCE(vworganisations.street1 || ' '::text, vworganisations.street2)) || '<BR>'::text) || (vworganisations.town || ' '::text)) || (vworganisations.postcode::text || ' '::text)
'             WHEN invoices.fk_payer_person Is NOT Null Then ((((vwpersonsincludingpatients.wholename || '<BR>'::text) || COALESCE(vwpersonsincludingpatients.street1 || ' '::text, vwpersonsincludingpatients.street2)) || '<BR>'::text) || (vwpersonsincludingpatients.town || ' '::text)) || (vwpersonsincludingpatients.postcode::text || ' '::text)
'             Else NULL:: text
'         End As Payer_details, vworganisations.branch As Payer_branch, 
'         vworganisations.organisation As Payer_organisation, vworganisations.street1 As Payer_branch_street1, 
'         vworganisations.street2 As Payer_branch_street2, vworganisations.postcode As Payer_branch_postcode, 
'         vworganisations.town As Payer_branch_town, vworganisations.state As Payer_branch_state, 
'         vwpersonsincludingpatients.street1 As Payer_person_street1, 
'         vwpersonsincludingpatients.street2 As Payer_person_street2, 
'         vwpersonsincludingpatients.town As Payer_person_town, vwpersonsincludingpatients.state As Payer_person_state, 
'         vwpersonsincludingpatients.postcode As Payer_person_postcode, 
'         vwpersonsincludingpatients.wholename As Payer_person_wholename, 
'         vwpersonsincludingpatients.title As Payer_person_title
'    From billing.invoices
'    JOIN admin.vwstaffinclinics ON invoices.fk_staff_invoicing = vwstaffinclinics.fk_staff
'    JOIN admin.vwstaffinclinics vwstaffinclinics1 ON invoices.fk_staff_provided_service = vwstaffinclinics1.fk_staff
'    JOIN billing.items_billed ON invoices.pk = items_billed.fk_invoice
'    JOIN billing.lu_billing_type ON items_billed.fk_lu_billing_type = lu_billing_type.pk
'    JOIN billing.fee_schedule ON items_billed.fk_fee_schedule = fee_schedule.pk
'    JOIN contacts.data_branches ON invoices.fk_branch = data_branches.pk
'    Left JOIN contacts.vworganisations ON invoices.fk_payer_branch = vworganisations.fk_branch
'    Left JOIN contacts.vwpersonsincludingpatients ON invoices.fk_payer_person = vwpersonsincludingpatients.fk_person
'    Left JOIN contacts.vwpatients ON invoices.fk_patient = vwpatients.fk_patient;
' 
' ALTER TABLE billing.vwitemsbilled
'   OWNER To easygp;
' GRANT ALL ON TABLE billing.vwitemsbilled To easygp;
' GRANT ALL ON TABLE billing.vwitemsbilled To staff;
' 
' Create Or Replace VIEW billing.vwpayments As 
'  Select payments_received.pk As Pk_payments_received, payments_received.fk_invoice, payments_received.amount As Amount_paid, 
'  lu_payment_method.method As Payment_method, payments_received.date_paid, payments_received.fk_staff_receipted,
'   payments_received.fk_lu_payment_method, vwitemsbilled.pk_items_billed As Fk_items_billed, vwitemsbilled.staff_invoiced_firstname,
'    vwitemsbilled.staff_invoiced_surname, vwitemsbilled.staff_invoiced_wholename, vwitemsbilled.staff_invoiced_title,
'     vwitemsbilled.fk_staff_invoicing, vwitemsbilled.date_printed, vwitemsbilled.notes As Invoice_notes, 
'     vwitemsbilled.fk_staff_provided_service, vwitemsbilled.fk_patient, vwitemsbilled.patient_firstname, 
'     vwitemsbilled.patient_surname, vwitemsbilled.patient_title, vwitemsbilled.patient_fk_sex, 
'     vwitemsbilled.patient_sex, vwitemsbilled.patient_wholename, vwitemsbilled.fk_payer_person, 
'     vwitemsbilled.fk_payer_branch, vwitemsbilled.date_invoiced, vwitemsbilled.paid As Invoice_paid, 
'     vwitemsbilled.latex As Invoice_latex, vwitemsbilled.visit_date, v
'    From billing.payments_received
'    JOIN billing.lu_payment_method ON payments_received.fk_lu_payment_method = lu_payment_method.pk
'    JOIN billing.vwitemsbilled ON payments_received.fk_invoice = vwitemsbilled.fk_invoice;
' 
' ALTER TABLE billing.vwpayments
'   OWNER To easygp;
' GRANT ALL ON TABLE billing.vwpayments To easygp;
' GRANT ALL ON TABLE billing.vwpayments To staff;
' 
' 
'  grant all On billing.vwclaims To staff;
'  
' drop view billing.vwClaims;
' Create Or Replace view billing.vwClaims As
' Select 
'   billing.bulk_billing_claims.pk || '-'::text || billing.link_invoice_bulk_bill_claim.fk_invoice::text as pk_view,
'   billing.bulk_billing_claims.pk As Fk_bulk_billing_claim,
'   billing.bulk_billing_claims.claim_id,
'   billing.bulk_billing_claims.claim_date,
'   billing.bulk_billing_claims.claim_amount,
'   billing.bulk_billing_claims.voucher_count,
'   billing.bulk_billing_claims.finalised,
'   billing.bulk_billing_claims.fk_branch,
'   billing.bulk_billing_claims.fk_medclaim,
'   billing.bulk_billing_claims.fk_lu_bulk_billing_type,
'   billing.bulk_billing_claims.fk_staff_provided_service,
'   billing.bulk_billing_claims.fk_staff_processed,
'   billing.bulk_billing_claims.html,
'   billing.lu_bulk_billing_type.type As Bulk_billing_type,
'   admin.vwstaffinclinics.wholename As Staff_provided_service_wholename,
'   admin.vwstaffinclinics.branch,
'   billing.link_invoice_bulk_bill_claim.fk_invoice,
'   billing.invoices.latex As Invoice_latex,
'   billing.invoices.fk_patient,
'   contacts.vwpatients.wholename As Patient_wholename,
'   billing.invoices.visit_date,
'   billing.fee_schedule.mbs_item,
'   billing.items_billed.amount,
'   vwstaffinclinics1.wholename As Staff_processed_wholename
'   
' From
'   billing.bulk_billing_claims
'   INNER JOIN billing.lu_bulk_billing_type ON(billing.bulk_billing_claims.fk_lu_bulk_billing_type = billing.lu_bulk_billing_type.pk)
'   INNER JOIN billing.link_invoice_bulk_bill_claim ON(billing.bulk_billing_claims.pk = billing.link_invoice_bulk_bill_claim.fk_claim)
'   INNER JOIN billing.invoices ON(billing.link_invoice_bulk_bill_claim.fk_invoice = billing.invoices.pk)
'   INNER JOIN contacts.vwpatients ON(billing.invoices.fk_patient = contacts.vwpatients.fk_patient)
'   INNER JOIN billing.items_billed ON(billing.invoices.pk = billing.items_billed.fk_invoice)
'   INNER JOIN admin.vwstaffinclinics ON(billing.bulk_billing_claims.fk_staff_provided_service = admin.vwstaffinclinics.fk_staff)
'   INNER JOIN billing.fee_schedule ON(billing.items_billed.fk_fee_schedule = billing.fee_schedule.pk)
'   INNER JOIN admin.vwstaffinclinics vwstaffinclinics1 ON(billing.bulk_billing_claims.fk_staff_processed = vwstaffinclinics1.fk_staff)
'   ;
' 
'   alter table billing.vwclaims owner To easygp;
'   grant all on billing.vwclaims To easygp;
'   grant all on billing.vwclaims To staff;
