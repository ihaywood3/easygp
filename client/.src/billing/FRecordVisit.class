' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' A class to record the patients visit and raise the invoice
'----------------------------------------------------------------------
'' -----------------------------------------------------------------------------------------------
' Claim Num: PatientName: MedicareNumber DateSeen Item_Number Assigned$ Payable$ ExplanationCode
'  U1892     Peter patient 2111111111    10 July 12   31265    150.90    0.00        374
'
'     bla bla
'                                                TOTAL eft aMOUNT Paid             3838.00
'  Explanation of codes
'  374 Old card issue used - benefit not payable - also refer @ (whatever the @ means I don't know)
'
'  Sometimes they may include **NB:medicare number issued**, providing us with a new number
'
'  The secretarial work flow is hence.
'  1) Examine the printout - this money has already been put into the doctors/practice account
'  2) Where **NB:medicare number issued** under item > update the patients file
'  3) - Select the Claim coverslip number from the GUI
'     - Receipt the cheque for the amount received
'     - reconcile the voucher list
'     - for each voucher that has not been paid > set its fee amount to 0.00 (i.e decrement batch total%)
'     - If EFTRecieved now = reducedUnbilled_Consultation total from what we claimed all is well
'     - If not there can be 'hidden' amounts in the batch where the medicare girls keying in the data
'       actually make a mistake and miss stuff, or they put it through for incorrect patient name eg
'       another familVeteran Bulk Bill Claimsy member eg we may have claimed 23 + 10991, they forget to put the 10991, so that
'       item on the batch vocher list has to bbille reduced to 00.00 and the voucher re-submitted.
'      - once the two balances match > click as matched
'    4) Then the program will need to aggegate these zero'd vouchers into a new batch to send off and re-claim
'       or to give the user the chance to write off the debt.
'       e.g girls may have charged a consultation wrongly if it was aftercare. (i.e staff mistake)
'       Sometimes Medicare "miss" entire vouchers - maybe this won't happen when done electronically
'    fixme - put in code in cvwAccounts_select > get payer for branch as a payer

' select
'   case when fk_staff_provided_service = 1 then 'richard'
'        when fk_staff_provided_service = 3 then 'Hannah' end as doctor,
' sum(amount)
' from billing.vwpaymentsreceived
' where
' fk_lu_payment_method = 2
' and
' age(date_paid) < '1 week'::interval
' group by fk_staff_provided_service;
'
' select
'   patient_wholename, date_paid::date,
'   case when fk_staff_provided_service = 1 then 'Richard'
'        when fk_staff_provided_service = 3 then 'Hannah' end as doctor, amount
' from billing.vwpaymentsreceived
' where
' fk_lu_payment_method = 2
' and
' age(date_paid) < '1 week'::interval ;

'-----------------------------------------------------------------------------------------------
Private cell_text As String
Private currentconsult As CConsult
Private payment_methods As Collection
Private last_Fee_type As String
Public bexit As Boolean
Private bHSplit_Resized As Boolean        'true if user has re-sized the main horizontal split
Private $hEditor_gvwItems As Object
Private $hEditor_gvwPayments As Object
Private appointment_icons As Collection  
Private current_gvwItemsBilled_Row As Integer
'save flags for readability
Private bBulkBill_Yes As Boolean = True
Private bBulkBill_No As Boolean = False
Private bPrint_Yes As Boolean = True
Private bPrint_No As Boolean = False
Private bAccount_Yes As Boolean = True
Private bAccount_No As Boolean = False
Private bPaid_Yes As Boolean = True
Private bPaid_No As Boolean = False
Private bSearchingAccounts As Boolean  'if True the patient has been found by an account search, not an unbilled appointment
Private VSplitMain_Layout As Integer[]
Private bKeyValid As Integer
Private bPayingInvoice As Boolean
Private timer_count As Integer
Private onrow_items As Integer
Private OnCol_Items As Integer
' holds the "special" Medicare flags (not related, not normal aftercare, etc)
' keyed on the gvwItemsBilled row.
Private item_flags As Collection
Private GridData As Collection
Private GridRows As Collection
Private iLeft As Integer
Private iTop As Integer
Private i As Integer
Private iFirstRow As Integer
Private iLastRow As Integer
Private bFoundFirst As Integer
Private SeenBy As Collection
Private clinic As Collection
Private clinics As Collection
Private items As Collection
Private item As Collection
Private workcover_claims As Collection
Private Scheduled_Fee As Collection
Private cvwAccountHistory_Key As Variant 
'Private Scheduled_Fees As Collection
Private consult_item_number As String
Private fk_lu_default_billing_level As Variant
Private iBilling_Category As Integer
Private iAccountDisplayMode As Integer  'const.Billing_Accounts_Paid,  Billing_Accounts_UnPaid, Billing_Accounts_All
Private form_billingcards As FPatientBillingCards
'Private form_reports As FBillingReports
Private form_reports As FHtmlViewer
Private form_unbilled_comment As FUnbilledComment
Private sPatient_Collection_Key As Variant
Private staff As Collection
Private Staff_Member As Collection
Private fk_staff As Variant                  'whichever staff saw the patient
Private fk_patient As Variant
Private fk_payer_branch As Variant  'if non zero the invoice is to an organisation at branch level
Private fk_payer_person As Variant                 'if non zero the invoice is to a person
Private fk_appointment As Variant
Private fk_invoice As Variant                      'if non zero then key to billing.invoices table
Private fk_invoice_for_printing As Variant
Private Unbilled_Consultations As Collection
Private Unbilled_consultation As Collection
Private payers As Collection
Private payer As Collection   'could be patient/organisation etc
Private Bulk_Billed_Consultations As Collection
Private Bulk_Billed_Consultation As Collection
Private Bulk_Billed_Claims As Collection
Private Bulk_Billed_Claim As Collection
Private cGridColumnItem_ItemNumber As Integer = 0
Private cGridColumnItem_BriefDescriptor As Integer = 1
Private cGridColumnItem_Fee As Integer = 2
Private cGridColumnItem_Gap As Integer = 3
Private cGridColumnItem_AmountPaid As Integer = 3
Private cGridColumnItem_FeeType As Integer = 4
Private cGridColumnItem_gst_amount As Integer = 5
Private oncol_payments As Integer
Private onrow_payments As Integer
Private cGridColumnPayments_Amount As Integer = 0
Private cGridColumnPayments_PaymentMethod As Integer = 1
Private cGridColumnPayments_Date As Integer = 2
Private cGridColumnPayments_Comment As Integer = 3
Private cAll_ItemNumbers As Integer = 0
Private cMBS_ItemNumbers As Integer = 2
Private cAMA_ItemNumbers As Integer = 3
Private cUser_Defined_ItemNumbers As Integer = 4
Private Item_Number_Categories As String[]
Private InvoiceComments As Collection
Private InvoiceComment As Collection
Private Invoice_total As Float
Private Amount_Paid As Float
Private FeeTypes As Collection
Private FeeType As Collection
Private Duration As Integer                           'the duration of the appointment - at least what they were booked in for
Private Descriptors_Brief As Collection
Private descriptor_brief As Collection
Private Report_Titles As Collection
Private Report_title As Collection
Private Items_Billed As Collection
Private Items_Today_Or_Unpaid As Collection 
Private invoice As Crow
Private ScheduledFeeItems As Collection
Private FeeItem As Collection
Private iLast_Invoice_Type As Integer
Private Const cLast_Invoice_Type_Private As Integer = 0
Private Const cLast_Invoice_Type_Medicare As Integer = 1
Private Const cLast_Invoice_Type_Veteran As Integer = 2
Private Const cLast_Invoice_Type_Other As Integer = 3
Private iTimer_Search_Mode As Integer
Private cTimer_SearchMode_Patient As Integer = 0
Private cTimer_SearchMode_Descriptor As Integer = 1
Private cTimer_SearchMode_Payer As Integer = 2
Private cTimer_SearchMode_Institutional_Account As Integer = 2
Private cTimer_SearchMode_FeeSchedule As Integer = 3
Private Patients As Collection
Private Patient As Collection

Private branches As Collection
Private branch As Collection
Private persons As Collection
Private Area_of_Need_Fees As Collection  'loaded once 
Private form_html_viewer As FHtmlViewer
Private form_feeschedule As FDescriptorsBrowser
'the main (large) tabstrip - tabstrip1
Private Const cTab_Invoices_Receipts As Integer = 0
Private Const cTab_Batching As Integer = 1
Private Const cTab_Banking As Integer = 2
Private Const cTab_Reports As Integer = 3
Private Const cTab_ScheduleFees As Integer = 4
'the sub-tabs on main tab cTab_Invoices_Receipts
Private Const cTab_Visits_And_Payments As Integer = 0
Private Const cTabAccountHistory As Integer = 1

Private fk_lu_billing_type_scheduled_Fee As Variant = 8
Private form_batching As FBulkBillBatching
Private cInvoiceDisplayMode_UnbilledAll As Integer = 0
Private cInvoiceDisplayMode_UnbilledToday As Integer = 1
Private cInvoiceDisplayMode_Overdue As Integer = 2
Private cInvoiceDisplayMode_Overdue_1Month As Integer = 3
Private cInvoiceDisplayMode_Overdue_2Month As Integer = 4
Private cInvoiceDisplayMode_Overdue_Over3Months As Integer = 5
'Private cInvoiceDisplayMode_InstitutionalAccounts As Integer = 5
Private Reasons_not_billed As Collection
Private gvwItemsBIlled_columnWidths As Integer
Private bAreaOfNeed As Boolean 'see FAdminGlobalPreferences/billing help if true the area attracts 10991 item numbers
Private bComplainedAboutNoItem As Boolean 'don't complain to the user multiple times about not finding a item/fee code.
Private form_patient_photo As FPatientPhoto 
Private pic_annual_checkup As Picture = Picture["icons/22/heart.png"]
Private pic_home_visit As Picture = Picture["icons/22/user-home.png"]
Private pic_procedure As Picture = Picture["icons/24/glove-scalple_2424.png"]
Private pic_empty As Picture = Picture["icons/20/empty2020.png"]

Public Sub _new()
   
   tlPatientDetails.Background = lblEditAreaHeading.Background 
   Appointment_Icons = Appointment_icons_Get_Picture(modAppointmentsDBI.Appointment_icons_get())  
   With form_patient_photo = New FPatientPhoto(Vbox_Photo)
      .lblID.Visible = False 
      .lblLeft.Visible = True 
      .lblRight.Visible = True 'spacers just for this module
   End With
   With form_billingcards = New FPatientBillingCards(VBox_PatientBillingCards)
      .Init(VBox_EditArea_Outer, "FRecordVisit")
      .Hbox_LegacyFileNumber.Visible = False
      .HBox_ResponsiblePayer.Visible = False
   End With
   Area_of_Need_Fees = modBillingDBI.Area_Of_Need_Fees("10991")  'area of need supplement keyed by billing.lu_biling_type key
   cvwSearchAccounts.Columns.count = 3
   Print modDBConnect.currentUser
   
End

Static Private Form_Billing As FRecordVisit

Static Public Sub Enable_BOKBIllingSaveButton(bFlag As Boolean)
   
   If Form_Billing.bexit = True Then Return
   Try Form_Billing.tbSaveBillingNextOfKin.enabled = True 'the form may not exist
Catch
   Return
   
End

Static Public Sub Fee_Schedule_Reload_Static()
   
   Form_Billing.Fee_Schedule_Reload()
   
End

Static Public Sub Billing_Save_Defaults()
   
   Form_Billing.Billing_Defaults_Save
   
End

Static Public Sub Bulk_Billing_Claims_Reload()
   
   Form_Billing.BulkBilling_ShowClaims
   
End

Public Sub BulkBilling_ShowClaims()
   '-------------------------------
   'show veteran or medicare claims
   '-------------------------------
   
   Bulk_Billed_Claims = modBillingDBI.Bulk_Bill_Batching_Get_Claims(combobox1.index)
   If IsNull(Bulk_Billed_Claims) Then Return
   columnview99.Clear
   For Each Bulk_Billed_Claim In Bulk_Billed_Claims
      columnview99.Add(Bulk_Billed_Claim!pk, 0)
      columnview99[Bulk_Billed_Claim!pk][0] = Format(Bulk_Billed_Claim!claim_date, "dd/mm/yyyy")
      columnview99[Bulk_Billed_Claim!pk][1] = Bulk_Billed_Claim!claim_id
   Next
   If columnview99.Count Then
      With columnview99
         .MoveFirst
         .SetFocus
         .Item.Selected = True
      End With
   Endif
   ' If Bulk_Billed_Claims.count Then
   '    Batching_Show_Vouchers_In_Claim()
   ' Endif
   
End

Public Sub Init()
   '---------------------------------------------------------
   'Do all the form initialisation stuff like adding stuff to
   'combo's, setting numbers of columns in lists, displaying
   'the patients contact details
   '---------------------------------------------------------
   
   Dim hCtrl As Control
   Dim HB As HBox
   
   lblSearchAccounts.Foreground = Color.LightGray
   ' comboBox1_Load()
   Form_Billing = Me
   lblmeasure.text = "  Medicare Voucher  "
   tbUniversal.width = lblmeasure.Width
   Item_Number_Categories = New String[]
   Item_Number_Categories.Add("all items")
   Item_Number_Categories.Add("mbs item")
   Item_Number_Categories.Add("ama item")
   Item_Number_Categories.Add("user item")
   Report_Titles = modBillingDBI.Report_Get()
   Reasons_not_billed = modBillingDBI.Reasons_not_billed_Get()
   lblmeasure.text = "  Invoiced Items "
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Inner, lblmeasure)
   modEditAreaHelpers.Resize_label(lblItems, lblmeasure)
   ' modEditAreaHelpers.Resize_label(lblDisplayAccounts, lblmeasure)
   modEditAreaHelpers.Resize_label(lblPayment, lblmeasure)
   modEditAreaHelpers.Resize_label(lblComment, lblmeasure)
   lblMeasure.text = "   Quick View    "
   
   modEditAreaHelpers.Resize_label(lblName, lblMeasure)
   modEditAreaHelpers.Resize_label(lblQuickview, lblMeasure)
   modEditAreaHelpers.Resize_label(lblfilterDate, lblMeasure)
   Vbox_Photo.width = lblmeasure.Width
   Payment_methods = modBillingDBI.Payment_Methods_Get()
   'fix this duplication but check save to see why I did it.
   modUtilGUI.LoadCombo(cmbPaymentMethods, modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Payment_Methods_Get()), "method") 'show on top 3 methods
   InvoiceComments = modUtilGUI.LoadCombo(cmbInvoiceComments, modBillingDBI.Invoice_Comments_Get(), "comment")
   FeeTypes = modUtilGUI.LoadCombo(cmbFeeType, modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Billing_Types_Get()), "type") 'fixme
   staff = modUtilGUI.LoadCombo(cmbStaff, modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get("", Null, False)), "wholename")
   ' modUtilGUI.LoadCombo(cmbstaff_Takings, staff, "wholename")
   seenBy = modUtilGUI.LoadCombo(cmbSeenBy, modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get("", Null, False)), "wholename")
   cmbSeenBy.Add("Not Selected")
   cmbSeenBy.Index = cmbSeenBy.Find("Not Selected")
   clinics = modUtilGUI.LoadCombo(cmbLocation, modContactsDBI.Clinics_Get(), "branch")
   With cvwItemsTodayOrUnpaid
      .Columns.count = 13
      .Columns[0].text = "Patient   "
      .Columns[1].text = "Seen By   "
      .Columns[2].text = "Location  "
      .Columns[3].text = "Visit Date  "
      .Columns[4].text = "Item"
      .Columns[5].text = "Descriptor   "
      .Columns[6].text = "Payer   "
      .Columns[7].text = "Fee  "
      .Columns[8].text = "GST  "
      .Columns[9].text = "Invoice Total"
      .Columns[10].text = "Paid  "
      .Columns[11].text = "Owing  "
      .Columns[12].text = "Comment"
   End With
   With cvwAccountHistory
      .Columns.count = 13
      .Columns[0].text = "Patient   "
      .Columns[1].text = "Seen By   "
      .Columns[2].text = "Location  "
      .Columns[3].text = "Visit Date  "
      .Columns[4].text = "Item"
      .Columns[5].text = "Descriptor   "
      .Columns[6].text = "Payer   "
      .Columns[7].text = "Fee  "
      .Columns[8].text = "GST  "
      .Columns[9].text = "Invoice Total"
      .Columns[10].text = "Paid  "
      .Columns[11].text = "Owing  "
      .Columns[12].text = "Comment"
   End With
   With cvwWorkcoverClaims
      .Columns.count = 2
      ' .Columns[0].text = "Identifier"
      ' .Columns[1].text = "claim number"
      .Columns[0].Alignment = Align.Center
      .Columns[1].Alignment = Align.Center
   End With
   cmbQuickView.Clear
   cmbQuickView.Add("All Unbilled Consultations", 0)
   cmbQuickView.Add("Unbilled  Consultations Today", 1)
   cmbQuickView.Add("Accounts Overdue 1 Month", 2)
   cmbQuickView.Add("Accounts Overdue 2 Month", 3)
   cmbQuickView.Add("Accounts Overdue > 3 Months", 4)
   cmbQuickView.Add("Accounts - Institutional Payers", 5)
   
   'IAN HAD CHANGED THE CODE TO JUST THESE OPTIONS:
   ' cmbInvoices.Add("Unpaid Accounts", 0)
   ' cmbInvoices.Add("Accounts Overdue 1 Month", 1)
   ' cmbInvoices.Add("Accounts Overdue 2 Month", 2)
   ' cmbInvoices.Add("Accounts Overdue > 3 Months", 3)
   'cmbInvoices.Add("Accounts - Institutional Payers", 5)
   'cmbInvoices.Add("Accounts - Patients", 5)
   bAreaOfNeed = modAdminDBI.Config_Get("area_of_need", False)
   Settings_Load()         'load settings for this form
   GridRows = New Collection
   columnview1.Columns.count = 4
   cmbInvoiceComments.index = -1
   gvwItemsBIlled_Init()
   gvwPayments_Init()
   ' txtFilterAccounts.text = Format(Now, "dd/mm/yyyy")
   ' txtFilterAccounts.text = "19/10/2012"
   bHSplit_Resized = False
   bComplainedAboutNoItem = False
   fk_invoice = Null
   fk_invoice_for_printing = Null
   If modAdminDBI.Config_Get("display_unbilled_consults_in_billing", False, Null, modDBConnect.currentUser!fk_clinic) Then
      bexit = True   
      cmbQuickView.Index = cInvoiceDisplayMode_UnbilledAll
      bExit = False  
   Endif
   payment_methods = modBillingDBI.Payment_Methods_Get()
   Accounts_Reload()
   modDBConnect.Register_Listener("invoice_print", Me)
   
End

Public Function Notify(its_us As Boolean, param As String) As Variant
   
   Dim pk_invoice As Variant
   Dim invoice_print As CRow
   Dim latex As String
   
   If its_us Then
      Log.DataMsg("ignoring invoice event as from us. param: " & param)
      Return Null
   Endif
   pk_invoice = CInt(Param)
   Log.DataMsg("fk_invoice_for_printing = " & fk_invoice_for_printing & " pk_invoice = " & pk_invoice)
   If fk_invoice_for_printing = pk_invoice Then
      Log.DataMsg("matches so now printing invoice pk = " & pk_invoice)
      invoice_print = modBillingDBI.Get_Invoice_PK(fk_invoice_for_printing)
      If IsNull(invoice_print!latex) And If invoice_print!online Then
         latex = modBillingDBI.Generate_Online_Latex(fk_invoice_for_printing)
      Else
         latex = invoice_print!latex
      Endif
      If Not IsNull(latex) Then modPrinting.Print_latex(latex)
      fk_invoice_for_printing = Null
      modDBConnect.CommitTrans()
   Endif
   If pk_invoice = fk_invoice Then
      ' we match the invoice being displayed as well/instead
      If IsNull(invoice_print) Then
         invoice_print = modBillingDBI.Get_Invoice_PK(fk_invoice)
         Set_Online_Data(invoice_print)
      Endif
   Endif
   Return Null
Catch
   Log.ErrorMsg("FRecordVist.Notfiy failed" & Error.Text & " " & Error.Backtrace.Join(" "))
   
End

Public Sub Reload()
   
   columnview99_Refresh()
   
End

Public Sub AccountHistory_Clear()
   'The account history lives on tabstrip2
   'gives user the options of displaying all billed items either paid, unpaid or together + filtering
   
   Items_Billed = New Collection
   bExit = True   
   cvwAccountHistory.Clear
   txtFilterDescriptor.text = ""
   cmbInvoiceToFilter.Clear 
   rbAccountHistoryNotUsed.Value = True   'not visible but turns off all the others
   bExit = False   
   
End

Public Sub EditArea_Clear()
   
   bExit = True
   form_billingcards.TabStrip1.index = 0
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Inner)
   cmbInvoiceComments.Clear
   form_billingcards.EditArea_Clear()
   lblEditAreaHeading.text = ""
   tlPatientDetails.text = ""
   form_patient_photo.Patient_Picture_Clear
   cell_text = ""
   VBox_Workcover_Claims.Visible = False  
   cvwWorkcoverClaims.Clear
   With lblInvoiceTotalAndPaid
      .text = ""
      .visible = False
   End With
   textlabelPayer.text = ""
   VBox_InvoiceGrid.Visible = True
   gvwItemsBIlled_Init                                       'reset to default 4 rows
   gvwItemsBIlled_Clear                                      'clear them ?still need this
   HBox_InvoiceGrid.height = (gvwItemsBIlled.rows.count + 3) * gvwItemsBIlled.rows[0].height
   fk_lu_default_billing_level = const.Billing_Default_Level_Private
   ' fk_patient = Null
   ' fk_payer_branch = Null
   ' fk_payer_person = Null
   ' fk_appointment = Null
   
   ' Items_Billed = New Collection
   ' Items_Today_Or_Unpaid = New Collection
   ' Payer = Null
   ' Patient = Null
   ' Unbilled_consultation = Null
   iAccountDisplayMode = const.Billing_Accounts_Unpaid
   rbPayerNotUsed.value = True 'switches off rbInvoiceOrganisation and rbInvoicePerson
   With lblInvoiceOwing
      .text = ""
      .Border = Border.None
   End With
   Hbox_InvoiceGrid.Enabled = True
   HBox_InvoiceComments.Enabled = True
   gvwPayments_Clear
   bComplainedAboutNoItem = False
   EditArea_Notify_Data_Change(False)
   FBankDetails.account_name = Null
   FBankDetails.account_number = Null
   FBankDetails.bsb = Null
   current_gvwItemsBilled_Row = 0
   GridData = New Collection
   bexit = False
   
End

Public Sub gvwPayments_Clear()
   '------------------------------------------
   'Clears the payments grid and total showing
   '------------------------------------------
   
   With gvwPayments
      .clear
      .Enabled = False
      .Rows.count = 3
   End With
   With lblPaymentTotal
      .text = ""
      .Border = Border.None
   End With
   Vbox_PaymentGrid.height = (gvwPayments.rows.count + 3) * gvwPayments.rows[0].height
   
End

Public Sub columnview99_Refresh()
   
   Select Case TabStrip1.Index
         
      Case cTab_Batching
         
      Case cTab_Reports
         
         Reports_Available_Refresh()
         ' Case cTab_ScheduleFees
         '    Fee_Schedule_Reload()
   End Select
   
End

Public Sub Scheduled_Fees_Reload()
   '----------------------------------------------------
   'display the fee schedule items filtered by txtFilter
   '----------------------------------------------------
   
   Dim bskip As Boolean
   Dim num_patients As String = ""
   Dim x As Integer
   
   With gvwFeeScheduleItems
      .Clear
      .Columns.count = 2
      .Rows.count = 0
   End With
   If IsNull(ScheduledFeeItems) Then Return
   For Each FeeItem In ScheduledFeeItems
      bSkip = False
      If txtFilter.text <> "" Then
         If Not IsNull(FeeItem!descriptor_brief) Then
            If Not InStr(Lower(FeeItem!descriptor_brief), Lower(Trim(txtFilter.text))) Then
               bskip = True
            Endif
         Else
            If Not InStr(Lower(FeeItem!descriptor), Lower(Trim(txtFilter.text))) Then
               bskip = True
            Endif
         End If
      End If
      If Not bskip Then
         Inc gvwFeeScheduleItems.rows.count
         '  gvwFeeScheduleItems.row = x
         num_patients = ""
         If FeeItem!percentage_fee_rule Then
            num_patients = "/" & Str(FeeItem!number_of_patients)
         Endif
         gvwFeeScheduleItems[x, 0].text = Trim(FeeItem!mbs_item & " " & FeeItem!ama_item & " " & FeeItem!user_item) & num_patients
         If Not IsNull(FeeItem!descriptor_brief) Then
            gvwFeeScheduleItems[x, 1].text = FeeItem!descriptor_brief
            gvwFeeScheduleItems[x, 1].WordWrap = True
            gvwFeeScheduleItems.rows[x].Height = -1
         Else
            gvwFeeScheduleItems[x, 1].text = FeeItem!descriptor
            gvwFeeScheduleItems[x, 1].WordWrap = True
            gvwFeeScheduleItems.rows[x].Height = -1
         End If
         Inc x
      End If
   Next
   If gvwFeeScheduleItems.Rows.count Then
      gvwFeeScheduleItems.row = 0
      gvwFeeScheduleItems.Rows[0].Selected = True
   Endif
   
End

Public Sub Scheduled_Fees_Search()
   '-----------------------------------------------------
   'User has typed in txtSearch for fee item
   'They will have typed either a number, or text phrase
   '-----------------------------------------------------
   
   timer1.Stop
   Inc Application.Busy
   ScheduledFeeItems = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Descriptors_Get(txtSearch.Text, True, False))
   Scheduled_Fees_Reload
   Dec Application.Busy
   
End

Public Sub Fee_Schedule_Edit()
   
   form_feeschedule.VBox_EditArea.Enabled = True
   form_feeschedule.lblEditArea.text = "Edit Item Number"
   form_feeschedule.txtuserItemNumber.SetFocus()
   If Not IsNull(ScheduledFeeItems[columnview99.item.key]!user_item) Then
      form_feeschedule.EditArea_Set_Editable(True, True)
   End If
   
End

Public Sub Fee_Schedule_Reload()
   
   timer1.Stop
   bexit = True
   combobox1.index = 0 'items with brief descriptor
   bexit = False
   With gvwFeeScheduleItems
      .Clear
      .Columns.count = 2
      .Rows.count = 0
   End With
   Inc Application.Busy
   ScheduledFeeItems = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Fees_Get_With_Brief_Descriptor())
   gvwFeeScheduleItems_FillGrid()
   Dec Application.Busy
   
End

Public Sub Reports_Available_Refresh()
   
   Dim x As Integer
   
   With columnview99
      .Clear
      .Columns.count = 1
      .Header = True
      .Columns[0].Text = "Report Name"
   End With
   ' columnview99.Add(x, 0)
   ' columnview99[x][0] = "Days Takings"
   ' Inc x
   columnview99.Add(x, 0)
   columnview99[x][0] = "Day List Patients Seen"
   
   ' For Each Report_title In Report_Titles
   '    columnview99.Add(Report_title!pk, 0)
   '    columnview99[Report_title!pk][0] = Report_title!report_title
   ' Next
   
End

Public Sub Unbilled_refresh(Optional single_day As Date = Null)
   
   Dim pic As Picture
   Dim widest_name As String
   Dim name_length As Integer
   Dim x As Integer
   
   cvwQuickView.Clear()
   fk_patient = Null
   If Trim(txtFilterAccountDate.text) <> "" And IsDate(Trim(txtFilterAccountDate.text)) Then
      single_day = Val(txtFilterAccountDate.text)
   Endif
   Unbilled_Consultations = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Consultations_UnBilled_Get(single_day, fk_patient))
   For Each Unbilled_consultation In Unbilled_Consultations
      If Not IsNull(Unbilled_consultation!fk_lu_appointment_icon) Then
         ' "1";"pregnancy"
         ' "2";"blood test"
         ' "3";"mental health plan"
         ' "4";"home visit"
         ' "5";"over 75 health assessment"
         ' "6";"procedure"
         ' "7";"immunization"
         ' "8";"workcover"
         ' "9";"annual checkup"
         ' "10";"prescription"
         ' "11";"diabetes cycle of care"
         ' 
         
         Select Case Unbilled_consultation!fk_lu_appointment_icon
            Case 4
               pic = pic_home_visit
            Case 6
               pic = pic_procedure
            Case 9
               pic = pic_annual_checkup
            Case Else
               pic = pic_empty
         End Select
      Else
         pic = pic_empty
      Endif
      cvwQuickView.Add(x, "", pic)
      cvwQuickView[x][0] = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
      ' cvwQuickView[x][1] = Unbilled_consultation!wholename   
      cvwQuickView[x][1] = Unbilled_consultation!title & " " & Left(Unbilled_consultation!firstname, 1) & " " & Unbilled_consultation!surname
      If Not IsNull(Unbilled_consultation!comment_for_billing) Then
         cvwQuickView[x][2] = Unbilled_consultation!comment_for_billing   
      Endif
      If Len(Unbilled_consultation!wholename) > name_length Then
         lblMeasure.text = Unbilled_consultation!wholename
         name_length = Len(Unbilled_consultation!wholename)
      Endif
      Inc x
   Next
   modUtilGUI.Columnview_Columns_Set_Size(cvwQuickView, lblMeasure)
   
End

Public Sub Unbilled_refresh_Second_Oldest(Optional single_day As Date = Null)
   
   Dim pic As Picture
   Dim widest_name As String
   Dim name_length As Integer
   
   cvwQuickView.Clear()
   fk_patient = Null
   If Trim(txtFilterAccountDate.text) <> "" And IsDate(Trim(txtFilterAccountDate.text)) Then
      single_day = Val(txtFilterAccountDate.text)
   Endif
   Unbilled_Consultations = modBillingDBI.Consultations_UnBilled_Get(single_day, fk_patient)
   For Each Unbilled_consultation In Unbilled_Consultations
      If Not IsNull(Unbilled_consultation!fk_lu_appointment_icon) Then
         ' "1";"pregnancy"
         ' "2";"blood test"
         ' "3";"mental health plan"
         ' "4";"home visit"
         ' "5";"over 75 health assessment"
         ' "6";"procedure"
         ' "7";"immunization"
         ' "8";"workcover"
         ' "9";"annual checkup"
         ' "10";"prescription"
         ' "11";"diabetes cycle of care"
         ' 
         
         Select Case Unbilled_consultation!fk_lu_appointment_icon
            Case 4
               pic = pic_home_visit
            Case 6
               pic = pic_procedure
            Case 9
               pic = pic_annual_checkup
            Case Else
               pic = pic_empty
         End Select
      Endif
      cvwQuickView.Add(Unbilled_consultation!pk, "", pic)
      cvwQuickView[Unbilled_consultation!pk][0] = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
      cvwQuickView[Unbilled_consultation!pk][1] = Unbilled_consultation!wholename   
      
      If Len(Unbilled_consultation!wholename) > name_length Then
         lblMeasure.text = Unbilled_consultation!wholename
         name_length = Len(Unbilled_consultation!wholename)
      Endif
   Next
   modUtilGUI.Columnview_Columns_Set_Size(cvwQuickView, lblMeasure)
   
End

Public Sub Unbilled_refresh_old(Optional single_day As Date = Null)
   
   cvwQuickView.Clear()
   If Trim(txtFilterAccountDate.text) <> "" And IsDate(Trim(txtFilterAccountDate.text)) Then
      single_day = Val(txtFilterAccountDate.text)
   Endif
   Unbilled_Consultations = modBillingDBI.Consultations_UnBilled_Get(single_day, fk_patient)
   For Each Unbilled_consultation In Unbilled_Consultations
      cvwQuickView.Add(Unbilled_consultation!pk, 0)
      cvwQuickView[Unbilled_consultation!pk][0] = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
      cvwQuickView[Unbilled_consultation!pk][1] = Unbilled_consultation!wholename
   Next
   
End

Public Sub Patient_Unbilled_Consultation_Display()
   '----------------------------------------------------------------------------------
   'User has selected to show unbilled consultations and has clicked on a patient name
   'Display the patient and consultation details in the editing area
   '----------------------------------------------------------------------------------
   
   cvwQuickView.MoveCurrent()
   EditArea_Clear()                                                                    'clear input area
   tbSaveBillingNextOfKin.Enabled = False
   bPayingInvoice = False
   txtpatient.ReadOnly = True
   txtDate.ReadOnly = True
   Unbilled_consultation = Unbilled_Consultations[cvwQuickView.Item.key]
   Try fk_lu_default_billing_level = Unbilled_consultation!fk_lu_default_billing_level
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private
   fk_patient = Unbilled_consultation!fk_patient
   fk_appointment = Unbilled_consultation!pk
   bExit = True
   With txtpatient
      .text = Unbilled_consultation!wholename
      .pos = 0
   End With
   txtAge.text = Unbilled_consultation!age_display
   txtDate.text = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
   LblEditAreaHeading.text = " Raise Invoice for UnBilled Consultation on " & txtDate.Text
   fk_staff = Unbilled_consultation!fk_staff
   For Each Staff_Member In staff
      If Staff_Member!fk_staff = fk_staff Then
         cmbSeenBy.index = cmbSeenBy.Find(Staff_Member!wholename)
         Break
      Endif
   Next
   Invoice_To_Set_Billing_To_Details(Unbilled_consultation)
   bExit = False
   With form_billingcards
      .TabStrip1.index = 0 'the card & billing data tab
      .Display_Patient_Data(Unbilled_consultation)
   End With
   VBox_EditArea_Outer.Enabled = True
   gvwItemsBIlled.Enabled = True
   ' Items_Today_Or_Unpaid = Reload_Billed_Items(cvwItemsTodayOrUnpaid, Items_Today_Or_Unpaid)
   Items_Today_Or_Unpaid_Reload
   EditArea_Notify_Data_Change(False)
   VBox_EditArea_Inner.Enabled = True
   VBox5.Enabled = True
   HBox_InvoiceGrid.Enabled = True
   VBox_InvoiceGrid.Enabled = True
   
End

Public Sub Columnview99_Menu()
   '-----------------------------------------------------------------------
   'User has clicked on the data columnview on left hand side of the screen
   'contexturally popup the menu
   '-----------------------------------------------------------------------
   
   Dim mnu As Menu
   Dim reason As Collection
   
   columnview99.MoveCurrent()
   If columnview99.count = 0 Then Return
   Select Case TabStrip1.Index
      Case cTab_Banking
      Case cTab_Batching
      Case cTab_Reports
      Case cTab_ScheduleFees
         mnuFeeSchedule.Popup()
   End Select
Catch
   Return
   
End

Public Sub mnuUnbilled_Click()
   
   Dim comment_for_billing As Variant 'see text, don't want to save a "" empty string as empty string but null
   
   Select Case Last.tag
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwQuickView, Me.Name)
      Case "wait for histology", "clarify with doctor", "remove comment" 'tag of remove comment = ""
         If Last.tag = "remove comment" Then
            comment_for_billing = ""
         Else
            comment_for_billing = Last.tag
         Endif
         modDBConnect.update("clerical.bookings", Null, ["pk": patient!fk_appointment, "comment_for_billing": comment_for_billing]) 
         modDBConnect.CommitTrans
         If comment_for_billing = "" Then
            cvwQuickView[sPatient_Collection_Key][2] = "" 
         Else
            cvwQuickView[sPatient_Collection_Key][2] = comment_for_billing  
         Endif
      Case "add free text"
         With form_unbilled_comment = New FUnbilledComment
            .Init(patient!fk_appointment, cvwQuickView, sPatient_Collection_Key)
            .ShowModal  
         End With
      Case Else   'tag is a number = reason not billed key to billing.lu_reasons_not_billed table
         Message.Title = "Unbilled Appointments - No Invoice?"
         If Message.Question(Patient!wholename & "\n\nMark this patient not to be charged:\n\n" & Last.text, "Yes", "No") = 2 Then Return
         modDBConnect.update("clerical.bookings", Null, ["pk": patient!pk, "fk_lu_reason_not_billed": Last.tag])
         modDBConnect.CommitTrans()
         Accounts_Reload()
   End Select
   
End

Public Sub columview99_Menu()
   
   If Last.count Then mnuUnBIlled.Popup()
   
End

Public Sub columnview99_Select()
   
   Dim period As Integer
   Dim fk_staff As Variant
   
   columnview99.MoveCurrent
   Select Case TabStrip1.Index
      Case cTab_Batching
         form_batching.Claim_Display(Bulk_Billed_Claims[columnview99.Item.key])
      Case cTab_Reports
         'just experimenting for the moment
         ' If rbMonth.Value Then period = 1
         ' If rbQuarter.Value Then period = 2
         ' If combobox1.Text = "All Staff" Then
         '    fk_staff = Null
         ' Else
         '    fk_staff = staff[combobox1.index]!fk_staff
         ' Endif
         ' form_reports.Report_Show(Report_Titles[columnview99.Item.key], DateChooserAccountDate.value, fk_staff, period)
         Select Case columnview99[columnview99.Item.key][0]
            Case "Days Takings"
               Report_Show_HTML(Days_Takings_Create_HTML())
               
            Case "Day List"
               Report_Show_HTML(Day_List_Create_HTML())
         End Select
   End Select
   
End

Public Sub Payer_Get(patient As Collection) 'fix me to fk_patient
   'temp code get the responsible person FIXME  body code only whilst developin
   'need more inclusive way of getting the payer - eg might not be a patient
   'fixme put in code for responsible party as a branch (must be put in contacts first)
   'fixme put in fk_payer_branch code
   
   bExit = True
   If Not IsNull(patient!fk_payer_person) Then
      payer = modContactsDBI.Person_Including_Patients_Get_Using_Pk(patient!fk_payer_person)
   End If
   If Not IsNull(Payer) Then
      rbInvoiceToNotUsed.value = True
      rbInvoicePerson.value = True
      Try textlabelPayer.text = payer!wholename & "<BR>" & Trim(payer!street1 & " " & payer!street2) & "<BR>" & payer!town & " " & payer!postcode
      fk_payer_person = payer!fk_person
      bExit = False
   End If
   bExit = False
   
End

Public Sub gvwPayments_Init()
   '------------------------------------------------------------------------
   'Construct the grid which will hold the payments for items on the invoice
   '------------------------------------------------------------------------
   
   With gvwPayments
      .Rows.count = 3
      .Rows.H = 20
      .Columns.count = 4
      lblmeasure.text = " Amount "
      .Columns[0].width = lblmeasure.Width
      lblmeasure.text = "Medicare Cheque  "
      .Columns[1].width = lblmeasure.Width
      lblmeasure.text = "Comment"
      .Columns[2].width = 200
      .Columns[3].width = lblmeasure.Width
   End With
   With gwPaymentLabel1
      .text = "Amount"
      .width = gvwPayments.Columns[0].Width
   End With
   With gwPaymentLabel2
      .text = "Payment Type"
      .width = gvwPayments.Columns[1].Width
   End With
   With gwPaymentLabel3
      .text = "Date"
      .width = gvwPayments.Columns[2].Width
   End With
   With gwPaymentLabel4
      .text = "Comment"
      .width = gvwPayments.Columns[3].Width
   End With
   
End

Public Function Item_Number_Selected() As Boolean
   
   If gvwItemsBIlled[0, cGridColumnItem_ItemNumber].Text <> "" Then
      Return True
   Endif
   
End

Public Sub txtPayment_LostFocus()
   
   gvwPayments_SaveProperty
   
End

Public Sub txtPayment_Activate()
   '----------------------------------------------------------------------------
   'User has hit <enter> key whilst typing in the textbox over the payments grid
   '----------------------------------------------------------------------------
   
   If bexit Then Return
   gvwPayments_SaveProperty
   ' panGvwPaymentsEditor.Hide
   ' $hEditor_gvwPayments = Null
   ' Select Case oncol_payments
   '    Case cGridColumnPayments_Amount
   '       gvwPayments[gvwPayments.row, 0].Text = modUtil.Money_Format(txtPayment.text)                       'format money correctly
   '       If gvwPayments[gvwPayments.row, 1].Text = "" And gvwPayments[gvwPayments.row, 0].Text <> "" Then   'if have no payment method but have money
   '          gvwPayments[gvwPayments.row, cGridColumnPayments_PaymentMethod].text = "EFPos" 'FIXME WHEN BACKEND TABLE FIXED TO EFTPos
   '       Endif
   '       Payment_Calculate_Total
   '    Case Else
   '       gvwPayments[gvwPayments.row, oncol_payments].Text = Trim(txtPayment.Text)
   ' End Select
   ' txtPayment.Visible = False
   ' EditArea_Notify_Data_Change(True)
   
End

Public Sub gvwPayments_MouseUp()
   '------------------------------------------------
   'User has clicked on one of the cells in the grid
   'Don't know why this responds to a disabled grid
   '------------------------------------------------
   
   Debug "mouse up"
   If bexit Or (Not gvwItemsBIlled_Data_Valid()) Or gvwPayments.Enabled = False Then
      Return                  'no-go if paying an invoice -can't change existing items
   End If
row_below:
   If gvwPayments.Row > 0 And If gvwPayments[gvwPayments.Row - 1, 0].text = "" Then 'if user clicks on row and row above not filled in move back FIXME THIS CODE DOES NOT DO THIS
      gvwPayments.Row = gvwPayments.Row - 1
      Goto row_below
   Endif
   gvwPayments_ShowProperty                                  'bad name but show the control we want to overlay a cell
   
End

Public Sub gvwPayments_SaveProperty()
   
   Dim s As String
   
   If IsNull($hEditor_gvwPayments) Then Return
   Select Case oncol_payments
      Case cGridColumnPayments_Amount
         gvwPayments[gvwPayments.row, 0].Text = modUtil.Money_Format(txtPayment.text)                       'format money correctly
         If gvwPayments[gvwPayments.row, cGridColumnPayments_PaymentMethod].Text = "" And gvwPayments[gvwPayments.row, 0].Text <> "" Then   'if have no payment method but have money
            gvwPayments[gvwPayments.row, cGridColumnPayments_PaymentMethod].text = "EFTPOS"
         Endif
         If gvwPayments[gvwPayments.row, cGridColumnPayments_Date].Text = "" And gvwPayments[gvwPayments.row, 0].Text <> "" Then   'if have no payment method but have money
            gvwPayments[gvwPayments.row, cGridColumnPayments_Date].Text = Format$(Now(), "dd/mm/yy")
         Endif
         Payment_Calculate_Total
      Case cGridColumnPayments_PaymentMethod
         cmbPaymentMethods.index = cmbPaymentMethods.Find(gvwPayments[gvwPayments.row, oncol_payments].Text)
      Case cGridColumnPayments_Date
         s = Trim(txtPayment.Text)
         Try modUtil.Make_Date_From_String(s)
         If Error Then
            If bExit Then Return
            bExit = True
            Message.Error("Date string \"" & s & "\" is not a valid date")
            bExit = False
         Else
            gvwPayments[gvwPayments.row, oncol_payments].Text = s
         Endif
      Case Else
         gvwPayments[gvwPayments.row, oncol_payments].Text = Trim(txtPayment.Text)
         
   End Select
   EditArea_Notify_Data_Change(True)
   gvwPayments_HideProperty()
   
End

Public Sub gvwPayments_HideProperty() As Boolean
   
   cmbPaymentMethods.Visible = False
   txtPayment.Visible = False
   panGvwItemsBilledEditor.Hide
   gvwPayments_lblOverLay.Hide
   
End

Public Sub gvwPayments_ShowProperty()
   '--------------------------------------------------------------------------------
   'nicked from the gambas IDE FProperty.class
   'Shows the control we are using to 'edit' the grid cell aligned over that cell
   'Maybe un-necessariily complex due to my simple brain but does this
   'The panGvwItemsBilledEditor = a Hbox holding 3 controls
   ' - a textbox for editing
   ' - a combobox for choosing the fee levels
   ' - a transparent label to let user click on something without entering edit mode
   '   which is what happens in the gambas IDE - I didn't use this because then I
   '   couldn't show a menu over the grid
   '--------------------------------------------------------------------------------
   
   Dim sProp As String  'contents of the grid cell
   Dim hEditor As Object
   
   Debug "show property"
   txtPayment.Hide
   cmbPaymentMethods.Hide
   gvwPayments_lblOverLay.Hide
   panGvwPaymentsEditor.Hide
   Select Case gvwPayments.column
      Case cGridColumnPayments_PaymentMethod
         cmbPaymentMethods.Index = cmbPaymentMethods.Find(gvwPayments[gvwPayments.Row, gvwPayments.column].Text)
         hEditor = cmbPaymentMethods
      Case Else
         hEditor = GvwPayments_lblOverLay
   End Select
   oncol_payments = gvwPayments.Column
   $hEditor_gvwPayments = hEditor
   GvwPayments_MoveProperty        ' Move the Hbox panGvwItemsBilledEditor into position over the cell
   $hEditor_gvwPayments.Show       ' Make transparent label "visible" or the combo box visible
   pangvwPaymentsEditor.Show       ' Show the container, hence the  control
   $hEditor_gvwPayments.SetFocus         ' give control focus > responded to key and click events
   
End

Private Sub gvwPayments_MoveProperty()
   '------------------------------------------------------------------------
   'Move the editing Hbox control to match a grid cell co-ordinates and size
   '------------------------------------------------------------------------
   
   If IsNull($hEditor_gvwPayments) Or gvwPayments.Row = - 1 Then Return
   With gvwPayments[gvwPayments.Row, gvwPayments.column]
      pangvwPaymentsEditor.Move(gvwPayments.X + .X - gvwPayments.ScrollX, gvwPayments.Y + .Y - gvwPayments.ScrollY, .Width, .Height)
      panGvwPaymentsEditor.Raise
   End With
   
End

Public Sub gvwPayments_MouseDown()
   '---------------------------------------------------------------------------
   'Enable the payments grid if there is something to pay and not bulk billing
   'Auto-insert the probable amount of money being payed
   'default to EFTPos which is the  most common method
   '--------------------------------------------------------------------------
   
   Dim row As Integer
   Dim paid_to_date As Float
   Dim s As String
   
   Debug "mouse down row:"; gvwPayments.Row; " col:"; gvwPayments.Column
   Debug "gvwitemsBilled.Row is "; gvwItemsBilled.Row
   If gvwItemsBIlled[0, 0].text <> "" And gvwItemsBIlled[0, 0].text <> "" Then        'if we have an item we have added to invoice
      If rbInvoiceToMedicare.value = True Or rbInvoiceToVeterans.value = True Then    'disable the payments grid if this is bulk billed item
         gvwPayments.Enabled = False
         If bExit Then Return
         bExit = True
         Message.Error("You can't pay when billing mode set to Medicare or Veterans")
         bExit = False
         Return
      End If
   Else                                                                               'nothing in the items billed grid
      gvwPayments.Enabled = False                                                     ' don't let them pay
      Debug "returning as no item billings found"
      Return
   Endif
   gvwPayments.Enabled = True                                                         'otherwise, enable the payments grid
   For row = 0 To gvwPayments.Rows.Max
      If gvwPayments[row, cGridColumnPayments_Amount].text <> "" Then
         paid_to_date += modUtil.MoneyToFloat(gvwPayments[row, cGridColumnPayments_Amount].text)
      Else
         Break
      Endif
   Next
   '  If (rbInvoiceToPatient.value = True Or rbInvoicePerson.Value = True) Then
   '    If gvwPayments.row = 0 Then
   s = "*INVALID*"
   Try s = gvwPayments[gvwPayments.row, cGridColumnPayments_Amount].text
   If s = "" Then    'if not re-clicking on a filled in row
      gvwPayments[gvwPayments.row, cGridColumnPayments_Amount].text = modUtil.Money_Format(invoice_total - paid_to_date)
      gvwPayments[gvwPayments.row, cGridColumnPayments_PaymentMethod].text = "EFTPOS"
      gvwPayments[gvwPayments.Row, cGridColumnPayments_Date].Text = Format$(Now(), "dd/mm/yy")
      Payment_Calculate_Total
      EditArea_Notify_Data_Change(True)
      '  Else                                                                          'not on row 0, work out how much money left to pay
      '     If gvwPayments[gvwPayments.row, cGridColumnPayments_Amount].text = "" Then
      '      gvwPayments[gvwPayments.row, cGridColumnPayments_Amount].text =
      '    Next
   End If
   
End

Public Sub gvwPayments_lblOverLay_Menu()
   '---------------------------------------------------------------
   'The user has right mouse clicked on a grid row, but over a cell
   'this means they clicked on the transparent menu
   '---------------------------------------------------------------
   
   Dim row As Integer
   Dim col As Integer
   Dim bHaveText As Boolean
   
   bexit = True
   ' If bPayingInvoice Then Return
   For row = 0 To gvwPayments.Rows.count - 1
      For col = 0 To 4
         If gvwPayments[row, col].Text <> "" Then
            mnuPayments.Popup
            bHaveText = True
            Break
         Endif
      Next
      If bHaveText Then Break
   Next
   bexit = False
   
End

Public Sub gvwPayments_Add_Row()
   
   Dim rows As Integer
   
   For rows = 0 To gvwPayments.rows.Max
      If gvwPayments[rows, 0].text = "" Then
         Return
      Endif
   Next
   Inc gvwPayments.Rows.Count
   
   HBox_PaymentGrid.height = (gvwPayments.rows.count + 3) * gvwPayments.rows[0].height
   Vsplit_Main.layout = [Vsplit_Main.layout[0] + 20, VSplit_Main.layout[1] - 20]
   
End

Public Sub gvwPayments_Delete_Row()
   '------------------------------------------------------------
   'Called by mnuPayments_Click - delete the current payment row
   '------------------------------------------------------------
   
   Dim col As Integer
   
   For col = 0 To 5
      gvwPayments[gvwPayments.row, col].text = ""
   Next
   Payment_Calculate_Total()
   
End

Public Sub gvwPayments_lblOverLay_DblClick()
   '-------------------------------------------------------------
   'Looks to use like double clicking on a grid row
   'actually clicking on the transparent label over the grid cell
   'remove this transparent label and enter 'edit mode'
   '-------------------------------------------------------------
   
   gvwPayments_Cell_Overlay_Remove("")
   
End

Public Sub gvwPayments_lblOverLay_KeyPress()
   '----------------------------------------------------------------
   'This is a transparent label, "hiding" the editing textbox
   'Pass the keypress character into the underlying textbox if empty
   'and enter 'edit mode'
   '----------------------------------------------------------------
   
   gvwPayments_Cell_Overlay_Remove(key.Text)
   
End

Public Sub gvwPayments_Cell_Overlay_Remove(char As String)
   '----------------------------------------------------------------
   'use the underlying cell text to either set the fee combox index
   'or the textbox 1 editing textbox
   'remove the label hiding the control in the grid to allow use
   'either a combobox or a textbox
   '-----------------------------------------------------------------
   
   Dim Cell_Text As String = gvwPayments[gvwPayments.Row, gvwPayments.column].Text
   
   If gvwPayments.column <> cGridColumnPayments_PaymentMethod Then
      If gvwPayments[gvwPayments.row, gvwPayments.Column].text = "" Then
         txtPayment.text = char
      Else
         txtPayment.text = Cell_Text
      End If
      $hEditor_gvwPayments = txtPayment
   End If
   gvwPayments_lblOverLay.Visible = False
   Print txtPayment.Visible, " is txtpayment visible"
   $hEditor_gvwPayments.visible = True
   pangvwPaymentsEditor.Visible = True
   $hEditor_gvwPayments.SetFocus
   Debug txtPayment.Visible, " is in the overlay routine visible"
   
End

Public Sub gvwItemsBilled_HideProperty() As Boolean
   
   cmbFeeType.Visible = False
   textbox1.Visible = False
   gvwItemsBilled_lblOverLay.Visible = False
   panGvwItemsBilledEditor.Hide
   $hEditor_gvwItems = Null
   
End

Public Sub gvwItemsBilled_SaveProperty()
   
   ' Select Case TypeOf($hEditor_gvwItems)
   '    Case "text"
   ' End Select
   
End

Public Sub gvwItemsBilled_ShowProperty()
   '--------------------------------------------------------------------------------
   'nicked from the gambas IDE FProperty.class
   'Shows the control we are using to 'edit' the grid cell aligned over that cell
   'Maybe un-necessariily complex due to my simple brain but does this
   'The panGvwItemsBilledEditor = a Hbox holding 3 controls
   ' - a textbox for editing
   ' - a combobox for choosing the fee levels
   ' - a transparent label to let user click on something without entering edit mode
   '   which is what happens in the gambas IDE - I didn't use this because then I
   '   couldn't show a menu over the grid
   '--------------------------------------------------------------------------------
   
   Dim hEditor As Object
   
   textbox1.Hide
   textbox1.text = ""
   If cell_text <> "" Then textbox1.text = cell_text
   cmbFeeType.Hide
   panGvwItemsBilledEditor.Hide
   
   Select Case gvwItemsBIlled.column
      Case cGridColumnItem_FeeType
         'cmbFeeType.Index = cmbFeeType.Find(gvwItemsBIlled[gvwItemsBIlled.Row, cGridColumnItem_FeeType].Text)
         hEditor = cmbFeeType
         oncol_items = cGridColumnItem_FeeType
      Case Else
         hEditor = textbox1
   End Select
   $hEditor_gvwItems = hEditor
   Print "Grid contents show property before move", gvwItemsBIlled.row, " column: ", gvwItemsBilled.column 
   gvwItemsBilled_MoveProperty        ' Move the Hbox panGvwItemsBilledEditor into position over the cell
   $hEditor_gvwItems.Show             ' Make transparent label "visible" or the combo box visible
   panGvwItemsBilledEditor.Show       ' Show the container, hence the  control
   $hEditor_gvwItems.SetFocus         ' give control focus > responded to key and click events
   
End

Public Sub gvwItemsBIlled_Clear()
   '----------------------------------------------------------
   'Clear the grid which the staff use to type in item numbers
   '----------------------------------------------------------
   
   gvwItemsBIlled.Clear()
   item = Null
   OnCol_Items = 0
   onrow_items = 0
   
End

Public Sub gvwItemsBilled_lblOverLay_KeyPress()
   '----------------------------------------------------------------
   'This is a transparent label, "hiding" the editing textbox
   'Pass the keypress character into the underlying textbox if empty
   'and enter 'edit mode'
   '----------------------------------------------------------------
   
   gwItemsBilled_Cell_Overlay_Remove(key.Text)
   
End

Public Sub gwItemsBilled_Cell_Overlay_Remove(char As String)
   '----------------------------------------------------------------
   'use the underlying cell text to either set the fee combox index
   'or the textbox 1 editing textbox
   'remove the label hiding the control in the grid to allow use
   'either a combobox or a textbox
   '-----------------------------------------------------------------
   ' Dim hEditor As Object
   
   Dim Cell_Text As String
   
   If gvwItemsBIlled.Row = -1 Then Return
   cell_text = gvwItemsBIlled[gvwItemsBIlled.Row, gvwItemsBIlled.column].Text
   Select Case gvwItemsBIlled.column
      Case cGridColumnItem_FeeType
         Return ' don't do for the fee: it's a combo which has already been created
      Case cGridColumnItem_ItemNumber
         If cell_text <> "" Then Return ' can't edit the item number once set
      Case cGridColumnItem_Fee
         ' editing the fee is OK
      Case Else
         Return ' everything else, don't edit (yet)
   End Select
   oncol_items = gvwItemsBIlled.column ' remember which column we are editing
   textbox1.text = char
   $hEditor_gvwItems = textbox1
   gvwItemsBilled_lblOverLay.Visible = False
   $hEditor_gvwItems.visible = True
   $hEditor_gvwItems.SetFocus
   
End

Public Sub gvwItemsBilled_lblOverLay_Menu()
   '---------------------------------------------------------------
   'The user has right mouse clicked on a grid row, but over a cell
   'this means they clicked on the transparent menu
   '---------------------------------------------------------------
   
   Dim row As Integer
   Dim col As Integer
   Dim bHaveText As Boolean
   
   bexit = True
   If bPayingInvoice Then Return
   For row = 0 To gvwItemsBIlled.Rows.count - 1
      For col = 0 To 4
         If gvwItemsBIlled[row, col].Text <> "" Then
            mnuItemsBilled.Popup
            bHaveText = True
            Break
         Endif
      Next
      If bHaveText Then Break
   Next
   bexit = False
   
End

Public Sub gvwItemsBilled_lblOverLay_DblClick()
   '-------------------------------------------------------------
   'Looks to use like double clicking on a grid row
   'actually clicking on the transparent label over the grid cell
   'remove this transparent label and enter 'edit mode'
   '-------------------------------------------------------------
   
   gwItemsBilled_Cell_Overlay_Remove("")
   
End

Public Sub gvwItemsBIlled_Init()
   '----------------------------------------------------------
   'Contruct the grid which will hold the items on the invoice
   '----------------------------------------------------------
   
   With gvwItemsBIlled
      .Rows.H = 20
      .Columns.Count = 6
      .Rows.count = 4
      .Columns[0].text = "Item"
      .Columns[1].text = "Description"
      .Columns[2].text = "Fee"
      .Columns[3].text = "Gap"
      .Columns[4].text = "Rate"
      .Columns[5].text = "GST"
      .Enabled = False
   End With
   
End

Public Sub gvwItemsBIlled_Delete_Row()
   
   Dim col As Integer
   
   If bPayingInvoice Then Return
   For col = 0 To 5
      gvwItemsBIlled[gvwItemsBIlled.row, col].text = ""
   Next
   HBox_Descriptor.Visible = False
   columnview1.Visible = False
   Invoice_Calculate_Total("Total Owing")
   cell_text = ""
   
End

Public Sub gvwItemsBIlled_Data_Valid() As Boolean
   '-----------------------------------------------------------------------
   'Checks the item data in the grid is value, start of row must be an item
   'number in the backend need at minimum item number,an amount and a type
   'returns true if rows are valid
   '-----------------------------------------------------------------------
   
   Dim row As Integer
   Dim item As Collection
   Dim bNoDAta As Boolean = True
   
   For row = 0 To gvwItemsBIlled.Rows.Max
      If gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text <> "" Then
         item = modBillingDBI.Items_Get(gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text, -1, 1)
         If IsNull(item) Then Return
         If gvwItemsBIlled[row, cGridColumnItem_Fee].Text = "" Then
            Return
         Endif
         If gvwItemsBIlled[row, cGridColumnItem_FeeType].Text = "" Then
            Return False
         Endif
         bNoDAta = False
      End If
   Next
   If bNoDAta Then Return False
   Return True
   
End

Public Sub gvwItemsBilled_MouseDown()
   'User has clicked somewhere on a row in the items billed grid
   
   If IsNull(patient) Then Return
   
   onrow_items = gvwItemsBIlled.Row
   If gvwItemsBIlled.Column > cGridColumnItem_BriefDescriptor Then
      If Not Valid_Item_And_Descriptor() Then Return
   End If   
   Print "Grid contents mousedown: row", gvwItemsBIlled.row, " column: ", gvwItemsBilled.column 
   gvwItemsBilled[gvwItemsBIlled.row, gvwItemsBIlled.Column].Text
   If gvwItemsBilled[gvwItemsBIlled.row, gvwItemsBIlled.Column].Text <> "" Then
      Cell_Text = gvwItemsBilled[gvwItemsBIlled.row, gvwItemsBIlled.Column].Text
   Endif
Catch
   
End

Public Sub gvwItemsBIlled_MouseUp()
   '------------------------------------------------
   'User has clicked on one of the cells in the grid
   '------------------------------------------------
   
   Dim onRow As Integer = gvwItemsBIlled.Row
   
   Print "Grid contents mouseup: row", gvwItemsBIlled.row, " column: ", gvwItemsBilled.column 
   
   If IsNull(patient) Then Return
   
   If bPayingInvoice Or bexit Then Return                  'no-go if paying an invoice -can't change existing items
   If gvwItemsBIlled.Column = 1 Then Return
   If gvwItemsBIlled.Column > cGridColumnItem_BriefDescriptor Then
      If Not Valid_Item_And_Descriptor() Then Return
   End If  
   Print "Grid contents mouseup after the valid thingy: row", gvwItemsBIlled.row, " column: ", gvwItemsBilled.column 
   ' If gvwItemsBIlled.Column > cGridColumnItem_ItemNumber Then
   cell_text = ""
   'End If  
   oncol_items = gvwItemsBIlled.Column
   
   If Last_Billing_Row_Used() + 1 <> gvwItemsBIlled.Row And gvwItemsBIlled.column = 0 Then
      gvwItemsBIlled.Row = Last_Billing_Row_Used() + 1
      cell_text = ""
      onrow_items = gvwItemsBIlled.Row 
      
   Endif
   Print "Grid contents mouseup after the last_billing_row_used thingy: row", gvwItemsBIlled.row, " column: ", gvwItemsBilled.column 
   If gvwItemsBIlled[gvwItemsBIlled.row, 0].text = "10991" Then Return
   gvwItemsBilled_ShowProperty                              'bad name but show the control we want to overlay a cell
   
End

Public Function Last_Billing_Row_Used() As Integer
   
   Dim x As Integer
   
   For x = 0 To gvwItemsBIlled.Rows.Count - 1
      If Trim(gvwItemsBIlled[x, 0].text) = "" Then
         Return x - 1
      Endif
   Next
   Return x
   
End

Public Sub gvwItemsBIlled_Area_Of_Need_Add()
   ' If user changing fee types, add in area of need if now bulk billing
   ' and other criteria safisfy
   
   Dim patient_age_in_years As Integer
   Dim bEntitledVeteran As Boolean 
   Dim fk_lu_billing_type As Variant
   Dim AreaOfNeed_Item As Collection
   Dim price As Variant
   Dim Backup_GridData As New Collection
   
   If Not IsNull(form_billingcards.Veteran_Card_Type()) Then     'they must be an entitled veteran in some capacity
      bEntitledVeteran = True
      fk_lu_billing_type = const.Billingtype_DVA_LM0
   Else
      fk_lu_billing_type = const.Billingtype_Scheduled_Fee
   End If   
   If txtAge.text <> "" And InStr(txtAge.text, "y") Then patient_age_in_years = Val(Split(txtAge.text, "y")[0])
   If bEntitledVeteran Or patient_age_in_years < 16 Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Health_Care_Card Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Pensioner_concession_card Then
      AreaOfNeed_Item = Area_of_Need_Fees[fk_lu_billing_type]
      If Not IsNull(AreaOfNeed_Item) Then
         onrow_items = Min(gvwItemsBIlled.row + 1, 3)
         price = Replace(AreaOfNeed_Item!price, "$", "")
         gvwItemsBIlled.row = onrow_items
         gvwItemsBIlled_FillRow(price, AreaOfNeed_Item)
      Endif
   End If
   
End

Public Sub gvwItemsBIlled_Area_Of_Need_Remove()
   ' A condition has happened where we need to auto-remove any item of need monies
   ' eg. a patient who usually gets this has been converted to a private fee
   ' shufle up kosha rows and adjust the underlying grid collection
   ' this is currently not working
   
   Dim x As Integer
   Dim col As Integer
   Dim a_row As Collection
   Dim kosha_rows As New Collection
   Dim Kosha_row As Collection
   Dim Backup_GridData As New Collection
   
   Print GridData
   For x = 0 To gvwItemsBIlled.Rows.count - 1
      If gvwItemsBIlled[x, 0].text = "10991" Then
         For col = 0 To 5
            gvwItemsBIlled[x, col].text = ""
         Next 
         Invoice_Calculate_Total("Total Owing")
         cell_text = ""
      Else
         If gvwItemsBIlled[x, 0].text <> "" Then    
            a_row = New Collection
            a_row!item = gvwItemsBIlled[x, cGridColumnItem_ItemNumber].text
            a_row!brief_descriptor = gvwItemsBIlled[x, cGridColumnItem_BriefDescriptor].text
            a_row!fee = gvwItemsBIlled[x, cGridColumnItem_Fee].text
            a_row!gap = gvwItemsBIlled[x, cGridColumnItem_Gap].text
            a_row!fee_type = gvwItemsBIlled[x, cGridColumnItem_FeeType].Text
            a_row!gst = gvwItemsBIlled[x, cGridColumnItem_gst_amount].text
            kosha_rows.Add(a_row, kosha_rows.count)
            Backup_GridData.Add(GridData[x], Backup_GridData.Count)
         End If   
      Endif
   Next
   GridData = New Collection
   x = 0
   If kosha_rows.count Then
      gvwItemsBIlled_Clear
      For Each Kosha_row In kosha_rows
         gvwItemsBIlled[x, cGridColumnItem_ItemNumber].text = Kosha_row!item
         gvwItemsBIlled[x, cGridColumnItem_BriefDescriptor].text = Kosha_row!brief_descriptor
         gvwItemsBIlled[x, cGridColumnItem_Fee].text = Kosha_row!fee
         gvwItemsBIlled[x, cGridColumnItem_Gap].text = Kosha_row!gap
         gvwItemsBIlled[x, cGridColumnItem_FeeType].text = Kosha_row!fee_type 
         gvwItemsBIlled[x, cGridColumnItem_gst_amount].text = Kosha_row!gst
         GridData.Add(Backup_GridData[x], x)
         Inc x 
      Next
   Endif
   Print GridData
   
End

Public Sub gvwItemsBIlled_Scroll()
   '------------------------------------------------------
   'As the grid scrolls re-position the overlying control
   '-----------------------------------------------------
   
   gvwItemsBilled_MoveProperty
   
End

Public Sub gvwItemsBIlled_Select()
   
   onrow_items = gvwItemsBIlled.Row
   
End

Private Sub gvwItemsBilled_MoveProperty()
   '------------------------------------------------------------------------
   'Move the editing Hbox control to match a grid cell co-ordinates and size
   '------------------------------------------------------------------------
   
   Print "in move", gvwItemsBIlled.column
   If IsNull($hEditor_gvwItems) Or gvwItemsBIlled.Row = -1 Then Return
   With gvwItemsBIlled[gvwItemsBIlled.Row, gvwItemsBIlled.column]
      panGvwItemsBilledEditor.Move(gvwItemsBIlled.X + .X - gvwItemsBIlled.ScrollX, gvwItemsBIlled.Y + .Y - gvwItemsBIlled.ScrollY, .Width, .Height)
      panGvwItemsBilledEditor.Raise
   End With
   
End

Public Sub cmbEditArea_Enter()
   
   ' If Last.tag = "fee type" Then last_Fee_Type = cmbFeeType.text
   
End

Public Sub cmbEditArea_LostFocus()
   
   Select Case Last.tag
      Case "fee type", "payment method"
         Last.visible = False
   End Select
   
End

Public Sub Reset_Last_Billing_Type()
   
   ' bexit = True   
   ' Select Case iLast_Invoice_Type
   '    Case cLast_Invoice_Type_Private
   '       rbInvoiceToPatient.value = True
   '    Case cLast_Invoice_Type_Medicare
   '        rbInvoiceToMedicare.Value = True
   '    Case cLast_Invoice_Type_Veteran
   '       rbInvoiceToVeterans.value = True 
   '    Case cLast_Invoice_Type_Other
   '       rbInvoiceToOther.Value = True 
   ' End Select
   ' bExit = False  
End

Public Sub cmbPaymentMethods_Menu()
   
   gvwPayments_lblOverLay_Menu()
   
End

Public Sub cmbFeeType_Click()
   
   If bexit Then 
      Stop Event
      Return 
   End If   
   gvwItemsBIlled_Set_Fee_Level(Last.text)
   bexit = True    
   gvwItemsBIlled_Calculate_Fees
   bexit = False
   
End

Public Sub gvwItemsBIlled_Set_Fee_Level(level As String)
   
   Dim row As Integer
   
   Select Case Lower(level)
      Case "schedule fee", "veteran"
         For row = 0 To gvwItemsBIlled.Rows.Max
            If gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text <> "" Then    
               gvwItemsBIlled.row = row
               gvwItemsBIlled[row, cGridColumnItem_FeeType].text = level
            End If   
         Next
      Case "private fee"
         For row = 0 To gvwItemsBIlled.Rows.Max
            If gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text <> "" Then    
               gvwItemsBIlled.row = row
               If Lower(gvwItemsBIlled[row, cGridColumnItem_FeeType].text) = "schedule fee" Or Lower(gvwItemsBIlled[row, cGridColumnItem_FeeType].text) = "veteran" Then 
                  gvwItemsBIlled[row, cGridColumnItem_FeeType].text = level
               End If   
            End If   
         Next
      Case Else
         gvwItemsBIlled[row, cGridColumnItem_FeeType].text = level
   End Select
   
End

Public Sub cmbFeeType_Click_old()
   '-------------------------------------------------------------------------------------------
   'Change the fee type re-calculate the columns
   'This event is raised by either user clicking on the combo or medicare/veteran radio buttons
   're-calculate the gap payment or set to zero if this is veterans patient.
   '-------------------------------------------------------------------------------------------
   
   Dim gap_payment As Float
   
   If bexit Then Return
   If gvwItemsBIlled.row = -1 Then Return                                                    ' no row selected
   If InStr(cmbFeeType.text, "DVA") Then                                                     ' warn if no vet number if DVA
      If IsNull(currentconsult!patient!veteran_number) Then
         Message.Info("You have selected a Veterans fee level, the patient has no veterans card number.\n\n"
         "If they have this entitlement, please add the appropriate details in the Cards tab above.")
         Reset_Last_Billing_Type
         Return
      Endif
   Endif
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].text = cmbFeeType.Text       ' return text to the grid
   If gvwItemsBIlled[gvwItemsBIlled.row, 0].text <> "" Then                                 ' if user has (or the system has) put in an item number, get the fee for that cmbFeeType.text
      Try gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(gvwItemsBIlled[gvwItemsBIlled.row, 0].text, FeeTypes[cmbFeeType.index]!pk)!price
      If Error Then                                                                         ' not found a fee? then whinge
         If Not bComplainedAboutNoItem Then
            Message.info("No fees exist for the billing level you selected")
            bComplainedAboutNoItem = True
         Endif
         cmbFeeType.index = cmbFeeType.Find(last_Fee_type)                                  ' reset the combo to the last used fee level 
      Else
         '-------------------------------------
         'User has selected a new billing level
         '-------------------------------------
         bComplainedAboutNoItem = False
         If gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text = "$0.00" Then
            gvwItemsBIlled_Delete_Row()
         Else
            gap_payment = modUtil.MoneyToFloat(gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text) - modUtil.MoneyToFloat(scheduled_fee!price)
            If gap_payment = 0 Or rbInvoiceToVeterans.value = True Or rbInvoiceToMedicare.value = True Then
               gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].text = "$0.0"
            Else
               gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].text = modUtil.Money_Format(gap_payment)
            End If
         End If
      Endif
   End If
   Print InStr(cmbFeeType.text, "Schedule") 
   Print Not InStr(cmbFeeType.text, "Medicare") 
   '   If InStr(cmbFeeType.text, "Schedule") Or InStr(cmbFeeType.text, "Private") Or InStr(cmbFeeType.text, "AMA") Or InStr(cmbFeeType.text, "Concession") Or InStr(cmbFeeType.text, "TAC") Then
   If InStr(cmbFeeType.text, "Private") Or InStr(cmbFeeType.text, "AMA") Or InStr(cmbFeeType.text, "Concession") Or InStr(cmbFeeType.text, "TAC") Then
      If bAreaOfNeed = True Then gvwItemsBIlled_Area_Of_Need_Remove          
      rbInvoiceToPatient.value = True 
   Endif
   If cmbFeeType.text = "Schedule Fee" And last_Fee_type <> "Schedule Fee" Then
      If bAreaOfNeed = True Then gvwItemsBIlled_Area_Of_Need_Add  
   Endif
   Invoice_Calculate_Total("Total Owing")
   gvwItemsBilled_HideProperty
   EditArea_Notify_Data_Change(True)
   last_Fee_Type = cmbFeeType.text
   
End
' 
' Public Sub cmbPaymentMethods_Menu()
'    
'    gvwPayments_lblOverLay_Menu()
'    
' End

Public Sub cmbPaymentMethods_Click()
   
   gvwPayments[gvwPayments.row, cGridColumnPayments_PaymentMethod].Text = cmbPaymentMethods.Text
   EditArea_Notify_Data_Change(True)
   gvwPayments_HideProperty
   
End

Public Sub textbox1_Activate()
   'This is the textbox which overlays the cells in the grid
   'user has hit the <enter> key
   
   Dim fee As String
   Dim fee_float As Float
   Dim old_fee As Float
   Dim gst As Float
   Dim old_gap As Float
   
   If bexit Then Return
   panGvwItemsBilledEditor.Hide
   $hEditor_gvwItems = Null
   Select Case OnCol_Items
      Case cGridColumnItem_ItemNumber
         gvwItemsBIlled[gvwItemsBIlled.row, 0].Text = textbox1.text
         textbox1.Visible = False
         Get_Items(textbox1.text)
      Case cGridColumnItem_Fee
         fee = Trim(textbox1.text)
         fee = Replace$(fee, "$", "")
         Try fee_float = modUtil.MoneyToFloat(fee)
         If Error Then
            Message.Error("Not a valid monetary value")
         Else
            old_fee = 0
            Try old_fee = modUtil.MoneyToFloat(gvwItemsBilled[gvwItemsBilled.Row, 2].Text)
            gvwItemsBilled[gvwItemsBilled.Row, 2].Text = "$" & fee
            textbox1.Visible = False
            gvwItemsBIlled.SetFocus()
            ' re-compute GST amounts if required
            Try gst = modUtil.MoneyToFloat(gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_gst_amount].Text)
            If Not Error And If gst > 0 And If old_fee > 0 Then
               gst = fee_float * (gst / old_fee)
               gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_gst_amount].Text = modUtil.Money_Format(gst)
            Endif
            ' re-compute the gap if required
            Try old_gap = modUtil.MoneyToFloat(gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_Gap].Text)
            If Not Error And If old_gap > 0 Then
               old_gap = old_gap + fee_float - old_fee
               gvwItemsBilled[gvwItemsBilled.Row, cGridColumnItem_Gap].Text = modUtil.Money_Format(old_gap)
            Endif
            Invoice_Calculate_Total("Total Owing")
         Endif
      Case cGridColumnItem_BriefDescriptor
         If IsNull(item) Then Return
         If IsNull(item!descriptor_brief) Then
            Message.Title = "Brief Descriptors"
            gvwItemsBIlled[gvwItemsBIlled.row, 1].Text = Trim(textbox1.text)
            If Message.question("Do you want to save this brief descriptor?", "Yes", "No") = 1 Then
               modDBConnect.update("billing.fee_schedule", Null, ["pk": item!fk_fee_schedule, "descriptor_brief": gvwItemsBIlled[gvwItemsBIlled.row, 1].Text])
               item!descriptor_brief = gvwItemsBIlled[gvwItemsBIlled.row, 1].Text
               modDBConnect.CommitTrans()
               textbox1.Visible = False
               HBox_Descriptor.Visible = False
               txtDescriptor.text = ""
               gvwItemsBIlled.SetFocus()
            Endif
         Endif
   End Select
   
End

Public Sub textbox1_KeyPress()
   
   Select Case key.Code
      Case key.Down
         If OnCol_Items = cGridColumnItem_BriefDescriptor Then
            If columnview1.Visible Then
               With columnview1
                  .MoveFirst
                  .Item.Selected = True
                  .SetFocus()
               End With
            End If
         End If
   End Select
   
End

Public Sub textbox1_KeyRelease()
   '--------------------------------------------------------------------
   'if user searching for brief descriptor zero the timer count
   'then once they stop typing and timer_count which is incremented by
   'Timer1_Timer > 3 the search is triggered see   Descriptors_Brief_Get
   '--------------------------------------------------------------------
   
   If Trim(textbox1.text) = "" Then Return
   timer_count = 0
   If OnCol_Items = cGridColumnItem_BriefDescriptor Then
      timer1.Enabled = True
      timer1.Start
   Else
      timer1.Enabled = False
      timer1.Stop
   Endif
   
End

Public Sub Form_Close()
   
   Settings_Save()
   
End

Private Sub Settings_Load()
   
   Vsplit_Main.layout = Settings[Me.Name & "/VSplit_Main.Layout", modUtilGUI.VSplit([604, 283])]
   Hsplit_Main.Layout = Settings[Me.Name & "/HSplit_Main.Layout", modUtilGUI.HSplit([362, 1335])]
   Hsplit_EditArea.Layout = Settings[Me.Name & "/HSplit_EditArea.Layout", modUtilGUI.HSplit([653, 658])]
   cvwItemsTodayOrUnpaid.Font = Font[Settings[Me.Name & "/cvwItemsBilled.font", "DejaVu Sans, 9"]]
   cvwQuickView.Font = Font[Settings[Me.Name & "/cvwQuickView.font", "DejaVu Sans, 9"]]
   cvwAccountHistory.font = Font[Settings[Me.Name & "/cvwAccountHistory.font", "DejaVu Sans, 9"]]
   VSplit_INvoices.Layout = Settings[Me.name & "/VSplit_Invoices.Layout", modUtilGUI.VSplit([1, 2])]
   
End

Public Sub Settings_Save()
   
   Settings["FRecordVisit/VSplit_Main.Layout"] = Vsplit_Main.Layout
   Settings["FRecordVisit/HSplit_Main.Layout"] = Hsplit_Main.Layout
   Settings["FRecordVisit/HSplit_EditArea.Layout"] = Hsplit_EditArea.Layout
   Try form_feeschedule.Settings_Save()
   
End

Public Sub Save(bBulkBill As Boolean, Optional bPrint As Boolean = True)
   '--------------------------------------------------------------------------------------
   ' Saves a new or edited invoice (if the invoice is unpaid)
   ' Note the Invoice collection Is global to this billing module, so that if an invoice
   ' has been displayed by clicking on an invoice under the editing area, and edited then
   ' all the collection is filled. Only the date_invoiced and staff invoiced is kept when
   ' editing, the rest is added back in
   '
   ' Saves record of payment
   '--------------------------------------------------------------------------------------
   ' CREATE TABLE billing.invoices
   ' (
   '   pk serial NOT NULL,
   '   fk_staff_invoicing integer NOT NULL, -- the staff member raising the invoice
   '   date_printed timestamp without time zone,
   '   notes text, -- Any additional comments pertaining to the invoice or any of it's...
   '   fk_staff_provided_service integer NOT NULL, -- the staff member who provider the service on which the invoice is based
   '   fk_patient integer,
   '   date_invoiced timestamp without time zone NOT NULL DEFAULT now(),
   '   paid boolean NOT NULL DEFAULT false,
   '   fk_payer_person integer, -- if not null then the key to the person who pays the bill
   '   fk_payer_branch integer, -- if not null then payer is an organisation/branch
   '   latex text, -- the LaTeX definition of the invoice generated
   '   fk_branch integer NOT NULL, -- The branch at which the patient was provided with the service
   '   visit_date date, -- The date time of the patient visit - may be null because the invoice could be raised not in relation to a visit
   '   reference text, -- text of any insurance or bill reference eg 'CLAIM NO:1234'
   '   fk_lu_bulk_billing_type integer, -- if not null then the type of bulk-bill 1=medicare 2=veteran
   '   fk_appointment integer,
   '   total_bill money NOT NULL DEFAULT '$0.00'::money,
   '   total_gst money NOT NULL DEFAULT '$0.00'::money,
   '   total_paid money NOT NULL DEFAULT '$0.00'::money,
   '   online boolean NOT NULL DEFAULT false, -- true if the invoice is to be uploaded via Medicare Online
   '   result_code integer DEFAULT (-1), -- text returned by medicare Online driver, only significant if result_code > 0
   '   result_text text,
   '   fk_claim integer,
   '   voucher_id character varying(2),
   '   referrer_provider_number character varying(8),
   '   referral_date date,
   '   referral_duration integer,
   '   pms_claim_id text, -- Medicare Online returns a claim transaction ID, which their documentaiton misleadingly calls the PMS Claim ID
   '   error_level character(1), -- Medicare Online's one-char error level code, A=acceptable, U=aunacceptable, not very useful compared to the error numeric code
   '   claimant_address_upload boolean NOT NULL DEFAULT false, -- true if claimant's address is to be uploaded using Medicare Online
   '   bank_details_upload boolean NOT NULL DEFAULT false, -- true if claimant's bank details are to be uploaded using Medicare Online
   '   CONSTRAINT invoices_pkey PRIMARY KEY (pk),
   '   CONSTRAINT invoices_fk_appointment_fkey FOREIGN KEY (fk_appointment)
   '       REFERENCES clerical.bookings (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_branch_fkey FOREIGN KEY (fk_branch)
   '       REFERENCES contacts.data_branches (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_claim_fkey FOREIGN KEY (fk_claim)
   '       REFERENCES billing.claims (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_doctor_raising_fkey FOREIGN KEY (fk_staff_provided_service)
   '       REFERENCES admin.staff (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_lu_bulk_billing_type_fkey FOREIGN KEY (fk_lu_bulk_billing_type)
   '       REFERENCES billing.lu_bulk_billing_type (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_patient_fkey FOREIGN KEY (fk_patient)
   '       REFERENCES clerical.data_patients (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_payer_branch_fkey FOREIGN KEY (fk_payer_branch)
   '       REFERENCES contacts.data_branches (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_payer_person_fkey FOREIGN KEY (fk_payer_person)
   '       REFERENCES contacts.data_persons (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_staff_invoicing_fkey FOREIGN KEY (fk_staff_invoicing)
   '       REFERENCES admin.staff (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT flags_online CHECK (NOT (NOT online AND (bank_details_upload OR claimant_address_upload))),
   '   CONSTRAINT has_claimant CHECK (NOT (claimant_address_upload AND fk_payer_person IS NULL))
   ' )
   ' WITH (
   '   OIDS=FALSE
   '--------------------------------------------------------------------------------------------------------
   
   Dim item As CRow
   Dim payment As CRow
   Dim payment_method As Collection
   Dim bPaid As Boolean = False
   Dim grid_row As Integer
   Dim total_paid As Float
   Dim invoice_total As Float
   Dim sMsg As String
   Dim referrer As Collection
   Dim date_paid As Date
   Dim latex As String
   
   If VBox_EditArea_Outer.Padding = 0 Then
      If IsNull(invoice) Then Return
      If Not bPrint Then Return
      If IsNull(invoice!latex) And If invoice!online Then
         latex = modBillingDBI.Generate_Online_Latex(invoice!fk_invoice)
      Else
         latex = invoice!latex
      Endif
      If Not IsNull(latex) Then modPrinting.Print_latex(latex)
      Return           'no data change no save
   Endif
   If Not Valid_Invoice_Items() Then Return                 'items invalid no save
   '-----------------------------------------------------
   'Now, work out if being paid, if so ?all, is it valid?
   '-----------------------------------------------------
   If lblPaymentTotal.text <> "" Then
      Message.Title = "Payment of Invoice"
      For grid_row = 0 To gvwPayments.Rows.Max
         If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then            'if have an amount
            If gvwPayments[grid_row, cGridColumnPayments_PaymentMethod].text = "" Then
               gvwPayments.Row = grid_row
               gvwPayments.Column = cGridColumnPayments_PaymentMethod
               Message.Info("Please enter type of payment.\n\n")
               Return
            Endif
            total_paid = total_paid + CFloat(Val(Replace(gvwPayments[grid_row, cGridColumnPayments_Amount].text, "$", "")))
         Else
            If grid_row = 0 Then
               gvwPayments.Row = 0
               gvwPayments.Column = 0
               Message.Info("Please enter amount of payment.\n\n")
               Return
            End If
         End If
      Next
   End If
   '------------------------------------------------------------
   'finally if being paid, does the paid amount match the total?
   '------------------------------------------------------------
   invoice_total = CFloat(Val(Right(lblInvoiceOwing.text, Len(lblInvoiceOwing.text) - InStr(lblInvoiceOwing.text, " $") - 1)))
   If total_paid <> 0 Then
      If total_paid > invoice_total Then
         Message.Info("The amount being paid is greater than the invoice total.")
         Return
      Endif
   End If
   '-----------------------------------------------------------------------------
   'At this point validation finished total_paid 0 or amount <= invoice total
   'Create or edit the invoice
   'If editing (e.g paying) then user will not have been able to change
   'any of the core invoice details, ie date originally invoiced, who invoiced it
   '-----------------------------------------------------------------------------
   If Not IsNull(fk_invoice) Then                                       ' existing invoice
      invoice.put_unchanged(fk_invoice, "fk_invoice")                   ' edit the record
   Else                                                                 ' an edited invoice
      invoice!fk_staff_invoicing = modDBConnect.currentUser!fk_staff    'new - then current user is doing the invoicing
      invoice!date_invoiced = Now() 'was "now()"                        'today 
   End If     
   invoice!notes = cmbInvoiceComments.Text
   invoice!reference = Trim(txtReferenceDetails.text)
   If bBulkBill Then
      If rbInvoiceToMedicare.value = True Then invoice!fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare
      If rbInvoiceToVeterans.value = True Then invoice!fk_lu_bulk_billing_type = const.BulkBilling_Type_Veteran
   Endif
   If rbOnline_Yes.Value Then
      invoice!online = True
      If bBulkBill Then
         invoice!result_code = 4003
      Else
         invoice!result_code = 4005
      Endif
   Else
      invoice!online = False
      If bBulkBill Then
         invoice!result_code = 4002
      Else
         invoice!result_code = 4001
      Endif
   Endif
   If cmbSeenBy.Index <> -1 Then
      invoice!fk_staff_provided_service = staff[cmbSeenBy.index]!fk_staff
   End If
   If Not IsNull(fk_patient) Then invoice!fk_patient = fk_patient     'may not be for a patient
   If Not IsNull(fk_appointment) Then invoice!fk_appointment = fk_appointment
   invoice!fk_branch = clinics[cmbLocation.Index]!fk_branch   'branch at which service was provided
   If Not IsNull(fk_payer_branch) Then invoice!fk_payer_branch = fk_payer_branch
   If Not IsNull(fk_payer_person) Then invoice!fk_payer_person = fk_payer_person
   invoice!visit_date = Val(txtDate.text)
   
   '----------------------------------
   'has the invoice been paid in full?- fix this code
   '----------------------------------
   If invoice_total = total_paid Then
      invoice!paid = True
      bpaid = True
   Else
      bpaid = False
   End If
   If invoice.Exist("fk_patient") Then
      fk_patient = invoice!fk_patient
   Endif
   If IsNull(fk_patient) Or If fk_patient < 1 Then 'fix me ?<1 kosha
      ' referrer has no PN, so leave it all blank
   Else
      referrer = modBillingDBI.Find_Referrer(fk_patient, invoice!visit_date)
      If Not IsNull(referrer) Then
         invoice!referrer_provider_number = referrer!provider_number
         invoice!referral_date = referrer!date_created
         If referrer!indefinite Then
            invoice!referral_duration = 13
         Else
            invoice!referral_duration = referrer!months
         Endif
      Endif
   Endif
   If invoice!online And If Not IsNull(fk_payer_person) And If cbSendClaimantAddress.Value = True Then
      invoice!claimant_address_upload = True
   Endif
   If invoice!online And If Not IsNull(FBankDetails.account_number) And If Not Len(FBankDetails.account_number) < 4 Then
      invoice!bank_details_upload = True
   Endif
   invoice.Save("billing.invoices", "fk_invoice")
   fk_invoice_for_printing = invoice!fk_invoice
   If Not IsNull(invoice!online) And If Not IsNull(FBankDetails.account_number) And If Not Len(FBankDetails.account_number) < 4 Then
      modBillingDBI.Save_Bank_Details(invoice!fk_invoice, FBankDetails.account_name, FBankDetails.bsb, FBankDetails.account_number)
   Endif
   ' never 'remember' bank details across invoices or patients
   FBankDetails.account_name = Null
   FBankDetails.account_number = Null
   FBankDetails.bsb = Null
   '------------------------------------
   'Get the items from the grid and save
   'FIXME - will later keep the underlying grid data in an array of some sort
   'and dispose of some of these backend calls
   '------------------------------------
   Print GridData
   If IsNull(fk_invoice) Then  'FIXME MAY HAVE TO ALLOW EDITING OF THIS
      For grid_row = 0 To gvwItemsBIlled.Rows.count - 1  'fixme check all necessary data is in grids cells
         Print GridData[grid_row]
         If gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text <> "" Then
            item = New CRow
            item!fk_fee_schedule = modBillingDBI.fk_fee_shedule_Get_For_Item_Number(gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text) 'could be compound eg 35/1
            item!amount = gvwItemsBIlled[grid_row, cGridColumnItem_Fee].Text
            item!fk_invoice = invoice!fk_invoice
            item!fk_lu_billing_type = Billing_Type_Get_Pk(gvwItemsBIlled[grid_row, cGridColumnItem_FeeType].Text)
            item!amount_gst = gvwItemsBIlled[grid_row, cGridColumnItem_gst_amount].Text
            item.Save("billing.items_billed", "fk_item_billed")
         End If
      Next
   End If
   '----------------------------------------------------
   'Now, is this invoice being paid? in part or in full?
   '----------------------------------------------------
   If total_paid > 0 Then
      For grid_row = 0 To gvwPayments.Rows.count - 1
         If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then
            payment = New CRow
            payment!fk_invoice = invoice!fk_invoice
            payment!amount = gvwPayments[grid_row, cGridColumnPayments_Amount].Text
            For Each payment_method In Payment_Methods
               If payment_method!method = gvwPayments[grid_row, cGridColumnPayments_PaymentMethod].text Then
                  payment!fk_lu_payment_method = payment_method!pk
                  Break
               Endif
            Next
            'this simple way screwed by ians smart changes.
            '   payment!fk_lu_payment_method = Payment_Methods[gvwPayments[x, cGridColumnPayments_PaymentMethod].text]!fk_lu_payment_method
            sMsg = gvwPayments[grid_row, cGridColumnPayments_Date].Text
            Debug "the date paid string is "; sMsg
            date_paid = modUtil.Make_Date_From_String(smsg)
            Debug "the parsed date is"; date_paid
            payment!date_paid = date_paid
            payment!referent = gvwPayments[grid_row, cGridColumnPayments_Comment].Text
            payment!fk_staff_receipted = modDBConnect.currentUser!fk_staff
            payment.Save("billing.payments_received", "fk_payment")
         End If
      Next
   Endif
   '------------------------------------------
   'finally mark this appointment as invoiced
   'fixme only update  this on first pass
   'fime  misnomer invoice or reciept
   '-----------------------------------------
   If fk_appointment Then
      modDBConnect.update("clerical.bookings", Null, ["pk": fk_appointment, "invoiced": True])
   Endif
   'fixme won't always be printed, but need to always save latex
   invoice!latex = modBillingDBI.Print_Invoice(invoice!fk_invoice, bPrint, bBulkBill, Null, referrer)
   If Not IsNull(invoice!latex) Then
      modDBConnect.update("billing.invoices", Null, ["pk": invoice!fk_invoice, "latex": invoice!latex, "date_printed": "now()"])
   Endif
   fk_invoice = Null
   EditArea_Notify_Data_Change(False)
   If Not bSearchingAccounts Then 
      tbQuickView_Click                              'refreshes the unbilled patients
   Else
      Items_Today_Or_Unpaid_Reload                   'refresh the invoices under the edit area
   End If
   If Not IsNull(patient) Then
      ' Items_Today_Or_Unpaid = Reload_Billed_Items(cvwItemsTodayOrUnpaid, Items_Today_Or_Unpaid)
      '  Items_Today_Or_Unpaid_Reload()      'reload the collection and fill the columnview
   Endif
   Print bSearchingAccounts
   cvwSearchAccounts.UnselectAll
   ' Invoice_New()
   modDBConnect.CommitTrans() ' do this last to prevent new transaction from forming
   
End

Public Sub Items_Today_Or_Unpaid_Reload()
   
   Items_Today_Or_Unpaid = Fill_Columnview(cvwItemsTodayOrUnpaid, modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Items_Invoices_Get(fk_patient, iAccountDisplayMode)))
   
End

Public Sub Save_orig(bBulkBill As Boolean, Optional bPrint As Boolean = True)
   '--------------------------------------------------------------------------------------
   ' Saves a new or edited invoice (if the invoice is unpaid)
   ' Note the Invoice collection Is global to this billing module, so that if an invoice
   ' has been displayed by clicking on an invoice under the editing area, and edited then
   ' all the collection is filled. Only the date_invoiced and staff invoiced is kept when
   ' editing, the rest is added back in
   '--------------------------------------------------------------------------------------
   ' CREATE TABLE billing.invoices
   ' (
   '   pk serial NOT NULL,
   '   fk_staff_invoicing integer NOT NULL, -- the staff member raising the invoice
   '   date_printed timestamp without time zone,
   '   notes text, -- Any additional comments pertaining to the invoice or any of it's...
   '   fk_staff_provided_service integer NOT NULL, -- the staff member who provider the service on which the invoice is based
   '   fk_patient integer,
   '   date_invoiced timestamp without time zone NOT NULL DEFAULT now(),
   '   paid boolean NOT NULL DEFAULT false,
   '   fk_payer_person integer, -- if not null then the key to the person who pays the bill
   '   fk_payer_branch integer, -- if not null then payer is an organisation/branch
   '   latex text, -- the LaTeX definition of the invoice generated
   '   fk_branch integer NOT NULL, -- The branch at which the patient was provided with the service
   '   visit_date date, -- The date time of the patient visit - may be null because the invoice could be raised not in relation to a visit
   '   reference text, -- text of any insurance or bill reference eg 'CLAIM NO:1234'
   '   fk_lu_bulk_billing_type integer, -- if not null then the type of bulk-bill 1=medicare 2=veteran
   '   fk_appointment integer,
   '   total_bill money NOT NULL DEFAULT '$0.00'::money,
   '   total_gst money NOT NULL DEFAULT '$0.00'::money,
   '   total_paid money NOT NULL DEFAULT '$0.00'::money,
   '   online boolean NOT NULL DEFAULT false, -- true if the invoice is to be uploaded via Medicare Online
   '   result_code integer DEFAULT (-1), -- text returned by medicare Online driver, only significant if result_code > 0
   '   result_text text,
   '   fk_claim integer,
   '   voucher_id character varying(2),
   '   referrer_provider_number character varying(8),
   '   referral_date date,
   '   referral_duration integer,
   '   pms_claim_id text, -- Medicare Online returns a claim transaction ID, which their documentaiton misleadingly calls the PMS Claim ID
   '   error_level character(1), -- Medicare Online's one-char error level code, A=acceptable, U=aunacceptable, not very useful compared to the error numeric code
   '   claimant_address_upload boolean NOT NULL DEFAULT false, -- true if claimant's address is to be uploaded using Medicare Online
   '   bank_details_upload boolean NOT NULL DEFAULT false, -- true if claimant's bank details are to be uploaded using Medicare Online
   '   CONSTRAINT invoices_pkey PRIMARY KEY (pk),
   '   CONSTRAINT invoices_fk_appointment_fkey FOREIGN KEY (fk_appointment)
   '       REFERENCES clerical.bookings (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_branch_fkey FOREIGN KEY (fk_branch)
   '       REFERENCES contacts.data_branches (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_claim_fkey FOREIGN KEY (fk_claim)
   '       REFERENCES billing.claims (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_doctor_raising_fkey FOREIGN KEY (fk_staff_provided_service)
   '       REFERENCES admin.staff (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_lu_bulk_billing_type_fkey FOREIGN KEY (fk_lu_bulk_billing_type)
   '       REFERENCES billing.lu_bulk_billing_type (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_patient_fkey FOREIGN KEY (fk_patient)
   '       REFERENCES clerical.data_patients (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_payer_branch_fkey FOREIGN KEY (fk_payer_branch)
   '       REFERENCES contacts.data_branches (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_payer_person_fkey FOREIGN KEY (fk_payer_person)
   '       REFERENCES contacts.data_persons (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT invoices_fk_staff_invoicing_fkey FOREIGN KEY (fk_staff_invoicing)
   '       REFERENCES admin.staff (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT flags_online CHECK (NOT (NOT online AND (bank_details_upload OR claimant_address_upload))),
   '   CONSTRAINT has_claimant CHECK (NOT (claimant_address_upload AND fk_payer_person IS NULL))
   ' )
   ' WITH (
   '   OIDS=FALSE
   '--------------------------------------------------------------------------------------------------------
   
   Dim item As CRow
   Dim payment As CRow
   Dim payment_method As Collection
   Dim bPaid As Boolean = False
   Dim grid_row As Integer
   Dim total_paid As Float
   Dim invoice_total As Float
   Dim sMsg As String
   Dim referrer As Collection
   Dim date_paid As Date
   Dim latex As String
   
   If VBox_EditArea_Outer.Padding = 0 Then
      If IsNull(invoice) Then Return
      If Not bPrint Then Return
      If IsNull(invoice!latex) And If invoice!online Then
         latex = modBillingDBI.Generate_Online_Latex(invoice!fk_invoice)
      Else
         latex = invoice!latex
      Endif
      If Not IsNull(latex) Then modPrinting.Print_latex(latex)
      Return           'no data change no save
   Endif
   If Not Valid_Invoice_Items() Then Return                 'items invalid no save
   '-----------------------------------------------------
   'Now, work out if being paid, if so ?all, is it valid?
   '-----------------------------------------------------
   If lblPaymentTotal.text <> "" Then
      Message.Title = "Payment of Invoice"
      For grid_row = 0 To gvwPayments.Rows.Max
         If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then            'if have an amount
            If gvwPayments[grid_row, cGridColumnPayments_PaymentMethod].text = "" Then
               gvwPayments.Row = grid_row
               gvwPayments.Column = cGridColumnPayments_PaymentMethod
               Message.Info("Please enter type of payment.\n\n")
               Return
            Endif
            total_paid = total_paid + CFloat(Val(Replace(gvwPayments[grid_row, cGridColumnPayments_Amount].text, "$", "")))
         Else
            If grid_row = 0 Then
               gvwPayments.Row = 0
               gvwPayments.Column = 0
               Message.Info("Please enter amount of payment.\n\n")
               Return
            End If
         End If
      Next
   End If
   '------------------------------------------------------------
   'finally if being paid, does the paid amount match the total?
   '------------------------------------------------------------
   invoice_total = CFloat(Val(Right(lblInvoiceOwing.text, Len(lblInvoiceOwing.text) - InStr(lblInvoiceOwing.text, " $") - 1)))
   If total_paid <> 0 Then
      If total_paid > invoice_total Then
         Message.Info("The amount being paid is greater than the invoice total.")
         Return
      Endif
   End If
   '-----------------------------------------------------------------------------
   'At this point validation finished total_paid 0 or amount <= invoice total
   'Create or edit the invoice
   'If editing (e.g paying) then user will not have been able to change
   'any of the core invoice details, ie date originally invoiced, who invoiced it
   '-----------------------------------------------------------------------------
   If Not IsNull(fk_invoice) Then                                       ' existing invoice
      invoice.put_unchanged(fk_invoice, "fk_invoice")                   ' edit the record
   Else                                                                 ' an edited invoice
      invoice!fk_staff_invoicing = modDBConnect.currentUser!fk_staff    'new - then current user is doing the invoicing
      invoice!date_invoiced = Now() 'was "now()"                        'today 
   End If     
   invoice!notes = cmbInvoiceComments.Text
   invoice!reference = Trim(txtReferenceDetails.text)
   If bBulkBill Then
      If rbInvoiceToMedicare.value = True Then invoice!fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare
      If rbInvoiceToVeterans.value = True Then invoice!fk_lu_bulk_billing_type = const.BulkBilling_Type_Veteran
   Endif
   If rbOnline_Yes.Value Then
      invoice!online = True
      If bBulkBill Then
         invoice!result_code = 4003
      Else
         invoice!result_code = 4005
      Endif
   Else
      invoice!online = False
      If bBulkBill Then
         invoice!result_code = 4002
      Else
         invoice!result_code = 4001
      Endif
   Endif
   If cmbSeenBy.Index <> -1 Then
      invoice!fk_staff_provided_service = staff[cmbSeenBy.index]!fk_staff
   End If
   If Not IsNull(fk_patient) Then invoice!fk_patient = fk_patient     'may not be for a patient
   If Not IsNull(fk_appointment) Then invoice!fk_appointment = fk_appointment
   invoice!fk_branch = clinics[cmbLocation.Index]!fk_branch   'branch at which service was provided
   If Not IsNull(fk_payer_branch) Then invoice!fk_payer_branch = fk_payer_branch
   If Not IsNull(fk_payer_person) Then invoice!fk_payer_person = fk_payer_person
   invoice!visit_date = Val(txtDate.text)
   
   '----------------------------------
   'has the invoice been paid in full?- fix this code
   '----------------------------------
   If invoice_total = total_paid Then
      invoice!paid = True
      bpaid = True
   Else
      bpaid = False
   End If
   If invoice.Exist("fk_patient") Then
      fk_patient = invoice!fk_patient
   Endif
   If IsNull(fk_patient) Or If fk_patient < 1 Then 'fix me ?<1 kosha
      ' referrer has no PN, so leave it all blank
   Else
      referrer = modBillingDBI.Find_Referrer(fk_patient, invoice!visit_date)
      If Not IsNull(referrer) Then
         invoice!referrer_provider_number = referrer!provider_number
         invoice!referral_date = referrer!date_created
         If referrer!indefinite Then
            invoice!referral_duration = 13
         Else
            invoice!referral_duration = referrer!months
         Endif
      Endif
   Endif
   If invoice!online And If Not IsNull(fk_payer_person) And If cbSendClaimantAddress.Value = True Then
      invoice!claimant_address_upload = True
   Endif
   If invoice!online And If Not IsNull(FBankDetails.account_number) And If Not Len(FBankDetails.account_number) < 4 Then
      invoice!bank_details_upload = True
   Endif
   invoice.Save("billing.invoices", "fk_invoice")
   fk_invoice_for_printing = invoice!fk_invoice
   If Not IsNull(invoice!online) And If Not IsNull(FBankDetails.account_number) And If Not Len(FBankDetails.account_number) < 4 Then
      modBillingDBI.Save_Bank_Details(invoice!fk_invoice, FBankDetails.account_name, FBankDetails.bsb, FBankDetails.account_number)
   Endif
   ' never 'remember' bank details across invoices or patients
   FBankDetails.account_name = Null
   FBankDetails.account_number = Null
   FBankDetails.bsb = Null
   '------------------------------------
   'Get the items from the grid and save
   'FIXME - will later keep the underlying grid data in an array of some sort
   'and dispose of some of these backend calls
   '------------------------------------
   Print GridData
   If IsNull(fk_invoice) Then  'FIXME MAY HAVE TO ALLOW EDITING OF THIS
      For grid_row = 0 To gvwItemsBIlled.Rows.count - 1  'fixme check all necessary data is in grids cells
         Print GridData[grid_row]
         If gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text <> "" Then
            item = New CRow
            item!fk_fee_schedule = modBillingDBI.fk_fee_shedule_Get_For_Item_Number(gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text) 'could be compound eg 35/1
            item!amount = gvwItemsBIlled[grid_row, cGridColumnItem_Fee].Text
            item!fk_invoice = invoice!fk_invoice
            item!fk_lu_billing_type = Billing_Type_Get_Pk(gvwItemsBIlled[grid_row, cGridColumnItem_FeeType].Text)
            item!amount_gst = gvwItemsBIlled[grid_row, cGridColumnItem_gst_amount].Text
            item.Save("billing.items_billed", "fk_item_billed")
         End If
      Next
   End If
   '----------------------------------------------------
   'Now, is this invoice being paid? in part or in full?
   '----------------------------------------------------
   If total_paid > 0 Then
      For grid_row = 0 To gvwPayments.Rows.count - 1
         If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then
            payment = New CRow
            payment!fk_invoice = invoice!fk_invoice
            payment!amount = gvwPayments[grid_row, cGridColumnPayments_Amount].Text
            For Each payment_method In Payment_Methods
               If payment_method!method = gvwPayments[grid_row, cGridColumnPayments_PaymentMethod].text Then
                  payment!fk_lu_payment_method = payment_method!pk
                  Break
               Endif
            Next
            'this simple way screwed by ians smart changes.
            '   payment!fk_lu_payment_method = Payment_Methods[gvwPayments[x, cGridColumnPayments_PaymentMethod].text]!fk_lu_payment_method
            sMsg = gvwPayments[grid_row, cGridColumnPayments_Date].Text
            Debug "the date paid string is "; sMsg
            date_paid = modUtil.Make_Date_From_String(smsg)
            Debug "the parsed date is"; date_paid
            payment!date_paid = date_paid
            payment!referent = gvwPayments[grid_row, cGridColumnPayments_Comment].Text
            payment!fk_staff_receipted = modDBConnect.currentUser!fk_staff
            payment.Save("billing.payments_received", "fk_payment")
         End If
      Next
   Endif
   '------------------------------------------
   'finally mark this appointment as invoiced
   'fixme only update  this on first pass
   'fime  misnomer invoice or reciept
   '-----------------------------------------
   If fk_appointment Then
      modDBConnect.update("clerical.bookings", Null, ["pk": fk_appointment, "invoiced": True])
   Endif
   'fixme won't always be printed, but need to always save latex
   invoice!latex = modBillingDBI.Print_Invoice(invoice!fk_invoice, bPrint, bBulkBill, Null, referrer)
   If Not IsNull(invoice!latex) Then
      modDBConnect.update("billing.invoices", Null, ["pk": invoice!fk_invoice, "latex": invoice!latex, "date_printed": "now()"])
   Endif
   fk_invoice = Null
   EditArea_Notify_Data_Change(False)
   If Not bSearchingAccounts Then 
      tbQuickView_Click
   End If
   If Not IsNull(patient) Then
      ' cvwItemsTodayOrUnpaid_Refresh()
   Endif
   Invoice_New()
   modDBConnect.CommitTrans() ' do this last to prevent new transaction from forming
   
End

Public Sub Billing_Type_Get_Pk(txt As String) As Variant
   
   Dim type As Collection
   
   For Each type In FeeTypes
      If type!type = txt Then
         Return type!pk
      Endif
   Next
   
End

Public Sub Form_Show()
   
   Try Resize_Grids()
   
End

Public Sub Form_Resize()
   
   Try Resize_Grids()
   gvwItemsBilled_MoveProperty
   
End
'

Public Sub HSplit_Main_Resize()
   
   Select Case TabStrip1.Index
      Case cTab_Invoices_Receipts
         Try Resize_Grids
   End Select
   
   bHSplit_Resized = True
   Settings["FRecordVisit/Tabstrip1_" & Str(TabStrip1.index) & ".HSplit_Main.Layout"] = Hsplit_Main.Layout
   
End

Public Sub gvwFeeScheduleItems_FillGrid()
   
   Dim FeeItem As Collection
   Dim num_patients As String = ""
   Dim x As Integer
   
   For Each FeeItem In ScheduledFeeItems
      num_patients = ""
      If FeeItem!percentage_fee_rule Then
         num_patients = "/" & Str(FeeItem!number_of_patients)
      Endif
      Inc gvwFeeScheduleItems.rows.count
      gvwFeeScheduleItems.row = x
      gvwFeeScheduleItems[gvwFeeScheduleItems.row, 0].text = Trim(FeeItem!mbs_item & " " & FeeItem!ama_item & " " & FeeItem!user_item) & num_patients
      gvwFeeScheduleItems[gvwFeeScheduleItems.row, 1].text = FeeItem!descriptor_brief
      gvwFeeScheduleItems[gvwFeeScheduleItems.row, 1].WordWrap = True
      gvwFeeScheduleItems.Rows[gvwFeeScheduleItems.row].Height = -1
      Inc x
   Next
   
End

Public Sub Resize_Grids()
   
   With gvwItemsBIlled
      .Columns[0].width = 60
      .Columns[1].width = gvwItemsBIlled.width - 470
      .Columns[2].width = 60
      .Columns[3].width = 60
      .Columns[4].width = 200
      .Columns[5].width = 60
      lblmeasure.text = "Invoice Total "
      lblPaymentLeft.width = gvwItemsBIlled.Columns[0].width + gvwItemsBIlled.Columns[1].width - lblmeasure.width
      lblPaymentTotal.width = lblmeasure.width + gvwItemsBIlled.Columns[3].width
      lblInvoiceOwing.width = lblPaymentTotal.Width
      lblInvoiceLeft.width = lblPaymentLeft.Width
      lblInvoiceRight.width = lblPaymentRight.Width
      With lblcol1
         .width = gvwItemsBIlled.Columns[0].Width
         .text = "Item"
      End With
      With lblcol2
         .width = gvwItemsBIlled.Columns[1].Width
         .text = "Brief Descriptor"
      End With
      With lblcol3
         .width = gvwItemsBIlled.Columns[2].Width
         .text = "Fee"
      End With
      With lblcol4
         .width = gvwItemsBIlled.Columns[3].Width
         .text = "Gap"
      End With
      With lblcol5
         .width = gvwItemsBIlled.Columns[4].Width
         .text = "Rate"
      End With
      With lblcol6
         .width = gvwItemsBIlled.Columns[5].Width
         .text = "GST"
      End With
   End With
   
End

Public Sub Appointment_icons_Get_Picture(Appointment_Icons As Collection) As Collection
   '-----------------------------------------------------------------------------------------
   'Loads the actual picture of the appointment icon into the collection got from the backend
   '-----------------------------------------------------------------------------------------
   
   Dim Appointment_icon As Collection
   
   For Each Appointment_Icon In Appointment_Icons
      Appointment_Icon!picture = Picture.Load(Appointment_Icon!icon_path)
   Next
   Return Appointment_Icons
   
End

Public Sub Descriptors_Brief_Get()
   
   If Trim(textbox1.text) = "" Then Return
   timer1.Stop
   With columnview1
      .Clear
      .Visible = False
   End With
   Descriptors_Brief = modBillingDBI.Descriptors_Brief_Get(Trim(textbox1.text))
   If Descriptors_Brief.count Then
      For Each Descriptor_Brief In Descriptors_Brief
         columnview1.Add(Descriptor_Brief!pk, 0)
         columnview1[Descriptor_Brief!pk][0] = Descriptor_Brief!mbs_item
         columnview1[Descriptor_Brief!pk][1] = Descriptor_Brief!descriptor_brief
      Next
      With columnview1
         .Raise
         .Visible = True
      End With
   End If
   
End

Public Sub Patients_Get()
   '-------------------------------------------------------------------
   'Get patients ILIKE txtSearchInvoices
   'Note as this returns multiple lines if there are multiple addresses
   'keep only one instance of the patient
   '-------------------------------------------------------------------
   
   Dim last_fk_patient As Variant
   
   If Trim(txtSearchInvoices.text) = "" Then Return
   Inc Application.Busy
   timer1.Stop
   cvwSearchAccounts.Clear
   patients = modContactsDBI.patients_get_firstname_surname(Trim(txtSearchInvoices.text), True) 'include decesased (could be looking at old accounts)
   patients.Remove("sql_in_english")
   If patients.count Then
      For Each patient In patients
         If last_fk_patient <> patient!fk_patient Then
            cvwSearchAccounts.Add(patient!pk_view, 0)
            cvwSearchAccounts[patient!pk_view][0] = patient!wholename
            cvwSearchAccounts[patient!pk_view][1] = Format(patient!birthdate, "dd/mm/yyyy")
            cvwSearchAccounts[patient!pk_view][2] = patient!street1 & " " & patient!town & " " & patient!postcode  
            last_fk_patient = patient!fk_patient
         End If
      Next
      If patients.count = 1 Then
         sPatient_Collection_Key = patient!pk_view
         EditArea_Clear()
         Account_Patient_Display(True)
         txtSearchInvoices_LostFocus()
      Endif
   Endif
   Dec Application.Busy
   
End

Public Sub Get_Items(txt As String)
   'developmental prototype only doesn't just get items.
   'A patient may have a default 'billing_level' eg. private or health care concession
   ' "1";"Bulk Bill"
   ' "2";"Private"
   ' "3";"Health Care Card Concession"
   ' "4";"Pensioner Concession"
   ' "5";"Medico-Legal"
   'however these billing_levels are not the same as the concept of billing_types in the backend
   ' "1";"AMA Fee"
   ' "2";"DVA (Non LMO rate)"
   ' "3";"DVA (LMO rate)"
   ' "4";"Health Care Card Concession"
   ' "5";"Pensioner Concession"
   ' "6";"Private Fee"
   ' "7";"TAC (Transport Accident Commission)"
   ' "8";"Schedule Fee"
   ' For example a patient may be bulk billed as either medicare or veteran (for some things) or both
   ' or a practice may bill privately at the AMA rate, or pripatientsvately at a concession rate
   
   Dim fk_lu_billing_type As Variant
   Dim bMissingBriefDescriptor As Boolean
   Dim billing_type As String
   Dim price As Variant
   Dim AreaOfNeed_Item As Collection
   Dim patient_age_in_years As Integer
   Dim sMsg As String
   Dim bEntitledVeteran As Boolean
   
   If textbox1.text = "" Then Return 'no item number to search for
   txtDescriptor.text = ""
   bExit = True
   If Not IsNull(form_billingcards.Veteran_Card_Type()) Then     'they must be an entitled veteran in some capacity
      bEntitledVeteran = True
      If form_billingcards.Veteran_Card_Type() = const.Veteran_Entitlement_Specific Then
         sMsg = "The Veteran is listed for specific entitlements only.\n\n"
         "Was the consultation for one of their listed entitlements?"
         If Message.Question(sMsg, "Yes", "No") = 2 Then
            bEntitledVeteran = False
            rbInvoiceToPatient.Value = True
            fk_lu_default_billing_level = const.Billing_Default_Level_Private
         End If
      Endif
   Endif
   If rbInvoiceToMedicare.Value = True Or rbInvoiceToVeterans.value = True Then
      fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill
   Endif
   Select Case fk_lu_default_billing_level
      Case const.Billing_Default_Level_BulkBill
         If rbInvoiceToVeterans.Value = True Then
            fk_lu_billing_type = const.Billingtype_DVA_LM0    'fixme in config file put in dvo lmo or non lmo rate
            billing_type = "DVA (LMO rate)"
         Else
            fk_lu_billing_type = const.Billingtype_Scheduled_Fee
            billing_type = "Schedule Fee"
         End If
      Case const.Billing_Default_Level_PensionerConcession
         fk_lu_billing_type = const.Billingtype_Pensioner_Concession
         billing_type = "Pensioner Concession"
      Case const.Billing_Default_Level_HealthCareCardConcession
         fk_lu_billing_type = const.Billingtype_Health_Care_Card_Concession
         billing_type = "Health Care Card Concession"
      Case const.Billing_Default_Level_Private
         fk_lu_billing_type = const.Billingtype_Private
         billing_type = "Private Fee"
      Case const.Billing_Default_Level_MedicoLegal
         fk_lu_billing_type = const.Billingtype_AMA
         billing_type = "AMA"
      Case Else 'is null
         fk_lu_billing_type = const.Billingtype_Private                         'default to private billing
         billing_type = "Private Fee"
   End Select
   txt = Trim(txt)
   Scheduled_Fee = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(txt, const.Billingtype_Scheduled_Fee)
   Items = modBillingDBI.Fees_Get_All_Levels_For_Item(txt) ', fk_lu_billing_type)
   If items.count = 0 Then
      ' if fail and we have a non-patient payer - try workcover
      If textlabelPayer.text <> "" Then
         Items = modBillingDBI.Items_Get(txt, const.Billingtype_Workcover)
      Else
         items = modBillingDBI.Items_Get(txt, const.Billingtype_Scheduled_Fee) ' try schedule fee
         If items.count = 0 Then
            items = modBillingDBI.Items_Get(txt, const.Billingtype_Private) ' try private
            If items.count = 0 Then
               items = modBillingDBI.Items_Get(txt, -1, 1) ' if all else fails, look for any billing level
            Endif
         Endif
      Endif
   End If
   If items.count = 0 Then
      Message.title = "Fee Search"
      sMsg = "Item:" & txt & "\n\n"
      sMsg &= "The item number could not be found.\n\n"
      sMsg &= "Please check this in the Fee Schedule and try again"
      Message.Info(sMsg)
      ' gvwItemsBilled_Delete_Row()
      gvwItemsBIlled[gvwItemsBIlled.row, 0].text = ""
      cell_text = ""
      bExit = False
      item = Null
      Return
   Endif
   GridData.Add(items, gvwItemsBIlled.row) 'keep all feel levels for the item on this row
   ' For Each item In items 'get the first item returned, don't care about others
   item = items[fk_lu_billing_type]
   If IsNull(item) Then Try item = items[6]  'private workcover
   If IsNull(item!descriptor_brief) Then 
      bMissingBriefDescriptor = True
   Endif
   price = Replace(item!price, "$", "")
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_BriefDescriptor].Text = item!descriptor_brief
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].Text = item!price
   If fk_lu_billing_type <> const.Billingtype_DVA_LM0 Or fk_lu_billing_type <> const.Billingtype_Scheduled_Fee Then    
      Try gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = modUtil.Money_Format(Str(CFloat(Val(Replace(item!price, "$", ""))) - CFloat(Val(Replace(Scheduled_Fee!price, "$", "")))))
   Else 
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = "$0.00"
   End If   
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].text = item!fee_type
   last_Fee_type = item!fee_type
   If Not IsNull(item!gst_rate) And item!gst_rate <> 0 Then 'FIX ME ?CONVERT BACKEND TO NULL IN THIS FIELD NOT ZERO.
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_gst_amount].Text = modUtil.Money_Format(modUtil.MoneyToFloat(price) / item!gst_rate)
   Endif
   
   ' Break
   ' Next
   bExit = False
   '-------------------------------------------------------------------------------------------------------
   'If the practice is in an area of need it attracts the 10091 item number
   'Need to work out if patient is a veteran and entitled
   'Also a child <16yrs could be being bulk billed whose parents are not covered by health cards or pension
   '-------------------------------------------------------------------------------------------------------
   If bAreaOfNeed Then
      If fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill And item!mbs_item <> "10991" Then
         'if child <12 months eg e.g 4m20d hence defaults to patient_age_in_years = 0
         If txtAge.text <> "" And InStr(txtAge.text, "y") Then patient_age_in_years = Val(Split(txtAge.text, "y")[0])
         If bEntitledVeteran Or patient_age_in_years < 16 Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Health_Care_Card Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Pensioner_concession_card Then
            AreaOfNeed_Item = Area_of_Need_Fees[fk_lu_billing_type]
            If Not IsNull(AreaOfNeed_Item) Then
               onrow_items = Min(gvwItemsBIlled.row + 1, 3)
               price = Replace(AreaOfNeed_Item!price, "$", "")
               gvwItemsBIlled.row = onrow_items
               gvwItemsBIlled_FillRow(price, AreaOfNeed_Item)
            Endif
         End If
      Endif
   Endif
   Invoice_Calculate_Total("Total Owing")
   EditArea_Notify_Data_Change(True)
   OnCol_Items = 0
   onrow_items = Min(onrow_items + 1, 3)
   With gvwItemsBIlled
      .Column = OnCol_Items
      .Row = onrow_items
      .SetFocus()
   End With
   current_gvwItemsBilled_Row = onrow_items
   HBox_InvoiceGrid.height = (gvwItemsBIlled.rows.count + 3) * gvwItemsBIlled.rows[0].height
   bExit = False
   
End

Public Sub Get_Items_old(txt As String)
   'developmental prototype only doesn't just get items.
   'A patient may have a default 'billing_level' eg. private or health care concession
   ' "1";"Bulk Bill"
   ' "2";"Private"
   ' "3";"Health Care Card Concession"
   ' "4";"Pensioner Concession"
   ' "5";"Medico-Legal"
   'however these billing_levels are not the same as the concept of billing_types in the backend
   ' "1";"AMA Fee"
   ' "2";"DVA (Non LMO rate)"
   ' "3";"DVA (LMO rate)"
   ' "4";"Health Care Card Concession"
   ' "5";"Pensioner Concession"
   ' "6";"Private Fee"
   ' "7";"TAC (Transport Accident Commission)"
   ' "8";"Schedule Fee"
   ' For example a patient may be bulk billed as either medicare or veteran (for some things) or both
   ' or a practice may bill privately at the AMA rate, or pripatientsvately at a concession rate
   
   Dim fk_lu_billing_type As Variant
   Dim bMissingBriefDescriptor As Boolean
   Dim billing_type As String
   Dim price As Variant
   Dim AreaOfNeed_Item As Collection
   Dim patient_age_in_years As Integer
   Dim sMsg As String
   Dim bEntitledVeteran As Boolean
   
   If textbox1.text = "" Then Return 'no item number to search for
   txtDescriptor.text = ""
   bExit = True
   If Not IsNull(form_billingcards.Veteran_Card_Type()) Then     'they must be an entitled veteran in some capacity
      bEntitledVeteran = True
      If form_billingcards.Veteran_Card_Type() = const.Veteran_Entitlement_Specific Then
         sMsg = "The Veteran is listed for specific entitlements only.\n\n"
         "Was the consultation for one of their listed entitlements?"
         If Message.Question(sMsg, "Yes", "No") = 2 Then
            bEntitledVeteran = False
            rbInvoiceToPatient.Value = True
            fk_lu_default_billing_level = const.Billing_Default_Level_Private
         End If
      Endif
   Endif
   If rbInvoiceToMedicare.Value = True Or rbInvoiceToVeterans.value = True Then
      fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill
   Endif
   Select Case fk_lu_default_billing_level
      Case const.Billing_Default_Level_BulkBill
         If rbInvoiceToVeterans.Value = True Then
            fk_lu_billing_type = const.Billingtype_DVA_LM0    'fixme in config file put in dvo lmo or non lmo rate
            billing_type = "DVA (LMO rate)"
         Else
            fk_lu_billing_type = const.Billingtype_Scheduled_Fee
            billing_type = "Schedule Fee"
         End If
      Case const.Billing_Default_Level_PensionerConcession
         fk_lu_billing_type = const.Billingtype_Pensioner_Concession
         billing_type = "Pensioner Concession"
      Case const.Billing_Default_Level_HealthCareCardConcession
         fk_lu_billing_type = const.Billingtype_Health_Care_Card_Concession
         billing_type = "Health Care Card Concession"
      Case const.Billing_Default_Level_Private
         fk_lu_billing_type = const.Billingtype_Private
         billing_type = "Private Fee"
      Case const.Billing_Default_Level_MedicoLegal
         fk_lu_billing_type = const.Billingtype_AMA
         billing_type = "AMA"
      Case Else 'is null
         fk_lu_billing_type = const.Billingtype_Private                         'default to private billing
         billing_type = "Private Fee"
   End Select
   txt = Trim(txt)
   Scheduled_Fee = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(txt, const.Billingtype_Scheduled_Fee)
   Items = modBillingDBI.Items_Get(txt, fk_lu_billing_type)
   If items.count = 0 Then
      ' if fail and we have a non-patient payer - try workcover
      If textlabelPayer.text <> "" Then
         Items = modBillingDBI.Items_Get(txt, const.Billingtype_Workcover)
      Else
         items = modBillingDBI.Items_Get(txt, const.Billingtype_Scheduled_Fee) ' try schedule fee
         If items.count = 0 Then
            items = modBillingDBI.Items_Get(txt, const.Billingtype_Private) ' try private
            If items.count = 0 Then
               items = modBillingDBI.Items_Get(txt, -1, 1) ' if all else fails, look for any billing level
            Endif
         Endif
      Endif
   End If
   If items.count = 0 Then
      Message.title = "Fee Search"
      sMsg = "Item:" & txt & "\n\n"
      sMsg &= "The item number could not be found.\n\n"
      sMsg &= "Please check this in the Fee Schedule and try again"
      Message.Info(sMsg)
      ' gvwItemsBilled_Delete_Row()
      gvwItemsBIlled[gvwItemsBIlled.row, 0].text = ""
      cell_text = ""
      bExit = False
      item = Null
      Return
   Endif
   For Each item In items 'get the first item returned, don't care about others
      If IsNull(item!descriptor_brief) Then
         bMissingBriefDescriptor = True
      Endif
      price = Replace(item!price, "$", "")
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_BriefDescriptor].Text = item!descriptor_brief
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].Text = item!price
      If fk_lu_billing_type <> const.Billingtype_DVA_LM0 Or fk_lu_billing_type <> const.Billingtype_Scheduled_Fee Then    
         Try gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = modUtil.Money_Format(Str(CFloat(Val(Replace(item!price, "$", ""))) - CFloat(Val(Replace(Scheduled_Fee!price, "$", "")))))
      Else 
         gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = "$0.00"
      End If   
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].text = item!fee_type
      last_Fee_type = item!fee_type
      If Not IsNull(item!gst_rate) And item!gst_rate <> 0 Then 'FIX ME ?CONVERT BACKEND TO NULL IN THIS FIELD NOT ZERO.
         gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_gst_amount].Text = modUtil.Money_Format(modUtil.MoneyToFloat(price) / item!gst_rate)
      Endif
      
      Break
   Next
   bExit = False
   '-------------------------------------------------------------------------------------------------------
   'If the practice is in an area of need it attracts the 10091 item number
   'Need to work out if patient is a veteran and entitled
   'Also a child <16yrs could be being bulk billed whose parents are not covered by health cards or pension
   '-------------------------------------------------------------------------------------------------------
   If bAreaOfNeed Then
      If fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill And item!mbs_item <> "10991" Then
         'if child <12 months eg e.g 4m20d hence defaults to patient_age_in_years = 0
         If txtAge.text <> "" And InStr(txtAge.text, "y") Then patient_age_in_years = Val(Split(txtAge.text, "y")[0])
         If bEntitledVeteran Or patient_age_in_years < 16 Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Health_Care_Card Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Pensioner_concession_card Then
            ' AreaOfNeed_Item = modBillingDBI.Area_Of_Need_Fee("10991", fk_lu_billing_type)
            If Not IsNull(AreaOfNeed_Item) Then
               onrow_items = Min(gvwItemsBIlled.row + 1, 3)
               price = Replace(AreaOfNeed_Item!price, "$", "")
               gvwItemsBIlled.row = onrow_items
               gvwItemsBIlled_FillRow(price, AreaOfNeed_Item)
            Endif
         End If
      Endif
   Endif
   Invoice_Calculate_Total("Total Owing")
   EditArea_Notify_Data_Change(True)
   OnCol_Items = 0
   onrow_items = Min(onrow_items + 1, 3)
   With gvwItemsBIlled
      .Column = OnCol_Items
      .Row = onrow_items
      .SetFocus()
   End With
   current_gvwItemsBilled_Row = onrow_items
   HBox_InvoiceGrid.height = (gvwItemsBIlled.rows.count + 3) * gvwItemsBIlled.rows[0].height
   bExit = False
   
End

Public Sub Get_Items_oldest(txt As String)
   'developmental prototype only doesn't just get items.
   'A patient may have a default 'billing_level' eg. private or health care concession
   ' "1";"Bulk Bill"
   ' "2";"Private"
   ' "3";"Health Care Card Concession"
   ' "4";"Pensioner Concession"
   ' "5";"Medico-Legal"
   'however these billing_levels are not the same as the concept of billing_types in the backend
   ' "1";"AMA Fee"
   ' "2";"DVA (Non LMO rate)"
   ' "3";"DVA (LMO rate)"
   ' "4";"Health Care Card Concession"
   ' "5";"Pensioner Concession"
   ' "6";"Private Fee"
   ' "7";"TAC (Transport Accident Commission)"
   ' "8";"Schedule Fee"
   ' For example a patient may be bulk billed as either medicare or veteran (for some things) or both
   ' or a practice may bill privately at the AMA rate, or pripatientsvately at a concession rate
   
   Dim fk_lu_billing_type As Variant
   Dim bMissingBriefDescriptor As Boolean
   Dim billing_type As String
   Dim price As Variant
   Dim AreaOfNeed_Item As Collection
   Dim patient_age_in_years As Integer
   Dim sMsg As String
   Dim bEntitledVeteran As Boolean
   
   If textbox1.text = "" Then Return 'no item number to search for
   txtDescriptor.text = ""
   bExit = True
   If Not IsNull(form_billingcards.Veteran_Card_Type()) Then     'they must be an entitled veteran in some capacity
      bEntitledVeteran = True
      If form_billingcards.Veteran_Card_Type() = const.Veteran_Entitlement_Specific Then
         sMsg = "The Veteran is listed for specific entitlements only.\n\n"
         "Was the consultation for one of their listed entitlements?"
         If Message.Question(sMsg, "Yes", "No") = 2 Then
            bEntitledVeteran = False
            rbInvoiceToPatient.Value = True
            fk_lu_default_billing_level = const.Billing_Default_Level_Private
         End If
      Endif
   Endif
   If rbInvoiceToMedicare.Value = True Or rbInvoiceToVeterans.value = True Then
      fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill
   Endif
   Select Case fk_lu_default_billing_level
      Case const.Billing_Default_Level_BulkBill
         If rbInvoiceToVeterans.Value = True Then
            fk_lu_billing_type = const.Billingtype_DVA_LM0    'fixme in config file put in dvo lmo or non lmo rate
            billing_type = "DVA (LMO rate)"
         Else
            fk_lu_billing_type = const.Billingtype_Scheduled_Fee
            billing_type = "Schedule Fee"
         End If
      Case const.Billing_Default_Level_PensionerConcession
         fk_lu_billing_type = const.Billingtype_Pensioner_Concession
         billing_type = "Pensioner Concession"
      Case const.Billing_Default_Level_HealthCareCardConcession
         fk_lu_billing_type = const.Billingtype_Health_Care_Card_Concession
         billing_type = "Health Care Card Concession"
      Case const.Billing_Default_Level_Private
         fk_lu_billing_type = const.Billingtype_Private
         billing_type = "Private Fee"
      Case const.Billing_Default_Level_MedicoLegal
         fk_lu_billing_type = const.Billingtype_AMA
         billing_type = "AMA"
      Case Else 'is null
         fk_lu_billing_type = const.Billingtype_Private                         'default to private billing
         billing_type = "Private Fee"
   End Select
   txt = Trim(txt)
   Scheduled_Fee = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(txt, const.Billingtype_Scheduled_Fee)
   Items = modBillingDBI.Items_Get(txt, fk_lu_billing_type)
   If items.count = 0 Then
      ' if fail and we have a non-patient payer - try workcover
      If textlabelPayer.text <> "" Then
         Items = modBillingDBI.Items_Get(txt, const.Billingtype_Workcover)
      Else
         items = modBillingDBI.Items_Get(txt, const.Billingtype_Scheduled_Fee) ' try schedule fee
         If items.count = 0 Then
            items = modBillingDBI.Items_Get(txt, const.Billingtype_Private) ' try private
            If items.count = 0 Then
               items = modBillingDBI.Items_Get(txt, -1, 1) ' if all else fails, look for any billing level
            Endif
         Endif
      Endif
   End If
   If items.count = 0 Then
      Message.title = "Fee Search"
      sMsg = "Item:" & txt & "\n\n"
      sMsg &= "The item number could not be found.\n\n"
      sMsg &= "Please check this in the Fee Schedule and try again"
      Message.Info(sMsg)
      ' gvwItemsBilled_Delete_Row()
      gvwItemsBIlled[gvwItemsBIlled.row, 0].text = ""
      cell_text = ""
      bExit = False
      item = Null
      Return
   Endif
   For Each item In items 'get the first item returned, don't care about others
      If IsNull(item!descriptor_brief) Then
         bMissingBriefDescriptor = True
      Endif
      price = Replace(item!price, "$", "")
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_BriefDescriptor].Text = item!descriptor_brief
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].Text = item!price
      Try gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = modUtil.Money_Format(Str(CFloat(Val(Replace(item!price, "$", ""))) - CFloat(Val(Replace(Scheduled_Fee!price, "$", "")))))
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].text = item!fee_type
      last_Fee_type = item!fee_type
      If Not IsNull(item!gst_rate) And item!gst_rate <> 0 Then 'FIX ME ?CONVERT BACKEND TO NULL IN THIS FIELD NOT ZERO.
         gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_gst_amount].Text = modUtil.Money_Format(modUtil.MoneyToFloat(price) / item!gst_rate)
      Endif
      Break
   Next
   bExit = False
   '-------------------------------------------------------------------------------------------------------
   'If the practice is in an area of need it attracts the 10091 item number
   'Need to work out if patient is a veteran and entitled
   'Also a child <16yrs could be being bulk billed whose parents are not covered by health cards or pension
   '-------------------------------------------------------------------------------------------------------
   If bAreaOfNeed Then
      If fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill And item!mbs_item <> "10991" Then
         'if child <12 months eg e.g 4m20d hence defaults to patient_age_in_years = 0
         If txtAge.text <> "" And InStr(txtAge.text, "y") Then patient_age_in_years = Val(Split(txtAge.text, "y")[0])
         If bEntitledVeteran Or patient_age_in_years < 16 Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Health_Care_Card Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Pensioner_concession_card Then
            'AreaOfNeed_Item = modBillingDBI.Area_Of_Need_Fee("10991", fk_lu_billing_type)
            If Not IsNull(AreaOfNeed_Item) Then
               onrow_items = Min(gvwItemsBIlled.row + 1, 3)
               price = Replace(AreaOfNeed_Item!price, "$", "")
               gvwItemsBIlled.row = onrow_items
               gvwItemsBIlled_FillRow(price, AreaOfNeed_Item)
            Endif
         End If
      Endif
   Endif
   Invoice_Calculate_Total("Total Owing")
   EditArea_Notify_Data_Change(True)
   OnCol_Items = 0
   onrow_items = Min(onrow_items + 1, 3)
   With gvwItemsBIlled
      .Column = OnCol_Items
      .Row = onrow_items
      .SetFocus()
   End With
   HBox_InvoiceGrid.height = (gvwItemsBIlled.rows.count + 3) * gvwItemsBIlled.rows[0].height
   bExit = False
   
End

Public Sub gvwItemsBIlled_Add_Row()
   '--------------------------------------------------------
   'Add a row to the items billed grid
   'force the main split to enlarge so user can see all rows
   '--------------------------------------------------------
   
   Inc gvwItemsBIlled.Rows.count
   gvwItemsBIlled.row = gvwItemsBIlled.Rows.Max
   current_gvwItemsBilled_Row = gvwItemsBIlled.row
   HBox_InvoiceGrid.height = (gvwItemsBIlled.rows.count + 3) * gvwItemsBIlled.rows[0].height
   Vsplit_Main.layout = [Vsplit_Main.layout[0] + 20, VSplit_Main.layout[1] - 20]
   
End

Public Sub gvwItemsBIlled_FillRow(price As Float, item As Collection)
   '-------------------------------------------
   'Adds a row of data to the items billed grid
   '-------------------------------------------
   
   price = Replace(item!price, "$", "")
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].Text = item!mbs_item
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_BriefDescriptor].Text = item!descriptor_brief
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].Text = item!price
   If item!mbs_item <> "10991" Then
      Try gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = modUtil.Money_Format(Str(CFloat(Val(Replace(item!price, "$", ""))) - CFloat(Val(Replace(Scheduled_Fee!price, "$", "")))))
   Else
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = "$0.00"
   End If
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].text = item!fee_type
   last_Fee_type = item!fee_type
   If Not IsNull(item!gst_rate) And item!gst_rate <> 0 Then 'FIX ME ?CONVERT BACKEND TO NULL IN THIS FIELD NOT ZERO.
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_gst_amount].Text = modUtil.Money_Format(price / item!gst_rate)
   Endif
   
End

Public Sub columnview1_KeyPress()
   
   If key.code = key.return Then
      columnview1_DblClick
   End If
   
End

Public Sub columnview1_DblClick()
   
   columnview1.MoveCurrent()
   If Last.tag = "payer org" Then
      Organisation_Select()
      Return
   Endif
   If Last.tag = "payer person" Then
      Payer_Person_Select()
      Return
   Endif
   
   If Last.tag.tag = "something" Then
      
      Descriptor_Brief = Descriptors_Brief[columnview1.Item.key]
      If Not IsNull(Descriptor_Brief!mbs_item) Then
         gvwItemsBIlled[onrow_items, 0].text = Descriptor_Brief!mbs_item 'double done in get_items, prototype only fixme
      End If
      If Not IsNull(Descriptor_Brief!ama_item) Then
         gvwItemsBIlled[onrow_items, 0].text = Descriptor_Brief!ama_item
      End If
      If Not IsNull(Descriptor_Brief!user_item) Then
         gvwItemsBIlled[onrow_items, 0].text = Descriptor_Brief!user_item
      End If
      Get_Items(gvwItemsBIlled[onrow_items, 0].text) 'duplication in a way 'see note in subroutine
      textbox1.Visible = False
      gvwItemsBIlled.SetFocus()
   Endif
   
End

Public Sub mnuPayments_Click()
   '----------------------------------------------------------------
   'This is the popup menu over the gvwpayments in the editing area
   '---------------------------------------------------------------
   
   Select Case Last.tag
      Case "add payment"
         gvwPayments_Add_Row
      Case "delete payment"
         gvwPayments_Delete_Row
      Case "delete all payments"
         gvwPayments.Clear
   End Select
Catch
   Return
   
End

Public Sub mnuItemsBilled_Click()
   '------------------------------------------------------------------
   'This is the popup menu over the gvwItemsBilled in the editing area
   '------------------------------------------------------------------
   
   Select Case Last.tag
      Case "delete item"
         gvwItemsBilled_Delete_Row()
      Case "delete all items"
         gvwItemsBIlled_Clear()
      Case "add item"
         Print Last_Billing_Row_Used()
         If Last_Billing_Row_Used() >= 3 Then
            gvwItemsBIlled_Add_Row
         End If   
      Case "medicare"
         
   End Select
Catch
   Return
   
End

Public Sub mnuFeeSchedule_Click()
   
   Select Case Last.tag
      Case "change font"
         modUtilGUI.Columnview_SetFont(columnview99, "FRecordVisit_Billing_FeeSchedule")
      Case "edit item number"
         Fee_Schedule_Edit
      Case "delete item number"
         modUtilGUI.NotImplemented("Deleting an existing item number")
   End Select
Catch
   Return
   
End

Public Sub mnuInvoices_Click()
   '--------------------------------------------------------------------------------------
   'this is the popup menu over the the invoices for the account holder, usually a patient
   '--------------------------------------------------------------------------------------
   
   Dim item_billed As Collection
   Dim latex As String
   Dim form_sdd As FSameDayDelete
   
   cvwItemsTodayOrUnpaid.MoveCurrent()
   Item_Billed = Items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]
   Select Case Last.tag
      Case "edit"
         lblEditAreaHeading.text = "EDIT INVOICE"
         VBox_EditArea_Inner.Enabled = True
      Case "invoice delete"
         modBillingDBI.Delete_Invoice(Item_Billed!fk_invoice)
         If item_billed!online And If Day(item_billed!date_invoiced) = Day(Now()) And If Month(item_billed!date_invoiced) = Month(Now()) And If Year(item_billed!date_invoiced) = Year(Now()) Then
            form_sdd = New FSameDayDelete
            form_sdd.SetInvoicePK(item_billed!fk_invoice)
            form_sdd.Show()
         Endif
         '  Items_Today_Or_Unpaid = Reload_Billed_Items(cvwItemsTodayOrUnpaid, Items_Today_Or_Unpaid)
         Items_Today_Or_Unpaid_Reload
         Invoice_New()
      Case "invoice mark unpaid"
         If Message.Question("Mark this invoice as unpaid?", "Yes", "No") = 2 Then Return
         modDBConnect.update("billing.invoices", Null, ["pk": Item_Billed!fk_invoice, "paid": False])
         modDBConnect.CommitTrans()
         ' Items_Today_Or_Unpaid = Reload_Billed_Items(cvwItemsTodayOrUnpaid, Items_Today_Or_Unpaid)
         Items_Today_Or_Unpaid_Reload
         If cvwItemsTodayOrUnpaid.count Then
            cvwItemsTodayOrUnpaid.MoveFirst
            cvwItemsTodayOrUnpaid.Item.Selected = True  'should trigger loading the edit area
         Endif
      Case "reprint invoice"
         If IsNull(item_billed!latex) And If item_billed!online Then
            latex = modBillingDBI.Generate_Online_Latex(item_billed!fk_invoice)
            modDBConnect.CommitTrans()
         Else
            latex = item_billed!latex
         Endif
         If Not IsNull(latex) Then modPrinting.Print_latex(latex)
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwItemsTodayOrUnpaid, "FRecordVisit")
      Case "print account statement"
         Accounts_Print_Statement
   End Select
Catch
   Log.ErrorMsg(Error.text & " " & Error.where)
   Return
   
End

Public Sub cvwItemsTodayOrUnpaid_Menu()
   
   If cvwItemsTodayOrUnpaid.count Then
      mnuInvoices.Popup()
   End If
   
End

Public Sub Invoice_Calculate_Total(sTotalType As String)
   '----------------------------------------------------------------
   'Calculates the total amount of all items billed for this invoice
   '----------------------------------------------------------------
   
   Dim x As Integer
   
   Invoice_total = 0
   Amount_paid = 0
   For x = 0 To gvwItemsBIlled.Rows.Count - 1
      If gvwItemsBIlled[x, cGridColumnItem_Fee].text = "" Then Break
      Invoice_total = Invoice_total + CFloat(Val(Replace(gvwItemsBIlled[x, cGridColumnItem_Fee].text, "$", "")))
      If gvwItemsBIlled[x, cGridColumnItem_gst_amount].text <> "" Then
         Invoice_total = Invoice_total + CFloat(Val(Replace(gvwItemsBIlled[x, cGridColumnItem_gst_amount].text, "$", "")))
      Endif
   Next
   If invoice_total <> 0 Then gvwPayments.Enabled = True
   HBox_InvoiceGrid.enabled = True
   With lblInvoiceOwing
      .text = sTotalType & "  " & modUtil.Money_Format(Invoice_total - amount_paid)
      .Font.Bold = False
      .Foreground = Color.Black
      .Border = Border.Plain
   End With
   
End

Public Sub Payment_Calculate_Total()
   '-----------------------------------------------------------------
   'Calculates the total amount of all payments made for this invoice
   '------------------------------------------------------------------
   
   Dim x As Integer
   Dim total As Float
   Dim amount_paid As Float
   
   For x = 0 To gvwPayments.Rows.Count - 1
      If gvwPayments[x, cGridColumnPayments_Amount].text = "" Then Break
      total = total + CFloat(Val(Replace(gvwPayments[x, cGridColumnPayments_Amount].text, "$", "")))
   Next
   With lblPaymentTotal
      .text = "Payment Total  " & modUtil.Money_Format(total) ' - amount_paid)
      .Font.Bold = False
      .Foreground = Color.Black
      .Border = Border.Plain
   End With
   If invoice_total = total Then
      tbUniversal.text = "Print Receipt"
      tbUniversal.Enabled = True
      tbSaveNoPrint.Enabled = True
      tbSaveNoPrint.text = "Receipt No Print"
   End If
   If total <> 0 And total < invoice_total Then
      tbUniversal.text = "Print Account"
      tbUniversal.Enabled = True
      tbSaveNoPrint.Enabled = True
      tbSaveNoPrint.Text = "Account No Print"
   Endif
   
End

Public Sub Online_Click()
   
   If rbOnline_Yes.Value = True Then
      If rbInvoiceToOther.Value = True Then
         cbSendClaimantAddress.Visible = True
         Return
      Endif
   Endif
   cbSendClaimantAddress.Visible = False
   
End

Public Sub rbInvoiceTo_Click()
   '-------------------------------------------------------------------
   ' If user changes billing level, change data in grid appropriately
   ' loop variable must be local but set gvwItemsBIlled = row
   ' so that when cmbFeeType.index = cmbFeeType.Find(Last.tag) triggers
   ' cmbFeeType_Click we are on the correct row in cmbFeeType_Click()
   '-------------------------------------------------------------------
   
   Dim row As Integer
   
   If bExit Then Return
   textlabelPayer.text = ""
   VBox_Workcover_Claims.Visible = False  
   cmbFeeType.index = -1
   Select Case Lower(Last.tag)
      Case "private fee"
         iLast_Invoice_Type = cLast_Invoice_Type_Private
      Case "schedule fee"
         iLast_Invoice_Type = cLast_Invoice_Type_Medicare
      Case "veteran"
         iLast_Invoice_Type = cLast_Invoice_Type_Veteran
      Case "other"
         iLast_Invoice_Type = cLast_Invoice_Type_Other
   End Select
   cbSendClaimantAddress.Visible = False
   If rbInvoiceToPatient.value = True Then
      If form_billingcards.Billing_Level_Get() <> const.Billingtype_Health_Care_Card_Concession Or form_billingcards.Billing_Level_Get() <> const.Billingtype_Pensioner_Concession Then
         fk_lu_default_billing_level = const.Billing_Default_Level_Private
         tbUniversal.text = "Print Account"
      Endif
   Endif
   If rbInvoiceToOther.value = True Then
      fk_lu_default_billing_level = const.Billing_Default_Level_Private
      tbUniversal.text = "Print Account"
      txtFindPayer.SetFocus()
      If rbOnline_Yes.Value = True Then
         cbSendClaimantAddress.Visible = True
      Endif
   Endif
   If rbInvoiceToMedicare.Value = True Then
      tbUniversal.text = "Medicare Voucher"
   Endif
   If rbInvoiceToVeterans.Value = True Then
      tbUniversal.text = "Veterans Voucher"
   Endif
   gvwItemsBIlled_Set_Fee_Level(Last.tag)
   bexit = True                      'prevent recursion into this sub
   gvwItemsBIlled_Calculate_Fees
   bexit = False  
   
End

Public Sub gvwItemsBIlled_Calculate_Fees_30march16_933pm() 'this version doesn't take into account area of need rows
   '--------------------------------------------------------------------------------------------------
   'This event is raised by either user clicking on the combo in the billing grid
   ' Or medicare, private or veterans option buttons next to the Invoice To label.
   'Change the fee type re-calculate the columns
   're - calculate the gap payment or set to zero If this is veterans or medicare patyment patient
   '
   'Each row in the grid has a corresponding collection of feel levels in gridData[gvwItemsBIlled.row]
   ' loaded in the Get_Items() sub which is a collection of collections for each fee level,
   ' usually eg 5 or 6 which correspond to the backend table billing.lu_billing_type contents:
   '
   ' 1;"AMA Fee"
   ' 2;"DVA (Non LMO rate)"
   ' 3;"DVA (LMO rate)"
   ' 4;"Health Care Card Concession"
   ' 5;"Pensioner Concession"
   ' 6;"Private Fee"
   ' 7;"TAC (Transport Accident Commission)"
   ' 8;"Schedule Fee"
   ' 
   ' This is a sample of gridData[0][5], this is for pensioner concession rate at my surgery
   ' and in the gui would correspond to the first row in a grid already populated with data.
   ' The keys and info will be different at your site:
   '
   ' Key                          Value
   ' pk                           5
   ' mbs_item                     23
   ' user_item                    null
   ' ama_item                     null   
   ' descriptor                   professional attendance at......
   ' descriptor_brief             level B consult at Surgery
   ' gst_rate                     0
   ' number_of_patients           0
   ' fk_fee_schedule              4070
   ' fk_price                     6105
   ' price                        $52.05
   ' fk_lu_billing_type           5
   ' notes
   ' fee_type                     Pensioner Conscession
   ' 
   '--------------------------------------------------------------------------------------------------
   
   Dim gap_payment As Float
   Dim row As Integer
   Dim item_number As String                           ' for readability the item number
   Dim fee_type As String                              ' for readability the type of fee.g private or schedule fee
   Dim fk_lu_billing_type As Variant                   ' for readability the key to lu_billing_type
   Dim the_fees As Collection
   Dim item As Collection 
   Dim scheduled_fee As String
   ' If bexit Then Return
   '  If gvwItemsBIlled.row = -1 Then Return                                                    ' no row selected
   ' If InStr(cmbFeeType.text, "DVA") Then                                                     ' warn if no vet number if DVA
   '    If IsNull(currentconsult!patient!veteran_number) Then
   '       Message.Info("You have selected a Veterans fee level, the patient has no veterans card number.\n\n"
   '       "If they have this entitlement, please add the appropriate details in the Cards tab above.")
   '       Reset_Last_Billing_Type
   '       Return
   '    Endif
   ' Endif
   
   For row = 0 To gvwItemsBIlled.Rows.Max                                                        ' for each row in the fees grid, we start with 4 by default
      If gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].text <> "" Then          ' if there is text in the grid item number column
         item_number = gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].text       ' for readability this is the item number
         fee_type = gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].Text             ' for readability this is the fee type
         fk_lu_billing_type = Billing_Type_Get_Pk(fee_type)                                      ' for readability this is the key to lu_billing_type
         If GridData[gvwItemsBIlled.Row].Exist(fk_lu_billing_type) Then                          ' if the GridData[row][fk_lu_billing_type] collection exists
            gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text = GridData[gvwItemsBIlled.row][fk_lu_billing_type]!price  'set the price in the item fee col
            scheduled_fee = GridData[gvwItemsBIlled.row][fk_lu_billing_type_scheduled_Fee]!price ' and work out the medicare scheduled fee 
            If gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text = "$0.00" Then       ' delete the row if no fee
               gvwItemsBIlled_Delete_Row()
            Else                                                                                 'otherwise work out the gap payment = current price - the scheduled fee
               gap_payment = modUtil.MoneyToFloat(gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text) - modUtil.MoneyToFloat(scheduled_fee)
               If gap_payment = 0 Or rbInvoiceToVeterans.value = True Or rbInvoiceToMedicare.value = True Then     ' If this is nothing  $0.00 then 
                  gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].text = "$0.0"                            ' set the gap to $0.00
               Else                                                                                                ' otherwise
                  gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].text = modUtil.Money_Format(gap_payment) ' display the gap $
               End If
            End If
         Else                                                                                    ' if we don't have collection data for this fee level
            Message.info("No fees exist for the billing level you selected")                     ' e.g user's site may not have put it in
            gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].Text = last_Fee_type     ' return the grid type to the last one used
            Return
         End If   
         
         ' If InStr(fee_type, "Private") Or InStr(fee_type, "AMA") Or InStr(fee_type, "Concession") Or InStr(fee_type, "TAC") Then
         '    If bAreaOfNeed = True Then 
         '       gvwItemsBIlled_Area_Of_Need_Remove          
         '    End If   
         '    rbInvoiceToPatient.value = True   
         ' Endif
         ' If fee_type = "Schedule Fee" And last_Fee_type <> "Schedule Fee" Then
         '    If bAreaOfNeed = True Then 
         '       gvwItemsBIlled_Area_Of_Need_Add  
         '    End If   
         ' Endif
         '   ' last_Fee_Type = fee_type
         ' Endif 
      End If
      
   Next                            
   
End

Public Sub gvwItemsBIlled_Calculate_Fees() 
   '--------------------------------------------------------------------------------------------------
   'This event is raised by either user clicking on the combo in the billing grid
   ' Or medicare, private or veterans option buttons next to the Invoice To label.
   'Change the fee type re-calculate the columns
   're - calculate the gap payment or set to zero If this is veterans or medicare patyment patient
   '
   'Each row in the grid has a corresponding collection of feel levels in gridData[gvwItemsBIlled.row]
   ' loaded in the Get_Items() sub which is a collection of collections for each fee level,
   ' usually eg 5 or 6 which correspond to the backend table billing.lu_billing_type contents:
   '
   ' 1;"AMA Fee"
   ' 2;"DVA (Non LMO rate)"
   ' 3;"DVA (LMO rate)"
   ' 4;"Health Care Card Concession"
   ' 5;"Pensioner Concession"
   ' 6;"Private Fee"
   ' 7;"TAC (Transport Accident Commission)"
   ' 8;"Schedule Fee"
   ' 
   ' This is a sample of gridData[0][5], this is for pensioner concession rate at my surgery
   ' and in the gui would correspond to the first row in a grid already populated with data.
   ' The keys and info will be different at your site:
   '
   ' Key                          Value
   ' pk                           5
   ' mbs_item                     23
   ' user_item                    null
   ' ama_item                     null   
   ' descriptor                   professional attendance at......
   ' descriptor_brief             level B consult at Surgery
   ' gst_rate                     0
   ' number_of_patients           0
   ' fk_fee_schedule              4070
   ' fk_price                     6105
   ' price                        $52.05
   ' fk_lu_billing_type           5
   ' notes
   ' fee_type                     Pensioner Conscession
   ' 
   '--------------------------------------------------------------------------------------------------
   
   Dim gap_payment As Float
   Dim row As Integer
   Dim item_number As String                           ' for readability the item number
   Dim fee_type As String                              ' for readability the type of fee.g private or schedule fee
   Dim fk_lu_billing_type As Variant                   ' for readability the key to lu_billing_type
   Dim the_fees As Collection
   Dim item As Collection 
   Dim scheduled_fee As String
   ' If bexit Then Return
   '  If gvwItemsBIlled.row = -1 Then Return                                                    ' no row selected
   ' If InStr(cmbFeeType.text, "DVA") Then                                                     ' warn if no vet number if DVA
   '    If IsNull(currentconsult!patient!veteran_number) Then
   '       Message.Info("You have selected a Veterans fee level, the patient has no veterans card number.\n\n"
   '       "If they have this entitlement, please add the appropriate details in the Cards tab above.")
   '       Reset_Last_Billing_Type
   '       Return
   '    Endif
   ' Endif
   
   For row = 0 To gvwItemsBIlled.Rows.Max                                                        ' for each row in the fees grid, we start with 4 by default
      gvwItemsBIlled.row = row
      If gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].text <> "" Then          ' if there is text in the grid item number column
         item_number = gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].text       ' for readability this is the item number
         fee_type = gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].Text             ' for readability this is the fee type
         fk_lu_billing_type = Billing_Type_Get_Pk(fee_type)                                      ' for readability this is the key to lu_billing_type
         If GridData.Exist(row) Then                                                             ' won't exist for area of need rows
            If GridData[gvwItemsBIlled.Row].Exist(fk_lu_billing_type) Then                          ' if the GridData[row][fk_lu_billing_type] collection exists
               gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text = GridData[gvwItemsBIlled.row][fk_lu_billing_type]!price  'set the price in the item fee col
               scheduled_fee = GridData[gvwItemsBIlled.row][fk_lu_billing_type_scheduled_Fee]!price ' and work out the medicare scheduled fee 
               If gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text = "$0.00" Then       ' delete the row if no fee
                  gvwItemsBIlled_Delete_Row()
               Else                                                                                 'otherwise work out the gap payment = current price - the scheduled fee
                  gap_payment = modUtil.MoneyToFloat(gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text) - modUtil.MoneyToFloat(scheduled_fee)
                  If gap_payment = 0 Or rbInvoiceToVeterans.value = True Or rbInvoiceToMedicare.value = True Then     ' If this is nothing  $0.00 then 
                     gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].text = "$0.0"                            ' set the gap to $0.00
                  Else                                                                                                ' otherwise
                     gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].text = modUtil.Money_Format(gap_payment) ' display the gap $
                  End If
               End If
            Else                                                                                    ' if we don't have collection data for this fee level
               Message.info("No fees exist for the billing level you selected")                     ' e.g user's site may not have put it in
               gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].Text = last_Fee_type     ' return the grid type to the last one used
               Return
            End If   
         End If                                                                                       ' an area of need row  
         
         ' If InStr(fee_type, "Private") Or InStr(fee_type, "AMA") Or InStr(fee_type, "Concession") Or InStr(fee_type, "TAC") Then
         '    If bAreaOfNeed = True Then 
         '       gvwItemsBIlled_Area_Of_Need_Remove          
         '    End If   
         '    rbInvoiceToPatient.value = True   
         ' Endif
         ' If fee_type = "Schedule Fee" And last_Fee_type <> "Schedule Fee" Then
         '    If bAreaOfNeed = True Then 
         '       gvwItemsBIlled_Area_Of_Need_Add  
         '    End If   
         ' Endif
         '   ' last_Fee_Type = fee_type
         ' Endif 
      End If
      
   Next      
   
   If InStr(fee_type, "Private") Or InStr(fee_type, "AMA") Or InStr(fee_type, "Concession") Or InStr(fee_type, "TAC") Then
      If bAreaOfNeed = True Then 
         gvwItemsBIlled_Area_Of_Need_Remove          
      End If   
   Endif
   If fee_type = "Schedule Fee" And last_Fee_type <> "Schedule Fee" Then
      If bAreaOfNeed = True Then 
         gvwItemsBIlled_Area_Of_Need_Add  
      End If   
   Endif
   last_Fee_Type = fee_type
   
End

Public Sub gvwItemsBIlled_Calculate_Fees_old()
   '-------------------------------------------------------------------------------------------
   'Change the fee type re-calculate the columns
   'This event is raised by either user clicking on the combo or medicare/veteran radio buttons
   're-calculate the gap payment or set to zero if this is veterans patient.
   '-------------------------------------------------------------------------------------------
   
   Dim gap_payment As Float
   Dim row As Integer
   Dim item_number As String           'for readability
   Dim fee_type As String              'e.g private or schedule fee
   Dim fk_lu_billing_type As Variant
   Dim the_fees As Collection
   Dim item As Collection 
   ' If bexit Then Return
   '  If gvwItemsBIlled.row = -1 Then Return                                                    ' no row selected
   ' If InStr(cmbFeeType.text, "DVA") Then                                                     ' warn if no vet number if DVA
   '    If IsNull(currentconsult!patient!veteran_number) Then
   '       Message.Info("You have selected a Veterans fee level, the patient has no veterans card number.\n\n"
   '       "If they have this entitlement, please add the appropriate details in the Cards tab above.")
   '       Reset_Last_Billing_Type
   '       Return
   '    Endif
   ' Endif
   Print gvwItemsBIlled[0, cGridColumnItem_FeeType].Text
   Print gvwItemsBIlled[1, cGridColumnItem_FeeType].Text
   
   For row = 0 To gvwItemsBIlled.Rows.Max
      gvwItemsBIlled.row = row
      Print "on grid row:", gvwItemsBIlled.row, " but the row is:", row
      Print cmbFeeType.Text
      Print gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].Text
      Print gvwItemsBIlled[0, cGridColumnItem_FeeType].Text
      Print gvwItemsBIlled[1, cGridColumnItem_FeeType].Text
      
      If gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].text <> "" Then  
         item_number = gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].text
         fee_type = gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].Text
         fk_lu_billing_type = Billing_Type_Get_Pk(fee_type)
         'cmbFeeType.index = cmbFeeType.Find(fee_type)
         the_fees = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(item_number, fk_lu_billing_type)
         Try gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(item_number, fk_lu_billing_type)!price
         If Error Then                                                                         ' not found a fee? then whinge
            If Not bComplainedAboutNoItem Then
               Message.info("No fees exist for the billing level you selected")
               bComplainedAboutNoItem = True
            Endif
            'cmbFeeType.index = cmbFeeType.Find(last_Fee_type)                                  ' reset the combo to the last used fee level 
            gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].Text = last_Fee_type
         Else
            '-------------------------------------
            'User has selected a new billing level
            '-------------------------------------
            bComplainedAboutNoItem = False
            If gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text = "$0.00" Then
               gvwItemsBIlled_Delete_Row()
            Else
               gap_payment = modUtil.MoneyToFloat(gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text) - modUtil.MoneyToFloat(the_fees!price)
               If gap_payment = 0 Or rbInvoiceToVeterans.value = True Or rbInvoiceToMedicare.value = True Then
                  gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].text = "$0.0"
               Else
                  gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].text = modUtil.Money_Format(gap_payment)
               End If
            End If
            ' If InStr(fee_type, "Private") Or InStr(fee_type, "AMA") Or InStr(fee_type, "Concession") Or InStr(fee_type, "TAC") Then
            '    If bAreaOfNeed = True Then 
            '       gvwItemsBIlled_Area_Of_Need_Remove          
            '    End If   
            '    rbInvoiceToPatient.value = True   
            ' Endif
            ' If fee_type = "Schedule Fee" And last_Fee_type <> "Schedule Fee" Then
            '    If bAreaOfNeed = True Then 
            '       gvwItemsBIlled_Area_Of_Need_Add  
            '    End If   
            ' Endif
            ' last_Fee_Type = fee_type
         Endif 
      End If
      
   Next                            
   
End

Public Sub rbInvoiceTo_Click_old()
   '-------------------------------------------------------------------
   'If user changes billing level, change data in grid appropriately
   ' loop variable must be local but set gvwItemsBIlled = row
   ' so that when cmbFeeType.index = cmbFeeType.Find(Last.tag) triggers
   ' cmbFeeType_Click we are on the correct row in cmbFeeType_Click()
   '-------------------------------------------------------------------
   
   Dim row As Integer
   
   If bExit Then Return
   textlabelPayer.text = ""
   
   Select Case Lower(Last.tag)
      Case "private fee"
         iLast_Invoice_Type = cLast_Invoice_Type_Private
      Case "shedule fee"
         iLast_Invoice_Type = cLast_Invoice_Type_Medicare
      Case "veteran"
         iLast_Invoice_Type = cLast_Invoice_Type_Veteran
      Case "other"
         iLast_Invoice_Type = cLast_Invoice_Type_Other
   End Select
   cbSendClaimantAddress.Visible = False
   If rbInvoiceToPatient.value = True Then
      If form_billingcards.Billing_Level_Get() <> const.Billingtype_Health_Care_Card_Concession Or form_billingcards.Billing_Level_Get() <> const.Billingtype_Pensioner_Concession Then
         fk_lu_default_billing_level = const.Billing_Default_Level_Private
         tbUniversal.text = "Print Account"
      Endif
   Endif
   If rbInvoiceToOther.value = True Then
      fk_lu_default_billing_level = const.Billing_Default_Level_Private
      tbUniversal.text = "Print Account"
      txtFindPayer.SetFocus()
      If rbOnline_Yes.Value = True Then
         cbSendClaimantAddress.Visible = True
      Endif
   Endif
   If rbInvoiceToMedicare.Value = True Then
      tbUniversal.text = "Medicare Voucher"
   Endif
   If rbInvoiceToVeterans.Value = True Then
      tbUniversal.text = "Veterans Voucher"
   Endif
   
   gvwItemsBIlled.row = 0
   gvwItemsBIlled.Select
   For row = 0 To gvwItemsBIlled.Rows.Max
      onrow_items = row
      If gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text <> "" Then
         If gvwItemsBIlled[row, cGridColumnItem_FeeType].text <> Last.tag Then
            gvwItemsBIlled.row = row
            cmbFeeType.index = cmbFeeType.Find(Last.tag) 'triggers cmbFeeType_Click
         End If
      End If
   Next
   
End

Public Sub timer1_Timer()
   '-----------------------------------------------------------------------
   ' How this works for example
   ' EditArea_TextBox_GotFocus()   - enables the timer
   '                               - turns on the timer
   ' iTimer_Search_Mode            - set to  cTimer_SearchMode_Patient
   '
   ' EditArea_Textbox_KeyRelease() - zeros timer_count to 0
   '                               - when user stops typing timer_count > 3
   '                                 and the search starts
   ' Whichever routine is searching eg Patients_Get() - stops timer
   ' VBox_PatientsList_Leave() - disables and turns off timer
   ' Note that EditArea_TextBox_LostFocus() is not used for this
   ' because it is a unreliable event - does not always trigger
   ' depends on which control after the textbox receives focus!
   ' ----------------------------------------------------------------------
   
   Inc timer_count
   If timer_count > 3 Then
      Select Case iTimer_Search_Mode
         Case cTimer_SearchMode_Patient
            Patients_Get
         Case cTimer_SearchMode_Descriptor
            Descriptors_Brief_Get
         Case cTimer_SearchMode_Payer
            Payer_Search()
         Case cTimer_SearchMode_FeeSchedule
            Scheduled_Fees_Search
      End Select
   Endif
   
End

Public Sub VBox_InvoiceGrid_Leave()
   
   ' gvwItemsBilled_HideProperty() '?flag
   
End

Public Sub Billing_Defaults_Save()
   '-----------------------------------------------------------------
   'Save the billing defaults from the embedded FPatientBillingCards
   'Updating the collection in use appropriately
   '-----------------------------------------------------------------
   
   Dim patient_billing_data As New CRow
   
   If Not form_billingcards.Valid_Data() Then Return
   patient_billing_data.put_unchanged(fk_patient, "fk_patient")
   If Not IsNull(form_billingcards.Responsible_Payer_Get_fk_Person()) Then
      patient_billing_data!fk_payer_person = Null
   Else
      patient_billing_data!fk_payer_person = form_billingcards.Responsible_Payer_Get_fk_person()
   Endif
   patient_billing_data!medicare_number = form_billingcards.Medicare_Number()
   patient_billing_data!medicare_ref_number = form_billingcards.Medicare_Reference_number()
   patient_billing_data!medicare_expiry_date = modUtil.Medicare_Create_Expiry_date(form_billingcards.Medicare_Card_Expiry_Date())
   patient_billing_data!ihi = form_billingcards.Patient_IndividualHealthIdentifier()  'fixme put in ?date for last updated.
   patient_billing_data!pcehr_consent = form_billingcards.PCEHR_Consent()
   patient_billing_data!veteran_number = form_billingcards.Veteran_Card_Number()
   If patient_billing_data!veteran_number <> "" Then
      patient_billing_data!fk_lu_veteran_card_type = form_billingcards.Veteran_Card_Type()
      patient_billing_data!veteran_specific_condition = form_billingcards.veteran_specific_condition()
   Else
      patient_billing_data!fk_lu_veteran_card_type = Null
      patient_billing_data!veteran_specific_condition = Null
   End If
   patient_billing_data!concession_card_number = form_billingcards.Concession_Card_Number()
   If patient_billing_data!concession_card_number <> "" Then
      patient_billing_data!concession_card_expiry_date = form_billingcards.Concession_Card_Expiry_Date()
      patient_billing_data!fk_lu_centrelink_card_type = form_billingcards.Centrelink_Card_Type()
   Else
      patient_billing_data!concession_card_expiry_date = Null
      patient_billing_data!fk_lu_centrelink_card_type = Null
   Endif
   patient_billing_data!fk_lu_default_billing_level = form_billingcards.Billing_level_Get()
   patient_billing_data!fk_lu_private_health_fund = form_billingcards.Private_Health_Fund()
   If patient_billing_data!fk_lu_private_health_fund <> const.PrivateHealthFund_None Then
      patient_billing_data!private_insurance = True
   Else
      patient_billing_data!private_insurance = False
   Endif
   patient_billing_data!nursing_home_resident = form_billingcards.Nursing_home_resident()
   patient_billing_data!fk_doctor = form_billingcards.Preferred_Doctor()
   If Not IsNull(form_billingcards.fk_patient_pharmacy_get()) Then    'get pharmacy stuff if it exists
      patient_billing_data!fk_branch_pharmacy = form_billingcards.fk_patient_pharmacy_get()
   Else
      patient_billing_data!fk_branch_pharmacy = Null
   End If  
   If form_billingcards.patient_pharmacy_memo_get() <> "" Then
      patient_billing_data!memo_for_pharmacy = form_billingcards.patient_pharmacy_memo_get()
   Else
      patient_billing_data!memo_for_pharmacy = Null
   Endif
   patient_billing_data!uses_webster_pack = form_billingcards.webster_pack_get()
   patient_billing_data.Save("clerical.data_patients", "fk_patient")
   form_billingcards.Contacts_Save()
   modDBConnect.CommitTrans()
   '  Return
   '-----------------------------------------------------------------------------------
   'Update the current patient collection by re-loading it from the backend
   'Insert it back into the appropriate spot in its collection
   'First get the correct key for either patients or unbilled_consultations collection
   '-----------------------------------------------------------------------------------
   If Not IsNull(patient) Then ' And Not IsNull(cvwAccounts.Item) Then
      If bSearchingAccounts Then
         cvwSearchAccounts.MoveCurrent
         patients[cvwSearchAccounts.Item.key] = modContactsDBI.Patient_Get_Using_PK(patients[cvwSearchAccounts.Item.Key]!fk_patient)
         patient = patients[cvwSearchAccounts.Item.Key]
      Else
         Print fk_appointment
         Unbilled_Consultations[sPatient_Collection_Key] = modBillingDBI.Consultation_Ubilled_Get(fk_appointment)   
         patient = Unbilled_Consultations[sPatient_Collection_Key]
      Endif
   Endif
   '------------------------------------------------------------------------------
   'finally update any billing data already in the edit area, this may only update
   'the radiobuttons, but if items in the grid will update these
   'CAUTION: DON'T PUT THIS BACK IN - IT OVER-RIDES ANY EXISTING BILLING DATA
   'WHICH IS BEING CHARGED IN THE INVOICE
   '------------------------------------------------------------------------------
   ' With form_billingcards
   '    If .cmbBIllingLevel.text = "Bulk Bill" Then
   '       If .txtVeteranNumber.text <> "" Then
   '          rbInvoiceToVeterans.value = True
   '       Else
   '          rbInvoiceToMedicare.Value = True
   '       Endif
   '       gvwPayments_Clear
   '    Else
   '       If textlabelPayer.text = "" Then
   '          rbInvoiceToPatient.value = True 'fixme what if payer=person
   '       Endif
   '    Endif
   '    .VBox_Notify_Data_Changed.Padding = 0
   ' End With
   ' 
   
End

Public Function Billing_Defaults_Valid() As Boolean
   '--------------------------------------------------------------------------
   'Validates dates in the embedded form of patients card and billing defaults
   'returns true if ok
   '--------------------------------------------------------------------------
   
   If form_billingcards.txtMedicareCardExpiryDate.text <> "" Then              'only validate if user has entered something
      If Not IsDate(modUtil.Medicare_Create_Expiry_date(form_billingcards.txtMedicareCardExpiryDate.text)) Then
         form_billingcards.txtMedicareCardExpiryDate.SetFocus()
         Return
      Endif
   Endif
   If form_billingcards.txtConcessionExpiryDate.text <> "" Then                 'only validate if user has entered something
      If Not IsDate(form_billingcards.txtConcessionExpiryDate.text) Then
         form_billingcards.txtConcessionExpiryDate.SetFocus()
         Return
      Endif
   Endif
   Return True
   
End

Public Sub MainToolbar_Click()
   
   Dim sCardType As String
   
   pnlToolButtons.Enabled = False
   Select Last.tag
      Case "save billing defaults"
         Billing_Defaults_Save()
      Case "new invoice"
         Invoice_New()
      Case "new receipt"
         gvwItemsBIlled_Clear()
      Case "print voucher"
         'medicare/veterans vouchers never paid on the day, currently only do medicare
         If Not IsNull(patient) Then
            If IsNull(patient!medicare_number) And IsNull(patient!veteran_number) Then
               sCardType = "medicare"
               Goto Missing_CardNumber
            Endif
            If rbInvoiceToVeterans.value = True And IsNull(patient!veteran_number) Then
               sCardType = "veteran"
               Goto Missing_CardNumber
            Endif
         Endif
         Save(bBulkBill_Yes, bPrint_Yes)
      Case "print receipt"
         Save(bBulkBill_No, bPrint_Yes)
         
      Case "receipt no print"
         Save(bBulkBill_No, bPrint_No)
         
      Case "print account"
         Save(bBulkBill_No, bPrint_Yes)
   End Select
   pnlToolButtons.Enabled = True
   Return
   
Missing_CardNumber:
   Message.title = modUtil.Ucase_Word_First_Letter(sCardType) & " Numbers "
   Message.Info("This patient's " & sCardType & " number is not recorded.\n\nPlease update their record before proceeding.")
   pnlToolButtons.Enabled = True
   Return
   
End

Public Sub Invoice_New()
   '---------------------------------------------
   'patient loaded either from the unbilled appointment list
   'Or searching via accounts
   '---------------------------------------------
   
   bexit = True
   Unbilled_consultation = Null                 'the invoice is not being raised from appointment list
   gvwItemsBIlled.Clear                         'clear the grid the user will type in the item numbers
   item_flags = New Collection
   tbSaveNoPrint.Enabled = True                 'new invoice can be saved (either paid/unpaid) without printing
   lblEditAreaHeading.text = "NEW INVOICE"
   bPayingInvoice = False
   fk_invoice = Null
   invoice = New Crow
   gvwPayments.clear
   lblInvoiceOwing.text = ""
   lblPaymentTotal.text = ""
   EditArea_Notify_Data_Change(False)
   Hbox_InvoiceGrid.Enabled = True
   With txtDate
      .ReadOnly = False
      .text = Format(Now, "dd/mm/yyyy")
   End With
   VBox_EditArea_Inner.Enabled = True
   VBox5.Enabled = True
   rbOnline_Yes.Visible = True
   rbOnline_No.Visible = True
   lblOnlineStatus.text = ""
   gvwItemsBIlled.Rows.count = 4 'reset row count
   bExit = False
   
End

Public Function Fill_Columnview(cvwWorkcoverClaims As Columnview, coll As Collection, Optional bFirstLoad As Boolean = False) As Collection
   '-------------------------------------------------------------------------------
   ' Refresh all previous items billed for the patient
   ' E.g a single row could be Item 23 standard consult etc
   ' if more than 1 item per invoice, only display name/dr/date once
   ' coll = items_Billed_or_unpaid if user details loaded into the 
   '        edit area
   ' coll = items_Billed if viewing the account_history
   ' If this is the first time the columnview is filled on the Accounts History Tab
   ' then fill the payer combo with unique names
   '-------------------------------------------------------------------------------
   
   Dim item As String
   Dim fk_last_invoice As Variant
   Dim total_due As Float
   Dim amount_owing As Float
   Dim monies As Variant[]
   Dim items_on_invoice As Integer
   Dim invoice_total As Float
   Dim invoice_amount_paid As Float
   Dim x As Integer
   Dim item_billed As Collection
   Dim bSkipRow As Boolean
   
   cvwWorkcoverClaims.Clear
   For Each Item_Billed In coll
      If Trim(txtFilterDescriptor.text) <> "" And cvwWorkcoverClaims.Name = "cvwAccountHistory" Then              ' ?user trying to filter collection on brief descriptor in account history tab
         If InStr(Lower(Item_Billed!descriptor_brief), Lower(Trim(txtFilterDescriptor.text))) Then ' next brief descriptor matches text
            bSkipRow = False                                                                          ' display in the columnview
         Else                                                                                      ' otherwise
            bSkipRow = True                                                                           ' don't
         Endif
      Else                                                                                         ' no filtering?   
         bSkipRow = False                                                                             ' don't skip
      End If   
      If bSkipRow = False Then   
         cvwWorkcoverClaims.Add(x, 0)
         If fk_last_invoice <> Item_Billed!fk_invoice Then
            items_on_invoice = 1
            cvwWorkcoverClaims[x][0] = Split(Item_Billed!patient_firstname, " ")[0] & "  "
            cvwWorkcoverClaims[x][1] = Item_Billed!staff_provided_service_wholename & "  "
            cvwWorkcoverClaims[x][2] = Item_Billed!branch & "  "
            cvwWorkcoverClaims[x][3] = Format(Item_Billed!visit_date, "dd/mm/yyyy") & "  "
            cvwWorkcoverClaims[x][9] = modUtil.Money_Format(Item_Billed!total_bill) & "  "
            cvwWorkcoverClaims[x][10] = modUtil.Money_Format(Item_Billed!total_paid) & "  "
            cvwWorkcoverClaims[x][11] = modUtil.Money_Format(Item_Billed!due) & "  "
            cvwWorkcoverClaims[x][12] = Item_Billed!notes
         Else
            cvwWorkcoverClaims[x][0] = ""
            Inc items_on_invoice
         End If
         If Not IsNull(Item_Billed!mbs_item) Then item = Item_Billed!mbs_item
         If Not IsNull(Item_Billed!ama_item) Then item = Item_Billed!ama_item
         If Not IsNull(Item_Billed!user_item) Then item = Item_Billed!user_item
         cvwWorkcoverClaims[x][4] = item & "  "
         cvwWorkcoverClaims[x][5] = Item_Billed!descriptor_brief & "  "
         '------------------------------
         'work out who the invoice is to
         '------------------------------
         If Not IsNull(Item_Billed!fk_lu_bulk_billing_type) Then
            If Item_Billed!fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare Then
               cvwWorkcoverClaims[x][6] = "Medicare    "
            Else
               cvwWorkcoverClaims[x][6] = "Veterans    "
            Endif
         Endif
         If Not IsNull(Item_Billed!account_to_name) Then
            cvwWorkcoverClaims[x][6] = Item_Billed!account_to_name & "  "
         End If   
         If cvwWorkcoverClaims[x][6] = "" Then 
            cvwWorkcoverClaims[x][6] = "Patient"
         Endif
         cvwWorkcoverClaims[x][7] = Item_Billed!amount & "  "
         If IsNull(Item_Billed!amount_gst) Then
            cvwWorkcoverClaims[x][8] = "          "
         Else
            cvwWorkcoverClaims[x][8] = Item_Billed!amount_gst & "  "
         Endif
         fk_last_invoice = Item_Billed!fk_invoice
         If bFirstLoad Then
            If cmbInvoiceToFilter.Find(cvwWorkcoverClaims[x][6]) = -1 Then 
               cmbInvoiceToFilter.Add(cvwWorkcoverClaims[x][6])
            Endif
         Endif
         Inc x
      End If   
   Next
   lblmeasure.font = cvwWorkcoverClaims.Font
   modUtilGUI.Columnview_Columns_Set_Size(cvwWorkcoverClaims, lblmeasure)
   Return coll
   
End

Public Function Reload_Billed_Items_old(cvwWorkcoverClaims As Columnview, coll As Collection) As Collection
   '----------------------------------------------------------------
   ' Refresh all previous items billed for the patient
   ' E.g a single row could be Item 23 standard consult etc
   ' if more than 1 item per invoice, only display name/dr/date once
   ' coll = items_Billed_or_unpaid if user details loaded into the 
   '        edit area
   ' coll = items_Billed if viewing the account_history
   '----------------------------------------------------------------
   
   Dim item As String
   Dim fk_last_invoice As Variant
   Dim total_due As Float
   Dim amount_owing As Float
   Dim monies As Variant[]
   Dim items_on_invoice As Integer
   Dim invoice_total As Float
   Dim invoice_amount_paid As Float
   Dim x As Integer
   Dim item_billed As Collection
   
   cvwWorkcoverClaims.Clear
   coll = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Items_Invoices_Get(fk_patient, iAccountDisplayMode)) 'was items_Billed_get
   For Each Item_Billed In coll
      cvwWorkcoverClaims.Add(x, 0)
      If fk_last_invoice <> Item_Billed!fk_invoice Then
         items_on_invoice = 1
         cvwWorkcoverClaims[x][0] = Split(Item_Billed!patient_firstname, " ")[0] & "  "
         cvwWorkcoverClaims[x][1] = Item_Billed!staff_provided_service_wholename & "  "
         cvwWorkcoverClaims[x][2] = Item_Billed!branch & "  "
         cvwWorkcoverClaims[x][3] = Format(Item_Billed!visit_date, "dd/mm/yyyy") & "  "
         cvwWorkcoverClaims[x][9] = modUtil.Money_Format(Item_Billed!total_bill) & "  "
         cvwWorkcoverClaims[x][10] = modUtil.Money_Format(Item_Billed!total_paid) & "  "
         cvwWorkcoverClaims[x][11] = modUtil.Money_Format(Item_Billed!due) & "  "
         cvwWorkcoverClaims[x][12] = Item_Billed!notes
      Else
         cvwWorkcoverClaims[x][0] = ""
         Inc items_on_invoice
      End If
      If Not IsNull(Item_Billed!mbs_item) Then item = Item_Billed!mbs_item
      If Not IsNull(Item_Billed!ama_item) Then item = Item_Billed!ama_item
      If Not IsNull(Item_Billed!user_item) Then item = Item_Billed!user_item
      cvwWorkcoverClaims[x][4] = item & "      "
      cvwWorkcoverClaims[x][5] = Item_Billed!descriptor_brief & "  "
      '------------------------------
      'work out who the invoice is to
      '------------------------------
      If Not IsNull(Item_Billed!fk_lu_bulk_billing_type) Then
         If Item_Billed!fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare Then
            cvwWorkcoverClaims[x][6] = "Medicare    "
         Else
            cvwWorkcoverClaims[x][6] = "Veterans    "
         Endif
      Endif
      If Not IsNull(Item_Billed!account_to_name) Then
         cvwWorkcoverClaims[x][6] = Item_Billed!account_to_name & "  "
      Endif
      cvwWorkcoverClaims[x][7] = Item_Billed!amount & "  "
      If IsNull(Item_Billed!amount_gst) Then
         cvwWorkcoverClaims[x][8] = "          "
      Else
         cvwWorkcoverClaims[x][8] = Item_Billed!amount_gst & "  "
      Endif
      
      fk_last_invoice = Item_Billed!fk_invoice
      Inc x
   Next
   lblmeasure.font = cvwWorkcoverClaims.Font
   modUtilGUI.Columnview_Columns_Set_Size(cvwWorkcoverClaims, lblmeasure)
   Return coll
   
End

Public Sub cvwItemsTodayOrUnpaid_Refresh_old()
   '----------------------------------------------------------------
   ' Refresh all previous items billed for the patient
   ' E.g a single row could be Item 23 standard consult etc
   ' if more than 1 item per invoice, only display name/dr/date once
   '----------------------------------------------------------------
   
   Dim item As String
   Dim fk_last_invoice As Variant
   Dim total_due As Float
   Dim amount_owing As Float
   Dim monies As Variant[]
   Dim items_on_invoice As Integer
   Dim invoice_total As Float
   Dim invoice_amount_paid As Float
   Dim x As Integer
   Dim item_billed As Collection
   
   cvwItemsTodayOrUnpaid.Clear
   Items_Billed = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Items_Invoices_Get(fk_patient, iAccountDisplayMode)) 'was items_Billed_get
   For Each Item_Billed In Items_Billed
      cvwItemsTodayOrUnpaid.Add(x, 0)
      If fk_last_invoice <> Item_Billed!fk_invoice Then
         items_on_invoice = 1
         cvwItemsTodayOrUnpaid[x][0] = Split(Item_Billed!patient_firstname, " ")[0] & "  "
         cvwItemsTodayOrUnpaid[x][1] = Item_Billed!staff_provided_service_wholename & "  "
         cvwItemsTodayOrUnpaid[x][2] = Item_Billed!branch & "  "
         cvwItemsTodayOrUnpaid[x][3] = Format(Item_Billed!visit_date, "dd/mm/yyyy") & "  "
         cvwItemsTodayOrUnpaid[x][9] = modUtil.Money_Format(Item_Billed!total_bill) & "  "
         cvwItemsTodayOrUnpaid[x][10] = modUtil.Money_Format(Item_Billed!total_paid) & "  "
         cvwItemsTodayOrUnpaid[x][11] = modUtil.Money_Format(Item_Billed!due) & "  "
         cvwItemsTodayOrUnpaid[x][12] = Item_Billed!notes
      Else
         cvwItemsTodayOrUnpaid[x][0] = ""
         Inc items_on_invoice
      End If
      If Not IsNull(Item_Billed!mbs_item) Then item = Item_Billed!mbs_item
      If Not IsNull(Item_Billed!ama_item) Then item = Item_Billed!ama_item
      If Not IsNull(Item_Billed!user_item) Then item = Item_Billed!user_item
      cvwItemsTodayOrUnpaid[x][4] = item & "      "
      cvwItemsTodayOrUnpaid[x][5] = Item_Billed!descriptor_brief & "  "
      '------------------------------
      'work out who the invoice is to
      '------------------------------
      If Not IsNull(Item_Billed!fk_lu_bulk_billing_type) Then
         If Item_Billed!fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare Then
            cvwItemsTodayOrUnpaid[x][6] = "Medicare    "
         Else
            cvwItemsTodayOrUnpaid[x][6] = "Veterans    "
         Endif
      Endif
      If Not IsNull(Item_Billed!account_to_name) Then
         cvwItemsTodayOrUnpaid[x][6] = Item_Billed!account_to_name & "  "
      Endif
      cvwItemsTodayOrUnpaid[x][7] = Item_Billed!amount & "  "
      If IsNull(Item_Billed!amount_gst) Then
         cvwItemsTodayOrUnpaid[x][8] = "          "
      Else
         cvwItemsTodayOrUnpaid[x][8] = Item_Billed!amount_gst & "  "
      Endif
      
      fk_last_invoice = Item_Billed!fk_invoice
      Inc x
   Next
   lblmeasure.font = cvwItemsTodayOrUnpaid.Font
   modUtilGUI.Columnview_Columns_Set_Size(cvwItemsTodayOrUnpaid, lblmeasure)
   
End

Public Sub cvwItemsTodayOrUnpaid_Select()
   '-------------------------------------------------------------------------------------------
   'cvwItemsBilled:This is the list of items on invoices which have been billed to the
   'patient and already saved - either accounts or receipts for visits
   'Items in this list may be single - ie only one per invoice or multiple - many on an invoice
   'If they click on a row without the patient name showing on the list - then that row will be
   'an item one a multi-item invoice. Move back To the row with the patient's name on it
   'ie start of the invoice, so that this routine will load the edit area with all items from
   'this point in the list until the fk_invoice changes
   '--------------------------------------------------------------------------------------------
   
   If cvwItemsTodayOrUnpaid.count = 0 Then Return                   'exit if no invoices
   bexit = True
   lblInvoiceTotalAndPaid.Visible = False                 'don't know yet how much will be pain
   bPayingInvoice = True                                  'set paying invoice flag
   VBox_EditArea_Inner.Enabled = False                    'don't allow any access to the editing area input area
   cvwItemsTodayOrUnpaid.MoveCurrent()                              'align key with the columnview row
   If cvwItemsTodayOrUnpaid[cvwItemsTodayOrUnpaid.Item.key][0] = "" Then      'user has clicked on row with no patient name
      Do Until cvwItemsTodayOrUnpaid[cvwItemsTodayOrUnpaid.Item.key][0] <> "" 'so move backwards until on a patients name
         cvwItemsTodayOrUnpaid.MovePrevious()
      Loop
   Endif
   cvwItemsTodayOrUnpaid.MoveCurrent()
   fk_invoice = Items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]!fk_invoice                    'gives us the key to billing.invoices table
   Log.DebugMsg("fk_invoice to reload is " & fk_invoice)
   invoice = modBillingDBI.Get_Invoice_PK(fk_invoice)
   Reload_Invoice_Data()
   bExit = False
   
End

Private Sub Set_Online_Data(inv As Crow, Optional items As Collection)
   
   Dim i As Collection
   Dim item_with_error As Collection
   Dim s As String
   Dim rcode As Integer
   
   ' set online data
   rbOnline_No.Visible = False
   rbOnline_Yes.Visible = False
   'lblOnlineStatus.Visible = True
   If inv!result_code = 4006 Then
      If IsNull(items) Then
         items = modBillingDBI.Get_Billed_Items(inv)
      Endif
      For Each i In Items
         If i!fk_invoice = inv!fk_invoice And If Not IsNull(i!reason_code) And If i!reason_code <> 0 Then
            item_with_error = i
         Endif
      Next
      rcode = item_with_error!reason_code
      s = item_with_error!description & " " & item_with_error!comment
   Else If inv!result_code = 4007 Then
      rcode = inv!claim_result_code
      s = inv!claim_description & " " & inv!claim_result_text
   Else
      rcode = inv!result_code
      s = inv!description & " " & inv!result_text
   Endif
   lblOnlineStatus.Text = "(" & Str$(rcode) & ") " & Left$(s, 30)
   lblOnlineStatus.Tooltip = s
   Select Case rcode
      Case 0
         lblOnlineStatus.Foreground = Color.DarkGreen
      Case Else
         lblOnlineStatus.Foreground = Color.Red
   End Select
   
End

Private Sub Reload_Invoice_Data()
   
   Dim items As Collection
   Dim item_billed As Collection
   
   items = modBillingDBI.Get_Billed_Items(invoice)
   Set_Online_Data(invoice, items)
   If Not invoice!paid Then                           'if this invoice is not paid
      tbSaveNoPrint.Enabled = False                       'as are paying disable the save no print button
      lblEditAreaHeading.text = "PAY INVOICE"
      VBox5.Enabled = True                                'contains the edit area (disabled) items grid and payement grid '   fixme
   Else
      lblEditAreaHeading.text = "PAID INVOICE"
      VBox5.Enabled = False
   Endif
   txtDate.text = Format(invoice!visit_date, "dd/mm/yyyy")                    'now fill the edit area with the invoice data
   txtReferenceDetails.text = invoice!reference
   cmbSeenBy.index = cmbSeenBy.Find(invoice!staff_provided_service_wholename)
   cmbLocation.index = cmbLocation.Find(invoice!branch)
   rbInvoiceToPatient.Value = True ' cheating a little bit: medicare/DVA invoices won't get printed again
   textlabelPayer.text = ""
   If Not IsNull(invoice!fk_payer_branch) Then
      fk_payer_branch = invoice!fk_payer_branch
      rbInvoiceOrganisation.Value = True
      rbInvoiceToOther.Value = True
   Endif
   If Not IsNull(invoice!fk_payer_person) Then
      fk_payer_person = invoice!fk_payer_person
      rbInvoicePerson.Value = True
      rbInvoiceToOther.Value = True
   Endif
   If Not IsNull(invoice!account_to_name) Then
      textlabelPayer.text = invoice!account_to_name
      If Not IsNull(invoice!account_to_branch) Then
         textlabelPayer.text &= "<BR>" & invoice!account_to_branch
      End If
      If Not IsNull(invoice!account_to_street) Then
         textlabelPayer.text &= "<BR>" & invoice!account_to_street
      Endif
      If Not IsNull(invoice!account_to_town_postcode) Then
         textlabelPayer.text &= " " & invoice!account_to_town_postcode
      Endif
   Endif
   cmbInvoiceComments.text = invoice!notes
   '---------------------------------------------------------
   'now create an items collection to load back into the grid
   '---------------------------------------------------------
   onrow_items = 0
   gvwItemsBIlled.Clear()
   invoice_total = modUtil.MoneyToFloat(Items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]!total_bill)
   amount_paid = modUtil.MoneyToFloat(items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]!total_paid)
   lblInvoiceTotalAndPaid.text = "  Invoice Total: " & modUtil.Money_Format(items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]!total_bill)
   lblInvoiceTotalAndPaid.text &= "   Paid: " & modUtil.Money_Format(items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]!total_paid) & "   "
   lblInvoiceTotalAndPaid.Visible = True
   With lblInvoiceOwing
      .text = "Total Owing " & modUtil.Money_Format(items_Today_Or_Unpaid[cvwItemsTodayOrUnpaid.Item.key]!due)
      .Font.Bold = False
      .Foreground = Color.Black
      .Border = Border.Plain
   End With
   For Each Item_Billed In Items
      If Item_Billed!fk_invoice = fk_invoice Then
         gvwItemsBIlled.Rows.count = onrow_items + 1
         gvwItemsBIlled[onrow_items, 0].text = Trim(Item_Billed!mbs_item & " " & Item_Billed!ama_item & " " & Item_Billed!user_item)
         gvwItemsBIlled[onrow_items, 1].text = Item_Billed!descriptor_brief
         gvwItemsBIlled[onrow_items, 2].text = Item_Billed!amount
         gvwItemsBIlled[onrow_items, 4].text = Item_Billed!billing_type
         Try gvwItemsBIlled[onrow_items, 5].text = Item_Billed!amount_gst
         Inc onrow_items
      Endif
   Next
   gvwPayments.Clear()                                                        'clear the payments grid
   EditArea_Notify_Data_Change(False)                                         'don't allow access to the invoice items grid
   Hbox_InvoiceGrid.Enabled = False
   gvwPayments.Enabled = True
   
End

Public Sub Batching_Show_Vouchers_In_Claim()
   
   Columnview99.MoveCurrent()
   Columnview99.Item.Selected = True
Catch
   Return
   
End

Public Sub txtSearch_GotFocus()
   
   Debug "got focus"
   txtSearch.Text = ""
   Last.BackGround = Color.rgb(95, 255, 175)
   lblSearchAccounts.Foreground = Color.Black
   txtSearch.Clear()
   With columnview99
      .clear
      .Columns.count = 2
   End With
   Select Case TabStrip1.Index
      Case cTab_Batching
      Case cTab_ScheduleFees
         combobox1.index = -1
         txtFilter.text = ""                                   'don't allow filter on the brief descriptor whilst searching
         iTimer_Search_Mode = cTimer_SearchMode_FeeSchedule
   End Select
   
End

Public Sub txtSearch_KeyRelease()
   
   Debug "key release"
   timer_count = 0
   timer1.Enabled = True
   timer1.Start
   
End

Public Sub txtSearch_LostFocus()
   
   Debug "lost focus"
   Last.BackGround = Color.White
   timer1.stop
   
End

Private Sub EditArea_Notify_Data_Change(bFlag As Boolean)
   
   If bFlag Then
      VBox_EditArea_Outer.Padding = 1
   Else
      VBox_EditArea_Outer.Padding = 0
   End If
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   If bexit Then Return
   If Not EditAreaTextBox_ExcludeKeys(key.code, Last.tag) Then
      Stop Event
      Return
   End If
   Select Case key.Code
      Case key.down
         If columnview1.Visible Then
            bexit = True
            With columnview1
               .MoveFirst
               .Item.Selected = True
               .SetFocus()
            End With
            bexit = False
         End If
      Case key.return
         Select Case Last.tag
            Case "reference details", "date"
               gvwItemsBIlled.row = 0
               gvwItemsBIlled.Column = 0
               
         End Select
   End Select
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   bKeyValid = True
   Select Case Tag
      Case "date"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case "notes", "payer search", "reference details"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_SQLCrash, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
         
      Case "payer search"
         'user has clicked on the textbox where you can search for a payer (organisation or person)
         bExit = True
         textlabelPayer.text = ""
         rbInvoiceToNotUsed.value = True                'switches off radio buttons for patient, medicare and veterans
         rbInvoiceOrganisation.value = True
         rbInvoiceToOther.value = True
         bExit = False
         iTimer_Search_Mode = cTimer_SearchMode_Payer
         With columnview1
            .top = Last.Parent.parent.top + Last.height
            .left = Last.Parent.left
            .width = textlabelPayer.Width
            .Visible = False
            .Columns.count = 4
         End With
   End Select
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.White
   timer1.stop
   
End

Public Sub EditArea_Textbox_KeyRelease()
   
   If bExit Then Return
   Select Case Last.tag
      Case "payer search"
         timer_count = 0
         timer1.Enabled = True
         timer1.Start
   End Select
   
End

Public Sub EditArea_TextBox_Change()
   
   If Bexit Then Return
   Select Case Last.tag
      Case "find account"
         Return
      Case "payer search"
         If Trim(Last.text) = "" Then
            textlabelPayer.text = ""
         Endif
   End Select
   EditArea_Notify_Data_Change(True)
   
End

Public Sub Account_Institutional_Display()
   
End

Public Sub Account_Patient_Display(Optional bFromSearchingAccounts As Boolean = False)
   '----------------------------------------------------------------------------------------
   ' columnview2:
   ' This is the list of patient's which user has searched for on the accounts tab
   ' the patient collection is set in columnview2_dblclick()
   ' and  gives us this stuff:
   ' patient name (have this) and hence fk_patient
   ' date as visit_date
   ' duration (not displayed)
   ' seen by (dr combo) as staff_provider_service_title, wholename match combo text
   ' location combo as branch (match combo text)
   ' Invoice to (patient/medicare/veteran/other)
   ' Find and display the payer
   ' Reference (not yet in the back end)
   ' Items: item/description/fee/gap/rate/gst
   ' fk_item_billed (is there as pk_items_billed)
   ' have fk_invoice, billing_type, fk_lu_billing_type, mbs_item etc, descriptor
   ' & descriptor_brief, gst_rate, percentage_fee_rule
   ' also have fk_staff_invoicing and associated datae, patient details,
   ' but not the medicare numbers etc.
   '-----------------------------------------------------------------------------------------
   
   'EditArea_Clear
   cvwItemsTodayOrUnpaid.Clear() 
   AccountHistory_Clear
   If TabStrip2.index <> cTab_Visits_And_Payments Then 
      TabStrip2.index = cTab_Visits_And_Payments
      Wait
   End If   
   If bFromSearchingAccounts Then
      Patient = Patients[sPatient_Collection_Key]
   Else
      If cmbQuickView.index <> -1 Then   
         Patient = Unbilled_Consultations[sPatient_Collection_Key]
         fk_appointment = Unbilled_Consultations[sPatient_Collection_Key]!pk
         fk_staff = Unbilled_Consultations[sPatient_Collection_Key]!fk_staff
         For Each Staff_Member In staff
            If Staff_Member!fk_staff = fk_staff Then
               cmbSeenBy.index = cmbSeenBy.Find(Staff_Member!wholename)
               Break
            Endif
         Next
         lblInvoiceDate.text = "Date Seen"
      Else
         Patient = Patients[sPatient_Collection_Key]
         lblInvoiceDate = "Invoice Date"
      End If   
   End If   
   ' If cmbInvoices.index < 3 Then ' And cmbInvoiceComments.index <> -1 
   '    If cmbInvoices.index <> -1 Then   
   '       Patient = Unbilled_Consultations[sPatient_Collection_Key]
   '    Else
   '       Patient = Patients[sPatient_Collection_Key]
   '    End If   
   ' Else
   '    Patient = Patients[sPatient_Collection_Key]
   ' Endif
   
   fk_patient = Patient!fk_patient
   Try fk_lu_default_billing_level = patient!fk_lu_default_billing_level            'if no billling level in backend
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private  'default to private $$
   ' If fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill Then
   '    If Not IsNull(form_billingcards.Veteran_Card_Type()) Then     'they must be an entitled veteran in some capacity
   '       rbInvoiceToVeterans.Value = True
   '       rbInvoiceToMedicare.Value = False   
   '    Else
   '       rbInvoiceToMedicare.Value = True
   '       rbInvoiceToVeterans.Value = False   
   '    Endif
   ' Else
   '    If fk_lu_default_billing_level = const.Billing_Default_Level_MedicoLegal Then
   '       rbInvoiceToOther.Value = True
   '    Else
   '       rbInvoiceToPatient.Value = True
   '       If IsNull(form_billingcards.Veteran_Card_Type()) Then
   '          rbInvoiceToVeterans.Enabled = False 
   '       Endif
   '    Endif
   ' Endif
   Invoice_To_Set_Billing_To_Details(patient)
   bExit = True                                                                     'prevent textbox events firing
   'txtSearchInvoices.text = Patient!wholename
   currentconsult = New CConsult(patient, const.ConsultType_ClericalNote)
   form_patient_photo.Init(currentconsult)
   form_billingcards.Display_Patient_Data(currentconsult)                                  'load billing defaults into embedded form
   txtBirthdate.text = Format(Patient!birthdate, "dd/mm/yyyy")
   txtAddress.text = Patient!street1 & Trim(" " & patient!street2) & " " & patient!town & " " & patient!postcode
   txtAge.text = Patient!age_display
   lblPatient_Show_Details(patient)
   With txtpatient
      .text = Patient!wholename
      .pos = 0
   End With
   
   fk_payer_branch = Null
   fk_payer_person = Null
   Try Payer_Get(Patient)                                                           'show payer if exists
   VBox_EditArea_Outer.Enabled = True
   gvwItemsBIlled.Enabled = True
   iAccountDisplayMode = const.Billing_Accounts_Paid_Today_And_Unpaid_All
   ' Items_Today_Or_Unpaid = Reload_Billed_Items(cvwItemsTodayOrUnpaid, Items_Today_Or_Unpaid)      'show this patients unpaid consultations or those put through today
   Items_Today_Or_Unpaid_Reload
   Invoice_New()
   Try txtDate.text = Format(patient!begin, "dd/mm/yyyy")
   bExit = False
   
End

Public Sub Account_Patient_Display_ian(Optional bFromSearchingAccounts As Boolean = False)
   '----------------------------------------------------------------------------------------
   ' columnview2:
   ' This is the list of patient's which user has searched for on the accounts tab
   ' the patient collection is set in columnview2_dblclick()
   ' and  gives us this stuff:
   ' patient name (have this) and hence fk_patient
   ' date as visit_date
   ' duration (not displayed)
   ' seen by (dr combo) as staff_provider_service_title, wholename match combo text
   ' location combo as branch (match combo text)
   ' Invoice to (patient/medicare/veteran/other)
   ' Find and display the payer
   ' Reference (not yet in the back end)
   ' Items: item/description/fee/gap/rate/gst
   ' fk_item_billed (is there as pk_items_billed)
   ' have fk_invoice, billing_type, fk_lu_billing_type, mbs_item etc, descriptor
   ' & descriptor_brief, gst_rate, percentage_fee_rule
   ' also have fk_staff_invoicing and associated datae, patient details,
   ' but not the medicare numbers etc.
   '-----------------------------------------------------------------------------------------
   
   'EditArea_Clear
   cvwItemsTodayOrUnpaid.Clear() 
   AccountHistory_Clear
   If TabStrip2.index <> cTab_Visits_And_Payments Then 
      TabStrip2.index = cTab_Visits_And_Payments
      Wait
   End If
   If IsNull(patients) Then Return
   Patient = Patients[sPatient_Collection_Key]
   If IsNull(patient) Then Return
   If Not bFromSearchingAccounts Then
      If cmbQuickView.index <> -1 Then   
         fk_appointment = patient!pk
         fk_staff = patient!fk_staff
         For Each Staff_Member In staff
            If Staff_Member!fk_staff = fk_staff Then
               cmbSeenBy.index = cmbSeenBy.Find(Staff_Member!wholename)
               Break
            Endif
         Next
      Else
         lblInvoiceDate = "Invoice Date"
      End If   
   End If   
   ' If cmbInvoices.index < 3 Then ' And cmbInvoiceComments.index <> -1 
   '    If cmbInvoices.index <> -1 Then   
   '       Patient = Unbilled_Consultations[sPatient_Collection_Key]
   '    Else
   '       Patient = Patients[sPatient_Collection_Key]
   '    End If   
   ' Else
   '    Patient = Patients[sPatient_Collection_Key]
   ' Endif
   
   fk_patient = Patient!fk_patient
   Try fk_lu_default_billing_level = patient!fk_lu_default_billing_level            'if no billling level in backend
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private  'default to private $$
   ' If fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill Then
   '    If Not IsNull(form_billingcards.Veteran_Card_Type()) Then     'they must be an entitled veteran in some capacity
   '       rbInvoiceToVeterans.Value = True
   '       rbInvoiceToMedicare.Value = False   
   '    Else
   '       rbInvoiceToMedicare.Value = True
   '       rbInvoiceToVeterans.Value = False   
   '    Endif
   ' Else
   '    If fk_lu_default_billing_level = const.Billing_Default_Level_MedicoLegal Then
   '       rbInvoiceToOther.Value = True
   '    Else
   '       rbInvoiceToPatient.Value = True
   '       If IsNull(form_billingcards.Veteran_Card_Type()) Then
   '          rbInvoiceToVeterans.Enabled = False 
   '       Endif
   '    Endif
   ' Endif
   Invoice_To_Set_Billing_To_Details(patient)
   bExit = True                                                                     'prevent textbox events firing
   'txtSearchInvoices.text = Patient!wholename
   currentconsult = New CConsult(patient, const.ConsultType_ClericalNote)
   form_patient_photo.Init(currentconsult)
   form_billingcards.Display_Patient_Data(currentconsult)                                  'load billing defaults into embedded form
   txtBirthdate.text = Format(Patient!birthdate, "dd/mm/yyyy")
   txtAddress.text = Patient!street1 & Trim(" " & patient!street2) & " " & patient!town & " " & patient!postcode
   txtAge.text = Patient!age_display
   lblPatient_Show_Details(patient)
   With txtpatient
      .text = Patient!wholename
      .pos = 0
   End With
   
   fk_payer_branch = Null
   fk_payer_person = Null
   Try Payer_Get(Patient)                                                           'show payer if exists
   VBox_EditArea_Outer.Enabled = True
   gvwItemsBIlled.Enabled = True
   iAccountDisplayMode = const.Billing_Accounts_Paid_Today_And_Unpaid_All
   ' Items_Today_Or_Unpaid = Reload_Billed_Items(cvwItemsTodayOrUnpaid, Items_Today_Or_Unpaid)      'show this patients unpaid consultations or those put through today
   Items_Today_Or_Unpaid_Reload
   Invoice_New()
   Try txtDate.text = Format(patient!begin, "dd/mm/yyyy")
   bExit = False
   
End

Public Sub Account_Patient_Display_old()
   '----------------------------------------------------------------------------------------
   ' columnview2:
   ' This is the list of patient's which user has searched for on the accounts tab
   ' the patient collection is set in columnview2_dblclick()
   ' and  gives us this stuff:
   ' patient name (have this) and hence fk_patient
   ' date as visit_date
   ' duration (not displayed)
   ' seen by (dr combo) as staff_provider_service_title, wholename match combo text
   ' location combo as branch (match combo text)
   ' Invoice to (patient/medicare/veteran/other)
   ' Find and display the payer
   ' Reference (not yet in the back end)
   ' Items: item/description/fee/gap/rate/gst
   ' fk_item_billed (is there as pk_items_billed)
   ' have fk_invoice, billing_type, fk_lu_billing_type, mbs_item etc, descriptor
   ' & descriptor_brief, gst_rate, percentage_fee_rule
   ' also have fk_staff_invoicing and associated datae, patient details,
   ' but not the medicare numbers etc.
   '-----------------------------------------------------------------------------------------
   
   EditArea_Clear()
   '
   Patient = patients[sPatient_Collection_Key]
   fk_patient = Patient!fk_patient
   Try fk_lu_default_billing_level = patient!fk_lu_default_billing_level            'if no billling level in backend
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private  'default to private $$
   If fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill Then
      If Not IsNull(form_billingcards.Veteran_Card_Type()) Then     'they must be an entitled veteran in some capacity
         rbInvoiceToVeterans.Value = True
      Else
         rbInvoiceToMedicare.Value = True
      Endif
   Else
      If fk_lu_default_billing_level = const.Billing_Default_Level_MedicoLegal Then
         rbInvoiceToOther.Value = True
      Else
         rbInvoiceToPatient.Value = True
      Endif
   Endif
   Invoice_To_Set_Billing_To_Details(patient)
   bExit = True                                                                     'prevent textbox events firing
   txtSearchInvoices.text = Patient!wholename
   currentconsult = New CConsult(patient, const.ConsultType_ClericalNote)
   form_billingcards.Display_Patient_Data(currentconsult)                                  'load billing defaults into embedded form
   txtBirthdate.text = Format(Patient!birthdate, "dd/mm/yyyy")
   txtAddress.text = Patient!street1 & Trim(" " & patient!street2) & " " & patient!town & " " & patient!postcode
   txtAge.text = Patient!age_display
   lblPatient_Show_Details(patient)
   With txtpatient
      .text = Patient!wholename
      .pos = 0
   End With
   fk_payer_branch = Null
   fk_payer_person = Null
   Try Payer_Get(Patient)                                                           'show payer if exists
   VBox_EditArea_Outer.Enabled = True
   gvwItemsBIlled.Enabled = True
   iAccountDisplayMode = const.Billing_Accounts_Unpaid
   ' cvwItemsTodayOrUnpaid_Refresh()                                                         'show this patients unbilled consultations
   Invoice_New()
   bExit = False
   
End

Public Sub lblPatient_Show_Details(Patient As Collection)
   
   tlPatientDetails.text = Patient!wholename & " " & Format(Patient!birthdate, "dd/mm/yyyy") & " Age:" & Patient!age_display
   tlPatientDetails.text &= "<BR>" & Patient!street1 & Trim(" " & patient!street2) & " " & patient!town & " " & patient!postcode
   
End

Public Sub Item_Billed_Display()
   
End

Public Sub TabStripBilling_Click()
   '-------------------------------------------------------
   'User has clicked on the tabstip containing either
   'the unbilled patients already seen or the tab to allow
   'staff to search for a patient's accounts
   '-------------------------------------------------------
   
   If BExit Then Return
   Select Case Last.index
      Case cTab_Visits_And_Payments
         
         '   cvwUnBilled.SetFocus()
      Case cTabAccountHistory
         '  txtFindPatient.SetFocus() 'and clear the edit area
   End Select
   
End

Public Sub Payer_Search()
   '-----------------------------------------------------------------
   'User is typing in search textbox, first try and find organisation
   '-----------------------------------------------------------------
   
   Dim person As Collection
   
   timer1.Stop
   If Trim(txtFindPayer.text) = "" Then
      columnview1.Visible = False
      Return
   End If
   branches = modContactsDBI.Organisations_Get(Trim(txtFindPayer.text))
   columnview1.Clear
   If branches.count > 0 Then
      For Each branch In branches
         Columnview1.Add(branch!pk_view, 0)
         Columnview1[branch!pk_view][0] = Branch!organisation
         Columnview1[branch!pk_view][1] = Branch!branch
         Columnview1[branch!pk_view][2] = Trim(Branch!street1 & " " & Branch!street2)
         Columnview1[branch!pk_view][3] = Branch!suburb & " " & Branch!postcode
      Next
      If branches.count > 1 Then
         With Columnview1
            .Visible = True
            .Raise
            .tag = "payer org"
         End With
      Else
         Organisation_Select(branch!pk_view)
      End If
   Else
      persons = modContactsDBI.Person_Get_By_Surname(txtFindPayer.Text)
      For Each person In persons
         Columnview1.Add(person!pk_view, 0)
         Columnview1[person!pk_view][0] = person!wholename
         Columnview1[person!pk_view][1] = person!street1 & " " & person!street2
         Columnview1[person!pk_view][2] = person!suburb & " " & person!postcode
      Next
      If persons.count > 1 Then
         With Columnview1
            .Visible = True
            .Raise
            .tag = "payer person"
         End With
      Else
         If persons.count <> 0 Then Payer_Person_Select(person!pk_view)
      End If
   Endif
   
End Sub

Public Sub Organisation_Select(Optional branch_pk As Variant)
   'Really a branch select FIXME consistancy throughout entire project
   
   Dim c As Collection
   
   bexit = True
   If IsNull(branch_pk) Then
      If IsNull(columnview1.Item) Then
         Log.ErrorMsg("FRecordVisit.Organisation_Select: columnview1.Item is NULL")
         Error.Raise("No available selection for payer columnview1")
      Endif
      columnview1.MoveCurrent()
      branch_pk = columnview1.Item.Key
   Endif
   c = branches[branch_pk]
   textlabelPayer.text = c!organisation & "<BR>"
   textlabelPayer.text &= c!branch & "<BR>"
   textlabelPayer.text &= Trim(c!street1 & " " & c!street2) & "<BR>"
   textlabelPayer.text &= c!town & " " & c!postcode
   columnview1.Visible = False
   txtFindPayer.text = ""
   fk_payer_branch = c!fk_branch
   Workcover_Show_Claims   'now get workcover claims, most 'others' will be workcover
   txtReferenceDetails.SetFocus()
Finally
   bexit = False
   
End

Public Sub Workcover_Show_Claims()
   'Find and display any active workcover claims
   
   Dim WCC As Collection
   Dim sMsg As String
   
   cvwWorkcoverClaims.Clear
   workcover_claims = modWorkCoverDBI.Claims_Get_Distinct(fk_patient)
   If workcover_claims.count Then   
      For Each WCC In workcover_claims
         cvwWorkcoverClaims.Add(WCC!identifier, 0)
         cvwWorkcoverClaims[WCC!identifier][0] = WCC!identifier   
         If IsNull(WCC!claim_number) Then
            cvwWorkcoverClaims[WCC!identifier][1] = "claim?"
            If Not modAdminDBI.Has_User_Seen_Tip("FRecordVisit.WorkcoverAddingClaimNumbers") Then 
               sMsg = "<P>This patient's workcover claims are missing one or more claim numbers.</P>"
               "<P>Did you know that clerical users can add these numbers via the 'Patient Summaries, Forms, Results Tab?</P>"
               "<P>Once you have selected this tab, just search for the patient and by selecting the workcover tab,  you can "
               "click on and edit any visit in a claim, and type in the claim number. You will not be permitted of course to "
               "change any clinical details. When finished, just click the Save button.</P>"
               "Next time your bill the patient, the claim number will appear in the list.</P>"
               With FUsageTip
                  .Init("Updating a Workcover Claim Number", "FRecordVisit.WorkcoverAddingClaimNumbers", sMsg)
                  .ShowModal()
               End With  
            End If
         Else
            cvwWorkcoverClaims[WCC!identifier][1] = WCC!claim_number
         End If   
      Next
      With cvwWorkcoverClaims
         .SetFocus
         .Item.Selected = True   
      End With
      VBox_Workcover_Claims.Visible = True   
   End If   
   
End

Public Sub Payer_Person_Select(Optional person_pk As Variant)
   'Really a branch select FIXME consistancy throughout entire project
   
   Dim c As Collection
   
   bexit = True
   If IsNull(person_pk) Then
      If IsNull(columnview1.Item) Then
         Log.ErrorMsg("FRecordVisit.Payer_Person_Select: columnview1.Item is NULL")
         Error.Raise("No available selection for payer columnview1")
      Endif
      columnview1.MoveCurrent()
      person_pk = columnview1.Item.Key
   Endif
   c = persons[person_pk]
   textlabelPayer.text = c!wholename & "<BR>"
   textlabelPayer.text &= Trim(c!street1 & " " & c!street2) & "<BR>"
   textlabelPayer.text &= c!town & " " & c!postcode
   columnview1.Visible = False
   Debug "setting fk_payer_person to "; c!fk_person
   fk_payer_person = c!fk_person
   txtFindPayer.text = ""
   txtReferenceDetails.SetFocus()
Finally
   bexit = False
   
End

Public Sub txtPayment_GotFocus()
   
   cmbPaymentMethods.Visible = False
   
End

Public Function Valid_Invoice_Items() As Boolean
   '--------------------------------------------------
   'Validates if the item data on the invoice is valid
   '--------------------------------------------------
   
   If IsNull(fk_patient) Then
      Message.Info("Please select a valid patient")
      Return
   Endif
   If Trim(txtDate.text) = "" Or Not IsDate(Trim(txtDate.text)) Then
      txtDate.SetFocus()
      txtDate.Background = Color.rgb(95, 255, 175)
      Return
   Endif
   If Not gvwItemsBIlled_Data_Valid() Then
      Message.Info("Invalid item number or missing fee amount")
      Return
   Endif
   If cmbSeenBy.Text = "Not Selected" Then
      Message.Info("You must select a doctor")
      Return
   Endif
   Return True
   
End

Public Sub Valid_Payment() As Boolean
   '---------------------------------------------------------
   'If the account or the consultation of today is being paid
   'make sure there actually is paid data and if only part of
   'the invoice is being paid off - prompt the user.
   '---------------------------------------------------------
   
   Dim grid_row As Integer
   Dim total As Float
   Dim sMsg As String
   
   Message.Title = "Payment of Invoice"
   For grid_row = 0 To gvwPayments.Rows.Max
      If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then            'if have an amount
         If gvwPayments[grid_row, cGridColumnPayments_PaymentMethod].text = "" Then
            gvwPayments.Row = grid_row
            gvwPayments.Column = cGridColumnPayments_PaymentMethod
            Message.Info("Please enter type of payment.\n\n")
            Return
         Endif
         total = total + CFloat(Val(Replace(gvwPayments[grid_row, cGridColumnPayments_Amount].text, "$", "")))
      Else
         If grid_row = 0 Then
            gvwPayments.Row = 0
            gvwPayments.Column = 0
            Message.Info("Please enter amount of payment.\n\n")
            Return
         End If
         
      End If
   Next
   Return True
   
End

Public Sub HBox_PaymentGrid_Leave()
   
   gvwPayments_HideProperty
   
End

Public Sub pnlToolButtons_Leave()
   
   tbUniversal.Enabled = False
   
End

Public Sub Invoice_To_Set_Billing_To_Details(patient_collection As Collection)
   '-----------------------------------------------------------------------------------
   'sets the appropriate radio buttons to indicate who pays
   'and gets the responsible payer.
   'patient_collection = either Unbilled_consultation collection or Patient collection
   'Called by Patient_Unbilled_Consultation_display()
   '          Account_Patient_Display()a
   '--------------------------------------------------------------------------------- -
   
   Try fk_lu_default_billing_level = patient_collection!fk_lu_default_billing_level
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private
   Try Payer_Get(patient_collection)
   bExit = True
   Select Case fk_lu_default_billing_level
      Case const.Billing_Default_Level_BulkBill
         If patient_collection!veteran_number <> "" Then
            With rbInvoiceToVeterans
               .value = True               'leave medicare enabled as could be partial veteran
               .Enabled = True   
            End With
            With rbInvoiceToMedicare
               .Value = False 
               .Enabled = False  
            End With
            tbUniversal.text = "Veterans Voucher"
         Else
            With rbInvoiceToMedicare
               .value = True
               .Enabled = True   
            End With
            rbInvoiceToVeterans.Enabled = False 
            tbUniversal.text = "Medicare Voucher"
         Endif
      Case const.Billing_Default_Level_Private
         rbInvoiceToPatient.value = True
         tbUniversal.text = "Print Account"
         rbInvoiceToMedicare.Enabled = True             'so can switch to this if needs be
      Case const.Billing_Default_Level_HealthCareCardConcession
         rbInvoiceToPatient.value = True
         tbUniversal.text = "Print Account"
         rbInvoiceToMedicare.Enabled = True 
      Case const.Billing_Default_Level_PensionerConcession
         rbInvoiceToPatient.value = True
         tbUniversal.text = "Print Account"
         rbInvoiceToMedicare.Enabled = True 
      Case const.Billing_Default_Level_MedicoLegal
         rbInvoiceToPatient.value = True
         tbUniversal.text = "Print Account"
   End Select
   If patient_collection!veteran_number = "" Then
      rbInvoiceToVeterans.Enabled = False 
   Endif
   bexit = False
   
End

Public Sub pnlToolButtons_Enter()
   '---------------------------------------------------------------------
   'Enable or disable buttons appropriately as per the edit area contents
   '---------------------------------------------------------------------
   
   Dim fee As String
   Dim payment As String
   
   fee = Right(lblInvoiceOwing.text, Len(lblInvoiceOwing.text) - InStr(lblInvoiceOwing.text, " $"))
   payment = Right(lblPaymentTotal.text, Len(lblPaymentTotal.text) - InStr(lblPaymentTotal.text, " $"))
   
   If fee = payment And fee <> "" And payment <> "" Then
      With tbUniversal
         .text = "Print Receipt"
         .tag = "print receipt"
         .Enabled = True
      End With
      tbSaveNoPrint.Enabled = True
      tbSaveNoPrint.text = "Receipt No Print"
      Return
   Endif
   If fee = "" And payment = "" Then
      tbSaveNoPRint.Enabled = False
      tbNewInvoice.Enabled = True
      tbUniversal.Enabled = False
      Return
   Endif
   If fee <> "" And payment = "" Then
      If rbInvoiceToMedicare.value = True Or rbInvoiceToVeterans.value = True Then
         If rbInvoiceToMedicare.value = True Then
            tbUniversal.Text = "Medicare Voucher"
         Else
            tbUniversal.text = "Veterans Voucher"
         Endif
         tbUniversal.tag = "print voucher"
         tbUniversal.Enabled = True
         tbSaveNoPrint.Enabled = True
         tbSaveNoPrint.Text = "Account No Print"
      Else
         With tbUniversal
            .text = "Print Account"
            .tag = "print account"
            .Enabled = True
         End With
         tbSaveNoPrint.Enabled = True
         tbSaveNoPrint.Text = "Account No Print"
         Return
      End If
   Endif
   If fee <> "" And Payment <> "" Then
      With tbUniversal
         .text = "Print Account"
         .tag = "print account"
         .enabled = True
      End With
      tbSaveNoPrint.Enabled = True
      tbSaveNoPrint.Text = "Account No Print"
   End If
   
End

Public Sub combobox1_Click()
   'Combobox clicked on tabs otherthan the invoices tab
   
   If bexit Then Return
   Select Case TabStrip1.Index
      Case cTab_Invoices_Receipts
         lblSearchAccounts.Foreground = Color.LightGray
         Reload()
      Case cTab_Banking
      Case cTab_Batching
         BulkBilling_ShowClaims
      Case cTab_ScheduleFees
         txtSearch.text = ""
         txtFilter.text = ""
         Fee_Schedule_Reload()
   End Select
   
End

Public Sub comboBox1_Load()
   
   combobox1.Clear()
   bExit = True
   Select Case TabStrip1.Index
      Case cTab_Invoices_Receipts
         combobox1.Add("All Unbilled Consultations", 0)
         combobox1.Add("Unbilled  Consultations Today", 1)
         combobox1.Add("Accounts Overdue 1 Month", 2)
         combobox1.Add("Accounts Overdue 2 Month", 3)
         combobox1.Add("Accounts Overdue > 3 Months", 4)
         combobox1.Add("Accounts - Institutional Payers", 5)
      Case cTab_Banking
         combobox1.Index = 0
      Case cTab_Batching
         combobox1.Add("All Bulk Billed Claims", 0)
         combobox1.Add("Medicare Bulk Bill Claims", 1)
         combobox1.Add("Veteran Bulk Bill Claims", 2)
      Case cTab_Reports
         modUtilGUI.LoadCombo(combobox1, staff, "wholename")
         combobox1.Add("All Staff", 0)
         combobox1.index = cmbSeenBy.Index  'most likely want to report on the same doctor being billed.
      Case cTab_ScheduleFees
         combobox1.Add("Brief Descriptors", 0)
         combobox1.Add("MBS Item Numbers", 1)
         combobox1.Add("AMA Item Numbers", 2)
         combobox1.Add("User Defined Item Numbers", 3)
   End Select
   bExit = False
   
End

Public Sub txtPayment_KeyPress()
   
   If Not (modUtilGUI.AllowKeys(const.allowkeys_money, key.code) Or modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, Key.Code)) Then
      Stop Event
   End If
   
End

Public Sub TabStrip1_Click()
   
   Try Hsplit_Main.Layout = Settings["FRecordVisit/Tabstrip1_" & Str(TabStrip1.index) & ".HSplit_Main.Layout", [1, 4]]
   comboBox1_Load()
   txtSearch.text = ""
   Select Case TabStrip1.index
      Case cTab_Invoices_Receipts
         DateChooser1.visible = False
         VBox_ForOtherTabs.Visible = False
         'VBox_Invoices.Visible = True
         VBox_Accounts.Visible = True   
         Hbox_Filter.Visible = True
         Hbox_Period.Visible = False
         bexit = True
         bexit = False
         Return
      Case cTab_Batching
         '-----------------------------------------------------------------------
         'User has clicked on the medicare batching tab
         'Default to medicare claims in the list and to prepare a medicare claim
         '----------------------------------------------------------------------
         DateChooser1.visible = False
         Hbox_Period.Visible = False
         ' VBox_Invoices.Visible = False
         VBox_Accounts.Visible = False  
         VBox_ForOtherTabs.Visible = True
         gvwFeeScheduleItems.Visible = False
         columnview99.Visible = True
         Hbox_Filter.Visible = True
         combobox1.Visible = True
         HBox_Search.visible = False
         lblFilter.Text = "Filter Batch No. "
         lblmeasure.text = "Filter Batch No. "
         modEditAreaHelpers.Resize_labels(VBox_ForOtherTabs, lblmeasure)
         If IsNull(form_batching) Then
            With form_batching = New FBulkBillBatching(Vbox_Batching)
               .Init(staff, clinics)
            End With
         Endif
         With columnview99
            .clear
            .Columns.count = 2
            .Header = False
         End With
         bexit = True
         combobox1.index = 0
         bexit = False
         BulkBilling_ShowClaims()
      Case cTab_Reports
         Hbox_Filter.Visible = False
         VBox_Accounts.Visible = False  
         VBox_ForOtherTabs.Visible = True
         gvwFeeScheduleItems.Visible = False
         columnview99.Visible = True          'generic columnview
         DateChooser1.visible = True
         Hbox_Period.visible = True
         VBox_Accounts.Visible = False     
         VBox_ForOtherTabs.Visible = True
         'Report_Show_HTML(Days_Takings_Create_HTML())
         Report_Show_HTML(Day_List_Create_HTML())
         combobox1.Visible = True
         HBox_Search.Visible = False
         modEditAreaHelpers.Resize_labels(VBox_ForOtherTabs, lblmeasure)
         lblColumnviewHeading.Visible = False
         columnview99_Refresh()
         
      Case cTab_ScheduleFees
         VBox_Accounts.Visible = False  
         Hbox_Filter.Visible = True
         lblFilter.Text = "Filter"
         HBox_Search.Visible = True 
         Hbox_Period.Visible = False
         VBox_ForOtherTabs.Visible = True
         DateChooser1.visible = False
         gvwFeeScheduleItems.visible = True
         columnview99.Visible = False
         VBox_Accounts.Visible = False  
         VBox_ForOtherTabs.Visible = True
         If IsNull(form_feeschedule) Then
            With form_feeschedule = New FDescriptorsBrowser(Vbox_FeeSchedule)
               .Init()
            End With
            combobox1.index = cAll_ItemNumbers 'loads the fee schedule
            combobox1.Visible = True
            HBox_Search.Visible = True
            lblFilter.Text = "Filter "
            Try gvwFeeScheduleItems.font = Font[Settings["FRecordVisit_Billing_FeeSchedule/gvwFeeScheduleItems.font"]]
            gvwFeeScheduleItems.row = 0
            gvwFeeScheduleItems.SetFocus()
            gvwFeeScheduleItems.Rows[0].Selected = True
            
         End If
         Wait
         
      Case cTab_Banking
         DateChooser1.Visible = False
         Hbox_Period.Visible = False
         With columnview99
            .Visible = False
            .header = False
            .Clear
         End With
         Hbox_Filter.Visible = False
         gvwFeeScheduleItems.Visible = False
   End Select
   
End

Public Sub Day_List_Create_HTML(Optional for_date As Date = Now()) As String
   
   Dim patient_visits As Collection
   Dim visit As Collection
   Dim sHtml As String
   Dim Last_fk_invoice As Variant
   Dim ipatientCount As Integer
   Dim running_total As Float
   Dim payment_totals As New Float[7] 'use 1>6 = billing.lu_payment_method keys
   Dim running_total_gst As Float
   Dim payment_method As Collection
   Dim x As Integer
   Dim running_total_medicare As Float
   Dim running_total_veterans As Float
   Dim running_total_workcover As Float
   Dim total_consults_billed_to_Medicare As Integer
   Dim total_consults_billed_to_repat As Integer
   Dim total_consults_billed_to_workcover As Integer
   Dim invoices_others As New Collection
   
   sHtml = "<HTML><BODY><B><H3><p align='center'> Visits by Visit Date for " & Format(for_date, "dd/mm/yyyy") & " - " 
   sHtml &= " Patients Billed </B>%ipatientcount%</P>"
   sHtml &= "<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=0>"
   "<COL WIDTH=3%>"
   "<COL WIDTH=8%>"
   "<COL WIDTH=7>"
   "<COL WIDTH=2%>"
   "<COL WIDTH=5%>"
   "<COL WIDTH=5%>"
   "<COL WIDTH=2%>"
   "<COL WIDTH=3%>"
   "<COL WIDTH=3%>"
   sHtml &= "<TR VALIGN=TOP>" & day_list_html_row_template() & "</TR>"
   shtml = Replace(shtml, "%time%", "<B>Time</B>")
   shtml = Replace(shtml, "%patient%", "<B>Patient</B>")
   shtml = Replace(shtml, "%invoiceto%", "<B>Invoice To</B>")
   shtml = Replace(shtml, "%item%", "<B>Item</B>")
   shtml = Replace(shtml, "%item%", "<B>Notes</B>")
   shtml = Replace(shtml, "%amount%", "<B>Amount</B>")
   shtml = Replace(shtml, "%tax%", "<B>Tax</B>")
   shtml = Replace(shtml, "%paid%", "<B>Paid</B>") 
   shtml = Replace(shtml, "%paymentmethod%", "") 
   patient_visits = modBillingDBI.Day_List_Get(DateChooser1.value, modDBConnect.currentUser!fk_branch, modDBConnect.currentUser!fk_staff)
   For Each visit In patient_visits
      sHtml &= "<TR VALIGN=TOP>" & day_list_html_row_template() & "</TR>"
      If Last_fk_invoice <> visit!fk_invoice Then
         shtml = Replace(shtml, "%time%", Format(Time(visit!appointment_date), "hh:nn"))
         shtml = Replace(shtml, "%patient%", visit!wholename)
         If Not IsNull(visit!notes) Then
            shtml = Replace(shtml, "%notes%", visit!notes)
         Else
            shtml = Replace(shtml, "%notes%", "")
         End If   
         If Not IsNull(visit!account_to_name) Then
            invoices_others.Add(visit, invoices_others.count)  
         Endif
         Inc ipatientCount
         Last_fk_invoice = visit!fk_invoice
     Else
         shtml = Replace(shtml, "%time%", "")
         shtml = Replace(shtml, "%patient%", "") 
         shtml = Replace(shtml, "%notes%", "") 
      End If   
      If Not IsNull(visit!bulk_billing_type) Then
         shtml = Replace(shtml, "%invoiceto%", visit!bulk_billing_type)
         Select Case visit!fk_lu_bulk_billing_type
            Case const.BulkBilling_Type_Medicare
               running_total_medicare += modUtil.MoneyToFloat(visit!amount)
               If Last_fk_invoice <> visit!fk_invoice Then Inc total_consults_billed_to_Medicare
            Case const.BulkBilling_Type_Veteran
               running_total_veterans += modUtil.MoneyToFloat(visit!amount)
               If Last_fk_invoice <> visit!fk_invoice Then Inc total_consults_billed_to_repat
         End Select
         
      Else
         If Not IsNull(visit!account_to_name) Then
            If InStr(Lower(visit!descriptor_brief), "workcover") Then
               shtml = Replace(shtml, "%invoiceto%", visit!account_to_name & " (Workcover)")
            Else
               shtml = Replace(shtml, "%invoiceto%", visit!account_to_name)
            Endif
         Else
            shtml = Replace(shtml, "%invoiceto%", visit!billing_type) 
         Endif
         
      Endif
      shtml = Replace(shtml, "%item%", visit!item)
      shtml = Replace(shtml, "%amount%", visit!amount)
      running_total += modUtil.MoneyToFloat(visit!amount)
      
      If visit!paid = False Then
         shtml = Replace(shtml, "%paid%", "$0.00") 
         shtml = Replace(shtml, "%paymentmethod%", "") 
      Else
         shtml = Replace(shtml, "%paid%", visit!payment_amount)
         shtml = Replace(shtml, "%paymentmethod%", visit!payment_method)
         payment_totals[visit!fk_lu_payment_method] = payment_totals[visit!fk_lu_payment_method] + CFloat(Replace(visit!amount, "$", ""))
         
      End If  
      If IsNull(visit!amount_gst) Then  
         running_total_gst += modUtil.MoneyToFloat(visit!amount_gst)
         shtml = Replace(shtml, "%tax%", visit!amount_gst)
      Else
         shtml = Replace(sHtml, "%tax%", "")
      End If   
   Next
   shtml &= "</TABLE>"
   
   '---------------------------------------------------------------------------------------
   'Now add a table which summarizes amounts for Cash, Cheques, EFPos or EFT (direct debit)
   '---------------------------------------------------------------------------------------
   sHtml &= "<P><B>Total Money Taken</B></P>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=212>"
   "<COL WIDTH=208>"
   For Each payment_method In payment_methods
      Inc x                                  'billing.lu_payment_method keys 1>6
      shtml &= "<TR VALIGN=TOP>"
      shtml &= totals_html_row_template()
      shtml = Replace(shtml, "%payment_method%", payment_method!method)
      shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(payment_totals[x]))
      sHtml &= "</TR>"
   Next
   sHtml &= "</TABLE>"
   sHtml = Replace(sHtml, "%ipatientcount%", Str(ipatientcount))
   '------------------------------------------------------------------
   'Now add a table which summarizes amounts medicare and repatriation
   '------------------------------------------------------------------
   sHtml &= "<P><B>Consultations Invoiced (unpaid) </B></P>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=212>"
   "<COL WIDTH=208>"
   
   sHtml &= "<TR VALIGN=TOP>" & totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "Medicare")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(running_total_medicare))
   sHtml &= "</TR>"
   shtml &= totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "Veterans")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(running_total_veterans))
   sHtml &= "</TR>"
   For Each visit In invoices_others
      sHtml &= "<TR VALIGN=TOP>" & totals_html_row_template()
      shtml = Replace(shtml, "%payment_method%", visit!account_to_name)
      shtml = Replace(shtml, "%total_amount%", visit!total_bill)
      sHtml &= "</TR>"
   Next
   shtml &= "</TABLE></BODY></HTML>"
   Return sHtml
   
End

Public Function day_list_html_row_template() As String
   
   Return ""
   "<TD WIDTH=3%>"
   "   <P>%time%</P>"
   "</TD>"
   "<TD WIDTH=8%>"
   "   <P>%patient%</P>"
   "</TD>"
   "<TD WIDTH=7%>"
   "   <P>%invoiceto%</P>"
   "</TD>"
   "<TD WIDTH=2%>"
   "   <P>%item%</P>"
   "</TD>"
   "<TD WIDTH=3%>"
   "   <P>%notes%</P>"
   "</TD>"
   "<TD WIDTH=5%>"
   "   <P>%amount%</P>"
   "</TD>"
   "<TD WIDTH=2%>"
   "   <P>%tax%</P>"
   "</TD>"
   "<TD WIDTH=3%>"
   "   <P>%paid%</P>"
   "</TD>"
   "<TD WIDTH=3%>"
   "   <P>%paymentmethod%</P>"
   "</TD>"
   
End

Public Sub Days_Takings_Create_HTML(Optional for_date As Date = Now()) As String
   'creates html table of a days takings
   
   Dim monies_received As Collection
   Dim sHtml As String
   Dim sRow As String
   Dim amount As Collection
   Dim payment_method As Collection
   Dim payment_totals As New Float[7] 'use 1>6 = billing.lu_payment_method keys
   Dim running_total_gst As Float
   Dim running_total As Float
   Dim x As Integer
   
   monies_received = modBillingDBI.Receipts_Get_For_Day(for_date)
   sHtml = "<HTML><BODY><P><B>Summary of Receipts Taken on " & Format(for_date, "dd/mm/yyyy") & "</B></P>"
   If monies_received.count = 0 Then
      sHtml &= "No takings recorded for" & Format(for_date, "dd/mm/yyyy") & "</BODY></sHTML>"
      Return sHtml 
   Endif
   sHtml &= "<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=0>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   '------------------------------------------------------
   'now add a row for each money recieved
   'receipt no|Payer|payment type|Cheque Drawer|Amount|Tax
   '------------------------------------------------------
   sHtml &= "<TR VALIGN=TOP>" & takings_html_row_template() & "</TR>"
   shtml = Replace(shtml, "%receipt_no%", "<B>Receipt</B>")
   shtml = Replace(shtml, "%payer%", "<B>Payer</B>")
   shtml = Replace(shtml, "%item%", "<B>Item</B>")
   shtml = Replace(shtml, "%payment type%", "<B>Type</B>")
   shtml = Replace(shtml, "%drawer%", "<B>Cheque Drawer</B>")
   shtml = Replace(shtml, "%amount%", "<B>Amount</B>")
   shtml = Replace(shtml, "%tax%", "<B>Tax</B>")
   For Each amount In monies_received
      sHtml &= "<TR VALIGN=TOP>" & takings_html_row_template()
      sHtml = Replace(sHtml, "%receipt_no%", Str$(amount!fk_payments_received))
      If Not IsNull(amount!payer_details) Then
         If Not IsNull(amount!fk_payer_branch) Then
            sHtml = Replace(sHtml, "%payer%", amount!payer_organisation & " " & amount!payer_branch)
         End If
         If Not IsNull(amount!fk_payer_person) Then
            sHtml = Replace(sHtml, "%payer%", amount!payer_person_wholename)
         End If
      Else
         sHtml = Replace(sHtml, "%payer%", amount!patient_wholename)
      End If
      sHtml = Replace(sHtml, "%item%", amount!item)
      sHtml = Replace(sHtml, "%payment type%", amount!payment_method)
      sHtml = Replace(sHtml, "%drawer%", " ") 'FIXME
      sHtml = Replace(sHtml, "%amount%", modUtil.Money_Format(amount!amount))
      sHtml = Replace(sHtml, "%tax%", " ") 'FIXME put in gst
      sHtml &= "</TR>"
      payment_totals[amount!fk_lu_payment_method] = payment_totals[amount!fk_lu_payment_method] + CFloat(Replace(amount!amount, "$", ""))
      running_total += modUtil.MoneyToFloat(amount!amount)
      If amount!invoice_paid = True Then
         If Not IsNull(amount!item_billed_amount_gst) Then
            running_total_gst += modUtil.MoneyToFloat(amount!item_billed_amount_gst)
         Endif
      Endif
   Next
   shtml &= "</TABLE>"
   '---------------------------------------------------------------------------------------
   'Now add a table which summarizes amounts for Cash, Cheques, EFPos or EFT (direct debit)
   '---------------------------------------------------------------------------------------
   sHtml &= "<P><B>Totals</B></P>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=212>"
   "<COL WIDTH=208>"
   
   For Each payment_method In payment_methods
      Inc x                                  'billing.lu_payment_method keys 1>6
      shtml &= "<TR VALIGN=TOP>"
      shtml &= totals_html_row_template()
      shtml = Replace(shtml, "%payment_method%", payment_method!method)
      shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(payment_totals[x]))
      sHtml &= "</TR>"
   Next
   sHtml &= "</TABLE>"
   '------------------------------------
   'Now show the totals for GST and Cash
   '------------------------------------
   sHtml &= "<BR>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=212>"
   "<COL WIDTH=208>"
   sHtml &= "<TR VALIGN=TOP>" & totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "TOTAL GST")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(running_total_gst) & "<BR><BR>")
   sHtml &= "</TR>"
   sHtml &= "<TR VALIGN=TOP>" & totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "<B>TOTAL (Including GST)</B>")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(running_total))
   sHtml &= "</TR>"
   sHtml &= "</TABLE></BODY></HTML>"
   Return shtml
   
End

Public Sub Days_Takings_Create_HTML_old(Optional for_date As Date = Now()) As String
   'creates html table of a days takings
   
   Dim monies_received As Collection
   Dim sHtml As String
   Dim sRow As String
   Dim amount As Collection
   Dim Payment_Methods As Collection
   Dim payment_method As Collection
   Dim payment_totals As New Float[7] 'use 1>6 = billing.lu_payment_method keys
   Dim running_total_gst As Float
   Dim running_total As Float
   Dim x As Integer
   
   payment_methods = modBillingDBI.Payment_Methods_Get()
   monies_received = modBillingDBI.Receipts_Get_For_Day(for_date)
   sHtml = "<HTML><BODY><P><B>Summary of Receipts Taken on " & Format(for_date, "dd/mm/yyyy") & "</B></P>"
   If monies_received.count = 0 Then
      sHtml &= "No takings recorded for" & Format(for_date, "dd/mm/yyyy") & "</BODY></sHTML>"
      Return sHtml 
   Endif
   sHtml &= "<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=0>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   '------------------------------------------------------
   'now add a row for each money recieved
   'receipt no|Payer|payment type|Cheque Drawer|Amount|Tax
   '------------------------------------------------------
   sHtml &= "<TR VALIGN=TOP>" & takings_html_row_template() & "</TR>"
   shtml = Replace(shtml, "%receipt_no%", "<B>Receipt</B>")
   shtml = Replace(shtml, "%payer%", "<B>Payer</B>")
   shtml = Replace(shtml, "%payment type%", "<B>Type</B>")
   shtml = Replace(shtml, "%drawer%", "<B>Cheque Drawer</B>")
   shtml = Replace(shtml, "%amount%", "<B>Amount</B>")
   shtml = Replace(shtml, "%tax%", "<B>Tax</B>")
   For Each amount In monies_received
      sHtml &= "<TR VALIGN=TOP>" & takings_html_row_template()
      sHtml = Replace(sHtml, "%receipt_no%", Str$(amount!fk_payments_received))
      If Not IsNull(amount!payer_details) Then
         If Not IsNull(amount!fk_payer_branch) Then
            
            sHtml = Replace(sHtml, "%payer%", amount!payer_organisation & " " & amount!payer_branch)
         End If
         If Not IsNull(amount!fk_payer_person) Then
            sHtml = Replace(sHtml, "%payer%", amount!payer_person_wholename)
         End If
      Else
         sHtml = Replace(sHtml, "%payer%", amount!patient_wholename)
      End If
      sHtml = Replace(sHtml, "%payment type%", amount!payment_method)
      sHtml = Replace(sHtml, "%drawer%", " ") 'FIXME
      sHtml = Replace(sHtml, "%amount%", modUtil.Money_Format(amount!amount))
      sHtml = Replace(sHtml, "%tax%", " ") 'FIXME put in gst
      sHtml &= "</TR>"
      payment_totals[amount!fk_lu_payment_method] = payment_totals[amount!fk_lu_payment_method] + CFloat(Replace(amount!amount, "$", ""))
      running_total += modUtil.MoneyToFloat(amount!amount)
      If amount!invoice_paid = True Then
         If Not IsNull(amount!item_billed_amount_gst) Then
            running_total_gst += modUtil.MoneyToFloat(amount!item_billed_amount_gst)
         Endif
      Endif
   Next
   shtml &= "</TABLE>"
   '---------------------------------------------------------------------------------------
   'Now add a table which summarizes amounts for Cash, Cheques, EFPos or EFT (direct debit)
   '---------------------------------------------------------------------------------------
   sHtml &= "<P><B>Totals</B></P>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=212>"
   "<COL WIDTH=208>"
   
   For Each payment_method In payment_methods
      Inc x                                  'billing.lu_payment_method keys 1>6
      shtml &= "<TR VALIGN=TOP>"
      shtml &= totals_html_row_template()
      shtml = Replace(shtml, "%payment_method%", payment_method!method)
      shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(payment_totals[x]))
      sHtml &= "</TR>"
   Next
   sHtml &= "</TABLE></BODY></HTML>"
   '------------------------------------
   'Now show the totals for GST and Cash
   '------------------------------------
   sHtml &= "<BR>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=212>"
   "<COL WIDTH=208>"
   sHtml &= "<TR VALIGN=TOP>" & totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "TOTAL GST")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(running_total_gst) & "<BR><BR>")
   sHtml &= "</TR>"
   sHtml &= "<TR VALIGN=TOP>" & totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "<B>TOTAL (Including GST)</B>")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(running_total))
   sHtml &= "</TR>"
   sHtml &= "</TABLE></BODY></HTML>"
   Return shtml
   
End

Public Function takings_html_row_template() As String
   
   Return ""
   "<TD WIDTH=8%>"
   "   <P>%receipt_no%</P>"
   "</TD>"
   "<TD WIDTH=25%>"
   "   <P>%payer%</P>"
   "</TD>"
   "<TD WIDTH=5%>"
   "   <P>%item%</P>"
   "</TD>"
   "<TD WIDTH=15%>"
   "   <P>%payment type%</P>"
   "</TD>"
   "<TD WIDTH=20%>"
   "   <P>%drawer%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "   <P>%amount%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "   <P>%tax%</P>"
   "</TD>"
   
End

Public Function takings_html_row_templat_old() As String
   
   Return ""
   "<TD WIDTH=8%>"
   "   <P>%receipt_no%</P>"
   "</TD>"
   "<TD WIDTH=30%>"
   "   <P>%payer%</P>"
   "</TD>"
   "<TD WIDTH=15%>"
   "   <P>%payment type%</P>"
   "</TD>"
   "<TD WIDTH=20%>"
   "   <P>%drawer%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "   <P>%amount%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "   <P>%tax%</P>"
   "</TD>"
   
End

Public Function totals_html_row_template() As String
   
   Return ""
   "<TD WIDTH=212>"
   "<P>%payment_method%</P>"
   "</TD>"
   "<TD WIDTH=208>"
   "<P>%total_amount%</P>"
   "</TD>"
   
End

Public Sub cmbFeeType_Leave()
   
   gvwItemsBilled_HideProperty()
   
End

Public Sub txtFilter_Activate()
   
   Reload()
   
End

Public Sub txtFilter_KeyRelease()
   
   Select Case TabStrip1.Index
      Case cTab_Invoices_Receipts
      Case cTab_Banking
      Case cTab_Batching
      Case cTab_Reports
      Case cTab_ScheduleFees
         Scheduled_Fees_Reload
   End Select
   
End

Public Sub txtFilter_LostFocus()
   
   Last.BackGround = Color.White
   
End

Public Sub txtFilter_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub Accounts_Print_Statement()
   '-----------------------------------------------
   'Prints out all the patients invoice transactions
   '------------------------------------------------
   
End

Public Sub Accounts_Reload()
   
   EditArea_Clear()
   tbNewInvoice.Visible = False
   With cvwQuickView
      .Columns.count = 3
      .clear
      .Header = False
   End With
   Select Case cmbQuickView.Index
      Case cInvoiceDisplayMode_UnbilledAll
         Unbilled_refresh
      Case cInvoiceDisplayMode_UnbilledToday
         Unbilled_refresh(Now())
      Case cInvoiceDisplayMode_Overdue
         Accounts_Overdue_Display("0 month", "6 month")
      Case cInvoiceDisplayMode_Overdue_1Month
         Accounts_Overdue_Display("1 month", "6 month")
      Case cInvoiceDisplayMode_Overdue_2Month
         Accounts_Overdue_Display("2 month", "6 month")
      Case cInvoiceDisplayMode_Overdue_Over3Months
         Accounts_Overdue_Display("3 month", "12 month")
         'Case cInvoiceDisplayMode_InstitutionalAccounts
   End Select
   With cvwQuickView
      .SetFocus
      If Not IsNull(.Item) Then .Item.Selected = True   
   End With
   
End

Private Sub Accounts_Overdue_Display(start_duration As String, end_duration As String)
   
   Dim p As Collection
   
   patients = modBillingDBI.Accounts_Overdue_Find(start_duration, end_duration)
   cvwQuickView.Clear()
   Debug start_duration
   Debug end_duration
   For Each p In patients
      cvwQuickView.Add(p!pk_view, p!wholename)
   Next
   
End

Public Sub cvwSearchAccounts_KeyPress()
   '-----------------------------------------------------------
   'User has hit a key whilst the patients columnview has focus
   'if <enter> then display selected patient
   '-----------------------------------------------------------
   
   If Key.code = Key.return Then
      cvwSearchAccounts_DblClick()
   End If
   
End

Public Sub cvwSearchAccounts_Select()
   
   cvwSearchAccounts.MoveCurrent()
   sPatient_Collection_Key = cvwSearchAccounts.Item.key
   Account_Patient_Display(True)
   txtSearchInvoices_LostFocus
   
End

Public Sub cvwSearchAccounts_DblClick()
   '------------------------------------------------------
   'User has clicked on the popup list of patients
   'Set the patient collection key and display the patient
   '------------------------------------------------------
   
   Return 
   
   '    Inc Application.Busy
   '    cvwSearchAccounts.MoveCurrent()
   '    sPatient_Collection_Key = cvwSearchAccounts.Item.key
   '    ' columnview2.Visible = False
   '    
   '    EditArea_Clear()
   '    Account_Patient_Display(patients)
   '    txtSearchInvoices_LostFocus()
   ' Finally
   '    Dec Application.Busy
   ' Catch
   '    Log.ErrorMsg(Error.text & " " & Error.Backtrace.Join(" "))
   '    
End

Public Sub cvwSearchAccounts_DblClick_old()
   '------------------------------------------------------
   'User has clicked on the popup list of patients
   'Set the patient collection key and display the patient
   '------------------------------------------------------
   
   '    Inc Application.Busy
   '    cvwSearchAccounts.MoveCurrent()
   '    sPatient_Collection_Key = cvwSearchAccounts.Item.key
   '    cvwSearchAccounts.Visible = False
   '    
   '    EditArea_Clear()
   '    Account_Patient_Display()
   '    txtSearchInvoices_LostFocus()
   ' Finally
   '    Dec Application.Busy
   ' Catch
   '    Log.ErrorMsg(Error.text & " " & Error.Backtrace.Join(" "))
   '    
End

Public Sub cmbQuickView_Click()
   
   If Bexit Then Return
   lblSearchAccounts.Foreground = Color.LightGray
   txtFindPayer.text = ""
   Accounts_Reload()
   
End

Public Sub cvwQuickView_Select()
   'If the doctor or nurse posted an item number in the patient!comment_for_billing field
   'the try and auto-bill
   
   Dim Possible_Item_Numbers As String[] 
   Dim sPossible_Item_Numbers As String
   Dim item As String
   Dim Real_Items As New String[]
   Dim gwItemsBilled_Row As Integer
   Dim dr_says_bulk_bill As Boolean 'if the comment_on_billing passed from clinical has "BB" in it
   
   If bexit Then Return
   cvwSearchAccounts.UnselectAll
   bSearchingAccounts = False 
   cvwItemsTodayOrUnpaid.Clear()              'visually clear first as otherwise last patient's accounts visible whilst new ones loaded
   AccountHistory_Clear()           'clear account history columnview and collection
   EditArea_Clear
   Wait
   If TabStrip2.index <> cTab_Visits_And_Payments Then TabStrip2.index = cTab_Visits_And_Payments
   Inc Application.Busy
   'Select Case cmbInvoices.Index
   ' Case cInvoiceDisplayMode_InstitutionalAccounts
   '   Account_Institutional_Display()
   '   LblEditAreaHeading.text = "INSTITUTIONAL ACCOUNT"
   'Case cInvoiceDisplayMode_UnbilledAll, cInvoiceDisplayMode_UnbilledToday
   '   Patient_Unbilled_Consultation_Display()
   'Case Else
   cvwQuickView.MoveCurrent
   sPatient_Collection_Key = cvwQuickView.Item.Key
   Account_Patient_Display()
   If IsNull(patient) Then 
      Dec Application.Busy
      Return
   Endif
   lblPatient_Show_Details(patient)
   If InStr(patient!comment_for_billing, "BB") Then 
      dr_says_bulk_bill = True  
      patient!comment_for_billing = Replace(patient!comment_for_billing, "BB", "")
   End If   
   patient!comment_for_billing = Replace(patient!comment_for_billing, "+", "")
   sPossible_Item_Numbers = Replace(patient!comment_for_billing, ", ", ",")
   Possible_Item_Numbers = Split(Trim(sPossible_Item_Numbers), ",")
   'now check any numbers are valid
   gvwItemsBIlled.row = 0
   '  current_gvwItemsBilled_Row
   For Each Item In Possible_Item_Numbers
      If IsInteger(item) Then  
         If modBillingDBI.Item_Exists(Item) Then
            Real_Items.Add(item)
         Endif
      End If   
   Next
   For Each item In Real_Items
      textbox1.text = item
      If dr_says_bulk_bill Then
         rbInvoiceToMedicare.Value = True
      Endif
      textbox1_Activate()
   Next
   Dec Application.Busy
   
End

Public Sub txtSearchInvoices_KeyRelease()
   
   timer_count = 0
   timer1.Enabled = True
   timer1.Start
   
End

Public Sub txtSearchInvoices_KeyPress()
   
   If Key.code = Key.down
      If cvwSearchAccounts.Visible Then
         With cvwSearchAccounts
            .MoveFirst()
            .SetFocus()
            '            .Item.Selected = True
         End With
      Endif
   End If
   
End

Public Sub Reset_Keys_Collections()
   
   fk_patient = Null
   fk_payer_branch = Null
   fk_payer_person = Null
   fk_appointment = Null
   Items_Billed = New Collection            'collection of patients past_invoices
   Items_Today_Or_Unpaid = New Collection
   Payer = Null
   Patient = Null
   Unbilled_consultation = Null
   
End

Public Sub txtSearchInvoices_GotFocus()
   
   cvwQuickView.UnselectAll
   cvwSearchAccounts.Clear
   bSearchingAccounts = True 
   If TabStrip1.index <> 0 Then TabStrip1.index = 0
   If TabStrip2.index <> 0 Then TabStrip2.Index = 0
   Wait
   bExit = True   
   EditArea_Clear
   bexit = False  
   Reset_Keys_Collections
   txtSearchInvoices.Text = ""
   Last.BackGround = Color.rgb(95, 255, 175)
   iTimer_Search_Mode = cTimer_SearchMode_Patient
   tbNewInvoice.Visible = True
   txtSearchInvoices.Clear()
   
End

Public Sub txtSearchInvoices_Change()
   
   If bexit Then Return
   If Len(Last.text) = "" Then
      EditArea_Clear()
      Reset_Keys_Collections
   Endif
   
End

Public Sub txtSearchInvoices_LostFocus()
   
   Debug "search invoices lost focus"
   txtSearchInvoices.BackGround = Color.White
   timer1.stop
   
End

Public Sub tbFilterDateAccounts_Click()
   '--------------------------------------------
   'Popup a calender to allow user to pick dates
   '---------------------------------------------
   
   Dim hctrl As Control
   Dim hTextbox As TextBox
   
   If HBox_Calander.Visible Then
      HBox_Calander.Visible = False
   Else
      For Each hctrl In Last.parent.children
         If hctrl Is TextBox Then
            hTextbox = hctrl
            DateChooserAccountDate.tag = hTextbox
            Break
         End If
      Next
      With HBox_Calander
         .top = Last.Parent.Parent.top + Last.Parent.Height + Hbox_FilterAccounts.padding + HBox_FilterDate.Padding
         .left = Last.Parent.left + Hbox_FilterAccounts.width / 2
         .width = Last.Parent.width / 2
         .height = .Width
         .Raise()
      End With
      DateChooserAccountDate.Parent.Visible = True
      DateChooserAccountDate.Parent.Raise
   End If
   
End

Public Sub DateChooserAccountDate_Activate()
   
   Last.tag.text = Format(Last.value, "dd/mm/yyyy")
   Accounts_Reload()
   HBox_Calander.Visible = False
   DateChooserAccountDate.tag.SetFocus() 'fixme do the rest
   'form_reports.Report_Show(Report_Titles[columnview99.Item.key], DateChooser1.value, staff[combobox1.index]!fk_staff)
   
End

Public Sub DateChooserAccountDate_LostFocus()
   
   HBox_Calander.Visible = False
   
End

Public Sub tbQuickView_Click()
   
   Select Case TabStrip1.Index
      Case cTab_Invoices_Receipts
         cmbQuickView_Click()
   End Select
   
End

Public Sub gvwFeeScheduleItems_Select()
   '----------------------------------------------------------------------
   'User has clicked on the gridview containing the list of scheduled fees
   '----------------------------------------------------------------------
   
   Dim sfi As Collection = ScheduledFeeItems[gvwFeeScheduleItems.row]
   
   With form_feeschedule
      .Fee_Schedule_Item_Set(sfi)
      .Fee_Schedule_Item_Display()
   End With
   
End

Public Sub EditArea_Buttons_Click()
   
   If Last.tag = "save billing next of kin" Then
      Billing_Defaults_Save
      form_billingcards.form_next_of_kin.Save()
   Endif
   
End

Public Sub txtSearch_KeyPress()
   
End

Public Sub tbBankDetails_Click()
   
   Dim form_bank As FBankDetails
   
   form_bank = New FBankDetails
   form_bank.ShowModal()
   
End

Public Sub Form_Enter()
   
   'If IsNull(fk_patient) Then Unbilled_refresh
   
End

Public Sub VSplit_Invoices_Resize()
   
   modUtilGUI.Split_Save_Settings(Me.Name, VSplit_INvoices)
   
End

Public Sub gvwItemsBilled_Menu()
   
   mnuItemsBilled.Popup()
   
End

Public Sub textbox1_Change()
   
   If Bexit Then Return
   bexit = True   
   textbox1.text = UCase(textbox1.text)
   bexit = False  
   
End

Public Function Valid_Item_And_Descriptor() As Boolean
   
   If Trim(gvwItemsBilled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].Text) = "" Or Trim(gvwItemsBilled[gvwItemsBIlled.row, cGridColumnItem_BriefDescriptor].text) = "" Then
      Return
   End If   
   Return True
   
End

Public Sub panGvwItemsBilledEditor_Enter()
   
   If gvwItemsBIlled.Column = 4 Then
      bexit = True
      With cmbFeeType
         .Index = cmbFeeType.Find(gvwItemsBIlled[gvwItemsBIlled.Row, cGridColumnItem_FeeType].Text)
         .Visible = True   
      End With  
      bexit = False  
   Endif
   
End

Public Sub cvwQuickView_Menu()
   
   cvwQuickView.MoveCurrent
   sPatient_Collection_Key = cvwQuickView.Item.Key
   If cvwQuickView.count Then mnuUnBIlled.Popup()
   
End

Public Sub txtFilter_KeyPress()
   
End

Public Sub tbWipePayer_Click()
   
   txtFindPayer.SetFocus
   cvwWorkcoverClaims.Clear
   VBox_Workcover_Claims.Visible = False
   
End

Public Sub cvwAccountHistory_Menu()
   
   cvwAccountHistory.MoveCurrent
   cvwAccountHistory_Key = cvwAccountHistory.Item.Key
   Print items_billed[cvwAccountHistory_Key]
   
   If cvwAccountHistory.count Then mnuAcountHistory.Popup
   
End

Public Sub mnuAcountHistory_Click()
   'User has clicked over the columview containing all the invoices
   'ever raised for the patient, or filtered by paid/unpaid/text or payer
   
   Dim pdf_path As String
   
   Select Case Last.tag
      Case "account copy"
         modPrinting.Print_latex(items_billed[cvwAccountHistory_Key]!latex)
      Case "receipt copy"
         modPrinting.Print_latex(items_billed[cvwAccountHistory_Key]!latex)
      Case "external viewer"
         pdf_path = modPrinting.Latex_To_PDF(items_billed[cvwAccountHistory_Key]!latex)
         modArchiveDocumentsDBI.Launch_External_PDF_Viewer(pdf_path)
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwAccountHistory, Me.Name)
   End Select 
   
End

Public Sub cvwAccountHistory_Select()
   'User has clicked on the patient's account history
   
   cvwAccountHistory.MoveCurrent
   cvwAccountHistory_Key = cvwAccountHistory.Item.Key
   Print items_billed[cvwAccountHistory_Key]
   
End

Public Sub txtFilterDescriptor_Change()
   'Already have the items billed collection, don't fetch from backend, just filter
   
   If bexit Then Return
   Items_Billed = Fill_Columnview(cvwAccountHistory, Items_Billed)
   
End

Public Sub cmbInvoiceToFilter_Click()
   
   If bExit Then Return 'yes I know there's no code in here yet!
   
End

Public Sub TabStrip2_Click()
   
   Wait                                         'let tab click event finish, otherwise gui can hang
   If bexit = True Or IsNull(patient) Then Return  
   If rbAccountHistoryNotUsed.Value = True Then    
      rbAccountHistoryAll.value = True   
      cmbInvoiceToFilter.Add("No Filter")
      Account_History_Show(True) 'first load 
   End If   
   
End

Public Sub Account_History_Show(Optional bfirstLoad As Boolean = False)
   'display the patient's account history  
   
   Inc Application.Busy
   Items_Billed = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Items_Invoices_Get(fk_patient, iAccountDisplayMode))
   
   Items_Billed = Fill_Columnview(cvwAccountHistory, Items_Billed, bfirstLoad)
   Dec Application.Busy
   
End

Public Sub rbAccountHistory_Click()
   
   '-------------------------------------------------------------------------
   'User has clicked on the radiobuttons above the invoices/billed items list
   'The tags are:
   'const.Billing_Accounts_Unpaid = 0 for rbAccountHistoryPaid
   'const.Billing_Accounts_Paid = 1  for rbAccountHistoryUnpaid
   'const.Billing_Accounts_All = 2   for rbAccountHistoryAll
   'rbAccountHistoryNotUsed is there just to re-set the radiobuttons
   'so all the visible ones are not set.
   '-------------------------------------------------------------------------
   
   If bExit Then
      Return
   End If
   iAccountDisplayMode = Last.tag
   Account_History_Show
   
End

Public Sub cvwWorkcoverClaims_Select()
   
   cvwWorkcoverClaims.MoveCurrent
   txtReferenceDetails.text = workcover_claims[cvwWorkcoverClaims.Item.Key]!claim_number  
   
End

Public Sub DateChooser1_Activate()
   
   Report_Show_HTML(Days_Takings_Create_HTML(DateChooser1.Value))
   
End

Public Sub Report_Show_HTML(sHtml As String)
   
   If IsNull(form_reports) Then 
      With form_reports = New FHtmlViewer(Vbox_Reports)
         .WebView1.Zoom = 1.0
         .tbWebBrowserPrint.Visible = True   
         .tbWebBrowserZoomIn.Visible = True  
         .tbWebBrowserZoomOut.Visible = True 
      End With
   End If   
   With form_reports
      .WebView1.HTML = sHtml
      .WebView1.Zoom = 1.0
   End With
   
End
