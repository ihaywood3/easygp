' Gambas class file

' Copyright (C) 2008-2012 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' A class to record the patients visit and raise the invoice
'----------------------------------------------------------------------
'THIS FORM WILL NOT WORK IT IS VERY MUCH PROTOTYPE PRE-ALPHA ONLY
'ONLY FOR PROOF OF CONCEPT, much of the code is really bad
'many routines are redundant/duplicated
'many of the database calls are redundant duplicated
'fix this constraint in back end which is named wrong.
' CONSTRAINT invoices_fk_doctor_raising_fkey FOREIGN KEY (fk_staff_provided_service)
'       REFERENCES admin.staff (pk) MATCH SIMPLE
'       ON UPDATE NO ACTION ON DELETE NO ACTION,
' NOTE:  Ian - don't get hung up on all the inappriopriate names
'        for columnviews and controls - work in progress - will fix
'         table to save how the patient usually pays > to auto-put it into the grid
' BULK BILL RECONCILIATION WORK-FLOW   - goes something like this
' 1) Practice receives notification of EFT depost to nominated account
' 2) Electronic notification or paper printout in mail displays columnised data:
' -----------------------------------------------------------------------------------------------
' Claim Num: PatientName: MedicareNumber DateSeen Item_Number Assigned$ Payable$ ExplanationCode
'  U1892     Peter patient 2111111111    10 July 12   31265    150.90    0.00        374
'  
'     bla bla
'                                                TOTAL eft aMOUNT Paid             3838.00
'  Explanation of codes
'  374 Old card issue used - benefit not payable - also refer @ (whatever the @ means I don't know)
'  
'  Sometimes they may include **NB:medicare number issued**, providing us with a new number
'  
'  The secretarial work flow is hence.
'  1) Examine the printout - this money has already been put into the doctors/practice account
'  2) Where **NB:medicare number issued** under item > update the patients file
'  3) - Select the Claim coverslip number from the GUI
'     - Receipt the cheque for the amount received
'     - reconcile the voucher list
'     - for each voucher that has not been paid > set its fee amount to 0.00 (i.e decrement batch total%)
'     - If EFTRecieved now = reduced total from what we claimed all is well
'     - If not there can be 'hidden' amounts in the batch where the medicare girls keying in the data
'       actually make a mistake and miss stuff, or they put it through for incorrect patient name eg
'       another familVeteran Bulk Bill Claimsy member eg we may have claimed 23 + 10991, they forget to put the 10991, so that
'       item on the batch vocher list has to be reduced to 00.00 and the voucher re-submitted.
'      - once the two balances match > click as matched
'    4) Then the program will need to aggegate these zero'd vouchers into a new batch to send off and re-claim
'       or to give the user the chance to write off the debt.
'       e.g girls may have charged a consultation wrongly if it was aftercare. (i.e staff mistake)
'       Sometimes Medicare "miss" entire vouchers - maybe this won't happen when done electronically
'       
'-----------------------------------------------------------------------------------------------
Private currentconsult As CConsult
Private last_Fee_type As String
Private bexit As Boolean  
Private $hEditor_gvwItems As Object
Private $hEditor_gvwPayments As Object
'save flags for readability
Private bBulkBill_Yes As Boolean = True
Private bBulkBill_No As Boolean = False
Private bPrint_Yes As Boolean = True
Private bPrint_No As Boolean = False
Private bAccount_Yes As Boolean = True
Private bAccount_No As Boolean = False
Private bPaid_Yes As Boolean = True
Private bPaid_No As Boolean = False 
Private VSplitMain_Layout As Integer[]
Private bKeyValid As Integer
Private bPayingInvoice As Boolean
Private timer_count As Integer
Private onrow_items As Integer
Private OnCol_Items As Integer
Private GridData As Collection 
Private GridRows As Collection
Private iLeft As Integer
Private iTop As Integer
Private i As Integer
Private iFirstRow As Integer
Private iLastRow As Integer
Private bFoundFirst As Integer
Private SeenBy As Collection 
Private clinic As Collection
Private clinics As Collection
Private items As Collection 
Private item As Collection
Private Scheduled_Fee As Collection
Private consult_item_number As String 
Private fk_lu_default_billing_level As Integer
Private iBilling_Category As Integer
Private iAccountDisplayMode As Integer  'const.Billing_Accounts_Paid,  Billing_Accounts_UnPaid, Billing_Accounts_All
Private form_billingcards As FPatientBillingCards
Private form_reports As FBillingReports   
Private appointment_icons As Collection   
Private staff As Collection
Private Staff_Member As Collection
Private fk_staff As Integer                  'whichever staff saw the patient
Private fk_patient As Integer
Private fk_payer_branch As Integer                 'if non zero the invoice is to an organisation at branch level
Private fk_payer_person As Integer                 'if non zero the invoice is to a person
Private fk_appointment As Integer
Private fk_invoice As Integer                      'if non zero then key to billing.invoices table
Private Unbilled_Consultations As Collection 
Private Unbilled_consultation As Collection
Private payers As Collection
Private payer As Collection   'could be patient/organisation etc
Private Bulk_Billed_Consultations As Collection
Private Bulk_Billed_Consultation As Collection
Private Bulk_Billed_Claims As Collection
Private Bulk_Billed_Claim As Collection
Private cGridColumnItem_ItemNumber As Integer = 0
Private cGridColumnItem_BriefDescriptor As Integer = 1
Private cGridColumnItem_Fee As Integer = 2
Private cGridColumnItem_Gap As Integer = 3
Private cGridColumnItem_FeeType As Integer = 4
Private cGridColumnItem_gst_amount As Integer = 5
Private oncol_payments As Integer
Private onrow_payments As Integer 
Private cGridColumnPayments_Amount As Integer = 0
Private cGridColumnPayments_PaymentMethod As Integer = 1
Private cGridColumnPayments_Drawer As Integer = 2
Private cGridColumnPayments_ChequeNumber As Integer = 3
Private cGridColumnPayments_Bank As Integer = 4
Private cGridColumnPayments_Branch As Integer = 5
Private cAll_ItemNumbers As Integer = 0
Private cMBS_ItemNumbers As Integer = 2
Private cAMA_ItemNumbers As Integer = 3
Private cUser_Defined_ItemNumbers As Integer = 4
Private Item_Number_Categories As String[]
Private Payment_Methods As Collection
Private InvoiceComments As Collection
Private InvoiceComment As Collection
Private Invoice_total As Float
Private FeeTypes As Collection
Private FeeType As Collection
Private Duration As Integer                           'the duration of the appointment - at least what they were booked in for
Private Descriptors_Brief As Collection
Private descriptor_brief As Collection
Private Report_Titles As Collection 
Private Report_title As Collection 
Private Items_Billed As Collection
Private Item_Billed As Collection
Private iTimer_Search_Mode As Integer
Private cTimer_SearchMode_Patient As Integer = 0
Private cTimer_SearchMode_Descriptor As Integer = 1
Private cTimer_SearchMode_Payer As Integer = 2
Private cTimer_SearchMode_Institutional_Account As Integer = 2
Private cTimer_SearchMode_FeeSchedule As Integer = 3
Private Patients As Collection
Private Patient As Collection
Private Const cTabPatientsUnbilled As Integer = 0
Private Const cTabPatientsAccounts As Integer = 1
Private branches As Collection
Private branch As Collection
Private form_html_viewer As FHtmlViewer
Private form_feeschedule As FDescriptorsBrowser
'the main (large) tabstrip - tabstrip1
Private Const cTab_Invoices As Integer = 0
Private Const cTab_Batching As Integer = 1
Private Const cTab_Banking As Integer = 2
Private Const cTab_Reports As Integer = 3
Private Const cTab_ScheduleFees As Integer = 4
Private form_batching As FBulkBillBatching
Private cInvoiceDisplayMode_UnbilledAll As Integer = 0
Private cInvoiceDisplayMode_UnbilledToday As Integer = 1
Private cInvoiceDisplayMode_Overdue_1Month As Integer = 2
Private cInvoiceDisplayMode_Overdue_2Month As Integer = 3
Private cInvoiceDisplayMode_Overdue_Over3Months As Integer = 4
Private cInvoiceDisplayMode_InstitutionalAccounts As Integer = 5
Private Reasons_not_billed As Collection
Private gvwItemsBIlled_columnWidths As Integer
Private bAreaOfNeed As Boolean 'see FAdminGlobalPreferences/billing help if true the area attracts 10991 item numbers
Static Private Form_Billing As FRecordVisit

Static Public Sub Billing_Save_Defaults()
   
   Form_Billing.Billing_Defaults_Save
   
End   

Static Public Sub Bulk_Billing_Claims_Reload()
   
   Form_Billing.BulkBilling_ShowClaims
   
End

Public Sub BulkBilling_ShowClaims()
   '-------------------------------
   'show veteran or medicare claims 
   '-------------------------------
   
   Bulk_Billed_Claims = modBillingDBI.Bulk_Bill_Batching_Get_Claims(combobox1.index)
   columnview99.Clear
   For Each Bulk_Billed_Claim In Bulk_Billed_Claims
      columnview99.Add(Bulk_Billed_Claim!pk, 0)
      columnview99[Bulk_Billed_Claim!pk][0] = Format(Bulk_Billed_Claim!claim_date, "dd/mm/yyyy")
      columnview99[Bulk_Billed_Claim!pk][1] = Bulk_Billed_Claim!claim_id
   Next
   If Bulk_Billed_Claims.count Then
      Batching_Show_Vouchers_In_Claim()
   Endif
   
End

Public Sub Init() 
   '---------------------------------------------------------
   'Do all the form initialisation stuff like adding stuff to 
   'combo's, setting numbers of columns in lists, displaying
   'the patients contact details
   '---------------------------------------------------------
   
   ' Dim x As Integer
   '  Message.Info("Ian, don't try and use this - you can probably print/save an account but the payments grid won't work +  lots of the tabs")
   
   lblSearchAccounts.Foreground = Color.LightGray
   comboBox1_Load()
   Form_Billing = Me
   With form_billingcards = New FPatientBillingCards(Vbox_PatientBillingCards)
      .Init(VBox_EditArea_Outer, "FRecordVisit")
      .HBox_NextOfKin.Visible = False   
      .Hbox_LegacyFileNumber.Visible = False  
      .HBox_FindNextOfKin.Visible = False  
      .HBox_ResponsiblePayer.Visible = False  
   End With
   Item_Number_Categories = New String[]
   Item_Number_Categories.Add("all items")
   Item_Number_Categories.Add("mbs item")
   Item_Number_Categories.Add("ama item")
   Item_Number_Categories.Add("user item")
   Report_Titles = modBillingDBI.Report_Titles_Get()
   Reasons_not_billed = modBillingDBI.Reasons_not_billed_Get()
   lblmeasure.text = "  Payment By "
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Inner, lblmeasure)
   modEditAreaHelpers.Resize_label(lblItems, lblmeasure)
   modEditAreaHelpers.Resize_label(lblDisplayAccounts, lblmeasure)
   modEditAreaHelpers.Resize_label(lblPayment, lblmeasure)
   modEditAreaHelpers.Resize_label(lblComment, lblmeasure)
   Payment_methods = modBillingDBI.Payment_Methods_Get()
   'fix this duplication but check save to see why I did it.
   modUtil.LoadCombo(cmbPaymentMethods, modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Payment_Methods_Get()), "method") 'show on top 3 methods
   InvoiceComments = modUtil.LoadCombo(cmbInvoiceComments, modBillingDBI.Invoice_Comments_Get(), "comment")
   FeeTypes = modUtil.LoadCombo(cmbFeeType, modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Billing_Types_Get()), "type") 'fixme
   staff = modUtil.LoadCombo(cmbStaff, modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get()), "wholename")  
  ' modUtil.LoadCombo(cmbstaff_Takings, staff, "wholename")
   seenBy = modUtil.LoadCombo(cmbSeenBy, modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get()), "wholename")  
   clinics = modUtil.LoadCombo(cmbLocation, modContactsDBI.Clinics_Get(), "branch")
  ' modUtil.LoadCombo(cmbLocationTakings, clinics, "branch")
   With cvwItemsBilled  
      .Columns.count = 13
      .Columns[0].text = "Patient"
      .Columns[1].text = "Seen By"
      .Columns[2].text = "Location"
      .Columns[3].text = "Visit Date"
      .Columns[4].text = "Item"
      .Columns[5].text = "Descriptor"
      .Columns[6].text = "Invoice To"
      .Columns[7].text = "Fee"
      .Columns[8].text = "GST"
      .Columns[9].text = "Total"
      .Columns[10].text = "Paid"
      .Columns[11].text = "Owing"
      .Columns[12].text = "Rebate"
   End With
   bAreaOfNeed = modAdminDBI.Config_Get("area_of_need", False)
   Try Settings_Load()         'load settings for this form
   GridRows = New Collection
   columnview1.Columns.count = 4
   cmbInvoiceComments.index = -1
   gvwItemsBIlled_Init()  
   gvwPayments_Init()
   txtDateFilter.text = "19/10/2012" ' Format(Now, "dd/mm/yyyy")
   Reload()                      
   
End

Public Sub Reload()
   
   columnview99_Refresh()
   
End

Public Sub EditArea_Clear() 
   
   bExit = True
   
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Inner) 
   cmbInvoiceComments.Clear
   form_billingcards.EditArea_Clear()
   lblEditAreaHeading.text = ""
   textlabelPayer.text = ""
   Unbilled_consultation = Null
   With gvwItemsBIlled
      .Clear
      .Rows.count = 2
      '  .Parent.Height = gvwItemsBIlled.Height   
   End With
   ' VsplitMain_layout = VSplit_Main.Layout 
   fk_lu_default_billing_level = const.Billing_Default_Level_Private
   fk_patient = 0
   fk_payer_branch = 0
   fk_payer_person = 0
   fk_appointment = 0
   cvwItemsBilled.Clear()
   Items_Billed = New Collection
   Item_Billed = New Collection
   iAccountDisplayMode = const.Billing_Accounts_Unpaid
   rbAccountsDisplayUnPaid.value = True
   rbPayerNotUsed.value = True 'switches off rbInvoiceOrganisation and rbInvoicePerson
   With lblInvoiceTotal
      .text = ""
      .Border = Border.None
   End With
   With gvwPayments
      .clear
      .Enabled = False  
   End With   
   With lblPaymentTotal
      .text = ""
      .Border = Border.None
   End With
   EditArea_Notify_Data_Change(False)
   bexit = False
   
End

Public Sub Reset_Keys()
   
End

Public Sub columnview99_Refresh()
   
   Select Case TabStrip1.Index
         
      Case cTab_Invoices
         With columnview99
            .Columns.count = 2
            .clear
            .Header = False   
         End With
         Select Case combobox1.Index
            Case cInvoiceDisplayMode_UnbilledAll
               Unbilled_refresh(Null)
            Case cInvoiceDisplayMode_UnbilledToday
               Unbilled_refresh(Now())
            Case cInvoiceDisplayMode_Overdue_1Month
            Case cInvoiceDisplayMode_Overdue_2Month
            Case cInvoiceDisplayMode_Overdue_Over3Months
            Case cInvoiceDisplayMode_InstitutionalAccounts
               
         End Select
      Case cTab_Batching
         
      Case cTab_Reports
         
         Reports_Available_Refresh()
      Case cTab_ScheduleFees
         Scheduled_Fees_Brief_Descriptors_Refresh()
   End Select
   
End
Public Sub Scheduled_Fees_Search()
   Dim ScheduledFeeItems As Collection
   Dim FeeItem As Collection
   
   timer1.Stop
   ScheduledFeeItems = modBillingDBI.Descriptors_Get(txtSearch.Text, True, False) 
  
  With columnview99
      .Clear
      .Columns.count = 2
   End With
   'ScheduledFeeItems = modBillingDBI.Fees_Get_With_Brief_Descriptor(item_number_Categories[combobox1.index])
  ' ScheduledFeeItems = modBillingDBI.Descriptors_Get(ttxtFindPayerText, True, False) 
   For Each FeeItem In ScheduledFeeItems
      columnview99.Add(FeeItem!pk, 0)
      If Not IsNull(FeeItem!mbs_item) Then columnview99[FeeItem!pk][0] = FeeItem!mbs_item  
      If Not IsNull(FeeItem!ama_item) Then columnview99[FeeItem!pk][0] = FeeItem!ama_item
      If Not IsNull(FeeItem!user_item) Then columnview99[FeeItem!pk][0] = FeeItem!user_item
      If Not IsNull(FeeItem!descriptor_brief) Then
             columnview99[FeeItem!pk][1] = FeeItem!descriptor_brief
      Else
          columnview99[FeeItem!pk][1] = FeeItem!descriptor
      End If   
   Next
End

Public Sub Scheduled_Fees_Brief_Descriptors_Refresh()
   
   Dim ScheduledFeeItems As Collection
   Dim FeeItem As Collection
  
   timer1.Stop
   With columnview99
      .Clear
      .Columns.count = 2
      .Header = False   
   End With
   ScheduledFeeItems = modBillingDBI.Fees_Get_With_Brief_Descriptor(item_number_Categories[combobox1.index])
   For Each FeeItem In ScheduledFeeItems
      columnview99.Add(FeeItem!pk, 0)
      If Not IsNull(FeeItem!mbs_item) Then columnview99[FeeItem!pk][0] = FeeItem!mbs_item  
      If Not IsNull(FeeItem!ama_item) Then columnview99[FeeItem!pk][0] = FeeItem!ama_item
      If Not IsNull(FeeItem!user_item) Then columnview99[FeeItem!pk][0] = FeeItem!user_item
      columnview99[FeeItem!pk][1] = FeeItem!descriptor_brief
   Next
   
End

Public Sub Reports_Available_Refresh()
   
   With columnview99
      .Clear
      .Columns.count = 1
      .Header = True 
      .Columns[0].Text = "Report Name"
   End With
   For Each Report_title In Report_Titles
      columnview99.Add(Report_title!pk, 0)
      columnview99[Report_title!pk][0] = Report_title!report_title
   Next
   
End

Public Sub Unbilled_refresh(Optional single_day As Date = Null)
   
   EditArea_Clear()
   If Trim(txtDateFilter.text) <> "" And IsDate(Trim(txtDateFilter.text)) Then
      single_day = Val(txtDateFilter.text)
   Endif
   Unbilled_Consultations = modBillingDBI.Consultations_UnBilled_Get(single_day)
   For Each Unbilled_consultation In Unbilled_Consultations
      columnview99.Add(Unbilled_consultation!pk, 0)
      columnview99[Unbilled_consultation!pk][0] = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
      columnview99[Unbilled_consultation!pk][1] = Unbilled_consultation!wholename
   Next
   If columnview99.count Then
      columnview99.MoveFirst()
      Print bExit
      columnview99.Item.Selected = True
      '   columnview99_Select()
   Endif
   
End

Public Sub Patient_Unbilled_Consultation_Display()
   '----------------------------------------------------------------------------------
   'User has selected to show unbilled consultations and has clicked on a patient name
   'Display the patient and consultation details in the editing area
   '----------------------------------------------------------------------------------   
   
   columnview99.MoveCurrent()
   EditArea_Clear()                                                                    'clear input area
   txtpatient.ReadOnly = True
   txtDate.ReadOnly = True 
   Unbilled_consultation = Unbilled_Consultations[columnview99.Item.key]
   Try fk_lu_default_billing_level = Unbilled_consultation!fk_lu_default_billing_level
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private
   fk_patient = Unbilled_consultation!fk_patient
   fk_appointment = Unbilled_consultation!pk
   bExit = True   
   With txtpatient
      .text = Unbilled_consultation!wholename
      .pos = 0
   End With
   txtAge.text = Unbilled_consultation!age_display
   txtDate.text = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
   fk_staff = Unbilled_consultation!fk_staff 
   For Each Staff_Member In staff
      If Staff_Member!fk_staff = fk_staff Then
         cmbSeenBy.index = cmbSeenBy.Find(Staff_Member!wholename)
         Break
      Endif
   Next
   duration = Val(Split(Unbilled_consultation!duration, ":")[1]) + Val(Split(Unbilled_consultation!duration, ":")[0]) * 60        ' e.g 10, 20, 30, 50, 60, 70 .... etc!
   txtDuration.text = Str(duration) & " minutes"
   Select Case duration
      Case 1 To 19
         consult_item_number = "23"
      Case 20 To 40
         consult_item_number = "36"
      Case 40 To 100
   End Select
   cmbFeeType.Enabled = True  
   Try Payer_Get(Unbilled_consultation)
   Select Case fk_lu_default_billing_level
      Case const.Billing_Default_Level_BulkBill
         '  cmbFeeType.Enabled = False 
         If Unbilled_consultation!veteran_number <> "" Then
            rbInvoiceToVeterans.value = True
         Else
            rbInvoiceToMedicare.value = True
         Endif
      Case const.Billing_Default_Level_Private
         rbInvoiceToPatient.value = True
      Case const.Billing_Default_Level_HealthCareCardConcession
         rbInvoiceToPatient.value = True
      Case const.Billing_Default_Level_PensionerConcession
         rbInvoiceToPatient.value = True
      Case const.Billing_Default_Level_MedicoLegal 
         rbInvoiceToPatient.value = True
   End Select
   
   bExit = False  
   form_billingcards.Display_Patient_Data(Unbilled_consultation) 
   VBox_EditArea_Outer.Enabled = True 
   Print VBox_EditArea_Outer.Padding, " is the padding"
   gvwItemsBIlled.Enabled = True 
   cvwItemsBilled_Refresh() 
   Print "Bexit is false at end of displaying the consult", bexit
   EditArea_Notify_Data_Change(False)
   
End

Public Sub Columnview99_Menu()
   '-----------------------------------------------------------------------
   'User has clicked on the data columnview on left hand side of the screen
   'contexturally popup the menu
   '-----------------------------------------------------------------------
   
   Dim mnu As Menu
   Dim reason As Collection
   
   columnview99.MoveCurrent()
   If columnview99.count = 0 Then Return 
   Select Case TabStrip1.Index
      Case cTab_Invoices
         Select Case combobox1.Index
            Case cInvoiceDisplayMode_UnbilledAll, cInvoiceDisplayMode_UnbilledToday
               mnuUnBIlled_Mark_Not_Billed.Children.Clear
               For Each reason In Reasons_not_billed
                  With mnu = New Menu(mnuUnBIlled_Mark_Not_Billed) As "mnuUnbilled"
                     .Caption = reason!reason
                     .tag = reason!pk
                  End With
               Next
               mnuUnBIlled.Popup()
         End Select
   End Select
   
End

Public Sub mnuUnbilled_Click()
   
   Select Case Last.tag
      Case "font"
         modUtil.Columnview_SetFont(Columnview99, "Billing_RecordVisit")
      Case Else   'tag is a number = reason not billed key to billing.lu_reasons_not_billed table
         If Message.Question("Mark this patient not to be charged?", "Yes", "No") = 2 Then Return 
         modDBConnect.update("clerical.bookings", Null, ["pk": Unbilled_consultation!pk, "fk_lu_reason_not_billed": Last.tag])
         modDBConnect.CommitTrans()
         Reload()
   End Select
   
End

Public Sub columnview99_Select()
   
   Select Case TabStrip1.Index
         
      Case cTab_Invoices
         Select Case combobox1.Index
            Case cInvoiceDisplayMode_InstitutionalAccounts
               
               Account_Institutional_Display()
               LblEditAreaHeading.text = "Institutional Account:"
            Case cInvoiceDisplayMode_UnbilledAll, cInvoiceDisplayMode_UnbilledToday
               
               Patient_Unbilled_Consultation_Display()
               LblEditAreaHeading.text = "Invoice UnBilled Consultation"
            Case Else
               
               Account_Patient_Display()
               LblEditAreaHeading.text = "Account Details for " & patient!Wholename
               
         End Select
      Case cTab_Batching
         form_batching.Claim_Display(Bulk_Billed_Claims[columnview99.Item.key]) 
      Case cTab_Reports
         ' form_reports.Report_Show(Report_Titles[columnview99.Item.key], DateChooser2.value)
         DateChooser2_Activate()
      Case cTab_ScheduleFees
         With form_feeschedule
            .TxtSearch.text = columnview99[columnview99.item.key][0]
            .Search
         End With
         
   End Select
   
End

Public Sub cvwUnBilled_Refresh()
   '------------------------------------------------------------------------
   'Display a list of all unbilled consultations ordered by appointment date
   '-------------------------------------------------------------------------
   
   ' Dim single_day As Date
   ' 
   ' Select Case TabStrip1.Index
   '    Case cTab_Invoices                 'generate and save invoice/receipt
   '       EditArea_Clear()
   '       If chkTodayOnly.value = True Then
   '          single_day = Now()
   '       Else
   '          single_day = Null
   '       Endif
   '       Unbilled_Consultations = modBillingDBI.Consultations_UnBilled_Get(single_day)
   '       cvwUnBilled.Clear()
   '       For Each Unbilled_consultation In Unbilled_Consultations
   '          cvwUnBilled.Add(Unbilled_consultation!pk, 0)
   '          cvwUnBilled[Unbilled_consultation!pk][0] = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
   '          cvwUnBilled[Unbilled_consultation!pk][1] = Unbilled_consultation!wholename
   '       Next
   '       If cvwUnBilled.count Then
   '          cvwUnBilled.MoveFirst()
   '          cvwUnBilled.Item.Selected = True
   '          cvwUnBilled_Select()
   '       Endif
   '    Case cTab_Batching                  'medicare and veteran batching tab
   '       cvwUnBilled.Clear()
   '       Bulk_Billed_Claims = modBillingDBI.Bulk_Bill_Batching_Get_Claims()
   '       For Each Bulk_Billed_Claim In Bulk_Billed_Claims
   '          cvwUnBilled.Add(Bulk_Billed_Claim!pk, 0)
   '          cvwUnBilled[Bulk_Billed_Claim!pk][0] = Format(Bulk_Billed_Claim!claim_date, "dd/mm/yyyy")
   '          cvwUnBilled[Bulk_Billed_Claim!pk][1] = Bulk_Billed_Claim!claim_id
   '       Next
   '       If Bulk_Billed_Claims.count Then
   '          Batching_Show_Vouchers_In_Claim()
   '       Endif
   '    Case cTab_Reports
   '       If IsNull(form_reports) Then
   '          With form_reports = New FBillingReports(Vbox_Reports)
   '             .Init()
   '          End With
   '       Endif
   ' End Select
   ' 
End

Public Sub cvwUnBilled_Click()
   
   Select Case TabStrip1.Index 
      Case 2
         '    cvwUnBilled.MoveCurrent()
         ' form_batching.Claim_Display(cvwUnBilled.Item.key)
   End Select 
   
End

' Sub columnview99_Select()
'-------------------------------------------------------------------------------------
'User has clicked on the list of patients seen and mared as 'gone' in appointment book
'Display their details in the edit area, match staff combo to whoever saw them
'assume a standard consultation 
'Ian going to bypass some of this by parsing consult item numbers in the consult
'-------------------------------------------------------------------------------------
' 
' Select Case TabStrip1.Index
'    Case cTab_Takings
'       TabStrip1.index = cTab_Invoices
'    Case cTab_Invoices
'       TabStrip1.index = 0
'       cvwUnBilled.MoveCurrent()
'       EditArea_Clear()                                                                    'clear input area
'       ' bPayingInvoice = True
'       Unbilled_consultation = Unbilled_Consultations[cvwUnBilled.Item.key]
'       Try fk_lu_default_billing_level = Unbilled_consultation!fk_lu_default_billing_level
'       If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private
'       fk_patient = Unbilled_consultation!fk_patient
'       bExit = True   
'       txtpatient.text = Unbilled_consultation!wholename
'       txtDate.text = Format(Unbilled_consultation!begin, "dd/mm/yyyy")
'       Try Payer_Get(Unbilled_consultation)
'       fk_staff = Unbilled_consultation!fk_staff 
'       For Each Staff_Member In staff
'          If Staff_Member!fk_staff = fk_staff Then
'             cmbSeenBy.index = cmbSeenBy.Find(Staff_Member!wholename)
'          Endif
'       Next
'       duration = Val(Split(Unbilled_consultation!duration, ":")[1]) + Val(Split(Unbilled_consultation!duration, ":")[0]) * 60        ' e.g 10, 20, 30, 50, 60, 70 .... etc!
'       txtDuration.text = Str(duration) & " minutes"
'       Select Case duration
'          Case 1 To 19
'             consult_item_number = "23"
'          Case 20 To 40
'             consult_item_number = "36"
'          Case 40 To 100
'       End Select
'       cmbFeeType.Enabled = True  
'       
'       Select Case fk_lu_default_billing_level
'          Case const.Billing_Default_Level_BulkBill
'             cmbFeeType.Enabled = False 
'             If Unbilled_consultation!veteran_number <> "" Then
'                rbInvoiceToVeterans.value = True
'             Else
'                rbInvoiceToMedicare.value = True
'             Endif
'          Case const.Billing_Default_Level_Private
'             rbInvoiceToPatient.value = True
'          Case const.Billing_Default_Level_HealthCareCardConcession
'          Case const.Billing_Default_Level_PensionerConcession
'          Case const.Billing_Default_Level_MedicoLegal 
'       End Select
'       bExit = False  
'       form_billingcards.Display_Patient_Data(Unbilled_consultation) 
'       VBox_EditArea_Outer.Enabled = True 
'       gvwItemsBIlled.Enabled = True 
'       cvwItemsBilled_Refresh()
'    Case cTab_Batching
'      ' form_batching.Claim_Display(cvwUnBilled.Item.key)
' End Select

'End

Public Sub Payer_Get(patient As Collection) 'fix me to fk_patient
   'temp code get the responsible person FIXME  body code only whilst developin
   'need more inclusive way of getting the payer - eg might not be a patient
   'fixme put in code for responsible party as a branch (must be put in contacts first)
   
   bExit = True   
   columnview99.MoveCurrent()
   If Not IsNull(patient!fk_payer_person) Then 
      payer = modContactsDBI.Person_Including_Patients_Get_Using_Pk(patient!fk_payer_person)
   End If   
   If Not IsNull(Payer) Then  
      ' If Patient!fk_patient <> payer!fk_patient Then
      '   bexit = False  
      '  rbInvoiceOrganisation.value = True 
      
      ' Else
      rbInvoiceToNotUsed.value = True
      rbInvoicePerson.value = True
      Try textlabelPayer.text = payer!wholename & "<BR>" & Trim(payer!street1 & " " & payer!street2) & "<BR>" & payer!town & " " & payer!postcode
      fk_payer_person = payer!fk_person  
      bExit = False  
      '  End If   
   End If  
   bExit = False  

End

Public Sub gvwPayments_Init()
   '------------------------------------------------------------------------
   'Construct the grid which will hold the payments for items on the invoice
   '------------------------------------------------------------------------   
   
   With gvwPayments
      .Rows.count = 1
      .Rows.H = 20 
      .Columns.count = 6
      lblmeasure.text = " Amount "
      .Columns[0].width = lblmeasure.Width
      lblmeasure.text = "Medicare Cheque  "
      ' .Columns[1].text = "Payment Type"
      .Columns[1].width = lblmeasure.Width
      lblmeasure.text = "Cheque Number"
      ' .Columns[2].text = "Drawer on Cheque"
      .Columns[2].width = 200
      ' .Columns[3].text = "Cheque Number"
      .Columns[3].width = lblmeasure.Width
      ' .Columns[4].text = "Bank"
      .Columns[4].width = 100
      ' .Columns[5].text = "Branch"
      .Columns[5].width = 100
   End With
   With gwPaymentLabel1
      .text = "Amount"
      .width = gvwPayments.Columns[0].Width
   End With
   
   With gwPaymentLabel2
      .text = "Payment Type"
      .width = gvwPayments.Columns[1].Width
   End With
   With gwPaymentLabel3
      .text = "Drawer on Cheque"
      .width = gvwPayments.Columns[2].Width
   End With
   With gwPaymentLabel4
      .text = "Cheque Number"
      .width = gvwPayments.Columns[3].Width
   End With
   With gwPaymentLabel5
      .text = "Bank"
      .width = gvwPayments.Columns[4].Width
   End With
   With gwPaymentLabel6
      .text = "Branch"
      .width = gvwPayments.Columns[5].Width
   End With 
   
End

Public Sub gvwPayments_Enter()
   '--------------------------------------------------
   'if cursor comes within bounds of the payments grid
   'position the payment method combo
   '---------------------------------------------------
   ' 
   ' With cmbPaymentMethods
   '    .width = gvwPayments.Columns[cGridColumnPayments_PaymentMethod].Width
   '    .height = gvwPayments.Rows[0].Height + 5
   '    .left = gvwPayments.left + gvwPayments[onrow_payments, cGridColumnPayments_PaymentMethod].Left + 2
   '    .top = ((onrow_payments + 1) * 20) + 2
   '    If gvwPayments.Column <> cGridColumnPayments_PaymentMethod Then
   '       .Visible = False   
   '    Else
   '       If gvwPayments[gvwPayments.row, cGridColumnPayments_Amount].Text <> "" Then    
   '          cmbPaymentMethods.Visible = True
   '       Else
   '          cmbPaymentMethods.Visible = False   
   '       End If   
   '    End If
   ' End With
   
End

Public Function Item_Number_Selected() As Boolean
   
   If gvwItemsBIlled[0, cGridColumnItem_ItemNumber].Text <> "" Then
      Return True
   Endif
   
End

Public Sub txtPayment_Activate()
   '----------------------------------------------------------------------------
   'User has hit <enter> key whilst typing in the textbox over the payments grid
   '----------------------------------------------------------------------------
   
   If bexit Then Return 
   panGvwPaymentsEditor.Hide
   $hEditor_gvwPayments = Null   
   Select Case oncol_payments
      Case cGridColumnPayments_Amount
         gvwPayments[gvwPayments.row, 0].Text = modUtil.Money_Format(txtPayment.text)                       'format money correctly
         If gvwPayments[gvwPayments.row, 1].Text = "" And gvwPayments[gvwPayments.row, 0].Text <> "" Then   'if have no payment method but have money 
            gvwPayments[gvwPayments.row, cGridColumnPayments_PaymentMethod].text = "EFPos" 'FIXME WHEN BACKEND TABLE FIXED TO EFTPos
         Endif
         Payment_Calculate_Total
      Case Else
         gvwPayments[gvwPayments.row, oncol_payments].Text = Trim(txtPayment.Text)
   End Select 
   txtPayment.Visible = False   
   EditArea_Notify_Data_Change(True)
   ' 
   
End

Public Sub gvwPayments_MouseUp()
   '------------------------------------------------
   'User has clicked on one of the cells in the grid
   '------------------------------------------------
   
   If bPayingInvoice Or bexit Or (Not gvwItemsBIlled_Data_Valid()) Then Return                  'no-go if paying an invoice -can't change existing items 
   
   If gvwPayments.Row > 0 And gvwPayments[0, 0].text = "" Then 'if user clicks on row and row above not filled in move back FIXME THIS CODE DOES NOT DO THIS
      gvwPayments.row = 0
   Endif
   Print "showing payments control"
   gvwPayments_ShowProperty                                  'bad name but show the control we want to overlay a cell
   
End

Public Sub gvwPayments_SaveProperty()
   
End

Public Sub gvwPayments_HideProperty() As Boolean
   
   Print "should be hiding property in payments grid"
   cmbPaymentMethods.Visible = False  
   txtPayment.Visible = False 
   panGvwItemsBilledEditor.Hide
   gvwPayments_lblOverLay.Hide
   $hEditor_gvwPayments = Null
   
End

Public Sub gvwPayments_ShowProperty()
   '--------------------------------------------------------------------------------
   'nicked from the gambas IDE FProperty.class
   'Shows the control we are using to 'edit' the grid cell aligned over that cell
   'Maybe un-necessariily complex due to my simple brain but does this
   'The panGvwItemsBilledEditor = a Hbox holding 3 controls
   ' - a textbox for editing
   ' - a combobox for choosing the fee levels
   ' - a transparent label to let user click on something without entering edit mode
   '   which is what happens in the gambas IDE - I didn't use this because then I
   '   couldn't show a menu over the grid
   '--------------------------------------------------------------------------------   
   
   Dim sProp As String  'contents of the grid cell
   Dim hEditor As Object
   
   txtPayment.Hide
   cmbPaymentMethods.Hide
   gvwPayments_lblOverLay.Hide   
   panGvwPaymentsEditor.Hide
   
   Select Case gvwPayments.column
      Case cGridColumnPayments_PaymentMethod
         cmbPaymentMethods.Index = cmbPaymentMethods.Find(gvwPayments[gvwPayments.Row, gvwPayments.column].Text)
         hEditor = cmbPaymentMethods
      Case Else
         hEditor = GvwPayments_lblOverLay
   End Select
   $hEditor_gvwPayments = hEditor
   GvwPayments_MoveProperty        ' Move the Hbox panGvwItemsBilledEditor into position over the cell
   $hEditor_gvwPayments.Show             ' Make transparent label "visible" or the combo box visible
   pangvwPaymentsEditor.Show       ' Show the container, hence the  control
   $hEditor_gvwPayments.SetFocus         ' give control focus > responded to key and click events
   Print "have set focus in gvwPayments"
   
End

Private Sub gvwPayments_MoveProperty()
   '------------------------------------------------------------------------
   'Move the editing Hbox control to match a grid cell co-ordinates and size
   '------------------------------------------------------------------------ 
   
   If IsNull($hEditor_gvwPayments) Or gvwPayments.Row = - 1 Then Return
   With gvwPayments[gvwPayments.Row, gvwPayments.column]
      pangvwPaymentsEditor.Move(gvwPayments.X + .X - gvwPayments.ScrollX, gvwPayments.Y + .Y - gvwPayments.ScrollY, .Width, .Height)
      panGvwPaymentsEditor.Raise
   End With
   
End

Public Sub gvwPayments_Click()
   '----------------------------------------
   'User has clicked on the payment gridview
   '----------------------------------------  
   ' 
   
   Return 
   If gvwPayments.column = cGridColumnPayments_PaymentMethod Then
      If gvwPayments[gvwPayments.row, cGridColumnPayments_Amount].Text <> "" Then    
         cmbPaymentMethods.Visible = True
      Else
         cmbPaymentMethods.Visible = False   
      End If   
   Else
      cmbPaymentMethods.Visible = False   
   Endif
   
End

Public Sub gvwPayments_lblOverLay_Menu()
   '---------------------------------------------------------------
   'The user has right mouse clicked on a grid row, but over a cell
   'this means they clicked on the transparent menu
   '---------------------------------------------------------------
   
   Dim row As Integer
   Dim col As Integer
   Dim bHaveText As Boolean
   
   bexit = True
   If bPayingInvoice Then Return 
   For row = 0 To gvwPayments.Rows.count - 1
      For col = 0 To 4
         If gvwPayments[row, col].Text <> "" Then
            mnuPayments.Popup
            bHaveText = True
            Break
         Endif
      Next
      If bHaveText Then Break
   Next  
   bexit = False  
   
End

Public Sub gvwPayments_lblOverLay_DblClick()
   '-------------------------------------------------------------
   'Looks to use like double clicking on a grid row
   'actually clicking on the transparent label over the grid cell
   'remove this transparent label and enter 'edit mode'
   '-------------------------------------------------------------
   
   gvwPayments_Cell_Overlay_Remove("")
   
End

Public Sub gvwPayments_lblOverLay_KeyPress() 
   '----------------------------------------------------------------
   'This is a transparent label, "hiding" the editing textbox
   'Pass the keypress character into the underlying textbox if empty
   'and enter 'edit mode'
   '----------------------------------------------------------------   
   
   gvwPayments_Cell_Overlay_Remove(key.Text)
   
End

Public Sub gvwPayments_Cell_Overlay_Remove(char As String)
   '----------------------------------------------------------------
   'use the underlying cell text to either set the fee combox index
   'or the textbox 1 editing textbox
   'remove the label hiding the control in the grid to allow use
   'either a combobox or a textbox
   '-----------------------------------------------------------------  
   ' Dim hEditor As Object
   
   Dim Cell_Text As String = gvwPayments[gvwPayments.Row, gvwPayments.column].Text
   
   If gvwPayments.column <> cGridColumnPayments_PaymentMethod Then 
      txtPayment.text = Cell_Text
      If txtPayment.text = "" Then
         $hEditor_gvwPayments = txtPayment
         txtPayment.text = char
         gvwPayments_lblOverLay.Visible = False 
      End If   
   End If   
   $hEditor_gvwPayments.visible = True
   $hEditor_gvwPayments.SetFocus
   
Catch
   Return   'fixme bug here.
   
End

Public Sub gvwPayments_DblClick()
   '------------------------------------------------------------------------------
   'User has clicked on the payments grid, to make a payment record
   'User will be physically unable to click on column 2 (payment type)
   'as the payment type combo appears via gvwPayments_Enter) and overlays the grid
   '------------------------------------------------------------------------------  
   
   Dim iSlotCount As Integer
   
   Return 
   
   If gvwPayments.Enabled = False Then 
      Print "gvwPayments is not enabled"
      Return   'god knows why this responds to the events if disabled   
   Else
      Print "gvwPayments is enabled"
   End If   
   oncol_payments = gvwPayments.Column
   onrow_payments = gvwPayments.Row
   If gvwPayments[gvwPayments.row, gvwPayments.Column].text = "" Then
      If Item_Number_Selected() Then
         txtPayment.text = Trim(Replace(lblInvoiceTotal.Text, "Invoice Total", ""))
      Endif
   Else
      txtPayment.text = gvwPayments[gvwPayments.row, gvwPayments.Column].text
   End If   
   If oncol_payments = cGridColumnPayments_PaymentMethod Then Return 
   bFoundFirst = False  
   onrow_payments = gvwPayments.Row 
   iLeft = gvwPayments[onrow_payments, oncol_payments].Left + gvwPayments.Left
   iTop = ((onrow_payments + 1) * 20) + 2 
   txtPayment.left = iLeft + 2
   txtPayment.top = iTop
   txtPayment.width = gvwPayments.Columns[oncol_payments].Width + 2
   txtPayment.Height = gvwPayments.Rows[0].Height + 5
   txtPayment.Visible = True
   txtPayment.SetFocus()
   
End

Public Sub gvwItemsBilled_HideProperty() As Boolean
   ' If cmbFeeType.Visible Then
   '  cmbFeeType.Visible = False  
   ' Endif
   
   Print "should be hiding property in items grid"
   cmbFeeType.Visible = False  
   textbox1.Visible = False 
   gvwItemsBilled_lblOverLay.Visible = False 
   panGvwItemsBilledEditor.Hide
   $hEditor_gvwItems = Null
   
End

Public Sub gvwItemsBilled_SaveProperty()
   
   Print TypeOf($hEditor_gvwItems), " the type"
   Select Case TypeOf($hEditor_gvwItems)
      Case "text"
   End Select
   
End

Public Sub gvwItemsBilled_ShowProperty()
   '--------------------------------------------------------------------------------
   'nicked from the gambas IDE FProperty.class
   'Shows the control we are using to 'edit' the grid cell aligned over that cell
   'Maybe un-necessariily complex due to my simple brain but does this
   'The panGvwItemsBilledEditor = a Hbox holding 3 controls
   ' - a textbox for editing
   ' - a combobox for choosing the fee levels
   ' - a transparent label to let user click on something without entering edit mode
   '   which is what happens in the gambas IDE - I didn't use this because then I
   '   couldn't show a menu over the grid
   '--------------------------------------------------------------------------------   
   
   Dim hEditor As Object
   
   textbox1.Hide
   cmbFeeType.Hide
   gvwItemsBilled_lblOverLay.Hide   
   panGvwItemsBilledEditor.Hide
   
   Select Case gvwItemsBIlled.column
      Case cGridColumnItem_FeeType
         cmbFeeType.Index = cmbFeeType.Find(gvwItemsBIlled[gvwItemsBIlled.Row, cGridColumnItem_FeeType].Text)
         hEditor = cmbFeeType
      Case Else
         hEditor = gvwItemsBilled_lblOverLay
   End Select
   $hEditor_gvwItems = hEditor
   gvwItemsBilled_MoveProperty        ' Move the Hbox panGvwItemsBilledEditor into position over the cell
   $hEditor_gvwItems.Show             ' Make transparent label "visible" or the combo box visible
   panGvwItemsBilledEditor.Show       ' Show the container, hence the  control
   $hEditor_gvwItems.SetFocus         ' give control focus > responded to key and click events
   Print "have set focus in gwItemsBilled"
   
End

Public Sub gvwItemsBIlled_Clear()
   '----------------------------------------------------------
   'Clear the grid which the staff use to type in item numbers
   '----------------------------------------------------------   
   
   gvwItemsBIlled.Clear()
   item = Null
   OnCol_Items = 0
   onrow_items = 0
   
End

Public Sub gvwItemsBIlled_DblClick()
   
End

Public Sub gvwItemsBilled_lblOverLay_KeyPress() 
   '----------------------------------------------------------------
   'This is a transparent label, "hiding" the editing textbox
   'Pass the keypress character into the underlying textbox if empty
   'and enter 'edit mode'
   '----------------------------------------------------------------   
   
   gwItemsBilled_Cell_Overlay_Remove(key.Text)
   
End

Public Sub gwItemsBilled_Cell_Overlay_Remove(char As String)
   '----------------------------------------------------------------
   'use the underlying cell text to either set the fee combox index
   'or the textbox 1 editing textbox
   'remove the label hiding the control in the grid to allow use
   'either a combobox or a textbox
   '-----------------------------------------------------------------  
   ' Dim hEditor As Object
   
   Dim Cell_Text As String
   
   If gvwItemsBIlled.Row = -1 Then Return 
   cell_text = gvwItemsBIlled[gvwItemsBIlled.Row, gvwItemsBIlled.column].Text
   Print "removing the cell overlay"
   If gvwItemsBIlled.column <> cGridColumnItem_FeeType Then 
      textbox1.text = Cell_Text
      If textbox1.text = "" Then
         $hEditor_gvwItems = textbox1
         textbox1.text = char
         gvwItemsBilled_lblOverLay.Visible = False 
      End If   
   End If   
   $hEditor_gvwItems.visible = True
   $hEditor_gvwItems.SetFocus
   
End

Public Sub gvwItemsBilled_lblOverLay_Menu()
   '---------------------------------------------------------------
   'The user has right mouse clicked on a grid row, but over a cell
   'this means they clicked on the transparent menu
   '---------------------------------------------------------------
   
   Dim row As Integer
   Dim col As Integer
   Dim bHaveText As Boolean
   
   bexit = True
   If bPayingInvoice Then Return 
   For row = 0 To gvwItemsBIlled.Rows.count - 1
      For col = 0 To 4
         If gvwItemsBIlled[row, col].Text <> "" Then
            mnuItems.Popup
            bHaveText = True
            Break
         Endif
      Next
      If bHaveText Then Break
   Next  
   bexit = False  
   
End

Public Sub gvwItemsBilled_lblOverLay_DblClick()
   '-------------------------------------------------------------
   'Looks to use like double clicking on a grid row
   'actually clicking on the transparent label over the grid cell
   'remove this transparent label and enter 'edit mode'
   '-------------------------------------------------------------
   
   gwItemsBilled_Cell_Overlay_Remove("")
   
End

Public Sub gvwItemsBIlled_Init()
   '----------------------------------------------------------
   'Contruct the grid which will hold the items on the invoice
   '----------------------------------------------------------   
   
   With gvwItemsBIlled
      .Rows.H = 20 
      .Columns.Count = 6
      .Rows.count = 4
      .Columns[0].text = "Item"
      .Columns[1].text = "Description"
      .Columns[2].text = "Fee"
      .Columns[3].text = "Gap"
      .Columns[4].text = "Rate"
      .Columns[5].text = "GST"
      .Enabled = False  
   End With
   
End

Public Sub gvwItemsBIlled_Delete_Row(onrow_items As Integer)
   
   Dim col As Integer
   
   If bPayingInvoice Then Return 
   For col = 0 To 5
      gvwItemsBIlled[gvwItemsBIlled.row, col].text = ""
   Next
   HBox_Descriptor.Visible = False  
   columnview1.Visible = False   
   Invoice_Calculate_Total("Invoice Total")
   
End

Public Sub gvwItemsBIlled_Data_Valid() As Boolean
   '-----------------------------------------------------------------------
   'Checks the item data in the grid is value, start of row must be an item 
   'number in the backend need at minimum item number,an amount and a type
   'returns true if rows are valid
   '-----------------------------------------------------------------------
   
   Dim row As Integer
   Dim item As Collection
   Dim bNoDAta As Boolean = True
   
   For row = 0 To gvwItemsBIlled.Rows.Max
      If gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text <> "" Then 
         item = modBillingDBI.Items_Get(gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text, -1, 1)   
         If IsNull(item) Then Return 
         If gvwItemsBIlled[row, cGridColumnItem_Fee].Text = "" Then
            Return 
         Endif
         If gvwItemsBIlled[row, cGridColumnItem_FeeType].Text = "" Then
            Return False
         Endif
         bNoDAta = False   
      End If  
   Next
   If bNoDAta Then Return False
   Return True
   
End

Public Sub gvwItemsBIlled_MouseUp()
   '------------------------------------------------
   'User has clicked on one of the cells in the grid
   '------------------------------------------------
   
   If bPayingInvoice Or bexit Then Return                  'no-go if paying an invoice -can't change existing items 
   If gvwItemsBIlled.Row > 0 And gvwItemsBIlled[0, 0].text = "" Then 'if user clicks on row and row above not filled in move back FIXME THIS CODE DOES NOT DO THIS
      gvwItemsBIlled.row = 0
   Endif
   '  If textbox1.Visible = False Then HBox_Descriptor.Visible = False  
   ' If gvwItemsBIlled.Column <> cGridColumnItem_BriefDescriptor Then HBox_Descriptor.Visible = False   
   gvwItemsBilled_ShowProperty                              'bad name but show the control we want to overlay a cell
   
End

Public Sub gvwItemsBIlled_Scroll()
   '------------------------------------------------------
   'As the grid scrolls re-position the overlying control
   '-----------------------------------------------------   
   
   gvwItemsBilled_MoveProperty
   
End

Public Sub gvwItemsBIlled_Select()
   
   onrow_items = gvwItemsBIlled.Row
   Print "have selected so the onrow_items is now ", onrow_items
   
End

Private Sub gvwItemsBilled_MoveProperty()
   '------------------------------------------------------------------------
   'Move the editing Hbox control to match a grid cell co-ordinates and size
   '------------------------------------------------------------------------ 
   
   If IsNull($hEditor_gvwItems) Or gvwItemsBIlled.Row = - 1 Then Return
   With gvwItemsBIlled[gvwItemsBIlled.Row, gvwItemsBIlled.column]
      panGvwItemsBilledEditor.Move(gvwItemsBIlled.X + .X - gvwItemsBIlled.ScrollX, gvwItemsBIlled.Y + .Y - gvwItemsBIlled.ScrollY, .Width, .Height)
      panGvwItemsBilledEditor.Raise
   End With
   
End

Public Sub cmbEditArea_Enter()
   
   If Last.tag = "fee type" Then last_Fee_Type = cmbFeeType.text
   
End

Public Sub cmbEditArea_KeyPress()
   
   If key.code = key.return And Last.tag = "payment method" Then
      cmbEditArea_Click()
   Endif
   
End

Public Sub cmbEditArea_LostFocus()
   
   Select Case Last.tag
      Case "fee type", "payment method"
         Last.visible = False 
   End Select
   
End

Public Sub cmbFeeType_Click()
   '-------------------------------------------------------------------------------------------
   'Change the fee type re-calculate the columns
   'This event is raised by either user clicking on the combo or medicare/veteran radio buttons
   're-calculate the gap payment or set to zero if this is veterans patient.
   '-------------------------------------------------------------------------------------------
   
   Dim gap_payment As Float
   
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].text = cmbFeeType.Text
   If gvwItemsBIlled[gvwItemsBIlled.row, 0].text <> "" Then  
      Try gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(gvwItemsBIlled[gvwItemsBIlled.row, 0].text, FeeTypes[cmbFeeType.index]!pk)!price
      If Error Then
         Message.info("No fee's exist for the billing level you selected")
         cmbFeeType.index = cmbFeeType.Find(last_Fee_type)
      Else
         '-------------------------------------
         'User has selected a new billing level
         '-------------------------------------
         If gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text = "$0.00" Then
            gvwItemsBIlled_Delete_Row(gvwItemsBIlled.Row)
         Else
            gap_payment = modUtil.MoneyToFloat(gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].text) - modUtil.MoneyToFloat(scheduled_fee!price) 
            If gap_payment = 0 Or rbInvoiceToVeterans.value = True Then
               gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].text = "$0.0"
            Else
               gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].text = modUtil.Money_Format(gap_payment)
            End If
            '---------------------------------------------------------------------------------------------------
            'if the current option button billing is medicare then must change back to private, if not workcover
            '---------------------------------------------------------------------------------------------------
            ' If InStr(gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].text, "Private") Then 
            '     bexit = True
            '    rbInvoiceToPatient.Value = True 'could have been medicare
            '    bexit = False
            ' Else
            '    If Not InStr(gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].text, "DVA") And Not InStr(gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].text, "Schedule") Then
            '       bexit = True
            '       rbInvoiceToPatient.Value = True
            '       bexit = False
            '    Endif
            ' End If
         End If   
      Endif
   End If   
   Invoice_Calculate_Total("Invoice Total")
   gvwItemsBilled_HideProperty
   EditArea_Notify_Data_Change(True)
   
End

Public Sub cmbPaymentMethods_Click()
   
   Dim chequedetails As Collection
   
   gvwPayments[onrow_payments, cGridColumnPayments_PaymentMethod].Text = cmbPaymentMethods.Text
   If InStr(cmbPaymentMethods.Text, "Cheque") Then  
      Select Case cmbPaymentMethods.Text
         Case "Medicare Cheque"
            gvwPayments[onrow_payments, cGridColumnPayments_Bank].Text = "Reserve"
            gvwPayments[onrow_payments, cGridColumnPayments_Branch].text = "Sydney"
         Case "Veteran Cheque"
            
         Case "Cheque"
            '--------------------------------------------------- 
            'Find if this patient has payed by cheque previously
            '---------------------------------------------------
            chequedetails = modBillingDBI.Cheque_Details_Get(fk_patient)
            If Not IsNull(chequedetails) Then
               gvwPayments[onrow_payments, cGridColumnPayments_Bank].Text = chequedetails!bank
               gvwPayments[onrow_payments, cGridColumnPayments_Branch].text = chequedetails!branch
               oncol_payments = cGridColumnPayments_ChequeNumber
               gvwPayments_DblClick()
            Endif
      End Select
      cmbPaymentMethods.Visible = False
      gvwPayments.Column = 2   'anything but cGridColumnPayments_PaymentMethod otherwise combo won't disappear
      gvwPayments.SetFocus() 
   Else
      gvwPayments[onrow_payments, cGridColumnPayments_Bank].Text = ""
      gvwPayments[onrow_payments, cGridColumnPayments_Branch].text = ""
      gvwPayments[onrow_payments, cGridColumnPayments_ChequeNumber].text = ""
   End If   
   EditArea_Notify_Data_Change(True)
   gvwPayments_HideProperty
   
End

Public Sub cmbEditArea_Click()
   
End

Public Sub textbox1_GotFocus()
   '-----------------------------------------------------
   'If searching for brief descriptor then activate timer
   '-----------------------------------------------------   
   
   ' If OnCol_Items = cGridColumnItem_BriefDescriptor Then
   '    With columnview1
   '       .top = Hbox_InvoiceGrid.top + txtPayment.top + txtPayment.height
   '       .left = VBox_InvoiceGrid.Left + txtPayment.Left
   '       .width = txtPayment.Width
   '       .Visible = False  
   '    End With
   '    With HBox_Descriptor
   '       .top = columnview1.Top
   '       .Width = columnview1.Width
   '       .left = columnview1.left
   '       .Height = VBox_InvoiceGrid.height - txtPayment.top - txtPayment.height
   '       If Last.text = "" And gvwItemsBIlled[gvwItemsBIlled.row, 0].text <> "" Then .Visible = True 
   '    End With
   '    iTimer_Search_Mode = cTimer_SearchMode_Descriptor
   ' Endif
   
End

Public Sub textbox1_Activate()
   
   If bexit Then Return 
   panGvwItemsBilledEditor.Hide
   $hEditor_gvwItems = Null
   Select Case OnCol_Items
      Case cGridColumnItem_ItemNumber
         gvwItemsBIlled[gvwItemsBIlled.row, 0].Text = textbox1.text
         textbox1.Visible = False  
         Get_Items(textbox1.text)
      Case cGridColumnItem_Fee
         gvwItemsBIlled[gvwItemsBIlled.row, 2].text = "$" & Trim(textbox1.text)
         textbox1.Visible = False   
         gvwItemsBIlled.SetFocus()
      Case cGridColumnItem_BriefDescriptor
         If IsNull(item) Then Return 
         If IsNull(item!descriptor_brief) Then
            Message.Title = "Brief Descriptors"
            gvwItemsBIlled[gvwItemsBIlled.row, 1].Text = Trim(textbox1.text)
            If Message.question("Do you want to save this brief descriptor?", "Yes", "No") = 1 Then
               modDBConnect.update("billing.fee_schedule", Null, ["pk": item!fk_fee_schedule, "descriptor_brief": gvwItemsBIlled[gvwItemsBIlled.row, 1].Text])   
               item!descriptor_brief = gvwItemsBIlled[gvwItemsBIlled.row, 1].Text
               modDBConnect.CommitTrans()
               textbox1.Visible = False   
               HBox_Descriptor.Visible = False 
               txtDescriptor.text = "" 
               gvwItemsBIlled.SetFocus()
            Endif
         Endif
   End Select
   
End

Public Sub textbox1_KeyPress()
   
   Select Case key.Code
      Case key.Down
         If OnCol_Items = cGridColumnItem_BriefDescriptor Then
            If columnview1.Visible Then
               With columnview1
                  .MoveFirst
                  .Item.Selected = True 
                  .SetFocus()
               End With
            End If 
         End If 
   End Select
   
End

Public Sub textbox1_KeyRelease()
   '--------------------------------------------------------------------
   'if user searching for brief descriptor zero the timer count
   'then once they stop typing and timer_count which is incremented by
   'Timer1_Timer > 3 the search is triggered see   Descriptors_Brief_Get
   '--------------------------------------------------------------------
   
   If Trim(textbox1.text) = "" Then Return  
   timer_count = 0
   If OnCol_Items = cGridColumnItem_BriefDescriptor Then
      timer1.Enabled = True   
      timer1.Start
   Else
      timer1.Enabled = False  
      timer1.Stop
   Endif
   
End

Public Sub Form_Close()
   
   Settings_Save() 
   
End

Private Sub Settings_Load()
   
   Try Vsplit_Main.layout = Settings["Billing_RecordVisit/VSplit_Main.Layout"[4, 1]]
   Try Hsplit_Main.Layout = Settings["Billing_RecordVisit/HSplit_Main.Layout"[1, 4]] 
   Hsplit_EditArea.Layout = Settings["Billing_RecordVisit/HSplit_EditArea.Layout", [2, 1]]  
   Try cvwItemsBilled.Font = Font[Settings["Billing_RecordVisit/cvwItemsBilled.font"]] 
   
End

Public Sub Settings_Save()
   
   Settings["Billing_RecordVisit/VSplit_Main.Layout"] = Vsplit_Main.Layout
   Settings["Billing_RecordVisit/HSplit_Main.Layout"] = Hsplit_Main.Layout
   Settings["Billing_RecordVisit/HSplit_EditArea.Layout"] = Hsplit_EditArea.Layout
   
End

Public Sub Save(bBulkBill As Boolean, Optional bPrint As Boolean = True, Optional bAccount As Boolean = False) ', Optional bPaid As Boolean = False)
   ' Public Sub Make_Invoice(pk_patient As Integer, items As Collection[], fk_lu_billing_type As Integer, date_printed As Date Default Null, fk_staff As Integer = 0, Optional notes As String = "") As Integer
   ' CREATE TABLE billing.invoices
   ' (
   '  pk serial NOT NULL,
   '   fk_staff_invoicing integer NOT NULL, -- the staff member raising the invoice
   '   date_printed timestamp without time zone,
   '   notes text,
   '   reference text,
   '   fk_staff_provided_service integer NOT NULL, -- the staff member who provider the service on which the invoice is based
   '   fk_patient integer,
   '   date_invoiced timestamp without time zone NOT NULL DEFAULT now(),
   '   paid boolean NOT NULL DEFAULT false,
   '   fk_payer_person integer, -- if not null then the key to the person who pays the bill
   '   fk_payer_branch integer, -- if not null then payer is an organisation/branch
   '   latex text NOT NULL, -- the LaTeX definition of the invoice generated
   '   fk_branch integer NOT NULL, -- The branch at which the patient was provided with the service
   '   visit_date date, -- The date time of the patient visit - may be null because the invoice could be raised not in relation to a visit
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   ' CREATE TABLE billing.items_billed
   
   Dim invoice As New CRow
   Dim item As CRow
   Dim payment As CRow
   Dim payment_method As Collection  
   Dim bPaid As Boolean = False
   Dim grid_row As Integer
   Dim total_paid As Float
   Dim invoice_total As Float
   Dim sMsg As String
   
   If VBox_EditArea_Outer.Padding = 0 Then Return           'no data change no save
   If Not Valid_Invoice_Items() Then Return                 'items invalid no save
   '-----------------------------------------------------
   'Now, work out if being paid, if so ?all, is it valid?
   '-----------------------------------------------------
   If lblPaymentTotal.text <> "" Then  
      Message.Title = "Payment of Invoice"   
      For grid_row = 0 To gvwPayments.Rows.Max
         If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then            'if have an amount
            If gvwPayments[grid_row, cGridColumnPayments_PaymentMethod].text = "" Then
               gvwPayments.Row = grid_row
               gvwPayments.Column = cGridColumnPayments_PaymentMethod
               Message.Info("Please enter type of payment.\n\n")
               gvwPayments_Click()
               Return
            Endif
            total_paid = total_paid + CFloat(Val(Replace(gvwPayments[grid_row, cGridColumnPayments_Amount].text, "$", ""))) 
         Else
            If grid_row = 0 Then   
               gvwPayments.Row = 0
               gvwPayments.Column = 0
               Message.Info("Please enter amount of payment.\n\n")
               gvwPayments_DblClick()
               Return
            End If
         End If  
      Next
   End If   
   '------------------------------------------------------------
   'finally if being paid, does the paid amount match the total?
   '------------------------------------------------------------
   invoice_total = CFloat(Val(Right(lblInvoiceTotal.text, Len(lblInvoiceTotal.text) - InStr(lblInvoiceTotal.text, " $") - 1)))
   If total_paid <> 0 Then 
      If total_paid < invoice_total Then  
         sMsg = "The invoice amount and amount paid do not match.\n\n"
         "Do you wish to accept part payment of this invoice?\n\n"
         If Message.Question(sMsg, "Yes - accept part payment", "No") = 2 Then Return
      Else
         If total_paid > invoice_total Then 
            Message.Info("The amount being paid is greater than the invoice total.")
            Return
         Endif
         
      Endif
   End If   
   '-----------------------------------------------------------------------------
   'At this point validation finished total_paid 0 or amount <= invoice total
   'Create or edit the invoice
   'If editing (e.g paying) then user will not have been able to change
   'any of the core invoice details, ie date originally invoiced, who invoiced it
   '-----------------------------------------------------------------------------
   If fk_invoice Then                                                   'existing invoice
      invoice.put_unchanged(fk_invoice, "fk_invoice")                   'edit the record
   Else
      invoice!fk_staff_invoicing = modDBConnect.currentUser!fk_staff    'new - then current user is doing the invoicing
      invoice!date_invoiced = Now()
      invoice!date_printed = Now()
      invoice!notes = cmbInvoiceComments.Text
      invoice!reference = Trim(txtReferenceDetails.text)
      If bBulkBill Then
         If rbInvoiceToMedicare.value = True Then invoice!fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare
         If rbInvoiceToVeterans.value = True Then invoice!fk_lu_bulk_billing_type = const.BulkBilling_Type_Veteran
      Endif
      If cmbSeenBy.Index <> -1 Then    
         invoice!fk_staff_provided_service = staff[cmbSeenBy.index]!fk_staff
      End If 
      If fk_patient <> 0 Then invoice!fk_patient = fk_patient     'may not be for a patient
      If fk_appointment <> 0 Then invoice!fk_appointment = fk_appointment
      invoice!fk_branch = modDBConnect.currentUser!fk_branch      'branch at which service was provided
      If fk_payer_branch <> 0 Then invoice!fk_payer_branch = fk_payer_branch
      If fk_payer_person <> 0 Then invoice!fk_payer_person = fk_payer_person
      invoice!visit_date = Val(txtDate.text)
   End If   
   '----------------------------------
   'has the invoice been paid in full?- fix this code
   '----------------------------------
   If invoice_total = total_paid Then 
      invoice!paid = True  
      bpaid = True
   Else
      bpaid = False 
   End If  
   invoice.Save("billing.invoices", "fk_invoice")
   '------------------------------------
   'Get the items from the grid and save
   'FIXME - will later keep the underlying grid data in an array of some sort
   'and dispose of some of these backend calls
   '------------------------------------
   If fk_invoice = 0 Then  'FIXME MAY HAVE TO ALLOW EDITING OF THIS
      For grid_row = 0 To gvwItemsBIlled.Rows.count - 1  'fixme check all necessary data is in grids cells
         If gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text <> "" Then  
            item = New CRow
            item!fk_fee_schedule = modBillingDBI.fk_fee_shedule_Get_For_Item_Number(gvwItemsBIlled[grid_row, cGridColumnItem_ItemNumber].Text)
            item!amount = gvwItemsBIlled[grid_row, cGridColumnItem_Fee].Text
            item!fk_invoice = invoice!fk_invoice
            item!fk_lu_billing_type = Billing_Type_Get_Pk(gvwItemsBIlled[grid_row, cGridColumnItem_FeeType].Text)
            item!amount_gst = gvwItemsBIlled[grid_row, cGridColumnItem_gst_amount].Text
            item.Save("billing.items_billed", "fk_item_billed")
         End If   
      Next
   End If   
   '----------------------------------------------------
   'Now, is this invoice being paid? in part or in full?
   '----------------------------------------------------
   If total_paid > 0 Then
      '  pk serial NOT NULL,
      '   fk_invoice integer NOT NULL,
      '   amount money NOT NULL,
      '   fk_lu_payment_method integer,
      '   date_paid timestamp without time zone NOT NULL DEFAULT now(),
      For grid_row = 0 To gvwPayments.Rows.count - 1
         If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then 
            payment = New CRow
            payment!fk_invoice = invoice!fk_invoice  
            payment!amount = gvwPayments[grid_row, cGridColumnPayments_Amount].Text
            For Each payment_method In Payment_Methods
               If payment_method!method = gvwPayments[grid_row, cGridColumnPayments_PaymentMethod].text Then
                  payment!fk_lu_payment_method = payment_method!pk
                  Break
               Endif
            Next
            'this simple way screwed by ians smart changes.
            '   payment!fk_lu_payment_method = Payment_Methods[gvwPayments[x, cGridColumnPayments_PaymentMethod].text]!fk_lu_payment_method  
            payment!date_paid = Now()
            payment!fk_staff_receipted = modDBConnect.currentUser!fk_staff
            payment.Save("billing.payments_received", "fk_payment")
         End If   
      Next
   Endif
   '------------------------------------------
   'finally mark this appointment as invoiced
   'fixme only update  this on first pass
   'fime  misnomer invoice or reciept
   '-----------------------------------------
   If combobox1.index = cInvoiceDisplayMode_UnbilledAll Or combobox1.index = cInvoiceDisplayMode_UnbilledToday Then  
      modDBConnect.update("clerical.bookings", Null, ["pk": Unbilled_consultation!pk, "invoiced": True])  'may not have an appt.
   End If   
   'fixme won't always be printed.
   ' If fk_invoice = 0 And Not bpaid Then 
   If fk_invoice = 0 Then   
      invoice!latex = modBillingDBI.Print_Invoice(invoice!fk_invoice, bPrint, bBulkBill) 
      modDBConnect.update("billing.invoices", Null, ["pk": invoice!fk_invoice, "latex": invoice!latex])
   End If   
   modDBConnect.CommitTrans
   EditArea_Notify_Data_Change(False)
   Reload() 
   
End 

Public Sub Billing_Type_Get_Pk(txt As String) As Integer
   
   Dim type As Collection
   
   For Each type In FeeTypes
      If type!type = txt Then
         Return type!pk
      Endif
   Next 
   
End

Public Sub Form_Show()
   
   Try Resize_Grids()
   
End

Public Sub Form_Resize()
   
   Try Resize_Grids()
   gvwItemsBilled_MoveProperty
   
End
' 

Public Sub HSplit_Main_Resize()
   
   Try Resize_Grids
   
End

Public Sub Resize_Grids()
   
   With gvwItemsBIlled
      .Columns[0].width = 60
      .Columns[1].width = gvwItemsBIlled.width - 470
      .Columns[2].width = 60
      .Columns[3].width = 60
      .Columns[4].width = 200
      .Columns[5].width = 60
      lblmeasure.text = "Invoice Total "
      lblPaymentLeft.width = gvwItemsBIlled.Columns[0].width + gvwItemsBIlled.Columns[1].width - lblmeasure.width   
      lblPaymentTotal.width = lblmeasure.width + gvwItemsBIlled.Columns[3].width 
      lblInvoiceTotal.width = lblPaymentTotal.Width
      lblInvoiceLeft.width = lblPaymentLeft.Width
      lblInvoiceRight.width = lblPaymentRight.Width 
      With lblcol1
         .width = gvwItemsBIlled.Columns[0].Width
         .text = "Item"
      End With
      With lblcol2
         .width = gvwItemsBIlled.Columns[1].Width
         .text = "Brief Descriptor"
      End With
      With lblcol3
         .width = gvwItemsBIlled.Columns[2].Width
         .text = "Fee"
      End With
      With lblcol4
         .width = gvwItemsBIlled.Columns[3].Width
         .text = "Gap"
      End With
      With lblcol5
         .width = gvwItemsBIlled.Columns[4].Width
         .text = "Rate"
      End With
      With lblcol6
         .width = gvwItemsBIlled.Columns[5].Width
         .text = "GST"
      End With
   End With
   
End

Public Sub Appointment_icons_Get_Picture(Appointment_Icons As Collection) As Collection 
   '-----------------------------------------------------------------------------------------
   'Loads the actual picture of the appointment icon into the collection got from the backend
   '-----------------------------------------------------------------------------------------
   
   Dim Appointment_icon As Collection
   
   For Each Appointment_Icon In Appointment_Icons
      Appointment_Icon!picture = Picture.Load(Appointment_Icon!icon_path)
   Next
   Return Appointment_Icons
   
End

Public Sub Descriptors_Brief_Get()
   
   If Trim(textbox1.text) = "" Then Return  
   timer1.Stop
   With columnview1
      .Clear
      .Visible = False
   End With
   Descriptors_Brief = modBillingDBI.Descriptors_Brief_Get(Trim(textbox1.text))
   If Descriptors_Brief.count Then
      For Each Descriptor_Brief In Descriptors_Brief  
         columnview1.Add(Descriptor_Brief!pk, 0)
         columnview1[Descriptor_Brief!pk][0] = Descriptor_Brief!mbs_item
         columnview1[Descriptor_Brief!pk][1] = Descriptor_Brief!descriptor_brief
      Next
      With columnview1
         .Raise
         .Visible = True   
      End With
   Else
      
   End If
   
End

Public Sub UnBilled_Consultations_Get()
   
End

Public Sub Patients_Get()
   '-------------------------------------------------------------------
   'Get patients ILIKE txtFindPatient
   'Note as this returns multiple lines if there are multiple addresses
   'keep only one instance of the patient
   '-------------------------------------------------------------------
   
   Dim last_fk_patient As Integer
   
   If Trim(txtSearch.text) = "" Then Return 
   Inc Application.Busy
   Print "getting patients"
   timer1.Stop
   columnview99.Clear
   patients = modContactsDBI.patients_get_firstname_surname(Trim(txtSearch.text))       
   patients.Remove("sql_in_english")
   Dec Application.Busy
   If patients.count Then
      For Each patient In patients
         If last_fk_patient <> patient!fk_patient Then   
            columnview99.Add(patient!pk_view, 0)
            columnview99[patient!pk_view][0] = patient!wholename
            columnview99[patient!pk_view][1] = Format(patient!birthdate, "dd/mm/yyyy")
            last_fk_patient = patient!fk_patient   
         End If   
      Next
      If patients.count = 1 Then
         With columnview99
            .SetFocus()
            .MoveFirst
            .Item.Selected = True  'trigger columnview99_Select()
         End With
      Endif
   Endif
   
End

Public Sub Get_Items(txt As String)
   'developmental prototype only doesn't just get items.
   'A patient may have a default 'billing_level' eg. private or health care concession
   ' "1";"Bulk Bill"
   ' "2";"Private"
   ' "3";"Health Care Card Concession"
   ' "4";"Pensioner Concession"
   ' "5";"Medico-Legal"
   'however these billing_levels are not the same as the concept of billing_types in the backend
   ' "1";"AMA Fee"
   ' "2";"DVA (Non LMO rate)"
   ' "3";"DVA (LMO rate)"
   ' "4";"Health Care Card Concession"
   ' "5";"Pensioner Concession"
   ' "6";"Private Fee"
   ' "7";"TAC (Transport Accident Commission)"
   ' "8";"Schedule Fee"
   ' For example a patient may be bulk billed as either medicare or veteran (for some things) or both
   ' or a practice may bill privately at the AMA rate, or pripatientsvately at a concession rate
   
   Dim fk_lu_billing_type As Integer
   Dim bMissingBriefDescriptor As Boolean
   Dim billing_type As String
   Dim price As Variant
   Dim AreaOfNeed_Item As Collection 
   Dim patient_age_in_years As Integer
   Dim sMsg As String
   Dim bEntitledVeteran As Boolean
   
   If textbox1.text = "" Then Return 'no item number to search for
   txtDescriptor.text = ""
   bExit = True
   If form_billingcards.Veteran_Card_Type() > 0 Then     'they must be an entitled veteran in some capacity
      bEntitledVeteran = True                                  
      If form_billingcards.Veteran_Card_Type() = const.Veteran_Entitlement_Specific Then
         sMsg = "The Veteran is listed for specific entitlements only.\n\n"
         "Was the consultation for one of their listed entitlements?"
         If Message.Question(sMsg, "Yes", "No") = 2 Then
            bEntitledVeteran = False 
            rbInvoiceToPatient.Value = True   
            fk_lu_default_billing_level = const.Billing_Default_Level_Private
         End If
      Endif
   Endif
   If rbInvoiceToMedicare.Value = True Or rbInvoiceToVeterans.value = True Then
      fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill
   Endif
   Select Case fk_lu_default_billing_level     
      Case const.Billing_Default_Level_BulkBill
         If rbInvoiceToMedicare.Value = True Then 
            fk_lu_billing_type = const.Billingtype_Scheduled_Fee
            billing_type = "Schedule Fee"
         Else
            fk_lu_billing_type = const.Billingtype_DVA_LM0    'fixme in config file put in dvo lmo or non lmo rate
            billing_type = "DVA (LMO rate)" 
         End If   
      Case const.Billing_Default_Level_PensionerConcession
         fk_lu_billing_type = const.Billingtype_Pensioner_Concession
         billing_type = "Pensioner Concession"
      Case const.Billing_Default_Level_HealthCareCardConcession
         fk_lu_billing_type = const.Billingtype_Health_Care_Card_Concession
         billing_type = "Health Care Card Concession"
      Case const.Billing_Default_Level_Private
         fk_lu_billing_type = const.Billingtype_Private
         billing_type = "Private Fee"
      Case const.Billing_Default_Level_MedicoLegal
         fk_lu_billing_type = const.Billingtype_Private
         billing_type = "Private Fee" 'fixme
      Case Else 'is null
         fk_lu_billing_type = const.Billingtype_Private                         'default to private billing
         billing_type = "Private Fee"
   End Select
   Scheduled_Fee = modBillingDBI.Fee_Get_For_Item_And_Billing_Type(Trim(txt), const.Billingtype_Scheduled_Fee)
   'Look in ordinary items first,if fail and we have a non-patient payer - try workcover
   Items = modBillingDBI.Items_Get(Trim(txt), fk_lu_billing_type)
   If items.count = 0 And textlabelPayer.text <> "" Then 
      Items = modBillingDBI.Items_Get(Trim(txt), const.Billingtype_Workcover)
   End If
   If items.count = 0 Then 
      Message.Info("The item number was not found")
      gvwItemsBIlled_Delete_Row(gvwItemsBIlled.row)
      bExit = False  
      Return
   End If  
   
   If items.count Then
      For Each item In items 'fixme ?proper way of doing this
         If IsNull(item!descriptor_brief) Then
            bMissingBriefDescriptor = True   
         Endif
         price = Replace(item!price, "$", "") 
         gvwItemsBIlled[gvwItemsBIlled.row, 1].Text = item!descriptor_brief
         gvwItemsBIlled[gvwItemsBIlled.row, 2].Text = item!price
         Try gvwItemsBIlled[gvwItemsBIlled.row, 3].Text = modUtil.Money_Format(Str(CFloat(Val(Replace(item!price, "$", ""))) - CFloat(Val(Replace(Scheduled_Fee!price, "$", "")))))
         gvwItemsBIlled[gvwItemsBIlled.row, 4].text = item!fee_type
         last_Fee_type = item!fee_type
         If Not IsNull(item!gst_rate) And item!gst_rate <> 0 Then 'FIX ME ?CONVERT BACKEND TO NULL IN THIS FIELD NOT ZERO.
            gvwItemsBIlled[gvwItemsBIlled.row, 5].Text = modUtil.Money_Format(price / item!gst_rate)
         Endif
         Break
      Next
      bExit = False 
      '-------------------------------------------------------------------------------------------------------
      'If the practice is in an area of need it attracts the 10091 item number
      'Need to work out if patient is a veteran and entitled
      'Also a child <16yrs could be being bulk billed whose parents are not covered by health cards or pension
      '-------------------------------------------------------------------------------------------------------
      If bAreaOfNeed Then
         If fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill Then
            'if child <12 months eg e.g 4m20d hence defaults to patient_age_in_years = 0
            If txtAge.text <> "" And InStr(txtAge.text, "y") Then patient_age_in_years = Val(Split(txtAge.text, "y")[0])
            ' If form_billingcards.Veteran_Card_Type() > 0 Then     'they must be an entitled veteran in some capacity
            '     bEntitledVeteran = True                                  
            '    If form_billingcards.Veteran_Card_Type() = const.Veteran_Entitlement_Specific Then
            '       sMsg = "The Veteran is listed for specific entitlements only.\n\n"
            '              "Was the consultation for one of their listed entitlements?"
            '       If Message.Question(sMsg, "Yes", "No") = 2 Then bEntitledVeteran = False  
            '     Endif
            ' Endif
            If bEntitledVeteran Or patient_age_in_years < 16 Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Health_Care_Card Or form_billingcards.Centrelink_Card_Type() = const.Centrelink_Concession_Card_Pensioner_concession_card Then 
               AreaOfNeed_Item = modBillingDBI.Area_Of_Need_Fee("10991", fk_lu_billing_type)
               If Not IsNull(AreaOfNeed_Item) Then
                  onrow_items = Min(gvwItemsBIlled.row + 1, 3)
                  price = Replace(AreaOfNeed_Item!price, "$", "") 
                  gvwItemsBIlled.row = onrow_items
                  gvwItemsBIlled_FillRow(price, AreaOfNeed_Item)
               Endif
            End If   
         Endif
      Endif
      Invoice_Calculate_Total("Invoice Total")
   Else
      item = Null 
   Endif
   EditArea_Notify_Data_Change(True)
   OnCol_Items = 0
   onrow_items = Min(onrow_items + 1, 3)
   With gvwItemsBIlled
      .Column = OnCol_Items
      .Row = onrow_items
      .SetFocus()
   End With
   bExit = False  
   
End

Public Sub gvwItemsBIlled_FillRow(price As Float, item As Collection)
   '-------------------------------------------
   'Adds a row of data to the items billed grid   
   '-------------------------------------------
   
   price = Replace(item!price, "$", "") 
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_ItemNumber].Text = item!mbs_item
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_BriefDescriptor].Text = item!descriptor_brief
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Fee].Text = item!price
   If item!mbs_item <> "10991" Then 
      Try gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = modUtil.Money_Format(Str(CFloat(Val(Replace(item!price, "$", ""))) - CFloat(Val(Replace(Scheduled_Fee!price, "$", "")))))
   Else
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_Gap].Text = "$0.00"
   End If   
   gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_FeeType].text = item!fee_type
   last_Fee_type = item!fee_type
   If Not IsNull(item!gst_rate) And item!gst_rate <> 0 Then 'FIX ME ?CONVERT BACKEND TO NULL IN THIS FIELD NOT ZERO.
      gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_gst_amount].Text = modUtil.Money_Format(price / item!gst_rate)
   Endif
   
End

Public Sub columnview1_KeyPress()
   
   If key.code = key.return Then
      columnview1_DblClick
   End If  
   
End

Public Sub columnview1_DblClick()
   
   columnview1.MoveCurrent()
   Select Case Last.tag.tag
         
      Case "something"
         
         Descriptor_Brief = Descriptors_Brief[columnview1.Item.key]
         If Not IsNull(Descriptor_Brief!mbs_item) Then
            gvwItemsBIlled[onrow_items, 0].text = Descriptor_Brief!mbs_item 'double done in get_items, prototype only fixme
         End If
         If Not IsNull(Descriptor_Brief!ama_item) Then
            gvwItemsBIlled[onrow_items, 0].text = Descriptor_Brief!ama_item
         End If
         If Not IsNull(Descriptor_Brief!user_item) Then
            gvwItemsBIlled[onrow_items, 0].text = Descriptor_Brief!user_item
         End If
         Get_Items(gvwItemsBIlled[onrow_items, 0].text) 'duplication in a way 'see note in subroutine
         textbox1.Visible = False   
         gvwItemsBIlled.SetFocus()
      Case "payer search"
         Organisation_Select()
   End Select
   
End

Public Sub mnuItems_Click()
   
   Select Case Last.tag
      Case "delete item"
         gvwItemsBIlled_Delete_Row(onrow_items)
      Case "delete all items"
         gvwItemsBIlled_Clear()
      Case "add item"
         Inc gvwItemsBIlled.Rows.count
         gvwItemsBIlled.row = gvwItemsBIlled.Rows.Max
         gvwItemsBilled_DblClick()
   End Select 
   
End

Public Sub mnuItemsBilled_Click()
   
   cvwItemsBilled.MoveCurrent()
   Item_Billed = Items_Billed[cvwItemsBilled.Item.key] 
   Select Case Last.tag
      Case "invoice delete"
      Case "invoice mark unpaid"
         If Message.Question("Mark this invoice as unpaid?", "Yes", "No") = 2 Then Return 
         modDBConnect.update("billing.invoices", Null, ["pk": Item_Billed!fk_invoice, "paid": False])
         modDBConnect.CommitTrans()
         cvwItemsBilled_Refresh()
         If cvwItemsBilled.count Then
            cvwItemsBilled.MoveFirst
            cvwItemsBilled.Item.Selected = True  'should trigger loading the edit area
         Endif
      Case "item delete"
         Invoice_Delete_Item(Item_Billed)
      Case "reprint invoice"
         modPrinting.Print_latex(Item_Billed!latex)
      Case "font"
         modUtil.Columnview_SetFont(cvwItemsBilled, "Billing_RecordVisit")
   End Select 
   
End

Public Sub cvwItemsBilled_Menu()
   
   If cvwItemsBilled.count Then
      mnuItemsBilled.Popup()
   End If    
   
End

Public Sub Invoice_Delete_Item(i As Collection)
   
End

Public Sub Invoice_Calculate_Total(sTotalType As String)
   '----------------------------------------------------------------
   'Calculates the total amount of all items billed for this invoice
   '----------------------------------------------------------------   
   
   Dim x As Integer
   
   Invoice_total = 0 
   For x = 0 To gvwItemsBIlled.Rows.Count - 1
      If gvwItemsBIlled[x, cGridColumnItem_Fee].text = "" Then Break
      Invoice_total = Invoice_total + CFloat(Val(Replace(gvwItemsBIlled[x, cGridColumnItem_Fee].text, "$", "")))
      If gvwItemsBIlled[x, cGridColumnItem_gst_amount].text <> "" Then
         Invoice_total = Invoice_total + CFloat(Val(Replace(gvwItemsBIlled[x, cGridColumnItem_gst_amount].text, "$", "")))
      Endif
   Next
   With lblInvoiceTotal
      .text = sTotalType & "  " & modUtil.Money_Format(Invoice_total)
      .Font.Bold = False   
      .Foreground = Color.Black
      .Border = Border.Plain
   End With
   
End

Public Sub Payment_Calculate_Total()
   '-----------------------------------------------------------------
   'Calculates the total amount of all payments made for this invoice
   '------------------------------------------------------------------  
   
   Dim x As Integer
   Dim total As Float
   
   For x = 0 To gvwPayments.Rows.Count - 1
      If gvwPayments[x, cGridColumnPayments_Amount].text = "" Then Break
      total = total + CFloat(Val(Replace(gvwPayments[x, cGridColumnPayments_Amount].text, "$", "")))
   Next
   With lblPaymentTotal
      .text = "Payment Total  " & modUtil.Money_Format(total)
      .Font.Bold = False   
      .Foreground = Color.Black
      .Border = Border.Plain
   End With
   
End

Public Function Money_Add(monies As Variant[]) As String
   'IAN FIXME I NEED FUNCTION TO ADD UP MONEY 
   
End

Public Sub rbInvoiceTo_Click()
   '-------------------------------------------------------------------
   'If user changes billing level, change data in grid appropriately
   ' loop variable must be local but set gvwItemsBIlled = row
   ' so that when cmbFeeType.index = cmbFeeType.Find(Last.tag) triggers
   ' cmbFeeType_Click we are on the correct row in cmbFeeType_Click()
   '-------------------------------------------------------------------
   
   Dim row As Integer
   
   If bExit Then Return 
   textlabelPayer.text = ""
   
   gvwItemsBIlled.row = 0
   gvwItemsBIlled.Select
   For row = 0 To gvwItemsBIlled.Rows.Max
      onrow_items = row                           
      If gvwItemsBIlled[row, cGridColumnItem_ItemNumber].Text <> "" Then
         If gvwItemsBIlled[row, cGridColumnItem_FeeType].text <> Last.tag Then
            gvwItemsBIlled.row = row 
            cmbFeeType.index = cmbFeeType.Find(Last.tag) 'triggers cmbFeeType_Click
         End If  
      End If 
   Next
   
End

Public Sub timer1_Timer()
   '-----------------------------------------------------------------------
   ' How this works for example
   ' EditArea_TextBox_GotFocus()   - enables the timer
   '                               - turns on the timer
   ' iTimer_Search_Mode            - set to  cTimer_SearchMode_Patient
   '                
   ' EditArea_Textbox_KeyRelease() - zeros timer_count to 0
   '                               - when user stops typing timer_count > 3
   '                                 and the search starts
   ' Whichever routine is searching eg Patients_Get() - stops timer
   ' VBox_PatientsList_Leave() - disables and turns off timer
   ' Note that EditArea_TextBox_LostFocus() is not used for this
   ' because it is a unreliable event - does not always trigger
   ' depends on which control after the textbox receives focus!
   ' ----------------------------------------------------------------------
   
   Inc timer_count
   Print "in timer", timer_count 
   If timer_count > 3 Then
      Print "search mode", iTimer_Search_Mode
      Select Case iTimer_Search_Mode
         Case cTimer_SearchMode_Patient
            Patients_Get
         Case cTimer_SearchMode_Descriptor
            Descriptors_Brief_Get
         Case cTimer_SearchMode_Payer
            Organisations_Get()
         Case cTimer_SearchMode_FeeSchedule
            Scheduled_Fees_Search
      End Select
   Endif
   
End

Public Sub VBox_InvoiceGrid_Leave()
   
   Print "should be leaving"
   ' gvwItemsBilled_HideProperty
   Return 
   gvwItemsBilled_SaveProperty
   Return 
   If Not IsNull($hEditor_gvwItems) Then
      If OnCol_Items = cGridColumnItem_ItemNumber Then
         If gvwItemsBIlled[gvwItemsBIlled.row, cGridColumnItem_BriefDescriptor].text = "" Then
            textbox1_Activate()
         Endif
      Endif
      gvwItemsBIlled[gvwItemsBIlled.row, gvwItemsBIlled.Column].text = Trim(textbox1.text)
   Endif
   If cmbFeeType.Visible Then
      gvwItemsBIlled[onrow_items, cGridColumnItem_FeeType].text = cmbFeeType.Text
      cmbFeeType.Visible = False 
   Endif
   textbox1.Visible = False  
   timer1.Enabled = False   
   
End

Public Sub Billing_Defaults_Save()
   '-----------------------------------------------------------------
   'Save the billing defaults from the embedded FPatientBillingCards
   '-----------------------------------------------------------------
   
   Dim patient_billing_data As New CRow
   
   Print Patients
   If Not form_billingcards.Valid_Data() Then Return 
   patient_billing_data.put_unchanged(fk_patient, "fk_patient")
   If form_billingcards.Responsible_Payer_Get_fk_Person() = 0 Then
      patient_billing_data!fk_payer_person = Null
   Else
      patient_billing_data!fk_payer_person = form_billingcards.Responsible_Payer_Get_fk_person()
   Endif
   patient_billing_data!medicare_number = form_billingcards.Medicare_Number()
   patient_billing_data!medicare_ref_number = form_billingcards.Medicare_Reference_number()
   patient_billing_data!medicare_expiry_date = modUtil.Medicare_Create_Expiry_date(form_billingcards.Medicare_Card_Expiry_Date())
   patient_billing_data!veteran_number = form_billingcards.Veteran_Card_Number()
   If patient_billing_data!veteran_number <> "" Then 
      patient_billing_data!fk_lu_veteran_card_type = form_billingcards.Veteran_Card_Type()
      patient_billing_data!veteran_specific_condition = form_billingcards.veteran_specific_condition()
   Else
      patient_billing_data!fk_lu_veteran_card_type = Null
      patient_billing_data!veteran_specific_condition = Null
   End If  
   patient_billing_data!concession_card_number = form_billingcards.Concession_Card_Number()
   If patient_billing_data!concession_card_number <> "" Then
      patient_billing_data!concession_card_expiry_date = form_billingcards.Concession_Card_Expiry_Date()
      patient_billing_data!fk_lu_centrelink_card_type = form_billingcards.Centrelink_Card_Type()
   Else
      patient_billing_data!concession_card_expiry_date = Null
      patient_billing_data!fk_lu_centrelink_card_type = Null
   Endif
   patient_billing_data!fk_lu_default_billing_level = form_billingcards.Billing_level_Get()
   patient_billing_data!fk_lu_private_health_fund = form_billingcards.Private_Health_Fund()
   If patient_billing_data!fk_lu_private_health_fund <> const.PrivateHealthFund_None Then
      patient_billing_data!private_insurance = True
   Else
      patient_billing_data!private_insurance = False  
   Endif
   patient_billing_data!fk_doctor = form_billingcards.Preferred_Doctor()   
   patient_billing_data.Save("clerical.data_patients", "fk_patient")
   modDBConnect.CommitTrans()
   'now update the already loaded data
   Print "Now - end of saving billing the flag bexit is", bexit
   If Not IsNull(patient) Then
      patients[columnview99.Item.key]!fk_payer = patient_billing_data!fk_payer_person
      Payer_Get(patients[columnview99.Item.key])
      patients[columnview99.Item.key]!medicare_number = patient_billing_data!medicare_number
      patients[columnview99.Item.key]!medicare_ref_number = patient_billing_data!medicare_ref_number
      patients[columnview99.Item.key]!medicare_expiry_date = patient_billing_data!medicare_expiry_date
      patients[columnview99.Item.key]!veteran_number = patient_billing_data!veteran_number
      If patient_billing_data!veteran_number <> "" Then 
         patients[columnview99.Item.key]!fk_lu_veteran_card_type = patient_billing_data!fk_lu_veteran_card_type 
         patients[columnview99.Item.key]!veteran_specific_condition = patient_billing_data!veteran_specific_condition
      End If
      patients[columnview99.Item.key]!Concession_Card_Number = patient_billing_data!concession_card_number 
      If patient_billing_data!concession_card_number <> "" Then
         patients[columnview99.Item.key]!concession_card_expiry_date = patient_billing_data!concession_card_expiry_date
         patients[columnview99.Item.key]!fk_lu_centrelink_card_type = patient_billing_data!fk_lu_centrelink_card_type
      End If
      patients[columnview99.Item.key]!fk_lu_default_billing_level = patient_billing_data!fk_lu_default_billing_level 
      patients[columnview99.Item.key]!fk_lu_private_health_fund = patient_billing_data!fk_lu_private_health_fund
      If patient_billing_data!fk_lu_private_health_fund <> const.PrivateHealthFund_None Then
         patients[columnview99.Item.key]!private_insurance = True
      Else
         patients[columnview99.Item.key]!private_insurance = False  
      Endif
      patients[columnview99.Item.key]!fk_doctor = patient_billing_data!fk_doctor 
   Endif
   If Not IsNull(Unbilled_consultation) Then
      Unbilled_consultation!fk_payer = patient_billing_data!fk_payer_person
      Print "before payer - bexit is", bexit
      Payer_Get(Unbilled_consultation)
      Print "after payer  - bexit is", bexit
      Unbilled_consultation!medicare_number = patient_billing_data!medicare_number
      Unbilled_consultation!medicare_ref_number = patient_billing_data!medicare_ref_number
      Unbilled_consultation!medicare_expiry_date = patient_billing_data!medicare_expiry_date
      Unbilled_consultation!veteran_number = patient_billing_data!veteran_number
      If patient_billing_data!veteran_number <> "" Then 
         Unbilled_consultation!fk_lu_veteran_card_type = patient_billing_data!fk_lu_veteran_card_type 
         Unbilled_consultation!veteran_specific_condition = patient_billing_data!veteran_specific_condition
      End If
      Unbilled_consultation!Concession_Card_Number = patient_billing_data!concession_card_number 
      If patient_billing_data!concession_card_number <> "" Then
         Unbilled_consultation!concession_card_expiry_date = patient_billing_data!concession_card_expiry_date
         Unbilled_consultation!fk_lu_centrelink_card_type = patient_billing_data!fk_lu_centrelink_card_type
      End If
      Unbilled_consultation!fk_lu_default_billing_level = patient_billing_data!fk_lu_default_billing_level 
      If Unbilled_consultation!fk_lu_default_billing_level = const.Billing_Default_Level_BulkBill Then
         If Unbilled_consultation!veteran_number <> "" Then
            rbInvoiceToVeterans.value = True
         Else
            rbInvoiceToMedicare.Value = True  'this will update the billing grid.
         Endif
      Endif
      Unbilled_consultation!fk_lu_private_health_fund = patient_billing_data!fk_lu_private_health_fund
      If patient_billing_data!fk_lu_private_health_fund <> const.PrivateHealthFund_None Then
         Unbilled_consultation!private_insurance = True
      Else
         Unbilled_consultation!private_insurance = False   
      Endif
      Unbilled_consultation!fk_doctor = patient_billing_data!fk_doctor 
   Endif
   
End

Public Function Billing_Defaults_Valid() As Boolean
   '--------------------------------------------------------------------------
   'Validates dates in the embedded form of patients card and billing defaults
   'returns true if ok
   '--------------------------------------------------------------------------   
   
   If form_billingcards.txtMedicareCardExpiryDate.text <> "" Then              'only validate if user has entered something
      If Not IsDate(modUtil.Medicare_Create_Expiry_date(form_billingcards.txtMedicareCardExpiryDate.text)) Then
         form_billingcards.txtMedicareCardExpiryDate.SetFocus()
         Return 
      Endif
   Endif
   If form_billingcards.txtConcessionExpiryDate.text <> "" Then                 'only validate if user has entered something
      If Not IsDate(form_billingcards.txtConcessionExpiryDate.text) Then
         form_billingcards.txtConcessionExpiryDate.SetFocus()
         Return
      Endif
   Endif
   Return True
   
End

Public Sub MainToolbar_Click()
   
   Dim sCardType As String
   
   Select Last.tag
      Case "save billing defaults"
         Billing_Defaults_Save()
      Case "new invoice"
         
         Unbilled_consultation = Null  'the invoice is not being raised from appointment list
         Invoice_New()
      Case "new receipt"
         gvwItemsBIlled_Clear()
      Case "print voucher"
         'medicare/veterans vouchers never paid on the day, currently only do medicare
         If Not IsNull(patient) Then
            If IsNull(patient!medicare_number) And IsNull(patient!veteran_number) Then
               sCardType = "medicare"
               Goto Missing_CardNumber
            Endif
            If rbInvoiceToVeterans.value = True And IsNull(patient!veteran_numnber) Then
               sCardType = "veteran"
               Goto Missing_CardNumber
            Endif
         Endif
         
         ' If Not IsNull(Unbilled_consultation) Then
         '    If IsNull(Unbilled_consultation!medicare_number) Then
         '       Goto Missing_MedicareNumber
         '    Endif
         ' Endif
         Save(bBulkBill_Yes, bPrint_No, bAccount_No) ', bPaid_No) 'FIXME TO bPrint_Yes to print
      Case "print receipt"
         Save(bBulkBill_No, bPrint_Yes, bAccount_No) ', bPaid_Yes)
      Case "receipt no print"
         Save(bBulkBill_No, bPrint_No, bAccount_No) ', bPaid_Yes)
      Case "print account"
         Save(bBulkBill_No, bPrint_Yes, bAccount_Yes) ', bPaid_No)
   End Select
   Return   
   
Missing_CardNumber:
   Message.title = modUtil.Ucase_Word_First_Letter(sCardType) & " Numbers "
   Message.Info("This patient's " & sCardType & " number is not recorded.\n\nPlease update their record before proceeding.")
   Return
   
End

Public Sub Invoice_New()
   '--------------------------------------------- 
   'patient loaded either from the unbilled appointment list
   'Or searching via accounts
   '--------------------------------------------- 
   
   gvwItemsBIlled.Clear
   tbAccount.Enabled = True                    'new invoice can take account
   tbVoucher.Enabled = True                    'new invoice can take be bulk billed
   tbSaveNoPrint.Enabled = True                ''new invoice can be saved (either paid/unpaid) without printing
   lblEditAreaHeading.text = "New Invoice"
   bPayingInvoice = False 
   fk_payer_branch = 0
   fk_payer_person = 0
   fk_invoice = 0
   gvwPayments.clear
   cmbFeeType.Visible = False 
   lblInvoiceTotal.text = ""
   lblPaymentTotal.text = ""
   EditArea_Notify_Data_Change(False)
   Hbox_InvoiceGrid.Enabled = True 
   txtDate.ReadOnly = False
   
End

Public Sub cvwItemsBilled_Refresh()
   '----------------------------------------------------------------
   ' Refresh all previous items billed for the patient
   ' E.g a single row could be Item 23 standard consult etc 
   ' if more than 1 item per invoice, only display name/dr/date once
   '----------------------------------------------------------------
   
   Dim item As String
   Dim fk_last_invoice As Integer
   Dim total_due As Float
   Dim amount_owing As Float
   Dim monies As Variant[]
   Dim items_on_invoice As Integer
   
   cvwItemsBilled.Clear
   Items_Billed = modBillingDBI.Items_Invoices_Get(fk_patient, iAccountDisplayMode) 'was items_Billed_get
   For Each Item_Billed In Items_Billed
      cvwItemsBilled.Add(Item_Billed!pk_items_billed, 0)
      If fk_last_invoice <> Item_Billed!fk_invoice Then 
         items_on_invoice = 1 
         cvwItemsBilled[Item_Billed!pk_items_billed][0] = Item_Billed!patient_firstname
         cvwItemsBilled[Item_Billed!pk_items_billed][1] = Item_Billed!staff_provided_service_wholename
         cvwItemsBilled[Item_Billed!pk_items_billed][2] = Item_Billed!branch
         cvwItemsBilled[Item_Billed!pk_items_billed][3] = Format(Item_Billed!visit_date, "dd/mm/yyyy")
      Else
         cvwItemsBilled[Item_Billed!pk_items_billed][0] = ""
         Inc items_on_invoice
      End If   
      
      If Not IsNull(Item_Billed!mbs_item) Then item = Item_Billed!mbs_item
      If Not IsNull(Item_Billed!ama_item) Then item = Item_Billed!ama_item
      If Not IsNull(Item_Billed!user_item) Then item = Item_Billed!user_item
      cvwItemsBilled[Item_Billed!pk_items_billed][4] = item
      cvwItemsBilled[Item_Billed!pk_items_billed][5] = Item_Billed!descriptor_brief
      '------------------------------
      'work out who the invoice is to
      '------------------------------
      If Not IsNull(Item_Billed!fk_lu_bulk_billing_type) Then
         If Item_Billed!fk_lu_bulk_billing_type = const.BulkBilling_Type_Medicare Then
            cvwItemsBilled[Item_Billed!pk_items_billed][6] = "Medicare"
         Else
            cvwItemsBilled[Item_Billed!pk_items_billed][6] = "Veterans"
         Endif
      Endif
      If Not IsNull(Item_Billed!payer_organisation) Then
         cvwItemsBilled[Item_Billed!pk_items_billed][6] = Item_Billed!payer_organisation
      Endif
      If Not IsNull(Item_Billed!payer_person_wholename) Then
         cvwItemsBilled[Item_Billed!pk_items_billed][6] = Item_Billed!payer_person_wholename
      Endif
      cvwItemsBilled[Item_Billed!pk_items_billed][7] = Item_Billed!amount
      cvwItemsBilled[Item_Billed!pk_items_billed][8] = Item_Billed!amount_gst
      total_due = modUtil.MoneyToFloat(Item_Billed!amount) + modUtil.MoneyToFloat(Item_Billed!amount_gst)
      amount_owing = total_due - modUtil.MoneyToFloat(Item_Billed!total_paid)                'only works if 1 item on invoice
      cvwItemsBilled[Item_Billed!pk_items_billed][9] = modUtil.Money_Format(total_due)       'total + gst = total due
      If Item_Billed!paid = True Then                                                        'is item paid in full?
         cvwItemsBilled[Item_Billed!pk_items_billed][10] = modUtil.Money_Format(total_due)   'Yes:paid=total due
      Else                                                                                   'not paid or part paid 
         cvwItemsBilled[Item_Billed!pk_items_billed][10] = Item_Billed!total_paid             'will only work if 1 item on invoice FIXME   
         cvwItemsBilled[Item_Billed!pk_items_billed][11] = modUtil.Money_Format(amount_owing)
      End If
      
      'FIXME ADD UP
      ' Else
      '    cvwItemsBilled[Item_Billed!pk_items_billed][8] = Item_Billed!amount 'FIXME ADD UP AMOUNT
      '   cvwItemsBilled[Item_Billed!pk_items_billed][9] = Item_Billed!amount_paid 
      '  Endif
      fk_last_invoice = Item_Billed!fk_invoice  
   Next
   
End

Public Sub cvwItemsBilled_Select()
   '-------------------------------------------------------------------------------------------
   'cvwItemsBilled:This is the list of items on invoices which have been billed to the
   'patient and already saved - either accounts or receipts for visits
   'Items in this list may be single - ie only one per invoice or multiple - many on an invoice
   'If they click on a row without the patient name showing on the list - then that row will be
   'an item one a multi-item invoice. Move back To the row with the patient's name on it
   'ie start of the invoice, so that this routine will load the edit area with all items from
   'this point in the list until the fk_invoice changes
   '--------------------------------------------------------------------------------------------   
   
   If cvwItemsBilled.count = 0 Then Return  
   bexit = True
   cvwItemsBilled.MoveCurrent
   HBox_InvoiceCommentS.Visible = False  
   If cvwItemsBilled[cvwItemsBilled.Item.key][0] = "" Then
      Do Until cvwItemsBilled[cvwItemsBilled.Item.key][0] <> ""
         cvwItemsBilled.MovePrevious()
      Loop
      cvwItemsBilled.Item.Selected = True 'will re-enter
   Endif
   Item_Billed = Items_Billed[cvwItemsBilled.Item.key] 
   fk_invoice = Item_Billed!fk_invoice 
   If Not Item_Billed!paid Then
      tbAccount.Enabled = False  
      tbVoucher.Enabled = False  
      tbSaveNoPrint.Enabled = False 
      lblEditAreaHeading.text = "Pay Invoice"
      VBox5.Enabled = True 
   Else
      lblEditAreaHeading.text = "Paid Invoice"
      VBox5.Enabled = False  
   Endif
   txtDate.text = Format(Item_Billed!visit_date, "dd/mm/yyyy")
   txtReferenceDetails.text = Item_Billed!reference
   cmbSeenBy.index = cmbSeenBy.Find(Item_Billed!staff_provided_service_wholename)
   cmbLocation.index = cmbLocation.Find(Item_Billed!branch)
   rbInvoiceToNotUsed.value = True
   Try fk_payer_branch = Item_Billed!fk_payer_branch
   If Not Error Then
      rbInvoiceOrganisation.Value = True  
   Endif
   Try fk_payer_person = Item_Billed!fk_payer_person
   If Not Error Then
      rbInvoicePerson.Value = True
   Endif
   Try textlabelPayer.text = Item_Billed!payer_details
   '---------------------------------------------------------
   'now create an items collection to load back into the grid
   '---------------------------------------------------------
   onrow_items = 0
   gvwItemsBIlled.Clear()
   Do Until Items_Billed[cvwItemsBilled.Item.key]!fk_invoice <> Item_Billed!fk_invoice
      gvwItemsBIlled[onrow_items, 0].text = cvwItemsBilled[Items_Billed[cvwItemsBilled.Item.key]!pk_items_billed][4]
      gvwItemsBIlled[onrow_items, 1].text = Items_Billed[cvwItemsBilled.Item.key]!descriptor_brief
      gvwItemsBIlled[onrow_items, 2].text = Items_Billed[cvwItemsBilled.Item.key]!amount
      gvwItemsBIlled[onrow_items, 4].text = Items_Billed[cvwItemsBilled.Item.key]!billing_type
      Try gvwItemsBIlled[onrow_items, 5].text = Items_Billed[cvwItemsBilled.Item.key]!amount_gst
      Inc onrow_items
      If cvwItemsBilled.MoveNext() Then Break
   Loop
   gvwItemsBIlled.Rows.count = onrow_items
   gvwPayments.Clear()
   gvwPayments.Rows.count = onrow_items + 2 'to allow payment by eg cash + cheque for medicare items.
   Invoice_Calculate_Total("Total Owing")
   EditArea_Notify_Data_Change(False)       
   Hbox_InvoiceGrid.Enabled = False 
   HBox_InvoiceComments.Enabled = False   
   bexit = False  
   
End

Public Sub Batching_Show_Vouchers_In_Claim()
   
   Columnview99.MoveCurrent()
   Columnview99.Item.Selected = True  
   
End

Public Sub columview99_Menu()
   
   If Last.count Then mnuUnBIlled.Popup()
   
End

Public Sub txtSearch_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175) 
   lblSearchAccounts.Foreground = Color.Black
  
   With columnview99
      .clear
      .Columns.count = 2
   End With
   Select Case TabStrip1.Index   
      Case cTab_Invoices
         combobox1.index = -1
         Select Case combobox1.Index
            Case cInvoiceDisplayMode_InstitutionalAccounts
               iTimer_Search_Mode = cTimer_SearchMode_Institutional_Account
            Case Else
               iTimer_Search_Mode = cTimer_SearchMode_Patient
         End Select
         EditArea_Clear()
      Case cTab_Batching
      Case cTab_ScheduleFees
         iTimer_Search_Mode = cTimer_SearchMode_FeeSchedule
   End Select
   
End

Public Sub txtSearch_KeyRelease()
   
   timer_count = 0
   timer1.Enabled = True
   timer1.Start
   
End

Public Sub txtSearch_LostFocus()
   
   Last.BackGround = Color.White
   timer1.stop
   
End

Private Sub EditArea_Notify_Data_Change(bFlag As Boolean)
   
   If bFlag Then
      VBox_EditArea_Outer.Padding = 1
   Else
      VBox_EditArea_Outer.Padding = 0
   End If   
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   If bexit Then Return
   If Not EditAreaTextBox_ExcludeKeys(key.code, Last.tag) Then
      Stop Event
      Return 
   End If   
   Select Case key.Code
      Case key.down
         If columnview1.Visible Then
            bexit = True   
            With columnview1
               .MoveFirst
               .Item.Selected = True   
               .SetFocus()
            End With
            bexit = False  
         End If   
      Case key.return
         Select Case Last.tag
            Case "reference details", "date"
               gvwItemsBIlled.row = 0
               gvwItemsBIlled.Column = 0
               gvwItemsBIlled_DblClick()
         End Select
   End Select
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   bKeyValid = True
   Select Case Tag
      Case "date"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case "notes", "payer search", "reference details"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_SQLCrash, keycode) 
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
         
      Case "payer search"
         'user has clicked on the textbox where you can search for a payer (organisation or person)
         bExit = True
         textlabelPayer.text = ""
         fk_payer_branch = 0                            'zero keys
         fk_payer_person = 0
         rbInvoiceToNotUsed.value = True                'switches off radio buttons for patient, medicare and veterans
         rbInvoiceOrganisation.value = True  
         bExit = False  
         iTimer_Search_Mode = cTimer_SearchMode_Payer
         With columnview1
            .top = Last.Parent.parent.top + Last.height
            .left = Last.Parent.left
            .width = textlabelPayer.Width
            .Visible = False  
            .Columns.count = 4
         End With
   End Select
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.White
   timer1.stop
   
End

Public Sub EditArea_Textbox_KeyRelease()
   
   If bExit Then Return 
   Select Case Last.tag
      Case "payer search"
         timer_count = 0 
         
         timer1.Enabled = True
         timer1.Start    
         Print "starting timer"
   End Select
   
End

Public Sub EditArea_TextBox_Change()
   
   If Bexit Then Return
   Select Case Last.tag
      Case "patient"
         ' If Trim(Last.text) = "" Then
         '    EditArea_Clear()
         '    txtpatient.SetFocus()
         ' Endif
      Case "find account"
         Return 
      Case "payer search"
         If Trim(Last.text) = "" Then
            fk_payer_branch = 0
            fk_payer_person = 0
            textlabelPayer.text = "" 
         Endif
   End Select
   EditArea_Notify_Data_Change(True)
   
End

Public Sub Account_Institutional_Display()
   
End

Public Sub Account_Patient_Display()
   '----------------------------------------------------------------------------------------
   ' columnview99:
   ' This is the list of patient's which user has searched for on the accounts tab
   ' the underlying collection patients[columnview99.Item.Key] gives us this stuff:
   ' patient name (have this) and hence fk_patient
   ' date as visit_date
   ' duration (not displayed)
   ' seen by (dr combo) as staff_provider_service_title, wholename match combo text
   ' location combo as branch (match combo text)
   ' Invoice to (patient/medicare/veteran/other)
   ' Find and display the payer
   ' Reference (not yet in the back end)
   ' Items: item/description/fee/gap/rate/gst
   ' fk_item_billed (is there as pk_items_billed)
   ' have fk_invoice, billing_type, fk_lu_billing_type, mbs_item etc, descriptor 
   ' & descriptor_brief, gst_rate, percentage_fee_rule
   ' also have fk_staff_invoicing and associated datae, patient details,
   ' but not the medicare numbers etc.
   '-----------------------------------------------------------------------------------------
   
   If columnview99.count = 0 Then Return 'Or fk_patient = Patient!fk_patient Then Return
   
   TabStrip1.index = 0
   columnview99.Movecurrent()                                                    'set internal index
   EditArea_Clear()
   Patient = patients[columnview99.Item.Key]
   fk_patient = Patient!fk_patient                                                 
   Try fk_lu_default_billing_level = patient!fk_lu_default_billing_level            'if no billling level in backend
   If Error Then fk_lu_default_billing_level = const.Billing_Default_Level_Private  'default to private $$
   bExit = True                                                                     'prevent textbox events firing
   txtSearch.text = ""
   form_billingcards.Display_Patient_Data(Patient)                                  'load billing defaults into embedded form
   txtAge.text = Patient!age_display   
   With txtpatient
      .text = Patient!wholename  
      .pos = 0
   End With
   Try Payer_Get(Patient)                                                           'show payer if exists 
   VBox_EditArea_Outer.Enabled = True 
   gvwItemsBIlled.Enabled = True   
   iAccountDisplayMode = const.Billing_Accounts_Unpaid       
   cvwItemsBilled_Refresh()                                                         'show this patients owing's
   Invoice_New()  
   bExit = False  
   
End

Public Sub Item_Billed_Display()
   
End

Public Sub TabStripBilling_Click()
   '-------------------------------------------------------
   'User has clicked on the tabstip containing either 
   'the unbilled patients already seen or the tab to allow
   'staff to search for a patient's accounts
   '-------------------------------------------------------
   
   If BExit Then Return 
   Select Case Last.index
      Case cTabPatientsUnbilled
         
         '   cvwUnBilled.SetFocus()
      Case cTabPatientsAccounts
         '  txtFindPatient.SetFocus() 'and clear the edit area
   End Select
   
End

Public Sub tbRefreshUnbilled_Click()
   
   cvwUnBilled_Refresh()
   
End

Public Sub Organisations_Get()
   '-----------------------------------------------------------------
   'User is typing in search textbox, first try and find organisation
   '-----------------------------------------------------------------   
   
   timer1.Stop
   If Trim(txtFindPayer.text) = "" Then 
      columnview1.Visible = False   
      Return 
   End If   
   branches = modContactsDBI.Organisations_Get(Trim(txtFindPayer.text))
   If Not branches.count Then Return 
   columnview1.Clear
   For Each branch In branches
      Columnview1.Add(branch!pk_view, 0)
      Columnview1[branch!pk_view][0] = Branch!organisation
      Columnview1[branch!pk_view][1] = Branch!branch
      Columnview1[branch!pk_view][2] = Trim(Branch!street1 & " " & Branch!street2)
      Columnview1[branch!pk_view][3] = Branch!suburb & " " & Branch!postcode
   Next 
   If branches.count > 1 Then 
      With Columnview1
         .Visible = True
         .Raise
         .tag = txtFindPayer
      End With
   Else
      Organisation_Select()
   End If  
   
End Sub

Public Sub Organisation_Select()
   'Really a branch select FIXME consistancy throughout entire project   
   
   columnview1.MoveCurrent()
   bexit = True   
   textlabelPayer.text = branches[columnview1.Item.key]!organisation & "<BR>"
   textlabelPayer.text &= branches[columnview1.Item.key]!branch & "<BR>"
   textlabelPayer.text &= Trim(branches[columnview1.Item.key]!street1 & " " & branches[columnview1.Item.key]!street2) & "<BR>"
   textlabelPayer.text &= branches[columnview1.Item.key]!town & " " & branches[columnview1.Item.key]!postcode
   columnview1.Visible = False 
   txtFindPayer.text = ""  
   fk_payer_branch = branches[columnview1.Item.key]!fk_branch
   txtReferenceDetails.SetFocus()
   bExit = False  
   
End

Public Sub rbAccounts_Click()
   '-------------------------------------------------------------------------
   'User has clicked on the radiobuttons above the invoices/billed items list
   'The tags are:
   'const.Billing_Accounts_Unpaid = 0
   'const.Billing_Accounts_Paid = 1
   'const.Billing_Accounts_All = 2
   '-------------------------------------------------------------------------
   
   If bExit Then
      Return  
   End If    
   iAccountDisplayMode = Last.tag 
   cvwItemsBilled_Refresh()       
   
End

Public Sub HBox_Payments_leave()
   
   ' cmbPaymentMethods.Visible = False  
   
End

Public Sub txtPayment_GotFocus()
   
   cmbPaymentMethods.Visible = False   
   
End

Public Function Valid_Invoice_Items() As Boolean
   '--------------------------------------------------
   'Validates if the item data on the invoice is valid
   '--------------------------------------------------
   
   If fk_patient = 0 Then 
      Message.Info("Please select a valid patient")
      Return
   Endif
   If Trim(txtDate.text) = "" Or Len(Trim(txtDate.text)) <> 10 Or Not IsDate(Trim(txtDate.text)) Then
      txtDate.SetFocus()
      txtDate.Background = Color.rgb(95, 255, 175)
      Return 
   Endif
   If Not gvwItemsBIlled_Data_Valid() Then
      Message.Info("Invalid item number or missing fee amount")
      Return
   Endif
   Return True
   
End

Public Sub Valid_Payment() As Boolean
   '---------------------------------------------------------
   'If the account or the consultation of today is being paid
   'make sure there actually is paid data and if only part of
   'the invoice is being paid off - prompt the user.
   '---------------------------------------------------------   
   
   Dim grid_row As Integer
   Dim total As Float
   Dim sMsg As String
   
   Message.Title = "Payment of Invoice"   
   For grid_row = 0 To gvwPayments.Rows.Max
      If gvwPayments[grid_row, cGridColumnPayments_Amount].Text <> "" Then            'if have an amount
         If gvwPayments[grid_row, cGridColumnPayments_PaymentMethod].text = "" Then
            gvwPayments.Row = grid_row
            gvwPayments.Column = cGridColumnPayments_PaymentMethod
            Message.Info("Please enter type of payment.\n\n")
            gvwPayments_Click()
            Return
         Endif
         total = total + CFloat(Val(Replace(gvwPayments[grid_row, cGridColumnPayments_Amount].text, "$", ""))) 
      Else
         If grid_row = 0 Then   
            gvwPayments.Row = 0
            gvwPayments.Column = 0
            Message.Info("Please enter amount of payment.\n\n")
            gvwPayments_DblClick()
            Return
         End If
         
      End If  
   Next
   '------------------------------------------------------------
   'finally if being paid, does the paid amount match the total?
   '------------------------------------------------------------
   If modUtil.Money_Format(total) <> Right(lblInvoiceTotal.text, Len(lblInvoiceTotal.text) - InStr(lblInvoiceTotal.text, " $")) Then  'IAN FIXME
      sMsg = "The invoice amount and amount paid do not match.\n\n"
      "Do you wish to accept part payment of this invoice?\n\n"
      If Message.Question(sMsg, "Yes - accept part payment", "No") = 2 Then Return
   Endif
   Return True
   
End

Public Sub VBox_PaymentGrid_Leave()
   
   Return 
   If txtPayment.Visible Then
      If oncol_payments = cGridColumnPayments_Amount Then
         If gvwPayments[onrow_payments, cGridColumnPayments_Amount].text = "" Then
            txtPayment_Activate()
         Endif
      Endif
      gvwPayments[onrow_payments, oncol_payments].text = Trim(txtPayment.text)
   Endif
   If cmbPaymentMethods.Visible Then
      gvwPayments[onrow_payments, cGridColumnPayments_PaymentMethod].text = cmbPaymentMethods.Text
   Endif
   txtPayment.Visible = False  
   
End

Public Sub pnlToolButtons_Leave()
   
   tbVoucher.Enabled = True
   tbAccount.Enabled = True 
   tbReceipt.Enabled = True  
   tbSaveNoPRint.Enabled = True 
   tbNewInvoice.Enabled = True  
   
End

Public Sub pnlToolButtons_Enter()
   '---------------------------------------------------------------------
   'Enable or disable buttons appropriately as per the edit area contents
   '---------------------------------------------------------------------
   
   Dim fee As String
   Dim payment As String
   
   fee = Right(lblInvoiceTotal.text, Len(lblInvoiceTotal.text) - InStr(lblInvoiceTotal.text, " $"))
   payment = Right(lblPaymentTotal.text, Len(lblPaymentTotal.text) - InStr(lblPaymentTotal.text, " $"))
   
   If fee = payment And fee <> "" And payment <> "" Then
      tbVoucher.Enabled = False
      tbAccount.Enabled = False 
      tbReceipt.Enabled = True  
      tbSaveNoPRint.Enabled = True 
      Return 
   Endif
   If fee = "" And payment = "" Then
      tbVoucher.Enabled = False
      tbAccount.Enabled = False 
      tbReceipt.Enabled = False  
      tbSaveNoPRint.Enabled = False 
      tbNewInvoice.Enabled = True  
      Return 
   Endif
   If fee <> "" And payment = "" Then
      If rbInvoiceToMedicare.value = True Or rbInvoiceToVeterans.value = True Then
         tbVoucher.Enabled = True
         tbAccount.Enabled = False 
         tbReceipt.Enabled = False  
         tbSaveNoPRint.Enabled = False 
      Else
         tbVoucher.Enabled = False
         tbAccount.Enabled = True 
         tbReceipt.Enabled = False  
         tbSaveNoPRint.Enabled = False  
         Return 
      End If  
   Endif
   If fee <> "" And Payment <> "" Then
      tbVoucher.Enabled = False
      tbAccount.Enabled = True
      tbReceipt.Enabled = False
      tbSaveNoPRint.Enabled = False 
   End If   
   
End

Public Sub combobox1_Click()
   '
   
   If bexit Then Return    
   Select Case TabStrip1.Index
      Case cTab_Invoices
         lblSearchAccounts.Foreground = Color.LightGray
         Reload()
      Case cTab_Banking
      Case cTab_Batching
         BulkBilling_ShowClaims
      Case cTab_Reports
      Case cTab_ScheduleFees
         Scheduled_Fees_Brief_Descriptors_Refresh()
   End Select
   
End

Public Sub comboBox1_Load()
   
   combobox1.Clear()
   bExit = True
   Select Case TabStrip1.Index
      Case cTab_Invoices
         combobox1.Add("All Unbilled Consultations", 0)
         combobox1.Add("Unbilled  Consultations Today", 1)
         combobox1.Add("Accounts Overdue 1 Month", 2)
         combobox1.Add("Accounts Overdue 2 Month", 3)
         combobox1.Add("Accounts Overdue > 3 Months", 4)
         combobox1.Add("Accounts - Institutional Payers", 5)
      Case cTab_Banking
         combobox1.Index = 0
      Case cTab_Batching
         combobox1.Add("All Bulk Billed Claims", 0)
         combobox1.Add("Medicare Bulk Bill Claims", 1)
         combobox1.Add("Veteran Bulk Bill Claims", 2)
      Case cTab_Reports
         combobox1.Index = 0
      Case cTab_ScheduleFees
         combobox1.Add("All Item Numbers", 0)
         combobox1.Add("MBS Item Numbers", 1)
         combobox1.Add("AMA Item Numbers", 2)
         combobox1.Add("User Defined Item Numbers", 3)
   End Select
   bExit = False  
   
End

Public Sub txtPayment_Change()
   
End

Public Sub txtPayment_KeyPress()
   
   If Not modUtil.AllowKeys(const.allowkeys_money, key.code) Then
      Stop Event
   End If 
   
End

Public Sub TabStrip1_Click()
   
   comboBox1_Load()
   txtSearch.text = ""
   Select Case TabStrip1.index
      Case cTab_Invoices
         DateChooser1.visible = False  
         combobox1.Visible = True
         HBox_Search.Visible = True   
         lblColumnviewHeading.Visible = False  
          Reload()
      Case cTab_Batching
         '-----------------------------------------------------------------------
         'User has clicked on the medicare batching tab
         'Default to medicare claims in the list and to prepare a medicare claim
         '----------------------------------------------------------------------
         DateChooser1.visible = False  
         combobox1.Visible = True
         HBox_Search.visible = False  
         If IsNull(form_batching) Then 
            With form_batching = New FBulkBillBatching(Vbox_Batching)
               .Init(staff, clinics)
            End With
         Endif
         With columnview99
            .clear
            .Columns.count = 2
         End With
         bexit = True   
         combobox1.index = 0
         bexit = False 
         BulkBilling_ShowClaims()
         
      Case cTab_Reports
         If IsNull(form_reports) Then
            With form_reports = New FBillingReports(Vbox_Reports)
               .Init(report_titles)
            End With
         Endif
          DateChooser1.visible = True
          combobox1.Visible = False 
         HBox_Search.Visible = False   
         lblColumnviewHeading.Visible = False 
         columnview99_Refresh()
      Case cTab_ScheduleFees
         combobox1.index = cAll_ItemNumbers
         DateChooser1.visible = False  
         combobox1.Visible = True
         HBox_Search.Visible = True   
         If IsNull(form_feeschedule) Then
            With form_feeschedule = New FDescriptorsBrowser(Vbox_FeeSchedule)   
               .Init() 
            End With
         End If     
         columnview99_Refresh()
   End Select
   
End

Public Sub Days_Takings_Create_HTML(Optional for_date As Date = Now()) As String
   'creates html table of a days takings
   
   Dim monies_received As Collection
   Dim sHtml As String
   Dim sRow As String
   Dim amount As Collection
   Dim Payment_Methods As Collection
   Dim payment_method As Collection
   Dim payment_totals As New Float[7] 'use 1>6 = billing.lu_payment_method keys
   Dim running_total_gst As Float
   Dim running_total As Float
   
   Dim x As Integer
   
   payment_methods = modBillingDBI.Payment_Methods_Get()
   monies_received = modBillingDBI.Receipts_Get_For_Day(for_date)
   If IsNull(monies_received) Then
      Message.Info("No takings recorded for" & Format(for_date, "dd/mm/yyyy"))
      Return
   Endif
   sHtml = "<HTML><BODY><P><B>Summary of Receipts Taken on " & Format(for_date, "dd/mm/yyyy") & "</B></P>"
   sHtml &= "<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=0>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   "<COL WIDTH=43*>"
   '------------------------------------------------------
   'now add a row for each money recieved
   'receipt no|Payer|payment type|Cheque Drawer|Amount|Tax
   '------------------------------------------------------
   sHtml &= "<TR VALIGN=TOP>" & takings_html_row_template() & "</TR>"
   shtml = Replace(shtml, "%receipt_no%", "<B>Receipt</B>")
   shtml = Replace(shtml, "%payer%", "<B>Payer</B>")
   shtml = Replace(shtml, "%payment type%", "<B>Type</B>")
   shtml = Replace(shtml, "%drawer%", "<B>Cheque Drawer</B>")
   shtml = Replace(shtml, "%amount%", "<B>Amount</B>") 
   shtml = Replace(shtml, "%tax%", "<B>Tax</B>") 
   For Each amount In monies_received
      sHtml &= "<TR VALIGN=TOP>" & takings_html_row_template()
      sHtml = Replace(sHtml, "%receipt_no%", Str$(amount!pk_payments_received))
      If Not IsNull(amount!payer_details) Then 
         If Not IsNull(amount!fk_payer_branch) Then 
            
            sHtml = Replace(sHtml, "%payer%", amount!payer_organisation & " " & amount!payer_branch)
         End If
         If Not IsNull(amount!fk_payer_person) Then 
            sHtml = Replace(sHtml, "%payer%", amount!payer_person_wholename) 
         End If   
      Else
         sHtml = Replace(sHtml, "%payer%", amount!patient_wholename) 
      End If   
      sHtml = Replace(sHtml, "%payment type%", amount!payment_method)
      sHtml = Replace(sHtml, "%drawer%", " ") 'FIXME
      sHtml = Replace(sHtml, "%amount%", modUtil.Money_Format(amount!amount_paid))
      sHtml = Replace(sHtml, "%tax%", " ") 'FIXME put in gst
      sHtml &= "</TR>"
      payment_totals[amount!fk_lu_payment_method] = payment_totals[amount!fk_lu_payment_method] + CFloat(Replace(amount!amount_paid, "$", ""))
      running_total += modUtil.MoneyToFloat(amount!amount_paid)
      If amount!invoice_paid = True Then
         If Not IsNull(amount!item_billed_amount_gst) Then
            running_total_gst += modUtil.MoneyToFloat(amount!item_billed_amount_gst)
         Endif
      Endif
   Next 
   shtml &= "</TABLE>"
   '---------------------------------------------------------------------------------------
   'Now add a table which summarizes amounts for Cash, Cheques, EFPos or EFT (direct debit)
   '---------------------------------------------------------------------------------------
   sHtml &= "<P><B>Totals</B></P>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=212>"
   "<COL WIDTH=208>"
   
   For Each payment_method In payment_methods
      Inc x                                  'billing.lu_payment_method keys 1>6
      shtml &= "<TR VALIGN=TOP>"
      shtml &= totals_html_row_template()
      shtml = Replace(shtml, "%payment_method%", payment_method!method)
      shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(payment_totals[x]))
      sHtml &= "</TR>"
   Next
   sHtml &= "</TABLE></BODY></HTML>"
   '------------------------------------
   'Now show the totals for GST and Cash
   '------------------------------------
   sHtml &= "<BR>"
   sHtml &= "<TABLE WIDTH=441 CELLPADDING=0 CELLSPACING=1 >"
   "<COL WIDTH=212>"
   "<COL WIDTH=208>"
   sHtml &= "<TR VALIGN=TOP>" & totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "TOTAL GST")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(running_total_gst) & "<BR><BR>")
   sHtml &= "</TR>"
   sHtml &= "<TR VALIGN=TOP>" & totals_html_row_template()
   shtml = Replace(shtml, "%payment_method%", "<B>TOTAL (Including GST)</B>")
   shtml = Replace(shtml, "%total_amount%", modUtil.Money_Format(running_total))
   sHtml &= "</TR>"
   sHtml &= "</TABLE></BODY></HTML>" 
   Return shtml
   
End

Public Sub DateChooser1_Activate()
   
 '  form_html_viewer.WebView1.html = Days_Takings_Create_HTML(Last.value)
      form_reports.Day_list_Show(DateChooser1.value)
End

Public Function takings_html_row_template() As String
   
   Return ""
   "<TD WIDTH=8%>"
   "   <P>%receipt_no%</P>"
   "</TD>"
   "<TD WIDTH=30%>"
   "   <P>%payer%</P>"
   "</TD>"
   "<TD WIDTH=15%>"
   "   <P>%payment type%</P>"
   "</TD>"
   "<TD WIDTH=20%>"
   "   <P>%drawer%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "   <P>%amount%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "   <P>%tax%</P>"
   "</TD>"
   
End

Public Function totals_html_row_template() As String
   
   Return ""
   "<TD WIDTH=212>"
   "<P>%payment_method%</P>"
   "</TD>"
   "<TD WIDTH=208>"
   "<P>%total_amount%</P>"
   "</TD>"
   
End

Public Sub chkTodayOnly_Click()
   
   cvwUnBilled_Refresh()
   
End

' Create Or Replace FUNCTION billing.total_paid(integer)
'   RETURNS money As
' $BODY$
' DECLARE
'   total_paid money;
'   total numeric;
'   payment numeric;
' BEGIN
'  - - get the amounts paid
'   For payment In Select amount:: numeric From billing.payments_received where fk_invoice = $1 Loop
'     total: = payment;
'   End Loop ;
'   If total = 0 Then 
'    total_paid = Null;
'    Else
'      total_paid: = total:: money;
'    End If ;
'   Return total_paid;
' End ;
' $BODY$
'   LANGUAGE plpgsql VOLATILE
'   COST 100;
' ALTER FUNCTION billing.total_paid(integer)
'   OWNER To richard;
' 

Public Sub rbPatientDisplay_Click()
   
   Select Case Last.tag
      Case "unbilled"
         '  columnview99.Visible = False   
         '  cvwUnBilled.Visible = True 
         ' cvwUnBilled_Refresh
   End Select
   
End

Public Sub DateChooser2_Activate()
   'Don't substitute Last here please
   
 '  form_reports.Day_list_Show(DateChooser1.value)
   
End

Public Sub VBox_PaymentGrid_Enter()
   '-----------------------------------------------------
   'Enable the payments grid if there is something to pay
   'fixme use ian's yet to be written IsMoney()
   '-----------------------------------------------------
   
   If gvwItemsBIlled[0, 0].text <> "" And gvwItemsBIlled[0, 0].text <> "" Then
      gvwPayments.Enabled = True
      gvwPayments.row = 0
      If rbInvoiceToPatient.value = True Or rbInvoicePerson.Value = True Then
         If gvwPayments[gvwPayments.row, cGridColumnPayments_Amount].text = "" Then       
            gvwPayments[gvwPayments.row, cGridColumnPayments_Amount].text = modUtil.Money_Format(invoice_total)
            gvwPayments[gvwPayments.row, cGridColumnPayments_PaymentMethod].text = "EFPos"
            Payment_Calculate_Total
         End If   
      Endif
   Else
      gvwPayments.Enabled = False   
   Endif
   
End

Public Sub Button1_Click()
   
   Print Payer
   Print fk_payer_person
   Print "gvwItems.height", gvwItemsBIlled.ClientH
   Print "gvwItems.totalheight", gvwItemsBIlled.height
   Print "hence header is ", gvwItemsBIlled.height - gvwItemsBIlled.ClientH
   Print "scroll height", gvwItemsBIlled.scrollh
   Print gvwItemsBIlled.Columns[0].Width
   Print gvwItemsBIlled.Columns[5].Width
   Print "bexit is", bexit
   Print "gvwItemsBIlled.Enabled =", gvwItemsBIlled.Enabled
   Print "cmbPayments.visible=", cmbPaymentMethods.visible
   Print "panGvwPaymentsEditor.Visible = ", panGvwPaymentsEditor.Visible
   Print "payments row,col", gvwPayments.row, gvwPayments.Column
   
End

Public Sub cmbFeeType_Leave()
   
   'cmbFeeType.Visible = False 
   gvwItemsBilled_HideProperty()
   
End
' Public Sub panGvwItemsBilledEditor_KeyPress()
' 
'    Print "detecting keypress in paneditorbox"
'    If key.code = key.return Then
'       Print "hitting enter > now showing and setting focus"
'       $hEditor_gvwItems.Show
'       $hEditor_gvwItems.SetFocus 
'    Endif
'    
' End

' drop view billing.vwinvoices cascade;
' drop view billing.vwinvoices_pre cascade;
' drop view billing.vwfees;
' 
' 
' DROP VIEW clerical.vwappointments;
' 
' Create Or Replace VIEW clerical.vwappointments As 
'  Select bookings.pk, bookings.fk_patient, bookings.fk_staff, bookings.begin, bookings.duration, 
'  bookings.notes, bookings.fk_staff_booked, bookings.fk_clinic, bookings.fk_lu_appointment_icon, 
'  bookings.fk_lu_appointment_status, bookings.deleted, data_patients.fk_payer_person, 
'  data_patients.fk_payer_branch, data_patients.fk_doctor, data_patients.fk_lu_default_billing_level, 
'  data_patients.medicare_number, data_patients.medicare_ref_number, data_patients.medicare_expiry_date, 
'  lu_veteran_card_type.type As Veteran_card_type, data_patients.veteran_number, 
'  data_patients.veteran_specific_condition, data_patients.concession_card_number, 
'  data_patients.concession_card_expiry_date, lu_centrelink_card_type.type As Concession_card_type, 
'  lu_private_health_funds.fund, lu_default_billing_level.level As Billing_level, data_persons.firstname, 
'  data_persons.surname, data_persons.birthdate, lu_sex.sex, lu_title.title, 
'  ((lu_title.title || ' '::text) || (data_persons.firstname || ' '::text)) || (data_persons.surname || ' '::text) AS wholename, 
'  bookings.invoiced, bookings.did_not_attend
'    From clerical.bookings
'    Left JOIN clerical.data_patients ON bookings.fk_patient = data_patients.pk
'    Left JOIN clerical.lu_centrelink_card_type ON data_patients.fk_lu_centrelink_card_type = lu_centrelink_card_type.pk
'    Left JOIN clerical.lu_private_health_funds ON data_patients.fk_lu_private_health_fund = lu_private_health_funds.pk
'    Left JOIN clerical.lu_veteran_card_type ON data_patients.fk_lu_veteran_card_type = lu_veteran_card_type.pk
'    Left JOIN contacts.data_persons ON data_patients.fk_person = data_persons.pk
'    Left JOIN contacts.lu_sex ON data_persons.fk_sex = lu_sex.pk
'    Left JOIN billing.lu_default_billing_level ON data_patients.fk_lu_default_billing_level = lu_default_billing_level.pk
'    Left JOIN contacts.lu_title ON data_persons.fk_title = lu_title.pk
'   ORDER BY bookings.begin;
' ' 
' ALTER TABLE clerical.vwappointments OWNER To easygp;
' GRANT ALL ON TABLE clerical.vwappointments To easygp;
' GRANT ALL ON TABLE clerical.vwappointments To staff;
' 
' 
' CREATE OR REPLACE VIEW billing.vwfees AS 
'  SELECT prices.pk AS pk_view, fee_schedule.mbs_item, fee_schedule.user_item, fee_schedule.ama_item, fee_schedule.descriptor, 
'  fee_schedule.descriptor_brief, fee_schedule.gst_rate, fee_schedule.percentage_fee_rule, fee_schedule.ceased_date, fee_schedule."group", 
'  fee_schedule.derived_fee, prices.fk_fee_schedule, prices.pk AS fk_price, 
'  prices.price, prices.fk_lu_billing_type, prices.notes, lu_billing_type.type AS fee_type
'    FROM billing.fee_schedule
'    JOIN billing.prices ON fee_schedule.pk = prices.fk_fee_schedule
'    JOIN billing.lu_billing_type ON prices.fk_lu_billing_type = lu_billing_type.pk
'   ORDER BY fee_schedule.mbs_item::integer;
' 
' ALTER TABLE billing.vwfees   OWNER TO easygp;
' GRANT ALL ON TABLE billing.vwfees TO easygp;
' GRANT SELECT ON TABLE billing.vwfees TO staff;
' 
' 
' CREATE OR REPLACE FUNCTION billing.invoice_gst(integer)
'  RETURNS money
'  LANGUAGE sql
' AS $function$
'    select coalesce(sum(i.amount*((coalesce(f.gst_rate,0)+100)/100)),'$0.00'::money) 
'            from billing.items_billed i, billing.fee_schedule f 
'     where i.fk_invoice=$1
'        and
'           i.fk_fee_schedule = f.pk; 
' $function$;
' 
' 
' CREATE OR REPLACE VIEW billing.vwinvoices_pre AS 
'  SELECT invoices.pk AS pk_invoice, invoices.pk AS  fk_invoice, invoices.notes, invoices.fk_staff_invoicing, invoices.fk_patient,invoices.date_printed,  
'  invoices.fk_staff_provided_service, invoices.date_invoiced, invoices.paid, 
'  invoices.fk_payer_person, invoices.fk_payer_branch, 
'  
'  coalesce (vworganisations.organisation || ' '::text || (vworganisations.branch || ' '::text), vwpersonsincludingpatients.wholename)
'           as account_to_name,
'  Coalesce(COALESCE(vworganisations.street1 || ' '::text, vworganisations.street2 || ' '::text), 
'           COALESCE(vwpersonsincludingpatients.street1 || ' '::text, vwpersonsincludingpatients.street2 || ' '::text))
'           as account_to_street, 
'   coalesce ((vworganisations.town || ' '::text || vworganisations.postcode),
'             (vwpersonsincludingpatients.town || ' '::text || vwpersonsincludingpatients.postcode))
' 
'   as account_to_town_postcode,
'  invoices.latex, invoices.fk_branch, invoices.visit_date, invoices.fk_appointment, 
'  bookings.begin as appointment_time,
'  invoices.reference, invoices.fk_lu_bulk_billing_type, invoice_total(invoices.pk) AS total_bill, invoice_received(invoices.pk) AS total_paid,
'  billing.invoice_gst(invoices.pk) as total_gst,
'  link_invoice_bulk_bill_claim.fk_claim
'    FROM billing.invoices
'    LEFT JOIN clerical.bookings on billing.invoices.fk_appointment = clerical.bookings.pk
'    LEFT JOIN contacts.vworganisations ON invoices.fk_payer_branch = vworganisations.fk_branch
'    LEFT JOIN contacts.vwpersonsincludingpatients ON invoices.fk_payer_person = vwpersonsincludingpatients.fk_person
'    LEFT JOIN billing.link_invoice_bulk_bill_claim ON invoices.pk = link_invoice_bulk_bill_claim.fk_invoice;
' 
' ALTER TABLE billing.vwinvoices_pre   OWNER TO easygp;
' GRANT ALL ON TABLE billing.vwinvoices_pre TO easygp;
' GRANT ALL ON TABLE billing.vwinvoices_pre TO staff;
' 
' 
' 
' CREATE OR REPLACE VIEW billing.vwinvoices AS 
'  SELECT vwinvoices_pre.pk_invoice, vwinvoices_pre.fk_invoice,vwinvoices_pre.fk_staff_invoicing, vwinvoices_pre.date_printed, vwinvoices_pre.notes, 
'  vwinvoices_pre.fk_staff_provided_service, vwinvoices_pre.fk_patient, vwinvoices_pre.date_invoiced, vwinvoices_pre.paid, 
'  vwinvoices_pre.fk_payer_person, vwinvoices_pre.fk_payer_branch, vwinvoices_pre.latex, vwinvoices_pre.fk_branch, vwinvoices_pre.account_to_name,
'   vwinvoices_pre.account_to_street,  vwinvoices_pre.account_to_town_postcode,
'  vwinvoices_pre.fk_appointment,vwinvoices_pre.appointment_time,  
'  vwinvoices_pre.visit_date, vwinvoices_pre.reference, vwinvoices_pre.fk_lu_bulk_billing_type, 
'  vwinvoices_pre.total_bill, 
'  vwinvoices_pre.total_paid, 
'  vwinvoices_pre.total_gst,
'  vwinvoices_pre.total_paid >= vwinvoices_pre.total_bill AS paid_by_maths,
'  vwinvoices_pre.total_gst-vwinvoices_pre.total_paid as due,
'  vwinvoices_pre.fk_claim
'    FROM billing.vwinvoices_pre;
' 
' ALTER TABLE billing.vwinvoices   OWNER TO easygp;
' GRANT ALL ON TABLE billing.vwinvoices TO easygp;
' GRANT ALL ON TABLE billing.vwinvoices TO staff;
' 
' 
' 
' CREATE OR REPLACE VIEW billing.vwitemsbilled AS 
'  SELECT items_billed.pk AS pk_items_billed, vwstaffinclinics.firstname AS staff_invoiced_firstname, vwstaffinclinics.surname AS staff_invoiced_surname, 
'  vwstaffinclinics.wholename AS staff_invoiced_wholename, vwstaffinclinics.title AS staff_invoiced_title, vwinvoices.fk_staff_invoicing, 
'  vwinvoices.date_printed, vwinvoices.notes, vwinvoices.fk_lu_bulk_billing_type, vwinvoices.fk_staff_provided_service, vwinvoices.fk_patient, 
'  vwinvoices.fk_branch, vwinvoices.fk_appointment, vwinvoices.appointment_time, vwpatients.firstname AS patient_firstname, 
'  vwpatients.surname AS patient_surname, vwpatients.title AS patient_title, vwpatients.fk_sex AS patient_fk_sex, vwpatients.sex AS patient_sex, 
'  vwpatients.wholename AS patient_wholename,vwPatients.fk_lu_centrelink_card_type, vwPatients.fk_lu_default_billing_level,
'  vwinvoices.fk_payer_person, vwinvoices.fk_payer_branch, vwinvoices.date_invoiced, vwinvoices.paid, 
'  vwinvoices.latex, vwinvoices.visit_date, vwinvoices.total_bill, vwinvoices.total_paid, vwinvoices.paid_by_maths, vwinvoices.reference, vwinvoices.fk_claim,
'  vwstaffinclinics1.provider_number AS staff_provided_service_provider_number, vwstaffinclinics1.firstname AS staff_provided_service_firstname, 
'  vwstaffinclinics1.surname AS staff_provided_service_surname, vwstaffinclinics1.wholename AS staff_provided_service_wholename, 
'  vwstaffinclinics1.title AS staff_provided_service_title, data_branches.branch, items_billed.fk_fee_schedule, items_billed.amount, 
'  items_billed.amount_gst, items_billed.fk_invoice, items_billed.fk_lu_billing_type, lu_billing_type.type AS billing_type, 
'  fee_schedule.item, fee_schedule.mbs_item, fee_schedule.user_item, fee_schedule.ama_item, fee_schedule.descriptor, 
'  fee_schedule.descriptor_brief, fee_schedule.gst_rate, fee_schedule.percentage_fee_rule,
'  CASE
'             WHEN vwinvoices.fk_payer_branch IS NOT NULL THEN (((((vworganisations.organisation || ' '::text) || (vworganisations.branch || '<BR>'::text)) || COALESCE(vworganisations.street1 || ' '::text, 
'             vworganisations.street2)) || ' '::text) || (vworganisations.town || ' '::text)) || (vworganisations.postcode::text || ' '::text)
'             WHEN vwinvoices.fk_payer_person IS NOT NULL THEN ((((vwpersonsincludingpatients.wholename || '<BR>'::text) || COALESCE(vwpersonsincludingpatients.street1 || ' '::text, 
'             vwpersonsincludingpatients.street2)) || ' '::text) || (vwpersonsincludingpatients.town || ' '::text)) || (vwpersonsincludingpatients.postcode::text || ' '::text)
'             ELSE NULL::text
'         END AS payer_details, 
'         vworganisations.branch AS payer_branch, vworganisations.organisation AS payer_organisation, 
'         vworganisations.street1 AS payer_branch_street1, vworganisations.street2 AS payer_branch_street2, vworganisations.postcode AS payer_branch_postcode, 
'         vworganisations.town AS payer_branch_town, vworganisations.state AS payer_branch_state, vwpersonsincludingpatients.street1 AS payer_person_street1, 
'         vwpersonsincludingpatients.street2 AS payer_person_street2, vwpersonsincludingpatients.town AS payer_person_town, 
'         vwpersonsincludingpatients.state AS payer_person_state, vwpersonsincludingpatients.postcode AS payer_person_postcode, 
'         vwpersonsincludingpatients.wholename AS payer_person_wholename, vwpersonsincludingpatients.title AS payer_person_title
'    FROM billing.vwinvoices
'    JOIN admin.vwstaffinclinics ON vwinvoices.fk_staff_invoicing = vwstaffinclinics.fk_staff
'    JOIN admin.vwstaffinclinics vwstaffinclinics1 ON vwinvoices.fk_staff_provided_service = vwstaffinclinics1.fk_staff
'    JOIN billing.items_billed ON vwinvoices.pk_invoice = items_billed.fk_invoice
'    JOIN billing.lu_billing_type ON items_billed.fk_lu_billing_type = lu_billing_type.pk
'    JOIN billing.fee_schedule ON items_billed.fk_fee_schedule = fee_schedule.pk
'    JOIN contacts.data_branches ON vwinvoices.fk_branch = data_branches.pk
'    LEFT JOIN contacts.vworganisations ON vwinvoices.fk_payer_branch = vworganisations.fk_branch
'    LEFT JOIN contacts.vwpersonsincludingpatients ON vwinvoices.fk_payer_person = vwpersonsincludingpatients.fk_person
'    LEFT JOIN contacts.vwpatients ON vwinvoices.fk_patient = vwpatients.fk_patient
'    LEFT JOIN billing.payments_received on items_billed.fk_invoice = billing.payments_received.fk_invoice;
'  
' ALTER TABLE billing.vwitemsbilled   OWNER TO richard;
' GRANT ALL ON TABLE billing.vwitemsbilled TO richard;
' GRANT ALL ON TABLE billing.vwitemsbilled TO easygp;
' GRANT ALL ON TABLE billing.vwitemsbilled TO staff;
' 
' 
' 
' CREATE OR REPLACE VIEW billing.vwpayments AS 
'  SELECT payments_received.pk AS pk_payments_received, payments_received.fk_invoice, payments_received.amount AS amount_paid, 
'  lu_payment_method.method AS payment_method, payments_received.date_paid, payments_received.fk_staff_receipted, 
'  payments_received.fk_lu_payment_method, vwitemsbilled.pk_items_billed AS fk_items_billed, vwitemsbilled.staff_invoiced_firstname, 
'  vwitemsbilled.staff_invoiced_surname, vwitemsbilled.staff_invoiced_wholename, vwitemsbilled.staff_invoiced_title, 
'  vwitemsbilled.fk_staff_invoicing, vwitemsbilled.date_printed, vwitemsbilled.notes AS invoice_notes, 
'  vwitemsbilled.fk_staff_provided_service, vwitemsbilled.fk_patient, vwitemsbilled.patient_firstname, 
'  vwitemsbilled.patient_surname, vwitemsbilled.patient_title, vwitemsbilled.patient_fk_sex, vwitemsbilled.patient_sex, 
'  vwitemsbilled.patient_wholename, vwitemsbilled.fk_payer_person, vwitemsbilled.fk_payer_branch, vwitemsbilled.date_invoiced, 
'  vwitemsbilled.paid AS invoice_paid, vwitemsbilled.latex AS invoice_latex, vwitemsbilled.visit_date, vwitemsbilled.fk_claim,
'  vwitemsbilled.fk_appointment, vwitemsbilled.appointment_time,
'  vwitemsbilled.reference AS invoice_reference, vwitemsbilled.staff_provided_service_provider_number, 
'  vwitemsbilled.staff_provided_service_firstname, vwitemsbilled.staff_provided_service_surname, 
'  vwitemsbilled.staff_provided_service_wholename, vwitemsbilled.staff_provided_service_title, vwitemsbilled.branch, 
'  vwitemsbilled.fk_fee_schedule, vwitemsbilled.amount AS item_billed_amount, vwitemsbilled.amount_gst AS item_billed_amount_gst, 
'  vwitemsbilled.fk_lu_billing_type, vwitemsbilled.billing_type, vwitemsbilled.item, vwitemsbilled.mbs_item, vwitemsbilled.user_item, 
'  vwitemsbilled.ama_item, vwitemsbilled.descriptor, vwitemsbilled.descriptor_brief, vwitemsbilled.gst_rate, vwitemsbilled.percentage_fee_rule, 
'  vwitemsbilled.payer_details, vwitemsbilled.payer_branch, vwitemsbilled.payer_organisation, vwitemsbilled.payer_branch_street1, 
'  vwitemsbilled.payer_branch_street2, vwitemsbilled.payer_branch_postcode, vwitemsbilled.payer_branch_town, vwitemsbilled.payer_branch_state, 
'  vwitemsbilled.payer_person_street1, vwitemsbilled.payer_person_street2, vwitemsbilled.payer_person_town, vwitemsbilled.payer_person_state, 
'  vwitemsbilled.payer_person_postcode, vwitemsbilled.payer_person_wholename, vwitemsbilled.payer_person_title
'    FROM billing.payments_received
'    JOIN billing.lu_payment_method ON payments_received.fk_lu_payment_method = lu_payment_method.pk
'    JOIN billing.vwitemsbilled ON payments_received.fk_invoice = vwitemsbilled.fk_invoice;

' ALTER TABLE billing.vwpayments
'   OWNER TO easygp;
' GRANT ALL ON TABLE billing.vwpayments TO easygp;
' GRANT ALL ON TABLE billing.vwpayments TO staff;
' 
' grant select on billing.vwfees to staff;
' grant select on billing.vwinvoices to staff;
' grant select on billing.vwinvoices_pre to staff;
' grant all on function billing.invoice_gst(integer) to staff;
' grant all on billing.payments_received_pk_seq to staff;
' 
' Create table billing.lu_reasons_not_billed
' (pk serial primary key,
'  reason text Not Null);
' 
' insert into billing.lu_reasons_not_billed(reason)values( 'Aftercare - Suture Removal');
' insert into billing.lu_reasons_not_billed(reason)values( 'Aftercare - Dressings');
' insert into billing.lu_reasons_not_billed(reason)values( 'Doctor''s choice - Not Charged');
' insert into billing.lu_reasons_not_billed(reason)values( 'Doctor''s choice - Difficult Consultation');
' insert into billing.lu_reasons_not_billed(reason)values( 'Non-Medicare Visit - Not Charged');
' insert into billing.lu_reasons_not_billed(reason)values( 'Insurance Form - Not Charged');
' insert into billing.lu_reasons_not_billed(reason)values( 'Oversea''s Vistor Not Insured');
' insert into billing.lu_reasons_not_billed(reason)values( 'Relative Attended in Lieu of Patient');
' insert into billing.lu_reasons_not_billed(reason)values( 'Patient Did Not Attend');
' insert into billing.lu_reasons_not_billed(reason)values( 'Patient Name Entered in Error');
' insert into billing.lu_reasons_not_billed(reason)values( 'Appointment Slot Comment');
' 
' drop view clerical.vwappointments;
' 
' alter table clerical.bookings add column fk_lu_reason_not_billed integer Default Null;
' 
' Comment On column clerical.bookings.fk_lu_reason_not_billed Is
' 'key to billing.lu_reasons_not_billed e.g ''aftercare''';
' 
' 
' Create Or Replace VIEW clerical.vwappointments As 
'  Select bookings.pk, bookings.fk_patient, bookings.fk_staff, bookings.begin, bookings.duration, 
'  bookings.notes, bookings.fk_staff_booked, bookings.fk_clinic, bookings.fk_lu_appointment_icon, 
'  bookings.fk_lu_appointment_status, bookings.deleted, bookings.invoiced, bookings.did_not_attend,
'   bookings.fk_lu_reason_not_billed,
'  data_patients.fk_payer_person, 
'  data_patients.fk_payer_branch, data_patients.fk_doctor, data_patients.fk_lu_default_billing_level, 
'  data_patients.medicare_number, data_patients.medicare_ref_number, data_patients.medicare_expiry_date, 
'  lu_veteran_card_type.type As Veteran_card_type, data_patients.veteran_number, 
'  data_patients.veteran_specific_condition, data_patients.concession_card_number, 
'  data_patients.concession_card_expiry_date, lu_centrelink_card_type.type As Concession_card_type, 
'  lu_private_health_funds.fund, lu_default_billing_level.level As Billing_level, data_persons.firstname, 
'  data_persons.surname, data_persons.birthdate, lu_sex.sex, lu_title.title, 
'  ((lu_title.title || ' '::text) || (data_persons.firstname || ' '::text)) || (data_persons.surname || ' '::text) AS wholename
'  
'    From clerical.bookings
'    Left JOIN clerical.data_patients On bookings.fk_patient = data_patients.pk
'    Left JOIN clerical.lu_centrelink_card_type On data_patients.fk_lu_centrelink_card_type = lu_centrelink_card_type.pk
'    Left JOIN clerical.lu_private_health_funds On data_patients.fk_lu_private_health_fund = lu_private_health_funds.pk
'    Left JOIN clerical.lu_veteran_card_type On data_patients.fk_lu_veteran_card_type = lu_veteran_card_type.pk
'    Left JOIN contacts.data_persons On data_patients.fk_person = data_persons.pk
'    Left JOIN contacts.lu_sex On data_persons.fk_sex = lu_sex.pk
'    Left JOIN billing.lu_default_billing_level On data_patients.fk_lu_default_billing_level = lu_default_billing_level.pk
'    Left JOIN contacts.lu_title On data_persons.fk_title = lu_title.pk
'   ORDER BY bookings.begin;
' 
' ALTER TABLE clerical.vwappointments OWNER To easygp;
' GRANT ALL On TABLE clerical.vwappointments To easygp;
' GRANT ALL On TABLE clerical.vwappointments To staff;
' 
' drop view clerical.vwappointments;
' 
' Alter table clerical.bookings drop column fk_lu_reason_no_charge;
' alter table clerical.bookings add column fk_lu_reason_not_billed integer Default Null;
' 
' Create Or Replace VIEW clerical.vwappointments As 
'  Select bookings.pk, bookings.fk_patient, bookings.fk_staff, bookings.begin, bookings.duration, 
'  bookings.notes, bookings.fk_staff_booked, bookings.fk_clinic, bookings.fk_lu_appointment_icon, 
'  bookings.fk_lu_appointment_status, bookings.deleted, bookings.invoiced, bookings.did_not_attend,
'   bookings.fk_lu_reason_not_billed,
'  data_patients.fk_payer_person, 
'  data_patients.fk_payer_branch, data_patients.fk_doctor, data_patients.fk_lu_default_billing_level, 
'  data_patients.medicare_number, data_patients.medicare_ref_number, data_patients.medicare_expiry_date, 
'  lu_veteran_card_type.type As Veteran_card_type, data_patients.veteran_number, 
'  data_patients.veteran_specific_condition, data_patients.concession_card_number, 
'  data_patients.concession_card_expiry_date, lu_centrelink_card_type.type As Concession_card_type, 
'  lu_private_health_funds.fund, lu_default_billing_level.level As Billing_level, data_persons.firstname, 
'  data_persons.surname, data_persons.birthdate, lu_sex.sex, lu_title.title, 
'  ((lu_title.title || ' '::text) || (data_persons.firstname || ' '::text)) || (data_persons.surname || ' '::text) AS wholename
'  
'    From clerical.bookings
'    Left JOIN clerical.data_patients On bookings.fk_patient = data_patients.pk
'    Left JOIN clerical.lu_centrelink_card_type On data_patients.fk_lu_centrelink_card_type = lu_centrelink_card_type.pk
'    Left JOIN clerical.lu_private_health_funds On data_patients.fk_lu_private_health_fund = lu_private_health_funds.pk
'    Left JOIN clerical.lu_veteran_card_type On data_patients.fk_lu_veteran_card_type = lu_veteran_card_type.pk
'    Left JOIN contacts.data_persons On data_patients.fk_person = data_persons.pk
'    Left JOIN contacts.lu_sex On data_persons.fk_sex = lu_sex.pk
'    Left JOIN billing.lu_default_billing_level On data_patients.fk_lu_default_billing_level = lu_default_billing_level.pk
'    Left JOIN contacts.lu_title On data_persons.fk_title = lu_title.pk
'   ORDER BY bookings.begin;
' 
' ALTER TABLE clerical.vwappointments OWNER To easygp;
' GRANT ALL On TABLE clerical.vwappointments To easygp;
' GRANT ALL On TABLE clerical.vwappointments To staff;
' 
' truncate db.lu_version;
' insert into db.lu_version(lu_major, lu_minor)values(0, 236);
' 
' Create table billing.lu_reasons_not_billed
' (pk serial primary key,
'  reason text Not Null);
' 
' insert into billing.lu_reasons_not_billed(reason)values( 'Aftercare - Suture Removal');
' insert into billing.lu_reasons_not_billed(reason)values( 'Aftercare - Dressings');
' insert into billing.lu_reasons_not_billed(reason)values( 'Doctor''s choice - Not Charged');
' insert into billing.lu_reasons_not_billed(reason)values( 'Doctor''s choice - Difficult Consultation');
' insert into billing.lu_reasons_not_billed(reason)values( 'Non-Medicare Visit - Not Charged');
' insert into billing.lu_reasons_not_billed(reason)values( 'Insurance Form - Not Charged');
' insert into billing.lu_reasons_not_billed(reason)values( 'Oversea''s Vistor Not Insured');
' insert into billing.lu_reasons_not_billed(reason)values( 'Relative Attended in Lieu of Patient');
' insert into billing.lu_reasons_not_billed(reason)values( 'Patient Did Not Attend');
' insert into billing.lu_reasons_not_billed(reason)values( 'Patient Name Entered in Error');
' insert into billing.lu_reasons_not_billed(reason)values( 'Appointment Slot Comment');
' 

'latest:19oct12-2326pm:
' drop view billing.vwinvoices cascade;
' drop view billing.vwinvoices_pre cascade;
' drop view billing.vwfees;
' 
' 
' DROP VIEW clerical.vwappointments;
' 
' Create Or Replace VIEW clerical.vwappointments As 
'  Select bookings.pk, bookings.fk_patient, bookings.fk_staff, bookings.begin, bookings.duration, 
'  bookings.notes, bookings.fk_staff_booked, bookings.fk_clinic, bookings.fk_lu_appointment_icon, 
'  bookings.fk_lu_appointment_status, bookings.deleted, bookings.invoiced, bookings.did_not_attend,
'  bookings.fk_lu_reason_not_billed,
'  data_patients.fk_payer_person, 
'  data_patients.fk_payer_branch, data_patients.fk_doctor, data_patients.fk_lu_default_billing_level, 
'  data_patients.medicare_number, data_patients.medicare_ref_number, data_patients.medicare_expiry_date, 
'  lu_veteran_card_type.type As Veteran_card_type, data_patients.veteran_number, 
'  data_patients.veteran_specific_condition, data_patients.concession_card_number, 
'  data_patients.concession_card_expiry_date, lu_centrelink_card_type.type As Concession_card_type, 
'  lu_private_health_funds.fund, lu_default_billing_level.level As Billing_level, data_persons.firstname, 
'  data_persons.surname, data_persons.birthdate, lu_sex.sex, lu_title.title, 
'  ((lu_title.title || ' '::text) || (data_persons.firstname || ' '::text)) || (data_persons.surname || ' '::text) AS wholename
'  
'    From clerical.bookings
'    Left JOIN clerical.data_patients On bookings.fk_patient = data_patients.pk
'    Left JOIN clerical.lu_centrelink_card_type On data_patients.fk_lu_centrelink_card_type = lu_centrelink_card_type.pk
'    Left JOIN clerical.lu_private_health_funds On data_patients.fk_lu_private_health_fund = lu_private_health_funds.pk
'    Left JOIN clerical.lu_veteran_card_type On data_patients.fk_lu_veteran_card_type = lu_veteran_card_type.pk
'    Left JOIN contacts.data_persons On data_patients.fk_person = data_persons.pk
'    Left JOIN contacts.lu_sex On data_persons.fk_sex = lu_sex.pk
'    Left JOIN billing.lu_default_billing_level On data_patients.fk_lu_default_billing_level = lu_default_billing_level.pk
'    Left JOIN contacts.lu_title On data_persons.fk_title = lu_title.pk
'   ORDER BY bookings.begin;
' 
' ALTER TABLE clerical.vwappointments OWNER To easygp;
' GRANT ALL On TABLE clerical.vwappointments To easygp;
' GRANT ALL On TABLE clerical.vwappointments To staff;
' 
' 
' CREATE OR REPLACE VIEW billing.vwfees AS 
'  SELECT prices.pk AS pk_view, fee_schedule.mbs_item, fee_schedule.user_item, fee_schedule.ama_item, fee_schedule.descriptor, 
'  fee_schedule.descriptor_brief, fee_schedule.gst_rate, fee_schedule.percentage_fee_rule, fee_schedule.ceased_date, fee_schedule."group", 
'  fee_schedule.derived_fee, prices.fk_fee_schedule, prices.pk AS fk_price, 
'  prices.price, prices.fk_lu_billing_type, prices.notes, lu_billing_type.type AS fee_type
'    FROM billing.fee_schedule
'    JOIN billing.prices ON fee_schedule.pk = prices.fk_fee_schedule
'    JOIN billing.lu_billing_type ON prices.fk_lu_billing_type = lu_billing_type.pk
'   ORDER BY fee_schedule.mbs_item::integer;
' 
' ALTER TABLE billing.vwfees   OWNER TO easygp;
' GRANT ALL ON TABLE billing.vwfees TO easygp;
' GRANT SELECT ON TABLE billing.vwfees TO staff;
' 
' 
' CREATE OR REPLACE FUNCTION billing.invoice_gst(integer)
'  RETURNS money
'  LANGUAGE sql
' AS $function$
'    select coalesce(sum(i.amount*((coalesce(f.gst_rate,0)+100)/100)),'$0.00'::money) 
'            from billing.items_billed i, billing.fee_schedule f 
'     where i.fk_invoice=$1
'        and
'           i.fk_fee_schedule = f.pk; 
' $function$;
' 
' 
' CREATE OR REPLACE VIEW billing.vwinvoices_pre AS 
'  SELECT invoices.pk AS pk_invoice, invoices.pk AS  fk_invoice, invoices.notes, invoices.fk_staff_invoicing, invoices.fk_patient,invoices.date_printed,  
'  invoices.fk_staff_provided_service, invoices.date_invoiced, invoices.paid, 
'  invoices.fk_payer_person, invoices.fk_payer_branch, 
'  
'  coalesce (vworganisations.organisation || ' '::text || (vworganisations.branch || ' '::text), vwpersonsincludingpatients.wholename)
'           as account_to_name,
'  Coalesce(COALESCE(vworganisations.street1 || ' '::text, vworganisations.street2 || ' '::text), 
'           COALESCE(vwpersonsincludingpatients.street1 || ' '::text, vwpersonsincludingpatients.street2 || ' '::text))
'           as account_to_street, 
'   coalesce ((vworganisations.town || ' '::text || vworganisations.postcode),
'             (vwpersonsincludingpatients.town || ' '::text || vwpersonsincludingpatients.postcode))
' 
'   as account_to_town_postcode,
'  invoices.latex, invoices.fk_branch, invoices.visit_date, invoices.fk_appointment, 
'  bookings.begin as appointment_time,
'  invoices.reference, invoices.fk_lu_bulk_billing_type, invoice_total(invoices.pk) AS total_bill, invoice_received(invoices.pk) AS total_paid,
'  billing.invoice_gst(invoices.pk) as total_gst,
'  link_invoice_bulk_bill_claim.fk_claim
'    FROM billing.invoices
'    LEFT JOIN clerical.bookings on billing.invoices.fk_appointment = clerical.bookings.pk
'    LEFT JOIN contacts.vworganisations ON invoices.fk_payer_branch = vworganisations.fk_branch
'    LEFT JOIN contacts.vwpersonsincludingpatients ON invoices.fk_payer_person = vwpersonsincludingpatients.fk_person
'    LEFT JOIN billing.link_invoice_bulk_bill_claim ON invoices.pk = link_invoice_bulk_bill_claim.fk_invoice;
' 
' ALTER TABLE billing.vwinvoices_pre   OWNER TO easygp;
' GRANT ALL ON TABLE billing.vwinvoices_pre TO easygp;
' GRANT ALL ON TABLE billing.vwinvoices_pre TO staff;
' 
' 
' 

' 
' 
' 
' CREATE OR REPLACE VIEW billing.vwitemsbilled AS 
'  SELECT items_billed.pk AS pk_items_billed, vwstaffinclinics.firstname AS staff_invoiced_firstname, vwstaffinclinics.surname AS staff_invoiced_surname, 
'  vwstaffinclinics.wholename AS staff_invoiced_wholename, vwstaffinclinics.title AS staff_invoiced_title, vwinvoices.fk_staff_invoicing, 
'  vwinvoices.date_printed, vwinvoices.notes, vwinvoices.fk_lu_bulk_billing_type, vwinvoices.fk_staff_provided_service, vwinvoices.fk_patient, 
'  vwinvoices.fk_branch, vwinvoices.fk_appointment, vwinvoices.appointment_time, vwpatients.firstname AS patient_firstname, 
'  vwpatients.surname AS patient_surname, vwpatients.title AS patient_title, vwpatients.fk_sex AS patient_fk_sex, vwpatients.sex AS patient_sex, 
'  vwpatients.wholename AS patient_wholename,vwPatients.fk_lu_centrelink_card_type, vwPatients.fk_lu_default_billing_level,
'  vwinvoices.fk_payer_person, vwinvoices.fk_payer_branch, vwinvoices.date_invoiced, vwinvoices.paid, 
'  vwinvoices.latex, vwinvoices.visit_date, vwinvoices.total_bill, vwinvoices.total_paid, vwinvoices.paid_by_maths, vwinvoices.reference, vwinvoices.fk_claim,
'  vwstaffinclinics1.provider_number AS staff_provided_service_provider_number, vwstaffinclinics1.firstname AS staff_provided_service_firstname, 
'  vwstaffinclinics1.surname AS staff_provided_service_surname, vwstaffinclinics1.wholename AS staff_provided_service_wholename, 
'  vwstaffinclinics1.title AS staff_provided_service_title, data_branches.branch, items_billed.fk_fee_schedule, items_billed.amount, 
'  items_billed.amount_gst, items_billed.fk_invoice, items_billed.fk_lu_billing_type, lu_billing_type.type AS billing_type, 
'  fee_schedule.item, fee_schedule.mbs_item, fee_schedule.user_item, fee_schedule.ama_item, fee_schedule.descriptor, 
'  fee_schedule.descriptor_brief, fee_schedule.gst_rate, fee_schedule.percentage_fee_rule,
'  CASE
'             WHEN vwinvoices.fk_payer_branch IS NOT NULL THEN (((((vworganisations.organisation || ' '::text) || (vworganisations.branch || '<BR>'::text)) || COALESCE(vworganisations.street1 || ' '::text, 
'             vworganisations.street2)) || ' '::text) || (vworganisations.town || ' '::text)) || (vworganisations.postcode::text || ' '::text)
'             WHEN vwinvoices.fk_payer_person IS NOT NULL THEN ((((vwpersonsincludingpatients.wholename || '<BR>'::text) || COALESCE(vwpersonsincludingpatients.street1 || ' '::text, 
'             vwpersonsincludingpatients.street2)) || ' '::text) || (vwpersonsincludingpatients.town || ' '::text)) || (vwpersonsincludingpatients.postcode::text || ' '::text)
'             ELSE NULL::text
'         END AS payer_details, 
'         vworganisations.branch AS payer_branch, vworganisations.organisation AS payer_organisation, 
'         vworganisations.street1 AS payer_branch_street1, vworganisations.street2 AS payer_branch_street2, vworganisations.postcode AS payer_branch_postcode, 
'         vworganisations.town AS payer_branch_town, vworganisations.state AS payer_branch_state, vwpersonsincludingpatients.street1 AS payer_person_street1, 
'         vwpersonsincludingpatients.street2 AS payer_person_street2, vwpersonsincludingpatients.town AS payer_person_town, 
'         vwpersonsincludingpatients.state AS payer_person_state, vwpersonsincludingpatients.postcode AS payer_person_postcode, 
'         vwpersonsincludingpatients.wholename AS payer_person_wholename, vwpersonsincludingpatients.title AS payer_person_title
'    FROM billing.vwinvoices
'    JOIN admin.vwstaffinclinics ON vwinvoices.fk_staff_invoicing = vwstaffinclinics.fk_staff
'    JOIN admin.vwstaffinclinics vwstaffinclinics1 ON vwinvoices.fk_staff_provided_service = vwstaffinclinics1.fk_staff
'    JOIN billing.items_billed ON vwinvoices.pk_invoice = items_billed.fk_invoice
'    JOIN billing.lu_billing_type ON items_billed.fk_lu_billing_type = lu_billing_type.pk
'    JOIN billing.fee_schedule ON items_billed.fk_fee_schedule = fee_schedule.pk
'    JOIN contacts.data_branches ON vwinvoices.fk_branch = data_branches.pk
'    LEFT JOIN contacts.vworganisations ON vwinvoices.fk_payer_branch = vworganisations.fk_branch
'    LEFT JOIN contacts.vwpersonsincludingpatients ON vwinvoices.fk_payer_person = vwpersonsincludingpatients.fk_person
'    LEFT JOIN contacts.vwpatients ON vwinvoices.fk_patient = vwpatients.fk_patient
'    LEFT JOIN billing.payments_received on items_billed.fk_invoice = billing.payments_received.fk_invoice;
'  
' ALTER TABLE billing.vwitemsbilled   OWNER TO richard;
' GRANT ALL ON TABLE billing.vwitemsbilled TO richard;
' GRANT ALL ON TABLE billing.vwitemsbilled TO easygp;
' GRANT ALL ON TABLE billing.vwitemsbilled TO staff;
' 
' 
' 
' CREATE OR REPLACE VIEW billing.vwpayments AS 
'  SELECT payments_received.pk AS pk_payments_received, payments_received.fk_invoice, payments_received.amount AS amount_paid, 
'  lu_payment_method.method AS payment_method, payments_received.date_paid, payments_received.fk_staff_receipted, 
'  payments_received.fk_lu_payment_method, vwitemsbilled.pk_items_billed AS fk_items_billed, vwitemsbilled.staff_invoiced_firstname, 
'  vwitemsbilled.staff_invoiced_surname, vwitemsbilled.staff_invoiced_wholename, vwitemsbilled.staff_invoiced_title, 
'  vwitemsbilled.fk_staff_invoicing, vwitemsbilled.date_printed, vwitemsbilled.notes AS invoice_notes, 
'  vwitemsbilled.fk_staff_provided_service, vwitemsbilled.fk_patient, vwitemsbilled.patient_firstname, 
'  vwitemsbilled.patient_surname, vwitemsbilled.patient_title, vwitemsbilled.patient_fk_sex, vwitemsbilled.patient_sex, 
'  vwitemsbilled.patient_wholename, vwitemsbilled.fk_payer_person, vwitemsbilled.fk_payer_branch, vwitemsbilled.date_invoiced, 
'  vwitemsbilled.paid AS invoice_paid, vwitemsbilled.latex AS invoice_latex, vwitemsbilled.visit_date, vwitemsbilled.fk_claim,
'  vwitemsbilled.fk_appointment, vwitemsbilled.appointment_time,
'  vwitemsbilled.reference AS invoice_reference, vwitemsbilled.staff_provided_service_provider_number, 
'  vwitemsbilled.staff_provided_service_firstname, vwitemsbilled.staff_provided_service_surname, 
'  vwitemsbilled.staff_provided_service_wholename, vwitemsbilled.staff_provided_service_title, vwitemsbilled.branch, 
'  vwitemsbilled.fk_fee_schedule, vwitemsbilled.amount AS item_billed_amount, vwitemsbilled.amount_gst AS item_billed_amount_gst, 
'  vwitemsbilled.fk_lu_billing_type, vwitemsbilled.billing_type, vwitemsbilled.item, vwitemsbilled.mbs_item, vwitemsbilled.user_item, 
'  vwitemsbilled.ama_item, vwitemsbilled.descriptor, vwitemsbilled.descriptor_brief, vwitemsbilled.gst_rate, vwitemsbilled.percentage_fee_rule, 
'  vwitemsbilled.payer_details, vwitemsbilled.payer_branch, vwitemsbilled.payer_organisation, vwitemsbilled.payer_branch_street1, 
'  vwitemsbilled.payer_branch_street2, vwitemsbilled.payer_branch_postcode, vwitemsbilled.payer_branch_town, vwitemsbilled.payer_branch_state, 
'  vwitemsbilled.payer_person_street1, vwitemsbilled.payer_person_street2, vwitemsbilled.payer_person_town, vwitemsbilled.payer_person_state, 
'  vwitemsbilled.payer_person_postcode, vwitemsbilled.payer_person_wholename, vwitemsbilled.payer_person_title
'    FROM billing.payments_received
'    JOIN billing.lu_payment_method ON payments_received.fk_lu_payment_method = lu_payment_method.pk
'    JOIN billing.vwitemsbilled ON payments_received.fk_invoice = vwitemsbilled.fk_invoice;
' 
' ALTER TABLE billing.vwpayments
'   OWNER TO easygp;
' GRANT ALL ON TABLE billing.vwpayments TO easygp;
' GRANT ALL ON TABLE billing.vwpayments TO staff;
' 
' grant select on billing.vwfees to staff;
' grant select on billing.vwinvoices to staff;
' grant select on billing.vwinvoices_pre to staff;
' grant all on function billing.invoice_gst(integer) to staff;
' grant all on billing.payments_received_pk_seq to staff;
' 
' CREATE VIEW billing.vwclaims AS
'     SELECT items_billed.pk AS pk_view, bulk_billing_claims.pk AS fk_bulk_billing_claim, 
'     bulk_billing_claims.claim_id, bulk_billing_claims.claim_date, bulk_billing_claims.claim_amount, 
'     bulk_billing_claims.voucher_count, bulk_billing_claims.finalised, bulk_billing_claims.fk_branch, 
'     bulk_billing_claims.fk_medclaim, bulk_billing_claims.fk_lu_bulk_billing_type, 
'     bulk_billing_claims.fk_staff_provided_service, bulk_billing_claims.fk_staff_processed, bulk_billing_claims.html, 
'     lu_bulk_billing_type.type AS bulk_billing_type, vwstaffinclinics.wholename AS staff_provided_service_wholename, 
'     vwstaffinclinics.branch, link_invoice_bulk_bill_claim.fk_invoice, invoices.latex AS invoice_latex, 
'     invoices.fk_patient, vwpatients.wholename AS patient_wholename, invoices.visit_date, fee_schedule.mbs_item, 
'     items_billed.amount, 
'     vwstaffinclinics1.wholename AS staff_processed_wholename 
'     FROM ((((((((billing.bulk_billing_claims 
'     JOIN billing.lu_bulk_billing_type ON ((bulk_billing_claims.fk_lu_bulk_billing_type = lu_bulk_billing_type.pk))) 
'     JOIN billing.link_invoice_bulk_bill_claim ON ((bulk_billing_claims.pk = link_invoice_bulk_bill_claim.fk_claim))) 
'     JOIN billing.invoices ON ((link_invoice_bulk_bill_claim.fk_invoice = invoices.pk))) 
'     JOIN contacts.vwpatients ON ((invoices.fk_patient = vwpatients.fk_patient))) 
'     JOIN billing.items_billed ON ((invoices.pk = items_billed.fk_invoice))) 
'     JOIN admin.vwstaffinclinics ON ((bulk_billing_claims.fk_staff_provided_service = vwstaffinclinics.fk_staff))) 
'     JOIN billing.fee_schedule ON ((items_billed.fk_fee_schedule = fee_schedule.pk))) 
'     JOIN admin.vwstaffinclinics vwstaffinclinics1 ON ((bulk_billing_claims.fk_staff_processed = vwstaffinclinics1.fk_staff)));
' 
' drop view billing.vwinvoices cascade;
' 
' Create Or Replace VIEW billing.vwinvoices As
'  Select invoices.pk As Pk_invoice, invoices.pk As Fk_invoice,
' invoices.notes, invoices.fk_staff_invoicing, invoices.fk_patient,
'  invoices.date_printed, invoices.fk_staff_provided_service,
' invoices.date_invoiced, invoices.paid, invoices.fk_payer_person,
'  invoices.fk_payer_branch, COALESCE(vworganisations.organisation,
' vwpersonsincludingpatients.wholename) As Account_to_name,
' vworganisations.branch As Account_to_branch,
' COALESCE(COALESCE(vworganisations.street1 || ' '::text,
' vworganisations.street2 || ' '::text),
'  COALESCE(vwpersonsincludingpatients.street1 || ' '::text,
' vwpersonsincludingpatients.street2 || ' '::text)) AS
' account_to_street,
'  COALESCE((vworganisations.town || ' '::text) ||
' vworganisations.postcode:: text, (vwpersonsincludingpatients.town || '
' '::text) || vwpersonsincludingpatients.postcode::text) AS
' account_to_town_postcode,
'  invoices.latex, invoices.fk_branch, invoices.visit_date,
' invoices.fk_appointment, bookings.begin As Appointment_time,
' bookings.duration, invoices.reference,
' invoices.fk_lu_bulk_billing_type,
'  invoices.total_bill, invoices.total_paid, invoices.total_gst,
' invoices.total_gst - invoices.total_paid As Due,
' staff_invoicing.wholename As Staff_invoicing_wholename,
'  staff_provider.wholename As Staff_provided_service_wholename,
' staff_provider.provider_number As Staff_provided_service_provider_number,
' staff_provider.australian_business_number,
'  vwpatients.firstname As Patient_firstname, vwpatients.surname As
' patient_surname, vwpatients.title As Patient_title, vwpatients.fk_sex
' As Patient_fk_sex, vwpatients.sex As Patient_sex,
'  vwpatients.wholename As Patient_wholename,
' vwpatients.fk_lu_centrelink_card_type,
' vwpatients.fk_lu_default_billing_level, vworganisations1.branch
'    From billing.invoices
'    JOIN admin.vwstaff staff_invoicing ON invoices.fk_staff_invoicing = staff_invoicing.fk_staff
'    JOIN admin.vwstaff staff_provider ON invoices.fk_staff_provided_service = staff_provider.fk_staff
'    join contacts.vworganisations vwOrganisations1 on invoices.fk_branch = vworganisations1.fk_branch
'    Left JOIN clerical.bookings ON invoices.fk_appointment = bookings.pk
'    Left JOIN contacts.vworganisations ON invoices.fk_payer_branch = vworganisations.fk_branch
'    
'    Left JOIN contacts.vwpersonsincludingpatients ON invoices.fk_payer_person = vwpersonsincludingpatients.fk_person
'    Left JOIN contacts.vwpatients ON invoices.fk_patient = vwpatients.fk_patient;
' 
' ALTER TABLE billing.vwinvoices
'   OWNER To easygp; 
' GRANT ALL ON TABLE billing.vwinvoices To easygp;
' GRANT Select ON TABLE billing.vwinvoices To staff;
' 
' QUERIERS NOT COMMITED TO SVN BUT CURRENT AS OF 21OCT12 10PM.
' drop view billing.vwitemsbilled cascade;
' 
' Create VIEW billing.vwitemsbilled As
'     Select items_billed.pk As Pk_items_billed,
' items_billed.fk_fee_schedule,
' items_billed.amount,
' items_billed.amount_gst,
' items_billed.fk_invoice,
' items_billed.fk_lu_billing_type,
' lu_billing_type.type As Billing_type,
' fee_schedule.item,
' fee_schedule.mbs_item,
' fee_schedule.user_item,
' fee_schedule.ama_item,
' fee_schedule.descriptor,
' fee_schedule.descriptor_brief,
' fee_schedule.gst_rate,
' fee_schedule.percentage_fee_rule
'  From
' billing.items_billed, billing.lu_billing_type, billing.fee_schedule
' where
'    lu_billing_type.pk = items_billed.fk_lu_billing_type And
'    items_billed.fk_fee_schedule = fee_schedule.pk;
' 
' grant Select on billing.vwitemsbilled To staff;
' 
' Create Or Replace view billing.vwitemsandinvoices As Select
'    vwitemsbilled.pk_items_billed,
'    vwitemsbilled.fk_fee_schedule,
'    vwitemsbilled.amount,
'    vwitemsbilled.amount_gst,
'    vwitemsbilled.fk_lu_billing_type, 
'    billing_type, item, mbs_item,
' user_item, ama_item, descriptor, descriptor_brief, gst_rate,
'    percentage_fee_rule,
' vwInvoices.fk_invoice,
' vwInvoices.notes, 
' vwInvoices.fk_staff_invoicing, 
' vwInvoices.fk_patient,
'  vwInvoices.date_printed, 
'  vwInvoices.fk_staff_provided_service,
' vwInvoices.date_invoiced, 
' vwInvoices.paid, 
' vwInvoices.fk_payer_person,
'  vwInvoices.fk_payer_branch,
'  vwInvoices.account_to_name,
'  vwInvoices.account_to_branch,
' vwInvoices.account_to_street,
' vwInvoices.account_to_town_postcode,
'  vwInvoices.latex, 
'  vwInvoices.fk_branch, 
'  vwInvoices.visit_date,
' vwInvoices.fk_appointment, 
' vwInvoices.appointment_time,
' vwInvoices.duration, 
' vwInvoices.reference,
' vwInvoices.fk_lu_bulk_billing_type,
'  vwInvoices.total_bill, 
'  vwInvoices.total_paid, 
'  vwInvoices.total_gst,
' vwInvoices.due,
' vwInvoices.staff_invoicing_wholename,
'  vwInvoices.staff_provided_service_wholename,
' vwInvoices.staff_provided_service_provider_number,
' vwInvoices.australian_business_number,
' vwInvoices.patient_firstname, 
' vwInvoices.patient_surname, 
' vwInvoices.patient_title, 
' vwInvoices.patient_fk_sex, 
' vwInvoices.patient_sex,
' vwInvoices.patient_wholename,
' vwInvoices.fk_lu_centrelink_card_type,
' vwInvoices.fk_lu_default_billing_level,
' vwInvoices.branch
' From billing.vwitemsbilled, billing.vwinvoices where
'        vwinvoices.fk_invoice = vwitemsbilled.fk_invoice;
' 
' grant Select on billing.vwitemsandinvoices To staff;
' 
' Create Or Replace FUNCTION billing.update_invoice_payment()
'   RETURNS trigger As
' $BODY$
'     DECLARE
'        pk_invoice iNTEGER;
'     BEGIN
'         If (TG_OP = 'DELETE') THEN
'       pk_invoice = OLD.fk_invoice;
'    Else
'       pk_invoice = New .fk_invoice;
'    End If ;
'         update billing.invoices set total_paid = billing.invoice_received(pk)where pk = pk_invoice;
'    update billing.invoices set paid = (total_paid >= total_gst + total_bill)where pk = pk_invoice;
'         Return Null; - - result Is Ignored since this Is An AFTER trigger
'     End ;
' $BODY$
'   LANGUAGE plpgsql VOLATILE
'   COST 100;
' ALTER FUNCTION billing.update_invoice_payment()OWNER To easygp;
' grant all on function billing.update_invoice_payment() To easygp;
' grant all on function billing.update_invoice_payment() To staff;
' 

' CREATE OR REPLACE VIEW billing.vwpayments AS 
'  SELECT payments_received.pk AS pk_payments_received, payments_received.fk_invoice, 
'  payments_received.amount AS amount_paid, lu_payment_method.method AS payment_method, 
'  payments_received.date_paid, payments_received.fk_staff_receipted, payments_received.fk_lu_payment_method, 
'  vwitemsbilled.pk_items_billed AS fk_items_billed, vwitemsbilled.staff_invoiced_firstname, 
'  vwitemsbilled.staff_invoiced_surname, vwitemsbilled.staff_invoiced_wholename, 
'  vwitemsbilled.staff_invoiced_title, vwitemsbilled.fk_staff_invoicing, 
'  vwitemsbilled.date_printed, vwitemsbilled.notes AS invoice_notes, 
'  vwitemsbilled.fk_staff_provided_service, vwitemsbilled.fk_patient, 
'  vwitemsbilled.patient_firstname, vwitemsbilled.patient_surname, 
'  vwitemsbilled.patient_title, vwitemsbilled.patient_fk_sex, 
'  vwitemsbilled.patient_sex, vwitemsbilled.patient_wholename, 
'  vwitemsbilled.fk_payer_person, vwitemsbilled.fk_payer_branch, 
'  vwitemsbilled.date_invoiced, vwitemsbilled.paid AS invoice_paid, 
'  vwitemsbilled.latex AS invoice_latex, vwitemsbilled.visit_date, 
'  vwitemsbilled.fk_appointment, vwitemsbilled.appointment_time,
'  vwitemsbilled.reference AS invoice_reference, vwitemsbilled.staff_provided_service_provider_number, 
'  vwitemsbilled.staff_provided_service_firstname, vwitemsbilled.staff_provided_service_surname, 
'  vwitemsbilled.staff_provided_service_wholename, vwitemsbilled.staff_provided_service_title, 
' 
'  vwitemsbilled.branch, vwitemsbilled.fk_fee_schedule, vwitemsbilled.amount AS item_billed_amount, 
'  vwitemsbilled.amount_gst AS item_billed_amount_gst, vwitemsbilled.fk_lu_billing_type, 
'  vwitemsbilled.billing_type, vwitemsbilled.item, vwitemsbilled.mbs_item, vwitemsbilled.user_item,
'   vwitemsbilled.ama_item, vwitemsbilled.descriptor, vwitemsbilled.descriptor_brief, vwitemsbilled.gst_rate, 
'   vwitemsbilled.percentage_fee_rule, vwitemsbilled.payer_details, vwitemsbilled.payer_branch, 
'   vwitemsbilled.payer_organisation, vwitemsbilled.payer_branch_street1, vwitemsbilled.payer_branch_street2,
'    vwitemsbilled.payer_branch_postcode, vwitemsbilled.payer_branch_town, 
'    vwitemsbilled.payer_branch_state, vwitemsbilled.payer_person_street1, 
'    vwitemsbilled.payer_person_street2, vwitemsbilled.payer_person_town, vwitemsbilled.payer_person_state, 
'    vwitemsbilled.payer_person_postcode, vwitemsbilled.payer_person_wholename, vwitemsbilled.payer_person_title
'    FROM billing.payments_received
'    
'    JOIN billing.lu_payment_method ON payments_received.fk_lu_payment_method = lu_payment_method.pk
'    JOIN billing.vwitemsbilled ON payments_received.fk_invoice = vwitemsbilled.fk_invoice;
' 
' ALTER TABLE billing.vwpayments
'   OWNER TO richard;
' GRANT ALL ON TABLE billing.vwpayments TO richard;
' GRANT ALL ON TABLE billing.vwpayments TO easygp;
' GRANT ALL ON TABLE billing.vwpayments TO staff;
' 
' 

Public Sub txtDateFilter_Activate()
   
   Reload()
   
End
