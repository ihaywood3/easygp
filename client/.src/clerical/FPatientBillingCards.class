' Gambas class file

' Copyright (C) 2008-2012 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' ------------------------------------------------------------------------
' PURPOSE         A module to save patient specific information to do with 
'                 billing and general practice
'-------------------------------------------------------------------------
Private doctors As Collection
Private fk_person As Collection
Private patient As Collection 
Private veteran_card_types As Collection
Private centrelink_card_types As Collection
Private health_insurance_companies As Collection
Private billing_types As Collection
Private bExit As Boolean
Private bkeyvalid As Boolean

Public Function Active_Status_Get() As String
   
   If rbActiveYes.value = True Then Return const.PatientStatus_Active
   Return Const.PatientStatus_Inactive
   
End

Public Function Medicare_Card_Number_Get() As String
   
   Return Trim(txtMedicareNumber.text) 
   
End

Public Function Medicare_Reference_number_Get() As Integer
   
   Return Val(txtMedicareReferenceNumber.text)
   
End 

Public Function Medicare_Card_Expiry_Date_Get() As String
   
   Return (Trim(txtMedicareCardExpiryDate.text))
   
End

Public Function Veteran_Card_Number_Get() As String
   
   Return Trim(txtVeteranNumber.text) 
   
End

Public Function Veteran_Card_Type_Get() As Integer
   '---------------------------------------
   'return clerical.lu_veteran_card_type
   '1= gold, 2=lilac, 3= specific condition
   '---------------------------------------

   Return veteran_card_types[cmbVeteranCardTypes.Index]!pk
   
End

Public Function veteran_specific_condition_get() As String
   '---------------------------------------------------
   'The veterans entitlement may be limited to say skin 
   '---------------------------------------------------  

   Return Trim(txtVeteranSpecificCondition.Text)
   
End

Public Function Concession_Card_Number_Get() As String
   '---------------------------------------------------------
   'The number of one of the three available concession cards
   '--------------------------------------------------------- 

   Return Trim(txtConcessionNumber.text)
   
End

Public Function Concession_Card_Expiry_Date_Get() As String
   '------------------------------------
   'The date the concession card expires
   '------------------------------------

   Return Trim(txtConcessionExpiryDate.text)
   
End

Public Function Patient_Memo_Get() As String
   
   Return Trim(txtMemo.text) 
   
End

Public Function Billing_type_Get() As Integer
   
   Return billing_types[cmbBillingTypes.index]!pk

End

Public Function Centrelink_Card_Type_Get() As Integer
   
   Return centrelink_card_types[cmbCentreLinkCardTypes.index]!pk 
   
End

Public Function Private_Health_Fund_Get() As Integer
   
   Return health_insurance_companies[cmbPrivateInsuranceCompany.index]!pk
   
End

Public Sub Init()
   
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   lblMeasure.text = "  Concession Card Name  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblMeasure)
   doctors = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get_Per_Role(const.StaffRole_Doctor))
   modUtil.LoadCombo(cmbPreferredDoctor, doctors, "wholename")
   veteran_card_types = modBilling.Veteran_Card_Types_Get()
   modUtil.LoadCombo(cmbVeteranCardTypes, veteran_card_types, "type")
   centrelink_card_types = modBilling.Centrelink_Card_Types_Get()
   modUtil.LoadCombo(cmbCentreLinkCardTypes, centrelink_card_types, "type")
   health_insurance_companies = modBilling.Health_Funds_Get()
   modUtil.LoadCombo(cmbPrivateInsuranceCompany, health_insurance_companies, "fund")
   billing_types = modBilling.Billing_Types_Get()
   modUtil.LoadCombo(cmbBillingTypes, billing_types, "name") 'ian's table hence the different field name
   lblMeasure.text = "  Commonwealth Seniors Health Card  "
   cmbPreferredDoctor.width = lblMeasure.Width
   cmbVeteranCardTypes.width = lblMeasure.Width
   cmbCentreLinkCardTypes.width = lblMeasure.Width
   cmbBillingTypes.width = lblMeasure.Width
   cmbPrivateInsuranceCompany.width = lblMeasure.Width
   HBox_Medicare.width = lblMeasure.Width
   HBox_Concession.width = lblMeasure.Width  
   
End

Public Sub Display_Patient_Data(P As Collection)
   
   patient = P
   Try txtMedicareNumber.text = P!medicare_number
   Try txtMedicareReferenceNumber.text = P!medicare_ref_number
   Try txtMedicareCardExpiryDate.text = Format(P!medicare_expiry_date, "dd/mm/yyyy")
   Try txtVeteranNumber.text = P!veteran_number
   Try txtVeteranSpecificCondition.text = P!veteran_specific_condition
   Try txtlegacyFileNumber.text = P!pk_legacy
   
End

Public Function EditArea_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   '----------------------------------------------------------
   'PURPOSE       Restrict key presses for validation purposes
   'HOW IT WORKS  see routines names
   'FIXME         Ian would do this much simpler I'm sure
   '-----------------------------------------------------------
   
   Select Case Last.Tag
      Case "medicare number", "medicare card reference number"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "veteran number", "Concession number"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_Letters_Numbers, keycode)
      Case "age onset"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "medicare card expiry date", "concession expiry date"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case Else
         bkeyvalid = True
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TextBox_Activate()
   
   Select Case Last.tag
         
      Case "medicare number"
         txtMedicareReferenceNumber.SetFocus()
      Case "medicare card reference number"
         txtMedicareCardExpiryDate.SetFocus()
      Case "medicare card expiry date"
         cmbBillingTypes.SetFocus()
      Case "veteran number"
         cmbVeteranCardTypes.SetFocus()
      Case "veteran condition"
         txtMemo.SetFocus()
      Case "Concession number"
         txtConcessionExpiryDate.SetFocus()
      Case "concession expiry date"
         cmbBillingTypes.SetFocus()
      Case "responsible payer"
         cmbPrivateInsuranceCompany.SetFocus()
      Case "memo"
         txtFindNextOfKin.SetFocus()
   End Select
   
End

Public Sub EditArea_TextBox_Keypress()
   
   bkeyvalid = EditArea_ExcludeKeys(key.code, Last.tag)
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case Key.Code
      Case Key.Down
         If columnview1.Visible Then
            With columnview1
               .SetFocus()
               .Item.Selected = True   
            End With
         Endif
   End Select
   
End

Public Sub EditArea_Combo_Click()
   
   Select Case Last.tag
      Case "veteran card type"
         If Last.index = const.Veteran_Entitlement_Specific Then
            txtVeteranSpecificCondition.Text.SetFocus()
         Else
            txtMemo.SetFocus()
         Endif
      Case "centrelink card type"
      Case "private insurance company"
         cmbPreferredDoctor.SetFocus()
      Case "preferred doctor"
         txtMemo.SetFocus()
         
      Case "billing type"
         
   End Select
   
End

Public Sub Next_Of_Kin_Get()
   
End

Public Sub Next_Of_Kin_Select()
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.white
   
End 

Public Sub EditArea_Combo_Keypress()

   If Key.code = Key.Return Then    
      Select Case Last.tag
         Case "veteran card type"
         Case "centrelink card type"
         Case "private insurance company"
         Case "preferred doctor"
         Case "billing type"
            txtPayer.SetFocus()
      End Select
   End If  

End
