' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' ------------------------------------------------------------------------------------------
' PURPOSE         A module to save patient specific information to do with
'                 billing and gFPatienteneral practice
' TODO            Put in an admin general option for the default doctor
'                 FIX fk_payer_branch
' NOTE             Display_Patient_Data() has patient collection passed to it from FPatients
'                  This sub also creates the cConsult needed if the user clicks on the
'                  tab and selects the psycho-social history to put in NOK (Next of kin)
'-------------------------------------------------------------------------------------------
Private doctors As Collection
Private itimer_count As Integer
Private patient As Collection
Private veteran_card_types As Collection
Private centrelink_card_types As Collection
Private health_insurance_companies As Collection
Private bDataChanged As Boolean                                'if True then call FRecordVisit if it is the parent to save the billing defaults.
Public bExit As Boolean
Private bkeyvalid As Boolean
Private ParentForm_Vbox_EditArea As VBox
Private fk_payer_person As Variant      'if not null then key to contacts.data_persons = he/she who pays the patients bills, may or may not be a patient.
Private fk_payer_branch As Variant      'if not null then key to contacts.data_brances = organisation/branch who pays the bills for the patient
Private Payers As Collection
Private Payer As Collection
Private billing_levels As Collection
Private sParentForm As String          'the name of the parent form e.g FRecordVisit
Private pcehrconsent As String[]        'n = Not asked yet, c = consented, x = Not eligible(tourist, asylum - seeker, etc), r = refused, e = Error
Private old_ihi As String
Public old_consent As String
Public form_next_of_kin As FPsychoSocialHistory
Private currentConsult As CConsult 'passed to psycho-social history only but set to null by FPatients
Private Const ctab_card_details As Integer = 0
Private Const ctab_next_of_kin As Integer = 1
Private Const ctab_patient_pharmacy As Integer = 2
Private form_patient_contacts As FCommunicationData
Public form_patient_pharmacy As FPatientPharmacy

Public Function Preferred_Doctor() As Variant
   
   If cmbPreferredDoctor.Index >= 0 Then
      Return doctors[cmbPreferredDoctor.index]!fk_staff
   Else
      Return Null
   Endif
   
End

Public Sub Currentconsult_Set_Null()
   
   currentConsult = Null
   
End

Public Function fk_patient_pharmacy_get() As Variant

   If Not IsNull(form_patient_pharmacy) Then
      Return form_patient_pharmacy.fk_patient_pharmacy()
   Else
      Return Null
   End If   
   
End

Public Function patient_pharmacy_memo_get() As String
   
   If Not IsNull(form_patient_pharmacy) Then
       Return form_patient_pharmacy.patient_pharmacy_memo()
   End If   
   
End

Public Function webster_pack_get() As Boolean
   
   If Not IsNull(form_patient_pharmacy) Then    
      Return CBool(form_patient_pharmacy.chkWebsterPack.value)
   Else
      Return False
   End If   
   
End

Public Function Nursing_home_resident() As Boolean
   
   Return CBool(chkNursingHomeResident.value)
   
End

Public Function Medicare_Number() As String
   
   Return Trim(txtMedicareNumber.text)
   
End

Public Function Responsible_Payer_Get_fk_person() As Variant
   
   Return fk_payer_person    'could be null
   
End

Public Function Responsible_Payer_Get_fk_branch() As Variant
   
   Return fk_payer_branch    'could be null
   
End

Public Function Medicare_Reference_number() As String
   
   If Trim(txtMedicareReferenceNumber.Text) = "" Then Return Null
   Return Trim(txtMedicareReferenceNumber.text)
   
End

Public Function Medicare_Card_Expiry_Date() As String
   
   Return (Trim(txtMedicareCardExpiryDate.text))
   
End

Public Function Veteran_Card_Number() As String
   
   Return Trim(txtVeteranNumber.text)
   
End

Public Function Veteran_Card_Type() As Variant
   '---------------------------------------
   'return clerical.lu_veteran_card_type
   '1= gold, 2=lilac, 3= specific condition
   'returns null if no card type
   '---------------------------------------
   
   If cmbVeteranCardTypes.Index <> 0 And cmbVeteranCardTypes.Index <> -1 Then
      Return veteran_card_types[cmbVeteranCardTypes.Index]!pk
   End If
   
End

Public Function PCEHR_Consent() As String
   'returns one of 'n = Not asked yet, c = consented, x = Not eligible(tourist, asylum - seeker, etc), r = refused, e = Error
   
   If cmbPCEHRConsent.index = -1 Then
      Return "n"
   Else
      Return pcehrconsent[cmbPCEHRConsent.index]
   Endif
   
End

Public Function Patient_IndividualHealthIdentifier() As String
   
   If Trim(txtIndividualHealthIdentifier.Text) <> "" Then
      Return "800360" & Trim(txtIndividualHealthIdentifier.text)
   Else
      Return Null
   Endif
   
End

Public Function Previous_IHI(new_ihi As String) As String
   
   Dim s As String
   
   s = old_ihi
   old_ihi = new_ihi
   Return s
   
End

Public Function veteran_specific_condition() As String
   '---------------------------------------------------
   'The veterans entitlement may be limited to say skin
   '---------------------------------------------------
   
   Return Trim(txtVeteranSpecificCondition.Text)
   
End

Public Function Concession_Card_Number() As String
   '---------------------------------------------------------
   'The number of one of the three available concession cards
   '---------------------------------------------------------
   
   Return Trim(txtConcessionNumber.text)
   
End

Public Function Concession_Card_Expiry_Date() As String
   '------------------------------------
   'The date the concession card expires
   '------------------------------------
   
   Return Trim(txtConcessionExpiryDate.text)
   
End

Public Function Billing_Level_Get() As Variant
   
   If cmbBillingLevel.index <> -1 Then
      Return billing_Levels[cmbBIllingLevel.index]!pk
   Else
      Return Null
   End If
   
End

Public Function Centrelink_Card_Type() As Variant
   
   If cmbCentreLinkCardTypes.index <> 0 And cmbCentreLinkCardTypes.index <> -1 Then
      Return centrelink_card_types[cmbCentreLinkCardTypes.index]!pk
   Else
      Return Null
   End If
   
End

Public Function Private_Health_Fund() As Variant
   
   If cmbPrivateInsuranceCompany.index <> -1 Then
      Return health_insurance_companies[cmbPrivateInsuranceCompany.index]!pk
   Else
      Return Null
   End If
   
End

Public Sub Init(VB As VBox, Optional sPF As String)
   '-----------------------------------------------------------------------------------------------------------
   'VB = the editing area vertical box  we want to 'go red around the edges' to indicate data change
   'It will be in the parent Form
   'note that modUtil.Copy_Collection_Keyed_Sequentially gives the collection keys 0>n to match the combo index
   '-----------------------------------------------------------------------------------------------------------
   
   ParentForm_Vbox_EditArea = VB
   sParentForm = sPF
   currentConsult = Null  'used in the embedded pyscho-social history for NOK.
   lblMeasure.text = "  Individual Health Identifier  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblMeasure)
   doctors = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get_Doctors())
   modUtilGUI.LoadCombo(cmbPreferredDoctor, doctors, "wholename")
   veteran_card_types = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Veteran_Card_Types_Get())
   modUtilGUI.LoadCombo(cmbVeteranCardTypes, veteran_card_types, "type")
   centrelink_card_types = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Centrelink_Card_Types_Get())
   modUtilGUI.LoadCombo(cmbCentreLinkCardTypes, centrelink_card_types, "type")
   health_insurance_companies = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Health_Funds_Get())
   modUtilGUI.LoadCombo(cmbPrivateInsuranceCompany, health_insurance_companies, "fund")
   billing_levels = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Billing_Level_Get())
   modUtilGUI.LoadCombo(cmbBIllingLevel, billing_levels, "level") 'ian's table hence the different field name
   lblMeasure.text = "  Commonwealth Seniors Health Card  "
   pcehrconsent = New String[]
   pcehrconsent.Add("n", 0)  'patient controlled electronic health record   c = consented
   pcehrconsent.Add("e", 1)  'patient controlled electronic health record   e = error
   pcehrconsent.Add("c", 2)  'patient controlled electronic health record   n = Not asked yet
   pcehrconsent.Add("x", 3)  'patient controlled electronic health record   x = Not eligible(tourist, asylum - seeker, etc)
   pcehrconsent.Add("r", 4)  'patient controlled electronic health record   r = refused,
   pcehrconsent.Add("h", 5)  ' details cHange
   pcehrconsent.Add("d", 6)  ' Dead
   pcehrconsent.Add("v", 7)
   cmbPCEHRConsent.Add("Not asked")
   cmbPCEHRConsent.Add("Error")
   cmbPCEHRConsent.Add("Consented, for upload")
   cmbPCEHRConsent.Add("Not eligible (e.g. tourist)")
   cmbPCEHRConsent.Add("Refused")
   cmbPCEHRConsent.Add("Details changed, for upload")
   cmbPCEHRConsent.Add("Verified/Deceased")
   cmbPCEHRConsent.Add("Verified/Active")
   cmbPCEHRConsent.width = lblMeasure.Width
   cmbPreferredDoctor.width = lblMeasure.Width
   cmbVeteranCardTypes.width = lblMeasure.Width
   cmbCentreLinkCardTypes.width = lblMeasure.Width
   cmbBIllingLevel.width = lblMeasure.Width
   cmbPrivateInsuranceCompany.width = lblMeasure.Width
   HBox_Medicare.width = lblMeasure.Width
   HBox_Concession.width = lblMeasure.Width
   columnview1.Columns.count = 2
   bDataChanged = False
   If Not IsNull(modDBConnect.currentUser) Then
      HBox_referral_status.Visible = modAdminDBI.Config_Get_Staff_Member("billing_show_referral_status", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff)
   Endif
   EditArea_Recolour(Color.DarkGray)
   old_consent = "n"
   old_ihi = Null
   lblMeasure.text = "   Search Patient Database   "
   With form_next_of_kin = New FPsychoSocialHistory(Vbox_Next_Of_Kin)
      .HBox17.visible = False
      .HBox2.visible = False
      .HBox10.visible = False
      .HBox_teConfidentialHistory.visible = False
      .HBox_DoNotPRINT.visible = False
      .HBox_ViewByDr.visible = False
      .HBox_RolesPermitted.visible = False
      .Set_Parent_Form("FPatientBillingCards")
      .Set_Parent_From_VBox_EditArea(ParentForm_Vbox_EditArea)
      lblMeasure.text = " Search "
      modEditAreaHelpers.Resize_labels(.form_carer.VBox_EditArea, lblmeasure)
      modEditAreaHelpers.Resize_labels(.form_responsible_person.VBox_EditArea, lblMeasure)
      .form_carer.txtStreet2.Visible = False
      .form_carer.lblStreet2.Visible = False
      .form_responsible_person.txtStreet2.Visible = False
      .form_responsible_person.lblStreet2.Visible = False
   End With
   If TabStrip1.count = 4 'when used in billing the extra tab is to update phone numbers etc
      lblMeasure.text = "  Home Phone "
      modEditAreaHelpers.Resize_labels(Vbox_Patient_Contacts, lblMeasure)
      With form_patient_contacts = New FCommunicationData(Vbox_Contacts)
         .Init(ParentForm_Vbox_EditArea, Null)
      End With
   End If
   
   VBox_Notify_Data_Changed.Padding = 0
   
End

Public Sub Form_Close()
   
   ParentForm_Vbox_EditArea = Null
   
End

Public Sub Reload_IHI(fk_patient As Variant)
   
   Dim coll As Collection
   Dim x As Integer
   
   bExit = True
   coll = modContactsDBI.Patient_Get_Using_PK(fk_patient)
   txtIndividualHealthIdentifier.text = Right$(coll!ihi, -6) ' knock off constant prefix
   old_ihi = coll!ihi
   old_consent = coll!pcehr_consent
   ' this is the best method IMHO (Ian)
   For x = 0 To pcehrconsent.Max
      If pcehrconsent[x] = coll!pcehr_consent Then   'n = Not asked yet, c = consented, x = Not eligible(tourist, asylum - seeker, etc), r = refused, e = Error
         cmbPCEHRConsent.index = x
         Break
      End If
   Next
   bExit = False
   
End

Public Sub EditArea_Recolour(icolor As Integer)
   
   Dim HB As Hbox
   Dim lbl As Label
   Dim hctrl As Control
   
   For Each hctrl In Vbox_EditArea.Children
      If hctrl Is Hbox Then
         HB = hctrl
         For Each hctrl In HB.Children
            If hctrl Is Label Then
               lbl = hctrl
               lbl.Foreground = icolor
            Endif
         Next
      End If
   Next
   
End

Public Sub EditArea_Clear()
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   Try Me.form_next_of_kin.bexit = True            'bughere
   Try modEditAreaHelpers.EditArea_Clear(Me.form_next_of_kin.Vbox_EditArea_inner)
   Try Me.form_next_of_kin.bexit = False ' bug here
   Veteran_Data_Entry_Enable(False)
   Concession_Card_Enable(False)
   fk_payer_person = Null
   fk_payer_branch = Null
   payer = Null
   patient = Null
   bExit = False
   old_consent = "n"
   old_ihi = Null
   cmbPCEHRConsent.Index = 0
   tlReferral.Foreground = Color.Black
   tlReferral.Text = "NO REFERRAL"
   VBox_Notify_Data_Changed.Padding = 0
   
End

Public Sub Concession_Card_Enable(flag As Boolean)
   
   txtConcessionExpiryDate.Enabled = flag
   txtConcessionNumber.Enabled = flag
   If Not Flag Then
      txtConcessionExpiryDate.text = ""
      txtConcessionNumber.text = ""
   Endif
   
End

Public Sub Veteran_Data_Entry_Enable(flag As Boolean)
   
   txtVeteranNumber.Enabled = flag
   txtVeteranSpecificCondition.Enabled = flag
   If Not Flag Then
      txtVeteranNumber.text = ""
      txtVeteranSpecificCondition.text = ""
   Endif
   
End

Public Sub Display_Patient_Data_old(P As Collection)
   
   Dim doctor As Collection
   Dim x As Integer
   
   EditArea_Clear()
   patient = P
   bExit = True
   bDataChanged = False
   Try txtMedicareNumber.text = P!medicare_number
   Try txtMedicareReferenceNumber.text = P!medicare_ref_number
   Try txtMedicareCardExpiryDate.text = Right(Format(P!medicare_expiry_date, "dd/mm/yyyy"), 7)
   Load_Referral_Type(P!fk_patient)
   cmbVeteranCardTypes.index = cmbVeteranCardTypes.Find(P!veteran_card_type)
   If Not IsNull(P!veteran_card_type) Then
      Veteran_Data_Entry_Enable(True)
   Endif
   Try txtVeteranNumber.text = P!veteran_number
   Try txtVeteranSpecificCondition.text = P!veteran_specific_condition
   Try cmbCentreLinkCardTypes.index = cmbCentreLinkCardTypes.Find(P!concession_card_type)
   Try txtConcessionExpiryDate.text = Format$(P!concession_card_expiry_date, "dd/mm/yyyy")
   Try txtConcessionNumber.text = P!concession_card_number
   If Not IsNull(P!concession_card_type) Or Not IsNull(P!concession_card_number) Then
      Concession_Card_Enable(True)
      ' Try txtConcessionExpiryDate.text = P!concession_card_expiry_date
      ' Try txtConcessionNumber.text = P!concession_card_number
   Endif
   txtIndividualHealthIdentifier.text = Right$(P!ihi, -6)
   old_ihi = P!ihi
   ' this is the best method IMHO (Ian)
   For x = 0 To pcehrconsent.Max
      If pcehrconsent[x] = P!pcehr_consent Then   'n = Not asked yet, c = consented, x = Not eligible(tourist, asylum - seeker, etc), r = refused, e = Error
         cmbPCEHRConsent.index = x
         Break
      End If
   Next
   old_consent = P!pcehr_consent
   Try cmbBIllingLevel.index = cmbBIllingLevel.Find(P!billing_level)
   chkNursingHomeResident.value = P!nursing_home_resident
   Try cmbPrivateInsuranceCompany.index = cmbPrivateInsuranceCompany.Find(P!fund)
   Try txtlegacyFileNumber.text = P!pk_legacy
   If Not IsNull(P!fk_payer_person) Then
      Payer = modContactsDBI.Person_Including_Patients_Get_Using_Pk(P!fk_payer_person)
      txtPayer.text = Payer!wholename & " " & Payer_Display_Address(Payer)
      txtPayer.pos = 0
      fk_payer_person = P!fk_payer_person
   Endif
   If Not IsNull(P!fk_payer_branch) Then
      'FIXME NOT IMPLEMENTED
   Endif
   For Each doctor In doctors
      If doctor!fk_staff = P!fk_doctor Then
         cmbPreferredDoctor.index = x
         Break
      End If
      Inc x
   Next
   bExit = False
   ' currentConsult = New CConsult(patient, const.ConsultType_ClericalNote)
   form_next_of_kin.Init(currentconsult)
   If Not IsNull(form_patient_pharmacy) Then
      form_patient_pharmacy.Init(currentconsult)
   Endif
   If TabStrip1.count = 4 Then 'in Billing and extra tab is added to the form to enable quick update contacts without switching back to FPatients
      form_patient_contacts.comms_Load(modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.person_comms_get(P!fk_person)))
   End If
   
End

Public Sub Display_Patient_Data(cons As CConsult)
   
   Dim doctor As Collection
   Dim x As Integer
   Dim P As Collection  'patient
   
   EditArea_Clear()
   currentConsult = cons
   ' patient = P
   P = currentConsult!patient
   bExit = True
   bDataChanged = False
   Try txtMedicareNumber.text = P!medicare_number
   Try txtMedicareReferenceNumber.text = P!medicare_ref_number
   Try txtMedicareCardExpiryDate.text = Right(Format(P!medicare_expiry_date, "dd/mm/yyyy"), 7)
   Load_Referral_Type(P!fk_patient)
   cmbVeteranCardTypes.index = cmbVeteranCardTypes.Find(P!veteran_card_type)
   If Not IsNull(P!veteran_card_type) Then
      Veteran_Data_Entry_Enable(True)
   Endif
   Try txtVeteranNumber.text = P!veteran_number
   Try txtVeteranSpecificCondition.text = P!veteran_specific_condition
   Try cmbCentreLinkCardTypes.index = cmbCentreLinkCardTypes.Find(P!concession_card_type)
   Try txtConcessionExpiryDate.text = Format$(P!concession_card_expiry_date, "dd/mm/yyyy")
   Try txtConcessionNumber.text = P!concession_card_number
   If Not IsNull(P!concession_card_type) Or Not IsNull(P!concession_card_number) Then
      Concession_Card_Enable(True)
      ' Try txtConcessionExpiryDate.text = P!concession_card_expiry_date
      ' Try txtConcessionNumber.text = P!concession_card_number
   Endif
   txtIndividualHealthIdentifier.text = Right$(P!ihi, -6)
   old_ihi = P!ihi
   ' this is the best method IMHO (Ian)
   For x = 0 To pcehrconsent.Max
      If pcehrconsent[x] = P!pcehr_consent Then   'n = Not asked yet, c = consented, x = Not eligible(tourist, asylum - seeker, etc), r = refused, e = Error
         cmbPCEHRConsent.index = x
         Break
      End If
   Next
   old_consent = P!pcehr_consent
   Try cmbBIllingLevel.index = cmbBIllingLevel.Find(P!billing_level)
   chkNursingHomeResident.value = P!nursing_home_resident
   Try cmbPrivateInsuranceCompany.index = cmbPrivateInsuranceCompany.Find(P!fund)
   Try txtlegacyFileNumber.text = P!pk_legacy
   If Not IsNull(P!fk_payer_person) Then
      Payer = modContactsDBI.Person_Including_Patients_Get_Using_Pk(P!fk_payer_person)
      txtPayer.text = Payer!wholename & " " & Payer_Display_Address(Payer)
      txtPayer.pos = 0
      fk_payer_person = P!fk_payer_person
   Endif
   If Not IsNull(P!fk_payer_branch) Then
      'FIXME NOT IMPLEMENTED
   Endif
   For Each doctor In doctors
      If doctor!fk_staff = P!fk_doctor Then
         cmbPreferredDoctor.index = x
         Break
      End If
      Inc x
   Next
   bExit = False
   ' currentConsult = New CConsult(patient, const.ConsultType_ClericalNote)
   form_next_of_kin.Init(currentconsult)
   If Not IsNull(form_patient_pharmacy) Then
      form_patient_pharmacy.Init(currentconsult)
   Endif
   If TabStrip1.count = 4 Then 'in Billing and extra tab is added to the form to enable quick update contacts without switching back to FPatients
      form_patient_contacts.comms_Load(modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.person_comms_get(P!fk_person)))
   End If
   
End

Private Sub Load_Referral_Type(fk_patient As Variant)
   'Ian, there is  a bug here - if the patient has two addresses then
   'exect_query_first will not work
   'I've temporarily changed this whilst  you find a solution as
   'it is crashing my billing system.
   
   Dim coll As Collection
   Dim expiry As String
   
   coll = modBillingDBI.Find_Referrer(fk_patient)
   If IsNull(coll) Then
      tlReferral.Foreground = Color.Red
      tlReferral.Text = "NO REFERRAL"
   Else
      If coll!indefinite Then
         expiry = "Indefinite"
         tlReferral.Foreground = Color.Black
      Else
         If DateDiff(Now(), coll!expiry, gb.Day) < 30 Then
            tlReferral.Foreground = Color.Yellow
         Else
            tlReferral.Foreground = Color.Green
         Endif
         expiry = "expires " & Format$(coll!expiry, "dd/mm/yy")
      Endif
      tlReferral.Foreground = Color.Black
      tlReferral.Text = coll!firstname & " " & coll!surname & " (" & expiry & ")"
   Endif
   
End

Public Function EditArea_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   '----------------------------------------------------------
   'PURPOSE       Restrict key presses for validation purposes
   'HOW IT WORKS  see routines names
   'FIXME         Ian would do this much simpler I'm sure
   '-----------------------------------------------------------
   
   Select Case Tag
      Case "medicare number", "medicare card reference number"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "veteran number", "concession number"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_Letters_Numbers, keycode)
      Case "age onset"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "medicare card expiry date", "concession expiry date"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case "individual health identifier"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case Else
         bkeyvalid = True
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_Notify_DataChange()
   
   If bexit Then Return
   If sParentForm <> "FRecordVisit" Then
      ParentForm_Vbox_EditArea.padding = 1  'bug here
   Else
      FRecordVisit.Enable_BOKBIllingSaveButton(True)
      VBox_Notify_Data_Changed.Padding = 1
   End If
   bDataChanged = True
   
End

Public Sub EditArea_TextBox_Activate()
   'User has pressed the enter key in one of the textboxes
   
   Select Case Last.tag
      Case "medicare number"
         txtMedicareReferenceNumber.SetFocus()
      Case "medicare card reference number"
         txtMedicareCardExpiryDate.SetFocus()
      Case "medicare card expiry date"
         cmbBIllingLevel.SetFocus()
      Case "veteran number"
         txtVeteranSpecificCondition.SetFocus()
      Case "veteran condition"
         ' txtFindNextOfKin.SetFocus()
      Case "Concession number"
         txtConcessionExpiryDate.SetFocus()
      Case "concession expiry date"
         cmbBIllingLevel.SetFocus()
      Case "responsible payer"
         cmbPrivateInsuranceCompany.SetFocus()
   End Select
   
End

Public Sub EditArea_TextBox_Keypress()
   
   If bExit Then Return
   bkeyvalid = EditArea_ExcludeKeys(key.code, Last.tag)
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case Key.Code
      Case Key.Down
         If columnview1.Visible And ColumnView1.count > 0 Then 'shouldn't need this, is  bug where can be showing without content FIXME.
            With columnview1
               .SetFocus()
               .Item.Selected = True
            End With
         Endif
   End Select
   EditArea_Notify_DataChange()
   
End

Public Sub EditArea_Combo_Click()
   
   If Bexit Then Return
   Select Case Last.tag
      Case "veteran card type"
         Select Case Last.index + 1                'the types are 1 based
            Case const.Veteran_Entitlement_None
               Veteran_Data_Entry_Enable(False)
               '     txtFindNextOfKin.SetFocus()
            Case const.Veteran_Entitlement_Full
               Veteran_Data_Entry_Enable(True)
               txtVeteranNumber.SetFocus()
            Case const.Veteran_Entitlement_Specific
               Veteran_Data_Entry_Enable(True)
               txtVeteranSpecificCondition.SetFocus()
         End Select
      Case "centrelink card type"
         If Last.index + 1 = const.Concession_Entitlement_None Then
            Concession_Card_Enable(False)
            ' txtFindNextOfKin.SetFocus()
         Else
            Concession_Card_Enable(True)
            txtConcessionNumber.SetFocus()
         Endif
      Case "private insurance company"
         cmbPreferredDoctor.SetFocus()
      Case "preferred doctor"
         '  txtFindNextOfKin.SetFocus()
      Case "billing level"
         If cmbBIllingLevel.text = "Bulk Bill" Then
            txtPayer.text = ""
            fk_payer_person = Null
            fk_payer_branch = Null
         Endif
   End Select
   EditArea_Notify_DataChange()
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   With columnview1
      .Visible = False
      .top = Last.parent.parent.top + Last.height
      .width = Last.width
      .left = Last.parent.left
   End With
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.white
   If Last.tag = "medicare number" And Trim(Last.text) <> "" Then
      bExit = True
      '   txtMedicareNumber.text = modUtil.Medicare_Number_Check(Last.text)
      bExit = False
   Endif
   
End

Public Sub EditArea_Combo_Keypress()
   
   If Key.code = Key.Return Then
      Select Case Last.tag
         Case "veteran card type"
         Case "centrelink card type"
         Case "private insurance company"
         Case "preferred doctor"
         Case "billing type"
            txtPayer.SetFocus()
      End Select
   End If
   
End

Public Sub EditArea_TextBox_KeyRelease()
   
   Select Case Last.tag
      Case "responsible payer"
         itimer_count = 0
         Timer1.Start
   End Select
   
End

Public Sub Timer1_Timer()
   
   Inc itimer_count
   If itimer_count > 3 Then
      Responsible_Payer_Find
   Endif
   
End

Public Sub Responsible_Payer_Find()
   '----------------------------------------------------------------
   'Find responsible payer - at the moment can only choose a patient
   'fixme - put in for payer as branch of organisation
   '----------------------------------------------------------------
   
   Timer1.Stop
   If Trim(txtPayer.text) = "" Or Not IsNull(fk_payer_person) Then Return
   columnview1.Clear()
   Payers = modContactsDBI.Person_Get(Trim(Lower(txtPayer.text)), const.contacttype_PersonsAndPatients)
   Payers.Remove("sql_in_english")
   For Each payer In Payers
      columnview1.Add(Payer!pk_view, 0)
      columnview1[payer!pk_view][0] = payer!wholename
      columnview1[payer!pk_view][1] = Payer_Display_Address(payer)
   Next
   With columnview1
      .tag = txtPayer
      .Raise
      .Visible = True
   End With
   
End

Public Sub Payer_Display_address(Payer As Collection) As String
   
   Return Trim(payer!street1 & " " & payer!street2) & " " & payer!town & " " & payer!postcode
   
End

Public Sub columnview1_KeyPress()
   
   If Key.code = Key.return Then columnview1_DblClick()
   
End

Public Sub columnview1_DblClick()
   
   columnview1.MoveCurrent
   Select Case Last.tag.tag
      Case "responsible payer"
         Responsible_Payer_Select()
   End Select
Catch
   Return
   
End

Public Sub Responsible_Payer_Select()
   
   columnview1.MoveCurrent
   bExit = False
   txtPayer.text = Payers[columnview1.Item.key]!wholename & " " & columnview1[columnview1.Item.key][1]
   fk_payer_person = Payers[columnview1.Item.key]!fk_person
   txtPayer.pos = 0
   columnview1.Visible = False
   bExit = False
Catch
   Return
   
End

Public Sub EditArea_TextBox_Change()
   
   If bexit Then Return
   Select Case Last.tag
      Case "responsible payer" 'is only set once user selects from list, then bexit = true
         fk_payer_person = Null
         fk_payer_branch = Null
      Case "individual health identifier"
         If Last.text = "" Then
            cmbPCEHRConsent.index = -1
         Else
            If cmbPCEHRConsent.index = -1 Or cmbPCEHRConsent.index = const.pcehrconsent_notconsented Then
               cmbPCEHRConsent.index = const.pcehrconsent_consented 'consented
            Endif
            
         Endif
   End Select
   EditArea_Notify_DataChange()
   
End

Public Sub EditArea_Combo_Change()
   
   If bexit Then Return
   If Last.tag <> "pcehr consent" Then Return
   If cmbPCEHRConsent.Index = 6 Or cmbPCEHRConsent.Index = 7 Or cmbPCEHRConsent.Index = 1 Then
      Stop Event
   Endif
   
End

Public Function Valid_Data() As Boolean
   '------------------------------------------------------
   'checks some data to see if valid returns true if ok
   'called by two forms FContactspersons and FRecordVisit
   'Both those forms have this form embedded
   'fixme add vaidating the medicare card number
   '------------------------------------------------------
   
   Dim other_patient As Collection
   Dim s As String
   Dim fk_patient As Variant
   Dim cc As CConsult
   Dim i As Integer
   
   If Trim(txtMedicareReferenceNumber.Text) <> "" Then
      i = -1
      Try i = Val(txtMedicareReferenceNumber.Text)
      If i < 1 Or If i > 9 Then
         Message.Info("Medicare IRN Number must be between 1 and 9")
         Return False
      Endif
   Endif
   If Trim(txtMedicareNumber.text) <> "" Then
      If modUtil.Medicare_Number_Check(Trim(txtMedicareNumber.text)) = "*INVALID*" Then
         Message.Info("Invalid medicare number")
         Return False
      Endif
   Endif
   If txtVeteranNumber.text <> "" Then
      If cmbVeteranCardTypes.index = -1 Then
         Message.Info("Please select the type of veteran card before saving")
         cmbVeteranCardTypes.SetFocus
         Return False
      Endif
   Endif
   If txtMedicareCardExpiryDate.text <> "" Then              'only validate if user has entered something
      If Not IsDate(modUtil.Medicare_Create_Expiry_date(txtMedicareCardExpiryDate.text)) Then
         txtMedicareCardExpiryDate.SetFocus()
         Return False
      Endif
   Endif
   If txtConcessionNumber.text <> "" Then
      If cmbCentreLinkCardTypes.index = -1 Then
         Message.info("Please select the type of concession card before saving")
         Return False
      Endif
   Endif
   If cmbCentreLinkCardTypes.index > 0 Then 'allow none or -1
      If txtConcessionNumber.text = "" Then
         Message.info("Please supply a concession card number before saving")
         txtConcessionNumber.SetFocus()
         Return False
      End If
   Endif
   If txtConcessionExpiryDate.text <> "" Then                 'only validate if user has entered something
      If Not IsDate(txtConcessionExpiryDate.text) Then
         txtConcessionExpiryDate.SetFocus()
         Return False
      Endif
   Endif
   If Trim(txtIndividualHealthIdentifier.text) <> "" Then
      s = Patient_IndividualHealthIdentifier()
      If Not modPCEHR.checkIdentifier(s) Then
         Message.Info("Invalid Individual Health Identifer Number")
         txtIndividualHealthIdentifier.SetFocus()
         Return False
      End If
      ' specific checks: not allowed to have another patient in DB with same number
      fk_patient = Null
      If Not IsNull(patient) And If patient.Exist("fk_patient") Then fk_patient = patient!fk_patient
      other_patient = modPCEHR.Check_Unique_IHI(Patient_IndividualHealthIdentifier(), fk_patient)
      If Not IsNull(other_patient) Then
         bExit = True
         cmbPCEHRConsent.Index = 1 ' error
         bExit = False
         s = "Another patient "
         s &= other_patient!wholename & " DOB: " & other_patient!birthdate
         s &= " has the same IHI " & Patient_IndividualHealthIdentifier()
         Message.Error(s)
         modPCEHR.Set_PCEHR_Error(other_patient!fk_patient)
         cc = New CConsult(other_patient, const.ConsultType_AuditNote, True)
         cc.Set(const.ConsultType_AuditNote, "IHI error")
         s = "The IHI is being deactivated because of duplication "
         If Not IsNull(patient) And If patient.Exist("wholename") Then
            s &= "other patients is " & patient!wholename & " DOB: " & patient!birthdate
         Endif
         modAudit.MakeAudit(cc, const.cAuditAction_PCEHR, "clerical.data_patients", other_patient!fk_patient, 0, s)
         modDBConnect.CommitTrans()
         Return False
      End If
   End If
   If PCEHR_Consent() = "c" Or If PCEHR_Consent() = "h" Then
      If txtIndividualHealthIdentifier.Text = "" And If txtMedicareNumber.Text = "" And If txtVeteranNumber.Text = "" Then
         If Message.Warning("You must have one of a Medicare number, DVA number or IHI number to register on the PCEHR", "Don't Care", "I'll Fix It") = 1 Then
            Return True  ' report to calling code as valid anyway
         Else
            Return False
         Endif
      Endif
   Endif
   If old_consent <> "v" And If PCEHR_Consent() = "v" Then
      Message.Error("You can't manually set to PCEHR Consent to Verified")
      Return False
   Endif
   If old_consent <> "e" And If PCEHR_Consent() = "e" Then
      Message.Error("You can't manaully set PCEHR Consent to Error")
      Return False
   Endif
   Return True
   
End

Public Sub EditArea_CheckBox_Click()
   
   If bexit Then Return
   EditArea_Notify_DataChange()
   
End

Public Sub Contacts_Save()
   '--------------------------------------------------------------------------------------
   'a crude mini contacts just for billing to allow just phones,email, mobiles to be saved
   '--------------------------------------------------------------------------------------
   
   form_patient_contacts.Save(, patient!fk_person)
   
End

Public Sub TabStrip1_Click()
   
   Select Case TabStrip1.Index
      Case ctab_card_details
         '   Form_Billing.
      Case ctab_next_of_kin
      Case ctab_patient_pharmacy
         If IsNull(form_patient_pharmacy) Then
            form_patient_pharmacy = New FPatientPharmacy(Vbox_Patients_Pharmacy) 'init the gui
            form_patient_pharmacy.Init(currentconsult)
         End If
         With form_patient_pharmacy
            .Set_Parent_Form("FPatientBillingCards")
            .Set_Parent_From_VBox_EditArea(ParentForm_Vbox_EditArea)
         End With
         
   End Select
   
End
