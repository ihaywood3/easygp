' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' ------------------------------------------------------------------------
' PURPOSE         A module to save patient specific information to do with
'                 billing and general practice
' TODO            Put in an admin general option for the default doctor
'                 FIX fk_payer_branch
'-------------------------------------------------------------------------
Private doctors As Collection
Private itimer_count As Integer
Private fk_person As Collection
Private patient As Collection
Private veteran_card_types As Collection
Private centrelink_card_types As Collection
Private health_insurance_companies As Collection
Private bDataChanged As Boolean                                'if True then call FRecordVisit if it is the parent to save the billing defaults.
Private bExit As Boolean
Private bkeyvalid As Boolean
Private ParentForm_Vbox_EditArea As VBox
Private fk_payer_person As Integer      'if not 0 then key to contacts.data_persons = he/she who pays the patients bills, may or may not be a patient.
Private fk_payer_branch As Integer      'if not 0 then key to contacts.data_brances = organisation/branch who pays the bills for the patient
Private Payers As Collection
Private Payer As Collection
Private billing_levels As Collection
Private Billing_Level As Collection
Private sParentForm As String          'the name of the parent form e.g FRecordVisit

Public Function Preferred_Doctor() As Variant

   If cmbPreferredDoctor.Index >= 0 Then
      Return doctors[cmbPreferredDoctor.index]!fk_staff
   Else
      Return Null
   Endif

End

Public Function Nursing_home_resident() As Boolean

   Return CBool(chkNursingHomeResident)

End

Public Function Medicare_Number() As String

   Return Trim(txtMedicareNumber.text)

End

Public Function Responsible_Payer_Get_fk_person() As Integer

   Return fk_payer_person    'could be 0

End

Public Function Responsible_Payer_Get_fk_branch() As Integer

   Return fk_payer_branch    'could be 0

End

Public Function Medicare_Reference_number() As Integer

   If txtMedicareReferenceNumber.text <> "" Then
      Return Val(txtMedicareReferenceNumber.text)
   End If

End

Public Function Medicare_Card_Expiry_Date() As String

   Return (Trim(txtMedicareCardExpiryDate.text))

End

Public Function Veteran_Card_Number() As String

   Return Trim(txtVeteranNumber.text)

End

Public Function Veteran_Card_Type() As Integer
   '---------------------------------------
   'return clerical.lu_veteran_card_type
   '1= gold, 2=lilac, 3= specific condition
   '---------------------------------------

   If cmbVeteranCardTypes.Index <> 0 And cmbVeteranCardTypes.Index <> -1 Then
      Return veteran_card_types[cmbVeteranCardTypes.Index]!pk
   End If

End

Public Function veteran_specific_condition() As String
   '---------------------------------------------------
   'The veterans entitlement may be limited to say skin
   '---------------------------------------------------

   Return Trim(txtVeteranSpecificCondition.Text)

End

Public Function Concession_Card_Number() As String
   '---------------------------------------------------------
   'The number of one of the three available concession cards
   '---------------------------------------------------------

   Return Trim(txtConcessionNumber.text)

End

Public Function Concession_Card_Expiry_Date() As String
   '------------------------------------
   'The date the concession card expires
   '------------------------------------

   Return Trim(txtConcessionExpiryDate.text)

End

Public Function Billing_Level_Get() As Integer

   If cmbBIllingLevel.index <> -1 Then
      Return billing_Levels[cmbBIllingLevel.index]!pk
   End If

End

Public Function Centrelink_Card_Type() As Integer

   If cmbCentreLinkCardTypes.index <> 0 And cmbCentreLinkCardTypes.index <> -1 Then
      Return centrelink_card_types[cmbCentreLinkCardTypes.index]!pk
   End If

End

Public Function Private_Health_Fund() As Integer

   If cmbPrivateInsuranceCompany.index <> -1 Then Return health_insurance_companies[cmbPrivateInsuranceCompany.index]!pk

End

Public Sub Init(VB As VBox, Optional sPF As String)
   '-----------------------------------------------------------------------------------------------------------
   'VB = the editing area vertical box  we want to 'go red around the edges' to indicate data change
   'It will be in the parent Form
   'note that modUtil.Copy_Collection_Keyed_Sequentially gives the collection keys 0>n to match the combo index
   '-----------------------------------------------------------------------------------------------------------

   ParentForm_Vbox_EditArea = VB
   sParentForm = sPF
   lblMeasure.text = "  Nursing Home Resident  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblMeasure)
   doctors = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get_With_Provider_Number())
   modUtil.LoadCombo(cmbPreferredDoctor, doctors, "wholename")
   veteran_card_types = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Veteran_Card_Types_Get())
   modUtil.LoadCombo(cmbVeteranCardTypes, veteran_card_types, "type")
   centrelink_card_types = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Centrelink_Card_Types_Get())
   modUtil.LoadCombo(cmbCentreLinkCardTypes, centrelink_card_types, "type")
   health_insurance_companies = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Health_Funds_Get())
   modUtil.LoadCombo(cmbPrivateInsuranceCompany, health_insurance_companies, "fund")
   billing_levels = modUtil.Copy_Collection_Keyed_Sequentially(modBillingDBI.Billing_Level_Get())
   modUtil.LoadCombo(cmbBIllingLevel, billing_levels, "level") 'ian's table hence the different field name
   lblMeasure.text = "  Commonwealth Seniors Health Card  "
   cmbPreferredDoctor.width = lblMeasure.Width
   cmbVeteranCardTypes.width = lblMeasure.Width
   cmbCentreLinkCardTypes.width = lblMeasure.Width
   cmbBIllingLevel.width = lblMeasure.Width
   cmbPrivateInsuranceCompany.width = lblMeasure.Width
   HBox_Medicare.width = lblMeasure.Width
   HBox_Concession.width = lblMeasure.Width
   columnview1.Columns.count = 2
   bDataChanged = False
   HBox_referral_status.Visible = modAdminDBI.Config_Get_Staff_Member("billing_show_referral_status", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff)
   EditArea_Recolour(Color.DarkGray)

End

Public Sub Form_Close()

   ParentForm_Vbox_EditArea = Null

End

Public Sub EditArea_Recolour(icolor As Integer)

   Dim HB As Hbox
   Dim lbl As Label
   Dim hctrl As Control

   For Each hctrl In Vbox_EditArea.Children
      If hctrl Is Hbox Then
         HB = hctrl
         For Each hctrl In HB.Children
            If hctrl Is Label Then
               lbl = hctrl
               lbl.Foreground = icolor
            Endif
         Next
      End If
   Next

End

Public Sub EditArea_Clear()

   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   taNextOfKin.Clear()
   Veteran_Data_Entry_Enable(False)
   Concession_Card_Enable(False)
   fk_payer_person = 0
   fk_payer_branch = 0
   payer = Null
   bExit = False

End

Public Sub Concession_Card_Enable(flag As Boolean)

   txtConcessionExpiryDate.Enabled = flag
   txtConcessionNumber.Enabled = flag
   If Not Flag Then
      txtConcessionExpiryDate.text = ""
      txtConcessionNumber.text = ""
   Endif

End

Public Sub Veteran_Data_Entry_Enable(flag As Boolean)

   txtVeteranNumber.Enabled = flag
   txtVeteranSpecificCondition.Enabled = flag
   If Not Flag Then
      txtVeteranNumber.text = ""
      txtVeteranSpecificCondition.text = ""
   Endif

End

Public Sub Display_Patient_Data(P As Collection)

   Dim doctor As Collection
   Dim x As Integer

   EditArea_Clear()
   patient = P
   bExit = True
   bDataChanged = False
   Try txtMedicareNumber.text = P!medicare_number
   Try txtMedicareReferenceNumber.text = P!medicare_ref_number
   Try txtMedicareCardExpiryDate.text = Right(Format(P!medicare_expiry_date, "dd/mm/yyyy"), 7)
   Load_Referral_Type(P!fk_patient)
   cmbVeteranCardTypes.index = cmbVeteranCardTypes.Find(P!veteran_card_type)
   If Not IsNull(P!veteran_card_type) Then
      Veteran_Data_Entry_Enable(True)
   Endif
   Try txtVeteranNumber.text = P!veteran_number
   Try txtVeteranSpecificCondition.text = P!veteran_specific_condition
   Try cmbCentreLinkCardTypes.index = cmbCentreLinkCardTypes.Find(P!concession_card_type)
   If Not IsNull(P!concession_card_type) Then
      Concession_Card_Enable(True)
      Try txtConcessionExpiryDate.text = P!concession_card_expiry_date
      Try txtConcessionNumber.text = P!concession_card_number
   Endif
   Try cmbBIllingLevel.index = cmbBIllingLevel.Find(P!billing_level)
   chkNursingHomeResident.value = P!nursing_home_resident
   Try cmbPrivateInsuranceCompany.index = cmbPrivateInsuranceCompany.Find(P!fund)
   Try txtlegacyFileNumber.text = P!pk_legacy
   If Not IsNull(P!fk_payer_person) Then
      Payer = modContactsDBI.Person_Including_Patients_Get_Using_Pk(P!fk_payer_person)
      txtPayer.text = Payer!wholename & " " & Payer_Display_Address(Payer)
      txtPayer.pos = 0
      fk_payer_person = P!fk_payer_person
   Endif
   If Not IsNull(P!fk_payer_branch) Then
      'FIXME NOT IMPLEMENTED
   Endif
   For Each doctor In doctors
      If doctor!fk_staff = P!fk_doctor Then
         cmbPreferredDoctor.index = x
         Break
      End If
      Inc x
   Next

   bExit = False

End

Private Sub Load_Referral_Type(fk_patient As Integer)

   Dim coll As Collection

   coll = modBillingDBI.Find_Referrer(fk_patient)
   If IsNull(coll) Then
      tlReferral.Foreground = Color.Red
      tlReferral.Text = "NO REFERRAL"
   Else
      tlReferral.Foreground = Color.Green
      tlReferral.Text = coll!firstname & " " & coll!surname
   Endif

End

Public Function EditArea_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   '----------------------------------------------------------
   'PURPOSE       Restrict key presses for validation purposes
   'HOW IT WORKS  see routines names
   'FIXME         Ian would do this much simpler I'm sure
   '-----------------------------------------------------------

   Select Case Last.Tag
      Case "medicare number", "medicare card reference number"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "veteran number", "concession number"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_Letters_Numbers, keycode)
      Case "age onset"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "medicare card expiry date", "concession expiry date"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case Else
         bkeyvalid = True
   End Select
   Return bKeyValid

End

Public Sub EditArea_Notify_DataChange(flag As Boolean)

   If bexit Then Return
   If sParentForm <> "FRecordVisit" Then
      ParentForm_Vbox_EditArea.padding = 1
   End If
   bDataChanged = True

End

Public Sub EditArea_TextBox_Activate()
   'User has pressed the enter key in one of the textboxes

   Select Case Last.tag
      Case "medicare number"
         txtMedicareReferenceNumber.SetFocus()
      Case "medicare card reference number"
         txtMedicareCardExpiryDate.SetFocus()
      Case "medicare card expiry date"
         cmbBIllingLevel.SetFocus()
      Case "veteran number"
         txtVeteranSpecificCondition.SetFocus()
      Case "veteran condition"
         txtFindNextOfKin.SetFocus()
      Case "Concession number"
         txtConcessionExpiryDate.SetFocus()
      Case "concession expiry date"
         cmbBIllingLevel.SetFocus()
      Case "responsible payer"
         cmbPrivateInsuranceCompany.SetFocus()
   End Select

End

Public Sub EditArea_TextBox_Keypress()

   If bExit Then Return
   bkeyvalid = EditArea_ExcludeKeys(key.code, Last.tag)
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case Key.Code
      Case Key.Down
         If columnview1.Visible And ColumnView1.count > 0 Then 'shouldn't need this, is  bug where can be showing without content FIXME.
            With columnview1
               .SetFocus()
               .Item.Selected = True
            End With
         Endif
   End Select
   EditArea_Notify_DataChange(True)

End

Public Sub EditArea_Combo_Click()

   If Bexit Then Return
   Select Case Last.tag
      Case "veteran card type"
         Select Case Last.index + 1                'the types are 1 based
            Case const.Veteran_Entitlement_None
               Veteran_Data_Entry_Enable(False)
               txtFindNextOfKin.SetFocus()
            Case const.Veteran_Entitlement_Full
               Veteran_Data_Entry_Enable(True)
               txtVeteranNumber.SetFocus()
            Case const.Veteran_Entitlement_Specific
               Veteran_Data_Entry_Enable(True)
               txtVeteranSpecificCondition.SetFocus()
         End Select
      Case "centrelink card type"
         If Last.index + 1 = const.Concession_Entitlement_None Then
            Concession_Card_Enable(False)
            txtFindNextOfKin.SetFocus()
         Else
            Concession_Card_Enable(True)
            txtConcessionNumber.SetFocus()
         Endif
      Case "private insurance company"
         cmbPreferredDoctor.SetFocus()
      Case "preferred doctor"
         txtFindNextOfKin.SetFocus()
      Case "billing level"
         If cmbBIllingLevel.text = "Bulk Bill" Then
            txtPayer.text = ""
            fk_payer_person = 0
            fk_payer_branch = 0
         Endif
   End Select
   EditArea_Notify_DataChange(True)

End

Public Sub Next_Of_Kin_Get()

End

Public Sub Next_Of_Kin_Select()

End

Public Sub EditArea_TextBox_GotFocus()

   Last.BackGround = Color.rgb(95, 255, 175)
   With columnview1
      .Visible = False
      .top = Last.parent.parent.top + Last.height
      .width = Last.width
      .left = Last.parent.left
   End With

End

Public Sub EditArea_TextBox_LostFocus()

   Last.BackGround = Color.white
   If Last.tag = "medicare number" And Trim(Last.text) <> "" Then
      bExit = True
      '   txtMedicareNumber.text = modUtil.Medicare_Number_Check(Last.text)
      bExit = False
   Endif

End

Public Sub EditArea_Combo_Keypress()

   If Key.code = Key.Return Then
      Select Case Last.tag
         Case "veteran card type"
         Case "centrelink card type"
         Case "private insurance company"
         Case "preferred doctor"
         Case "billing type"
            txtPayer.SetFocus()
      End Select
   End If

End

Public Sub EditArea_TextBox_KeyRelease()

   Select Case Last.tag
      Case "responsible payer"
         itimer_count = 0
         Timer1.Start
         Print "starting timer ", itimer_count
   End Select

End

Public Sub Timer1_Timer()

   Inc itimer_count
   Print "in timer count is ", itimer_count
   If itimer_count > 3 Then
      Responsible_Payer_Find
   Endif

End

Public Sub Responsible_Payer_Find()
   '----------------------------------------------------------------
   'Find responsible payer - at the moment can only choose a patient
   'fixme - put in for payer as branch of organisation
   '----------------------------------------------------------------

   Timer1.Stop
   If Trim(txtPayer.text) = "" Or fk_payer_person <> 0 Then Return
   columnview1.Clear()
   Payers = modContactsDBI.Person_Get(Trim(Lower(txtPayer.text)), const.contacttype_PersonsAndPatients)
   Payers.Remove("sql_in_english")
   For Each payer In Payers
      columnview1.Add(Payer!pk_view, 0)
      columnview1[payer!pk_view][0] = payer!wholename
      columnview1[payer!pk_view][1] = Payer_Display_Address(payer)
   Next
   With columnview1
      .tag = txtPayer
      .Raise
      .Visible = True
   End With

End

Public Sub Payer_Display_address(Payer As Collection) As String

   Return Trim(payer!street1 & " " & payer!street2) & " " & payer!town & " " & payer!postcode

End

Public Sub columnview1_KeyPress()

   If Key.code = Key.return Then columnview1_DblClick()

End

Public Sub columnview1_DblClick()

   Select Case Last.tag.tag
      Case "responsible payer"
         Responsible_Payer_Select()
   End Select

End

Public Sub Responsible_Payer_Select()

   columnview1.MoveCurrent
   bExit = False
   txtPayer.text = Payers[columnview1.Item.key]!wholename & " " & columnview1[columnview1.Item.key][1]
   fk_payer_person = Payers[columnview1.Item.key]!fk_person
   txtPayer.pos = 0
   columnview1.Visible = False
   bExit = False
   Print fk_payer_person

End

Public Sub EditArea_TextBox_Change()

   If bexit Then Return
   Select Case Last.tag
      Case "responsible payer" 'is only set once user selects from list, then bexit = true
         fk_payer_person = 0
         fk_payer_branch = 0
   End Select

End

Public Function Valid_Data() As Boolean
   '------------------------------------------------------
   'checks some data to see if valid returns true if ok
   'called by two forms FContactspersons and FRecordVisit
   'Both those forms have this form embedded
   'fixme add vaidating the medicare card number
   '------------------------------------------------------

   If Trim(txtMedicareNumber.text) <> "" Then
      If modUtil.Medicare_Number_Check(Trim(txtMedicareNumber.text)) = "*INVALID*" Then
         Message.Info("Invalid medicare number")
         Return
         '  Else
         '    modUtil.Medicare_Number_Format(txtMedicareNumber.text)
      Endif
   Endif
   If txtMedicareCardExpiryDate.text <> "" Then              'only validate if user has entered something
      If Not IsDate(modUtil.Medicare_Create_Expiry_date(txtMedicareCardExpiryDate.text)) Then
         txtMedicareCardExpiryDate.SetFocus()
         Return
      Endif
   Endif
   If cmbCentreLinkCardTypes.index > 0 Then 'allow none or -1
      If txtConcessionNumber.text = "" Then
         Message.info("Please supply a concession card number before saving")
         txtConcessionNumber.SetFocus()
         Return
      End If
   Endif
   If txtConcessionExpiryDate.text <> "" Then                 'only validate if user has entered something
      If Not IsDate(txtConcessionExpiryDate.text) Then
         txtConcessionExpiryDate.SetFocus()
         Return
      Endif
   Endif
   Return True

End

Public Sub EditArea_CheckBox_Click()

   If bexit Then Return
   EditArea_Notify_DataChange(True)

End

Public Sub Form_Leave()

   If bDataChanged And sParentForm <> "" Then
      FRecordVisit.Billing_Save_Defaults
   End If

End

Public Sub HBox_ResponsiblePerson_Leave()

   Timer1.Enabled = False
   Print "leaving.... timer is not enabled"

End

Public Sub HBox_ResponsiblePerson_Enter()

   Timer1.Enabled = True
   Print "entering... timer is enabled"

End
