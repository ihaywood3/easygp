' Gambas class file

' Gambas module file

' Copyright (C)2008-2016 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-------------------------------------------------------------------------------
' PURPOSE      A form to allow entry and viewing of day to day staff activities
'-------------------------------------------------------------------------------
Private currentShift As CStaffShift
Private Form_Viewer As FProgressNotesViewer
Private Form_Editor As FEditor
Private fk_staff_note As Variant
Private Embedded_In_Form As String = Me.Name
Private staff_notes_types As Collection
Private staff_notes As Collection
Private staff_notes_selected As Collection 'the current row of saved data selected
Private fk_lu_notes_type As Variant
Private day_notes As HBox[]
Private cmb As ComboBox
Private staff As Collection
Private fk_lu_urgency As Variant
Private current_status_combo As ComboBox
Private current_status_label As Label
Private current_notes_type_label As Label
Private current_staff_label As Label
Private current_pic_urgency As PictureBox
Private current_notes As TextLabel
Private current_transparent_Label As Label
Private Last_Row_Clicked As HBox
Private Form_html_viewer As FHtmlViewer

Public Sub _new()
   
   With Form_Editor = New FEditor(VBox_Editor)
      .lblHeading.Visible = False
      .Hbox_WordProcessorButtons.Visible = False   
   End With
   timer1.delay = 1000 * 120 '2 mins
   With Form_html_viewer = New FHtmlViewer(VBox_StaffNotes)
      .tbWebBrowserZoomIn.visible = True
      .tbWebBrowserZoomout.visible = True
      .tbWebBrowserPrint.Visible = True
   End With
   staff_notes_types = modUtilGUI.LoadCombo(cmbNotesType, modUtil.Copy_Collection_Keyed_Sequentially(modStaffShiftDBI.Notes_Types_Get()), "type")
   Notes_Type_Make_Menu
   staff = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get())
   modUtilGUI.LoadCombo(cmbStaff, staff, "wholename")
   lblMeasure.text = "  For Staff Member "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblMeasure) 
   VSplit1.Layout = Settings[Me.name & "/Vsplit1.Layout", modUtilGUI.VSplit([1, 8])]
   
End

Public Sub Form_KeyPress()
   
   Dim CtrlDown As Boolean
   
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
         Case Asc("=")
            Form_html_viewer.zoom_in()
            ' Zoom("zoom_in")
         Case Asc("-")
            Form_html_viewer.zoom_out() 
            '  Zoom("zoom_out")
      End Select
   End If
   
End

Public Sub Set_Embedded_In_Form(FN As String)
   
   Embedded_In_Form = FN  
   
End

Public Sub Init()
   
   modLater.Add(Me, "Shift_Create")
   If Embedded_In_Form = "FProgressNoteEditor" Then
      Vbox_Right.Reparent(Me)
      HSplit1.Visible = False 
   Endif
   
End

Public Sub Shift_Create()
   
   currentShift = New CStaffShift(modDBConnect.currentUser!fk_staff)
   Reload()
   
End

Public Sub Hb_Status_Leave()
   
   current_status_combo.Visible = False   
   With current_status_label
      .Visible = True 
      .text = current_status_combo.Text
   End With
   
End

Public Sub EditArea_Clear()
   
   Vbox_EditArea.Enabled = False 
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   cmbNotesType.Index = cmbNotesType.Find("General")
   Try fk_lu_notes_type = staff_notes_types[cmbNotesType.Index]!pk
   cmbStaff.Index = - 1
   Form_Editor.teNotes.RichText = ""
   rbUrgencyRoutine.Value = True 
   fk_lu_urgency = const.UrgencyLevelRoutine
   fk_staff_note = Null
   
End

Public Function Save() As Boolean
   '------------------------------------------------------------------------------
   'Saves another row of notes for the staff member
   '------------------------------------------------------------------------------
   ' CREATE TABLE clerical.staff_notes
   ' (
   '   pk serial NOT NULL,
   '   fk_staff_shift integer NOT NULL,
   '   notes text NOT NULL,
   '   fk_staff_destination integer,
   '   fk_lu_staff_notes_type integer NOT NULL,
   '   deleted boolean DEFAULT false,
   '   CONSTRAINT staff_notes_pkey PRIMARY KEY (pk),
   '   CONSTRAINT staff_notes_fk_lu_staff_notes_type_fkey FOREIGN KEY (fk_lu_staff_notes_type)
   '       REFERENCES clerical.lu_staff_notes_type (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT staff_notes_fk_staff_shift_fkey FOREIGN KEY (fk_staff_shift)
   '       REFERENCES clerical.staff_shifts (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '-------------------------------------------------------------------------
   
   Dim New_Note As CRow 
   Dim editor_notes As String = Form_Editor.teNotes.RichText
   
   If Form_Editor.Vbox_ConsultNotes.Padding = 0 Then Return
   If Not Notes_Valid() Then Return
   
   editor_notes = Replace$(editor_notes, "font-weight: 600", "font-weight: bold")
   editor_notes = Replace$(editor_notes, "-qt-paragraph-type:empty; margin-top:0px;", "")
   New_Note = New CRow  
   If fk_staff_note Then
      New_Note.put_Unchanged(fk_staff_note, "fk_staff_note")
   Endif 
   New_Note!fk_staff_shift = currentShift.GetPK()
   If cmbStaff.Index <> -1 Then
      New_Note!fk_staff_destination = staff[cmbStaff.index]!fk_staff
   Endif
   New_Note!notes = editor_notes
 '  New_Note!time_logged = Now()
   New_Note!time_logged = Format(Now, "yyyy-mm-dd hh:nn")
   New_Note!fk_lu_staff_notes_type = fk_lu_notes_type
   New_Note!fk_lu_urgency = fk_lu_urgency
   New_Note!completed = CBool(chkCompleted.value)
   If Trim(txtCompletionNotes.text) <> "" Then
      New_Note!completion_notes = Trim(txtCompletionNotes.text)
   Else
      New_Note!completion_notes = Null
   Endif
   New_Note.Save("clerical.staff_notes", "fk_staff_note")
   modDBConnect.CommitTrans
   Reload() 
   
End

Public Sub New_Row(row_data As Collection)
   
   Dim HB As HBox
   Dim lbl As TextLabel
   Dim lblNotesType As Label
   Dim lblStaff As Label
   Dim hline As Separator
   Dim cmbStatus As ComboBox
   Dim urgency_pic As PictureBox
   Dim HB_Status As HBox
   Dim lblStatus As Label
   Dim lblTransparent As Label
   Dim Log_date As Label
   
   If IsNull(day_notes) Then day_notes = New HBox[]
   With HB = New HBox(scrollview1) As "notes_row"
      .AutoResize = True 
      .Padding = 2
      .tag = row_data
      .Background = Color.White
   End With
   
   With urgency_pic = New PictureBox(HB) As "picUrgency"
      .height = 28
      .Width = 28
      .Alignment = Align.TopLeft
      Select Case row_data!fk_lu_urgency
         Case 1
            .Picture = Picture.Load("icons/12/green_dot.png")
         Case 2
            .Picture = Picture.Load("icons/12/amber_dot.png")
         Case 3
            .Picture = Picture.Load("icons/12/red_dot.png")
      End Select
   End With
   If Embedded_In_Form <> "FProgressNoteEditor" Then 
      With Log_date = New Label(HB)
         .text = Format(row_data!shift_date, "dd/mm/yyyy")
         .height = 28
         .width = 80 
         .Alignment = Align.TopLeft
      End With
      With lblNotesType = New Label(HB) As "lblNotesType"
         .width = 150
         .Height = 28
         .text = row_data!type
         .Alignment = Align.TopLeft
      End With
      With lblStaff = New Label(HB) As "lblStaff"
         .width = 150
         .height = 28  
         .text = row_data!staff_destination_title & " " & row_data!staff_destination_wholename
         If Trim(.text) = "" Then .text = "Anyone"
         .Alignment = Align.TopLeft
      End With
   End If   
   With lbl = New TextLabel(HB) As "lblNotes"
      .AutoResize = True 
      .Alignment = Align.TopLeft
      If Embedded_In_Form <> "FProgressNoteEditor" Then
         .width = scrollview1.width - lblNotesType.Width
      Else
         .width = scrollview1.width - urgency_pic.Width
      End If
      .text = row_data!notes 
      .Expand = True
   End With
   Hb.Height = lbl.Height
   With HB_Status = New HBox(HB) As "HBox_Status"
      .height = 28 
      .width = 100
      .Visible = False
   End With
   With lblStatus = New Label(HB_Status) As "lblStatus"
      If row_data!completed = True Then
         .text = "Completed"
      Else
         .text = "Logged"
      Endif
      .Expand = True 
      .Alignment = Align.TopLeft
      .Visible = False   
   End With
   With cmbStatus = New ComboBox(HB_Status) As "cmbStatus"
      .Add("Logged")
      .Add("Completed")
      .Border = Border.None
      .ReadOnly = True  
      .Visible = False  
      .Expand = True 
   End With
   With hline = New Separator(scrollview1)
      .height = 1
      .background = Color.DarkGray
   End With
   With lblTransparent = New Label(HB) As "lblTransparent"
      .Ignore = True   
      .Transparent = True   
      .top = 2
      .left = 2
      .width = scrollview1.Width - 2
      .Height = Hb.Height
      .Visible = True
   End With
   Wait
   
End

Public Sub lblNotes_Menu()
   
   mnuOfficeLog.Popup 
   
End

Public Sub lblNotesType_Menu()
   
   mnuOfficeLog.Children[2].Popup
   
End

Public Function Note_Label(notes As String) As TextLabel
   
   Dim lbl As TextLabel
   
   With lbl = New TextLabel(scrollview1) As "lbl"
      .AutoResize = True  
      .text = notes 
      .Border = Border.Dashed
      .Padding = 5
   End With
   Return lbl
   
End

Public Sub lblTransparent_mousedown()
   
   Try Last_Row_Clicked.Background = Color.White
   Last.Parent.background = Color.RGB(215, 232, 240) 'Color.LightBackground
   Note_Display
   Last_Row_Clicked = Last.Parent 
   
End

Public Sub lblTransparent_Menu()
   
   mnuOfficeLog.Popup
   
End

Public Sub Notes_Row_Enter()
   
   Dim HCtrl As Control
   Dim lbl As Label
   Dim cb As ComboBox
   Dim HB As HBox
   Dim TL As TextLabel
   
   '  Last.background = Color.RGB(255, 255, 223)
   staff_notes_selected = Last.tag
   
   For Each Hctrl In Last.Children  
      Print hctrl.Name
      Select Case Hctrl.Name
         Case "lblTransparent"
            current_transparent_Label = Hctrl
         Case "picUrgency"
            current_pic_urgency = Hctrl
         Case "lblNotesType"
            current_notes_type_label = Hctrl
         Case "lblStaff"
            current_staff_label = Hctrl
         Case "lblNotes"
            current_notes = hctrl
         Case "HBox_Status"
            HB = Hctrl
            For Each hctrl In HB.Children
               Select Case hctrl.Name
                  Case "lblStatus"
                     current_status_label = lbl
                  Case "cmbStatus"
                     current_status_combo = Hctrl
               End Select
            Next
      End Select
   Next
   
End

Public Sub Reload()
   
   Dim entry As Collection
   
   staff_notes = modStaffShiftDBI.Staff_Notes_Get_Outstanding()
   scrollview1.Children.Clear
   For Each entry In staff_notes
      new_row(entry)
   Next
   If Embedded_In_Form <> "FProgressNoteEditor" Then
      Form_html_viewer.WebView1.HTML = modStaffShiftDBI.Offices_Notes_Create_HTML()
   End If   
   EditArea_Clear
   
End

Public Sub VSplit1_ReSize()
   
   Settings[Me.name & "/Vsplit1.Layout"] = VSplit1.layout
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "new"
         EditArea_Clear
         Vbox_EditArea.Enabled = True  
      Case "save"
         Save()
         EditArea_Clear
      Case "reload"
         Reload
   End Select
   
End

Public Function Notes_Valid() As Boolean
   
   Return True 
   
End

Public Sub rbDegreeUrgency_Click()
   
   fk_lu_urgency = Last.tag   
   
End

Public Sub EditArea_Combo_Click()
   
   Print Last.tag
   Select Case Last.tag
      Case "notes type"
         fk_lu_notes_type = staff_notes_types[Last.index]!pk
   End Select
   
End

Public Sub lblNotes_Type_menu()
   
   mnuOfficeLog.Popup() 
   
End

Public Sub mnuOfficeLog_Click()
   
   Select Case Last.tag
      Case "edit"
         Note_Edit
      Case "change entry type"
         Note_Change_Entry_Type
      Case "change staff allocated"
         Note_Change_Staff_Allocated
      Case "mark completed"
         Note_Mark_Completed
      Case "mark logged"
      Case "delete"
         Note_Delete
      Case "print"
      Case "help"
         modUtilGUI.NotImplemented("Help for this section")
   End Select   
   
End

Public Sub Note_Mark_Completed()
   
   If modDBConnect.update("clerical.staff_notes", Null, ["pk": fk_staff_note, "completed": True]) Then
      modDBConnect.CommitTrans
      Reload 
   Endif
   
End

Public Sub Note_Edit()
   
   VBox_EditArea.Enabled = True  
   Form_Editor.teNotes.SetFocus 
   
End

Public Sub Note_Display()
   
   EditArea_Clear
   fk_staff_note = staff_notes_selected!pk_staff_notes
   cmbNotesType.Index = cmbNotesType.Find(staff_notes_selected!type)
   cmbStaff.index = cmbStaff.Find(staff_notes_selected!staff_destination_wholename)
   With Form_Editor
      .bExit = True  
      .teNotes.RichText = staff_notes_selected!notes
      .bExit = False 
   End With
   Select Case staff_notes_selected!fk_lu_urgency
      Case const.UrgencyLevelRoutine
         rbUrgencyRoutine.Value = True  
      Case const.UrgencyLevelModerate  
         rbUrgencyModerate.value = True 
      Case const.UrgencyLevelUrgent
         rbUrgencyUrgent.value = True   
   End Select
   chkCompleted.value = staff_notes_selected!completed   
   If Not IsNull(staff_notes_selected!completion_notes) Then
      txtCompletionNotes.text = staff_notes_selected!completion_notes
   Endif
   
End

Public Sub Note_Change_Entry_Type()
   
End

Public Sub Note_Change_Staff_Allocated()
   
End

Public Sub Note_Delete()
   
   If Message.Question("Are you sure you wish to delete this entry", "Yes", "No") = 2 Then Return
   If modDBConnect.update("clerical.staff_notes", Null, ["pk": fk_staff_note, "deleted": True]) Then
      modDBConnect.CommitTrans
      Reload
   Endif
   
End

' Add's types to the popup menu over a note or entry made by staff
Public Sub Notes_Type_Make_Menu()
   
   Dim mnu As Menu
   Dim type As Collection
   
   For Each type In staff_notes_types
      With mnu = New Menu(mnuOfficeLog_ChangeEntrytype) As "mnuChangeOfficeType"
         .Text = type!type
         .tag = type
         .Visible = True   
      End With
   Next
   
End

Public Sub mnuChangeOfficeType_Click()
   
   Print "You clicked", Last.tag 
   current_notes_type_label.text = Last.tag!type
   
End




Public Sub Form_Leave()
   
   Timer1.Stop
   
End

Public Sub Form_Enter()
   
   Timer1.Enabled = True
  
  
   
End

Public Sub Timer1_Timer()
   
   Reload  
   Print "reloading"
   
End
' 
' - - drop table clerical.staff_shifts cascade;
' - - drop table clerical.lu_staff_notes_type cascade;
' - - drop table clerical.staff_notes;
' Create TABLE clerical.lu_staff_notes_type
' (
'   pk serial Not Null,
'   type text Not Null,
'   CONSTRAINT lu_staff_notes_type_pkey PRIMARY KEY(pk)
' )
' With (
'   OIDS = False
' );
' 
' ALTER TABLE clerical.lu_staff_notes_type OWNER To easygp;
' GRANT Select On TABLE clerical.lu_staff_notes_type To staff;
' 
' COMMENT On TABLE clerical.lu_staff_notes_type Is 
' 'the type of entry made by the staff';
' 
' INSERT INTO clerical.lu_staff_notes_type(type)values( 'General');
' INSERT INTO clerical.lu_staff_notes_type(type)values( 'Complaint');
' INSERT INTO clerical.lu_staff_notes_type(type)values( 'Referral Needed');
' INSERT INTO clerical.lu_staff_notes_type(type)values( 'Make Phone Call');
' INSERT INTO clerical.lu_staff_notes_type(type)values( 'Scripts Needed');
' INSERT INTO clerical.lu_staff_notes_type(type)values( 'Call Patient');
' INSERT INTO clerical.lu_staff_notes_type(type)values( 'Document Needed');
' INSERT INTO clerical.lu_staff_notes_type(type)values( 'Staff Meeting Item ');
' 
' Create TABLE clerical.staff_shifts
' (
'   pk serial primary key,
'   shift_date timestamp without Time zone Not Null,
'   fk_staff integer Not Null references admin.staff(pk)
' );
' ALTER TABLE clerical.staff_shifts OWNER To easygp;
' GRANT ALL On TABLE clerical.staff_shifts To staff;
' 
' comment On table clerical.staff_shifts Is 'the record of the staff''s shift';
' 
' 
' 
' Create TABLE clerical.staff_notes
' (
'   pk serial primary key,
'   time_logged Time Not Null;
'   fk_staff_shift integer Not Null references clerical.staff_shifts(pk),
'   notes text Not Null,
'   fk_staff_destination integer Default Null,
'   fk_lu_urgency integer Not Null references common.lu_urgency(pk),
'   fk_staff_completed integer Default Null,
'   fk_lu_staff_notes_type integer Not Null references clerical.lu_staff_notes_type(pk),
'   completed boolean Default False,
'   date_completed Date Default Null,
'   completion_notes text Default Null,
'   deleted boolean Default False 
' );
' 
' ALTER TABLE clerical.staff_notes OWNER To easygp;
' GRANT ALL On TABLE clerical.staff_notes To richard;
' 
' Create Or replace view Clerical.vwStaffNotes As (
' Select staff_shifts.pk As Fk_staff_shift,
'        staff_shifts.shift_date,
'        staff_shifts.fk_staff As Fk_staff_logged,
'        vwStaff.title As Staff_logged_title,
'        vwStaff.wholename As Staff_logged_wholename,
'        staff_notes.pk As Pk_staff_notes,
'        staff_notes.time_logged,
'        staff_notes.notes,
'        staff_notes.fk_staff_destination,
'        staff_notes.fk_staff_completed,
'        staff_notes.fk_lu_urgency,
'        staff_notes.fk_lu_staff_notes_type,
'        staff_notes.deleted As Staff_note_deleted,
'        staff_notes.completed,
'        staff_notes.date_completed,
'        staff_notes.completion_notes,
'        lu_staff_notes_type.type,
'        vwStaff1.wholename As Staff_destination_wholename,
'        vwStaff1.title As Staff_destination_title,
'        vwStaff2.wholename As Staff_completed_wholename,
'        vwStaff2.title As Staff_completed_title
' From clerical.staff_shifts
' JOIN admin.vwStaff On staff_shifts.fk_staff = vwSTaff.fk_staff
' JOIN clerical.staff_notes On staff_notes.fk_staff_shift = staff_shifts.pk
' JOIN common.lu_urgency On staff_notes.fk_lu_urgency = lu_urgency.pk
' LEFT JOIN admin.vwStaff As VwStaff1 On staff_notes.fk_staff_destination = vwStaff1.fk_staff
' LEFT JOIN admin.vwStaff As VwStaff2 On staff_notes.fk_staff_completed = vwStaff2.fk_staff
' JOIN clerical.lu_staff_notes_type On lu_staff_notes_type.pk = staff_notes.fk_lu_staff_notes_type)
' ;
' 
' ALTER TABLE clerical.vwStaffNotes OWNER To easygp;
' GRANT Select On TABLE clerical.vwStaffNotes To staff;
' 
' ALTER TABLE clerical.vwStaffNotes OWNER To easygp;
' GRANT Select On TABLE clerical.vwStaffNotes To staff;

'- - added staff status To the admin.vwStaff
' Create Or REPLACE VIEW admin.vwstaff As 
'  Select roles.role,
'     staff.fk_person,
'     staff.logon_name,
'     staff.fk_role,
'     staff.pk,
'     staff.pk As Fk_staff,
'     persons.firstname,
'     persons.surname,
'     (persons.firstname || ' '::text) || persons.surname AS wholename,
'     persons.salutation,
'     persons.fk_title,
'     lu_title.title,
'     staff.qualifications,
'     persons.surname_normalised,
'     employees_numbers.provider_number,
'     data_numbers_persons.prescriber_number,
'     employees_numbers.australian_business_number,
'     data_numbers_persons.hpii,
'     staff.fk_status,
'     lu_employee_status.status
'    From admin.staff staff
'      JOIN admin.lu_staff_roles roles On staff.fk_role = roles.pk
'      JOIN contacts.data_persons persons On staff.fk_person = persons.pk
'      JOIN contacts.lu_title On persons.fk_title = lu_title.pk
'      LEFT JOIN contacts.data_numbers_persons On staff.fk_person = data_numbers_persons.fk_person
'      LEFT JOIN contacts.data_numbers employees_numbers On staff.fk_person = employees_numbers.fk_person
'      JOIN contacts.lu_employee_status On staff.fk_status = lu_employee_status.pk;
'      
' ALTER TABLE admin.vwstaff OWNER To easygp;
' GRANT ALL On TABLE admin.vwstaff To staff;
' 
' update db.lu_version set lu_minor = 484;
