' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'---------------------------------------------------------------------------
'PURPOSE          A form to display and enter appointment for a single day
'                 This form is used by:
'                 FMain for  a doctor - viewed on the side panel
'                 The clerical appointments book FMakeAppointments
'HOW THIS WORKS   As the gridrows is a collection[] (array) adding/deleting
'                 from the grid automatically maintains the array index 0-n
'TODO             Implement quite a few of the popup menu options
'                 load appointment grid time intervals from session setup
'                 set focus on next appointment after multiple slot selected
'                 set focus on txtAppointment when fit in chosen from menu
'                 decide ?remove the notes column
'KNOWN BUGS       There are a few .... email me at rterry@internode.on.net
'                 the txtAppointment sometimes mysteriously ends up on the
'                 next days grid .... not fatal
'                 Cannot cancel the multi-patient select form
' LIMITATIONS     Cannot insert a Fit in-between long consultations
'                 Currently only works at 10 minute intervals
'                 where  date >= start date and  <= end date pass collection to each daylist instance - does this appt apply to my day.
'--------------------------------------------------------------------------------------------------------------------------------------

Private $hEditor As Object
Private bexit As Boolean
Public OnRow As Integer                            'current row the user has selected do not make this private
Public GridRows As Collection[]                    'A collection array to allow .delete and .add to re-order the collecton index automatically
Private name_hidden As Boolean
Private iTop As Integer                            'top of txtAppointments for positioning over the grid
Private iFirstRow As Integer                       'first row selected in the grid
Private iLastRow As Integer                        'last row selected in the grid
Private irowheight As Integer = 18                 'default row height
Private iSlotCount As Integer                      'number of gridrows occupied by the appointment
Private bFoundFirst As Integer                     'If True have found the first selected row of an appointment
Private appointment_icons As Collection            'passed from FMakeAppointments (saves loading in every day occurrence)
Private fk_lu_appointment_icon As Integer          'key to clerical.lu_appointment_icons
Private Const appointment_made As Integer = 1      'to have the code make sense
Private Const arrived_and_waiting As Integer = 2
Private Const in_consulting_room As Integer = 3
Private Const patient_departed As Integer = 4
Private Const emergency As Integer = 5
Private Const fitin As Integer = 6
Private fk_lu_appointment_status As Integer        '1-6 see clerical.lu_appointment_status e.g patient arrived as above
Private Appointment_Status_Colors As String[]      'colors to use for various fk_lookup_appointment_status
Private staff_member As Collection                 'staff member to whom this day-list applies
Private appointment_interval As Integer            'the time interval in minutes for this user for this day FIXME get from backend
Private fk_clinic As Integer                       'clinic where the appointments are being made for
Private Appointments As Collection                 'A Collection of the days appointments
Private appointment As Collection                  'A single appointment
Private appointment_date As Date                   'The data above this grid
Public patient As Collection                       'The patient
Public form_select As FPatientsSelect
Private bKeyValid As Boolean                       'if true the keypress is valid
Private bMoveToNextAvailableAppointment As Boolean 'if true after a save the next vacant appt slot is found
Private WeeksAppointments As Collection
'Private watcher As DatabaseWatcher

Public Sub WeeksAppointments_Set(wa As Collection)

   WeeksAppointments = wa

End

Public Sub Init(sm As Collection, app_date As Date, clinic_key As Integer, icons As Collection, wa As Collection, Optional nh As Boolean = False)
   '------------------------------------------------------------------
   'initialise the appointment module from  FMakeAppointments
   'sm= the staff member
   'app-date = the date of this apointment grid
   'icons= collection from backend of icons for the grid eg home visit
   'later grabbed from the backend
   '------------------------------------------------------------------
   name_hidden = nh
   WeeksAppointments = wa
   staff_member = sm
   fk_clinic = clinic_key
   Appointment_Date = app_date
   modDBConnect.Register_Listener("booking", Me)
   appointment_icons = icons
   txtAppointment.height = irowheight                                    'grid rows = same height as our textbox
   Me.title = UCase(staff_member!title & " " & staff_member!wholename)   'will appear on the tab
   lblDate.text = Format(appointment_date, gb.LongDate)                  'Wednesay 18th September
   With gridview1                                                        'construct the basic grid  for appointments
      .columns.count = 2
      .columns[0].width = 22                                             'col0=icon
   End With
   appointment_interval = 10                                             'fix me get me from backend (when done)
   Appointment_Status_Colors = New String[6]                             'don't use 0 member
   Appointment_Status_Colors[appointment_made] = Color.Black
   Appointment_Status_Colors[arrived_and_waiting] = Color.Blue
   Appointment_Status_Colors[in_consulting_room] = Color.DarkRed
   Appointment_Status_Colors[patient_departed] = Color.Gray
   Appointment_Status_Colors[emergency] = Color.Red
   patient = Null
   Reload_Data()
End

Private Sub Reload_Data()

   fk_lu_appointment_status = 1                                         'default to normal appointment length
   fk_lu_appointment_icon = 0
   appointment_interval = 10
   GridRows_Init(Time(8, 30, 0), Time(18, 0, 0), appointment_interval)  'fill empty collection with times
   GridRows_Update()                                                 'update the underlying collection of data
   Gridview1_Refresh()

End

Public Sub Form_Close()

   modDBConnect.Unregister_Listener("booking", Me)

End

Public Sub Notify(its_us As Boolean, param As String)

   Dim s As String[]
   Dim param_day As Integer
   Dim param_month As Integer
   Dim param_year As Integer
   Dim param_fk_clinic As Integer
   Dim param_fk_staff As Integer
   Dim param_date As Date

   s = Split(param, " ")
   If s.Length <> 5 Then
      Log.ErrorMsg("Aaargh! FDayList got an invalid param string: " & param)
      Return
   Endif
   param_day = CInt(s[0])
   param_month = CInt(s[1])
   param_year = CInt(s[2])
   param_fk_clinic = CInt(s[3])
   param_fk_staff = CInt(s[4])
   If param_fk_clinic <> fk_clinic Then Return
   If param_fk_staff <> staff_member!fk_staff Then Return
   If param_day <> Day(Appointment_Date) Then Return
   If param_month <> Month(Appointment_Date) Then Return
   If param_year <> Year(Appointment_Date) Then Return
   Reload()

End

Private Function Get_Name(appt As Collection) As String
   
  If name_hidden Then
     Return Replace(appt!title & " " & Left$(appt!firstname, 1) & " " & Left$(appt!surname) & " [" & Format(appt!birthdate, "dd/mm/yyyy") & "] ", "Unknown", "")
  Else
    Return Replace(appt!wholename & " [" & Format(appt!birthdate, "dd/mm/yyyy") & "] ", "Unknown", "")
  End If 
   
End

Public Sub SetNameHidden(nh As Boolean)
   
  name_hidden = nh
  Reload_Data()
  
End



Public Sub Form_KeyPress()

   Dim CtrlDown As Boolean
   Dim FnDown As Boolean
   Dim altDown As Boolean

   If Key.code = Key.F9 Then
      FMakeAppointments.Reload()
      Return
   Endif
   Try CtrlDown = Key.Control
   Try altDown = Key.alt
   If CtrlDown And altDown Then
      ' Select Case Key.Code
      '   Case 66, Asc("B")
      '    fk_lu_appointment_icon = 2 'fixme should not be hard coded
      '   Case 73, 105 'i/I
      '     fk_lu_appointment_icon = 7  'fixme should not be hard coded
      ' End Select
      ' Appointment_Update()
      ' Stop Event
   Endif
   If CtrlDown Then
      bExit = True
      '-------------------------------------------------------------
      'change grid foreground colours according to control key codes
      '-------------------------------------------------------------
      Select Case Key.code
         Case 87, 119 'Asc("w") for some reason Asc("w") on my machine gives 119
            fk_lu_appointment_status = arrived_and_waiting
            gridrows[onrow]!fk_lu_appointment_status = arrived_and_waiting
            bMoveToNextAvailableAppointment = False
            Appointment_Update(False)  'False flag = don't check if appt slot taken
         Case 71, 103 'Asc("g")
            fk_lu_appointment_status = patient_departed
            gridrows[onrow]!fk_lu_appointment_status = patient_departed
            bMoveToNextAvailableAppointment = False
            Appointment_Update(False)  'False flag = don't check if appt slot taken
         Case 78, 110 ' Asc("n")                                     'n=normal appointment made
            fk_lu_appointment_status = appointment_made
            gridrows[onrow]!fk_lu_appointment_status = appointment_made
            bMoveToNextAvailableAppointment = False
            Appointment_Update(False)  'False flag = don't check if appt slot taken
         Case 73, 105 ' Asc("i")                          'i=in consulting room
            fk_lu_appointment_status = in_consulting_room
            gridrows[onrow]!fk_lu_appointment_status = in_consulting_room
            bMoveToNextAvailableAppointment = False
            Appointment_Update(False)  'False flag = don't check if appt slot taken
         Case 69, 101 'Asc("e")
            Emergency_Insert()
         Case 70, 102 'Asc("f")
            Appointment_Add_Fit()
         Case 79, 111
            fk_lu_appointment_status = appointment_made
      End Select
      Stop Event
   End If
   bExit = False

End

Public Sub GridRows_Init(starttime As Date, EndTime As Date, appointment_interval As Integer)
   '---------------------------------------------------------------
   'Using pre-defined start and end times and appointment intervals
   'FIX ME
   'create a collection of grid rows with nothing but the time
   '---------------------------------------------------------------

   Dim ihour As Integer = Hour(starttime)
   Dim iminute As Integer = Minute(starttime)
   Dim x As Integer
   Dim row_key As Collection
   Dim griddata As Collection

   gridrows = New Collection[0]
   Do Until x = -1
      griddata = New Collection
      griddata!time = Format(Time(ihour, iminute, 0), "hh:nn:AM/PM")
      ' griddata!time = Format(Time(ihour, iminute, 0), "hh:nn")
      griddata!slots = 1
      gridrows.add(griddata, x)
      iminute += appointment_interval
      If iminute = 60 Then
         Inc ihour
         iminute = 0
      End If
      If ihour = Hour(EndTime) Then
         If iminute > Minute(Endtime) Then
            Break
         End If
      Endif
      Inc x
   Loop

End

Public Sub Reload()
   '----------------------------------------------------------
   'Get any existing appointments for the day from the backend
   'Merge these with the initialised gridrows collection
   'and fill gridview1 with the appointments.
   'fixme the init
   '----------------------------------------------------------
   WeeksAppointments = Null
   Reload_Data()

End

Public Sub Appointments_Refresh()

   Appointments = modAppointmentsDBI.Appointments_GetDay(appointment_date, staff_member!fk_staff, fk_clinic)
   WeeksAppointments = Null
   
End




Public Sub GridRows_Update()
   '----------------------------------------------
   'Update the contents of the gridrows collection
   '----------------------------------------------

   If IsNull(WeeksAppointments) Then
      Appointments = modAppointmentsDBI.Appointments_GetDay(appointment_date, staff_member!fk_staff, fk_clinic)
   Else
      Appointments = modUtil.Copy_Collection(WeeksAppointments)
   End If
   GridRows_Process_Data()
End

Private Sub GridRows_Process_Data()
' -------------------------------------------
' ' do the update without reloading from the backend
' -----------------------------------------------------
   Dim NewRows As New Collection
   Dim i As Integer
   Dim x As Integer
   Dim sTime As String
   Dim sArray As String[]
   Dim duration As Integer
   Dim sEndTime As Date
   Dim sBeginTime As String
   Dim slots As Integer
   Dim oldRowCount As Integer
   Dim lastAppointment As Collection
   Dim FitIn As Collection
   Dim find_time As Date

   For Each appointment In appointments
      If Format(appointment!begin, "dd/mm/yyyy") = Format(appointment_date, "dd/mm/yyyy") Then
         '-------------------------------------------------------------
         'Duration can be in multiples of the days appointment_interval
         'the time off appointmen is the key to the gridrows collection
         '-------------------------------------------------------------
         sTime = Format(appointment!begin, "hh:nn:AM/PM")                      ' e.g 10:20 gridrows key
         ' sTime = Format(appointment!begin, "hh:nn")
         duration = Val(Split(appointment!duration, ":")[1]) + Val(Split(appointment!duration, ":")[0]) * 60          ' e.g 10, 20, 30, 50, 60, 70 .... etc!
         Select Case duration
            Case 1
               'do nothing but please don't remove this or scews things up
            Case 10
               '----------------------------------------------------------------
               'this is a standard appointment length - will have only 1 slot
               'i.e in this fixed 10 minute interval FIXME MAKE ME CONFIGURABLE
               'this appointment is for 10 minutes only
               '----------------------------------------------------------------
               For i = 0 To GridRows.Count - 1

                  If Not IsNull(gridrows[i]) Then    'may have been merged so i is missing
                     If gridrows[i]!time = stime Then
                        If Not IsNull(appointment!fk_patient) Then
                           gridrows[i]!name = Get_Name(appointment)
                        Else
                           gridrows[i]!name = appointment!notes
                           gridrows[i]!notes = appointment!notes
                        End If
                        gridrows[i]!pk_appointment = appointment!pk
                        gridrows[i]!fk_patient = appointment!fk_patient
                        gridrows[i]!fk_lu_appointment_icon = appointment!fk_lu_appointment_icon
                        gridrows[i]!fk_lu_appointment_status = appointment!fk_lu_appointment_status
                        Try gridrows[i]!picture = Picture.Load(appointment_icons[appointment!fk_lu_appointment_icon]!icon_path) 'most often there is no icon
                     Endif
                  End If
               Next
            Case Else
               '---------------------------------------
               'duration longer than 1 appointment slot
               '---------------------------------------
               sBeginTime = Format(appointment!begin, "hh:nn:AM/PM")
               sEndTime = DateAdd(appointment!begin, gb.minute, duration)        ' work out the end time
               sTime = sTime & "-" & Format(sEndTime, "hh:nn:AM/PM")              ' key becomes eg 10-20:10-30 fixme more complex than this eg 10:50-11,20
               For i = 0 To GridRows.Count - 1
                  If Not IsNull(gridrows[i]) Then
                     If gridrows[i]!time = sBeginTime Then
                        slots = duration / appointment_interval
                        gridrows[i]!time = sTime
                        If IsNull(appointment!fk_patient) Then
                           gridrows[i]!name = appointment!notes
                        Else
                           gridrows[i]!name = Get_Name(appointment) 'if title unknown don't show this
                        Endif
                        gridrows[i]!slots = slots
                        gridrows[i]!pk_appointment = appointment!pk
                        gridrows[i]!fk_patient = appointment!fk_patient
                        gridrows[i]!fk_lu_appointment_icon = appointment!fk_lu_appointment_icon
                        gridrows[i]!fk_lu_appointment_status = appointment!fk_lu_appointment_status
                        Try gridrows[i]!picture = Picture.Load(appointment_icons[appointment!fk_lu_appointment_icon]!icon_path) 'most often there is no icon
                        '---------------------------------------------------------------------------------------------
                        'Now the 'virgin' grid has time slots all the same - each 10 minutes
                        'now, we have 'consumed' extra slots, so remove the gridrow corresponding to those extra slots
                        'as gridrows is a collection[] array, this automatically re-orders the index 0-n
                        'We don't remove the next say 2 slots if it was a double appointment, but the same slot twice
                        'reason for this is the Gridrows.Remove(n) re-orders the collection to contain 1 less every
                        'time
                        '---------------------------------------------------------------------------------------------
                        For x = 1 To slots - 1
                           gridrows.Remove(i + 1)  'important do not change this.
                        Next
                        Break
                     End If
                  End If
               Next
         End Select
         Inc x
         'gridrows[i]!fk_patient = appointment!fk_patient
      End If
   Next
   '-------------------
   'now add the fit-ins
   '-------------------
   For Each appointment In appointments
      If Format(appointment!begin, "dd/mm/yyyy") = Format(appointment_date, "dd/mm/yyyy") Then

         sTime = Format(appointment!begin, "hh:nn:AM/PM")                       ' e.g 11:00:AM
         duration = Val(Split(appointment!duration, ":")[1])             ' e.g 10, 20, 30
         If duration = 1 Then                                            ' e,g 11:01
            find_time = Time(Hour(appointment!begin), Minute(appointment!begin) - 1, 0)
            For i = 0 To gridrows.count - 1
               If gridrows[i]!time = Format(find_time, "hh:nn:AM/PM") Then
                  fitin = New Collection
                  fitin!time = sTime
                  fitin!slots = 1
                  Try fitin!name = Get_Name(appointment)
                  If Error Then
                     fitin!name = appointment!notes
                  Endif
                  fitin!pk_appointment = appointment!pk
                  fitin!fk_patient = appointment!fk_patient
                  fitin!fk_lu_appointment_icon = appointment!fk_lu_appointment_icon
                  fitin!fk_lu_appointment_status = appointment!fk_lu_appointment_status
                  fitin!is_fitin = True
                  gridrows.add(fitin, i + 1)
                  Try gridrows[i + 1]!picture = Picture.Load(appointment_icons[appointment!fk_lu_appointment_icon]!icon_path) 'most often there is no icon
                  Break
               Endif
            Next
         Endif
      End If
   Next

End

Public Sub Gridview1_Refresh()
   '-------------------------------------------------------------------------
   'Using the underlying collection of appointment times to re-build the grid
   'i.e what the user sees
   '     8:30 AM
   '          40
   '          50
   '     9:00 AM
   '          10
   '          20
   '          30
   '          40
   '          50
   '    10:00 AM   etc
   '-------------------------------------------------------------------------

   Dim i As Integer
   Dim sTimes As String[]
   Dim sTime As String
   Dim iMin As Integer
   Dim iHour As Integer
   Dim sAM_PM As String
   Dim appt_hour_min_am_pm As String[]                                         'e.g "09:10:AM" will be split to  appt_hour_min_am_pm[0]="09" etc
   Dim x As Integer
   Dim sDisplayTime As String                                                  'time appearing on the grayed out left side 'header'

   Gridview1.Clear()                                                           'clear the grid

   Gridview1.Rows.count = gridrows.count                                       'set actual number of rows in the grid <> gridrows_init()
   For i = 0 To gridrows.count - 1
      Gridview1.Rows[i].height = gridrows[i]!slots * irowheight                'will vary according to length of appt times
      appt_hour_min_am_pm = Split(Split(gridrows[i]!time, "-")[0], ":")        'hh:nn:am/pm +/- "-" hh:nn:am/pm > hh:nn:am/pm ie the start time
      imin = Val(appt_hour_min_am_pm[1])                                       'imin = minute currently at
      ihour = Val(appt_hour_min_am_pm[0])
      sAM_PM = appt_hour_min_am_pm[2]
      If appt_hour_min_am_pm[1] = "00" Or i = 0 Then                           'if first on the grid or 'on the hour'
         sDisplayTime = Split(gridrows[i]!time, "-")[0]                       ' show the full time eg 09:00 AM
      Else
         sDisplayTime = Format(appt_hour_min_am_pm[1], "############")        'otherwise show only the minutes
      End If
      If gridrows[i]!slots <> 1 Then                                           'if eg starts at 09:00 and two slots

         For x = 1 To gridrows[i]!slots - 1                                    'add the minutes down the column as per above
            imin += 10
            If imin = 60 Then
               imin = 0
               Inc ihour
               If iHour = 13 Then
                  ihour = 1
               End If
               sDisplayTime &= "\n" & Format(ihour, "0#") & ":" & Format(imin, "0#") & ":" & sAM_PM
            Else
               sDisplayTime &= "\n" & Format(Str(imin), "############")
            End If
         Next
      Endif
      gridview1.rows[i].text = sDisplayTime                                       'set the left side grayed out vertical oriented header to the time
      Gridview1[i, 0].Alignment = Align.Center                                    'column with the picture in it
      Gridview1[i, 0].picture = gridrows[i]!picture                               'put in picture if it exists
      Gridview1[i, 1].text = gridrows[i]!name                                     'next column put in the name of patient or message
      Try Gridview1[i, 1].Foreground = Appointment_Status_Colors[gridrows[i]!fk_lu_appointment_status]
      If gridrows[i]!fk_lu_appointment_status = emergency Then                    'show an emergency slot in yellow
         Gridview1[i, 1].Background = Color.Yellow
         Gridview1[i, 1].text = "RESERVED FOR EMERGENCY"
      Else If Not IsNull(gridrows[i]!is_fitin) Then                               'of fit-in cyan
         If gridrows[i]!fk_lu_appointment_status <> patient_departed Then
            Gridview1[i, 1].Background = Color.cyan
            Gridview1[i, 0].text = "FIT"
         Endif

      Else
         If IsNull(gridrows[i]!fk_patient) And gridrows[i]!name <> "" Then
            Gridview1[i, 1].Background = Color.RGB(238, 255, 255)
         End If
      End If
   Next

End

Public Sub Next_Daylist(i As Integer) ' (d As Date)

   Dim Obj As Object
   Dim x As Integer
   Dim F As FDayList

   Return
   F = FMakeAppointments.Get_DayLists()[Min(Me.tag + 1, 4)]
   With F
      .OnRow = OnRow
      .Gridview1_Select()
      .Gridview1.SetFocus()
   End With

End

Public Sub mnuAppointments_Click()
   '------------------------------------------------------
   'User has clicked on one of the apointment menu options
   'Default to checking the apppointment slot is not used
   '------------------------------------------------------

   Dim bCheckSlotTaken As Boolean = True

   Select Case Last.tag
      Case "delete"
         Appointment_Delete()
         Return
      Case "no icon"
         gridrows[onrow]!fk_lu_appointment_icon = 0
      Case "in waiting room"
         fk_lu_appointment_status = arrived_and_waiting
         bCheckSlotTaken = False
      Case "in consulting room"
         fk_lu_appointment_status = in_consulting_room
         bCheckSlotTaken = False
      Case "patient gone"
         fk_lu_appointment_status = patient_departed
         bCheckSlotTaken = False
      Case "help"
         modUtil.NotImplemented("Sorry, viewing help is not implemented")
         Return
      Case "emergency"
         If Not IsNull(gridrows[onrow]!fk_patient) Then
            Message.title = "Delete existing appointment"
            If Message.Warning("Existing patient appointment:" & gridrows[onrow]!name & "\n\nReplace with an emergency slot?", "Yes", "No") = 2 Then Return
         Endif
         fk_lu_appointment_status = emergency
      Case "add fit"
         Appointment_Add_Fit()
         Return
      Case Else
         If IsNumber(Last.tag) Then gridrows[onrow]!fk_lu_appointment_icon = Val(Last.tag)
         bCheckSlotTaken = False
   End Select
   Save(bCheckSlotTaken)

End

Public Sub Emergency_Insert()

   Dim iLastRowOn As Integer

   iLastRowOn = onrow
   If Not IsNull(gridrows[onrow]!fk_patient) Then
      Message.title = "Delete existing appointment"
      If Message.Warning("Existing patient appointment:" & gridrows[onrow]!name & "\n\nReplace with an emergency slot?", "Yes", "No") = 2 Then Return
   Endif
   fk_lu_appointment_status = emergency
   Save()

End

Public Function Appointment_Format(h As Integer, m As Integer, am_pm As String) As String

   Return Format(h, "0#") & ":" & Format(m, "0#") & ":" & am_pm

End

Public Sub Appointment_Add_Fit()
   '-------------------------------------------------------------
   'Inserts a 'fit in' appointment after the previous appointment
   'FIXME dosn't handle inserting a fit around long appointments
   '-------------------------------------------------------------

   Dim GridData As New Collection
   Dim iHour As Integer
   Dim iMinute As Integer
   Dim ht As String[]
   Dim fittime As String
   Dim x As Integer

   If InStr(gridrows[onrow]!time, "-") Then
      ht = Split(Split(gridrows[onrow]!time, "-")[1], ":")
   Else
      ht = Split(gridrows[onrow]!time, ":")  'eg 09:10:AM becomes ht[0]=09, [1]=00,[2]=AM
   End If
   iHour = ht[0]
   iMinute = Val(ht[1]) + 1
   If iminute = 60 Then
      Inc iHour
      If iHour = 12 And ht[2] = "AM" Then
         ht[2] = "PM"
      Else
         '?? what happens after midnight
      Endif
      iminute = 1
   End If

   '----------------------------------------------------------------------
   'now does this time exist aready?, pretty rough/ready but sort of works
   'bombs if the timeslots contain long consults.
   '----------------------------------------------------------------------
   For x = onrow + 1 To gridrows.Count - 1
      If gridrows[x]!time = Appointment_Format(iHour, iminute, ht[2]) Then 'is fitin slot already taken?
         Inc iminute                                                       'yes, increment minute
         If iminute = 9 Then
            iminute = 1
            Inc iHour
         Endif
      Else
         Break
      Endif
   Next
   griddata!time = Appointment_Format(iHour, iminute, ht[2])
   griddata!slots = 1
   griddata!is_fitin = True
   griddata!duration = 1
   gridrows.add(griddata, x)
   Gridview1_Refresh()                       'rebuild the grid using the expanded collection
   gridview1.UnSelectAll()                   'unselect all rows
   gridview1.row = x                         'this will be the row we are now at
   gridview1.Select(x, 1)                    'set's onrow
   Wait
   Gridview1_DblClick()                      'enter edit mode to find patient

End

Public Sub Gridview1_Keypress()
   '------------------------------------------------------------------------------
   'Keypress detected coming from the grid - ie using typing whilst grid has focus
   '------------------------------------------------------------------------------

   If bExit Then Return
   If modUtil.AllowKeys(const.AllowKeys_AtoZ_UpDown_Arrows, Key.code) = False Then
      Stop Event
      Return
   End If
   If Key.code = Key.right Then
      Next_Daylist(1) '(DateAdd(appointment_Date, gb.day, 1))
      Return
   Endif
   If Key.code = Key.Left Then
      Next_Daylist(-1) '(DateAdd(appointment_Date, gb.day, -1))
      Return
   Endif
   If Key.code = Key.delete Then
      Appointment_Delete()
      Return
   Endif
   If Key.code = Key.up Or Key.code = Key.down Then
      gridview1.SetFocus()
      Return
   Endif
   If txtAppointment.text = "" Then
      '-----------------------------------------------------------
      'user has just started typing whilst the gridview1 has focus
      '-----------------------------------------------------------
      Try txtAppointment.text = Chr(Key.code)      'if valid a-z and put it into the txtAppointment
      GridView1_DblClick()                         'and enter edit mode to allow typing/searching
   Else
      '-------------------------------------------------------------------
      'user just has hit <enter> key = assume they want to enter edit mode
      '-------------------------------------------------------------------
      If Key.code = Key.return Then
         Try txtAppointment.text = Chr(Key.code)
         GridView1_DblClick()
      End If
   End If

End

Public Sub Gridview1_DblClick()
   '-------------------------------------------------------------------
   'User has double clicked on an appointment slot - enter edit mode
   'figure out which row is selected and if multi-selected, then
   'move the editing textbox txtAppointment to align to proper place
   'overlying this appointment slot.
   'fk_lu_apointment_type defaults in backend to 1 = normal appointment
   'meaning not a fit in/emergency slot
   '-------------------------------------------------------------------

   Dim i As Integer
   Dim x As Integer
   Dim bFoundSelected As Boolean

   patient = Null
   bExit = True
   txtFindPatient.text = ""
   bExit = False
   bFoundFirst = False
   For i = 0 To Gridview1.rows.count - 1           'figure out which rows are selected
      x = x + Gridview1.Rows[i].Height
      If Gridview1.Rows[i].Selected = True Then
         bFoundSelected = True
         If bFoundFirst = False Then
            bFoundFirst = True
            iFirstRow = i
            itop = x - Gridview1.Rows[i].height
         End If
         iLastRow = i
      End If
   Next
   If bFoundSelected Then
      onrow = iFirstRow
      iSlotCount = iLastRow - iFirstRow + 1
      Show_EditingTextBox()
   End If

End

Public Sub Gridview1_Select()
   '----------------------------------------------------
   'user has clicked on or otherwise selected a grid row
   'remove and clear the appointment textbox
   '----------------------------------------------------

   txtAppointment.visible = False
   txtAppointment.text = ""
   onrow = gridview1.row
   Try fk_lu_appointment_status = gridrows[onrow]!fk_lu_appointment_status

End

Public Sub Gridview1_Menu()
   '-------------------------------------------------------------------
   'User has right mouse clicked on the name column, show them the menu
   '-------------------------------------------------------------------

   If Gridview1.Row = -1 Then Return
   fk_lu_appointment_icon = 0
   If Gridview1[Gridview1.Row, 1].text = "" Then
      'fix me disable stuff
   End If
   onrow = gridview1.row
   iFirstRow = onrow
   If Not IsNull(gridrows[Gridview1.Row]!fk_patient) Then
      mnuAppointments_PatientWaiting.Enabled = True
      mnuAppointments_Consulting.Enabled = True
      mnuAppointments_Gone.Enabled = True
      mnuAppointments_Type.Enabled = True
      mnuAppointments.Popup()
   Else
      mnuAppointments_PatientWaiting.Enabled = False
      mnuAppointments_Consulting.Enabled = False
      mnuAppointments_Gone.Enabled = False
      mnuAppointments_Type.Enabled = False
      mnuAppointments.Popup()
   End If

End

Public Sub Appointment_Update(bCheckSlotTaken As Boolean)

   Save(bCheckSlotTaken)

End

Public Sub Appointment_Delete()
   '-------------------------------------------------------------------------
   'Deletes an appointment, as deleted appointment could cover multiple slots
   'initialise the gridrows collection again before rebuilding
   '-------------------------------------------------------------------------

   Dim appointment As New CRow
   Dim sMsg As String
   Dim iDeletedRow As Integer

   If onrow = -1 Then Return
   iDeletedRow = onrow
   If Not IsNull(gridrows[onrow]!pk_appointment) Then
      appointment!pk = gridrows[onrow]!pk_appointment
      Message.Title = "Delete an appointment"
      If Not IsNull(gridrows[onrow]!fk_patient)
         smsg = "Existing appointment for " & gridrows[onrow]!name & "\n\n"
      End If
      sMsg &= "Are you sure you wish to delete this appointment?"
      If Message.Warning(sMsg, "Yes", "No") = 2 Then Return
      modAppointmentsDBI.Appointment_Delete(appointment)
      modDBConnect.CommitTrans()
      Reload()
      gridview1.row = iDeletedRow
   Endif

End

Public Sub Save(Optional bCheckSlotTaken As Boolean = True)

   '--------------------------------------------------------------
   ' Saves an appointment slot
   ' if bCheckSlotTaken is True the the the save will check
   ' the appt slot is not already taken.d
   ' pk bigserial NOT NULL,
   ' fk_patient integer but can be null if a comment
   ' fk_staff integer NOT NULL,
   ' "begin" timestamp without time zone,
   ' duration interval,
   ' notes text,
   ' fk_staff_booked integer NOT NULL,
   ' fk_clinic timestamp without time zone NOT NULL DEFAULT now()
   '-------------------------------------------------------------

   Dim appointment As New CRow
   Dim starttime As Date
   Dim endtime As Date
   Dim Appointment_times As String[]
   Dim appointment_length As String[]
   Dim iStatus As Integer
   Dim start_hour_as_24hrtime As Integer
   Dim end_hour_as_24hrtime As Integer
   Dim start_time As String[]
   Dim end_time As String[]
   Dim currow As Integer = onrow

   If onrow = -1 Then
      Return          'should never happen but there are bugs
   End If
   Try appointment!fk_patient = patient!fk_patient
   If Error Then
      appointment!fk_patient = gridrows[onrow]!fk_patient
   Endif
   appointment!fk_staff = staff_member!fk_staff
   Appointment_times = Split(gridrows[onrow]!time, "-") 'gives eg Appointment_times[0]=12:10:AM,   Appointment_times[1]=01:00:PM
   Try start_time = Split(Appointment_times[0], ":")
   Try end_time = Split(Appointment_times[1], ":")
   '-------------------------------------------------------
   'multiple appointment slots, convert back to 24hour time
   '-------------------------------------------------------
   If Appointment_times.count > 1 Then
      '-------------------------------------------------------------
      'first convert the start appointment time to 24hour date/time
      '-------------------------------------------------------------
      If InStr(Appointment_times[0], "AM") Then                      'start time in morning, keep hours
         start_hour_as_24hrtime = Val(start_time[0])
      Else
         If Val(start_time[0]) < 12 Then
            start_hour_as_24hrtime = start_time[0] + 12                'convert to 24 hour time if in afternoon
         Else
            start_hour_as_24hrtime = Val(start_time[0])
         End If
      Endif
      starttime = Date(Year(appointment_date), Month(appointment_date), Day(appointment_date), start_hour_as_24hrtime, Val(start_time[1]))
      appointment!begin = Format$(starttime, "dd/mm/yyyy hh:nn")
      '-------------------------------------------------------------
      'second convert the end appointment time to 24hour date/time
      '-------------------------------------------------------------
      If InStr(Appointment_times[1], "AM") Then                      'start time in morning, keep hours
         end_hour_as_24hrtime = Val(end_time[0])
      Else
         If Val(end_time[0]) < 12 Then
            end_hour_as_24hrtime = end_time[0] + 12                'convert to 24 hour time if in afternoon
         Else
            end_hour_as_24hrtime = Val(end_time[0])
         End If
      Endif
      EndTime = Date(Year(appointment_date), Month(appointment_date), Day(appointment_date), end_hour_as_24hrtime, Val(end_time[1]))
      appointment!duration = Str(Abs(DateDiff(starttime, EndTime, gb.Minute))) & " minutes"
      If fk_lu_appointment_status = 0 Then fk_lu_appointment_status = 1 'normal appointment for 10 min or multiple of 10 min slots
   Else
      '-------------------------
      'only one appointment slot
      '-------------------------
      If fk_lu_appointment_status = 0 Then fk_lu_appointment_status = 1

      If InStr(Appointment_times[0], "AM") Then                      'start time in morning, keep hours
         start_hour_as_24hrtime = Val(start_time[0])
      Else
         If Val(start_time[0]) < 12 Then
            start_hour_as_24hrtime = start_time[0] + 12                'convert to 24 hour time if in afternoon
         Else
            start_hour_as_24hrtime = Val(start_time[0])
         End If
      Endif
      starttime = Date(Year(appointment_date), Month(appointment_date), Day(appointment_date), start_hour_as_24hrtime, Val(start_time[1]))
      appointment!begin = Format$(starttime, "dd/mm/yyyy hh:nn")
      If Not IsNull(gridrows[onrow]!fk_lu_appointment_status) Then
         iStatus = gridrows[onrow]!fk_lu_appointment_status
      Else
         iStatus = fk_lu_appointment_status
      Endif

      If Not IsNull(gridrows[onrow]!is_fitin) Then
         appointment_interval = "1"
      Endif
      If iStatus = emergency Then
         fk_lu_appointment_status = emergency
      Endif
      appointment!duration = Str(appointment_interval) & " minutes"
   Endif
   If Not IsNull(gridrows[onrow]!pk_appointment) Then
      appointment!pk = gridrows[onrow]!pk_appointment
   Endif
   appointment!notes = gridrows[onrow]!notes
   appointment!fk_staff_booked = modDBConnect.currentUser!fk_staff
   appointment!fk_clinic = fk_clinic
   appointment!fk_lu_appointment_icon = gridrows[onrow]!fk_lu_appointment_icon
   appointment!fk_lu_appointment_status = fk_lu_appointment_status
   modDBConnect.BeginTrans()
   modAppointmentsDBI.Appointment_Save(appointment, bCheckSlotTaken)
   modDBConnect.CommitTrans()
   Reload()
   If bMoveToNextAvailableAppointment Then
      gridview1.row = Gridview1_First_Vacant(onrow)
      gridview1.UnSelectAll()                   'unselect all rows
      gridview1.Select(onrow, 1)
      Wait
   End If
   gridview1.SetFocus()

End

Public Sub Gridview1_First_Vacant(startrow As Integer) As Integer
   '----------------------------------------------------------
   'finds the first vacant row taking time of day into account
   'fixme
   '----------------------------------------------------------

   Dim i As Integer

   For i = startrow To Gridview1.Rows.Count - 1
      If Gridview1[i, 1].text = "" Then
         Return i
         Break
      Endif
   Next

End

Public Sub SelectPatient_click()
   '-------------------------------------------------------------------
   'User has cancelled patient selection in popup patient selector form
   '-------------------------------------------------------------------

   Message.info("Richard in SelectPatient in FDayList")
   If Last.tag = "cancel" Then Stop Event
   form_select.Visible = False
   Vbox1.Visible = True
   Dec Application.Busy
   Gridview1_Refresh()

End

Public Sub Form_Resize()

   ' gridview1.Columns[1].width = gridview1.width - gridview1.Columns[0].Width - 25

End

Public Sub Form_Leave()

   txtAppointment.Visible = False
   Gridview1.row = -1

End

Public Sub txtFindPatient_Change()
   '------------------------------------------------------------------------------------------------------
   'This text box is not visible - just here to use its change event
   'This is triggered externally by the FPatientSelect form 'when > 1 patient name for the search criteria
   'If patient found then for save() at this point we have
   '  - patient!fk_patient
   '  - need to know if > 1 appointment slot for the times so calculate this
   '  - the basic gridrow(onrow)  has single time eg 09:20, but save reads this to get start/end time
   'Patient or non-patient is saved as we could just be saving a comment, in which case name
   'becomes a comment
   '------------------------------------------------------------------------------------------------------

   Dim iLastRowOn As Integer
   Dim iX As Integer

   If Bexit Then Return
   If Len(txtFindPatient.text) Then
      Try Me.Parent.Parent.Parent.Visible = True          're-show the appointment grids
      If iFirstRow <> iLastRow Then                   'selected a multiple rows
         gridrows[onrow]!time = GridRows[iFirstRow]!time & "-" & GridRows[Min(gridrows.count - 1, iLastRow + 1)]!time
         iLastRowOn = iLastRow
      Else
         iLastRowOn = onrow
      End If
      gridrows[onrow]!name = txtFindPatient.text
      gridrows[onrow]!notes = txtFindPatient.text
      gridrows[onrow]!fk_lu_appointment_status = appointment_made
      fk_lu_appointment_status = appointment_made
      bMoveToNextAvailableAppointment = True                    'marquee will move to next vacant slot                                      '
      Save()                                                    'Saves and reloads the grid
   Endif '

End

Public Sub Show_EditingTextBox()
   '--------------------------------------------------------------------------------------------
   'Displays the editing textbox
   'Copied some of this code from the gambas IDE so can't remmber reason for use of the hEditor
   '--------------------------------------------------------------------------------------------

   Dim sAppointment As String  'the contents of the grid column with patients
   Dim hEditor As Object

   hEditor = txtAppointment
   txtAppointment.ReadOnly = False
   $hEditor = hEditor
   Try Move_EditingTextBox
   $hEditor.Show
   txtAppointment.Visible = True
   $hEditor.SetFocus
   $hEditor = txtAppointment
   txtAppointment.SelectAll
   If Not IsNull(gridrows[onrow]!name) Then
      txtAppointment.text = gridrows[onrow]!name
   Else
      txtAppointment.pos = Len(txtAppointment.text)
   End If
   txtAppointment.SetFocus()
Catch
   Return

End

Public Sub Move_EditingTextBox()
   '---------------------------------------------------------------------------------
   'Sub Move ( X As Integer, Y As Integer [ , Width As Integer, Height As Integer ] )
   'here, height = ((iLastRow - iFirstRow) + 1) * irowheight + 5)
   'If single slot selected and being edited then this could be equivalent of
   '1 row = normal apptor multiple rows, so use the actual grid cell  height,
   'otherwise calculate the textbox height on basis of selected rows.
   '---------------------------------------------------------------------------------

   Dim iW As Integer
   Dim iheight As Integer
   Dim left_header_width As Integer

   If IsNull($hEditor) Or gridview1.Row = -1 Then Return 'FIXME BAD BAD BUGFIX ?WHY GOING -1
   lblheader.text = gridview1.rows[onrow].text
   If iSlotCount = 1 Then
      iheight = Gridview1.Rows[onrow].height + 5
   Else
      iheight = ((iLastRow - iFirstRow) + 1) * irowheight + 5
   Endif
   With gridview1[gridview1.Row, 1]
      txtAppointment.Move(gridview1.X + (gridview1.width - gridview1.Columns[0].width - gridview1.Columns[1].width - 3) - gridview1.ScrollX, gridview1.Y + itop + 1 - gridview1.ScrollY, .Width + 5, iheight)
   End With

End

Public Sub Gridview1_Scroll()

   If gridview1.row = -1 Then Return
   Try Move_EditingTextBox

End

Public Sub txtAppointment_KeyPress()

   Select Case Key.Code
      Case Key.Up, Key.down, Key.esc
         txtAppointment.Visible = False
         gridview1.SetFocus()
   End Select

End

Public Sub txtAppointment_Change()
   '----------------------------------------------------------
   'is user typing in the textbox overlying the grid
   'and has backspaced or deleted a row -  delete after prompt
   '----------------------------------------------------------

   If bexit Then Return
   If Len(txtAppointment.text) = 0 And txtAppointment.visible = True And bexit = False Then
      Appointment_Delete()
   End If

End

Public Sub ToolButton1_Click()

   Me.Reparent(Null)

End

Public Sub Gridview1_GotFocus()

End
