' Gambas class file

' Copyright (C) 2008-2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'--------------------------------------------------------------------------
'PURPOSE          A form to display and enter appointment for a single day
'TODO             Implement quite a few of the popup menu options
'                 load appointment grid time intervals from session setup
'-------------------------------------------------------------------------

Private $iLast As Integer
Private $sLast As String
Private $sOption As String
Private $hEditor As Object
Private bexit As Boolean
Private obs As Observer
Private OnRow As Integer
Private GridData As Collection 
Public GridRows As Collection
Private iLeft As Integer
Private iTop As Integer
Private i As Integer
Public iFirstRow As Integer
Private iLastRow As Integer
Private bFoundFirst As Integer
Private appointment_icons As Collection   'passed from FMakeAppointments (saves loading in every day occurrence)
Private fk_lu_appointment_icon As Integer
Private Const appointment_made As Integer = 1
Private Const arrived_and_waiting As Integer = 2
Private Const in_consulting_room As Integer = 3
Private Const patient_departed As Integer = 4
Private Const emergency As Integer = 5
Private fk_lu_appointment_status As Integer  '1-4 see clerical.lu_appointment_status
Private Appointment_Status_Colors As String[]
Private irowheight As Integer = 18 'fix me
Private staff_photo As Picture
Private staff_member As Collection
Private form_select As FPatientsSelect
Private appointment_interval As Integer      'the time interval in minutes for this user for this day FIXME get from backend
Private fk_clinic As Integer                 'clinic where the appointments are being made for
Private Appointments As Collection
Private fk_staff As Integer
Private pk_view As Integer
Private appointment As Collection
Private appointment_Date As Date
Private iSlotCount As Integer

Public patient As Collection 

Public Sub Init(sm As Collection, app_date As Date, clinic_key As Integer, icons As Collection)
   '-------------------------------------------------------------------
   'initialise the appointment module from  FMakeAppointments 
   'sm= the staff member
   'app-date = the date of this apointment grid
   'icons= collection from backend of icons for the grid eg home visit
   'later grabbed from the backend
   '-------------------------------------------------------------------
   
   staff_member = sm                                                   
   fk_staff = staff_member!fk_staff
   fk_clinic = clinic_key
   Appointment_Date = app_date
   appointment_icons = icons
   txtAppointment.height = irowheight                                    'grid rows = same height as our textbox
   Me.title = UCase(staff_member!title & " " & staff_member!wholename)   'will appear on the tab 
   lblDate.text = Format(appointment_date, gb.LongDate)                  'Wednesay 18th September   
   With gridview1                                                        'construct the basic grid                             
      .columns.count = 4
      .columns[0].width = 80                                             'col 0=time
      .columns[1].width = 24                                             'col 1=icon
      .columns[2].width = gridview1.width - 104                          'col 2=the appointment details
      .columns[3].width = 0                                              'col 3=
   End With
   appointment_interval = 10 'fix me get me from backend (when done)  
   GridRows_Init(Time(8, 30, 0), Time(18, 0, 0), appointment_interval)   'fill empty collection with times
   Appointment_Status_Colors = New String[6]                             'don't use 0 member
   Appointment_Status_Colors[appointment_made] = Color.Black             
   Appointment_Status_Colors[arrived_and_waiting] = Color.Blue
   Appointment_Status_Colors[in_consulting_room] = Color.DarkRed
   Appointment_Status_Colors[patient_departed] = Color.Gray
   Appointment_Status_Colors[emergency] = Color.Red
   Reload()                                                              'load the days appointments
   
End

Public Sub Form_KeyPress()
   
   Dim CtrlDown As Boolean
   Dim FnDown As Boolean
   
   Try CtrlDown = Key.Control
   If CtrlDown Then
      bExit = True 
      'change grid foreground colours according to control keyc odes
      Select Case Key.code
         Case Asc("W")                                    'w=waiting
            fk_lu_appointment_status = arrived_and_waiting
         Case Asc("G")                                      'g=gone
            fk_lu_appointment_status = patient_departed
         Case Asc("N")                                      'n=normal appointment made
            fk_lu_appointment_status = appointment_made
         Case Asc("C")                                      'c=consulting
            fk_lu_appointment_status = in_consulting_room
      End Select
      Appointment_Update()
      Stop Event
   End If
   
End

Public Sub GridRows_Init(starttime As Date, EndTime As Date, appointment_interval As Integer)
   '---------------------------------------------------------------
   'Using pre-defined start and end times and appointment intervals
   'FIX ME
   'create a collection of grid rows with nothing but the time
   '---------------------------------------------------------------
   
   Dim ihour As Integer = Hour(starttime)
   Dim iminute As Integer = Minute(starttime)
   Dim x As Integer
   Dim row_key As Collection
   
   gridrows = New Collection
   
   Do Until x = -1
      griddata = New Collection
      griddata!time = Format(Time(ihour, iminute, 0), "hh:nn")
      griddata!slots = 1
      gridrows.add(griddata, x) 
      iminute += appointment_interval
      If iminute = 60 Then
         Inc ihour
         iminute = 0
      End If   
      If ihour = Hour(EndTime) Then
         If iminute > Minute(Endtime) Then
            Break
         End If    
      Endif
      Inc x
   Loop   
   
End

Public Sub Reload()
   '----------------------------------------------------------
   'Get any existing appointments for the day from the backend
   'Merge these with the initialised gridrows collection
   'and fill gridview1 with the appointments.
   'fixme the init
   '----------------------------------------------------------   
   
   Appointments = modAppointmentsDBI.Appointments_GetDay(appointment_date, fk_staff, fk_clinic)
   If appointments.count Then
      GridRows_Init(Time(8, 30, 0), Time(18, 0, 0), appointment_interval)   'fill empty collection with times
      GridRows_Collection_Update(appointments)             'update the underlying collection of data
   End If   
   Gridview1_Rebuild(gridrows)   'display this in the grid
   
End

Public Sub GridRows_Collection_Update(Appts As Collection)
   '----------------------------------------------
   'Update the contents of the gridrows collection
   '---------------------------------------------- 
   
   Dim NewRows As New Collection
   Dim i As Integer
   Dim x As Integer
   Dim sTime As String
   Dim sArray As String[]
   Dim duration As Integer
   Dim sEndTime As Date 
   Dim sBeginTime As String 
   Dim slots As Integer
   
   Appointments = Appts
   For Each appointment In appointments
      '------------------------------------------------------------- 
      'Duration can be in multiples of the days appointment_interval
      'the time off appointmen is the key to the gridrows collection
      '-------------------------------------------------------------
      sTime = Format(appointment!begin, "hh:nn")                      ' e.g 10:20 gridrows key
      duration = Val(Split(appointment!duration, ":")[1])             ' e.g 10, 20, 30
      If duration <> 10 Then                                          ' If duration longer than 1 appointment slot fixme use backend app duratin for dr
         sBeginTime = Format(appointment!begin, "hh:nn")
         sEndTime = DateAdd(appointment!begin, gb.minute, duration)   ' work out the end time
         sTime = sTime & "-" & Format(sEndTime, "hh:nn")              ' key becomes eg 10-20:10-30 fixme more complex than this eg 10:50-11,20
         For i = 0 To GridRows.Count - 1
            If Not IsNull(gridrows[i]) Then    
               If gridrows[i]!time = sBeginTime Then
                  slots = duration / appointment_interval 
                  gridrows[i]!time = sTime
                  If IsNull(appointment!fk_patient) Then
                     gridrows[i]!name = appointment!notes
                  Else
                     gridrows[i]!name = appointment!wholename & " [" & Format(appointment!birthdate, "dd/mm/yyyy") & "] " ' & Trim(appointment!street1 & " " & appointment!street2) & " " & appointment!town
                  Endif
                  gridrows[i]!slots = slots
                  gridrows[i]!pk_appointment = appointment!pk
                  gridrows[i]!fk_patient = appointment!fk_patient   
                  gridrows[i]!fk_lu_appointment_icon = appointment!fk_lu_appointment_icon
                  gridrows[i]!fk_lu_appointment_status = appointment!fk_lu_appointment_status
                  Try gridrows[i]!picture = Picture.Load(appointment_icons[appointment!fk_lu_appointment_icon]!icon_path) 'most often there is no icon
                  '---------------------------------------------------------------------------------------------
                  'Now the 'virgin' grid has time slots all the same - each 10 minutes
                  'FIXME comment once this is made configurable
                  'now, we have 'consumed' extra slots, so remove the gridrow corresponding to those extra slots
                  '---------------------------------------------------------------------------------------------
                  For x = 1 To slots - 1
                     gridrows.Remove(i + x)
                  Next
                  Break
               End If   
            Endif
         Next
      Else
         '---------------------------------------------------------------- 
         'this is a standard appointment length - will have only 1 slot
         'i.e in this fixed 10 minute interval FIXME MAKE ME CONFIGURABLE
         'this appointment is for 10 minutes only
         '----------------------------------------------------------------  
         For i = 0 To GridRows.Count - 1
            If Not IsNull(gridrows[i]) Then    
               If gridrows[i]!time = stime Then
                  If Not IsNull(appointment!fk_patient) Then  
                     gridrows[i]!name = appointment!wholename & " [" & Format(appointment!birthdate, "dd/mm/yyyy") & "] "  '& Trim(appointment!street1 & " " & appointment!street2) & " " & appointment!town
                  Else
                     gridrows[i]!name = appointment!notes  
                     gridrows[i]!notes = appointment!notes  
                  End If   
                  gridrows[i]!pk_appointment = appointment!pk
                  gridrows[i]!fk_patient = appointment!fk_patient 
                  gridrows[i]!fk_lu_appointment_icon = appointment!fk_lu_appointment_icon
                  gridrows[i]!fk_lu_appointment_status = appointment!fk_lu_appointment_status
                  Try gridrows[i]!picture = Picture.Load(appointment_icons[appointment!fk_lu_appointment_icon]!icon_path) 'most often there is no icon
               Endif
            End If
         Next
      End If   
   Next
   '------------------------------------------------------------------------------------------------
   'Now the gridrows collection could be "missing" elements which are now covered by multiple slots
   'i.e if the appointment time spanned more than 1 regular time slot it will have 'consumed' a 
   'number of slots distal to its start time so rebuild the collection to be consecutive numbers
   '----------------------------------------------------------------------------------------------   
   x = 0
   For i = 0 To GridRows.Count - 1
      If Not IsNull(GridRows[i]) Then 
         NewRows.Add(GridRows[i], x)
         Inc x
      End If 
   Next
   GridRows = modUtil.Copy_Collection(NewRows)
   
End

Public Sub GridData_Rebuild()
   '----------------------------------------------------------------
   'Rebuild the collection of apointments in the gridrows collection
   'iFirstrow has previously been set when user selected one or more
   'rows in the grid to place an appointment time
   '----------------------------------------------------------------
   
   Dim NewRows As New Collection
   Dim iNewRowCount As Integer
   
   Dim i As Integer 
   
   For i = 0 To Gridview1.Rows.Count - 1              'look through all the rows on the grid
      If i < iFirstRow Then                           'for each time slot prior to this new appointment                     
         NewRows.Add(GridRows[i], iNewRowCount)       'just add it into the new collection of appointments
      Else If i = iFirstRow And i < iLastRow + 1 Then 'have now reached the first row the user selected
         GridData = New Collection                    'when they first searched for the patient
         Print "slots:" & gridrows[gridview1.Row]!slots
         If iFirstRow = iLastRow Then                 'if they only selected a single row= 1 slot
            GridData!time = GridRows[i]!time          'put in the time of the appointment
            GridData!picture = GridRows[i]!picture    'any associated icon e.g for pregnancy check
            GridData!slots = 1                        'and it only takes up one time slot
            GridData!pk_appointment = GridRows[i]!pk_appointment
            GridData!notes = GridRows[i]!notes     
         Else                                         'otherwise - they must have selected > 1 rows
            GridData!time = GridRows[i]!time & "-" & GridRows[iLastRow + 1]!time 'time e.g 9:00-9:20
            GridData!picture = GridRows[i]!picture    'plus any icon
            GridData!pk_appointment = GridRows[i]!pk_appointment
            GridData!notes = GridRows[i]!notes     
            GridData!slots = iLastRow - iFirstRow + 1  'and covering however many of standard grid heights
            i = i + iLastRow - iFirstRow              'increment the loop counter
         End If 
         GridData!name = Trim(txtAppointment.text)    'complete the collection with the patient name
         NewRows.Add(GridData, iNewRowCount)          'add the collection to the rows collection
      Else                                            'as above, the next one is an existing appointment
         GridData = New Collection                    'create a new collection
         GridData!time = GridRows[i]!time             'put in existing time
         GridData!slots = GridRows[i]!slots           'the number of slots (or grid rows) it spans
         GridData!name = GridRows[i]!name             'the patients name
         GridData!notes = GridRows[i]!notes           
         GridData!pk_appointment = GridRows[i]!pk_appointment
         NewRows.Add(GridData, iNewRowCount)          'add to the new collection
      End If   
      Inc iNewRowCount
   Next
   GridRows = modUtil.Copy_Collection(NewRows)        'and copy back to gridRows
   
End

Public Sub Gridview1_Rebuild(gridrows As Collection)
   '-------------------------------------------------------------------------
   'Using the underlying collection of appointment times to re-build the grid
   '-------------------------------------------------------------------------   
   
   Dim i As Integer
   Dim sTimes As String[]
   Dim sTime As String 
   
   Gridview1.Clear()                               'clear the grid
   Gridview1.Rows.count = gridrows.count           'set actual number of rows in the grid <> gridrows_init()
   For i = 0 To gridrows.count - 1
      Gridview1.Rows[i].height = gridrows[i]!slots * irowheight 'will vary according to length of appt times
      Gridview1[i, 0].text = gridrows[i]!time
      Gridview1[i, 1].Alignment = Align.Center
      Gridview1[i, 1].picture = gridrows[i]!picture
      Gridview1[i, 2].text = gridrows[i]!name
      
      Try Gridview1[i, 2].Foreground = Appointment_Status_Colors[gridrows[i]!fk_lu_appointment_status] 
      If gridrows[i]!fk_lu_appointment_status = emergency Then
         Gridview1[i, 2].Background = Color.Yellow
      Endif
   Next
   
End

Public Sub form_Close()
   
   Settings_Save()
   
End

Public Sub mnuAppointments_Click()
   '------------------------------------------------------
   'User has clicked on one of the apointment menu options   
   '------------------------------------------------------
   
   Select Case Last.tag
      Case "delete"
         Delete()
         Return 
      Case "no icon"
         ' Try Gridview1[Gridview1.Row, 1].Picture.Clear()
         fk_lu_appointment_icon = 0
         GridData_Rebuild()
         Save()
      Case "in waiting room"
         fk_lu_appointment_status = arrived_and_waiting
      Case "in consulting room"
         fk_lu_appointment_status = in_consulting_room
      Case "patient gone"
         fk_lu_appointment_status = patient_departed
      Case "help"
         modUtil.NotImplemented("Sorry, viewing help is not implemented")
         Return 
      Case "emergency"
         fk_lu_appointment_status = emergency 
         Gridview1[Gridview1.Row, 2].Background = Color.Yellow
         Gridview1[Gridview1.Row, 2].Foreground = Color.Red
         gridrows[Gridview1.Row]!notes = "RESERVED FOR EMERGENCY"
         gridrows[Gridview1.Row]!name = "RESERVED FOR EMERGENCY"
         Save()
         Return 
      Case "add fit"
         modUtil.NotImplemented("Sorry, adding fit-in appointment is not implemented")
         Return 
      Case Else 
         If IsNumber(Last.tag) Then fk_lu_appointment_icon = Val(Last.tag)
   End Select
'   Appointment_Update()
   Save()
End

Private Sub Settings_Save()
   
End

Private Sub Settings_Load()
   
End

Public Sub Gridview1_Keypress()
   '------------------------------------------------------------------------------
   'Keypress detected coming from the grid - ie using typing whilst grid has focus
   '------------------------------------------------------------------------------   
   
   If bExit Then Return 
   
   If txtAppointment.text = "" Then
      '----------------------------------------------------------- 
      'user has just started typing whilst the gridview1 has focus
      '----------------------------------------------------------- 
      If Key.code > 64 And Key.code < 91 Then         'capture first keypress of the user
         Try txtAppointment.text = Chr(Key.code)      'if valid a-z and put it into the txtAppointment
         GridView1_DblClick()                         'and enter edit mode to allow typing/searching
      End If   
   Else
      '------------------------------------------------------------------- 
      'user just has hit <enter> key = assume they want to enter edit mode
      '------------------------------------------------------------------- 
      If Key.code = Key.return Then 
         Try txtAppointment.text = Chr(Key.code) 
         GridView1_DblClick()
      End If   
   End If 
   
End

Public Sub Gridview1_DblClick()
   '----------------------------------------------------------------
   'User has double clicked on an appointment slot - enter edit mode
   'figure out which row is selected and if multi-selected, then
   'move the editing textbox txtAppointment to align to proper place
   'overlying this appointment slot.
   '----------------------------------------------------------------
   
   Dim i As Integer
   
   Dim x As Integer

   patient = Null
   bFoundFirst = False  
   For i = 0 To Gridview1.rows.count - 1           'figure out which rows are selected
      x = x + Gridview1.Rows[i].Height
      If Gridview1.Rows[i].Selected = True Then
         If bFoundFirst = False Then
            bFoundFirst = True
            iFirstRow = i
            itop = x - Gridview1.Rows[i].height
         End If 
         iLastRow = i
      End If 
   Next 
   onrow = iFirstRow  
   iSlotCount = iLastRow - iFirstRow + 1
   fk_lu_appointment_icon = 0
   fk_lu_appointment_status = appointment_made
   Show_EditingTextBox()
   
End

Public Sub Gridview1_Select()
   '----------------------------------------------------
   'user has clicked on or otherwise selected a grid row
   'remove and clear the appointment textbox
   '----------------------------------------------------   
   
   txtAppointment.visible = False   
   txtAppointment.text = ""
   onrow = gridview1.row
   
End

Public Sub Gridview1_Menu()
   '-------------------------------------------------------------------
   'User has right mouse clicked on the name column, show them the menu
   '-------------------------------------------------------------------   
   
   fk_lu_appointment_icon = 0 
   If Gridview1[Gridview1.Row, 2].text = "" Then
      'fix me disable stuff
   End If   
   onrow = gridview1.row
   iFirstRow = onrow
   If Not IsNull(gridrows[Gridview1.Row]!fk_patient) Then 
      mnuAppointments_PatientWaiting.Enabled = True
      mnuAppointments_Consulting.Enabled = True 
      mnuAppointments_Gone.Enabled = True
      mnuAppointments_Type.Enabled = True  
      mnuAppointments.Popup()
   Else
      mnuAppointments_PatientWaiting.Enabled = False
      mnuAppointments_Consulting.Enabled = False 
      mnuAppointments_Gone.Enabled = False
      mnuAppointments_Type.Enabled = False 
      mnuAppointments.Popup()
   End If    
   
End

Public Sub patient_load_record(patient As Collection, bPhotoConfirmed As Boolean, Optional P As Picture) 
   '------------------------------------------------------------------
   'Loads the patients name for the appointment
   'called by textbox2_change
   'this is called by FMakeAppointments only and not by this module
   'If called, then some sort of popup is over the daybook
   'either the single patient confirm select or whole page multi-select
   '-------------------------------------------------------------------
   
   Me.Parent.Parent.Parent.Visible = True       're-show the appointment grids
   txtAppointment.text = patient!wholename & " [" & Format(patient!birthdate, "dd/mm/yyyy") & "] " & Trim(patient!street1 & " " & patient!street2) & " " & patient!town
   GridData_Rebuild()                           'put appropriate data into the collection
   Save()                                       'save the appointment, re-load grid
   gridview1.SetFocus()                         'allows user just to use eg down/up arrow keys to continue      
   
End

Public Sub Appointment_Update()
   
 
   
   'patient!fk_patient = gridrows[onrow]!fk_patient 
   Save()
   
End

Public Sub Delete()
   '-------------------------------------------------------------------------
   'Deletes an appointment, as deleted appointment could cover multiple slots
   'initialise the gridrows collection again before rebuilding
   '-------------------------------------------------------------------------

   Dim appointment As New CRow 
   
   If Not IsNull(gridrows[Gridview1.Row]!pk_appointment) Then
      appointment!pk = gridrows[Gridview1.Row]!pk_appointment
      Message.Title = "Delete an appointment"
      If Message.Warning("Are you sure you wish to delete this appointment?", "Yes", "No") = 2 Then Return 
      modAppointmentsDBI.Appointment_Delete(appointment)
      modDBConnect.CommitTrans()
      GridRows_Init(Time(8, 30, 0), Time(18, 0, 0), appointment_interval)   'fill empty collection with times
      Reload()
   Endif
   
End

Public Sub Save()
   '--------------------------------------------------------------
   ' Saves an appointment slot
   ' pk bigserial NOT NULL,
   ' fk_patient integer but can be null if a comment
   ' fk_staff integer NOT NULL,
   ' "begin" timestamp without time zone,
   ' duration interval,
   ' notes text,
   ' fk_staff_booked integer NOT NULL,
   ' fk_clinic timestamp without time zone NOT NULL DEFAULT now()
   '-------------------------------------------------------------  
   
   Dim appointment As New CRow
   Dim starttime As Date
   Dim endtime As Date
   Dim Appointment_times As String[]
   Dim appointment_length As String[]
   
   Try appointment!fk_patient = patient!fk_patient
   If Error Then
      appointment!fk_patient = gridrows[onrow]!fk_patient
   Endif
   appointment!fk_staff = staff_member!fk_staff
   Appointment_times = Split(gridrows[onrow]!time, "-")
   If Appointment_times.count = 2 Then
      starttime = Date(Year(appointment_date), Month(appointment_date), Day(appointment_date), Hour(Appointment_times[0]), Minute(Appointment_times[0]), 0)
      appointment!begin = Format$(starttime, "dd/mm/yyyy hh:nn")
      EndTime = Date(Year(appointment_date), Month(appointment_date), Day(appointment_date), Hour(Appointment_times[0]), Minute(Appointment_times[1]), 0)
      appointment!duration = Str(Abs(DateDiff(starttime, EndTime, gb.Minute))) & " minutes"
   Else
      starttime = Date(Year(appointment_date), Month(appointment_date), Day(appointment_date), Hour(gridrows[onrow]!time), Minute(gridrows[onrow]!time), 0)
      appointment!begin = Format$(starttime, "dd/mm/yyyy hh:nn")
      appointment!duration = Str(appointment_interval) & " minutes"
   Endif
   If Not IsNull(gridrows[onrow]!pk_appointment) Then
      appointment!pk = gridrows[onrow]!pk_appointment
   Endif
   appointment!notes = gridrows[onrow]!notes
   appointment!fk_staff_booked = modDBConnect.currentUser!fk_staff 
   appointment!fk_clinic = fk_clinic  
   appointment!fk_lu_appointment_icon = fk_lu_appointment_icon
   appointment!fk_lu_appointment_status = fk_lu_appointment_status
   modDBConnect.BeginTrans()
   modAppointmentsDBI.Appointment_Save(appointment)
   modDBConnect.CommitTrans()
   Reload()
   
End

Public Sub SelectPatient_click()                                       
   '-------------------------------------------------------------------
   'User has cancelled patient selection in popup patient selector form
   '-------------------------------------------------------------------
   
   If Last.tag = "cancel" Then Stop Event
   form_select.Visible = False 
   Vbox1.Visible = True   
   Gridview1_Rebuild
   
End

Public Sub Form_Resize()
   
   gridview1.Columns[2].width = gridview1.width - gridview1.Columns[1].W - gridview1.Columns[0].Width - 25
   
End

Public Sub Form_Leave()
   
   txtAppointment.Visible = False   
   
End

Public Sub TextBox2_Change()
   '-------------------------------------------------------
   'This is triggered externally by the FPatientSelect form
   'when > 1 patient name for the search criteria
   '-------------------------------------------------------   
   
   If Len(Last.text) Then
      If Not IsNull(patient) Then
         patient_load_record(patient, True) 
      Else
         txtAppointment.text = Last.text 
         gridrows[Gridview1.Row]!name = Last.text 
         gridrows[Gridview1.Row]!notes = Last.text  
         GridData_Rebuild()
         Save()
         gridview1.SetFocus()
      End If
   Endif
   
End

Public Sub Show_EditingTextBox()
   '--------------------------------------------------------------------------------------------
   'Displays the editing textbox
   'Copied some of this code from the gambas IDE so can't remmber reason for use of the hEditor   
   '--------------------------------------------------------------------------------------------
   
   Dim sAppointment As String  'the contents of the grid column with patients 
   Dim hEditor As Object 
   
   hEditor = txtAppointment
   txtAppointment.ReadOnly = False
   $hEditor = hEditor
   Move_EditingTextBox
   $hEditor.Show
   txtAppointment.Visible = True 
   $hEditor.SetFocus
   $hEditor = txtAppointment 
   txtAppointment.SelectAll
   If Not IsNull(gridrows[onrow]!name) Then
      txtAppointment.text = gridrows[onrow]!name
   Else
      txtAppointment.pos = Len(txtAppointment.text) 
   End If   
   
End

Public Sub Move_EditingTextBox()
   
   Dim iW As Integer
   
   If IsNull($hEditor) Or gridview1.Row = -1 Then Return 'FIXME BAD BAD BUGFIX ?WHY GOING -1
   Print gridrows[gridview1.Row]
   ' iSlotCount = gridrows[gridview1.Row]!slots
   
   With gridview1[gridview1.Row, 2]
      txtAppointment.Move(gridview1.X + .X - gridview1.ScrollX, gridview1.Y + itop - gridview1.ScrollY, .Width, ((iLastRow - iFirstRow) + 1) * Gridview1.Rows[0].Height + 5)
      '  txtAppointment.Move(gridview1.X + .X - gridview1.ScrollX, gridview1.Y + itop - gridview1.ScrollY, .Width, (iSlotCount * Gridview1.Rows[0].Height) + 5)
      
   End With
   
End

Public Sub Gridview1_Scroll()
   
   If gridview1.row = -1 Then Return 
   Move_EditingTextBox
   
End

Public Sub txtAppointment_Change()
   '------------------------------------------------------------------------
   '
   'is user typing, and has backspaced or deleted a row, delete after prompt
   '------------------------------------------------------------------------

   If Len(txtAppointment.text) = 0 And txtAppointment.visible = True And bexit = False Then
      Delete()
   End If
   
End
