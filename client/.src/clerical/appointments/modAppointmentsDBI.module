' Gambas module file

' general interface routines to appointments database
' Copyright (C) 2008-2016 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
'
Private appointment_icons As Collection          'passed from FMakeAppointments (saves loading in every day occurrence)
Private Appointment_Status_Colors As String[]
Private Const appointment_made As Integer = 1
Private Const arrived_and_waiting As Integer = 2
Private Const in_consulting_room As Integer = 3
Private Const patient_departed As Integer = 4
Private Const emergency As Integer = 5
Private Const fitin As Integer = 6
Private appointment_interval As Integer = 10

Public Function Patients_Seen(date_seen As String, Optional fk_staff As Variant = Null, bShowAudits As Boolean = False) As Collection
   
   Dim sql As String
   
   sql = "Select * from clin_consult.vwPatientConsults WHERE date(consult_date) = '" & date_seen & "'::date "
   If Not IsNull(fk_staff) Then
      sql &= " AND fk_staff = " & fk_staff
   End If
   If bShowAudits = False Then
      sql &= " AND linked_table is null"
   Endif
   Return modDBConnect.exec_query_collection(sql)
   
End

'''List sessions for a given user
Public Function Sessions_List(fk_staff As Variant) As Collection
   
   Return modDBConnect.exec_query_row("select * from clerical.sessions where fk_staff =  " & fk_staff)
   
End

'''Save a session
Public Sub Sessions_Save(row As CRow)
   
   row.Save("clerical.sessions", "pk")
   
End

'''Delete session
Public Sub Sessions_Delete(row As CRow)
   
   modDBConnect.exec_query("delete from clerical.sessions where pk = " & row!pk)
   
End

'''Lists all appointments on a given day for given doctor<br/>
'''day1: the date, set to Null for all time (returns max 500 results)<br/>
'''fk_staff: the staff member, -1 for all staff<br/>
'''timeunit: the unit to compare by, "day" for appointments that day, "week" for the whole week, "month", etc.
Public Function Appt_List(Optional day1 As Date = Null, fk_staff As Variant = Null, timeunit As String = "day") As Collection
   
   Dim sql As String
   
   sql = ""
   If Not IsNull(day1) Then
      sql = Format$(day1, "yyyy-mm-dd")
      sql = Subst$("date_trunc('&2',begin) = date_trunc('&2',timestamp '&1')", sql, timeunit)
   Endif
   If Not IsNull(fk_staff) Then
      If sql <> "" Then sql &= " and "
      sql &= "fk_staff = " & fk_staff
   Endif
   If sql = "" Then sql = "1=1"
   sql = "select * from clerical.bookings where " & sql & " order by begin limit 500"
   Return modDBConnect.exec_query_row(sql)
   
End

Public Function Appointment_icons_get() As Collection
   
   Return modCache.Get("clerical.lu_appointment_icons")
   
End

Public Sub Appointment_Status_Colors_Init()
   
   Appointment_Status_Colors = New String[6]                             'don't use 0 member
   Appointment_Status_Colors[appointment_made] = Color.Black
   Appointment_Status_Colors[arrived_and_waiting] = Color.Blue
   Appointment_Status_Colors[in_consulting_room] = Color.DarkRed
   Appointment_Status_Colors[patient_departed] = Color.Gray
   Appointment_Status_Colors[emergency] = Color.Red
   
End

Public Sub GridRows_Update(Appointments As Collection, gridrows As Collection[])
   '----------------------------------------------
   'Update the contents of the gridrows collection
   '----------------------------------------------
   
   Dim NewRows As New Collection
   Dim i As Integer
   Dim x As Integer
   Dim sTime As String
   Dim sArray As String[]
   Dim duration As Integer
   Dim sEndTime As Date
   Dim sBeginTime As String
   Dim slots As Integer
   Dim oldRowCount As Integer
   Dim lastAppointment As Collection
   Dim FitIn As Collection
   Dim find_time As Date
   Dim appointment As Collection
   
   If IsNull(appointment_icons) Then
      Appointment_Icons = Appointment_icons_Get_Picture(Appointment_icons_get())
   Endif
   
   For Each appointment In appointments
      '-------------------------------------------------------------
      'Duration can be in multiples of the days appointment_interval
      'the time off appointmen is the key to the gridrows collection
      '-------------------------------------------------------------
      sTime = Format(appointment!begin, "hh:nn")                      ' e.g 10:20 gridrows key
      duration = Val(Split(appointment!duration, ":")[1])             ' e.g 10, 20, 30
      Select Case duration
         Case 1
            'do nothing but please don't remove this or scews things up
         Case 10
            '----------------------------------------------------------------
            'this is a standard appointment length - will have only 1 slot
            'i.e in this fixed 10 minute interval FIXME MAKE ME CONFIGURABLE
            'this appointment is for 10 minutes only
            '----------------------------------------------------------------
            For i = 0 To GridRows.Count - 1
               
               If Not IsNull(gridrows[i]) Then    'may have been merged so i is missing
                  If gridrows[i]!time = stime Then
                     If Not IsNull(appointment!fk_patient) Then
                        gridrows[i]!name = Replace(appointment!wholename & " [" & Format(appointment!birthdate, "dd/mm/yyyy") & "] ", "Unknown", "")
                     Else
                        gridrows[i]!name = appointment!notes
                        gridrows[i]!notes = appointment!notes
                     End If
                     gridrows[i]!pk_appointment = appointment!pk
                     gridrows[i]!fk_patient = appointment!fk_patient
                     gridrows[i]!fk_lu_appointment_icon = appointment!fk_lu_appointment_icon
                     gridrows[i]!fk_lu_appointment_status = appointment!fk_lu_appointment_status
                     Try gridrows[i]!picture = Picture.Load(appointment_icons[appointment!fk_lu_appointment_icon]!icon_path) 'most often there is no icon
                  Endif
               End If
            Next
         Case Else
            '---------------------------------------
            'duration longer than 1 appointment slot
            '---------------------------------------
            sBeginTime = Format(appointment!begin, "hh:nn")
            sEndTime = DateAdd(appointment!begin, gb.minute, duration)   ' work out the end time
            sTime = sTime & "-" & Format(sEndTime, "hh:nn")              ' key becomes eg 10-20:10-30 fixme more complex than this eg 10:50-11,20
            For i = 0 To GridRows.Count - 1
               If Not IsNull(gridrows[i]) Then
                  If gridrows[i]!time = sBeginTime Then
                     slots = duration / appointment_interval
                     gridrows[i]!time = sTime
                     If IsNull(appointment!fk_patient) Then
                        gridrows[i]!name = appointment!notes
                     Else
                        gridrows[i]!name = Replace(appointment!wholename & " [" & Format(appointment!birthdate, "dd/mm/yyyy") & "] ", "Uknown", "") 'if title unknown don't show this
                     Endif
                     gridrows[i]!slots = slots
                     gridrows[i]!pk_appointment = appointment!pk
                     gridrows[i]!fk_patient = appointment!fk_patient
                     gridrows[i]!fk_lu_appointment_icon = appointment!fk_lu_appointment_icon
                     gridrows[i]!fk_lu_appointment_status = appointment!fk_lu_appointment_status
                     Try gridrows[i]!picture = Picture.Load(appointment_icons[appointment!fk_lu_appointment_icon]!icon_path) 'most often there is no icon
                     '---------------------------------------------------------------------------------------------
                     'Now the 'virgin' grid has time slots all the same - each 10 minutes
                     'now, we have 'consumed' extra slots, so remove the gridrow corresponding to those extra slots
                     'as gridrows is a collection[] array, this automatically re-orders the index 0-n
                     '---------------------------------------------------------------------------------------------
                     For x = 1 To slots - 1
                        gridrows.Remove(i + x)
                     Next
                     Break
                  End If
               End If
            Next
      End Select
      Inc x
   Next
   '-------------------
   'now add the fit-ins
   '-------------------
   For Each appointment In appointments
      sTime = Format(appointment!begin, "hh:nn")                      ' e.g 11:00
      duration = Val(Split(appointment!duration, ":")[1])             ' e.g 10, 20, 30
      If duration = 1 Then                                            ' e,g 11:01
         find_time = Time(Hour(appointment!begin), Minute(appointment!begin) - 1, 0)
         For i = 0 To gridrows.count - 1
            If gridrows[i]!time = Format(find_time, "hh:nn") Then
               fitin = New Collection
               fitin!time = sTime
               fitin!slots = 1
               fitin!name = Replace(appointment!wholename & " [" & Format(appointment!birthdate, "dd/mm/yyyy") & "] ", "Unknown", "")
               fitin!pk_appointment = appointment!pk
               fitin!fk_patient = appointment!fk_patient
               fitin!fk_lu_appointment_icon = appointment!fk_lu_appointment_icon
               fitin!fk_lu_appointment_status = appointment!fk_lu_appointment_status
               gridrows.add(fitin, i + 1)
               Try gridrows[i + 1]!picture = Picture.Load(appointment_icons[appointment!fk_lu_appointment_icon]!icon_path) 'most often there is no icon
               Break
            Endif
         Next
      Endif
   Next
   
End

Public Sub Appointment_icons_Get_Picture(Appointment_Icons As Collection) As Collection
   '-----------------------------------------------------------------------------------------
   'Loads the actual picture of the appointment icon into the collection got from the backend
   '-----------------------------------------------------------------------------------------
   
   Dim Appointment_icon As Collection
   
   For Each Appointment_Icon In Appointment_Icons
      Appointment_Icon!picture = Picture.Load(Appointment_Icon!icon_path)
   Next
   Return Appointment_Icons
   
End

Public Function Appointment_Patient_Staff_Day_Clinic(appointment_date As Date, fk_staff As Variant, fk_clinic As Variant, fk_patient As Variant, Optional bExcludeInvoiced As Boolean = True) As Collection
   'gets all appointments for a patient on a day (could be multiple even for the one doctor)
   
   Dim sql As String
   
   sql = "Select * from clerical.vwAppointments where date_trunc('day', begin) = '" & Format$(appointment_date, "dd/mm/yyyy") & "'"
   sql &= " AND fk_staff = " & fk_staff & " AND fk_clinic = " & fk_clinic 
   sql &= " AND fk_patient = " & fk_patient & " AND deleted = false " 
   If bExcludeInvoiced Then 
      sql &= " AND invoiced = False"
   End If   
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Appointments_GetDay(appointment_date As Date, fk_staff As Variant, fk_clinic As Variant) As Collection
   
   Dim sql As String
   
   sql = "Select * from clerical.vwAppointments where date_trunc('day', begin) = '" & Format$(appointment_date, "dd/mm/yyyy") & "'"
   sql &= " AND fk_staff = " & fk_staff & " AND fk_clinic = " & fk_clinic & " AND deleted = false"
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Appointments_GetWeek(start_date As Date, fk_staff As Variant, fk_clinic As Variant) As Collection
   'gets all appointments for the next week
   
   Dim sql As String
   
   sql = "Select * from clerical.vwAppointments where date_trunc('day', begin) >= '" & Format$(start_date, "dd/mm/yyyy") & "'"
   sql &= " AND date_trunc( 'day', begin) <= '" & Format(DateAdd(start_date, gb.day, 7), "dd/mm/yyyy") & "' "
   sql &= " AND fk_staff = " & fk_staff & " AND fk_clinic = " & fk_clinic & " AND deleted = false"
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Sub Make_Recurring_Appointments(data As Collection, start_date As Date, appt_time As String, num_appts As Integer, period As Integer)
   
   Dim i As Integer
   Dim factor As Integer
   Dim the_date As Date
   Dim j As Variant
   Dim row As CRow
   
   data!fk_staff_booked = modDBConnect.currentUser!fk_staff
   Select Case period
      Case const.Units_week
         period = gb.Week
         factor = 1
      Case const.Units_fortnight
         period = gb.Week
         factor = 2
      Case const.Units_month
         period = gb.Month
         factor = 1
   End Select
   For i = 1 To num_appts
      the_date = DateAdd(start_date, period, i * factor)
      row = New CRow
      For Each j In data
         row[data.Key] = j
      Next
      Appointment_Process_Time(row, the_date, appt_time)
      If Not Appointment_Save(row, True) Then Return ' stop making appointments if a clash
   Next 
   
End

Public Sub Appointment_Process_Time(row As Crow, appt_date As Date, appt_time As String)
   
   Dim appointment_times As String[]
   Dim start_time As String[]
   Dim end_time As String[]
   Dim start_hour_as_24hrtime As Integer
   Dim end_hour_as_24hrtime As Integer
   Dim starttime As Date
   Dim endtime As Date
   
   Appointment_times = Split(appt_time, "-") 'gives eg Appointment_times[0]=12:10:AM,   Appointment_times[1]=01:00:PM
   Try start_time = Split(Appointment_times[0], ":")
   Try end_time = Split(Appointment_times[1], ":")
   '-------------------------------------------------------
   'multiple appointment slots, convert back to 24hour time
   '-------------------------------------------------------
   If Appointment_times.count > 1 Then
      '-------------------------------------------------------------
      'first convert the start appointment time to 24hour date/time
      '-------------------------------------------------------------
      If InStr(Appointment_times[0], "AM") Then                      'start time in morning, keep hours
         start_hour_as_24hrtime = Val(start_time[0])
      Else
         If Val(start_time[0]) < 12 Then
            start_hour_as_24hrtime = start_time[0] + 12                'convert to 24 hour time if in afternoon
         Else
            start_hour_as_24hrtime = Val(start_time[0])
         End If
      Endif
      starttime = Date(Year(appt_date), Month(appt_date), Day(appt_date), start_hour_as_24hrtime, Val(start_time[1]))
      row!begin = Format$(starttime, "dd/mm/yyyy hh:nn")
      '-------------------------------------------------------------
      'second convert the end appointment time to 24hour date/time
      '-------------------------------------------------------------
      If InStr(Appointment_times[1], "AM") Then                      'start time in morning, keep hours
         end_hour_as_24hrtime = Val(end_time[0])
      Else
         If Val(end_time[0]) < 12 Then
            end_hour_as_24hrtime = end_time[0] + 12                  'convert to 24 hour time if in afternoon
         Else
            end_hour_as_24hrtime = Val(end_time[0])
         End If
      Endif
      EndTime = Date(Year(appt_date), Month(appt_date), Day(appt_date), end_hour_as_24hrtime, Val(end_time[1]))
      row!duration = Str(Abs(DateDiff(starttime, EndTime, gb.Minute))) & " minutes"
   Else                                                                 'only one appointment slot
      If InStr(Appointment_times[0], "AM") Then                      'start time in morning, keep hours
         start_hour_as_24hrtime = Val(start_time[0])
      Else
         If Val(start_time[0]) < 12 Then
            start_hour_as_24hrtime = start_time[0] + 12                'convert to 24 hour time if in afternoon
         Else
            start_hour_as_24hrtime = Val(start_time[0])
         End If
      Endif
      starttime = Date(Year(appt_date), Month(appt_date), Day(appt_date), start_hour_as_24hrtime, Val(start_time[1]))
      row!begin = Format$(starttime, "dd/mm/yyyy hh:nn")
   Endif
   
End

'''Save an appointment

Public Function Appointment_Save(row As CRow, Optional bCheckSlotTaken As Boolean = True) As Boolean
   
   Dim r As Result
   
   If bCheckSlotTaken Then
      modDBConnect.exec_query("LOCK TABLE clerical.bookings IN SHARE ROW EXCLUSIVE MODE")
      r = modDBConnect.exec_query("select * from clerical.bookings where (timestamp &1,&2::interval) overlaps (begin,duration) and deleted is not true and fk_staff = &3", [row!begin, row!duration, row!fk_staff])
      If r.Count > 0 Then
         If Message.Question("Existing appointment at this time", "Proceed", "Cancel") = 2 Then
            Return False
         Endif
      Endif
   End If
   row.Save("clerical.bookings", "pk")
   Return True
   
End

'''Mark appointment as deleted
Public Sub Appointment_Delete(row As Crow)
   
   modDBConnect.exec_query("update clerical.bookings set deleted='t' where pk = " & row!pk)
   
End
