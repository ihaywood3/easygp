' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'------------------------------------------------------------------------------------------
' PURPOSE        : Allow allocation of incoming documents to a staff member
'                  A document could be scanned paper or photograph, an image file form HDD
'                  an automatically downloaded HL7 file
' HOW THIS WORKS : At boot up loads an instance of FDocumentMetadata form and sets up the
'                : gui of this for allocation of a document to a staff member, a patient
'                 or a sender (company - aka organisation, employee or company, a person as
'                 a sole trader, another patient, or a staff member
' BUGS           : Please report
' TODO           : Splitting PDF's back into single pages
'                : Sending files to library
'                : the 'too hard basket' ie those we just don't know where to put
'                : the 'last 20' or so Horsts suggestion in case staff think 'oops'
'                ; the up/down buttons to re-arrange order of pages to be joined
'------------------------------------------------------------------------------------------
Private obs As Observer
Private bExit As Boolean
Private PDForm As FPdf
Private FMetaData As FDocumentMetaData
Private Default_Zoom As Float
Private local_fname As String
Private remote_fname As String
Private filechooser1 As FileChooser
Private listbox1 As ListBox
Private frmContacts As FContacts
Static Private Form_Document_Archive As FArchiveDocuments

Public Sub Init()

   Dim d As String

   Form_Document_Archive = Me
   d = modAdminDBI.Config_Get("document_scanning_directory", "/var/lib/easygp/scanning", Null, modDBConnect.currentUser!fk_clinic)
   If Exist(d) Then
      FileChooser1 = New FileChooser(VBox8) As "FileChooser1"
      With FileChooser1
         .Root = d
         .ShowDetailed = True
         .ReadOnly = True
         obs = New Observer(.FileView) As "FileList"      'over-ride the menu on the file list with our own
         .Expand = True
         .ShowFile = False
         .ShowButton = False
      End With
      listbox1 = Null
   Else
      listbox1 = New ListBox(VBox8) As "ListBox1"
      listbox1.Expand = True
      FileChooser1 = Null
      obs = New Observer(listbox1) As "FileList"      'over-ride the menu on the file list with our own
   Endif
   With FMetaData = New FDocumentMetaData(Vbox_Metadata)
      .Set_Embedded_Form_Name("Scanning")
      .Init("UnAllocated Documents")                  'gui allows allocation to staff, patient, sender"
   End With
   With frmContacts = New FContacts(Vbox_Contacts)
        .txtSearchByCategory.Visible = False
        .txtSearchByOccupation.Visible = False  
        .lblSearchCategory.Visible = False   
        .lblSearchOrganisationPerson.Visible = False  
        .lblSearchOccupation.Visible = False
        .lblState.visible = False 'won't fit in cramped space
        .txtState.Visible = False ''won't fit in cramped space
   End With   
   With PDForm = New FPdf(Vbox_Viewer)
      .BtOpen.Visible = False                      'don't allow external files to be opened
      .btZoomIn.Visible = True
      .btZoomOut.Visible = True
      .BtPrint.Visible = True
      .BtPrint.Enabled = True
      .btRotate.Enabled = True
      .btRotate.Visible = True
   End With
   obs = New Observer(FMetaData.txtDocumentDate) As "txtDocumentDate"      'detect when <enter> hit and file the document
   Settings_Load()
   Reload_FileList()

End

Public Sub Form_Close()

   modUtil.Kill_If_Temp(local_fname)
   Form_Document_Archive = Null

End

Public Sub txtDocumentDate_Activate()

   Stop Event
   If Last.tag = "document date" Then
      tbFile_Click()
   Endif

End

Public Sub filelist_Keypress()

   If key.code = key.return Then
      Stop Event
      FMetaData.SetTxtFocus()
   Endif

End

Public Sub Settings_Save()

   Settings["FArchiveDocuments/VSplit_Archiving.Layout"] = VSplit_Archiving.Layout
   Settings["FArchiveDocuments/HSplit_Archiving.Layout"] = HSplit_Archiving.Layout
   Settings["FArchiveDocuments/pdfZoom"] = PDForm.CurrentZoom
   Settings["FArchiveDocuments/VSplit1.Layout"] = VSplit1.Layout

End

Private Sub Settings_Load()

   VSplit_Archiving.Layout = Settings["FArchiveDocuments/VSplit_Archiving.Layout", modUtil.VSplit([643, 323])]
   HSplit_Archiving.Layout = Settings["FArchiveDocuments/HSplit_Archiving.Layout", modUtil.HSplit([784, 923])]
   Default_Zoom = Settings["FArchiveDocuments/pdfZoom", 1.0]
   VSplit1.Layout = Settings["FArchiveDocuments/VSplit1.Layout", modUtil.VSplit([511, 131])]
   lvFilestojoin.Font = Font[Settings["FArchiveDocuments/lvfilesToJoin.font", "DejaVu Sans,9"]]

End

Public Sub ListBox1_Click()

   If IsNull(listbox1.Current) Then Return
   remote_fname = listbox1.Current.Text
   modUtil.Kill_If_Temp(local_fname)
   local_fname = modFiles.Get("document_scanning_directory", remote_fname)
   Common_Click()

End

' this is the code point at which there is no difference between using a ListBox
' or a FileChooser
Private Sub Common_Click()

   FMetaData.EditArea_Clear()
   Inc Application.Busy
   If File.Ext(local_fname) <> "" Then
      Select Case LCase(File.Ext(local_fname))
         Case "pdf"
            Vbox_Images.Visible = False
            PDForm.Visible = True
            PDForm.hPdf.Orientation = PdfDocument.Normal 'may have been rotated last time.
            PDForm.PBox.Visible = True
            PDForm.CurrentZoom = Default_Zoom
            PDForm.Load_PDF(local_fname, False, False)
         Case "png", "PNG", "jpeg", "tiff", "tif", "gif", "jpg", "JPG", "JPEG", "GIF", "TIF", "TIFF"
            PDForm.Visible = False
            Vbox_Images.Visible = True
            pbox.Visible = True
            pbox.Picture = Picture.Load(local_fname)
         Case Else
            'Message.Info("Unknown file type")
      End Select
      FMetaData.SetFilename(local_fname)
   End If
   Dec Application.Busy

End

Public Sub FileChooser1_Activate()

   FileChooser1_Change()

End

Public Sub ListBox1_Select()

   ListBox1_Click()

End

Public Sub FileChooser1_Change()

   If IsNull(FileChooser1.SelectedPath) Or If FileChooser1.SelectedPath = "" Then Return
   local_fname = FileChooser1.SelectedPath
   remote_fname = Right$(local_fname, - Len(FileChooser1.Root)) ' emulate the remote mode with path relative to document_scanning_directory
   Common_Click()

End

Public Sub btZoomIn_Click()

   Vbox_Picture.padding = Min(Vbox_Picture.Padding + 10, VBox_ScannedDocument.width - 20)

End

Public Sub btZoomOut_Click()

   Vbox_Picture.padding = Max(Vbox_Picture.Padding - 10, 10)

End

Public Sub tbFile_Click()
   '---------------------------------------------------------
   'file the document, reload files, set focus, show next doc
   '---------------------------------------------------------

   Dim audit_notes As String

   tbFile.enabled = False
   Wait  
   audit_notes = "scanned document was allocated by " & modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename
   If FMetaData.Save() Then   'if successfully save, leave audit trail as to whole filed it
      If Not IsNull(FMetaData.Get_Consult()) Then
         modAudit.MakeAudit(FMetaData.Get_Consult(), "scanned document imported", "documents.documents", FMetaData.Get_fk_Document(), const.cSection_Documents, audit_notes)
      End If
      modDBConnect.CommitTrans()
      Reload()
   Else
      modDBConnect.RollBack()                          'roll back transaction FIXME does this work?
   End If
   Wait
   tbFile.enabled = True

End

Public Sub tbMultiPagefiles_Click()

   If IsNull(local_fname) Then Return
   Select Case Last.tag
      Case "add"
         If File.Ext(local_fname) = "pdf" Then
            lvfilesToJoin.Add(local_fname, remote_fname) ' on a local system the value of these are both the full path
            lblFilesToJoin_UpdateCount()
         Endif
      Case "remove"
         If lvFilestojoin.count = 0 Then Return
         lvFilestojoin.MoveCurrent()
         lvfilesToJoin.Remove(lvFilestojoin.Item.key)
         Try lvFilestojoin.MoveFirst()
         lblFilesToJoin_UpdateCount()
   End Select

End

Public Sub lblFilesToJoin_UpdateCount()

   If lvfilesToJoin.count <> 0 Then
      lblFilesToJoin.text = "Files to join (" & Str(lvfilesToJoin.count) & ")"
   Else
      lblFilesToJoin.text = "Files to join"
   End If

End

Public Sub lvFilesToJoin_Select()

   lvFilestojoin.MoveCurrent()
   Try PDForm.Load_PDF(Last.key, False, False)

End

Public Sub JoinPDF()
   'IAN READ THE COMMENTS ON THE LINES BELOW to explain what happens on a local machine using a file chooser.

   Dim pdf_files As New Collection
   Dim file_to_join As String
   Dim fname As String
   Dim x As Integer

   If lvFilestojoin.count = 0 Then Return
   fname = Temp$ & ".pdf"
   lvFilestojoin.MoveFirst
   For x = 0 To lvFilestojoin.count - 1
      pdf_files.Add(lvFilestojoin.Item.Key, pdf_files.count)
      lvFilestojoin.MoveNext
   Next
   fname = modPrinting.Join_PDF(pdf_files, fname)  'join the files together
   lvFilestojoin.MoveFirst                         'then remove them from the HDD
   For x = 0 To lvFilestojoin.count - 1
      modFiles.Delete("document_scanning_directory", lvFilestojoin.Item.Text)
      lvFilestojoin.MoveNext
   Next
   lvfilesToJoin.Clear()
   lblFilestoJoin.text = "Files to join"
   local_fname = fname
   remote_fname = File.Name(fname)
   modFiles.Put("document_scanning_directory", remote_fname, local_fname)
   If Not IsNull(FileChooser1) Then FileChooser1.Reload()
   FMetaData.SetFilename(local_fname)
   PDForm.Load_PDF(local_fname, False, False)

End


Public Sub FileList_Menu()

   Stop Event
   mnuFileChooser.Popup

End

Public Sub mnuFileChooser_Click()

   Dim sFile As String

   Select Case Last.tag
      Case "reload"
         Reload_FileList()
      Case "delete single"
         File_Delete()
      Case "delete multiple"
      Case "move to library"
         Move_To_Library()
      Case "rotate 180 and save"
         Rotate_And_Save(180)
      Case "rotate 90 and save"
         Rotate_And_Save(90)
      Case "rename file"

      Case "split"
         SplitPDF()
      Case "remove first"
         RemoveFirstPageFromPDF()
      Case "remove and split"
         RemoveFirstPageFromPDF()
         SplitPDF()
   End Select

End

Public Sub Rotate_And_Save(amount As Integer)

   Dim Step1File As String = Temp$() & ".pdf"
   Dim BackupFile As String = Temp$() & ".pdf"
   Dim result As String
   Dim pdftool As String

   If File.Ext(local_fname) <> "pdf" Then Return
  
   Copy local_fname To backupfile
  
   Select Case amount
      Case 180
          pdftool = modUtil.FindProgram("pdf180", "pdfjam")
          If IsNull(pdftool) Then Return
      Case 90
         pdftool = modUtil.FindProgram("pdf90", "pdfjam")
         If IsNull(pdftool) Then Return
   End Select      
   Exec [pdftool, "--outfile", Step1File, local_fname] To result
      If Access(Step1File) Then
         Kill local_fname
         Copy Step1File To local_fname
         If Not Error Then
            Kill Step1File
            Kill backupfile
         Else
            Copy backupfile To local_fname
         End If
      Else
         Log.ErrorMsg("pdf rotation failed: " & result)
         Message.Error("pdf rotation failed to run: " & result)
      Endif
   PDForm.Load_PDF(local_fname, False, False)
Catch
   modUtil.ReportError(Error.Text, Error.Backtrace)
End




Public Sub RemoveFirstPageFromPDF()

   Dim Step1File As String = Temp$() & ".pdf"
   Dim BackupFile As String = Temp$() & ".pdf"
   Dim result As String
   Dim pdftool As String
   Dim filepattern As String

   If File.Ext(local_fname) <> "pdf" Then Return
   pdftool = modUtil.FindProgram("pdftk", "pdftk")
   If IsNull(pdftool) Then Return
   Copy local_fname To backupfile
   Exec [pdftool, local_fname, "cat", "2-end", "Output", Step1File] To result 
     If Access(Step1File) Then
         Kill local_fname
         Copy Step1File To local_fname
         If Not Error Then
            Kill Step1File
            Kill backupfile
         Else
            Copy backupfile To local_fname
         End If
      Else
         Log.ErrorMsg("pdfseparate failed: " & result)
         Message.Error("pdfseparate failed to run: " & result)
      Endif
   PDForm.Load_PDF(local_fname, False, False)
Catch
   modUtil.ReportError(Error.Text, Error.Backtrace)

End


Public Sub SplitPDF()

   Dim BackupFile As String = Temp$() & ".pdf"
   Dim result As String
   Dim pdftool As String
   Dim filepattern As String
   Dim firstpage As String

   If File.Ext(local_fname) <> "pdf" Then Return
   pdftool = modUtil.FindProgram("pdfseparate", "pdfjam")
   If IsNull(pdftool) Then Return
   Copy local_fname To backupfile
   filepattern = local_fname & "-%d.pdf"
   Exec [pdftool, local_fname, filepattern] To result
   firstpage = local_fname & "-1.pdf"
   If Access(firstpage) Then
      Try Kill backupfile
      Try Kill local_fname
   Endif
   local_fname = firstpage
   Reload_FileList()
   PDForm.Load_PDF(local_fname, False, False)
Catch
   modUtil.ReportError(Error.Text, Error.Backtrace)
End

Public Sub Reload()

   FMetaData.EditArea_Clear()
   PDForm.Visible = False
   pbox.Visible = False
   FMetaData.cmbStafftype.index = -1
  ' FMetaData.chkLockPatient.value = False
  ' FMetaData.chkLockSender.value = False
   local_fname = Null
   remote_fname = Null
   Reload_FileList()

End

Private Sub Reload_FileList()

   Dim i As String
   Dim hCtrl As Control
   Dim cv As ColumnView

   If IsNull(listbox1) Then
      FileChooser1.Reload()
      For Each hctrl In filechooser1.FileView.Children           'move to the first item in the files list FIXME MOVES TO THE SECOND.
         If hctrl Is ColumnView Then
            cv = hctrl
            If Not cv.MoveFirst() Then  'could be empty
               cv.Item.Selected = True
               cv.SetFocus()
               FileChooser1_Activate()
               Break
            End If
         End If
      Next

   Else
      listbox1.Clear()
      For Each i In modFiles.List("document_scanning_directory")
         listbox1.Add(i)
      Next
   Endif

End

Public Sub LibraryMenu_Construct()

   Dim root_dir As String = User.home & "/easygp/library"
   Dim sFile As String
   Dim mnu As Menu

   If IsDir(root_dir) Then
      For Each sFile In Dir(root_dir)
         If IsDir(root_dir & "/" & sFile) Then
            mnu = New Menu(mnuFileChooser_MoveToLibrary)
            mnu.Name = sFile
            mnu.text = sFile
            mnu.tag = sFile
         Endif
      Next
   End If

End

Public Sub Move_To_Library()

End

Public Sub File_Delete()

   If IsNull(local_fname) Then Return
   If Not IsNull(remote_fname) And remote_fname <> local_fname Then
      modFiles.Delete("document_scanning_directory", remote_fname)
      Reload_FileList()
   Else
      Try Kill local_fname
   Endif
   If Error Then
      Message.Info("An error occurred whilst attempting to delete the file.")
   Endif
   PDForm.PBox.Visible = False
   pbox.Visible = False

End

Public Sub lvFilesToJoin_Menu()

   If Last.count Then mnuJoinFiles.Popup()

End

Public Sub mnuJoinFiles_Click()

   Select Case Last.tag
      Case "remove"
         lvFilestojoin.MoveCurrent()
         lvFilestojoin.Remove(lvfilesToJoin.item.key)
         Try lvfilesToJoin.MoveFirst()
         If Not Error Then
            lvfilesToJoin.SetFocus()
         Else
            lvfilesToJoin.Clear()
         Endif
      Case "help"
         modUtil.NotImplemented("Help for this section")
      Case "font"
         modUtil.Listview_SetFont(lvfilesToJoin, "FArchiveDocuments")
   End Select

End

Public Sub tbFile_KeyPress()

   If key.code = key.Return Then
      tbFile_Click()
   Endif

End

Public Sub tbJoin_Click()

   Select Case Last.tag
      Case "join"
         JoinPDF()
      Case "clear"

         lvFilestojoin.Clear()
         lblFilestoJoin.text = "Files to join"
   End Select

End

Public Sub tbDiscard_Click()

   If Message.Question("Are you sure you want to delete this document") = 1 Then
      File_Delete()
   End If

End

Public Sub VBox8_MouseDown()

   

End
