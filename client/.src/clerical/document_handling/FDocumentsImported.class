' Gambas class file

' Copyright (C) 2008-2014 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

'----------------------------------------------------------------------------------------
' PURPOSE         Allow clerical staff to search for existance of documents
'                 For example a patient may ring up and want to know if something is back
' HOW THIS WORKS  User may filter on dates or patient names
'                 Show list of documents displays document and any tasks attatched
' BUGS            Please report to rterry@internode.on.net.
' TODO'S          Make popup calandar buttons visible and fix code, implement LIMIT ctrl

'-----------------------------------------------------------------------------------------

Private Documents As Collection
Private Document As Collection
Private Documents_Filtered As Collection
Private From_Date As Date
Private To_Date As Date
Private form_metadata As FDocumentMetaData
Private FPreview_HtmlDocument As FHtmlViewer             'The main html viewer for hl7
Private FDocumentTasks As FHtmlViewer
Private PDForm As FPdf                                   'View any PDF files here
Private Timer_Count As Integer
Private bExit As Boolean
Private pfile As String
Private fk_document As Integer

Public Sub Init()
   '------------------------------------------
   'Load embedded forms and settings setup gui
   '------------------------------------------
   
   With FPreview_HtmlDocument = New FHtmlViewer(HBox_HTML_Viewer)     'Form to show html of hl7 received
      .tbWebBrowserPrint.Visible = True
      .tbWebBrowserZoomOut.visible = True
      .tbWebBrowserZoomIn.visible = True
   End With
   With FDocumentTasks = New FHtmlViewer(Vbox_DocumentTasks)          'Form to show html of any associated tasks
      .tbWebBrowserZoomOut.visible = True
      .tbWebBrowserZoomIn.visible = True
   End With
   With PDForm = New FPdf(Vbox_PDf)                              'Pdf form to show any scanned doc's
      .BtOpen.Visible = False
      .BtPrint.Visible = True
      .btZoomIn.Visible = True
      .btZoomOut.Visible = True
   End With
   Settings_Load()
   cvwDocumentsImported.Columns.Count = 3
   cvwDocumentsImported.Columns[0].Text = "Patient"
   cvwDocumentsImported.Columns[1].Text = "Date"
   cvwDocumentsImported.Columns[2].Text = "Document"
   With form_metadata = New FDocumentMetaData(VBox_Metadata)     'Set up gui for document metadata cf scanning
      .Init("Allocated Documents")
      .Enabled = False
   End With
   txtDateFrom.text = Format(DateAdd(Now(), gb.month, -1), "dd/mm/yyyy") 'default to the last months records
   txtDateTo.text = Format(Now, "dd/mm/yyyy") '
   Reload()
   
End

Public Sub EditAreaButtons_Click()
   
   Dim hCtrl As Control
   Dim txtbox As TextBox
   
   Select Case Last.tag
         
      Case "pick date"
         For Each Hctrl In Last.parent.children
            If hctrl Is Textbox Then
               txtbox = hctrl
               DateChooser1.tag = txtbox
               Break
            End If
         Next
         With HBox_Calander
            .top = Last.Parent.top + Last.Parent.Height
            .left = Last.Parent.left
            .Raise()
            .Visible = True
            DateChooser1.SetFocus()
         End With
      Case "refresh"
         Reload()
   End Select
   
End

Public Sub DateChooser1_Activate()
   
   Last.tag.text = Format(Last.value, "dd/mm/yyyy")
   HBox_Calander.Visible = False
   Select Case Last.tag.tag
      Case "from"
         txtDateTo.setfocus()
      Case "to"
         
   End Select
   
End

Public Sub Settings_Save()
   
   Settings["FDocumentsImported/HSplit1.Layout"] = HSplit1.Layout
   Settings["FDocumentsImported/VSplit1.Layout"] = VSplit1.Layout
   Settings["FDocumentsImported/VSplit_RightSide.Layout"] = VSplit_RightSide.Layout
   Settings["FDocumentsImported/pdfZoom"] = PDForm.CurrentZoom
   Settings["FDocumentsImported/HTML_Document_Zoom"] = FPreview_HtmlDocument.Webview1.Zoom
   Settings["FDocumentsImported/HTML_Tasks_Zoom"] = FDocumentTasks.Webview1.Zoom
   
End

Private Sub Settings_Load()
   
   HSplit1.Layout = Settings["FDocumentsImported/HSplit1.Layout", modUtil.HSplit([844, 843])]
   VSplit1.Layout = Settings["FDocumentsImported/VSplit1.Layout", modUtil.VSplit([548, 398])]
   PDForm.CurrentZoom = Settings["FDocumentsImported/pdfZoom", 1.0]
   VSplit_RightSide.Layout = Settings["FDocumentsImported/VSplit_RightSide.Layout", modUtil.VSplit([750, 196])]
   FPreview_HtmlDocument.Webview1.Zoom = Settings["FDocumentsImported/HTML_Document_Zoom", 1.0]
   FDocumentTasks.Webview1.Zoom = Settings["FDocumentsImported/HTML_Tasks_Zoom", 1.0]
   cvwDocumentsImported.font = Font[Settings["FDocumentsImported/cvwDocumentsImported.font", "DejaVu Sans,9"]]
   
End

Public Sub mnuDocumentsImported_Click()
   
   Select Case Last.tag
      Case "help"
         modUtil.NotImplemented("Help for this section")
      Case "font"
         modUtil.Columnview_SetFont(cvwDocumentsImported, "FDocumentsImported")
   End Select
   
End

Public Sub Reload()
   '----------------------------------------------------------------------------
   'Re- Loads the viewing list with recent document excluding deleted documents
   'from the backend, with optional filter on patient.
   'Note this is different from Documents_Refresh_List() which uses the
   'existing documents collection to filter patients on the contents of
   'txtFilterPtient ie not reloaded from the backend
   '----------------------------------------------------------------------------
   
   timer1.Stop
   
   If IsDate(txtDateFrom.text) Then
      From_Date = Val(txtDateFrom.text)
   Else
      txtDateFrom.SetFocus()
      Return
   Endif
   If IsDate(txtDateTo.text) Then
      To_Date = Val(txtDateto.text)
   Else
      to_Date = Now()
   End If
   txtDateFrom.Background = Color.White
   txtDateto.Background = Color.White
   txtFilterPatient.Background = Color.White
   txtFilterSender.Background = Color.White
   Inc Application.Busy
   If Trim(txtFilterPatient.text) <> "" Then
      Documents = modUtil.Copy_Collection_Keyed_Sequentially(modInboxDBI.Documents_Get(From_Date, To_Date, False, Trim(txtFilterPatient.text),, Trim(txtFilterDocumentTag.text)))
      If documents.Count Then Documents_Refresh_List()
   End If
   Dec Application.Busy
   
End

Public Sub Documents_Refresh_List()
   '---------------------------------------------------------
   'Refresh document list and apply filters
   'FIXME: filters not used at moment aside from patient name
   '---------------------------------------------------------
   
   Dim x As Integer
   
   cvwDocumentsImported.Clear()
   Documents_Filtered = New Collection
   For Each Document In Documents
      If Trim(txtFilterDocumentTag.text) = "" Then             'user not filtering?
         Document_Add(document, x)                     'just add all documents
         Inc x
      Else                                                'user is filtering
         If Not IsNull(Document!tag_user) Then            'prefer filter on a user tag
            If InStr(Lower(Document!tag_user), Lower(Trim(txtFilterDocumentTag.text))) Then
               Document_Add(document, x)
               Inc x
            Endif
         Else
            If InStr(Lower(Document!tag), Lower(Trim(txtFilterDocumentTag.text))) Then
               Document_Add(document, x)
               Inc x
            Endif
         Endif
      End If
   Next
   lblMeasure.font = cvwDocumentsImported.Font
   modUtil.Columnview_Columns_Set_Size(cvwDocumentsImported, lblmeasure)
   If cvwDocumentsImported.count Then
      cvwDocumentsImported.MoveFirst()
      cvwDocumentsImported.Item.Selected = True
   End If
   Catch
      Return
End

Public Sub Document_Add(document As Collection, x As Integer)
   '--------------------------------------------------------------
   'Add a document to the columnview:patient:documentdate:user tag
   'keeps a copy of all displayed documents in new collection
   'so that if user clicks on filtered list then can still display
   'the correct document using a 0>n based key
   '--------------------------------------------------------------
   
   cvwDocumentsImported.Add(x, 0)
   If Not IsNull(Document!fk_patient) Then
      cvwDocumentsImported[x][0] = Document!patient_surname & ", " & Document!patient_firstname
   Else
      cvwDocumentsImported[x][0] = "??" & Document!unmatched_patient_surname & ", " & Document!unmatched_patient_firstname & "??"
   End If
   cvwDocumentsImported[x][1] = Format(Document!date_created, "dd/mm/yyyy") & "  "
   If Document!concluded = False Then
      cvwDocumentsImported[x][2] = "**UNFILED** "
   Endif
   If Not IsNull(Document!tag_user) Then
      cvwDocumentsImported[x][2] &= Document!tag_user
   Else
      cvwDocumentsImported[x][2] &= Document!tag
   End If
   Documents_Filtered.Add(document, Documents_Filtered.count)
   
End

Public Sub EditAreaTextBox_KeyRelease()
   
   timer1.Stop
   Select Case Last.tag
      Case "filter sender"
         ' Documents_Refresh_List()
      Case "filter patient"
         timer_count = 0 'don't search for patient whilst typing
         timer1.Start
      Case "filter document"
         Documents_Refresh_List
   End Select
   
End

Public Sub txtFilterPatient_LostFocus()
   
   If Last.tag = "filter patient" Then timer1.Stop
   
End

Public Sub timer1_Timer()
   
   If bexit Then Return
   Inc timer_count
   
   If timer_count > 2 Then  'FIXME MAKE THESE USER CONFIGURABLE PER TYPING SPEED
      bExit = True
      timer_count = 0
      timer1.stop
      Reload()
      bExit = False
   Endif
   
End

Public Sub cvwDocumentsImported_Select()
   '--------------------------------------------
   'Either user has clicked on the document list
   'or Reload() as set first document on list
   '--------------------------------------------
   
   If Not cvwDocumentsImported.count Then Return
   cvwDocumentsImported.MoveCurrent()
   
   With form_metadata
      .set_comms(modContactsDBI.person_comms_get(documents_filtered[cvwDocumentsImported.Item.key]!fk_person))
      '.Edit(documents_filtered, cvwDocumentsImported.Item.key) 'bug here
      .Edit(documents_filtered[cvwDocumentsImported.Item.key])
   End With
   fk_document = documents_filtered[cvwDocumentsImported.Item.key]!pk_document
   Document_Display()
   
End

Public Sub Document_Display()
   '-------------------
   'Displays a document
   '-------------------
   
   Dim filename As String = documents_filtered[cvwDocumentsImported.item.key]!source_file
   Dim sMsg As String
   
   Inc application.Busy
   Select Case File.Ext(filename)
      Case "pdf"
         VBox_HTML_Viewer.Visible = False
         Vbox_Images.Visible = False
         Vbox_PDF.Visible = True
         PDForm.Load_PDF(modFiles.Get("document_archiving_directory", filename))
      Case "jpg", "png", "bmp", "jpeg", "tiff"
         VBox_HTML_Viewer.Visible = False
         Vbox_PDf.Visible = False
         Vbox_Images.visible = True
         modUtil.Kill_If_Temp(pfile)
         pfile = modFiles.Get("document_archiving_directory", filename)
         Pbox.picture = Picture.Load(pfile)
      Case Else 'must be html
         Vbox_PDF.Visible = False
         Vbox_Images.visible = False
         VBox_HTML_Viewer.Visible = True
         lblSendingEntity.text = documents_filtered[cvwDocumentsImported.item.key]!msh_sending_entity
         FPreview_HtmlDocument.webview1.HTML = documents_filtered[cvwDocumentsImported.item.key]!html
   End Select
   'Are there any staff tasks?
   If modDBConnect.exec_query("Select * from clerical.tasks where fk_row=" & documents_filtered[cvwDocumentsImported.item.key]!pk_document).count Then
      btnShowTasks.enabled = True
   Else
      sMsg = "NO "
      btnShowTasks.enabled = False
   Endif
   FDocumentTasks.WebView1.HTML = "<html><body>" & sMsg & " TASKS EXIST FOR THIS DOCUMENT</body></html>"
   Dec application.Busy
   
End

Public Sub EditAreaTextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   Last.Clear()
   If Last.tag = "filter patient" Then
      txtFilterDocumentTag.text = ""
      txtDateFrom.text = Format(DateAdd(Now(), gb.month, -1), "dd/mm/yyyy") 'default to the last months records
      txtDateTo.text = Format(Now, "dd/mm/yyyy") '
   Endif
   
End

Public Sub EditAreaTextBox_Change()
   
   If Last.tag = "filter patient" Then
      If Trim(Last.text) = "" Then
         Documents = New Collection
         cvwDocumentsImported.Clear()
      End If
   Endif
   
End

Public Sub Form_Close()
   
   modUtil.Kill_If_Temp(pfile)
   
End

Public Sub cvwDocumentsImported_Menu()
   
   If cvwDocumentsImported.count Then
      mnuDocumentsImported.popup()
   Endif
   
End

Public Sub btnShowTasks_Click()
   
   Inc Application.Busy
   FDocumentTasks.WebView1.html = modArchiveDocumentsDBI.Audit_Trail_Show_Document_Details_Tasks_Attatched(fk_document, True) 'True=no document detailis
   Dec Application.Busy
   
End

Public Sub EditAreaTextBox_Activate()
   
   Reload()
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Dim bKeyValid As Boolean
   
   Select Case tag
      Case "filter patient", "filter document"
         bKeyValid = True
      Case "from", "to"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub EditAreaTextBox_KeyPress()

   Dim bKeyValid As Boolean
   
   bkeyvalid = EditAreaTextBox_ExcludeKeys(key.code, Last.tag)
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   
End

Public Sub EditAreaTextBox_LostFocus()
   
   Last.BackGround = Color.white
   
End
