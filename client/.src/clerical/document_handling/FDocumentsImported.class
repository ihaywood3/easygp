' Gambas class file

' Copyright (C) 2008-11 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

'----------------------------------------------------------------------------------------
' PURPOSE         Allow clerical staff to search for existance of documents
'                 For example a patient may ring up and want to know if something is back
' HOW THIS WORKS  User may filter on dates or patient names
'                 Show list of documents displays document and any tasks attatched 
' BUGS            Please report to rterry@internode.on.net.
' TODO'S          Make popup calandar buttons visible and fix code, implement LIMIT ctrl

'-----------------------------------------------------------------------------------------

Private Documents As Collection
Private Document As Collection
Private From_Date As Date
Private To_Date As Date
Private form_metadata As FDocumentMetaData
Private FPreview_HtmlDocument As FHtmlViewer             'The main html viewer for hl7
Private FDocumentTasks As FHtmlViewer
Private PDForm As FPdf                                   'View any PDF files here
Private Timer_Count As Integer
Private bExit As Boolean
Private pfile As String 

 
Public Sub Init()
   '------------------------------------------
   'Load embedded forms and settings setup gui
   '------------------------------------------
   
   FPreview_HtmlDocument = New FHtmlViewer(HBox_HTML_Viewer)     'Form to show html of hl7 received
   FDocumentTasks = New FHtmlViewer(Vbox_DocumentTasks)          'Form to show html of any associated tasks
   With PDForm = New FPdf(Vbox_PDf)                              'Pdf form to show any scanned doc's
      .BtOpen.Visible = False
   End With
   Settings_Load()
   cvwDocumentsImported.Columns.Count = 3
   cvwDocumentsImported.Columns[0].Text = "Patient"
   cvwDocumentsImported.Columns[1].Text = "Date"
   cvwDocumentsImported.Columns[2].Text = "Document"
   With form_metadata = New FDocumentMetaData(VBox_Metadata)     'Set up gui for document metadata cf scanning
      .Init("Allocated Documents")
      .Enabled = False  
   End With
   txtDateFrom.text = Format(DateAdd(Now(), gb.month, -1), "dd/mm/yyyy") 'default to the last months records
   txtDateTo.text = Format(Now, "dd/mm/yyyy") ' 
   Reload()
   
End

Public Sub EditAreaButtons_Click()
   
   Dim hCtrl As Control
   Dim txtbox As TextBox
   
   Select Case Last.tag
         
      Case "pick date"
         For Each Hctrl In Last.parent.children
            If hctrl Is Textbox Then
               txtbox = hctrl
               DateChooser1.tag = txtbox
               Break
            End If
         Next 
         With HBox_Calander
            .top = Last.Parent.top + Last.Parent.Height
            .left = Last.Parent.left
            .Raise()
            .Visible = True   
            DateChooser1.SetFocus()
         End With     
      Case "refresh"
         Reload()
   End Select
   
End

Public Sub DateChooser1_Activate()
   
   Last.tag.text = Format(Last.value, "dd/mm/yyyy")
   HBox_Calander.Visible = False  
   Select Case Last.tag.tag
      Case "from"
         txtDateTo.setfocus()
      Case "to"
         
   End Select
   
End

Public Sub DateChooser1_LostFocus()
   
   ' HBox_Calander.visible = False  
   
End

Public Sub Settings_Save()
   
   Settings["Clerical_Review_Documents/HSplit1.Layout"] = HSplit1.Layout
   Settings["Clerical_Review_Documents/VSplit1.Layout"] = VSplit1.Layout
   Settings["Clerical_Review_Documents/VSplit_RightSide.Layout"] = VSplit_RightSide.Layout
   Settings["Clerical_Review_Documents/pdfZoom"] = PDForm.CurrentZoom
   Settings["Clerical_Review_Documents/HTML_Document_Zoom"] = FPreview_HtmlDocument.Webview1.Zoom
   Settings["Clerical_Review_Documents/HTML_Tasks_Zoom"] = FDocumentTasks.Webview1.Zoom

End   

Private Sub Settings_Load()
   
   Try HSplit1.Layout = Settings["Clerical_Review_Documents/HSplit1.Layout"]
   Try VSplit1.Layout = Settings["Clerical_Review_Documents/VSplit1.Layout"]
   Try PDForm.CurrentZoom = Settings["Clerical_Review_Documents/pdfZoom", 1.0] 
   Try VSplit_RightSide.Layout = Settings["Clerical_Review_Documents/VSplit_RightSide.Layout"] 
   Try FPreview_HtmlDocument.Webview1.Zoom = Settings["Clerical_Review_Documents/HTML_Document_Zoom"] 
   Try FDocumentTasks.Webview1.Zoom = Settings["Clerical_Review_Documents/HTML_Tasks_Zoom"] 
   
End

Public Sub Reload()
   '----------------------------------------------------------------------------
   'Re- Loads the viewing list with recent document excluding deleted documents
   'from the backend, with optional filter on patient.
   'Note this is different from Documents_Refresh_List() which uses the
   'existing documents collection to filter patients on the contents of
   'txtFilterPtient ie not reloaded from the backend
   '---------------------------------------------------------------------------- 
     
   If IsDate(txtDateFrom.text) Then
      From_Date = Val(txtDateFrom.text)
   Else
      Message.Info("Please select a valid from date")
      Return
   Endif
   If IsDate(txtDateTo.text) Then
      To_Date = Val(txtDateto.text)
   Else
      to_Date = Now()
   End If  
   Inc Application.Busy
   If Trim(txtFilterPatient.text) <> "" Then 
      Documents = modInboxDBI.Documents_Get(From_Date, To_Date, False, Trim(txtFilterPatient.text))
   End If   
   Documents_Refresh_List()
   Dec Application.Busy
   
End 

Public Sub Documents_Refresh_List()
   '---------------------------------------------------------
   'Refresh document list and apply filters
   'FIXME: filters not used at moment aside from patient name
   '---------------------------------------------------------

   Dim sFilter As String 
   Dim bits_patient As String[]
  
   
   If Trim(txtFilterPatient.text) = "" Then
      Return  
   Else
      sFilter = "P"
      bits_patient = Split(Trim(Lower(txtFilterPatient.text)), ",")
   End If
   If IsDate(Trim(txtDOB.text)) Then sFilter &= "DOB"
   If Trim(txtFilterSender.text) <> "" Then sFilter &= "S"
   
   cvwDocumentsImported.Clear()
   For Each Document In Documents
      'could be filtered on patient and/or say sender and or   
       
      Select Case sFilter
         Case "P"
            
            If bits_patient.count = 1 Then 
               If Left(Lower(document!patient_surname), Len(bits_patient[0])) = bits_patient[0] Then
                  Document_Add(document)
               End If
            Else
               If Left(Lower(document!patient_surname), Len(bits_patient[0])) = bits_patient[0] And Left(Lower(document!patient_firstname), Len(bits_patient[1])) = bits_patient[1] Then
                  Document_Add(document)
               End If   
            Endif
            
         Case "PS"
            If bits_patient.count = 1 Then 
               If Left(Lower(document!patient_surname), Len(bits_patient[0])) = bits_patient[0] And InStr(Lower(document!msh_sending_entity), Trim(Lower(txtFilterSender.text))) Then   
                  Document_Add(document)
               End If
            Else
               If (Left(Lower(document!patient_surname), Len(bits_patient[0])) = bits_patient[0] And Left(Lower(document!patient_firstname), Len(bits_patient[1])) = bits_patient[1]) And InStr(Lower(document!msh_sending_entity), Trim(Lower(txtFilterSender.text))) Then
                  Document_Add(document)
               End If   
            End If
         Case Else
            'no filters
            Document_Add(document)
      End Select
   Next
   txtFilterPatient.width = cvwDocumentsImported.Columns[0].Width
   txtDOB.width = cvwDocumentsImported.Columns[1].Width
   txtFilterSender.width = cvwDocumentsImported.Columns[2].Width
   If cvwDocumentsImported.count Then 
      cvwDocumentsImported.MoveFirst()
      cvwDocumentsImported.Item.Selected = True
   End If   

End

Public Sub Document_Add(document As Collection)
   '--------------------------------------------------------------
   'Add a document to the columnview:patient:documentdate:user tag
   '--------------------------------------------------------------   
   
   cvwDocumentsImported.Add(Document!pk_document, 0)
   If Not IsNull(Document!fk_patient) Then 
         cvwDocumentsImported[Document!pk_document][0] = Document!patient_surname & ", " & Document!patient_firstname
   Else
      cvwDocumentsImported[Document!pk_document][0] = "??" & Document!unmatched_patient_surname & ", " & Document!unmatched_patient_firstname & "??"
   End If  
   cvwDocumentsImported[Document!pk_document][1] = Format(Document!date_created, "dd/mm/yyyy")
   cvwDocumentsImported[Document!pk_document][2] = Document!tag_user

End

Public Sub EditAreaTextBox_KeyRelease()
   
   Select Case Last.tag
      Case "filter sender"
         Documents_Refresh_List()
      Case "filter patient"
         timer_count = 0 'don't search for patient whilst typing
         timer1.Start
   End Select
   
End


Public Sub txtFilterPatient_LostFocus()
   
   If Last.tag = "filter patient" Then timer1.Stop
   
End

Public Sub timer1_Timer()

   If bexit Then Return 
   Inc timer_count
   
   If timer_count > 2 Then  'FIXME MAKE THESE USER CONFIGURABLE PER TYPING SPEED
      bExit = True   
      timer_count = 0
      timer1.stop
      Reload()
      bExit = False  
   Endif
   
End

Public Sub cvwDocumentsImported_Select()
   '--------------------------------------------
   'Either user has clicked on the document list
   'or Reload() as set first document on list
   '--------------------------------------------

   cvwDocumentsImported.MoveCurrent()
   form_metadata.Edit(Documents, cvwDocumentsImported.item.key)
   Document_Display()
   
End

Public Sub Document_Display()
   '-------------------
   'Displays a document 
   '-------------------
   
   Dim filename As String = documents[cvwDocumentsImported.item.key]!source_file
   Dim currentobservations As Collection 
   Dim shtml As String 
   
   Inc application.Busy
   Select Case File.Ext(filename)
      Case "pdf"
         VBox_HTML_Viewer.Visible = False 
         Vbox_Images.Visible = False   
         Vbox_PDF.Visible = True
         PDForm.Load_PDF(modFiles.Get("document_archiving_directory", filename))
      Case "jpg", "png", "bmp", "jpeg", "tiff"
         VBox_HTML_Viewer.Visible = False 
         Vbox_PDf.Visible = False
         Vbox_Images.visible = True
         modUtil.Kill_If_Temp(pfile)
         pfile = modFiles.Get("document_archiving_directory", filename)
         Pbox.picture = Picture.Load(pfile)
         
      Case Else 'must be html
         Vbox_PDF.Visible = False  
         Vbox_Images.visible = False  
         VBox_HTML_Viewer.Visible = True 
         lblSendingEntity.text = documents[cvwDocumentsImported.item.key]!msh_sending_entity
         FPreview_HtmlDocument.webview1.HTML = documents[cvwDocumentsImported.item.key]!html
   End Select
   FDocumentTasks.WebView1.html = modArchiveDocumentsDBI.Staff_Tasks_Document_Audit_Trail(cvwDocumentsImported.item.key, True) 'True=no document detailis
   Dec application.Busy
   
End

Public Sub EditAreaTextBox_GotFocus()

   Documents = New Collection
   Last.Clear()

End

Public Sub EditAreaTextBox_Change()

   If Last.tag = "filter patient" Then
      If Trim(Last.text) = "" Then
         Documents = New Collection
         cvwDocumentsImported.Clear()
      End If 
   Endif

End

Public Sub Form_Close()
   
  modUtil.Kill_If_Temp(pfile) 
   
End
