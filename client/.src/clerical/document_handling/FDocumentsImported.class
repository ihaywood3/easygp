' Gambas class file
' Copyright (C) 2008-10 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

'------------------------------------------------------------------------------------------
' PURPOSE        : Allow clerical staff to search for existance of documents
'                  for example a patient may ring up and want to know if something is back
' HOW THIS WORKS : 
' BUGS           : Please report
' TODO           : everything
'----------------------------------------------------------------------------------------

Private Documents As Collection
Private Document As Collection
Private From_Date As Date
Private To_Date As Date
Private form_metadata As FDocumentMetaData

Public Sub Init()

   txtDateFrom.text = Format(DateAdd(Now(), gb.month, -1), "dd/mm/yyyy")
   txtDateTo.text = Format(Now, "dd/mm/yyyy")
   cvwDocumentsImported.Columns.Count = 8
   cvwDocumentsImported.Columns[0].Text = "Patient"
   cvwDocumentsImported.Columns[1].Text = "DOB"
   cvwDocumentsImported.Columns[2].Text = "Sender" 'letter or result
  ' cvwDocumentsImported.Columns[3].Text = "Type" 'letter or result
  ' cvwDocumentsImported.Columns[4].Text = "Date"
   'cvwDocumentsImported.Columns[5].Text = "Description"
   'cvwDocumentsImported.Columns[6].Text = "User Tag"
  ' cvwDocumentsImported.Columns[7].Text = "Intended For"
   With form_metadata = New FDocumentMetaData(VBox_Metadata)
      .Init("Allocated Documents")
   End With
   ' 
   ' 
   ' 
   
   Reload()
   
End

Public Sub EditAreaButtons_Click()

   Dim hCtrl As Control
   Dim txtbox As TextBox

   Select Case Last.tag
         
      Case "pick date"
         For Each Hctrl In Last.parent.children
            If hctrl Is Textbox Then
               txtbox = hctrl
               DateChooser1.tag = txtbox
               Break
            End If
         Next 
         With HBox_Calander
            .top = Last.Parent.Parent.top + Last.Parent.Height
            .left = Last.Parent.left
            .Raise()
         End With     
         
         DateChooser1.Parent.Visible = True 
         DateChooser1.Parent.Raise 
         
   End Select
   
End

Public Sub DateChooser1_Activate()

   Last.tag.text = Format(Last.value, "dd/mm/yyyy")
   HBox_Calander.Visible = False  
   Select Case Last.tag.tag
      Case "from"
         txtDateTo.setfocus()
      Case "to"
   End Select

End

Public Sub DateChooser1_LostFocus()

   DateChooser1.visible = False  

End

Public Sub Settings_Save()
   
End

Public Sub Settings_Load()
   
End

Public Sub Reload()
   '--------------------------------------------
   'Loads the viewing list with recent documents
   '-------------------------------------------- 
   
   If IsDate(txtDateFrom.text) Then
      From_Date = Val(txtDateFrom.text)
   Else
      Message.Info("Please select a valid from date")
      Return
   Endif
   If IsDate(txtDateTo.text) Then
      To_Date = Val(txtDateto.text)
   Else
      to_Date = Now()
   End If  
   Inc Application.Busy
   Documents = modInboxDBI.Documents_Get(From_Date, To_Date, False)
   Documents_Refresh_List()
   Dec Application.Busy

End 

Public Sub Documents_Refresh_List()
   
   Dim sFilter As String 

   Dim bits_patient As String[]
   If Trim(txtFilterPatient.text) <> "" Then
      sFilter = "P"
      bits_patient = Split(Trim(Lower(txtFilterPatient.text)), ",")
   End If
   If IsDate(Trim(txtDOB.text)) Then sFilter &= "DOB"
   If Trim(txtFilterSender.text) <> "" Then sFilter &= "S"
   
   cvwDocumentsImported.Clear()
   For Each Document In Documents
      'could be filtered on patient and/or say sender and or      
      Select Case sFilter
         Case "P"
            
            If bits_patient.count = 1 Then 
               If Left(Lower(document!patient_surname), Len(bits_patient[0])) = bits_patient[0] Then
                  Document_Add(document)
               End If
            Else
               If Left(Lower(document!patient_surname), Len(bits_patient[0])) = bits_patient[0] And Left(Lower(document!patient_firstname), Len(bits_patient[1])) = bits_patient[1] Then
                  Document_Add(document)
               End If   
            Endif
            
         Case "PS"
            If bits_patient.count = 1 Then 
                  If Left(Lower(document!patient_surname), Len(bits_patient[0])) = bits_patient[0] And InStr(Lower(document!msh_sending_entity), Trim(Lower(txtFilterSender.text))) Then   
                     Document_Add(document)
                  End If
            Else
                     If (Left(Lower(document!patient_surname), Len(bits_patient[0])) = bits_patient[0] And Left(Lower(document!patient_firstname), Len(bits_patient[1])) = bits_patient[1]) And InStr(Lower(document!msh_sending_entity), Trim(Lower(txtFilterSender.text))) Then
                        Document_Add(document)
                     End If   
            End If
         Case Else
            'no filters
            Document_Add(document)
      End Select
   Next
   '    If Trim(txtFilterSender.text) <> "" Then     
   '       If InStr(Lower(Document!msh_sending_entity), Lower(Trim(txtFilterSender.text))) Then
   '         Document_Add(document)
   '       Endif
   '    Else
   '      Document_Add(document)
   '    End If
   ' Next
   txtFilterPatient.width = cvwDocumentsImported.Columns[0].Width
   txtDOB.width = cvwDocumentsImported.Columns[1].Width
   txtFilterSender.width = cvwDocumentsImported.Columns[2].Width
   
End

Public Sub Document_Add(document As Collection)
   
   cvwDocumentsImported.Add(Document!pk_document, 0)
   If Not IsNull(Document!fk_patient) Then 
      cvwDocumentsImported[Document!pk_document][0] = Document!patient_surname & ", " & Document!patient_firstname
      cvwDocumentsImported[Document!pk_document][1] = Format(Document!patient_birthdate, "dd/mm/yyyy")
   Else
      cvwDocumentsImported[Document!pk_document][0] = "??" & Document!unmatched_patient_surname & ", " & Document!unmatched_patient_firstname & "??"
      cvwDocumentsImported[Document!pk_document][1] = Format(Document!unmatched_patient_birthdate, "dd/mm/yyyy")
   End If  
   cvwDocumentsImported[Document!pk_document][2] = Document!msh_sending_entity
   '  cvwDocumentsImported[Document!pk_document][2] = Document!originator
   cvwDocumentsImported[Document!pk_document][3] = Document!style
   cvwDocumentsImported[Document!pk_document][4] = Format(Document!date_created, "dd/mm/yyyy")
   Select Case Document!fk_lu_display_as
      Case const.Document_Display_As_Letter
         cvwDocumentsImported[Document!pk_document][5] = Document!tag
         
      Case const.Document_Display_As_Result
         cvwDocumentsImported[Document!pk_document][5] = Document!tag & " [ordered by " & Document!originator & "]"
         
   End Select
   
   cvwDocumentsImported[Document!pk_document][6] = Document!tag_user
   cvwDocumentsImported[Document!pk_document][7] = Document!staff_name
   
End

Public Sub EditAreaTextBox_KeyRelease()

   Select Case Last.tag
      Case "filter sender"
         Documents_Refresh_List()
      Case "filter patient"
         Documents_Refresh_List()
   End Select
   
End

Public Sub cvwDocumentsImported_Select()
   
   form_metadata.Edit(Documents, Last.item.key)
   
End
