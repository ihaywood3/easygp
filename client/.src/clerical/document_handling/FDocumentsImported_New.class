' Gambas class file

' Copyright (C) 2008-2014 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

'----------------------------------------------------------------------------------------
' PURPOSE         Allow clerical staff to search for existance of documents
'                 For example a patient may ring up and want to know if something is back
' HOW THIS WORKS  User may filter on dates or patient names
'                 Show list of documents displays document and any tasks attatched
' BUGS            Please report to rterry@internode.on.net.
' TODO'S          Make popup calandar buttons visible and fix code, implement LIMIT ctrl

'-----------------------------------------------------------------------------------------
Private Documents As Collection
Private Document As Collection
Private Documents_Filtered As Collection
Public form_metadata As FDocumentMetaData
Private FPreview_HtmlDocument As FHtmlViewer             'The main html viewer for hl7
Private FDocumentTasks As FHtmlViewer
Private PDF_Form As FPdf                                   'View any PDF files here
Private bExit As Boolean
Private pfile As String
Private fk_document As Integer
Private patient As Collection
Private fk_patient As Integer

Public Sub Set_Patient(p As Collection)
   
   patient = p
   fk_patient = p!fk_patient  
   
End

Public Sub Init()
   '------------------------------------------
   'Load embedded forms and settings setup gui
   '------------------------------------------
   
   With FPreview_HtmlDocument = New FHtmlViewer(HBox_HTML_Viewer)     'Form to show html of hl7 received
      .tbWebBrowserPrint.Visible = True
      .tbWebBrowserZoomOut.visible = True
      .tbWebBrowserZoomIn.visible = True
   End With
   With FDocumentTasks = New FHtmlViewer(Vbox_DocumentTasks)          'Form to show html of any associated tasks
      .tbWebBrowserZoomOut.visible = True
      .tbWebBrowserZoomIn.visible = True
   End With
   With PDF_Form = New FPdf(Vbox_PDf)                              'Pdf form to show any scanned doc's
      .BtOpen.Visible = False
      .BtPrint.Visible = True
      .btZoomIn.Visible = True
      .btZoomOut.Visible = True
   End With
   Settings_Load()
   cvwDocumentsImported.Columns.Count = 2
   With form_metadata = New FDocumentMetaData(VBox_Metadata)     'Set up gui for document metadata cf scanning
      .Init("Allocated Documents")
      .Enabled = False
   End With
   
End

Public Sub Settings_Save()
   
   Settings["FDocumentsImported/HSplit1.Layout"] = HSplit1.Layout
   Settings["FDocumentsImported/VSplit1.Layout"] = VSplit1.Layout
   Settings["FDocumentsImported/VSplit_RightSide.Layout"] = VSplit_RightSide.Layout
   Settings["FDocumentsImported/pdfZoom"] = PDF_Form.CurrentZoom
   Settings["FDocumentsImported/HTML_Document_Zoom"] = FPreview_HtmlDocument.Webview1.Zoom
   Settings["FDocumentsImported/HTML_Tasks_Zoom"] = FDocumentTasks.Webview1.Zoom
   
End

Private Sub Settings_Load()
   
   HSplit1.Layout = Settings["FDocumentsImported/HSplit1.Layout", modUtilGUI.HSplit([844, 843])]
   VSplit1.Layout = Settings["FDocumentsImported/VSplit1.Layout", modUtilGUI.VSplit([548, 398])]
   PDF_Form.CurrentZoom = Settings["FDocumentsImported/pdfZoom", 1.0]
   VSplit_RightSide.Layout = Settings["FDocumentsImported/VSplit_RightSide.Layout", modUtilGUI.VSplit([750, 196])]
   FPreview_HtmlDocument.Webview1.Zoom = Settings["FDocumentsImported/HTML_Document_Zoom", 1.0]
   FDocumentTasks.Webview1.Zoom = Settings["FDocumentsImported/HTML_Tasks_Zoom", 1.0]
   cvwDocumentsImported.font = Font[Settings["FDocumentsImported/cvwDocumentsImported.font", "DejaVu Sans,9"]]
   
End

Public Sub mnuDocumentsImported_Click()
   
   Dim x As Integer
   Dim sMsg As String
   
   Select Case Last.tag
      Case "help"
         modUtilGUI.NotImplemented("Help for this section")
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwDocumentsImported, "FDocumentsImported")
      Case "print"
         For x = 0 To cvwDocumentsImported.Selection.count - 1
            Document_Print(documents[cvwDocumentsImported.Selection[x]])
         Next
         cvwDocumentsImported.UnselectAll()
      Case "print all"
         cvwDocumentsImported.SelectAll()
         If cvwDocumentsImported.Selection.count > 10 Then
            smsg = "You have selected " & Str(cvwDocumentsImported.Selection.count) & " documents.\n\n"
            "Are you sure you want to be party to cutting down more and more tree's to provide the paper for  you to do this?"
         Endif
         If Message.Question(sMsg, "Yes - Print the lot", "No - I've a social conscience") = 2 Then
            cvwDocumentsImported.UnselectAll()
            Return
         End If   
         For x = 0 To cvwDocumentsImported.Selection.count - 1
            Document_Print(documents[cvwDocumentsImported.Selection[x]])
         Next
         
   End Select
Catch
   Return
   
End

Public Sub Document_Print(document As Collection)
   '--------------------------------------------------------------
   'Print a document
   'All documents have a filename - but they are either PDF or HL7
   'Having got the document, print according to file extension
   'All our non scanned documents are html
   'FIXME: could be printing a picture
   '----------------------------------------------------------
   
   Select Case File.Ext(Document!source_file)
      Case "pdf"
         modPrinting.Print_PDF(modFiles.Get("document_archiving_directory", Document!source_file))
      Case "jpg", "png", "tiff", "jpeg", "bitmap"
         'FIX ME   TO PRINT A PICTURE
         
      Case Else
         Select Case Document!fk_lu_data_content_type
            Case const.cData_Type_Latex 
               modPrinting.Print_latex(document!data)
            Case const.cData_Type_HTML
               modPrinting.PrintHtml(Document!data)
            Case Else
               Message.Info("Unknown document data type - please notify the developers")
         End Select
   End Select
   
End

Public Sub Reload()
   '----------------------------------------------------------------------------
   'Re- Loads the viewing list with recent document excluding deleted documents
   'from the backend, with optional filter on patient.
   'Note this is different from Documents_Refresh_List() which uses the
   'existing documents collection to filter patients on the contents of
   'txtFilterPtient ie not reloaded from the backend
   '----------------------------------------------------------------------------
   
   Inc Application.Busy
   Documents = modUtil.Copy_Collection_Keyed_Sequentially(modInboxDBI.Documents_Get_All_For_Patient(fk_patient, rbResults.value, rbLetters.Value,,,, Trim(txtFilterDocumentTag.text)))
   
   If documents.Count Then Documents_Refresh_List()
   
   Dec Application.Busy
   
End

Public Sub Documents_Refresh_List()
   '---------------------------------------------------------
   'Refresh document list and apply filters
   'FIXME: filters not used at moment aside from patient name
   '---------------------------------------------------------
   
   Dim x As Integer
   
   With cvwDocumentsImported
      .Clear()
      .Visible = True   
   End With
   Documents_Filtered = New Collection
   For Each Document In Documents
      If Trim(txtFilterDocumentTag.text) = "" Then             'user not filtering on document tag
         If Trim(txtFilterSender.text) = "" Then               'if they are not filtering on sender
            Document_Add(document, x)                          'just add all documents
            Inc x                         
         Else                                                  'else if they are filtering on sender                   
            If InStr(Lower(Document!originator), Trim(txtFilterSender.text)) Then  
               Document_Add(document, x)                       'only include if sender matched
               Inc x
            Endif
         End If  
      Else                                                      'user is filtering on tag
         If Not IsNull(Document!tag_user) Then                  'prefer filter on a user tag
            If InStr(Lower(Document!tag_user), Lower(Trim(txtFilterDocumentTag.text))) Then
               If Trim(txtFilterSender.text) = "" Then          'no sender filter
                  Document_Add(document, x)
                  Inc x
               Else                                             'also filtering on sender
                  If InStr(Lower(Document!originator), Trim(txtFilterSender.text)) Then  
                     Document_Add(document, x)                       'only include if sender matched
                     Inc x
                  Endif
               End If
            Endif
         Else
            If InStr(Lower(Document!tag), Lower(Trim(txtFilterDocumentTag.text))) Then
               If Trim(txtFilterSender.text) = "" Then          'no sender filter
                  Document_Add(document, x)
                  Inc x
               Else                                             'also filtering on sender
                  If InStr(Lower(Document!originator), Trim(txtFilterSender.text)) Then  
                     Document_Add(document, x)                       'only include if sender matched
                     Inc x
                  Endif
               End If
            End If
         End If
      End If 
   Next
   lblMeasure.font = cvwDocumentsImported.Font
   modUtilGUI.Columnview_Columns_Set_Size(cvwDocumentsImported, lblmeasure)
   ' If cvwDocumentsImported.count Then
   '    cvwDocumentsImported.MoveFirst()
   '    cvwDocumentsImported.Item.Selected = True
   ' End If
   ' txtFilterDocumentTag.SetFocus
Catch
   Return
   
End

Public Sub Document_Add(document As Collection, x As Integer)
   '--------------------------------------------------------------
   'Add a document to the columnview:patient:documentdate:user tag
   'keeps a copy of all displayed documents in new collection
   'so that if user clicks on filtered list then can still display
   'the correct document using a 0>n based key
   '--------------------------------------------------------------
   
   Dim sSTring As String
   
   cvwDocumentsImported.Add(x, 0)
   sstring = Format(Document!date_created, "dd/mm/yyyy") & "  "
   If Document!concluded = False Then
      sstring &= "**UNFILED** "
   Endif
   If Not IsNull(Document!tag_user) Then
      If Len(Document!tag_user) > 79 Then 'arbitary but some path name combinations are long......
         sSTring &= Left(Document!tag_user, 70) & "...."
      Else
         sSTring &= Document!tag_user
      Endif
   Else
      sSTring &= Document!tag
   End If
   cvwDocumentsImported[x][0] &= sSTring
   cvwDocumentsImported[x][1] = document!originator
   Documents_Filtered.Add(document, Documents_Filtered.count)
   
End

Public Sub EditAreaTextBox_KeyRelease()
   
   Documents_Refresh_List()
   Last.SetFocus
   
End

Public Sub cvwDocumentsImported_Select()
   '--------------------------------------------
   'Either user has clicked on the document list
   'or Reload() as set first document on list
   '--------------------------------------------
   
   If Not cvwDocumentsImported.count Then Return
   cvwDocumentsImported.MoveCurrent()
   cvwDocumentsImported.Scrollx = 0
   With form_metadata
      .set_comms(modContactsDBI.person_comms_get(documents_filtered[cvwDocumentsImported.Item.key]!fk_person))
      .Edit(documents_filtered[cvwDocumentsImported.Item.key])
   End With
   fk_document = documents_filtered[cvwDocumentsImported.Item.key]!pk_document
   Document_Display()
   
End

Public Sub Document_Display()
   '-------------------
   'Displays a document
   '-------------------
   
   Dim filename As String = documents_filtered[cvwDocumentsImported.item.key]!source_file
   Dim sMsg As String
   Dim currentobservations As Collection
   Dim SelectedDocument As Collection = documents_filtered[cvwDocumentsImported.item.key]
   Dim shtml As String
   
   Inc application.Busy
   Select Case File.Ext(filename)
      Case "pdf"
         VBox_HTML_Viewer.Visible = False
         Vbox_Images.Visible = False
         Vbox_PDF.Visible = True
         PDF_Form.Load_PDF(modFiles.Get("document_archiving_directory", filename))
      Case "jpg", "png", "bmp", "jpeg", "tiff"
         VBox_HTML_Viewer.Visible = False
         Vbox_PDf.Visible = False
         Vbox_Images.visible = True
         modUtil.Kill_If_Temp(pfile)
         pfile = modFiles.Get("document_archiving_directory", filename)
         Pbox.picture = Picture.Load(pfile)
      Case Else 'could be html latex or other
         lblSendingEntity.text = documents_filtered[cvwDocumentsImported.item.key]!msh_sending_entity
         Select Case documents_filtered[cvwDocumentsImported.item.key]!fk_lu_data_content_type
            Case const.cData_Type_HTML
               Vbox_PDF.Visible = False
               Vbox_Images.visible = False
               VBox_HTML_Viewer.Visible = True
               If IsNull(documents_filtered[cvwDocumentsImported.item.key]!tag_user) Then 'this is an unfiled document
                  FPreview_HtmlDocument.webview1.HTML = Unfiled_Document_Html(documents_filtered[cvwDocumentsImported.item.key])
               Else
                  FPreview_HtmlDocument.webview1.HTML = documents_filtered[cvwDocumentsImported.item.key]!data
               End If 
            Case const.cData_Type_Latex
               Vbox_PDF.Visible = True
               Vbox_Images.visible = False
               VBox_HTML_Viewer.Visible = False
               PDF_Form.Load_PDF(modPrinting.Latex_To_PDF(documents_filtered[cvwDocumentsImported.item.key]!data))
            Case Else
               'no data content type, could be unfiled result/letter
               If SelectedDocument!fk_lu_message_standard = const.document_message_standard_hl7 Then  
                  CurrentObservations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & SelectedDocument!pk_document & " ORDER BY observations.observation_date, set_id")
                  shtml = modHL7Process.Construct_HTML(patient, SelectedDocument, currentobservations, SelectedDocument!exclude_pit, SelectedDocument!exclude_ft_report, SelectedDocument!fk_lu_message_display_style, SelectedDocument!abnormals_foreground_color, SelectedDocument!abnormals_background_color)
                  sHtml = Replace(shtml, "%filingas%", "")
                  sHtml = Replace(shtml, "** UNFILED **:", "")
                  Vbox_PDF.Visible = False
                  Vbox_Images.visible = False
                  VBox_HTML_Viewer.Visible = True
                  FPreview_HtmlDocument.webview1.HTML = sHtml
               Else  
                  Message.Info("Unknown document data type - please notify the developers")
               End If  
         End Select
   End Select
   'Are there any staff tasks?
   If modDBConnect.exec_query("Select * from clerical.tasks where fk_row=" & documents_filtered[cvwDocumentsImported.item.key]!pk_document).count Then
      btnShowTasks.enabled = True
   Else
      sMsg = "NO "
      btnShowTasks.enabled = False
   Endif
   FDocumentTasks.WebView1.HTML = "<html><body>" & sMsg & " TASKS EXIST FOR THIS DOCUMENT</body></html>"
   Dec application.Busy
   
End

Public Sub Document_Display_29July14()
   '-------------------
   'Displays a document
   '-------------------
   
   Dim filename As String = documents_filtered[cvwDocumentsImported.item.key]!source_file
   Dim sMsg As String
   
   Inc application.Busy
   Select Case File.Ext(filename)
      Case "pdf"
         VBox_HTML_Viewer.Visible = False
         Vbox_Images.Visible = False
         Vbox_PDF.Visible = True
         PDF_Form.Load_PDF(modFiles.Get("document_archiving_directory", filename))
      Case "jpg", "png", "bmp", "jpeg", "tiff"
         VBox_HTML_Viewer.Visible = False
         Vbox_PDf.Visible = False
         Vbox_Images.visible = True
         modUtil.Kill_If_Temp(pfile)
         pfile = modFiles.Get("document_archiving_directory", filename)
         Pbox.picture = Picture.Load(pfile)
      Case Else 'could be html latex or other
         lblSendingEntity.text = documents_filtered[cvwDocumentsImported.item.key]!msh_sending_entity
         Select Case documents_filtered[cvwDocumentsImported.item.key]!fk_lu_data_content_type
            Case const.cData_Type_HTML
               Vbox_PDF.Visible = False
               Vbox_Images.visible = False
               VBox_HTML_Viewer.Visible = True
               If IsNull(documents_filtered[cvwDocumentsImported.item.key]!tag_user) Then 'this is an unfiled document
                  FPreview_HtmlDocument.webview1.HTML = Unfiled_Document_Html(documents_filtered[cvwDocumentsImported.item.key])
               Else
                  FPreview_HtmlDocument.webview1.HTML = documents_filtered[cvwDocumentsImported.item.key]!data
               End If 
            Case const.cData_Type_Latex
               Vbox_PDF.Visible = True
               Vbox_Images.visible = False
               VBox_HTML_Viewer.Visible = False
               PDF_Form.Load_PDF(modPrinting.Latex_To_PDF(documents_filtered[cvwDocumentsImported.item.key]!data))
            Case Else
               Message.Info("Unknown document data type - please notify the developers")
         End Select
   End Select
   'Are there any staff tasks?
   If modDBConnect.exec_query("Select * from clerical.tasks where fk_row=" & documents_filtered[cvwDocumentsImported.item.key]!pk_document).count Then
      btnShowTasks.enabled = True
   Else
      sMsg = "NO "
      btnShowTasks.enabled = False
   Endif
   FDocumentTasks.WebView1.HTML = "<html><body>" & sMsg & " TASKS EXIST FOR THIS DOCUMENT</body></html>"
   Dec application.Busy
   
End

Public Function Unfiled_Document_Html(SelectedDocument As Collection) As String
   '---------------------------------------------------------------------
   'Create missing html from unfiled document and return as string   
   'Dims included for readability in passing to the ModHl7Process routine
   '---------------------------------------------------------------------  
   
   Dim bExcludeFTReport As Boolean = SelectedDocument!exclude_ft_report
   Dim bExcludePIT As Boolean = SelectedDocument!exclude_pit
   Dim fgc As Integer = SelectedDocument!abnormals_foreground_color
   Dim bgc As Integer = SelectedDocument!abnormals_background_color
   Dim display_style As Integer = SelectedDocument!fk_lu_message_display_style
   Dim sHtml As String
   Dim currentobservations As Collection
   
   CurrentObservations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & SelectedDocument!pk_document & " ORDER BY observations.observation_date, set_id")
   shtml = modHL7Process.Construct_HTML(Patient, SelectedDocument, currentobservations, bExcludePIT, bExcludeFTReport, display_style, fgc, bgc)
   sHtml = Replace(shtml, "%filingas%", "")
   sHtml = Replace(shtml, "** UNFILED **:", "")
   Return shtml
   
End

Public Sub EditAreaTextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   Last.Clear()
   
End

Public Sub Form_Close()
   
   modUtil.Kill_If_Temp(pfile)
   
End

Public Sub cvwDocumentsImported_Menu()
   
   If cvwDocumentsImported.count Then
      mnuDocumentsImported.popup()
   Endif
   
End

Public Sub btnShowTasks_Click()
   
   Inc Application.Busy
   FDocumentTasks.WebView1.html = modArchiveDocumentsDBI.Audit_Trail_Show_Document_Details_Tasks_Attatched(fk_document, True) 'True=no document detailis
   Dec Application.Busy
   
End

Public Sub EditAreaTextBox_Activate()
   
   Reload()
   
End

Public Sub EditAreaTextBox_LostFocus()
   
   Last.BackGround = Color.white
   
End

Public Sub rbDocumentType_Click()
   
   If fk_patient Then Reload()
   
End
