' Gambas module file

' Copyright (C) 2008-2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'Scanning module

Public Function Get_Document_Types() As Collection
   ' Return modDBConnect.exec_query_collection("Select pk, lower(split_part(category,' ', 1)) as category from contacts.lu_categories where lower(category) ILIKE $$%provider%$$")

   Dim doc_types As Collection
   Dim doc_type As Collection

   doc_types = modDBConnect.exec_query_collection("Select pk, category from contacts.lu_categories where lower(category) ILIKE $$%provider%$$")
   For Each doc_type In doc_types
      doc_type!category = Trim(Replace(doc_type!category, "provider", "", gb.IgnoreCase))
   Next
   Return doc_types

End

Public Function Re_Allocate_Recipient(pk_document As Integer, fk_staff_destination As Integer)

   Dim sql As String
   
   sql = "Update Documents.documents set fk_staff_destination = " & fk_staff_destination 
   sql &= ", fk_unmatched_staff = Null WHERE pk=" & pk_document
   modDBConnect.exec_query(sql)
   
End

Public Sub Document_Save_Filename(document As Collection)
   
   Dim sql As String

   sql = "Update documents.documents set source_file = $$" & document!source_file & "$$ WHERE pk = " & document!pk_document
   modDBConnect.exec_query(sql)
   
End

Public Function UnDelete(cons As Cconsult, pk_document As Integer, fk_section As Integer) As Boolean
   '-----------------------------------------------------------------------------------
   'Undeletes a document by changing deleted flag to false, returns true if successfull
   '-----------------------------------------------------------------------------------
   Dim D As New Collection
   
   D!deleted = False  
   D!pk_document = pk_document
   modArchiveDocumentsDBI.Save(d)
   If modAudit.MakeAudit(cons, "undelete", "documents.documents", pk_document, fk_section) Then 
        Return True
   End If   
   Return False
End

Public Function Change_Display_Mode(cons As Cconsult, documents As Collection, pk_document As Integer, fk_lu_display_as As Integer, fk_section As Integer, audit_action As String) As Boolean
   '----------------------------------------------------------------
   'Changes display from eg letter to result or certificate or image
   'Returns True if successful
   '----------------------------------------------------------------
   Dim D As New Collection 

   D!pk_document = pk_document
   D!fk_lu_display_as = fk_lu_display_as
   modArchiveDocumentsDBI.Save(d, documents[pk_document])
   If modAudit.MakeAudit(cons, "document display mode changed", "documents.documents", pk_document, fk_section, audit_action) Then 
      ' modDBConnect.CommitTrans()
       Return True
   End If   
   Return False  
  
End


Public Function Delete(cons As CConsult, documents As Collection, pk_document As Integer, fk_section As Integer, audit_action As String, audit_notes As String) As Boolean 
   '--------------------------------------------------------------------------------------  
   'Marks as deleted a current document, laying down audit trail, returns true if succeeds
   '--------------------------------------------------------------------------------------

   Dim D As New Collection 

   D!pk_document = pk_document
   D!deleted = True
   modArchiveDocumentsDBI.Save(d, documents[pk_document])
   If modAudit.MakeAudit(cons, audit_action, "documents.documents", pk_document, fk_section, audit_notes) Then 
      Return True
   End If   
   Return False
End

Public Function Save(document As Collection, Optional old_data As Collection) As Integer
   '---------------------------------------------------------------------------------------
   'Saves a documents metadata.
   'If the user wants the file saved to database, save blob first to blobs.blob table
   'document!data = "BLOB:/filenamepath"
   '---------------------------------------------------------------------------------------

   Dim data As Collection
   
   If IsNull(document!pk_document) Then  
      
      If Not IsNull(document!data) Then
         data = New Collection
         data!blob = document!data
         document.Remove("data")
         document!fk_blob = modDBConnect.insert("blobs.blobs", data)
      End If
      document!pk_document = modDBConnect.insert("documents.documents", document) 
   Else
      modDBConnect.update("documents.documents", old_data, document, "pk_document")
   End If
   Return document!pk_document

End

Public Sub Blob_Retrieve(pk As Integer, Optional file_extension As String = "") As String
   '-----------------------------------------------------------------------------
   'gets back blob data, names a temp file as per file_extension expected
   '---------------------------------------------------------------------------  

   Dim $Result As Collection
   Dim tempFile As String
   
   $Result = modDBConnect.exec_query_first("select data from blobs.blobs where pk = " & pk)
   If Not IsNull($Result)
      tempFile = Left$(Temp$($Result!pk), -4) ' knock off the .tmp added by Gambas
      If file_extension <> "" Then tempfile &= "." & file_extension
      File.Save(tempFile, $Result!data.data)
   End If
   Return tempFile

End

Public Sub Blobs_Backup(dest_cmd As String)
   ' does an incremental backup of blobs only
   ' dest_cmd is a shell command to send the blob file to where we want it to go
   ' all blobs created since the last time this command was run are sent
   ' {} within the command string is substituted with the blob filename
   ' example: scp {} easygp@remote-backup.com:/home/user/easygp-backup/

   Dim res As Result
   Dim fname As String
   
   res = modDBConnect.exec_query("select blobs.pk from blobs.blobs, blobs.backups group by blobs.pk having created_at >= max(done_at)")
   For Each res
      fname = Blob_Retrieve(res!pk)
      Shell Replace$(dest_cmd, "{}", fname) Wait
      Kill fname
   Next
   modDBConnect.exec_query("insert into blobs.backups (done_by) values (current_user)")
   modDBConnect.CommitTrans()
   
End

Public Function Inbox_Documents_Get(fk_staff_destination As Integer, fk_lu_type As Integer, Optional limit As Integer = 0) As Collection 
   '-----------------------------------------------------------------------------------------------------------
   'Return a collection of documents if fk_lu_type <> 0 then only of that type documents.lu_type table
   '-----------------------------------------------------------------------------------------------------------

   Dim sql As String

   sql = "Select * from Documents.vwDocuments where fk_staff_destination =" & fk_staff_destination
   If fk_lu_type > 0 Then
      sql &= " AND fk_lu_type = " & fk_lu_type
   End If
   sql &= " AND deleted = false and concluded = False "
   If limit Then
      sql &= "LIMIT " & limit
   End If   
   Return modDBConnect.exec_query_collection(sql)
   
End




Public Function Staff_Tasks_Document_Audit_Trail(fk_document As Integer, Optional bDontShowDocumentDetails As Boolean = False) As String
   '------------------------------------------------------------------------------------
   'Given a document pk, contruct a html page of any tasks associated with the document
   'the html sort of looks like this:
   'Put heading on top of page
   ' (unless bDontShowDocumentDetails = True for example in FDocumentsImported)
   '  DOCUMENT AUDIT TRAIL
   '  PATIENT: name and address
   '  DOCUMENT: document name
   '  location (filing status - in  inbox or filed)
   '  source file
   '  destination staff member
   '  what the document is about
   '------------------------------------------------------------------------------------
  
   Dim shtml As String
   Dim TasksAndNotes As Collection
   Dim TaskAndNote As Collection
   Dim sLastTask As String
   Dim sLastDetails As String  
   Dim allnotes As String
   Dim R1 As Result
   Dim R2 As Result 
   Dim sql As String 
   Dim bUnfiled As Boolean
   Dim document_user_tag As String 
   Dim sRowHTML As String
   
   If bDontShowDocumentDetails = False Then 
         r1 = modDBConnect.exec_query("select * from documents.vwDocuments where pk_document = " & fk_document)
            
         For Each R1
            sHTml = "<P align=center> <B><U> DOCUMENT AUDIT TRAIL</U></B></P>"
            sHtml &= "<B>PATIENT     :</B>" & R1!patient_firstname & " " & R1!patient_surname & " (" & R1!patient_sex & " " & R1!patient_age & " ) " 
            sHtml &= Trim(R1!patient_street1 & " " & R1!patient_street2) & " " & R1!patient_town & " " & R1!patient_state & " " & R1!patient_postcode & " DOB:" & R1!patient_birthdate & "<BR><BR>"
            If Not IsNull(R1!tag_user) Then
               document_user_tag = R1!tag_user
               If Right(document_user_tag) = ";" Then document_user_tag = Left(document_user_tag, Len(document_user_tag) - 1)
            Else
               document_user_tag = R1!tag
               bUnfiled = True   
            End If 
            sHtml &= "<B>DOCUMENT:  " & document_user_tag & "</B>"
            
            If R1!style = "result" Then
               sHtml &= " - " & R1!sending_entity_request_type & "<BR><BR> - Result"
            Else
               sHtml &= "<BR><BR> - Letter "
            Endif
            
            If bUnfiled Then
               sHtml &= " still in inbox and not filed<BR>"
            End If
            If Not IsNull(r1!date_requested) Then
               sHtml &= "- requested on " & Format(r1!date_requested, "dd/mm/yyyy") 
            Endif
            sHtml &= "- document originated from " & r1!originator
            If r1!msh_sending_entity <> "" Then 
               sHtml &= " and was sent by " & r1!msh_sending_entity & " imported on " 
            Else
               sHtml &= " and was scanned into the database by "
               sql = "Select * from clin_consult.vwProgressNotes where fk_row =" & fk_document 
               sql &= " AND fk_audit_action = " & const.cAuditAction_ScannedDocumentImported 
               R2 = modDBConnect.exec_query(sql)
               If R2.count Then
                  sHtml &= R2!title & " " & R2!firstname & " " & R2!surname & " (" & R2!role & ") on "
               Else
                  shtml &= "?? on "
               Endif
            End If
            sHtml &= Format(r1!imported_time, "dd/mm/yyyy:hh:nn:ss") & "<BR>"
            sHtml &= "- source file: " & r1!source_file & "<BR>"
            sHtml &= "- destination staff member was " & r1!staff_destination_wholename & "<BR>"
            sHtml &= "- document concerns: %summary" & "<BR><BR>"
            Break
         Next
   End If   
   '---------------------------------------------------------------------------------
   ' Now get all the tasks and accompanying notes, essentially in this format or rows
   ' This gives us a recordset looking something like this
   ' "Task Name";"Staff Member 1";"Task component 1";"Comment 1"
   ' "Task Name";"Staff Member 1";"Task component 1";"Comment 2"
   ' "Task Name";"Staff Member 2";"Task component 2";"Comment 1"
   ' "Task Name";"Staff Member 2";"Task component 2";"Comment 2"
   ' "Task Name";"Staff Member 2";"Task component 2";"Comment 3"
   '  plus dates etc
   '---------------------------------------------------------------------------------
   TasksAndNotes = modStaffTasksDBI.Tasks_And_Notes_Get(fk_document)
   '---------------------------------------------------------------------
   'If there are tasks attached to this document, put up the row headings
   'otherwise skip this, no rows will be added under these headings
   '---------------------------------------------------------------------
   If TasksAndNotes.count Then sHtml &= modHTML.Staff_Tasks_Audit_RowHeading()                                  'the column headings for the table
   For Each TaskAndNote In TasksAndNotes
      If InStr(sHtml, "%summary") Then
         sHtml = Replace$(sHtml, "%summary", TaskAndNote!task)                      'somewhat of a misnomer is this field = letter summary or request(s)
      Endif
      '----------------------------------------------------------
      'new task, new row, but put all components in the same cell
      '----------------------------------------------------------
      If sLastDetails <> TaskAndNote!details Then       
         '---------------------------------------------------------------------------------------------
         'On every change of component of a task, put into the appropriate cell, the last lot of notes
         '--------------------------------------------------------------------------------------------
         If allnotes <> "" Then
             shtml = Replace(shtml, "%notes", allnotes) & "<BR>" 
         Else
            shtml = Replace(shtml, "%notes", "")
         End If
         allnotes = ""                                                              'zero notes string
        ' sRowHTML = TableRow()
         sHtml &= modHTML.Staff_Tasks_Audit_TableRow()                           'add new templated row of html
         sLastDetails = TaskAndNote!details
         shtml = Replace(shtml, "%details", TaskAndNote!details)
         shtml = Replace(shtml, "%log_date", Format(TaskAndNote!date_component_logged, "dd/mm/yyyy"))
         shtml = Replace(shtml, "%staff_allocated", TaskAndNote!staff_allocated_title & " " & TaskAndNote!staff_allocated_wholename)
         '-------------------------------------------------
         'There may or may not be notes for this task
         'If there are, put in the date first then the note
         'e.g 10/12/2010  These are the notes
         '-------------------------------------------------
         If Not IsNull(TaskAndNote!date_note) Then
            allnotes &= "<B>" & Format(TaskAndNote!date_note, "dd/mm/yyyy") & "</B>: " & TaskAndNote!note & "<BR>"
         End If
         If TaskAndNote!date_component_completed <> Null Then
            shtml = Replace(shtml, "%finalised", Format(TaskAndNote!date_component_completed, "dd/mm/yyyy"))
         Else
            shtml = Replace(shtml, "%finalised", "%No")
         Endif
      Else
         '-----------------------------------------
         'Is still the same task, keep adding notes
         '-----------------------------------------
         allnotes &= "<B>" & Format(TaskAndNote!date_note, "dd/mm/yyyy") & "</B>: " & TaskAndNote!note & "<BR>"
      Endif
   Next
   '------------------------------------------------------------------------
   'At end of loop, the last component of a task, hasn't yet had notes saved
   '------------------------------------------------------------------------
   If allnotes <> "" Then                                            'may have some notes
      shtml = Replace(shtml, "%notes", allnotes) & "<BR>"            'if so put them in place of placeholder
   End If
   shtml = Replace(shtml, "%notes", "")                              'remove any un-used placeholders
   If InStr(shtml, "%summary") Then
     shtml = Replace(shtml, "- document concerns: %summary" & "<BR><BR>", "")
   End If   
   '----------------------------------------------
   'If there were tasks, check finalisation status
   '----------------------------------------------
   If TasksAndNotes.count Then 
      If InStr(sHtml, "%No") Then
         sHtml &= "<BR><B>Task Status</B>: Not Finalised"
         sHtml = Replace$(sHtml, "%No", "No")
      Else
         sHtml &= "<BR><B>Task Status</B>: Complete"
      Endif
      sHtml &= "<HR>"
   End If   
  ' sHtml = "<HTML><BODY><TABLE>" & shtml & "</TABLE><HR></BODY></HTML>"
   
   Return "<HTML><BODY><TABLE>" & shtml & "</TABLE></BODY></HTML>"
End

Public Function Document_SendBack_For_ReFiling(currentconsult As CConsult, documents As Collection, fk_document As Integer) As Boolean
   '------------------------------------------------------------------------------------
   'User has decided there is something wrong with document allocation they cannot fix
   'eg, wrongly joined pages etc, not just simple things like wrongly allocated patients
   'so they send it back to clerical for re-filing
   '------------------------------------------------------------------------------------   
   
   Dim sMsg As String
   Dim newdoc As Collection 
   Dim oldname As String
   Dim newname As String
   Dim sData As String
   
   Select Case documents[fk_document]!fk_lu_display_as
      Case const.Document_Display_As_Result 
        sData = documents[fk_document]!tag_user  
      Case const.Document_Display_As_Certificate
        
      Case const.Document_Display_As_Image
        
      Case const.Document_Display_As_Letter
        sData = documents[fk_document]!tag_user & " - " & documents[fk_document]!tag
   End Select
   
 
   sMsg = sData & "\n\nSend back for clerical to re-allocate?"
   If Message.Warning(sMsg, "Yes", "No") = 2 Then Return 
  ' modInboxDBI.Document_Mark_Deleted(document!pk_document)        'remove from circulation, sorry ian
   If Delete(currentconsult, documents, fk_document, const.cSection_Documents, const.sAuditAction[const.cAuditAction_Refile], sData) Then 
  
      oldname = modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/scanning", "Directories/scanning") &/ documents[fk_document]!source_file
      newname = modAdminDBI.Config_Get("document_scanning_directory", "/var/easygp/archiving", "Directories/archiving") &/ documents[fk_document]!source_file
      Try Move oldname To newname
      If Error Then
         Try Copy OldName To NewName
         If Not Error Then Kill OldName
      Endif
      If Not Error Then
         modDBConnect.CommitTrans()
         Return True
      Else
         Message.Error("An error occured and the file could not be re-allocated")
         modDBConnect.RollBack()
         Return False
      Endif
  End If 
   
End

Public Function Document_Get_By_pk(fk_document As Integer) As Collection
   
  Return modDBConnect.exec_query_first("Select * from documents.documents where pk=" & fk_document)
   
End
