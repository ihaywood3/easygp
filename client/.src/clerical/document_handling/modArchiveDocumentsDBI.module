' Gambas module file

' Copyright (C) 2008-2014 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

Public Function Get_Document_Types() As Collection
   
   Dim doc_types As Collection
   Dim doc_type As Collection
   
   doc_types = modDBConnect.exec_query_collection("Select pk, category from contacts.lu_categories where lower(category) ILIKE $$%provider%$$")
   For Each doc_type In doc_types
      doc_type!category = Trim(Replace(doc_type!category, "provider", "", gb.IgnoreCase))
   Next
   Return doc_types
   
End

Public Function Re_Allocate_Recipient(pk_document As Integer, fk_staff_destination As Integer)
   
   Dim sql As String
   
   sql = "Update Documents.documents set fk_staff_destination = " & fk_staff_destination
   sql &= ", fk_unmatched_staff = Null WHERE pk=" & pk_document
   modDBConnect.exec_query(sql)
   
End

Public Sub Re_Print_Letter(sHtml As String, Optional num_copies As Integer = 1)
   '--------------------------------------------------------------------------------
   'prints referral letter html to default plain paper printer
   'this field in the back end clin_referrals.referrals.letter_html is something now
   'of a misnomer because if can contain latex or html definition of the letter FIXME
   '-----------------------------------------------------------------------------------
   
   Dim x As Integer
   
   If sHtml Begins "\\documentclass" Then
      modPrinting.Print_latex(sHtml)
   Else
      sHtml = modConsultDBI.Images_Get(shtml)
      For x = 1 To num_copies
         modPrinting.PrintHtml(sHtml, const.Paper_Plain)
      Next
   Endif
   
End

Public Sub Document_Print(currentconsult As Cconsult, fk_document As Integer)
   '--------------------------------------------------------------
   'Print a document by its key
   'All documents have a filename - but they are either PDF or HL7
   '--------------------------------------------------------------
   
   Dim Document As Collection
   '---------------------------------------------------
   'Is the document a result?, if not, must be a letter
   'i.e decide which collection to pull them from
   '---------------------------------------------------
   Try Document = currentconsult!results_received[fk_document]         '? a result??
   If IsNull(document) Then                                            'it wasn't a result?
      Try Document = currentconsult!letters_received[fk_document]      '? a letter ??
   End If
   '----------------------------------------------------------
   'Having got the document, print according to file extension
   'All our non scanned documents are html
   'FIXME: could be printing a picture
   '----------------------------------------------------------
   Select Case File.Ext(Document!source_file)
      Case "pdf"
         modPrinting.Print_PDF(modFiles.Get("document_archiving_directory", Document!source_file))
      Case "jpg", "png", "tiff", "jpeg", "bitmap"
         
      Case Else
         '  modPrinting.PrintHtml(Document!html)
         
         Select Case Document!fk_lu_data_content_type
            Case const.cData_Type_Latex 
               modPrinting.Print_latex(document!data)
            Case const.cData_Type_HTML
               modPrinting.PrintHtml(Document!data)
            Case Else
               Message.Info("Unknown document data type - please notify the developers")
         End Select
   End Select
   
End

Public Sub Document_Save_Filename(document As Collection)
   
   Dim sql As String
   
   sql = "Update documents.documents set source_file = $$" & document!source_file & "$$ WHERE pk = " & document!pk_document
   modDBConnect.exec_query(sql)
   
End

Public Function UnDelete(cons As Cconsult, D As Collection, fk_section As Integer) As Boolean
   '-----------------------------------------------------------------------------------
   'Undeletes a document by changing deleted flag to false, returns true if successfull
   '-----------------------------------------------------------------------------------
   
   Dim Doc_Undelete As New Collection
   
   Doc_Undelete!deleted = False
   Doc_Undelete!pk_document = d!pk_document
   modArchiveDocumentsDBI.Save(Doc_Undelete)
   If modAudit.MakeAudit(cons, "undelete", "documents.documents", D!pk_document, fk_section, Audit_Trail_Make_Progress_notes("undelete", D)) Then
      Return True
   End If
   Return False
   
End

Public Function Change_Display_Mode(cons As Cconsult, document As Collection, fk_lu_display_as As Integer, fk_section As Integer, Optional audit_notes As String) As Boolean
   '---------------------------------------------------------------------------------
   'Changes display from eg letter to result or certificate or image
   'Returns True if successful, progress_note set to '' can probably be removed fixme
   '---------------------------------------------------------------------------------
   
   modDBConnect.update("documents.documents", Null, ["pk": document!pk_document, "fk_lu_display_as": fk_lu_display_as])
   If modAudit.MakeAudit(cons, "document display mode changed", "documents.documents", document!pk_document, fk_section, audit_notes) Then
      Return True
   End If
   Return False
   
End

Public Function Audit_Trail_Make_Progress_notes(audit_action As String, document As Collection) As String
   '------------------------------------------------
   'Used when deleting documents to make audit trail, note for historical reasons not all audit_actions
   'are in the lu_audit_actions table (nor are they needed") in this case file, routine appointement
   'and urgent appointment
   '------------------------------------------------
   
   Dim progress_notes As String                 'the notes put into clin_concult.progressnotes to visualise during if audits being viewed.
   Dim sAction As String                        'deleted,  undeleted etc
   Dim sTense As String = " was "
   
   Print document
   Select Case audit_action
      Case "file"
         Progress_notes = "Inbox Document"
         sAction = "viewed and filed with no action taken"
      Case "routine appointment"
         Progress_notes = "Inbox Document"
         sAction = "viewed and filed with auto-task generated for a routine appointment"
      Case "urgent appointment"
         Progress_notes = "Inbox Document"
         sAction = "viewed and filed with auto-task generated for an urgent appointment"
      Case "document metadata edited"
         progress_notes = "Existing document metadata"
         sAction = "edited"
      Case "return for re-filing" 
         progress_notes = "Inbox Document"
         sAction = "returned to clerical staff for re-filing"
      Case "delete - duplicate document"
         progress_notes = "Duplicate document"
         sAction = "deleted"  
      Case "delete - preliminary result"
         progress_notes = "Prelimary result"
         sAction = "deleted"  
      Case "mark deleted"
         If document!fk_lu_display_as = const.Document_Display_As_Letter Then 
            progress_notes = "Letter"
         Else
            progress_notes = "Result"
         End If   
         sAction = "deleted"  
      Case "undelete"
         progress_notes = "Previously deleted document"
         sAction = "undeleted"
      Case "staff task allocated"
         progress_notes = "Staff tasks related to a document"
         sAction = "allocated"
      Case "staff task finalised", "staff task finalised with explanation"
         progress_notes = "A Staff task related to a document"
         sAction = "finalised"
      Case "note on task"
         progress_notes = "Notes related to a document"
         sAction = "made"
         Stense = " were "
      Case "task component finalised"
         progress_notes = "A component of a staff task related to a document"
         sAction = "finalised"
      Case "staff task deleted"
         progress_notes = "A staff task related to a document "
         sAction = "deleted"
      Case "scanned document imported"
         progress_notes = "Document"
         sAction = "scanned"
   End Select
   progress_notes &= " which was dated " & Format(document!date_created, "dd/mm/yyyy")
   progress_notes &= " and was imported on " & Format(document!imported_time, "dd/mm/yyyy") 
   progress_notes &= sTense & sAction & " - the original document was sent by "
   If document!msh_sending_entity = "" Then 
      progress_notes &= document!originator
   Else
      progress_notes &= document!msh_sending_entity
   Endif
   If sAction <> "scanned" Then progress_notes &= " with the tag '" & document!tag & "' "
   If Not IsNull(document!tag_user) Then
      progress_notes &= " and the user tag was '" & document!tag_user
      If Right(progress_notes) = ";" Then
         progress_notes = Left(Progress_notes, Len(progress_notes) - 1)
      Endif
      progress_notes &= "'"
   Endif
   Return progress_notes   
   
End

Public Function Delete(cons As CConsult, document As Collection, fk_section As Integer, audit_action As String) As Boolean ', audit_notes As String) As Boolean
   '--------------------------------------------------------------------------------------
   'Marks as deleted a current document, laying down audit trail, returns true if succeeds
   'false if it does not. The calling routine does the commit  so that if it fails
   'other additional actions could be taken but FIXME could put this in here.
   '--------------------------------------------------------------------------------------
   
   modDBConnect.update("documents.documents", Null, ["pk": document!pk_document, "deleted": True])
   
   If modAudit.MakeAudit(cons, audit_action, "documents.documents", document!pk_document, fk_section, Audit_Trail_Make_Progress_notes(audit_action, document)) Then
      Return True
   End If
   
End

Public Function Document_New_Pk() As Variant
   '---------------------------------------------------------------------------
   'Get value of the next primary key, this won't be 'consumed' until committed
   '----------------------------------------------------------------------------   
   Return modDBConnect.exec_query_first("select nextval('documents.documents_pk_seq')")!nextval 
   
End

Public Function Save(document As Collection, Optional old_data As Collection) As Integer
   '---------------------------------------------------------------------------------------
   'Saves a documents metadata.
   'If the user wants the file saved to database, save blob first to blobs.blob table
   'document!data = "BLOB:/filenamepath" NB: THIS IS 100% UNTESTED fixme. I DON'T USE THIS
   '---------------------------------------------------------------------------------------
   
   Dim data As Collection
   
   If IsNull(document!pk_document) Then
      ' If Not IsNull(document!data) Then
      '    data = New Collection
      '    data!blob = document!data
      '    document.Remove("data")
      '    document!fk_blob = modDBConnect.insert("blobs.blobs", data)
      ' End If
      document!pk_document = modDBConnect.insert("documents.documents", document)
   Else
      modDBConnect.update("documents.documents", old_data, document, "pk_document")
   End If
   Return document!pk_document
   
End

Public Sub Blob_Retrieve(pk As Integer, Optional file_extension As String = "") As String
   '-----------------------------------------------------------------------------
   'gets back blob data, names a temp file as per file_extension expected
   '---------------------------------------------------------------------------
   
   Dim $Result As Collection
   Dim tempFile As String
   
   $Result = modDBConnect.exec_query_first("select data from blobs.blobs where pk = " & pk)
   If Not IsNull($Result)
      tempFile = Left$(Temp$($Result!pk), -4) ' knock off the .tmp added by Gambas
      If file_extension <> "" Then tempfile &= "." & file_extension
      File.Save(tempFile, $Result!data.data)
   End If
   Return tempFile
   
End

Public Sub Blobs_Backup(dest_cmd As String)
   ' does an incremental backup of blobs only
   ' dest_cmd is a shell command to send the blob file to where we want it to go
   ' all blobs created since the last time this command was run are sent
   ' {} within the command string is substituted with the blob filename
   ' example: scp {} easygp@remote-backup.com:/home/user/easygp-backup/
   
   Dim res As Result
   Dim fname As String
   
   res = modDBConnect.exec_query("select blobs.pk from blobs.blobs, blobs.backups group by blobs.pk having created_at >= max(done_at)")
   For Each res
      fname = Blob_Retrieve(res!pk)
      Shell Replace$(dest_cmd, "{}", fname) Wait
      Kill fname
   Next
   modDBConnect.exec_query("insert into blobs.backups (done_by) values (current_user)")
   modDBConnect.CommitTrans()
   
End

Public Function Inbox_Documents_Get(fk_staff_destination As Integer, fk_lu_type As Integer, Optional limit As Integer = 0) As Collection
   '-----------------------------------------------------------------------------------------------------------
   'Return a collection of documents if fk_lu_type <> 0 then only of that type documents.lu_type table
   '-----------------------------------------------------------------------------------------------------------
   
   Dim sql As String
   
   sql = "Select * from Documents.vwDocuments where fk_staff_destination =" & fk_staff_destination
   If fk_lu_type > 0 Then
      sql &= " AND fk_lu_type = " & fk_lu_type
   End If
   sql &= " AND deleted = false and concluded = False "
   If limit Then
      sql &= "LIMIT " & limit
   End If
   Return modDBConnect.exec_query_collection(sql)
   
End
'Public Function Staff_Tasks_Document_Audit_Trail(fk_document As Integer, Optional bDontShowDocumentDetails As Boolean = False) As String

Public Function Audit_Trail_Show_Document_Details_Tasks_Attatched(fk_document As Integer, Optional bDontShowDocumentDetails As Boolean = False) As String
   '--------------------------------------------------------------------------------------------------------
   '  Given a document pk, contruct a html page of the document details and any tasks associated with the document
   '  Note this does not include the actioning of the document, this must be added see: modAudit.MakeTrail(...)
   '  the html sort of looks like this:
   '  A heading on top of page  (unless bDontShowDocumentDetails = True for example in FDocumentsImported)
   '  DOCUMENT AUDIT TRAIL
   '  PATIENT: name and address
   '  DOCUMENT: document name
   '  location (filing status - in  inbox or filed)
   '  source file
   '  destination staff member
   '  what the document is about
   '  Is the task finalised? if not who is responsible, if yes, who did it
   '  A table of the tasks components, allocated to who, and state of completion plus notes
   '  As mentioned does not include the actioning of tasks on the document.
   '-------------------------------------------------------------------------------------------------------
   
   Dim shtml As String
   Dim TasksAndNotes As Collection
   Dim TaskAndNote As Collection
   Dim sLastDetails As String
   Dim allnotes As String
   Dim R1 As Result
   Dim R2 As Result
   Dim sql As String
   Dim bUnfiled As Boolean
   Dim document_user_tag As String
   Dim fk_staff_finalised_task As Integer 'he who finalised (fk_staff_must_finalise or any one of the role FIXME NOT IMPLEMENTED)
   
   If bDontShowDocumentDetails = False Then
      r1 = modDBConnect.exec_query("select * from documents.vwDocuments where pk_document = " & fk_document)
      For Each R1
         sHTml = "<P align=center> <B><U> DOCUMENT AUDIT TRAIL</U></B></P>"
         sHtml &= "<B>PATIENT     :</B>" & R1!patient_firstname & " " & R1!patient_surname & " (" & R1!patient_sex & " " & R1!patient_age & " ) "
         sHtml &= Trim(R1!patient_street1 & " " & R1!patient_street2) & " " & R1!patient_town & " " & R1!patient_state & " " & R1!patient_postcode & " DOB:" & R1!patient_birthdate & "<BR><BR>"
         If Not IsNull(R1!tag_user) Then
            document_user_tag = R1!tag_user
            If Right(document_user_tag) = ";" Then document_user_tag = Left(document_user_tag, Len(document_user_tag) - 1)
         Else
            document_user_tag = R1!tag
            bUnfiled = True
         End If
         sHtml &= "<B>DOCUMENT:  " & document_user_tag & "</B>"
         If R1!style = "result" Then
            sHtml &= " - " & R1!sending_entity_request_type & "<BR><BR> - Result"
         Else
            sHtml &= "<BR><BR> - Letter "
         Endif
         If bUnfiled Then
            sHtml &= " still in inbox and not filed<BR>"
         End If
         If Not IsNull(r1!date_requested) Then
            sHtml &= "- requested on " & Format(r1!date_requested, "dd/mm/yyyy")
         Endif
         sHtml &= "- document originated from " & r1!originator
         If r1!msh_sending_entity <> "" Then
            sHtml &= " and was sent by " & r1!msh_sending_entity & " imported on "
         Else
            sHtml &= " and was scanned into the database by "
            sql = "Select * from clin_consult.vwProgressNotes where fk_row =" & fk_document
            sql &= " AND fk_audit_action = " & const.cAuditAction_ScannedDocumentImported
            R2 = modDBConnect.exec_query(sql)
            If R2.count Then
               sHtml &= R2!title & " " & R2!firstname & " " & R2!surname & " (" & R2!role & ") on "
            Else
               shtml &= "?? on "
            Endif
         End If
         sHtml &= Format(r1!imported_time, "dd/mm/yyyy:hh:nn:ss") & "<BR>"
         sHtml &= "- source file: " & r1!source_file & "<BR>"
         sHtml &= "- destination staff member was " & r1!staff_destination_wholename & "<BR>"
         sHtml &= "- document concerns: %summary" & "<BR><BR>"
         Break
      Next
   End If
   '---------------------------------------------------------------------------------
   ' Now get all the tasks and accompanying notes, essentially in this format or rows
   ' This gives us a recordset looking something like this
   ' "Task Name";"Staff Member 1";"Task component 1";"Comment 1"
   ' "Task Name";"Staff Member 1";"Task component 1";"Comment 2"
   ' "Task Name";"Staff Member 2";"Task component 2";"Comment 1"
   ' "Task Name";"Staff Member 2";"Task component 2";"Comment 2"
   ' "Task Name";"Staff Member 2";"Task component 2";"Comment 3"
   '  plus dates etc
   '---------------------------------------------------------------------------------
   TasksAndNotes = modStaffTasksDBI.Tasks_And_Notes_Get(fk_document)
   '---------------------------------------------------------------------
   'If there are tasks attached to this document, put up the row headings
   'otherwise skip this, no rows will be added under these headings
   '---------------------------------------------------------------------
   If TasksAndNotes.count Then sHtml &= modHTML.Staff_Tasks_Audit_RowHeading()                                  'the column headings for the table
   Print shtml
   For Each TaskAndNote In TasksAndNotes
      Try fk_staff_finalised_task = TaskAndNote!fk_staff_finalised_task
      
      If InStr(sHtml, "%summary") Then
         sHtml = Replace$(sHtml, "%summary", TaskAndNote!task)                      'somewhat of a misnomer is this field = letter summary or request(s)
      Endif
      '----------------------------------------------------------
      'new task, new row, but put all components in the same cell
      '----------------------------------------------------------
      If sLastDetails <> TaskAndNote!details Then
         '---------------------------------------------------------------------------------------------
         'On every change of component of a task, put into the appropriate cell, the last lot of notes
         '--------------------------------------------------------------------------------------------
         If allnotes <> "" Then
            shtml = Replace(shtml, "%notes", allnotes) & "<BR>"
         Else
            shtml = Replace(shtml, "%notes", "")
         End If
         allnotes = ""                                                              'zero notes string
         sHtml &= modHTML.Staff_Tasks_Audit_TableRow()                           'add new templated row of html
         sLastDetails = TaskAndNote!details
         shtml = Replace(shtml, "%details", TaskAndNote!details)
         shtml = Replace(shtml, "%log_date", Format(TaskAndNote!date_component_logged, "dd/mm/yyyy"))
         If IsNull(TaskAndNote!staff_allocated_wholename) Then
            shtml = Replace(shtml, "%staff_allocated", "any " & TaskAndNote!role_allocated)
         Else
            shtml = Replace(shtml, "%staff_allocated", TaskAndNote!staff_allocated_title & " " & TaskAndNote!staff_allocated_wholename)
         Endif
         '-------------------------------------------------
         'There may or may not be notes for this task
         'If there are, put in the date first then the note
         'e.g 10/12/2010  These are the notes 
         'if the task was allocated to a role, append the
         'name of the person who made the note
         '-------------------------------------------------
         If Not IsNull(TaskAndNote!date_note) Then
            allnotes &= "<B>" & Format(TaskAndNote!date_note, "dd/mm/yyyy") & "</B>: " & TaskAndNote!note
            allnotes &= " (" & TaskAndNote!staff_made_note_wholename & ")" & "<BR>"
         End If
         If TaskAndNote!date_component_completed <> Null Then
            shtml = Replace(shtml, "%finalised", Format(TaskAndNote!date_component_completed, "dd/mm/yyyy"))
         Else
            shtml = Replace(shtml, "%finalised", "No")
         Endif
         Print shtml
      Else
         '-----------------------------------------
         'Is still the same task, keep adding notes
         '-----------------------------------------
         allnotes &= "<B>" & Format(TaskAndNote!date_note, "dd/mm/yyyy") & "</B>: " & TaskAndNote!note 
         allnotes &= " (" & TaskAndNote!staff_made_note_wholename & ")" & "<BR>"
      Endif
   Next
   '------------------------------------------------------------------------
   'At end of loop, the last component of a task, hasn't yet had notes saved
   '------------------------------------------------------------------------
   If allnotes <> "" Then                                            'may have some notes
      shtml = Replace(shtml, "%notes", allnotes) & "<BR>"
   End If
   shtml = Replace(shtml, "%notes", "")                              'remove any un-used placeholders
   If InStr(shtml, "%summary") Then
      shtml = Replace(shtml, "- document concerns: %summary" & "<BR><BR>", "")
   End If
   '----------------------------------------------
   'If there were tasks, check finalisation status
   '----------------------------------------------
   If TasksAndNotes.count Then
      If fk_staff_finalised_task = 0 Then
         sHtml &= "<BR><B>Task Status</B>: Not Finalised" & "- must be finalised by " & TaskAndNote!staff_must_finalise_task_title & " " & TaskAndNote!staff_must_finalise_task_wholename
         sHtml = Replace$(sHtml, "%No", "No")
      Else
         sHtml &= "<BR><B>Task Status</B>: Completed by " & TaskAndNote!staff_must_finalise_task_title & " " & TaskAndNote!staff_must_finalise_task_wholename
         'Even if the staff member allocated the task havn't marked their component completed
         'it is by defination here, as over-ridden by the staff member who has finalised the task.
         sHtml = Replace$(sHtml, "%No", Format(TaskAndNote!date_finalised, "dd/mm/yyyy"))
      Endif
      sHtml &= "<HR>"
   End If
   Return "<HTML><BODY><TABLE>" & shtml & "</TABLE></BODY></HTML>"
   
End

Public Function Document_SendBack_For_ReFiling(currentconsult As CConsult, document As Collection) As Boolean
   '------------------------------------------------------------------------------------
   'User has decided there is something wrong with document allocation they cannot fix
   'eg, wrongly joined pages etc, not just simple things like wrongly allocated patients
   'so they send it back to clerical for re-filing
   'FIXME THESE CHANGES TODAY 13MARCH WILL AFFECT THE FCLINCIAL MENU ITEM TO DO THE SAME THING
   '------------------------------------------------------------------------------------
   
   Dim sMsg As String
   Dim oldname As String
   Dim sData As String
   
   Select Case document!fk_lu_display_as
      Case const.Document_Display_As_Result
         sData = document!tag_user
      Case const.Document_Display_As_Certificate
         
      Case const.Document_Display_As_Image
         
      Case const.Document_Display_As_Letter
         sData = document!tag_user & " - " & document!tag
   End Select
   
   sMsg = sData & "\n\nSend back for clerical to re-allocate?"
   
   If Message.Warning(sMsg, "Yes", "No") = 2 Then Return
   If Delete(currentconsult, document, const.cSection_Documents, const.sAuditAction[const.cAuditAction_Refile]) Then
      oldname = modFiles.Get("document_archiving_directory", document!source_file)
      modFiles.Put("document_scanning_directory", document!source_file, oldname)
      modFiles.Delete("document_archiving_directory", document!source_file)
      modDBConnect.CommitTrans()
      Return True
   Else
      modDBConnect.RollBack
   End If
Catch
   Log.ErrorMsg("error moving file" & Error.Text & Error.Backtrace) 'bug here
   Message.Error("An error occured and the file could not be re-allocated")
   modDBConnect.RollBack()
   Return False
   
End

Public Function Document_Get_By_pk(fk_document As Integer) As Collection
   
   Return modDBConnect.exec_query_first("Select * from documents.documents where pk=" & fk_document)
   
End

' returns information about the referrer of the patient
' [obviously only makes sense for specialist users)
' returns NULL if no referral found
' if found returns a Collection containing
'      name: referrer's full name
'      provider_number: referrer's provider number
'      date: date of referral
'      months: duration of referral in months, -1 for indefinite
'      address: address of referrer

Public Function Referrer_Get(pk_patient As Integer) As Collection
   
   Dim sql As String
   Dim ret As New Collection
   
   sql = "select person_occupation, title, firstname, surname, person_street1, person_street2, person_postcode, "
   sql &= "person_town, organisation_street1, organisation_street2, organisation_postcode, organisation_town, "
   sql &= "(tag ilike '%indefinite%' or tag_user ilike '%indefinite%') as indefinite, "
   sql &= "documents.date_created as \"date\" from documents.documents, documents.vwsendingentities where "
   sql &= "documents.fk_sending_entity = vwsendingentities.pk_sending_entities and documents.incoming_referral  and "
   sql &= "documents.fk_patient = " & pk_patient
   sql &= " order by indefinite desc, documents.date_created desc limit 1"
   ret = modDBConnect.exec_query_first(sql)
   If ret!person_street1 Then
      ret!address = ret!person_street1
      If ret!person_street2 Then
         ret!address &= " " & ret!person_street2
      Endif
      ret!address &= " " & ret!person_town & " " & ret!person_postcode
   Else
      ret!address = ret!organisation_street1
      If ret!organisation_street2 Then
         ret!address &= " " & ret!organisation_street2
      Endif
      ret!address &= " " & ret!organisation_town & " " & ret!organisation_postcode
   Endif
   ret!name = ret!title & " " & ret!firstname & " " & ret!surname
   If ret!person_occupation = "general practitioner" Then
      ret!months = 12
   Else
      ret!months = 3
   Endif
   If ret!indefinite Then ret!months = -1
   
   Return ret
   
End

' view the PDF file in an external PDF viewer
Public Sub Launch_External_PDF_Viewer(pdf As String)
   
   Dim viewers As String[] = ["okular", "evince", "acroread", "epdfview", "xpdf", "mupdf", "zathura", "ViewPDF", "gv", "none"]
   Dim viewer As String
   
   For Each viewer In viewers
      If Access("/usr/bin" &/ viewer, gb.Exec) Then Break
      If Access("/usr/local/bin" &/ viewer, gb.Exec) Then Break
   Next
   If viewer = "none" Then 
      Message.Error("No PDF viewer found on the system")
      Return
   Endif
   Exec [viewer, pdf]
   
End

Public Sub Run_Scanner(pages As Integer)
   
   Dim task As New CShellTask
   Dim scanning_path As String
   
End
