' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-----------------------------------------------------------------------------
' PURPOSE      A module for maintain letter templates to send out with recalls
' TODO'S       if Ian Fixes the html/LaTex conversion problem can revert to the
'              Template_Editor rather than TextArea control.
'              Write the help file for this module and display in Init()
' BUGS         Please email rterry@pacific.net.au
'-----------------------------------------------------------------------------
Private FHelp As FHtmlViewer                       'Embedded form to show help
Private Help_Dir As String                         'location of help files
Private Template_Editor As FEditor                 'Text editor to write or import external files to
Private Templates As Collection                    'A collection of existing templates
Private template As Collection                     'currently selected template in templates list
Private fk_template As Integer                     'if not zero = key to clin_recalls.lu_templates
Private bkeyvalid As Boolean                       'if true the keypress in Edit Area is valid
Private bExit As Boolean                           'if true exit the routine
Private icurrentTemplate As Integer                'cvwTemplates.item.key when selected
Private Reasons As Collection                      'collection of reasons for recall
Private Reason As Collection

Static Private form_templates As FRecallLetterTemplates

Static Public Function Data_Changed(Flag As Boolean)

   form_templates.EditArea_Notify_DataChange(Flag)

End

Public Sub Init()

   Form_Templates = Me
   FHelp = New FHtmlViewer(Vbox_Help)                                  'load appropriate help FIXME
   FHelp.WebView1.HTML = "<html><body><B>Help for Template Management here</B></body></html>" 'FIXME remove me.
   lblMeasure.text = " Appointment Type   "                                 'ensure gui elements ok
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Inner, lblMeasure)
   cmbAppointmentLength.Add("Brief", const.AppointmentLengthBrief)
   cmbAppointmentLength.Add("Standard", const.AppointmentLengthStandard)
   cmbAppointmentLength.Add("Long", const.AppointmentLengthLong)
   cmbAppointmentLength.Add("Prolonged", const.AppointmentLengthProlonged)
   Settings_Load
   Reload()                                                            'show existing templates in list.

End

Public Sub EditArea_Buttons_Click()

   Select Case Last.tag
      Case "save"
         Save()
      Case "new"
         Template_New()
   End Select

End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   '--------------------------------------------------
   'Adds or removes padding around edit area and lists
   'to indicate if data is changed and unsaved
   '--------------------------------------------------

   If flag Then
      Vbox_EditArea_Outer.Padding = 1
      Vbox_EditArea_Outer.Background = Color.red
      tbSave.foreground = Color.red
      tbSave.Enabled = True

   Else
      Vbox_EditArea_Outer.Padding = 0
      Vbox_EditArea_Outer.Background = Color.white
      tbSave.foreground = Color.Black
      tbSave.Enabled = False
   End If

End

Public Sub Display(Template As Collection)
   '------------------------------------------------------------------------------------------
   'Display the template
   'Duplicate code in here - I've temporarily hidden the Template_Editor as the LaTex routines
   'can't convert the html, and put a simple TextArea  in its place. When printed the Latex
   'ignores the \n lines, so as a fudge when saved the templates \n are replaced with <BR>
   'which cTemplate.subst_HTML understands
   '-------------------------------------------------------------------------------------------

   EditArea_Clear()
   bExit = True

   txtTemplateName.text = Template!name
   cmbAppointmentLength.index = Template!fk_lu_appointment_length
   TextArea1.text = Replace(Template!template, "<BR>", "\n")
   fk_template = Last.item.Key
   EditArea_Notify_DataChange(False)
   bExit = False

End

Public Sub Edit()
   '--------------------------
   'Edit the selected template
   '--------------------------

   Vbox_EditArea_Outer.Enabled = True

End

Public Sub Save()
   '---------------------------------------------------------------------------------------
   ' Saves a new or modified template
   ' Clin_Recalls.lu_templates
   ' pk
   ' name text
   ' deleted boolean default false,
   ' template text NOT NULL, -- html for a letter template
   ' if fk_template <> 0 then it is an edited template
   ' --------------------------------------------------------------------------------------
   ' I've temporarily hidden the Template_Editor as the LaTex routines
   'can't convert the html, and put a simple TextArea  in its place. When printed the Latex
   'ignores the \n lines, so as a fudge when saved the templates \n are replaced with <BR>
   'which cTemplate.subst_HTML understands
   '----------------------------------------------------------------------------------------

   Dim template As New CRow

   tbSave.Enabled = False                                      'user can double click and cause re-entry
   If Vbox_EditArea_Outer.Padding = 0 Then                     'nothing to save
      tbSave.Enabled = True
      Return
   End If
   If Not Valid_Template() Then
      tbSave.Enabled = True
      Return
   End If
   If fk_template Then
      template.put_unchanged(fk_template, "fk_template")
   Endif
   template!name = Trim(txtTemplateName.text)
   template!fk_lu_appointment_length = cmbAppointmentLength.Index
   ' template!template = Template_Editor.teNotes.RichText    'leave this in until the hmtl latex problem resolved
   template!template = Replace(TextArea1.text, "\n", "<BR>") 'convert to simple html which cTemplate understands
   template.Save("clin_recalls.lu_templates", "fk_template")
   modDBConnect.CommitTrans()
   EditArea_Clear()
   Reload()

End

Public Sub EditArea_Clear()
   '----------------------------------
   'Clears the input area, resets keys
   '----------------------------------

   bExit = True
   txtTemplateName.text = ""
   fk_template = 0
   ' With Template_Editor
   '    .bExit = True
   '    .teNotes.Clear()
   '    .bExit = False
   ' End With
   EditArea_Notify_DataChange(False)
   bExit = False

End

Public Sub Template_New()
   '----------------------------------
   'User wants to create a new template
   '-----------------------------------

   EditArea_Clear()
   fk_template = 0

   Vbox_EditArea_Outer.Enabled = True
   txtTemplateName.SetFocus()

End

Public Sub Reload()
   '---------------------------------------------
   'Display existing templates for recall letters
   '---------------------------------------------

   Vbox_EditArea_Outer.Enabled = False
   cvwRecallTemplates.clear()
   templates = modRecallsDBI.Templates_Get()
   For Each template In Templates
      If template!pk <> 1 'no template'
         cvwRecallTemplates.Add(template!pk, 0)
         cvwRecallTemplates[template!pk][0] = template!name
      End If
   Next
   ' If cvwRecallTemplates.count Then
   '    cvwRecallTemplates.MoveFirst()
   '    cvwRecallTemplates.SetFocus()
   '    cvwRecallTemplates_Select()
   ' End If
   EditArea_Notify_DataChange(False)

End

Public Sub cvwRecallTemplates_Select()

   cvwRecallTemplates.MoveCurrent()
   Print Templates[cvwRecallTemplates.Item.key]
   Display(Templates[cvwRecallTemplates.Item.key])

End

' Public Sub cvwRecallTemplates_Click()
'
'    cvwRecallTemplates.MoveCurrent
'    fk_template = Last.item.Key
'
' End

Public Function Valid_Template() As Boolean
   '---------------------------------------
   'checks that we have enough data to save
   '---------------------------------------

   If Trim(txtTemplateName.text) = "" Then
      txtTemplateName.SetFocus()
      Return
   Endif
   If cmbAppointmentLength.Index = -1 Then
      cmbAppointmentLength.SetFocus()
      Return
   Endif

   ' If Template_Editor.teNotes.text = "" Then
   '    Template_Editor.teNotes.SetFocus
   '    Return
   ' Endif
   If textarea1.text = "" Then
      textarea1.text.SetFocus
      Return
   Endif
   Return True

End

Public Sub Settings_Save() 'must be public as called from other form

   Settings["FRecallLetterTemplates/VSplit_Main"] = VSplit_Main.layout
   Settings["FRecallLetterTemplates/HSplitMain"] = HSplit_Main.Layout

End

Private Sub Settings_Load()

   VSplit_Main.layout = Settings["FRecallLetterTemplates/VSplit_Main", modUtil.VSplit([468, 467])]
   HSplit_Main.Layout = Settings["FRecallLetterTemplates/HSplit_Main", modUtil.HSplit([725, 978])]
   cvwRecallTemplates.font = Font[Settings["FRecallLetterTemplates/cvwRecallTemplates.font", "DejaVu Sans,9"]]

End

Public Sub EditArea_GotFocus()

   Last.BackGround = Color.rgb(95, 255, 175) 'a greeny color FIXME make me configurable
   With listview1
      .top = Last.parent.parent.top + Last.parent.height  '
      .left = Last.parent.Left + Vbox_EditArea_Inner.padding
      .Visible = False
      .Raise
   End With

End

Public Sub EditArea_lostFocus()

   Last.BackGround = Color.White

End

Public Sub EditArea_KeyPress()
   '-------------------------------------------------------------
   'first make sure only valid keys for each text box are entered
   'here effectively this means only the date
   'FIXME  - put in commentry here to show how only numbers/mMyYdD allowed in date
   '--------------------------------------------------------------

   Dim x As Integer

   ' bkeyvalid = EditArea_ExcludeKeys(key.code, Last.tag)
   ' If bkeyvalid = False Then
   '    Stop Event
   '    Return
   '  End If
   If key.code = key.Down Then
      If listview1.Visible Then
         listview1.MoveFirst
         listview1.Item.Selected = True
         listview1.SetFocus()
      Endif
   Endif

End

Public Function EditArea_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   'Allow only valid letters into the name

   Select Case tag
      Case "name"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_AtoZ, keycode)
   End Select
   Return bKeyValid

End

Public Sub EditArea_Activate()

   Template_Editor.teNotes.SetFocus()

End

Public Sub cvwRecallTemplates_Menu()

   If Last.count Then
      mnuTemplates.Popup
   Endif

End

Public Sub mnuTemplates_Click()
   '---------------------------------------------------------------------------
   'User has clicked on a menu option in the popup menu over the templates list
   '---------------------------------------------------------------------------

   Select Case Last.tag
      Case "edit"
         Edit()
      Case "font"
         modUtil.Columnview_SetFont(cvwRecallTemplates, "FRecallLetterTemplates")
   End Select

End

Public Sub EditArea_Change()

   If Bexit Then Return
   EditArea_Notify_DataChange(True)

End

Public Sub EditArea_KeyRelease()
   '---------------------------------------------------------
   'User is typing in what they want the patient recalled for
   '---------------------------------------------------------

   Get_Reasons()

End

Public Sub Get_Reasons()
   '----------------------------------------------------
   'Gets a list of reasons for recall as a collection
   'loads these into listview1
   'Clears the popup list, attempts to get a collection
   'matching an instring search of what user is typing
   'if the collection has contents display in popup list
   '----------------------------------------------------

   Dim reason As Collection

   listview1.Clear()
   If Trim(txtTemplateName.text) <> "" Then
      Reasons = modRecallsDBI.Get_Reasons(Trim(txtTemplateName.Text))
      If Reasons.count = 0 Then
         listview1.Visible = False
         Return
      End If
      For Each reason In Reasons
         '--------------------------------------------------------------------------
         'Note gambas accepts pk_reason though an integer automatically as a string
         'so when one reads it back from the key, must convert to a number if using
         'it to save
         '--------------------------------------------------------------------------
         listview1.Add(reason!pk_reason, reason!reason)
      Next
      listview1.tag = txtTemplateName
      listview1.Raise
      listview1.Visible = True
   Else
      listview1.Visible = False
   End If

End

Public Sub listview1_KeyPress()

   If key.code = key.return Then Listview1_DblClick()

End

Public Sub Listview1_DblClick()
   '-----------------------------------------------------------------
   'User is using an existing recall name to use as the template name
   '-----------------------------------------------------------------

   Dim SelectedReason As New Collection       'for readability

   listview1.MoveCurrent                  'set this for the key
   txtTemplateName.text = listview1.Item.Text
   listview1.Visible = False
   '--------------------------------------------------
   'Now check if any template exists for this reason
   'to prevent duplication
   '--------------------------------------------------

   For Each Template In templates
      If Trim(Lower(txtTemplateName.text)) = Lower(template!name) Then
         Message.Info("A template of that name already exists", "Ok")
         Template_New()
         Break
      End If
   Next

End

Public Sub TextArea1_Change()

   EditArea_Notify_DataChange(True)

End

Public Sub cmbEditArea_Click()

   EditArea_Notify_DataChange(True)

End
