' Gambas class file

' Copyright (C) 2008-2015 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' A module for administering logged recalls
'----------------------------------------------------------------------
'TODO
'           put the audit trail in for notified by phone
'           fixme put in filter on reason
'----------------------------------------------------------------------
Private recalls_due As Collection
Private bexit As Boolean
Private iTimer_Count As Integer = 0
Private patient As Collection
Private currentconsult As CConsult
Private templates As Collection
Private currentRecall As Collection
Private CurrentObservations As Collection
Private template As Collection                     'currently selected template in templates list
Private max_date_width As Integer
Private max_firstname_width As Integer
Private max_surname_width As Integer
Private max_street_width As Integer
Private max_reason_width As Integer
Private max_urgency_width As Integer
Private max_Last_done_width As Integer
Private max_template_width As Integer
Private max_contact_method_width As Integer

Public Sub form_Open()
   
   Init()
   
End

Public Sub Init()
   
   With cvwRecallsDue
      .columns.count = 10
      .Columns[0].Text = "Date Due"
      .Columns[1].Text = "Firstname"
      .Columns[2].Text = "Surname"
      .Columns[3].Text = "Street"
      .Columns[4].Text = "Reason"
      .Columns[5].Text = " Urgency"
      .Columns[6].Text = "By"
      .Columns[7].Text = "Last Done"
      .Columns[8].Text = "# Sent"
      .Columns[9].Text = "Template"
   End With
   With cvwRecallsPatient
      .Clear()
      .Columns.count = 2
      .Columns[0].width = 60
      .Columns[1].width = 200
   End With
   cmbRecallsDue.Add("All Overdue Recalls")
   cmbRecallsDue.Add("Due in 2 Weeks")
   cmbRecallsDue.Add("Due in 3 Weeks")
   cmbRecallsDue.Add("Due in Next Month")
   cvwRecallsDue_Refresh(0, True)              'days overdue and overdue
   Settings_Load()
   
End

Public Sub Consult_Check_Created()
   '------------------------------------------------------------
   'probably should live elsewhere ?cConsult and pass parameters
   'see const for types of consult
   '------------------------------------------------------------
   
   If IsNull(currentconsult) Then
      CurrentConsult = New CConsult(patient, const.consult_type_audit)
      '  currentconsult.Set(const.cAuditAction_ReminderSent, "recall")
   End If
   
End

Public Sub cvwRecallsDue_Refresh(Optional days_due As Integer = 0, Optional bOverdue As Boolean = False)
   '-----------------------------------------------------------
   'Refresh the recalls due list taking into account any filter
   '-----------------------------------------------------------
   
   Dim recall As Collection
   
   lblMeasure.font = cvwRecallsDue.Font
   max_date_width = 0
   max_firstname_width = 0
   max_surname_width = 0
   max_street_width = 0
   max_reason_width = 0
   max_urgency_width = 0
   max_Last_done_width = 0
   max_template_width = 0
   max_contact_method_width = 0
   
   cvwRecallsDue.Clear()
   templates = modRecallsDBI.Templates_Get()           'could have been updated
   recalls_due = modRecallsDBI.Recalls_Due_Get(Not chkInactivePatients.value, Trim(txtFilterPatient.text))       'always refresh collection
   For Each recall In recalls_due
      If bOverdue Then
         If recall!days_due < 0 Then
            If Trim(txtRecallFilter.text) <> "" Then
               If InStr(Lower(recall!reason), Trim(txtRecallFilter.text)) Then
                  cvwRecallsPatient_Add(recall)
               Endif
            Else
               cvwRecallsPatient_Add(recall)
            Endif
         End If
      Else
         If recall!days_due < days_due And recall!days_due > 0 Then
            cvwRecallsPatient_Add(recall)
         Endif
      End If
   Next
   cvwRecallsDue.columns[0].width = max_date_width
   cvwRecallsDue.columns[1].width = max_firstname_width
   cvwRecallsDue.columns[2].width = max_surname_width
   cvwRecallsDue.columns[3].width = max_street_width
   cvwRecallsDue.columns[4].width = max_reason_width
   cvwRecallsDue.columns[5].width = max_urgency_width
   cvwRecallsDue.columns[6].width = max_contact_method_width
   cvwRecallsDue.columns[7].width = max_date_width
   
End

Public Sub cvwRecallsPatient_Add(recall As Collection)
   
   Dim x As Integer
   
   x = recall!pk_recall
   cvwRecallsDue.add(x, 0)
   cvwRecallsDue[x][0] = Format(recall!due, "dd/mm/yyyy")
   lblMeasure.text = cvwRecallsDue[x][0] & " "
   max_date_width = lblMeasure.width
   cvwRecallsDue[x][1] = recall!firstname
   lblMeasure.text = cvwRecallsDue[x][1] & " "
   max_firstname_width = Max(lblMeasure.width, max_firstname_width)
   cvwRecallsDue[x][2] = recall!surname & " "
   lblMeasure.text = cvwRecallsDue[x][2]
   max_surname_width = Max(lblMeasure.width, max_surname_width)
   cvwRecallsDue[x][3] = Trim(recall!street1 & " " & recall!street2) & " " & recall!town & " " & recall!postcode & " "
   lblMeasure.text = cvwRecallsDue[x][3]
   max_street_width = Max(lblMeasure.width, max_street_width)
   cvwRecallsDue[x][4] = recall!reason & " "
   lblMeasure.text = cvwRecallsDue[x][4]
   max_reason_width = Max(lblMeasure.width, max_reason_width)
   cvwRecallsDue[x][5] = recall!urgency
   lblMeasure.text = cvwRecallsDue[x][5] & "   "
   max_urgency_width = Max(lblMeasure.Width, max_urgency_width)
   cvwRecallsDue[x][6] = recall!contact_method
   lblMeasure.text = cvwRecallsDue[x][6] & "  "
   max_contact_method_width = Max(lblMeasure.width, max_contact_method_width)
   Try cvwRecallsDue[x][7] = Format(recall!date_reminder_sent, "dd/mm/yyyy") 'may not exist
   
   cvwRecallsDue[x][8] = recall!num_reminders
   
   cvwRecallsDue[x][9] = recall!name                  'of the template
   
End

Public Sub cmbRecallsDue_Click()
   '---------------------------------------------------------------
   'User has clicked the combo with options for time recalls due in
   '---------------------------------------------------------------
   
   Reload()
   
End

Public Sub Reload()
   
   Timer1.Stop
   Select Case cmbRecallsDue.Text
      Case "All Overdue Recalls"
         cvwRecallsDue_Refresh(0, True)
      Case "Due in 2 Weeks"
         cvwRecallsDue_Refresh(15, False)
      Case "Due in 3 Weeks"
         cvwRecallsDue_Refresh(22, False)
      Case "Due in Next Month"
         cvwRecallsDue_Refresh(29, False)
   End Select
   If Trim(txtFilterPatient.text) <> "" Then
      txtFilterPatient.SetFocus
   Else
      cvwRecallsDue.SetFocus()
   End If   
   
End

Public Sub Settings_Save()
   '-----------------------
   'Called from parent form
   '-----------------------
   
   Settings["FRecallsSend/Vsplit.Layout"] = Vsplit1.Layout
   Settings["FRecallsSend/Hsplit.Layout"] = Hsplit1.Layout
   
End

Private Sub Settings_Load()
   '-------------------------------------------------------------------
   'Load settings, the fonts are saved in the relevant mnu_click events
   '-------------------------------------------------------------------
   
   Vsplit1.Layout = Settings["FRecallsSend/Vsplit.Layout", modUtilGUI.VSplit([612, 280])]
   Hsplit1.Layout = Settings["FRecallsSend/Hsplit.Layout", modUtilGUI.HSplit([1, 1, 1])]
   cvwResults.Font = Font[Settings["FRecallsSend/cvwResults.font", "DejaVu Sans,9"]]
   cvwLettersReceived.font = Font[Settings["FRecallsSend/cvwLettersReceived.font", "DejaVu Sans,9"]]
   cvwRecallsDue.font = Font[Settings["FRecallsSend/cvwRecallsDue.font", "DejaVu Sans,9"]]
   
End

Public Sub mnuRecallManagement_Click()
   '----------------------------------------
   'The popup menu over the recalls due list
   '----------------------------------------
   
   Dim x As Integer
   
   Select Case Last.tag
         
      Case "arranged by phone"
         modUtilGUI.NotImplemented("Arranging by phone")
         Return
      Case "select all and print"
         cvwRecallsDue.SelectAll()
         Print()
      Case "print selected"  
         Print()
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwRecallsDue, "FRecallsSend")
         Return
      Case "help"
         modUtilGUI.NotImplemented("Help for the recalls maintenance module")
         Return
      Case "exit"
         Return
      Case Else      'tag is numerical
         If Last.tag = const.recallRepeat_Same_Interval Then
            If Message.Question("Please confirm that the patient has had this recall completed and that you wish to re-log this at the interval indicated.", "Yes - Re-Log Recall", "Cancel") = 2 Then Return
         End If   
         modRecallsMenu.Process(currentrecall, Last.tag, currentconsult)
   End Select
   cmbRecallsDue_Click()
Catch
   Return
   
End

Public Sub mnuTemplates_Click()
   
   '---------------------------------------------------
   'User wants to link one or more letter to a template
   '---------------------------------------------------
   
   Dim x As Integer
   Dim pk_recall As Integer
   Dim fk_template As Integer = Last.tag
   
   cvwRecallsDue.MoveFirst()
   For x = 0 To cvwRecallsDue.count - 1
      If cvwRecallsDue.Item.Selected = True Then
         pk_recall = recalls_due[cvwRecallsDue.Item.Key]!pk_recall
         Recall_Link_To_Template(pk_recall, fk_template)
      Endif
      cvwRecallsDue.MoveNext()
   Next
   cvwRecallsDue.UnselectAll()
   cvwRecallsDue_Refresh(0, True)
Catch
   Return
   
End

Public Sub cvwRecallsDue_Menu()
   '----------------------------------------
   'The popup menu over the recalls due list
   'Populate the menu of available templates
   '----------------------------------------
   
   Dim mnu As Menu
   
   If Not Last.count Then Return
   templates = modRecallsDBI.Templates_Get()                                  'get current template list, could have been updated on the other tab
   mnuRecallManagement_LinkToTemplate.Children.Clear                          'get rid of those already on this menu
   For Each template In Templates
      If template!pk <> 1 'no template'
         mnu = New Menu(mnuRecallManagement_LinkToTemplate) As "mnuTemplates"
         mnu.Text = template!name
         mnu.tag = template!pk
      End If
   Next
   cvwRecallsDue.MoveCurrent()
   currentRecall = recalls_due[cvwRecallsDue.Item.Key]
   mnuRecallManagement_RepeatSameInterval.caption = "Mark Completed Repeat in " & currentrecall!interval & currentrecall!abbrev_text
   mnuRecallManagement.Popup()
   
Catch
   Return 
   
End

Public Sub Print()
   '--------------------------------------------------------------------
   'Print the recall letter
   '   pk serial NOT NULL,
   '   fk_recall integer NOT NULL, -- key to clin_recalls.recall table
   '   date date NOT NULL, -- the date the reminder for the recall was processed
   '   latex text NOT NULL, -- the latex definition of the recall reminder sent
   '   fk_contact_method integer NOT NULL, -- key to contacts.lu_contact_type table e.g could point to letter/phone
   '   contact_value text, -- if not null contact via this text eg mobile phone, voip, email
   '   fk_staff integer, -- key to admin.staff table staff member who prepared the letter
   '   memo text, -- memo added by staff at the time e.g could have called patient who said they would make appointment
   '---------------------------------------------------------------------------
   
   Dim laTex As String                                                'LaTex definition of the letter
   Dim sent As New CRow
   Dim audit_notes As String
   Dim x As Integer
   Dim currentRecall As Collection 
   
   For x = 0 To cvwRecallsDue.Selection.Count - 1
      currentRecall = recalls_due[cvwRecallsDue.Selection[x]]
      currentconsult = Null
      patient = currentRecall
      CurrentConsult = New CConsult(patient, const.ConsultType_AuditNote)
      Print currentconsult.GetPK()
      Try laTex = RecallLetter_LaTex_Construct(currentrecall).GetData()                     'get the letter definition
      If Error Then Return    'null if no valid templatepsyche
      
      '---------------------------------------------------------------
      'get the data together about how reminder was sent and save this
      '---------------------------------------------------------------
      sent = New CRow   
      sent!fk_recall = currentRecall!pk_recall                                                                                '
      sent!date = Now()
      sent!latex = laTex
      sent!fk_contact_method = const.ContactMethodLetter
      sent!fk_staff = modDBConnect.currentUser!fk_staff
      sent.Save("clin_recalls.sent", "fk_sent")
      '-------------------------------------------------------------------------------------
      'Now update the actual recall so that it knows the last fk_sent and incr num_reminders
      '-------------------------------------------------------------------------------------
      modDBConnect.update("clin_recalls.recalls", Null, ["pk": currentRecall!pk_recall, "fk_sent": sent!fk_sent])
      modDBConnect.update("clin_recalls.recalls", Null, ["pk": currentRecall!pk_recall, "num_reminders": recalls_due[cvwRecallsDue.Selection[x]]!num_reminders + 1])
      '---------------------------------------------------------------------------------------------------------------------------
      'Now the audit trail this will always be linked to the recall, so viewable e.g in FClinical using menu over the recalls list
      '---------------------------------------------------------------------------------------------------------------------------
      audit_notes = "Recall reminder for " & currentrecall!reason & " due on " & Format(currentrecall!due, "dd/mm/yyyy") & " [" & currentrecall!urgency & "] was actioned. "
      audit_notes &= "A letter was sent to " & Trim(currentconsult!patient!street1 & " " & currentconsult!patient!street2) & " " & currentconsult!patient!town & " " & currentconsult!patient!postcode
      If modAudit.MakeAudit(currentconsult, const.sAuditAction[const.cAuditAction_ReminderSent], "clin_recalls.recalls", currentrecall!pk_recall, const.cSection_Recalls, audit_notes) Then
         modDBConnect.CommitTrans()
         modPrinting.Print_latex(Latex, const.Paper_Plain, 1)
      Else
         modDBConnect.RollBack()
      End If
   Next
   cvwRecallsDue.UnselectAll
   cvwRecallsDue_Refresh(0, True)
   
End

Public Sub RecallLetter_LaTex_Construct(currentRecall As Collection) As CTemplate
   '------------------------------------------
   'Construct the LaTex to send to the printer
   
   Dim sString As String
   Dim templ As CTemplate
   Dim sStafftosee As String
   
   Try templ = New CTemplate("recall", "tex")
   If Error Then
      modUtilGUI.Template_Missing("Recalls")
      Return 
   Endif
   templ.Subst_common(currentconsult)
   sString = UCase(Left(currentRecall!reason)) & Right(currentRecall!reason, Len(currentRecall!reason) - 1) & " (" & currentRecall!urgency & ")"
   templ.Subst("recall_details", sSTring)
   If Not IsNull(currentRecall!additional_text) Then
      templ.Subst("additional_text", currentRecall!additional_text)
   Else
      templ.Subst("additional_text", "\\relax")
   Endif
   
   sStafftosee = Trim(currentRecall!staff_to_see_title & " " & currentRecall!staff_to_see_firstname & " " & currentRecall!staff_to_see_surname)
   templ.Subst("staff_to_see", sStafftosee)
   '--------------------------------------------------------------------
   'Template appointment length, over-rides the recall appointment lengh
   'it's more likely the doctor just forgot the right length
   '--------------------------------------------------------------------
   ' templ.Subst("consult_length", currentRecall!appointment_length)
   If Not IsNull(currentRecall!fk_template) Then
      If currentRecall!fk_template <> 1 Then   '1= set back to no template
         templ.Subst_html("template", Templates[currentRecall!fk_template]!template) 'currently have fudged html see FRecallLetterTemplate.Save()
         templ.Subst("consult_length", Templates[currentRecall!fk_template]!length)
      Else
         templ.Subst("consult_length", currentRecall!appointment_length)
         templ.Subst("template", "\\relax")
      End If
   Else
      templ.Subst("consult_length", currentRecall!appointment_length)
      templ.Subst("template", "\\relax")
   Endif
   templ.Subst("staff_logged_on", modDBConnect.currentUser_FullName())
   Return templ
   
End

Public Sub cvwRecallsDue_Select()
   '-------------------------------------------------------------------------------------
   'User has selected one of the overdue recalls
   'show any letters/results for the user to aid staff in seeing if sending recall needed
   '-------------------------------------------------------------------------------------
   
   Inc Application.Busy
   currentconsult = Null
   
   txtInboxResults_Exclude.text = ""
   txtInboxResults_filter.text = ""
   txtLetterFilterAuthor.text = ""
   txtLetterFilterTag.text = ""
   cvwResults.Clear()                            'yes duplicated but don't remove
   cvwLettersReceived.Clear()
   cvwRecallsDue.MoveCurrent()
   currentRecall = recalls_due[cvwRecallsDue.Item.Key]
   patient = currentRecall                       'contains fk_patient, fk_person, name/address
   If patient!deceased = True Then
      Message.Title = "Patient Deceased"
      If Message.Question("The patient seem's to be dead - hence sending out a recall would seem to be unwise.\n\nDelete this recall?", "Yes", "No") = 2 Then Return
      modDBConnect.update("clin_recalls.recalls", Null, ["pk": patient!pk_recall, "deleted": True])
      modDBConnect.CommitTrans()
   Endif
   Consult_Check_Created()                       'create consult if not yet done
   lblpatient.text = "  " & patient!wholename
   cvwResults_Refresh()
   cvwLettersReceived_Refresh()
   cvwRecallsPatient_Refresh()
   Dec Application.Busy
   
End

Public Sub cvwRecallsPatient_Refresh()
   
   Dim x As Integer
   
   currentconsult.Refresh("recalls_logged")
   cvwRecallsPatient.Clear()
   For Each currentconsult!recalls_logged
      x = currentconsult!recalls_logged.Key                        'readability
      '---------------------------------------------------------
      'Display in the recalls list on the tabstrip_lists control
      '---------------------------------------------------------
      cvwRecallsPatient.Add(x, 0)
      cvwRecallsPatient[x][0] = Format(currentconsult!recalls_logged[x]!due, "dd/mm/yyyy")
      cvwRecallsPatient[x][1] = currentconsult!recalls_logged[x]!reason
   Next
   
End

Public Sub cvwResults_Refresh(Optional bRefresh As Boolean = False)
   '-------------------------------------------
   'Shows any results received for this patient
   '-------------------------------------------
   
   Dim x As Integer                      'for readability = key
   Dim results_received As Collection
   Dim filter As String
   Dim exclude As String
   Dim result_received As String
   Dim guessed_user_Name As Collection
   
   If Not cvwResults.count Then Return
   If txtInboxResults_filter.text <> "" Then
      filter = txtInboxResults_filter.text
   End If
   If txtInboxResults_Exclude.text <> "" Then
      exclude = txtInboxResults_Exclude.text & ";"
   Endif
   cvwResults.Clear()
   With cvwResults
      .Columns.count = 3
      .Columns[0].width = 80
   End With
   For Each results_received In currentconsult!results_received
      result_received = ""
      If filter = "" And exclude = "" Then
         If IsNull(results_received!tag_user) Then                         'not user tag = document not filed
            'attempt to guess the user tag
            CurrentObservations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & results_received!pk_document & " ORDER BY observations.observation_date, set_id")
            guessed_user_Name = modParseDocument.Guess_UserName(currentconsult, const.synonyms(), results_received, CurrentObservations)
            If Not IsNull(guessed_user_Name!name) Then
               result_received = "** UNFILED **:" & guessed_user_Name!name
            Else
               result_received = "** UNFILED RESULT **:"
            End If
         Else
            result_received = results_received!tag_user
         End If
      Else
         If exclude Then
            If Lower(results_received!tag_user) <> Lower(exclude) Then
               result_received = results_received!tag_user
            Endif
         Else
            If results_received!tag_user = "" And InStr("unfiled", Lower(filter)) Then
               result_received = "** UNFILED **:"
            Else
               If InStr(Lower(results_received!tag_user), filter) Then
                  result_received = results_received!tag_user
               Endif
            End If
         End If
      End If
      If result_received <> "" Then
         x = results_received!pk_document
         cvwResults.Add(x, 0)
         cvwResults[x][0] = Format(results_received!date_created, "dd/mm/yyyy")
         cvwResults[x][1] = result_received
      End If
   Next
   
End

Public Sub cvwLettersReceived_Refresh(Optional bRefresh As Boolean = False)
   '------------------------------------------------------------------------------
   'Show all letters received
   'If appropriate, filter display according to the document tag or letter author
   'IAN FIXME: REPLACE ME WITH A RELATIVE ONE-LINER.
   '-----------------------------------------------------------------------------
   
   Dim x As Integer                      'for readability = key
   Dim letters_received As Collection
   Dim bSkip As Boolean
   
   Consult_Check_Created()                                              'check consult created
   With cvwLettersReceived
      .Clear()
      .Columns.count = 3
      .Columns[0].Width = 80
      .Columns[1].Width = 150
   End With
   '--------------------------------------------------------------
   'Loop through the collection, the key of the columnview becomes
   'the primary key of clin_requests.inbox_general
   'When documents have been filed - user could have inadvertantly
   'pasted in an invisible CR \n line, which causes the list to
   'span muliple lines, so fix this
   '--------------------------------------------------------------
   If bRefresh Then currentconsult.Refresh("letters_received")
   For Each letters_received In currentconsult!letters_received
      bSkip = False
      x = letters_received!pk_document
      '---------------------------------------
      'Does the user want to filter on author?
      '---------------------------------------
      If txtLetterFilterAuthor.text <> "" Then  'Or txtDocumentFilterTag.text <> "" Then
         '---------------------------------------------------------------------------------------------
         ' Yes: User wants to filter by author, if what they are looking for not found, skip the record
         '---------------------------------------------------------------------------------------------
         If Not InStr(Lower(letters_received!originator), Trim(Lower(txtLetterFilterAuthor.text))) Then
            bskip = True
         Else
            '---------------------------------------------------------------------
            'Have found the author bit, now do they want a particular tag as well?
            '---------------------------------------------------------------------
            If txtLetterFilterTag.text <> "" Then
               If Not InStr(Lower(letters_received!tag_user), Trim(Lower(txtLetterFilterTag.text))) Then
                  bskip = True
               Else
                  bskip = False
               End If
            Else
               bskip = False
            Endif
            
         End If
      Else
         '------------------------------------------------------------------
         'User dosn't want to filter on author - how about just on user tag?
         '------------------------------------------------------------------
         If txtLetterFilterTag.text <> "" Then
            If letters_received!tag_user = "" Then
               If Not InStr(Lower("unfiled"), Trim(Lower(txtLetterFilterTag.text))) Then
                  bskip = True
               Else
                  bskip = False
               End If
            Else
               If Not InStr(Lower(letters_received!tag_user), Trim(Lower(txtLetterFilterTag.text))) Then
                  bskip = True
               Else
                  bskip = False
               End If
            End If
         Endif
      End If
      
      If bskip = False Then
         cvwLettersReceived.Add(x, 0)
         If IsNull(letters_received!date_created) Then   'fixme remove me when bug fixed in FMetadata
            Message.info("This letter has no date - there is a bug in EasyGP as it should not have been possible to file this,\n\nPlease contact the developers with details")
         Else
            cvwLettersReceived[x][0] = Format(letters_received!date_created, "dd/mm/yyyy")
         End If
         If letters_received!tag_user = "" Then
            cvwLettersReceived[x][1] = "** UNFILED LETTER **"
         Else
            cvwLettersReceived[x][1] = Replace$(letters_received!tag_user, "\n", "")
         End If
         cvwLettersReceived[x][2] = letters_received!originator
      End If
   Next
   If cvwLettersReceived.count = 0 Then
      'If have run out of letters, eg could have just been filing unfiled ones,reload the list
      If txtLetterFilterAuthor.text <> "" Or txtLetterFilterTag.text <> "" Then
         txtLetterFilterAuthor.text = ""
         txtLetterFilterTag.text = ""
         cvwLettersReceived_Refresh() 'try again
      End If
   Endif
   
End

Public Sub DocumentFilter_KeyRelease()
   '-------------------------------------------------------------------------
   'User wants to filter document on either tag or who sent them 'originator'
   '-------------------------------------------------------------------------
   
   If IsNull(currentconsult) Or bExit Then Return
   Select Case Last.tag
      Case "tag"
         cvwLettersReceived_Refresh()
      Case "author"
         cvwLettersReceived_Refresh()
   End Select
   
End

Public Sub InboxResults_KeyRelease()
   '-----------------------------------------------------------------------
   'User has typed in one of the two textboxes underneath the results inbox
   'fixme duplicated in Fclinical as are the cvwRecalls/Letters
   'needs moving out
   '-----------------------------------------------------------------------
   
   If Bexit Then Return
   Select Case Last.tag
      Case "exclude"
         bExit = True
         txtInboxResults_filter.text = ""
         bexit = False
      Case "filter inbox results"
         bExit = True
         txtInboxResults_Exclude.text = ""
         bexit = False
   End Select
   cvwResults_Refresh()
   
End

Public Sub cvwResults_Menu()
   
   If Last.count Then
      mnuResults.Popup()
   Endif
   
End

Public Sub mnuResults_Click()
   
   Select Case Last.tag
      Case "view"
         Result_View()
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwResults, "FRecallsSend")
   End Select
Catch
   Return
   
End

Public Sub Result_View()
   
   modUtilGUI.NotImplemented("Viewing results")
   
End

Public Sub cvwLettersReceived_Menu()
   
   If Last.count Then
      mnuLetters.Popup()
   Endif
   
End

Public Sub mnuLetters_Click()
   
   Select Case Last.tag
      Case "view"
         Letter_View()
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwLettersReceived, "FRecallsSend")
   End Select
Catch
   Return

End

Public Sub Letter_View()
   
   modUtilGUI.NotImplemented("Viewing letters")
   
End

Public Sub Recall_Link_To_Template(pk_recall As Integer, fk_template As Integer)
   
   modDBConnect.update("clin_recalls.recalls", Null, ["pk": pk_recall, "fk_template": fk_template])
   modDBConnect.CommitTrans()
   
End

Public Sub HBox_Recalls_Filters_Enter()
   
   Timer1.Enabled = True
   
End

Public Sub HBox_Recalls_Filters_Leave()
   
   Timer1.Enabled = False
   
End

Public Sub Timer1_Timer()
   
   Inc iTimer_Count
   
   If iTimer_Count > 3 And Trim(txtRecallFilter.text) <> "" Or Trim(txtFilterPatient.text) <> "" Then
      Reload()
   End If
   
End

Public Sub InboxResults_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub InboxResults_LostFocus()
   
   Last.BackGround = Color.white
   
End

Public Sub txtRecallFilter_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   Timer1.Stop
   
End

Public Sub txtRecallFilterLostFocus()
   
   Last.BackGround = Color.white
   
End

Public Sub txtRecallFilter_KeyRelease()
   '----------------------------------------------------------------
   'User is typing on in the textbox to filter the reason for recall
   'e.g find all PAP smears
   '----------------------------------------------------------------
   
   Timer1.Start
   iTimer_Count = 0
   
End

Public Sub txtFilterPatient_KeyRelease()
   
   Timer1.Start
   iTimer_Count = 0
   
End

Public Sub chkInactivePatients_Click()
   
   Reload()
   
End

Public Sub txtFilterPatient_Change()
   
   If txtFilterPatient.text = "" Then
      Clear_Lists_And_Filters
   Endif
   
End

Public Sub txtFilterPatient_GotFocus()
   
   Clear_Lists_And_Filters
   
End

Public Sub Clear_Lists_And_Filters()
   
   bexit = True
   txtInboxResults_filter.text = ""
   txtInboxResults_Exclude.text = ""
   txtLetterFilterTag.text = ""
   txtLetterFilterAuthor.text = ""
   bexit = False  
   cvwRecallsPatient.clear
   cvwLettersReceived.Clear
   cvwResults.Clear
   
End
