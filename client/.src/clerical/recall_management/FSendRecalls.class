' Gambas class file

' Copyright (C) 2008-2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' A module for administering logged recalls
'----------------------------------------------------------------------
'TODO       multi-select print
'           mark the recall with whatever actioning took place
'           put the audit trail in for each actioning
'----------------------------------------------------------------------
Private recalls_due As Collection
Private bexit As Boolean
Private patient As Collection
Private currentconsult As CConsult
Private templates As Collection
Private currentRecall As Collection
Private Template_Editor As FEditor                 'Text editor to write or import external files to

Public Sub form_Open()
   
   Init()
   
End

Public Sub Init()
   
   With cvwRecallsDue
      .columns.count = 10
      .Columns[0].Text = "Date Due"
      .Columns[1].Text = "Firstname"
      .Columns[2].Text = "Surname"
      .Columns[3].Text = "Street"
      .Columns[4].Text = "Reason"
      .Columns[5].Text = "Urgency"
      .Columns[6].Text = "By"
      .Columns[7].Text = "Last Done"
      .Columns[8].Text = "# Sent"
      .Columns[9].Text = "Template"
      
   End With
   cmbRecallsDue.Add("All Overdue Recalls")
   cmbRecallsDue.Add("Due in 2 Weeks")
   cmbRecallsDue.Add("Due in 3 Weeks")
   cmbRecallsDue.Add("Due in Next Month")
   ' With Template_Editor = New FEditor(Vbox_Editor)                     'Editor to create/load template
   '    .lblHeading.text = "Template Editor"
   '    .Init("FSendRecalls")
   ' End With
   
   cvwRecalls_Refresh(0, True) 'days overdue and overdue
   
End

Public Sub Consult_Check_Created(iconsult_type As Integer, summary As String)
   'probably should live elsewhere ?cConsult and pass parameters
   'see const for types of consult
   
   If IsNull(currentconsult) Then   
      CurrentConsult = New CConsult(patient)
      currentconsult.Set(iconsult_type, summary)
   End If
   
End

Public Sub cvwRecalls_Refresh(Optional days_due As Integer = 0, Optional bOverdue As Boolean = False)
   
   Dim x As Integer
   Dim recall As Collection
   
   cvwRecallsDue.Clear()
   templates = modRecallsDBI.Templates_Get() 'could have been updated
   recalls_due = modRecallsDBI.Recalls_Due_Get() 'always refresh collection
   For Each recall In recalls_due
      
      If bOverdue Then
         If recall!days_due < 0 Then
            cvwRecalls_Add(recall)
         End If
      Else
         If recall!days_due < days_due And recall!days_due > 0 Then
            cvwRecalls_Add(recall)
         Endif
      End If   
      
   Next
   
End

Public Sub cvwRecalls_Add(recall As Collection)
   
   Dim x As Integer
   
   x = recall!pk_recall
   cvwRecallsDue.add(x, 0)
   cvwRecallsDue[x][0] = Format(recall!due, "dd/mm/yyyy")
   cvwRecallsDue[x][1] = recall!firstname
   cvwRecallsDue[x][2] = recall!surname
   cvwRecallsDue[x][3] = Trim(recall!street1 & " " & recall!street2) & " " & recall!town & " " & recall!postcode 
   cvwRecallsDue[x][4] = recall!reason
   cvwRecallsDue[x][5] = recall!urgency
   cvwRecallsDue[x][6] = recall!contact_method
   Try cvwRecallsDue[x][7] = Format(recall!date_reminder_sent, "dd/mm/yyyy") 'may not exist
   cvwRecallsDue[x][8] = recall!num_reminders
   cvwRecallsDue[x][9] = recall!name                  'of the template
   
   
End

Public Sub cmbRecallsDue_Click()
   
   Select Case Last.Text
      Case "All Overdue Recalls"
         cvwRecalls_Refresh(0, True)
      Case "Due in 2 Weeks"
         cvwRecalls_Refresh(15, False)
      Case "Due in 3 Weeks"
         cvwRecalls_Refresh(22, False)
      Case "Due in Next Month"
         cvwRecalls_Refresh(29, False)
   End Select
   
End

Public Sub form_Close()
   
   Settings_Save()
   
End

Private Sub Settings_Save()
   
End

Private Sub Settings_Load()
   
End

Public Sub mnuRecallManagement_Click()
   
   Dim x As Integer
   
   Select Case Last.tag
      Case "opportunistic"
      Case "arrange by phone"
      Case "print for mailing"
         Print recalls_due    
         cvwRecallsDue.MoveFirst() 
         For x = 0 To cvwRecallsDue.count - 1
            If cvwRecallsDue.Item.Selected = True Then
               Print()
            Endif
            cvwRecallsDue.MoveNext()
         Next
         cvwRecallsDue.UnselectAll()
         cvwRecalls_Refresh(0, True)
      Case "view archived"
      Case "refused"
      Case "refused with explanation"
      Case "completed"
      Case "completed with explanation"
      Case "delete with explanation"
      Case "change font"
      Case "help"
         
   End Select
   
End

Public Sub cvwRecallsDue_Menu()
   
   mnuRecallManagement.Popup()
   
End

Public Sub Print()
   '-----------------------
   'Print the recall letter
   '  pk serial NOT NULL,
   '   fk_recall integer NOT NULL, -- key to clin_recalls.recall table
   '   date date NOT NULL, -- the date the reminder for the recall was processed
   '   latex text NOT NULL, -- the latex definition of the recall reminder sent
   '   fk_contact_method integer NOT NULL, -- key to contacts.lu_contact_type table e.g could point to letter/phone
   '   fk_address text, -- if not null letter posted or delivered to this address
   '   contact_value text, -- if not null contact via this text eg mobile phone, voip, email
   '   fk_staff integer, -- key to admin.staff table staff member who prepared the letter
   '   memo text, -- memo added by staff at the time e.g could have called patient who said they would make appointment
   ' 
   
   '-----------------------
   Dim laTex As String                                                'LaTex definition of the letter
   Dim sent As New Collection
   Dim audit_notes As String
   
   currentRecall = recalls_due[cvwRecallsDue.Item.Key] 
   CurrentConsult = New CConsult(recalls_due[cvwRecallsDue.Item.key])   'create the consultation
   Print cvwRecallsDue.Item.Key, recalls_due[cvwRecallsDue.Item.key]!wholename
   currentconsult.Set(const.cAuditAction_ReminderSent, "recall")        'of type audit for recall
   laTex = RecallLetter_LaTex_Construct().GetData()                     'get the letter definition
   '---------------------------------------------------------------
   'get the data together about how reminder was sent and save this  
   '---------------------------------------------------------------   
   sent!fk_recall = currentRecall!pk_recall                                                                                '
   sent!date = Now()
   sent!latex = laTex
   sent!fk_contact_method = const.ContactMethodLetter
   sent!fk_staff = modDBConnect.currentUser!fk_staff
   sent!pk = modDBConnect.insert("clin_recalls.sent", sent) 
   '-------------------------------------------------------------------------------------
   'Now update the actual recall so that it knows the last fk_sent and incr num_reminders
   '------------------------------------------------------------------------------------- 
   modDBConnect.update("clin_recalls.recalls", Null, ["pk": currentRecall!pk_recall, "fk_sent": sent!pk])
   modDBConnect.update("clin_recalls.recalls", Null, ["pk": currentRecall!pk_recall, "num_reminders": recalls_due[cvwRecallsDue.Item.Key]!num_reminders + 1])
   '---------------------------------------------------------------------------------------------------------------------------
   'Now the audit trail this will always be linked to the recall, so viewable e.g in FClinical using menu over the recalls list
   '---------------------------------------------------------------------------------------------------------------------------
   audit_notes = "letter sent to " & Trim(currentconsult!patient!street1 & " " & currentconsult!patient!street2) & " " & currentconsult!patient!town & " " & currentconsult!patient!postcode
  
 
   If modAudit.MakeAudit(currentconsult, const.sAuditAction[const.cAuditAction_ReminderSent], "clin_recalls.recalls", currentrecall!pk_recall, const.cSection_Recalls, audit_notes) Then 
      modDBConnect.CommitTrans()
      modPrinting.Print_latex(RecallLetter_LaTex_Construct().GetData(), const.Paper_Plain, 1)
   Else
       modDBConnect.RollBack()
   End If    
   
   
End

Public Sub RecallLetter_LaTex_Construct() As CTemplate
   '------------------------------------------
   'Construct the LaTex to send to the printer
   '------------------------------------------
   
   Dim sName As String
   Dim sAddress As String
   Dim sString As String
   Dim comm As Collection 
   Dim templ As New CTemplate("recall", "tex")
   
   templ.Subst_common(currentconsult)
   sString = UCase(Left(currentRecall!reason)) & Right(currentRecall!reason, Len(currentRecall!reason) - 1) & " (" & currentRecall!urgency & ")"
   templ.Subst("recall_details", sSTring)
   If Not IsNull(currentRecall!additional_text) Then
      templ.Subst("additional_text", currentRecall!additional_text)
   Else
      templ.Subst("additional_text", "\\relax")
   Endif
   
   sString = Trim(currentRecall!staff_to_see_title & " " & currentRecall!staff_to_see_firstname & " " & currentRecall!staff_to_see_surname)
   templ.Subst("dr_to_see", sString)
   '--------------------------------------------------------------------
   'Template appointment length, over-rides the recall appointment lengh
   'it's more likely the doctor just forgot the right length
   '--------------------------------------------------------------------
   ' templ.Subst("consult_length", currentRecall!appointment_length)
   If Not IsNull(currentRecall!fk_template) Then
      If currentRecall!fk_template <> 1 Then   '1= set back to no template
         templ.Subst_html("template", Templates[currentRecall!fk_template]!template) 'currently have fudged html see FRecallLetterTemplate.Save()
         templ.Subst("consult_length", Templates[currentRecall!fk_template]!appointment_length) 
      Else
         templ.Subst("consult_length", currentRecall!appointment_length)  
         templ.Subst("template", "\\relax") 
      End If  
   Else   
      templ.Subst("consult_length", currentRecall!appointment_length) 
      templ.Subst("template", "\\relax") 
   Endif
   Return templ
   
End

Public Sub cvwRecallsDue_Select()
   
   cvwRecallsDue.MoveCurrent()
   currentRecall = recalls_due[cvwRecallsDue.Item.Key]
   If Not IsNull(currentRecall!fk_template) Then
      Display_Template()
   Else
      ' txtTemplateName.text = "" 
      ' With Template_Editor
      '    .bExit = True   
      '    .teNotes.RichText = ""
      '    .bExit = False 
      ' End With  
      ' bExit = False    
   Endif
   
End

Public Sub Display_Template()
   
   bExit = True   
   
   ' txtTemplateName.text = Templates[recalls_due[cvwRecallsDue.Item.Key]!fk_template]!name
   ' With Template_Editor
   '    .bExit = True   
   '    .teNotes.RichText = Templates[recalls_due[cvwRecallsDue.Item.Key]!fk_template]!template
   '    .bExit = False 
   ' End With  
   ' bExit = False  
   
End
