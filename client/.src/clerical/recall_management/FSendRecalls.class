' Gambas class file

' Copyright (C) 2008-2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' A module for administering logged recalls
'----------------------------------------------------------------------
'TODO       multi-select print
'           mark the recall with whatever actioning took place
'           put the audit trail in for each actioning
'----------------------------------------------------------------------
Private recalls_due As Collection
Private bexit As Boolean
Private patient As Collection
Private currentconsult As CConsult
Private templates As Collection
Private currentRecall As Collection
Private Template_Editor As FEditor                 'Text editor to write or import external files to

Public Sub form_Open()
   
   Init()
   
End

Public Sub Init()

   With cvwRecallsDue
      .columns.count = 8
      .Columns[0].Text = "Date Due"
      .Columns[1].Text = "Firstname"
      .Columns[2].Text = "Surname"
      .Columns[3].Text = "Street"
      .Columns[4].Text = "Reason"
      .Columns[5].Text = "Urgency"
      .Columns[6].Text = "Contact by"
      
   End With
   cmbRecallsDue.Add("All Overdue Recalls")
   cmbRecallsDue.Add("Due in 2 Weeks")
   cmbRecallsDue.Add("Due in 3 Weeks")
   cmbRecallsDue.Add("Due in Next Month")
   With Template_Editor = New FEditor(Vbox_Editor)                     'Editor to create/load template
      .lblHeading.text = "Template Editor"
      .Init("FSendRecalls")
   End With
   
 
   cvwRecalls_Refresh(0, True) 'days overdue and overdue

End

Public Sub Consult_Check_Created(iconsult_type As Integer, summary As String)
   'probably should live elsewhere ?cConsult and pass parameters
   'see const for types of consult

   If IsNull(currentconsult) Then   
      CurrentConsult = New CConsult(patient)
      currentconsult.Set(iconsult_type, summary)
   End If
   
End

Public Sub cvwRecalls_Refresh(Optional days_due As Integer = 0, Optional bOverdue As Boolean = False)

   Dim x As Integer
   Dim recall As Collection

   cvwRecallsDue.Clear()
   templates = modRecallsDBI.Templates_Get() 'could have been updated
   recalls_due = modRecallsDBI.Recalls_Due_Get() 'always refresh collection
   For Each recall In recalls_due
      
      If bOverdue Then
         If recall!days_due < 0 Then
            cvwRecalls_Add(recall)
         End If
      Else
         If recall!days_due < days_due And recall!days_due > 0 Then
            cvwRecalls_Add(recall)
         Endif
      End If   
      
   Next
   
End

Public Sub cvwRecalls_Add(recall As Collection)

   Dim x As Integer
   
   x = recall!pk_recall
   cvwRecallsDue.add(x, 0)
   cvwRecallsDue[x][0] = Format(recall!due, "dd/mm/yyyy")
   cvwRecallsDue[x][1] = recall!firstname
   cvwRecallsDue[x][2] = recall!surname
   cvwRecallsDue[x][3] = Trim(recall!street1 & " " & recall!street2) & " " & recall!town & " " & recall!postcode 
   cvwRecallsDue[x][4] = recall!reason
   cvwRecallsDue[x][5] = recall!urgency
   cvwRecallsDue[x][6] = recall!contact_method
   
End

Public Sub cmbRecallsDue_Click()

   Select Case Last.Text
      Case "All Overdue Recalls"
         cvwRecalls_Refresh(0, True)
      Case "Due in 2 Weeks"
         cvwRecalls_Refresh(15, False)
      Case "Due in 3 Weeks"
         cvwRecalls_Refresh(22, False)
      Case "Due in Next Month"
         cvwRecalls_Refresh(29, False)
   End Select

End

Public Sub form_Close()
   
   Settings_Save()
   
End

Private Sub Settings_Save()
   
End

Private Sub Settings_Load()
   
End

Public Sub mnuRecallManagement_Click()
   Dim x As Integer
   
   Select Case Last.tag
      Case "opportunistic"
      Case "arrange by phone"
      Case "print for mailing"
          Print recalls_due    
        cvwRecallsDue.MoveFirst() 
        For x = 1 To cvwRecallsDue.count 
         
            If cvwRecallsDue.Item.Selected = True Then
               Print()
               cvwRecallsDue.Item.Selected = False 
            End If   
            cvwRecallsDue.MoveNext()
        Next
      Case "view archived"
      Case "refused"
      Case "refused with explanation"
      Case "completed"
      Case "completed with explanation"
      Case "delete with explanation"
      Case "change font"
      Case "help"
         
   End Select
   
End

Public Sub cvwRecallsDue_Menu()
   
   mnuRecallManagement.Popup()
   
End

Public Sub Print()
   '-----------------------
   'Print the recall letter
   '-----------------------
   cvwRecallsDue.MoveCurrent()
   patient = recalls_due[cvwRecallsDue.Item.key]
   Consult_Check_Created(const.ConsultType_AuditNote, "recall")
   modPrinting.Print_latex(RecallLetter_LaTex_Construct().GetData(), const.Paper_Plain, 1)
   
End

Public Sub RecallLetter_LaTex_Construct() As CTemplate
   '------------------------------------------
   'Construct the LaTex to send to the printer
   '------------------------------------------
   Dim sName As String
   Dim sAddress As String
   Dim sString As String
   Dim comm As Collection 
   Dim templ As New CTemplate("recall", "tex")
   
   templ.Subst_common(currentconsult)
   sString = UCase(Left(currentRecall!reason)) & Right(currentRecall!reason, Len(currentRecall!reason) - 1) & " (" & currentRecall!urgency & ")"
   templ.Subst("recall_details", sSTring)
   If Not IsNull(currentRecall!additional_text) Then
      templ.Subst("additional_text", currentRecall!additional_text)
   Else
     templ.Subst("additional_text", "\\relax")
   Endif
   
   sString = Trim(currentRecall!staff_to_see_title & " " & currentRecall!staff_to_see_firstname & " " & currentRecall!staff_to_see_surname)
   templ.Subst("dr_to_see", sString)
   '--------------------------------------------------------------------
   'Template appointment length, over-rides the recall appointment lengh
   'it's more likely the doctor just forgot the right length
   '--------------------------------------------------------------------
  ' templ.Subst("consult_length", currentRecall!appointment_length)
   If Not IsNull(currentRecall!fk_template) Then
       If currentRecall!fk_template <> 1 Then   '1= set back to no template
             templ.Subst_html("template", Templates[currentRecall!fk_template]!template) 'currently have fudged html see FRecallLetterTemplate.Save()
             templ.Subst("consult_length", Templates[currentRecall!fk_template]!appointment_length) 
       Else
           templ.Subst("consult_length", currentRecall!appointment_length)  
          templ.Subst("template", "\\relax") 
       End If  
   Else   
       templ.Subst("consult_length", currentRecall!appointment_length) 
       templ.Subst("template", "\\relax") 
   Endif
   Return templ

End

Public Sub cvwRecallsDue_Select()
   
   cvwRecallsDue.MoveCurrent()
   currentRecall = recalls_due[cvwRecallsDue.Item.Key]
   If Not IsNull(currentRecall!fk_template) Then
      Display_Template()
   Else
      txtTemplateName.text = "" 
      With Template_Editor
         .bExit = True   
         .teNotes.RichText = ""
         .bExit = False 
      End With  
      bExit = False    
   Endif

End

Public Sub Display_Template()
   
   bExit = True   
   
   txtTemplateName.text = Templates[recalls_due[cvwRecallsDue.Item.Key]!fk_template]!name
   With Template_Editor
      .bExit = True   
      .teNotes.RichText = Templates[recalls_due[cvwRecallsDue.Item.Key]!fk_template]!template
      .bExit = False 
   End With  
   bExit = False  
   
End
