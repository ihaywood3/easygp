' Gambas class file
' Copyright (C) 2008-10 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'---------------------------------------------------------------------------------------------------------
' PURPOSE        : Module for importing pre-scanneed documents, image files, pictures
' HOW THIS WORKS : Scanning and archiving directories pre-defined see Admin.Global Preferences tab
'                : Basically the embedded metadata form does all the work and the saving
'                : only menu items on this form do something eg split/join pdf/delete etc
'                : the popup menu on the filechooser control is over-ridden by an observor
'                : the toolbutton on the pdf viewer is over-ridden by an observor
'                : fixme: this should operate off FMetdata.tbSave
' BUGS           : Please report
'                : tbMultiPagefiles_Click with "remove"
' NOT IMPLEMENTED: Split PDF routine in modPrinting is buggy FIXME
'                : Implement the move to library
'                : Implement some sort of re-loading of this module if a document sent back from inbox
'                : Fix the zoom - perhaps Fpdf should know what form it is embedded in and act accordingly
'TODO            : beautify and line up the gui
'---------------------------------------------------------------------------------------------------------

Private obs As Observer
Private RootDir As String 
Private bExit As Boolean
Private PDForm As FPdf
Private FMetaData As FDocumentMetaData
Private Default_Zoom As Float 

Public Sub Init()
   rootdir = modAdminDBI.Config_Get("document_scanning", "/var/easygp/scanning", "Directories/scanning")
   
   obs = New Observer(filechooser1.FileView.Children[1]) As "filelist"
   LibraryMenu_Construct()
   With FMetaData = New FDocumentMetaData(Vbox_Metadata)             'This metadata instance is set up to look simple
       .Init()
      .lblSendingEntity.font.bold = True                             'showing only input for staff,patient, who sent doc and doc date
      .lblSendingEntity.alignment = Align.Center
      .lblSendingEntity.Expand = True 
      .lblSendingEntity.Foreground = Color.Blue
      .txtSender.Visible = False   
      .Set_Embedded_Form_Name("Scanning")
      .HBox_Author.Visible = True
      .VBox_Organisation.Visible = True  
      .Hbox_TypeSender.visible = True 
      .HBox_Document_Tag.Visible = False 
      .HBox_Comment.Visible = False  
      .HBox_Laterality.visible = False
      .txtRecipient.Background = Color.White
      .txtRecipient.Enabled = True
      .lblMeasure.text = " Organisation "
      .HBox_DocumentType.Visible = False  
      modEditAreaHelpers.Resize_labels(.VBox_EditArea, .lblMeasure)
      modEditAreaHelpers.Resize_labels(.VBox_Organisation, .lblMeasure)
      modEditAreaHelpers.Resize_labels(.Vbox_Person, .lblmeasure)
      .lblBirthdate.width = .ChkLockStaffMember.width
      .txtStreet.ReadOnly = True             'patients street
      .txtSuburb.ReadOnly = True             'patients suburb
      .txtDocumentTag.ReadOnly = True
      .txtStreet1.ReadOnly = True
      .txtStreet2.ReadOnly = True
      .txtOrganisationCategory.ReadOnly = True
      .txtSuburbOrganisation.ReadOnly = True 
      .txtPersonFirstname.ReadOnly = True
      .txtPersonCategory.ReadOnly = True
      .txtPersonOccupation.ReadOnly = True
      .txtpersonPostcode.ReadOnly = True
      .txtPersonState.ReadOnly = True
      .txtPersonSuburb.ReadOnly = True
      .EditArea_Clear()
   End With
   With FileChooser1                               'Don't want all the filechooser control bits showing
      .DirView.Visible = False                     'don't show the directory tree
      .root = rootdir                              'set the root directory then will auto-show all scanned files.
   End With
   Settings_Load()
   With PDForm = New FPdf(Vbox_Viewer) 'fix me to Vbox_PDF
      .BtOpen.Visible = False
   End With
   obs = New Observer(FMetaData.txtDocumentDate) As "txtDocumentDate"      'detect when <enter> hit and file the document
End

Public Sub Form_Close()
   
   Settings_Save()
   
End

Public Sub txtDocumentDate_Activate()
   
   Stop Event
   If Last.tag = "document date" Then
      tbFile_Click()
   Endif
   
End

Public Sub filelist_menu()
   '----------------------------------------------------------------------------
   'Over-ride the event handler on the filechooser1 control to show our own menu
   '----------------------------------------------------------------------------   
   Stop Event
   mnuFileChooser.Popup()
End

Public Sub filelist_Keypress()
   
   If key.code = key.return Then
      Stop Event
      
      If FMetaData.txtRecipient.text <> "" Then
         FMetaData.txtPatient.SetFocus()
      Else
         FMetaData.txtRecipient.SetFocus()
      Endif
   Endif
   
End

Public Sub Settings_Save()

   Settings["Clerical/VSplit_Archiving.Layout"] = VSplit_Archiving.Layout
   Settings["Clerical/HSplit_Archiving.Layout"] = HSplit_Archiving.Layout
   Settings["Clerical/pdfZoom"] = PDForm.CurrentZoom

End

Private Sub Settings_Load()

   Try VSplit_Archiving.Layout = Settings["Clerical/VSplit_Archiving.Layout"]
   Try HSplit_Archiving.Layout = Settings["Clerical/HSplit_Archiving.Layout"]
   Try Default_Zoom = Settings["Clerical/pdfZoom"] 

End

Public Sub FileChooser1_Activate()
   
   Dim Filepath As String
   
   If FileChooser1.SelectedPaths.count Then
      Return 
   Else
      FMetaData.EditArea_Clear()
      Inc Application.Busy
      Filepath = FileChooser1.SelectedPath
      If File.Ext(Filepath) <> "" Then
         Select Case LCase(File.Ext(Filepath))
            Case "pdf"
               Vbox_Images.Visible = False  
               PDForm.Visible = True
               PDForm.hPdf.Orientation = PdfDocument.Normal 'may have been rotated last time.
               PDForm.PBox.Visible = True 
               PDForm.CurrentZoom = Default_Zoom
               PDForm.Load_PDF(FilePath)
               
            Case "png", "jpeg", "tiff", "gif", "jpg"
               PDForm.Visible = False
               Vbox_Images.Visible = True
               pbox.Visible = True  
               pbox.Picture = Picture.Load(filepath)
            Case Else
               Message.Info("Unknown file type")
         End Select
         
         With FMetaData
            .txtFilename.text = Filepath
         End With
      End If   
   End If
   Dec Application.Busy
   
End

Public Sub FileChooser1_Change()
   
   Try FileChooser1_Activate()
   
End

Public Sub btZoomIn_Click()
   
   Vbox_Picture.padding = Min(Vbox_Picture.Padding + 10, VBox_ScannedDocument.width - 20)
   
End

Public Sub btZoomOut_Click()
   
   Vbox_Picture.padding = Max(Vbox_Picture.Padding - 10, 10)
   
End

Public Sub tbFile_Click()
   
   If FMetaData.Save() Then
      Reload()  'file the document, reload files, set focus, show next doc
   End If
   
End

Public Sub tbMultiPagefiles_Click()
   
   Select Case Last.tag
      Case "add"
         Try lvfilesToJoin.Add(FileChooser1.SelectedPath, File.Name(FileChooser1.SelectedPath))
         lblFilesToJoin_UpdateCount()
      Case "remove"
         lvFilestojoin.MoveCurrent()
         lvfilesToJoin.Remove(lvFilestojoin.Item.key)
         Try lvFilestojoin.MoveFirst()
         lblFilesToJoin_UpdateCount()
   End Select
   
End

Public Sub lblFilesToJoin_UpdateCount()
   
   If lvfilesToJoin.count <> 0 Then 
      lblFilesToJoin.text = "Files to join (" & Str(lvfilesToJoin.count) & ")"
   Else
      lblFilesToJoin.text = "Files to join"
   End If
   
End

Public Sub lvFilesToJoin_Select()
   
   lvFilestojoin.MoveCurrent()
   Select Case LCase(File.Ext(Last.key))
      Case "pdf"
         PDForm.Load_PDF(Last.key)
      Case "png", "jpeg", "tiff", "gif", "jpg"
         
   End Select
   
End

Public Sub JoinPDF()
   
   Dim pdf_files As New Collection
   Dim file_to_join As String 
   Dim fname As String
   Dim x As Integer
   
   If lvFilestojoin.count = 0 Then Return 
   fname = File.Dir(FileChooser1.SelectedPath) & "/" & File.name(Temp$) & Format$(Now, "dd-mm-yyyy:hh:nn:ss")
   lvFilestojoin.MoveFirst
   For x = 0 To lvFilestojoin.count - 1
      pdf_files.Add(lvFilestojoin.Item.Key, pdf_files.count)
      lvFilestojoin.MoveNext
   Next
   fname = modPrinting.Join_PDF(pdf_files, fname)  'join the files together
   lvFilestojoin.MoveFirst                         'then remove them from the HDD
   For x = 0 To lvFilestojoin.count - 1
      Kill lvFilestojoin.Item.Key
      lvFilestojoin.MoveNext
   Next
   lvfilesToJoin.Clear()
   lblFilestoJoin.text = "Files to join"
   FileChooser1.Reload()
   
End

Public Sub Split_pdf()
   
   modPrinting.Split_PDF(FileChooser1.SelectedPath)
   
End

Public Sub mnuFileChooser_Click()
   
   Select Case Last.tag
      Case "delete single"
         File_Delete()
      Case "delete multiple"
         Print "delete multiple"
      Case "move to library"
         Move_To_Library()
      Case "rotate 180 and save"
         Rotate_And_Save(180)
      Case "rotate 90 and save"
         Rotate_And_Save(90)
      Case "rename file"
      Case "split"
         Split_pdf()
   End Select
   FileChooser1.Reload()
   
End

Public Sub Rotate_And_Save(amount As Integer)
   
   Dim Step1File As String = Temp$() & "1.pdf"
   Dim Step2File As String = Temp$() & "2.pdf"
   Dim originalFileName As String = File.Name(FileChooser1.SelectedPath)
   
   Select Case amount
      Case 180
         Shell "pdf90 --outfile " & Step1File & " " & rootdir & "/" & originalFileName Wait
         Shell "pdf90 --outfile " & Step2File & " " & Step1File Wait
         Kill rootdir & "/" & originalFileName 
         Try Copy Step2File To rootdir & "/" & originalFileName
         If Not Error Then
            Kill Step1File
            Kill Step2File
         Endif
      Case 90
         Shell "pdf90 --outfile " & Step1File & " " & rootdir & "/" & originalFileName Wait
         Kill rootdir & "/" & originalFileName 
         Try Copy Step1File To rootdir & "/" & originalFileName
         If Not Error Then
            Kill Step1File
         Endif
   End Select
   
End

Public Sub Reload()
   
   Dim hCtrl As Control
   Dim cv As ColumnView
   
   FileChooser1.Reload()
   For Each hctrl In filechooser1.FileView.Children
      If hctrl Is ColumnView Then
         cv = hctrl
         If Not cv.MoveFirst() Then  'could be empty
            cv.Item.Selected = True  
            cv.SetFocus()
            FileChooser1_Activate()  
            Break
         Else
            
            FMetaData.EditArea_Clear()
            PDForm.Visible = False
            pbox.Visible = False
            FMetaData.chkAllStaff.value = False
            FMetaData.chkLockPatient.value = False
            FMetaData.chkLockSender.value = False
            
         End If
      Endif
   Next
   
End

Public Sub LibraryMenu_Construct()
   
   Dim root_dir As String = User.home & "/easygp/library"
   Dim sFile As String
   Dim mnu As Menu
   
   If IsDir(root_dir) Then
      For Each sFile In Dir(root_dir)                      
         If IsDir(root_dir & "/" & sFile) Then
            mnu = New Menu(mnuFileChooser_MoveToLibrary)
            mnu.Name = sFile
            mnu.text = sFile
            mnu.tag = sFile
         Endif
      Next
   End If    
   
End

Public Sub Move_To_Library()
   
End

Public Sub File_Delete()
   
   Try Kill filechooser1.SelectedPath
   If Error Then
      Message.Info("An error occurred whilst attempting to delete the file.")
   Endif
   filechooser1.Reload()
   PDForm.PBox.Visible = False   
   pbox.Visible = False 
   
End

Public Sub lvFilesToJoin_Menu()
   
   If Last.count Then mnuJoinFiles.Popup()
   
End

Public Sub mnuJoinFiles_Click()
   
   If Last.tag = "remove" Then
      lvFilestojoin.MoveCurrent()
      lvFilestojoin.Remove(lvfilesToJoin.item.key)
      Try lvfilesToJoin.MoveFirst()
      If Not Error Then
         lvfilesToJoin.SetFocus()
      Else
         lvfilesToJoin.Clear()
      Endif
   Endif
   
End

Public Sub tbFile_KeyPress()
   
   If key.code = key.Return Then
      tbFile_Click()
   Endif
   
End

Public Sub tbJoin_Click()
   
   Select Case Last.tag
      Case "join"
         JoinPDF()
      Case "clear"
         
         lvFilestojoin.Clear()
         lblFilestoJoin.text = "Files to join"
   End Select
   
End

Public Sub tbDiscard_Click()
   
   If Message.Question("Are you sure you want to delete this document") = 1 Then
      File_Delete()
   End If
   
End
