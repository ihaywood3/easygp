' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' PURPOSE: To satisfy F*ing accreditors during accreditation
'-------------------------------------------------------------------------
Private bExit As Boolean
Private columnview1_key As Variant
Private cvwIssues_Key As Variant
Private fk_issue As Variant
Private fk_staff_allocated As Variant
Private fk_staff_logged As Variant
Private fk_staff_type As Variant
Private Staff As Collection
Private StaffTypes As Collection
Private Issues As Collection
Private Staff_Attending As Collection
Private agenda_items As Collection
Private Const ctab_Issues As Integer = 0
Private Const ctab_meeting As Integer = 1
Private Form_Decision_Support As FDecisionSupport

Public Sub _new()
   
   StaffTypes = modutil.Copy_Collection_Keyed_Sequentially(modAdminDBI.Staff_Types_Get())
   modUtilGUI.LoadCombo(cmbStaffType, StaffTypes, "type")
   cmbStaffType.index = -1
   With cvwIssues
      .Columns.count = 3
      .Columns[0].text = "Date Logged"
      .Columns[1].text = "By"  
      .Columns[2].text = "Issue"
   End With
   ' With cvwAgendaItems
   '    .Columns.count = 3
   '    .Columns[0].text = "Date Logged"
   '    .Columns[1].text = "By"  
   '    .Columns[2].text = "Issue"
   ' End With
   lblMeasure.text = "Remove From Agenda      "
   modEditAreaHelpers.Resize_labels(VBox_EditArea, lblmeasure) 
   lblMeasure.text = "Remove From Agenda      "
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Meeting, lblmeasure)
   lblMeasure.text = "Find Staff Member     "
   modEditAreaHelpers.Resize_labels(VBox_Staff_Attending, lblmeasure)
   modEditAreaHelpers.Resize_label(lbl3, lblmeasure)
   Form_Decision_Support = New FDecisionSupport(Vbox_Decision_Support)
   
End

Public Sub Init()
   
   Settings_Load 
   Reload
   
End

Private Sub Form_Close()
   
   ' Settings_Save 
   
End

Private Sub Settings_Load()
   
   VSplit_Issues.Layout = Settings[Me.Name & "/VSplit_Issues.Layout", modUtilGUI.VSplit([1, 1])]
   VSplit_Meetings.Layout = Settings[Me.Name & "/VSplit_Meetings.Layout", modUtilGUI.VSplit([2, 1])]
   cvwIssues.Font = Font[Settings[Me.Name & "/cvwIssues.font", "Arial,9"]]
   ' cvwAgendaItems.Font = Font[Settings[Me.Name & "/cvwAgendaItems.font", "Arial,9"]]
   '  lbStaffAttending.Font = Font[Settings[Me.Name & "/lbStaffAttending.font", "Arial,9"]]
   
End

Private Sub Issue_Save()
   '-----------------------------------------------------------------
   'Saves a user-entered issue to be raised at the next staff meeting
   '-----------------------------------------------------------------
   
   If Vbox_EditArea_Outer.padding = 0 Then Return
   If Not Issue_Data_Is_Valid() Then Return
   
End

Private Sub Issue_Data_Is_Valid() As Boolean
   
   If Trim(txtIssueDetails.text) = "" Then Return 
   Return True   
   
End

Public Sub EditArea_TxtBox_Change()
   
   Select Case Last.tag
      Case "issue"
         Vbox_EditArea_Outer.Padding = 1
   End Select
   
End

Public Sub VSplit_Issues_Resize()
   
   Settings[Me.name & "/VSplit_Issues.Layout"] = VSplit_Issues.Layout
   
End

Public Sub Staff_Find(txtbox As TextBox)
   'Finds the staff member to allocate document to, or staff member attending meetting
   
   Dim x As Integer
   Dim Staff_Member As Collection
   
   With columnview1
      .Clear()
      .Columns.count = 3
   End With
   If Trim(txtbox.text) = "" Then Return
   staff = modutil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get(Trim(txtbox.text)))
   If Not staff.count Then Return
   For Each Staff_Member In staff
      columnview1.Add(x, 0)
      columnview1[x][0] = Staff_Member!title & " " & Staff_Member!wholename
      columnview1[x][1] = Staff_Member!occupation
      columnview1[x][2] = Staff_Member!branch
      Inc x
   Next
   modUtilGUI.Columnview_Columns_Set_Size(columnview1, lblmeasure)
   With Columnview1
      .Visible = True
      .Raise
      .tag = txtbox
   End With
   
End

Public Sub ColumnView1_KeyPress()
   '---------------------------------------------------------
   'Either accept the user selection, or if they have hit the
   'up arrow, move back into the textbox
   '----------------------------------------------------------
   
   Select Case key.Code
      Case key.Return
         ColumnView1_DblClick()
   End Select
   
End

Public Sub ColumnView1_DblClick()
   
   With columnview1
      .MoveCurrent
      columnview1_key = .item.Key
      .Visible = False  
   End With
   If Not Staff_Attending.Exist(staff[columnview1_key]!fk_staff) Then  
      Staff_Display(staff[columnview1_key], columnview1.tag)
   End If   
   columnview1.Visible = False  
   ' lbStaffAttending.Visible = True 
   tlStaffAttending.Visible = True  
   
End

Public Function Staff_Attending_Not_In_list()
   
End

Public Sub Staff_Display(Staff_Member As Collection, txtbox As TextBox)
   
   Select Case txtbox.Tag
      Case "staff allocated"
         Try txtbox.text = staff_member!title & " " & staff_member!wholename
         fk_staff_allocated = Staff_Member!fk_staff
      Case "staff attending"
         Staff_Attending.Add(Staff_Member!fk_staff, Staff_Member!fk_staff)
         '  lbStaffAttending.Add(staff_member!title & " " & staff_member!wholename)
         With txtbox
            .text = ""
            .SetFocus
         End With
         If Len(tlStaffAttending.text) <> 0 Then tlStaffAttending.text &= ";"
         tlStaffAttending.text &= staff_member!title & " " & staff_member!wholename
         Minutes_Update
   End Select
   txtbox.pos = 0
   
End

Public Sub Reset_Keys()
   
   staff = Null
   fk_staff_allocated = Null 
   fk_staff_logged = Null
   fk_issue = Null
   
End

Public Sub Editarea_Clear()
   
   modEditAreaHelpers.EditArea_Clear(Vbox_Editarea)
   VBox_EditArea.Enabled = False 
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "new"
         Issue_New 
      Case "save"
         Save
      Case "save note"
      Case "new meeting"
         Meeting_New
      Case "save agenda item"
      Case "new note"
   End Select
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   If Last.tag = "staff allocated" Or Last.tag = "staff attending" Then
      ' With columnview1
      '    .Visible = False  
      '    .top = Last.Parent.parent.top + Last.Parent.height 
      '    .left = Last.Parent.Left
      '    .width = txtProposedAction.Width
      ' End With
      columnview1.Visible = False   
      '  lbStaffAttending.Visible = True 
      tlStaffAttending.Visible = True
   End If      
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.White
   
End

Public Sub Save()
   '-------------------------------------------------------------------------------
   ' Create table staff_meeting_issues
   ' (pk serial primary key,
   ' date_logged  timestamp without time zone NOT NULL,
   ' issue text not null,
   ' issue_details text not null,
   ' fk_staff_logged integer not null references  admin.staff(pk),
   ' fk_staff_allocated integer default null not null references  admin.staff(pk),
   ' proposed_action text default null,
   ' progress_towards_resolution text default null,
   ' outcome_achieved boolean default false,
   ' finalised boolean default false
   ' );
   '--------------------------------------------------------------------------------
   
   Dim issue As CRow 
   
   If Vbox_EditArea_Outer.Padding = 0 Then Return
   If Not Issue_Valid() Then Return
   Issue = New CRow
   If Not IsNull(fk_issue) Then
      Issue.put_unchanged(fk_issue, "fk_issue")
   End If   
   issue!date_logged = Now()
   issue!fk_staff_logged = modDBConnect.currentUser!fk_staff
   issue!issue = Trim(txtIssue.text) 
   issue!issue_details = Trim(txtIssueDetails.text)
   issue!fk_staff_allocated = fk_staff_allocated
   If Trim(txtProposedAction.text) <> "" Then
      issue!proposed_action = Trim(txtProposedAction.text)
   Else
      issue!proposed_action = Null
   End If   
   If Trim(txtProgressToResolution.text) <> "" Then
      issue!progress_towards_resolution = Trim(txtProgressToResolution.text) 
   Else
      issue!progress_towards_resolution = Null
   Endif
   If rbOutcomeAchievedYes.value = True Then
      issue!outcome_achieved = True
   Else
      issue!outcome_achieved = False  
   End If   
   If rbRemoveFromAgendaItemsYes.value = True Then
      issue!finalised = True  
   Else
      issue!finalised = False 
   Endif
   issue.Save("clerical.staff_meeting_issues", "fk_issue")
   modDBConnect.CommitTrans()
   Vbox_EditArea_Outer.Padding = 0
   Reload   
   
End

Public Sub Reload()
   'Reloads the issues
   
   Dim issue As Collection
   Dim x As Integer
   
   cvwIssues.Clear
   ' modUtilGUI.Columnview_Clear_Properly(cvwAgendaItems)
   Issues = modUtil.Copy_Collection_Keyed_Sequentially(modStaffMeetings.Issues_Get())
   For Each issue In Issues
      cvwIssues.Add(x, 0)
      cvwIssues[x][0] = Format(issue!date_logged, "dd/mm/yyyy")
      cvwIssues[x][1] = issue!staff_logged_title & " " & issue!staff_logged_wholename
      cvwIssues[x][2] = issue!issue
      ' cvwAgendaItems.Add(x, 0)
      ' cvwAgendaItems[x][0] = Format(issue!date_logged, "dd/mm/yyyy")
      ' cvwAgendaItems[x][1] = issue!staff_logged_title & " " & issue!staff_logged_wholename
      ' cvwAgendaItems[x][2] = issue!issue
      Inc x 
   Next     
   modUtilGUI.Columnview_Columns_Set_Size(cvwIssues, lblMeasure)
   '  modUtilGUI.Columnview_Columns_Set_Size(cvwAgendaItems, lblMeasure)
   
End

Public Function Issue_Valid() As Boolean
   
   If Trim(txtIssue.text) = "" Then
      Message.Info("Please, por favor, enter an issue?")
      txtIssue.SetFocus
      Return
   End If 
   If Trim(txtIssueDetails.text) = "" Then
      If Message.Question("Are you sure you don't want to write some more details about this issue"
         "by way of explaining why it needs to be added to the next staff meeting agenda?", "Yes - Save Anyway", "No") = 2 Then
         txtIssueDetails.SetFocus
         Return
      End If 
   Endif
   Return True 
   
End

Public Sub Issue_New()
   '-------------------------------------------- 
   ' Add a new agenda item for the staff meeting
   '-------------------------------------------- 
   
   Editarea_Clear
   Reset_Keys
   txtDateLogged.text = Format(Now, "dd/mm/yyyy")
   txtStaffLogged.text = modDBConnect.currentUser!wholename
   VBox_EditArea.Enabled = True  
   txtIssue.SetFocus
   
End

Public Sub Issue_Delete()
   
   Dim issue As Collection
   Dim sMsg As String
   
   Issue = Issues[cvwIssues_Key]
   smsg = "Are you sure you want to delete this issue:\n\n"
   smsg &= "'" & Trim(txtIssueDetails.Text) & "'\n" 
   If Message.Question(smsg, "Yes", "No") = 2 Then Return
   If modDBConnect.update("clerical.staff_meeting_issues", Null, ["pk": fk_issue, "deleted": True]) Then 
      modDBConnect.CommitTrans()
      Reload   
   Endif
   
End

Public Sub EditArea_TextBox_KeyRelease()
   
   Select Case Last.tag 
      Case "staff allocated", "staff attending"
         Staff_Find(Last)
   End Select
   
End

Public Sub EditArea_TextBox_Change()
   
   If Last.tag = "staff attending" And Trim(Last.text) <> "" Then
      columnview1.Visible = True
      '  lbStaffAttending.Visible = False   
      tlStaffAttending.Visible = False 
   Else
      columnview1.Visible = False   
      ' lbStaffAttending.Visible = True 
      tlStaffAttending.Visible = True
   Endif
   EditArea_Notify_Data_Change(True)
   
End

Public Sub EditArea_Notify_Data_Change(bFlag As Boolean)
   
   If bexit Then Return
   
   If bFlag Then   
      Vbox_EditArea_Outer.Padding = 1
   Else
      Vbox_EditArea_Outer.Padding = 0
   End If 
   
End 

Public Sub cvwIssues_Menu()
   
   If cvwIssues.count Then mnuIssues.Popup 
   
End

Public Sub cvwIssues_Select()
   
   cvwIssues.MoveCurrent
   cvwIssues_Key = cvwIssues.Item.Key
   Issue_Display     
   
End

Public Sub mnuIssues_Click()
   
   Select Case Last.tag
      Case "edit"
         Issue_Edit
      Case "delete"
         Issue_Delete
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwIssues, Me.Name)
   End Select 
   
End

Public Sub Issue_Edit()
   
   VBox_EditArea.Enabled = True 
   
End

Public Sub Issue_Display()
   
   Dim Issue As Collection
   
   bexit = True   
   Editarea_Clear()
   Reset_Keys
   Issue = Issues[cvwIssues_Key]
   fk_issue = Issue!pk
   fk_staff_logged = Issue!fk_staff_logged
   fk_staff_allocated = Issue!fk_staff_allocated
   txtDateLogged.text = Format(Issue!date_logged, "dd/mm/yyyy")
   txtIssue.text = issue!issue
   txtIssueDetails.text = issue!issue_details
   txtStaffLogged.text = issue!staff_logged_title & " " & issue!staff_logged_wholename
   txtProposedAction.text = issue!proposed_action
   txtProgressToResolution.text = issue!progress_towards_resolution
   If issue!outcome_achieved = True Then
      rbOutcomeAchievedYes.value = True
   Else
      rbOutcomeAchievedNo.value = True   
   Endif
   bexit = False
   
End

Public Sub Meeting_New()
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Meeting)
   modEditAreaHelpers.EditArea_Clear(VBox100)
   txtMeetingDate.text = Format(Now(), "dd/mm/yyyy")
   VBox_EditArea_Meeting.enabled = True  
   txtMeetingStaffAttending.SetFocus 
   Staff_Attending = New Collection
   cmbAgendaItems.index = -1
   cmbAgendaItems.Enabled = True 
   VBox_EditArea_Meeting.Enabled = True
   tlMinutes.text = ""
   Minutes_Update
   bExit = False   
   
End

Public Sub Minutes_Update()
   
   Dim sHtml As String
   Dim templ As CTemplate
   Dim issue As Collection
   
   templ = New CTemplate("staffmeeting") ' mode2 defaults to html
   templ.Row("Topic", "Discussion", "Action/Timeline", "Responsibility")
   templ.Row("Staff Present", Minutes_Staff_Attending(), "", "")
   templ.Row("Outstanding Items", "", "", "")
   For Each issue In Issues
      templ.Row("", Issue!issue, "", "")
   Next
   templ.Table("staffmeeting")
   Print templ.GetData()
   shtml &= "<P><B>" & Minutes_Heading() & "</B></P>" & templ.GetData() & "</P><HR></HTML>"
   
   tlMinutes.text = shtml
   '  tlMinutes.Text &= Minutes_Staff_Attending() 
   '  tlMinutes.Text &= Minutes_Apologies() 
   
End

Public Function Issues_List()

   Dim issue As Collection
   Dim sSTr As String
   
   For Each issue In Issues
      
   Next
   
End

Public Function Minutes_Apologies() As String
   
   Return "" 
   
End

Public Function Minutes_Heading() As String
   
   Dim sSTr As String
   
   Return "<P>Staff meeting held on " & Format(Now(), "dddd dd mmmm yyyy") & "</P>"
   
End

Public Function Minutes_Staff_Attending() As String
   
   Return Replace(tlStaffAttending.text, ";", ", ")
   
End

Public Sub VSplit_Meetings_Resize()
   
   Settings[Me.name & "/VSplit_Meetings.Layout"] = VSplit_Meetings.Layout  
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   If key.code = Key.down And columnview1.Visible Then
      With Columnview1
         .MoveFirst  
         .Item.Selected = True
         .SetFocus
      End With
   Endif
   If Key.code = Key.return Or Key.code = Key.Tab Then
      If Last.tag = "issue" Then txtIssueDetails.SetFocus
   End If   
   
End

Public Sub lbStaffAttending_Menu()
   
   If Last.count Then mnuStaffAttendingMeeting.Popup
   
End

' Public Sub mnuStaffAttendingMeeting_Click()
'    
'    Select Case Last.tag
'       ' Case "delete"
'       '  '  lbStaffAttending.Delete
'       Case "font"
'          modUtilGUI.Columnview_SetFont(lbStaffAttending, Me.name)
'    End Select 
'    
' End

Public Sub TabStrip1_Click()
   
   If TabStrip1.index = ctab_meeting Then
      CmbAgendaItems_Refresh   
   Endif
   
End

Public Sub cmbAgendaItems_Click()
   
   txtAgendaItemSummary.text = Issues[cmbAgendaItems.Index]!issue_details
   
End

Public Sub CmbAgendaItems_Refresh()
   
   Dim issue As Collection  
   
   For Each issue In Issues
      cmbAgendaItems.Add(issue!issue)
   Next
   
End
