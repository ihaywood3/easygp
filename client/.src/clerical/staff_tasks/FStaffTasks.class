' Gambas class file

' Copyright (C) 2008-2015 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
' THIS MODULE IS EXPERIMENTAL and EMBRYONIC. The naming of components
' and subroutines is erratic and the code is crap. Well - I'm not a
' programmer and trying to do this in between patients and at night
' when I buggered isn't really easy. Sorry.....
' Bit of a mess really............
'
' GENERAL CONCEPTS
' ================
' Within the office in general practice we have to do lots of things.
' Some are directly related to a particular patient, some just stuff around the office
' The aim of this module is to provide an interface to enter and view such tasks
' and to provide an 'audit trail' of what happened to a task from generation to completion
' In the case of a document (initially but could extend to fu of recalls/letters)
' its row-key is kept - this way a document can be followed through from importing to
' completing of its actioning (if any).
' The intent of this module - not yet developed - will be to allow reviewing and auditing
' of all staff and patient related tasks, and to be able to complete the task by using
' embedded forms such as script writer, recalls, letter writer instead of having to
' switch back to and load the patients notesPrivate pic_not_saved As Picture = Picture["icons/12/red_dot.png"]Private pic_not_saved As Picture = Picture["icons/12/red_dot.png"].
'
' Database tables for this module are in the schema Clerical
' Tasks                - a desciption of task eg ACTIONTrim(txtFilter.text)) DOCUMENT:UEC;LFTS
'                       - us  taskscomponents = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Staff_Tasksually 'automatic' unless a designated inter-staff task
'                          in which case the person entering the task will have
'                         entered the details e.g 'Make me a cup of coffee'
'
'  lu_task_types        - e.g Make an appointment, ring patient, talk to provider
'  task_components      - each task has at a minimum one component
'  task component_notes - and may or may not have notes
'  vwtaskscomponents
'  vwtaskscomponentsnotes
'
'  The term StaffTasks is used loosly - sometimes a task is a stingle task-component.
'
'  WHERE THIS MODULE IS USED
'  =========================
'  1) Embedded on the tab control in FInbox, allows user to enter tasks for
'     themselves or other staff members when dealing with incoming documents
'     in this case the Task name is automated (see above)
'     In this incarnation most of the gui and the functionality of this form is hidden
'
'  2) Embedded in the main Staff Tasks form currently this is badly named as FDaybook
'     - This in case all the funtionality is exposed. The user may review past tasks
'       allocated to them as well as who else is involved in the task (i.e a task can
'       have one or more components.
'     - A task is regarded as 'finalised' by a user when their task component is the
'       only one left with a  clerical.task_components.date_completed being null
'       In this case the main clerical.tasks table is updated - and the key of the
'       staff finalising the task as well as a completion date is finalised.
'  3) Embedded in FClerical via FClericalReadOnlyClinical the mini 'clinical section for staff use'
'  
'   Where the behaviour of the form is necessarily different, case statements where the
'   name of the parent form (i.e the form which embedded this form) are used
'
'  GENERAL COMMENTS ON CODE - PROGRAM FLOW
'  =======================================
'  Init()  : Loads form settings, uses a label lblMeasure to make sure edit area labels are correct widthmnuStaffTasks
'            Loads combo's and hides/unhides gui elements which differ on each form
'            very rough needs fixing.
'  ReLoad(): Reloads the staff tasks, used at Init() and after every save
'  Timer1() : Used as Timer1_timer() to allow gui to load when form is shown, otherwise
'            the gui seems to 'hang' whilst the database is accessed.
'  Set_Parent_Form(..) sets the parent_form name variable from the calling form, used in case statements
'  Set_Document(..)    used from the Inbox to set the current document key
'                      otherwise if in STaff Tasks fk_document can be 0 if the task
'                      is not associated with a document
'
' Set_consult(..)    Set from the Inbox if dealing with inbox documents, otherwise
'                    when a patient task is generated from with this module, it is set
'                    when records are saved
' Set_Audit_Schema_Table_SourceRowKey() set keys for the row, table, schema, from Inbox
'                                       used to create audit trail
'
'
'  SPECIAL NOTES
'  =============
'  The tables in this schema may seem a bit convoluted - if you can come up with a
'  better schema which does the same thing feel free to correct my poor logic.
'  You will notice some apparent duplication in the schema - for example where a
'  patient is the task recipient, there fk_consult will not be null, and hence
'  will point to the date the task (component) was initiated as well as the staff
'  member who did this.
'
'  Staff involvement  - fk_staff_filed = key to indicate who filed the task componentmnuStaffTasks
'                     - fk_staff_allocated = key to indicate who is responsible for the component
'                     - fk_staff_finalised = key to indicate who finalised the task
'                     The fk_staff_filed is duplicated in clerical.tasks and clerical.task_components
'                     I could remove the one in clerical.tasks and use the time stamp to see who was
'                     the last one completing the last task component, but it seemed more efficient
'                     to duplicate the key.
'
'  NOT YET IMPLEMENTED
'  ===================
'  None of the embedded forms like scripts/recalls, ie forms to allow you to do things
'  when you complete the task, rather than opening up the patients notes.
'  Internal staff tasks
'  The reivew of completed staff tasks
'  Any of the embedded form tasks eg recalls, letter etc
'------------------------------------------------------Trim(txtFilter.text))-----------------------------------
Private ReferenceHboxForTopColumnview As Hbox               'used if split moves to reposition columnview
Private pic_not_urgent As Picture = Picture["icons/12/green_dot.png"]
Private pic_mod_urgent As Picture = Picture["icons/12/amber_dot.png"]
Private pic_urgent As Picture = Picture["icons/12/red_dot.png"]
Public CurrentUser As String
Public bEmbedded As Boolean
Private AllPatients As Collection
Private fk_staff As Integer
Private fk_staff_filed_task As Integer
Private fk_staff_filed_component As Integer
Private TasksComponents As Collection
Private fk_component As Integer
Private CurrentTaskComponent As Collection
Private bComponent_not_Completed As Boolean = False 'for code readability
Private iCurrentTaskComponent As Integer
Private bPatientTask As Boolean
Public bExit As Boolean  'called from parent do not change
Private CurrentConsult As CConsult
Public Parent_Form As String
Private staffTasks As Collection
Private AllStaffInvolved As Collection
Private fk_patient As Integer
Public fk_task As Integer   'needs to be set back to 0 when a new document loaded for a patient in inbox.
Private Task_Keys As Collection
Private staff As Collection
Private Staff_Member_Allocated_Task As Collection
Private Staff_Member_Must_Finalise_Task As Collection
Private pk_view_staff_task As Integer
Private fk_staff_allocated As Integer
Private fk_urgency As Integer
Private fk_document As Integer
Private Notes As Collection
Private bNewNote As Boolean
Private bFinalised As Boolean
Private iTaskRestriction As Integer          'const.cTaskRestriction_User, .._role .._none
Private fk_note As Integer
Private patient As New Collection
Private fk_table_row As Integer        'fixme fim my name = e.g fk_document
Private table As String 'fixme check if this is being used - noted set from Finbox tasks
Private comms As Collection
Private comm As Collection
Private Form_PreviousNotes As FProgressNotesViewer
Private Form_PDF As FPdf
Private Form_html_viewer As FHtmlViewer
Private Form_Entire_Audit_Trail_Viewer As FHtmlViewer
Private RolesCanAction As Collection         'eg secretary, doctor can action the component
Private RolesCanFinalise As Collection       'only this role can finalise the task. Subcomponents can be actionied by  RolesCanAction or designated staff member
Private RoleCanAction As String
Private fk_role_can_finalise As Integer      'if non zero this role can finalise a task
Private fk_staff_must_finalise As Integer    'if non zero then this staff member only may finalise a task
Private fk_role_can_action As Integer
Private fk_task_deleted As Integer           'the last deleted task
Private fk_tasks_Components_keys_deleted As Collection 'component keys of last deleted task.
Private Document As Collection 

Public Sub Set_Audit_Schema_Table_SourceRowKey(k As Integer, t As String)
   '----------------------------------------------
   'Used in auditing see modAudit.MakeAudit(..)
   'table = qualified with schema ie schema.table
   '---------------------------------------------
   
   fk_table_row = k
   table = t  'FIXME - I don't think this is ever used - old code - check calling forms.
   
End

Public Sub Set_Parent_Form(parent_form_name As String)
   '----------------------------------------------------
   'Name of form which embedded this form - mainly used
   'to save splits appropriate for this form when loaded
   'by its parent
   '----------------------------------------------------
   
   Parent_Form = parent_form_name
   
End

Public Sub Set_Document(D As Collection)
   
   Document = D
   fk_document = document!pk_document 
   
End

Public Sub Set_consult(cons As CConsult)
   '---------------------------------------------------
   'Consult is only set here when embedded in the inbox
   '---------------------------------------------------
   
   CurrentConsult = cons
   fk_patient = currentconsult!patient!fk_patient
   
End

Public Sub Init()
   '-------------------------------------------------------------------------
   'Initialise the module, depending on whether called from:
   '1) The users day book in which case all the users staff tasks are loaded
   '2) The users inbox in which case only the abilityh to input a task for
   '   one of the documents in the inbox is releaved (the default)
   '-------------------------------------------------------------------------
   
   Try Settings_Load()                                                                             'set splits/fonts on form
   ReferenceHboxForTopColumnview = New HBox(Vbox_EditArea_Inner)
   currentUser = modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename         'ease of typing later on in the code
   RoleCanAction = modDBConnect.currentUser!role                                                   'anyone of this role can action these tasks
   rbTaskRestrict_Role.text &= modUtil.Make_Plural(RoleCanAction)                                  'e.g For Doctor(s)
   fk_staff = modDBConnect.currentUser!fk_staff                                                    'key to staff member using form
   lblMeasure.text = "  To Be Finalised By  "                                                            'get width of editarea labels ok
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Inner, lblMeasure)                                'resize labels in the editor area
   modEditAreaHelpers.Resize_labels(Vbox_Notes, lblMeasure)
   '  modEditAreaHelpers.Resize_label(lblNotes, lblMeasure)                            'and resize them
   'TaskTypes = modUtilGUI.LoadCombo(cmbTaskType, modStaffTasksDBI.StaffTasks_Get_TaskTypes(), "type") 'pre-defined categories eg. Ring patient
   RolesCanAction = modUtilGUI.LoadCombo(cmbRolesCanAction, modAdminDBI.Roles_Get(), "role")           'fill combo with roles to let user choose who can action a task
   RolesCanFinalise = modUtilGUI.LoadCombo(cmbRolesCanFinalise, modAdminDBI.Roles_Get(), "role")       'fill combo with roles to let user choose who can finalise a task
   Select Case Parent_Form
      Case "FPatientTasks"           'embedded in FClinical
         Separator1.Visible = False
         Hbox_Heading.visible = False
         Hbox_Buttons.Visible = False   
         VBox_Right.Visible = False 
         Vbox_AllocatedTasks.visible = False 
         Hbox_Patient.Visible = False  
         Hbox_Street.Visible = False  
         Hbox_Suburb.Visible = False   
         Hbox_DateFinalised.Visible = False
         Hbox_FinalisedBy.Visible = False 
         HBox_Urgency.Enabled = True   
         Hbox_Combo.Visible = False
         lblWhatToDo.text = "What to do"
         txtRelatedTo.ReadOnly = False
         txtStaffToFinalise.ReadOnly = False 
         Patient = currentconsult!patient
         VBox_EditArea_Inner.Padding = 0
         Panel4.Visible = False  
         Patient_Select
         Return 
      Case "FDayBook", "FClericalReadOnlyClinical"                                  'tasks are embedded in thes users workcentre
         iTaskRestriction = const.cTaskRestriction_User                                    'default to this type of task list
         HBox_NotesAllStaff.Visible = True
         Hbox_Patient.Visible = True                                                                'set up the gui for the form
         Hbox_Street.visible = True
         Hbox_Suburb.Visible = True
         HBox_Urgency.Enabled = True
         lblAllocatedTo.text = "Allocated to"
         bexit = True
         With cvwStaffTasks
            .Columns.count = 5
            .Header = True
            .Columns[0].text = "Logged  "
            .Columns[1].text = "From"
            .Columns[2].text = "Re:"
            .Columns[3].text = "Related To      "
            .Columns[4].text = "what to do"
         End With
         gvwTasks_Init()
         cvwAllTasks.Columns.count = 3
         HBox_Heading.Visible = False
         tbSave.enabled = False
         tbFinalise.Visible = True
         txtDateLogged.readonly = True
         txtLoggedBy.readonly = True
         txtTaskDetails.readonly = True
         txtStaffAllocated.readonly = True
         HBox_Urgency.Enabled = False
         lblPatient.Visible = True
         txtStaffMakingNotes.text = modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename
         lblTask.text = "To be Finalised By  "
         VBox_EditArea_Inner.Enabled = False
         HBox_StaffMember_Notes.Visible = True
         HBox_StaffMember_AddingNotes.Visible = True
         lblNotesAllMembers.Visible = True
         tbNewPatientTask.Enabled = True
         VBox_Notes.Visible = True
         HBox_NotesButtons.Visible = True
         txtRelatedTo.Enabled = False  
         txtTaskDetails.Enabled = False  
         With cvwTaskNotes
            .Columns.count = 4
            .Columns[0].width = 100
            .Visible = True
         End With
         With Form_PDF = New FPdf(Vbox_ActionDocument)
            .Visible = False
            .btZoomIn.Visible = True
            .BtPrint.Enabled = True
            .BtPrint.Visible = True
            .btZoomOut.Visible = True
            .Visible = False
         End With
         With Form_html_viewer = New FHtmlViewer(Vbox_ActionDocument)
            .tbWebBrowserZoomIn.visible = True
            .tbWebBrowserZoomout.visible = True
            .tbWebBrowserPrint.Visible = True
         End With
         HBox_TaskFor.Visible = True
         HBox_FilterTasks.Visible = True
         HBox_FilterNames.Visible = True
         VBox_Right.Visible = True   'contains the documents/notes tab
         rbTaskRestrict_User.value = True                          'will not trigger this event because of bExit=True
         If Parent_Form = "FClericalReadOnlyClinical" Then   
            HBox_FilterTasks.Visible = False  
            HBox_FilterNames.Visible = False 
            HBox_TaskFor.Visible = False   'default to new task always for current patient
            iTaskRestriction = const.cTaskRestriction_Patient 
            timer1.Enabled = False 
            bexit = False
            lblSpacer.Visible = True 'push the refresh button to right now that HBox_FilterTasks not showing
            Return
         End If 
         
      Case "Inbox"
         '   tbSaveAndFinalise.Visible = False
         iTaskRestriction = const.cTaskRestriction_Document       'default to this type of task list, all tasks, all users
         rbTaskRestrict_User.value = True
         VBox_Right.Visible = False
         cvwStaffTasks.Columns.count = 4
         txtStaffToFinalise.ReadOnly = False
         chkVerifyCompleted.Visible = True
         HBox_Urgency.Enabled = True
         With cmbwhatToDo
            .Add("Make appointment to see doctor")
            .Add("Make appointment to see nurse")
            .Add("Get patient on phone to Discuss")
            .Add("Chase results (Hospital/Practice)")
            .visible = True
            .index = -1
         End With
   End Select
   bExit = False
   Reload()
   
End

Public Sub Settings_Save()
   
   If Parent_Form <> "" Then
      Settings["FStaffTasks_" & Parent_Form & "/HSplit_Main.Layout"] = HSplit_Main.Layout
      Settings["FStaffTasks_" & Parent_Form & "/VSplit_Left.Layout"] = VSplit_Left.Layout
   Else
      Settings["FStaffTasks/HSplit_Main.Layou"] = HSplit_Main.Layout
      Settings["FStaffTasks/VSplit_Left.Layout"] = VSplit_Left.Layout
   End If
   
End

Public Sub Settings_Load()
   
   If Parent_Form <> "" Then
      HSplit_Main.Layout = Settings["FStaffTasks_" & Parent_Form & "/HSplit_Main.Layout", modUtilGUI.HSplit([826, 826])]
      VSplit_Left.Layout = Settings["FStaffTasks_" & Parent_Form & "/VSplit_Left.Layout", modUtilGUI.VSplit([599, 342])]
      
   Else
      HSplit_Main.Layout = Settings["FStaffTasks/HSplit_Main.Layout", modUtilGUI.HSplit([826, 826])]
      VSplit_Left.Layout.Layout = Settings["FStaffTasks/VSplit_Left.Layout", modUtilGUI.VSplit([599, 342])]
   End If
   cvwStaffTasks.font = Font[Settings["FStaffTasks/cvwStaffTasks.font", "DejaVu Sans,9"]]
   
End

Public Function Save() As Boolean
   
   Note_Save()
   Task_Save()
   If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then
      FClinical.Refresh_AllPreviousNotes(True) 'True = only refresh progress notes if in display audit mode
      FClinical.Notifications_Refresh_External()   
   Endif
   
End

Public Sub Task_Save()
   '----------------------------------------------------------------------------------------------------
   ' Saves the staff task
   ' this may or may not belong to a patient - for example it could be 'inter-staff  directive
   ' Can be one or more tasks allocated to staff members
   '----------------------------------------------------------------------------------------------------
   
   Dim StaffTask As New CRow
   Dim TaskComponent As New CRow
   Dim sTaskComponentSummary As String
   Dim sTaskDetails As String
   
   If VBox_EditArea_Outer.Padding = 0 And bFinalised = False Then Return 'no outline = no data
   If Not Valid_task() Then Return                                        'validate contents
   '------------------------------------------
   ' CREATE TABLE clerical.tasks
   ' (
   '   pk serial NOT NULL,
   '   related_to text NOT NULL,
   '   fk_staff_filed_task integer NOT NULL,
   '   fk_staff_finalised_task integer,
   '   fk_row integer,
   '   date_finalised date,
   '   deleted boolean DEFAULT false,
   '   fk_staff_must_finalise integer,
   '   fk_role_can_finalise integer,
   '   CONSTRAINT tasks_pkey PRIMARY KEY (pk )
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '-------------------------------------------
   If fk_task <> 0 Then                                              'old task, keep the task key
      stafftask.put_unchanged(fk_task, "fk_task")
      staffTask!fk_staff_filed_task = fk_staff_filed_task
   Else                                                              'new task create new task key
      staffTask!fk_staff_filed_task = fk_staff
      staffTask!related_to = Trim(txtRelatedTo.text)
      If fk_patient <> 0 Then                                                              'start an audit row in progress notes
         Consult_Check_Created(const.ConsultType_AuditNote, "Staff task allocated")        'create the consult
         If Not IsNull(Document) Then                                                      'if about a document describe which one
            sTaskDetails = modArchiveDocumentsDBI.Audit_Trail_Make_Progress_notes("staff task allocated", Document) & "<BR>"
            sTaskDetails &= "The task allocated to " & txtStaffAllocated.text
         Else  
            sTaskDetails &= "The task allocated to " & txtStaffAllocated.text & " regarding '" & Trim(txtRelatedTo.text) & "'"
         End If   
         sTaskDetails &= " was:<BR>- '" & Trim(txtTaskDetails.text) & "'<BR>"
         sTaskDetails &= " and the staff member allocated to finalise this was " & txtStaffToFinalise.Text
      End If   
   End If
   If fk_staff_must_finalise <> 0 Then
      staffTask!fk_staff_must_finalise = fk_staff_must_finalise
   Endif
   If fk_role_can_finalise <> 0 Then
      staffTask!fk_role_can_finalise = fk_role_can_finalise
   Endif
   '----------------------------------------------------
   ' CREATE TABLE clerical.task_components
   ' (
   '   pk serial NOT NULL,
   '   fk_task integer NOT NULL,
   '   fk_consult integer,
   '   date_logged date,
   '   fk_staff_allocated integer ,
   '   fk_staff_completed integer,
   '   allocated_staff text,
   '   fk_urgency integer DEFAULT 1,
   '   details text,
   '   date_completed date,
   '   deleted boolean DEFAULT false,
   '   fk_staff_filed integer,
   '   fk_role integer,
   '   CONSTRAINT task_components_pkey PRIMARY KEY (pk )
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '-----------------------------------------------------
   If fk_component <> 0 Then                                                 'if edited component
      TaskComponent.put_unchanged(fk_component, "fk_component")              'set the primary key
   Endif
   If fk_role_can_action <> 0 Then
      TaskComponent!fk_role = fk_role_can_action
   Else
      TaskComponent!fk_role = Null
   Endif
   TaskComponent!fk_staff_filed = fk_staff_filed_component
   TaskComponent!details = Trim(txtTaskDetails.text)
   If fk_staff_allocated Then    
      TaskComponent!fk_staff_allocated = fk_staff_allocated
   Else
      TaskComponent!fk_staff_allocated = Null 
   End If   
   TaskComponent!fk_urgency = fk_urgency
   TaskComponent!must_verify_completed = CBool(chkVerifyCompleted.value)
   If TaskComponent!fk_staff_allocated = fk_staff Then
      If Staff_Member_Allocated_Task!fk_sex = const.cSexMale Then
         sTaskComponentSummary = " to himself - " 'FIXME check sex of staff member
      Else
         sTaskComponentSummary = " to herself - "
      End If
   Else
      sTaskComponentSummary = " to " & txtStaffAllocated.text & " - "
   Endif
   sTaskComponentSummary &= Trim(txtTaskDetails.text)
   '------------------------------------------------------------------------------------
   'Check if a consult has been created for the patient, if there is a patient of course
   '------------------------------------------------------------------------------------
   If fk_patient <> 0 And bFinalised = False Then
      Consult_Check_Created(const.ConsultType_AuditNote, "Staff task allocated")
      TaskComponent!fk_consult = currentconsult.GetPK()
      
   Else
      TaskComponent!date_logged = Now()
   End If
   If fk_document Then stafftask!fk_row = fk_document
   '-------------------------------------------------------------------------------------------
   'Each task gets a 'master entry' in clerical.tasks table, then components linked to the task
   '-------------------------------------------------------------------------------------------
   StaffTask.Save("clerical.tasks", "fk_task")
   TaskComponent!fk_task = StaffTask!fk_task
   TaskComponent.Save("clerical.task_components", "fk_component")
   modAudit.MakeAudit(currentconsult, "staff task allocated", "clerical.tasks", StaffTask!fk_task, const.cSection_StaffTasks, sTaskDetails)
   modDBConnect.CommitTrans
   If Parent_Form <> "FPatientTasks" Then
      Reload()
   Else
      FPatientTasks.Hide_Form()
      FClinical.Refresh_AllPreviousNotes(True)
      FClinical.Notifications_Refresh_External()
   End If
   
End

Public Function Finalise() As Boolean
   '----------------------------------------------------------------------------------------
   'Task is being finalised, user has clicked the finalise button
   'Returns True if this was successfull
   'Complex so probably not good but this is the logic
   'A Task  - has been allocated by someone to someone else (perhaps themselves)
   '        - at allocation time also allocated was the person who had final responsibility
   '          for marking it off fk_staff_must_finalise
   '        - Now this user, may just be finalising their own role
   '          if fk_staff<>fk-staff_must_finalise, so we need to shift the task off their
   '          task list, but leave it 'open' for fk_staff_must_finalise to finish
   'Fixme currently only applies to a document
   'fixme ?does new cConsult belong here.
   'fixme won't work if not patient nor a doc
   'Transaction is started in the calling routine
   'this module is really F*d document global being set all over the place, 
   'or grabbed from backend - fixme all this crap
   '----------------------------------------------------------------------------------------
   
   Dim StaffTask As New Crow
   Dim TaskComponent As New CRow
   Dim sProgressNotes As String
   Dim document As Collection
   
   Print fk_component
   
   If Not fk_component Then Return
   
   Message.Title = "Task Finalisation"
   If Bfinalised = False And Trim(txtNotes.text) = "" Then
      If Message.Question("It is usually advisable to explain how the task or your involvement in the task was finalised.\n\nAdd finalisation note?", "Yes", "No") = 1 Then
         note_new()
         bFinalised = True  '??bug check this
         Return
      End If
   End If
   If Trim(txtNotes.text) <> "" Then                                            'user clicked finalise involvement with outstanding note
      If Message.Question("Save note before finalising your involvement?", "Yes", "No") = 2 Then Return 'prompt to save the note
      If Not Note_Save() Then                                                    'if unsuccessful rollback the transaction
         modDBConnect.RollBack()
         Return
      Endif
   End If
   
   If fk_table_row Then                                                          'the task is attatched to a document
      document = modArchiveDocumentsDBI.Document_Get_By_pk(fk_document)           'fixme shouldn't have to do this
      If fk_patient <> 0 Then
         If IsNull(currentconsult) Then
            CurrentConsult = New CConsult(patient)
         Else
            currentconsult.Set(const.ConsultType_AuditNote, "Finalising staff task")
         End If
         
         sProgressNotes = modArchiveDocumentsDBI.Audit_Trail_Make_Progress_notes("task component finalised", Document) & "<BR>"
         sProgressNotes = "The task component (related to " & "'" & txtRelatedTo.Text & "') which was "
         sProgressNotes &= "'" & txtTaskDetails.text & "' has been marked as finalised"
         
         '  modAudit.MakeAudit(currentconsult, "task component finalised", "documents.documents", fk_document, const.cSection_StaffTasks, " by " & modDBConnect.currentUser_FullName())
         modAudit.MakeAudit(currentconsult, "task component finalised", "clerical.task_components", fk_component, const.cSection_StaffTasks, sProgressNotes)
      End If
   End If
   '-----------------------------
   'First, finalise the component
   ' CREATE TABLE clerical.task_components
   ' (
   '   pk serial NOT NULL,
   '   fk_task integer NOT NULL,
   '   fk_consult integer, -- key to clin_consult.consult ie gives patient and...
   '   date_logged date, -- Null where the task was logged for a patient, as it has fk_consult,...
   '   fk_staff_allocated integer NOT NULL, -- foreign key to clerical.staff table, ie points to the staff member...
   '   fk_staff_completed integer, -- foreign key to clerical.staff table, points to who...
   '   allocated_staff text, -- usually null unless the staff is generic...
   '   fk_urgency integer DEFAULT 1, -- key to common.lu_urgency 1:routine 2:moderate 3:urgent
   '   details text,
   '   date_completed date, -- The date the component was finalised...
   '   deleted boolean DEFAULT false,
   '   fk_staff_filed integer,
   '   fk_role integer, -- foreign key to admin.lu_staff_roles ...
   '   CONSTRAINT task_components_pkey PRIMARY KEY (pk )
   ' )
   '-----------------------------
   
   '----------------------------------------------------------------------------------------------
   'Is this the last component for the task? - Yes, then finalise the task in clerical.tasks table
   '----------------------------------------------------------------------------------------------
   If modStaffTasksDBI.StaffTasks_CheckOutstandingComponents(fk_task) = 1 Then
      '---------------------------------------------------------------------
      'If the person finalising this task/component= he/she who must do that
      '---------------------------------------------------------------------
      ' CREATE TABLE clerical.tasks
      ' (
      '   pk serial NOT NULL,
      '   related_to text NOT NULL, -- What the task is related to:...
      '   fk_staff_filed_task integer NOT NULL,
      '   fk_staff_finalised_task integer,
      '   fk_row integer, -- if not null then this is foreign key to documents.pk
      '   date_finalised date,
      '   deleted boolean DEFAULT false,
      '   fk_staff_must_finalise integer,
      '   fk_role_can_finalise integer,
      '   CONSTRAINT tasks_pkey PRIMARY KEY (pk )
      ' )
      '------------------------------------------------------------------------
      If CurrentTaskComponent!fk_staff_must_finalise = modDBConnect.currentUser!fk_staff
         If fk_task Then
            stafftask.put_unchanged(fk_task, "fk_task")
         Endif
         StaffTask!fk_staff_finalised_task = modDBConnect.currentUser!fk_staff
         StaffTask!date_finalised = Now()
         StaffTask.Save("clerical.tasks", "fk_task")
         sProgressNotes = "The task (related to " & "'" & txtRelatedTo.Text & "') which was "
         sProgressNotes &= "'" & txtTaskDetails.text & "' has been marked as finalised"
         modAudit.MakeAudit(currentconsult, "staff task finalised", "clerical.tasks", StaffTask!fk_task, const.cSection_StaffTasks, sProgressNotes)
      End If
   End If
   '------------------------------------------
   'Mark the component finalised (last or not)
   '------------------------------------------
   If fk_component Then
      TaskComponent.put_unchanged(fk_component, "fk_component")
   Endif
   TaskComponent!fk_staff_completed = modDBConnect.currentUser!fk_staff
   TaskComponent!date_completed = Now()
   TaskComponent.Save("clerical.task_components", "fk_component")
   Return True
   ' modDBConnect.CommitTrans()
   
End

Public Sub Note_Edit()
   
End

Public Sub Note_Delete()
   
End

Public Sub Note_Add()
   '---------------------------------------------
   'User is adding a note to the current task
   'Saves the current note and refreshes the list
   '---------------------------------------------
   
   If Note_Save() Then                      'save to backend, commit transaction
      modDBConnect.CommitTrans()
   End If
   cvwTaskNotes_Refresh()           'refresh the notes on tasks list
   note_new()                       'default to adding another note
   
End

Public Sub Note_New()
   '------------------------------------------------------------------------------------------------------
   'Allow uer to add notes to a component of the task - there may be only 1 component i.e the task itself
   'As each new note entered they are added to the list so that for audit-purposes, these
   'notes cannot be changed unless edited - in which case the users actions are recorded
   '-----------------------------------------------------------------------------------------------------
   
   txtStaffMakingNotes.text = CurrentUser
   txtNotes.Clear()
   txtNotes.SetFocus()
   fk_note = 0
   
End

Public Function Note_Save() As Boolean
   '---------------------------------------------------
   'Save a new note about this task complete transaction
   'returns true if not successfully saved
   '---------------------------------------------------
   
   Dim note As CRow
   Dim sProgressNotes As String                                                 'for audit insertion into the progress notes
   
   If Trim(txtNotes.text) = "" Then Return                                    'no note, don't save
   If fk_component = 0 Then
      Message.info("Please select the task before attempting to add notes")
      Return
   Endif
   note = New CRow
   If fk_note Then
      note.put_unchanged(fk_note, "fk_note")
   Endif
   note!fk_task_component = fk_component
   If fk_patient <> 0 Then             '?why did I put this in here?
      Consult_Check_Created(const.ConsultType_AuditNote, "Staff task note")
   Endif
   note!note = Trim(txtNotes.text)
   note!fk_staff_made_note = fk_staff
   note!date = Now()
   note.Save("clerical.task_component_notes", "fk_note")
   sProgressNotes = "The task (related to" & "'" & txtRelatedTo.Text & "') which was "
   sProgressNotes &= "'" & txtTaskDetails.text & "' has been actioned. The comment was:<BR>"
   sProgressNotes &= note!note
   modAudit.MakeAudit(currentconsult, "note on task", "clerical.task_component_notes", note!fk_note, const.cSection_StaffTasks, sProgressNotes)
   Return True
   
End

Public Sub Note_Save_And_finalise()
   '------------------------------------------------------------------------
   'User has elected to save a note and finalise their involvement in a task
   '------------------------------------------------------------------------
   
   If Note_Save() Then
      If Finalise() Then
         modDBConnect.CommitTrans()
      End If
   Else
      modDBConnect.RollBack()
   End If
   Reload()
   
End

Public Sub EditAreaButtons_Click()
   
   Dim hctrl As Control
   Dim hTextbox As Textbox
   
   Select Case Last.tag
      Case "hide form"
         Me.Hide  
      Case "refresh"                                                                  'refresh the tasks by triggering  rbTaskRestriction_Click() event
         ' Select Case iTaskRestriction
         '    Case const.cTaskRestriction_user
         '       rbTaskRestrict_User.value = True
         '    Case Const.cTaskRestriction_role
         '       rbTaskRestrict_Role.Value = True
         '    Case const.cTaskRestriction_UserMustComplete
         '       rbTaskRestrict_ThoseImustComplete.value = True
         ' End Select
         Reload()
      Case "add note"
         Note_Add()                'save the note, commit transaction, refresh notes list, await next note
      Case "new note"
         note_new()                 're-set notes entry for new note
      Case "finalise"
         If Finalise() Then
            modDBConnect.CommitTrans()
            Reload()
         Else
            modDBConnect.RollBack()
         Endif
      Case "save"
         Save
      Case "new task"
         Task_New()
      Case "pick date"
         If HBox_Calendar.Visible Then
            HBox_Calendar.Visible = False
         Else
            For Each hctrl In Last.parent.children
               If hctrl Is TextBox Then
                  hTextbox = hctrl
                  DateChooser1.tag = hTextbox
                  Break
               End If
            Next
            With HBox_Calendar
               .top = Last.Parent.Parent.top + Last.Parent.Height
               .left = Last.Parent.left
               .Raise()
            End With
            DateChooser1.Parent.Visible = True
            DateChooser1.Parent.Raise
         End If
   End Select
   
End

Public Sub Reload()
   '----------------------------
   'Show existing tasks the user filtered according to rbTaskRestriction which sets
   'iTaskRestriction
   'fixme what was fk_table_row for?
   'Function Staff_Tasks_Get parameters
   '(fk_staff_allocated_task As Integer, fk_staff_filed_task As Integer, bfk_staff_only As Boolean, Optional fk_row As Integer = 0, Optional completed As Integer = const.cTaskCompletionNo, Optional iTaskRestriction As Integer = const.cTaskRestriction_User, Optional sort_order As String = "ASC", Optional filter_patient_name As String = "") As Collection
   '----------------------------
   
   EditArea_Clear()
   bFinalised = False
   Select Case iTaskRestriction
      Case const.cTaskRestriction_Patient
         lblTaskHeading.text = "Tasks for patient"
         currentconsult.Refresh("patient_tasks_outstanding")
         '  taskscomponents = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Tasks_For_Patient_Get(fk_patient))
         taskscomponents = modUtil.Copy_Collection_Keyed_Sequentially(currentconsult!patient_tasks_outstanding)
      Case const.cTaskRestriction_user
         lblTaskHeading.text = "My Tasks"
         'Parameters passed to modDayBookDBI.Staff_Tasks_Get are:
         'fk_staff  = fk_staff_allocated_task ie who it was allocated to, here the logged on user
         '0 = fk_staff_filed_task .ie when viewing your own tasks, doesn't matter who allocated them
         'bfk_staff_only F#!@K I forget its so long ago FIXME
         'fk_table row > fk_row = key to documents.documents fixme
         ' const.cTaskCompletionNo =  Optional completed
         ' iTaskRestriction = iTaskRestriction  here const.cTaskRestriction_User ie listing only my tasks
         '   taskscomponents = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Staff_Tasks_Get(fk_staff, 0, True, fk_table_row, const.cTaskCompletionNo, iTaskRestriction, "ASC", Trim(txtFilter.text)))
         taskscomponents = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Staff_Tasks_Get_For_User(fk_staff, bComponent_not_Completed, Trim(txtFilter.text)))
      Case const.cTaskRestriction_role
         lblTaskHeading.text = "Tasks for me and others of role: " & RoleCanAction
         taskscomponents = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Staff_Tasks_Get(fk_staff, 0, True, fk_table_row, const.cTaskCompletionNo, iTaskRestriction, "ASC", Trim(txtFilter.text)))
      Case const.cTaskRestriction_UserMustComplete
         taskscomponents = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Staff_Tasks_User_Must_Finalise(modDBConnect.currentUser!fk_staff))
      Case const.cTaskRestriction_document
         taskscomponents = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Staff_Tasks_Get_For_Document(fk_document))
   End Select
   cvwTasks_Refresh()
   Select Case Parent_Form
      Case "Inbox"
         If cvwStaffTasks.Count Then  'fixme all this misnomer however if a task already allocated for doucmnet
            Task_New
         End If
   End Select
   
End

Public Sub cvwTasks_Reload()
   '-----------------------------------------------------
   'Loads all tasks currently allocated for this document
   '   pk serial NOT NULL,
   '   task text NOT NULL,
   '   fk_staff_filed_task integer NOT NULL,
   '   fk_staff_finalised_task integer,
   '   fk_schema integer,
   '   fk_table integer,
   '   fk_row integer,
   '   date_finalised date,
   '   deleted boolean DEFAULT false,
   '-----------------------------------------------------
   
   cvwStaffTasks.Clear()
   Select Case Parent_Form
      Case "FDayBook"
         rbTaskRestriction_Click
      Case "Inbox"
         TasksComponents = modStaffTasksDBI.Tasks_For_Document_Get(fk_document)
         TasksComponents_Document_Reload()
   End Select
   
End

Public Sub TasksComponents_Document_Reload()
   '------------------------------------------------------------
   'Reloads and fills columnview of tasks just for this document
   'Only used when this form is embedded in FInbox
   '------------------------------------------------------------
   
   Dim x As Integer
   Dim component As Collection
   Dim StaffTask As New Collection
   Dim y As Integer
   
   cvwStaffTasks.Clear()
   staffTasks = New Collection
   For Each component In TasksComponents
      x = component!pk_view
      cvwStaffTasks.Add(x, 0) 'the unique key
      ' cvwStaffTasks[x][0] = component!task_type
      cvwStaffTasks[x][1] = component!staff_allocated_title & " " & component!staff_allocated_wholename
      cvwStaffTasks[x][2] = component!urgency
      cvwStaffTasks[x][3] = component!details
      If y = 0 Then
         'fixme why pk_view_staff_task etc in here
         'staffTasks = New Collection
         StaffTask!fk_task = component!fk_task
         fk_task = component!fk_task
         pk_view_staff_task = fk_task
         StaffTask!fk_staff_filed_task = component!fk_staff_filed_task
         fk_staff_filed_task = component!fk_staff_filed_task
         StaffTask!fk_staff_finalised_task = component!fk_staff_finalised_task
         StaffTask!fk_row = component!fk_row
         StaffTask!date_finalised = component!date_finalised
         staffTasks.Add(staffTask, fk_task)
         Inc y
      Endif
   Next
   
End

Public Sub gvwTasks_Init()
   
   With gvwTasks
      .Columns.count = 4
      .Columns[0].text = "Urg"  'urgency
      .Columns[1].text = "Logged" 'date logged
      .Columns[2].text = "Name"
      .Columns[3].text = "Details"
   End With
   
End

Public Sub cvwTasks_Refresh()
   '-----------------------------------------------------------------------------------------
   ' Reloads and fills columnview of uncompleted tasks just for a single staff member
   ' Each task = 1 component of the overall task which could have several
   ' staff members involved
   ' Interpreting these parameters of modDayBookDBI.Staff_Tasks_Get(...):
   '     fk_staff = key of current user
   '     0 = fk_staff_filed_task, though in DB this field is null, here 0=anyone
   '     keys
   '     True flag - ignore for the present
   '     completion status here is Not completed (const.cTaskCompletionNo)
   '     iTaskRestriction set by user clicking on rbTaskRestrict_User, or rbTaskRestrict_Role
   '     "ASC" means tasks shown oldest to newest
   '------------------------------------------------------------------------------------------
   
   Dim task_component As Collection
   Dim x As Integer
   
   Task_Keys = New Collection
   fk_table_row = 0
   cvwStaffTasks.Clear()
   cvwStaffTasks.Visible = False
   cvwStaffTasks.Visible = True
   If TasksComponents.count = 0 Then
      cvwStaffTasks.Add(x, 0)
      cvwStaffTasks[x][0] = "Nil pending"
   Else
      For Each task_component In TasksComponents
         Select Case task_component!fk_urgency
            Case const.UrgencyLevelRoutine
               cvwStaffTasks.Add(x, "", pic_not_urgent)
            Case const.UrgencyLevelModerate
               cvwStaffTasks.Add(x, "", pic_mod_urgent)
            Case const.UrgencyLevelUrgent
               cvwStaffTasks.Add(x, "", pic_urgent)
         End Select
         cvwStaffTasks[x][0] = Format(task_component!date_component_logged, "dd/mm/yyyy") & "        "
         Print Parent_Form
         If Parent_Form = "FDayBook" Or Parent_Form = "FClericalReadOnlyClinical" Then                  'FDayBook fixme misnomer = the users workcentre
            cvwStaffTasks[x][1] = " " & task_component!staff_filed_task_wholename & "        "
            If Not IsNull(task_component!patient_wholename) Then  '
               cvwStaffTasks[x][2] = task_component!patient_wholename  ' & "[" & task_component!patient_birthdate & "]"  ' & " " & Trim(task_component!patient_street1 & " " & task_component!patient_street2) & " " & task_component!patient_town & " " & task_component!patient_postcode
            Else
               cvwStaffTasks[x][2] = "Non Patient Task  "
            End If
         Else                                                         'list being viewed attatched to document in inbox
            cvwStaffTasks[x][2] = task_component!staff_allocated_wholename
         Endif
         
         cvwStaffTasks[x][3] = " " & task_component!related_to & "   "
         cvwStaffTasks[x][4] = task_component!details
         ' Select Case task_component!fk_urgency
         '    Case const.UrgencyLevelRoutine
         '       cvwStaffTasks[x][3] &= " [Not urgent]"
         '    Case const.UrgencyLevelModerate
         '       cvwStaffTasks[x][3] &= " [Moderately urgent]"
         '    Case const.UrgencyLevelUrgent
         '       cvwStaffTasks[x][3] &= "  [URGENT] "
         ' End Select
         '    Task_Keys.Add(task_component!pk, x)
         Inc x
         '
         ' stafftask = New Collection
         ' stafftask!fk_task = task_component!fk_task
         ' StaffTask!fk_staff_filed_task = task_component!fk_staff_filed_task
         ' StaffTask!fk_schema = task_component!fk_schema
         ' StaffTask!fk_table = task_component!fk_table
         ' StaffTask!fk_row = task_component!fk_row
         ' StaffTask!date_finalised = task_component!date_finalised
         ' staffTasks.Add(staffTask, task_component!fk_task)
      Next
      If Parent_Form = "Inbox" Then
         fk_task = task_component!fk_task
         fk_staff_filed_task = task_component!fk_staff_filed_task
      End If
      '   cvwStaffTasks.MoveFirst
      '  cvwStaffTasks.Item.Selected = True
      '  cvwStaffTasks_Select()
   End If
   '  modUtilGUI.Gridview_Columns_Set_Size(gvwTasks, lblMeasure)
   lblmeasure.font = cvwstaffTasks.Font
   modUtilGUI.Columnview_Columns_Set_Size(cvwstaffTasks, lblmeasure)
   Dec Application.Busy
   txtFilter.SetFocus()
   
End

Public Sub EditArea_Clear()
   '--------------------------------------------------------------------
   'Clear the data entry area. This is not straight forward here
   'as the editing area is used differently in the two embedded forms
   'This needs cleaning up FIXME
   'Note if this form embedded in FINbox then we leave fk_document alone
   'as tasks are always attached to that.
   '--------------------------------------------------------------------
   
   Dim sTask As String = txtRelatedTo.Text
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Inner)
   modEditAreaHelpers.EditArea_Clear(VBox_Notes)
   lblBirthdate.text = ""
   lblMobilePHone.text = ""
   lblHomePhone.text = ""
   cvwTaskNotes.Clear()
   rbUrgencyRoutine.value = True
   txtDateLogged.text = Format(Now, "dd/mm/yyyy")
   txtLoggedBy.text = CurrentUser
   fk_component = 0
   fk_staff_allocated = 0
   fk_staff_must_finalise = 0
   fk_urgency = 1
   fk_role_can_action = 0
   cmbRolesCanAction.index = -1
   cmbRolesCanFinalise.index = -1
   fk_staff_filed_component = modDBConnect.currentUser!fk_staff
   bPatientTask = False
   EditArea_Notify_DataChange(False)
   txtStaffAllocated.Enabled = True
   txtTaskDetails.Enabled = True
   bFinalised = False
   With lblTask
      .Foreground = Color.Blue
      .text = "Task Details"
   End With
   '--------------------------------------------------------------------
   'If The multi-tabbed Document Actioning form is embedded in the Inbox
   'We need to not lose the fk_task, as one or more components will be
   'linked to this
   '---------------------------------------------------------------------
   Select Case Parent_Form
      Case "Inbox"
         txtPatient.text = CurrentConsult!patient!wholename
         lblBirthdate.text = Format(CurrentConsult!patient!birthdate, "dd/mm/yyyy")
         txtStreet.text = Trim(CurrentConsult!patient!street1 & " " & CurrentConsult!patient!street2)
         txtSuburb.text = CurrentConsult!patient!town & " " & CurrentConsult!patient!postcode
         txtRelatedTo.text = sTask
         fk_task = 0
      Case "FDayBook", "FClericalReadOnlyClinical"       'FIXME this is a misnomer
         fk_task = 0
         fk_document = 0
         Form_PDF.visible = False
         Form_html_viewer.Visible = False
         Form_html_viewer.WebView1.HTML = "<HTML> <BODY></BODY></HTML>"
         VBox_Images.Visible = False
         With TabStrip1
            .Enabled = False
            .Foreground = Color.LightForeground
         End With
   End Select
   bExit = False
   
End

Public Sub Staff_Find(txtbox As Textbox)
   '----------------------------------------------------------------
   'Show multiple staff members for selection from vwStaffInClinics
   'User can choose the person to allocate the task to
   'columns: 0=surname 1=firstname 2=sex 3=street 4= town/postcode
   'Fixme put this in a central location, used all over the place
   'e.g FPsychoSocialHistory
   '----------------------------------------------------------------
   
   Dim iLastStaff_Member_pk As Integer
   Dim x As Integer
   
   With columnview1
      .Clear()
      .Columns.count = 3
      .Visible = False
   End With
   If Trim(txtbox.text) = "" Then Return
   staff = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get(Trim(txtbox.text)))
   iLastStaff_Member_pk = -1
   For Each Staff_Member_Allocated_Task In staff
      columnview1.Add(x, 0)
      columnview1[x][0] = Staff_Member_Allocated_Task!title & " " & Staff_Member_Allocated_Task!wholename
      columnview1[x][1] = Staff_Member_Allocated_Task!occupation
      columnview1[x][2] = Staff_Member_Allocated_Task!branch
      Inc x
   Next
   lblmeasure.font = columnview1.Font
   modUtilGUI.Columnview_Columns_Set_Size(columnview1, lblmeasure)
   If Staff.count Then
      Columnview1.Visible = True
      columnview1.Visible = True
      Columnview1.Raise
      columnview1.tag = txtbox
   End If
   
End

Public Sub Staff_To_Action_Select(sm As Collection)
   '-------------------------------------------------------------
   'User is Selecting staff member to allocate a document task to
   '-------------------------------------------------------------
   
   Try txtStaffAllocated.text = sm!title & " " & sm!wholename
   Staff_Member_Allocated_Task = sm
   fk_staff_allocated = sm!fk_staff
   fk_role_can_action = Staff_Member_Allocated_Task!fk_role
   cmbRolesCanAction.index = -1
   If bPatientTask = True Then
      If fk_patient = 0 Then
         txtPatient.SetFocus()
         Return
      End If
   End If
   txtStaffToFinalise.SetFocus()
   
End

Public Sub Staff_To_Finalise_Select(sm As Collection)
   '---------------------------------------------------
   'User is selecting a staff member to finalise a task
   '---------------------------------------------------
   
   Try txtStaffToFinalise.text = sm!title & " " & sm!wholename
   Staff_Member_Must_Finalise_Task = sm
   fk_staff_must_finalise = sm!fk_staff
   columnview1.Visible = False
   If bPatientTask = True Then
      If fk_patient = 0 Then
         txtPatient.SetFocus()
      Else
         tbSave.SetFocus()
      End If
   Else
      tbSave.SetFocus()
   End If
   fk_role_can_finalise = Staff_Member_Allocated_Task!fk_role
   cmbRolesCanFinalise.index = -1
   
End

Public Sub DateChooser1_Activate()
   
   DateChooser1.tag.text = Format(DateChooser1.value, "dd/mm/yyyy")
   HBox_Calendar.Visible = False
Catch
   Return
   
End

Public Sub ColumnView1_KeyPress()
   '--------------------------------------------
   'User has hit the enter key on the columnview
   '--------------------------------------------
   
   If key.code = key.return Then
      ColumnView1_DblClick()
   End If
   
End

Public Sub ColumnView1_DblClick()
   '-------------------------------------------------------------------
   'Popup columnview is showing, action this to select staff or patient
   '-------------------------------------------------------------------
   
   columnview1.MoveCurrent()                                'set the internal key
   Select Case Last.tag.tag
      Case "staff allocated"
         Staff_To_Action_Select(staff[columnview1.Item.key])
      Case "staff to finalise"
         Staff_To_Finalise_Select(staff[columnview1.Item.key])
      Case "patient"
         patient = allpatients[columnview1.Item.key]
         Patient_Select()
   End Select
   Columnview1.Visible = False
Catch
   Return
   
End

Public Sub EditArea_KeyRelease()
   '-------------------------------------------------------------------
   'As user types, on this event, find either patient, staff or 'tells'
   '-------------------------------------------------------------------
   
   Select Case Last.tag
      Case "patient"
         Patient_Find()
      Case "staff allocated", "staff to finalise"
         Staff_Find(Last)         'popup list of staff members
   End Select
   
End

Public Sub EditArea_KeyPress()
   
   If Bexit Then Return
   
   If InStr(Last.text, "\n") Then
      Last.text = Replace$(Last.text, "\n", "")
   End If
   
   Select Case key.Code
      Case key.Down
         If columnview1.visible Then
            Columnview1.MoveFirst
            Columnview1.Item.Selected = True
            columnview1.SetFocus()
         End If
         
      Case key.Return, key.Tab
         Select Case Last.tag
            Case "task name"
               txtTaskDetails.SetFocus()
            Case "patient"
               txtRelatedTo.SetFocus()
            Case "staff allocated"
               txtStaffToFinalise.SetFocus()
            Case "staff to finalise"
               If columnview1.Visible Then
                  txtStaffToFinalise.text = ""
                  columnview1.SetFocus
                  Return
               Endif
               '  tbSave.SetFocus()
            Case "details"
               columnview1.Visible = False
               txtStaffAllocated.SetFocus()
            Case "notes"
               tbAddNotes.SetFocus()
         End Select
         
   End Select
   
End

Public Sub EditArea_GotFocus()
   
   If bexit = True Or Last.readonly = True Then
      Return
   End If
   ReferenceHboxForTopColumnview = Last.Parent.Parent
   Last.BackGround = Color.rgb(95, 255, 175)
   With columnview1
      .Visible = False
      .top = Last.parent.parent.top + Last.parent.Parent.height
      .left = Last.Parent.left + Vbox_EditArea_Inner.Padding
      .Raise
   End With
   
End

Public Sub EditArea_LostFocus()
   
   If Bexit Then Return
   Last.background = Color.White
   Last.pos = 1
   If Last.tag = "tell patient" Or Last.tag = "details" Or Last.tag = "notes" Then
      Last.text = Replace$(Last.text, "\n", "")
   Endif
   
End

Public Sub EditArea_Change()
   
   If bexit Then Return
   Select Case Last.tag
         
      Case "staff allocated"
         If Trim(Last.text) = "" Then
            fk_staff_allocated = 0
         Endif
      Case "staff to finalise"
         If Trim(Last.text) = "" Then
            fk_staff_must_finalise = 0
         Endif
         
      Case "notes"
         If Trim(Last.text) = "" Then
            VBox_Notes.Padding = 0
         Else
            VBox_Notes.Padding = 1
         Endif
   End Select
   If Last.tag <> "staff making notes" And Last.tag <> "notes" Then
      EditArea_Notify_DataChange(True)
   End If
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   '-----------------------------------------------------------------------------------
   'Adds or removes padding around edit area to indicate if data is changed and unsaved
   '------------------------------------------------------------------------------------
   
   If flag Then
      VBox_EditArea_Outer.Padding = 1
      With tbSave
         .foreground = Color.red
         .Enabled = True
      End With
      
   Else
      VBox_EditArea_Outer.Padding = 0
      With tbSave
         .foreground = Color.Black
         .Enabled = False
      End With
   End If
   
End

Public Sub Task_New()
   '------------------------------------------------------------------------
   'New task, clear edit area, reset flags  , default to a patient task
   'If the task manager is embedded in the Inbox, the task is associated
   'with a document, and that document's tasks may have already been started
   'i.e have a task-component in the database
   '-------------------------------------------------------------------------
   
   EditArea_Clear()
   rbForPatient.Value = True     'triggers  rbWhoFor_Click() and enables/disables textboxes
   txtStaffAllocated.ReadOnly = False
   txtTaskDetails.ReadOnly = False
   VBox_EditArea_Inner.Enabled = True
   With lblTask
      .Foreground = Color.Red
      .text = "New Task"
   End With
   Select Case parent_form
      Case "FDayBook", "FClericalReadOnlyClinical"
         VBox_Notes.Background = Color.Background
         VBox_Notes.Visible = True
         txtRelatedTo.ReadOnly = False
         Hbox_NotesButtons.Visible = True
         rbForPatient.value = True
         VBox_Notes.Enabled = False
         Hbox_NotesButtons.Enabled = False
         lblNotesAllMembers.Foreground = Color.LightForeground
         lblNewNotes.Foreground = Color.LightForeground
         lblKeyToNotes.Foreground = Color.LightForeground
         lblNoteBy.Foreground = Color.LightForeground
         lblDateFinalised.Foreground = Color.LightForeground
         lblFinalisedby.Foreground = Color.LightForeground
         txtStaffMakingNotes.text = ""
         tbfinalise.Visible = False
         tbAddNotes.Visible = False
         tbNewNotes.Visible = False
         VBox_EditArea_Outer.Enabled = True
         HBox_NotesAllStaff.Visible = True
         cvwStaffTasks.UnselectAll()
         If parent_Form = "FDaybook" Then currentconsult = Null  'FClericalReadOnlyClinical" always contains same patient
         HBox_Urgency.Enabled = True
         txtStaffToFinalise.ReadOnly = False
         If Parent_Form = "FClericalReadOnlyClinical"
            txtPatient.text = CurrentConsult!patient!wholename
            lblBirthdate.text = Format(CurrentConsult!patient!birthdate, "dd/mm/yyyy")
            txtStreet.text = Trim(CurrentConsult!patient!street1 & " " & CurrentConsult!patient!street2)
            txtSuburb.text = CurrentConsult!patient!town & " " & CurrentConsult!patient!postcode
            txtRelatedTo.Enabled = True   
            txtTaskDetails.Enabled = True 
         End If  
      Case "Inbox"
         txtTaskDetails.SetFocus()
         lblTaskHeading.text = "Tasks Allocated for This Document"
         Hbox_NotesButtons.Visible = False
      Case "FPatientTasks"
         txtRelatedTo.SetFocus
         
   End Select
   
End

Public Sub Valid_Task() As Boolean
   '------------------------------------------------------------
   'Validates data for the task before saving, return true if ok
   '------------------------------------------------------------
   
   Dim sMsg As String
   
   If Parent_Form = "FPatientTasks" Then
      sMsg = "You have started to allocate a staff task for this patient, but it is not complete\n\n"
   Else
      sMsg = "You have started to allocate a staff task to this document, but it is not complete\n\n"
   End If   
   Message.Title = "Allocating Staff Task"
   If Trim(txtRelatedTo.text) = "" Then
      txtRelatedTo.SetFocus()
      Return
   Endif
   If Trim(txtTaskDetails.text) = "" Then
      txtTaskDetails.SetFocus()
      Return
   Endif
   
   If fk_staff_allocated = 0 Then                                                         'no specific task member is allocated
      If Trim(txtStaffAllocated.text) <> "" Then
         sMsg &= "Allocate to any Secretarial staff?"
         If Message.Question(sMsg, "Yes", "No") = 2 Then
            txtStaffAllocated.SetFocus()
            Return
         End If
      Endif
   Endif
   If fk_staff_allocated = 0 And cmbRolesCanAction.index = -1 Then
      sMsg &= "Please select either a specific staff member, or a generic 'role' from the roles combo box"
      Message.info(sMsg)
      txtStaffAllocated.SetFocus
      Return
   End If
   If fk_staff_must_finalise = 0 Then
      If fk_role_can_finalise = 0 Then
         Message.Info("Please allocate the staff member who must finalise this task.")
         txtStaffToFinalise.SetFocus()
         Return
      End If
   Endif
   
   Return True
   
End

Public Sub rbDegreeUrgency_Click()
   
   fk_urgency = Last.tag
   
End

Public Sub EditAreaButtons_KeyPress()
   
   Select Case key.Code
      Case key.return
         Select Case Last.tag
            Case "save"
               Save()
            Case "new staff task"
               
            Case "new patient task"
               Task_New()
            Case "add notes"
               
         End Select
   End Select
   
End

Public Sub cvwTaskNotes_Refresh()
   '------------------------------------------
   'display any notes for this task like this:
   'Date Staff member Note about the task
   'the Notes collection is zero based
   '
   '------------------------------------------
   
   Dim x As Integer
   Dim note As New Collection
   
   cvwTaskNotes.Clear()                                        'clear existing notes
   Select Case iTaskRestriction
      Case const.cTaskRestriction_document
         Notes = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Staff_Tasks_Get_Notes_For_Document(fk_document))       'get notes for this task
      Case Else
         Notes = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Staff_Tasks_Get_Notes(fk_task))       'get notes for this task
   End Select
   
   If Notes.count Then                                         'and display
      For Each note In notes
         cvwTaskNotes.Add(x, 0)
         If IsNull(note!date_completed) Then
            cvwTaskNotes[x][0] = "O" 'outstanding
         Else
            cvwTaskNotes[x][0] = "F" 'finalised
         Endif
         cvwTaskNotes[x][1] = Format(note!date, "dd/mm/yyyy")
         cvwTaskNotes[x][2] = note!staff_made_note_title & " " & note!staff_made_note_wholename
         cvwTaskNotes[x][3] = note!note
         Inc x
      Next
   End If
   modUtilGUI.Columnview_Columns_Set_Size(cvwTaskNotes, lblMeasure)
   
End

Public Sub cvwStaffTasks_Menu()
   
   If Last.count = 0 Then Return
   If iCurrentTaskComponent = 0 Then Return
   mnuTasks.Popup()
   
End

Public Sub mnuTasks_Click()
   
   If iCurrentTaskComponent = 0 Then Return
   Select Case Last.tag
      Case "edit"
         Task_Edit()
      Case "delete"
         Task_Delete()
      Case "help"
         modUtilGUI.NotImplemented("Help for this section")
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwStaffTasks, "FStaffTasks")
   End Select
Catch
   Return
   
End

Public Sub task_Edit()
   '--------------------------------------------------------
   'User has clicked on the cvStaffTasks list - edit one row
   '--------------------------------------------------------
   
   Dim sString As String
   '-----------------------------------------------------------
   'If being edited in a different consultation to that created,
   'and staff who created <> person editing protest a little
   '------------------------------------------------------------
   If CurrentConsult.GetPK() <> CurrentTaskComponent!fk_consult Then
      If modDBConnect.currentUser!fk_staff <> CurrentTaskComponent!fk_staff_filed_task Then
         sSTring = CurrentTaskComponent!title_staff_filed_task & " " & modUtil.Ucase_Word_First_Letter(CurrentTaskComponent!staff_filed_task_title & " " & CurrentTaskComponent!staff_filed_task_wholename)
         If Message.Warning("This task was created by:" & sString & "\n\nContinue - you will be audited.", "Yes", "No") = 2 Then Return
      End If
   End If
   '   Display(SelectedTask)
   
End

Public Sub Task_Display(CurrentTaskComponent As Collection)
   '--------------------------------------------------------------
   'Display the selected component of the task
   'Note that a component may be the whole task, or part of a task
   '---------------------------------------------------------------
   
   bExit = True
   txtRelatedTo.text = UCase(CurrentTaskComponent!related_to)
   txtRelatedTo.pos = 0
   If Not IsNull(CurrentTaskComponent!fk_patient) Then
      txtPatient.text = CurrentTaskComponent!patient_wholename
      txtStreet.text = Trim(CurrentTaskComponent!patient_street1 & " " & CurrentTaskComponent!patient_street2)
      txtSuburb.text = CurrentTaskComponent!patient_town & " " & CurrentTaskComponent!patient_postcode
      lblBirthdate.text = Format(CurrentTaskComponent!patient_birthdate, "dd/mm/yyyy")
      rbForPatient.value = True
   Else
      rbStaffMember.value = True
   End If
   fk_task = CurrentTaskComponent!fk_task
   pk_view_staff_task = CurrentTaskComponent!pk_view
   
   Try fk_staff_allocated = CurrentTaskComponent!fk_staff_allocated  'could be null - allocated to anyone
   Try fk_table_row = CurrentTaskComponent!fk_row
   Try fk_document = CurrentTaskComponent!fk_row
   Try fk_staff_filed_task = CurrentTaskComponent!fk_staff_filed_task
   Try fk_staff_must_finalise = CurrentTaskComponent!fk_staff_must_finalise
   Try fk_role_can_finalise = CurrentTaskComponent!fk_role_can_finalise
   fk_component = CurrentTaskComponent!fk_component
   txtLoggedBy.text = CurrentTaskComponent!staff_filed_task_title & " " & CurrentTaskComponent!staff_filed_task_wholename
   txtRelatedTo.text = CurrentTaskComponent!related_to
   txtTaskDetails.text = CurrentTaskComponent!details
   txtTaskDetails.pos = 0
   txtDateLogged.text = Format(CurrentTaskComponent!date_component_logged)
   txtStaffAllocated.text = CurrentTaskComponent!staff_allocated_title & " " & CurrentTaskComponent!staff_allocated_wholename
   txtStaffToFinalise.text = CurrentTaskComponent!staff_must_finalise_task_title & " " & CurrentTaskComponent!staff_must_finalise_task_wholename
   If Trim(txtStaffAllocated.text) = "" Then txtStaffAllocated.text = "Anyone"
   fk_urgency = CurrentTaskComponent!fk_urgency
   Select Case CurrentTaskComponent!fk_urgency
      Case const.UrgencyLevelRoutine
         rbUrgencyRoutine.Value = True
      Case const.UrgencyLevelModerate
         rbUrgencyModerate.value = True
      Case const.UrgencyLevelUrgent
         rbUrgencyUrgent.value = True
   End Select
   chkVerifyCompleted.value = CurrentTaskComponent!must_verify_completed
   If Parent_Form = "FDayBook" Or Parent_Form = "FClericalReadOnlyClinical" Then
      HBox_StaffMember_Notes.Visible = True
      HBox_StaffMember_AddingNotes.Visible = True
      lblFinaliseTask.Foreground = Color.blue
      cvwTaskNotes.Visible = True
      cvwTaskNotes_Refresh() 'display any previously entered notes for this task
      lblNotesAllMembers.text = "Notes All Staff"
      lblNotesAllMembers.Foreground = Color.Black
      lblKeyToNotes.Foreground = Color.Black
      lblNewNotes.Foreground = Color.BLack
      lblNoteBy.Foreground = Color.Black
      lblDateFinalised.Foreground = Color.Black
      lblFinalisedby.Foreground = Color.Black
      HBox_StaffMember_AddingNotes.Visible = True
      HBox_StaffMember_Notes.Visible = True
      txtNotes.text = ""
      VBox_Notes.Enabled = True
      Hbox_NotesButtons.Enabled = True
      tbfinalise.Visible = True
      tbAddNotes.Visible = True
      tbNewNotes.Visible = True
   Endif
   EditArea_Notify_DataChange(False)
   bExit = False
   txtFilter.SetFocus()
   
End

Public Sub Task_Delete()
   '------------------------------------------------------------------------------------------------
   'Marks a task and or component as Deleted with an Audit Trail if this is a patient task
   'FIXME: only allow this to be done by the person with final responsibility - not yet implemented
   '------------------------------------------------------------------------------------------------
   
   Dim iComponentCount As Integer
   Dim sString As String
   
   If Not fk_component Then Return         'fixme all this misnomer stuff
   
   Message.Title = "Delete a Task or Component"
   If CurrentTaskComponent!fk_patient Then
      sSTring = "Patient       : " & CurrentTaskComponent!patient_wholename
   Else
      sString = "Staff task     :"
   End If
   sSTring &= "\n\nRelated to  : " & CurrentTaskComponent!related_to
   sString &= "\nComponent: " & CurrentTaskComponent!details
   sString &= "\n\nAre you sure you wish to delete this component?"
   
   If Message.Question(sString, "Yes", "No") = 2 Then
      Return
   End If
   modDBConnect.BeginTrans()
   
   If CurrentTaskComponent!fk_patient Then
      If IsNull(currentconsult) Then
         CurrentConsult = New CConsult(patient)
      End If
      modAudit.MakeAudit(currentconsult, "mark deleted", "clerical.tasks", fk_task, const.cSection_StaffTasks, " by " & modDBConnect.currentUser_FullName())
   End If
   
   modDBConnect.update("clerical.tasks", Null, ["pk": fk_task, "deleted": True])
   modDBConnect.update("clerical.task_components", Null, ["pk": fk_component, "deleted": True])
   fk_task_deleted = fk_task
   fk_tasks_Components_keys_deleted = New Collection
   fk_tasks_Components_keys_deleted.Add(fk_component, iComponentCount)
   modDBConnect.CommitTrans()
   Reload()
   ' Else
   '    Message.Info("Deletion of the task was cancelled by the user")
   '    modDBConnect.RollBack()
   ' End If
   
End

Public Sub cvwStaffTasks_Select()
   '---------------------------------------------------------
   'User has clicked on one of the tasks listed in their list
   '---------------------------------------------------------
   
   If Not TasksComponents.count Then
      Return
   End If
   EditArea_Clear()
   VBox_EditArea_Inner.Enabled = False
   Select Case Parent_Form
      Case "FDayBook", "FClericalReadOnlyClinical"                                            'currentconsult already set externally by FClericalReadOnlyClinical
         If Parent_Form = "FDayBook" Then currentconsult = Null                               'rows in the view pertain to multiple patients 
         TabStrip1.index = 0                                                                  'Ensure the document tab is showing
         VBox_EditArea_Outer.Enabled = False
         cvwStaffTasks.movecurrent()                                                          'sets the key to taskscomponents
         CurrentTaskComponent = TasksComponents[cvwStaffTasks.item.key]                       'for ease of typing
         iCurrentTaskComponent = TasksComponents[cvwStaffTasks.item.key]!fk_component
         Task_Display(CurrentTaskComponent)                                                   'fill edit area with data
         If Not IsNull(CurrentTaskComponent!fk_row) Then                                       'fk_row = documents.fk_document
            Show_Document(CurrentTaskComponent!fk_row)                                        'Show document if available
            With TabStrip1
               .Enabled = True
               .Foreground = Color.Black
            End With
         Else
            With TabStrip1
               .Enabled = False
               .Foreground = Color.LightForeground
            End With
            
         Endif
         If CurrentTaskComponent!fk_patient Then                                                 'not all tasks are for a patient, could be staff<>staff
            If Parent_Form = "FDayBook" Then    
               patient = modContactsDBI.Patient_Get_Using_PK(CurrentTaskComponent!fk_patient)    'get patient collection to create a cConsult
               fk_patient = CurrentTaskComponent!fk_patient                                      'set fk_patient
               Consult_Check_Created(const.ConsultType_AuditNote, "Staff Tasks")                 'set current consult to pass to other forms
            Else                                                                                 'currentconsult set by parent form
               patient = currentconsult!patient
            End If   
            comms = modContactsDBI.person_comms_get(patient!fk_person)                        'get methods of contacting patient
            For Each comm In comms                                                            'and show these in the editing area
               If comm!fk_type = const.CommModalityHome Then
                  lblHomePhone.text = comm!value
               Endif
               If comm!fk_type = const.CommModalityMobile Then
                  lblMobilePHone.text = comm!value
               Endif
            Next
            
            If IsNull(Form_PreviousNotes) Then
               Form_PreviousNotes = New FProgressNotesViewer(Vbox_PreviousNotes)              'Ensure a progress notes viewer present on tab2
            Endif
            Form_PreviousNotes.Init(currentconsult, modProgressNotes.AllProgressNotes_Construct_Html(currentconsult)) 'show progress notes for patient
         Else
            fk_patient = 0
         End If
         VBox_EditArea_Outer.Enabled = True                                         'fixme decide if default to Vbox_EditArea_Inner.Enabled (ie allow edit)
         VBox_EditArea_Inner.Enabled = True
   End Select
   
End

Public Sub cvwAllTasks_Refresh()
   '-----------------------------------------------------------
   'Show all other staff members involved in this patients task
   '-----------------------------------------------------------
   
   Dim task As Collection
   Dim x As Integer
   
   cvwAllTasks.Clear()
   If fk_table_row = 0 Then Return
   Inc Application.Busy
   AllStaffInvolved = modDayBookDBI.Staff_Tasks_Get_Associated(fk_task, fk_staff)
   If AllStaffInvolved.count = 0 Then
      cvwAllTasks.Add(x, 0)
      cvwAllTasks[x][0] = ""
      cvwAllTasks[x][1] = "Nil other members involved"
   Else
      For Each Task In AllStaffInvolved
         
         cvwAllTasks.Add(x, 0)
         cvwAllTasks[x][0] = task!staff_allocated_title & " " & task!staff_allocated_wholename
         Select Case Task!fk_urgency
            Case const.UrgencyLevelRoutine
               cvwAllTasks[x][1] = "Not urgent: "
            Case const.UrgencyLevelModerate
               cvwAllTasks[x][1] = " Moderately urgent: "
            Case const.UrgencyLevelUrgent
               cvwAllTasks[x][1] = "URGENT: "
         End Select
         If Not IsNull(task!date_component_completed) Then
            cvwAllTasks[x][1] &= "[DONE-" & Format(task!date_component_completed, "dd/mm/yyyy") & "] "
         Endif
         '   cvwAllTasks[x][1] &= Task!task_type
         Inc x
         If Not IsNull(Task!tell_patient) Then
            cvwAllTasks.Add(x, 0)
            cvwAllTasks[x][0] = ""
            cvwAllTasks[x][1] &= "Tell patient: " & Task!tell_patient
            Inc x
         Endif
      Next
   End If
   lblmeasure.font = cvwAllTasks.Font
   modUtilGUI.Columnview_Columns_Set_Size(cvwAllTasks, lblmeasure)
   Dec Application.Busy
   
End

Public Sub timer1_Timer()
   '-------------------------------------------------------------------------------------
   'Called on _new, this delay allows gui to show before loading, visually more pleasing
   'Loads the defaults for the sending entities
   're-loads inbox with patients/documents
   'Otherwise except for init(0 this routine is not used
   'see  cvwTasks_Reload()
   '------------------------------------------------------------------------------------
   
   Return
   If Parent_Form = "Inbox" Or Parent_Form = "FClericalReadOnlyClinical" Then Return
   timer1.Stop()
   cvwTasks_Refresh()
   timer1.Delay = 100000 're-set the delay to something longer
   timer1.start()
   
End

Public Sub Patient_Find()
   '-----------------------
   'Show multiple patients for selection
   'In this routine we:
   '       : loop through the data_persons recordset
   '       : for each  of these, then fetch 1-n addresses
   '       : if one address, put in column 3,4
   '       : ie same row as name,surname,sex,dob
   '       : if > one address put on next row, without name,surname,sex,dob
   '-------------------------------------------------------------------------
   
   Dim iaddress As Collection
   Dim iLastPatient_pk As Integer
   Dim iAddressCount As Integer
   Dim x As Integer
   
   With columnview1
      .Clear
      .Visible = False
      .Columns.count = 5
   End With
   If Trim(txtPatient.text) = "" Then Return
   Allpatients = modContactsDBI.patients_get_firstname_surname(txtPatient.text)
   Allpatients.Remove("sql_in_english")       'not used in this context
   allpatients = modUtil.Copy_Collection_Keyed_Sequentially(allpatients)  'make it zero based.
   '-------------------------------------------------------------------------
   'columns: 0=surname 1=firstname 2=sex 3=street 4= town/postcode
   '-------------------------------------------------------------------------
   If Not allpatients.count Then Return
   iLastPatient_pk = -1
   For Each patient In allpatients
      If patient!fk_patient <> iLastPatient_pk Then
         iLastPatient_pk = patient!fk_patient
         iAddressCount = 0
         columnview1.Add(x, 0)
         columnview1[x][0] = patient!surname
         columnview1[x][1] = patient!firstname
         columnview1[x][2] = patient!sex
         '----------------------------------------------------------------------
         'For the first address put it on the same row as surname/name and coms
         '---------------------------------------------------------------------
         columnview1[x][3] = Trim(patient!street1 & " " & patient!street2)
         columnview1[x][4] = Format(patient!birthdate, "dd/mm/yyyy")
         columnview1[x][5] = patient!town & " " & patient!postcode
      Else
         '---------------------------------------------
         'patient is the same, just add the address
         columnview1.Add(x, 0)
         columnview1[x][0] = ""
         columnview1[x][1] = ""
         columnview1[x][2] = ""
         columnview1[x][3] = Trim(patient!street1 & " " & patient!street2)
         columnview1[x][4] = Format(patient!birthdate, "dd/mm/yyyy")
         columnview1[x][5] = patient!town & " " & patient!postcode
      End If
      Inc x
   Next
   lblMeasure.font = columnview1.Font
   modUtilGUI.Columnview_Columns_Set_Size(columnview1, lblmeasure)
   If allpatients.count = 1 Then              'auto select single patient.
      Patient_Select()
   Else
      With columnview1
         .Visible = True
         .Raise
         .tag = txtPatient
      End With
   End If
   
End

Public Sub Patient_Select()
   '-----------------------------------------------------
   'User is selecting  a patient  from the columnview
   '-----------------------------------------------------
   
   Try txtPatient.text = Patient!firstname & " " & Patient!surname
   Try lblBirthdate.text = Format(Patient!birthdate, "dd/mm/yyyy")
   txtStreet.text = Trim(Patient!street1 & " " & Patient!street2)
   txtSuburb.text = Patient!town & " " & Patient!postcode
   fk_patient = Patient!fk_patient
   With txtPatient
      .Foreground = Color.Black
      .Border = False
      .Font.Bold = False
   End With
   With lblSearchFor
      .text = "Patient"
      .Font.bold = False
      .Foreground = Color.Black
   End With
   If IsNull(currentconsult) Then
      Consult_Check_Created(const.ConsultType_AuditNote, "New Staff Task for patient")
   End If   
   If Parent_Form = "FDayBook" And bPatientTask = True Then
      txtRelatedTo.SetFocus()
   Endif
   
End

Public Sub Consult_Check_Created(iconsult_type As Integer, summary As String)
   'probably should live elsewhere ?cConsult and pass parameters
   
   If IsNull(currentconsult) Then
      CurrentConsult = New CConsult(patient, const.consult_type_audit)
   End If
   currentconsult.Set(iconsult_type, summary)
   
End

Public Sub Form_KeyPress()
   
   If key.code = Key.Esc Then
      columnview1.Visible = False
   Endif
   
End

Public Sub rbAllocateToMe_Click()
   '
   ' If Last.value = True Then
   '    txtStaffAllocated.text = CurrentUser
   '    fk_staff_allocated = fk_staff
   ' Else
   '    txtStaffAllocated.text = ""
   '    fk_staff_allocated = 0
   ' End If
   
End

' Public Sub cmbTaskType_Click()
'    If txtTask.text = "" Then
'       txtTask.text = cmbTaskType.text
'    Endif
'
' End

Public Sub rbWhoFor_Click()
   '-----------------------------------------
   'User has clicked on type of task
   ' rbForPatient = For the patient
   ' rbStaffMember = For another staff member
   ' ----------------------------------------
   
   If bexit Then Return
   EditArea_Clear()
   Select Case Last.tag
      Case "patient"
         txtPatient.ReadOnly = False
         bPatientTask = True
         txtPatient.SetFocus
         txtPatient.Background = Color.rgb(95, 255, 175)
      Case Else
         txtPatient.ReadOnly = True
         bPatientTask = False
         currentconsult = Null
         fk_patient = 0
         txtRelatedTo.Background = Color.rgb(95, 255, 175)
         txtRelatedTo.SetFocus()
   End Select
   
End

Public Sub rbTaskRestriction_Click()
   '---------------------------------------------------------
   'If clicked then the tasks shown are either just the users
   'or all tasks for persons of that role
   '---------------------------------------------------------
   
   If Bexit Then Return
   iTaskRestriction = Last.tag
   Reload()
   
End

Public Sub cmbRolesCanFinalise_GotFocus()
   
   columnview1.Visible = False    'because the lost focus event on columnview dosn't work
   
End

Public Sub cmbRolesCanFinalise_Click()
   
   txtStaffToFinalise.text = ""  'sets fk_staff_allocated to 0
   fk_role_can_finalise = RolesCanAction[Last.index]!pk_role
   
End

Public Sub cmbRolesCanAction_Click()
   
   txtStaffAllocated.text = ""  'sets fk_staff_allocated to 0
   fk_role_can_action = RolesCanAction[Last.index]!pk_role
   
End

Public Sub cmbRolesCanAction_GotFocus()
   
   columnview1.Visible = False    'because the lost focus event on columnview dosn't work
   
End

Public Sub Show_Document(fk_document As Integer)
   
   Dim document As Collection
   
   If bExit Then Return
   document = modArchiveDocumentsDBI.Document_Get_By_pk(fk_document)
   Select Case File.Ext(document!source_file)
      Case "pdf"
         Form_html_viewer.Visible = False
         VBox_Images.Visible = False
         With form_Pdf
            .Visible = True
            .Load_PDF(modFiles.Get("document_archiving_directory", document!source_file))
         End With
      Case "png", "bmp", "jpeg", "jpg", "tiff"
         VBox_ActionDocument.Visible = False
         VBox_Images.Visible = True
         Print modFiles.Get("document_archiving_directory", document!source_file)
         pbImage.picture = Picture.Load(modFiles.Get("document_archiving_directory", document!source_file))
         ' Case Else   '10june14_old_document_schema 'REMOVE THIS SUB WHEN READY
         '    Form_PDF.Visible = False
         '    VBox_Images.Visible = False
         '    With Form_html_viewer
         '       .WebView1.HTML = document!html
         '       .Visible = True
         '    End With
      Case Else       'may be a filename, may not (e.g office generated documents in LaTex)
         Select Case document!fk_lu_data_content_type
            Case const.cData_Type_HTML
               Form_PDF.Visible = False
               Vbox_Images.visible = False
               With Form_html_viewer
                  .WebView1.HTML = document!data
                  .Visible = True
               End With
            Case const.cData_Type_Latex
               Form_PDF.Visible = True
               Vbox_Images.visible = False
               Form_html_viewer.Visible = False
               Form_PDF.Load_PDF(modPrinting.Latex_To_PDF(document!data))
            Case Else
               Message.Info("Unknown document data type - please notify the developers")    
         End Select
   End Select

End

Public Sub cvwTaskNotes_Menu()
   '----------------------------------------------------
   'Popup the notes menu
   'If staff member who made the note <> that logged on
   'disable the edit/delete menu options
   '----------------------------------------------------
   
   If cvwTaskNotes.count Then
      cvwTaskNotes.MoveCurrent
      Print Notes[cvwTaskNotes.Item.key]
      If Notes[cvwTaskNotes.Item.key]!fk_staff_made_note <> fk_staff Then
         mnuTasksNotes_Edit.Enabled = False
         mnuTasksNotes_Delete.enabled = False
      Else
         mnuTasksNotes_Edit.Enabled = True
         mnuTasksNotes_Delete.enabled = True
      Endif
      mnuTasksNotes.Popup()
   Endif
   
End

Public Sub mnuTasksNotes_Click()
   
   Select Case Last.tag
      Case "edit"
         Note_Edit()
      Case "delete"
         Note_Delete()
      Case "help"
         modUtilGUI.NotImplemented("Help for this section")
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwTaskNotes, "FStaffTasks")
   End Select
Catch
   Return
   
End

Public Sub txtFilter_KeyRelease()
   'Filter the tasks on the patient's name FIXME may not be a patient
   
   ' rbTaskRestriction_Click  'this reloads the tasks
   Reload()
   
End

Public Sub VSplit_Left_Resize()
   
   If columnview1.Visible Then
      columnview1.top = ReferenceHboxForTopColumnview.top + ReferenceHboxForTopColumnview.Height
   End If
   
End

Public Sub HSplit_Main_Resize()
   
   columnview1.width = txtTaskDetails.Width
   
End

Public Sub Form_Resize()
   
   HSplit_Main_Resize()
   VSplit_Left_Resize()
   
End

Public Sub Button1_Click()
   
   Print chkVerifyCompleted.Value, " is the value of chkVerifyCompleted"
   
End

Public Sub cmbWhatToDo_Click()
   
   txtTaskDetails.text = Last.text
   cmbwhatToDo.index = -1
   
End

Public Sub TabStrip1_Click()
   
   If bexit Then Return
   Select Case Last.Index
      Case 2 'the entire audit trail
         If IsNull(Form_Entire_Audit_Trail_Viewer) Then 
            With Form_Entire_Audit_Trail_Viewer = New FHtmlViewer(Vbox_Audit_Trail)
               .tbWebBrowserZoomIn.visible = True
               .tbWebBrowserZoomout.visible = True
               .tbWebBrowserPrint.Visible = True
            End With
         End If   
         Inc Application.Busy
         Wait   
         Form_Entire_Audit_Trail_Viewer.WebView1.HTML = modStaffTasksDBI.Task_Audit_Trail_For_Task_Get_HTML(CurrentTaskComponent)  
         Dec Application.Busy
   End Select
   
End
