' Gambas class file

' Copyright (C) 2008-2012 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
' THIS MODULE IS EXPERIMENTAL and EMBRYONIC. The naming of components
' and subroutines is erratic and the code is crap. Well - I'm not a 
' programmer and trying to do this in between patients and at night 
' when I buggered isn't really easy. Sorry.....
' Bit of a mess really............
'
' GENERAL CONCEPTS
' ================
' Within the office in general practice we have to do lots of things.
' Some are directly related to a particular patient, some just stuff around the office
' The aim of this module is to provide an interface to enter and view such tasks
' and to provide an 'audit trail' of what happened to a task from generation to completion
' In the case of a document (initially but could extend to fu of recalls/letters)
' its row-key is kept - this way a document can be followed through from importing to
' completing of its actioning (if any).
' The intent of this module - not yet developed - will be to allow reviewing and auditing
' of all staff and patient related tasks, and to be able to complete the task by using
' embedded forms such as script writer, recalls, letter writer instead of having to
' switch back to and load the patients notes.
'
' Database tables for this module are in the schema Clerical
' Tasks                - a desciption of task eg ACTION DOCUMENT:UEC;LFTS 
'                       - usually 'automatic' unless a designated inter-staff task
'                          in which case the person entering the task will have 
'                         entered the details e.g 'Make me a cup of coffee'
'
'  lu_task_types        - e.g Make an appointment, ring patient, talk to provider
'  task_components      - each task has at a minimum one component
'  task component_notes - and may or may not have notes
'  vwtaskscomponents
'  vwtaskscomponentsnotes
'
'  The term StaffTasks is used loosly - sometimes a task is a stingle task-component.
'
'  WHERE THIS MODULE IS USED
'  =========================
'  1) Embedded on the tab control in FInbox, allows user to enter tasks for
'     themselves or other staff members when dealing with incoming documents
'     in this case the Task name is automated (see above)
'     In this incarnation most of the gui and the functionality of this form is hidden
' 
'  2) Embedded in the main Staff Tasks form currently this is badly named as FDaybook
'     - This in case all the funtionality is exposed. The user may review past tasks
'       allocated to them as well as who else is involved in the task (i.e a task can
'       have one or more components.
'     - A task is regarded as 'finalised' by a user when their task component is the
'       only one left with a  clerical.task_components.date_completed being null
'       In this case the main clerical.tasks table is updated - and the key of the
'       staff finalising the task as well as a completion date is finalised.
'
'   Where the behaviour of the form is necessarily different, case statements where the
'   name of the parent form (i.e the form which embedded this form) are used
'
'  GENERAL COMMENTS ON CODE - PROGRAM FLOW
'  =======================================
'  Init()  : Loads form settings, uses a label lblMeasure to make sure edit area labels are correct width
'            Loads combo's and hides/unhides gui elements which differ on each form
'            very rough needs fixing.
'  ReLoad(): Reloads the staff tasks, used at Init() and after every save
'  Timer1() : Used as Timer1_timer() to allow gui to load when form is shown, otherwise
'            the gui seems to 'hang' whilst the database is accessed.
'  Set_Parent_Form(..) sets the parent_form name variable from the calling form, used in case statements
'  Set_Document(..)    used from the Inbox to set the current document key
'                      otherwise if in STaff Tasks fk_document can be 0 if the task
'                      is not associated with a document
'
' Set_consult(..)    Set from the Inbox if dealing with inbox documents, otherwise
'                    when a patient task is generated from with this module, it is set
'                    when records are saved
' Set_Audit_Schema_Table_SourceRowKey() set keys for the row, table, schema, from Inbox 
'                                       used to create audit trail
' 
'
'  SPECIAL NOTES
'  =============
'  The tables in this schema may seem a bit convoluted - if you can come up with a
'  better schema which does the same thing feel free to correct my poor logic.
'  You will notice some apparent duplication in the schema - for example where a 
'  patient is the task recipient, there fk_consult will not be null, and hence
'  will point to the date the task (component) was initiated as well as the staff
'  member who did this.
'
'  Staff involvement  - fk_staff_filed = key to indicate who filed the task component
'                     - fk_staff_allocated = key to indicate who is responsible for the component
'                     - fk_staff_finalised = key to indicate who finalised the task
'                     The fk_staff_filed is duplicated in clerical.tasks and clerical.task_components
'                     I could remove the one in clerical.tasks and use the time stamp to see who was
'                     the last one completing the last task component, but it seemed more efficient
'                     to duplicate the key.
'
'  NOT YET IMPLEMENTED
'  ===================
'  None of the embedded forms like scripts/recalls, ie forms to allow you to do things
'  when you complete the task, rather than opening up the patients notes.
'  Internal staff tasks
'  The reivew of completed staff tasks
'  Any of the embedded form tasks eg recalls, letter etc
'-----------------------------------------------------------------------------------------

Public bEmbedded As Boolean
Public CurrentUser As String
Private TaskTypes As Collection
Private AllPatients As Collection 
Private fk_staff As Integer 
Private fk_staff_filed_task As Integer
Private fk_staff_filed_component As Integer
Private TasksComponents As Collection 
Private fk_component As Integer
Private CurrentTaskComponent As Collection 
Private Components As Collection
Private component As Collection 

Private iCurrentTaskComponent As Integer
Private bPatientTask As Boolean
Public bExit As Boolean  'called from parent do not change
Private CurrentConsult As CConsult
Public Parent_Form As String
Private staffTasks As Collection
Private AllStaffInvolved As Collection
Private fk_patient As Integer
Public fk_task As Integer   'needs to be set back to 0 when a new document loaded for a patient in inbox.
Private pk_view As String 
Private Task_Keys As Collection 
Private CurrentTask As Collection 
Private The_Collection As Collection
Private Member As Collection 
Private fk_tell As Integer   'if not zero- user has selected a predfined 'tell patient...'
Private staff As Collection 
Private Staff_Member_Allocated_Task As Collection 
Private Staff_Member_Must_Finalise_Task As Collection 
Private pk_view_staff As String
Private pk_view_staff_task As Integer
Private fk_staff_allocated As Integer
Private fk_urgency As Integer
Private messages_to_patient As Collection
Private message_to_patient As Collection
Private fk_document As Integer
Private Notes As Collection
Private pk_view_notes As Integer
Private bEditing As Boolean
Private bFinalised As Boolean
Private iTaskRestriction As Integer          'const.cTaskRestriction_User, .._role .._none
Private fk_note As Integer
Private patient As New Collection 
Private fk_table_row As Integer        'fixme fim my name = e.g fk_document
Private table As String 'fixme check if this is being used - noted set from Finbox tasks
Private schema_table_keys As Collection 
Private comms As Collection 
Private comm As Collection 
Private hobs As Observer
Private Form_PastHistory As FPastHistory
Private Form_prescription As FPrescriptions
Private Form_Requests As FRequests
Private Form_Scratchpad As FScratchPad
Private Embedded_Forms As Collection 
Private Form_Recalls As FRecalls
Private Form_ActionDocument As FActionDocument
Private Form_PDF As FPdf 
Private Form_html_viewer As FHtmlViewer
Private RolesCanAction As Collection         'eg secretary, doctor can action the component
Private RolesCanFinalise As Collection       'only this role can finalise the task. Subcomponents can be actionied by  RolesCanAction or designated staff member
Private RoleCanAction As String 
Private fk_role_can_finalise As Integer      'if non zero this role can finalise a task
Private fk_staff_must_finalise As Integer    'if non zero then this staff member only may finalise a task
Private fk_role_can_action As Integer 
Private fk_task_deleted As Integer           'the last deleted task
Private fk_tasks_Components_keys_deleted As Collection 'component keys of last deleted task.

Public Sub Set_Audit_Schema_Table_SourceRowKey(k As Integer, t As String)       
   '----------------------------------------------
   'Used in auditing see modAudit.MakeAudit(..)
   'table = qualified with schema ie schema.table
   '---------------------------------------------
   
   fk_table_row = k
   table = t  'FIXME - I don't think this is ever used - old code - check calling forms.
   
End

Public Sub Set_Parent_Form(parent_form_name As String)
   '----------------------------------------------------
   'Name of form which embedded this form - mainly used
   'to save splits appropriate for this form when loaded
   'by its parent
   '----------------------------------------------------
   
   Parent_Form = parent_form_name  
   
End

Public Sub Set_Document(docKey As Integer)
   
   fk_document = docKey
   
End

Public Sub Set_consult(cons As CConsult)
   '---------------------------------------------------
   'Consult is only set here when embedded in the inbox  
   '---------------------------------------------------
   
   CurrentConsult = cons
   fk_patient = currentconsult!patient!fk_patient
   
End

Public Sub Init()
   '-------------------------------------------------------------------------
   'Initialise the module, depending on whether called from:
   '1) The users day book in which case all the users staff tasks are loaded
   '2) The users inbox
   '-------------------------------------------------------------------------
   
   Settings_Load()      'set splits on form
   currentUser = modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename         'ease oftyping later on in the code
   RoleCanAction = modDBConnect.currentUser!role
   rbTaskRestrict_Role.text &= modUtil.Make_Plural(RoleCanAction)
   fk_staff = modDBConnect.currentUser!fk_staff                                                   
   
   iTaskRestriction = const.cTaskRestriction_user 
   rbTaskRestrict_User.value = True                                                                'default only show user's tasks    
   'key to staff member using form
   lblMeasure.text = "  To Be Finalised By  "                                                            'get width of editarea labels ok
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Task, lblMeasure)    
   modEditAreaHelpers.Resize_label(lblNotes, lblMeasure)                            'and resize them
   'TaskTypes = modUtil.LoadCombo(cmbTaskType, modStaffTasksDBI.StaffTasks_Get_TaskTypes(), "type") 'pre-defined categories eg. Ring patient
   RolesCanAction = modUtil.LoadCombo(cmbRolesCanAction, modAdminDBI.Roles_Get(), "role")
   RolesCanFinalise = modUtil.LoadCombo(cmbRolesCanFinalise, modAdminDBI.Roles_Get(), "role")
   Select Case Parent_Form
      Case "FDayBook"
         timer1.start                                                                               'load staff tasks for member
         Hbox_Patient.Visible = True
         Hbox_Street.visible = True
         Hbox_Suburb.Visible = True 
         lblAllocatedTo.text = "Allocated to"
         bexit = True
         cvwStaffTasks.Columns.count = 3
         cvwAllTasks.Columns.count = 3
         HBox_Heading.Visible = False 
         tbSave.enabled = False 
         tbFinalise.Visible = True
         txtDateLogged.readonly = True
         txtLoggedBy.readonly = True
         '  cmbTaskType.Enabled = False 
         txtTaskDetails.readonly = True
         txtStaffAllocated.readonly = True
         HBox_Urgency.Enabled = False 
         lblPatient.Visible = True
         Vbox_AllStaffsTasks.Visible = True 
         txtStaffMakingNotes.text = modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename
         lblTask.text = "Task Details"
         VBox_EditArea_Task.Enabled = False   
         bexit = False
         lblAddNewNote.Visible = True
         HBox_StaffMember_Notes.Visible = True
         HBox_StaffMember_AddingNotes.Visible = True
         lblNotesAllMembers.Visible = True
         tbNewPatientTask.Enabled = True  
         modEditAreaHelpers.Resize_labels(VBox_Notes, lblMeasure)    
         VBox_Notes.Visible = True
         HBox_NotesButtons.Visible = True
         With cvwTaskNotes
            .Columns.count = 4
            .Columns[0].width = 100
            .Visible = True
         End With
         With Form_PDF = New FPdf(Vbox_ActionDocument)
            .Visible = False  
            .btZoomIn.Visible = True
            .BtPrint.Enabled = True
            .BtPrint.Visible = True 
            .btZoomOut.Visible = True
            .Visible = False   
         End With
         With Form_html_viewer = New FHtmlViewer(Vbox_ActionDocument)
            .tbWebBrowserZoomIn.visible = True
            .tbWebBrowserZoomout.visible = True  
            .tbWebBrowserPrint.Visible = True 
         End With
         HBox_TaskFor.Visible = True   
         HBox_TaskRestriction.Visible = True
         
      Case "Inbox"
         cvwStaffTasks.Columns.count = 4
         ' Reload()
   End Select
   Reload()
   
End

Public Sub Settings_Save()
   
   If Parent_Form <> "" Then
      Settings["Tasks_Embedded_" & Parent_Form & "/HSplit_Main.Layout"] = HSplit_Main.Layout
      Settings["Tasks_Embedded_" & Parent_Form & "/VSplit_Left.Layout"] = VSplit_Left.Layout
      Settings["Tasks_Embedded_" & Parent_Form & "/VSplit_Right.Layout"] = VSplit_Right.Layout
   Else
      Settings["Tasks/HSplit_Main.Layou"] = HSplit_Main.Layout
      Settings["Tasks/VSplit_Left.Layout"] = VSplit_Left.Layout
      Settings["Tasks/VSplit_Right.Layout"] = VSplit_Right.Layout
   End If
   
End

Public Sub Settings_Load()
   
   If Parent_Form <> "" Then
      Try HSplit_Main.Layout = Settings["Tasks_Embedded_" & Parent_Form & "/HSplit_Main.Layout"]
      Try VSplit_Left.Layout = Settings["Tasks_Embedded_" & Parent_Form & "/VSplit_Left.Layout"]
      Try VSplit_Right.Layout = Settings["Tasks_Embedded_" & Parent_Form & "/VSplit_Right.Layout"]
      
   Else
      Try HSplit_Main.Layout = Settings["Tasks/HSplit_Main.Layout"]
      Try VSplit_Left.Layout.Layout = Settings["Tasks/VSplit_Left.Layout"]
      Try VSplit_Right.Layout.Layout = Settings["Tasks/VSplit_Right.Layout"]
   End If
   
End

Public Function Save() As Boolean
   
   modDBConnect.BeginTrans()
   Note_Save()
   If Task_Save() Then
      modDBConnect.CommitTrans()
      cvwTaskNotes_Refresh()           'refresh the notes on tasks list
      note_new()                       'default to adding another note
      Return True                      'true flag used by FInbox to check a task was saved
   End If   
   
End

Public Function Task_Save() As Boolean
   '----------------------------------------------------------------------------------------------------
   ' Saves the staff task
   ' this may or may not belong to a patient - for example it could be 'inter-staff  directive
   ' Can be one or more tasks allocated to staff members
   '----------------------------------------------------------------------------------------------------
   
   Dim StaffTask As New Collection 
   Dim TaskComponent As New Collection 
   Dim Tell_Patient As New Collection 
   Dim sTaskComponentSummary As String 
   Dim audit As New Collection 
   
   If Vbox_Task.Padding = 0 And bFinalised = False Then Return 'no outline = no data
   
   If Not Valid_task() Then 
      Return        'validate contents
   End If
   '---------------------------------------------------
   'ok, all is well in the state of denmark, so save it
   '---------------------------------------------------
   If fk_task <> 0 Then
      StaffTask!fk_task = fk_task
      staffTask!fk_staff_filed_task = fk_staff_filed_task
   Else
      '----------------------------------------------------------------------------------
      'If this is a new task, then current staff member = he who is doing the task filing
      '----------------------------------------------------------------------------------
      staffTask!fk_staff_filed_task = fk_staff
      staffTask!task = Trim(txtTask.text)
   End If
   If fk_staff_must_finalise <> 0 Then
      staffTask!fk_staff_must_finalise = fk_staff_must_finalise 
   Endif
   If fk_role_can_finalise <> 0 Then
      staffTask!fk_role_can_finalise = fk_role_can_finalise
   Endif
   If fk_component <> 0 Then
      TaskComponent!fk_component = fk_component
   Endif
   If fk_role_can_action <> 0 Then
      TaskComponent!fk_role = fk_role_can_action
   Else
      TaskComponent!fk_role = Null  'FIXME - FIX SAVE TO MAKE THIS BACK TO NULL WHEN SAVED
   Endif
   TaskComponent!fk_staff_filed = fk_staff_filed_component
   TaskComponent!details = Trim(txtTaskDetails.text)
   TaskComponent!fk_staff_allocated = fk_staff_allocated
   
   TaskComponent!fk_urgency = fk_urgency
   If fk_table_row <> 0 Then
      StaffTask!task = Trim(txtTask.text)
   Endif
   If TaskComponent!fk_staff_allocated = fk_staff Then
      If Staff_Member_Allocated_Task!fk_sex = const.cSexMale Then 
         sTaskComponentSummary = " to himself - " 'FIXME check sex of staff member
      Else
         sTaskComponentSummary = " to herself - "
      End If
   Else
      sTaskComponentSummary = " to " & txtStaffAllocated.text & " - "
   Endif
   sTaskComponentSummary &= Trim(txtTaskDetails.text) 
   '------------------------------------------------------------------------------------
   'Check if a consult has been created for the patient, if there is a patient of cours e
   '------------------------------------------------------------------------------------  
   If fk_patient <> 0 And bFinalised = False Then
      Consult_Check_Created(const.ConsultType_AuditNote, "Staff task allocated")
      TaskComponent!fk_consult = currentconsult.GetPK()
   End If
   If fk_document Then stafftask!fk_row = fk_document
   modDBConnect.BeginTrans()
   '-------------------------------------------------------------------------------------------
   'Each task gets a 'master entry' in clerical.tasks table, then components linked to the task
   '-------------------------------------------------------------------------------------------   
   StaffTask!fk_task = modStaffTasksDBI.StaffTasks_Save(staffTasks, pk_view_staff_task, StaffTask, fk_document)
   TaskComponent!fk_task = StaffTask!fk_task
   TaskComponent!fk_component = modStaffTasksDBI.StaffTasks_Components_Save(TasksComponents, fk_component, taskcomponent)
   modDBConnect.CommitTrans
   Reload()
   Return True    
   
End

Public Function Finalise() As Boolean
   '----------------------------------------------------------------------------------------
   'Task is being finalised, user has clicked the finalise button
   'Returns True if this was successfull   
   'Complex so probably not good but this is the logic
   'A Task  - has been allocated by someone to someone else (perhaps themselves)
   '        - at allocation time also allocated was the person who had final responsibility
   '          for marking it off fk_staff_must_finalise
   '        - Now this user, may just be finalising their own role
   '          if fk_staff<>fk-staff_must_finalise, so we need to shift the task off their
   '          task list, but leave it 'open' for fk_staff_must_finalise to finish
   '
   'Fixme currently only applies to a document
   'fixme ?does new cConsult belong here.
   'fixme won't work if not patient nor a doc
   'Transaction is started in the calling routine
   '---------------------------------------------------------------------------------------- 
   
   Dim StaffTask As New Collection 
   Dim TaskComponent As New Collection 
   Dim audit As New Collection 
   
   If Not fk_component Then Return 
   
   Message.Title = "Task Finalisation"
   If Bfinalised = False And IsNull(currentconsult) Then
      If Message.Question("It is usually advisable to explain how the task was finalised.\n\nAdd finalisation note?", "Yes", "No") = 1 Then
         note_new()
         bFinalised = True  '??bug check this
         Return
      End If   
   End If
  ' modDBConnect.BeginTrans() 
   If fk_table_row Then 
      audit!fk_row = fk_table_row
      If fk_patient <> 0 Then 
         If IsNull(currentconsult) Then 
            CurrentConsult = New CConsult(patient)
         Else   
            currentconsult.Set(const.ConsultType_AuditNote, "Finalising staff task")
         End If
         modAudit.MakeAudit(currentconsult, "task component finalised", "documents.documents", fk_document, const.cSection_StaffTasks, " by " & modDBConnect.currentUser_FullName())
      End If   
   End If 
   '-----------------------------
   'First, finalise the component
   '-----------------------------
   TaskComponent!fk_component = fk_component
   TaskComponent!fk_staff_completed = modDBConnect.currentUser!fk_staff
   TaskComponent!date_completed = Now()
   '----------------------------------------------------------------------------------------------
   'Is this the last component for the task? - Yes, then finalise the task in clerical.tasks table
   '----------------------------------------------------------------------------------------------
   If modStaffTasksDBI.StaffTasks_CheckOutstandingComponents(fk_task) = 1 Then
      '--------------------------------------------------------------------- 
      'If the person finalising this task/component= he/she who must do that 
      '---------------------------------------------------------------------
      If CurrentTaskComponent!fk_staff_must_finalise = modDBConnect.currentUser!fk_staff
         StaffTask!fk_task = fk_task
         StaffTask!fk_staff_finalised_task = modDBConnect.currentUser!fk_staff
         StaffTask!date_finalised = Now
         StaffTask!fk_task = modStaffTasksDBI.StaffTasks_Save(staffTasks, fk_task, stafftask, fk_document)
      End If
   End If
   '------------------------------------------
   'Mark the component finalised (last or not)
   '------------------------------------------
   TaskComponent!fk_component = modStaffTasksDBI.StaffTasks_Components_Save(TasksComponents, fk_component, taskcomponent)
   Return True
  ' modDBConnect.CommitTrans()
  
   
End

Public Sub Note_Add()
   '---------------------------------------------
   'User is adding a note to the current task
   'Saves the current note and refreshes the list
   '---------------------------------------------
   
   modDBConnect.BeginTrans()
   If Note_Save() Then                      'save to backend, commit transaction
       modDBConnect.CommitTrans()
   End If   
   cvwTaskNotes_Refresh()           'refresh the notes on tasks list
   note_new()                       'default to adding another note
   
End

Public Sub Note_New()
   '------------------------------------------------------------------------------------------------------
   'Allow uer to add notes to a component of the task - there may be only 1 component i.e the task itself
   'As each new note entered they are added to the list so that for audit-purposes, these
   'notes cannot be changed unless edited - in which case the users actions are recorded
   '-----------------------------------------------------------------------------------------------------
   
   txtStaffMakingNotes.text = CurrentUser
   txtNotes.Clear()
   txtNotes.SetFocus()
   fk_note = 0
   
End

Public Function Note_Save() As Boolean
   '---------------------------------------------------
   'Save a new note about this task complete transaction
   'returns true if not successfully saved
   '---------------------------------------------------
   
   Dim x As Integer
   Dim note As New Collection 
   Dim sSummary As String 
   Dim audit As New Collection 
   
   If Trim(txtNotes.text) = "" Then Return 
   If fk_component <> 0 Then
      note!fk_task_component = fk_component
   Else
      Message.info("Please select the task before attempting to add notes")
      Return 
   Endif
   If fk_patient <> 0 Then 
      Consult_Check_Created(const.ConsultType_AuditNote, "Staff task note")
   Endif
   sSummary = Trim(txtNotes.text)
   note!note = Trim(txtNotes.text)
   note!fk_staff_made_note = fk_staff
   note!date = Now
   modStaffTasksDBI.StaffTasks_Notes_Save(notes, pk_view_notes, Note, fk_note)
   Return True
End

Public Sub Note_Save_And_finalise()
   '------------------------------------------------------------------------
   'User has elected to save a note and finalise their involvement in a task
   '------------------------------------------------------------------------   
   modDBConnect.BeginTrans()
   If Note_Save() Then 
      If Finalise() Then
         modDBConnect.CommitTrans()
      End If   
   Else
      modDBConnect.RollBack()
   End If  
    Reload()
End

Public Sub EditAreaButtons_Click()
   
   Dim hctrl As Control
   Dim hTextbox As Textbox

   Select Case Last.tag
         
      Case "refresh"
         Tasks_Reload()
      Case "save and finalise"
         If Message.warning("Save and finalise?", "Yes", "No") = 2 Then Return 
         Note_Save_And_finalise
         
      Case "add note"
         Note_Add()                'save the note, commit transaction, refresh notes list, await next note
      Case "new note"
         note_new()                 're-set notes entry for new note
      Case "finalise"
         Finalise()
      Case "save"
         Save()
      Case "new staff task"
         
      Case "new task"
         Task_Patient_New()
      Case "pick date"
         If HBox_Calendar.Visible Then 
            HBox_Calendar.Visible = False
         Else
            For Each hctrl In Last.parent.children
               If hctrl Is TextBox Then
                  hTextbox = hctrl
                  DateChooser1.tag = hTextbox
                  Break
               End If
            Next
            With HBox_Calendar
               .top = Last.Parent.Parent.top + Last.Parent.Height
               .left = Last.Parent.left
               .Raise()
            End With     
            DateChooser1.Parent.Visible = True 
            DateChooser1.Parent.Raise 
         End If
   End Select
   
End

Public Sub Reload()
   '------------------------------------------------------
   'Show existing tasks for this document - can only be at
   '------------------------------------------------------
   
   bFinalised = False   
   cvwTasks_Reload()
   EditArea_Clear()
   Select Case Parent_Form
         
      Case "FDayBook"
         Task_Patient_New()
      Case "Inbox"
         Task_Patient_New()
   End Select
   
End

Public Sub cvwTasks_Reload()
   '-----------------------------------------------------
   'Loads all tasks currently allocated for this document
   '   pk serial NOT NULL,
   '   task text NOT NULL,
   '   fk_staff_filed_task integer NOT NULL,
   '   fk_staff_finalised_task integer,
   '   fk_schema integer,
   '   fk_table integer,
   '   fk_row integer,
   '   date_finalised date,
   '   deleted boolean DEFAULT false,
   '-----------------------------------------------------
   
   Dim x As Integer
   
   cvwStaffTasks.Clear()
   Select Case Parent_Form
      Case "FDayBook"
         Tasks_Reload()
      Case "Inbox"
         
         TasksComponents = modStaffTasksDBI.Tasks_For_Document_Get(fk_document)
         TasksComponents_Document_Reload()
   End Select
   
End

Public Sub TasksComponents_Document_Reload()
   '------------------------------------------------------------
   'Reloads and fills columnview of tasks just for this document
   'Only used when this form is embedded in FInbox
   '------------------------------------------------------------
   
   Dim x As Integer
   Dim component As Collection 
   Dim StaffTask As New Collection
   Dim y As Integer
   
   cvwStaffTasks.Clear()
   staffTasks = New Collection
   For Each component In TasksComponents
      x = component!pk_view  
      cvwStaffTasks.Add(x, 0) 'the unique key
      cvwStaffTasks[x][0] = component!task_type
      cvwStaffTasks[x][1] = component!staff_allocated_title & " " & component!staff_allocated_wholename
      cvwStaffTasks[x][2] = component!urgency
      cvwStaffTasks[x][3] = component!details
      If y = 0 Then
         'fixme why pk_view_staff_task etc in here
         'staffTasks = New Collection
         StaffTask!fk_task = component!fk_task
         fk_task = component!fk_task
         pk_view_staff_task = fk_task
         StaffTask!fk_staff_filed_task = component!fk_staff_filed_task
         fk_staff_filed_task = component!fk_staff_filed_task
         StaffTask!fk_staff_finalised_task = component!fk_staff_finalised_task
         StaffTask!fk_row = component!fk_row
         StaffTask!date_finalised = component!date_finalised
         staffTasks.Add(staffTask, fk_task)
         Inc y
      Endif
   Next  
   
End

Public Sub Tasks_Reload()
   '-----------------------------------------------------------------------------------------
   ' Reloads and fills columnview of uncompleted tasks just for a single staff member
   ' Each task = 1 component of the overall task which could have several
   ' staff members involved
   ' Interpreting these parameters of modDayBookDBI.Staff_Tasks_Get(...):
   '     fk_staff = key of current user
   '     0 = fk_staff_filed_task, though in DB this field is null, here 0=anyone
   '     keys
   '     True flag - ignore for the present
   '     completion status here is Not completed (const.cTaskCompletionNo)
   '     iTaskRestriction set by user clicking on rbTaskRestrict_User, or rbTaskRestrict_Role
   '     "ASC" means tasks shown oldest to newest
   '------------------------------------------------------------------------------------------
   
   Dim component As Collection
   Dim staffTask As Collection 
   Dim x As Integer
   Dim R As Result
   
   Task_Keys = New Collection
   StaffTasks = New Collection
   fk_table_row = 0
   
   Inc Application.Busy
   
   EditArea_Clear()
   cvwStaffTasks.Clear()
   currentconsult = Null
   
   TasksComponents = modDayBookDBI.Staff_Tasks_Get(fk_staff, 0, True, fk_table_row, const.cTaskCompletionNo, iTaskRestriction, "ASC")              'get uncompleted tasks
   
   If TasksComponents.count = 0 Then
      cvwStaffTasks.Add(x, 0)
      cvwStaffTasks[x][0] = "Nil pending" 
   Else
      For Each component In TasksComponents
         '--------------------------------------
         'Display the patients name (if present)
         '--------------------------------------
         If Not IsNull(component!patient_wholename) Then
            cvwStaffTasks.Add(x, 0)
            cvwStaffTasks[x][0] = Format(component!date_component_logged, "dd/mm/yyyy")
            cvwStaffTasks[x][1] = component!patient_wholename & "[" & component!patient_birthdate & "]" & " " & Trim(component!patient_street1 & " " & component!patient_street2) & " " & component!patient_town & " " & component!patient_postcode
            Task_Keys.Add(component!pk_view, x)
            Inc x
         End If
         '------------------------------------------------------------
         'indicate level of urgency and the details (if details exist)
         '------------------------------------------------------------  
         cvwStaffTasks.Add(x, 0)
         cvwStaffTasks[x][0] = ""
         cvwStaffTasks[x][1] = "          " & component!task_type & " - " & component!details
         Select Case component!fk_urgency
            Case const.UrgencyLevelRoutine
               cvwStaffTasks[x][2] &= " [Not urgent]"
            Case const.UrgencyLevelModerate
               cvwStaffTasks[x][2] &= " [Moderately urgent]" 
            Case const.UrgencyLevelUrgent
               cvwStaffTasks[x][2] &= "  [URGENT] "
         End Select
         Task_Keys.Add(component!pk, x)
         Inc x
         stafftask = New Collection
         stafftask!fk_task = component!fk_task
         StaffTask!fk_staff_filed_task = component!fk_staff_filed_task
         StaffTask!fk_schema = component!fk_schema
         StaffTask!fk_table = component!fk_table
         StaffTask!fk_row = component!fk_row
         StaffTask!date_finalised = component!date_finalised
         staffTasks.Add(staffTask, component!fk_task)
      Next   
      '   cvwStaffTasks.MoveFirst
      '  cvwStaffTasks.Item.Selected = True   
      '  cvwStaffTasks_Select()
   End If   
   Dec Application.Busy
   
End

Public Sub EditArea_Clear()
   '------------------------------------------------------------------
   'Clear the data entry area. This is not straight forward here
   'as the editing area is used differently in the two embedded forms
   'This needs cleaning up FIXME
   '-----------------------------------------------------------------
   
   Dim sTask As String = txtTask.Text
   
   bExit = True  
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Task)
   lblBirthdate.text = ""
   lblMobilePHone.text = ""
   lblHomePhone.text = ""
   cvwTaskNotes.Clear()
   ' cmbTaskType.Index = -1
   rbUrgencyRoutine.value = True 
   txtDateLogged.text = Format(Now, "dd/mm/yyyy")
   txtLoggedBy.text = CurrentUser
   fk_component = 0
   fk_staff_allocated = 0
   fk_staff_must_finalise = 0
   fk_tell = 0
   fk_urgency = 1
   fk_role_can_action = 0
   cmbRolesCanAction.index = -1
   cmbRolesCanFinalise.index = -1
   fk_staff_filed_component = modDBConnect.currentUser!fk_staff
   bPatientTask = False  
   txtTaskDetails.SetFocus
   EditArea_Notify_DataChange(False)
   HBox_Urgency.Enabled = True
   VBox_EditArea_Task.Enabled = True
   txtStaffAllocated.Enabled = True
   txtTaskDetails.Enabled = True
   HBox_Suburb.Enabled = True
   Hbox_Patient.Enabled = True
   Hbox_Street.Enabled = True  
   bFinalised = False  
   With lblTask
      .Foreground = Color.Blue
      .text = "Task Details"
   End With 
   '--------------------------------------------------------------------
   'If The multi-tabbed Document Actioning form is embedded in the Inbox
   'We need to not loose the fk_task, as one or more components will be
   'linked to this
   '---------------------------------------------------------------------
   Select Case Parent_Form
      Case "Inbox"
         txtPatient.text = CurrentConsult!patient!wholename
         lblBirthdate.text = Format(CurrentConsult!patient!birthdate, "dd/mm/yyyy")
         txtStreet.text = Trim(CurrentConsult!patient!street1 & " " & CurrentConsult!patient!street2)
         txtSuburb.text = CurrentConsult!patient!town & " " & CurrentConsult!patient!postcode 
         txtTask.text = sTask
      Case "FDayBook"
         fk_task = 0
   End Select
   VBox_Notes.padding = 0
   bExit = False  
   
End

Public Sub Staff_Find(txtbox As Textbox)
   '----------------------------------------------------------------
   'Show multiple staff members for selection from vwStaffInClinics
   'User can choose the person to allocate the task to
   '----------------------------------------------------------------
   
   Dim iaddress As Collection
   Dim iLastStaff_Member_pk As Integer
   Dim iAddressCount As Integer
   Dim x As Integer 
   
   If Trim(txtbox.text) = "" Then Return 
   '-------------------------------------------------------------------------
   'columns: 0=surname 1=firstname 2=sex 3=street 4= town/postcode
   '-------------------------------------------------------------------------
   With columnview1
      .Clear()
      .Columns.count = 3
      .Visible = False  
   End With 
   staff = modContactsDBI.Staff_Get(Trim(txtbox.text))
   iLastStaff_Member_pk = -1
   For Each Staff_Member_Allocated_Task In staff
      columnview1.Add(Staff_Member_Allocated_Task!pk_view, 0)    
      columnview1[Staff_Member_Allocated_Task!pk_view][0] = Staff_Member_Allocated_Task!title & " " & Staff_Member_Allocated_Task!wholename
      columnview1[Staff_Member_Allocated_Task!pk_view][1] = Staff_Member_Allocated_Task!occupation
      columnview1[Staff_Member_Allocated_Task!pk_view][2] = Staff_Member_Allocated_Task!branch
   Next   
   If Staff.count Then
      Columnview1.Visible = True 
      columnview1.Visible = True
      Columnview1.Raise
      columnview1.tag = txtbox
   End If
   
End

Public Sub Staff_To_Action_Select() 
   '-------------------------------------------------------------
   'User is Selecting staff member to allocate a document task to
   '-------------------------------------------------------------
   
   columnview1.MoveCurrent()                                      'set columnview to get the internal key
   pk_view_staff = columnview1.Item.Key
   Try txtStaffAllocated.text = staff[pk_view_staff]!title & " " & staff[pk_view_staff]!wholename
   Staff_Member_Allocated_Task = staff[pk_view_staff]
   fk_staff_allocated = staff[pk_view_staff]!fk_staff
   columnview1.Visible = False 
   If bPatientTask = True Then
      If fk_patient = 0 Then 
         txtPatient.SetFocus()   
      Else
         txtStaffToFinalise.SetFocus()
      End If   
   Else
      tbSave.SetFocus()
   End If   
   fk_role_can_action = Staff_Member_Allocated_Task!fk_role
   cmbRolesCanAction.index = -1
   
End

Public Sub Staff_To_Finalise_Select()
   '---------------------------------------------------
   'User is selecting a staff member to finalise a task
   '---------------------------------------------------
   
   columnview1.MoveCurrent()
   pk_view_staff = columnview1.Item.Key
   Try txtStaffToFinalise.text = staff[pk_view_staff]!title & " " & staff[pk_view_staff]!wholename
   Staff_Member_Must_Finalise_Task = staff[pk_view_staff]
   fk_staff_must_finalise = staff[pk_view_staff]!fk_staff
   columnview1.Visible = False 
   If bPatientTask = True Then
      If fk_patient = 0 Then 
         txtPatient.SetFocus()   
      Else
         tbSave.SetFocus()
      End If   
   Else
      tbSave.SetFocus()
   End If   
   fk_role_can_finalise = Staff_Member_Allocated_Task!fk_role
   cmbRolesCanFinalise.index = -1
   
End

Public Sub DateChooser1_Activate()
   
   Last.tag.text = Format(Last.value, "dd/mm/yyyy")
   HBox_Calendar.Visible = False  
   
End

Public Sub DateChooser1_LostFocus()
   
   DateChooser1.visible = False  
   
End

Public Sub ColumnView1_KeyPress()
   
   If key.code = key.return Then
      ColumnView1_DblClick()
   End If   
   
End

Public Sub ColumnView1_DblClick()
   '-------------------------------------------------------------------
   'Popup columnview is showing, action this to select staff or patient
   '-------------------------------------------------------------------
   
   Select Case Last.tag.tag
      Case "staff allocated"
         Staff_To_Action_Select()
      Case "staff to finalise"
         Staff_To_Finalise_Select() 
      Case "patient"
         Patient_Select()
   End Select
   Columnview1.Visible = False 
   
End

Public Sub EditArea_KeyRelease()
   '-------------------------------------------------------------------
   'As user types, on this event, find either patient, staff or 'tells'
   '-------------------------------------------------------------------
   
   Select Case Last.tag
      Case "patient"
         Patient_Find()
      Case "staff allocated", "staff to finalise"
         Staff_Find(Last)         'popup list of staff members
   End Select
   
End

Public Sub EditArea_KeyPress()
   
   If Bexit Then Return 
   
   If InStr(Last.text, "\n") Then
      Last.text = Replace$(Last.text, "\n", "")
   End If
   
   Select Case key.Code
      Case key.Down
         If columnview1.visible Then
            Columnview1.MoveFirst
            Columnview1.Item.Selected = True
            columnview1.SetFocus()
         End If
         
      Case key.Return, key.Tab
         Select Case Last.tag
            Case "task name"
               txtTaskDetails.SetFocus()
            Case "patient"
               txtTask.SetFocus()
            Case "staff allocated"
               txtStaffToFinalise.SetFocus()
            Case "staff to finalise" 
               tbSave.SetFocus()
            Case "details"
               columnview1.Visible = False  
               txtStaffAllocated.SetFocus()
            Case "notes"
               tbAddNotes.SetFocus()
         End Select
         
   End Select
   
End

Public Sub EditArea_GotFocus()
   
   Dim hctrl As Control
   Dim tb As Textbox
   Dim numcolumns As Integer
   
   If bexit = True Or Last.readonly = True Then Return 
   
   columnview1.Visible = False    'because the lost focus event on columnview dosn't work
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
      Case "staff allocated", "tell patient", "copy to", "staff to finalise"
         numcolumns = 1
         Goto SetPosition
      Case "patient"
         numcolumns = 5
         Goto SetPosition
      Case Else
         Return 
   End Select
   
   SetPosition:
   With Columnview1
      .height = 120
      For Each hctrl In Last.parent.children
         If hctrl Is TextBox Then
            .left = hctrl.Parent.Left + Last.parent.parent.padding + VBox_EditArea_Task.padding
            Break
         End If
      Next
      .Columns.count = numcolumns
      .width = txtTaskDetails.width
      .top = Last.parent.parent.top + Last.parent.height + 1
      .Raise
   End With
End

Public Sub EditArea_LostFocus()
   
   Last.background = Color.White
   Last.pos = 1
   If Last.tag = "tell patient" Or Last.tag = "details" Or Last.tag = "notes" Then
      Last.text = Replace$(Last.text, "\n", "")
   Endif
   
End

Public Sub EditArea_Change()
   
   If bexit Then Return
   Select Case Last.tag
      Case "tell patient"
         If Trim(Last.text) = "" Then
            fk_tell = 0
         Endif
      Case "staff allocated"
         If Trim(Last.text) = "" Then        
            fk_staff_allocated = 0                  
         Endif
      Case "staff to finalise"
         If Trim(Last.text) = "" Then        
            fk_staff_must_finalise = 0               
         Endif
         
      Case "notes"
         If Trim(Last.text) = "" Then
            VBox_Notes.Padding = 0
         Else
            VBox_Notes.Padding = 1
         Endif
   End Select  
   If Last.tag <> "staff making notes" And Last.tag <> "notes" Then
      EditArea_Notify_DataChange(True)
   End If
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   '----------------------------------------
   'Adds or removes padding around edit area
   'to indicate if data is changed and unsaved
   '--------------------------------------------------
   
   If flag Then
      Vbox_Task.Padding = 1
      tbSave.foreground = Color.red
   Else
      Vbox_Task.Padding = 0
      tbSave.foreground = Color.Black
   End If
   
End  

Public Sub Task_Patient_New()
   '------------------------------------------------------------------------
   'New task, clear edit area, reset flags  
   'If the task manager is embedded in the Inbox, the task is associated
   'with a document, and that document's tasks may have already been started
   'i.e have a task-component in the database
   '-------------------------------------------------------------------------
   Print fk_document
   EditArea_Clear()
   txtStaffAllocated.ReadOnly = False  
   txtTaskDetails.ReadOnly = False 
   txtPatient.Enabled = True  
   txtStreet.ReadOnly = True
   txtSuburb.ReadOnly = True 
   tbSave.Enabled = True
   bPatientTask = True  
   VBox_EditArea_Task.Enabled = True 
   HBox_StaffMember_Notes.Visible = False 
   HBox_StaffMember_AddingNotes.Visible = False 
   
   lblAddNewNote.Visible = False 
   cvwTaskNotes.background = Color.Background  
   lblNotesAllMembers.text = ""
   With lblTask
      .Foreground = Color.Red
      .text = "New Task"
   End With
   
   Select Case parent_form
      Case "FDayBook" 
         VBox_Notes.Background = Color.Background
         VBox_Notes.Visible = True  
         txtTask.ReadOnly = False
         txtPatient.SetFocus()
         Hbox_NotesButtons.Visible = True
         rbForPatient.value = True
         lblAddNewNote.Foreground = Color.ButtonBackground
         VBox_Notes.Enabled = False  
         Hbox_NotesButtons.Enabled = False 
         lblNotesAllMembers.Foreground = Color.ButtonBackground
         HBox_StaffMember_AddingNotes.Visible = False  
         HBox_StaffMember_Notes.Visible = False  
         VBox_Notes.Background = Color.ButtonBackground
         tbfinalise.Visible = False  
         tbAddNotes.Visible = False  
         tbNewNotes.Visible = False  
         tbSaveAndFinalise.Visible = False 
      Case "Inbox"
         txtTaskDetails.SetFocus()
         lblTaskHeading.text = "Tasks Allocated for This Document"
         Hbox_NotesButtons.Visible = False
   End Select
   
End

Public Sub Valid_Task() As Boolean
   '------------------------------------------------------------
   'Validates data for the task before saving, return true if ok
   '------------------------------------------------------------
   
   Dim sMsg As String
   
   sMsg = "You have started to allocate a staff task to this document, but it is not complete\n\n"
   Message.Title = "Allocating Staff Task"
   If Trim(txtTask.text) = "" Then
      txtTask.SetFocus()
      Return  
   Endif
   If Trim(txtTaskDetails.text) = "" Then
      txtTaskDetails.SetFocus()
      Return
   Endif

   If fk_staff_allocated = 0 Then                                                         'no specific task member is allocated
      If Trim(txtStaffAllocated.text) <> "" Then
         sMsg &= "Allocate to any Secretarial staff?"
         If Message.Question(sMsg, "Yes", "No") = 2 Then
            txtStaffAllocated.SetFocus()
            Return 
         End If
      Endif
   Endif
   If fk_staff_allocated = 0 And cmbRolesCanAction.index = -1 Then
      sMsg &= "Please select either a specific staff member, or a generic 'role' from the roles combo box"
      Message.info(sMsg)
      txtStaffAllocated.SetFocus
      Return
   End If  
   If fk_staff_must_finalise = 0 Then
      If fk_role_can_finalise = 0 Then     
         txtStaffToFinalise.SetFocus()
         Return
      End If   
   Endif
   
   Return True
   
End

Public Sub rbDegreeUrgency_Click()
   
   fk_urgency = Last.tag
   
End

Public Sub EditAreaButtons_KeyPress()
   
   Select Case key.Code
      Case key.return 
         Select Case Last.tag
            Case "save"
               Save()
            Case "new staff task"
               
            Case "new patient task"
               Task_Patient_New()
            Case "add notes"
               
         End Select
   End Select
   
End

Public Sub cvwTaskNotes_Refresh()
   '------------------------------------------
   'display any notes for this task like this:
   'Date Staff member Note about the task
   '------------------------------------------
   
   Dim x As Integer
   Dim note As New Collection 
   
   cvwTaskNotes.Clear()                                        'clear existing notes
   
   Notes = modDayBookDBI.Staff_Tasks_Get_Notes(fk_task)        'get notes for this task
   If Notes.count Then                                         'and display
      For Each note In notes
         x = note!pk_note
         cvwTaskNotes.Add(x, 0)
         cvwTaskNotes[x][0] = Format(note!date, "dd/mm/yyyy")
         cvwTaskNotes[x][1] = note!staff_made_note_title & " " & note!staff_made_note_wholename
         cvwTaskNotes[x][2] = note!note
      Next
   End If
   
End

Public Sub cvwStaffTasks_Menu()
   
   If Last.count = 0 Then Return 
   If iCurrentTaskComponent = 0 Then Return 
   mnuTasks.Popup()
   
End

Public Sub mnuTasks_Click()
   
   If iCurrentTaskComponent = 0 Then Return
   Select Case Last.tag
      Case "edit"
         Edit()
      Case "delete"
         Delete()
   End Select
   
End

Public Sub Edit()
   '--------------------------------------------------------
   'User has clicked on the cvStaffTasks list - edit one row
   '--------------------------------------------------------
   
   Dim sString As String
   Dim SelectedTask As Collection 
   
   EditArea_Clear()
   cvwStaffTasks.MoveCurrent
   pk_view_staff_task = cvwStaffTasks.Item.Key
   '-----------------------------------------------------------
   'If being edited in a different consultation to that created,
   'and staff who created <> person editing protest a little
   '------------------------------------------------------------
   SelectedTask = StaffTasks[pk_view_staff_task]
   If CurrentConsult.GetPK() <> SelectedTask!fk_consult Then
      If modDBConnect.currentUser!fk_staff <> SelectedTask!fk_staff_filed_task Then 
         sSTring = SelectedTask!title_staff_filed_task & " " & SelectedTask!wholename_staff_filed_task
         If Message.Warning("This task was created by:" & sString & "\n\nContinue - you will be audited.", "Yes", "No") = 2 Then Return 
      End If
   End If
   Display(SelectedTask)
   
End

Public Sub Display(CurrentTaskComponent As Collection)
   '------------------------------------------
   'Display the selected component of the task
   '------------------------------------------
   
   bExit = True
   txtTask.text = UCase(CurrentTaskComponent!task)
   txtTask.pos = 0
   txtPatient.text = CurrentTaskComponent!patient_wholename
   txtStreet.text = Trim(CurrentTaskComponent!patient_street1 & " " & CurrentTaskComponent!patient_street2)
   txtSuburb.text = CurrentTaskComponent!patient_town & " " & CurrentTaskComponent!patient_postcode
   lblBirthdate.text = Format(CurrentTaskComponent!patient_birthdate, "dd/mm/yyyy")
   fk_task = CurrentTaskComponent!fk_task
   pk_view_staff_task = CurrentTaskComponent!pk_view
   
   Try fk_staff_allocated = CurrentTaskComponent!fk_staff_allocated  'could be null - allocated to anyone
   Try fk_table_row = CurrentTaskComponent!fk_row
   Try fk_document = CurrentTaskComponent!fk_row
   Try fk_staff_filed_task = CurrentTaskComponent!fk_staff_filed_task
   Try fk_staff_must_finalise = CurrentTaskComponent!fk_staff_must_finalise
   Try fk_role_can_finalise = CurrentTaskComponent!fk_role_can_finalise
   fk_component = CurrentTaskComponent!fk_component
   txtLoggedBy.text = CurrentTaskComponent!staff_filed_task_title & " " & CurrentTaskComponent!staff_filed_task_wholename
   txtTaskDetails.text = CurrentTaskComponent!details
   txtTaskDetails.pos = 0
   txtDateLogged.text = Format(CurrentTaskComponent!date_component_logged)
   txtStaffAllocated.text = CurrentTaskComponent!staff_allocated_title & " " & CurrentTaskComponent!staff_allocated_wholename
   txtStaffToFinalise.text = CurrentTaskComponent!staff_must_finalise_task_title & " " & CurrentTaskComponent!staff_must_finalise_task_wholename
   If Trim(txtStaffAllocated.text) = "" Then txtStaffAllocated.text = "Anyone"
   fk_urgency = CurrentTaskComponent!fk_urgency
   Select Case CurrentTaskComponent!fk_urgency
      Case const.UrgencyLevelRoutine
         rbUrgencyRoutine.Value = True 
      Case const.UrgencyLevelModerate
         rbUrgencyModerate.value = True
      Case const.UrgencyLevelUrgent
         rbUrgencyUrgent.value = True 
   End Select
   If Parent_Form = "FDayBook" Then
      HBox_StaffMember_Notes.Visible = True 
      HBox_StaffMember_AddingNotes.Visible = True 
      VBox_Notes.Background = Color.Red
      lblAddNewNote.Visible = True 
      lblFinaliseTask.Foreground = Color.blue
      cvwTaskNotes.background = Color.white
      cvwTaskNotes.Visible = True 
      cvwTaskNotes_Refresh() 'display any previously entered notes for this task
      lblNotesAllMembers.text = "Notes All Staff"
      lblNotesAllMembers.Foreground = Color.Black
      HBox_StaffMember_AddingNotes.Visible = True  
      HBox_StaffMember_Notes.Visible = True  
      VBox_Notes.Background = Color.ButtonBackground
      VBox_Notes.Enabled = True  
      Hbox_NotesButtons.Enabled = True 
      lblAddNewNote.Foreground = Color.blue
      tbfinalise.Visible = True  
      tbAddNotes.Visible = True  
      tbNewNotes.Visible = True  
      tbSaveAndFinalise.Visible = True       
      note_new()
   Endif
   
   bExit = False   
   
End 

Public Sub Display_old(SelectedTask As Collection)
   '------------------------------------------
   'Display the selected component of the task
   '------------------------------------------
   
   bExit = True
   txtTask.text = UCase(SelectedTask!task)
   txtTask.pos = 0
   txtPatient.text = SelectedTask!patient_wholename
   txtStreet.text = Trim(SelectedTask!patient_street1 & " " & SelectedTask!patient_street2)
   txtSuburb.text = SelectedTask!patient_town & " " & SelectedTask!patient_postcode
   lblBirthdate.text = Format(SelectedTask!patient_birthdate, "dd/mm/yyyy")
   fk_task = SelectedTask!fk_task
   pk_view_staff_task = SelectedTask!pk_view
   
   Try fk_staff_allocated = SelectedTask!fk_staff_allocated  'could be null - allocated to anyone
   Try fk_table_row = SelectedTask!fk_row
   Try fk_document = SelectedTask!fk_row
   Try fk_staff_filed_task = SelectedTask!fk_staff_filed_task
   fk_component = SelectedTask!fk_component
   txtLoggedBy.text = SelectedTask!staff_filed_task_title & " " & SelectedTask!staff_filed_task_wholename
   txtTaskDetails.text = SelectedTask!details
   txtTaskDetails.pos = 0
   txtDateLogged.text = Format(SelectedTask!date_component_logged)
   txtStaffAllocated.text = SelectedTask!staff_allocated_title & " " & SelectedTask!staff_allocated_wholename
   If Trim(txtStaffAllocated.text) = "" Then txtStaffAllocated.text = "Anyone"
   fk_urgency = SelectedTask!fk_urgency
   Select Case SelectedTask!fk_urgency
      Case const.UrgencyLevelRoutine
         rbUrgencyRoutine.Value = True 
      Case const.UrgencyLevelModerate
         rbUrgencyModerate.value = True
      Case const.UrgencyLevelUrgent
         rbUrgencyUrgent.value = True 
   End Select
   If Parent_Form = "FDayBook" Then
      HBox_StaffMember_Notes.Visible = True 
      HBox_StaffMember_AddingNotes.Visible = True 
      VBox_Notes.Background = Color.Red
      lblAddNewNote.Visible = True 
      lblFinaliseTask.Foreground = Color.blue
      cvwTaskNotes.background = Color.white
      cvwTaskNotes.Visible = True 
      cvwTaskNotes_Refresh() 'display any previously entered notes for this task
      lblNotesAllMembers.text = "Notes All Staff"
      lblNotesAllMembers.Foreground = Color.Black
      HBox_StaffMember_AddingNotes.Visible = True  
      HBox_StaffMember_Notes.Visible = True  
      VBox_Notes.Background = Color.ButtonBackground
      VBox_Notes.Enabled = True  
      Hbox_NotesButtons.Enabled = True 
      lblAddNewNote.Foreground = Color.blue
      tbfinalise.Visible = True  
      tbAddNotes.Visible = True  
      tbNewNotes.Visible = True  
      tbSaveAndFinalise.Visible = True       
      note_new()
   Endif
   
   bExit = False   
   
End 

Public Sub Delete()   
   '------------------------------------------------------------------------------------------------
   'Marks a task and or component as Deleted with an Audit Trail
   'FIXME: only allow this to be done by the person with final responsibility - not yet implemented
   '------------------------------------------------------------------------------------------------  
   
   Dim iComponentCount As Integer
   Dim sString As String
   
   If Not fk_component Then Return 
   
   Message.Title = "Delete a Task or Component"
   
   sSTring = "Patient       : " & CurrentTaskComponent!patient_wholename
   sSTring &= "\nRelated to  : " & CurrentTaskComponent!task 
   sString &= "\nComponent: " & CurrentTaskComponent!details
   sString &= "\n\nAre you sure you wish to delete this component?"
   
   If Message.Question(sString, "Yes", "No") = 2 Then
      Return
   End If
   modDBConnect.BeginTrans()
   
   If IsNull(currentconsult) Then 
      CurrentConsult = New CConsult(patient)
   End If     
   If modAudit.MakeAudit(currentconsult, "mark deleted", "clerical.tasks", fk_task, const.cSection_StaffTasks, " by " & modDBConnect.currentUser_FullName()) Then 
       modDBConnect.update("clerical.tasks", Null, ["pk": fk_task, "deleted": True])
      modDBConnect.update("clerical.task_components", Null, ["pk": fk_component, "deleted": True])
      fk_task_deleted = fk_task
      fk_tasks_Components_keys_deleted = New Collection
      fk_tasks_Components_keys_deleted.Add(fk_component, iComponentCount)
      modDBConnect.CommitTrans()
      Tasks_Reload()
   Else
      Message.Info("Deletion of the task was cancelled by the user")
      modDBConnect.RollBack()
   End If   
   
End

Public Sub cvwStaffTasks_Select()
   '---------------------------------------------------------
   'User has clicked on one of the tasks listed in their list
   '---------------------------------------------------------
   
   Dim p As Collection 
   
   EditArea_Clear()
   
   Select Case Parent_Form
      Case "FDayBook"
         Vbox_Task.Enabled = False    
         cvwStaffTasks.movecurrent()                                                'set key
         Try iCurrentTaskComponent = Task_Keys[cvwStaffTasks.item.key]              'but some lines don't match a task key
         Try fk_component = Task_Keys[cvwStaffTasks.item.key]
         If Not Error Then 
            CurrentTaskComponent = TasksComponents[Task_Keys[cvwStaffTasks.item.key]]
            If CurrentTaskComponent!fk_patient Then
               '---------------------------------------------------------------------------------
               'DO NOT DELETE THIS. THOUGH WE HAVE fk_patient, and string of wholename and title
               'to create a consult for this patient (with type = not present) then we need
               'a patient collection for cConsult
               '--------------------------------------------------------------------------------- 
               For Each p In modContactsDBI.Patient_Get_Using_PK(CurrentTaskComponent!fk_patient)
                  patient = p
                  fk_patient = CurrentTaskComponent!fk_patient
                  comms = modContactsDBI.person_comms_get(p!fk_person)
                  For Each comm In comms
                     If comm!fk_type = const.CommModalityHome Then
                        lblHomePhone.text = comm!value
                     Endif
                     If comm!fk_type = const.CommModalityMobile Then
                        lblMobilePHone.text = comm!value
                     Endif
                  Next
               Next 
            End If  
            'Now create a CurrentTask collection - needed if the task is later saved
            'e.g if completing a task component, and it is the last component   
            Display(CurrentTaskComponent)
            EditArea_Notify_DataChange(False)
            Vbox_Task.Enabled = True 
            txtNotes.setFocus()
         Else
            iCurrentTaskComponent = 0 '?no longer needed
            fk_component = 0
         End If 
         ' cvwAllTasks_Refresh()                     'show other staff members involved
         ' Show_Document(CurrentTaskComponent!fk_row)
   End Select
   
End

Public Sub cvwAllTasks_Refresh()
   '-----------------------------------------------------------
   'Show all other staff members involved in this patients task
   '-----------------------------------------------------------
   
   Dim task As Collection 
   Dim x As Integer
   
   cvwAllTasks.Clear()
   If fk_table_row = 0 Then Return 
   Inc Application.Busy
   AllStaffInvolved = modDayBookDBI.Staff_Tasks_Get_Associated(fk_task, fk_staff)
   If AllStaffInvolved.count = 0 Then
      cvwAllTasks.Add(x, 0)
      cvwAllTasks[x][0] = ""
      cvwAllTasks[x][1] = "Nil other members involved" 
   Else
      For Each Task In AllStaffInvolved
         
         cvwAllTasks.Add(x, 0)
         cvwAllTasks[x][0] = task!staff_allocated_title & " " & task!staff_allocated_wholename
         Select Case Task!fk_urgency
            Case const.UrgencyLevelRoutine
               cvwAllTasks[x][1] = "Not urgent: "
            Case const.UrgencyLevelModerate
               cvwAllTasks[x][1] = " Moderately urgent: " 
            Case const.UrgencyLevelUrgent
               cvwAllTasks[x][1] = "URGENT: "
         End Select
         If Not IsNull(task!date_component_completed) Then
            cvwAllTasks[x][1] &= "[DONE-" & Format(task!date_component_completed, "dd/mm/yyyy") & "] "
         Endif
         cvwAllTasks[x][1] &= Task!task_type
         Inc x
         If Not IsNull(Task!tell_patient) Then
            cvwAllTasks.Add(x, 0)
            cvwAllTasks[x][0] = ""
            cvwAllTasks[x][1] &= "Tell patient: " & Task!tell_patient
            Inc x
         Endif
      Next   
   End If   
   Dec Application.Busy 
   
End

Public Sub timer1_Timer()
   '-------------------------------------------------------------------------------------
   'Called on _new, this delay allows gui to show before loading, visually more pleasing
   'Loads the defaults for the sending entities
   're-loads inbox with patients/documents
   'Otherwise except for init(0 this routine is not used
   'see  cvwTasks_Reload()
   '------------------------------------------------------------------------------------
   
   Return 
   If Parent_Form = "Inbox" Then Return 
   timer1.Stop()
   Tasks_Reload()
   timer1.Delay = 100000 're-set the delay to something longer
   timer1.start()
   
End

Public Sub Patient_Find()
   '-----------------------
   'Show multiple patients for selection
   'In this routine we:
   '       : loop through the data_persons recordset 
   '       : for each  of these, then fetch 1-n addresses
   '       : if one address, put in column 3,4
   '       : ie same row as name,surname,sex,dob
   '       : if > one address put on next row, without name,surname,sex,dob
   '-------------------------------------------------------------------------
   
   Dim iaddress As Collection
   Dim iLastPatient_pk As Integer
   Dim iAddressCount As Integer
   Dim x As Integer 
   
   If Trim(txtPatient.text) = "" Then Return 
   Allpatients = modContactsDBI.patients_get_firstname_surname(txtPatient.text)
   Allpatients.Remove("sql_in_english")       'not used in this context
   '-------------------------------------------------------------------------
   'columns: 0=surname 1=firstname 2=sex 3=street 4= town/postcode
   '-------------------------------------------------------------------------
   columnview1.Clear()
   iLastPatient_pk = -1
   For Each patient In allpatients   
      If patient!fk_patient <> iLastPatient_pk Then
         iLastPatient_pk = patient!fk_patient
         iAddressCount = 0
         columnview1.Add(patient!pk_view, 0)    
         columnview1[patient!pk_view][0] = patient!surname  
         columnview1[patient!pk_view][1] = patient!firstname
         columnview1[patient!pk_view][2] = patient!sex
         '----------------------------------------------------------------------
         'For the first address put it on the same row as surname/name and coms
         '---------------------------------------------------------------------
         columnview1[patient!pk_view][3] = Trim(patient!street1 & " " & patient!street2)
         columnview1[patient!pk_view][4] = Format(patient!birthdate, "dd/mm/yyyy")
         columnview1[patient!pk_view][5] = patient!town & " " & patient!postcode
      Else
         '---------------------------------------------
         'patient is the same, just add the address
         columnview1.Add(patient!pk_view, 0)
         columnview1[patient!pk_view][0] = "" 
         columnview1[patient!pk_view][1] = ""
         columnview1[patient!pk_view][2] = ""
         columnview1[patient!pk_view][3] = Trim(patient!street1 & " " & patient!street2)
         columnview1[patient!pk_view][4] = Format(patient!birthdate, "dd/mm/yyyy")
         columnview1[patient!pk_view][5] = patient!town & " " & patient!postcode
      End If
   Next   
   If allpatients.count Then
      Columnview1.Visible = True 
      columnview1.Visible = True
      Columnview1.Raise
      columnview1.tag = txtPatient
   Else
      Columnview1.Visible = False  
   End If
   
End

Public Sub Patient_Select()
   '-----------------------------------------------------
   'User is selecting  a patient  from the columnview
   '-----------------------------------------------------
   
   columnview1.MoveCurrent()
   pk_view = columnview1.Item.Key
   Try txtPatient.text = Allpatients[pk_view]!firstname & " " & Allpatients[pk_view]!surname
   Try lblBirthdate.text = Format(Allpatients[pk_view]!birthdate, "dd/mm/yyyy")
   txtStreet.text = Trim(Allpatients[pk_view]!street1 & " " & Allpatients[pk_view]!street2)
   txtSuburb.text = Allpatients[pk_view]!town & " " & Allpatients[pk_view]!postcode
   patient = Allpatients[pk_view]
   fk_patient = Allpatients[pk_view]!fk_patient
   columnview1.Visible = False 
   With txtPatient
      .Foreground = Color.Black
      .Border = False  
      .Font.Bold = False  
   End With
   With lblSearchFor
      .text = "Patient"
      .Font.bold = False
      .Foreground = Color.Black
   End With 
   Consult_Check_Created(const.ConsultType_AuditNote, "New Staff Task for patient")
   If Parent_Form = "FDayBook" And bPatientTask = True Then
      txtTask.SetFocus()
   Endif
   
End

Public Sub Consult_Check_Created(iconsult_type As Integer, summary As String)
   'probably should live elsewhere ?cConsult and pass parameters
   
   If IsNull(currentconsult) Then   
      CurrentConsult = New CConsult(patient)
   End If
   currentconsult.Set(iconsult_type, summary)
   
End

Public Sub Form_KeyPress()
   
   If key.code = Key.Esc Then
      columnview1.Visible = False 
   Endif
   
End

Public Sub rbAllocateToMe_Click()
   ' 
   ' If Last.value = True Then
   '    txtStaffAllocated.text = CurrentUser
   '    fk_staff_allocated = fk_staff
   ' Else
   '    txtStaffAllocated.text = ""
   '    fk_staff_allocated = 0
   ' End If 
   
End

' Public Sub cmbTaskType_Click()
'    If txtTask.text = "" Then
'       txtTask.text = cmbTaskType.text
'    Endif
'    
' End

Public Sub rbWhoFor_Click()
   
   Dim flag As Boolean
   'Task_Patient_New()
   Select Case Last.tag
      Case "patient"
         Flag = True
         
      Case Else
         Flag = False  
         txtPatient.Clear()
         txtStreet.Clear()
         txtSuburb.Clear()
         lblBirthdate.Text = ""
         lblHomePhone.Text = ""
         lblMobilePHone.Text = ""
   End Select
   Hbox_Patient.Enabled = Flag
   Hbox_Street.Enabled = Flag
   HBox_Suburb.Enabled = Flag
   
End

Public Sub Vbox_Task_Leave()
   
   '  timer1.STart
End

Public Sub Vbox_Task_Enter()
   
   '  timer1.Stop
   
End

Public Sub Form_Leave()
   
   ' If Parent_Form <> "Inbox" Then timer1.stop
   
End

Public Sub rbTaskRestriction_Click()
   
   If Bexit Then Return 
   iTaskRestriction = Last.tag
   Select Case Last.tag
      Case const.cTaskRestriction_user 
         lblTaskHeading.text = "My Tasks"
      Case const.cTaskRestriction_role
         lblTaskHeading.text = "Tasks for me and others of role: " & RoleCanAction
   End Select
   Tasks_Reload()
   
End

Public Sub cmbRolesCanFinalise_GotFocus()
   
   columnview1.Visible = False    'because the lost focus event on columnview dosn't work
   
End

Public Sub cmbRolesCanFinalise_Click()
   
   txtStaffToFinalise.text = ""  'sets fk_staff_allocated to 0
   fk_role_can_finalise = RolesCanAction[Last.index]!pk_role
   
End

Public Sub cmbRolesCanAction_Click()
   
   txtStaffAllocated.text = ""  'sets fk_staff_allocated to 0
   fk_role_can_action = RolesCanAction[Last.index]!pk_role
   
End

Public Sub cmbRolesCanAction_GotFocus()
   
   columnview1.Visible = False    'because the lost focus event on columnview dosn't work
   
End

Public Sub Show_Document(fk_document As Integer)
   
   Dim document As Collection
   
   If bExit Then Return 
   document = modArchiveDocumentsDBI.Document_Get_By_pk(fk_document)
   Select Case File.Ext(document!source_file)
      Case "pdf"
         Form_html_viewer.Visible = False
         With form_Pdf
            .Visible = True   
            .Load_PDF(modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/documents/") &/ document!source_file)
         End With
         
      Case "png", "bmp", "jpeg", "jpg", "tiff"
         
      Case Else
         Form_PDF.Visible = False
         With Form_html_viewer
            .WebView1.HTML = document!html 
            .Visible = True
         End With
         
   End Select
   
End
