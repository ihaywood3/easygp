' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

' ------------------------------------------------------------------------------
' PURPOSE - view staff tasks/audit trail
' BUGS      many, work in progress
'------------------------------------------------------------------------------
Private FTask As FStaffTasks
Private AllocatedTasks As Collection
Private allocatedTask As Collection
Private CompletedTasks As Collection
Private CompletedTask As Collection
Private iTaskFor As Integer                         'points to category of current task
Private cTaskForPatient As Integer = 0
Private cTaskBetweenStaff As Integer = 1
Private ColumnHeadings As String[] = ["Patient", "Staff Member"]
Private view_mode As String
Private FAuditViewer As FHtmlViewer
Private obs As Observer

Public Sub Init(mode As String)

   lblmeasure.text = ""
   view_mode = mode 'view allocated to others "allocated" or "completed"
   With FAuditViewer = New FHtmlViewer(Vbox_Main)
      .visible = False
   End With
   obs = New Observer(FAuditViewer.tbWebBrowserClose) As "AuditViewer"
   Reload()

End

Public Sub Reload()

   Select Case view_mode
      Case "allocated"
         Tasks_Allocated_Reload()
      Case "critical"
         HBox_critical.visible = True
         rbCriticalIMustDo.value = True 'triggers a reload
         Tasks_Allocated_Reload()
      Case "completed"
         chkTaskStatus.Visible = False   'false
         HBox_Key.Visible = False
         Tasks_Completed_Refresh()

   End Select

End

Public Sub AuditViewer_Click()

   Stop Event
   FAuditViewer.Visible = False
   Vbox_Tasks.Visible = True

End

Public Sub Tasks_Allocated_Reload()
   '---------------------------------------------------------------------
   'Reloads and fills columnview of tasks that current user has allocated
   'to other staff members, so we can keep tabs on whats done/not done
   '---------------------------------------------------------------------

   Dim staffTask As Collection
   Dim x As Integer
   Dim R As Result
   Dim pic_task_completed As Picture = Picture["icons/12/green_dot.png"]
   Dim pic_task_incomplete As Picture = Picture["icons/12/red_dot.png"]
   Dim task_status As Integer = const.cTaskCompletionAny

   Inc Application.Busy
   cvwTasks.Clear()
   With cvwTasks      'column0 used for graphic
      .Clear
      .Columns.count = 8
      .Columns[1].text = "Logged"
      .Columns[2].text = "Responsible"
      .Columns[3].text = "Re:"
      .Columns[4].text = ""  'related to column
      .Columns[5].text = "Details"
      .Columns[6].text = "Staff to Finalise"
      .Columns[7].text = "Finalised By"
   End With
   '------------------------------------------------
   'Get tasks that this user has allocated to others
   'fk_staff_allocated_task= 0 means tasks I've allocated to everyone
   'modDBConnect.currentUser!fk_staff is the users logged on doing this
   ' bfk_staff_only = True '?needed anymore
   '0,0,0 = fk_schema, fk_table, fk_row FIXME THIS WILL GO WHEN IAN FINISHES AUDIT.
   'COMPLETED = 2 means show me tasks either completed or not completed FIXME NOT HARD CODED
   'DESC show newest to oldest

   '------------------------------------------------
   If chkTaskStatus.value = True Then task_status = const.cTaskCompletionNo
   Select Case view_mode
      Case "allocated"
         ' Params for modDaybookDBI.Staff_Tasks_Get(
         ' fk_staff_allocated_task As Integer,  = the person to whom the task was allocated
         ' fk_staff_filed_task As Integer,      = the person who filed the task
         ' bfk_staff_only As Boolean,
         ' Optional fk_row As Integer = 0,
         ' Optional completed As Integer = const.cTaskCompletionNo,
         ' Optional iTaskRestriction As Integer = const.cTaskRestriction_User,
         ' Optional sort_order As String = "ASC",
         '  Optional filter_patient_name As String = "") As Collection
         AllocatedTasks = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Staff_Tasks_Get(0, modDBConnect.currentUser!fk_staff, True, 0, task_status, const.cTaskRestriction_User, "DESC")) 'get uncompleted tasks
      Case "critical"
         ' Staff_Tasks_Get_Critical(fk_staff_allocated As Integer, fk_staff_filed_task As Integer, Optional bcompleted As Boolean = False) As Collection
         If rbCriticalIMustDo.value = True Then
            AllocatedTasks = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Staff_Tasks_Get_Critical(modDBConnect.currentUser!fk_staff, 0, False))   'show tasks for me which are critical
         Else
            AllocatedTasks = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Staff_Tasks_Get_Critical(0, modDBConnect.currentUser!fk_staff, False))  'show tasks I filed which are critical
         End If
   End Select
   If AllocatedTasks.count = 0 Then
      cvwTasks.Add(x, 0)
      cvwTasks[x][0] = "None Allocated"
   Else
      For Each AllocatedTask In AllocatedTasks
         '--------------------------------------
         'Display the patients name (if present)
         '--------------------------------------
         If IsNull(AllocatedTask!date_finalised) Then
            cvwTasks.Add(x, "", pic_task_incomplete)
         Else
            cvwTasks.Add(x, "", pic_task_completed)
         Endif
         cvwTasks[x][1] = Format(allocatedTask!date_component_logged, "dd/mm/yyyy") & "  "
         cvwTasks[x][2] = AllocatedTask!staff_allocated_wholename & "  "
         If IsNull(AllocatedTask!patient_wholename) Then
            cvwTasks[x][3] = "Staff Task    "
         Else
            cvwTasks[x][3] = Trim(AllocatedTask!patient_wholename) & "  "
         End If
         cvwTasks[x][4] = AllocatedTask!related_to & "           "
         If AllocatedTask!verify_completed Then
            cvwTasks[x][5] = "** CRITICAL ** "
         Endif
         cvwTasks[x][5] &= AllocatedTask!details
         cvwTasks[x][6] = AllocatedTask!staff_must_finalise_task_wholename & "       "
         If IsNull(AllocatedTask!date_finalised) Then
            cvwTasks[x][7] = " Pending   "
         Else
            cvwTasks[x][7] = " Complete: " & AllocatedTask!staff_finalised_task_title & " " & AllocatedTask!staff_finalised_task_wholename
         Endif
         Inc x
      Next
   End If
   lblmeasure.font = cvwTasks.font
   modUtil.Columnview_Columns_Set_Size(cvwTasks, lblmeasure)
   Dec Application.Busy

End

Public Sub Tasks_Completed_Refresh()
   '---------------------------------------------------
   'Displays a list of completed tasks for current user
   '---------------------------------------------------

   Dim x As Integer
   Dim task As Collection
   Dim notes As Collection
   Dim note As Collection
   Dim document As Collection
   Dim bNotedDocument As Boolean

   Return
   lblmeasure.font = cvwTasks.Font
   CompletedTasks = modUtil.Copy_Collection_Keyed_Sequentially(modDayBookDBI.Staff_Tasks_Get_For_User(modDBConnect.currentUser!fk_staff, True))
   With cvwTasks
      .Clear
      .Columns.count = 7
      .Columns[0].text = "Logged"
      .Columns[1].text = "Re:"
      .Columns[2].text = "" 'the Related To column
      .Columns[3].text = "Details"
      .Columns[4].text = "Notes"
      .Columns[5].text = "Notes By"
      .Columns[6].text = "Finalised By"
   End With
   If CompletedTasks.count Then
      For Each task In CompletedTasks
         cvwTasks.Add(x, 0)
         cvwTasks[x][0] = Format(task!date_component_logged, "dd/mm/yyyy")
         If Not IsNull(task!patient_wholename) Then
            cvwTasks[x][1] = Task!patient_wholename & "   "
         Else
            cvwTasks[x][1] = "Staff Task" & "   "
         Endif
         cvwTasks[x][2] = Task!related_to & "  "
         If Not IsNull(task!fk_row) And bNotedDocument = False Then
            'currently only documents are linked, so don't care what the fk is, this may change
            document = modInboxDBI.Document_Get(task!fk_row)
            If Not IsNull(document) Then
               '   cvwTasks.Add(x, 0)
               ' cvwTasks[x][0] = ""
               ' cvwTasks[x][1] = ""
               cvwTasks[x][3] = "Doc: " & document!msh_sending_entity & " " & document!tag_user
               Inc x
               bNotedDocument = True
               cvwTasks.Add(x, 0)
               cvwTasks[x][0] = ""
               cvwTasks[x][1] = ""

               cvwTasks[x][3] = Task!details & " "
            Endif
         Else
            cvwTasks[x][2] = Task!related_to & "  "
            cvwTasks[x][3] = Task!details & " "
         End If
         Inc x

         '-------------------------------
         'Now get the notes for that task
         '--------------------------------
         notes = modDayBookDBI.Staff_Tasks_Get_Notes(task!fk_task)
         For Each note In notes
            cvwTasks.Add(x, 0)
            cvwTasks[x][0] = ""
            cvwTasks[x][1] = ""
            cvwTasks[x][4] = note!note & "  "
            cvwTasks[x][5] = note!staff_made_note_title & " " & note!staff_made_note_wholename
            Inc x
         Next
         cvwTasks.Add(x, 0)
         cvwTasks[x][0] = ""
         cvwTasks[x][1] = ""
         Try cvwTasks[x][6] = task!staff_finalised_task_title & " " & task!staff_finalised_task_wholename & " on " & Format(task!date_finalised, "dd/mm/yyyy")

         Inc x
      Next
   Endif
   modUtil.Columnview_Columns_Set_Size(cvwTasks, lblmeasure)

End

Public Sub rbTasks_Click()
   '------------------------------------------------------------------------------
   'The tag property of radiobutton = either cTaskBetweenStaff or cTaskForPatient
   '-----------------------------------------------------------------------------
   '
   ' iTaskFor = Last.tag
   ' lblFilter.text = "Filter by " & ColumnHeadings[Last.tag] & "    " 'label is auto-resize
   ' cvwCompletedTasks.Columns[1].text = ColumnHeadings[iTaskFor]

End

Public Sub txtFilter_GotFocus()

   Last.BackGround = Color.rgb(95, 255, 175)

End

Public Sub txtFilter_LostFocus()

   Last.BackGround = Color.White

End

Public Sub tbRefreshAllocatedTasks_Click()

End

Public Sub chkTaskStatus_Click()

   If chkTaskStatus.value = True Then  'only outstanding tasks

   Else                                'show all tasks

   Endif
   Select Case view_mode
      Case "allocated"
   End Select
   Tasks_Allocated_ReLoad()

End

Public Sub cvwTasks_Click()
   '------------------------------------------------
   'User has clicked on a task, show its audit trail
   '------------------------------------------------

   Return
   If Not cvwTasks.count Then Return
   cvwTasks.MoveCurrent()                                      'setkey
   FAuditViewer.WebView1.HTML = modArchiveDocumentsDBI.Staff_Tasks_Document_Audit_Trail(AllocatedTasks[cvwTasks.Item.key]!fk_row)
   Vbox_Tasks.visible = False
   FAuditViewer.Visible = True

End

Public Sub txtTimePeriod_KeyPress()

End

Public Function EditArea_TxtBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean

   Dim bKeyValid As Boolean

   Select Case tag
      Case "display period", "see specific person", "additional notes", "forms"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
   End Select
   Return bKeyValid

End

Public Sub EditArea_txtBox_KeyPress()

   Dim bKeyValid As Boolean

   bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code, Last.tag)
   If bkeyvalid = False Then
      Stop Event
      Return
   End If

End

Public Sub EditArea_txtBox_GotFocus()

   Last.BackGround = Color.rgb(95, 255, 175)

End

Public Sub EditArea_TxtBox_LostFocus()

   Last.background = Color.White

End

Public Sub rbCritical_Click()

   Tasks_Allocated_Reload()

End
