' Gambas module file

Public Function StaffTasks_Get_TaskTypes() As Collection 
   
   Return modDBConnect.exec_query_collection("Select * from clerical.lu_task_types order by type")
   
End

Public Sub StaffTasks_Save(olddata As Collection, pk_view As Variant, newdata As Collection, Optional fk_document As Variant) As Variant
   '-----------------------------------------------------
   'Saves a task associated with the filing of a document
   'Eg ring patient
   '------------------------------------------------------

   Dim ST As New Collection
   If Not IsNull(fk_document) Then ST!fk_document = fk_document
   If IsNull(newdata!fk_task) Then
      '--------------------------------------------------------------------------
      'New task for this document? insert in tasks table and link to the document
      '--------------------------------------------------------------------------
      newdata!fk_task = modDBConnect.insert("clerical.tasks", newdata)
      St!fk_task = newdata!fk_task  
      If Not IsNull(fk_document) Then
         
         ' modAudit.MakeAudit(currentconsult, "staff task allocated", "clin_documents.documents", fk_document, sSummary)
      End If
   Else
      modDBConnect.update("clerical.tasks", olddata[newdata!fk_task], newdata, "fk_task")
   Endif
   Return newdata!fk_task

End

Public Sub StaffTasks_Components_Save(olddata As Collection, pk_view As Variant, newdata As Collection) As Variant
   '--------------------------------
   'Saves a component of a task task
   'Eg ring patient
   '--------------------------------

   If IsNull(newdata!fk_component) Then
      '--------------------------------------------------------------------------
      'New task for this document? insert in tasks table and link to the document
      '--------------------------------------------------------------------------
      newdata!fk_component = modDBConnect.insert("clerical.task_components", newdata)
      
   Else
      modDBConnect.update("clerical.task_components", olddata[pk_view], newdata, "fk_component")
   Endif
   Return newdata!fk_component

End

Public Function StaffTasks_CheckOutstandingComponents(fk_task As Variant) As Integer 
   '----------------------------------------------------------------------------------
   'Checks if there are any outstanding components to a task - ie. those not completed
   '----------------------------------------------------------------------------------

   Return modDBConnect.exec_query("Select count(pk) from clerical.task_components WHERE fk_task = " & fk_task & " AND date_completed is null")!count

End

Public Function StaffTasks_Notes_Save(olddata As Collection, pk_view As Variant, newdata As Collection, fk_document As Variant) As Variant
   '-----------------------------------------------
   'Saves notes about progress dealing with a task
   'Eg rang patient - said they'd come in next week
   '------------------------------------------------

   If IsNull(newdata!fk_note) Then 'New task for this document? insert in tasks table and link to the document
      newdata!fk_note = modDBConnect.insert("clerical.task_component_notes", newdata)
   Else
      modDBConnect.update("clerical.task_component_notes", olddata[pk_view], newdata, "fk_note")
   Endif


End

Public Function Tasks_For_Document_Get(fk_document As Variant) As Collection
   
   Dim sql As String

   sql = "SELECT *  from clerical.vwTasksComponents WHERE "
   sql &= "fk_row = " & fk_document
   sql &= " And task_deleted = False and component_deleted = false"
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Tasks_For_Patient_Exist(fk_patient As Variant) As Boolean
   
   Dim R As Result
   
   R = modDBConnect.exec_query("Select count(fk_task) as task_count from clerical.vwTasksComponents")
   If R.count = 0 Then Return
   Return True  
   
End

Public Function Tasks_For_Patient_Get(fk_patient As Variant) As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clerical.vwTasksComponents where fk_patient =" & fk_patient & " AND task_deleted is false order by fk_task")
   
End

Public Function Task_Audit_Trail_For_Task_Get_HTML(task As Collection) As String
   
   Dim shtml As String
   
   If Not IsNull(task!fk_row) Then 
      sHtml = modArchiveDocumentsDBI.Audit_Trail_Show_Document_Details_Tasks_Attatched(task!fk_row)
      shtml &= "<HTML><BODY><TABLE><BR><B>Document Actioning</B><BR>" & modHTML.HTML_Template_Audit_Row_Heading()
      shtml &= modAudit.MakeTrail("documents.documents", task!fk_row)
   Else
      shtml &= "<HTML><BODY><TABLE><BR><B>Staff Task Audit Trail</B><BR>" 
      shtml &= modAudit.MakeTrail("clerical.tasks", task!fk_task)
   End If   
   If sHtml = "" Then sHtml = "<HTML><BODY>"
   shtml &= "</TABLE>"
   shtml &= "</BODY></HTML>" 
   Return shtml
   
End

Public Function Tasks_For_Patient_Get_Outstanding(fk_patient As Variant) As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clerical.vwTasksComponents where fk_patient =" & fk_patient & " AND date_finalised is null and component_deleted is false order by fk_task")
   
End

Public Function Tasks_And_Notes_Get(fk_document As Variant) As Collection
   'Used in the audit trail

   Dim sql As String
   
   sql = "SELECT *  FROM clerical.vwtaskscomponentsandnotes "
   sql &= " where fk_row = " & fk_document   
    sql &= "  order by fk_task, fk_staff_allocated,  fk_task_component_note "
   Return modDBConnect.exec_query_collection(sql)
  
  
End
