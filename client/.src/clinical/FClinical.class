' Gambas class file

' Copyright (C) 2008-2011 Dr Richard TERRY

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' Notes to put somewhere
' note the tag's in the recall menu == the pk of audit.lu_action table.
' WHERE TO FIND STUFF
' ==================
' :toolbar buttons enabled-disabled as needed for each module on workspace tab : WorkSpaceEditor_Activate()
' SHOWING MODULES/DOCUMENTS/GENERATED PDF'S, GENERATED HTML on a new tab:
' ======================================================================
' - This depends as to whether you are within Fclinical or outside of FClinical, however ultimately the  same routine is called
'   Editor_ShowPage(sPageName As String, Optional page_tag As String = "", page_data As Variant, Optional additional_page_tag As String = "")
'   if from outside FClinical you need to use Editor_ShowPage_External(....) which accesses FClinical via Static Private form_clinical As FClinical    
'   Examples
'   ========
'   load a module, document or html  onto a tab from within Fclinical                  : Editor_ShowPage(....)
'   - for an example see FClinical.Inbox_showResult()
'   load a module, document or html  onto a tab from outside of FClinical      : Editor_ShowPage_External(....)
'   load a pdf document from outside FClinical which is  a document             :Editor_ShowPage("pdf document",...)
'   load a pdf document from outside FClinical which is not a document from EasyGP :Editor_ShowPage_External("pdf file",...)
'   for an example see FProgressNotesViews.Preview()
'   Display a referral letter written in EasyGP:Referral_Letter_Display()
'   Display letter/correspondence received by EasyGP: Documen_Display((documents As Collection, document_key As Integer))
'   
'   WHAT NOT TO CHANGE IN THIS CODE IF IT MAKES NO SENSE TO YOU (UNLESS YOU FIND A BETTER WAY TO DO IT)
'    cmbSearch_Activate()  don't remove the cmbSearch.enabled = False otherwise quick typers send 
'                          enter keypresses in quick succession. 
'--------------------------------------------------------------------------------------------------------
Private BMICalc As FBMICalc
Private PregCalc As FPregCalc
Private Calculator As FCalculator
Private QuickContacts As FQuickContact
Private ActiveGraphButton As Toolbutton
Private Patients_Seen As Collection             'the patients seen by a staff member today
Private Control_For_Focus As Control            'don't remove this without asking me (RT)
'used to set focus to a designated control after tab is instantiated
'see Editor_ShowPage(.)
'These temporarly probably need removal at some stage
Private iCertificatetype As Integer = const.certificate_type_medical 'default to this
'fixme: make these deletions a different collection with key to type eg document/script etc.then remove the extra stuff
Private Deleted_Documents As Collection     'will allow multiple levels of un-delete e.g see mnuLettersReceived_Click
Private Deleted_Referral As Collection      'single level undelete
Private Deleted_Medications As Collection  'fixme join to the above
Private Deleted_Request As Collection      'fixme join to the above
Private synonyms As Collection 
Private currentobservations As Collection 
Public currentTemporaryWebbrowserHTMLFilename As String 'temporary file being displayed in browser window
Private CurrentPastHistoryList As Columnview     'three Past history lists on TabStripProblemLists, reference one in use
Private bKeyValid As Boolean                     'used where textboxes need to validate key presses
Private bExit As Boolean                         'general flag used to prevent recursion into routine
Private currentconsult As CConsult               'the 'master' class for the patient
Private currentpasthistory As Collection         'the current health issue/past history item being manipulated
Private currentRecall As Collection              'the current recall being maninpulated
Private GraphData As Collection                  'collection pertaining to current graph being shown
Private MeasurementDefaults As Collection        'default measurements for patient eg INR/HBA1c
Private consultationtypes As Collection          'eg at surgery, home, on phone
Public EditorPages As Collection                 'all pages which are stuck onto the workspace
Private Const cListPrescriptions As Integer = 0  'all these reference lists of tabstip_lists
Private Const cListRequests As Integer = 1 
Private Const clistReferrals As Integer = 2 
Private Const clistRecalls As Integer = 3
Private Const cListCertificates As Integer = 4
Private Const clistMeasurements As Integer = 5
Public Const clistImages As Integer = 6 'accessed from other forms
Private Const ctabCalculators As Integer = 7
Private Const cTabQuickContacts As Integer = 8
Private Const cMainDisplay_DataEntry As Integer = 1 
Private Const cMainDisplay_ProgressNotes As Integer = 2
Private Const cMainDisplay_CarePlan As Integer = 3 
Private obs As Observer                           'Observer used when FHelp is being shown, to detect the help close button

Private FMetaData As FDocumentMetaData
Private form_select As New FPatientsSelect        'popup multi-select patient form
Private ScratchPad As FScratchPad                 'embedded 'jotter' or scratch pad
Public Form_ExportClinical As New FExportClinical 'Allows user to export notes from FClinical as pdf
Private Toolbuttons As Collection                 'buttons which user selects to have on the toolbar
Public Form_Decision_Support As FHtmlViewer
Public FCurrentHTMLViewer As FHtmlViewer           'dont remove just testing
Public FGeneralNotesEditor As FProgressNoteEditor  ' dont remove just testing
Static Private form_clinical As FClinical         'allows FClinical Access from anywhere  = Me -see Init()

Static Public Function Help_Show(sPath As String, heading As String, flag As Boolean)
   '--------------------------------------------
   'shows help or whatever in the webkit browser
   '-------------------------------------------- 
   
   form_clinical.vBoxWorkSpace.Visible = Not Flag
   form_clinical.FHelp.Visible = flag
   If flag Then 
      form_clinical.FHelp.$currenthview.url = sPath
   End If
   
End

Static Public Sub RefreshExternal_ImageList()
   '-------------------------------------------------------------------------------
   'If the images tab is showing, this will have been called from FProgressNotePage
   'and an image would have just been saved in the current progress note
   '-------------------------------------------------------------------------------  
   
   '  If form_clinical.TabStrip_Lists.index = clistImages Then 
   form_clinical.Images_Refresh(True)
   ' End If   
   
End

Static Public Sub Reload_Tab_External(cSection As Integer)
   
   form_clinical.Reload_Tab() 
   
End

Public Function Reload_Tab(Section As String)
   '--------------------------------------------------------------------------------
   'Used to call the Reload() function of a particular module
   'For example user may have deleted a request form from the requests list
   'The delete routine has then to check if the requests module is loaded onto a tab
   'and if it is, reload current requests written for this consultation
   '--------------------------------------------------------------------------------   
   
   Dim Page As FLinkContainer
   
   Inc Application.Busy 
   For Each page In WorkspaceEditor.Windows
      'If page = WorkspaceEditor.ActiveWindow Then
      If page.VBoxEditor.Children[0].tag = section Then
         Try Object.Call(page.VBoxEditor.Children[0], "Reload")
      End If   
   Next
   Dec application.Busy
   
End

Static Public Sub Editor_ShowPage_External(page_name As String, page_tag As String, page_data As Variant)
   '-------------------------------------------------------------
   'Adds a page to the workspace editor, called from another form
   '-------------------------------------------------------------
   
   form_clinical.Editor_ShowPage(page_name, page_tag, page_data)
   
End

Static Public Sub Set_URL(url As String)
   
   form_clinical.txtURL.text = url    
   
End

Static Public Function EditorPage_Get(sName As String) As Form
   
   Return form_clinical.EditorPages[sName]
   
End

Static Public Function Notifications_Refresh_External()
   
   form_clinical.Notifications_Refresh()
   
End

Static Public Function Toolbar_Reload()
   
   form_clinical.Refresh_Toolbar() 
   
End

Static Public Function Display_Coding_System()
   'Form may not be loaded, so try
   
   Try form_clinical.lblCodingSystem.text = "Coding System:" & modCodingDBI.coding_system!system
   
End

Static Public Sub Update_graphs()
   
  Try form_clinical.Measurements_Make_Graph()
   
End

Static Public Function Add_Tab(module As String)
   '-----------------------------------------------------------------
   'Called from progress notes editor to add tab according to keyword
   'eg .rq will send module="Requests"
   '-----------------------------------------------------------------
   
   form_clinical.Editor_ShowPage(module)
   
End

Public Sub tbHelp_close_Click()
   
   Stop Event
   Help_Show("", "", False)
   
End

Static Public Function Editor_RemovePage(sKey As Variant, Optional bCloseAll As Boolean = False)
   '-------------------------------------------------------------------------------------------------
   'Removes 1 or all pages  from the EditorPages collection and its associated workspace tab
   'The key of the hWindow can be integer if past history progress notes page or a string eg "Travel"
   'If we are implicitly calling this page (ie - it is not being shut down by the user closing a tab
   'or the program exiting - then cancel the save of information on this page
   'For example - we use this when the user may have deleted a past history item, whilst still having
   'unsaved progress notes on this item in a progress notes editor.
   '-------------------------------------------------------------------------------------------------  
   
   Dim hWindow As Window
   Dim ProgressNotePage As FProgressNotePage
   Dim Page As FLinkContainer
   Dim hCtrl As Control
   Dim frmConsult As FProgressNotePage
   
   form_clinical.WorkspaceEditor.Lock()
   For Each page In form_clinical.WorkspaceEditor.Windows
      If bCloseAll Then
         page.Close()
      Else
         If page.tag = sKey Then
            '------------------------------------------------------------------------------------
            'Found a specific page  if this is a progress notes page, stop it saving its contents
            'when frmConsult.form_close() is called, it attempts to save the editor contents
            '------------------------------------------------------------------------------------
            form_clinical.EditorPages.Remove(skey)
            For Each hctrl In page.VBoxEditor.Children     
               If hctrl Is Form Then
                  Select Case hctrl.Name
                     Case "FProgressNotePage"
                        frmConsult = hctrl       
                        frmConsult.bCancelSave = True  
                        Break
                  End Select
               End If
            Next
            page.Close
            Break
         End If   
      End If   
   Next
   form_clinical.WorkspaceEditor.Unlock()
   
End

Static Public Function WebBrowser_IsVisible() As Boolean
   '---------------------------------------------------------------------------------------
   'Returns true if the central web browser control is visible
   'USAGE:  e.g if another form is using the central web browser and has updated something
   '        which needs the central area to update as well eg scratchpad
   '---------------------------------------------------------------------------------------
   
   Try Return form_clinical.vBoxWebBrowser.Visible
   
End

Static Public Sub WorkspaceEditor_Show()
   '-------------------------------------------------------------------------------------------
   'WorkSpaceEditor is a workspace control - currently until replaced by the 'emulated browser'
   'the main control on FClinical which has all the tabs for example clincal notes, or any
   'section loaded by Editor_ShowPage()
   '-------------------------------------------------------------------------------------------
   
   form_clinical.WorkSpaceEditor.Visible = True  
   
End

Static Public Sub WebBrowser_Show(sData As String, Optional heading As String)
   '------------------------------------------------------------------
   'Displays html in the central webbrowser
   'If the data is a filename, load file, otherwise load raw html
   '------------------------------------------------------------------
   
   FClinical.Editor_ShowPage_External("browser", heading, sData)
   
End

Static Public Sub patient_load_record_external(patient As Collection, bPhotoConfirmed As Boolean, P As Picture) 
   'called from another form
   
   form_clinical.patient_load_record(patient, bPhotoConfirmed, P) 
   
End  

Public Sub FDecision_Support_tbClose_Click()
   
   Stop Event
   DecisionSupport_Show("", False) 
   
End

Static Public Sub DecisionSupport_Show(Heading As String, flag As Boolean)
   '----------------------------------------------------------------------------
   'There is a texteditor contained in Vbox_Decision_Support, which is hidden on
   'the right hand side of the screen. In any section of EasyGP needing simple
   'decision support, this is shown, whilst what's usually on top is hidden
   'for example of implementation see the Mental Health module
   '-----------------------------------------------------------------------------
   
   form_clinical.VboxActiveProblemList.Visible = Not flag
   form_clinical.VboxScratchPad.Visible = Not flag
   form_clinical.VSplit_TabbedListsGraph.Visible = Not flag
   form_clinical.Vbox_Decision_Support.Visible = Flag
   form_clinical.Form_Decision_Support.lblViewerCaption.text = Heading
   
End

Static Public Sub DecisionSupport_SetHTML(sHtml As String)
   'Ian just experimental
   
   ' form_clinical.teDecisionSupport.RichText = shtml
   form_clinical.Form_Decision_Support.WebView1.HTML = shtml
   
End

Static Public Sub Refresh_PastHistory(sPastHistory_HistoricalSummary As String, sPasthistory_ManagementSummary As String, fk_pasthistory As Integer)
   
   form_clinical.Refresh_FPastHistory(sPastHistory_HistoricalSummary, sPasthistory_ManagementSummary, fk_pasthistory)
   
End

Static Public Sub Refresh_AllPreviousNotes()
   '----------------------------------------------------------------------------
   'Called from other forms which have updated any progress notes in any section
   'If open, update the tab for prevous notes
   '----------------------------------------------------------------------------  
   
   Try form_clinical.PreviousNotes_Refresh()
   'FIXME ONLY ALLOW THIS IF SAME PATIENT IS IN FCLINICAL 
   'EG THIS FORM ALSO CALLED FROM INBOX
   If Error Then
      Message.Warning("Trying to referesh previous notes from elsewhere")
   End If   
   
End

Public Sub Refresh_FPastHistory(sPastHistory_HistoricalSummary As String, sPasthistory_ManagementSummary As String, fk_pasthistory As Integer)
   '--------------------------------------------------------------------------------------------------
   'PURPOSE     : If the user has changed a health issues management plan summary or historical summary
   '              AND that health issue is currently being edited in the past history section
   '             then update the corresponding texboxes to reflect the changes
   'CALLED BY   : by any progress notes page
   'WHAT IT DOES: Looks through all the pages in the workspace editor if it finds a matching 
   '              fk_pasthistory it means that problem is currently in the editor.
   '---------------------------------------------------------------------------------------------------
   
   Dim page As FLinkContainer
   Dim PHPage As FPastHistory
   Dim hCtrl As Control
   
   For Each page In WorkspaceEditor.Windows
      For Each hctrl In page.VBoxEditor.Children     
         If hctrl Is FPastHistory Then
            PHPage = hCtrl
            If PHPage.pk_pasthistory_get() = fk_pasthistory Then 'being edited
               PHPage.txtHistoricalSummary.text = sPastHistory_HistoricalSummary
               PHPage.txtManagementSummary.text = sPasthistory_ManagementSummary
               Break
            End If
         End If
      Next
   Next        
   
End

Public Sub PreviousNotes_Refresh()
   '--------------------------------------------
   'Refreshes the all previous notes tab if open
   'Called often by external forms
   '--------------------------------------------
   
   Dim page As FLinkContainer
   Dim AllPreviousNotes As FProgressNotesViewer
   Dim hCtrl As Control
   
   For Each page In WorkspaceEditor.Windows
      For Each hctrl In page.VBoxEditor.Children     
         If hctrl Is FProgressNotesViewer Then
            AllPreviousNotes = hCtrl 
            AllPreviousNotes.WebView1.html = modProgressNotes.AllProgressNotes_Construct_Html(currentconsult)
         End If
      Next
   Next          
   
End

Public Sub Form_Open()
   '--------------------------------------------------------------------
   'Most forms have Init(), even when no form_open, often this Init() is
   'called when the form is loaded, but externally, so to keep the code
   'consistant when browsing it to find what's done first, put it here
   '--------------------------------------------------------------------
   
   Init()          
   
End

Public Sub Refresh_Toolbar()
   '----------------------------------------------------------------------
   'Refreshes the toolbar buttons.
   'Toolbar always has a 'general notes page' after that its up for grabs
   'load the users defaults
   '---------------------------------------------------------------------
   
   Dim btn As Collection 
   Dim hCtrl As Control
   
   For Each hCtrl In pnlToolButtons.Children
      If hCtrl.tag <> "New General Notes" Then hCtrl.Delete()
   Next
   Toolbuttons = modAdminDBI.Clinical_Toolbuttons_Get(modDBConnect.currentUser!fk_staff) 'Get users toolbuttons
   For Each btn In Toolbuttons
      modEditAreaHelpers.ToolButton_Create(pnlToolButtons, btn!icon_path, btn!pk_module, 24, btn!name, Me)
   Next
   
End

Public Sub Init()
   '--------------------------------------------------------------------------------
   'form_clinical used when other forms need to 'find' this form to update something
   '--------------------------------------------------------------------------------   
   
   form_clinical = Me                                        'allow access of FClinical from any other module
   Refresh_Toolbar
   With ScratchPad = New FScratchPad(VboxScratchPad)              'add the scratch pad
      .txtScratchPad.Enabled = False   
   End With
   With Form_Decision_Support = New FHtmlViewer(Vbox_Decision_Support)
      .lblViewerCaption.Visible = True   
      .tbWebBrowserClose.Visible = True 
      .tbWebBrowserZoomIn.Visible = True  
      .tbWebBrowserZoomOut.Visible = True   
   End With
   
   EditorPages = New Collection
   currentconsult = Null
   With FMetaData = New FDocumentMetaData(VboxScratchPad)  
      .Set_consult(currentconsult)                     
      .Set_Embedded_Form_Name("Clinical")  
      .Init("Allocated Documents")
      .Visible = False 
      .tbClose.Visible = True                            'only ever used on this form
   End With 
   obs = New Observer(FMetaData.tbSave) As "FMetaData_tbSave"    'Let FClinical handle the save event"
   obs = New Observer(FMetaData.txtUserObservationName) As "FMetaData_txtUserObservationName"  
   obs = New Observer(FMetaData.tbClose) As "FMetaData_tbClose"    'Let FClinical handle the save event"
   obs = New Observer(Form_Decision_Support.tbWebBrowserClose) As "FDecision_Support_tbClose"
   
   Layout_Form()
   Try Settings_Load()
   synonyms = const.Synonyms()
   pnlToolButtons.tag = 24
   mnuDecisionSupport_K10.Visible = True
   mnuDecisionSupport_Dass.visible = True
   mnuDecisionSupport_Chads.Visible = True   
   cmbSearch_LoadPatients() 
   
End

Public Sub patient_load_record(patient As Collection, bPhotoConfirmed As Boolean, P As Picture) 
   '----------------------------------------------------------------------------
   'PURPOSE   : Loads the minimal necessary patient record
   'CALLED BY : Patients_Find() and FPatientsSelect()
   '            If bPhotoConfirmed = True then selection was confirmed from the multiple
   '            patient pick list which can contain a picture
   '            otherwise if patient's was the only record, this flag is false
   '            If there was a picture, then this flag = True, otherwise the user
   '            will still be prompted with a second "Please confirm"
   'LOGIC     : Displays the minimal amount of information to
   '            start an encounter - the patients demographic details
   '            contact numbers, allergies, recalls, past history items
   '            medications (the default list showing), scratch pad
   '            i.e in essence anything **VISIBLE** to the user when they
   '            first load a patient. Everything else is loaded on demand
   '            database ID show under photo see:Patient_Demographics_Display() 
   '            Currently fetch all progress notes but no images, which area
   '            loaded 'on demand'
   'WARNING   : DO NOT MOVE THESE LINES OUT OF ORDER
   'TOFIX     : 
   '--------------------------------------------------------------------------- 
   
   VSplit1.Visible = True   
   mnuView.Visible = True 
   mnuSections.Visible = True   
   mnuDecisionSupport.Visible = True  
   mnuHelp.visible = True
   Try PicPatient.Picture = P
   '---------------------------------------------------------------------------
   'Has there been a consulation today already?, if yes, then re-use fk_consult
   'then show all previous notes and general notes, reloading these if a 
   'continuation from a previous consult, and user dosn't want a new consult
   '---------------------------------------------------------------------------
   currentconsult = New CConsult(patient)
   currentconsult.Set(consultationtypes[cmbConsultationType.Index]!pk, "")
   Patient_Demographics_Display()            'display name address phone etc
   WorkspaceEditor.Lock()                    'DO NOT REMOVE THE LOCK/UNLOCK
   
   Editor_ShowPage("All Previous Notes")     'Always show all previous notes
   Editor_ShowPage("New General Notes")      'Default to general notes tab.
   WorkspaceEditor.Unlock()                  'OR THE GUI WILL RE-SET ITSELF
   Wait                                      'AND LOADING PATIENT IS IMPOSSIBLE
   cvwAllergies_Refresh()                    'Get all allergies, display on toolbar
   cvwRecalls_Refresh()                      'Display recalls on toolbar
   cvwMedications_Refresh()                  'Get all meds, display current in list
   '-------------------------------------------------------------------------------
   'Show a list of outstanding tasks if any and show on main task bar to hightlight
   '-------------------------------------------------------------------------------
   ScratchPad.Init(currentconsult)           'Get all patienet task items and display
   Notifications_Refresh()
   pasthistory_refresh_lists()
   Measurement_Favourites_Refresh()
   Measurement_Defaults_Refresh()
   TabStrip_Lists.Enabled = True
   'enable appropriate menus
   mnuView_AllNotes.Enabled = True
   mnuView_ByProblem.Enabled = True
   mnuSections.Enabled = True   
   mnuDecisionSupport_K10.Enabled = True   
   mnuDecisionSupport_Dass.Enabled = True
   mnuDecisionSupport_Chads.Enabled = True
   pnlPageName.Enabled = True
   
End

Static Public Function IsSamePatient(fk_patient As Integer) As Boolean
   '-------------------------------------------------------------------
   ' returns true if fk_patient is the same as the currently loaded patient
   ' in FClinical. false if no patient loaded.
   ' Ian, this will crash if no FClincal is loaded.
   '-------------------------------------------------------------------
   
   Try Return form_clinical.IsSamePatient_Instance(fk_patient)
   
End

Public Function IsSamePatient_Instance(fk_patient As Integer) As Boolean
   
   Dim fk As Integer
   
   Try fk = currentconsult!patient!fk_patient
   If Error Then Return False
   If fk = fk_patient Then
      Return True
   Else
      Return False
   Endif
   
End

Static Public Sub Patient_Picture_Refresh(filepath As String)
   
   form_clinical.PicPatient.Picture = Picture.Load(filepath)
   ' End If
   
End
'these routines all over the place and illogical fixme
'meant to update the demographics on this form, called from e.g contacts database

Static Public Sub Patient_Demographics_Refresh()
   
   form_clinical.Demographics_Refresh()
   
End

Public Sub Demographics_Refresh()
   'Refresh the patients demographics from outside Fclinical
   'fixme (everywhere) what if patient > 1 address > > 1 record
   '
   
   Dim patients As Collection 
   Dim p As Collection 
   Dim patient As Collection 
   
   patients = modContactsDBI.Patient_Get_Using_PK(currentconsult!patient!fk_patient)
   For Each p In Patients
      currentconsult.SetData("patient", p)
      Patient_Demographics_Display()
      Return 
   Next     
   
End

Static Public Sub Refresh_ProgressNotesPage(pk_pasthistory As Integer)
   
   Dim page As FLinkContainer
   '  For Each page In WorkspaceEditor.Windows
   '    If Page.tag = pagetitle Then 
   '      WorkspaceEditor.ActiveWindow = page
   ' 
   '      Return True
   '    End If
   ' Next
   
End

Static Public Sub Refresh_Section(section As Integer)
   
   form_clinical.Refresh_Section_Instance(section)
   If Error Then
      Message.warning("Error trying to update a section")
   End If 
   
End

Public Sub Refresh_Section_Instance(section As Integer)
   '-------------------------------------------------------------------------
   'Refreshs lists, progress note pages when another section alters something
   'If not a list being refreshed, refresh all progress notes pages contained
   'in the workspace, this way e.g if you have added new management plans or
   'historial summaries in past history, and have a progress note page
   'open entering notes for that problem, next time you switch to it those
   'summaries will have been updated
   '-------------------------------------------------------------------------
   
   Dim hCtrl As Control
   Dim frmConsult As FProgressNotePage
   Dim Page As FLinkContainer
   Dim Container As FLinkContainer
   Dim HTMLViewer As FHtmlViewer
   Dim Form_PDF As FPDF
   
   If IsNull(currentconsult) Then Return 
   
   Select Case section
      Case const.cSection_PastHistory
         pasthistory_refresh_lists()
      Case const.cSection_Prescriptions
         cvwMedications_Refresh()
      Case const.cSection_Requests
         modEditAreaHelpers.Patient_Requests_Show(currentconsult, cvwRequests)
      Case const.cSection_Referrals
         currentconsult.Refresh("referrals_written")  
         cvwReferrals_Fill()
      Case const.cSection_Images
         Images_Refresh(True) 
      Case Const.cSection_Recalls
         cvwRecalls_Refresh()
      Case Const.cSection_Workcover
         Workcover_Certificates_Refresh()
      Case Const.cSection_MedicalCertificates
         Certificates_Medical_Refresh
      Case Else
         '-------------------------------------------------
         'Not a list to update must be a progress note page
         'Update this whether active or not
         'or care plan or health summary
         '-------------------------------------------------
         For Each page In WorkspaceEditor.Windows
            Container = page
            For Each hctrl In page.VBoxEditor.Children     
               Print hctrl.Name 
               '  If hctrl Is FProgressNotePage Then
               Select Case hctrl.Name
                  Case "FProgressNotePage"
                     frmConsult = hctrl       
                     If section <> Const.cSection_GeneralNotes Then
                        If frmConsult.Get_pk_pasthistory() Then
                           frmConsult.Health_Issue_Reload()
                           page.title = frmConsult.HealthIssue_GetName()
                        End If
                     End If
                     Break
                  Case "FPDF" 
                     Select Case section
                        Case Const.cSection_HealthSummary
                           Form_PDF = hCtrl 
                           Form_PDF.Load_PDF(modPrinting.Latex_To_PDF(modProgressNotes.Health_Summary_Construct_LaTex(currentconsult).GetData()))
                     End Select 
                  Case "FHtmlViewer"
                     Select Case section
                        Case const.cSection_CarePlan
                           If Page.caption = "Care Plan" Then
                              HTMLViewer = hctrl
                              HTMLViewer.WebView1.HTML = modProgressNotes.Care_Plan_Construct_html(Currentconsult)
                              Break
                           Endif
                           
                     End Select
               End Select
               ' End If        
            Next
         Next      
   End Select
   
End

Public Sub Refresh_Section_Instance_old(section As Integer)
   '-------------------------------------------------------------------------
   'Refreshs lists, progress note pages when another section alters something
   'If not a list being refreshed, refresh all progress notes pages contained
   'in the workspace, this way e.g if you have added new management plans or
   'historial summaries in past history, and have a progress note page
   'open entering notes for that problem, next time you switch to it those
   'summaries will have been updated
   '-------------------------------------------------------------------------
   
   Dim hCtrl As Control
   Dim frmConsult As FProgressNotePage
   Dim Page As FLinkContainer
   Dim Container As FLinkContainer
   Dim HTMLViewer As FHtmlViewer
   
   If IsNull(currentconsult) Then Return 
   
   Select Case section
      Case const.cSection_PastHistory
         pasthistory_refresh_lists()
      Case const.cSection_Prescriptions
         cvwMedications_Refresh()
      Case const.cSection_Requests
         modEditAreaHelpers.Patient_Requests_Show(currentconsult, cvwRequests)
      Case const.cSection_Referrals
         currentconsult.Refresh("referrals_written")  
         cvwReferrals_Fill()
      Case const.cSection_Images
         Images_Refresh(True) 
      Case Const.cSection_Recalls
         cvwRecalls_Refresh()
      Case Const.cSection_Workcover
         Workcover_Certificates_Refresh()
      Case Const.cSection_MedicalCertificates
         Certificates_Medical_Refresh
      Case Else
         '-------------------------------------------------
         'Not a list to update must be a progress note page
         'Update this whether active or not
         'or care plan or health summary
         '-------------------------------------------------
         For Each page In WorkspaceEditor.Windows
            Container = page
            For Each hctrl In page.VBoxEditor.Children     
               Print hctrl.Name 
               If hctrl Is FProgressNotePage Then
                  Select Case hctrl.Name
                     Case "FProgressNotePage"
                        frmConsult = hctrl       
                        If section <> Const.cSection_GeneralNotes Then
                           If frmConsult.Get_pk_pasthistory() Then
                              frmConsult.Health_Issue_Reload()
                              page.title = frmConsult.HealthIssue_GetName()
                           End If
                        End If
                        Break
                        
                  End Select
                  ' Else If hctrl Is FPDF And section = const.cSection_HealthSummary Then
                  '        Print "here"
                  '     End If  
                  ' Else 
                  '    If hctrl Is FHtmlViewer And section = const.cSection_CarePlan Then
                  '       If Page.caption = "Care Plan" Then
                  '          HTMLViewer = hctrl
                  '          HTMLViewer.WebView1.HTML = modProgressNotes.Care_Plan_Construct_html(Currentconsult)
                  '          Break
                  '       Endif
                  '    End If   
               End If        
            Next
         Next      
   End Select
   
End

Public Sub Layout_Form()
   '------------------------------------------------------------------------
   'These labels in the IDE have identifying text (just so you can see them)
   'remove this at runtime
   '------------------------------------------------------------------------
   ' tlPatientComms.text = "Contact Numbers"          'clear labels for patients contact numbers
   ' tlReminders.text = "Reminders"             'clear labels for patients recalls
   ' tlAllergies.text = "Allergies"             'clear labels for patients allergies
   ' lblID.text = ""                   'clear patient ID label
   
   consultationtypes = modUtil.LoadCombo(cmbConsultationType, modConsultDBI.consult_get_types(), "type")
   cmbConsultationType.index = cmbConsultationType.Find("At consulting rooms")
   
End

Public Sub Form_Close()
   
   Settings_Save()
   
End

Public Sub FormFonts_Adjust()
   '------------------------------------------------------------------------
   'first attempt to globally change the label sizes on all forms edit areas
   'when global font is changed
   '------------------------------------------------------------------------  
   
   Dim i As Object
   
   If IsNull(EditorPages) Then Return 
   Inc application.Busy
   
   For Each i In EditorPages
      Try Object.Call(i, "EditArea_Resize_Labels")
   Next
   Dec application.Busy
   
End

Public Sub Settings_Save()
   
   Dim i As Object
   
   Inc Application.Busy                                      'show the hourglass cursor
   '------------------------------------------------------------------
   'Try and save the settings for all pages in the FClinical Workspace
   'Note that Settings_Save() on each form must be public
   '------------------------------------------------------------------
   For Each i In EditorPages
      Try Object.Call(i, "Settings_Save")
   Next
   
   Settings["Main/HsplitClinical_Main"] = HSplitClinical_Main.Layout
   If Vbox_Decision_Support.Visible = False Then  'if user closes program whilst this is open, don't save
      Settings["Main/VsplitClinical_RightPane"] = VsplitClinical_RightPane.Layout
   End If   
   If Not IsNull(FMetaData) Then
      If FMetaData.Visible = True Then
         Settings["Main/VsplitClinical_RightPane_Metadata"] = VsplitClinical_RightPane.Layout
      End If
   End If
   Settings["Requests_List_columns/date"] = cvwRequests.Columns[0].Width
   ' Settings["Progress Notes/default_zoom"] = WebBrowserNotes.Zoom
   '  Settings["Progress Notes/default_zoom"] = Form_Html_Viewer.WebView1.Zoom
   Settings["Main/Hsplit_Toolbar_Lists.Layout"] = Hsplit_ToolBar_Lists.Layout
   Settings["Main/Hsplit_Toolbar.Layout"] = Hsplit_ToolBar.Layout
   Settings["Main/HSplit1_Patient_And_Buttons.Layout"] = HSplit1_Patient_And_Buttons.Layout
   Settings["TabbedLists/cvwRecalls.font"] = cvwRecalls.Font.ToString()
   Settings["TabbedLists/cvwRecalls.columns"] = Modutil.Columnsizes_To_String(cvwRecalls)
   Settings["TabbedLists/cvwRequests.font"] = cvwRequests.Font.ToString()
   Settings["TabbedLists/cvwRequests.columns"] = Modutil.Columnsizes_To_String(cvwRequests)
   Settings["TabbedLists/cvwReferrals.font"] = cvwReferrals.Font.ToString()
   Settings["TabbedLists/cvwResults.font"] = cvwResults.Font.ToString()
   Settings["TabbedLists/cvwResults.columns"] = Modutil.Columnsizes_To_String(cvwResults)
   Settings["TabbedLists/cvwReferrals.columns"] = Modutil.Columnsizes_To_String(cvwReferrals)
   Settings["Clinical/HSplit_MeasurementLists.Layout"] = HSplit_MeasurementLists.Layout
   Settings["Clinical/VSplit_TabbedListsGraph.Layout"] = VSplit_TabbedListsGraph.Layout
   Settings["Clinical/Vsplit1.Layout"] = VSplit1.Layout   'the main vertical splitter separating toolbar and rest of screen
   modAdminDBI.Clinical_Toolbuttons_Save(pnlToolButtons, modDBConnect.currentUser!fk_staff, Toolbuttons)
   
   Dec Application.Busy 
   
End

Private Sub Settings_Load()
   
   Dim i As Object
   
   Try HSplitClinical_Main.Layout = Settings["Main/HsplitClinical_Main"]
   If Not IsNull(FMetaData) Then
      If FMetaData.Visible = True Then
         Try VsplitClinical_RightPane.Layout = Settings["Main/VsplitClinical_RightPane_Metadata"] 
      Else
         Try VsplitClinical_RightPane.Layout = Settings["Main/VsplitClinical_RightPane"] 
      End If
   End If 
   Try VSplit1.Layout = Settings["Clinical/Vsplit1.Layout"]   
   Try cvwRecalls.Font = Font[Settings["TabbedLists/cvwRecalls.font"]]
   Try cvwRequests.Font = Font[Settings["TabbedLists/cvwRequests.font"]]
   Try cvwReferrals.Font = Font[Settings["TabbedLists/cvwReferrals.font"]]
   Try cvwResults.Font = Font[Settings["TabbedLists/cvwResults.font"]]
   Try cvwLettersReceived.font = Font[Settings["TabbedLists/cvwLettersReceived.font"]]
   Try cvwCertificates.Font = Font[Settings["TabbedLists/cvwCertificates.font"]]
   Try Hsplit_ToolBar_Lists.Layout = Settings["Main/Hsplit_Toolbar_Lists.Layout", "1,1"]
   Try Hsplit_ToolBar.Layout = Settings["Main/Hsplit_Toolbar.Layout", "1,2"]
   Try HSplit1_Patient_And_Buttons.Layout = Settings["Main/HSplit1_Patient_And_Buttons.Layout"]
   Try HSplit_MeasurementLists.Layout = Settings["Clinical/HSplit_MeasurementLists.Layout"]
   Try VSplit_TabbedListsGraph.Layout = Settings["Clinical/VSplit_TabbedListsGraph.Layout"] 
   Try modUtil.columnSizes_Set(Settings["TabbedLists/cvwResults.columns"], cvwResults)
   Try modUtil.columnSizes_Set(Settings["TabbedLists/cvwRequests.columns"], cvwRequests)
   
End Sub

Public Sub Consult_Save()
   '-----------------------------------------------
   'Saves any outstanding data for the consultation
   '-----------------------------------------------
   
   Dim i As Object
   
   Inc Application.Busy 
   TabStrip_Lists.Enabled = False   
   If Not IsNull(currentconsult) Then
      For Each i In EditorPages
         Try Object.Call(i, "Save")
      Next
   End If   
   Dec Application.Busy
   TabStrip_Lists.Enabled = True
   
End

Public Sub Patients_Find(Optional fk_patient As Integer) 
   '-----------------------------------------------------------------------------
   'Attemps to find patients according to criteria entered in cmbSearch
   'of by patient key if picked from list of patients seen that day
   'If none found , resets focus to cmbsearch
   'Otherwise creates an empty patient object
   'If only one name and address auto-load that patient to currentconsult
   'If multiple names/addresses, popup a modal for choice
   'which returns a patient object which becomes currentconsult
   'fixme - implement the patient stack
   '-----------------------------------------------------------------------------
   
   Dim AllPatients As New Collection
   Dim patient As Collection
   Dim sql_in_english As String
   Dim P As Picture
   Dim bPhotoConfirmed As Boolean = False 
   
   If BExit Then Return 
   bExit = True   
   
   Inc Application.Busy
   
   If fk_patient Then
      AllPatients = modContactsDBI.Patient_Get_Using_PK(fk_patient)
   Else
      AllPatients = modContactsDBI.patients_get_firstname_surname(cmbSearch.text, mnuView_IncludeDeceased.Checked)
      sql_in_english = AllPatients!sql_in_english
      AllPatients.Remove("sql_in_english")
   End If   
   If AllPatients.count = 0 Then 
      cmbSearch.SetFocus()
      cmbSearch.Enabled = True 
      Dec application.Busy
      bExit = False  
      Return
   Else  
      '----------------------------------------------------
      'One or more patients.
      'If one, get their photo if it exists and load record
      '----------------------------------------------------
      If AllPatients.count = 1 Then  
         '----------------------------------------------------
         'no way in gambas to get a key without an iteraction
         'get first key
         '----------------------------------------------------
         For Each patient In AllPatients
            If Not IsNull(patient!image.data) Then 
               P = modGraphics.Blob_Convert_To_Picture(patient!image)!picture 
            Else
               P = Picture.Load("icons/misc/no_photo.png")
            End If   
         Next
         FConfirmPatient.Init(P, patient!wholename)
         If Not FConfirmPatient.ShowModal() Then 
            
            cmbSearch.Enabled = True 
            Dec application.Busy
            bExit = False  
            cmbSearch.SetFocus()
            Return            
         End If
         patient_load_record(patient, bPhotoConfirmed, P)
      Else  
         '---------------------
         'more than one patient
         '---------------------
         mnuView.Visible = False 
         mnuSections.Visible = False   
         mnuDecisionSupport.Visible = False  
         mnuHelp.visible = False
         Dec Application.Busy
         VSplit1.Visible = False
         form_select = New FPatientsSelect(Me)
         obs = New Observer(form_select.btnCancel) As "SelectPatient"     
         form_select.Init(AllPatients, sql_in_english, "FClinical") 'was Me
         form_select.Visible = True 
         
      Endif
   End If   
   bExit = False  
   cmbSearch.Enabled = True
   Dec application.Busy
   
End

Public Sub cvwMedications_Refresh()
   
   Dim col_med As Integer = 0
   Dim col_strength As Integer = 1
   Dim col_quantity As Integer = 2
   Dim col_repeats As Integer = 3
   Dim col_start_date As Integer = 4
   Dim Col_last_date As Integer = 5
   Dim col_prescribedFor As Integer = 6
   Dim col_pbs As Integer = 7
   
   Dim col_prescribedBy As Integer = 8
   Dim i As Collection
   Dim x As Integer
   Dim cvw As ColumnView
   
   cvw = cvwMedications
   cvw.Clear()
   cvw.Columns.count = 9
   cvw.Columns[col_med].width = 124
   cvw.Columns[col_strength].width = 45
   cvw.Columns[col_quantity].width = 29
   cvw.Columns[col_repeats].width = 23
   cvw.Columns[col_pbs].width = 72
   cvw.Columns[col_start_date].width = 69
   cvw.Columns[Col_last_date].width = 69
   cvw.Columns[col_prescribedFor].width = 100
   cvw.Columns[col_prescribedBy].width = 100
   cvw.columns[0].text = "Drug"
   cvw.columns[1].text = "Dose"
   cvw.columns[2].text = "Qty"
   cvw.columns[3].text = "Rpt"
   cvw.columns[4].text = "Started"
   cvw.columns[5].text = "Last date"
   cvw.columns[6].text = "For"
   cvw.columns[7].text = "PBS"
   cvw.columns[8].text = "Prescribed by"
   Currentconsult.Refresh("medications")
   For Each i In currentconsult!medications
      If i!active = True Then
         x = i!pk_view
         cvw.Add(x, 0)
         ' If IsNull(i!brand) Then 
         cvw[x][col_med] = i!generic
         ' Else
         '    cvw[x][col_med] = i!brand 
         ' End If
         cvw[x][col_strength] = i!strength
         cvw[x][col_quantity] = i!quantity 
         cvw[x][col_repeats] = i!repeats
         cvw[x][col_start_date] = Format(i!start_date, "dd/mm/yyyy")
         cvw[x][col_last_date] = Format(i!last_date, "dd/mm/yyyy")
         cvw[x][col_pbs] = i!pbs_print_status
         cvw[x][col_prescribedFor] = i!prescribed_for      
         cvw[x][col_prescribedBy] = i!staff_prescibed_title & " " & i!staff_prescribed_wholename
         
      Endif
   Next
   
End

Public Sub cvwAllergies_Refresh()
   '---------------------------------------------
   'Fetch the patients allergies from the backend
   '---------------------------------------------
   
   Dim allergy As Collection
   'For Each i In currentconsult!allergies
   ' FIXME: load the widget 
   'Next
   ' cvwAllergies.Add(0, "Allergies:Nil Recorded")
   
End

Public Sub cvwReferrals_Fill()
   '-------------------------------------------------------------
   'NAME     : cvwReferrals_Refresh()
   'PURPOSE  : Displays the patients outgoing referral letters
   '           in a list
   'CALLED BY: TabStrip_Lists_MouseUp() 
   'WARNING  : All the lists contained on the gui-element TabStrip_Lists
   '           are members of the tabbedlists group.There is no
   '           cvwReferrals_events() per se, its events are under
   '           TabbedLists_events()
   'TOFIX    : Smarter column sizing 
   '--------------------------------------------------------------
   
   Dim x As Integer                      'for readability = key
   Dim sString As String
   Dim referral As Collection 
   
   With cvwReferrals              
      .Clear()
      .Columns.count = 2
      .Columns[0].width = 60
   End With
   '--------------------------------------------------------------
   'Loop through the collection, the key of the columnview becomes
   'the primary key of clin_referrals.inbox 
   '--------------------------------------------------------------    
   For Each referral In currentconsult!referrals_written
      x = referral!pk_referral                      'readability
      If referral!surname Then
         sString = referral!wholename
      Else
         sString = referral!organisation
      End If
      cvwReferrals.Add(x, 0)                                                  'add new row
      cvwReferrals[x][0] = Format(referral!date_referral, "dd/mm/yyyy") 
      If sSTring = "" Then
         cvwReferrals[x][1] = referral!tag 
      Else 
         cvwReferrals[x][1] = sSTring & " - " & referral!tag  
      End If
   Next  
   
End

Public Sub PastHistory_MakeActive()
   '---------------------------------------------------------
   ' marks an inactive past history problem as active
   '---------------------------------------------------------
   'currentPastHistory!active = True
   'pasthistory_refresh_lists()
   
End Sub 

Public Sub PastHistory_MakeInActive()
   '-----------------------------------------
   'marks the highlighted problem as inactive
   '-----------------------------------------
   
   pasthistory_refresh_lists()
   
End Sub

Public Sub Patient_Demographics_Display()
   '--------------------------------------------------------
   'Display core demographics,
   'name, address, sex, age
   'comms limited to (FIXME) user defined list
   'medicare number or other clerical FIXME when implemented
   '--------------------------------------------------------
   
   Dim com As Collection 
   
   bExit = True
   cmbSearch.text = currentconsult!patient!firstname & " " & currentconsult!patient!surname & " " & Trim(currentconsult!patient!street1 & " " & currentconsult!patient!street2) & " " & currentconsult!patient!town
   cmbSearch.text &= " " & currentconsult!patient!postcode
   cmbSearch.pos = 0
   txtAge.text = "Age " & currentconsult!patient!age_display & " " 
   If Not IsNull(currentconsult!patient!occupation) Then
      lblOccupation.Text = UCase(Left(currentconsult!patient!occupation, 1)) & Right(currentconsult!patient!occupation, Len(currentconsult!patient!occupation) - 1)
      If currentconsult!patient!retired Then
         lblOccupation.text &= " (Retired)"
         lblOccupation.pos = 0
      End If  
   Endif
   cmbSearch.Tag = currentconsult!patient!firstname & " " & currentconsult!patient!surname & "\n"
   
   '----------------------------------------------------------------
   'On the top toolbar, show a list containing dob, medicare number,
   'and some basic contact numbers
   '---------------------------------------------------------------
   lblBirthdate.text = Format(currentconsult!patient!birthdate, "dd/mm/yyyy")
   '---------------------------------------------
   'Display comms with abbreviated prefix in list
   '---------------------------------------------
   currentconsult.Refresh("comms") 'refreshed because can be called from outside of this module eg FPersons
   tlPatientComms.text = ""
   
   For Each com In currentconsult!comms
      tlPatientComms.text &= const.CommModalityTextBrief[com!fk_type] & ":" & currentconsult!comms[currentconsult!comms.key]!value & "<BR>"
   Next
   If tlPatientComms.text = "" Then tlPatientComms.text = "Contact Numbers"
   LBLID.text = "ID:" & currentconsult!patient!fk_patient 'show database ID under photo" 
   
   bExit = False
   
End

Public Sub cmbSearch_KeyPress()
   
End

Public Sub cmbSearch_Activate()
   
   If bExit Then Return 
   If Len(Trim(cmbSearch.text)) > 0 Then 
      '--------------------------------------------------------
      'Try and find a patient as per the text in the search box\
      'If this fails, then focus is res-set to the search box
      'If finds 1 patient, loads their records
      'If finds > 1 patient, popup multiple choice list
      'which is instance for FPatientsSelect      
      '--------------------------------------------------------
      cmbSearch.Enabled = False  
      patients_find() 
   End If
   
End

Public Sub cmbSearch_LoadPatients()
   '------------------------------------
   'Loads combo with patients seen today
   '------------------------------------  
   
   Dim Patient_Seen As Collection
   Dim fk_last_patient As Integer
   Dim x As Integer
   
   bExit = True
   cmbSearch.Clear()
   Patients_Seen = New Collection
   For Each Patient_seen In modAppointmentsDBI.Patients_Seen(Format(Now, "dd/mm/yyyy"), modDBConnect.currentUser!fk_staff) 
      If fk_last_patient <> Patient_Seen!fk_patient And Patient_Seen!fk_type = const.consult_type_at_Surgery Then
         fk_last_patient = Patient_Seen!fk_patient 
         cmbSearch.add(Patient_Seen!wholename)
         Patients_Seen.Add(Patient_Seen, x)
         Inc x
      End If
   Next
   bExit = False  
   
End

Public Sub Gui_Clear()
   '------------------------------------------------
   'Removes all patient data from the user interface
   'clears all visible lists
   'clears all visible graphs
   'clears the scratchpad
   '------------------------------------------------
   
   bExit = True
   
   Inc application.busy
   currentconsult = Null
   '----------------------------------------------------------
   'Clear patient related textboxes and labels on main toolbar
   '----------------------------------------------------------
   cmbSearch.text = "" 
   txtAge.text = ""
   lblID.text = ""
   tlAllergies.text = ""
   tlReminders.text = ""
   tlPatientComms.text = ""
   lblBirthdate.text = ""
   tlNotifications.text = ""
   txtURL.text = ""
   lblOccupation.text = ""
   '-----------------------
   'Remove filters on lists
   '-----------------------
   txtInboxResults_filter.text = "" 
   txtInboxResults_Exclude.text = ""
   txtLetterFilterAuthor.text = ""
   txtLetterFilterTag.text = ""
   txtFindGraphable.text = ""
   txtMeasurementShowLastMonths.text = ""
   txtFindGraphable.text = ""
   mnuSections.Enabled = False   
   mnuView_AllNotes.Enabled = False   
   mnuView_ByProblem.Enabled = False   
   WorkspaceEditor_Clear()                     'remove all current pages from workspace, starts new EditorPages collection
   Tabbed_lists_Clear()                        'scripts, recalls, requests lists etc
   TabStrip_Lists.index = 0                    'make medication list the default one showing
   cvwProblemsSignificant.Clear()
   cvwProblemsInActive.Clear()
   cvwProblemsMajor.Clear()
   Vbox_Notifications.Background = Color.RGB(237, 239, 235)
   'checked to this point bexit still is true
   
   cmbConsultationType.index = cmbConsultationType.Find("At consulting rooms")
   ScratchPad.Clear()
   Try BMICalc.EditArea_Clear()
   Try PregCalc.EditArea_Clear()
   pnlPageName.Enabled = False
   UnFiled_Document_Metadata_Show(False)
   ScratchPad.txtScratchPad.Enabled = False    'don't let use this until have patient
   TabStripProblemLists.index = 2
   TabStripProblemLists.Caption = "Inactive"
   TabStripProblemLists.index = 1
   TabStripProblemLists.Caption = "Significant"
   TabStripProblemLists.index = 0
   TabStripProblemLists.Caption = "Major"
   Patient_Picture_Clear()
   Measurements_Reset()                          'this leaves bExit=False   but casual reader won't know this
   bExit = False                                 'so tell them
   DecisionSupport_Show("", False)              'remove right hand side decision support panel (could be showing)
   Deleted_Documents = New Collection 
   Deleted_Medications = New Collection         'fixme unite these collections
   Deleted_Referral = New Collection
   txtConsultDate.text = Format(Now, "dd/mm/yyyy") 
   application.busy = 0                        'ensure have no hourglass
   iCertificatetype = const.certificate_type_medical
   
End

Public Sub cmbSearch_GotFocus()
   '------------------------------------------------------------
   'User has clicked on the cmbSearch combo box in the text part
   'First check there is no un-saved data - save that
   'then clear all patient specific data from the gui
   're-setting the lists, notification labels etc
   '------------------------------------------------------------
   
   If bexit Then Return 
   Consult_Save()
   Gui_Clear()
   cmbSearch.Enabled = True
   
End

Public Sub cmbSearch_LostFocus()
   '--------------------------------------------------
   'Ensure that the patient's name at least is showing
   '--------------------------------------------------  
   
   Last.pos = 0 
   
End

Public Sub Patient_Picture_Clear()
   '---------------------------------------------
   ' Clears the picture from the main picture box
   ' puts back in the default
   '---------------------------------------------
   
   With PicPatient
      .Picture = Picture.Load("icons/misc/no_photo.png")
   End With
   Wait        'otherwise, visually, picture won't disappear
   
End

Public Sub WorkspaceEditor_Clear()
   'Purpose: removes all existing child tabs from the workspace editor
   
   Dim hWindow As Window
   
   WorkspaceEditor.Lock()
   For Each hWindow In WorkspaceEditor.Windows
      hWindow.Close()
   Next
   WorkspaceEditor.Unlock()
   EditorPages = New Collection
   
End

' Public Sub WorkspaceEditor_RemovePage()
'    
'    Dim hWindow As Window
'    
'    WorkspaceEditor.Lock()
'    For Each hWindow In WorkspaceEditor.Windows
'       '  hWindow.Close()
'    Next
'    WorkspaceEditor.Unlock()
'    
' End

Public Sub Care_Plan_Display()
   
   Inc Application.Busy
   FClinical.WebBrowser_Show(modProgressNotes.Care_Plan_Construct_html(currentconsult), "GP MANAGEMENT PLAN AND TEAM CARE ARRANGEMENTS")
   Dec application.Busy
   
End

Public Sub Health_Summary_Display_HTML()
   
   FClinical.WebBrowser_Show(modProgressNotes.Health_Summary_Construct_html(currentconsult), "HEALTH SUMMARY")
   
End 

Public Sub Health_Summary_Display()
   
   Dim templ As CTemplate
   
   Inc Application.Busy
   ' FClinical.WebBrowser_Show(modProgressNotes.Health_Summary_Construct_html(currentconsult), "HEALTH SUMMARY")
   templ = modProgressNotes.Health_Summary_Construct_LaTex(currentconsult)
   If Not IsNull(templ) Then
      Editor_ShowPage("pdf file", "Health Summary", modPrinting.Latex_To_PDF(templ.GetData()))
   End If
   
   Dec application.Busy
   
End

Public Sub Images_Refresh(Optional bRefresh As Boolean = False)
   '--------------------------------------------------
   'Displays list of patient images or force a reload
   '-------------------------------------------------
   
   Dim I As Collection
   Dim lcRow As CImageRow
   
   lcImages.Clear()
   If bRefresh Then Currentconsult.Refresh("images")
   For Each I In Currentconsult!images
      lcRow = New CImageRow(lcImages, I)
   Next
   
End

Public Sub cvwRecalls_Refresh()
   '---------------------------------------------------------------
   '           rterry@pacific.net.au
   'PURPOSE  : Displays the patients outstanding recalls in a list
   '           on the toolbar visible at all times, and on the 
   '           tabstrip_lists control
   '--------------------------------------------------------------
   
   Dim x As Integer                      'for readability = key
   Dim sString As String
   Dim rows As String 
   Dim sColText As String
   Dim sTableStart As String = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0 >"
   
   Dim sRow As String = ""
   
   "<TR>"
   "<TD WIDTH=60><FONT COLOR='%color%'>"
   "%col1%</FONT>"
   "</TD>"
   "<TD>"
   "%col2%"
   "</TD>"
   "</TR>"
   
   With cvwRecalls              
      .Clear()
      .Columns.count = 2
      .Columns[0].width = 60
      .Columns[1].width = 200
   End With
   
   Try modUtil.columnSizes_Set(Settings["TabbedLists/cvwRecalls.columns"], cvwRecalls)
   If Error Then
      cvwRecalls.Columns[0].width = 60
      cvwRecalls.Columns[1].width = 200
   Endif
   currentconsult.Refresh("recalls_logged")
   tlReminders.text = ""
   rows = ""
   For Each currentconsult!recalls_logged
      rows &= srow 
      x = currentconsult!recalls_logged.Key                        'readability
      '---------------------------------------------------------
      'Display in the recalls list on the tabstrip_lists control
      '---------------------------------------------------------
      cvwRecalls.Add(x, 0)
      cvwRecalls[x][0] = Format(currentconsult!recalls_logged[x]!due, "dd/mm/yyyy")
      cvwRecalls[x][1] = currentconsult!recalls_logged[x]!reason
      '---------------------------------------------------
      'Display these recalls as reminders at top of screen
      '---------------------------------------------------
      If DateDiff(Now, currentconsult!recalls_logged[x]!due, gb.Month) < 0 Then
         Rows = Replace(Rows, "%color%", "#800000")
         sColtext = "Overdue:"
         Rows = Replace(rows, "%color%", "#FFFFFF")
      Else
         sColtext = "Due in:"
      End If
      sColText &= Abs(DateDiff(Now, currentconsult!recalls_logged[x]!due, gb.Month)) & "M"
      rows = Replace(rows, "%col1%", sColText)
      rows = Replace(rows, "%col2%", currentconsult!recalls_logged[x]!reason)
   Next  
   'FIXME this list is potentially invisible if user has re-sized it to nothing.
   If currentconsult!recalls_logged.count Then  
      tlReminders.Richtext = sTableStart & rows & "</TABLE>"
   Else
      tlReminders.Richtext = "Recalls & Reminders - Nil"
   End If   
   
End

Public Sub mnuDecisionSupport_Click()
   
   If IsNull(Currentconsult) Then Return  
   Editor_ShowPage(Last.tag)
   
End

Public Sub mnuCertificates_Click()
   
   Dim filename As String
   
   cvwCertificates.MoveCurrent()
   Select Case Last.tag
      Case "delete"
      Case "preview"
         Select Case iCertificatetype
            Case const.certificate_type_medical
               If Not IsNull(currentconsult!medical_certificates[cvwCertificates.Item.Key]!latex)
                  filename = modPrinting.Latex_To_PDF(currentconsult!medical_certificates[cvwCertificates.Item.Key]!latex)
                  Editor_ShowPage("pdf file", "Medical Certificate " & Format(currentconsult!medical_certificates[cvwCertificates.Item.Key]!certificate_date, "dd/mm/yyyy"), filename)
               End If
            Case const.certificate_type_workcover 
               If Not IsNull(currentconsult!workcover_claims[cvwCertificates.Item.Key]!latex) Then 'unfortunately for developmental reasons, all WCC <11/11/11, don't have latex
                  filename = modPrinting.Latex_To_PDF(currentconsult!workcover_claims[cvwCertificates.Item.Key]!latex)
                  Editor_ShowPage("pdf file", "Workcover Form " & Format(currentconsult!workcover_claims[cvwCertificates.Item.Key]!certificate_date, "dd/mm/yyyy"), filename)
                  
               End If
         End Select 
         
      Case "reprint"
         
         Select Case iCertificatetype
            Case const.certificate_type_medical
               If Not IsNull(currentconsult!medical_certificates[cvwCertificates.Item.Key]!latex)
                  modPrinting.Print_latex(currentconsult!medical_certificates[cvwCertificates.Item.Key]!latex)
               End If
            Case const.certificate_type_workcover
               If Not IsNull(currentconsult!workcover_claims[cvwCertificates.Item.Key]!latex)
                  modPrinting.Print_latex(currentconsult!workcover_claims[cvwCertificates.Item.Key]!latex)
               End If
         End Select
      Case "fonts"
         modUtil.Columnview_SetFont(cvwCertificates, "TabbedLists")
   End Select
   
End

Public Sub cvwResults_Refresh(Optional bRefresh As Boolean = False)
   '-------------------------------------------------------------
   'PURPOSE  : Displays the patients results i.e
   '           pathology/radiology/nuclear medicine
   '           in the results column view
   'LOGIC    : RequestResults_Get() has retrieved a collection
   '           of results from the backend, keyed on the primary
   '           key of clin_results.inbox_general which stores
   '           pathology/radiology ie non-letters from providers
   '           Loop through this collection load into columnview
   '           only the date, test, who ordered it
   '           Later when one needs to access any result it will
   '           be contained in 
   '           currentconsult.requestResults[cvwResults.item.key]
   'WARNING  : All the lists contained on the gui-element TabStrip_Lists
   '           are members of the tabbedlists group.There is no
   '           cvwResults_events() per se, its events are under
   '           TabbedLists_events()
   'TOFIX    : Smarter column sizing - make second column (1) with 
   '           the requests max-width of the widest item
   '--------------------------------------------------------------
   
   Dim x As Integer                      'for readability = key
   Dim results_received As Collection 
   Dim filter As String
   Dim exclude As String 
   Dim result_received As String 
   Dim guessed_user_Name As Collection 
   Dim colsizes As String[]
   
   If txtInboxResults_filter.text <> "" Then
      filter = txtInboxResults_filter.text
   End If
   If txtInboxResults_Exclude.text <> "" Then
      exclude = txtInboxResults_Exclude.text & ";"
   Endif
   cvwResults.Clear()
   With cvwResults
      .Columns.count = 3
      .Columns[0].width = 80
      .Columns[1].width = ((cvwResults.width - 100) * 2) / 3
      '   .Columns[1].width = 
   End With
   If bRefresh Then Currentconsult.Refresh("results_received")
   For Each results_received In currentconsult!results_received
      result_received = ""
      If filter = "" And exclude = "" Then
         If IsNull(results_received!tag_user) Then                         'not user tag = document not filed
            'attempt to guess the user tag
            CurrentObservations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & results_received!pk_document & " ORDER BY observations.observation_date, set_id")
            guessed_user_Name = modParseDocument.Guess_UserName(currentconsult, synonyms, results_received, CurrentObservations)
            If Not IsNull(guessed_user_Name!name) Then
               result_received = "** UNFILED **:" & guessed_user_Name!name
            Else
               result_received = "** UNFILED RESULT **:"
            End If
         Else
            result_received = results_received!tag_user
         End If
         
      Else
         If exclude Then
            If Lower(results_received!tag_user) <> Lower(exclude) Then 
               result_received = results_received!tag_user
            Endif
         Else
            If results_received!tag_user = "" And InStr("unfiled", Lower(filter)) Then
               result_received = "** UNFILED **:"
            Else
               If InStr(Lower(results_received!tag_user), filter) Then 
                  result_received = results_received!tag_user
               Endif
            End If
         End If
      End If
      If result_received <> "" Then 
         x = results_received!pk_document
         cvwResults.Add(x, 0)
         cvwResults[x][0] = Format(results_received!date_created, "dd/mm/yyyy")
         cvwResults[x][1] = result_received 'results_received!tag_user
         cvwResults[x][2] = results_received!originator
      End If   
   Next
   ' Try colsizes = Split(Settings["TabbedLists/cvwResults.columns"], "|")
   ' Try cvwResults.Columns[0].width = colsizes[0]
   ' Try cvwResults.Columns[1].width = colsizes[1]
   ' Try cvwResults.Columns[1].width = colsizes[2]
   
End

Public Sub Editor_ShowPage(sPageName As String, Optional page_tag As String = "", page_data As Variant, Optional additional_page_tag As String = "")
   '----------------------------------------------------------------
   'PURPOSE:   Adds a new page to the progress notes workspace
   '           according to sType parameter passsed to it            
   '           e.g "past history", "new page", "Request" etc
   ' 
   ' A FProgressNotePageContainer doesn't contain the texteditor - just a form
   ' containg two rows of toolbars with combo's and text formatting
   ' buttons, contained in VboxEditor
   '
   ' The container then has added to it either other forms or just
   ' a plain textedit control for pages only needing a text editor
   ' Note that Collections start from a zero(0) count
   ' but the tablist count starts from 1 
   ' hence first tab > EditorPages[0] etc
   ' the page tag is either fixed eg "Skin Excision" or 
   ' is a pk_pasthistory if doing progress notes for a past historyDisplay_Health_Issue
   ' item
   'FIXME convert this routine so that lower(page.title) = tag
   'NB: Though it would seem logical not to repeat for every new page 
   '    the code: WorkspaceEditor.Add(NewPage) 
   '    within each case statement, putting it at the end seems to
   '    make it impossible to auto-set focus on the first control
   '    in the new form.
   '--------------------------------------------------------------
   
   Dim Image_Viewer As FImageViewer
   Dim webpage As FBrowser
   Dim Browser As FHtmlViewer
   Dim GPCOG As FGPCOG
   Dim Cumulative As FCumulative
   Dim Chads As FChads
   Dim K10 As FK10OutcomeTool
   Dim Export_Clinical As FExportClinical
   Dim MultiMedia As FMoviePlayer
   Dim ProgressNotesPage As FProgressNotePage
   Dim PsychoSocialHistory As FPsychoSocialHistory
   Dim AllPreviousNotes As FProgressNotesViewer
   Dim ExcisionPage As FProcedures
   Dim RequestPage As FRequests
   Dim PregnancyPage As FPregnancy
   Dim FamilyHistoryPage As FFamilyHistory
   Dim HealthAssessmentPage As FHealthAssessment
   Dim OccupationalHistoryPage As FOccupation
   Dim MC As FMedicalCertificate
   Dim AllergyPage As FAllergy
   Dim RecallPage As FRecalls
   Dim PrescriptionPage As FPrescriptions
   Dim PastHistoryPage As FPastHistory
   Dim ReferralPage As FReferrals
   Dim MentalHealthPage As FMentalHealth
   Dim VaccinationPage As FVaccinations
   Dim workcoverPage As FWorkCover
   Dim DiabetesCycleOfCare As FDACC
   Dim TravelPage As FTravel
   Dim GeneralCheckup As FCheckups
   Dim page As FLinkContainer
   Dim EditPastNotes As FEditNotes
   Dim PDF As FPDF
   Dim CarePlans As FCarePlanning
   Dim Form_Library As FLibrary
   Dim Pictures As FPictureViewer
   
   '----------------------------------------------------------------------
   'With these pages, we want the appropriate list to be in the foreground
   'So this switches the list
   '----------------------------------------------------------------------
   Select Case sPageName
         
      Case "Referrals"
         TabStrip_Lists.Index = clistReferrals
         Refresh_Section_Instance(const.cSection_Referrals)  
      Case "Requests"
         TabStrip_Lists.index = cListRequests   
         Refresh_Section_Instance(const.cSection_Requests)            'swap tabbed lists to requests
      Case "Workcover"
         TabStrip_Lists.index = cListCertificates
         rbWorkCoverCertificate.value = True
      Case "Measurements"
         TabStrip_Lists.index = clistMeasurements
      Case "Recalls"
         TabStrip_Lists.index = clistRecalls            'show recalls list on tab
   End Select
   
   If Not Editor_SetActivePage(sPageName, page_tag) Then 'check if this page be it section or a result is already showing.
      'fixme this needs to be more sophisticated eg for result, take into account date.
      Select Case sPageName 
         Case "multimedia"
            page = New FLinkContainer 
            With MultiMedia = New FMoviePlayer(page.VBoxEditor) 
               .Init(page_data) 
            End With
            WorkspaceEditor.Add(page)
            page.tag = page_tag
            Page.title = page_tag  
         Case "image"
            page = New FLinkContainer
            With Pictures = New FPictureViewer(page.VBoxEditor)
               .Init(page_data) 
            End With
            WorkspaceEditor.Add(page)
            page.tag = sPageName
            Page.title = sPageName  
            EditorPages.Add(Pictures, sPageName)
         Case "Library"
            page = New FLinkContainer 
            With Form_Library = New FLibrary(page.VBoxEditor)
               .HBox_Heading.Visible = False 
            End With 
            WorkspaceEditor.Add(page)
            page.tag = sPageName
            Page.title = sPageName  
            EditorPages.Add(Form_Library, sPageName)
            Control_For_Focus = Form_Library.TreeView1
         Case "Export File"
            page = New FLinkContainer  
            Export_Clinical = New FExportClinical(page.VBoxEditor) 
            Export_Clinical.Init(currentconsult)
            WorkspaceEditor.Add(page)
            page.tag = sPageName
            Page.title = sPageName  
            EditorPages.Add(Export_Clinical, sPageName)
            ' Control_For_Focus = MC.txtReason
         Case "Medical Certificates"
            page = New FLinkContainer 
            MC = New FMedicalCertificate(page.VBoxEditor) 
            MC.Init(currentconsult)
            WorkspaceEditor.Add(page)
            page.tag = sPageName
            Page.title = sPageName  
            EditorPages.Add(MC, sPageName)
            Control_For_Focus = MC.txtReason
         Case "pdf file"
            page = New FLinkContainer 
            With PDF = New FPDF(page.VBoxEditor) 
               .Init(currentconsult)
               .Load_PDF(page_data)
               .tbSave.Enabled = True
               .tbSave.Visible = True   
               .btRotate.Visible = True   
            End With
            WorkspaceEditor.Add(page)
            page.tag = page_tag  
            Page.title = page_tag   
            EditorPages.Add(PDF, page_tag) 
         Case "pdf document"
            page = New FLinkContainer 
            With PDF = New FPDF(page.VBoxEditor) 
               .Load_PDF(modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/documents/") &/ page_data)
               .btRotate.Visible = True 
               .btRotate.Enabled = True     
            End With
            WorkspaceEditor.Add(page)
            page.tag = page_tag  
            Page.title = page_tag   
            EditorPages.Add(PDF, page_tag) 
         Case "Care Planning"
            Message.title = "CARE PLANNING MODULE" 
            Message.Warning("before loading this module please note:\n\nTHIS MODULE IS NOT FINISHED, IS INACCURATE AND CANNOT BE USED AND WILL PROBABLY CRASH.\n\nUse it at your own peril.")
            
            page = New FLinkContainer 
            CarePlans = New FCarePlanning(page.VBoxEditor) 
            CarePlans.Init(currentconsult)
            WorkspaceEditor.Add(page)
            page.tag = sPageName
            Page.title = sPageName  
            EditorPages.Add(CarePlans, sPageName)
            Control_For_Focus = CarePlans.txtHealthIssue
         Case "browser"
            page = New FLinkContainer 
            With Browser = New FHtmlViewer(page.VBoxEditor) 
               .WebView1.HTML = page_data   
               .Set_Document_Details(Trim(additional_page_tag & " " & page_tag))
            End With  
            obs = New Observer(Browser.mnuTest) As "mnuWebViewTest"
            obs = New Observer(Browser.Webview1) As "WebView"  
            WorkspaceEditor.Add(page)
            page.tag = page_tag  
            Page.title = page_tag   
            EditorPages.Add(Browser, page_tag)
         Case "images"
            page = New FLinkContainer 
            Image_Viewer = New FImageViewer(page.VBoxEditor) 
            Image_Viewer.Init(Currentconsult, page_data)
            WorkspaceEditor.Add(page)
            page.tag = page_tag
            Page.title = page_tag
            EditorPages.Add(Image_Viewer, page_tag)
         Case "GPCOG"
            page = New FLinkContainer 
            GPCOG = New FGPCOG(page.VBoxEditor) 
            GPCOG.Init(Currentconsult)
            WorkspaceEditor.Add(page)
            page.tag = sPageName
            Page.title = sPageName
         Case "K10"
            page = New FLinkContainer 
            K10 = New FK10OutcomeTool(page.VBoxEditor) 
            K10.Init("FClinical") 'not yet integrated as a stand alone tool FIXME
            WorkspaceEditor.Add(page)
            page.tag = sPageName
            Page.title = sPageName
            EditorPages.Add(K10, "K10")
         Case "Chads Calculator"
            page = New FLinkContainer 
            Chads = New FChads(page.VBoxEditor) 
            Chads.Init(Currentconsult)
            WorkspaceEditor.Add(page)
            page.tag = "Chads Calculator"
            page.Title = "Chads Calculator"
            EditorPages.Add(Chads, "Chads Calculator")
         Case "Edit Notes" 
            page = New FLinkContainer
            EditPastNotes = New FEditNotes(page.VBoxEditor)
            EditPastNotes.Init(currentconsult)
            WorkspaceEditor.Add(page)
            page.tag = "Edit Notes"
            page.Title = "Edit Notes"
            EditorPages.Add(EditPastNotes, "Edit Notes")
            '  Control_For_Focus = EditPastNotes.teNotes
         Case "All Previous Notes"
            page = New FLinkContainer
            With AllPreviousNotes = New FProgressNotesViewer(page.VBoxEditor)
               .Init(currentconsult, modProgressNotes.AllProgressNotes_Construct_Html(currentconsult))
            End With
            WorkspaceEditor.Add(page)
            page.tag = "All Previous Notes"
            page.Text = "All Previous Notes"
            EditorPages.Add(AllPreviousNotes, "All Previous Notes")
            Control_For_Focus = AllPreviousNotes.WebView1
         Case "Diabetes Cycle of Care"
            page = New FLinkContainer
            DiabetesCycleOfCare = New FDACC(page.VBoxEditor)
            DiabetesCycleOfCare.Init(Currentconsult)
            page.tag = "Diabetes Annual Cycle of Care"
            page.Text = "Diabetes Annual Cycle of Care"
            WorkspaceEditor.Add(page)
            EditorPages.Add(DiabetesCycleOfCare, "Diabetes Annual Cycle of Care")
         Case "General Checkups"
            page = New FLinkContainer
            GeneralCheckup = New FCheckups(page.VBoxEditor)
            GeneralCheckup.Init(Currentconsult)
            page.tag = "General Checkup"
            page.Title = "General Checkup"
            WorkspaceEditor.Add(page)
            EditorPages.Add(GeneralCheckup, "General Checkup")
         Case "New General Notes"
            '----------------------------------------------------------------------
            'General notes page as the name implies is for notes not tied to a 
            'particular health issue or problem. For particular problems the user
            'should be taught to open an editor tab for that problem.
            '----------------------------------------------------------------------
            page = New FLinkContainer
            ProgressNotesPage = New FProgressNotePage(page.VBoxEditor)
            WorkspaceEditor.Add(page)
            page.tag = "New General Notes"
            page.Text = "New General Notes"
            ProgressNotesPage.set_fk_section(const.cSection_GeneralNotes)
            ProgressNotesPage.lblNotesFor.text = "New General Notes"
            ProgressNotesPage.Init(currentconsult)
            EditorPages.Add(ProgressNotesPage, "New General Notes")
            FGeneralNotesEditor = ProgressNotesPage.Notes_Editor
            ' Control_For_Focus = ProgressNotesPage.Notes_Editor.teNotes
         Case "Travel"
            page = New FLinkContainer
            TravelPage = New FTravel(page.VBoxEditor)
            TravelPage.Init(currentconsult)
            page.tag = "Travel"
            page.Title = "Travel"
            WorkspaceEditor.Add(page)
            EditorPages.Add(TravelPage, "Travel")
            Control_For_Focus = TravelPage.txtDestination
         Case "Occupational History"
            page = New FLinkContainer
            OccupationalHistoryPage = New FOccupation(page.VBoxEditor)
            OccupationalHistoryPage.Init(currentconsult)
            page.tag = "Occupational History"
            page.Title = "Occupational History"
            WorkspaceEditor.Add(page)
            EditorPages.Add(OccupationalHistoryPage, "Occupational History")
            Control_For_Focus = OccupationalHistoryPage.tbNewOccupation
         Case "Health Assessment"
            page = New FLinkContainer
            HealthAssessmentPage = New FHealthAssessment(page.VBoxEditor)
            HealthAssessmentPage.Init(currentconsult)
            page.tag = "HealthAssessment"
            page.Title = "HealthAssessment"
            WorkspaceEditor.Add(page)
            EditorPages.Add(HealthAssessmentPage, "HealthAssessment")    
         Case "Mental Health"
            page = New FLinkContainer
            MentalHealthPage = New FMentalHealth(page.VBoxEditor)
            MentalHealthPage.Init(currentconsult)
            page.tag = "Mental Health"
            page.Title = "Mental Health"
            WorkspaceEditor.Add(page)
            EditorPages.Add(MentalHealthPage, "Mental Health")
            ' Control_For_Focus = MentalHealthPage.WebView1
         Case "Allergies"
            Message.Info("Allergies Module\n\nThis section currently not available")
            Return 
            page = New FProgressNotePageContainer
            AllergyPage = New FAllergy(page.VBoxEditor)
            AllergyPage.Init(currentconsult)
            page.tag = "Allergies"
            page.Title = "Allergies"
            WorkspaceEditor.Add(page)
            EditorPages.Add(AllergyPage, "Allergies")
            Control_For_Focus = AllergyPage.tbNewAllergy
         Case "webpage"
            page = New FLinkContainer
            Page.tag = txtURL.text
            WebPage = New FBrowser(page.VBoxEditor)
            WebPage.Expand = True
            WorkspaceEditor.Add(page)
            page.Title = "Web"
            WebPage.Visible = True 'make it visible, default is not visible, trigger form_load
            WebPage.txtURL.text = page_data
            WebPage.btnGo.Value = True
         Case "Pregnancy"
            Message.info("This section is not available")
            Return 
            page = New FLinkContainer
            PregnancyPage = New FPregnancy(page.VBoxEditor)
            PregnancyPage.Init(currentconsult)
            page.tag = "Pregnancy"
            page.title = "Pregnancy"
            WorkspaceEditor.Add(page)
            EditorPages.Add(PregnancyPage, "Pregnancy")
         Case "Referrals"
            page = New FLinkContainer
            ReferralPage = New FReferrals(page.VBoxEditor)
            ReferralPage.Init(currentconsult)
            page.tag = "Referrals"
            page.Title = "Referrals"
            WorkspaceEditor.Add(page)
            EditorPages.Add(ReferralPage, "Referrals")
            Control_For_Focus = ReferralPage.txtName
         Case "Scripts"
            Message.title = "PRESCRIPTION MODULE" 
            Message.Warning("before loading this module please note:\n\nTHIS MODULE IS NOT FINISHED, IS INACCURATE AND CANNOT BE USED AND WILL PROBABLY CRASH.\n\nUse it at your own peril.")
            page = New FLinkContainer
            PrescriptionPage = New FPrescriptions(page.VBoxEditor)
            PrescriptionPage.set_embedded("FClinical")
            PrescriptionPage.Init(currentconsult)
            page.tag = "Scripts"
            page.Title = "Scripts"
            WorkspaceEditor.Add(page)
            EditorPages.Add(PrescriptionPage, "Scripts")
            Control_For_Focus = PrescriptionPage.txtGeneric
         Case "Family History"
            page = New FLinkContainer
            FamilyHistoryPage = New FFamilyHistory(page.VBoxEditor)
            FamilyHistoryPage.Init(currentconsult)
            page.tag = "Family History"
            page.Title = "Family History"
            WorkspaceEditor.Add(page)
            EditorPages.Add(FamilyHistoryPage, "Family History")
            
         Case "Psycho-Social History"
            ' modUtil.NotImplemented("This section is under reconstruction") 
            page = New FLinkContainer
            PsychoSocialHistory = New FPsychoSocialHistory(page.VBoxEditor)
            PsychoSocialHistory.Init(currentconsult)
            page.tag = "Psycho-Social History"
            page.Title = "Psyscho-Social History"
            WorkspaceEditor.Add(page)
            EditorPages.Add(PsychoSocialHistory, "Psycho-Social History")
            Control_For_Focus = PsychoSocialHistory.teSocialHistory
         Case "Health Issues"
            page = New FLinkContainer
            PastHistoryPage = New FPastHistory(page.VBoxEditor)
            PastHistoryPage.Init(currentconsult)
            page.tag = "Health Issues"
            page.Title = "Health Issues"
            WorkspaceEditor.Add(page)
            EditorPages.Add(PastHistoryPage, "Health Issues")
            Control_For_Focus = PastHistoryPage.tbNewProblem
         Case "Vaccinations"
            page = New FLinkContainer
            VaccinationPage = New FVaccinations(page.VBoxEditor)
            page.tag = "Vaccinations"
            page.Title = "Vaccinations"
            WorkspaceEditor.Add(page)
            VaccinationPage.Init(currentconsult)
            EditorPages.Add(VaccinationPage, "Vaccinations")
            Control_For_Focus = VaccinationPage.tbNewVaccine
         Case "Workcover"
            page = New FLinkContainer
            WorkcoverPage = New FWorkCover(page.VBoxEditor)
            page.tag = "Workcover"
            page.Title = "Workcover"
            WorkspaceEditor.Add(page)
            WorkcoverPage.Init(currentconsult)
            EditorPages.Add(WorkcoverPage, "Workcover")
            Control_For_Focus = WorkcoverPage.lvwClaims
         Case "Requests"
            '------------------------------------------------------------------------
            'Create an  editor page with embedded request form and space for
            'some progress notes underneath
            'Note:   A patient as none or many previously ordered request forms
            '`       i.e currentconsult!RequestForms collection
            '        A consultation has none or many RequestForms ordered just
            '        this consultation
            '        currently this is pointed to by currentconsult.RequestForms
            '------------------------------------------------------------------------
            page = New FLinkContainer
            RequestPage = New FRequests(page.VBoxEditor)
            WorkspaceEditor.Add(page)
            RequestPage.Init(currentconsult)
            page.tag = "Requests"
            page.title = "Requests"
            EditorPages.Add(RequestPage, "Requests")
            Control_For_Focus = RequestPage.txtRequest
         Case "Measurements"
            Return 'nothing done yet
         Case "Recalls"
            page = New FLinkContainer
            RecallPage = New FRecalls(page.VBoxEditor)  'add a recalls page
            WorkspaceEditor.Add(page)
            RecallPage.Init(currentconsult)
            page.tag = "Recalls"                        
            page.Title = "Recalls"                      'put up headings
            EditorPages.Add(RecallPage, "Recalls")
            RecallPage.FAdditionalNotesEditor.bExit = False 
            Control_For_Focus = RecallPage.txtRecallFor
         Case "Skin Excision"
            modUtil.NotImplemented("Skin Excision Module") 
            Return 
            page = New FLinkContainer
            ExcisionPage = New FProcedures(page.VBoxEditor)
            WorkspaceEditor.Add(page)
            page.Title = "Skin Excision"
            page.Tag = "Skin Excision"
            ExcisionPage.Init(currentconsult)
            EditorPages.Add(ExcisionPage, "Skin Excision")
            Control_For_Focus = ExcisionPage.cmbExcisionTypes
      End Select
   End If
   If sPageName <> "webpage" Then 
      txtURL.text = sPageName
   End If   
   
End 

Function Editor_SetActivePage(pagetitle As String, page_tag As String) As Boolean
   '---------------------------------------------------------------
   'PURPOSE: If a page is already opened, the twitch to that page
   'EXPECTS: title of a page as a string
   'RETURNS: boolean flag TRUE if page found, FALSE = not yet added
   'for historical reasons which which will make no sens the
   'FProgressNotePageContainer is only a Vbox. FIXME
   '----------------------------------------------------------------
   ' Dim page As FProgressNotePageContainer
   
   Dim page As FLinkContainer
   
   For Each page In WorkspaceEditor.Windows
      If Page.tag = pagetitle Or page.tag = page_tag Then 
         WorkspaceEditor.ActiveWindow = page
         Return True
      End If
   Next
   Return False
   
End

Public Sub Editor_PastHistory_ProgressNotePage(phx As Collection)
   '--------------------------------------------------------------------------------------------------------
   ' Adds a progress note page to the workspace editor
   '
   ' Note that  any text in the editor is linked to the coding for that problem e.g Hypertension.
   ' Note these pages are held in the EditorPages collection, the pk_pasthistory key is the tag for the page
   '--------------------------------------------------------------------------------------------------------  
   
   Dim page As FLinkContainer
   Dim ProgressNotesPage As FProgressNotePage
   
   vBoxWorkSpace.Visible = True  
   If Not Editor_SetActivePage(phx!description, phx!pk_pasthistory)
      
      page = New FLinkContainer
      page.tag = phx!pk_pasthistory
      page.text = phx!description
      ProgressNotesPage = New FProgressNotePage(page.VBoxEditor)
      ProgressNotesPage.lblNotesFor.text = phx!description & " noted at " & phx!age_onset & "yrs"
      ProgressNotesPage.tag = phx!pk_pasthistory
      '----------------------------------------------------------------- 
      ' Initialises the page, sets the pk_pasthistory on the editor page
      ' .Init() does things including load any existing progress notes
      ' for this problem.
      '-----------------------------------------------------------------
      ProgressNotesPage.set_fk_section(Const.cSection_PastHistory)
      ProgressNotesPage.set_pk_pasthistory(phx!pk_pasthistory)
      ProgressNotesPage.Init(currentconsult)
      EditorPages.Add(ProgressNotesPage, phx!pk_pasthistory)
      WorkspaceEditor.Add(page)
   End If
   
End

Public Sub PastHistory_Delete()
   '------------------------------------------------------------------------------
   'Deletes the past history item, enforces an audit trail and refreshes the lists
   'the notes are kept in the system, just visible now as struck-through with 
   'an audit note written underneath
   '------------------------------------------------------------------------------ 
   
   modDBConnect.BeginTrans()
   modPastHistoryDBI.HealthIssue_Delete(currentconsult, currentPastHistory!pk_pasthistory, currentPastHistory)
   modDBConnect.CommitTrans()
   pasthistory_refresh_lists()
   
End

Public Sub TabStrip_Lists_MouseUp() 
   '----------------------------------------------------------------
   'User has clicked on the tab control which contains all the lists
   'ie prescriptions, recalls, letter, etc.
   'Note that some of the tabs contain **TWO**   lists which we want
   'to toggle eg letters sent, letters received, or requests written
   'results received.
   '
   'There are two lists on many tabstrips. If the tab has already
   'been clicked on, then click won't work, so need the mouse up 
   '---------------------------------------------------------------
   
   If IsNull(currentconsult) Then Return 
   If FMetaData.Visible = True Then
      UnFiled_Document_Metadata_Show(False)
   Endif
   
   Select Case TabStrip_Lists.Index
      Case cListRequests
         If cvwRequests.Visible Then                              'If showing requests made/ordered           
            TabStrip_Lists.ToolTip = "Display available results"  'show results received
            cvwRequests.Visible = False
            cvwResults.Visible = True
            cvwResults_Refresh(True)
            lblRequests.text = "Results Received"
         Else                                                     'else if showing results received                                  
            cvwResults.Visible = False
            cvwRequests.Visible = True                            'show requests order
            TabStrip_Lists.ToolTip = "Display previous requests"
            lblRequests.text = "Requests Ordered"
            modEditAreaHelpers.Patient_Requests_Show(currentconsult, cvwRequests)
         End If
         
      Case clistReferrals
         If cvwReferrals.Visible Then                       'If have been viewing referral letters sent
            cvwReferrals.Visible = False                    'then show letters received
            cvwLettersReceived.Visible = True
            TabStrip_Lists.ToolTip = "Display Letter Received"
            cvwLettersReceived_Refresh(True)
         Else
            cvwReferrals.Visible = True                     'and visa-versa
            lblLetters.text = "Letters Written"
            cvwLettersReceived.Visible = False 
            currentconsult.Refresh("referrals_written")  
            cvwReferrals_Fill()
         End If 
      Case clistMeasurements
         currentconsult.Refresh("measurements_available")  
        ' cvwMeasurements_Refresh()   
      Case cListCertificates
         
         Certificates_Refresh()
   End Select
   
End

Public Sub Certificates_Medical_Refresh()
   
   Dim x As Integer
   Dim sMsg As String 
   Dim cert As Collection
   
   lblCertificateType.text = "Medical Certificates"
   currentconsult.Refresh("medical_certificates")
   cvwCertificates.Clear()
   For Each cert In currentconsult!medical_certificates
      x = cert!pk_medicalcertificate
      cvwCertificates.Add(x, 0)
      cvwCertificates[x][0] = Format(cert!certificate_date, "dd/mm/yyyy")
      cvwCertificates[x][1] = cert!reason
      Select Case cert!fk_lu_illness_temporality
         Case 1
            sMsg = "Is "
         Case 2
            sMsg = "Was "      
            
         Case 3
            sMsg = "Will be "
            
      End Select
      Select Case cert!fk_lu_fitness
         Case 1
            sMsg &= "Fit "
         Case 2
            sMsg &= "Unfit"
      End Select
      sMsg &= " from " & Format(cert!from_date, "dd/mm/yyyy")
      If cert!to_date Then
         sMsg &= " to " & Format(cert!to_date, "dd/mm/yyyy")
      Endif
      cvwCertificates[x][2] = sMsg
      cvwCertificates[x][3] = cert!staff_wholename
   Next
   
End

Public Sub Certificates_Refresh()
   '--------------------------------------------------------------
   'Refreshes the certificate list according to the option buttons
   'medical (sick sheets) workcover or government (e.g centrelink) 
   'fixme: centre link not done
   '---------------------------------------------------------------
   
   Dim cert As Collection
   Dim x As Integer 'for readability
   Dim sMsg As String
   
   With cvwCertificates
      .Clear()
      .Columns.count = 4
      .Columns[0].width = 60
   End With  
   Select Case iCertificatetype
         
      Case const.certificate_type_medical
         Certificates_Medical_Refresh()
      Case const.certificate_type_workcover
         Workcover_Certificates_Refresh()
      Case const.certificate_type_government
         
   End Select
   
End

Public Sub Workcover_Certificates_Refresh()
   
   Dim cert As Collection
   Dim x As Integer
   
   cvwCertificates.Clear()
   lblCertificateType.text = "Workcover Certificates"
   currentconsult.Refresh("workcover_claims")
   For Each cert In currentconsult!workcover_claims
      x = cert!pk_view
      cvwCertificates.Add(x, 0)
      cvwCertificates[x][0] = Format(cert!visit_date, "dd/mm/yyyy")
      cvwCertificates[x][1] = cert!dentifier
      cvwCertificates[x][2] = cert!diagnosis
      cvwCertificates[x][3] = cert!management_plan
   Next
   
End

Public Sub cvwMeasurements_Refresh(Optional filter As String)
   
   ' Dim measurement_type As Collection 
   ' 
   ' cvwMeasurements.Clear()                     '3 columns
   ' For Each measurement_type In currentconsult!measurements_available
   '    If filter Then
   '       If Not (InStr(Lower(measurement_type!identifier), filter)) Then
   '          Continue
   '       End If
   '    End If
   '    cvwMeasurements.Add(measurement_type!pk_loinc, 0)
   '    cvwMeasurements[measurement_type!pk_loinc][0] = measurement_type!identifier
   ' Next
   ' If cvwMeasurements.count Then
   '    cvwMeasurements.MoveFirst
   '    cvwMeasurements.Item.Selected = True
   ' End If
   ' 
End

Public Sub cvwLettersReceived_Refresh(Optional bRefresh As Boolean = False)
   '------------------------------------------------------------------------------
   'Show all letters in the inbox, if bRefresh is true then reload them all
   'If appropriate, filter display according to the document tag or letter author
   'IAN FIXME: REPLACE ME WITH A RELATIVE ONE-LINER.
   '-----------------------------------------------------------------------------
   
   Dim x As Integer                      'for readability = key
   Dim letters_received As Collection 
   Dim bSkip As Boolean
   Dim tag As String
   Dim author As String
   
   With cvwLettersReceived                       '3 columns FIXME MAKE ME CONIGURABEL
      .Clear()
      .Columns.count = 3
      .Columns[0].Width = 80
      .Columns[1].Width = 150 
   End With 
   '--------------------------------------------------------------
   'Loop through the collection, the key of the columnview becomes
   'the primary key of clin_requests.inbox_general 
   'When documents have been filed - user could have inadvertantly
   'pasted in an invisible CR \n line, which causes the list to
   'span muliple lines, so fix this 
   '-------------------------------------------------------------- 
   If bRefresh Then currentconsult.Refresh("letters_received")   
   lblLetters.text = "Letters Received"
   For Each letters_received In currentconsult!letters_received  
      bSkip = False                 
      x = letters_received!pk_document 
      '---------------------------------------
      'Does the user want to filter on author?
      '---------------------------------------
      If txtLetterFilterAuthor.text <> "" Then  'Or txtDocumentFilterTag.text <> "" Then
         '---------------------------------------------------------------------------------------------
         ' Yes: User wants to filter by author, if what they are looking for not found, skip the record  
         '---------------------------------------------------------------------------------------------
         If Not InStr(Lower(letters_received!originator), Trim(Lower(txtLetterFilterAuthor.text))) Then
            bskip = True
         Else
            '---------------------------------------------------------------------
            'Have found the author bit, now do they want a particular tag as well?
            '---------------------------------------------------------------------
            If txtLetterFilterTag.text <> "" Then
               If Not InStr(Lower(letters_received!tag_user), Trim(Lower(txtLetterFilterTag.text))) Then
                  bskip = True
               Else
                  bskip = False 
               End If
            Else
               bskip = False 
            Endif
            
         End If
      Else
         '------------------------------------------------------------------
         'User dosn't want to filter on author - how about just on user tag?
         '------------------------------------------------------------------
         If txtLetterFilterTag.text <> "" Then
            If letters_received!tag_user = "" Then
               If Not InStr(Lower("unfiled"), Trim(Lower(txtLetterFilterTag.text))) Then
                  bskip = True
               Else
                  bskip = False
               End If
            Else
               If Not InStr(Lower(letters_received!tag_user), Trim(Lower(txtLetterFilterTag.text))) Then
                  bskip = True
               Else
                  bskip = False 
               End If
            End If
         Endif
      End If
      
      If bskip = False Then 
         cvwLettersReceived.Add(x, 0)
         If IsNull(letters_received!date_created) Then   'fixme remove me when bug fixed in FMetadata
            Message.info("This letter has no date - there is a bug in EasyGP as it should not have been possible to file this,\n\nPlease contact the developers with details")
         Else
            cvwLettersReceived[x][0] = Format(letters_received!date_created, "dd/mm/yyyy")
         End If   
         If letters_received!tag_user = "" Then
            cvwLettersReceived[x][1] = "** UNFILED LETTER **"
         Else
            cvwLettersReceived[x][1] = Replace$(letters_received!tag_user, "\n", "")
         End If
         cvwLettersReceived[x][2] = letters_received!originator
      End If   
   Next
   If cvwLettersReceived.count = 0 Then
      'If have run out of letters, eg could have just been filing unfiled ones,reload the list
      If txtLetterFilterAuthor.text <> "" Or txtLetterFilterTag.text <> "" Then 
         txtLetterFilterAuthor.text = ""
         txtLetterFilterTag.text = ""
         cvwLettersReceived_Refresh() 'try again
      End If
   Endif
   
End

Public Sub ProgressNotesMenu_Refresh()
   '------------------------------------------------------------------
   'Refreshes the progress notes menu on the main toolbar
   'Clears all existing entries as user could have added new problems
   'rebuilds the menu with menu's for
   '*show all notes
   '*general notes
   '*major problems as submenu
   '*significant active problems as submenu
   '*inactive problems as submenu
   '-------------------------------------------------------------------   
   
   Dim mnu As Menu
   Dim mnu_major As Menu
   Dim mnu_active As Menu
   Dim mnu_inactive As Menu
   Dim PastHistoryCondition As Collection
   Dim bNeedSeparator As Boolean = True
   Dim bNoMainMenu As Boolean = True
   
   If Not currentconsult Then Return
   '----------------------------------------------------------------
   'Clear menu, even if exit this sub, don't want the last patient's
   'menu items on the list
   '----------------------------------------------------------------
   popupMenuProgressNotes.Children.Clear()  
   '-----------------------------------------------------------
   'Clear all children from the popup menu then add two entries
   'one for general notes, one for show all notes
   '-----------------------------------------------------------
   
   mnu = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
   mnu.name = "Show All Notes"
   mnu.caption = "Show All Notes"
   mnu.tag = "show all notes"
   mnu = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
   mnu.name = "General Notes"
   mnu.caption = "General Notes"
   mnu.tag = "general notes"
   If currentconsult!past_history.count = 0 Then Return 
   '---------------------------------------------------------
   'Next add all the major conditions followed by a separator
   '---------------------------------------------------------
   currentconsult.Refresh("past_history")  
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!major Then
         If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_1"
            mnu.caption = ""
            bNeedSeparator = False  
         End If
         If bNoMainMenu Then
            mnu_major = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_major.name = "popupMenuProgressNotes_Major"
            mnu_major.caption = "Major Health Issues"
            mnu_major.tag = "major"
            bNoMainMenu = False  
         End If
         
         mnu = New Menu(mnu_major) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next
   
   bNeedSeparator = True   
   bNoMainMenu = True
   '---------------------------------------------------------------
   'Next add all the significant conditions followed by a separator
   '---------------------------------------------------------------
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!active = True Then
         If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_2"
            mnu.caption = ""
            bNeedSeparator = False  
         End If  
         If bNoMainMenu Then
            mnu_active = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_active.name = "popupMenuProgressNotes_Significant"
            mnu_active.caption = "Significant Issues"
            mnu_active.tag = "significant"
            bNoMainMenu = False  
         End If         
         mnu = New Menu(mnu_active) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next 
   bNeedSeparator = True   
   bNoMainMenu = True
   '--------------------------------------------------------------
   'Lastly add all the inactive conditions followed by a separator
   '--------------------------------------------------------------
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!active = False And PastHistoryCondition!major = False
         If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_3"
            mnu.caption = ""
            bNeedSeparator = False  
         End If  
         If bNoMainMenu Then
            mnu_inactive = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_inactive.name = "popupMenuProgressNotes_Significant"
            mnu_inactive.caption = "Inactive Issues"
            mnu_inactive.tag = "inactive"
            bNoMainMenu = False  
         End If         
         
         mnu = New Menu(mnu_inactive) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next
   
End

Public Sub popupMenuProgressNotes_Click()
   '----------------------------------------------------------------------------
   'Show either all notes, general notes only, or those for a health issue alone
   '----------------------------------------------------------------------------
   
   Dim fk_section As Integer
   Dim shtml As String 
   Dim page_heading As String 
   
   If Not currentconsult Then Return
   
   Select Case Last.tag
      Case "show all notes"
         
         Editor_ShowPage("All Previous Notes")
         Return 
      Case "general notes"
         
         fk_section = const.cSection_GeneralNotes
         page_heading = "GENERAL NOTES"
         shtml = modProgressNotes.ConstructHTML_SingleProblem(currentconsult, 0, fk_section)
      Case Else
         
         fk_section = const.cSection_PastHistory
         shtml = modProgressNotes.ConstructHTML_SingleProblem(currentconsult, Last.tag, fk_section)
         page_heading = UCase(currentconsult!past_history[Last.tag]!description)
   End Select
   
End

Public Sub Pasthistory_Refresh_Lists()
   '------------------------------------------------------------
   'refreshes the cvwProblemsSignificant and cvwProblemsInactive lists
   'the collection members are referenced by the pk_past history
   'which is kept as the key of the list
   '------------------------------------------------------------
   
   Dim PastHistoryCondition As Collection
   Dim sLaterality As String
   
   currentconsult.Refresh("past_history")  
   ProgressNotesMenu_Refresh
   cvwProblemsMajor.columns.Count = 3
   cvwProblemsSignificant.columns.Count = 3 '0 = date problem noted, 1 = empty as spacer, 2 = the description
   cvwProblemsInActive.columns.Count = 3
   
   cvwProblemsInActive.Clear()
   cvwProblemsMajor.Clear()
   cvwProblemsSignificant.Clear()
   
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!major Then
         CurrentPastHistoryList = cvwProblemsMajor
      Else If PastHistoryCondition!active Then
         CurrentPastHistoryList = cvwProblemsSignificant
      Else
         CurrentPastHistoryList = cvwProblemsInActive
      End If
      CurrentPastHistoryList.Add(PastHistoryCondition!pk_pasthistory, 0)
      CurrentPastHistoryList[PastHistoryCondition!pk_pasthistory][0] = PastHistoryCondition!year_onset
      Select Case PastHistoryCondition!fk_laterality
         Case const.LateralityBoth
            sLaterality = "(Bilateral)"
         Case const.LateralityLeft
            sLaterality = "(Left)"
         Case const.LateralityRight
            sLaterality = "(Right)"
         Case const.LateralityNone
            sLaterality = ""
      End Select
      CurrentPastHistoryList[PastHistoryCondition!pk_pasthistory][1] = PastHistoryCondition!description & " " & sLaterality
   Next
   TabStripProblemLists.index = 2
   TabStripProblemLists.Caption = "Inactive (" & Str(cvwProblemsInActive.count) & ")"
   TabStripProblemLists.index = 1
   TabStripProblemLists.Caption = "Significant (" & Str(cvwProblemsSignificant.count) & ")"
   TabStripProblemLists.index = 0
   TabStripProblemLists.Caption = "Major (" & Str(cvwProblemsMajor.count) & ")"
   
End Sub

Public Sub WebBrowserNotes_ZoomIn()
   
   ' WebBrowserNotes.Zoom = Round(WebBrowserNotes.Zoom * 1.25, -2)
   
End

Public Sub WebBrowserNotes_ZoomOut()
   
   ' WebBrowserNotes.Zoom = Round(WebBrowserNotes.Zoom / 1.25, -2)
   
End 

Public Sub tbWebBrowser_Click()
   
   Select Case Last.tag
      Case "progress notes"
         ' 
      Case "refresh"
         
         ' ProgressNotes_ConstructHTML()
      Case "print"
         Print_Browser_Contents()
      Case "clinical summary"
         ' CarePlan_ConstructHTML()
         ' lbl.text = "Health Summary"
      Case "zoom in"
         WebBrowserNotes_ZoomIn
         '  WebBrowserNotes.zoom = modUtil.WebBrowserZoom("zoom in", WebBrowserNotes.zoom)
      Case "zoom out"
         WebBrowserNotes_ZoomOut
         ' WebBrowserNotes.zoom = modUtil.WebBrowserZoom("zoom out", WebBrowserNotes.zoom)
      Case "close"
         ' lblClinicalHeading.text = sMainHeading 'restore the heading
         ' vBoxWebBrowser.Visible = False
         '   Form_Html_Viewer.Visible = False 
         '  vBoxWorkSpace.Visible = True
      Case "brief pi close"
         ' VBoxWorkSpace.Visible = True
         '  Vbox_BriefPI.Visible = False
   End Select
   
End

Public Sub WebCam_Get_Picture()
   
   Dim Container As FLinkContainer
   Dim hCtrl As Control
   Dim frmConsult As FProgressNotePage
   Dim Page As FLinkContainer
   
   For Each page In WorkspaceEditor.Windows
      If Page = WorkspaceEditor.ActiveWindow Then 
         Container = page
         For Each hctrl In page.VBoxEditor.Children     
            If hctrl Is FProgressNotePage Then
               frmConsult = hctrl  
               frmConsult.Notes_Editor.teNotes.text &= ".pic"
               If FWebCam.ShowModal() Then  
                  frmConsult.Notes_Editor.Insert_picture1("clipboard")
               Else
                  frmConsult.Notes_Editor.teNotes.text = Replace(frmConsult.Notes_Editor.teNotes.text, ".pic", "")
               End If  
               Return 
            End If
         Next
      End If
   Next      
   
End

Public Sub MainToolbar_Click()
   
   Dim StartDate As String
   Dim LastDate As String
   Dim Vb As VBox
   Dim Page As FLinkContainer
   Dim x As Integer
   Dim form_About As FAbout
   Dim i As Object
   
   If Not currentconsult Then Return 
   Select Case Last.tag
      Case "Save", "New_Entry", "Preview", "Refresh"
         '--------------------------------------------------------------------------------------------------- 
         'These buttons are designed to operate on any tab in the editor with appropriately named subroutines
         'eg in Referrals "Save" will save the referral etc. If the form on the tab dosn't have a sub-routine
         'like these names it simply trips out
         '--------------------------------------------------------------------------------------------------- 
         Inc Application.Busy 
         For Each page In WorkspaceEditor.Windows
            If page = WorkspaceEditor.ActiveWindow Then
               Try Object.Call(page.VBoxEditor.Children[0], Last.tag)
               If Error Then
                  Message.Info(Error.Text)
               Endif
               Break
            End If   
         Next
         Dec application.Busy
         
      Case "New General Notes"
         Editor_ShowPage(Last.tag) 
      Case "tex summary"
         Health_Summary_Display
      Case "health summary"
         Health_Summary_Display 
      Case "care plan"
         Care_Plan_Display()
      Case "export pdf"
         Export_Records()
      Case "zoom_in", "zoom_out" 
         Zoom(Last.tag) 
      Case "print_content"               'The tag of the button = the name of the subroutine in the object
         'note we can't user "Print" as this is a gambas word and it gets confused. 
         VB = WorkspaceEditor.ActiveWindow.Children[0]   'this is VBox containing the form
         i = VB.Children[0]
         Try Object.Call(i, Last.tag)
         Select Case ActiveWindow_Get_Name() 
            Case "FPrescriptions"
               FPrescriptions.Drug_Print() 'fixme change my name to print_content
         End Select
      Case "general notes"    
         '--------------------------------------------------------
         'If all tabs are closed, allow getting back general notes
         '--------------------------------------------------------  
         If currentconsult Then 
            Editor_ShowPage("New General Notes")
         End If 
      Case "about"
         form_About = New FAbout
         form_About.ShowModal()
      Case "all previous notes"
         Editor_ShowPage("All Previous Notes")
      Case "help" 
         
   End Select
   
End

Public Sub Zoom(zoom As String)
   '------------------------------------------------------------------------------
   'Called by either the Form key press event to emulated eg Firefox Ctrl+/- Zoom
   'or the zoom buttons on the main toolbar MainToolbar_click()
   '------------------------------------------------------------------------------
   
   Dim Vb As VBox
   Dim i As Object
   
   VB = WorkspaceEditor.ActiveWindow.Children[0]   'this is VBox containing the form
   i = VB.Children[0]
   
   Try Object.Call(i, zoom)
   
End

Public Sub Zoom_Out()
   
End

Public Sub Export_Records()
   '------------------------------------------------------
   'Allow user to export as little or as much as they want
   '------------------------------------------------------
   
   WorkspaceEditor.Visible = False  
   
   With Form_ExportClinical
      .Init(currentconsult)
      .Form_PDF.BtOpen.Visible = False
      .Visible = True   
      .Raise   
   End With
   
End

Public Sub Form_KeyPress()
   
   Dim CtrlDown As Boolean
   Dim FnDown As Boolean
   Dim ShiftDown As Boolean
   Dim AltDown As Boolean
   
   Select Case Key.Code
      Case key.F12
         Consult_Save()
   End Select
   Try CtrlDown = Key.Control
   Try AltDown = Key.Alt
   If CtrlDown Then
      Select Case Key.code
         Case Asc("=") 
            Zoom("zoom_in")
         Case Asc("-")
            Zoom("zoom_out") 
      End Select
   End If   
   If AltDown Then 
      Select Case Key.Code 
            
         Case Asc("C")
            '    Editor_ShowPage("Care Planning")
         Case Asc("D")
            Editor_ShowPage("Diabetes Cycle of Care")
         Case Asc("F")
            Editor_ShowPage("Family History")
         Case Asc("A")
            Editor_ShowPage("Allergies")
         Case Asc("T")
            Editor_ShowPage("Travel")
         Case Asc("S")
            Editor_ShowPage("Scripts")
         Case Asc("H")
            Editor_ShowPage("Past History")
         Case Asc("R")
            Editor_ShowPage("Recalls")
         Case Asc("O")
            Editor_ShowPage("Occupational History") 
         Case Asc("L") 'is for 'letter writer..
            Editor_ShowPage("Referrals")
         Case Asc("W")
            Editor_ShowPage("Workcover")
         Case Asc("M")
            Editor_ShowPage("Mental Health Plan")
         Case Asc("I")
            Editor_ShowPage("Vaccinations")
         Case Asc("P")
            Editor_ShowPage("Psycho-Social History") 
      End Select
   End If
   
End

Public Function Notifications_Refresh()
   '---------------------------------------------------
   'Refreshes outstanding notifications for the patient
   '--------------------------------------------------- 
   
   currentconsult.Refresh("staff_tasks")
   If currentconsult!staff_tasks.count Then  'To get the users attention hightlight these
      Vbox_Notifications.Background = Color.red
      tlNotifications.Text = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=2>"
      "<COL WIDTH=256*>"
      "<TR>"
      "<TD WIDTH=100% VALIGN=TOP>"
      tlNotifications.Text &= "<B>There "
      If currentconsult!staff_tasks.count = 1 Then 
         tlNotifications.Text &= "is 1 task"
      Else
         tlNotifications.Text &= " are " & Str(currentconsult!staff_tasks.count) & " tasks "
      Endif
      tlNotifications.Text &= " needing attention</B>"
      tlNotifications.Text &= "</TD></TR></TABLE>"
   Else
      tlNotifications.Text = ""
      Vbox_Notifications.Background = VBox_Notifications.Parent.Background
   Endif 
   
End

Public Sub cvwWorkcover_DblClick()
   
   If Not currentconsult Then Return
   Editor_ShowPage("Workcover")
   
End

Public Sub TabbedLists_LostFocus()
   
   Select Case Last.tag
      Case "requests"
         If Last.Header = True Then
            Last.header = False
         End If
         
   End Select
   
End

Public Sub TabbedLists_Fonts_Select(cvw As Columnview)
   
   If Dialog.SelectFont() Then Return
   
   cvw.Font = Dialog.Font
   
End

Public Sub TabbedLists_Menu()
   
   Dim x As Integer
   Dim menuitem As Menu
   Dim Document As Collection 
   
   If Not currentconsult Then Return 
   Select Case Last.tag
         
      Case "letters received"
         cvwLettersReceived.MoveCurrent()
         If cvwLettersReceived.count Then
            mnuLettersReceived_UndoDelete.Enabled = False                       'assume there is no documents to undelete
            For Each Document In Deleted_Documents
               If Document!fk_lu_display_as = const.Document_Display_As_Letter Then     'there are?
                  mnuLettersReceived_UndoDelete.Enabled = True                    ' enable undelete menu option
                  Break
               Endif
            Next
            If currentconsult!letters_received[cvwLettersReceived.Item.key]!msh_transmitting_entity = "snail_mail" Then 'can only send back non-hl7 e.g scanned FIXME, LATER ?IMAGES
               mnuResultsReceived_Refile.Enabled = True
            Else
               mnuResultsReceived_Refile.Enabled = False
            End If      
            
            mnuLettersReceived.Popup()
         Endif
      Case "referrals"
         '------------------------------------------------------------------------ 
         'If there is a deleted referral, enable that menu item, otherwise disable
         '------------------------------------------------------------------------ 
         If Not IsNull(deleted_referral!pk_referral) Then                          
            mnuTabbedListReferral.Children[6].Enabled = True
         Else
            mnuTabbedListReferral.Children[6].Enabled = False
         Endif
         '----------------------------------------------------------------------------
         'if no letters but a deleted letter exists, must have deleted the last letter
         'So disable all menu items except undo-delete
         '----------------------------------------------------------------------------
         If cvwReferrals.count = 0 Then
            If mnuTabbedListReferral.Children[6].Enabled = True Then  
               For Each menuitem In mnuTabbedListReferral.Children
                  menuitem.Enabled = False
               Next
               mnuTabbedListReferral.Children[6].Enabled = True
            Else
               Return
            End If
         Else
            For Each menuitem In mnuTabbedListReferral.Children
               menuitem.Enabled = True    
            Next
            If IsNull(deleted_referral!pk_referral) Then
               mnuTabbedListReferral.Children[6].Enabled = False  
            Endif
         End If 
         mnuTabbedListReferral.Popup()
      Case "requests"
         If cvwrequests.count Then mnuTabbedListRequest.popup()
      Case "medications"
         If cvwMedications.count Then mnuMedications.popup()
      Case "measurements"
      Case "recalls"
         '------------------------------------------------------------------------
         'Adjust the popup menu text to indicate the usual default repeat interval
         'turn back on (could be off) all menu options
         '------------------------------------------------------------------------
         If cvwRecalls.count Then 
            For Each menuitem In mnuTabbedListRecalls.Children
               menuitem.Enabled = True
            Next
            mnuTabbedListRecalls_Completed.caption = "Mark Completed Repeat in " & currentrecall!interval & currentrecall!abbrev_text
         Else
            '-------------------------------------------------------------
            'allow the menu, but only couple of things     
            'mnuScratchPad_HistoryEntirew entire pad history or above
            '-------------------------------------------------------------
            For Each menuitem In mnuTabbedListRecalls.Children
               Select Case menuitem.Tag
                  Case "view audit trail", "help", "exit"
                     menuitem.Enabled = True  
                  Case Else        
                     menuitem.Enabled = False  
               End Select
            Next
         End If
         mnuTabbedListRecalls.popup()
      Case "results"
         'FIXME and similar instances, need to disable the entire menu if the
         'count is zero, in situation where one or more undelete exists
         cvwResults.MoveCurrent()
         If cvwResults.count Then 
            mnuResultsReceived_UndoDelete.Enabled = False                       'assume there is no documents to undelete
            For Each Document In Deleted_Documents
               If Document!fk_lu_display_as = const.Document_Display_As_Result Then     'there are?
                  mnuResultsReceived_UndoDelete.Enabled = True                    ' enable undelete menu option
                  Break
               Endif
            Next
            If currentconsult!results_received[cvwResults.Item.key]!msh_transmitting_entity = "snail mail" Then 'can only send back non-hl7 e.g scanned FIXME, LATER ?IMAGES
               mnuResultsReceived_Refile.Enabled = True
            Else
               mnuResultsReceived_Refile.Enabled = False
            End If      
            mnuResultsReceived_ShowGraphable()
            mnuResultsReceived.Popup()
         End If   
      Case "inbox"
      Case "certificates"
         If cvwCertificates.count Then mnuCertificates.popup()
   End Select
   
End

Public Sub mnuResultsReceived_ShowGraphable()
   '----------------------------------------------------------
   'User has clicked on the popup menu for results
   'Get all measurements available for this result or results
   'Load them onto the graphable menu
   'or disable this option if nothing is graphable
   '----------------------------------------------------------
   
   Dim graphable_item As Collection
   Dim graphable_items As Collection
   Dim mnu As Menu
   
   cvwResults.MoveCurrent
   mnuResultsReceived_Graphable.Children.Clear()
   graphable_items = modMeasurementsDBI.Get_Graphable(currentconsult!results_received[cvwResults.Item.key]!pk_document)
   If graphable_items.count = 0 Then
      mnuResultsReceived_Graphable.Enabled = False
      Return
   Else  
      mnuResultsReceived_Graphable.Enabled = True  
   End If   
   For Each graphable_item In graphable_items
      mnu = New Menu(mnuResultsReceived_Graphable) As "mnuResultGraphable" 
      mnu.name = graphable_item!identifier  
      mnu.caption = graphable_item!identifier  
      mnu.tag = graphable_item!loinc
   Next
   
End 

Public Sub Tabulated_Results_Show()
   
End

Public Sub mnuResultsReceived_Click()
   '--------------------------------------------------------
   'User has clicked on the menu over result's received
   'Note that graph items, which are added 'on the fly' are
   'handled with mnuResultGraphable_Click()
   '--------------------------------------------------------
   
   Dim D As Collection 
   Dim TabulatedResults As CTabResults
   
   cvwResults.MoveCurrent()
   Select Case Last.tag
      Case "tabulated cumulative results"
         TabulatedResults = New CTabResults(currentconsult, currentconsult!results_received[cvwResults.Item.key]!tag_user, currentconsult!results_received[cvwResults.Item.key]!pk_document)
         Editor_ShowPage("browser", "Tabulated Results", TabulatedResults.Get_HTML())
      Case "fonts"
         modUtil.Columnview_SetFont(cvwResults, "TabbedLists")
      Case "adjust columns"
         cvwResults.Header = True
         cvwResults.Resizable = True 
      Case "edit metadata"
         Document_Edit_Metadata(currentconsult!results_received, cvwResults.Item.key)
      Case "delete"                                              'deletes a document and enforces an audit trail
         If modArchiveDocumentsDBI.Delete(currentconsult, currentconsult!results_received, cvwResults.Item.key, const.cSection_Documents, const.sAuditAction[const.cAuditAction_MarkDeleted], "Result:" & currentconsult!results_received[cvwResults.Item.key]!tag_user) Then 
            modDBConnect.CommitTrans()
            Deleted_Documents.Add(currentconsult!results_received[cvwResults.Item.key], cvwResults.Item.key)            'keep for undelete
            cvwResults_Refresh(True)                                'refresh the collection and reshow the list
         End If
      Case "delete duplicate"             'Delete the result, but don't enforce a reason
         If modArchiveDocumentsDBI.Delete(currentconsult, currentconsult!results_received, cvwResults.Item.key, const.cSection_Documents, const.sAuditAction[const.cAuditAction_DeleteDuplicateDocument], "duplicate result") Then 
            modDBConnect.CommitTrans()
            Deleted_Documents.Add(currentconsult!results_received[cvwResults.Item.key], cvwResults.Item.key)
            cvwResults_Refresh(True)   
         End If
      Case "delete preliminary result"
         If modArchiveDocumentsDBI.Delete(currentconsult, currentconsult!results_received, cvwResults.Item.key, const.cSection_Documents, const.sAuditAction[const.cAuditAction_DeletePreliminaryResult], "preliminary result") Then 
            modDBConnect.CommitTrans()
            Deleted_Documents.Add(currentconsult!results_received[cvwResults.Item.key], cvwResults.Item.key)
            cvwResults_Refresh(True)   
         End If
         
      Case "undo delete"
         For Each D In Deleted_Documents
            If D!fk_lu_display_as = const.Document_Display_As_Result Then
               If modArchiveDocumentsDBI.UnDelete(currentconsult, d!pk_document, const.cSection_Documents) Then
                  modDBConnect.CommitTrans()
                  Deleted_Documents.Remove(d!pk_document)
                  cvwResults_Refresh(True)    
                  Break
               Endif
            Endif
         Next
      Case "do not show"
         'Enable user to permanantly remove from sight unwanted results eg INR's in patient no longer on coumadin. 
      Case "refile document"
         If modArchiveDocumentsDBI.Document_SendBack_For_ReFiling(currentconsult, currentconsult!results_received, cvwResults.Item.key) Then 'commit done in that routine
            cvwResults_Refresh(True)   
         Endif
      Case "display"
         Inbox_showResult()
      Case "display as letter"
         If modArchiveDocumentsDBI.Change_Display_Mode(currentconsult, currentconsult!results_received, cvwResults.Item.key, const.Document_Display_As_Letter, const.cSection_Documents, "display mode change from result to letter") Then
            cvwResults_Refresh(True)
         Endif
      Case "audit trail" 
         Document_AuditTrail_Show(cvwResults.Item.Key)
      Case "print"
   End Select
   
End 

Public Sub Document_AuditTrail_Show(fk_document As Integer)
   '---------------------------------------------------------
   'Display html of the audit trail of a document
   'At the moment - only displaying staff tasks if they exist
   '---------------------------------------------------------
   
   Dim sHtml As String
   
   sHtml = modArchiveDocumentsDBI.Staff_Tasks_Document_Audit_Trail(fk_document)
   shtml &= "<HTML><BODY><TABLE><BR><B>Document Actioning</B><BR>" & modHTML.HTML_Template_Audit_Row_Heading() 
   shtml &= modAudit.MakeTrail("documents.documents", fk_document)
   shtml &= "</TABLE>"
   shtml &= "</BODY></HTML>"
   Editor_ShowPage("browser", "Audit Trail", sHtml)
   
End

Public Sub Document_Edit_Metadata(documents As Collection, document_key As Integer, Optional sHtml As String) ' As Integer, user_tag As String)
   '------------------------------------------
   'Edits the metadata of an existing document
   'If unfiled sHtml is not null
   '------------------------------------------
   
   With FMetaData
      .Init("Allocated Documents")                                      'gui elements for filing, not allocating like in scanning
      .Edit(documents, document_key)     
      .bexit = True
      .HBox_Save.visible = True                                           'contains the save button
      .hBox_Urgency.Visible = False                                        'not needed as already in the patients notes
      .bExit = False   
      If shtml <> "" Then
         .Document_HTML_Set(shtml)
      End If   
      .txtUserObservationName.pos = 0   
      .txtUserObservationName.SetFocus()
   End With 
   UnFiled_Document_Metadata_Show(True)                                    'set up FClinical to show FMetadata
   
End

Public Sub Document_Print(fk_document As Integer)
   '--------------------------------------------------------------
   'Print a document by its key
   'All documents have a filename - but they are either PDF or HL7
   '--------------------------------------------------------------
   
   Dim Document As Collection 
   Dim Filename As String
   '---------------------------------------------------
   'Is the document a result?, if not, must be a letter
   'i.e decide which collection to pull them from
   '---------------------------------------------------
   Try Document = currentconsult!results_received[fk_document]         '? a result??
   If IsNull(document) Then                                            'it wasn't a result?             
      Try Document = currentconsult!letters_received[fk_document]      '? a letter ??   
   End If  
   '----------------------------------------------------------
   'Having got the document, print according to file extension
   'All our non scanned documents are html
   'FIXME: could be printing a picture
   '----------------------------------------------------------
   Select Case File.Ext(Document!source_file)
      Case "pdf"
         modPrinting.Print_PDF(modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/documents/") &/ Document!source_file)
      Case "jpg", "png", "tiff", "jpeg", "bitmap"
         
      Case Else
         modPrinting.PrintHtml(Document!html)
   End Select
   
End

Public Sub mnuResultGraphable_Click()
   
   Dim GraphableItem_Data As New Collection 
   '-----------------------------------------------------------------
   'User has clicked on a graphable item on the results received list
   '-----------------------------------------------------------------
   Measurement_Graph(Last.tag, Last.caption)
   GraphableItem_Data!loinc = Last.tag
   GraphableItem_Data!name = Last.caption 
   pbGraphName.tag = GraphableItem_Data
   
End 

Public Sub mnuTabbedListReferral_Click()
   
   Dim inclusions As Collection
   Dim inclusion As Collection
   
   cvwReferrals.MoveCurrent()
   Select Case Last.tag
      Case "delete"
         Referral_Delete()
      Case "undo delete"
         Referral_UnDelete() 
      Case "print no inclusions"         'single copy no included documents
         Re_Print_Document_Html(currentconsult!referrals_written[cvwReferrals.Item.key]!letter_html)
      Case "print with inclusions"      ' single copy including original documents sent.
         Re_Print_Document_Html(currentconsult!referrals_written[cvwReferrals.Item.key]!letter_html)
         Inclusions = modReferralsDBI.Inclusions_Get(currentconsult!patient!fk_patient, False, False, currentconsult!referrals_written[cvwReferrals.Item.key]!pk_referral)
         For Each Inclusion In Inclusions
            Document_Print(inclusion!fk_document)
         Next
      Case "email"
         modUtil.NotImplemented("Email Referral")
      Case "preview"
         Referral_Letter_Display()
      Case "sort by letter tag"
         modUtil.NotImplemented("Sorting by letter tag")
      Case "fonts"
         modUtil.Columnview_SetFont(cvwReferrals, "TabbedLists")
      Case "help"
   End Select
   
End

Public Sub Referral_Letter_Display()
   '------------------------------------------------------------------------
   ' Display a previously written referral or letter on new tab in workspace
   '------------------------------------------------------------------------
   
   cvwReferrals.MoveCurrent()
   Editor_ShowPage("browser", currentconsult!referrals_written[cvwReferrals.Item.key]!tag, modConsultDBI.Images_Get(currentconsult!referrals_written[cvwReferrals.Item.key]!letter_html))
   
End

Public Sub Referral_UnDelete()
   '----------------------------------------------------------
   'Single level un-delete of a the last deleted letter written
   'remove the audit notes and strike through of the text
   '-----------------------------------------------------------
   
   Dim sHtml As String
   Dim fk_progressnote As Integer
   Dim fk_referral As Integer
   Dim pn As Collection
   Dim charpos As Integer
   
   ' modUtil.NotImplemented("Undelete referral is buggy.... sorry")
   '   Return 
   fk_progressnote = deleted_referral!fk_progressnote
   fk_referral = deleted_referral!pk_referral    
   sHtml = deleted_referral!letter_html
   For Each PN In currentconsult!progress_notes
      If PN!pk_progressnote = fk_progressnote Then
         charpos = InStr(pn!notes, "</TABLE>")
         pn!notes = Left(pn!notes, charpos + 7)
         pn!notes = Replace$(pn!notes, "BGCOLOR='#CFCFCF'", "")
         pn!notes = Replace$(pn!notes, "<strike>", "")
         pn!notes = Replace$(pn!notes, "</strike>", "")
         pn!notes = "<P>" & pn!notes & "</P>"
         modDBConnect.update("clin_consult.progressnotes", Null, ["pk": fk_progressnote, "notes": pn!notes])
         modDBConnect.update("clin_referrals.referrals", Null, ["pk": fk_referral, "deleted": False])
         modDBConnect.CommitTrans()
         Deleted_Referral = New Collection
         Refresh_AllPreviousNotes() 
         Refresh_Section(const.cSection_Referrals)
         Break
      Endif
   Next
   
End

Public Sub Referral_Delete()
   
   Dim sHtml As String
   Dim referral As New Collection
   Dim fk_progressnote As Integer
   Dim fk_referral As Integer
   Dim pn As Collection  
   Dim fk_reason As Integer
   Dim reason As String
   
   cvwReferrals.MoveCurrent()
   If Message.Warning("Are you sure you wish to delete this referral", "Yes", "No") = 2 Then Return 
   referral = currentconsult!referrals_written[cvwReferrals.Item.key]
   fk_progressnote = referral!fk_progressnote
   fk_referral = referral!pk_referral
   sHtml = referral!letter_html
   For Each PN In currentconsult!progress_notes
      If PN!pk_progressnote = fk_progressnote Then
         pn!notes = Replace$(pn!notes, "<TABLE", "<TABLE BGCOLOR='#CFCFCF' ") 
         pn!notes = Replace$(pn!notes, "<small>", "<strike><small>", gb.IgnoreCase)
         pn!notes = Replace$(pn!notes, "</small>", "</strike></small>", gb.IgnoreCase)
         Faudit.Init(": Delete Referral Letter", "clin_consult.progressnotes/clin_referrals.referrals", "Letter summary:" & referral!tag)
         fk_reason = FAudit.ShowModal() 
         modDBConnect.CommitTrans()  'otherwise if a new reason it won't have been comitted
         reason = modAudit.Get_Reason_Using_pk(fk_reason)
         pn!notes = Replace(pn!notes, "</TABLE>", "</TABLE><small><B><I>Audit note:</B> this referral letter was deleted by " & modDBConnect.currentUser!wholename & " on " & Format(Now, "dd/mm/yyyy") & " who gave this explanation: '" & reason & "'</I></small>")
         modDBConnect.update("clin_consult.progressnotes", Null, ["pk": fk_progressnote, "notes": pn!notes])
         modDBConnect.update("clin_referrals.referrals", Null, ["pk": fk_referral, "deleted": True])
         modDBConnect.CommitTrans() 
         Deleted_Referral = referral
         Refresh_AllPreviousNotes() 
         Refresh_Section(const.cSection_Referrals)
         Break
      Endif
   Next
   
End

Public Sub Recalls_Audit_Trail(sAudit_action As String)
   '------------------------------------------------------------
   'Displays either history of current recall or all the recalls
   'according to the mnuTabbedListRecalls.tag property passed as
   'saudit_Action 
   '------------------------------------------------------------
   
   Dim audit_rows As Collection
   Dim tempstring As String 
   Dim recall As Collection
   
   Select Case sAudit_action
      Case "view recall history" 
         tempstring = "<HTML><BODY><TABLE>" & modHTML.HTML_Template_Audit_Row_Heading() 
         tempstring &= modAudit.MakeTrail("clin_recalls.recalls", currentrecall!pk_recall)
         tempstring &= "</TABLE>"
         tempstring &= "</BODY></HTML>"
         FClinical.WebBrowser_show(tempstring, "Recall Audit Trail for " & currentrecall!reason)
      Case "view audit trail"
         tempstring = "<HTML><BODY><TABLE>" & modHTML.HTML_Template_Audit_Row_Heading() & "</TABLE>"
         For Each recall In modRecallsDBI.get_logged(currentconsult!patient!fk_patient, False, True)
            tempstring &= "<TABLE>"
            tempstring &= modAudit.MakeTrail("clin_recalls.recalls", recall!pk_recall)
            tempstring &= "</TABLE><HR>"
         Next
         tempstring &= "</BODY></HTML>"
         FClinical.WebBrowser_show(tempstring, "Recall Audit Trail - all recalls - logged newest to oldest")
   End Select
   
End

Public Sub PastHistory_Audit_Trail()
   
   Dim audit_rows As Collection
   'FIXME: use common audit trail system
   'audit_rows = modAuditDBI.AuditTrail_Get_PastHistory("clin_history.vwpasthistoryaudit", currentconsult!patient!fk_patient, currentpasthistory!pk_pasthistory)
   'FClinical.WebBrowser_show(modAuditDBI.Audit_HTML_Construct(audit_rows, "Past History").GetData())
   
End

Public Sub mnuTabbedListRecalls_click()
   '-----------------------------------------------------------------
   'User has clicked on the recalls list, execute the various options
   'e.g delete the recall, mark it completed, reschedule etc
   '-----------------------------------------------------------------
   
   Select Case Last.tag
      Case "print"
         modUtil.NotImplemented("Print the recall")
      Case "email"
         modUtil.NotImplemented("Email the recall")
      Case "notify front desk"
         modUtil.NotImplemented("Notify front desk about the recall")
      Case "view recall history", "view audit trail"
         Recalls_Audit_Trail(Last.tag)
      Case "adjust column widths"
         ' modUtil.NotImplemented("Adjust the column widths")
         cvwrecalls.Header = True
         cvwRecalls.Resizable = True
      Case "fonts"
         modUtil.Columnview_SetFont(cvwRecalls, "TabbedLists")
      Case Else
         modRecallsMenu.Process(currentrecall, Last.tag, currentconsult)
   End Select
   
End

Public Sub mnuTabbedListRequest_Click()
   '-----------------------------------------------------------------------------------
   'This is the menu which has popped up over the requests the user has ordered e.g FBC
   'Process the menu options
   'Explanation Split(cvwRequests.item.key, "-").Count = 3
   '- was included because at some stage I allowed double clicking to expand the
   '- columnview and show the requests on form, with sub lines being the 
   '- individual requests - I'll probably remove this as not found useful
   '-----------------------------------------------------------------------------------   
   
   Dim Filename As String
   Dim RequestForm As New Collection 
   
   cvwRequests.MoveCurrent()
   If Split(cvwRequests.item.key, "-").Count = 3 Then
      Try RequestForm = currentconsult!requests_ordered[Right(cvwRequests.item.key, Len(cvwRequests.item.key) - InStr(cvwRequests.Item.key, "-"))]
   Else
      RequestForm = currentconsult!requests_ordered[cvwRequests.item.key]
   End If
   Select Case Last.tag
      Case "adjust columns"                  'allow user to adjust the column sizes
         cvwRequests.Header = True
         cvwRequests.Resizable = True 
      Case "delete"
         Try modRequestsDBI.RequestForm_Delete(currentconsult, RequestForm)
         Deleted_Request = RequestForm
         Reload_Tab("Requests")
      Case "undo delete"
         Try modRequestsDBI.RequestForm_UnDelete(Deleted_Request)
         Deleted_Request = New Collection 'reset, but fix this to multi-delete
      Case "re-order"
         modUtil.NotImplemented("Re-ordering from past forms is not yet implemented")
      Case "re-print"
         Try modPrinting.Print_latex(RequestForm!latex)
      Case "preview form"
         Try modRequestsDBI.RequestForm_Preview(RequestForm)       
      Case "fonts"
         modUtil.Columnview_SetFont(cvwRequests, "TabbedLists")
   End Select
   
End

Public Sub tbPatientPicture_Menu()
   
   mnuPatientPhoto.Popup()
   
End

Public Sub mnuMedications_Click()
   
   cvwMedications.MoveCurrent()
   Select Case Last.tag
      Case "delete" 
         If modPrescribingDBI.Medication_Delete(currentconsult, currentconsult!medications, cvwmedications.Item.key, const.cSection_Prescriptions, const.sAuditAction[const.cAuditAction_MarkDeleted], "Medication:" & currentconsult!medications[cvwmedications.Item.key]!generic) Then 
            modDBConnect.CommitTrans()
            Deleted_medications.Add(currentconsult!medications[cvwmedications.Item.key], cvwmedications.Item.key)
            cvwMedications_Refresh() 'refresh the collection and reshow the list
         End If
         
   End Select
   
End

Public Sub mnuLettersReceived_Click()
   
   Dim D As Collection
   
   cvwLettersReceived.MoveCurrent()
   Select Case Last.tag
      Case "help"                          'show help for this section 
      Case "columns"                       'adjust and save column widths
      Case "fonts"                         'adjust and save font"
         modUtil.Columnview_SetFont(cvwLettersReceived, "TabbedLists")
      Case "display"                       'show the letter
         Document_Display(currentconsult!letters_received, cvwLettersReceived.Item.key)              'display document
      Case "print"                         'print the letter'
         
      Case "display as result"                'change fk_lu_display as to const.Document_Display_As_Result
         If modArchiveDocumentsDBI.Change_Display_Mode(currentconsult, currentconsult!letters_received, cvwLettersReceived.Item.key, const.Document_Display_As_Result, const.cSection_Documents, "display mode changed from letter to result") Then
            cvwLettersReceived_Refresh(True)
         Endif
      Case "delete"                        'mark this as deleted but enforce a reason
         If modArchiveDocumentsDBI.Delete(currentconsult, currentconsult!letters_received, cvwLettersReceived.Item.key, const.cSection_Documents, const.sAuditAction[const.cAuditAction_MarkDeleted], "Letter re:" & currentconsult!letters_received[cvwLettersReceived.Item.key]!tag_user) Then 
            modDBConnect.CommitTrans()
            Deleted_Documents.Add(currentconsult!letters_received[cvwLettersReceived.Item.key], cvwLettersReceived.Item.key)
            cvwLettersReceived_Refresh(True) 'refresh the collection and reshow the list
         End If
      Case "delete duplicate"             'Delete the letter, but don't enforce a reason
         If modArchiveDocumentsDBI.Delete(currentconsult, currentconsult!letters_received, cvwLettersReceived.Item.key, const.cSection_Documents, const.sAuditAction[const.cAuditAction_DeleteDuplicateDocument], "duplicate letter") Then 
            modDBConnect.CommitTrans()
            Deleted_Documents.Add(currentconsult!letters_received[cvwLettersReceived.Item.key], cvwLettersReceived.Item.key)
            cvwLettersReceived_Refresh(True)   
         End If
      Case "undo delete"
         'find the last deleted letter
         For Each D In Deleted_Documents
            If D!fk_lu_display_as = const.Document_Display_As_Letter Then
               If modArchiveDocumentsDBI.UnDelete(currentconsult, d!pk_document, const.cSection_Documents) Then
                  modDBConnect.CommitTrans()
                  Deleted_Documents.Remove(d!pk_document)
                  cvwLettersReceived_Refresh(True)   
                  Break
               Endif
            Endif
         Next
         
      Case "edit"            'edit the metadata
         Document_Edit_Metadata(currentconsult!letters_received, cvwLettersReceived.Item.key)
      Case "link"                          'link to a health issue not yet implemented
         modUtil.NotImplemented("Link letter to health issue")
      Case "print single"
         Document_Print("single")
      Case "print all"
         Document_Print("all")
      Case "select all"
         cvwLettersReceived.SelectAll()
      Case "unselect"
         cvwLettersReceived.UnselectAll()
      Case "audit trail"
         Document_AuditTrail_Show(cvwLettersReceived.Item.Key)
      Case "refile document"
         If modArchiveDocumentsDBI.Document_SendBack_For_ReFiling(currentconsult, currentconsult!letters_received, cvwLettersReceived.Item.key) Then 'commit done in that routine
            cvwLettersReceived_Refresh(True)   
         Endif
         
   End Select
   
End

Public Sub mnuPatientPhoto_Click()
   
   Select Case Last.tag
      Case "acquire"
         PatientPhoto_Acquire()
      Case "import"
         PatientPhoto_Import()
      Case "edit"
         PatientPhoto_Edit()
      Case "save"
         PatientPhoto_Save()
   End Select
   
End

Public Sub PatientPhoto_Acquire()
   
   Message.info("Photo Acquisition is not implemented yet")
   
End

Public Sub PatientPhoto_Import()
   
   Message.info("Photo Import is not implemented yet")
   
End

Public Sub PatientPhoto_Edit()
   
   Message.info("Photo Editing is not implemented yet")
   
End

Public Sub PatientPhoto_Save()
   
   Message.info("Photo Saving is not implemented yet")
   
End

Public Sub popupMnu_ProblemList_Click()
   '----------------------------------------------------------------------
   'User has clicked on the popup menu over the problem lists in FClinical
   '----------------------------------------------------------------------
   
   Dim PHPage As FPastHistory
   Dim datachanged As Boolean 
   Dim sHtml As String
   
   Select Case Last.tag  
      Case "add"
         Editor_ShowPage("Health Issues")
      Case "edit"
         Editor_ShowPage("Health Issues")
         '----------------------------------------------------------
         'Now find that page in the editor and load the past history 
         'into the editing area
         '-----------------------------------------------------------
         PHPage = EditorPages["Health Issues"]
         PHPage.pk_pasthistory_set(currentpasthistory!pk_pasthistory)
         PHPage.HealthIssue_Display()
      Case "link to coding system"
         
      Case "view all previous notes"
         ' shtml = modProgressNotes.ConstructHTML_SingleProblem(currentconsult, currentpasthistory!pk_pasthistory, const.cSection_PastHistory)
         '  form_clinical.vBoxWebBrowser.Visible = True
         '  form_clinical.vBoxWorkSpace.Visible = False 
         '  lblWebBrowserNotes.Text = UCase(currentconsult!past_history[currentpasthistory!pk_pasthistory]!description)
         '    Form_Html_Viewer.lblViewerCaption.text = UCase(currentconsult!past_history[currentpasthistory!pk_pasthistory]!description)
         ' currentTemporaryWebbrowserHTMLFilename = modHTML.Display_HTML_Return_Filename(shtml, WebBrowserNotes, "progress_notes")
         '   WebBrowserNotes.html = shtml
         ' Form_Html_Viewer.WebView1.HTML = shtml
      Case "audit trail"
         PastHistory_Audit_Trail()
      Case "new notes"
         Editor_PastHistory_ProgressNotePage(currentpasthistory)
      Case "make significant"
         currentconsult!past_history[CurrentPastHistoryList.Current.key]!active = True
         currentconsult!past_history[CurrentPastHistoryList.Current.key]!major = False
         datachanged = True
      Case "make significant with explanation"
         
      Case "make major"
         currentconsult!past_history[CurrentPastHistoryList.Current.key]!major = True
         currentconsult!past_history[CurrentPastHistoryList.Current.key]!active = False
         datachanged = True
      Case "make major with explanation"
         
      Case "make inactive"
         currentconsult!past_history[CurrentPastHistoryList.Current.key]!active = False
         currentconsult!past_history[CurrentPastHistoryList.Current.key]!major = False
         datachanged = True
      Case "make inactive with explanation"
         
      Case "mark as operation" 
         currentconsult!past_history[CurrentPastHistoryList.Current.key]!operation = True
         datachanged = True  
      Case "mark as confidential"
         currentconsult!past_history[CurrentPastHistoryList.Current.key]!confidential = True
         datachanged = True  
      Case "delete"
         PastHistory_Delete
      Case "help"
         form_clinical.WebBrowser_Show(Application.path & "/help/health-issues.html", "Please consult the help files for further detailed information on this topic")
         
   End Select
   
   If datachanged Then
      modPastHistoryDBI.Save(currentconsult, CurrentPastHistoryList.Current.key, currentconsult!past_history[CurrentPastHistoryList.Current.key])
      Pasthistory_Refresh_Lists()
   End If   
   popupMnu_ProblemList.hide()
   
End Sub 

Public Sub PastHistoryLists_Menu()
   
   popupMnu_ProblemList_MakeMajor.Enabled = True 
   popupMnu_ProblemList_MakeSignificant.Enabled = True  
   popupMnu_ProblemList_MakeInactive.Enabled = True   
   
   With Last
      If .count Then
         .MoveCurrent
         ' popupMnu_ProblemList.caption = currentpasthistory!description
         '  popupMnu_ProblemList_NewNotes.caption = "Add new notes for " & currentpasthistory!description
         popupMnu_ProblemList_title.caption = UCase(currentpasthistory!description)
         Select Case Last.tag
            Case "major"
               popupMnu_ProblemList_MakeMajor.Enabled = False  
               popupMnu_ProblemList_MakeMajor_Explain.Enabled = False  
            Case "significant"
               popupMnu_ProblemList_MakeSignificant.Enabled = False  
               popupMnu_ProblemList_MakeSignificant_Explain.Enabled = False  
            Case "inactive" 
               popupMnu_ProblemList_MakeInactive.Enabled = False   
               popupMnu_ProblemList_MakeInactive_Explain.Enabled = False  
         End Select
         popupMnu_ProblemList.Popup
      End If
   End With
   
End

Public Sub PastHistoryLists_Select()
   '--------------------------------------------------
   'Moves internal record pointer of the last list the
   'user clicked on to match the row they clicked on.
   'Sets active past history item to that highlighted.
   'Note this routine is needed by:
   '         PastHistoryLists_DblClick()
   '         PastHistoryLists_menu()
   '--------------------------------------------------
   
   CurrentPastHistoryList = Last
   With Last
      If .count Then
         .MoveCurrent
         currentpasthistory = currentconsult!past_history[.item.key]
      End If
   End With
   
End

Public Sub PastHistoryLists_DblClick()
   '-----------------------------------------------------
   'Called when the user clicks on any of the three
   'past history lists (Major, significant, inactive
   'Creates a new editor page ie FProgressNotePage instance
   'in the main tab control
   '-----------------------------------------------------
   
   If Not currentconsult Then Return
   If Not Last.count Then Return 
   
   Last.MoveCurrent()
   Editor_PastHistory_ProgressNotePage(currentconsult!past_history[Last.item.key])
   
End

Public Sub TabbedLists_DblClick()
   
   If IsNull(currentconsult) Then Return
   Last.MoveCurrent 'set internal cursor
   Select Case Last.tag
         
      Case "letters received" 
         Document_Display(currentconsult!letters_received, cvwLettersReceived.Item.key)              'display document
      Case "referrals"
         Referral_Letter_Display()
      Case "results"
         Inbox_showResult()
   End Select
   
End

Public Sub Document_Display(documents As Collection, document_key As Integer)
   '---------------------------------------------------------------------------------
   'Displays a document currently in central area until IAN does the emulated browser
   'If document metadata is not complete, prompt user by showing the metadata
   '---------------------------------------------------------------------------------
   
   Dim filename As String = documents[document_key]!source_file
   Dim currentobservations As Collection 
   Dim shtml As String 
   
   Inc application.Busy
   Try UnFiled_Document_Metadata_Show(False)                               'remove this it could be showing if not completed from previous document
   '-----------------------------------------------------------------------------------------------------
   'If there is no tag_user, then this is an unfiled document - i.e document can't be filed without a tag
   '-----------------------------------------------------------------------------------------------------
   If Not IsNull(documents[document_key]!tag_user) Then
      Select Case File.Ext(filename)
         Case "pdf"
            Editor_ShowPage("pdf document", documents[document_key]!tag_user, filename)
         Case "jpg", "png", "bmp", "jpeg", "tiff"
         Case Else 'must be html
            Editor_ShowPage("browser", documents[document_key]!tag_user, documents[document_key]!html, documents[document_key]!originator)
      End Select
   Else
      '------------------------------------------------------------------------------
      'tag_user is null construct the page tag along with a date eg FBC (01/02/2010)
      'Now determine if this has actually been viewed and filed by the doctor
      'if it has, then there will be a user tag
      'If not, then show the metadata for this document
      '-------------------------------------------------------------------------------
      Select Case File.Ext(filename)
         Case "pdf" 
            Editor_ShowPage("pdf document", "UNFILED", filename) 
            Document_Edit_Metadata(Documents, document_key)
         Case Else
            If IsNull(documents[document_key]!html) Then        'Null = unfiled, construct this from backend
               CurrentObservations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & document_key & " ORDER BY observations.observation_date, set_id")
               shtml = modHL7Process.Construct_HTML(currentconsult!patient, documents[document_key], currentobservations, True, True, documents[document_key]!fk_lu_display_as)
            Else
               shtml = documents[document_key]!html
            End If
            Editor_ShowPage("browser", "UNFILED", sHTML, documents[document_key]!originator)
            Document_Edit_Metadata(Documents, document_key, sHtml)
      End Select 
      
   End If
   
   Dec application.Busy 
   
End

Public Sub Inbox_showResult()
   '-------------------------------------------------------------------------------------
   'Display a result - this could have been received as HL7 or as as scanned pdf or image
   'It may or may not have been 'filed' - ie viewed in the users inbox
   '-------------------------------------------------------------------------------------
   
   Dim bExcludeFTReport As Boolean
   Dim bExcludePIT As Boolean
   Dim display_style As Integer = const.Document_Display_As_Result
   Dim fgc As Integer
   Dim bgc As Integer
   Dim sHtml As String 
   Dim SelectedDocument As Collection 
   Dim filename As String 
   Dim file_extension As String
   Dim page_tag As String 
   
   If cvwResults.count = 0 Then Return 
   Try UnFiled_Document_Metadata_Show(False)                                     'remove this it could be showing if not completed from previous document
   '---------------------------------------------------------
   'If this document has been filed, show the pdf or the html
   '---------------------------------------------------------
   filename = currentconsult!results_received[cvwResults.Item.Key]!source_file
   file_extension = Lower(File.Ext(currentconsult!results_received[cvwResults.Item.Key]!source_file))
   If Not IsNull(currentconsult!results_received[cvwResults.Item.Key]!tag_user) Then
      Select Case file_extension
         Case "pdf"
            Editor_ShowPage("pdf document", currentconsult!results_received[cvwResults.Item.Key]!tag_user & ":" & Str(currentconsult!results_received[cvwResults.Item.Key]!pk_document), filename)
         Case Else 
            page_tag = currentconsult!results_received[cvwResults.Item.Key]!tag_user 
            If Right(page_tag) = ";" Then page_tag = Left(page_tag, Len(page_tag) - 1)
            page_tag &= " (" & Format(currentconsult!results_received[cvwResults.Item.Key]!date_created) & ":" & Str(currentconsult!results_received[cvwResults.Item.Key]!pk_document) & ")"
            Try Editor_ShowPage("browser", page_tag, currentconsult!results_received[cvwResults.Item.Key]!html, currentconsult!results_received[cvwResults.Item.Key]!organisation)
      End Select
   Else
      '------------------------------------------------------------------------------
      'tag_user is null construct the page tag along with a date eg FBC (01/02/2010)
      'Now determine if this has actually been viewed and filed by the doctor
      'if it has, then there will be a user tag
      'If not, then show the metadata for this document
      '-------------------------------------------------------------------------------
      FMetaData.Init("Allocated Documents")                                      'gui elements for filing, not allocating like in scanning
      SelectedDocument = currentconsult!results_received[cvwResults.Item.Key]    'makes typing easier        
      '-------------------------------------------------------------------
      'Now, if a HL7 result, if no html - ie not yet file, create the html
      '------------------------------------------------------------------
      Select Case file_extension
         Case "pdf" 
            Editor_ShowPage("pdf document", "UNFILED", filename) 
         Case Else
            bExcludeFTReport = SelectedDocument!exclude_ft_report
            bExcludePIT = SelectedDocument!exclude_pit
            fgc = SelectedDocument!abnormals_foreground_color
            bgc = SelectedDocument!abnormals_background_color
            display_style = SelectedDocument!fk_lu_message_display_style
            CurrentObservations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & SelectedDocument!pk_document & " ORDER BY observations.observation_date, set_id")
            shtml = modHL7Process.Construct_HTML(currentconsult!patient, SelectedDocument, currentobservations, bExcludePIT, bExcludeFTReport, display_style, fgc, bgc)
            sHtml = Replace(shtml, "%filingas%", "")
            sHtml = Replace(shtml, "** UNFILED **:", "")
            page_tag = "UNFILED RESULT (" & currentconsult!results_received[cvwResults.Item.Key]!date_created & ")"
            Editor_ShowPage("browser", page_tag, sHtml)
      End Select
      With FMetaData
         .Edit(currentconsult!results_received, cvwResults.Item.Key)         'display metadata for this document
         .bexit = True
         .txtUserObservationName.text = cvwResults[cvwResults.Item.key][1]  
         .txtUserObservationName.pos = 0    'ensure start of line showing
         .Document_HTML_Set(sHtml)                                 
         .HBox_Save.visible = True                                           'contains the save button
         .hBox_Urgency.Visible = False                                       'not needed as already in the patients notes
         .bExit = False   
      End With 
      UnFiled_Document_Metadata_Show(True)                                   'set up FClinical to show FMetadata
   End If 
   
End

Public Sub FMetaData_tbClose_Click()
   '---------------------------------------------------------
   'Remove FMetadata, put back correct FClinical gui elements
   '---------------------------------------------------------
   
   UnFiled_Document_Metadata_Show(False)    
   Wait
   cvwResults_Refresh() 
   cvwLettersReceived_Refresh(True) 
   
End

Public Sub FMetaData_txtUserObservationName_Activate()
   '------------------------------------------------------------------------------------------
   'This over-rides the event on this textbox in the FMetadata
   'For ease of use, when user hits enter here, File doc and roll on to next one automatically
   '------------------------------------------------------------------------------------------   
   
   Stop Event
   If Last.tag = "user name" Then
      FMetadata_tbSave_Click()
   Endif
   
End

Public Sub FMetaData_tbSave_Activate()
   '------------------------------------------------------------
   'Detects if user clicked <enter> on the FMetadata save button
   'overrides this event and saves. I've done this so that
   'I can then remove the metadata form and re-arrange the screen
   'from this form
   '------------------------------------------------------------  
   
   Stop Event
   If key.code = key.Return Then
      FMetadata_tbSave_Click()
   Endif
   
End

Public Sub FMetaData_tbSave_Click()
   '-----------------------------------------------------------------------
   'User is modifying a document's metadata
   'Apply the changes, remove the metadata gui and re-load the results list  
   '-----------------------------------------------------------------------
   
   Stop Event 
   If FMetaData.Save() Then                     'successful 
      modDBConnect.CommitTrans()                'save transaction
      FMetaData_tbClose_Click()                 'remove the gui components 
   End If
   
End

Public Sub UnFiled_Document_Metadata_Show(bShow As Boolean)
   '---------------------------------------------------------
   'Show or remove the unfiled document metadata gui elements
   '---------------------------------------------------------  
   
   FMetaData.visible = bShow  
   VboxActiveProblemList.Visible = Not FMetaData.visible
   Vbox_MiniGraphs.Visible = Not FMetaData.visible
   ScratchPad.Visible = Not FMetaData.visible 
   If bShow Then
      VsplitClinical_RightPane.Layout = Settings["Main/VsplitClinical_RightPane_Metadata"]
      VsplitClinical_RightPane.Layout = [3, 0, 2, 0]
   Else
      Settings["Main/VsplitClinical_RightPane_Metadata"] = VsplitClinical_RightPane.Layout
      VsplitClinical_RightPane.Layout = Settings["Main/VsplitClinical_RightPane"]
   Endif
   
End

Public Sub TabbedLists_Select()
   '-------------------------------------------------------------------------------------
   'NOTE the effect of Select and Click on a list are different
   '     Using Referral Letters in a list as an example - if you want to sequentially
   '     show each referral letter as the user runs through the list using the down
   '     arrow keys, the code must be in this subroutine, as _Click event is only
   '     generated when the user clicks on a list
   '     For some lists, we only want to set the underlying collection member e.g Recalls
   '-------------------------------------------------------------------------------------
   
   Dim Astring As String 
   Dim interval As Integer = 0
   Dim RequestForm As New Collection 
   
   If IsNull(currentconsult) Then Return
   Last.MoveCurrent()   'set internal cursor
   
   Select Case Last.tag
      Case "recalls"
         cvwRecalls.MoveCurrent()
         currentrecall = currentconsult!recalls_logged[cvwRecalls.Item.key]
      Case "results"
         cvwResults.MoveCurrent()
      Case "requests"
         If Last.Header = True Then
            Last.header = False
         End If '
      Case "measurements"
         cvwMeasurements.MoveCurrent()
         Measurement_Graph(cvwMeasurements.Item.key, cvwMeasurements.Item.text)
      Case "measurement favourites"
         cvwMeasurementFavorites.MoveCurrent()
         Measurement_Graph("", cvwMeasurementFavorites.Item.text)
   End Select
   
End

Public Sub Measurement_Graph_Picture_Clear()
   
   With pbMeasurementGraph
      .picture = Null
      .tag = ""
      .Refresh()
   End With
   
End

Public Sub InboxResults_Click()
   '------------------------------------------------------
   'User has clicked on one of the buttons under the graph
   '------------------------------------------------------   
   
    ActiveGraphButton = Last
    Measurements_Make_Graph()
    
End

Public Sub Measurements_Make_Graph()
   '----------------------------------------------------------------------------------
   'Called either by InboxResults_Click - i.e user clicked on a button under graph or
   '                 FProgressNotesPage.FClinical.Update_graphs()  in which case the
   '                 currently highlighted graph is updated  when progress notes saved
   '----------------------------------------------------------------------------------                 
   Dim loinc As String 
   Dim currentresult As Collection 
   Dim tag As String 
   Dim MD As Collection 
   
   If IsNull(currentconsult) Then Return 
   bexit = True
   chkGraph_MakeDefault.value = False
   bexit = False  
   
  
   Try tag = ActiveGraphButton.tag!name 
   If Error Then
      tag = ActiveGraphButton.tag
   Endif
   
   Select Case tag
      Case "egfr"
         Measurement_Graph(const.Loinc_EGFR, "eGFR")
      Case "blood pressure"
         Measurement_Graph("", "blood pressure")
      Case "weight"
         Measurement_Graph("", "weight")
      Case "height"
         Measurement_Graph("", "height")
      Case "peak flow"
         
      Case "add"
         'Add to favourites, but first, is it already a favourite?
         For Each MD In MeasurementDefaults 
            If Lower(Md!name) = Lower(pbGraphName.Tag!name) Then Return
         Next
         If Message.Question("Do you wish to add " & pbGraphName.Tag!name & " to the favourites?", "Yes", "No") = 1 Then
            pbGraphName.tag!display_as_default = False
            Measurement_Favourites_Update()
         Endif
      Case "remove"
         If Message.Question("Do you wish to remove " & pbGraphName.Tag!name & " from the favourites?", "Yes", "No") = 1 Then
            modMeasurementsDBI.Measurement_Default_Mark_Deleted(pbGraphName.tag!pk)
            modDBConnect.CommitTrans()
            Measurement_Defaults_Refresh()
         Endif
         
      Case "refresh"
         '------------------------------------------------------
         'Reset the measuremnts list to include all measurements
         '------------------------------------------------------
         bexit = True 
         txtInboxResults_Exclude.Text = ""
         txtInboxResults_filter.text = ""
         bExit = False  
         cvwResults_Refresh()
      Case Else
         '---------------------------------------------------------------
         'This must be a user-defined button
         'pbGraphName.tag used to 'store' information about graph default
         'for want of a better place
         '---------------------------------------------------------------
         Measurement_Graph(ActiveGraphButton.tag!loinc, ActiveGraphButton.tag!name)
         pbGraphName.tag = ActiveGraphButton.tag
         If ActiveGraphButton.tag!display_as_default = True Then
            bexit = True
            chkGraph_MakeDefault.value = True
            bexit = False  
         End If
   End Select
   
End

Public Sub Measurement_Graph(loinc As String, Measurement As String)
   '-----------------------------------------------------------
   'Graph a measurement
   'if Loinc = "" then measurement is BP, height, weight or PF
   'if Loinc <> "" then graph an observable measurement
   '-----------------------------------------------------------
   
   Dim Interval As Integer = 0
   Dim Astring As String 
   Dim GraphableItem_Data As New Collection 
   
   If IsInteger(txtMeasurementShowLastMonths.text) Then
      interval = Val(txtMeasurementShowLastMonths.text)
   End If   
   'fixe me replace 1 with font size tiny, med large
   GraphData = New Collection 
   GraphData = modMeasurementsDBI.Make_Graph(currentconsult!patient!fk_patient, loinc, Measurement, pbMeasurementGraph.H, pbMeasurementGraph.W, slGraphFontSize.value, cmbLineStyle.text, interval)
   GraphData!name = Measurement
   GraphData!fontsize = slGraphFontSize.value
   GraphableItem_Data!loinc = loinc
   GraphableItem_Data!name = Measurement
   
   Try pbMeasurementGraph.picture = Picture.Load(GraphData!graph_filename)
   If Error
      Measurement_Graph_Picture_Clear()
   Else
      pbGraphName.tag = GraphableItem_Data
   End If
   
End

Public Sub Tabbed_lists_Clear()
   '---------------------------------------------------------
   'PURPOSE    :Clears all the lists on the main tab control
   'REASON     :When goes to search for a new patient, the
   '            old data is showing
   'CALLED BY  :cmbSearch_Gotfocus() 
   '--------------------------------------------------------
   
   cvwReferrals.clear()
   cvwRequests.clear()
   cvwResults.Clear()
   cvwLettersReceived.Clear()
   cvwMedications.clear()
   cvwRecalls.Clear()
   cvwCertificates.Clear()
   cvwMeasurements.Clear()
   
End

Public Sub TabbedLists_Click()
   
   If IsNull(currentconsult) Then Return  'do nothing if no consult
   Last.MoveCurrent()
   Select Case Last.tag
      Case "measurement favourite"
        Measurement_Show_Data_List(const.Measurement_Types[Last.item.key])
      Case "requests"
         
      Case "results"
         If cvwResults.Header = True Then      'user has been resizing the columns
            cvwResults.Resizable = False
            cvwResults.Header = False  
         End If
      Case "recalls"
         'user could have just been resizing the columns 
         cvwRecalls.Resizable = False
         cvwRecalls.Header = False  
      Case "measurements"
         '------------------------------
         'Graph measurements if possible
         '------------------------------
         cvwMeasurementFavorites.UnselectAll()
   End Select
   
End

Public Sub cvwMedications_Menu()
   
   ' If cvwMedications.count Then
   '    mnuPopupMedications.popup()
   ' End If
   
End

Public Sub mnuPopupMedications_Click()
   
   Select Case Last.tag
      Case "make inactive"
      Case "make active"
      Case "prescribe single"
      Case "prescribe all"
      Case "delete single request"
      Case "reverse single request"
      Case "brief product information"
      Case "full product information"
      Case "change column widths"
      Case "fonts"
         modUtil.Columnview_SetFont(cvwMedications, "TabbedLists")
      Case "save configuration"
      Case "view medication history"
   End Select
   
End

Public Sub tbSections_Menu()
   
   If IsNull(Currentconsult) Then Return 
   mnuToolButtons_Delete.Picture = picture.Load(const.Clinical_Toolbuttons[Last.tag]!icon_path)
   mnuToolButtons_Delete.Caption = "Delete " & const.Clinical_Toolbuttons[Last.tag]!name & " button?"
   
   mnuToolButtons.Popup()
   
End

Public Sub mnuToolButtons_Click()
   '------------------------------------------------------------------------
   'There is really only one option for the popup menu over the toolbuttons
   'namely delete, allowing user to delete a button
   'This checks the caption on the menu e.g "Delete Pregnancy button"
   'and deletes the appropriate button - probably an easier way!
   '----------------------------------------------------------------------
   
   Dim c As Collection 
   Dim hCtrl As Control
   Dim tb As ToolButton
   
   Select Case Last.tag
      Case "delete"
         For Each hctrl In pnlToolButtons.Children
            If hctrl Is ToolButton Then
               tb = hctrl
               If InStr(Last.caption, const.Clinical_Toolbuttons[tb.tag]!name) Then
                  If Not IsNull(Toolbuttons[tb.tag]) Then        'if not yet saved this will be null
                     modAdminDBI.Clinical_Toolbuttons_Remove(Toolbuttons[tb.tag]!fk_staff_clinical_toolbar) 
                     Toolbuttons = modAdminDBI.Clinical_Toolbuttons_Get(modDBConnect.currentUser!fk_staff) 'Get users toolbuttons
                  End If   
                  tb.Delete()
                  Break
               Endif
            End If
         Next
         
   End Select
   
End

Public Sub tbSections_Click()
   '------------------------------------------------------------------------
   'Shows the relevant section e.g Family History, as the central webbrowser
   'could have been visible, remove it
   '------------------------------------------------------------------------
   
   Dim templ As CTemplate
   Dim sstring As String
   
   If Not currentconsult Then Return
   ' WorkspaceEditor.Lock()
   Try Editor_ShowPage(const.Clinical_Toolbuttons[Last.tag]!name)
   If Error Then
      If Last.tag = "health summary" Then 
         '    modProgressNotes.Health_Summary_Construct_html(currentconsult) 
         
         Templ = modProgressNotes.Health_Summary_Construct_LaTex(currentconsult)
         Editor_ShowPage("pdf file", "Health Summary", modPrinting.Latex_To_PDF(templ.GetData()))
         ' Editor_ShowPage("browser", "Health Summary", modProgressNotes.Health_Summary_Construct_html(currentconsult))
      Else If Last.tag = "care plan" Then 
         '    templ = modProgressNotes.Health_Summary_Construct_LaTex(currentconsult)
         Editor_ShowPage("browser", "Care Plan", modProgressNotes.Care_Plan_Construct_html(Currentconsult))
         '  Editor_ShowPage("pdf file", "Health Summary", modPrinting.Latex_To_PDF(templ.GetData()))
      Else        
         Try Editor_ShowPage(Last.tag)
      End If   
      
   Endif
   '  WorkspaceEditor.UnLock()
   Try Control_For_Focus.SetFocus()                 'DO NOT REMOVE THIS SEE DECLARATION SECTINO AT THE TOP
   
End

Public Sub TabbedLists_Drag()
   
   Print Last
   cvwResults.Drag(cvwResults[1].text)
   
End

Public Sub tabstrip_lists_Click()
   
   If IsNull(currentconsult) Then Return 
   Select Case TabStrip_Lists.Index
      Case cListPrescriptions
         TabStrip_Lists.ToolTip = "Prescriptions Written"          
      Case cListRequests
         
      Case clistMeasurements
         '---------------------------------------------------        
         'Using Ians wish for just in time data, get whatever
         'measurements the patient has ever had done
         '---------------------------------------------------
         ''lblTabListsHeading.Text = "Measurements taken"
         
      Case clistRecalls
         TabStrip_Lists.ToolTip = "Recalls Loggged"
      Case cListCertificates
         TabStrip_Lists.ToolTip = "Certificates"
      Case clistImages
         TabStrip_Lists.ToolTip = "Images" 
         Images_Refresh()
      Case ctabCalculators
         If IsNull(BMICalc) Then
            BMICalc = New FBMICalc(HBox_BMI) 
         End If  
      Case cTabQuickContacts
         If IsNull(QuickContacts) Then
            QuickContacts = New FQuickContact(HBox_Contacts) 
         End If
   End Select 
   
End

Public Sub Re_Print_Document_Html(sHtml As String, Optional num_copies As Integer = 1)  
   '------------------------------------------
   'prints html to default plain paper printer
   '------------------------------------------
   
   Dim x As Integer
   
   sHtml = modConsultDBI.Images_Get(shtml)
   For x = 1 To num_copies
      modPrinting.PrintHtml(sHtml, const.Paper_Plain)
   Next 
   
End

Public Sub Print_Browser_Contents()
   '-----------------------------------------------------------------------
   'temporary work-around, convert to pdf and print the html in the webview
   '-----------------------------------------------------------------------
   
   ' modPrinting.PrintHtml(WebBrowserNotes.HTML, const.Paper_Plain)
   ' modPrinting.PrintHtml(Form_Html_Viewer.WebView1.HTML, const.Paper_Plain)
   
End

Public Sub ActiveWindow_Get_Name() As String
   
   Dim hCtrl As Control
   Dim page As FLinkContainer
   
   For Each page In WorkspaceEditor.Windows
      If page = WorkspaceEditor.ActiveWindow Then
         For Each hctrl In page.VBoxEditor.Children     
            If hctrl Is Form Then
               Return hCtrl.Name
            Endif
         Next
      End If
   Next  
   
End

Public Sub WorkspaceEditor_Activate()
   
   '----------------------------------------------------------------------------------
   'User has clicked on an editor page
   'If it contains progress notes, as these could have been updated in another section
   'update the progress notes
   'IAN CHECK THIS
   '----------------------------------------------------------------------------------
   
   Dim hCtrl As Control
   
   Dim page As FLinkContainer
   Dim frmConsult As FProgressNotePage
   Dim tooltip As String
   
   ' If Not WorkspaceEditor.ActiveWindow Or Bexit Then
   '    Return
   ' End If   
   
   For Each page In WorkspaceEditor.Windows
      If page = WorkspaceEditor.ActiveWindow Then
         txtURL.text = page.tag 
         
         For Each hctrl In page.VBoxEditor.Children     
            If hctrl Is Form Then
               'Disable all - will be enabled as needed
               tbPreview.Enabled = False
               tbPreview.Tooltip = ""   
               tbSave.ToolTip = ""
               tbSave.Enabled = False  
               tbNew.tooltip = ""
               tbNew.Enabled = False   
               tbPrint.Tooltip = ""
               tbPrint.Enabled = False 
               tbRefresh.Enabled = False
               tbRefresh.Tooltip = ""
               Select Case hctrl.Name
                  Case "FPsychoSocialHistory"
                     tbSave.ToolTip = "Save Social History"
                     tbSave.Enabled = True
                  Case "FExportClinical" 
                     tbPrint.Tooltip = "Print PDF to be exported"
                     tbPrint.Enabled = True   
                     tbPreview.Enabled = True
                     tbPreview.Tooltip = "Generate and Preview PDF of notes to export"   
                     tbRefresh.Enabled = True
                     tbRefresh.Tooltip = "Reload data to export"
                     tbSave.ToolTip = "Save file to be exported"
                     tbSave.Enabled = True
                  Case "FHtmlViewer"
                     tbPrint.Tooltip = "Print Text"
                     tbPrint.Enabled = True 
                  Case "FPDF"
                     tbPrint.Tooltip = "Print PDF"
                     tbPrint.Enabled = True  
                  Case "FProgressNotesViewer"
                     '------------------------------------------------------------------------ 
                     'This is wherever the user is reading previously generated progress notes
                     'either 'all progress notess' or specific to a condition
                     '------------------------------------------------------------------------ 
                     tbPrint.Tooltip = "Print Progress Notes"
                     tbPrint.Enabled = True  
                     tbPreview.Enabled = True
                     tbPreview.Tooltip = "Preview PDF of the progress notes"   
                  Case "FProgressNotePage"
                     frmConsult = hctrl       
                     '   frmConsult.Display_FReferalsExisting_Notes()  're-load progress notes
                     frmConsult.Display_Health_Issue()
                     tbSave.Tooltip = "Save Progress Note"
                     tbSave.Enabled = True     
                     tbSave.Tooltip = "Save Progress Notes"
                  Case "FPastHistory"
                     tbSave.ToolTip = "Save Health Issue"
                     tbSave.Enabled = True
                     tbNew.tooltip = "New Health Issue"
                     tbNew.Enabled = True
                  Case "FCarePlanning"
                     tbSave.ToolTip = "Save Care Plan Item"
                     tbSave.Enabled = True
                     tbNew.tooltip = "New Care Plan Item"
                     tbNew.Enabled = True
                  Case "FVaccinations"
                     tbSave.ToolTip = "Save Vaccination"
                     tbSave.Enabled = True
                     tbNew.tooltip = "New Vaccination"
                     tbNew.Enabled = True
                  Case "FRequests"
                     tbPreview.Enabled = True   
                     tbPreview.Tooltip = "Preview Request Form"
                     tbSave.ToolTip = "Save Request Form"
                     tbSave.Enabled = True   
                     tbNew.tooltip = "New Request Form"
                     tbNew.Enabled = True 
                     tbPrint.Tooltip = "Print Request Form"
                     tbPrint.Enabled = True  
                  Case "FReferrals"
                     tbSave.ToolTip = "Save Referral"
                     tbSave.Enabled = True   
                     tbNew.tooltip = "New Referral"
                     tbNew.Enabled = True 
                     tbPrint.Tooltip = "Print Referral"
                     tbPrint.Enabled = True  
                     tbPreview.Tooltip = "Preview Referral"
                     tbPreview.Enabled = True  
                  Case "FDACC"
                     tbRefresh.Enabled = True
                     tbRefresh.tooltip = "Refresh DACC Components" 
                     tbSave.Enabled = True
                     tbSave.Tooltip = "Save DACC"
                     tbPrint.Enabled = True
                     tbPrint.Tooltip = "Re-Print DACC"
                     tbNew.Tooltip = "New DACC"
                     tbNew.Enabled = True 
                  Case "FFamilyHistory"
                     tbSave.ToolTip = "Save Family History"
                     tbSave.Enabled = True
                     tbNew.tooltip = "New Family Member"
                     tbNew.Enabled = True 
                  Case "FPsychoSocialHistory"
                     
                     tbSave.ToolTip = "Save Social History"
                     tbSave.Enabled = True
                  Case "FImageViewer" 
                     tbSave.ToolTip = "Save Image"
                     tbSave.Enabled = True
                     tbNew.tooltip = ""
                     tbNew.Enabled = False 
                  Case "FRecalls"
                     tbSave.ToolTip = "Save Recall"
                     tbSave.Enabled = True
                     tbNew.tooltip = "New Recall"
                     tbNew.Enabled = True 
                  Case "FOccupation"
                     tbNew.Tooltip = "New Occupation"
                     tbNew.Enabled = True 
                     tbSave.Tooltip = "Save Occupation"
                     tbSave.Enabled = True
                  Case "FWorkCover"
                     tbNew.Tooltip = "New Workcover Form"
                     tbNew.Enabled = True
                     tbSave.Tooltip = "Save Workcover Form"
                     tbSave.Enabled = True   
                     tbPreview.Tooltip = "Preview Workcover Form"
                     tbPreview.Enabled = True
                     tbPrint.tooltip = "Print Workcover Form"
                     tbPrint.Enabled = True  
                  Case "FMentalHealth"
                     tbNew.Tooltip = "New Mental Health Plan"
                     tbNew.Enabled = True
                     tbSave.Tooltip = "Save Mental Health Plan"
                     tbSave.Enabled = True   
                     tbPreview.Tooltip = "Preview Mental Health Plan"
                     tbPreview.Enabled = True
                     tbPrint.tooltip = "Print Mental health Plan"
                     tbPrint.Enabled = True  
                  Case "FMedicalCertificate"
                     tbNew.Tooltip = "New Medical Certificate"
                     tbNew.Enabled = True
                     tbSave.Tooltip = "Save Medical Certificate"
                     tbSave.Enabled = True   
                     tbPreview.Tooltip = "Preview Medical Certificate"
                     tbPreview.Enabled = True
                     tbPrint.tooltip = "Print Medical Certificate"
                     tbPrint.Enabled = True  
               End Select
            End If
         Next
      End If
   Next
   
End

Public Sub mnuSections_Click()
   
   If Last.tag <> "Ignore" Then
      Editor_ShowPage(Last.tag)
   End If
   
End

Public Sub tbDecisionSupport_Click()
   
   DecisionSupport_Show("", False)
   
End

Public Sub txtFindMeasurement_KeyRelease()
   
   If bexit Then Return 
   If Last.tag = "find" Then 
     ' Try cvwMeasurements_Refresh(Trim(Last.text))
   End If  
   
End

Public Sub tbRefreshMeasurements_Click()
   
   txtFindGraphable.text = ""
   'cvwMeasurements_Refresh()
   
End

Public Sub txtFindMeasurement_KeyPress()
   
   If Not txtFindMeasurement_ExcludeKeys(key.code, Last.tag) Then 
      Stop Event
      Return
   End If
   
End

Public Function txtFindMeasurement_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case tag
      Case "number months"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid
   
End

Public Sub pbMeasurementGraph_MouseDrag()
   
   Dim Pic As New Picture
   Dim fname As String 
   Dim params As New Collection 
   
   If Not IsNull(Last.picture) Then
      Drag.Icon = Last.Picture
      '  fname = modPlot.LineGraph(500, 180, GraphData!values, cvwMeasurements.Item.text, "")
      ' fname = modPlot.LineGraph(500, 180, GraphData!values, GraphData!name, "")
      fname = modPlot.LineGraph(500, 180, GraphData!values, GraphData!name, GraphData!name, slGraphFontSize.value)
      '  slGraphFontSize.values
      params!fname = fname
      params!H = 180
      params!W = 500
      pbMeasurementGraph.tag = params
      Pic.Load(fname)
      
      Last.Drag(Pic.Image)
      
   End If
   
End

Public Sub txtFindMeasurement_Change()
   
   If bexit Then Return 
   Try Measurement_Graph()
   
End

Public Sub HSplit_MeasurementLists_Resize()
   
  ' lblMeasurementFavourites.width = cvwMeasurementFavorites.Width
 '  lblGraphableObservations.width = cvwMeasurements.width
   
End


Public Sub InboxResults_Click_old()
   
   Dim loinc As String 
   Dim currentresult As Collection 
   Dim tag As String 
   Dim MD As Collection 
   
   If IsNull(currentconsult) Then Return 
   bexit = True
   chkGraph_MakeDefault.value = False
   bexit = False  
   
   Try tag = Last.tag!name 
   If Error Then
      tag = Last.tag
   Endif
   ActiveGraphButton = Last
   Select Case tag
      Case "egfr"
         Measurement_Graph(const.Loinc_EGFR, "eGFR")
      Case "blood pressure"
         Measurement_Graph("", "blood pressure")
      Case "weight"
         Measurement_Graph("", "weight")
      Case "height"
         Measurement_Graph("", "height")
      Case "peak flow"
         
      Case "add"
         'Add to favourites, but first, is it already a favourite?
         For Each MD In MeasurementDefaults 
            If Lower(Md!name) = Lower(pbGraphName.Tag!name) Then Return
         Next
         If Message.Question("Do you wish to add " & pbGraphName.Tag!name & " to the favourites?", "Yes", "No") = 1 Then
            pbGraphName.tag!display_as_default = False
            Measurement_Favourites_Update()
         Endif
      Case "remove"
         If Message.Question("Do you wish to remove " & pbGraphName.Tag!name & " from the favourites?", "Yes", "No") = 1 Then
            modMeasurementsDBI.Measurement_Default_Mark_Deleted(pbGraphName.tag!pk)
            modDBConnect.CommitTrans()
            Measurement_Defaults_Refresh()
         Endif
         
      Case "refresh"
         '------------------------------------------------------
         'Reset the measuremnts list to include all measurements
         '------------------------------------------------------
         bexit = True   
         txtInboxResults_Exclude.Text = ""
         txtInboxResults_filter.text = ""
         bExit = False  
         cvwResults_Refresh()
      Case Else
         '---------------------------------------------------------------
         'This must be a user-defined button
         'pbGraphName.tag used to 'store' information about graph default
         'for want of a better place
         '---------------------------------------------------------------
         Measurement_Graph(Last.tag!loinc, Last.tag!name)
         pbGraphName.tag = Last.tag
         If Last.tag!display_as_default = True Then
            bexit = True
            chkGraph_MakeDefault.value = True
            bexit = False  
         End If
   End Select
   
End

Public Sub InboxResults_KeyRelease()
   '-----------------------------------------------------------------------
   'User has typed in one of the two textboxes underneath the results inbox
   '-----------------------------------------------------------------------
   
   If Bexit Then Return 
   Select Case Last.tag
      Case "exclude"
         bExit = True
         txtInboxResults_filter.text = ""
         bexit = False
      Case "filter"
         bExit = True
         txtInboxResults_Exclude.text = ""
         bexit = False
   End Select
   cvwResults_Refresh()
   
End

Public Sub chkGraph_MakeDefault_Click()
   
   If IsNull(currentconsult) Then Return
   If Bexit Then Return 
   
   If Last.value = True Then
      If Message.Question("Do you wish to make " & pbGraphName.Tag!name & " the default graph for this patient?", "Yes", "No") = 1 Then
         pbGraphName.tag!display_as_default = True
         Measurement_Favourites_Update()
      Else
         pbGraphName.tag!display_as_default = False
      End If
      
   Endif
   
End

Public Sub Measurement_Favourites_Update()
   
   pbGraphName.Tag!fk_patient = currentconsult!patient!fk_patient
   modMeasurementsDBI.Measurements_Default_Save(pbGraphName.Tag)
   modDBConnect.CommitTrans()
   Measurement_Defaults_Refresh()
   
End
Public Sub Measurement_Show_Data_List(measurement_type As Collection)
   '-----------------------------------------------------
   'when user clicks on the tabbed lists for measurments
   'show list for bp/height/weight in a numerical list
   '-----------------------------------------------------
   Dim M As Collection 
   Dim Measurement_value As String
  
   With cvwMeasurementValues
         .Clear
         .Columns.count = 2
         .Columns[0].width = 80
   End With
   For Each M In currentconsult!measurements
      If M!fk_type = measurement_type!pk Then
         Select Case measurement_type!pk
            Case const.Measurement_BP  
                measurement_value = modMeasurementsDBI.BP_Format(M!measurement)
            Case const.Measurement_Height
                measurement_value = Format(M!measurement, "##.##")
            Case const.Measurement_Weight
                measurement_value = Format(M!measurement, "##.##")
         End Select
         cvwMeasurementValues.Add(M!pk_measurement, 0)
         cvwMeasurementValues[M!pk_measurement][0] = Format(M!consult_date, "dd/mm/yyyy")
         cvwMeasurementValues[M!pk_measurement][1] = measurement_value
      Endif
   Next
End

Public Sub Measurements_Reset()
   '----------------------------------------------------------------------------
   'Remove any measurement things which may have been displayed for last patient
   'e.g a picture of a graphable measurement
   'default buttons - I've only allowed two
   '----------------------------------------------------------------------------
   
   Dim hctrl As Control
   Dim tb As ToolButton
   
   Measurement_Graph_Picture_Clear()
   For Each hctrl In HBox_Default_Results.Children        'loop through the three default buttons
      tb = hctrl                                          
      tb.tag = Null               
      tb.text = ""
      tb.Visible = False  
   Next
   bexit = True
   chkGraph_MakeDefault.value = False
   bExit = False  
   
End

Public Sub Measurement_Defaults_Refresh()
   '------------------------------------------------------------------------
   'Load the patient's measurement defaults
   'We allow up to three Default buttons, display graph which is the default
   'If there is not a default one to display, use BP
   '------------------------------------------------------------------------
   
   Dim MD As Collection 
   Dim hctrl As Control
   Dim tb As ToolButton
   
   currentconsult.Refresh("measurement_defaults")            'remove from cache
   Measurements_Reset()                                      'remove tags, names, pictures
   MeasurementDefaults = currentconsult!measurement_defaults 'load data a-fresh
   For Each MD In MeasurementDefaults                              
      For Each hctrl In HBox_Default_Results.Children        'loop through the three default buttons
         tb = hctrl                                          
         If IsNull(tb.tag) Then                              'if not yet used, give it a name
            tb.text = MD!name
            tb.tag = MD
            tb.Visible = True  
            Break
         Endif
      Next
      If MD!display_as_default = True Then                   'display graph which is patient's default
         Measurement_Graph(MD!loinc, MD!name)
         bExit = True
         chkGraph_MakeDefault.Value = True
         pbGraphName.tag = MD
         bExit = False  
      End If
   Next
   If IsNull(pbMeasurementGraph.Picture) Then                'but if none set, then use BP as default
      Measurement_Graph("", "blood pressure")
   Endif
   
End

Public Sub Measurement_Favourites_Refresh()
   '---------------------------------------------------
   'Display a list of:
   '1: measurements available to anyone
   '2: favourites for the patient FIXME NOT IMPLEMENTED
   '---------------------------------------------------
   
   Dim Measurement As Collection 
   
   cvwMeasurementFavorites.clear()
   For Each measurement In const.Measurement_Types
      cvwMeasurementFavorites.add(measurement!pk, 0)
      cvwMeasurementFavorites[measurement!pk][0] = measurement!name_full
   Next
   
End

Public Sub slGraphFontSize_Change()
   
   If IsNull(currentconsult) Then Return 
   Measurement_Graph(pbGraphName.Tag!loinc, pbGraphName.Tag!name)
   
End

Public Sub cmbConsultationType_Click()
   
   If currentconsult Then
      currentconsult.Set(consultationtypes[cmbConsultationType.Index]!pk, "")  
   End If   
   lblConsultationType.text = cmbConsultationType.Text
   cmbConsultationType.Visible = False        
   lblConsultationType.Visible = True  
   
End

Public Sub DocumentFilter_KeyRelease()
   '-------------------------------------------------------------------------
   'User wants to filter document on either tag or who sent them 'originator'
   '-------------------------------------------------------------------------
   
   If bexit Then Return 
   Select Case Last.tag
      Case "tag"
         cvwLettersReceived_Refresh()
      Case "author"
         cvwLettersReceived_Refresh()
   End Select  
   
End

Public Sub tbLettersRefresh_Click() 
   '----------------------------------------------------
   'Clears the filters on the letters lists, and reloads
   '----------------------------------------------------
   
   txtLetterFilterTag.text = ""
   txtLetterFilterAuthor.text = ""
   cvwLettersReceived_Refresh(True)
   
End

Public Sub Certificates_Click()
   
   iCertificatetype = Last.tag
   Certificates_Refresh()
   
End

Public Sub TabbedLists_MouseDrag()
   
   Dim x As Integer
   
   Last.MoveCurrent()
   Select Case Last.tag
      Case "results"
         Drag.icon = Picture.Load("icons/16/bloodtube16x16.png")
         Last.Drag(Str(currentconsult!results_received[cvwResults.Item.Key]!pk_document))
      Case "letters received"
         Drag.icon = Picture.Load("icons/16/referrals_3_1616.png") 'parent.parent.parent.picture
         Last.Drag(Str(currentconsult!letters_received[cvwLettersReceived.Item.Key]!pk_document))
         
   End Select
   
End

Static Public Sub UnitTest(form_main As FMain)
   
   form_main.btnSection_Clinical_Click()
   form_main.pnlClinical.Patients_Find("t p")
   
End

Public Sub mnuHelp_Click()
   
   Select Case Last.tag
      Case "about"
         FAbout.ShowModal() 
      Case "get help online"
      Case "report a problem"
   End Select 
   
End

Public Sub pnlToolButtons_Drop()
   
   Dim tb As ToolButton
   Dim height As Integer  
   Dim hCtrl As Control
   
   For Each hctrl In Last.Children
      If hCtrl.Tag = Drag.Source.Tag Then
         Message.info("can't drop - it already exists")
      Endif
   Next
   
   modEditAreaHelpers.ToolButton_Create(Last, Drag.icon, Drag.Source.tag, Last.Children[0].height, Me)
   const.Clinical_Toolbuttons_Refresh()
   
End

Public Sub SelectPatient_click()                                       
   '-------------------------------------------------------------------
   'User has cancelled patient selection in popup patient selector form
   '-------------------------------------------------------------------
   
   If Last.tag = "cancel" Then Stop Event
   form_select.Visible = False 
   VSplit1.Visible = True  
   mnuView.Visible = False 
   mnuSections.Visible = False   
   mnuDecisionSupport.Visible = False  
   mnuHelp.visible = False
   cmbSearch.SetFocus()
   
End

Public Sub pnlToolButtons_Menu()
   
   Dim form_config_toolbar As FConfigToolbar
   
   With form_config_toolbar = New FConfigToolbar 
      .Init("FClinical", toolbuttons)
      .Expand = False   
      .ShowModal
   End With
   
End

Public Sub mnuView_Click()
   
   Select Case Last.tag
      Case "patients seen"
         FPatientsSeen.Init() 
         FPatientsSeen.ShowModal()
      Case "all previous notes"
         Editor_ShowPage("All Previous Notes")
      Case "view by problem"
   End Select 
   
End

Public Sub webview_menu()
   '--------------------------------------------------------------
   'User has clicked over a webview browser eg used in FHTMLViewer
   'to display results and letters, create a popup menu so user
   'can do things like auto-copy back into the progress notes
   'with appropriate annotation.
   '--------------------------------------------------------------   
   
   Dim hCtrl As Control
   Dim page As FLinkContainer   
   Dim mnu As Menu
   
   For Each page In WorkspaceEditor.Windows
      If page = WorkspaceEditor.ActiveWindow Then
         For Each hctrl In page.VBoxEditor.Children     
            If hctrl Is Form Then
               If hctrl.name = "FHtmlViewer" Then
                  FCurrentHTMLViewer = hctrl 
                  FCurrentHTMLViewer.mnuWebView.Children.Clear()
                  mnu = New Menu(FCurrentHTMLViewer.mnuWebview) As "mnuWebview"
                  mnu.name = "mnuWebView_Copy"
                  mnu.caption = "Copy"
                  mnu.tag = "copy"
                  mnu = New Menu(FCurrentHTMLViewer.mnuWebview) As "mnuWebview"
                  mnu.name = "separator_1"
                  mnu.caption = ""    
                  mnu = New Menu(FCurrentHTMLViewer.mnuWebview) As "mnuWebview"
                  mnu.name = "mnuWebView_Insert_Into_Notes"
                  mnu.caption = "Insert into notes"
                  mnu.tag = "insert into notes"
                  mnu = New Menu(FCurrentHTMLViewer.mnuWebview) As "mnuWebview"
                  mnu.name = "mnuWebView_Insert_And_Switch"
                  mnu.caption = "Insert into notes and switch back to editor"
                  mnu.tag = "insert into notes and switch back"
                  FCurrentHTMLViewer.mnuWebView.Popup()             
                  Return 
               Endif
            End If   
         Next
      End If
   Next
   
End

Public Sub mnuWebView_Click()
   '--------------------------------------------------------------------------------------
   'This is experimental, but I've got sick of copy/paste from a result back to the notes
   'So there are two menu options - just to insert, so one can keep reading the result and
   'then just switch back by onself, or copy and insert with auto-switch back. The text is
   'also rendered in small italics to demonstrate it is not part of the users narrative
   'and is outlined with horizontal rulers. I'll test this and see how it goes.
   '--------------------------------------------------------------------------------------
   
   Dim sText As String
   
   Stop Event
   If IsNull(Last.tag) Then Return 
   
   Select Case Last.tag
      Case "insert into notes", "insert into notes and switch back"
         sText = "<HR><small><B>" & FCurrentHTMLViewer.Get_Document_Details() & "</B></small><BR>"
         sText &= "<small><i>" & FCurrentHTMLViewer.WebView1.SelectedText & "<i></small>"
         sText &= "<HR><BR>"
         sText = Replace(stext, "\n", " ")
         FGeneralNotesEditor.teNotes.Insert(".sometext")
         FGeneralNotesEditor.teNotes.richtext = Replace$(FGeneralNotesEditor.teNotes.richtext, ".sometext", sText)
         If Last.tag = "insert into notes and switch back" Then
            Editor_ShowPage("New General Notes") 
         Endif
   End Select
   
End

Public Sub txtURL_Activate()
   
   Editor_ShowPage("webpage", "a tag", txtURL.text)
   
End

Public Sub tbPreview_Click()
   
   Editor_ShowPage("Edit Notes")
   
End

Public Sub lcImages_Menu()
   
   If lcImages.Count Then
      mnuImages.Popup() 
   Endif
   
End

Public Sub mnuImages_Click()
   
   Dim fk_image As Integer
   Dim PatientPicture As Collection
   
   Dim sql As String 
   
   Select Case Last.tag
      Case "patient picture"
         PatientPicture = Currentconsult!images[lcImages.children[lcImages.index].tag]
         fk_image = Currentconsult!images[lcImages.children[lcImages.index].tag]!pk  
         '    PersonPicture!path = CurrentThumb.Tag
         '     P!fk_image = modContactsDBI.Image_Save(PersonPicture, currentconsult.GetPK())
         '    If Not Error Then
         sql = "Update contacts.data_persons set fk_image = " & fk_image & " WHERE pk=" & currentconsult!patient!fk_person
         modDBConnect.exec_query(sql)
         modDBConnect.CommitTrans()
         Try PicPatient.Picture = Picture.Load(PatientPicture!path)
         '    Endif
         
   End Select 
   
End

Public Sub lcImages_Click()
   
   '----------------------------------------------------------------------------------
   'User has clicked on one row of the list container - hence selecting a patient
   'put that patient into the current patient collection, and photo into patient_photo
   '----------------------------------------------------------------------------------
   
   Dim hctrl As Control
   Dim PB As PictureBox
   Dim HB As HBox
   Dim Tl As TextLabel
   Dim CP As Collection 
   
   If lcImages.Count Then
      
      CP = Currentconsult!images[Last.children[Last.index].tag]
      ' Editor_ShowPage("images", "The Image", CP)
      If IsNull(CP!tag) Then
         Editor_ShowPage("images", "Image:" & Str(CP!pk), CP) 
      Else
         Editor_ShowPage("images", CP!tag, CP)
      Endif
      
      ' For Each hctrl In Last.children[Last.index].children
      '    If hctrl Is HBox Then
      '       HB = hctrl  
      '       PB = HB.Children[0] 
      '       'Patient_Photo = PB.Picture
      '    Endif
      ' Next
   Endif
   
End

Public Sub ButtonBox1_Menu()
   
   mnuHelp.Popup()
   
End

Public Sub HBox_Consultation_Type1_Enter()
   '---------------------------------------------
   'If user's mouse over the type of consultation
   'replace the label with a combo box
   '---------------------------------------------   
   
   cmbConsultationType.Visible = True  
   lblConsultationType.visible = False 
   
End                                       

Public Sub HBox_Consultation_Type1_Leave()        
   '-------------------------------------------------
   'The consultation type combo is now made invisible
   'and its text shown on a label in its placee
   '--------------------------------------------------  
   
   cmbConsultationType.Visible = False           
   lblConsultationType.visible = True        
   
End                                                  

Public Sub tsCalculators_Click()
   
   Select Case Last.index
      Case 1
         If IsNull(PregCalc) Then
            PregCalc = New FPregCalc(HBox_PregCalc) 
            obs = New Observer(PregCalc.tbInsert) As "PregCalc_tbEditArea"
            obs = New Observer(PregCalc.tbInsertRevised) As "PregCalc_tbEditArea"
         End If
      Case 2
         If IsNull(Calculator) Then
            Calculator = New FCalculator(HBox_Calculator)
         End If   
   End Select
   
End

Public Sub PregCalc_tbEditArea_Click()
   '----------------------------------------------------------------------
   'Over-rides the tbInsert button click event in the pregnancy calculator
   'to get a summary of the text and insert into the progress notes
   '----------------------------------------------------------------------
   
   Select Case Last.tag
      Case "insert"
         FGeneralNotesEditor.teNotes.Insert(".sometext")
         FGeneralNotesEditor.teNotes.richtext = Replace$(FGeneralNotesEditor.teNotes.richtext, ".sometext", PregCalc.Dates_Summary_GetRichText())
         
      Case "insert revised"
         modUtil.NotImplemented("Inserting revised dates into notes")
   End Select
   
End

Public Sub cmbSearch_Click()
   '-----------------------------------------------------------------------------------
   'User has clicked on the down arrow of the combo box and selected a previous patient
   '-----------------------------------------------------------------------------------
   
   Consult_Save()
   Gui_Clear()
   Patients_Find(Patients_Seen[cmbSearch.index]!fk_patient)
   
End

Public Sub pbMeasurementGraph_MouseDown()
   
End

Public Sub Button1_Click()
  'temporary for richard only
   modMeasurementsDBI.Run_Measurement_Fix(currentconsult!progress_notes, currentconsult!patient!fk_patient)
   cvwMeasurementFavorites.MoveCurrent()
   Measurement_Graph("", cvwMeasurementFavorites.Item.text)
End
