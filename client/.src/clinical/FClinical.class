' Gambas class file

' Copyright (C) 2008-2015 Dr Richard TERRY

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-------------------------------------------------------------------------------------------------------------------
' PURPOSE         The 'workspace' for the main clinical functions
'                 It is accessed all over EasyGP as a static form Fclinical

' HOW IT WORKS    User searches For the patient In FClinicalToolbar
'                 FClinicalToolbar then via Patient_Load_Record(,,,) runs FClinical.Init_Patient(currentconsult)
'                 - this loads all the clinical lists via FClinicalLists, ie, scripts, recalls, ordering etc,
'                   loads an instance of the past history problems lists and task manager
'                 The whole show is then actioned by either:
'                 1) The Buttons on the Toolbar in  FClinicalToolbar these load sections as per icons on the bar
'                 2) Clicking on any of the tabs in the FClinicalLists lets user view and manipulate data eg scripts
'                 3) Tasks can be edited or viewed via the embedded taks manager
'                 4) Menu options on the FClinicalToolbar Menu (hardly ever need to use this)

'MAINI SUBS       Editor_ShowPage does all the work
'                 - it is called e.g when user clicks on toolbar icon to eg load the script writer, recalls etc
'                 - it is called
'--------------------------------------------------------------------------------------------------------
Private currentconsult As CConsult               'the 'master' class for the patient
Public ProgressNotesPage_cvwMedications As ColumnView
Private Control_For_Focus As Control            'don't remove this without asking me (RT)
Private iCertificatetype As Integer = const.certificate_type_medical 'default to this
Public currentTemporaryWebbrowserHTMLFilename As String 'temporary file being displayed in browser window
Private bEditing As Boolean                      'if true we are editing an entire consult on a different date
Private bExit As Boolean                         'general flag used to prevent recursion into routine
Public EditorPages As Collection                 'all pages which are stuck onto the workspace
Private Const cListMedications As Integer = 0    'all these reference lists of tabstip_lists
Private Const cListRequests As Integer = 1
Private Const clistReferrals As Integer = 2
Private Const clistRecalls As Integer = 3
Private Const cListCertificates As Integer = 4
Private Const clistMeasurements As Integer = 5
Public Const clistImages As Integer = 6          'accessed from other forms
Private Const cListGPMPTCA As Integer = 9
Private Const cList_Miscellaneous_forms As Integer = 10
Private Const cTabResults As Integer = 1
Private Const CTabLetters As Integer = 2
Private Const ctabCalculators As Integer = 7
Private Const cTabQuickContacts As Integer = 8
Private Const cMainDisplay_DataEntry As Integer = 1
Private Const cMainDisplay_ProgressNotes As Integer = 2
Private Const cMainDisplay_CarePlan As Integer = 3
Public bShowEditLastConsultButton As Boolean
Public bProgressNotesEnforceCoding As Boolean     'If True then user forced to code progress notes do not make this private
Public active_medications As Collection
Private obs As Observer                           'Observer used when FHelp is being shown, to detect the help close button
Public medication_sort_order As String = "generic" 'whereas this is the default, may be changed at any time on the scripts tab
Public Form_Diabetes As FDiabetes                  'Public forms Accessed from FclinicalToolbar
Public form_gpmp_tca As FGPMPTCA                   'to read which tab is active on the multiple tabs and set button states
Public form_certificates As FCertificates          'see FClinicalToolbar.Toolbar_Buttons_Activate()
Private ProgressNotesPage As FProgressNoteEditor   'will always be re-initialised with new patient
Private PrescriptionPage As FPrescriptions         'must be destroyed in Gui_Reset()
Private Form_Patient_Tasks As FPatientTasks        'all outstanding tasks for the patient in a grid
Public Form_ExportClinical As New FExportClinical  'Allows user to export notes from FClinical as pdf
Public Form_Decision_Support As FDecisionSupport
Public Form_ClinicalLists As FClinicalLists        'hold all the lists, eg medications, letters in/out etc
Public FCurrentHTMLViewer As FHtmlViewer           'dont remove just testing
Public FGeneralNotesEditor As FProgressNoteEditor  ' dont remove just testing
Public Form_Problem_Lists As FPastHistoryProblemLists

Static Private form_clinical As FClinical         'allows FClinical Access from anywhere  = Me -see Init()

Public Sub _new()

   Init()

End

Public Sub Init()
   '--------------------------------------------------------------------------------
   'form_clinical used when other forms need to 'find' this form to update something
   '--------------------------------------------------------------------------------

   form_clinical = Me                                        'allow access of FClinical from any other module
   Form_Patient_Tasks = New FPatientTasks(Vbox_PatientTasks)
   With Form_Problem_Lists = New FPastHistoryProblemLists(VBox_Problem_Lists)
      .VBox_InactiveIssues.Reparent(VBox_InActiveIssues)
   End With
   Form_ClinicalLists = New FClinicalLists(Vbox_Clinical_lists)
   lblMeasure.text = "Notes without patient present   "
   EditorPages = New Collection
   currentconsult = Null
   Form_Decision_Support = New FDecisionSupport(Vbox_Decision_Support)
   obs = New Observer(Form_Decision_Support.tbClose) As "FDecision_Support_tbClose"
   Settings_Load()
   lblMeasure.text = "  Cumulative   "
   VBox_Clinical_Lists.Visible = True
   modLater.Add(Me, "Init_Later")

End

Public Sub Init_Later()

   If modAdminDBI.Config_Get_Staff_Member("show-edit-last-consult-button", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff) Then
      bShowEditLastConsultButton = True
   Endif
   If modAdminDBI.Config_Get_Staff_Member("progress_notes_enforce_coding", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff) Then
      bProgressNotesEnforceCoding = True 'defaults to false to keep Ian Sane
   Endif

End

Public Sub Init_Patient(cons As CConsult)
   '--------------------------------------------------------------
   'Called by FClinicalToolbar, loads a minimal patient recordset
   'Clinical lists and loads active medications only
   'The task manager listing outstanding task details for patient
   'An instance fo the patients past history items
   'Basic graphs
   '--------------------------------------------------------------

   Currentconsult = cons
   Workspace_Load_Minimal_Panels
   With Form_ClinicalLists
      .bExit = False
      .Init(Currentconsult)           'create the lists and init the medications list
      .TabStrip_Lists.Enabled = True
   End With
   With Form_Problem_Lists
      .Init(Currentconsult, "Health Issues Summary")
   End With
   With TabStripProblemLists
      .index = 1
      .text = "Inactive Health Issues (" & Str(Form_Problem_Lists.Get_Inactive_Problem_Count()) & ")"
      .index = 0
      .text = "Active Health Issues (:" & Str(Form_Problem_Lists.GetMajor_Problem_Count() + Form_Problem_Lists.GetActiveSignficant_Problem_Count()) & ")"
   End With
   VboxProblemLists.height = Form_Problem_Lists.GetMajor_Problem_Count() * 20
   Form_Patient_Tasks.Init(currentconsult)           'Show a list of outstanding tasks

End

Static Public Sub Restore_Right_Side_Splits()

   form_clinical.Layout_Right_Pane

End

Static Public Sub DecisionSupport_SetHTML(sHtml As String)

   form_clinical.Form_Decision_Support.WebView1.HTML = shtml

End

Static Public Function Hide_Tasks_And_Problems_Lists(bFlag As Boolean)

   'when showing the documents metadata
   form_clinical.VBox_PatientTasks.visible = Not bFlag
   form_clinical.VboxProblemLists.Visible = Not bFlag

End

Static Public Function WorkspaceEditor_Caption() As String

   Return form_clinical.WorkspaceEditor.ActiveWindow.Caption

End

Static Public Sub Todays_Prescriptions_Reload()
   'called from an instance of FClinLists_Medications

   form_clinical.PrescriptionPage.Prescriptions_Written_Today_Reload

End

Static Public Function Help_Show(sPath As String, heading As String, flag As Boolean)
   '--------------------------------------------
   'shows help or whatever in the webkit browser
   '--------------------------------------------

   modUtilGUI.NotImplemented("Displaying help files", "Health Issues")
   Return
   form_clinical.vBoxWorkSpace.Visible = Not Flag
   form_clinical.FHelp.Visible = flag
   If flag Then
      form_clinical.FHelp.Help_Show(sPath)
   End If

End

Static Public Sub ProgressNotesEnforceCoding_UpdateFlag(bflag As Boolean)
   '-------------------------------------------------------------------------
   'Called by FStaffPreferences if enforcing progress notes coding is changed
   '-------------------------------------------------------------------------

   form_clinical.bProgressNotesEnforceCoding = bFlag   'bug here fix me 'how come at end there is a  illegal function in the IDE

End

Static Public Sub EditLastConsultButton_Display(bflag As Boolean)
   'User has changed visibility of the button to allow editing last consult

   With form_clinical
      .bShowEditLastConsultButton = bFlag
      .tbEditLastConsult.visible = bFlag
   End With

End

Static Public Function Enable_Edit_Button(flag As Boolean)

   FClinicalToolbar.tbEdit.Enabled = flag

End

Static Public Function Enable_Save_Button(flag As Boolean)

   FClinicalToolbar.tbSave.Enabled = flag

End

Static Public Function active_medication_list_get_external() As Collection 'fixme look at where this is used and shift it out
   '------------------------------------
   'returns a list of active medications
   '------------------------------------

   Return FClinical.active_medication_list()

End

Public Function active_medication_list() As Collection  'fixme look at where this is used and shift it out

   Return modPrescribingDBI.active_medication_list(currentconsult)

End

Public Function get_medication_sort_order() As String

   Return form_clinical.medication_sort_order

End

Static Public Sub Reload_Tab_External(cSection As Integer)
   '-------------------------------------------------------
   'Reloads data on a tab, called from another form eg
   'If psycho-social history is showing then reloads then
   'data on this pertaining to phone numbers if the contact
   'is also a patient
   '-------------------------------------------------------

   form_clinical.Reload_Tab(cSection)

End

Public Function Reload_Tab(Section As String)
   '--------------------------------------------------------------------------------
   'Used to call the Reload() function of a particular module
   'For example user may have deleted a request form from the requests list
   'The delete routine has then to check if the requests module is loaded onto a tab
   'and if it is, reload current requests written for this consultation
   '--------------------------------------------------------------------------------

   Dim Page As Control

   Inc Application.Busy
   For Each page In WorkspaceEditor.Windows
      If page Is FLinkContainer Then page = page.VBoxEditor.Children[0]
      If page.tag = section Then
         Try Object.Call(page, "Reload")
      End If
   Next
   Dec application.Busy
Catch
   Application.Busy = 0

End

Static Public Sub Editor_ShowPage_External(page_name As String, page_tag As String, page_data As Variant, Optional additional_page_tag As String = "")
   '-------------------------------------------------------------
   'Adds a page to the workspace editor, called from another form
   '-------------------------------------------------------------

   form_clinical.Editor_ShowPage(page_name, page_tag, page_data, additional_page_tag)

End

Static Public Function EditorPage_Get(sName As String) As Form

   Return form_clinical.EditorPages[sName]

End

Static Public Function Display_Coding_System()
   'Form may not be loaded, so try

   Try form_clinical.lblCodingSystem.text = "Coding System:" & modCodingDBI.coding_system!system

End

Static Public Sub Update_graphs()

   Try form_clinical.Form_ClinicalLists.form_graphs.Measurements_Make_Graph()

End

Static Public Function Editor_RemovePage(sKey As Variant, Optional bCloseAll As Boolean = False)
   '-------------------------------------------------------------------------------------------------
   'Removes 1 or all pages  from the EditorPages collection and its associated workspace tab
   'The key of the hWindow can be integer if past history progress notes page or a string eg "Travel"
   'If we are implicitly calling this page (ie - it is not being shut down by the user closing a tab
   'or the program exiting - then cancel the save of information on this page
   'For example - we use this when the user may have deleted a past history item, whilst still having
   'unsaved progress notes on this item in a progress notes editor.
   '-------------------------------------------------------------------------------------------------

   Dim Page As FLinkContainer
   Dim hCtrl As Control
   Dim frmConsult As FProgressNotePage

   form_clinical.WorkspaceEditor.Lock()
   For Each page In form_clinical.WorkspaceEditor.Windows
      If bCloseAll Then
         page.Close()
      Else
         If page.tag = sKey Then
            '------------------------------------------------------------------------------------
            'Found a specific page  if this is a progress notes page, stop it saving its contents
            'when frmConsult.form_close() is called, it attempts to save the editor contents
            '------------------------------------------------------------------------------------
            form_clinical.EditorPages.Remove(skey)
            For Each hctrl In page.VBoxEditor.Children
               If hctrl Is Form Then
                  Select Case hctrl.Name
                     Case "FProgressNotePage"
                        frmConsult = hctrl
                        frmConsult.bCancelSave = True
                        Goto Unlock_Editor 'don't allow progress note page to close
                        ' Break
                  End Select
               End If
            Next
            page.Close
            Break
         End If
      End If
   Next
   Goto Unlock_Editor

Unlock_Editor:
   form_clinical.WorkspaceEditor.Unlock()

End

Static Public Sub WorkspaceEditor_Show()
   '-------------------------------------------------------------------------------------------
   'WorkSpaceEditor is a workspace control - currently until replaced by the 'emulated browser'
   'the main control on FClinical which has all the tabs for example clincal notes, or any
   'section loaded by Editor_ShowPage()
   '-------------------------------------------------------------------------------------------

   form_clinical.WorkSpaceEditor.Visible = True

End

Static Public Sub WebBrowser_Show(sData As String, Optional heading As String)
   '------------------------------------------------------------------
   'Displays html in the central webbrowser
   'If the data is a filename, load file, otherwise load raw html
   '------------------------------------------------------------------

   FClinical.Editor_ShowPage_External("browser", heading, sData)

End

Public Sub FDecision_Support_tbClose_Click()

   Stop Event
   VSplitClinical_RightPane.layout = Settings["FClinical/VsplitClinical_RightPane"]
   DecisionSupport_Show("", False)

End

Static Public Sub DecisionSupport_Show(Optional Heading As String, flag As Boolean, Optional help_section As String = "")
   '----------------------------------------------------------------------------
   'There is a texteditor contained in Vbox_Decision_Support, which is hidden on
   'the right hand side of the screen. In any section of EasyGP needing simple
   'decision support, this is shown, whilst what's usually on top is hidden
   'for example of implementation see the Mental Health module
   '-----------------------------------------------------------------------------

   form_clinical.VboxProblemLists.Visible = Not flag
   form_clinical.Vbox_PatientTasks.Visible = Not flag
   form_clinical.VSplit_TabbedListsGraph.Visible = Not flag
   form_clinical.Vbox_Decision_Support.Visible = Flag
   If Not Flag Then form_clinical.Layout_Right_Pane  'restore splits if form is hidden
   Wait
   If heading <> "" Then form_clinical.Form_Decision_Support.lblDecisionSupport.text = Heading
   If help_section <> "" Then form_clinical.Form_Decision_Support.Set_Help_Section(help_section)

Catch
   Return

End

Static Public Function IsSamePatient(fk_patient As Variant) As Boolean
   '-------------------------------------------------------------------
   ' returns true if fk_patient is the same as the currently loaded patient
   ' in FClinical. false if no patient loaded.
   ' Ian, this will crash if no FClincal is loaded.
   '-------------------------------------------------------------------

   Try Return form_clinical.IsSamePatient_Instance(fk_patient)

End

Public Function IsSamePatient_Instance(fk_patient As Variant) As Boolean

   Dim fk As Variant

   Try fk = currentconsult!patient!fk_patient
   If Error Then Return False
   If fk = fk_patient Then
      Return True
   Else
      Return False
   Endif

End

Static Public Sub Refresh_Section(section As Integer)

   Try form_clinical.Refresh_Section_Instance(section)
   If Error Then
      Message.Title = "Updating Clinical Section"
      Message.warning("Error trying to update a section")
   End If

End

Public Sub Refresh_Section_Instance(section As Integer)
   '-------------------------------------------------------------------------
   'Refreshs lists, progress note pages when another section alters something
   'If not a list being refreshed, refresh all progress notes pages contained
   'in the workspace, this way e.g if you have added new management plans or
   'historial summaries in past history, and have a progress note page
   'open entering notes for that problem, next time you switch to it those
   'summaries will have been updated
   '-------------------------------------------------------------------------

   Dim hCtrl As Control
   Dim frmConsult As FProgressNotePage
   Dim Page As FLinkContainer
   Dim Container As FLinkContainer
   Dim HTMLViewer As FHtmlViewer
   Dim Form_PDF As FPDF

   If IsNull(currentconsult) Then Return
   Select Case section
      Case Const.cSection_Lists_GPMP_TCA
         Try Form_ClinicalLists.form_clinlists_gpmp_tca.cvwGPMPTCA_Reload(True) 'reload any gpmp/tca documents refreshing the collection  - this form can be null
      Case const.cSection_Lists_Results
         Try Form_ClinicalLists.form_clinlists_ordering.cvwResults_Reload(True)         'this form can be null if not accessed yet
      Case const.cSection_PastHistory
         Form_Problem_Lists.ReLoad(True)
      Case const.cSection_Prescriptions
         Form_ClinicalLists.form_clinlists_medications.Medications_Refresh       'this list is always present
      Case const.cSection_Requests                                              'these textboxes are a misnomer - shared with request/results FIXME.
         Try Form_ClinicalLists.form_clinlists_ordering.cvwRequests_Reload(True)   'refreshes the requests collection and reloads the columnview if this form exists
      Case const.cSection_Referrals
         currentconsult.Refresh("referrals_written")     'fixme probably should pass a flag to cvwReferrals_load
         Try Form_ClinicalLists.form_clinlists_correspondence.cvwReferrals_Load
      Case const.cSection_Images
         Try Form_ClinicalLists.form_clinlists_images.Images_Reload(True)
      Case Const.cSection_Recalls
         Try Form_ClinicalLists.form_clinlists_recalls.cvwRecalls_Reload
      Case Const.cSection_Workcover
         Try Form_ClinicalLists.form_clinlists_certificates.Workcover_Certificates_Reload 'can be null if not yet viewed
      Case Const.cSection_MedicalCertificates
         Try Form_ClinicalLists.form_clinlists_certificates.Certificates_Medical_Refresh()
      Case const.cSection_Documents    'fixme to reflect the letters list
         Try Form_ClinicalLists.form_clinlists_correspondence.cvwLettersReceived_Reload(True)
      Case Else
         '-------------------------------------------------
         'Not a list to update must be a progress note page
         'Update this whether active or not
         'or care plan or health summary
         '-------------------------------------------------
         For Each page In WorkspaceEditor.Windows
            Container = page
            For Each hctrl In page.VBoxEditor.Children
               Print hctrl.Name
               Select Case hctrl.Name
                  Case "FProgressNotePage"
                     frmConsult = hctrl
                     If section <> Const.cSection_GeneralNotes Then
                        If Not IsNull(frmConsult.Get_pk_pasthistory()) Then
                           frmConsult.Health_Issue_Reload()
                           page.title = frmConsult.HealthIssue_GetName()
                        End If
                     End If
                     Break
                  Case "FPDF"
                     Select Case section
                        Case Const.cSection_HealthSummary
                           Form_PDF = hCtrl
                           'reconstruct the health summary but do not delete the temporary file when FPDF loads it.
                           Form_PDF.Load_PDF(modPrinting.Latex_To_PDF(modProgressNotes.Health_Summary_Construct_LaTex(currentconsult).GetData()), False, False)
                     End Select
                  Case "FHtmlViewer"
                     Select Case section
                        Case const.cTab_Food_Drug_List
                           If Page.caption = "Brand Equivalents" Then
                              HTMLViewer = hctrl
                              HTMLViewer.WebView1.HTML = modPrescribingDBI.Brand_Equivalents_Make_HTML(modPrescribingDBI.active_medication_list(currentconsult), currentconsult)
                              Break
                           Endif
                     End Select
               End Select
            Next
         Next
   End Select

End

Public Sub FormFonts_Adjust()
   '------------------------------------------------------------------------
   'first attempt to globally change the label sizes on all forms edit areas
   'when global font is changed
   '------------------------------------------------------------------------

   Dim i As Object

   If IsNull(EditorPages) Then Return
   Inc application.Busy

   For Each i In EditorPages
      Try Object.Call(i, "EditArea_Resize_Labels")
   Next
   Dec application.Busy
Catch
   Application.Busy = 0

End

Public Sub Settings_Save()

   Dim i As Object

   For Each i In EditorPages
      Try Object.Call(i, "Settings_Save")
   Next
   Settings["FClinical/Hsplit_Main"] = HSplit_Main.Layout                                             'horizontal splitter separating main workspace with lists on right hand side
   Settings["FClinical/VSplit_TabbedListsGraph.Layout"] = [VSplit_TabbedListsGraph.Layout[0], Max(VSplit_TabbedListsGraph.Layout[1], 150)]

End

Private Sub Settings_Load()

   Layout_Right_Pane()
   HSplit_Main.Layout = Settings["FClinical/HsplitClinical_Main", modUtilGUI.HSplit([1222, 489])]

End Sub

Public Sub Layout_Right_Pane()

   ' Layout the split on the right side - this is also called from any form requesting
   ' the removal of the decision support panel
   Try VSplitClinical_RightPane.layout = Settings["FClinical/VsplitClinical_RightPane"]

End

Public Sub Consult_Save()
   '------------------------------------------------------------------------------------------
   'Saves any outstanding data for the consultation in the progress note editor
   'As the progress notes view can be 'saved' as a pdf via the same Save button on the toolbar
   'don't auto-save this, not needed except explicitly when user wants to export the notes
   'If no notes are in the progress note editor, codes will not be saved as there will be
   'no fk_progress note to link to.
   '------------------------------------------------------------------------------------------

   Dim i As Object

   If IsNull(currentconsult) Then Return  'do not remove this
   '  If Consult_Time_Check_Valid() = False Then Return
   Inc Application.Busy

   For Each i In EditorPages
      If i.name <> "FProgressNotesViewer" Then
         Try Object.Call(i, "Save")
      End If
   Next
   Application.Busy = 0
Catch
   Application.busy = 0
   Return

End

Public Function Consult_Is_Coded() As Boolean
   '----------------------------------------------------
   'Ensures that the consult is coded, or at least tries
   'to bully the user into doing so
   'Returns True if consult is coded or they refuse
   '----------------------------------------------------

   Dim sMsg As String

   currentconsult.Refresh("progress_notes")                      'ensure progress notes up to date
   If Not ProgressNotesPage.Progress_Notes_Codes_Get().count Then
      Application.Busy = 0
      Message.title = "Coding Consultations"
      sMsg = "It is recommended that you code all your consultations, in fact it is probably a requirement of your practice accreditation.\n\n"
      "Do you wish to code this consultation now?"
      If Message.Question(smsg, "Yes", "No") = 1 Then         'If they do want to code
         Editor_ShowPage("New General Notes")                 'make sure general notes tab showin
         FGeneralNotesEditor.txtReasonEncounter.SetFocus      'focus to the text entry for codes
         Return
      End If
   Endif
   Return True                                                   'all is well, they've at least coded something
Catch                                                       'have enountered bug here ?nature
   Return

End

Public Sub Gui_Clear()
   '--------------------------------------------------------------------
   'Removes all patient data from the user interface except the toolbar
   'clears all visible lists, graphs, the patients tasks gridview etc
   '--------------------------------------------------------------------

   bExit = True
   bediting = False
   Inc application.busy
   Form_ClinicalLists.Gui_Clear
   PrescriptionPage = Null
   WorkspaceEditor_Clear()                     'remove all current pages from workspace, starts new EditorPages collection
   With Form_Problem_Lists
      .Clear_Lists
   End With
   With Form_Patient_Tasks
      .gvTasks.clear
      .VBox_Tasks.Visible = False
      .tbNew.Enabled = False
      .tbSave.Enabled = False
      .tbHideForm.enabled = False
      .Vbox_TasksList.Visible = True
   End With
   TabStripProblemLists.index = 1
   TabStripProblemLists.Caption = "Inactive Health Issues"
   TabStripProblemLists.index = 0
   TabStripProblemLists.Caption = "Active Health Issues"
   bExit = False                                 '?still need this
   DecisionSupport_Show("", False)              'remove right hand side decision support panel (could be showing)
   application.busy = 0                        'ensure have no hourglass
   iCertificatetype = const.certificate_type_medical

End

Public Sub Workspace_Load_Minimal_Panels()

   WorkspaceEditor.Lock()                    'DO NOT REMOVE THE LOCK/UNLOCK
   Editor_ShowPage("All Previous Notes")     'Always show all previous notes
   Editor_ShowPage("New General Notes")      'Default to general notes tab.
   WorkspaceEditor.Unlock()                  'OR THE GUI WILL RE-SET ITSELF

End

Public Sub WorkspaceEditor_Clear()
   'Purpose: removes all existing child tabs from the workspace editor

   Dim hWindow As Window

   WorkspaceEditor.Lock()
   For Each hWindow In WorkspaceEditor.Windows
      hWindow.Close()
   Next
   WorkspaceEditor.Unlock()
   EditorPages = New Collection

End

Public Sub Editor_ShowPage(sPageName As String, Optional page_tag As String = "", page_data As Variant, additional_page_tag As String = "") As Form
   '----------------------------------------------------------------
   'PURPOSE:   Adds a new page to the progress notes workspace
   '           according to sType parameter passsed to it
   '           e.g "past history", "new page", "Request" etc
   '           Two types of pages Document_Viewer and Result_Viewer are global instances of FDocumentviewer
   '           and once created in this subroutine 'live' for the life of the EasyGP instance unless the
   '           tab is closed
   ' A FProgressNotePageContainer doesn't contain the texteditor - just a form
   ' containg two rows of toolbars with combo's and text formatting
   ' buttons, contained in VboxEditor
   '
   ' The container then has added to it either other forms or just
   ' a plain textedit control for pages only needing a text editor
   ' Note that Collections start from a zero(0) count
   ' but the tablist count starts from 1
   ' hence first tab > EditorPages[0] etc
   ' the page tag is either fixed eg "Skin Excision" or
   ' is a pk_pasthistory if doing progress notes for a past historyDisplay_Health_Issue
   ' item
   'FIXME convert this routine so that lower(page.title) = tag
   'NB: Though it would seem logical not to repeat for every new page
   '    the code: WorkspaceEditor.Add(NewPage)
   '    within each case statement, putting it at the end seems to
   '    make it impossible to auto-set focus on the first control
   '    in the new form.
   '--------------------------------------------------------------

   Dim Demographics As FPatients
   Dim Form_Clozapine As FClozapine
   Dim INRManager As FInr
   Dim Shortcuts As FStaffPreferencesShortCuts
   Dim Image_Viewer As FProgressNotesImages
   Dim retform As Form ' the Form we are returning to the caller: very useful for scripting
   Dim webpage As FBrowser
   Dim Browser As FHtmlViewer
   Dim GPCOG As FGPCOG
   Dim EdinburghPNDS As FEdinburgPNDScale
   Dim Chads As FChads
   Dim HasBled As FHasBled
   Dim K10 As FK10OutcomeTool
   Dim RestlessLegs As FRestlessLegs
   Dim Export_Clinical As FExportClinical
   Dim MultiMedia As FMoviePlayer
   Dim PsychoSocialHistory As FPsychoSocialHistory
   Dim AllPreviousNotes As FProgressNotesViewer
   Dim SingleHealthIssueNotes As FProgressNotesViewer
   Dim ExcisionPage As FProcedures
   Dim RequestPage As FRequests
   Dim Request_Names As FRequestNames
   Dim PregnancyPage As FPregnancy
   Dim RecreationalDrugs As FRecreationalDrugs
   Dim FamilyHistoryPage As FFamilyHistory
   Dim OccupationalHistoryPage As FOccupation
   Dim AllergyPage As FAllergy
   Dim RecallPage As FRecalls
   Dim PastHistoryPage As FPastHistory
   Dim ReferralPage As FReferrals
   Dim MentalHealthPage As FMentalHealth
   Dim VaccinationPage As FVaccinations
   Dim workcoverNSWPage As FWorkcoverNSW
   Dim TravelPage As FTravel
   Dim page As FLinkContainer
   Dim PDF As FPDF
   Dim DrugBrowser As FPDF
   Dim Form_Library As FLibrary
   Dim Picture_Viewer As FDocumentViewer
   Dim sMsg As String
   Dim Document_Viewer As FDocumentViewer                 'view any document but on the same page as previous
   Dim Result_Viewer As FDocumentViewer                   'view any resuilt  but on the same page as previous
   Dim Letters_Written_Viewer As FDocumentViewer          'view any previous letters written on same page as previous
   Dim bPagefound As Boolean
   Dim downloader As CFileDownloader
   '----------------------------------------------------------------------
   'With these pages, we want the appropriate list to be in the foreground
   'So this switches the list
   '----------------------------------------------------------------------
   Select Case sPageName
      Case "Referrals"
         Form_ClinicalLists.TabStrip_Lists.index = clistReferrals
         Refresh_Section_Instance(const.cSection_Referrals)
      Case "Requests"
         Form_ClinicalLists.TabStrip_Lists.index = cListRequests
         Refresh_Section_Instance(const.cSection_Requests)            'swap tabbed lists to requests
      Case "Workcover"
         Form_ClinicalLists.TabStrip_Lists.index = cListCertificates
         Form_ClinicalLists.form_clinlists_certificates.rbWorkCoverCertificate.value = True
      Case "Measurements"
         Form_ClinicalLists.TabStrip_Lists.index = clistMeasurements
      Case "Recalls"
         Form_ClinicalLists.TabStrip_Lists.index = clistRecalls
   End Select
   'Results and documents  and audits are always shown on the same editor page, just re-loaded every time
   If sPageName = "result" Then                                             'generic tab for documents, re-used time after time after time
      bPagefound = False
      For Each page In WorkspaceEditor.Windows                                    'search all tabs
         If Page.title = "Result" Or Page.Title = "UNFILED RESULT" Then                     'if result tab showing
            WorkspaceEditor.ActiveWindow = page
            Result_Viewer = page.VBoxEditor.Children[0]
            bPagefound = True
            Break
         End If
      Next
      If bPagefound = False Then                                             'if not already showing
         page = New FLinkContainer                               'create the container
         page.tag = "Result"
         page.title = "Result"
         Result_Viewer = New FDocumentViewer(page.VBoxEditor)  'and instance of document (never killed whilst program running)
         WorkspaceEditor.Add(page)
      Endif
      If additional_page_tag = "html" Then
         Result_Viewer.Load_Html(page_data)
      Else
         downloader = New CFileDownloader
         downloader.Set_Viewer(Result_Viewer, additional_page_tag)
         modFiles.Background_Get("document_archiving_directory", page_data, downloader)
      Endif
   Else If sPageName = "audit trail" Then
      bPagefound = False
      For Each page In WorkspaceEditor.Windows                  'search all tabs
         If Page.title = "Audit Trail" Then                     'if audit trail tab is showing
            WorkspaceEditor.ActiveWindow = page
            Document_Viewer = page.VBoxEditor.Children[0]
            bPagefound = True
            Break
         End If
      Next
      If bPagefound = False Then                                 'if not already showing
         page = New FLinkContainer                               'create the container
         page.tag = "Document"
         page.title = "Document"
         Document_Viewer = New FDocumentViewer(page.VBoxEditor)  'and instance of document (never killed whilst program running)
         WorkspaceEditor.Add(page)
      End If
      Document_Viewer.Load_Html(page_data)
   Else If sPageName = "Immunisation Schedule" Then
      bPagefound = False
      For Each page In WorkspaceEditor.Windows                                    'search all tabs
         If Page.title = "Immunisation Schedule" Then                     'if result tab showing
            WorkspaceEditor.ActiveWindow = page
            Document_Viewer = page.VBoxEditor.Children[0]
            bPagefound = True
            Break
         End If
      Next
      If bPagefound = False Then                                             'if not already showin
         page = New FLinkContainer                               'create the container
         page.tag = "Immunisation Schedule"
         page.title = "Immunisation Schedule"
         Document_Viewer = New FDocumentViewer(page.VBoxEditor)  'and instance of document (never killed whilst program running)
         WorkspaceEditor.Add(page)
         ' 'lblsection.text = ""
      End If
      With Document_Viewer
         .Load_PDF("clinical/vaccination" &/ page_data)
         .form_pdf.btNext_Click()
      End With
   Else If sPagename = "document" Or If sPageName = "pdf document" Then
      bPagefound = False
      For Each page In WorkspaceEditor.Windows                                    'search all tabs
         If Page.title = "Document" Then                     'if result tab showing
            WorkspaceEditor.ActiveWindow = page
            Document_Viewer = page.VBoxEditor.Children[0]
            bPagefound = True
            Break
         End If
      Next
      If bPagefound = False Then                                             'if not already showin
         page = New FLinkContainer                               'create the container
         page.tag = "Document"
         page.title = "Document"
         Document_Viewer = New FDocumentViewer(page.VBoxEditor)  'and instance of document (never killed whilst program running)
         WorkspaceEditor.Add(page)
      End If
      If additional_page_tag = "html" Then
         Document_Viewer.Load_Html(page_data)
      Else
         downloader = New CFileDownloader
         downloader.Set_Viewer(Document_Viewer, "pdf")
         modFiles.Background_Get("document_archiving_directory", page_data, downloader)
      Endif
   Else If sPagename = "letters written" Then
      bPagefound = False
      For Each page In WorkspaceEditor.Windows                                    'search all tabs
         If Page.title = "Letters Written" Then                     'if result tab showing
            WorkspaceEditor.ActiveWindow = page
            Letters_Written_Viewer = page.VBoxEditor.Children[0]
            bPagefound = True
            Break
         End If
      Next
      If bPagefound = False Then                                             'if not already showin
         page = New FLinkContainer                               'create the container
         page.tag = "Letters Written"
         page.title = "Letters Written"
         Letters_Written_Viewer = New FDocumentViewer(page.VBoxEditor)  'and instance of document (never killed whilst program running)
         WorkspaceEditor.Add(page)
      End If
      Select Case additional_page_tag                            'show appropriate document
         Case "tex"
            Message.info("sorry you'll have to fix the tex stuff  yourself")
            ' Letters_Written_Viewer.Load_PDF(modFiles.Get("document_archiving_directory", page_data))
         Case "html"
            Letters_Written_Viewer.Load_Html(page_data)
      End Select
   Else
      If Not Editor_SetActivePage(sPageName, page_tag) Then 'check if this page be it section or a result is already showing.
         Select Case sPageName
            Case "image"
               page = New FLinkContainer
               Picture_Viewer = New FDocumentViewer(page.VBoxEditor)
               Picture_Viewer.Load_Picture(modFiles.Get("document_archiving_directory", page_data))
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = Picture_Viewer
            Case "Patients"                                             'the FPatients patient contact manager
               page = New FLinkContainer
               Demographics = New FPatients(page.VBoxEditor)
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = Demographics
            Case "Clozapine"
               page = New FLinkContainer
               With Form_Clozapine = New FClozapine(page.VBoxEditor)
                  .Init(currentconsult)
               End With
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = Form_Clozapine
            Case "Request Names"
               page = New FLinkContainer
               With Request_Names = New FRequestNames(page.VBoxEditor)
                  .Init()
               End With
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = Request_Names
            Case "Short Cuts"
               page = New FLinkContainer
               With Shortcuts = New FStaffPreferencesShortCuts(page.VBoxEditor)
                  .Init()
                  .ShortCut_New(page_data)
                  .Set_Embedded_Name("FClinical")
               End With
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = Request_Names
            Case "multimedia"
               page = New FLinkContainer
               With MultiMedia = New FMoviePlayer(page.VBoxEditor)
                  .Init(page_data)
               End With
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               Page.title = page_tag
               retform = MultiMedia
            Case "Library"
               page = New FLinkContainer
               With Form_Library = New FLibrary(page.VBoxEditor)
                  .HBox_Heading.Visible = False
               End With
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = Form_Library
               EditorPages.Add(Form_Library, sPageName)
               Control_For_Focus = Form_Library.TreeView1
            Case "Export Wizard"
               page = New FLinkContainer
               Export_Clinical = New FExportClinical(page.VBoxEditor)
               Export_Clinical.Init(currentconsult)
               WorkspaceEditor.Add(page)
               retform = Export_Clinical
               page.tag = sPageName
               Page.title = sPageName
               EditorPages.Add(Export_Clinical, sPageName)
            Case "INR"
               page = New FLinkContainer
               INRManager = New Finr(page.VBoxEditor)
               INRManager.Init(currentconsult)
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               EditorPages.Add(INRManager, sPageName)
               Control_For_Focus = INRManager.txtReason
            Case "Certificates"
               page = New FLinkContainer
               form_certificates = New FCertificates(page.VBoxEditor)
               form_certificates.Init(currentconsult)
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = form_certificates
               EditorPages.Add(form_certificates, sPageName)
               Control_For_Focus = form_certificates.tabstrip1
            Case "pdf file"
               page = New FLinkContainer
               With PDF = New FPDF(page.VBoxEditor)
                  .Init(currentconsult)
                  .Load_PDF(page_data, False, True)
                  .tbSave.Enabled = True
                  .tbSave.Visible = True
                  .btRotate.Visible = True
                  .tag = page_tag
               End With
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               Page.title = page_tag
               retform = PDF
               EditorPages.Add(PDF, page_tag)
            Case "drugs browser"
               page = New FLinkContainer
               With DrugBrowser = New FPDF(page.VBoxEditor)
                  .Load_PDF(page_data)
                  .Init_Drugs_Browser()
               End With
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               Page.title = page_tag
               retform = DrugBrowser
               EditorPages.Add(PDF, page_tag)
            Case "pdf document"
               page = New FLinkContainer
               With PDF = New FPDF(page.VBoxEditor)
                  .Load_PDF(modFiles.Get("document_archiving_directory", page_data))
                  .btRotate.Visible = True
                  .btRotate.Enabled = True
                  .btZoomIn.Visible = True
                  .btZoomIn.Enabled = True
               End With
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               Page.title = page_tag
               retform = PDF
               EditorPages.Add(PDF, page_tag)
            Case "pdf document external"   'not one of our documents
               page = New FLinkContainer
               With PDF = New FPDF(page.VBoxEditor)
                  .Load_PDF(page_data)
                  .btRotate.Visible = True
                  .btRotate.Enabled = True
                  .btZoomIn.Visible = True
                  .btZoomIn.Enabled = True
               End With
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               Page.title = page_tag
               retform = PDF
               EditorPages.Add(PDF, page_tag)
            Case "Habits"   'changed back at behest of Horst apparent patient's looking at screen took offence.
               page = New FLinkContainer
               RecreationalDrugs = New FRecreationalDrugs(page.VBoxEditor)
               RecreationalDrugs.Init(currentconsult)
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = RecreationalDrugs
               EditorPages.Add(RecreationalDrugs, sPageName)
               Control_For_Focus = RecreationalDrugs.lblMeasure
            Case "Care Planning"
               'remove past history tab if showing (this is included also in care planning and they cannot exist together)
               If Editor_PageExists("Past History", "Health Issues") Then
                  Editor_RemovePage("Health Issues")  'yes this is all rather stupid code and mixed up strings (historical - too lazy/no time to fix)
               Endif
               If Not modAdminDBI.Has_User_Seen_Tip("FGPMPTCA.FirstRun") Then
                  With FUsageTip
                     .Init("Creating GPMP or TCA", "FGPMPTCA.FirstRun", modPastHistoryDBI.First_Run_Message())
                     .ShowModal()
                  End With
               End If
               If IsNull(currentconsult!patient!fk_doctor) Then
                  modPatientWarnings.Usual_Doctor_InForm_Missing(currentconsult)
               End If
               page = New FLinkContainer
               With form_gpmp_tca = New FGPMPTCA(page.VBoxEditor)
                  .Init(currentconsult)
               End With
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = form_gpmp_tca
               EditorPages.Add(form_gpmp_tca, sPageName)
            Case "browser"
               page = New FLinkContainer
               With Browser = New FHtmlViewer(page.VBoxEditor)
                  Print page_data
                  .WebView1.HTML = page_data
                  .Set_Document_Details(Trim(additional_page_tag & " " & page_tag))
               End With
               obs = New Observer(Browser.mnuTest) As "mnuWebViewTest"
               obs = New Observer(Browser.Webview1) As "WebView"
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               Page.title = page_tag
               retform = Browser
               EditorPages.Add(Browser, page_tag)
            Case "images"             'currently this means images embedded in clinical notes
               page = New FLinkContainer
               Image_Viewer = New FProgressNotesImages(page.VBoxEditor)
               Image_Viewer.Init(Currentconsult, page_data)
               WorkspaceEditor.Add(page)
               retform = Image_Viewer
               page.tag = page_tag
               Page.title = page_tag
               EditorPages.Add(Image_Viewer, page_tag)
            Case "GPCOG"
               page = New FLinkContainer
               GPCOG = New FGPCOG(page.VBoxEditor)
               GPCOG.Init(Currentconsult)
               retform = GPCOG
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
            Case "Edinburgh"
               page = New FLinkContainer
               EdinburghPNDS = New FEdinburgPNDScale(page.VBoxEditor)
               EdinburghPNDS.Init(Currentconsult)
               WorkspaceEditor.Add(page)
               retform = EdinburghPNDS
               page.tag = sPageName
               Page.title = sPageName
            Case "Restless Legs"
               page = New FLinkContainer
               RestlessLegs = New FRestlessLegs(page.VBoxEditor)
               RestlessLegs.Init(Currentconsult)
               WorkspaceEditor.Add(page)
               retform = RestlessLegs
               page.tag = sPageName
               Page.title = sPageName
            Case "K10"
               page = New FLinkContainer
               K10 = New FK10OutcomeTool(page.VBoxEditor)
               K10.Init("FClinical") 'not yet integrated as a stand alone tool FIXME
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = K10
               EditorPages.Add(K10, "K10")
            Case "Has-Bled Calculator"
               page = New FLinkContainer
               HasBled = New FHasBled(page.VBoxEditor)
               HasBled.Init(Currentconsult)
               WorkspaceEditor.Add(page)
               page.tag = "Has-Bled Calculator"
               page.Title = "Has-Bled Calculator"
               EditorPages.Add(HasBled, "Has-Bled Calculator")
               retform = HasBled
            Case "Chads Calculator"
               page = New FLinkContainer
               Chads = New FChads(page.VBoxEditor)
               Chads.Init(Currentconsult)
               WorkspaceEditor.Add(page)
               page.tag = "Chads Calculator"
               page.Title = "Chads Calculator"
               EditorPages.Add(Chads, "Chads Calculator")
               retform = Chads
            Case "Single Health Issue Notes"
               page = New FLinkContainer
               With SingleHealthIssueNotes = New FProgressNotesViewer(page.VBoxEditor)
                  .Init(currentconsult, page_data)
                  .LblNotesFilter.text = page_tag
               End With
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               page.Text = page_tag
               retform = SingleHealthIssueNotes
               EditorPages.Add(SingleHealthIssueNotes, page_tag)
               Control_For_Focus = SingleHealthIssueNotes.WebView1
            Case "All Previous Notes"
               page = New FLinkContainer
               With AllPreviousNotes = New FProgressNotesViewer(page.VBoxEditor)
                  .Init(currentconsult) 'defaults to no audit trail
               End With
               WorkspaceEditor.Add(page)
               page.tag = "All Previous Notes"
               page.Text = "All Previous Notes"
               retform = AllPreviousNotes
               EditorPages.Add(AllPreviousNotes, "All Previous Notes")
               Control_For_Focus = AllPreviousNotes.WebView1
            Case "Diabetes"
               page = New FLinkContainer
               Form_Diabetes = New FDiabetes(page.VBoxEditor)
               Form_Diabetes.Init(Currentconsult)
               page.tag = "Diabetes"
               page.Text = "Diabetes"
               WorkspaceEditor.Add(page)
               retform = Form_Diabetes
               EditorPages.Add(Form_Diabetes, "Diabetes")
            Case "Edit Last Consult"
               '----------------------------------------------------------------------
               'General notes page as the name implies is for notes not tied to a
               'particular health issue or problem. For particular problems the user
               'should be taught to open an editor tab for that problem.
               '----------------------------------------------------------------------
               page = New FLinkContainer
               ProgressNotesPage = New FProgressNoteEditor(page.VBoxEditor)
               WorkspaceEditor.Add(page)
               page.tag = "Edit Last Consult"
               page.Text = "Edit Last Consult"
               ProgressNotesPage_cvwMedications = ProgressNotesPage.cvwMedicationsToday
               ProgressNotesPage.Init(currentconsult, True)         'True = edit last progress notes
               EditorPages.Add(ProgressNotesPage, "Edit Last Consult")
               FGeneralNotesEditor = ProgressNotesPage               'used if want to insert text back into progress note
               retform = ProgressNotesPage
            Case "New General Notes"
               '----------------------------------------------------------------------
               'General notes page as the name implies is for notes not tied to a
               'particular health issue or problem. For particular problems the user
               'should be taught to open an editor tab for that problem.
               '----------------------------------------------------------------------
               page = New FLinkContainer
               ProgressNotesPage = New FProgressNoteEditor(page.VBoxEditor)
               WorkspaceEditor.Add(page)
               page.tag = "New General Notes"
               page.Text = "New General Notes"
               ProgressNotesPage_cvwMedications = ProgressNotesPage.cvwMedicationsToday
               ProgressNotesPage.Init(currentconsult)
               EditorPages.Add(ProgressNotesPage, "New General Notes")
               FGeneralNotesEditor = ProgressNotesPage               'used if want to insert text back into progress note
               retform = ProgressNotesPage
             Case "Travel"
               page = New FLinkContainer
               TravelPage = New FTravel(page.VBoxEditor)
               TravelPage.Init(currentconsult)
               page.tag = "Travel"
               page.Title = "Travel"
               WorkspaceEditor.Add(page)
               retform = TravelPage
               EditorPages.Add(TravelPage, "Travel")
               '  Control_For_Focus = TravelPage.txtDestination
            Case "Occupational History"
               page = New FLinkContainer
               With OccupationalHistoryPage = New FOccupation(page.VBoxEditor)
                  .Init(currentconsult)
               End With
               page.tag = "Occupational History"
               page.Title = "Occupational History"
               WorkspaceEditor.Add(page)
               retform = OccupationalHistoryPage
               EditorPages.Add(OccupationalHistoryPage, "Occupational History")
               Control_For_Focus = OccupationalHistoryPage.lbloccupation
            Case "Mental Health"
               page = New FLinkContainer
               MentalHealthPage = New FMentalHealth(page.VBoxEditor)
               MentalHealthPage.Init(currentconsult)
               page.tag = "Mental Health"
               page.Title = "Mental Health"
               WorkspaceEditor.Add(page)
               retform = MentalHealthPage
               EditorPages.Add(MentalHealthPage, "Mental Health")
               ' Control_For_Focus = MentalHealthPage.WebView1
            Case "Allergies"
               page = New FLinkContainer
               AllergyPage = New FAllergy(page.VBoxEditor)
               ' AllergyPage.Init(currentconsult)
               AllergyPage.Init(currentconsult)
               page.tag = "Allergies"
               page.Title = "Allergies & Sensitivities"
               WorkspaceEditor.Add(page)
               retform = AllergyPage
               EditorPages.Add(AllergyPage, "Allergies & Sensitivities")
               ' Control_For_Focus = AllergyPage.tbNewAllergy
            Case "webpage"
               page = New FLinkContainer
               '  Page.tag = txtURL.text
               WebPage = New FBrowser(page.VBoxEditor)
               WebPage.Expand = True
               WorkspaceEditor.Add(page)
               page.Title = "Web"
               retform = WebPage
               WebPage.Visible = True 'make it visible, default is not visible, trigger form_load
               WebPage.txtURL.text = page_data
               WebPage.btnGo.Value = True
            Case "Pregnancy"
               ' Message.Info("Please do not use this section it will crash, you can take a peek if you want at the screens")
               page = New FLinkContainer
               With PregnancyPage = New FPregnancy(page.VBoxEditor)
                  .Init(currentconsult)
               End With
               retform = PregnancyPage
               page.tag = "Pregnancy"
               page.title = "Pregnancy"
               WorkspaceEditor.Add(page)
               EditorPages.Add(PregnancyPage, "Pregnancy")
            Case "Referrals"
               page = New FLinkContainer
               ReferralPage = New FReferrals(page.VBoxEditor)
               ReferralPage.Init(currentconsult)
               page.Tag = "Referrals"
               page.Title = "Referrals"
               WorkspaceEditor.Add(page)
               retform = ReferralPage
               EditorPages.Add(ReferralPage, "Referrals")
               Control_For_Focus = ReferralPage.txtName
            Case "Scripts"
               'First make sure they have prescriber/provider number
               If IsNull(modDBConnect.currentUser!prescriber_number) Or IsNull(modDBConnect.currentUser!provider_number) Then
                  Message.Title = "Invalid Prescriber Detected"
                  sMsg = "Mmmmm...looks like you are attempting to write prescriptions without being a valid prescriber.\n\n\""
                  "Your activity And ID will be reported To the SysAdmin, in fact, if you are paranoid, it could be that the built in web-cam in this computer has already "
                  "mailed your photo to the relevant authorities!\n\n\""
                  "Should you think this is an error your SysAdmin can rectify this by entering valid details."
                  Message.Warning(sMsg, "Ok")
                  Return
               Endif
               page = New FLinkContainer
               PrescriptionPage = New FPrescriptions(page.VBoxEditor)
               PrescriptionPage.set_embedded("FClinical")
               PrescriptionPage.Init(currentconsult)
               page.tag = "Scripts"
               page.Title = "Scripts"
               retform = PrescriptionPage
               WorkspaceEditor.Add(page)
               EditorPages.Add(PrescriptionPage, "Scripts")
               PrescriptionPage.bexit = True
               PrescriptionPage.BExit = False
            Case "Family History"
               page = New FLinkContainer
               FamilyHistoryPage = New FFamilyHistory(page.VBoxEditor)
               FamilyHistoryPage.Init(currentconsult)
               page.tag = "Family History"
               page.Title = "Family History"
               WorkspaceEditor.Add(page)
               retform = FamilyHistoryPage
               EditorPages.Add(FamilyHistoryPage, "Family History")
            Case "Psycho-Social History"
               page = New FLinkContainer
               PsychoSocialHistory = New FPsychoSocialHistory(page.VBoxEditor)
               PsychoSocialHistory.Init(currentconsult)
               page.tag = "Psycho-Social History"
               page.Title = "Psyscho-Social History"
               WorkspaceEditor.Add(page)
               retform = PsychoSocialHistory
               EditorPages.Add(PsychoSocialHistory, "Psycho-Social History")
               Control_For_Focus = PsychoSocialHistory.teSocialHistory
            Case "Health Issues"
               If Editor_PageExists("Care Planning", "") Then  'First check that this is not open on the care planning tab
                  form_gpmp_tca.TabStrip1.index = 0       'If does > switch to that instance
                  Return                                        'and exit
               Endif
               page = New FLinkContainer
               PastHistoryPage = New FPastHistory(page.VBoxEditor)
               PastHistoryPage.Init(currentconsult)
               page.tag = "Health Issues"
               page.Title = "Health Issues"
               WorkspaceEditor.Add(page)
               retform = PastHistoryPage
               EditorPages.Add(PastHistoryPage, "Health Issues")
               Control_For_Focus = PastHistoryPage.txtCondition
            Case "Vaccinations"
               page = New FLinkContainer
               VaccinationPage = New FVaccinations(page.VBoxEditor)
               page.tag = "Vaccinations"
               page.Title = "Vaccinations"
               WorkspaceEditor.Add(page)
               retform = VaccinationPage
               VaccinationPage.Init(currentconsult)
               EditorPages.Add(VaccinationPage, "Vaccinations")
            Case "Workcover"
               page = New FLinkContainer
               workcoverNSWPage = New FWorkcoverNSW(page.VBoxEditor)
               page.tag = "Workcover"
               page.Title = "Workcover"
               WorkspaceEditor.Add(page)
               retform = workcoverNSWPage
               workcoverNSWPage.Init(currentconsult)
               EditorPages.Add(WorkcoverNSWPage, "Workcover")
               Control_For_Focus = workcoverNSWPage.lvwClaims
            Case "Requests"
               '------------------------------------------------------------------------
               'Create an  editor page with embedded request form and space for
               'some progress notes underneath
               'Note:   A patient as none or many previously ordered request forms
               '`       i.e currentconsult!RequestForms collection
               '        A consultation has none or many RequestForms ordered just
               '        this consultation
               '        currently this is pointed to by currentconsult.RequestForms
               '------------------------------------------------------------------------
               page = New FLinkContainer
               RequestPage = New FRequests(page.VBoxEditor)
               WorkspaceEditor.Add(page)
               RequestPage.Init(currentconsult)
               page.tag = "Requests"
               page.title = "Requests"
               retform = RequestPage
               EditorPages.Add(RequestPage, "Requests")
               Control_For_Focus = RequestPage.txtFindRequest
            Case "Measurements"
               Return 'nothing done yet
            Case "Recalls"
               page = New FLinkContainer
               RecallPage = New FRecalls(page.VBoxEditor)  'add a recalls page
               WorkspaceEditor.Add(page)
               RecallPage.Init(currentconsult)
               page.tag = "Recalls"
               page.Title = "Recalls"
               retform = RecallPage
               EditorPages.Add(RecallPage, "Recalls")
               Control_For_Focus = RecallPage.txtRecallFor
            Case "Skin Excision"
               modUtilGUI.NotImplemented("Skin Excision Module")
               Return
               page = New FLinkContainer
               ExcisionPage = New FProcedures(page.VBoxEditor)
               WorkspaceEditor.Add(page)
               page.Title = "Skin Excision"
               page.Tag = "Skin Excision"
               ExcisionPage.Init(currentconsult)
               retform = ExcisionPage
               EditorPages.Add(ExcisionPage, "Skin Excision")
               Control_For_Focus = ExcisionPage.cmbExcisionTypes
            Case Else
               Message.info("Unknown editor page type " & sPageName & " - please contact the developers")
         End Select
      End If
   End If

   Return retform

End

Function Editor_PageExists(pagetitle As String, page_tag As String) As Boolean
   'Returns true if a page is in the workspace

   Dim page As FLinkContainer

   For Each page In WorkspaceEditor.Windows
      If Page.tag = pagetitle Or page.tag = page_tag Then
         Return True
      End If
   Next
   Return False

End

Function Editor_SetActivePage(pagetitle As String, page_tag As String) As Boolean
   '---------------------------------------------------------------
   'PURPOSE: If a page is already opened, the switch to that page
   'EXPECTS: title of a page as a string
   'RETURNS: boolean flag TRUE if page found, FALSE = not yet added
   'for historical reasons which which will make no sens the
   'FProgressNotePageContainer is only a Vbox. FIXME
   '----------------------------------------------------------------

   Dim page As FLinkContainer

   If bediting Then Return    'force a reload of general notes even if tab is open
   For Each page In WorkspaceEditor.Windows
      If Page.tag = pagetitle Or page.tag = page_tag Then
         bExit = True   
         WorkspaceEditor.ActiveWindow = page
         FClinicalToolbar.Enable_Disable_ToolButtons(page.caption)
         bExit = False  
         Return True
      End If
   Next
   Return False

End

Public Sub WebCam_Get_Picture()

   Dim Container As FLinkContainer
   Dim hCtrl As Control
   Dim frmConsult As FProgressNotePage
   Dim Page As FLinkContainer

   For Each page In WorkspaceEditor.Windows
      If Page = WorkspaceEditor.ActiveWindow Then
         Container = page
         For Each hctrl In page.VBoxEditor.Children
            If hctrl Is FProgressNotePage Then
               frmConsult = hctrl
               frmConsult.Notes_Editor.teNotes.text &= ".pic"
               If FWebCam.ShowModal() Then
                  frmConsult.Notes_Editor.Insert_picture1("clipboard")
               Else
                  frmConsult.Notes_Editor.teNotes.text = Replace(frmConsult.Notes_Editor.teNotes.text, ".pic", "")
               End If
               Return
            End If
         Next
      End If
   Next

End

Public Sub Zoom(zoom As String)
   '------------------------------------------------------------------------------
   'Called by either the Form key press event to emulated eg Firefox Ctrl+/- Zoom
   'or the zoom buttons on the main toolbar MainToolbar_click()
   '------------------------------------------------------------------------------

   Dim Vb As VBox
   Dim i As Object

   VB = WorkspaceEditor.ActiveWindow.Children[0]   'this is VBox containing the form
   i = VB.Children[0]

   Try Object.Call(i, zoom)
Catch
   Return

End

Public Sub Export_Records()
   '------------------------------------------------------
   'Allow user to export as little or as much as they want
   '------------------------------------------------------

   WorkspaceEditor.Visible = False
   Editor_ShowPage("Export File")

   Return
   With Form_ExportClinical
      .Init(currentconsult)
      .Form_PDF.BtOpen.Visible = False
      .Visible = True
      .Raise
   End With

End

Public Sub Form_KeyPress()

   Dim CtrlDown As Boolean
   Dim AltDown As Boolean

   Select Case Key.Code
      Case key.F12
         Consult_Save()
   End Select
   Try CtrlDown = Key.Control
   Try AltDown = Key.Alt
   If CtrlDown Then
      Select Case Key.code
         Case Asc("=")
            Zoom("zoom_in")
         Case Asc("-")
            Zoom("zoom_out")
      End Select
   End If

End

Public Sub ActiveWindow_Get_Name() As String

   Dim hCtrl As Control
   Dim page As FLinkContainer

   For Each page In WorkspaceEditor.Windows
      If page = WorkspaceEditor.ActiveWindow Then
         For Each hctrl In page.VBoxEditor.Children
            If hctrl Is Form Then
               Return hCtrl.Name
            Endif
         Next
      End If
   Next

End



Static Public Sub UnitTest(form_main As FMain)

   form_main.btnSection_Clinical_Click()
   form_main.pnlClinical.Patients_Find(1)

End

Public Sub webview_menu()
   '--------------------------------------------------------------
   'User has clicked over a webview browser eg used in FHTMLViewer
   'to display results and letters, create a popup menu so user
   'can do things like auto-copy back into the progress notes
   'with appropriate annotation.
   '--------------------------------------------------------------

   Dim hCtrl As Control
   Dim page As FLinkContainer
   Dim mnu As Menu

   For Each page In WorkspaceEditor.Windows
      If page = WorkspaceEditor.ActiveWindow Then
         For Each hctrl In page.VBoxEditor.Children
            If hctrl Is Form Then
               If hctrl.name = "FHtmlViewer" Then
                  FCurrentHTMLViewer = hctrl
                  FCurrentHTMLViewer.mnuWebView.Children.Clear()
                  mnu = New Menu(FCurrentHTMLViewer.mnuWebview) As "mnuWebview"
                  mnu.name = "mnuWebView_Copy"
                  mnu.caption = "Copy"
                  mnu.tag = "copy"
                  mnu = New Menu(FCurrentHTMLViewer.mnuWebview) As "mnuWebview"
                  mnu.name = "separator_1"
                  mnu.caption = ""
                  mnu = New Menu(FCurrentHTMLViewer.mnuWebview) As "mnuWebview"
                  mnu.name = "mnuWebView_Insert_Into_Notes"
                  mnu.caption = "Insert into notes"
                  mnu.tag = "insert into notes"
                  mnu = New Menu(FCurrentHTMLViewer.mnuWebview) As "mnuWebview"
                  mnu.name = "mnuWebView_Insert_And_Switch"
                  mnu.caption = "Insert into notes and switch back to editor"
                  mnu.tag = "insert into notes and switch back"
                  FCurrentHTMLViewer.mnuWebView.Popup()
                  Return
               Endif
            End If
         Next
      End If
   Next

End

Public Sub mnuWebView_Click()
   '--------------------------------------------------------------------------------------
   'This is experimental, but I've got sick of copy/paste from a result back to the notes
   'So there are two menu options - just to insert, so one can keep reading the result and
   'then just switch back by onself, or copy and insert with auto-switch back. The text is
   'also rendered in small italics to demonstrate it is not part of the users narrative
   'and is outlined with horizontal rulers. I'll test this and see how it goes.
   'FIXME THE insert into notes without switch back does switch back
   '--------------------------------------------------------------------------------------

   Dim sText As String

   Stop Event
   If IsNull(Last.tag) Then Return

   Select Case Last.tag
      Case "insert into notes", "insert into notes and switch back"
         sText = "<HR><small><B>" & FCurrentHTMLViewer.Get_Document_Details() & "</B></small><BR>"
         sText &= "<small><i>" & FCurrentHTMLViewer.WebView1.SelectedText & "<i></small>"
         sText &= "<HR><BR>"
         sText = Replace(stext, "\n", " ")
         If Not Editor_PageExists("New General Notes", "") Then 'user could have closed the progress note page
            Editor_ShowPage("New General Notes")
         Endif
         FGeneralNotesEditor.teNotes.Insert(".sometext")
         FGeneralNotesEditor.teNotes.richtext = Replace$(FGeneralNotesEditor.teNotes.richtext, ".sometext", sText)
         ' If Last.tag = "insert into notes and switch back" Then
         '    Editor_ShowPage("New General Notes")
         ' Endif
   End Select
Catch
   Return

End

Public Sub tbPreview_Click()

   Editor_ShowPage("Edit Notes")
   Message.info("Richard Stop and check FClinical tbPreview_click")

End

Public Sub PregCalc_tbEditArea_Click()
   '----------------------------------------------------------------------
   'Over-rides the tbInsert button click event in the pregnancy calculator
   'to get a summary of the text and insert into the progress notes
   '----------------------------------------------------------------------
   '
   ' If IsNull(currentconsult) Then Return
   ' Select Case Last.tag
   '    Case "insert"
   '       FGeneralNotesEditor.teNotes.Insert(".sometext")
   '       FGeneralNotesEditor.teNotes.richtext = Replace$(FGeneralNotesEditor.teNotes.richtext, ".sometext", PregCalc.Dates_Summary_GetRichText())
   '    Case "insert revised"
   '       modUtilGUI.NotImplemented("Inserting revised dates into notes")
   ' End Select
   '

End

Public Function Consult_Edit_Show_Tip() As Boolean

   Dim sMsg As String

   If Not modAdminDBI.Has_User_Seen_Tip("FClinical.EditLastConsult") Then        'give them the blurb if they've not banished it previously
      sMsg = "<P><B>Very important things to understand</B></P>"
      "<UL><LI>You can only ever edit your own consultations as your staff ID will be used to retrieve the data"
      "<LI>The entire consultation content from that date will be re-loaded back into EasyGP"
      "<LI>You may continue adding new notes today for that previous consultation"
      "<LI>Those notes will of course be saved back to the previous consultation date."
      "<LI>At the moment only 'at consultating room consultations' i.e those done in the surgery are accessible from this button. "
      "<LI>If you want to edit other dates not of this type you can do so by clicking the calander button next to the consult date and selecting a date, or by typing in the date in the date text box."
      "</UL>"
      "<P><B>Be aware that auditing will be conducted as follows:</B><P> "
      "<UL>"
      "<LI>The entire contents of your <U><I>previous consultation notes <B>before</B> you add new notes</U></I>  will be archived as part of an audit trail"
      "<LI>These will always be available for medico-legal audit and will visibly show up in the 'All Progress Notes' section when the 'Include Audit Trail option is checked"
      "<LI>Whatever you write today will entirely replace those notes archived to the audit trail"
      "</UL>"
      With FUsageTip
         .Init("Editing the Last Consultation", "FClinical.EditLastConsult", sMsg)
         If Not .ShowModal() Then Return
      End With
   End If
   Return True

End

Public Sub VSplitClinical_RightPane_Resize()

   Try Settings["FClinical/VsplitClinical_RightPane"] = VSplitClinical_RightPane.layout

End

Public Sub WorkspaceEditor_Activate()
   '----------------------------------------------------------------------------------
   'User has clicked on an editor page or an editor page loaded
   'If it contains progress notes, as these could have been updated in another section
   'enable or disable the core new-edit-save-print-preview-refresh buttons
   'according to the various forms needs.
   '----------------------------------------------------------------------------------
   
   Dim hCtrl As Control
   Dim page As Variant
  
   If Bexit Then Return
   For Each page In WorkspaceEditor.Windows
      If page = WorkspaceEditor.ActiveWindow Then
         If page Is FLinkContainer Then
            For Each hctrl In page.VBoxEditor.Children
               FClinicalToolbar.Enable_Disable_ToolButtons(Page.Caption)
               Break
            Next
         Else
             FClinicalToolbar.Enable_Disable_ToolButtons(page.caption)
             Break
         Endif
      Endif
   Next
   
End

