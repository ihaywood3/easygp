' Gambas class file

' Copyright (C) 2008-2014 Dr Richard TERRY

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-----------------------------------------------------------------------
' Notes to put somewhere
' note the tag's in the recall menu == the pk of audit.lu_action table.
' WHERE TO FIND STUFF
' ==================
' :toolbar buttons enabled-disabled as needed for each module on workspace tab : WorkSpaceEditor_Activate()
' SHOWING MODULES/DOCUMENTS/GENERATED PDF'S, GENERATED HTML on a new tab:
' ======================================================================
' - This depends as to whether you are within Fclinical or outside of FClinical, however ultimately the  same routine is called
'   Editor_ShowPage(sPageName As String, Optional page_tag As String = "", page_data As Variant, Optional additional_page_tag As String = "")
'   if from outside FClinical you need to use Editor_ShowPage_External(....) which accesses FClinical via Static Private form_clinical As FClinical
'   Examples
'   ========
'   load a module, document or html  onto a tab from within Fclinical                  : Editor_ShowPage(....)
'   - for an example see FClinical.Inbox_showResult()
'   load a module, document or html  onto a tab from ou
'   load a pdf document from outside FClinical which is  a document             :Editor_ShowPage("pdf document",...)
'   load a pdf document from outside FClinical which is not a document from EasyGP :Editor_ShowPage_External("pdf file",...)
'   for an example see FProgressNotesViews.Preview()
'   Display a referral letter written in EasyGP:Referral_Letter_Display()
'   Display letter/correspondence received by EasyGP: Documen_Display((documents As Collection, document_key As Integer))
'
'   WHAT NOT TO CHANGE IN THIS CODE IF IT MAKES NO SENSE TO YOU (UNLESS YOU FIND A BETTER WAY TO DO IT)
'    cmbSearch_Activate()  don't remove the cmbSearch.enabled = False otherwise quick typers send
'                          enter keypresses in quick succession.
' WHERE TO FIND CODE  1) To update previous notes:  don't database events will take care of
'                     2) To update the health summary if showing: Health_Summary_Display()
'--------------------------------------------------------------------------------------------------------
Private GP_Management_Plan As Collection 
Private form_gpmp_tca_list As FGPMPTCAList
Private GP_Management_Plans As FGPMPTCA
Private ProgressNotesPage As FProgressNoteEditor    'will always be re-initialised with new patient
Private PrescriptionPage As FPrescriptions          'must be destroyed in Gui_Reset()
Private form_email_documents As FEmailDocument
Private form_medications As FMedicationsList           'will always be re-initialised with new patient
Public ProgressNotesPage_cvwMedications As ColumnView
Private occupations As Collection 
Private SpellChecker As ClskSpell
Private cvwLettersReceived_Key As Integer
Private cvwResultsReceived_Key As Integer
Private cvwReferrals_Key As Integer
Private PregCalc As FPregCalc
Private Calculator As FCalculator
Private QuickContacts As FQuickContact
Private ActiveGraphButton As Toolbutton
Private Patients_Seen As Collection             'the patients seen by a staff member today
Private Control_For_Focus As Control            'don't remove this without asking me (RT)
'used to set focus to a designated control after tab is instantiated
'see Editor_ShowPage(.)
'These temporarly probably need removal at some stage
Private iCertificatetype As Integer = const.certificate_type_medical 'default to this
'fixme: make these deletions a different collection with key to type eg document/script etc.then remove the extra stuff
Private Deleted_Documents As Collection     'will allow multiple levels of un-delete e.g see mnuLettersReceived_Click
Private Deleted_Referral As Collection      'single level undelete
Private Deleted_Medications As Collection  'fixme join to the above
Private Deleted_Request As Collection      'fixme join to the above
Private synonyms As Collection
Private currentobservations As Collection
Public currentTemporaryWebbrowserHTMLFilename As String 'temporary file being displayed in browser window
Private CurrentPastHistoryList As Columnview     'three Past history lists on TabStripProblemLists, reference one in use
Private bKeyValid As Boolean                     'used where textboxes need to validate key presses
Private bEditing As Boolean                      'if true we are editing an entire consult on a different date
Private bExit As Boolean                         'general flag used to prevent recursion into routine
Private currentconsult As CConsult               'the 'master' class for the patient
Private currentpasthistory As Collection         'the current health issue/past history item being manipulated
Private currentRecall As Collection              'the current recall being maninpulated
Private GraphData As Collection                  'collection pertaining to current graph being shown
Private MeasurementDefaults As Collection        'default measurements for patient eg INR/HBA1c
Private consultationtypes As Collection          'eg at surgery, home, on phone
Public EditorPages As Collection                 'all pages which are stuck onto the workspace
Private Const cListMedications As Integer = 0  'all these reference lists of tabstip_lists
Private Const cListRequests As Integer = 1
Private Const clistReferrals As Integer = 2
Private Const clistRecalls As Integer = 3
Private Const cListCertificates As Integer = 4
Private Const clistMeasurements As Integer = 5
Public Const clistImages As Integer = 6 'accessed from other forms
Private Const cListGPMPTCA As Integer = 9
Private Const cTabResults As Integer = 1
Private Const CTabLetters As Integer = 2  'fix me change to cConstant
Private Const ctabCalculators As Integer = 7
Private Const cTabQuickContacts As Integer = 8
Private Const cMainDisplay_DataEntry As Integer = 1
Private Const cMainDisplay_ProgressNotes As Integer = 2
Private Const cMainDisplay_CarePlan As Integer = 3
Public bShowEditLastConsultButton As Boolean
Public bProgressNotesEnforceCoding As Boolean     'If True then user forced to code progress notes do not make this private
Public active_medications As Collection
Private obs As Observer                           'Observer used when FHelp is being shown, to detect the help close button
Public medication_sort_order As String = "generic" 'whereas this is the default, may be changed at any time on the scripts tab
Private FMetaData As FDocumentMetaData
Private form_select As New FPatientsSelect        'popup multi-select patient form
Private Form_Patient_Tasks As FPatientTasks       'all outstanding tasks for the patient in a grid
Public Form_ExportClinical As New FExportClinical 'Allows user to export notes from FClinical as pdf
Private Toolbuttons As Collection                 'buttons which user selects to have on the toolbar
Private Warning_Icons As Collection               'icons used to warn user about patient e.g breast feeding, pregnant, anger issues, alcoholic
Public Form_Decision_Support As FDecisionSupport
Public FCurrentHTMLViewer As FHtmlViewer           'dont remove just testing
Public FGeneralNotesEditor As FProgressNoteEditor  ' dont remove just testing
Static Private form_clinical As FClinical         'allows FClinical Access from anywhere  = Me -see Init()
Private BMICalc As FBMICalc

Static Public Sub Todays_Prescriptions_Reload()
   'called from an instance of FMedicationsList
   
   form_clinical.PrescriptionPage.Prescriptions_Written_Today_Reload
   
End

Static Public Function Help_Show(sPath As String, heading As String, flag As Boolean)
   '--------------------------------------------
   'shows help or whatever in the webkit browser
   '--------------------------------------------
   
   modUtilGUI.NotImplemented("Displaying help files", "Health Issues")
   Return
   form_clinical.vBoxWorkSpace.Visible = Not Flag
   form_clinical.FHelp.Visible = flag
   If flag Then
      form_clinical.FHelp.Help_Show(sPath)
   End If
   
End

Static Public Sub ProgressNotesEnforceCoding_UpdateFlag(bflag As Boolean)
   '-------------------------------------------------------------------------
   'Called by FStaffPreferences if enforcing progress notes coding is changed
   '-------------------------------------------------------------------------  
   
   form_clinical.bProgressNotesEnforceCoding = bFlag   'bug here fix me 'how come at end there is a  illegal function in the IDE
   
End

Static Public Sub EditLastConsultButton_Display(bflag As Boolean)
   'User has changed visibility of the button to allow editing last consult
   
   With form_clinical
      .bShowEditLastConsultButton = bFlag
      .tbEditLastConsult.visible = bFlag
   End With
   
End

Static Public Function Smoking_Nofication_Update(flag As Integer, Optional qualifier As String)
   
   If InStr(form_clinical.lblAlert.text, "PREGNANT") Then
      form_clinical.lblAlert.text = "PREGNANT"
   Else
      form_clinical.lblAlert.TEXT = ""
   End If
   
   Select Case flag
      Case 0
         form_clinical.lblAlert.TEXT &= " NEVER SMOKED "
      Case 1
         form_clinical.lblAlert.TEXT &= " EX-SMOKER " & qualifier
      Case 2
         form_clinical.lblAlert.TEXT &= " CURRENT SMOKER "
   End Select
   
End

Static Public Function Enable_Edit_Button(flag As Boolean)
   
   form_clinical.tbEdit.Enabled = flag
   
End

Static Public Function Enable_Save_Button(flag As Boolean)
   
   form_clinical.tbSave.Enabled = flag
   
End

Static Public Function active_medication_list_get_external() As Collection 'fixme look at where this is used and shift it out
   '------------------------------------
   'returns a list of active medications
   '------------------------------------
   
   Return FClinical.active_medication_list()
   
End

Public Function active_medication_list() As Collection  'fixme look at where this is used and shift it out
   
   Return modPrescribingDBI.active_medication_list(currentconsult)
   
End

Public Function get_medication_sort_order() As String
   
   Return form_clinical.medication_sort_order
   
End

Static Public Sub RefreshExternal_ImageList()
   '---------------------------------------------------------------------------------
   'If the images tab is showing, this will have been called from FProgressNoteEditor
   'and an image would have just been saved in the current progress note
   '----------------------------------------------------------------------------------
   
   form_clinical.Images_Refresh(True)
   
End

Static Public Sub Reload_Tab_External(cSection As Integer)
   '-------------------------------------------------------
   'Reloads data on a tab, called from another form eg
   'If psycho-social history is showing then reloads then
   'data on this pertaining to phone numbers if the contact
   'is also a patient
   '-------------------------------------------------------  
   
   form_clinical.Reload_Tab(cSection)
   
End

Public Function Reload_Tab(Section As String)
   '--------------------------------------------------------------------------------
   'Used to call the Reload() function of a particular module
   'For example user may have deleted a request form from the requests list
   'The delete routine has then to check if the requests module is loaded onto a tab
   'and if it is, reload current requests written for this consultation
   '--------------------------------------------------------------------------------
   
   Dim Page As Control
   
   Inc Application.Busy
   For Each page In WorkspaceEditor.Windows
      If page Is FLinkContainer Then page = page.VBoxEditor.Children[0]
      If page.tag = section Then
         Try Object.Call(page, "Reload")
      End If
   Next
   Dec application.Busy
Catch
   Application.Busy = 0 
   
End

Static Public Sub Editor_ShowPage_External(page_name As String, page_tag As String, page_data As Variant)
   '-------------------------------------------------------------
   'Adds a page to the workspace editor, called from another form
   '-------------------------------------------------------------
   
   form_clinical.Editor_ShowPage(page_name, page_tag, page_data)
   
End

Static Public Sub Pregnancy_Notify()
   '-------------------------------------------------------------------------
   'Is user has added a new pregnancy in the FPregnancies then update the gui
   'with a prominant notice that the patient is pregnant
   '-------------------------------------------------------------------------
   
   form_clinical.Patient_Show_Pregnant
   
End

Static Public Sub Set_URL(url As String)
   
   form_clinical.txtURL.text = url
   
End

Static Public Function ProgressNotePage_MedicationsList_Update()
   
End

Static Public Function EditorPage_Get(sName As String) As Form
   
   Return form_clinical.EditorPages[sName]
   
End

Static Public Sub Notifications_Refresh_External()
   
   form_clinical.Notifications_Refresh
   
End

Static Public Sub Toolbar_Reload()
   
   form_clinical.Refresh_Toolbar()
   
End

Static Public Sub Warning_Panel_Reload()
   
   form_clinical.Refresh_Warning_Panel() 
   
End

Static Public Function Display_Coding_System()
   'Form may not be loaded, so try
   
   Try form_clinical.lblCodingSystem.text = "Coding System:" & modCodingDBI.coding_system!system
   
End

Static Public Sub Update_graphs()
   
   Try form_clinical.Measurements_Make_Graph()
   
End

Public Sub tbHelp_close_Click()
   
   Stop Event
   Help_Show("", "", False)
   
End

Static Public Function Editor_RemovePage(sKey As Variant, Optional bCloseAll As Boolean = False)
   '-------------------------------------------------------------------------------------------------
   'Removes 1 or all pages  from the EditorPages collection and its associated workspace tab
   'The key of the hWindow can be integer if past history progress notes page or a string eg "Travel"
   'If we are implicitly calling this page (ie - it is not being shut down by the user closing a tab
   'or the program exiting - then cancel the save of information on this page
   'For example - we use this when the user may have deleted a past history item, whilst still having
   'unsaved progress notes on this item in a progress notes editor.
   '-------------------------------------------------------------------------------------------------
   
   Dim Page As FLinkContainer
   Dim hCtrl As Control
   Dim frmConsult As FProgressNotePage
   
   form_clinical.WorkspaceEditor.Lock()
   For Each page In form_clinical.WorkspaceEditor.Windows
      If bCloseAll Then
         page.Close()
      Else
         If page.tag = sKey Then
            '------------------------------------------------------------------------------------
            'Found a specific page  if this is a progress notes page, stop it saving its contents
            'when frmConsult.form_close() is called, it attempts to save the editor contents
            '------------------------------------------------------------------------------------
            form_clinical.EditorPages.Remove(skey)
            For Each hctrl In page.VBoxEditor.Children
               If hctrl Is Form Then
                  Select Case hctrl.Name
                     Case "FProgressNotePage"
                        frmConsult = hctrl
                        frmConsult.bCancelSave = True
                        Goto Unlock_Editor 'don't allow progress note page to close
                        ' Break
                  End Select
               End If
            Next
            page.Close
            Break
         End If
      End If
   Next
   Goto Unlock_Editor
   
Unlock_Editor:
   form_clinical.WorkspaceEditor.Unlock()
   
End

Static Public Function WebBrowser_IsVisible() As Boolean
   '---------------------------------------------------------------------------------------
   'Returns true if the central web browser control is visible
   'USAGE:  e.g if another form is using the central web browser and has updated something
   'fixme ?used
   '---------------------------------------------------------------------------------------
   
   Try Return form_clinical.vBoxWebBrowser.Visible
   
End

Static Public Sub WorkspaceEditor_Show()
   '-------------------------------------------------------------------------------------------
   'WorkSpaceEditor is a workspace control - currently until replaced by the 'emulated browser'
   'the main control on FClinical which has all the tabs for example clincal notes, or any
   'section loaded by Editor_ShowPage()
   '-------------------------------------------------------------------------------------------
   
   form_clinical.WorkSpaceEditor.Visible = True
   
End

Static Public Sub WebBrowser_Show(sData As String, Optional heading As String)
   '------------------------------------------------------------------
   'Displays html in the central webbrowser
   'If the data is a filename, load file, otherwise load raw html
   '------------------------------------------------------------------
   
   FClinical.Editor_ShowPage_External("browser", heading, sData)
   
End

Static Public Sub patient_load_record_external(patient As Collection, bPhotoConfirmed As Boolean, P As Picture)
   'called from another form
   
   form_clinical.patient_load_record(patient, bPhotoConfirmed, P)
   
End

Public Sub FDecision_Support_tbClose_Click()
   
   Stop Event
   'Form_Decision_Support.Settings_Save
   Layout_Right_Side_Screen
   DecisionSupport_Show("", False)
   
End

Static Public Sub DecisionSupport_Show(Optional Heading As String, flag As Boolean, Optional help_section As String = "")
   '----------------------------------------------------------------------------
   'There is a texteditor contained in Vbox_Decision_Support, which is hidden on
   'the right hand side of the screen. In any section of EasyGP needing simple
   'decision support, this is shown, whilst what's usually on top is hidden
   'for example of implementation see the Mental Health module
   '-----------------------------------------------------------------------------
   
   form_clinical.VboxActiveProblemList.Visible = Not flag
   form_clinical.Vbox_PatientTasks.Visible = Not flag
   form_clinical.VSplit_TabbedListsGraph.Visible = Not flag
   form_clinical.Vbox_Decision_Support.Visible = Flag
   If heading <> "" Then form_clinical.Form_Decision_Support.lblDecisionSupport.text = Heading
   If help_section <> "" Then form_clinical.Form_Decision_Support.Set_Help_Section(help_section)
   
End

Static Public Sub DecisionSupport_SetHTML(sHtml As String)
   
   form_clinical.Form_Decision_Support.WebView1.HTML = shtml
   
End

Static Public Sub Refresh_PastHistory(sPastHistory_HistoricalSummary As String, sPasthistory_ManagementSummary As String, fk_pasthistory As Integer)
   
   form_clinical.Refresh_FPastHistory(sPastHistory_HistoricalSummary, sPasthistory_ManagementSummary, fk_pasthistory)
   
End

Static Public Sub Refresh_AllPreviousNotes(Optional bOnlyIfAuditShowing As Boolean = False)
   '---------------------------------------------------------------------------------------
   'Called from other forms which have updated any progress notes in any section
   'If open, update the tab for prevous notes
   'if bOnlyIfAuditShowing = True then only update the notes if the audit trail is showing
   '--------------------------------------------------------------------------------------
   
End

Public Sub Refresh_FPastHistory(sPastHistory_HistoricalSummary As String, sPasthistory_ManagementSummary As String, fk_pasthistory As Integer)
   '--------------------------------------------------------------------------------------------------
   'PURPOSE     : If the user has changed a health issues management plan summary or historical summary
   '              AND that health issue is currently being edited in the past history section
   '             then update the corresponding texboxes to reflect the changes
   'CALLED BY   : by any progress notes page
   'WHAT IT DOES: Looks through all the pages in the workspace editor if it finds a matching
   '              fk_pasthistory it means that problem is currently in the editor.
   '---------------------------------------------------------------------------------------------------
   
   Dim page As FLinkContainer
   Dim PHPage As FPastHistory
   Dim hCtrl As Control
   
   For Each page In WorkspaceEditor.Windows
      For Each hctrl In page.VBoxEditor.Children
         If hctrl Is FPastHistory Then
            PHPage = hCtrl
            If PHPage.pk_pasthistory_get() = fk_pasthistory Then 'being edited
               PHPage.txtHistoricalSummary.text = sPastHistory_HistoricalSummary
               PHPage.txtManagementSummary.text = sPasthistory_ManagementSummary
               Break
            End If
         End If
      Next
   Next
   
End

Public Sub Form_Open()
   '--------------------------------------------------------------------
   'Most forms have Init(), even when no form_open, often this Init() is
   'called when the form is loaded, but externally, so to keep the code
   'consistant when browsing it to find what's done first, put it here
   '--------------------------------------------------------------------
   
   Init()
   
End

Public Sub Refresh_Warning_Panel()
   '--------------------------------------------------------
   'Refreshes the icons on the warning panel for this patient
   '--------------------------------------------------------- 
   '----------------------------------------------------------------------
   'Refreshes the toolbar buttons.
   'Toolbar always has a 'general notes page' after that its up for grabs
   'load the users defaults 
   'There is a 2 pixel vertical box in the pnlToolbuttons which act
   'an acro-prop to keep this auto-expanding toolbar 'open' if all 
   'buttons are removed, hence test if a button                    
   '-----------------------------------------------------------------------
   
   Dim warning_icon As Collection
   
   lblwarnings.text = ""
   modEditAreaHelpers.Warnings_Panel_Clear(pnlWarnings)
   warning_icons = modPatientWarnings.Warning_Icons_Get_For_Patient(currentconsult!patient!fk_patient) 'Get users warning icons
   If warning_icons.count Then  
      For Each warning_icon In warning_icons
         modEditAreaHelpers.Warning_image_Create(pnlWarnings, warning_icon!icon_path, warning_icon!pk_module, 24, warning_icon!name, Me)
      Next
   Else
      lblwarnings.text = "Click to add warnings"  
   End If
   
End

Public Sub Refresh_Toolbar()
   '----------------------------------------------------------------------
   'Refreshes the toolbar buttons.
   'Toolbar always has a 'general notes page' after that its up for grabs
   'load the users defaults 
   'There is a 2 pixel vertical box in the pnlToolbuttons which act
   'an acro-prop to keep this auto-expanding toolbar 'open' if all 
   'buttons are removed, hence test if a button                    
   '-----------------------------------------------------------------------
   
   Dim btn As Collection
   Dim hCtrl As Control
   
   For Each hCtrl In pnlToolButtons.Children
      If hCtrl.tag <> "New General Notes" And hctrl Is ToolButton Then hCtrl.Delete()
   Next
   Toolbuttons = modAdminDBI.Clinical_Toolbuttons_Get(modDBConnect.currentUser!fk_staff) 'Get users toolbuttons
   For Each btn In Toolbuttons
      modEditAreaHelpers.ToolButton_Create(pnltoolButtons, btn!icon_path, btn!pk_module, 32, btn!name, Me)
   Next
   
End

Public Sub Toolbar_Pregnancy_Button_Enable_Disable(bFlag As Boolean)     
   '--------------------------------------------------------------------
   'There is a 2 pixel vertical box in the pnlToolbuttons which acts like
   'an acro-prop to keep this auto-expanding toolbar 'open' if all the
   'buttons are removed, hence test if a button
   '---------------------------------------------------------------------
   
   Dim hctrl As Control
   
   For Each hctrl In pnlToolButtons.Children
      If hctrl Is Toolbutton Then   
         If const.Clinical_Toolbuttons[hctrl.tag]!name = "Pregnancy" Then 
            hctrl.Enabled = bFlag 
            Return  
         Endif
      End If   
   Next
   
End  

Public Sub Init()
   '--------------------------------------------------------------------------------
   'form_clinical used when other forms need to 'find' this form to update something
   '--------------------------------------------------------------------------------
   
   form_clinical = Me                                        'allow access of FClinical from any other module
   Refresh_Toolbar
   Form_Patient_Tasks = New FPatientTasks(Vbox_PatientTasks)
   
   With Form_Decision_Support = New FDecisionSupport(Vbox_Decision_Support)
      ' .lblViewerCaption.Visible = True
      '  .tbWebBrowserClose.Visible = True
      ' .tbWebBrowserZoomIn.Visible = True
      ' .tbWebBrowserZoomOut.Visible = True
      ' .Parent_Form_Set("FClinical")
      ' .Section_Set("Decision Support")
   End With
   With form_medications = New FMedicationsList(Vbox_Medications)
      .Set_Embedded_Form_Name("FClinical")
   End With
   lblMedicareNumber.width = tlPatientComms.width
   lblMeasure.text = "Notes without patient present   "
   cmbConsultationType.width = lblMeasure.Width
   EditorPages = New Collection
   currentconsult = Null
   With FMetaData = New FDocumentMetaData(Vbox_PatientTasks)
      .Set_consult(currentconsult)
      .Set_Embedded_Form_Name("Clinical")
      .Init("Allocated Documents")
      .Visible = False
      .tbClose.Visible = True                            'only ever used on this form
   End With
   obs = New Observer(FMetaData.tbSave) As "FMetaData_tbSave"    'Let FClinical handle the save event"
   obs = New Observer(FMetaData.txtUserObservationName) As "FMetaData_txtUserObservationName"
   obs = New Observer(FMetaData.tbClose) As "FMetaData_tbClose"    'Let FClinical handle the save event"
   '  obs = New Observer(Form_Decision_Support.tbWebBrowserClose) As "FDecision_Support_tbClose"
   obs = New Observer(Form_Decision_Support.tbClose) As "FDecision_Support_tbClose"
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teForSpelling
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"  'FIXME
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   With gvAllergies
      .Columns.count = 1
   End With
   Layout_Form()
   Settings_Load()
   synonyms = const.Synonyms()
   pnlToolButtons.tag = 24
   mnuDecisionSupport_K10.Visible = True
   With mnuDecisionSupport_Dass
      .visible = True
      .Enabled = False  
   End With
   mnuDecisionSupport_Chads.Visible = True
   lblMeasure.text = "  Cumulative   "
   cmbLineStyle.width = lblmeasure.Width
   If modAdminDBI.Config_Get_Staff_Member("show-edit-last-consult-button", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff) Then
      bShowEditLastConsultButton = True
   Endif
   tbEditLastConsult.Visible = bShowEditLastConsultButton
   If modAdminDBI.Config_Get_Staff_Member("progress_notes_enforce_coding", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff) Then
      bProgressNotesEnforceCoding = True 'defaults to false to keep Ian Sane
   Endif
   If modAdminDBI.Config_Get("user_can_add_requests", False, Null, modDBConnect.currentUser!fk_clinic) = True Then
      mnuSections_RequestNames.Enabled = True
   Else
      mnuSections_RequestNames.Enabled = False   
   Endif
   
End

Public Sub patient_load_record(patient As Collection, bPhotoConfirmed As Boolean, P As Picture)
   '----------------------------------------------------------------------------
   'PURPOSE   : Loads the minimal necessary patient record
   'CALLED BY : Patients_Find() and FPatientsSelect()
   '            If bPhotoConfirmed = True then selection was confirmed from the multiple
   '            patient pick list which can contain a picture
   '            otherwise if patient's was the only record, this flag is false
   '            If there was a picture, then this flag = True, otherwise the user
   '            will still be prompted with a second "Please confirm"
   'LOGIC     : Displays the minimal amount of information to
   '            start an encounter - the patients demographic details
   '            contact numbers, allergies, recalls, past history items
   '            medications (the default list showing),patient tasks
   '            i.e in essence anything **VISIBLE** to the user when they
   '            first load a patient. Everything else is loaded on demand
   '            database ID show under photo see:Patient_Demographics_Display()
   '            Currently fetch all progress notes but no images, which area
   '            loaded 'on demand'
   'WARNING   : DO NOT MOVE THESE LINES OUT OF ORDER
   'TOFIX     :
   '---------------------------------------------------------------------------
   
   Dim crclr As String 
   
   VSplit_Main.Visible = True
   mnuView.Visible = True
   mnuSections.Visible = True
   mnuDecisionSupport.Visible = True
   mnuHelp.visible = True
   Try PicPatient.Picture = P
   '---------------------------------------------------------------------------
   'Has there been a consulation today already?, if yes, then re-use fk_consult
   'then show all previous notes and general notes, reloading these if a
   'continuation from a previous consult, and user dosn't want a new consult
   '---------------------------------------------------------------------------
   currentconsult = New CConsult(patient, consultationtypes[cmbConsultationType.Index]!pk)
   Patient_Demographics_Display()            'display name address phone, pregnancy status
   GPMP_Reload                               'reload GPMP and change toolbutton headings/tag
   Refresh_Warning_Panel                     'display patient specific warnings
   Workspace_Load_Minimal_Panels             'all progress notes and general notes
   ' WorkspaceEditor.Lock()                    'DO NOT REMOVE THE LOCK/UNLOCK
   ' Editor_ShowPage("All Previous Notes")     'Always show all previous notes
   ' Editor_ShowPage("New General Notes")      'Default to general notes tab.
   ' WorkspaceEditor.Unlock()                  'OR THE GUI WILL RE-SET ITSELF
   Wait                                      'AND LOADING PATIENT IS IMPOSSIBLE
   If Not IsNull(currentconsult!recreationaldrugs) Then
      lblAlert.text &= " " & modRecreationalDrugs.SmokingStatus_string(currentconsult)
      If currentconsult!patient!age_numeric > 17 And lblAlert.text = "" Then
         lblAlert.text &= " ?? SMOKER ??"
      End If
   Else
      If currentconsult!patient!age_numeric > 17 Then
         lblAlert.text &= " ?? SMOKER ??"
      End If
   End If
   crclr = modutilGUI.Cockcroft_Gault_CreatinineClearance_Formulae(currentconsult)
   If crclr <> 0 Then    
      lblCreatinineClearance.text = crclr
   Else
      lblCreatinineClearance.text &= ""
   End If   
   Allergies_Sensitivities_Refresh()                    'Get all allergies, display on toolbar
   cvwRecalls_Refresh()                      'Display recalls on toolbar
   form_medications.init(currentconsult)     'display active meds list
   With Form_Patient_Tasks                        'Show a list Of outstanding tasks
      .Init(currentconsult)
      .tbNew.Enabled = True   
   End With
   Notifications_Refresh()
   pasthistory_refresh_lists()
   Measurement_Favourites_Refresh()
   Measurement_Defaults_Refresh()
   rbLettersReceived.Value = True
   TabStrip_Lists.Enabled = True
   cvwLettersReceived_Refresh(True)
   cvwResults_Refresh(True)
   'enable appropriate menus
   mnuView_AllNotes.Enabled = True
   mnuView_ByProblem.Enabled = True
   mnuSections.Enabled = True
   mnuDecisionSupport_K10.Enabled = True
   mnuDecisionSupport_Dass.Enabled = True
   mnuDecisionSupport_Chads.Enabled = True
   
End

Public Sub GPMP_Reload()
   
   GP_Management_Plan = modPastHistoryDBI.GP_Management_Plans_Get(currentconsult!patient!fk_patient, True)
   If Not IsNull(GP_Management_Plan) Then
      With tbHealthSummary
         .Caption = "View GPMP"
         .tag = "GPMP"
      End With
      currentconsult!patient!gp_management_plan = GP_Management_Plan
   Endif
   
End



Static Public Function IsSamePatient(fk_patient As Integer) As Boolean
   '-------------------------------------------------------------------
   ' returns true if fk_patient is the same as the currently loaded patient
   ' in FClinical. false if no patient loaded.
   ' Ian, this will crash if no FClincal is loaded.
   '-------------------------------------------------------------------
   
   Try Return form_clinical.IsSamePatient_Instance(fk_patient)
   
End

Public Function IsSamePatient_Instance(fk_patient As Integer) As Boolean
   
   Dim fk As Integer
   
   Try fk = currentconsult!patient!fk_patient
   If Error Then Return False
   If fk = fk_patient Then
      Return True
   Else
      Return False
   Endif
   
End

Static Public Sub Patient_Picture_Refresh(filepath As String)
   
   form_clinical.PicPatient.Picture = Picture.Load(filepath)
   ' End If
   
End
'these routines all over the place and illogical fixme
'meant to update the demographics on this form, called from e.g contacts database

Static Public Sub Patient_Demographics_Refresh()
   
   form_clinical.Demographics_Refresh()
   
End

Public Sub Demographics_Refresh()
   'Refresh the patients demographics from outside Fclinical
   'fixme (everywhere) what if patient > 1 address > > 1 record
   '
   
   Dim patient As Collection
   
   patient = modContactsDBI.Patient_Get_Using_PK(currentconsult!patient!fk_patient)
   currentconsult.SetData("patient", patient)
   Patient_Demographics_Display()
   
End

Static Public Sub Refresh_Section(section As Integer)
   
   Try form_clinical.Refresh_Section_Instance(section)
   If Error Then
      Message.warning("Error trying to update a section")
   End If
   
End

Public Sub Refresh_Section_Instance(section As Integer)
   '-------------------------------------------------------------------------
   'Refreshs lists, progress note pages when another section alters something
   'If not a list being refreshed, refresh all progress notes pages contained
   'in the workspace, this way e.g if you have added new management plans or
   'historial summaries in past history, and have a progress note page
   'open entering notes for that problem, next time you switch to it those
   'summaries will have been updated
   '-------------------------------------------------------------------------
   
   Dim hCtrl As Control
   Dim frmConsult As FProgressNotePage
   Dim Page As FLinkContainer
   Dim Container As FLinkContainer
   Dim HTMLViewer As FHtmlViewer
   Dim Form_PDF As New FPDF
   
   If IsNull(currentconsult) Then Return
   Select Case section
      Case const.cSection_CarePlan
         Try form_gpmp_tca_list.Reload(True)        'reload any gpmp/tca documents refreshing the collection  - this form can be null
         GPMP_Reload                                'change toolbutton captions/tag and se the GP_Management_Plan collection 
      Case const.cSection_Inbox
         cvwResults_Refresh(True)
      Case const.cSection_PastHistory
         pasthistory_refresh_lists()
      Case const.cSection_Prescriptions
         form_medications.medications_Refresh
      Case const.cSection_Requests   'these textboxese are a misnomer - shared with request/results FIXME.
         cvwRequests_Refresh
      Case const.cSection_Referrals
         currentconsult.Refresh("referrals_written")
         cvwReferrals_Fill()
      Case const.cSection_allergies
         Allergies_Sensitivities_Refresh()
      Case const.cSection_Images
         Images_Refresh(True)
      Case Const.cSection_Recalls
         cvwRecalls_Refresh()
      Case Const.cSection_Workcover
         Workcover_Certificates_Refresh()
      Case Const.cSection_MedicalCertificates
         Certificates_Medical_Refresh
      Case const.cSection_Documents
         cvwLettersReceived_Refresh(True) 'refresh the collection 
      Case Else
         '-------------------------------------------------
         'Not a list to update must be a progress note page
         'Update this whether active or not
         'or care plan or health summary
         '-------------------------------------------------
         For Each page In WorkspaceEditor.Windows
            Container = page
            For Each hctrl In page.VBoxEditor.Children
               Print hctrl.Name
               Select Case hctrl.Name
                  Case "FProgressNotePage"
                     frmConsult = hctrl
                     If section <> Const.cSection_GeneralNotes Then
                        If frmConsult.Get_pk_pasthistory() Then
                           frmConsult.Health_Issue_Reload()
                           page.title = frmConsult.HealthIssue_GetName()
                        End If
                     End If
                     Break
                  Case "FPDF"
                     Select Case section
                        Case Const.cSection_HealthSummary
                           Form_PDF = hCtrl
                           'reconstruct the health summary but do not delete the temporary file when FPDF loads it.
                           Form_PDF.Load_PDF(modPrinting.Latex_To_PDF(modProgressNotes.Health_Summary_Construct_LaTex(currentconsult).GetData()), False, False)
                           '   Editor_ShowPage("pdf file", "Health Summary", modPrinting.Latex_To_PDF(templ.GetData()))
                           
                     End Select
                  Case "FHtmlViewer"
                     Select Case section
                        Case const.cSection_CarePlan
                           ' If Page.caption = "Care Plan" Then
                           '    HTMLViewer = hctrl
                           '    HTMLViewer.WebView1.HTML = modProgressNotes.Care_Plan_Construct_html(Currentconsult)
                           '    Break
                           ' Endif
                        Case const.cSection_Food_Drug_List
                           If Page.caption = "Brand Equivalents" Then
                              HTMLViewer = hctrl
                              HTMLViewer.WebView1.HTML = modPrescribingDBI.Brand_Equivalents_Make_HTML(modPrescribingDBI.active_medication_list(currentconsult), currentconsult)
                              Break
                           Endif  
                     End Select
               End Select
            Next
         Next
   End Select
   
End

Public Sub Layout_Form()
   '------------------------------------------------------------------------
   'These labels in the IDE have identifying text (just so you can see them)
   'remove this at runtime
   '------------------------------------------------------------------------
   
   consultationtypes = modUtilGUI.LoadCombo(cmbConsultationType, modConsultDBI.consult_get_types(), "type")
   cmbConsultationType.index = cmbConsultationType.Find("At consulting rooms")
   txtConsultDate.text = Format(Now, "dd/mm/yyyy")
   
End

Public Sub FormFonts_Adjust()
   '------------------------------------------------------------------------
   'first attempt to globally change the label sizes on all forms edit areas
   'when global font is changed
   '------------------------------------------------------------------------
   
   Dim i As Object
   
   If IsNull(EditorPages) Then Return
   Inc application.Busy
   
   For Each i In EditorPages
      Try Object.Call(i, "EditArea_Resize_Labels")
   Next
   Dec application.Busy
Catch
   Application.Busy = 0
   
End

Public Sub Settings_Save()
   
   Dim i As Object
   
   '------------------------------------------------------------------
   'Try and save the settings for all pages in the FClinical Workspace
   'Note that Settings_Save() on each form must be public
   '------------------------------------------------------------------
   For Each i In EditorPages
      Try Object.Call(i, "Settings_Save")
   Next
   Settings["FClinical/Vsplit_Main.Layout"] = VSplit_Main.Layout                                      'the main vertical splitter separating toolbar and rest of screen
   Settings["FClinical/Hsplit_Toolbar.Layout"] = Hsplit_ToolBar.Layout                                'horizontal splitter containing all the toolbar sub-panels and splitters
   Settings["FClinical/HSplit_Comms_Birthdate.Layout"] = HSplit_Comms_Birthdate.layout
   Settings["FClinical/Hsplit_Main"] = HSplit_Main.Layout                                             'horizontal splitter separating main workspace with lists on right hand side
   Settings["FClinical/HSplit_MeasurementLists.Layout"] = HSplit_MeasurementLists.Layout
   If Vbox_Decision_Support.Visible = False Then                                                      'if user closes program whilst this is open, don't save the splits
      If Not IsNull(FMetaData) Then                                                                   'if metadata for a document exists
         If FMetaData.Visible = False Then                                                            'and this panel is visible
            Settings["FClinical/VsplitClinical_RightPane"] = VsplitClinical_RightPane.Layout               'otherwise save the splits on the right hand side
         End If
      Else
         Settings["FClinical/VsplitClinical_RightPane"] = VsplitClinical_RightPane.Layout
      End If
   End If
   If Not IsNull(FMetaData) Then                                                                       'if metadatashowing, keep that split value for use when viewing doc metadata
      If FMetaData.Visible = True Then
         Settings["FClinical/VsplitClinical_RightPane_Metadata_Visible"] = VsplitClinical_RightPane.Layout
      End If
   End If
   Settings["FClinical/Requests_List_columns_date"] = cvwRequests.Columns[0].Width
   Settings["FClinical/cvwRecalls.font"] = cvwRecalls.Font.ToString()
   Settings["FClinical/cvwRecalls.columns"] = modUtilGUI.Columnsizes_To_String(cvwRecalls)
   Settings["FClinical/cvwRequests.font"] = cvwRequests.Font.ToString()
   Settings["FClinical/cvwRequests.columns"] = modUtilGUI.Columnsizes_To_String(cvwRequests)
   Settings["FClinical/cvwReferrals.font"] = cvwReferrals.Font.ToString()
   Settings["FClinical/cvwResults.font"] = cvwResults.Font.ToString()
   Settings["FClinical/cvwResults.columns"] = modUtilGUI.Columnsizes_To_String(cvwResults)
   Settings["FClinical/cvwReferrals.columns"] = modUtilGUI.Columnsizes_To_String(cvwReferrals)
   'the splitter on the tabbed lists containing measurement types/values
   Settings["FClinical/VSplit_TabbedListsGraph.Layout"] = [VSplit_TabbedListsGraph.Layout[0], Max(VSplit_TabbedListsGraph.Layout[1], 150)]
   Settings["FClinical/HSplit_ProblemLists.layout"] = Hsplit_ProblemLists.Layout
   modAdminDBI.Clinical_Toolbuttons_Save(pnlToolButtons, modDBConnect.currentUser!fk_staff, Toolbuttons)
   Settings["FClinical/Graphs_font.size"] = slGraphFontSize.value
   
End

Private Sub Settings_Load()
   
   Dim main_height As Integer
   
   main_height = HBox_ConsultDetails.height + HBox_Sections.Height + HBox_Buttons1.height + HBox_Buttons2.Height + separator2.height + separator5.height + separator6.height
   Try VSplit_Main.Layout = Settings["FClinical/Vsplit_Main.Layout"]
   If Error Then    
      VSplit_Main.Layout = modUtilGUI.VSplit([main_height * 2, Me.height - main_height])
   End If  
   Hsplit_ToolBar.Layout = Settings["FClinical/Hsplit_Toolbar.Layout", modUtilGUI.HSplit([311, 480, 197, 77, 148])]
   HSplit_Main.Layout = Settings["FClinical/HsplitClinical_Main", modUtilGUI.HSplit([1222, 489])]
   HSplit_MeasurementLists.Layout = Settings["Clinical/HSplit_MeasurementLists.Layout", modUtilGUI.HSplit([1, 1])]
   HSplit_Comms_Birthdate.layout = Settings["FClinical/HSplit_Comms_Birthdate.Layout", modUtilGUI.HSplit([1, 1])]
   Layout_Right_Side_Screen
   tlReminders.font = Font[Settings["FClinical/tlReminders.font", "Arial,7"]]
   cvwRecalls.Font = Font[Settings["FClinical/cvwRecalls.font", "Arial,9"]]
   cvwRequests.Font = Font[Settings["FClinical/cvwRequests.font", "Arial,9"]]
   cvwReferrals.Font = Font[Settings["FClinical/cvwReferrals.font", "Arial,9"]]
   cvwResults.Font = Font[Settings["FClinical/cvwResults.font", "Arial,9"]]
   cvwProblemsMajor.Font = Font[Settings["FClinical/cvwProblemsMajor.font", "Arial,9"]]
   cvwProblemsSignificant.Font = Font[Settings["FClinical/cvwProblemsSignificant.font", "Arial,9"]]
   cvwProblemsInactive.Font = Font[Settings["FClinical/cvwProblemsInactive.font", "Arial,9"]]
   cvwLettersReceived.font = Font[Settings["FClinicals/cvwLettersReceived.font", "Arial,9"]]
   cvwCertificates.Font = Font[Settings["FClinical/cvwCertificates.font", "Arial,9"]]
   ' cvwMedications.Font = Font[Settings["FClinical/cvwMedications.font", "Arial,9"]]
   '-------------------------------------------------------------------------------------------
   'We can't afford to have split contents on the main right side of the screen 'go missing'
   'i.e if user has 'disappeared the splits e.g made the script list big and removed the graph
   'they are probably going to get confused 'Where the f*** is it?
   'so, assume 2/3 1/3 optimum
   '-------------------------------------------------------------------------------------------
   Try slGraphFontSize.value = Settings["FClinical/Graphs_font.size"]
   Try modUtilGUI.columnSizes_Get(Settings["FClinical/cvwResults.columns"], cvwResults)
   Try modUtilGUI.columnSizes_Get(Settings["FClinical/cvwRequests.columns"], cvwRequests)
   Try modUtilGUI.columnSizes_Get(Settings["FClinical/cvwRecalls.columns", "60|425"], cvwRecalls)
   Hsplit_ProblemLists.Layout = Settings["FClinical/HSplit_ProblemLists.layout", modUtilGUI.HSplit([1, 1])]
   lblMajorProblems.width = Hsplit_ProblemLists.children[0].width
   lblSignificantProblems.width = Hsplit_ProblemLists.children[1].width
   gvAllergies.font = Font[Settings["FClinical/gvAllergies.font", "Arial,9"]]
   ' mnuView_IncludeInactivePatients.value = Settings["FClinical/mnuView_IncludeInactivePatients.value", False]
   ' mnuView_IncludeDeceasedPatients.value = Settings["FClinical/mnuView_IncludeDeceasedPatients.value", False]
   
End Sub

Public Sub Layout_Right_Side_Screen()
   '------------------------------------------------------------------------------------------
   'We can't afford to have split contents on the main right side of the screen 'go missing'
   'i.e if user has 'disappeared the splits e.g made the script list big and removed the graph
   'they are probably going to get confused 'Where the f*** is it?
   'Called by Settings_load at init() and any time patient is reloaded.
   '------------------------------------------------------------------------------------------
   
   VSplit_TabbedListsGraph.Layout = Settings["FClinical/VSplit_TabbedListsGraph.Layout", modUtilGUI.VSplit([244, 179])]  'get the layout vals if exist FIXME BUG HERE
   '----------------------------------------------------------------
   'Now, layout the tasks and problem lists bottom part on the right
   '----------------------------------------------------------------
   VsplitClinical_RightPane.Layout = Settings["FClinical/VsplitClinical_RightPane", modUtilGUI.VSplit([366, 0, 156, 169])]
   
End

Public Sub Consult_Save()
   '------------------------------------------------------------------------------------------
   'Saves any outstanding data for the consultation in the progress note editor
   'As the progress notes view can be 'saved' as a pdf via the same Save button on the toolbar
   'don't auto-save this, not needed except explicitly when user wants to export the notes 
   'If no notes are in the progress note editor, codes will not be saved as there will be
   'no fk_progress note to link to.
   '------------------------------------------------------------------------------------------
   
   Dim i As Object
   
   If IsNull(currentconsult) Then Return  'do not remove this
   If Consult_Time_Check_Valid() = False Then Return  
   Inc Application.Busy
   TabStrip_Lists.Enabled = False
   For Each i In EditorPages
      If i.name <> "FProgressNotesViewer" Then  
         Try Object.Call(i, "Save")
      End If   
   Next
   Application.Busy = 0
   TabStrip_Lists.Enabled = True
Catch
   Application.busy = 0
   TabStrip_Lists.Enabled = True
   Return
   
End

Public Function Consult_Is_Coded() As Boolean
   '----------------------------------------------------
   'Ensures that the consult is coded, or at least tries
   'to bully the user into doing so
   'Returns True if consult is coded or they refuse
   '----------------------------------------------------
   
   Dim sMsg As String
   
   currentconsult.Refresh("progress_notes")                      'ensure progress notes up to date
   ' If currentconsult!progress_notes_today.count Or ProgressNotesPage.Progress_Notes_Codes_Get().count Then    'if there have been some written today or if consult is coded
   If Not ProgressNotesPage.Progress_Notes_Codes_Get().count Then   
      ' currentconsult.Refresh("progress_notes_codes")             'makes sure progress notes codes up to date
      '   currentconsult.Refresh("progress_notes_codes_today")       'see if there are any codes for today
      '   If Not currentconsult!progress_notes_codes_today.count Or Not ProgressNotesPage.cvwReasonForEncounter.count Then 'No? then message the user
      '    If Not ProgressNotesPage.cvwReasonForEncounter.count Then 'No? then message the user
      
      Application.Busy = -1
      Message.title = "Coding Consultations"
      sMsg = "It is recommended that you code all your consultations, in fact it is probably a requirement of your practice accreditation.\n\n"
      "Do you wish to code this consultation now?"
      If Message.Question(smsg, "Yes", "No") = 1 Then         'If they do want to code
         Editor_ShowPage("New General Notes")                 'make sure general notes tab showin
         FGeneralNotesEditor.txtReasonEncounter.SetFocus      'focus to the text entry for codes
         Return
      End If
      '  End If   
   Endif
   Return True                                                   'all is well, they've at least coded something
   
End

Public Sub Patients_Find(Optional fk_patient As Integer)
   '-----------------------------------------------------------------------------
   'Attemps to find patients according to criteria entered in cmbSearch
   'of by patient key if picked from list of patients seen that day
   'If none found , resets focus to cmbsearch
   'Otherwise creates an empty patient object
   'If only one name and address auto-load that patient to currentconsult
   'If multiple names/addresses, popup a modal for choice
   'which returns a patient object which becomes currentconsult
   'fixme - implement the patient stack
   '-----------------------------------------------------------------------------
   
   Dim AllPatients As New Collection
   Dim patient As Collection
   Dim sql_in_english As String
   Dim P As Picture
   Dim bPhotoConfirmed As Boolean = False
   
   If BExit Then Return
   bExit = True
   
   Inc Application.Busy
   
   If fk_patient Then
      patient = modContactsDBI.Patient_Get_Using_PK(fk_patient)
   Else
      AllPatients = modContactsDBI.patients_get_firstname_surname(cmbSearch.text, mnuView_IncludeDeceasedPatients.value,, mnuView_IncludeInactivePatients.value)
      sql_in_english = AllPatients!sql_in_english
      AllPatients.Remove("sql_in_english")
   End If
   If AllPatients.count = 0 And If IsNull(patient) Then
      cmbSearch.SetFocus()
      cmbSearch.Enabled = True
      Dec application.Busy
      bExit = False
      Return
   Else
      '----------------------------------------------------
      'One or more patients.
      'If one, get their photo if it exists and load record
      '----------------------------------------------------
      If AllPatients.count = 1 Then
         '----------------------------------------------------
         'no way in gambas to get a key without an iteraction
         'get first key
         '----------------------------------------------------
         For Each patient In AllPatients
         Next
         
      Endif
      If Not IsNull(patient) Then
         If Not IsNull(patient!image.data) Then
            P = modGraphics.Blob_Convert_To_Picture(patient!image)!picture
         Else
            P = Picture.Load("icons/misc/no_photo.png")
         End If
         '--------------------------------------------------------------------------
         'Don't bug the user AKA don't bug Ian with confirming the patients identity
         '--------------------------------------------------------------------------
         If modAdminDBI.Config_Get_Staff_Member("clinical_enforce_confirm_id", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff) = True Then
            FConfirmPatient.Init(P, patient!wholename)
            If Not FConfirmPatient.ShowModal() Then
               cmbSearch.Enabled = True
               Dec application.Busy
               bExit = False
               cmbSearch.SetFocus()
               Return
            End If
         End If
         patient_load_record(patient, bPhotoConfirmed, P)
      Else
         '---------------------
         'more than one patient
         '---------------------
         mnuView.Visible = False
         mnuSections.Visible = False
         mnuDecisionSupport.Visible = False
         mnuHelp.visible = False
         Dec Application.Busy
         VSplit_Main.Visible = False
         form_select = New FPatientsSelect(Me)
         obs = New Observer(form_select.btnCancel) As "SelectPatient"
         form_select.Init(AllPatients, sql_in_english, "FClinical") 'was Me
         form_select.Visible = True
         
      Endif
   End If
   bExit = False
   cmbSearch.Enabled = True
   Dec application.Busy
   
End

Public Sub Allergies_Sensitivities_Refresh()
   '---------------------------------------------------------------
   'Fetch the patients allergies and sensitivities from the backend
   'If the allergy is non-drug show the allergen
   'If the allergy is generic specific show the generic
   'If no allergy and no 'no allergies known'
   'then prompt user with prominant comment 'PATIENT NOT ASKED'
   'If any sensitivites exist then by definition the module has been
   'accessed and allergies will have been queried, user will be
   'informed sensitivities exist they will not be listed.
   '---------------------------------------------------------------
   
   Dim allergy As Collection
   Dim allergies As Collection
   Dim meds_prescribed_today As Collection 
   Dim med As Collection
   Dim allergy_class_code As Collection 
   Dim sMsg As String
   
   With gvAllergies
      .Clear()
      .Rows.count = 0
      .Rows.Height = -1
      .Columns.count = 2
      .columns[0].width = 20
   End With
   currentconsult.Refresh("allergies")
   allergies = Modutil.Copy_Collection_Keyed_Sequentially(currentconsult!allergies)
   If allergies.count Then                              'have either allergies or sensitivities
      For Each allergy In currentconsult!allergies    
         If allergy!nil_allergies_sensitivities Then           'First acertain if has ever been asked 
            Inc gvAllergies.Rows.Count
            With gvAllergies[gvAllergies.Rows.Count - 1, 1]
               .Text = "Asked - No Known Allergies"
               .Foreground = Color.Red
               .Alignment = Align.Center
            End With
            Return 
         Endif
         Inc gvAllergies.Rows.Count 
         If allergy!fk_lu_reaction_type = const.ReactionType_Allergy Then  'exists ?is an allergy
            With gvAllergies[gvAllergies.Rows.Count - 1, 0]
               .text = "A"
               .Foreground = Color.red
               .Alignment = Align.TopLeft
            End With 
         Else
            With gvAllergies[gvAllergies.Rows.Count - 1, 0]
               .text = "S"
               .Foreground = Color.Black
               .Alignment = Align.TopLeft
            End With 
         End If   
         With gvAllergies[gvAllergies.Rows.Count - 1, 1]
            If allergy!specificity = "g" Then
               .text = allergy!generic
            Else If allergy!specificity = "b" Then 
               .text = allergy!brand
            Else
               .Text = Trim(allergy!class_name & " " & allergy!allergen) 'only one will appear
            End If   
            .Alignment = Align.TopLeft
            If allergy!fk_lu_reaction_type = const.ReactionType_Allergy Then
               .Foreground = Color.Red
            Else
               .Foreground = Color.Black
            End If 
            .WordWrap = True
         End With
         gvAllergies.Rows[gvAllergies.Rows.Count - 1].height = -1
      Next
   End If  
   If gvAllergies.Rows.count = 0 Then   
      Inc gvAllergies.Rows.Count
      With gvAllergies[gvAllergies.Rows.Count - 1, 1]
         .WordWrap = True
         .RICHText = "No record of patient being asked about allergies"
         .Foreground = Color.Red
         .Alignment = Align.Center
      End With
      gvAllergies.rows[0].Height = -1
   End If
   
   '------------------------------------------------------------------------------------------------------------------
   'Check that nothing has been prescribed today (and saved) to which we are allergic, warn user, lay down audit trail
   '------------------------------------------------------------------------------------------------------------------
   For Each med In currentconsult!prescriptions_written  '= prescriptions written today
      For Each allergy_class_code In currentconsult!allergy_class_codes
         If allergy_class_code!class_code = Left(med!atccode, Len(allergy_class_code!class_code)) Then
            sMsg = modAllergyDBI.Allergy_Warning(currentconsult, med, allergy_class_code!class_code)
            sMsg &= "\n\nIt seems this drug has already been prescribed today.\n\nYou should check the prescription is not a mistake."
            Message.Warning(sMsg, "Ok")
            sMsg = "The user was presented with a warning message about danger with a currently prescribed medication and viewed and clicked OK in the popup dialog box.<BR><BR>" & sMsg 
            If modAudit.MakeAudit(currentconsult, "warning to user", "clin_prescribing.prescribed", med!prescribed!pk, const.cSection_Prescriptions, sMsg) Then
               modDBConnect.CommitTrans()
            Endif
            Break
         End If  
      Next
   Next
   '-------------------------------------------------------------------
   'Now check that nothing has been prescribed but not printed or saved
   '-------------------------------------------------------------------
   If Not IsNull(PrescriptionPage) Then  'fixme invalid object
      If Not IsNull(PrescriptionPage.script_items) Then  
         For Each med In PrescriptionPage.script_items
            If med!prescribed.Exist("pk") = False Then   'on list but not yet saved or printed
               For Each allergy_class_code In currentconsult!allergy_class_codes
                  If allergy_class_code!class_code = Left(med!atccode, Len(allergy_class_code!class_code)) Then
                     sMsg = modAllergyDBI.Allergy_Warning(currentconsult, med, allergy_class_code!class_code)
                     sMsg &= "\n\nIt seems this drug has already been prescribed today but not printed.\n\nYou should check the prescription is not a mistake."
                     Message.Warning(sMsg, "Ok")
                     sMsg = "The user was presented with a warning message about danger with a currently prescribed medication which has not yet been printed, and viewed and clicked OK in the popup dialog box.<BR><BR>" & sMsg 
                     If modAudit.MakeAudit(currentconsult, "warning to user", Null, 0, const.cSection_Prescriptions, sMsg) Then
                        modDBConnect.CommitTrans()
                     Endif
                     Break
                  End If  
               Next
            End If  
         Next
      End If   
   End If   
   
   ' Catch 
   '   Return
   
End

Public Sub gvAllergies_Select()
   '-------------------------------------------
   'Popup dialog box to display allergy details
   '-------------------------------------------
   
   Dim allergy As Collection
   Dim sMsg As String
   
   Return 
   If gvAllergies.row = -1 Then Return 
   allergy = modutil.Copy_Collection_Keyed_Sequentially(currentconsult!allergies)[gvAllergies.row]
   If allergy!specificity = "g" Then
      sMsg = "Generic Specific "
   Else If allergy!specificity = "c" Then 
      sMsg = "Class Specific" 
   Else If allergy!specificity = "b" Then 
      sMsg = "Brand Specific " 
   Endif
   
   Message.Title = "Reaction Details"
   sMsg &= modutil.Ucase_Word_First_Letter(allergy!reaction_type) & "\n\n"
   sMsg &= "Reaction       : " & allergy!details & "\n"
   If Not IsNull(allergy!class_name) Then sMsg &= "Drug Class    : " & modutil.Ucase_Word_First_Letter(allergy!class_name) & "\n"
   If Not IsNull(allergy!generic) Then sMsg &= "Drug Generic: " & modutil.Ucase_Word_First_Letter(allergy!generic) & "\n"
   Message.info(sMsg)
   
End

Public Sub cvwReferrals_Select()
   '---------------------------------------------------------------
   'display the referral letter written which was clicked on
   'This would usually be on the click event but the drag event
   'takes precendence over cvwReferrals_click when referrals showing
   '----------------------------------------------------------------
   
   cvwReferrals.MoveCurrent()
   cvwReferrals_key = cvwReferrals.Item.Key
   Referral_Letter_Display()
Catch
   Return 
   
End

Public Sub cvwReferrals_Menu()
   '--------------------------------------------------------------
   'Pop up a menu over the list of referrals the user has written
   '-------------------------------------------------------------
   '------------------------------------------------------------------------
   'If there is a deleted referral, enable that menu item, otherwise disable
   '------------------------------------------------------------------------
   
   Dim menuitem As Menu
   
   If Not IsNull(deleted_referral!pk_referral) Then
      mnuTabbedListReferral.Children[6].Enabled = True
   Else
      mnuTabbedListReferral.Children[6].Enabled = False
   Endif
   '----------------------------------------------------------------------------
   'if no letters but a deleted letter exists, must have deleted the last letter
   'So disable all menu items except undo-delete
   '----------------------------------------------------------------------------
   If cvwReferrals.count = 0 Then
      If mnuTabbedListReferral.Children[6].Enabled = True Then
         For Each menuitem In mnuTabbedListReferral.Children
            menuitem.Enabled = False
         Next
         mnuTabbedListReferral.Children[6].Enabled = True
      Else
         Return
      End If
   Else
      For Each menuitem In mnuTabbedListReferral.Children
         menuitem.Enabled = True
      Next
      If IsNull(deleted_referral!pk_referral) Then
         mnuTabbedListReferral.Children[6].Enabled = False
      Endif
   End If
   mnuTabbedListReferral.Popup()
   
End

Public Sub cvwReferrals_Fill()
   '-------------------------------------------------------------
   'NAME     : cvwReferrals_Refresh()
   'PURPOSE  : Displays the patients outgoing referral letters
   '           in a list
   'CALLED BY: TabStrip_Lists_MouseUp()
   'WARNING  : All the lists contained on the gui-element TabStrip_Lists
   '           are members of the tabbedlists group.There is no
   '           cvwReferrals_events() per se, its events are under
   '           TabbedLists_events()
   'TOFIX    : Smarter column sizing
   '--------------------------------------------------------------
   
   Dim x As Integer                      'for readability = key
   Dim sString As String
   Dim referral As Collection
   
   With cvwReferrals
      .Clear()
      .Columns.count = 2
   End With
   lblMeasure.font = cvwReferrals.Font
   '--------------------------------------------------------------
   'Loop through the collection, the key of the columnview becomes
   'the primary key of clin_referrals.inbox
   '--------------------------------------------------------------
   For Each referral In currentconsult!referrals_written
      x = referral!pk_referral                      'readability
      If referral!surname Then
         sString = referral!wholename
      Else
         sString = referral!organisation
      End If
      cvwReferrals.Add(x, 0)                                                  'add new row
      cvwReferrals[x][0] = Format(referral!date_referral, "dd/mm/yyyy")
      If sSTring = "" Then
         cvwReferrals[x][1] = referral!tag
      Else
         cvwReferrals[x][1] = sSTring & " - " & referral!tag
      End If
      If referral!finalised = False Then
         cvwReferrals[x][1] &= " (** UNFINISHED LETTER **)"
      Endif
   Next
   
End

Public Sub Patient_Demographics_Display()
   '--------------------------------------------------------
   'Display core demographics,
   'name, address, sex, age
   'comms limited to (FIXME) user defined list
   'medicare number or other clerical FIXME when implemented
   '--------------------------------------------------------
   
   Dim com As Collection
   
   If Not modFiles.Dir_Working("document_archiving_directory") Then
      Message.Title = "WARNING"
      Message.Info("EasyGP was not able to detect a valid directory containing the archived documents, hence you will not be able to view any" 
      "results or letters for this patient which are archived in the pdf format.\n\n You should speak to your system administrator about correcting this.\n\n "
      "You will of course be able to use the other clinical function.")
   Endif
   
   bExit = True
   cmbSearch.text = currentconsult!patient!firstname & " " & currentconsult!patient!surname & " " & Trim(currentconsult!patient!street1 & " " & currentconsult!patient!street2) & " " & currentconsult!patient!town
   cmbSearch.text &= " " & currentconsult!patient!postcode
   cmbSearch.pos = 1
   txtAge.text = "Age " & currentconsult!patient!age_display & " "
   If Not IsNull(currentconsult!patient!occupation) Then
      txtOccupation.Text = UCase(Left(currentconsult!patient!occupation, 1)) & Right(currentconsult!patient!occupation, Len(currentconsult!patient!occupation) - 1)
      If currentconsult!patient!retired Then
         txtOccupation.text &= " (Retired)"
         txtOccupation.pos = 0
      End If
      lblMeasure.text = txtOccupation.text & "  "
      VBox_Occupation_Birthdate.width = lblMeasure.Width
   Else
      txtOccupation.text = "Occupation?"
   Endif
   
   If Not IsNull(currentconsult!patient!veteran_number) Then
      lblMedicareNumber.text = currentconsult!patient!veteran_number
   Else
      lblMedicareNumber.text = modutil.Medicare_Number_Format(currentconsult!patient!medicare_number)  
      If Not IsNull(currentconsult!patient!medicare_ref_number) Then 
         lblMedicareNumber.text &= " Pos:" & currentconsult!patient!medicare_ref_number
      End If   
   Endif
   
   txtOccupation.Enabled = True
   cmbSearch.Tag = currentconsult!patient!firstname & " " & currentconsult!patient!surname & "\n"
   '----------------------------------------------------------------
   'On the top toolbar, show a list containing dob, medicare number,
   'and some basic contact numbers
   '---------------------------------------------------------------
   With lblBirthdate
      .text = Format(currentconsult!patient!birthdate, "dd/mm/yyyy")
      .visible = True  
   End With
   '---------------------------------------------
   'Display comms with abbreviated prefix in list
   '---------------------------------------------
   currentconsult.Refresh("comms") 'refreshed because can be called from outside of this module eg FPersons
   tlPatientComms.text = ""
   For Each com In currentconsult!comms
      tlPatientComms.text &= const.CommModalityTextBrief[com!fk_type] & ":" & com!value
      If com!note <> "" Then
         tlPatientComms.Text &= " (" & com!note & ") "
      Endif
      If com!preferred_method Then
         tlPatientComms.Text &= "<span style=\"color: blue;\">" & String.Chr(&H2605) & "</span>"  'star
      Endif
      If com!confidential Then
         tlPatientComms.Text &= "<span style=\"color: red; font-weight: bold; font-size: small;\">[PRIVATE]</span>"
      Endif
      tlPatientComms.text &= "<BR>"
   Next
   If tlPatientComms.text = "" Then tlPatientComms.text = "Contact Numbers"
   LBLID.text = "ID:" & currentconsult!patient!fk_patient 'show database ID under photo"
   If currentconsult!patient!fk_sex = const.cSexFemale Then
      Patient_Show_Pregnant 'check if patient pregnant
      Toolbar_Pregnancy_Button_Enable_Disable(True)
   Else
      Toolbar_Pregnancy_Button_Enable_Disable(False)
   End If   
   bExit = False
   
End

Public Sub Patient_Show_Pregnant()
   '---------------------------------------------------------------
   'If the patient is pregnant, make a prominant notice to the user
   '---------------------------------------------------------------
   
   Dim gestation As String
   
   If currentconsult!patient!age_numeric > 12 And currentconsult!patient!age_numeric < 60 Then
      gestation = modPregnancyDBI.Patient_Is_Pregnant(currentconsult!patient!fk_patient)
      If gestation Then
         If Not InStr(lblAlert.text, "PREGNANT") Then
            lblAlert.text = "PREGNANT " & gestation & "<BR>" & lblAlert.Text
         Endif
      Endif
   Endif
   
End

Public Sub cmbSearch_KeyPress()
   
End

Public Sub cmbSearch_Activate()
   
   If bExit Then Return
   If Len(Trim(cmbSearch.text)) > 0 Then
      '--------------------------------------------------------
      'Try and find a patient as per the text in the search box\
      'If this fails, then focus is res-set to the search box
      'If finds 1 patient, loads their records
      'If finds > 1 patient, popup multiple choice list
      'which is instance for FPatientsSelect
      '--------------------------------------------------------
      cmbSearch.Enabled = False
      patients_find()
   End If
   
End

Public Sub cmbSearch_LoadPatients()
   '------------------------------------
   'Loads combo with patients seen today
   '------------------------------------
   
   Dim Patient_Seen As Collection
   Dim fk_last_patient As Integer
   Dim x As Integer
   
   bExit = True
   cmbSearch.Clear()
   Patients_Seen = New Collection
   For Each Patient_seen In modAppointmentsDBI.Patients_Seen(Format(Now, "dd/mm/yyyy"), modDBConnect.currentUser!fk_staff)
      If fk_last_patient <> Patient_Seen!fk_patient And Patient_Seen!fk_type = const.consult_type_at_Surgery Then
         fk_last_patient = Patient_Seen!fk_patient
         cmbSearch.add(Patient_Seen!wholename)
         Patients_Seen.Add(Patient_Seen, x)
         Inc x
      End If
   Next
   bExit = False
   cmbSearch.SetFocus
   
End

Public Sub Gui_Clear()
   '------------------------------------------------
   'Removes all patient data from the user interface
   'clears all visible lists
   'clears all visible graphs
   'clears the patients tasks gridview
   '------------------------------------------------
   
   bExit = True
   bediting = False  
   Inc application.busy
   With tbHealthSummary
      .text = "View Health Summary"
      .tag = "Health Summary"
   End With
   currentconsult = Null
   
   '----------------------------------------------------------
   'Clear patient related textboxes and labels on main toolbar
   '----------------------------------------------------------
   With lblWarningEditingConsult
      .Foreground = Color.Background 'hide the text, don't resize the label
      .Background = Color.Background
   End With
   HBox_ConsultDetails.Background = Color.Background
   With lblConsult
      .Background = Color.Background
      .Foreground = Color.Black
      .text = " Consult Date "
   End With
   With DateBox1
      .Background = Color.White
      .Foreground = Color.Black
      .value = Now()
      .Visible = True  
   End With
   cmbSearch.text = ""
   lblCreatinineClearance.text = ""
   lblMedicareNumber.text = ""
   txtAge.text = ""
   lblAlert.text = ""
   lblID.text = ""
   lblBirthdate.Visible = False  
   gvAllergies.Clear()
   tlReminders.text = ""
   tlPatientComms.text = ""
   lblBirthdate.text = ""
   tlNotifications.text = ""
   With txtOccupation
      .text = ""
      .Enabled = False
   End With
   'FMain.form_stopwatch.Reset 
   With form_medications                       'with the embedded medications list
      .currentconsult = Null                   'if null won't trigger stuff
      .cvwMedications.Clear                    'clear the list visually               
      .rbActiveMedications.value = True        'default option button to active meds
   End With
   If Not IsNull(form_gpmp_tca_list) Then
      form_gpmp_tca_list.cvwGPMPTCA.clear()
   Endif
   PrescriptionPage = Null
   '-----------------------
   'Remove filters on lists
   '-----------------------
   txtInboxResults_filter.text = ""
   txtInboxResults_Exclude.text = ""
   txtLetterFilterAuthor.text = ""
   txtLetterFilterTag.text = ""
   txtFindGraphable.text = ""
   txtMeasurementShowLastMonths.text = ""
   tbEdit.enabled = False
   txtFindGraphable.text = ""
   mnuSections.Enabled = False
   mnuView_AllNotes.Enabled = False
   mnuView_ByProblem.Enabled = False
   WorkspaceEditor_Clear()                     'remove all current pages from workspace, starts new EditorPages collection
   Tabbed_lists_Clear()                        'scripts, recalls, requests lists etc
   TabStrip_Lists.index = 0                    'make medication list the default one showing
   cvwProblemsSignificant.Clear()
   cvwProblemsInActive.Clear()
   cvwProblemsMajor.Clear()
   ' lblMedications.text = "Medications"         'remove the count
 '  Vbox_Notifications.Background = Color.RGB(237, 239, 235)
   cmbConsultationType.index = cmbConsultationType.Find("At consulting rooms")
   With Form_Patient_Tasks
      .gvTasks.clear
      .VBox_Tasks.Visible = False   
      .tbNew.Enabled = False  
      .tbSave.Enabled = False 
      .tbHideForm.enabled = False   
      .Vbox_TasksList.Visible = True   
   End With
   Try BMICalc.EditArea_Clear()
   Try PregCalc.EditArea_Clear()
   UnFiled_Document_Metadata_Show(False)
   TabStripProblemLists.index = 1
   TabStripProblemLists.Caption = "Inactive Health Issues"
   TabStripProblemLists.index = 0
   TabStripProblemLists.Caption = "Active Health Issues"
   Patient_Picture_Clear()
   Measurements_Reset()                          'this leaves bExit=False   but casual reader won't know this
   bExit = False                                 'so tell them
   DecisionSupport_Show("", False)              'remove right hand side decision support panel (could be showing)
   Deleted_Documents = New Collection
   Deleted_Medications = New Collection         'fixme unite these collections
   Deleted_Referral = New Collection
   cvwLettersReceived_Key = -1
   application.busy = 0                        'ensure have no hourglass
   iCertificatetype = const.certificate_type_medical
   Layout_Right_Side_Screen
   modEditAreaHelpers.Warnings_Panel_Clear(pnlWarnings)
   lblwarnings.text = "Click to add warnings"
   
End

Public Sub cmbSearch_GotFocus()
   '----------------------------------------------------------------
   'User has clicked on the cmbSearch combo box in the text part
   'i.e they want to end the consultation and find another patient
   'First check there is no un-saved data - save that, then make
   'sure the consultation is coded if user has added notes
   'then clear all patient specific data from the gui
   're-setting the lists, notification labels etc
   'See FStaffPreferencesClinical for the config option for coding
   '----------------------------------------------------------------
   
   Dim PN As Collection
   
   If bexit Then Return
   If Not IsNull(currentconsult) Then                   'no consult, no save
      cmbSearch.Enabled = False                         'stop clicking again until finished database accessing
      Consult_Save                             'loop through all  open forms and call 'Save'
      currentconsult.Refresh("progress_notes_today")    'Is there actually a reason to code?, maybe there are no notes
      If currentconsult!progress_notes_today.count Then 'If we have progress notes 
         For Each PN In currentconsult!progress_notes_today
            If PN!problem = "New General Notes" Then    'If there are general notes (i.e ones user has typed in)
               teForSpelling.RichText = PN!notes        'this can contain html construct with no actual notes FIXME - examine this situation
               If Trim(Replace(teForSpelling.text, "\n", "")) <> "" Then    
                  If bProgressNotesEnforceCoding Then       'this global user preference was loaded in init from the backend.
                     If Not Consult_Is_Coded() Then         'then enforce coding, if not done and they want to do so
                        cmbSearch.Enabled = True            'get  ouf of here
                        Return                              'now
                     End If     
                  End If
               End If   
               Break
            End If   
         Next
      End If       
   End If 
   Gui_Clear()                                  'clear the input area
   cmbSearch.Enabled = True                     'allow user to click on combo again.
   cmbSearch.SetFocus
   
End

Public Sub cmbSearch_LostFocus()
   '--------------------------------------------------
   'Ensure that the patient's name at least is showing
   '--------------------------------------------------
   
   '  Last.pos = 0
   
End

Public Sub Patient_Picture_Clear()
   '---------------------------------------------
   ' Clears the picture from the main picture box
   ' puts back in the default
   '---------------------------------------------
   
   With PicPatient
      .Picture = Picture.Load("icons/misc/no_photo.png")
   End With
   Wait        'otherwise, visually, picture won't disappear
   
End

Public Sub Workspace_Load_Minimal_Panels()
   
   WorkspaceEditor.Lock()                    'DO NOT REMOVE THE LOCK/UNLOCK
   Editor_ShowPage("All Previous Notes")     'Always show all previous notes
   Editor_ShowPage("New General Notes")      'Default to general notes tab.
   WorkspaceEditor.Unlock()                  'OR THE GUI WILL RE-SET ITSELF
   
End

Public Sub WorkspaceEditor_Clear()
   'Purpose: removes all existing child tabs from the workspace editor
   
   Dim hWindow As Window
   
   WorkspaceEditor.Lock()
   For Each hWindow In WorkspaceEditor.Windows
      hWindow.Close()
   Next
   WorkspaceEditor.Unlock()
   EditorPages = New Collection
   
End

Public Sub Health_Summary_Display_HTML()
   
   FClinical.WebBrowser_Show(modProgressNotes.Health_Summary_Construct_html(currentconsult), "HEALTH SUMMARY")
   
End

Public Sub Health_Summary_Display()
   
   Dim templ As CTemplate
   
   Inc Application.Busy
   templ = modProgressNotes.Health_Summary_Construct_LaTex(currentconsult)
   If Not IsNull(templ) Then
      Editor_ShowPage("pdf file", "Health Summary", modPrinting.Latex_To_PDF(templ.GetData()))
   End If
   
   Dec application.Busy
   
End

Public Sub Images_Refresh(Optional bRefresh As Boolean = False)
   '--------------------------------------------------
   'Displays list of patient images or force a reload
   '-------------------------------------------------
   
   Dim I As Collection
   Dim lcRow As CImageRow
   
   lcImages.Clear()
   If bRefresh Then Currentconsult.Refresh("images")
   For Each I In Currentconsult!images
      lcRow = New CImageRow(lcImages, I)
   Next
   
End

Public Sub cvwLettersReceived_Select()
   
   If bexit Then Return
   cvwLettersReceived.MoveCurrent
   If cvwLettersReceived.key = "" Then Return
   If cvwLettersReceived_Key = cvwLettersReceived.Item.key Then Return
   cvwLettersReceived_Key = cvwLettersReceived.Item.key
   If WorkspaceEditor.ActiveWindow.Caption <> "Referrals" And WorkspaceEditor.ActiveWindow.Caption <> "Export Wizard" Then
      Document_Display(currentconsult!letters_received[cvwLettersReceived_Key])
   End If   
Catch
   Log.WarningMsg("cvwLettersReceived_Select: " & Error.Text & " " & Error.Backtrace.Join(" "))
   Return 
   
End

Public Sub cvwLettersReceived_Click()
   
   ' trap clicked as well as some Qt versions don't generate Select on one-item lists
   cvwLettersReceived_Select() 
   
End

Public Sub VBox_Letters_Leave()
   '---------------------------------------------------------------------------
   'Put this in because if have single entry on the list and has been selected
   'and user moves off to do something else, the line remains highlighted and 
   'clicking on it again > no key for that row > won't display
   '---------------------------------------------------------------------------
   
   bexit = True                  'otherwise unselectall triggers _select. Go figure
   cvwLettersReceived.UnselectAll()
   bExit = False  
   
End

Public Sub cvwLettersReceived_dblClick()
   '------------------------------------------------------------------
   'As the letter writer needs the click or select event to allow
   'user to drag and drop a document copy to the letter being written
   'viewing letters per-se occurs via the dblclick event if the letter
   'writer is open otherwise the select event
   '-------------------------------------------------------------------  
   
   cvwLettersReceived.MoveCurrent
   cvwLettersReceived_Key = cvwLettersReceived.Item.key
   Document_Display(currentconsult!letters_received[cvwLettersReceived_Key])
Catch
   Log.WarningMsg("cvwLettersReceived_dblClick: " & Error.Text & " " & Error.Backtrace)
   Return 
   
End

Public Sub cvwLettersReceived_Menu()
   '--------------------------------------------------
   'Stuff I hate columnviews!
   'User has elected to popup a menu over columnview
   'Problem is they can multi-select this one
   '--------------------------------------------------
   
   Dim document As Collection
   Dim num_selected As Integer
   Dim mnu As Menu
   Dim X As Integer
   Dim bHaveDeletedLetter As Boolean
   
   For Each mnu In mnuLettersReceived.Children                                         'default to no items available on menu
      mnu.Enabled = False
   Next
   For Each Document In Deleted_Documents                                              'check to see if deleted documents
      If Document!fk_lu_display_as = const.Document_Display_As_Letter Then             'there are?
         mnuLettersReceived_UndoDelete.Enabled = True                                  ' enable undelete menu option
         bHaveDeletedLetter = True
         Break
      Endif
   Next
   If Not cvwLettersReceived.count Then                                                'if nothing left on list 
      If bHaveDeletedLetter = False Then Return                                        'and nothing in undelete then exit                                       
   End If   
   If cvwLettersReceived.count Then    
      cvwLettersReceived.MoveFirst                                                        'see if more than one item has been selected
      For x = 0 To cvwLettersReceived.count - 1
         If cvwLettersReceived.Item.Selected = True Then
            If num_selected > 1 Then
               Break
            Endif
            Inc num_selected
         Endif
         cvwLettersReceived.MoveNext
      Next
      If num_selected > 1 Then                                                             'multi-select, only allow appropriate options
         For Each mnu In mnuLettersReceived.Children
            mnu.Enabled = False
         Next
         mnuLettersReceived_SelectAll.Enabled = True
         mnuLettersReceived_UnSelect.Enabled = True
         mnuLettersReceived_PrintSelected.Enabled = True
         mnuLettersReceived_PrintAll.Enabled = True
         mnuLettersReceived_Fonts.Enabled = True
         mnuLettersReceived_JoinPDF.Enabled = True
         mnuLettersReceived_Help.Enabled = True
      Else
         'not multil-selected allow all options
         For Each mnu In mnuLettersReceived.Children
            mnu.Enabled = True
         Next
         mnuLettersReceived_JoinPDF.Enabled = False                                  'not alot to join!
         cvwLettersReceived.MoveCurrent()
         mnuLettersReceived_UndoDelete.Enabled = False                                     'assume there is no documents to undelete
         Print cvwLettersReceived.Selection[0]
      End If
      If currentconsult!letters_received[cvwLettersReceived.Selection[0]]!msh_transmitting_entity = "snail mail" Then 'can only send back non-hl7 e.g scanned FIXME, LATER ?IMAGES
         mnuLettersReceived_ReFile.Enabled = True
      Else
         mnuLettersReceived_ReFile.Enabled = False
      End If
   End If   
   mnuLettersReceived.Popup()
Catch
   Return
   
End

Public Sub cvwRecalls_Refresh()
   '---------------------------------------------------------------
   'fixme separate out the toolbar display with the cvw display
   'I've stuck a routine to fill the columnview in modRecallsDBI
   'as its used in different spots in the progres
   'FIXME probably need to do so in the recalls management module
   '--------------------------------------------------------------
   
   Dim x As Integer                      'for readability = key
   Dim rows As String
   Dim sColText As String
   Dim sTableStart As String = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0 >"
   
   Dim sRow As String = ""
   
   "<TR>"
   "<TD WIDTH=60><FONT COLOR='%color%'>"
   "%col1%</FONT>"
   "</TD>"
   "<TD>"
   "%col2%"
   "</TD>"
   "</TR>"
   
   With cvwRecalls
      .Clear()
      .Columns.count = 1
   End With
   currentconsult.Refresh("recalls_logged")
   tlReminders.text = ""
   rows = ""
   For Each currentconsult!recalls_logged
      rows &= srow
      x = currentconsult!recalls_logged.Key                        'readability
      '---------------------------------------------------------
      'Display in the recalls list on the tabstrip_lists control
      '---------------------------------------------------------
      cvwRecalls.Add(x, 0)
      cvwRecalls[x][0] = Format(currentconsult!recalls_logged[x]!due, "dd/mm/yyyy") & "  " & currentconsult!recalls_logged[x]!reason
      '   cvwRecalls[x][1] = currentconsult!recalls_logged[x]!reason
      '---------------------------------------------------
      'Display these recalls as reminders at top of screen
      '---------------------------------------------------
      If DateDiff(Now, currentconsult!recalls_logged[x]!due, gb.Month) < 0 Then
         Rows = Replace(Rows, "%color%", "#800000")
         sColtext = "Overdue:"
         Rows = Replace(rows, "%color%", "#FFFFFF")
      Else
         sColtext = "Due in:"
      End If
      sColText &= Abs(DateDiff(Now, currentconsult!recalls_logged[x]!due, gb.Month)) & "M "
      rows = Replace(rows, "%col1%", sColText)
      rows = Replace(rows, "%col2%", currentconsult!recalls_logged[x]!reason)
   Next
   'FIXME this list is potentially invisible if user has re-sized it to nothing.
   If currentconsult!recalls_logged.count Then
      tlReminders.Richtext = sTableStart & rows & "</TABLE>"
   Else
      tlReminders.Richtext = "Recalls & Reminders - Nil"
   End If
   
End

Public Sub mnuDecisionSupport_Click()
   
   If IsNull(Currentconsult) Then Return
   If InStr(Last.tag, "immunisation_schedule.pdf") Then
      Editor_ShowPage("Immunisation Schedule", "Immunisation Schedule", Last.tag)
      Return
   Endif
   Editor_ShowPage(Last.tag)
   
End

Public Sub mnuCertificates_Click()
   '--------------------------------------------------------
   'user has clicked on the certificates menu, this could be
   'medical or workcover etc
   '--------------------------------------------------------  
   
   Dim filename As String
   
   cvwCertificates.MoveCurrent()
   Select Case Last.tag
      Case "delete"
         Select Case iCertificatetype
            Case const.certificate_type_medical
               If modCertificatesDBI.MedicalCertificates_Delete(currentconsult, currentconsult!medical_certificates[cvwCertificates.Item.Key]) Then
                  Certificates_Refresh()
                  'fixme just do this to update if chkaudit.value = true
               Endif  
            Case const.certificate_type_workcover
               Message.Info("To delete workcover certificates please go to the Workcover Section, selected from the main toolbar.")
         End Select
      Case "preview"
         Select Case iCertificatetype
            Case const.certificate_type_medical
               If Not IsNull(currentconsult!medical_certificates[cvwCertificates.Item.Key]!latex)
                  filename = modPrinting.Latex_To_PDF(currentconsult!medical_certificates[cvwCertificates.Item.Key]!latex)
                  Editor_ShowPage("pdf file", "Medical Certificate " & Format(currentconsult!medical_certificates[cvwCertificates.Item.Key]!certificate_date, "dd/mm/yyyy"), filename)
               Else
                  Message.Info("Sorry this certificate does not have a LaTex definition.\n\nThis is probably for historical beta-testing reasons, if this is a problem for you please speak to the developers.")
               End If
            Case const.certificate_type_workcover
               If Not IsNull(currentconsult!workcover_claims[cvwCertificates.Item.Key]!latex) Then 'unfortunately for developmental reasons, all WCC <11/11/11, don't have latex
                  filename = modPrinting.Latex_To_PDF(currentconsult!workcover_claims[cvwCertificates.Item.Key]!latex)
                  Editor_ShowPage("pdf file", "Workcover Form " & Format(currentconsult!workcover_claims[cvwCertificates.Item.Key]!certificate_date, "dd/mm/yyyy"), filename)
               Else
                  Message.Info("Sorry this certificate does not have a LaTex definition.\n\nThis is probably for historical beta-testing reasons, if this is a problem for you please speak to the developers.")
               End If
         End Select
      Case "reprint"
         Select Case iCertificatetype
            Case const.certificate_type_medical
               If Not IsNull(currentconsult!medical_certificates[cvwCertificates.Item.Key]!latex)
                  modPrinting.Print_latex(currentconsult!medical_certificates[cvwCertificates.Item.Key]!latex)
               Else
                  Message.Info("Sorry this certificate does not have a LaTex definition.\n\nThis is probably for historical beta-testing reasons, if this is a problem for you please speak to the developers.")
               End If
            Case const.certificate_type_workcover
               If Not IsNull(currentconsult!workcover_claims[cvwCertificates.Item.Key]!latex)
                  modPrinting.Print_latex(currentconsult!workcover_claims[cvwCertificates.Item.Key]!latex)
               Else
                  Message.Info("Sorry this certificate does not have a LaTex definition.\n\nThis is probably for historical beta-testing reasons, if this is a problem for you please speak to the developers.")
               End If
         End Select
      Case "fonts"
         modUtilGUI.Columnview_SetFont(cvwCertificates, "TabbedLists")
      Case "help"
         modUtilGUI.NotImplemented("Help for his menu")
   End Select
Catch
   Return 
   
End

Public Sub cvwRequests_Refresh()
   
   modEditAreaHelpers.Patient_Requests_Show(currentconsult, cvwRequests,,, Trim(Lower(txtInboxResults_Exclude.text)), Trim(Lower(txtInboxResults_filter.text)))
   
End

Public Sub cvwResults_Refresh(Optional bRefresh As Boolean = False)
   '-------------------------------------------------------------
   'PURPOSE  : Displays the patients results i.e
   '           pathology/radiology/nuclear medicine
   '           in the results column view
   'LOGIC    : RequestResults_Get() has retrieved a collection
   '           of results from the backend, keyed on the primary
   '           key of clin_results.inbox_general which stores
   '           pathology/radiology ie non-letters from providers
   '           Loop through this collection load into columnview
   '           only the date, test, who ordered it
   '           Later when one needs to access any result it will
   '           be contained in
   '           currentconsult.requestResults[cvwResults.item.key]
   'WARNING  : All the lists contained on the gui-element TabStrip_Lists
   '           are members of the tabbedlists group.There is no
   '           cvwResults_events() per se, its events are under
   '           TabbedLists_events()
   'TOFIX    : Smarter column sizing - make second column (1) with
   '           the requests max-width of the widest item
   '--------------------------------------------------------------
   
   Dim x As Integer                      'for readability = key
   Dim results_received As Collection
   Dim filter As String
   Dim exclude As String
   Dim result_received As String
   Dim guessed_user_Name As Collection
   
   If IsNull(currentconsult) Then Return
   If txtInboxResults_filter.text <> "" Then
      filter = txtInboxResults_filter.text
   End If
   '  If txtInboxResults_Exclude.text <> "" Then
   exclude = txtInboxResults_Exclude.text  '& ";"
   ' Endif
   cvwResults.Clear()
   With cvwResults
      .Columns.count = 3
      .Columns[0].width = 80
      .Columns[1].width = ((cvwResults.width - 100) * 2) / 3
   End With
   If bRefresh Then Currentconsult.Refresh("results_received")
   For Each results_received In currentconsult!results_received
      result_received = ""
      If filter = "" And exclude = "" Then
         If IsNull(results_received!tag_user) Then                         'not user tag = document not filed
            'attempt to guess the user tag
            CurrentObservations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & results_received!pk_document & " ORDER BY observations.observation_date, set_id")
            guessed_user_Name = modParseDocument.Guess_UserName(currentconsult, synonyms, results_received, CurrentObservations)
            If Not IsNull(guessed_user_Name!name) Then
               result_received = "** UNFILED **:" & guessed_user_Name!name
            Else
               result_received = "** UNFILED RESULT **:"
            End If
         Else
            result_received = results_received!tag_user
         End If
         
      Else
         If exclude Then
            'If Lower(results_received!tag_user) <> Lower(exclude) Then
            If Not InStr(Lower(results_received!tag_user), Lower(exclude)) Then
               result_received = results_received!tag_user
            Endif
         Else
            If results_received!tag_user = "" And InStr("unfiled", Lower(filter)) Then
               result_received = "** UNFILED **:"
            Else
               If InStr(Lower(results_received!tag_user), filter) Then
                  result_received = results_received!tag_user
               Endif
            End If
         End If
      End If
      If result_received <> "" Then
         x = results_received!pk_document
         cvwResults.Add(x, 0)
         If Not IsNull(results_received!date_created) Then  
            cvwResults[x][0] = Format(results_received!date_created, "dd/mm/yyyy")
         Else
            cvwResults[x][0] = "?date"   'import bug hl7 errors fixme this can be null - have put in a fix all new imports use date_ordered if date_created is null
         End If 
         cvwResults[x][1] = result_received 'results_received!tag_user
         cvwResults[x][2] = results_received!originator
      End If
   Next
   
End

Public Sub Editor_ShowPage(sPageName As String, Optional page_tag As String = "", page_data As Variant, additional_page_tag As String = "") As Form
   '----------------------------------------------------------------
   'PURPOSE:   Adds a new page to the progress notes workspace
   '           according to sType parameter passsed to it
   '           e.g "past history", "new page", "Request" etc
   '           Two types of pages Document_Viewer and Result_Viewer are global instances of FDocumentviewer
   '           and once created in this subroutine 'live' for the life of the EasyGP instance unless the
   '           tab is closed
   ' A FProgressNotePageContainer doesn't contain the texteditor - just a form
   ' containg two rows of toolbars with combo's and text formatting
   ' buttons, contained in VboxEditor
   '
   ' The container then has added to it either other forms or just
   ' a plain textedit control for pages only needing a text editor
   ' Note that Collections start from a zero(0) count
   ' but the tablist count starts from 1
   ' hence first tab > EditorPages[0] etc
   ' the page tag is either fixed eg "Skin Excision" or
   ' is a pk_pasthistory if doing progress notes for a past historyDisplay_Health_Issue
   ' item
   'FIXME convert this routine so that lower(page.title) = tag
   'NB: Though it would seem logical not to repeat for every new page
   '    the code: WorkspaceEditor.Add(NewPage)
   '    within each case statement, putting it at the end seems to
   '    make it impossible to auto-set focus on the first control
   '    in the new form.
   '--------------------------------------------------------------
   
   Dim Demographics As FPatients
   Dim ExportPartial As FExportPartial
   Dim INRManager As FInr
   Dim Shortcuts As FStaffPreferencesShortCuts
   Dim Image_Viewer As FImageViewer
   Dim retform As Form ' the Form we are returning to the caller: very useful for scripting
   Dim webpage As FBrowser
   Dim Browser As FHtmlViewer
   Dim GPCOG As FGPCOG
   Dim EdinburghPNDS As FEdinburgPNDScale
   Dim Chads As FChads
   Dim HasBled As FHasBled
   Dim K10 As FK10OutcomeTool
   Dim RestlessLegs As FRestlessLegs
   Dim Export_Clinical As FExportClinical
   Dim MultiMedia As FMoviePlayer
   Dim PsychoSocialHistory As FPsychoSocialHistory
   Dim AllPreviousNotes As FProgressNotesViewer
   Dim SingleHealthIssueNotes As FProgressNotesViewer
   Dim ExcisionPage As FProcedures
   Dim RequestPage As FRequests
   Dim Request_Names As FRequestNames
   Dim PregnancyPage As FPregnancy
   Dim RecreationalDrugs As FRecreationalDrugs
   Dim FamilyHistoryPage As FFamilyHistory
   Dim HealthAssessmentPage As FHealthAssessment
   Dim OccupationalHistoryPage As FOccupation
   Dim MC As FMedicalCertificate
   Dim AllergyPage As FAllergy
   Dim RecallPage As FRecalls
   Dim PastHistoryPage As FPastHistory
   Dim ReferralPage As FReferrals
   Dim MentalHealthPage As FMentalHealth
   Dim VaccinationPage As FVaccinations
   Dim workcoverNSWPage As FWorkcoverNSW
   Dim DiabetesCycleOfCare As FDACC
   Dim TravelPage As FTravel
   Dim page As FLinkContainer
   Dim PDF As FPDF
   Dim DrugBrowser As FPDF
   Dim Form_Library As FLibrary
   Dim Pictures As FPictureViewer
   Dim sMsg As String
   Dim Document_Viewer As FDocumentViewer                 'view any document but on the same page as previous
   Dim Result_Viewer As FDocumentViewer                   'view any resuilt  but on the same page as previous
   Dim Letters_Written_Viewer As FDocumentViewer          'view any previous letters written on same page as previous
   Dim bPagefound As Boolean
   
   '----------------------------------------------------------------------
   'With these pages, we want the appropriate list to be in the foreground
   'So this switches the list
   '----------------------------------------------------------------------
   ' lblsection.text = ""
   Select Case sPageName
      Case "Referrals"
         TabStrip_Lists.Index = clistReferrals
         Refresh_Section_Instance(const.cSection_Referrals)
      Case "Requests"
         TabStrip_Lists.index = cListRequests
         Refresh_Section_Instance(const.cSection_Requests)            'swap tabbed lists to requests
      Case "Workcover"
         TabStrip_Lists.index = cListCertificates
         rbWorkCoverCertificate.value = True
      Case "Measurements"
         TabStrip_Lists.index = clistMeasurements
      Case "Recalls"
         TabStrip_Lists.index = clistRecalls            'show recalls list on tab
   End Select
   'Results and documents  and audits are always shown on the same editor page, just re-loaded every time
   If sPageName = "result" Then                                             'generic tab for documents, re-used time after time after time
      bPagefound = False  
      For Each page In WorkspaceEditor.Windows                                    'search all tabs
         If Page.title = "Result" Or Page.Title = "UNFILED RESULT" Then                     'if result tab showing
            WorkspaceEditor.ActiveWindow = page
            Result_Viewer = page.VBoxEditor.Children[0]
            bPagefound = True   
            Break
         End If
      Next
      If bPagefound = False Then                                             'if not already showing
         page = New FLinkContainer                               'create the container
         page.tag = "Result"
         page.title = "Result"
         Result_Viewer = New FDocumentViewer(page.VBoxEditor)  'and instance of document (never killed whilst program running)
         WorkspaceEditor.Add(page)
      Endif
      Select Case additional_page_tag                            'show appropriate document
         Case "pdf"
            Result_Viewer.Load_PDF(modFiles.Get("document_archiving_directory", page_data))
         Case "image"
            Result_Viewer.Load_Picture(modFiles.Get("document_archiving_directory", page_data))
         Case "html"
            Result_Viewer.Load_Html(page_data)
      End Select
   Else If sPageName = "audit trail" Then
      bPagefound = False  
      For Each page In WorkspaceEditor.Windows                  'search all tabs
         If Page.title = "Audit Trail" Then                     'if audit trail tab is showing
            WorkspaceEditor.ActiveWindow = page
            Document_Viewer = page.VBoxEditor.Children[0]
            bPagefound = True   
            Break
         End If
      Next
      If bPagefound = False Then                                 'if not already showing
         page = New FLinkContainer                               'create the container
         page.tag = "Document"
         page.title = "Document"
         Document_Viewer = New FDocumentViewer(page.VBoxEditor)  'and instance of document (never killed whilst program running)
         WorkspaceEditor.Add(page)
      End If   
      Document_Viewer.Load_Html(page_data)
   Else If sPageName = "Immunisation Schedule" Then
      bPagefound = False  
      For Each page In WorkspaceEditor.Windows                                    'search all tabs
         If Page.title = "Immunisation Schedule" Then                     'if result tab showing
            WorkspaceEditor.ActiveWindow = page
            Document_Viewer = page.VBoxEditor.Children[0]
            bPagefound = True 
            lblSection.text = ""  
            Break
         End If
      Next
      If bPagefound = False Then                                             'if not already showin
         page = New FLinkContainer                               'create the container
         page.tag = "Immunisation Schedule"
         page.title = "Immunisation Schedule"
         Document_Viewer = New FDocumentViewer(page.VBoxEditor)  'and instance of document (never killed whilst program running)
         WorkspaceEditor.Add(page)
         lblSection.text = ""
      End If   
      With Document_Viewer
         .Load_PDF("clinical/vaccination" &/ page_data)
         .form_pdf.btNext_Click()
      End With
   Else If sPagename = "document" Then
      bPagefound = False  
      For Each page In WorkspaceEditor.Windows                                    'search all tabs
         If Page.title = "Document" Then                     'if result tab showing
            WorkspaceEditor.ActiveWindow = page
            Document_Viewer = page.VBoxEditor.Children[0]
            bPagefound = True   
            Break
         End If
      Next
      If bPagefound = False Then                                             'if not already showin
         page = New FLinkContainer                               'create the container
         page.tag = "Document"
         page.title = "Document"
         Document_Viewer = New FDocumentViewer(page.VBoxEditor)  'and instance of document (never killed whilst program running)
         WorkspaceEditor.Add(page)
      End If   
      Select Case additional_page_tag                            'show appropriate document
         Case "pdf"
            Document_Viewer.Load_PDF(modFiles.Get("document_archiving_directory", page_data))
         Case "image"
            Document_Viewer.Load_Picture(modFiles.Get("document_archiving_directory", page_data)) 
         Case "html"
            Document_Viewer.Load_Html(page_data)
      End Select
   Else If sPagename = "letters written" Then
      bPagefound = False  
      For Each page In WorkspaceEditor.Windows                                    'search all tabs
         If Page.title = "Letters Written" Then                     'if result tab showing
            WorkspaceEditor.ActiveWindow = page
            Letters_Written_Viewer = page.VBoxEditor.Children[0]
            bPagefound = True   
            Break
         End If
      Next
      If bPagefound = False Then                                             'if not already showin
         page = New FLinkContainer                               'create the container
         page.tag = "Letters Written"
         page.title = "Letters Written"
         Letters_Written_Viewer = New FDocumentViewer(page.VBoxEditor)  'and instance of document (never killed whilst program running)
         WorkspaceEditor.Add(page)
      End If   
      Select Case additional_page_tag                            'show appropriate document
         Case "tex"
            Message.info("sorry you'll have to fix the tex stuff  yourself")
            ' Letters_Written_Viewer.Load_PDF(modFiles.Get("document_archiving_directory", page_data))
         Case "html"
            Letters_Written_Viewer.Load_Html(page_data)
      End Select
   Else
      If Not Editor_SetActivePage(sPageName, page_tag) Then 'check if this page be it section or a result is already showing.
         lblsection.text = sPageName
         Select Case sPageName
            Case "Patients"                                             'the FPatients patient contact manager
               page = New FLinkContainer
               Demographics = New FPatients(page.VBoxEditor)
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = Demographics
            Case "Request Names"
               page = New FLinkContainer
               With Request_Names = New FRequestNames(page.VBoxEditor)
                  .Init()
               End With
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = Request_Names
            Case "Short Cuts"
               page = New FLinkContainer
               With Shortcuts = New FStaffPreferencesShortCuts(page.VBoxEditor)
                  .Init()
                  .ShortCut_New(page_data)
                  .Set_Embedded_Name("FClinical")
               End With
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = Request_Names
            Case "multimedia"
               page = New FLinkContainer
               With MultiMedia = New FMoviePlayer(page.VBoxEditor)
                  .Init(page_data)
               End With
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               Page.title = page_tag
               retform = MultiMedia
            Case "image"
               page = New FLinkContainer
               With Pictures = New FPictureViewer(page.VBoxEditor)
                  .Init(modFiles.Get("document_archiving_directory", page_data))
               End With
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = Page_tag
               retform = Pictures
               EditorPages.Add(Pictures, sPageName)
            Case "Library"
               page = New FLinkContainer
               With Form_Library = New FLibrary(page.VBoxEditor)
                  .HBox_Heading.Visible = False
               End With
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = Form_Library
               EditorPages.Add(Form_Library, sPageName)
               Control_For_Focus = Form_Library.TreeView1
            Case "Export Wizard"
               page = New FLinkContainer
               Export_Clinical = New FExportClinical(page.VBoxEditor)
               Export_Clinical.Init(currentconsult)
               WorkspaceEditor.Add(page)
               retform = Export_Clinical
               page.tag = sPageName
               Page.title = sPageName
               EditorPages.Add(Export_Clinical, sPageName)
            Case "INR"
               page = New FLinkContainer
               INRManager = New Finr(page.VBoxEditor)
               INRManager.Init(currentconsult)
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               EditorPages.Add(MC, sPageName)
               Control_For_Focus = INRManager.txtReason
            Case "Medical Certificates"
               page = New FLinkContainer
               MC = New FMedicalCertificate(page.VBoxEditor)
               MC.Init(currentconsult)
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = MC
               EditorPages.Add(MC, sPageName)
               Control_For_Focus = MC.txtReason
            Case "pdf file"
               page = New FLinkContainer
               With PDF = New FPDF(page.VBoxEditor)
                  .Init(currentconsult)
                  .Load_PDF(page_data, False, True)
                  .tbSave.Enabled = True
                  .tbSave.Visible = True
                  .btRotate.Visible = True
                  .tag = page_tag
               End With
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               Page.title = page_tag
               retform = PDF
               EditorPages.Add(PDF, page_tag)
            Case "drugs browser"
               page = New FLinkContainer
               With DrugBrowser = New FPDF(page.VBoxEditor)
                  .Load_PDF(page_data)
                  .Init_Drugs_Browser()
               End With
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               Page.title = page_tag
               retform = DrugBrowser
               EditorPages.Add(PDF, page_tag)
            Case "pdf document"
               page = New FLinkContainer
               With PDF = New FPDF(page.VBoxEditor)
                  .Load_PDF(modFiles.Get("document_archiving_directory", page_data))
                  .btRotate.Visible = True
                  .btRotate.Enabled = True
                  .btZoomIn.Visible = True
                  .btZoomIn.Enabled = True
               End With
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               Page.title = page_tag
               retform = PDF
               EditorPages.Add(PDF, page_tag)
            Case "pdf document external"   'not one of our documents
               page = New FLinkContainer
               With PDF = New FPDF(page.VBoxEditor)
                  .Load_PDF(page_data)
                  .btRotate.Visible = True
                  .btRotate.Enabled = True
                  .btZoomIn.Visible = True
                  .btZoomIn.Enabled = True
               End With
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               Page.title = page_tag
               retform = PDF
               EditorPages.Add(PDF, page_tag)
            Case "Habits"   'changed back at behest of Horst apparent patient's looking at screen took offence.
               page = New FLinkContainer
               RecreationalDrugs = New FRecreationalDrugs(page.VBoxEditor)
               RecreationalDrugs.Init(currentconsult)
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = RecreationalDrugs
               EditorPages.Add(RecreationalDrugs, sPageName)
               Control_For_Focus = RecreationalDrugs.lblMeasure
            Case "Care Planning"
               'remove past history tab if showing (this is included also in care planning and they cannot exist together)
               If Editor_PageExists("Past History", "Health Issues") Then
                  Editor_RemovePage("Health Issues")  'yes this is all rather stupid code and mixed up strings (historical - too lazy/no time to fix)
               Endif
               If Not modAdminDBI.Has_User_Seen_Tip("FGPMPTCA.FirstRun") Then 
                  With FUsageTip
                     .Init("Creating GPMP or TCA", "FGPMPTCA.FirstRun", modPastHistoryDBI.First_Run_Message())
                     .ShowModal()
                  End With  
               End If
               If IsNull(currentconsult!patient!fk_doctor) Then   
                  modPatientWarnings.Usual_Doctor_InForm_Missing(currentconsult)
               End If   
               page = New FLinkContainer
               With GP_Management_Plans = New FGPMPTCA(page.VBoxEditor)
                  .Init(currentconsult)
               End With
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = GP_Management_Plans
               EditorPages.Add(GP_Management_Plans, sPageName)
            Case "browser"
               page = New FLinkContainer
               With Browser = New FHtmlViewer(page.VBoxEditor)
                  Print page_data
                  .WebView1.HTML = page_data
                  .Set_Document_Details(Trim(additional_page_tag & " " & page_tag))
               End With
               obs = New Observer(Browser.mnuTest) As "mnuWebViewTest"
               obs = New Observer(Browser.Webview1) As "WebView"
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               Page.title = page_tag
               retform = Browser
               EditorPages.Add(Browser, page_tag)
            Case "images"
               page = New FLinkContainer
               Image_Viewer = New FImageViewer(page.VBoxEditor)
               Image_Viewer.Init(Currentconsult, page_data)
               WorkspaceEditor.Add(page)
               retform = Image_Viewer
               page.tag = page_tag
               Page.title = page_tag
               EditorPages.Add(Image_Viewer, page_tag)
            Case "GPCOG"
               page = New FLinkContainer
               GPCOG = New FGPCOG(page.VBoxEditor)
               GPCOG.Init(Currentconsult)
               retform = GPCOG
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
            Case "Edinburgh"
               page = New FLinkContainer
               EdinburghPNDS = New FEdinburgPNDScale(page.VBoxEditor)
               EdinburghPNDS.Init(Currentconsult)
               WorkspaceEditor.Add(page)
               retform = EdinburghPNDS
               page.tag = sPageName
               Page.title = sPageName
            Case "Restless Legs"
               page = New FLinkContainer
               RestlessLegs = New FRestlessLegs(page.VBoxEditor)
               RestlessLegs.Init(Currentconsult)
               WorkspaceEditor.Add(page)
               retform = RestlessLegs
               page.tag = sPageName
               Page.title = sPageName 
            Case "K10"
               page = New FLinkContainer
               K10 = New FK10OutcomeTool(page.VBoxEditor)
               K10.Init("FClinical") 'not yet integrated as a stand alone tool FIXME
               WorkspaceEditor.Add(page)
               page.tag = sPageName
               Page.title = sPageName
               retform = K10
               EditorPages.Add(K10, "K10")
            Case "Has-Bled Calculator"
               page = New FLinkContainer
               HasBled = New FHasBled(page.VBoxEditor)
               HasBled.Init(Currentconsult)
               WorkspaceEditor.Add(page)
               page.tag = "Has-Bled Calculator"
               page.Title = "Has-Bled Calculator"
               EditorPages.Add(HasBled, "Has-Bled Calculator")
               retform = HasBled
            Case "Chads Calculator"
               page = New FLinkContainer
               Chads = New FChads(page.VBoxEditor)
               Chads.Init(Currentconsult)
               WorkspaceEditor.Add(page)
               page.tag = "Chads Calculator"
               page.Title = "Chads Calculator"
               EditorPages.Add(Chads, "Chads Calculator")
               retform = Chads
               ' Case "Edit Notes"
               '    page = New FLinkContainer
               '    EditPastNotes = New FEditNotes(page.VBoxEditor)
               '    EditPastNotes.Init(currentconsult)
               '    WorkspaceEditor.Add(page)
               '    page.tag = "Edit Notes"
               '    page.Title = "Edit Notes"
               '    EditorPages.Add(EditPastNotes, "Edit Notes")
               '  retform = EditPastNotes
            Case "Single Health Issue Notes"
               page = New FLinkContainer
               With SingleHealthIssueNotes = New FProgressNotesViewer(page.VBoxEditor)
                  .Init(currentconsult, page_data)
                  .LblNotesFilter.text = page_tag
               End With
               WorkspaceEditor.Add(page)
               page.tag = page_tag
               page.Text = page_tag
               retform = SingleHealthIssueNotes
               EditorPages.Add(SingleHealthIssueNotes, page_tag)
               Control_For_Focus = SingleHealthIssueNotes.WebView1
            Case "All Previous Notes"
               page = New FLinkContainer
               With AllPreviousNotes = New FProgressNotesViewer(page.VBoxEditor)
                  .Init(currentconsult) 'defaults to no audit trail
               End With
               WorkspaceEditor.Add(page)
               page.tag = "All Previous Notes"
               page.Text = "All Previous Notes"
               retform = AllPreviousNotes
               EditorPages.Add(AllPreviousNotes, "All Previous Notes")
               Control_For_Focus = AllPreviousNotes.WebView1
            Case "Diabetes Cycle of Care"
               page = New FLinkContainer
               DiabetesCycleOfCare = New FDACC(page.VBoxEditor)
               DiabetesCycleOfCare.Init(Currentconsult)
               page.tag = "Diabetes Cycle of Care"
               page.Text = "Diabetes Cycle of Care"
               WorkspaceEditor.Add(page)
               retform = DiabetesCycleOfCare
               EditorPages.Add(DiabetesCycleOfCare, "Diabetes Cycle of Care")
            Case "Edit Last Consult"
               '----------------------------------------------------------------------
               'General notes page as the name implies is for notes not tied to a
               'particular health issue or problem. For particular problems the user
               'should be taught to open an editor tab for that problem.
               '----------------------------------------------------------------------
               page = New FLinkContainer
               ProgressNotesPage = New FProgressNoteEditor(page.VBoxEditor)
               WorkspaceEditor.Add(page)
               page.tag = "Edit Last Consult"
               page.Text = "Edit Last Consult"
               ProgressNotesPage_cvwMedications = ProgressNotesPage.cvwMedicationsToday
               ProgressNotesPage.Init(currentconsult, True)         'True = edit last progress notes
               EditorPages.Add(ProgressNotesPage, "Edit Last Consult")
               FGeneralNotesEditor = ProgressNotesPage               'used if want to insert text back into progress note
               retform = ProgressNotesPage
            Case "New General Notes"
               '----------------------------------------------------------------------
               'General notes page as the name implies is for notes not tied to a
               'particular health issue or problem. For particular problems the user
               'should be taught to open an editor tab for that problem.
               '----------------------------------------------------------------------
               page = New FLinkContainer
               ProgressNotesPage = New FProgressNoteEditor(page.VBoxEditor)
               WorkspaceEditor.Add(page)
               page.tag = "New General Notes"
               page.Text = "New General Notes"
               ProgressNotesPage_cvwMedications = ProgressNotesPage.cvwMedicationsToday
               ProgressNotesPage.Init(currentconsult)
               EditorPages.Add(ProgressNotesPage, "New General Notes")
               FGeneralNotesEditor = ProgressNotesPage               'used if want to insert text back into progress note
               retform = ProgressNotesPage
            Case "Travel"
               page = New FLinkContainer
               TravelPage = New FTravel(page.VBoxEditor)
               TravelPage.Init(currentconsult)
               page.tag = "Travel"
               page.Title = "Travel"
               WorkspaceEditor.Add(page)
               retform = TravelPage
               EditorPages.Add(TravelPage, "Travel")
               Control_For_Focus = TravelPage.txtDestination
            Case "Occupational History"
               page = New FLinkContainer
               With OccupationalHistoryPage = New FOccupation(page.VBoxEditor)
                  .Init(currentconsult)
               End With
               page.tag = "Occupational History"
               page.Title = "Occupational History"
               WorkspaceEditor.Add(page)
               retform = OccupationalHistoryPage
               EditorPages.Add(OccupationalHistoryPage, "Occupational History")
               Control_For_Focus = OccupationalHistoryPage.lbloccupation
            Case "Health Assessment"
               page = New FLinkContainer
               HealthAssessmentPage = New FHealthAssessment(page.VBoxEditor)
               HealthAssessmentPage.Init(currentconsult)
               page.tag = "HealthAssessment"
               page.Title = "HealthAssessment"
               WorkspaceEditor.Add(page)
               retform = HealthAssessmentPage
               EditorPages.Add(HealthAssessmentPage, "HealthAssessment")
            Case "Mental Health"
               page = New FLinkContainer
               MentalHealthPage = New FMentalHealth(page.VBoxEditor)
               ' MentalHealthPage.Init(currentconsult)
               MentalHealthPage.Init(currentconsult)
               page.tag = "Mental Health"
               page.Title = "Mental Health"
               WorkspaceEditor.Add(page)
               retform = MentalHealthPage
               EditorPages.Add(MentalHealthPage, "Mental Health")
               ' Control_For_Focus = MentalHealthPage.WebView1
            Case "Allergies"
               page = New FLinkContainer
               AllergyPage = New FAllergy(page.VBoxEditor)
               ' AllergyPage.Init(currentconsult)
               AllergyPage.Init(currentconsult)
               page.tag = "Allergies"
               page.Title = "Allergies & Sensitivities"
               WorkspaceEditor.Add(page)
               retform = AllergyPage
               EditorPages.Add(AllergyPage, "Allergies & Sensitivities")
               ' Control_For_Focus = AllergyPage.tbNewAllergy
            Case "webpage"
               page = New FLinkContainer
               '  Page.tag = txtURL.text
               WebPage = New FBrowser(page.VBoxEditor)
               WebPage.Expand = True
               WorkspaceEditor.Add(page)
               page.Title = "Web"
               retform = WebPage
               WebPage.Visible = True 'make it visible, default is not visible, trigger form_load
               WebPage.txtURL.text = page_data
               WebPage.btnGo.Value = True
            Case "Pregnancy"
               ' Message.Info("Please do not use this section it will crash, you can take a peek if you want at the screens")
               page = New FLinkContainer
               With PregnancyPage = New FPregnancy(page.VBoxEditor)
                  .Init(currentconsult)
               End With
               retform = PregnancyPage
               page.tag = "Pregnancy"
               page.title = "Pregnancy"
               WorkspaceEditor.Add(page)
               EditorPages.Add(PregnancyPage, "Pregnancy")
            Case "Referrals"
               page = New FLinkContainer
               ReferralPage = New FReferrals(page.VBoxEditor)
               ReferralPage.Init(currentconsult)
               page.Tag = "Referrals"
               page.Title = "Referrals"
               WorkspaceEditor.Add(page)
               retform = ReferralPage
               EditorPages.Add(ReferralPage, "Referrals")
               Control_For_Focus = ReferralPage.txtName
            Case "Scripts"
               'First make sure they have prescriber/provider number
               If IsNull(modDBConnect.currentUser!prescriber_number) Or IsNull(modDBConnect.currentUser!provider_number) Then
                  Message.Title = "Invalid Prescriber Detected"
                  sMsg = "Mmmmm...looks like you are attempting to write prescriptions without being a valid prescriber.\n\n\""
                  "Your activity And ID will be reported To the SysAdmin, in fact, if you are paranoid, it could be that the built in web-cam in this computer has already "
                  "mailed your photo to the relevant authorities!\n\n\""
                  "Should you think this is an error your SysAdmin can rectify this by entering valid details."
                  Message.Warning(sMsg, "Ok")
                  Return
               Endif
               page = New FLinkContainer
               PrescriptionPage = New FPrescriptions(page.VBoxEditor)
               PrescriptionPage.set_embedded("FClinical")
               PrescriptionPage.Init(currentconsult)
               page.tag = "Scripts"
               page.Title = "Scripts"
               retform = PrescriptionPage
               WorkspaceEditor.Add(page)
               EditorPages.Add(PrescriptionPage, "Scripts")
               PrescriptionPage.bexit = True
               PrescriptionPage.BExit = False
            Case "Family History"
               page = New FLinkContainer
               FamilyHistoryPage = New FFamilyHistory(page.VBoxEditor)
               FamilyHistoryPage.Init(currentconsult)
               page.tag = "Family History"
               page.Title = "Family History"
               WorkspaceEditor.Add(page)
               retform = FamilyHistoryPage
               EditorPages.Add(FamilyHistoryPage, "Family History")
            Case "Psycho-Social History"
               page = New FLinkContainer
               PsychoSocialHistory = New FPsychoSocialHistory(page.VBoxEditor)
               PsychoSocialHistory.Init(currentconsult)
               page.tag = "Psycho-Social History"
               page.Title = "Psyscho-Social History"
               WorkspaceEditor.Add(page)
               retform = PsychoSocialHistory
               EditorPages.Add(PsychoSocialHistory, "Psycho-Social History")
               Control_For_Focus = PsychoSocialHistory.teSocialHistory
            Case "Health Issues"
               If Editor_PageExists("Care Planning", "") Then  'First check that this is not open on the care planning tab
                  GP_Management_Plans.TabStrip1.index = 0       'If does > switch to that instance
                  Return                                        'and exit
               Endif
               page = New FLinkContainer
               PastHistoryPage = New FPastHistory(page.VBoxEditor)
               PastHistoryPage.Init(currentconsult)
               page.tag = "Health Issues"
               page.Title = "Health Issues"
               WorkspaceEditor.Add(page)
               retform = PastHistoryPage
               EditorPages.Add(PastHistoryPage, "Health Issues")
               Control_For_Focus = PastHistoryPage.txtCondition
            Case "Vaccinations"
               page = New FLinkContainer
               VaccinationPage = New FVaccinations(page.VBoxEditor)
               page.tag = "Vaccinations"
               page.Title = "Vaccinations"
               WorkspaceEditor.Add(page)
               retform = VaccinationPage
               VaccinationPage.Init(currentconsult)
               EditorPages.Add(VaccinationPage, "Vaccinations")
            Case "Workcover"
               page = New FLinkContainer
               workcoverNSWPage = New FWorkcoverNSW(page.VBoxEditor)
               page.tag = "Workcover"
               page.Title = "Workcover"
               WorkspaceEditor.Add(page)
               retform = workcoverNSWPage
               workcoverNSWPage.Init(currentconsult)
               EditorPages.Add(WorkcoverNSWPage, "Workcover")
               Control_For_Focus = workcoverNSWPage.lvwClaims
            Case "Requests"
               '------------------------------------------------------------------------
               'Create an  editor page with embedded request form and space for
               'some progress notes underneath
               'Note:   A patient as none or many previously ordered request forms
               '`       i.e currentconsult!RequestForms collection
               '        A consultation has none or many RequestForms ordered just
               '        this consultation
               '        currently this is pointed to by currentconsult.RequestForms
               '------------------------------------------------------------------------
               page = New FLinkContainer
               RequestPage = New FRequests(page.VBoxEditor)
               WorkspaceEditor.Add(page)
               RequestPage.Init(currentconsult)
               page.tag = "Requests"
               page.title = "Requests"
               retform = RequestPage
               EditorPages.Add(RequestPage, "Requests")
               Control_For_Focus = RequestPage.txtFindRequest
            Case "Measurements"
               Return 'nothing done yet
            Case "Recalls"
               page = New FLinkContainer
               RecallPage = New FRecalls(page.VBoxEditor)  'add a recalls page
               WorkspaceEditor.Add(page)
               RecallPage.Init(currentconsult)
               page.tag = "Recalls"
               page.Title = "Recalls"
               retform = RecallPage
               EditorPages.Add(RecallPage, "Recalls")
               Control_For_Focus = RecallPage.txtRecallFor
            Case "Skin Excision"
               modUtilGUI.NotImplemented("Skin Excision Module")
               Return
               page = New FLinkContainer
               ExcisionPage = New FProcedures(page.VBoxEditor)
               WorkspaceEditor.Add(page)
               page.Title = "Skin Excision"
               page.Tag = "Skin Excision"
               ExcisionPage.Init(currentconsult)
               retform = ExcisionPage
               EditorPages.Add(ExcisionPage, "Skin Excision")
               Control_For_Focus = ExcisionPage.cmbExcisionTypes
         End Select
      End If
   End If   
   Return retform
   
End

Function Editor_PageExists(pagetitle As String, page_tag As String) As Boolean
   'Returns true if a page is in the workspace
   
   Dim page As FLinkContainer
   
   For Each page In WorkspaceEditor.Windows
      If Page.tag = pagetitle Or page.tag = page_tag Then
         Return True
      End If
   Next
   Return False
   
End

Function Editor_SetActivePage(pagetitle As String, page_tag As String) As Boolean
   '---------------------------------------------------------------
   'PURPOSE: If a page is already opened, the switch to that page
   'EXPECTS: title of a page as a string
   'RETURNS: boolean flag TRUE if page found, FALSE = not yet added
   'for historical reasons which which will make no sens the
   'FProgressNotePageContainer is only a Vbox. FIXME
   '----------------------------------------------------------------
   
   Dim page As FLinkContainer
   
   If bediting Then Return    'force a reload of general notes even if tab is open
   For Each page In WorkspaceEditor.Windows
      If Page.tag = pagetitle Or page.tag = page_tag Then
         WorkspaceEditor.ActiveWindow = page
         lblSection.text = pagetitle
         Return True
      End If
   Next
   Return False
   
End

Public Sub Editor_PastHistory_ProgressNotePage(phx As Collection)
   '--------------------------------------------------------------------------------------------------------
   ' Adds a progress note page to the workspace editor
   '
   ' Note that  any text in the editor is linked to the coding for that problem e.g Hypertension.
   ' Note these pages are held in the EditorPages collection, the pk_pasthistory key is the tag for the page
   '--------------------------------------------------------------------------------------------------------
   
   Dim page As FLinkContainer
   Dim ProgressNotesPage As FProgressNotePage
   
   Return 
   vBoxWorkSpace.Visible = True
   If Not Editor_SetActivePage(phx!description, phx!pk_pasthistory)
      page = New FLinkContainer
      page.tag = phx!pk_pasthistory
      page.text = phx!description & " (NEW NOTES)"
      ProgressNotesPage = New FProgressNotePage(page.VBoxEditor)
      ProgressNotesPage.lblNotesFor.text = phx!description & " noted at " & phx!age_onset & "yrs"
      ProgressNotesPage.tag = phx!pk_pasthistory
      '-----------------------------------------------------------------
      ' Initialises the page, sets the pk_pasthistory on the editor page
      ' .Init() does things including load any existing progress notes
      ' for this problem.
      '-----------------------------------------------------------------
      ProgressNotesPage.set_fk_section(Const.cSection_PastHistory)
      ProgressNotesPage.set_pk_pasthistory(phx!pk_pasthistory)
      ProgressNotesPage.Init(currentconsult)
      EditorPages.Add(ProgressNotesPage, phx!pk_pasthistory)
      WorkspaceEditor.Add(page)
   End If
   
End

Public Sub PastHistory_Delete()
   '------------------------------------------------------------------------------
   'Deletes the past history item, enforces an audit trail and refreshes the lists
   'the notes are kept in the system, just visible now as struck-through with
   'an audit note written underneath
   '------------------------------------------------------------------------------
   
   Dim sMsg As String
   
   Message.Title = "Delete Health Issue Item"
   sMsg = "You have chosen to delete a Health Issue.\n\n"
   "Note that any actual progress notes associated with this health issue will not be visually removed from the progress notes "
   "but will be 'struck through' and accompanied by an audit-trail annotation of who deleted this information and why.\n\n"
   "Do you want to continue"
   If Message.Question(sMsg, "Yes", "No") = 2 Then Return
   modDBConnect.BeginTrans()
   modPastHistoryDBI.HealthIssue_Delete(currentconsult, currentPastHistory!pk_pasthistory, currentPastHistory)
   modDBConnect.CommitTrans()
   pasthistory_refresh_lists()
   Try FPastHistory.Reload_Lists()
   
End

Public Sub TabStrip_Lists_MouseUp()
   '----------------------------------------------------------------
   'User has clicked on the tab control which contains all the lists
   'ie prescriptions, recalls, letter, etc.
   'Note that some of the tabs contain **TWO**   lists which we want
   'to toggle eg letters sent, letters received, or requests written
   'results received.
   '
   'There are two lists on many tabstrips. If the tab has already
   'been clicked on, then click won't work, so need the mouse up
   '---------------------------------------------------------------
   
   If IsNull(currentconsult) Then Return
   If FMetaData.Visible = True Then
      UnFiled_Document_Metadata_Show(False)
   Endif
   
   Select Case TabStrip_Lists.Index
      Case clistMeasurements
         '  currentconsult.Refresh("measurements_available")
         cvwMeasurementFavorites.MoveFirst()
         cvwMeasurementFavorites.Item.Selected = True
         Measurement_Show_Data_List(const.Measurement_Types[cvwMeasurementFavorites.item.key])
      Case cListCertificates  'if tab clicked default to shown medical certificates
         rbMedicalCertificate.value = True
         iCertificatetype = const.certificate_type_medical
         Certificates_Refresh()
   End Select
   
End

Public Sub Certificates_Medical_Refresh()
   
   Dim x As Integer
   Dim sMsg As String
   Dim cert As Collection
   
   If IsNull(currentconsult) Then Return
   With cvwCertificates
      .Clear()
      .Columns.count = 4
      .Columns[0].width = 60
   End With
   lblCertificateType.text = "Medical Certificates"
   currentconsult.Refresh("medical_certificates")
   cvwCertificates.Clear()
   For Each cert In currentconsult!medical_certificates
      x = cert!pk_medicalcertificate
      cvwCertificates.Add(x, 0)
      cvwCertificates[x][0] = Format(cert!certificate_date, "dd/mm/yyyy")
      cvwCertificates[x][1] = cert!reason
      Select Case cert!fk_lu_illness_temporality
         Case 1
            sMsg = "Is "
         Case 2
            sMsg = "Was "
            
         Case 3
            sMsg = "Will be "
            
      End Select
      Select Case cert!fk_lu_fitness
         Case 1
            sMsg &= "Fit "
         Case 2
            sMsg &= "Unfit"
      End Select
      sMsg &= " from " & Format(cert!from_date, "dd/mm/yyyy")
      If cert!to_date Then
         sMsg &= " to " & Format(cert!to_date, "dd/mm/yyyy")
      Endif
      cvwCertificates[x][2] = sMsg
      cvwCertificates[x][3] = cert!staff_wholename
   Next
   
End

Public Sub Certificates_Refresh()
   '--------------------------------------------------------------
   'Refreshes the certificate list according to the option buttons
   'medical (sick sheets) workcover or government (e.g centrelink)
   'fixme: centre link not done
   '---------------------------------------------------------------
   
   Select Case iCertificatetype
      Case const.certificate_type_medical
         Certificates_Medical_Refresh()
      Case const.certificate_type_workcover
         Workcover_Certificates_Refresh()
      Case const.certificate_type_government
   End Select
   
End

Public Sub Workcover_Certificates_Refresh()
   
   Dim cert As Collection
   Dim x As Integer
   
   If IsNull(currentconsult) Then Return
   With cvwCertificates
      .Clear()
      .Columns.count = 2
      .Columns[0].width = 60
   End With
   lblCertificateType.text = "Workcover Certificates"
   currentconsult.Refresh("workcover_claims")
   For Each cert In currentconsult!workcover_claims
      x = cert!pk_view
      cvwCertificates.Add(x, 0)
      cvwCertificates[x][0] = Format(cert!visit_date, "dd/mm/yyyy")
      cvwCertificates[x][1] = cert!identifier
   Next
   
End

Public Sub cvwLettersReceived_Refresh(Optional bRefresh As Boolean = False)
   '------------------------------------------------------------------------------
   'Show all letters in the inbox, if bRefresh is true then reload them all
   'If appropriate, filter display according to the document tag or letter author
   'IAN FIXME: REPLACE ME WITH A RELATIVE ONE-LINER.
   '-----------------------------------------------------------------------------
   
   Dim x As Integer                      'for readability = key
   Dim letters_received As Collection
   Dim bSkip As Boolean
   Dim col_widths As New Integer[3]
   
   If IsNull(currentconsult) Then Return
   With cvwLettersReceived                       '3 columns FIXME MAKE ME CONIGURABEL
      .Clear()
      .Columns.count = 3
   End With
   '--------------------------------------------------------------
   'Loop through the collection, the key of the columnview becomes
   'the primary key of clin_requests.inbox_general
   'When documents have been filed - user could have inadvertantly
   'pasted in an invisible CR \n line, which causes the list to
   'span muliple lines, so fix this
   '--------------------------------------------------------------
   If bRefresh Then currentconsult.Refresh("letters_received")
   For Each letters_received In currentconsult!letters_received
      bSkip = False
      x = letters_received!pk_document
      '---------------------------------------
      'Does the user want to filter on author?
      '---------------------------------------
      If txtLetterFilterAuthor.text <> "" Then  'Or txtDocumentFilterTag.text <> "" Then
         '---------------------------------------------------------------------------------------------
         ' Yes: User wants to filter by author, if what they are looking for not found, skip the record
         '---------------------------------------------------------------------------------------------
         If Not InStr(Lower(letters_received!originator), Trim(Lower(txtLetterFilterAuthor.text))) Then
            bskip = True
         Else
            '---------------------------------------------------------------------
            'Have found the author bit, now do they want a particular tag as well?
            '---------------------------------------------------------------------
            If txtLetterFilterTag.text <> "" Then
               If Not InStr(Lower(letters_received!tag_user), Trim(Lower(txtLetterFilterTag.text))) Then
                  bskip = True
               Else
                  bskip = False
               End If
            Else
               bskip = False
            Endif
            
         End If
      Else
         '------------------------------------------------------------------
         'User dosn't want to filter on author - how about just on user tag?
         '------------------------------------------------------------------
         If txtLetterFilterTag.text <> "" Then
            If letters_received!tag_user = "" Then
               If Not InStr(Lower("unfiled"), Trim(Lower(txtLetterFilterTag.text))) Then
                  bskip = True
               Else
                  bskip = False
               End If
            Else
               If Not InStr(Lower(letters_received!tag_user), Trim(Lower(txtLetterFilterTag.text))) Then
                  bskip = True
               Else
                  bskip = False
               End If
            End If
         Endif
      End If
      
      If bskip = False Then
         cvwLettersReceived.Add(x, 0)
         If IsNull(letters_received!date_created) Then   'fixme remove me when bug fixed in FMetadata
            cvwLettersReceived[x][0] = "?date"
         Else
            cvwLettersReceived[x][0] = Format(letters_received!date_created, "dd/mm/yyyy")
         End If
         lblmeasure.text = cvwLettersReceived[x][0] & " "
         col_widths[0] = lblmeasure.Width
         If letters_received!tag_user = "" Then
            cvwLettersReceived[x][1] = "** UNFILED LETTER **"
         Else
            cvwLettersReceived[x][1] = Replace$(letters_received!tag_user, "\n", "")
         End If
         lblmeasure.text = cvwLettersReceived[x][1]
         col_widths[1] = Max(lblmeasure.Width, col_widths[1])
         cvwLettersReceived[x][2] = letters_received!originator
      End If
   Next
   cvwLettersReceived.Columns[0].Width = col_widths[0]
   cvwLettersReceived.Columns[1].Width = col_widths[1]
   
End

Public Sub ProgressNotesMenu_Refresh()
   '------------------------------------------------------------------
   'Refreshes the progress notes menu on the main toolbar
   'Clears all existing entries as user could have added new problems
   'rebuilds the menu with menu's for
   '*show all notes
   '*general notes
   '*major problems as submenu
   '*significant active problems as submenu
   '*inactive problems as submenu
   '-------------------------------------------------------------------
   
   Dim mnu As Menu
   Dim mnu_major As Menu
   Dim mnu_active As Menu
   Dim mnu_inactive As Menu
   Dim PastHistoryCondition As Collection
   Dim bNeedSeparator As Boolean = True
   Dim bNoMainMenu As Boolean = True
   
   If Not currentconsult Then Return
   '----------------------------------------------------------------
   'Clear menu, even if exit this sub, don't want the last patient's
   'menu items on the list
   '----------------------------------------------------------------
   popupMenuProgressNotes.Children.Clear()
   '-----------------------------------------------------------
   'Clear all children from the popup menu then add two entries
   'one for general notes, one for show all notes
   '-----------------------------------------------------------
   
   mnu = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
   mnu.name = "Show All Notes"
   mnu.caption = "Show All Notes"
   mnu.tag = "show all notes"
   mnu = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
   mnu.name = "General Notes"
   mnu.caption = "General Notes"
   mnu.tag = "general notes"
   If currentconsult!past_history.count = 0 Then Return
   '---------------------------------------------------------
   'Next add all the major conditions followed by a separator
   '---------------------------------------------------------
   currentconsult.Refresh("past_history")
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!major Then
         If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_1"
            mnu.caption = ""
            bNeedSeparator = False
         End If
         If bNoMainMenu Then
            mnu_major = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_major.name = "popupMenuProgressNotes_Major"
            mnu_major.caption = "Major Health Issues"
            mnu_major.tag = "major"
            bNoMainMenu = False
         End If
         
         mnu = New Menu(mnu_major) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next
   
   bNeedSeparator = True
   bNoMainMenu = True
   '---------------------------------------------------------------
   'Next add all the significant conditions followed by a separator
   '---------------------------------------------------------------
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!active = True Then
         If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_2"
            mnu.caption = ""
            bNeedSeparator = False
         End If
         If bNoMainMenu Then
            mnu_active = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_active.name = "popupMenuProgressNotes_Significant"
            mnu_active.caption = "Significant Issues"
            mnu_active.tag = "significant"
            bNoMainMenu = False
         End If
         mnu = New Menu(mnu_active) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next
   bNeedSeparator = True
   bNoMainMenu = True
   '--------------------------------------------------------------
   'Lastly add all the inactive conditions followed by a separator
   '--------------------------------------------------------------
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!active = False And PastHistoryCondition!major = False
         If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_3"
            mnu.caption = ""
            bNeedSeparator = False
         End If
         If bNoMainMenu Then
            mnu_inactive = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_inactive.name = "popupMenuProgressNotes_Significant"
            mnu_inactive.caption = "Inactive Issues"
            mnu_inactive.tag = "inactive"
            bNoMainMenu = False
         End If
         mnu = New Menu(mnu_inactive) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next
   
End

Public Sub popupMenuProgressNotes_Click()
   '----------------------------------------------------------------------------
   'Show either all notes, general notes only, or those for a health issue alone
   '----------------------------------------------------------------------------
   
   Dim fk_section As Integer
   Dim shtml As String
   Dim page_heading As String
   
   If Not currentconsult Then Return
   Select Case Last.tag
      Case "show all notes"
         Editor_ShowPage("All Previous Notes")
         Return
      Case "general notes"
         fk_section = const.cSection_GeneralNotes
         page_heading = "GENERAL NOTES"
         shtml = modProgressNotes.ConstructHTML_SingleProblem(currentconsult, 0, fk_section)
      Case Else
         fk_section = const.cSection_PastHistory
         shtml = modProgressNotes.ConstructHTML_SingleProblem(currentconsult, Last.tag, fk_section)
         page_heading = UCase(currentconsult!past_history[Last.tag]!description)
   End Select
   
End

Public Sub Pasthistory_Refresh_Lists()
   '------------------------------------------------------------
   'refreshes the cvwProblemsSignificant and cvwProblemsInactive lists
   'the collection members are referenced by the pk_past history
   'which is kept as the key of the list
   '------------------------------------------------------------
   
   Dim PastHistoryCondition As Collection
   Dim sLaterality As String
   Dim col_widths As Integer[]
   
   lblMeasure.font = cvwProblemsMajor.Font
   currentconsult.Refresh("past_history")
   ProgressNotesMenu_Refresh
   cvwProblemsMajor.columns.Count = 2
   cvwProblemsSignificant.columns.Count = 2 '0 = date problem noted, 1 = empty as spacer, 2 = the description
   cvwProblemsInActive.columns.Count = 2
   cvwProblemsInActive.Clear()
   cvwProblemsMajor.Clear()
   cvwProblemsSignificant.Clear()
   col_widths = New Integer[3]
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!major Then
         CurrentPastHistoryList = cvwProblemsMajor
      Else If PastHistoryCondition!active Then
         CurrentPastHistoryList = cvwProblemsSignificant
      Else
         CurrentPastHistoryList = cvwProblemsInActive
      End If
      CurrentPastHistoryList.Add(PastHistoryCondition!pk_pasthistory, 0)
      CurrentPastHistoryList[PastHistoryCondition!pk_pasthistory][0] = PastHistoryCondition!year_onset
      lblMeasure.text = PastHistoryCondition!year_onset
      col_widths[0] = lblMeasure.Width
      Select Case PastHistoryCondition!fk_laterality
         Case const.LateralityBoth
            sLaterality = "(Bilateral)"
         Case const.LateralityLeft
            sLaterality = "(Left)"
         Case const.LateralityRight
            sLaterality = "(Right)"
         Case const.LateralityNone
            sLaterality = ""
      End Select
      CurrentPastHistoryList[PastHistoryCondition!pk_pasthistory][1] = PastHistoryCondition!description & " " & sLaterality
   Next
   cvwProblemsMajor.Columns[0].width = col_widths[0]
   TabStripProblemLists.index = 1
   TabStripProblemLists.Caption = "Inactive Health Issues (" & Str(cvwProblemsInActive.count) & ")"
   TabStripProblemLists.index = 0
   TabStripProblemLists.Caption = "Active Health Issues (" & Str(cvwProblemsMajor.count + cvwProblemsSignificant.count) & ")"
   
End Sub

Public Sub WebCam_Get_Picture()
   
   Dim Container As FLinkContainer
   Dim hCtrl As Control
   Dim frmConsult As FProgressNotePage
   Dim Page As FLinkContainer
   
   For Each page In WorkspaceEditor.Windows
      If Page = WorkspaceEditor.ActiveWindow Then
         Container = page
         For Each hctrl In page.VBoxEditor.Children
            If hctrl Is FProgressNotePage Then
               frmConsult = hctrl
               frmConsult.Notes_Editor.teNotes.text &= ".pic"
               If FWebCam.ShowModal() Then
                  frmConsult.Notes_Editor.Insert_picture1("clipboard")
               Else
                  frmConsult.Notes_Editor.teNotes.text = Replace(frmConsult.Notes_Editor.teNotes.text, ".pic", "")
               End If
               Return
            End If
         Next
      End If
   Next
   
End

Public Function Consult_Time_Check_Valid() As Boolean
   '-----------------------------------------------------------------------------------------------
   'inserted because if creating a new consult in the past user may have forgotten the consult time
   '-----------------------------------------------------------------------------------------------   
   
   If Right(Format(datebox1.Value, "dd/mm/yyyy hh:nn"), 5) = "00:00" Then
      Message.Warning("Please ensure the consultation time exists before saving any cinical information")
      Return 
   Endif
   Return True
   
End

Public Sub MainToolbar_Click()
   
   Dim Vb As VBox
   Dim Page As FLinkContainer
   Dim form_About As FAbout
   Dim i As Object
   
   If Not currentconsult Then Return
   Select Case Last.tag
      Case "New_Entry", "Preview", "Refresh", "Edit", "Save", "Decision_Support"
         '---------------------------------------------------------------------------------------------------
         'These buttons are designed to operate on any tab in the editor with appropriately named subroutines
         'eg in Referrals "Save" will save the referral etc. If the form on the tab dosn't have a sub-routine
         'like these names it simply trips out
         'Edit only applies to forms without an editing area.
         '---------------------------------------------------------------------------------------------------
         If Consult_Time_Check_Valid() = False Then Return
         Inc Application.Busy
         For Each page In WorkspaceEditor.Windows
            If page = WorkspaceEditor.ActiveWindow Then
               Try Object.Call(page.VBoxEditor.Children[0], Last.tag)
            End If
         Next
         Dec application.Busy
      Case "New General Notes", "Demographics", "Edit Last Consult"
         Editor_ShowPage(Last.tag)
      Case "tex summary"
         Health_Summary_Display
      Case "health summary", "GPMP"
         Health_Summary_Display
      Case "export pdf"
         Export_Records()
      Case "zoom_in", "zoom_out"
         Zoom(Last.tag)
      Case "print_content"
         'The tag of the button = the name of the subroutine in the object
         'note we can't user "Print" as this is a gambas word and it gets confused.
         VB = WorkspaceEditor.ActiveWindow.Children[0]   'this is VBox containing the form
         i = VB.Children[0]
         Object.Call(i, Last.tag)
         
      Case "general notes"
         '--------------------------------------------------------
         'If all tabs are closed, allow getting back general notes
         '--------------------------------------------------------
         If currentconsult Then
            Editor_ShowPage("New General Notes")
         End If
      Case "about"
         form_About = New FAbout
         form_About.ShowModal()
      Case "all previous notes"
         Editor_ShowPage("All Previous Notes")
      Case "help"
         
   End Select
Catch
   Application.busy = 0   
   modUtilGUI.ReportError(Error.Text, Error.Backtrace)
   
End

Public Sub Zoom(zoom As String)
   '------------------------------------------------------------------------------
   'Called by either the Form key press event to emulated eg Firefox Ctrl+/- Zoom
   'or the zoom buttons on the main toolbar MainToolbar_click()
   '------------------------------------------------------------------------------
   
   Dim Vb As VBox
   Dim i As Object
   
   VB = WorkspaceEditor.ActiveWindow.Children[0]   'this is VBox containing the form
   i = VB.Children[0]
   
   Try Object.Call(i, zoom)
Catch
   Return
   
End

Public Sub Export_Records()
   '------------------------------------------------------
   'Allow user to export as little or as much as they want
   '------------------------------------------------------
   
   WorkspaceEditor.Visible = False
   Editor_ShowPage("Export File")
   
   Return
   With Form_ExportClinical
      .Init(currentconsult)
      .Form_PDF.BtOpen.Visible = False
      .Visible = True
      .Raise
   End With
   
End

Public Sub Form_KeyPress()
   
   Dim CtrlDown As Boolean
   Dim FnDown As Boolean
   Dim ShiftDown As Boolean
   Dim AltDown As Boolean
   
   Select Case Key.Code
      Case key.F12
         Consult_Save()
   End Select
   Try CtrlDown = Key.Control
   Try AltDown = Key.Alt
   If CtrlDown Then
      Select Case Key.code
         Case Asc("=")
            Zoom("zoom_in")
         Case Asc("-")
            Zoom("zoom_out")
      End Select
   End If
   If AltDown Then
      Select Case Key.Code
            
         Case Asc("C")
            '    Editor_ShowPage("Care Planning")
         Case Asc("D")
            Editor_ShowPage("Diabetes Cycle of Care")
         Case Asc("F")
            Editor_ShowPage("Family History")
         Case Asc("A")
            Editor_ShowPage("Allergies")
         Case Asc("T")
            Editor_ShowPage("Travel")
         Case Asc("S")
            Editor_ShowPage("Scripts")
         Case Asc("H")
            Editor_ShowPage("Past History")
         Case Asc("R")
            Editor_ShowPage("Recalls")
         Case Asc("O")
            Editor_ShowPage("Occupational History")
         Case Asc("L") 'is for 'letter writer..
            Editor_ShowPage("Referrals")
         Case Asc("W")
            Editor_ShowPage("Workcover")
         Case Asc("M")
            Editor_ShowPage("Mental Health Plan")
         Case Asc("I")
            Editor_ShowPage("Vaccinations")
         Case Asc("P")
            Editor_ShowPage("Psycho-Social History")
      End Select
   End If
   
End

Public Sub Notifications_Refresh()
   '---------------------------------------------------
   'Refreshes outstanding notifications for the patient
   '---------------------------------------------------
   
   currentconsult.Refresh("patient_tasks_outstanding")
   If currentconsult!patient_tasks_outstanding.count Then  'To get the users attention hightlight these
     ' Vbox_Notifications.Background = Color.red
      tlNotifications.Text = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=2>"
      "<COL WIDTH=256*>"
      "<TR>"
      "<TD WIDTH=100% VALIGN=TOP>"
      tlNotifications.Text &= "<B>"
      If currentconsult!patient_tasks_outstanding.count = 1 Then
         tlNotifications.Text &= "1 task needs attention</B>"
      Else
         tlNotifications.Text &= Str(currentconsult!patient_tasks_outstanding.count) & " tasks need attention</B>"
      Endif
      tlNotifications.Text &= "</TD></TR></TABLE>"
   Else
      tlNotifications.Text = ""
     ' Vbox_Notifications.Background = VBox_Notifications.Parent.Background
   Endif
  ' Vbox_Notifications.height = tlNotifications.height + Vbox_Notifications.padding * 2
   
End

Public Sub cvwWorkcover_DblClick()
   
   If Not currentconsult Then Return
   Editor_ShowPage("Workcover")
   
End

Public Sub TabbedLists_LostFocus()
   
   Select Case Last.tag
      Case "requests"
         If Last.Header = True Then
            Last.header = False
         End If
         
   End Select
   
End

Public Sub TabbedLists_Fonts_Select(cvw As Columnview)
   
   If Dialog.SelectFont() Then Return
   
   cvw.Font = Dialog.Font
   
End

Public Sub TabbedLists_Menu()
   
   Dim medication As Collection
   Dim mnu As Menu
   Dim deleted_med As Collection 
   
   If Not currentconsult Then Return
   Last.MoveCurrent()
   Select Case Last.tag
         
      Case "requests"
         If cvwrequests.count Then mnuTabbedListRequest.popup()
      Case "measurement values"
         If cvwMeasurementValues.count Then
            mnuMeasurements.popup()
         Endif
      Case "certificates"
         If cvwCertificates.count Then mnuCertificates.popup()
   End Select
Catch
   Return 
   
End

Public Sub mnuResultsReceived_ShowGraphable()
   '----------------------------------------------------------
   'User has clicked on the popup menu for results
   'Get all measurements available for this result or results
   'Load them onto the graphable menu
   'or disable this option if nothing is graphable
   '----------------------------------------------------------
   
   Dim graphable_item As Collection
   Dim graphable_items As Collection
   Dim mnu As Menu
   
   mnuResultsReceived_Graphable.Children.Clear()
   graphable_items = modMeasurementsDBI.Get_Graphable(currentconsult!results_received[cvwResultsReceived_Key]!pk_document)
   If graphable_items.count = 0 Then
      mnuResultsReceived_Graphable.Enabled = False
      Return
   Else
      mnuResultsReceived_Graphable.Enabled = True
   End If
   For Each graphable_item In graphable_items
      mnu = New Menu(mnuResultsReceived_Graphable) As "mnuResultGraphable"
      mnu.name = graphable_item!identifier
      mnu.caption = graphable_item!identifier
      mnu.tag = graphable_item!loinc
   Next
Catch
   Return 
   
End

Public Sub mnuResultsReceived_Click()
   '--------------------------------------------------------
   'User has clicked on the menu over result's received
   'Note that graph items, which are added 'on the fly' are
   'handled with mnuResultGraphable_Click()
   '--------------------------------------------------------
   
   Dim D As Collection
   Dim x As Integer
   Dim pdfs_to_merge As Collection
   Dim TabulatedResults As CTabResults
   Dim audit_notes As String
   
   Select Case Last.tag
      Case "external viewer" 'if possible
         modutil.Show_in_external_pdf_viewer(modFiles("document_archiving_directory", currentconsult!results_received[cvwResults.Selection[x]]!source_file))
      Case "transfer to pdfs to join list"
         '-----------------------------------------------------------------------------------------
         'joining pdf's difficult (not the actual joining)
         'eg.user could want to or be stupid enough to join disparate pdf's
         'so some decision needs to be made about the original collection's settings e.g originator
         'for the moment (experimental) the last document sent to the list (i.e this one) will
         'be attatched  as the tag of the lvFilesToJoin
         '------------------------------------------------------------------------------------------
         cvwResults.MoveFirst
         pdfs_to_merge = New Collection
         lvFilesToJoin.Clear()
         txtTagUser.text = ""
         For x = 0 To cvwResults.Selection.count - 1
            If Lower(File.Ext(currentconsult!results_received[cvwResults.Selection[x]]!source_file)) = "pdf" Then
               Try lvFilesToJoin.Add(cvwResults.Selection[x], currentconsult!results_received[cvwResults.Selection[x]]!source_file)
               If Not Error Then
                  pdfs_to_merge.Add(currentconsult!results_received[cvwResults.Selection[x]], pdfs_to_merge.count) 'needed to delete these later
               End If
            Else
               Message.info("Only pdf files can be joined together, sorry.....")
               cvwResults.UnselectAll()
               Return
            End If
         Next
         lvFilesToJoin.tag = pdfs_to_merge
         VBox_Files_To_Join.Visible = True
         Vbox_MiniGraphs.Visible = False
      Case "tabulated cumulative results"
         Message.Info("This module though written has serious inaccuracies and cannot be used till fixed - Hands up please??")
         Return   
         Message.Info("DANGER DANGER.\n\nI think this module is inaccurate and should not be used clinically until re-developed.")
         TabulatedResults = New CTabResults(currentconsult, currentconsult!results_received[cvwResultsReceived_Key]!tag_user, currentconsult!results_received[cvwResultsReceived_Key]!pk_document)
         Editor_ShowPage("browser", "Tabulated Results", TabulatedResults.Get_HTML())
      Case "fonts"
         modUtilGUI.Columnview_SetFont(cvwResults, "TabbedLists")
      Case "adjust columns"
         cvwResults.Header = True
         cvwResults.Resizable = True
      Case "edit metadata"
         If currentconsult!results_received[cvwResultsReceived_Key]!protected Then
            Message.Title = "Protected Document"
            Message.Info("You may not edit this document.\n\n When it was created it was marked as 'protected' by EasyGP.")
            Return
         Endif
         Document_Edit_Metadata(currentconsult!results_received, cvwResultsReceived_Key)
      Case "delete"                                              'deletes a document and enforces an audit trail
         If currentconsult!results_received[cvwResultsReceived_Key]!protected Then
            Message.Title = "Protected Document"
            Message.Info("You may not delete this document.\n\n When it was created it was marked as 'protected' by EasyGP.")
            Return
         Endif
         If modArchiveDocumentsDBI.Delete(currentconsult, currentconsult!results_received[cvwResultsReceived_Key], const.cSection_Documents, const.sAuditAction[const.cAuditAction_MarkDeleted]) Then
            modDBConnect.CommitTrans()
            Deleted_Documents.Add(currentconsult!results_received[cvwResultsReceived_Key], cvwResultsReceived_Key)            'keep for undelete
            cvwResults_Refresh(True)                                'refresh the collection and reshow the list
         Else
            modDBConnect.RollBack
         End If
      Case "delete duplicate"             'Delete the result, but don't enforce a reason
         If currentconsult!results_received[cvwResultsReceived_Key]!protected Then
            Message.Title = "Protected Document"
            Message.Info("You may not delete this document.\n\n When it was created it was marked as 'protected' by EasyGP.")
            Return
         Endif
         If modArchiveDocumentsDBI.Delete(currentconsult, currentconsult!results_received[cvwResultsReceived_Key], const.cSection_Documents, const.sAuditAction[const.cAuditAction_DeleteDuplicateDocument]) Then
            modDBConnect.CommitTrans()
            Deleted_Documents.Add(currentconsult!results_received[cvwResultsReceived_Key], cvwResultsReceived_Key)
            cvwResults_Refresh(True)
         Else
            modDBConnect.RollBack
         End If
      Case "delete preliminary result"
         If currentconsult!results_received[cvwResultsReceived_Key]!protected Then
            Message.Title = "Protected Document"
            Message.Info("You may not delete this document.\n\n When it was created it was marked as 'protected' by EasyGP.")
            Return
         Endif
         If modArchiveDocumentsDBI.Delete(currentconsult, currentconsult!results_received[cvwResultsReceived_Key], const.cSection_Documents, const.sAuditAction[const.cAuditAction_DeletePreliminaryResult]) Then  
            modDBConnect.CommitTrans()
            Deleted_Documents.Add(currentconsult!results_received[cvwResultsReceived_Key], cvwResultsReceived_Key)
            cvwResults_Refresh(True)
         Else
            modDBConnect.RollBack
         End If
      Case "undo delete"
         For Each D In Deleted_Documents
            If D!fk_lu_display_as = const.Document_Display_As_Result Then
               If modArchiveDocumentsDBI.UnDelete(currentconsult, d, const.cSection_Documents) Then
                  modDBConnect.CommitTrans()
                  Deleted_Documents.Remove(d!pk_document)
                  cvwResults_Refresh(True)
                  Break
               Endif
            Endif
         Next
      Case "do not show"
         'Enable user to permanantly remove from sight unwanted results eg INR's in patient no longer on coumadin.
      Case "refile document"
         If currentconsult!results_received[cvwResultsReceived_Key]!protected Then
            Message.Title = "Protected Document"
            Message.Info("You may not move this document.\n\n When it was created it was marked as 'protected' by EasyGP.")
            Return
         Endif
         If modArchiveDocumentsDBI.Document_SendBack_For_ReFiling(currentconsult, currentconsult!results_received[cvwResultsReceived_Key]) Then
            cvwResults_Refresh(True)
         Endif
      Case "display in new tab"
         Inbox_showResult(True)
      Case "display as letter"
         audit_notes = "Display mode changed from result to letter"
         If modArchiveDocumentsDBI.Change_Display_Mode(currentconsult, currentconsult!results_received[cvwResultsReceived_Key], const.Document_Display_As_Letter, const.cSection_Documents, audit_notes) Then
            cvwResults_Refresh(True)
            cvwLettersReceived_Refresh(True)
         Endif
      Case "audit trail"
         Document_AuditTrail_Show(cvwResultsReceived_Key)
      Case "print all"
         cvwResults.Selectall
         For x = 0 To cvwResults.Selection.count - 1
            Document_Print(cvwResults.Selection[x])
         Next
         cvwResults.UnselectAll
      Case "print selected"
         For x = 0 To cvwResults.Selection.count - 1
            Document_Print(cvwResults.Selection[x])
         Next
   End Select
Catch
   Return
   
End

Public Sub Document_AuditTrail_Show(fk_document As Integer)
   '---------------------------------------------------------
   'Display html of the audit trail of a document
   'At the moment - only displaying staff tasks if they exist
   '---------------------------------------------------------
   
   Dim sHtml As String
   
   sHtml = modArchiveDocumentsDBI.Audit_Trail_Show_Document_Details_Tasks_Attatched(fk_document)
   Print shtml
   shtml &= "<HTML><BODY><TABLE><BR><B>Document Actioning</B><BR>" & modHTML.HTML_Template_Audit_Row_Heading()
   shtml &= modAudit.MakeTrail("documents.documents", fk_document)
   shtml &= "</TABLE>"
   shtml &= "</BODY></HTML>"
   ' Editor_ShowPage("browser", "Audit Trail", sHtml)
   Editor_ShowPage("audit trail", "Audit Trail", sHtml)
   
End

Public Sub Document_Edit_Metadata(documents As Collection, document_key As Integer, Optional sHtml As String) ' As Integer, user_tag As String)
   '-----------------------------------------------
   'Edits the metadata of an existing document
   'If unfiled sHtml is not null
   'if the document is not showing, then display it
   'this has become a messy routine
   'fixme - in July 2014 I added fields to documents.documents
   ' - the field html ceased to exist all html  moved to:
   ' - data field which now contains also LaTex
   ' - to the nomenclature of this code is all mixed up
   '-----------------------------------------------
   
   With FMetaData
      .Init("Allocated Documents")                                      'gui elements for filing, not allocating like in scanning
      .Edit(documents[document_key])                                    'pass the document collection 
      .Set_consult(currentconsult)                                      'pass the currentconsult for auditing purposes
      .Set_Embedded_Form_Name("FClinical")                              'needed .Save() to trigger auditing
      .HBox_Save.visible = True                                         'contains the save button in the gui at base of FMetaData
      .hBox_Urgency.Visible = False                                     'not needed as already in the patients notes 
      If shtml <> "" Then
         .Document_HTML_Set(shtml)
      End If
      If Not IsNull(documents[document_key]!data) Then
         .Document_HTML_Set(documents[document_key]!data)
      Endif
      .txtUserObservationName.pos = 0
      .txtUserObservationName.SetFocus()
   End With
   UnFiled_Document_Metadata_Show(True)                                    'set up FClinical to show FMetadata
   
End

Public Sub Document_Print(fk_document As Integer)
   '--------------------------------------------------------------
   'Print a document by its key
   'All documents have a filename - but they are either PDF or HL7
   '--------------------------------------------------------------
   
   Dim Document As Collection
   '---------------------------------------------------
   'Is the document a result?, if not, must be a letter
   'i.e decide which collection to pull them from
   '---------------------------------------------------
   Try Document = currentconsult!results_received[fk_document]         '? a result??
   If IsNull(document) Then                                            'it wasn't a result?
      Try Document = currentconsult!letters_received[fk_document]      '? a letter ??
   End If
   '----------------------------------------------------------
   'Having got the document, print according to file extension
   'All our non scanned documents are html
   'FIXME: could be printing a picture
   '----------------------------------------------------------
   Select Case File.Ext(Document!source_file)
      Case "pdf"
         modPrinting.Print_PDF(modFiles.Get("document_archiving_directory", Document!source_file))
      Case "jpg", "png", "tiff", "jpeg", "bitmap"
         
      Case Else
         Select Case Document!fk_lu_data_content_type
            Case const.cData_Type_Latex 
               modPrinting.Print_latex(document!data)
            Case const.cData_Type_HTML
               modPrinting.PrintHtml(Document!data)
            Case Else
               Message.Info("Unknown document data type - please notify the developers")
         End Select
   End Select
   
End

Public Sub mnuResultGraphable_Click()
   
   Dim GraphableItem_Data As New Collection
   '-----------------------------------------------------------------
   'User has clicked on a graphable item on the results received list
   '-----------------------------------------------------------------
   Measurement_Graph(Last.tag, Last.caption)
   GraphableItem_Data!loinc = Last.tag
   GraphableItem_Data!name = Last.caption
   pbGraphName.tag = GraphableItem_Data
Catch
   Return
   
End

Public Sub mnuTabbedListReferral_Click()
   
   Dim inclusions As Collection
   Dim inclusion As Collection
   Dim referral As Collection
   
   cvwReferrals.MoveCurrent()
   referral = currentconsult!referrals_written[cvwReferrals.Item.key]  'do not remove this otherwise "edit" will not work and the columview resets to the wrong line and edits wrong letter
   Select Case Last.tag
      Case "edit"
         If referral!fk_consult <> currentconsult.GetPK() Then
            Editor_ShowPage("Referrals")
            FReferrals.Edit_As_New_Referral(referral)
         Endif
      Case "delete"
         If modReferralsDBI.Referral_Delete(currentconsult, currentconsult!referrals_written[cvwReferrals.Item.key]) Then
            Deleted_Referral = currentconsult!referrals_written[cvwReferrals.Item.key]
            Refresh_Section_Instance(const.cSection_Referrals)
            Try FReferrals.Refresh_Referrals_Written_Today() 'this will bomb if a null object.
         Endif
      Case "undo delete"
         Referral_UnDelete()
      Case "print no inclusions"         'single copy no included documents
         modArchiveDocumentsDBI.Re_Print_Letter(currentconsult!referrals_written[cvwReferrals.Item.key]!letter_html)
      Case "print with inclusions"      ' single copy including original documents sent.
         modArchiveDocumentsDBI.Re_Print_Letter(currentconsult!referrals_written[cvwReferrals.Item.key]!letter_html)
         Inclusions = modReferralsDBI.Inclusions_Get(currentconsult!patient!fk_patient, False, False, currentconsult!referrals_written[cvwReferrals.Item.key]!pk_referral) 'RT:08MAR13
         For Each Inclusion In Inclusions
            modArchiveDocumentsDBI.Document_Print(currentconsult, inclusion!fk_document) '
         Next
      Case "email"
         modUtilGUI.NotImplemented("Email Referral")
      Case "new tab"
         Referral_Letter_Display(True)
      Case "sort by letter tag"
         modUtilGUI.NotImplemented("Sorting by letter tag")
      Case "fonts"
         modUtilGUI.Columnview_SetFont(cvwReferrals, "TabbedLists")
      Case "help"
   End Select
Catch
   Return 
   
End

Public Sub Referral_Letter_Display(Optional bNewTab As Boolean = False)
   '------------------------------------------------------------------------
   ' Display a previously written referral or letter on new tab in workspace
   '------------------------------------------------------------------------
   
   Dim sTag As String
   Dim ref As Collection
   Dim sHtml As String
   Dim bIsLaTex As Boolean
   
   ref = currentconsult!referrals_written[cvwReferrals_key]
   If IsNull(ref) Then Return
   If ref!finalised = False Then
      stag = ref!tag & " (** UNFINISHED **)"
   Else
      sTag = ref!tag
   Endif
   sHtml = ref!letter_html
   If ref!letter_html Begins "\\documentclass" Then
      bIsLaTex = True
   Else
      sHtml = modConsultDBI.Images_Get(sHtml)
   Endif
   If bIsLaTex Then
      Editor_ShowPage("pdf file", sTag, modPrinting.Latex_To_PDF(sHtml))
   Else
      If bNewTab Then
         Editor_ShowPage("browser", sTag, sHtml)
      Else
         Editor_ShowPage("letters written", stag, shtml, "html")
      Endif
   Endif
   
End

Public Sub Referral_UnDelete()
   '----------------------------------------------------------
   'Single level un-delete of a the last deleted letter written
   'remove the audit notes and strike through of the text
   '-----------------------------------------------------------
   
   Dim sHtml As String
   Dim fk_progressnote As Integer
   Dim fk_referral As Integer
   Dim pn As Collection
   Dim charpos As Integer
   
   fk_progressnote = deleted_referral!fk_progressnote
   fk_referral = deleted_referral!pk_referral
   sHtml = deleted_referral!letter_html
   For Each PN In currentconsult!progress_notes
      If PN!pk_progressnote = fk_progressnote Then
         If PN!fk_consult = currentconsult.GetPK() Then           'undelete the progress note of the letter
            modDBConnect.update("clin_consult.progressnotes", Null, ["pk": fk_progressnote, "deleted": False])
         Else                                                     'more complex, remove the strikethrough
            charpos = InStr(pn!notes, "</TABLE>")
            pn!notes = Left(pn!notes, charpos + 7)
            pn!notes = Replace$(pn!notes, "BGCOLOR='#CFCFCF'", "")
            pn!notes = Replace$(pn!notes, "<strike>", "")
            pn!notes = Replace$(pn!notes, "</strike>", "")
            pn!notes = "<P>" & pn!notes & "</P>"
            modDBConnect.update("clin_consult.progressnotes", Null, ["pk": fk_progressnote, "notes": pn!notes])
         End If
         modDBConnect.update("clin_referrals.referrals", Null, ["pk": fk_referral, "deleted": False])
         'Mark the inclusions as un-deleted,
         ' could be inaccurate for example they may have marked one as deleted when letter written
         '  FIXME IN THIS CASE PERMANANTLY REMOVE FROM THE BACKEND IN FREFERRALS.DELETE ROUTINES
         modDBConnect.exec_query("update clin_referrals.inclusions set deleted = False WHERE fk_referral = " & fk_referral)
         modDBConnect.CommitTrans()
         Deleted_Referral = New Collection
         Refresh_AllPreviousNotes()
         Refresh_Section(const.cSection_Referrals)
         Try FReferrals.Refresh_Referrals_Written_Today()
         Break
      Endif
   Next
   
End

Public Sub Recalls_Audit_Trail(sAudit_action As String)
   '------------------------------------------------------------
   'Displays either history of current recall or all the recalls
   'according to the mnuTabbedListRecalls.tag property passed as
   'saudit_Action
   '------------------------------------------------------------
   
   Dim tempstring As String
   Dim recall As Collection
   
   Select Case sAudit_action
      Case "view recall history"
         tempstring = "<HTML><BODY><TABLE>" & modHTML.HTML_Template_Audit_Row_Heading()
         tempstring &= modAudit.MakeTrail("clin_recalls.recalls", currentrecall!pk_recall)
         tempstring &= "</TABLE>"
         tempstring &= "</BODY></HTML>"
         FClinical.WebBrowser_show(tempstring, "Recall Audit Trail for " & currentrecall!reason)
      Case "view audit trail"
         tempstring = "<HTML><BODY><TABLE>" & modHTML.HTML_Template_Audit_Row_Heading() & "</TABLE>"
         For Each recall In modRecallsDBI.get_logged(currentconsult!patient!fk_patient, False, True)
            tempstring &= "<TABLE>"
            tempstring &= modAudit.MakeTrail("clin_recalls.recalls", recall!pk_recall)
            tempstring &= "</TABLE><HR>"
         Next
         tempstring &= "</BODY></HTML>"
         FClinical.WebBrowser_show(tempstring, "Recall Audit Trail - all recalls - logged newest to oldest")
   End Select
   
End

Public Sub mnuTabbedListRecalls_click()
   '-----------------------------------------------------------------
   'User has clicked on the recalls list, execute the various options
   'e.g delete the recall, mark it completed, reschedule etc
   '-----------------------------------------------------------------
   
   Select Case Last.tag
      Case "print"
         modUtilGUI.NotImplemented("Print the recall")
      Case "email"
         modUtilGUI.NotImplemented("Email the recall")
      Case "notify front desk"
         modUtilGUI.NotImplemented("Notify front desk about the recall")
      Case "view recall history", "view audit trail"
         Recalls_Audit_Trail(Last.tag)
      Case "adjust column widths"
         cvwrecalls.Header = True
         cvwRecalls.Resizable = True
      Case "fonts"
         modUtilGUI.Columnview_SetFont(cvwRecalls, "TabbedLists")
      Case "help"
         modUtilGUI.NotImplemented("Help for the recalls menu")
      Case Else
         modRecallsMenu.Process(currentrecall, Last.tag, currentconsult)
   End Select
Catch
   Return
   
End

Public Sub mnuTabbedListRequest_Click()
   '-----------------------------------------------------------------------------------
   'This is the menu which has popped up over the requests the user has ordered e.g FBC
   'Process the menu options
   'Explanation Split(cvwRequests.item.key, "-").Count = 3
   '- was included because at some stage I allowed double clicking to expand the
   '- columnview and show the requests on form, with sub lines being the
   '- individual requests - I'll probably remove this as not found useful
   '-----------------------------------------------------------------------------------
   
   Dim RequestForm As New Collection
   
   cvwRequests.MoveCurrent()
   If Split(cvwRequests.item.key, "-").Count = 3 Then
      Try RequestForm = currentconsult!requests_ordered[Right(cvwRequests.item.key, Len(cvwRequests.item.key) - InStr(cvwRequests.Item.key, "-"))]
   Else
      RequestForm = currentconsult!requests_ordered[cvwRequests.item.key]
   End If
   Select Case Last.tag
      Case "adjust columns"                  'allow user to adjust the column sizes
         cvwRequests.Header = True
         cvwRequests.Resizable = True
      Case "delete"
         Try modRequestsDBI.RequestForm_Delete(currentconsult, RequestForm)
         Deleted_Request = RequestForm
         Reload_Tab("Requests")
      Case "undo delete"
         Try modRequestsDBI.RequestForm_UnDelete(Deleted_Request)
         Deleted_Request = New Collection 'reset, but fix this to multi-delete
      Case "re-order"
         modUtilGUI.NotImplemented("Re-ordering from past forms is not yet implemented")
      Case "re-print"
         Try modPrinting.Print_latex(RequestForm!latex)
      Case "preview form"
         Try modRequestsDBI.RequestForm_Preview(RequestForm)
      Case "fonts"
         modUtilGUI.Columnview_SetFont(cvwRequests, "TabbedLists")
   End Select
Catch
   Return 
   
End

Public Sub tbPatientPicture_Menu()
   
   mnuPatientPhoto.Popup()
   
End

Public Sub mnuMeasurements_Click()
   
   Select Case Last.tag
      Case "delete"
         cvwMeasurementValues.MoveCurrent
         'If Message.Question("Delete this measurement?", "Yes", "No") = 2 Then Return
         modDBConnect.update("clin_measurements.measurements", Null, ["pk": cvwMeasurementValues.item.key, "deleted": True])   'remove measurements from measurements table
         modDBConnect.CommitTrans() 'fixme put in audit trail
         Measurement_Show_Data_List(const.Measurement_Types[cvwMeasurementFavorites.item.key])
   End Select
Catch
   Return 
   
End

Public Sub Interactions_Current_Medications_View()
   '-------------------------------------------------------------
   'Works out and displays any potential interactions between all
   'the patients current active medication list
   '-------------------------------------------------------------
   
End

Public Sub mnuLettersReceived_Click()
   
   Dim D As Collection
   Dim x As Integer
   Dim pdfs_to_merge As Collection  'if user decides to merge pdfs
   Dim audit_notes As String
   
   Select Case Last.tag
      Case "help"                          'show help for this section
         modUtilGUI.NotImplemented("Help for Letters Recieved Menu")
      Case "external viewer"
         modutil.Show_in_external_pdf_viewer(modFiles.Get("document_archiving_directory"), currentconsult!letters_received[cvwLettersReceived_Key]!source_file) 'True = is an EasyGP document
      Case "fonts"                         'adjust and save font"
         modUtilGUI.Columnview_SetFont(cvwLettersReceived, "TabbedLists")
      Case "transfer to pdfs to join list"                                                                    'joins selected documents into a single pdf
         '-----------------------------------------------------------------------------------------
         'joining pdf's difficult (not the actual joining)
         'eg.user could want to or be stupid enough to join disparate pdf's
         'so some decision needs to be made about the original collection's settings e.g originator
         'for the moment (experimental) the last document sent to the list (i.e this one) will
         'be attatched  as the tag of the lvFilesToJoin
         '------------------------------------------------------------------------------------------
         cvwLettersReceived.MoveFirst
         pdfs_to_merge = New Collection
         lvFilesToJoin.Clear()
         txtTagUser.text = ""
         For x = 0 To cvwLettersReceived.Selection.count - 1
            If Lower(File.Ext(currentconsult!letters_received[cvwLettersReceived.Selection[x]]!source_file)) = "pdf" Then
               Try lvFilesToJoin.Add(cvwLettersReceived.Selection[x], currentconsult!letters_received[cvwLettersReceived.Selection[x]]!source_file)
               If Not Error Then
                  pdfs_to_merge.Add(currentconsult!letters_received[cvwLettersReceived.Selection[x]], pdfs_to_merge.count) 'needed to delete these later
               End If
            Else
               Message.info("Only pdf files can be joined together, sorry.....")
               cvwResults.UnselectAll()
               Return
            End If
         Next
         lvFilesToJoin.tag = pdfs_to_merge
         VBox_Files_To_Join.Visible = True
         Vbox_MiniGraphs.Visible = False
      Case "display"                    'show the letter
         If cvwLettersReceived_key = 0 Then
            Message.Info("key is zero")
            Return
         Endif
         Document_Display(currentconsult!letters_received[cvwLettersReceived_Key])
      Case "display in new tab"
         Document_Display(currentconsult!letters_received[cvwLettersReceived_Key], True)
      Case "display as result"                'change fk_lu_display as to const.Document_Display_As_Result
         audit_notes = "Display mode changed from letter to result"
         If modArchiveDocumentsDBI.Change_Display_Mode(currentconsult, currentconsult!letters_received[cvwLettersReceived_key], const.Document_Display_As_Result, const.cSection_Documents, audit_notes) Then
            cvwLettersReceived_Refresh(True)
            cvwResults_Refresh(True)
         Endif
      Case "file as plan"
         If modArchiveDocumentsDBI.Change_Display_Mode(currentconsult, currentconsult!letters_received[cvwLettersReceived_key], const.Document_Display_As_GP_Management_Plan, const.cSection_Documents, audit_notes) Then
            cvwLettersReceived_Refresh(True) 
            form_gpmp_tca_list.Reload(True)  'refresh and reload the list
         Endif
      Case "file as tca"
         If modArchiveDocumentsDBI.Change_Display_Mode(currentconsult, currentconsult!letters_received[cvwLettersReceived_key], const.Document_Display_As_Team_Care_Arrangement, const.cSection_Documents, audit_notes) Then
            cvwLettersReceived_Refresh(True)
            form_gpmp_tca_list.Reload(True)   'refresh and reload the list
         Endif
         
      Case "delete"                        'mark this as deleted but enforce a reason
         If currentconsult!letters_received[cvwLettersReceived_key]!protected Then
            Message.Title = "Protected Document"
            Message.Info("You may not delete this document.\n\n When it was created it was marked as 'protected' by EasyGP.")
            Return
         Endif
         If modArchiveDocumentsDBI.Delete(currentconsult, currentconsult!letters_received[cvwLettersReceived_key], const.cSection_Documents, const.sAuditAction[const.cAuditAction_MarkDeleted]) Then
            modDBConnect.CommitTrans()
            Deleted_Documents.Add(currentconsult!letters_received[cvwLettersReceived_key], cvwLettersReceived_key)
            cvwLettersReceived_Refresh(True) 'refresh the collection and reshow the list
         Else
            modDBConnect.RollBack
         End If
      Case "delete duplicate"             'Delete the letter, but don't enforce a reason
         If currentconsult!letters_received[cvwLettersReceived_key]!protected Then
            Message.Title = "Protected Document"
            Message.Info("You may not delete this document.\n\n When it was created it was marked as 'protected' by EasyGP.")
            Return
         Endif
         If Message.Question("Are you sure this is a duplicate? Sure you want to delete it?", "Yes", "No") = 2 Then Return
         If modArchiveDocumentsDBI.Delete(currentconsult, currentconsult!letters_received[cvwLettersReceived_key], const.cSection_Documents, const.sAuditAction[const.cAuditAction_DeleteDuplicateDocument]) Then
            modDBConnect.CommitTrans()
            Deleted_Documents.Add(currentconsult!letters_received[cvwLettersReceived_key], cvwLettersReceived_key)
            cvwLettersReceived_Refresh(True)
         Else
            modDBConnect.RollBack
         End If
      Case "email documents"
         If Message.Warning("Unless you are Ian or Richard Cancel this immediately, it is developmental code and will not work, worse, if my crash or even eat your hamster", "Ignore warning - don't like my hamster", "Shit - I'm out of here") = 2 Then Return  
         With form_email_documents = New FEmailDocument
            .Init(currentconsult, [modFiles.Get("document_archiving_directory", currentconsult!letters_received[cvwLettersReceived_Key]!source_file)])
            .ShowModal()
         End With
      Case "undo delete"
         'find the last deleted letter
         For Each D In Deleted_Documents
            If D!fk_lu_display_as = const.Document_Display_As_Letter Then
               If modArchiveDocumentsDBI.UnDelete(currentconsult, d, const.cSection_Documents) Then
                  modDBConnect.CommitTrans()
                  Deleted_Documents.Remove(d!pk_document)
                  cvwLettersReceived_Refresh(True)
                  Break
               Endif
            Endif
         Next
         
      Case "edit"            'edit the metadata
         If currentconsult!letters_received[cvwLettersReceived_key]!protected Then
            Message.Title = "Protected Document"
            Message.Info("You may not edit this document.\n\n When it was created it was marked as 'protected' by EasyGP.")
            Return
         Endif
         Document_Edit_Metadata(currentconsult!letters_received, cvwLettersReceived_Key)
      Case "link"                          'link to a health issue not yet implemented
         modUtilGUI.NotImplemented("Link letter to health issue")
      Case "print selected"
         For x = 0 To cvwLettersReceived.Selection.count - 1
            Document_Print(cvwLettersReceived.Selection[x])
         Next
         cvwLettersReceived.UnselectAll()
      Case "print all"
         For Each D In currentconsult!letters_received
            Document_Print(D!pk_document)
         Next
      Case "select all"
         cvwLettersReceived.SelectAll()
      Case "unselect"
         cvwLettersReceived.UnselectAll()
      Case "audit trail"
         Document_AuditTrail_Show(cvwLettersReceived_key)  'key to documents.documents
      Case "refile document"
         If currentconsult!letters_received[cvwLettersReceived_key]!protected Then
            Message.Title = "Protected Document"
            Message.Info("You may not re-file this document.\n\n When it was created it was marked as 'protected' by EasyGP.")
            Return
         Endif
         If modArchiveDocumentsDBI.Document_SendBack_For_ReFiling(currentconsult, currentconsult!letters_received[cvwLettersReceived_key]) Then 'commit done in that routine
            cvwLettersReceived_Refresh(True)
         Endif
   End Select
Catch
   Log.WarningMsg("FCLinical.mnuLettersReceived_Click: " & Error.Text & " " & Error.Backtrace)
   Return 
   
End

Public Sub mnuPatientPhoto_Click()
   
   Select Case Last.tag
      Case "acquire"
         PatientPhoto_Acquire()
      Case "import"
         PatientPhoto_Import()
      Case "edit"
         PatientPhoto_Edit()
      Case "save"
         PatientPhoto_Save()
   End Select
Catch
   Return
   
End

Public Sub PatientPhoto_Acquire()
   
   Message.info("Photo Acquisition is not implemented yet")
   
End

Public Sub PatientPhoto_Import()
   
   Message.info("Photo Import is not implemented yet")
   
End

Public Sub PatientPhoto_Edit()
   
   Message.info("Photo Editing is not implemented yet")
   
End

Public Sub PatientPhoto_Save()
   
   Message.info("Photo Saving is not implemented yet")
   
End

Public Sub popupMnu_ProblemList_Click()
   '----------------------------------------------------------------------
   'User has clicked on the popup menu over the problem lists in FClinical
   '----------------------------------------------------------------------
   
   Dim PHPage As FPastHistory
   Dim datachanged As Boolean
   Dim sHtml As String
   Dim temp_coll As New Collection                      'temporary collection to hold changes before commit
   
   temp_coll!pk_pasthistory = currentpasthistory!pk_pasthistory
   Select Case Last.tag
      Case "font"
         modUtilGUI.Columnview_SetFont(CurrentPastHistoryList, "FClinical")
         
      Case "add"
         Editor_ShowPage("Health Issues")
      Case "edit"
         Editor_ShowPage("Health Issues")
         '----------------------------------------------------------
         'Now find that page in the editor and load the past history
         'into the editing area
         '-----------------------------------------------------------
         PHPage = EditorPages["Health Issues"]
         With PHPage
            .pk_pasthistory_set(currentpasthistory!pk_pasthistory)
            .HealthIssue_Display()
            .HealthIssue_Edit()
         End With
      Case "link to coding system"
         
      Case "view all previous notes"
         shtml = modProgressNotes.ConstructHTML_SingleProblem(currentconsult, currentpasthistory!pk_pasthistory, const.cSection_PastHistory)
         Editor_ShowPage("Single Health Issue Notes", currentconsult!past_history[currentpasthistory!pk_pasthistory]!description & " (PREVIOUS NOTES)", shtml)
      Case "audit trail"
         ' PastHistory_Audit_Trail()
      Case "new notes"
         ' Editor_PastHistory_ProgressNotePage(currentpasthistory)
      Case "make significant"
         temp_coll!active = True
         temp_coll!major = False
         datachanged = True
      Case "make major"
         temp_coll!major = True
         datachanged = True
      Case "make inactive"
         temp_coll!active = False
         temp_coll!major = False
         datachanged = True
      Case "mark as operation"
         If popupMnu_ProblemList_MarkAsOperation.Caption = "Mark as Not an Operation" Then
            temp_coll!operation = False
         Else
            temp_coll!operation = True
         Endif
         datachanged = True
      Case "mark as confidential"
         If popupMnu_ProblemList_MarkAsConfidential.Caption = "Mark as Not Confidential" Then
            temp_coll!confidential = False
         Else
            temp_coll!confidential = True
         Endif
         datachanged = True
      Case "delete"
         PastHistory_Delete
      Case "help"
         Help_Show("health-issues.html", "Health Issues", True)
   End Select
   
   If datachanged Then
      modDBConnect.update("clin_history.past_history", currentconsult!past_history[CurrentPastHistoryList.Current.key], temp_coll, "pk_pasthistory")
      modDBConnect.CommitTrans()
      Pasthistory_Refresh_Lists()
      Try FPastHistory.Refresh_Problem(currentpasthistory!pk_pasthistory)  'the form may not be loaded, if is refresh the history item
   End If
   popupMnu_ProblemList.hide()
   
End Sub

Public Sub PastHistoryLists_Menu()
   
   popupMnu_ProblemList_MakeMajor.Enabled = True
   popupMnu_ProblemList_MakeSignificant.Enabled = True
   popupMnu_ProblemList_MakeInactive.Enabled = True
   
   With Last
      If .count Then
         .MoveCurrent
         popupMnu_ProblemList_title.caption = UCase(currentpasthistory!description)
         Select Case Last.tag
            Case "major"
               popupMnu_ProblemList_MakeMajor.Enabled = False
            Case "significant"
               popupMnu_ProblemList_MakeSignificant.Enabled = False
            Case "inactive"
               popupMnu_ProblemList_MakeInactive.Enabled = False
         End Select
         If currentpasthistory!confidential Then
            popupMnu_ProblemList_MarkAsConfidential.Caption = "Mark as Not Confidential"
         Else
            popupMnu_ProblemList_MarkAsConfidential.Caption = "Mark as Confidential"
         Endif
         If currentpasthistory!operation Then
            popupMnu_ProblemList_MarkAsOperation.Caption = "Mark as Not an Operation"
         Else
            popupMnu_ProblemList_MarkAsOperation.Caption = "Mark as Operation"
         Endif
         popupMnu_ProblemList.Popup
      End If
   End With
Catch
   Return 
   
End

Public Sub PastHistoryLists_Select()
   '--------------------------------------------------
   'Moves internal record pointer of the last list the
   'user clicked on to match the row they clicked on.
   'Sets active past history item to that highlighted.
   'Note this routine is needed by:
   '         PastHistoryLists_DblClick()
   '         PastHistoryLists_menu()
   '--------------------------------------------------
   
   CurrentPastHistoryList = Last
   With Last
      If .count Then
         .MoveCurrent
         currentpasthistory = currentconsult!past_history[.item.key]
      End If
   End With
Catch
   Return 
   
End

Public Sub PastHistoryLists_DblClick()
   '-----------------------------------------------------
   'Called when the user clicks on any of the three
   'past history lists (Major, significant, inactive
   'Creates a new editor page ie FProgressNotePage instance
   'in the main tab control
   '-----------------------------------------------------
   
   Return 
   If Not currentconsult Then Return
   If Not Last.count Then Return
   
   Last.MoveCurrent()
   
   Editor_PastHistory_ProgressNotePage(currentconsult!past_history[Last.item.key])
Catch
   Return 
   
End

Public Sub Document_Display(D As Collection, Optional bNewtab As Boolean)
   '---------------------------------------------------------------------------------
   'Displays a document currently in central area until IAN does the emulated browser
   'If document metadata is not complete, prompt user by showing the metadata
   '---------------------------------------------------------------------------------
   
   Dim filename As String
   Dim currentobservations As Collection
   Dim sHtml As String
   '  Dim documents As Collection = currentconsult!letters_received
   Dim latex As String
   Dim charpos As Integer
   
   filename = D!source_file
   Try UnFiled_Document_Metadata_Show(False)                               'remove this it could be showing if not completed from previous document
   '-----------------------------------------------------------------------------------------------------
   'If there is no tag_user, then this is an unfiled document - i.e document can't be filed without a tag
   '-----------------------------------------------------------------------------------------------------
   If Not IsNull(D!tag_user) Then
      Select Case File.Ext(filename)
         Case "pdf"
            If bNewtab Then 
               Editor_ShowPage("pdf document", D!tag_user & ":" & Str(D!pk_document), filename)
            Else
               Editor_ShowPage("document", D!tag_user & ":" & Str(D!pk_document), filename, "pdf")
            End If   
         Case "jpg", "png", "bmp", "jpeg", "tiff"
            If bNewtab Then   
               Editor_ShowPage("image", D!tag_user, D!source_file, "An Extra Tag")
            Else
               Editor_ShowPage("document", D!tag_user, D!source_file, "image")
            End If  
            ' Case Else 'must be html or latex FIXME temporary I've been saving the GPMP latex into the thml field
            '    If InStr(documents[cvwLettersReceived_Key]!html, "\\documentclass") Then
            '       Editor_ShowPage("pdf file", documents[cvwLettersReceived_Key]!tag_user, modPrinting.Latex_To_PDF(documents[cvwLettersReceived_Key]!html))
            '    Else
            '       If bNewTab Then   
            '          Editor_ShowPage("browser", documents[cvwLettersReceived_Key]!tag_user, documents[cvwLettersReceived_Key]!html, documents[cvwLettersReceived_Key]!originator)
            '       Else
            '          Editor_ShowPage("document", documents[cvwLettersReceived_Key]!tag_user, documents[cvwLettersReceived_Key]!html, "html")
            '       End If 
            '    End If     
         Case Else
            Select Case D!fk_lu_data_content_type
               Case const.cData_Type_Latex 
                  Print D!data
                  If InStr(D!data, "!pdf-path") Then
                     latex = D!data    'file need to find for overpic is {!pdf-path:the-pdf-name.pdf}
                     charpos = InStr(latex, "!pdf-path")
                     filename = Mid$(latex, charpos + 10, InStr(latex, "}", charpos + 10) - charpos - 10)
                     latex = Replace(latex, "!pdf-path:" & filename, modUtil.Find_File("templates" &/ filename))
                     filename = modPrinting.Latex_To_PDF(latex)
                     Print filename 
                     Print latex
                     '  Wait 5
                     Editor_ShowPage("pdf file", D!tag_user, filename)
                     '   Wait 1
                  Else
                     Editor_ShowPage("pdf file", D!tag_user, modPrinting.Latex_To_PDF(D!data))
                  End If   
               Case const.cData_Type_HTML
                  If bNewTab Then   
                     Editor_ShowPage("browser", D!tag_user, D!data, D!originator)
                  Else
                     Editor_ShowPage("document", D!tag_user, D!data, "html")
                  End If 
               Case Else
                  Message.Info("FClinical.Document_Display:Unknown document data type - please notify the developers")
            End Select
      End Select
   Else
      '------------------------------------------------------------------------------
      'tag_user is null construct the page tag along with a date eg FBC (01/02/2010)
      'Now determine if this has actually been viewed and filed by the doctor
      'if it has, then there will be a user tag
      'If not, then show the metadata for this document
      '-------------------------------------------------------------------------------
      Select Case File.Ext(filename)
         Case "pdf"
            '  Editor_ShowPage("pdf document", "UNFILED", filename, "Document")
            Editor_ShowPage("document", "UNFILED", filename, "pdf")
            Document_Edit_Metadata(currentconsult!letters_received, cvwLettersReceived_Key)
         Case Else
            If IsNull(D!data) Then        'Null = unfiled, construct this from backend
               CurrentObservations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & cvwLettersReceived_Key & " ORDER BY observations.observation_date, set_id")
               shtml = modHL7Process.Construct_HTML(currentconsult!patient, D, currentobservations, True, True, D!fk_lu_display_as)
            Else
               shtml = D!data
            End If
            Editor_ShowPage("browser", "UNFILED", sHTML, D!originator)
            Document_Edit_Metadata(currentconsult!letters_received, cvwLettersReceived_Key, sHtml)
      End Select
   End If
   
End

Public Sub Inbox_showResult(Optional bNewTab As Boolean = False)
   '-------------------------------------------------------------------------------------
   'Display a result - this could have been received as HL7 or as as scanned pdf or image
   'It may or may not have been 'filed' - ie viewed in the users inbox
   'If Filed and bNewTab is true the result is shown in a new workspace tab
   'otherwise it is displayed in the generic 'Results' tab
   'If unfiled it is always shown in new tab.
   '-------------------------------------------------------------------------------------
   
   Dim bExcludeFTReport As Boolean
   Dim bExcludePIT As Boolean
   Dim display_style As Integer = const.Document_Display_As_Result
   Dim fgc As Integer
   Dim bgc As Integer
   Dim sHtml As String
   Dim SelectedDocument As Collection
   Dim filename As String
   Dim file_extension As String
   Dim page_tag As String
   
   If cvwResults.count = 0 Then Return
   Try UnFiled_Document_Metadata_Show(False)                                     'remove this it could be showing if not completed from previous document
   '---------------------------------------------------------
   'If this document has been filed, show the pdf or the html
   '---------------------------------------------------------
   filename = currentconsult!results_received[cvwResultsReceived_Key]!source_file
   Print filename
   file_extension = Lower(File.Ext(currentconsult!results_received[cvwResultsReceived_Key]!source_file))
   If Not IsNull(currentconsult!results_received[cvwResultsReceived_Key]!tag_user) Then
      Select Case file_extension
         Case "pdf"
            If bNewTab Then 
               Editor_ShowPage("pdf document", currentconsult!results_received[cvwResultsReceived_Key]!tag_user & ":" & Str(currentconsult!results_received[cvwResultsReceived_Key]!pk_document), filename)
            Else
               Editor_ShowPage("result", currentconsult!results_received[cvwResultsReceived_Key]!tag_user & ":" & Str(currentconsult!results_received[cvwResultsReceived_Key]!pk_document), filename, "pdf")
            End If   
         Case "jpg", "png", "bmp", "jpeg", "tiff"
            If bNewTab Then   
               Editor_ShowPage("image", currentconsult!results_received[cvwResultsReceived_Key]!tag_user, filename, "An Extra Tag")
            Else
               Editor_ShowPage("result", currentconsult!results_received[cvwResultsReceived_Key]!tag_user, filename, "image")
            End If   
         Case Else
            page_tag = currentconsult!results_received[cvwResultsReceived_Key]!tag_user
            '  Document_HTML = modHL7Process.Construct_HTML(Selected_Inbox, Doc, Document_observations, bExcludePIT, bExcludeFTReport, display_style, fgc_errors, bgc_errors)
            ' Document_HTML = Replace(Document_HTML, "%filingas%", "")
            If Right(page_tag) = ";" Then page_tag = Left(page_tag, Len(page_tag) - 1)
            page_tag &= " (" & Format(currentconsult!results_received[cvwResultsReceived_Key]!date_created) & ":" & Str(currentconsult!results_received[cvwResultsReceived_Key]!pk_document) & ")"
            If bNewTab Then   
               Try Editor_ShowPage("browser", page_tag, currentconsult!results_received[cvwResultsReceived_Key]!data, currentconsult!results_received[cvwResultsReceived_Key]!organisation)
            Else  
               Try Editor_ShowPage("result", page_tag, currentconsult!results_received[cvwResultsReceived_Key]!data, "html")
            End If   
      End Select
   Else
      '------------------------------------------------------------------------------
      'tag_user is null construct the page tag along with a date eg FBC (01/02/2010)
      'Now determine if this has actually been viewed and filed by the doctor
      'if it has, then there will be a user tag
      'If not, then show the metadata for this document
      '-------------------------------------------------------------------------------
      FMetaData.Init("Allocated Documents")                                      'gui elements for filing, not allocating like in scanning
      SelectedDocument = currentconsult!results_received[cvwResultsReceived_Key]    'makes typing easier
      '-------------------------------------------------------------------
      'Now, if a HL7 result, if no html - ie not yet file, create the html
      '------------------------------------------------------------------
      Select Case file_extension
         Case "pdf"
            Editor_ShowPage("pdf document", "UNFILED", filename)
         Case Else
            bExcludeFTReport = SelectedDocument!exclude_ft_report
            bExcludePIT = SelectedDocument!exclude_pit
            fgc = SelectedDocument!abnormals_foreground_color
            bgc = SelectedDocument!abnormals_background_color
            display_style = SelectedDocument!fk_lu_message_display_style
            CurrentObservations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & SelectedDocument!pk_document & " ORDER BY observations.observation_date, set_id")
            shtml = modHL7Process.Construct_HTML(currentconsult!patient, SelectedDocument, currentobservations, bExcludePIT, bExcludeFTReport, display_style, fgc, bgc)
            sHtml = Replace(shtml, "%filingas%", "")
            sHtml = Replace(shtml, "** UNFILED **:", "")
            page_tag = "UNFILED RESULT"
            Editor_ShowPage("result", page_tag, sHtml, "html")
      End Select
      With FMetaData
         .Edit(currentconsult!results_received[cvwResultsReceived_Key])        'display metadata for this document
         .bexit = True
         .txtUserObservationName.text = cvwResults[cvwResultsReceived_Key][1]
         .txtUserObservationName.pos = 0    'ensure start of line showing
         .Document_HTML_Set(sHtml)
         .HBox_Save.visible = True                                           'contains the save button
         .hBox_Urgency.Visible = False                                       'not needed as already in the patients notes
         .bExit = False
      End With
      UnFiled_Document_Metadata_Show(True)                                   'set up FClinical to show FMetadata
   End If
   
End

Public Sub FMetaData_tbClose_Click()
   '---------------------------------------------------------
   'Remove FMetadata, put back correct FClinical gui elements
   '---------------------------------------------------------
   
   UnFiled_Document_Metadata_Show(False)
   Wait
   Print currentconsult!results_received[cvwResultsReceived_Key]
   cvwResults_Refresh()
   
   cvwLettersReceived_Refresh(True)
   
End

Public Sub FMetaData_txtUserObservationName_Activate()
   '------------------------------------------------------------------------------------------
   'This over-rides the event on this textbox in the FMetadata
   'For ease of use, when user hits enter here, File doc and roll on to next one automatically
   '------------------------------------------------------------------------------------------
   
   Stop Event
   If Last.tag = "user name" Then
      FMetadata_tbSave_Click()
   Endif
   
End

Public Sub FMetaData_tbSave_Activate()
   '------------------------------------------------------------
   'Detects if user clicked <enter> on the FMetadata save button
   'overrides this event and saves. I've done this so that
   'I can then remove the metadata form and re-arrange the screen
   'from this form
   '------------------------------------------------------------
   
   Stop Event
   If key.code = key.Return Then
      FMetadata_tbSave_Click()
   Endif
   
End

Public Sub FMetaData_tbSave_Click()
   '-----------------------------------------------------------------------
   'User is modifying a document's metadata
   'Apply the changes, remove the metadata gui and re-load the results list
   'this observor over-rides the click on the FMetadata form 
   'i.e the instance of FDocumentMetaData we are using
   '-----------------------------------------------------------------------
   
   Stop Event
   If FMetaData.txtUserObservationName.text = "" Then
      With FMetaData
         .txtUserObservationName.SetFocus
         .txtUserObservationName.Background = Color.rgb(95, 255, 175)
      End With
      Return
   Endif
   If FMetaData.txtDocumentDate.text = "" Then
      With FMetaData
         .txtDocumentDate.SetFocus
         .txtDocumentDate.Background = Color.rgb(95, 255, 175)
      End With
      Return
   Endif
   If FMetaData.Save() Then                     'successful
      modDBConnect.CommitTrans()                'save transaction
      FMetaData_tbClose_Click()                 'remove the gui components
   End If
   Select Case TabStrip_Lists.Index
      Case CTabLetters
         cvwLettersReceived_Refresh(True)       'refresh collection and re-display
      Case cTabResults
         cvwResults_Refresh(True)
   End Select
   
End

Public Sub UnFiled_Document_Metadata_Show(bShow As Boolean)
   '---------------------------------------------------------
   'Show or remove the unfiled document metadata gui elements
   '---------------------------------------------------------
   
   FMetaData.visible = bShow
   If bShow Then
      VboxActiveProblemList.Visible = False
      Form_Patient_Tasks.Visible = False   
      VBox2.visible = False  
      Vbox_Decision_Support.visible = False
   Else
      VboxActiveProblemList.Visible = True  
      Form_Patient_Tasks.Visible = True   
      VBox2.visible = True   
      Settings["FClinical/VsplitClinical_RightPane_Metadata"] = VsplitClinical_RightPane.Layout
      VsplitClinical_RightPane.Layout = Settings["FClinical/VsplitClinical_RightPane_Metadata"]
   Endif
   
End

Public Sub TabbedLists_Select()
   '-------------------------------------------------------------------------------------
   'NOTE the effect of Select and Click on a list are different
   '     Using Referral Letters in a list as an example - if you want to sequentially
   '     show each referral letter as the user runs through the list using the down
   '     arrow keys, the code must be in this subroutine, as _Click event is only
   '     generated when the user clicks on a list
   '     For some lists, we only want to set the underlying collection member e.g Recalls
   '-------------------------------------------------------------------------------------
   
   If IsNull(currentconsult) Then Return
   Last.MoveCurrent()   'set internal cursor
   
   Select Case Last.tag
      Case "requests"
         If Last.Header = True Then
            Last.header = False
         End If '
      Case "measurements"
         cvwMeasurements.MoveCurrent()
         Measurement_Graph(cvwMeasurements.Item.key, cvwMeasurements.Item.text)
      Case "measurement favourites"
         cvwMeasurementFavorites.MoveCurrent()
         Measurement_Graph("", cvwMeasurementFavorites.Item.text)
   End Select
Catch
   Return 
   
End

Public Sub Measurement_Graph_Picture_Clear()
   
   With pbMeasurementGraph
      .picture = Null
      .tag = ""
      .Refresh()
   End With
   
End

Public Sub InboxResults_Click()
   '------------------------------------------------------
   'User has clicked on one of the buttons under the graph
   '------------------------------------------------------
   
   ActiveGraphButton = Last
   Measurements_Make_Graph()
   
End

Public Sub Measurements_Make_Graph()
   '----------------------------------------------------------------------------------
   'Called either by InboxResults_Click - i.e user clicked on a button under graph or
   '                 FProgressNotesPage.FClinical.Update_graphs()  in which case the
   '                 currently highlighted graph is updated  when progress notes saved
   '----------------------------------------------------------------------------------
   
   Dim tag As String
   Dim MD As Collection
   
   If IsNull(currentconsult) Then Return
   bexit = True
   chkGraph_MakeDefault.value = False
   bexit = False
   
   Try tag = ActiveGraphButton.tag!name
   If Error Then
      tag = ActiveGraphButton.tag
   Endif
   
   Select Case tag
      Case "egfr"
         Measurement_Graph(const.Loinc_EGFR, "eGFR")
      Case "blood pressure"
         Measurement_Graph("", "blood pressure")
      Case "weight"
         Measurement_Graph("", "weight")
      Case "height"
         Measurement_Graph("", "height")
      Case "peak flow"
         
      Case "add"
         'Add to favourites, but first, is it already a favourite?
         If IsNull(pbGraphName.Tag) Then Return
         For Each MD In MeasurementDefaults
            If Lower(Md!name) = Lower(pbGraphName.Tag!name) Then Return
         Next
         If Message.Question("Do you wish to add " & pbGraphName.Tag!name & " to the favourites?", "Yes", "No") = 1 Then
            pbGraphName.tag!display_as_default = False
            Measurement_Favourites_Update()
         Endif
         
      Case "remove"
         If IsNull(pbGraphName.Tag) Then Return
         If Message.Question("Do you wish to remove " & pbGraphName.Tag!name & " from the favourites?", "Yes", "No") = 1 Then
            modMeasurementsDBI.Measurement_Default_Mark_Deleted(pbGraphName.tag!pk)
            modDBConnect.CommitTrans()
            Measurement_Defaults_Refresh()
         Endif
         
      Case "refresh"
         '------------------------------------------------------
         'Reset the measuremnts list to include all measurements
         '------------------------------------------------------
         bexit = True
         txtInboxResults_Exclude.Text = ""
         txtInboxResults_filter.text = ""
         bExit = False
         cvwResults_Refresh()
      Case Else
         '---------------------------------------------------------------
         'This must be a user-defined button
         'pbGraphName.tag used to 'store' information about graph default
         'for want of a better place
         '---------------------------------------------------------------
         If IsNull(pbGraphName.Tag) Then Return
         Measurement_Graph(ActiveGraphButton.tag!loinc, ActiveGraphButton.tag!name)
         pbGraphName.tag = ActiveGraphButton.tag
         If ActiveGraphButton.tag!display_as_default = True Then
            bexit = True
            chkGraph_MakeDefault.value = True
            bexit = False
         End If
   End Select
   
End

Public Sub Measurement_Graph(loinc As String, Measurement As String)
   '-----------------------------------------------------------
   'Graph a measurement
   'if Loinc = "" then measurement is BP, height, weight or PF
   'if Loinc <> "" then graph an observable measurement
   '-----------------------------------------------------------
   
   Dim Interval As Integer = 0
   Dim GraphableItem_Data As New Collection
   
   If IsInteger(txtMeasurementShowLastMonths.text) Then
      interval = Val(txtMeasurementShowLastMonths.text)
   End If
   'fixe me replace 1 with font size tiny, med large
   GraphData = New Collection
   GraphData = modMeasurementsDBI.Make_Graph(currentconsult!patient!fk_patient, loinc, Measurement, pbMeasurementGraph.H, pbMeasurementGraph.W, slGraphFontSize.value, cmbLineStyle.text, interval)
   GraphData!name = Measurement
   GraphData!fontsize = slGraphFontSize.value
   GraphableItem_Data!loinc = loinc
   GraphableItem_Data!name = Measurement
   
   Try pbMeasurementGraph.picture = Picture.Load(GraphData!graph_filename)
   If Error
      Measurement_Graph_Picture_Clear()
   Else
      pbGraphName.tag = GraphableItem_Data
   End If
   
End

Public Sub Tabbed_lists_Clear()
   '---------------------------------------------------------
   'PURPOSE    :Clears all the lists on the main tab control
   'REASON     :When goes to search for a new patient, the
   '            old data is showing
   'CALLED BY  :cmbSearch_Gotfocus()
   '--------------------------------------------------------
   
   cvwReferrals.clear()
   cvwRequests.clear()
   cvwResults.Clear()
   cvwLettersReceived.Clear()
   cvwRecalls.Clear()
   cvwCertificates.Clear()
   cvwMeasurements.Clear()
   
End

Public Sub TabbedLists_Click()
   
   cvwResults.UnselectAll()
   If IsNull(currentconsult) Then Return  'do nothing if no consult
   Last.MoveCurrent()
   Select Case Last.tag
      Case "measurement favourite"
         Measurement_Show_Data_List(const.Measurement_Types[Last.item.key])
      Case "recalls"
         'user could have just been resizing the columns
         cvwRecalls.Resizable = False
         cvwRecalls.Header = False
      Case "measurements"
         '------------------------------
         'Graph measurements if possible
         '------------------------------
         cvwMeasurementFavorites.UnselectAll()
   End Select
Catch
   Return 
   
End

Public Sub tbSections_Menu()
   
   If IsNull(Currentconsult) Then Return
   mnuToolButtons_Delete.Picture = picture.Load(const.Clinical_Toolbuttons[Last.tag]!icon_path)   'bug here, the tag was 'health summary, the collection was numerical
   mnuToolButtons_Delete.Caption = "Delete " & const.Clinical_Toolbuttons[Last.tag]!name & " button?"
   mnuToolButtons.Popup()
Catch
   Return 
   
End

Public Sub mnuToolButtons_Click()
   '------------------------------------------------------------------------
   'There is really only one option for the popup menu over the toolbuttons
   'namely delete, allowing user to delete a button
   'This checks the caption on the menu e.g "Delete Pregnancy button"
   'and deletes the appropriate button - probably an easier way!
   '----------------------------------------------------------------------
   
   Dim hCtrl As Control
   Dim tb As ToolButton
   
   Select Case Last.tag
      Case "delete"
         For Each hctrl In pnlToolButtons.Children
            If hctrl Is ToolButton Then
               tb = hctrl
               If Not IsNull(const.Clinical_Toolbuttons[tb.tag]) Then  'some are not user configurable not in collection
                  If InStr(Last.caption, const.Clinical_Toolbuttons[tb.tag]!name) Then
                     If Not IsNull(Toolbuttons[tb.tag]) Then        'if not yet saved this will be null
                        If Message.Question(Last.caption, "Yes", "No") = 2 Then Return
                        modAdminDBI.Clinical_Toolbuttons_Remove(Toolbuttons[tb.tag]!fk_staff_clinical_toolbar)
                        Toolbuttons = modAdminDBI.Clinical_Toolbuttons_Get(modDBConnect.currentUser!fk_staff) 'Get users toolbuttons
                     End If
                     tb.Delete()
                     Break
                  Endif
               End If
            End If
         Next
   End Select
Catch
   Return
   
End

Public Sub tbSections_Click()
   '------------------------------------------------------------------------
   'Shows the relevant section e.g Family History, as the central webbrowser
   'could have been visible, remove it
   '------------------------------------------------------------------------
   
   Dim templ As CTemplate
   
   If Not currentconsult Then Return
   If const.Clinical_Toolbuttons.Exist(Last.tag) Then
      Editor_ShowPage(const.Clinical_Toolbuttons[Last.tag]!name)
   Else If Last.tag = "GPMP" Then  
      Templ = modProgressNotes.Health_Summary_Construct_LaTex(currentconsult, GP_Management_Plan)
      Editor_ShowPage("pdf file", "GPMP", modPrinting.Latex_To_PDF(templ.GetData()))
      lblSection.text = "GP Management Plan"
   Else If Last.tag = "Health Summary" Then
      Templ = modProgressNotes.Health_Summary_Construct_LaTex(currentconsult)
      Editor_ShowPage("pdf file", "Health Summary", modPrinting.Latex_To_PDF(templ.GetData()))
      lblSection.text = "Health Summary"
   Else If Last.tag = "Edit Last Consult" Then
      Consult_Edit_Last()
   Else
      Try Editor_ShowPage(Last.tag, Last.tag)
   Endif
   Try Control_For_Focus.SetFocus()                 'DO NOT REMOVE THIS SEE DECLARATION SECTINO AT THE TOP
   
End

Public Sub tabstrip_lists_Click()
   
   If IsNull(currentconsult) Then Return
   Select Case TabStrip_Lists.Index
      Case cListGPMPTCA
         TabStrip_Lists.ToolTip = "GP Management Plans and Team Care Arrangements"
         If IsNull(form_gpmp_tca_list) Then
            form_gpmp_tca_list = New FGPMPTCAList(HBox_GPMPTCAList)
         Endif
         form_gpmp_tca_list.init(currentconsult)
      Case clistReferrals
         
      Case cListMedications
         TabStrip_Lists.ToolTip = "Prescriptions Written"
      Case clistRecalls
         TabStrip_Lists.ToolTip = "Recalls Loggged"
      Case cListCertificates
         TabStrip_Lists.ToolTip = "Certificates"
      Case clistImages
         TabStrip_Lists.ToolTip = "Images"
         Images_Refresh()
      Case ctabCalculators
         If IsNull(BMICalc) Then
            BMICalc = New FBMICalc(HBox_BMI)
         End If
      Case cTabQuickContacts
         If IsNull(QuickContacts) Then
            With QuickContacts = New FQuickContact(HBox_Contacts)
               .Init()
            End With
         End If
   End Select
   
End

Public Sub TabStrip_Lists_Enter()
   
   Select Case TabStrip_Lists.Index
      Case cListMedications
         TabStrip_Lists.ToolTip = "Medications"
      Case cListRequests
         TabStrip_Lists.ToolTip = "Requests"
      Case clistMeasurements
         TabStrip_Lists.ToolTip = "Measurements"
      Case clistRecalls
         TabStrip_Lists.ToolTip = "Recalls Loggged"
      Case cListCertificates
         TabStrip_Lists.ToolTip = "Certificates"
      Case clistImages
         TabStrip_Lists.ToolTip = "Images"
         Images_Refresh()
      Case ctabCalculators
         TabStrip_Lists.ToolTip = "Calculators"
      Case cTabQuickContacts
         TabStrip_Lists.ToolTip = "Find Contacts"
   End Select
   
End

Public Sub ActiveWindow_Get_Name() As String
   
   Dim hCtrl As Control
   Dim page As FLinkContainer
   
   For Each page In WorkspaceEditor.Windows
      If page = WorkspaceEditor.ActiveWindow Then
         For Each hctrl In page.VBoxEditor.Children
            If hctrl Is Form Then
               Return hCtrl.Name
            Endif
         Next
      End If
   Next
   
End

Public Sub WorkspaceEditor_Activate()
   '----------------------------------------------------------------------------------
   'User has clicked on an editor page or an editor page loaded
   'If it contains progress notes, as these could have been updated in another section
   'enable or disable the core new-edit-save-print-preview-refresh buttons
   'according to the various forms needs.
   '----------------------------------------------------------------------------------
   
   Dim hCtrl As Control
   Dim page As Variant
   
   For Each page In WorkspaceEditor.Windows
      If page = WorkspaceEditor.ActiveWindow Then
         If page Is FLinkContainer Then
            For Each hctrl In page.VBoxEditor.Children
               WorkspaceEditor_Activate_Each(hctrl)
            Next
         Else
            WorkspaceEditor_Activate_Each(page)
         Endif
      Endif
   Next
   
End

Private Sub WorkspaceEditor_Activate_Each(hctrl As Control)
   
   Dim frmConsult As FProgressNoteEditor
   
   If Not hctrl Is Form Then Return
   'Disable all - will be enabled as needed
   tbPreview.Enabled = False
   tbPreview.Tooltip = ""
   tbSave.ToolTip = ""
   tbSave.Enabled = False
   tbNew.tooltip = ""
   tbNew.Enabled = False
   tbPrint.Tooltip = ""
   tbPrint.Enabled = False
   tbRefresh.Enabled = False
   tbRefresh.Tooltip = ""
   tbEdit.Enabled = False
   tbEdit.Tooltip = ""
   lblSection.text = ""
   tbDecisionSupport.Enabled = False   
   Select Case hctrl.Name
      Case "FDocumentViewer"
         tbPrint.Enabled = True
      Case "FPictureViewer"
         tbPrint.Enabled = True
         tbPrint.Tooltip = "Print Image"
      Case "FPregnancy"
         tbNew.Enabled = True
         tbNew.Tooltip = "Add new pregnancy"
         tbSave.Enabled = True
         tbPrint.Enabled = False
         tbSave.Tooltip = "Save pregnancy"
         tbRefresh.Enabled = True
         tbRefresh.Tooltip = "RefreshPregnancy"
      Case "FRecreationalDrugs"
         tbNew.Enabled = True
         tbNew.Tooltip = "Add new habit"
         tbSave.Enabled = True
         tbPrint.Enabled = False
         tbSave.Tooltip = "Save Habits"
         tbRefresh.Enabled = False
         tbRefresh.Tooltip = "Refresh Habits"
      Case "FAllergy"
         tbNew.Enabled = True
         tbNew.Tooltip = "Add new allergy"
         tbSave.Enabled = True
         tbSave.Tooltip = "Save Allergy"
         tbRefresh.Enabled = True
         tbRefresh.Tooltip = "Refresh Allergies"
         lblSection.text = "Allergies" 'FIXME DO THIS IN ONE PLACE
      Case "FInr"
         tbNew.Enabled = True
         tbNew.Tooltip = "Add new INR"
         tbSave.Enabled = True
         tbSave.Tooltip = "Save INR"
         tbEdit.Enabled = True
         tbEdit.Tooltip = "Edit INR Plan"
         lblSection.text = "INR"
      Case "FPsychoSocialHistory"
         tbSave.ToolTip = "Save Social History"
         tbSave.Enabled = True
         lblSection.text = "Psycho-Social History"
      Case "FExportClinical"
         ' tbPrint.Tooltip = "Print PDF to be exported"
         ' tbPrint.Enabled = True
         ' tbPreview.Enabled = True
         ' tbPreview.Tooltip = "Generate and Preview PDF of notes to export"
         ' tbRefresh.Enabled = True
         ' tbRefresh.Tooltip = "Reload data to export"
         ' tbSave.ToolTip = "Save file to be exported"
         ' tbSave.Enabled = True
         tbNew.Enabled = True
         tbNew.Tooltip = "Reset Export Options"
      Case "FHtmlViewer"
         tbPrint.Tooltip = "Print Text"
         tbPrint.Enabled = True
      Case "FPDF"
         tbPrint.Tooltip = "Print PDF"
         tbPrint.Enabled = True
         lblsection.text = hctrl.Tag
      Case "FProgressNotesViewer"
         '------------------------------------------------------------------------
         'This is wherever the user is reading previously generated progress notes
         'either 'all progress notess' or specific to a condition
         '------------------------------------------------------------------------
         tbPrint.Tooltip = "Print Notes"
         tbSave.Enabled = True   
         tbSave.Tooltip = "Save Notes as PDF"
         tbPrint.Enabled = True
         tbPreview.Enabled = True
         tbPreview.Tooltip = "Preview PDF of the progress notes"
         lblSection.text = "Previous Notes"
      Case "FProgressNoteEditor"
         tbSave.Tooltip = "Save Progress Note"
         tbSave.Enabled = True
         tbPrint.Enabled = True
         ' With tbEdit
         '    .Text = "Edit Last Consult"
         '    .Enabled = True
         '    .tag = "Edit Last Consult"
         ' End With
         tbPrint.Tooltip = "Print Today's Progress Notes"
         tbPreview.Enabled = True
         tbPreview.Tooltip = "Preview pdf of Today's Progress Notes"
      Case "FPastHistory"
         tbSave.ToolTip = "Save Healt  lblSection.text =h Issue"
         tbSave.Enabled = True
         tbNew.tooltip = "New Health Issue"
         tbNew.Enabled = True
         tbDecisionSupport.Enabled = True 
         lblsection.text = " Health Issues "
      Case "FVaccinations"
         lblSection.text = "Vaccinations"
         tbSave.ToolTip = "Save Vaccination"
         tbSave.Enabled = True
         tbNew.tooltip = "New Vaccination"
         tbNew.Enabled = True
         tbPrint.tooltip = "Print Vaccination List"
         tbPrint.Enabled = True
      Case "FRestlessLegs"
         tbNew.tooltip = "Clear Questionaire"
         tbNew.Enabled = True
      Case "FRequests"
         lblSection.text = "Requests"
         tbPreview.Enabled = True
         tbPreview.Tooltip = "Preview Request Form"
         tbSave.ToolTip = "Save Request Form"
         tbNew.tooltip = "New Request Form"
         tbNew.Enabled = True
         tbPrint.Tooltip = "Print Request Form"
         tbPrint.Enabled = True   'print will save
      Case "FGPMPTCA"
         tbPrint.Tooltip = "Print GPMP or TCA"
         tbPrint.Enabled = True
         tbSave.Tooltip = "Save GPMP or TCA"
         tbSave.Enabled = True   
         tbNew.Enabled = True 
         tbNew.Tooltip = "Start a New GP Management Plan"
         tbEdit.Enabled = True
         tbEdit.Tooltip = "Edit the current GP Management Plan Claim"
         tbDecisionSupport.Enabled = True
         tbRefresh.Enabled = True
         tbRefresh.tag = "Refresh"
         With tbPreview
            .Enabled = True   
            .tooltip = "Preview GPMP or TCA"
         End With
      Case "FReferrals"
         lblsection.text = "Referrals"
         If modAdminDBI.Config_Get_Staff_Member("referrals_allow_save_unfinished_letters", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff) Then
            tbSave.ToolTip = "Save referral without finalising (not printed or sent via HL7)"
            tbSave.Enabled = True
         End If
         tbNew.tooltip = "New Referral"
         tbNew.Enabled = True
         tbPrint.Tooltip = "Print Referral or send via HL7 and finalise"
         tbPrint.Enabled = True
         tbPreview.Tooltip = "Preview Referral"
         tbPreview.Enabled = True
      Case "FDACC"
         lblSection.text = "Diabetes Cycle Of Care"
         tbRefresh.Enabled = True
         tbRefresh.tooltip = "Refresh DACC Components"
         tbSave.Enabled = True
         tbSave.Tooltip = "Save and Print DACC"
         tbPrint.Enabled = True
         tbPrint.Tooltip = "Re-Print DACC"
         tbNew.Tooltip = "New DACC"
         tbNew.Enabled = True
         tbPreview.Enabled = True
         tbPreview.Tooltip = "View Summary of the DACC"
         tbEdit.Enabled = True
         tbEdit.Tooltip = "Edit DACC"
      Case "FFamilyHistory"
         lblSection.text = "Family History"
         tbSave.ToolTip = "Save Family History"
         tbSave.Enabled = True
         tbNew.tooltip = "New Family Member"
         tbNew.Enabled = True
      Case "FImageViewer"
         tbSave.ToolTip = "Save Image"
         tbSave.Enabled = True
         tbNew.tooltip = ""
         tbNew.Enabled = False
      Case "FRecalls"
         lblSection.text = "Recalls"
         tbSave.ToolTip = "Save Recall"
         tbSave.Enabled = True
         tbNew.tooltip = "New Recall"
         tbNew.Enabled = True
      Case "FOccupation"
         lblSection.text = "Occupations"
         tbNew.Tooltip = "New Occupation"
         tbNew.Enabled = True
         tbSave.Tooltip = "Save Occupation"
         tbSave.Enabled = True
      Case "FWorkCover", "FWorkcoverNSW"
         lblSection.text = "Workcover"
         tbNew.Tooltip = "New Workcover Form"
         tbNew.Enabled = True
         tbPrint.Enabled = True  
         tbPrint.Tooltip = "Print Workcover Form"
         tbPreview.Tooltip = "Preview Workcover Form"
         tbPreview.Enabled = True
      Case "FMentalHealth"
         lblSection.text = "Mental Health"
         tbNew.Tooltip = "New Mental Health Plan"
         tbNew.Enabled = True
         tbSave.Tooltip = "Save Mental Health Plan"
         tbSave.Enabled = True
         tbPreview.Tooltip = "Preview Mental Health Plan"
         tbPreview.Enabled = True
         tbPrint.tooltip = "Print Mental health Plan"
         tbPrint.Enabled = False
      Case "FMedicalCertificate"
         lblSection.text = "Medical Certificate"
         tbNew.Tooltip = "New Medical Certificate"
         tbNew.Enabled = True
         tbSave.Tooltip = "Save Medical Certificate"
         tbSave.Enabled = True
         tbPreview.Tooltip = "Preview Medical Certificate"
         tbPreview.Enabled = True
         tbPrint.tooltip = "Print Medical Certificate"
         tbPrint.Enabled = True
      Case "FPrescriptions"
         lblSection.text = "Script"
         tbNew.Tooltip = "New Script Item"
         tbNew.Enabled = True
         tbPrint.tooltip = "Print all scripts"
         tbPrint.Enabled = True
   End Select
   
End

Public Sub mnuSections_Click()
   
   If Last.tag <> "Ignore" Then
      Editor_ShowPage(Last.tag)
   End If
Catch
   Return
   
End

Public Sub tbDecisionSupport_Click()
   
   DecisionSupport_Show("", False)
   
End

Public Sub txtFindMeasurement_KeyRelease()
   
   If bexit Then Return
   If Last.tag = "find" Then
      ' Try cvwMeasurements_Refresh(Trim(Last.text))
   End If
   
End

Public Sub tbRefreshMeasurements_Click()
   
   txtFindGraphable.text = ""
   'cvwMeasurements_Refresh()
   
End

Public Sub txtFindMeasurement_KeyPress()
   
   If Not txtFindMeasurement_ExcludeKeys(key.code, Last.tag) Then
      Stop Event
      Return
   End If
   
End

Public Function txtFindMeasurement_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case tag
      Case "number months"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid
   
End

Public Sub pbMeasurementGraph_MouseDrag()
   
   Dim Pic As New Picture
   Dim fname As String
   Dim params As New Collection
   
   If Not IsNull(Last.picture) Then
      Drag.Icon = Last.Picture
      '  fname = modPlot.LineGraph(500, 180, GraphData!values, cvwMeasurements.Item.text, "")
      ' fname = modPlot.LineGraph(500, 180, GraphData!values, GraphData!name, "")
      fname = modPlot.LineGraph(500, 180, GraphData!values, GraphData!name, GraphData!name, slGraphFontSize.value)
      '  slGraphFontSize.values
      params!fname = fname
      params!H = 180
      params!W = 500
      pbMeasurementGraph.tag = params
      Pic.Load(fname)
      
      Last.Drag(Pic.Image)
      
   End If
   
End

Public Sub txtFindMeasurement_Change()
   
   If bexit Then Return
   Try Measurement_Graph()
   
End

Public Sub InboxResults_KeyRelease()
   '-----------------------------------------------------------------------
   'User has typed in one of the two textboxes underneath the results inbox
   '-----------------------------------------------------------------------
   
   If Bexit Then Return
   Select Case Last.tag
      Case "exclude"
         bExit = True
         txtInboxResults_filter.text = ""
         bexit = False
      Case "filter"
         bExit = True
         txtInboxResults_Exclude.text = ""
         bexit = False
   End Select
   If cvwResults.visible Then cvwResults_Refresh()
   If cvwRequests.Visible Then cvwRequests_Refresh()
   
End

Public Sub chkGraph_MakeDefault_Click()
   
   If IsNull(currentconsult) Or IsNull(pbGraphName.Tag) Then Return
   If Bexit Then Return
   
   If Last.value = True Then
      If Message.Question("Do you wish to make " & pbGraphName.Tag!name & " the default graph for this patient?", "Yes", "No") = 1 Then
         pbGraphName.tag!display_as_default = True
         Measurement_Favourites_Update()
      Else
         pbGraphName.tag!display_as_default = False
      End If
      
   Endif
   
End

Public Sub Measurement_Favourites_Update()
   
   pbGraphName.Tag!fk_patient = currentconsult!patient!fk_patient
   modMeasurementsDBI.Measurements_Default_Save(pbGraphName.Tag)
   modDBConnect.CommitTrans()
   Measurement_Defaults_Refresh()
   
End

Public Sub Measurement_Show_Data_List(measurement_type As Collection)
   '-----------------------------------------------------
   'when user clicks on the tabbed lists for measurments
   'show list for bp/height/weight in a numerical list
   '-----------------------------------------------------
   
   Dim M As Collection
   Dim Measurement_value As String
   
   With cvwMeasurementValues
      .Clear
      .Columns.count = 2
      .Columns[0].width = 80
   End With
   currentconsult.Refresh("measurements")
   For Each M In currentconsult!measurements
      If M!fk_type = measurement_type!pk Then
         'bad bug in measurements Ive not found FIXME
         'MEASUREMENT can be null bad bug
         If Not IsNull(M!measurement) Then
            Select Case measurement_type!pk
               Case const.Measurement_BP
                  measurement_value = modMeasurementsDBI.BP_Format(M!measurement)
               Case const.Measurement_Height
                  measurement_value = Format(M!measurement, "##.##")
               Case const.Measurement_Weight
                  measurement_value = Format(M!measurement, "##.##")
               Case const.Measurement_Hip
                  measurement_value = Format(M!measurement, "##.##")
               Case const.Measurement_Waist
                  measurement_value = Format(M!measurement, "##.##")
            End Select
            cvwMeasurementValues.Add(M!pk_measurement, 0)
            cvwMeasurementValues[M!pk_measurement][0] = Format(M!consult_date, "dd/mm/yyyy")
            cvwMeasurementValues[M!pk_measurement][1] = measurement_value
         End If
      Endif
   Next
   
End

Public Sub Measurements_Reset()
   '----------------------------------------------------------------------------
   'Remove any measurement things which may have been displayed for last patient
   'e.g a picture of a graphable measurement
   'default buttons - I've only allowed two
   '----------------------------------------------------------------------------
   
   Dim hctrl As Control
   Dim tb As ToolButton
   
   Measurement_Graph_Picture_Clear()
   For Each hctrl In HBox_Default_Results.Children        'loop through the three default buttons
      tb = hctrl
      tb.tag = Null
      tb.text = ""
      tb.Visible = False
   Next
   bexit = True
   chkGraph_MakeDefault.value = False
   bExit = False
   
End

Public Sub Measurement_Defaults_Refresh()
   '------------------------------------------------------------------------
   'Load the patient's measurement defaults
   'We allow up to three Default buttons, display graph which is the default
   'If there is not a default one to display, use BP
   '------------------------------------------------------------------------
   
   Dim MD As Collection
   Dim hctrl As Control
   Dim tb As ToolButton
   
   currentconsult.Refresh("measurement_defaults")            'remove from cache
   Measurements_Reset()                                      'remove tags, names, pictures
   MeasurementDefaults = currentconsult!measurement_defaults 'load data a-fresh
   For Each MD In MeasurementDefaults
      For Each hctrl In HBox_Default_Results.Children        'loop through the three default buttons
         tb = hctrl
         If IsNull(tb.tag) Then                              'if not yet used, give it a name
            tb.text = MD!name
            tb.tag = MD
            tb.Visible = True
            Break
         Endif
      Next
      If MD!display_as_default = True Then                   'display graph which is patient's default
         Measurement_Graph(MD!loinc, MD!name)
         bExit = True
         chkGraph_MakeDefault.Value = True
         pbGraphName.tag = MD
         bExit = False
      End If
   Next
   If IsNull(pbMeasurementGraph.Picture) Then                'but if none set, then use BP as default
      Measurement_Graph("", "blood pressure")
   Endif
   
End

Public Sub Measurement_Favourites_Refresh()
   '---------------------------------------------------
   'Display a list of:
   '1: measurements available to anyone
   '2: favourites for the patient FIXME NOT IMPLEMENTED
   '---------------------------------------------------
   
   Dim Measurement As Collection
   
   cvwMeasurementFavorites.clear()
   For Each measurement In const.Measurement_Types
      cvwMeasurementFavorites.add(measurement!pk, 0)
      cvwMeasurementFavorites[measurement!pk][0] = measurement!name_full
   Next
   
End

Public Sub slGraphFontSize_Change()
   
   If IsNull(currentconsult) Then Return
   Try Measurement_Graph(pbGraphName.Tag!loinc, pbGraphName.Tag!name)   'tag can be null
   
End

Public Sub cmbConsultationType_Click()
   
   If currentconsult Then
      currentconsult.Set(consultationtypes[cmbConsultationType.Index]!pk, "")
   End If
   
End

Public Sub DocumentFilter_KeyRelease()
   '-------------------------------------------------------------------------
   'User wants to filter document on either tag or who sent them 'originator'
   '-------------------------------------------------------------------------
   
   If bexit Then Return
   Select Case Last.tag
      Case "tag"
         cvwLettersReceived_Refresh()
      Case "author"
         cvwLettersReceived_Refresh()
   End Select
   
End

Public Sub tbLettersRefresh_Click()
   '----------------------------------------------------
   'Clears the filters on the letters lists, and reloads
   '----------------------------------------------------
   
   txtLetterFilterTag.text = ""
   txtLetterFilterAuthor.text = ""
   cvwLettersReceived_Refresh(True)
   
End

Public Sub Certificates_Click()
   
   iCertificatetype = Last.tag
   Certificates_Refresh()
   
End

Public Sub cvwResults_MouseDrag()
   
   If Not cvwResults.count Then Return
   Last.MoveCurrent()
   Drag.icon = Picture.Load("icons/16/bloodtube16x16.png")
   Last.Drag(Str(currentconsult!results_received[cvwResultsReceived_Key]!pk_document))
   
Catch
   Return 
   
End

Static Public Sub UnitTest(form_main As FMain)
   
   form_main.btnSection_Clinical_Click()
   form_main.pnlClinical.Patients_Find(1)
   
End

Public Sub mnuHelp_Click()
   
   Select Case Last.tag
      Case "about"
         FAbout.ShowModal()
      Case "get help online"
      Case "report a problem"
   End Select
Catch
   Return  
   
End

Public Sub pnlToolButtons_Drop()
   
   Dim hCtrl As Control
   
   For Each hctrl In Last.Children
      If hCtrl.Tag = Drag.Source.Tag Then
         Message.info("can't drop - it already exists")
      Endif
   Next
   
   modEditAreaHelpers.ToolButton_Create(Last, Drag.icon, Drag.Source.tag, Last.Children[0].height, Me)
   const.Clinical_Toolbuttons_Refresh()
   
End

Public Sub SelectPatient_click()
   '-------------------------------------------------------------------
   'User has cancelled patient selection in popup patient selector form
   '-------------------------------------------------------------------
   
   If Last.tag = "cancel" Then Stop Event
   form_select.Visible = False
   VSplit_Main.Visible = True
   mnuView.Visible = False
   mnuSections.Visible = False
   mnuDecisionSupport.Visible = False
   mnuHelp.visible = False
   cmbSearch.SetFocus()
   
End

Public Sub pnlToolButtons_Menu()
   
   Dim form_config_toolbar As FConfigToolbar
   
   With form_config_toolbar = New FConfigToolbar
      .Init("FClinical", Toolbuttons)
      .Expand = False
      .ShowModal
   End With
   
End

Public Sub pnlWarnings_Menu()
   
   Dim form_config_warnings As FConfigWarnings
   
   If IsNull(currentconsult) Then Return
   
   With form_config_warnings = New FConfigWarnings
      .Init(currentconsult!patient!fk_patient, Warning_Icons)
      .Expand = False
      .ShowModal
   End With
   
End

Public Sub lblwarnings_MouseDown()
   
   pnlWarnings_Menu
   
End

Public Sub mnuView_Click()
   
   Select Case Last.tag
      Case "patients seen"
         FPatientsSeen.Init()
         FPatientsSeen.ShowModal()
      Case "all previous notes"
         Editor_ShowPage("All Previous Notes")
      Case "view by problem"
         '    Case "include deceased patients"
         '       If mnuView_IncludeDeceasedPatients.value = True Then
         '          Settings["FClinical/mnuView_IncludeDeceasedPatients.value"] = True
         '       Else
         '          Settings["FClinical/mnuView_IncludeDeceasedPatients.value"] = False
         '       Endif
         '    Case "include inactive patients"
         '       If mnuView_IncludeInactivePatients.value = True Then
         '          Settings["FClinical/mnuView_IncludeInactivePatients.value"] = True
         '       Else
         '          Settings["FClinical/mnuView_IncludeInactivePatients.value"] = False
         '       Endif
   End Select
Catch
   Return 
   
End

Public Sub webview_menu()
   '--------------------------------------------------------------
   'User has clicked over a webview browser eg used in FHTMLViewer
   'to display results and letters, create a popup menu so user
   'can do things like auto-copy back into the progress notes
   'with appropriate annotation.
   '--------------------------------------------------------------
   
   Dim hCtrl As Control
   Dim page As FLinkContainer
   Dim mnu As Menu
   
   For Each page In WorkspaceEditor.Windows
      If page = WorkspaceEditor.ActiveWindow Then
         For Each hctrl In page.VBoxEditor.Children
            If hctrl Is Form Then
               If hctrl.name = "FHtmlViewer" Then
                  FCurrentHTMLViewer = hctrl
                  FCurrentHTMLViewer.mnuWebView.Children.Clear()
                  mnu = New Menu(FCurrentHTMLViewer.mnuWebview) As "mnuWebview"
                  mnu.name = "mnuWebView_Copy"
                  mnu.caption = "Copy"
                  mnu.tag = "copy"
                  mnu = New Menu(FCurrentHTMLViewer.mnuWebview) As "mnuWebview"
                  mnu.name = "separator_1"
                  mnu.caption = ""
                  mnu = New Menu(FCurrentHTMLViewer.mnuWebview) As "mnuWebview"
                  mnu.name = "mnuWebView_Insert_Into_Notes"
                  mnu.caption = "Insert into notes"
                  mnu.tag = "insert into notes"
                  mnu = New Menu(FCurrentHTMLViewer.mnuWebview) As "mnuWebview"
                  mnu.name = "mnuWebView_Insert_And_Switch"
                  mnu.caption = "Insert into notes and switch back to editor"
                  mnu.tag = "insert into notes and switch back"
                  FCurrentHTMLViewer.mnuWebView.Popup()
                  Return
               Endif
            End If
         Next
      End If
   Next
   
End

Public Sub mnuWebView_Click()
   '--------------------------------------------------------------------------------------
   'This is experimental, but I've got sick of copy/paste from a result back to the notes
   'So there are two menu options - just to insert, so one can keep reading the result and
   'then just switch back by onself, or copy and insert with auto-switch back. The text is
   'also rendered in small italics to demonstrate it is not part of the users narrative
   'and is outlined with horizontal rulers. I'll test this and see how it goes.
   'FIXME THE insert into notes without switch back does switch back
   '--------------------------------------------------------------------------------------
   
   Dim sText As String
   
   Stop Event
   If IsNull(Last.tag) Then Return
   
   Select Case Last.tag
      Case "insert into notes", "insert into notes and switch back"
         sText = "<HR><small><B>" & FCurrentHTMLViewer.Get_Document_Details() & "</B></small><BR>"
         sText &= "<small><i>" & FCurrentHTMLViewer.WebView1.SelectedText & "<i></small>"
         sText &= "<HR><BR>"
         sText = Replace(stext, "\n", " ")
         If Not Editor_PageExists("New General Notes", "") Then 'user could have closed the progress note page
            Editor_ShowPage("New General Notes")
         Endif
         FGeneralNotesEditor.teNotes.Insert(".sometext")
         FGeneralNotesEditor.teNotes.richtext = Replace$(FGeneralNotesEditor.teNotes.richtext, ".sometext", sText)
         ' If Last.tag = "insert into notes and switch back" Then
         '    Editor_ShowPage("New General Notes")
         ' Endif
   End Select
Catch
   Return 
   
End

Public Sub txtURL_Activate()
   
   '  Editor_ShowPage("webpage", "a tag", txtURL.text)
   
End

Public Sub tbPreview_Click()
   
   Editor_ShowPage("Edit Notes")
   Message.info("Richard Stop and check FClinical tbPreview_click")
   
End

Public Sub lcImages_Menu()
   '------------------------------------
   'Show popup menu over the images list
   'fixme this does not exist
   '-------------------------------------   
   
   If lcImages.Count Then
      
   Endif
   
End

Public Sub mnuImages_Click()
   '----------------------------------------------------
   'this is the popup menu over the patient's photograph
   '-----------------------------------------------------  
   
   Dim fk_image As Integer
   Dim NewImage As Image
   Dim tempfile As String
   
   Select Case Last.tag
      Case "paste image"
         If Clipboard.type = Clipboard.Image Then
            NewImage = Clipboard.Paste()                                                   'retrieve the image
            tempfile = Temp() & ".png"                                                     'create file to save image to
            Goto SavePatientPicture                                                        'Save the picture
         Else
            Message.Info("Sorry, the clipboard does not seem to contain image data")
         End If
      Case "brightness"
         With FImageGet
            .btnOK.Caption = "Save Changes"
            .tbGetPicture.Visible = False 
            .HBox_ImageSize.Enabled = False  
            .Hbox_Quality.Enabled = False 
         End With
         Try FImageGet.Set_Image(PicPatient.Picture.Image)                                 'load picture to Image Manipulator
         If Not Error Then
            FImageGet.ShowModal()
            NewImage = Clipboard.Paste()                                                   'retrieve the image
            tempfile = Temp() & ".png"                                                     'create file to save image to
            Goto SavePatientPicture                                                        'Save the picture
         End If   
      Case "delete"
         If Message.Question("Are you sure you want to delete this patient's picture?", "Yes", "No") = 2 Then Return
         modDBConnect.exec_query("Update contacts.data_persons set fk_image =  null WHERE pk=" & currentconsult!patient!fk_person)
         modDBConnect.CommitTrans()
         PicPatient.Picture = Picture.Load("icons/misc/no_photo.png")
      Case "patient picture"
         ' PatientPicture = Currentconsult!images[lcImages.children[lcImages.index].tag]
         ' fk_image = Currentconsult!images[lcImages.children[lcImages.index].tag]!pk
         ' '    PersonPicture!path = CurrentThumb.Tag
         ' '     P!fk_image = modContactsDBI.Image_Save(PersonPicture, currentconsult.GetPK())
         ' '    If Not Error Then
         ' sql = "Update contacts.data_persons set fk_image = " & fk_image & " WHERE pk=" & currentconsult!patient!fk_person
         ' modDBConnect.exec_query(sql)
         ' modDBConnect.CommitTrans()
         ' Try PicPatient.Picture = Picture.Load(PatientPicture!path)
         ' '    Endif
         
   End Select
   Return
SavePictureToFile:
   
SavePatientPicture:
   NewImage.Save(Tempfile)                                                        'create a filepath
   fk_image = modConsultDBI.Image_Save(Tempfile, Currentconsult.GetPK(), modUtil.Calc_md5sum_File(Tempfile))                           'save to backend
   modDBConnect.exec_query("Update contacts.data_persons set fk_image = " & fk_image & " WHERE pk=" & currentconsult!patient!fk_person) 'link to the person
   modDBConnect.CommitTrans()
   Try PicPatient.Picture = Picture.Load(Tempfile)                     'show the picture
Catch
   Return   
   
End

Public Sub lcImages_Click()
   
   '----------------------------------------------------------------------------------
   'User has clicked on one row of the list container - hence selecting a patient
   'put that patient into the current patient collection, and photo into patient_photo
   '----------------------------------------------------------------------------------
   Dim CP As Collection
   
   If lcImages.Count Then
      
      CP = Currentconsult!images[Last.children[Last.index].tag]
      ' Editor_ShowPage("images", "The Image", CP)
      If IsNull(CP!tag) Then
         Editor_ShowPage("images", "Image:" & Str(CP!pk), CP)
      Else
         Editor_ShowPage("images", CP!tag, CP)
      Endif
      Print CP!pk, " is the key"
   Endif
   
End

Public Sub HBox_ConsultDetails_Enter()
   '---------------------------------------------
   'If user's mouse over the type of consultation
   'replace the label with a combo box
   '---------------------------------------------
   
   'cmbConsultationType.Visible = True
   '  lblConsultationType.visible = False
   
End

Public Sub HBox_ConsultDetails_Leave()
   '-------------------------------------------------
   'The consultation type combo is now made invisible
   'and its text shown on a label in its placee
   '--------------------------------------------------
   
   ' cmbConsultationType.Visible = False
   ' lblConsultationType.visible = True
   ' 
End

Public Sub tsCalculators_Click()
   
   Select Case Last.index
      Case 1
         If IsNull(PregCalc) Then
            PregCalc = New FPregCalc(HBox_PregCalc)
            obs = New Observer(PregCalc.tbInsert) As "PregCalc_tbEditArea"
            obs = New Observer(PregCalc.tbInsertRevised) As "PregCalc_tbEditArea"
         End If
      Case 2
         If IsNull(Calculator) Then
            Calculator = New FCalculator(HBox_Calculator)
         End If
   End Select
   
End

Public Sub PregCalc_tbEditArea_Click()
   '----------------------------------------------------------------------
   'Over-rides the tbInsert button click event in the pregnancy calculator
   'to get a summary of the text and insert into the progress notes
   '----------------------------------------------------------------------
   
   If IsNull(currentconsult) Then Return
   Select Case Last.tag
      Case "insert"
         FGeneralNotesEditor.teNotes.Insert(".sometext")
         FGeneralNotesEditor.teNotes.richtext = Replace$(FGeneralNotesEditor.teNotes.richtext, ".sometext", PregCalc.Dates_Summary_GetRichText())
      Case "insert revised"
         modUtilGUI.NotImplemented("Inserting revised dates into notes")
   End Select
   
End

Public Sub cmbSearch_Click()
   '-----------------------------------------------------------------------------------
   'User has clicked on the down arrow of the combo box and selected a previous patient
   '-----------------------------------------------------------------------------------
   
   Consult_Save()
   Gui_Clear()
   Patients_Find(Patients_Seen[cmbSearch.index]!fk_patient)
   
End

Public Sub txtOccupation_DblClick()
   '---------------------------------------------------------------------------
   'User has doubled clicked on Occupation? and wants to enter a new occupation
   '---------------------------------------------------------------------------
   
   With txtOccupation
      .Background = Color.White
      .pos = 0
      .ReadOnly = False
      If .text = "Occupation?" Then
         .text = ""
      End If
      .SetFocus
   End With
   
End '

Public Sub txtOccupation_keypress()
   '-----------------------------------------------------------
   'User typing in a new occupation, only allow a-z key presses
   '-----------------------------------------------------------
   
   ' If modUtilGUI.AllowKeys(const.AllowKeys_Letters, key.code) = False Then
   '    Stop Event
   '    Last.SetFocus
   ' End If
   If Key.code = Key.down And listview1.visible Then
      With listview1
         .MoveFirst
         .Item.Selected = True
         .SetFocus
      End With
   Endif
   
End

Public Sub txtOccupation_LostFocus()
   '---------------------------------------------------------------
   'User has given focus to txtOccupation and now clicked elsewhere
   'Save the occupation if it is not an empty string
   '---------------------------------------------------------------
   
   With txtOccupation
      .Background = txtAge.Background
      .pos = 0
      .ReadOnly = True
      If .text = "" Then
         .text = "Occupation?"
      End If
   End With
   bExit = True    'prevents re-entry when spell checking   
   Occupation_Save
   bExit = False  
   
End

Public Sub Occupation_Save()
   '-------------------------------------------------------------------------------------
   'Saves the patient's occupation... quite complex to make the task quick for the user
   'FIXME put all the spelling stuff somewhere else across all modules
   '*Allows entry of an occupation
   '*Auto-spell checks this - pops up dialog if mistakes
   '*Checks if occupation exists in occupational history
   '*Asks if user wants to make this the default if it does, otherwise becomes default
   '*Changes appropriate back-end flags to make all other occupations not main or current
   'Returns true if occupation was changed.
   '-------------------------------------------------------------------------------------
   
   Dim OH As Collection
   Dim OC As Collection
   Dim occupational_history As CRow
   Dim fk_occupation As Integer
   Dim sMsg As String
   
   If Bexit Then Return
   If Trim(txtOccupation.text) <> "" Then
      SpellCheck_TextBox(txtOccupation)                                  'popup spelling correction dialog if needed
      OC = modCommonDBI.Occupation_Get(Trim(txtOccupation.text))         'check if occupation is in the database
      If Not IsNull(OC) Then                                             'if it is retrieive the key
         fk_occupation = OC!pk
      Else
         smsg = "The occupation:\n\n " & Trim(txtOccupation.text) & "\n\nwas not found in the database.\n\n"
         "Please check the spelling and if ok confirm you wish to add this occupation to the database.\n\n"
         "Note also that this occupation will be registered as the current and main occupation. You can "
         "always go back and change any  of this in the occupations module."
         If Message.Question(sMsg, "Yes - Add Occupation", "Cancel") = 2 Then
            txtOccupation.text = ""
            txtOccupation.SetFocus
            Return
         Else
            fk_occupation = modCommonDBI.Occupation_Save(Lower(Trim(txtOccupation.text)))
         End If
      Endif
      '---------------------------------------------------------------------- 
      'Check this occupation is not already in  the patient's occupations list
      '-----------------------------------------------------------------------
      For Each OH In currentconsult!occupational_history
         If OH!fk_occupation = fk_occupation Then  
            sMsg = "The patient already is listed as having the occupation you have entered: '"
            sMsg &= Trim(txtOccupation.text) & "'\n\n"
            sMsg &= "Do you wish to have this occupation displayed as the patient's current and main occupation?"
            Message.Title = "Occupation exists in patient's record"
            Select Case Message.Question(sMsg, "Yes", "No")
               Case 1  'Yes, have to make all the others inactive  
                  modOccupationalHistoryDBI.Patient_Occupations_Mark_NotCurrentOrMain(currentconsult)
                  modOccupationalHistoryDBI.Patient_Occupation_Make_Current_And_Main(OH!fk_occupational_history)
                  modContactsDBI.Person_Set_occupation(currentconsult!patient!fk_person, fk_occupation)
                  modDBConnect.CommitTrans()
                  Try FGPMPTCA.GPMP_Update                 'If care planning module loaded update the LaTex
               Case 2 'No, then reset the default occupation in the patients view.
                  If Not IsNull(currentconsult!patient!occupation) Then
                     txtOccupation.Text = UCase(Left(currentconsult!patient!occupation, 1)) & Right(currentconsult!patient!occupation, Len(currentconsult!patient!occupation) - 1)
                     If currentconsult!patient!retired Then
                        txtOccupation.text &= " (Retired)"
                        txtOccupation.pos = 0
                     End If
                  End If
            End Select
            Return
         Endif
      Next
      '------------------------------------------------------------------------------------------------------
      'Ok, not in their history
      'First, mark all other occupations in their occupational history as not current and not main occupation
      '------------------------------------------------------------------------------------------------------
      modOccupationalHistoryDBI.Patient_Occupations_Mark_NotCurrentOrMain(currentconsult)
      '--------------------------------------------------------------------------
      'Now save the new occupation for this patient
      'Bizaare as it may seem the occupation is kept in two places. argue with me
      'and you can then fix the code base (historical)
      '--------------------------------------------------------------------------
      modContactsDBI.Person_Set_occupation(currentconsult!patient!fk_person, fk_occupation)
      sMsg = "New occupation noted:" & modStrings.Capitalise_Words_In_String(Trim(txtOccupation.text))
      occupational_history = New CRow   
      occupational_history!fk_occupation = fk_occupation
      occupational_history!fk_consult = currentconsult.GetPK()
      occupational_history!current = True
      occupational_history!main_occupation = True  
      occupational_history!fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, sMsg, const.cSection_OccupationalHistory, -1, "occupations", 0, False)
      occupational_history.Save("clin_history.occupational_history", "fk_occupational_history")
      modDBConnect.CommitTrans()
      Try FGPMPTCA.GPMP_Update                                         'If care planning module loaded update the LaTex
      Refresh_Section(const.cSection_HealthSummary)                    'if health summary showing then refresh that
      currentconsult!patient!fk_occupation = fk_occupation
      currentconsult!patient!occupation = modStrings.Capitalise_Words_In_String(txtOccupation.text)
      currentconsult.Refresh("occupational_history")                                
      With Last
         .Background = txtAge.Background
         .ReadOnly = True
         .pos = 0
      End With
      Try FOccupation.Occupations_Reload   'if this form is open reload the occupations list
   Else
      If Not IsNull(currentconsult!patient!occupation) Then 'txtOccupation is blank, try and replace with existing one
         txtOccupation.text = currentconsult!patient!occupation
      Else
         txtOccupation.text = "Occupation?"
      Endif
   End If
   Refresh_Section_Instance(const.cSection_HealthSummary) 
   
End

Public Sub txtOccupation_Enter()
   
   txtOccupation.border = True   
   
End

Public Sub txtOccupation_Leave()
   
   txtOccupation.border = False
   txtOccupation.ReadOnly = True
   txtOccupation.Background = txtAge.Background
   
End

Public Sub txtOccupation_Activate()
   '--------------------------------------------------------
   'User has pressed <enter> key Save the current occupation
   '--------------------------------------------------------
   
   Occupation_Save()
   
End

Public Sub Hsplit_ToolBar_Lists_Resize()
   
   If Not IsNull(currentconsult) Then Allergies_Sensitivities_Refresh()
   
End

Public Sub Hsplit_ProblemLists_Resize()
   
   lblMajorProblems.width = Hsplit_ProblemLists.Children[0].width
   lblSignificantProblems.width = Hsplit_ProblemLists.Children[1].width
   
End

Public Sub Form_Resize()
   
   Hsplit_ProblemLists_Resize
   
End

Public Sub cvwRecalls_Select()
   
   If IsNull(currentconsult) Then Return
   cvwRecalls.MoveCurrent()
   currentrecall = currentconsult!recalls_logged[cvwRecalls.Item.key]
Catch
   Return 
   
End

Public Sub cvwRecalls_Menu()
   '------------------------------------------------------------------------
   'Adjust the popup menu text to indicate the usual default repeat interval
   'turn back on (could be off) all menu options
   '------------------------------------------------------------------------
   
   Dim menuitem As Menu
   
   cvwRecalls.MoveCurrent()
   If cvwRecalls.count Then
      For Each menuitem In mnuTabbedListRecalls.Children
         menuitem.Enabled = True
      Next
      mnuTabbedListRecalls_Completed.caption = "Mark Completed Repeat in " & currentrecall!interval & currentrecall!abbrev_text
   Else
      '-------------------------------------------------------------
      'allow the menu, but only couple of things
      '-------------------------------------------------------------
      For Each menuitem In mnuTabbedListRecalls.Children
         Select Case menuitem.Tag
            Case "view audit trail", "help", "exit"
               menuitem.Enabled = True
            Case Else
               menuitem.Enabled = False
         End Select
      Next
   End If
   mnuTabbedListRecalls.popup()
Catch
   Return 
   
End

Public Sub cvwLettersReceived_MouseDrag()
   
   If Not cvwLettersReceived.count Then Return 
   If cvwLettersReceived.Selection.count = 0 Then Return   
   Last.MoveCurrent
   Drag.icon = Picture.Load("icons/16/referrals_3_1616.png") 'parent.parent.parent.picture
   Last.Drag(Str(currentconsult!letters_received[cvwLettersReceived.Selection[0]]!pk_document))
   'Catch
   'Return   'fixme is possible to get crash here ?whty 
   
End

Public Sub txtConsultDate_Activate()
   
   Consult_Edit
   
End

Public Sub txtConsultDate_LostFocus()
   
End

Public Sub txtConsultDate_KeyPress()
   
   If Not modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, Key.code) Then
      Stop Event
   Endif
   
End

Public Sub Consult_Edit_Last()
   '------------------------------------------------------------
   'Allow editing of a consultation with full audit trail   
   'if bLastConsult = true the pull in the last consultation
   'called by tbSections_Click
   'and whatever mechanism I set up to edit the others FIXME
   'see also FuserPreferences where this preference is set up
   '-------------------------------------------------------------
   
   Dim new_date As Date
   Dim now_no_time As Date
   Dim date_diff As Integer
   Dim R As Result
   Dim PN As Collection
   Dim last_consult As Collection
   Dim sMsg As String
   
   If Not Consult_Edit_Show_Tip() Then Return
   bEditing = True             ' fixme ? need this Now
   last_consult = modConsultDBI.fk_consult_get_for_date_and_staff_and_consult_type(currentconsult!patient!fk_patient, consultationtypes[cmbConsultationType.Index]!pk)
   If IsNull(last_consult) Then
      Message.info("no consult found")
      Return
   Endif
   new_date = last_consult!consult_date   
   now_no_time = modUtil.Make_Date_From_String(Format(Now(), "dd/mm/yyyy"))
   date_diff = DateDiff(New_date, now_no_time, gb.day)
   If date_diff < 0 Then
      sMsg = "You can only edit consultation that has a date before today!"
      Message.Info(smsg)
      txtConsultDate.text = Format(Now(), "dd/mm/yyyy")
      Return
   End If  
   Consult_Edit(last_consult)
   
End

Public Function Consult_Edit_Show_Tip() As Boolean
   
   Dim sMsg As String
   
   If Not modAdminDBI.Has_User_Seen_Tip("FClinical.EditLastConsult") Then        'give them the blurb if they've not banished it previously
      sMsg = "<P><B>Very important things to understand</B></P>"
      "<UL><LI>You can only ever edit your own consultations as your staff ID will be used to retrieve the data"
      "<LI>The entire consultation content from that date will be re-loaded back into EasyGP"
      "<LI>You may continue adding new notes today for that previous consultation"
      "<LI>Those notes will of course be saved back to the previous consultation date." 
      "<LI>At the moment only 'at consultating room consultations' i.e those done in the surgery are accessible from this button. "
      "<LI>If you want to edit other dates not of this type you can do so by clicking the calander button next to the consult date and selecting a date, or by typing in the date in the date text box." 
      "</UL>"
      "<P><B>Be aware that auditing will be conducted as follows:</B><P> "
      "<UL>"
      "<LI>The entire contents of your <U><I>previous consultation notes <B>before</B> you add new notes</U></I>  will be archived as part of an audit trail"
      "<LI>These will always be available for medico-legal audit and will visibly show up in the 'All Progress Notes' section when the 'Include Audit Trail option is checked"
      "<LI>Whatever you write today will entirely replace those notes archived to the audit trail"
      "</UL>"
      With FUsageTip
         .Init("Editing the Last Consultation", "FClinical.EditLastConsult", sMsg)
         If Not .ShowModal() Then Return
      End With  
   End If 
   Return True 
   
End

Public Sub Consult_Edit(consult_to_edit As Collection)
   '------------------------------------------------------------------------------------------- 
   ' Sets up easygp so that today = previous date
   ' i.e the consult of a previous date is reloaded and an appropriate audit trail will be kept
   ' ------------------------------------------------------------------------------------------ 
   
   WorkspaceEditor_Clear()             'remove all tabs from workspace
   cmbConsultationType.index = cmbConsultationType.Find(consult_to_edit!consult_type)
   With lblWarningEditingConsult       'vividlyi signal to user this what's happening
      .Foreground = Color.Red
      .Background = Color.Yellow
      If IsNull(consult_to_edit!fk_consult) Then
         .text = "NEW CONSULTATION"
      Else
         .texT = "EDIT LAST CONSULT"
      Endif
   End With
   HBox_ConsultDetails.Background = Color.Yellow
   With lblConsult
      .Background = Color.Yellow
      .Foreground = Color.Red
      If IsNull(consult_to_edit!fk_consult) Then
         .text = " on "
      Else
         .text = " from "
      Endif
   End With
   With datebox1
      .Background = Color.Yellow
      .Foreground = Color.Red
      .value = consult_to_edit!consult_date
      .Visible = True   
   End With
   If IsNull(consult_to_edit!fk_consult) Then
      currentconsult = New CConsult(currentconsult!patient, consultationtypes[cmbConsultationType.Index]!pk, True) 'force new consult 
   Else
      currentconsult.Set_pk(consult_to_edit!fk_consult)
   Endif
   currentconsult.Set_date(consult_to_edit!consult_date) 
   Editor_ShowPage("All Previous Notes")
   Editor_ShowPage("New General Notes")
   
End

Public Sub cvwResults_Select()
   '----------------------------
   'User has clicked on a result
   '---------------------------- 

   If bexit Then Return 
   cvwResults.MoveCurrent
   cvwResultsReceived_Key = cvwResults.item.key
   If WorkspaceEditor.ActiveWindow.Caption <> "Referrals" And WorkspaceEditor.ActiveWindow.Caption <> "Export Wizard" And WorkspaceEditor.ActiveWindow.Caption <> "Pregnancy" Then
      Inbox_showResult
   End If   
   Return
   'special case - pregnancy don't load onto a tab, show it within the pregnancy modulee
   If WorkSpaceEditor.ActiveWindow.Caption = "Pregnancy" Then
      If FPregnancy.IsInEditMode() Then 
         FPregnancy.Result_Show(currentconsult!results_received[cvwResultsReceived_Key]!html)
         'fixme could be a pdf
      End If  
      ' Else
      '    Inbox_showResult
   Endif
Catch
   Return 
   
End

Public Sub cvwResults_DblClick()
   '------------------------------------------------------------------
   'As the letter writer needs the click or select event to allow
   'user to drag and drop a result copy to the letter being written
   'viewing resulits per-se occurs via the dblclick event if the letter
   'writer is open otherwise the select event
   '-------------------------------------------------------------------  
   
   If Not Last.count Then Return
   If WorkspaceEditor.ActiveWindow.Caption <> "Referrals" Then Return
   If IsNull(currentconsult) Then Return
   Inbox_showResult()
   
End

Public Sub cvwResults_Menu()
   'key is set cvwresultsRecieved_key in cvwResults_select()
   
   Dim Document As Collection
   Dim mnu As Menu
   Dim bHaveDeletedResult As Boolean
   
   For Each mnu In mnuResultsReceived.Children                        'default to no items available on menu
      mnu.Enabled = False
   Next
   For Each Document In Deleted_Documents                                      'check if there are deleted results user may want to undelete
      If Document!fk_lu_display_as = const.Document_Display_As_Result Then     'there are?
         mnuResultsReceived_UndoDelete.Enabled = True                          ' enable undelete menu option
         bHaveDeletedResult = True  
         Break
      Endif
   Next
   If Not cvwResults.count Then                                                'if no results in the list
      If bHaveDeletedResult = False Then Return                                'and nothing to  undelete leave
   Endif
   cvwResults.MoveCurrent()
   mnuResultsReceived_ShowGraphable()
   If cvwResults.count Then                                                   'if there are menu options
      If cvwResults.Selection.count > 1 Then                                  'see if more than one item has been selected
         mnuResultsReceived_PrintSelected.Enabled = True                      'enable appropriate menu's
         mnuResultsReceived_PrintAll.Enabled = True
         mnuResultsReceived_JoinPDF.Enabled = True
      Else
         For Each mnu In mnuResultsReceived.Children
            If mnu.Name <> "mnuResultsReceived_UndoDelete" Then
               mnu.Enabled = True
            End If   
         Next
         mnuResultsReceived_JoinPDF.Enabled = False
      Endif
      If currentconsult!results_received[cvwResultsReceived_Key]!msh_transmitting_entity = "snail mail" Then 'can only send back non-hl7 e.g scanned FIXME, LATER ?IMAGES
         mnuResultsReceived_Refile.Enabled = True
      Else
         mnuResultsReceived_Refile.Enabled = False
      End If
   End If   
   mnuResultsReceived.Popup()
   '
Catch
   Return 'FIXME still getting null object bug here.
   
End

Public Sub tbJoin_Click()
   '----------------------------------------------
   'Joins any pdfs's transfer to the lvFilesToJoin
   'the panel containing the join stuff is shown
   'when user elects to transfer pdf to join
   '  FIXME pretty messy routine proof of concept
   ' FDocumentsMetaData to fix the duplicate md5 stuff
   '----------------------------------------------
   
   Dim pdf_files As New String[]
   Dim fname As String
   Dim local_fname As String
   Dim remote_fname As String
   Dim x As Integer
   Dim unique_filename As String
   Dim D As New Crow
   Dim md5Output As String 'fix me put the md5 calcs in this and FDocumentMetadata into another class somewhere (duplication)
   Dim signed_off As New Collection
   Dim archiving_dir As String = modAdminDBI.Config_Get("document_archiving_directory", "", Null, modDBConnect.currentUser!fk_clinic)
   
   Select Case Last.tag
      Case "join"
         If lvFilestojoin.count = 0 Or Trim(txtTagUser.text) = "" Then Return   'no files or no tag get out of here.
         fname = Temp$                                                          'get temporary filename (no path)
         lvFilestojoin.MoveFirst                                                'add all the files into a collection
         For x = 0 To lvFilestojoin.count - 1
            pdf_files.Add(archiving_dir &/ lvFilestojoin.item.text)
            lvFilestojoin.MoveNext
         Next
         fname = modPrinting.Join_PDF(pdf_files, fname)                         'join the files together
         local_fname = fname
         remote_fname = File.Name(fname)
         modFiles.Put("document_archiving_directory", remote_fname, local_fname) 'copy the file from /tmp to the filed directory
         '-----------------------------------------------------------------------------------
         'the new file now has to be filed as one would a newly scanned in and allocated file
         'except that it won't end up in the inbox, but will be marked as filed
         '------------------------------------------------------------------------------------
         D!fk_staff_filed_document = modDBConnect.currentUser!fk_staff
         D!date_created = lvFilesToJoin.Tag[0]!date_created
         D!fk_patient = currentconsult!patient!fk_patient
         D!originator = lvFilesToJoin.Tag[0]!originator  'get the original originator
         D!fk_sending_entity = lvFilesToJoin.Tag[0]!fk_sending_entity
         D!tag = D!originator & " - joined pdf"
         D!tag_user = Trim(txtTagUser.text)
         D!fk_lu_urgency = const.UrgencyLevelRoutine
         Exec ["/usr/bin/md5sum", fname] To md5Output
         D!md5sum = Left(md5Output, InStr(md5Output, " ") - 1)
         D!fk_staff_destination = lvFilesToJoin.Tag[0]!fk_staff_destination
         If TabStrip_Lists.index = cTabResults Then
            D!fk_lu_display_as = const.Document_Display_As_Result
         Else
            D!fk_lu_display_as = const.Document_Display_As_Letter
         Endif
         D!incoming_referral = False
         D!concluded = True
         D.Save("documents.documents", "fk_document")                              'chicken and egg, need unique new document-pk for a unqiue filename
         '--------------------------------------------------------------------------------------------------
         'now work out a unique readable filename usign patient's name, birthdate and the unique document pk
         '--------------------------------------------------------------------------------------------------
         unique_filename &= modutil.Filename_Protect(Trim(currentconsult!patient!wholename)) & "." & modutil.DateString_Encode(Format(currentconsult!patient!birthdate, "dd/mm/yyyy")) & "." & Str(Currentconsult!patient!fk_patient) & "."
         unique_filename &= modutil.Filename_Protect(D!originator) & "." & Str$(D!fk_document) & "."
         unique_filename &= "pdf"
         Move archiving_dir &/ File.Name(fname) To archiving_dir &/ unique_filename  'rename the file in the archived document dir to this unique name
         D.put_unchanged(D!fk_document, "fk_document")                               'resave this as the source_file into the backend
         D!source_file = unique_filename
         D.Save("documents.documents", "fk_document")
         signed_off!fk_staff = modDBConnect.currentUser!fk_staff                     'mark document as 'signed off'
         signed_off!fk_document = D!fk_document
         signed_off!date = Now()
         modInboxDBI.Document_SignOff(signed_off)
         lvFilestojoin.MoveFirst                         ' 'finally remove the original files
         For x = 0 To lvFilestojoin.count - 1  'Now mark the orginal documents in the backend as deleted
            modDBConnect.update("documents.documents", Null, ["pk": lvFilesToJoin.Tag[x]!pk_document, "deleted": True])
         Next
         modDBConnect.CommitTrans()
         For x = 0 To lvFilestojoin.count - 1
            modFiles.Delete("document_archiving_directory", lvFilestojoin.Item.Text)
            lvFilestojoin.MoveNext
         Next
         lvfilesToJoin.Clear()
         If TabStrip_Lists.index = cTabResults Then
            cvwResults_Refresh(True)
         Else
            cvwLettersReceived_Refresh(True)
         Endif
         Goto Remove_Join_Panel
      Case "clear"
         lvFilesToJoin.Clear
      Case "close"
         Goto Remove_Join_Panel
   End Select
   Return
   
Remove_Join_Panel:
   VBox_Files_To_Join.Visible = False
   Vbox_MiniGraphs.Visible = True
   
Catch
   modDBConnect.RollBack()
   
End

Public Sub pbMeasurementGraph_Menu()
   
   mnuGraph.popup
   
End

Public Sub mnuGraph_Click()
   ' Dim im As Image
   
   '  im = pbMeasurementGraph.Picture.Image
   Select Case Last.tag
      Case "copy"
         Clipboard.Copy(pbMeasurementGraph.Picture.Image)   
   End Select 
Catch
   Return 
   
End

Public Sub picPatient_Menu()
   
   If IsNull(currentconsult) Then Return 
   mnuImages.Popup()
   
End

Public Sub gvAllergies_Menu()
   '-------------------------------------------------------------------------------
   'popup a menu over the allergies list on the toolbar
   'Even if no allergies or sensitivities exist there will be
   'one row in the grid saying:
   'NO RECORD OF PATIENT BEING ASKED ABOUT ALLERGIES
   '(see Allergies_Sensitivities_Refresh()
   'if no allergies exist then give the user a quick option toadd to the allergies
   'table and record that they have asked patient and 'nil known' will be shown
   'i.e expose the menu option that allows this
   '---------------------------------------------------
   
   If currentconsult!allergies.count Then                                 'have at least an allergy or sensitivity
      mnuToolbarAllergies_NoAllergiesSensitivities.Enabled = False       'don't need the quick 'nil known allergies/sensitivities menu option
   Endif
   If gvAllergies.Rows.count And currentconsult!allergies.count = 0 Then   'nothing recorded yet?
      mnuToolbarAllergies_NoAllergiesSensitivities.Enabled = True       'allow the quick add 'nil known' menu option
   End If   
   mnuToolbarAllergies.Popup                                               'popup the menu
   
End

Public Sub mnuToolbarAllergies_Click()
   '------------------------------------------------------------------------- 
   'User has clicked on the popup menu over the allergies grid on the toolbar
   'Either change the font, if quick-insert 'nil known'
   'see the FIXME comments regarding the font
   '------------------------------------------------------------------------- 
   
   Dim allergy As CRow  
   Dim ProgressNote As CRow   
   
   Select Case Last.tag
      Case "font"                                               'change the default font **Bug will not refresh until program restarts FIND THIS FIXME
         modUtilGUI.Columnview_SetFont(gvAllergies, "FClinical")
      Case "nil known"
         Message.title = "Auto-Enter No Known Allergies"
         If Message.Question("Please confirm that you have asked the patient they have no known allergies or sensitivites.\n\nOnce done you may click 'Confirm' to automatically save this information.", "Confirm - No Known Allergies", "Cancel") = 2 Then Return   
         allergy = New CRow
         allergy!fk_consult = currentconsult.GetPK()
         allergy!nil_allergies_sensitivities = True
         ProgressNote = New CRow 
         ProgressNote!fk_consult = currentconsult.GetPK()
         ProgressNote!notes = "Allergies: patient questioned and reports nil known."
         ProgressNote!fk_section = const.cSection_allergies
         ProgressNote!fk_audit_action = const.cAuditAction_Insert                 
         ProgressNote!problem = "Allergies"
         ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
         allergy!fk_progressnote = progressnote!fk_progressnote
         allergy.Save("clin_allergies.allergies", "fk_allergy")
         modDBConnect.CommitTrans()
         Allergies_Sensitivities_Refresh                        'reload the allergies/grid
         Refresh_Section_Instance(const.cSection_HealthSummary) 'Refresh the health summary if showing
         Try FAllergy.Allergies_Reload_External                 'If the allergy module showing, reload the allergies list there
         Try FGPMPTCA.GPMP_TCA_Reload_Latex                     'reload latex if working on care planning
   End Select
Catch
   Return 'weird gambas bug where message box not yet displayed, user clicks on button again > bombs.
   
End

Public Sub SpellCheck_TextBox(tb As TextBox)
   
   bexit = True    'fixme shouldn't need this flag - check all category spell checking throughout program
   teForSpelling.text = tb.text
   bexit = False
   
   SpellChecker.init(tb)
   SpellChecker.StartSpelling()
   
End

Public Sub txtOccupation_Menu()
   
   mnuToolBar_Occupations.Popup
   
End

Public Sub mnuToolBar_Occupations_Click()
   
   'User has selected edit the occupation
   txtOccupation_DblClick() 
Catch
   Return 
   
End

Public Sub Occupation_Select(occupation As Collection)
   '----------------------------------------
   'Select an occupation from the popup list
   'called by Listview1_dblclick() 
   '-----------------------------------------   
   
   bexit = True   
   txtOccupation.Text = occupation!occupation
   bexit = False
   Occupation_Save
   
Catch
   Return
   
End

Public Sub txtOccupation_KeyRelease()
   '--------------------------------------------------------
   'Pop up a list of occupations for the user to choose from
   '--------------------------------------------------------
   
   occupations = modCommonDBI.Occupations_Get(listview1, txtOccupation)
   If Not IsNull(occupations) Then
      listview1.height = Min(txtOccupation.height * occupations.Count, vBoxWorkSpace.height)
   End If   
   
End

Public Sub ListView1_KeyPress()
   
   If Key.code = Key.return Then
      ListView1_DblClick()
   Endif
   
End   

Public Sub ListView1_DblClick()
   
   listview1.Visible = False  
   Wait
   listview1.MoveCurrent
   Occupation_Select(occupations[listview1.Item.key])
   
End

Public Sub txtOccupation_GotFocus()
   
   With listview1
      .top = txtOccupation.top + txtOccupation.Height + pnlComms_Birthdate_Occupation.top
      .left = VBoxDemographicDetails.left + VBox_Occupation_Birthdate.left + VBox_Occupation_Birthdate.padding 
      .Visible = False
   End With
   
End

Public Sub ListView1_Leave()
   
   Last.visible = False
   
End

Public Sub tlReminders_Menu()
   
   mnuToolbarRecallsDue.Popup()
   
End

Public Sub mnuToolbarRecallsDue_Click()
   
   modUtilGUI.Columnview_SetFont(tlReminders, "FClinical")
   
End

Public Sub DateBox1_Activate()
   '-------------------------------------------------------
   'This is the datebox containing the consultation date
   'attempt to load in edit mode the requested consult date
   '-------------------------------------------------------  
   
   Dim SC As New Collection
   Dim sMsg As String 
   Dim now_no_time As Date = modUtil.Make_Date_From_String(Format(Now(), "dd/mm/yyyy"))
   
   If Not Consult_Edit_Show_Tip() Then Return
   SC = Currentconsult!staff_members_consults
   If Not SC.Exist(Format(DateBox1.value, "dd/mm/yyyy")) Then
      sMsg = "There was no consultation found that you have entered notes for on the selected date: " & Format(DateBox1.value, "dd/mm/yyyy") & ".\n\n"
      smsg &= "As we all forget to write up consultations sometimes, or, may see a patient after hours or at weekends, "
      sMsg &= "EasyGP will allow you do create a new consultation but will  create an audit trail and annote the notes that the consultation was written up "
      sMsg &= "on today's date, not the date the consultation took place.\n\n"
      sMsg &= "You will need to enter the time using 24hr time format into the consultation date box on the toolbar before saving this past consultation.\n\n"
      smsg &= "Would you like to insert a consultation into the notes for that date?\n\n"
      If Message.Question(smsg, "Yes - Insert a Consultation", "No") = 2 Then Return
      If DateDiff(modUtil.Make_Date_From_String(Format(DateBox1.value, "dd/mm/yyyy")), now_no_time, gb.day) < 0 Then
         sMsg = "You can only create a consultation that has a date before today!"
         Message.Info(smsg)
         Return
      Endif
      Consult_Edit(["consult_date": modUtil.Make_Date_From_String(Format(DateBox1.value, "dd/mm/yyyy")), "consult_type": cmbConsultationType.Text])
      datebox1.SetFocus
   Else
      Consult_Edit(SC[Format(DateBox1.value, "dd/mm/yyyy")])
   Endif
   
End

Public Sub DateBox1_Click()
   
   DateBox1_Activate()
   
End

Public Sub rbTabbedLists_Click()
   
   Select Case Last.tag
      Case "requests ordered"
         cvwResults.Visible = False
         cvwRequests.Visible = True                            'show requests order
         TabStrip_Lists.ToolTip = "Display previous requests"
         modEditAreaHelpers.Patient_Requests_Show(currentconsult, cvwRequests)
      Case "results received"
         TabStrip_Lists.ToolTip = "Display available results"  'show results received
         cvwRequests.Visible = False
         cvwResults.Visible = True
         cvwResults_Refresh(True)
      Case "letters received"
         cvwReferrals.Visible = False                    'then show letters received
         cvwLettersReceived.Visible = True
         TabStrip_Lists.ToolTip = "Display Letter Received"
         cvwLettersReceived_Refresh(True)
      Case "letters written"
         cvwReferrals.Visible = True                     'and visa-versa
         cvwLettersReceived.Visible = False
         currentconsult.Refresh("referrals_written")
         cvwReferrals_Fill()
         cvwReferrals.SetFocus()
   End Select
   
End

Public Sub VBox_Requests_Leave()

   bexit = True
   cvwResults.UnselectAll()  'otherwise for some bizaare reason unselect triggers cvwResults_Select()
   cvwRequests.UnselectAll()
   bexit = False

End

Public Sub VBox_Letters_Referrals_Leave()
   
   cvwLettersReceived.UnselectAll()
   cvwReferrals.UnselectAll()
   
End
