' Gambas class file
' Copyright (C) 2008-2010 Dr Richard TERRY

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' Notes to put somewhere
' note the tag's in the recall menu == the pk of audit.lu_action table.
'-------------------------------------------------

'These temporarly probably need removal at some stage
Private iCertificatetype As Integer = const.certificate_type_medical 'default to this
Private FMetaData As FDocumentMetaData
Private Deleted_Document_keys As Collection 
Private synonyms As Collection 
Private currentobservations As Collection 
Public currentTemporaryWebbrowserHTMLFilename As String 'temporary file being displayed in browser window
Private CurrentPastHistoryList As Columnview     'three Past history lists on TabStripProblemLists, reference one in use
Private bKeyValid As Boolean                     'used where textboxes need to validate key presses
Private bExit As Boolean                         'general flag used to prevent recursion into routine
Private currentconsult As CConsult               'the 'master' class for the patient
Private currentpasthistory As Collection         'the current health issue/past history item being manipulated
Private currentRecall As Collection              'the current recall being maninpulated
Private GraphData As Collection                  'collection pertaining to current graph being shown
Private MeasurementDefaults As Collection        'default measurements for patient eg INR/HBA1c
Private consultationtypes As Collection          'eg at surgery, home, on phone
Public EditorPages As Collection                 'all pages which are stuck onto the workspace
Private Const cListPrescriptions As Integer = 0  'all these reference lists of tabstip_lists
Private Const cListRequests As Integer = 1 
Private Const clistReferrals As Integer = 2 
Private Const clistRecalls As Integer = 3
Private Const cListCertificates As Integer = 4
Private Const clistMeasurements As Integer = 5
Private Const cMainDisplay_DataEntry As Integer = 1 
Private Const cMainDisplay_ProgressNotes As Integer = 2
Private Const cMainDisplay_CarePlan As Integer = 3 
Private obs As Observer                           'Observer used when FHelp is being shown, to detect the help close button
Private form_select As New FPatientsSelect        'popup multi-select patient form
Public FHelp As FBrowser                          'shows help for anywhere in FClinical
Private ScratchPad As FScratchPad                 'embedded 'jotter' or scratch pad
Public Form_ExportClinical As New FExportClinical 'Allows user to export notes from FClinical as pdf
Private FPDF As FPdf
Static Private form_clinical As FClinical         'allows FClinical Access from anywhere  = Me -see Init()
        

Static Public Function Help_Show(sPath As String, heading As String, flag As Boolean)
   '--------------------------------------------
   'shows help or whatever in the webkit browser
   '-------------------------------------------- 
  form_clinical.vBoxWorkSpace.Visible = Not Flag
  form_clinical.FHelp.Visible = flag
  If flag Then 
      form_clinical.FHelp.$currenthview.url = sPath
  End If
End



Static Public Function Display_Coding_System()
   'Form may not be loaded, so try
   Try form_clinical.lblCodingSystem.text = "Coding System:" & modCodingDBI.coding_system!system

End

Public Sub tbHelp_close_Click()
  Stop Event
  Help_Show("", "", False)
End

Static Public Function Editor_RemovePage(sKey As Variant, Optional bCloseAll As Boolean = False)
   '-------------------------------------------------------------------------------------------------
   'Removes 1 or all pages  from the EditorPages collection and its associated workspace tab
   'The key of the hWindow can be integer if past history progress notes page or a string eg "Travel"
   'If we are implicitly calling this page (ie - it is not being shut down by the user closing a tab
   'or the program exiting - then cancel the save of information on this page
   'For example - we use this when the user may have deleted a past history item, whilst still having
   'unsaved progress notes on this item in a progress notes editor.
   '-------------------------------------------------------------------------------------------------  
   Dim hWindow As Window
   Dim ProgressNotePage As FProgressNotePage
   Dim Page As FLinkContainer
   Dim hCtrl As Control
   Dim frmConsult As FProgressNotePage
   form_clinical.WorkspaceEditor.Lock()
   For Each page In form_clinical.WorkspaceEditor.Children
      If bCloseAll Then
           page.Close()
      Else
         If page.tag = sKey Then
            '------------------------------------------------------------------------------------
            'Found a specific page  if this is a progress notes page, stop it saving its contents
            'when frmConsult.form_close() is called, it attempts to save the editor contents
            '------------------------------------------------------------------------------------
            form_clinical.EditorPages.Remove(skey)
            For Each hctrl In page.VBoxEditor.Children     
               If hctrl Is Form Then
               Select Case hctrl.Name
               Case "FProgressNotePage"
                     frmConsult = hctrl       
                     frmConsult.bCancelSave = True  
                     Break
                End Select
               End If
            Next
            page.Close
            Break
         End If   
      End If   
   Next
   form_clinical.WorkspaceEditor.Unlock()
End

Static Public Function WebBrowser_IsVisible() As Boolean
   '---------------------------------------------------------------------------------------
   'Returns true if the central web browser control is visible
   'USAGE:  e.g if another form is using the central web browser and has updated something
   '        which needs the central area to update as well eg scratchpad
   '---------------------------------------------------------------------------------------
   Try Return form_clinical.vBoxWebBrowser.Visible
End

Static Public Sub WorkspaceEditor_Show()
   '-------------------------------------------------------------------------------------------
   'WorkSpaceEditor is a workspace control - currently until replaced by the 'emulated browser'
   'the main control on FClinical which has all the tabs for example clincal notes, or any
   'section loaded by Editor_ShowPage()
   '-------------------------------------------------------------------------------------------
     form_clinical.Form_ExportClinical.Visible = False  
     form_clinical.WorkSpaceEditor.Visible = True  
End

Static Public Sub WebBrowser_Show_usingWebKit(sData As String, Optional heading As String)
   '------------------------------------------------------------------
   'Displays html in the central webbrowser
   'If the data is a filename, load file, otherwise load raw html
   'Currently not used but don't throw this out yet till replaced
   '------------------------------------------------------------------
  If Exist(sData) Then 'if the sData is a file
     form_clinical.currentTemporaryWebbrowserHTMLFilename = sData
     form_clinical.WebBrowserNotes.url = sData
  Else
     Help_Show(modHTML.Write_HTML_To_File_Return_Filename(sData), heading, True)
  End If
End

Static Public Sub WebBrowser_Show(sData As String, Optional heading As String)
   '------------------------------------------------------------------
   'Displays html in the central webbrowser
   'If the data is a filename, load file, otherwise load raw html
   '------------------------------------------------------------------
  form_clinical.lblWebBrowserNotes.text = heading
  form_clinical.vBoxWebBrowser.Visible = True
  form_clinical.vBoxWorkSpace.Visible = False 
'  Print sData 
 ' If Exist(sData) Then
  '   form_clinical.currentTemporaryWebbrowserHTMLFilename = sData
  '   form_clinical.WebBrowserNotes.url = sData
 ' Else
    Try form_clinical.WebBrowserNotes.html = sData 
  'End If
End

Static Public Sub DecisionSupport_Show(Heading As String, flag As Boolean)
   '----------------------------------------------------------------------------
   'There is a texteditor contained in Vbox_Decision_Support, which is hidden on
   'the right hand side of the screen. In any section of EasyGP needing simple
   'decision support, this is shown, whilst what's usually on top is hidden
   'for example of implementation see the Mental Health module
   '-----------------------------------------------------------------------------
  form_clinical.VboxActiveProblemList.Visible = Not flag
  form_clinical.VboxScratchPad.Visible = Not flag
  form_clinical.VSplit_TabbedListsGraph.Visible = Not flag
  form_clinical.Vbox_Decision_Support.Visible = Flag
  form_clinical.lblDecisionSupport.text = Heading
End

Static Public Sub DecisionSupport_SetHTML(sHtml As String)
   'Ian just experimental
    form_clinical.teDecisionSupport.RichText = shtml
End


Static Public Sub Refresh_PastHistory(sPastHistory_HistoricalSummary As String, sPasthistory_ManagementSummary As String, fk_pasthistory As Integer)
   form_clinical.Refresh_FPastHistory(sPastHistory_HistoricalSummary, sPasthistory_ManagementSummary, fk_pasthistory)
End

Static Public Sub Refresh_AllPreviousNotes()
   '----------------------------------------------------------------------------
   'Called from other forms which have updated any progress notes in any section
   'If open, update the tab for prevous notes
   '----------------------------------------------------------------------------  
   Try form_clinical.PreviousNotes_Refresh()
   'FIXME ONLY ALLOW THIS IF SAME PATIENT IS IN FCLINICAL 
   'EG THIS FORM ALSO CALLED FROM INBOX
   If Error Then
      Message.Warning("Trying to referesh previous notes from elsewhere")
   End If   
End

Public Sub Refresh_FPastHistory(sPastHistory_HistoricalSummary As String, sPasthistory_ManagementSummary As String, fk_pasthistory As Integer)
   '--------------------------------------------------------------------------------------------------
   'PURPOSE     : If the user has changed a health issues management plan summary or historical summary
   '              AND that health issue is currently being edited in the past history section
   '             then update the corresponding texboxes to reflect the changes
   'CALLED BY   : by any progress notes page
   'WHAT IT DOES: Looks through all the pages in the workspace editor if it finds a matching 
   '              fk_pasthistory it means that problem is currently in the editor.
   '---------------------------------------------------------------------------------------------------
   Dim page As FLinkContainer
   Dim PHPage As FPastHistory
   Dim hCtrl As Control
   For Each page In WorkspaceEditor.Children
        For Each hctrl In page.VBoxEditor.Children     
            If hctrl Is FPastHistory Then
               PHPage = hCtrl
               If PHPage.pk_pasthistory_get() = fk_pasthistory Then 'being edited
                  PHPage.txtHistoricalSummary.text = sPastHistory_HistoricalSummary
                  PHPage.txtManagementSummary.text = sPasthistory_ManagementSummary
                  Break
               End If
            End If
        Next
   Next        
End

Public Sub PreviousNotes_Refresh()
   '--------------------------------------------
   'Refreshes the all previous notes tab if open
   'Called often by external forms
   '--------------------------------------------
   Dim page As FLinkContainer
   Dim AllPreviousNotes As FHtmlViewer
   Dim hCtrl As Control
   For Each page In WorkspaceEditor.Children
        For Each hctrl In page.VBoxEditor.Children     
            If hctrl Is FHtmlViewer Then
               AllPreviousNotes = hCtrl
               AllPreviousNotes.WebView1.html = modProgressNotes.ConstructHTML_AllProgressNotes(currentconsult)
               Return 
            End If
        Next
   Next          
End


Public Sub Form_Open()
   '--------------------------------------------------------------------
   'Most forms have Init(), even when no form_open, often this Init() is
   'called when the form is loaded, but externally, so to keep the code
   'consistant when browsing it to find what's done first, put it here
   '--------------------------------------------------------------------
   Init()          
End

Public Sub Init()
   'form_clinical used when other forms need to 'find' this form to udpate something
   'Embed forms needed to complete the gui here
   'Real mess, so hang in there, alot of experimentation
   Dim Printer_name As String
   
   form_clinical = Me
   FPDF = New FPdf(Vbox_PDF)
   ScratchPad = New FScratchPad(VboxScratchPad)
 
   Form_ExportClinical = New FExportClinical(vBoxWorkSpace)
   Form_ExportClinical.Visible = False 
   ScratchPad.txtScratchPad.Enabled = False   
   EditorPages = New Collection
   currentconsult = Null
   FHelp = New FBrowser(VboxEditorAndProgressNotes)
   With FMetaData = New FDocumentMetaData(VboxScratchPad)  
         .Set_consult(currentconsult)                     
         .Set_Embedded_Form_Name("Clinical")  
         .Init("Allocated Documents")
         .Visible = False 
         .tbClose.Visible = True                            'only ever used on this form
   End With 
   obs = New Observer(FMetaData.tbSave) As "FMetaData_tbSave"    'Let FClinical handle the save event"
   obs = New Observer(FMetaData.txtUserObservationName) As "FMetaData_txtUserObservationName"  
   obs = New Observer(FMetaData.tbClose) As "FMetaData_tbClose"    'Let FClinical handle the save event"
              'detect when <enter> hit and file the document
   With FHelp
     .Visible = False   
     .HBox3.Visible = False 'remove the google stuff
     .Hbox_BookMarkFolders.Visible = False 
     .txtURL.Enabled = False  
     .bEmbeddedHelp = True
   End With
   obs = New Observer(FHelp.BtnClose) As "tbHelp_Close"
   obs = New Observer(FPDF.tbClose) As "pdfViewerClose"
   Layout_Form()
   Try Settings_Load()
   synonyms = modInboxDBI.Sender_User_Synonyms_get()
End


Public Sub pdfViewerClose_click()
   'Not really a close, just a hide  
  Stop Event
 
  UnFiled_Document_Metadata_Show(False)
End

Public Sub patient_load_record(patient As Collection) 
   '----------------------------------------------------------------------------
   'NAME      : patient_load_record() 
   'AUTHOR    : Dr Richard Terry rterry@pacific.net.au
   'WHAT IS   : 
   'PURPOSE   : Loads the minpatientimal necessary patient record
   'CALLED BY : Patients_Find() 
   'RELATED   : 
   'LOGIC     : Displays the minimal amount of information to
   '            start an encounter - the patients demographic details
   '            contact numbers, allergies, recalls, past history items
   '            medications (the default list showing), scratch pad
   '            i.e in essence anything **VISIBLE** to the user when they
   '            first load a patient. Everything else is loaded on demand
   '            database ID show under photo see:Patient_Demographics_Display() 
   '            Currently fetch all progress notes but no images, which area
   '            loaded 'on demand'
   'WARNING   : DO NOT MOVE THESE LINES OUT OF ORDER
   'TOFIX     : 
   '--------------------------------------------------------------------------- 
   Dim tempfile As String
   Dim tempPicture As Variant
   
   Vbox1.Visible = True
   currentconsult = New CConsult(patient)
   'fixme - check out what to do if continued consultation
   'and implement (if decide to) concept of a consultation summary
   'which i still like but would have to enforce on quitting.
   currentconsult.Set(consultationtypes[cmbConsultationType.Index]!pk, "")
   Patient_Demographics_Display()   'display name address phone etc
   If Not IsNull(patient!image) Then
      tempFile = Temp() & ".png"
      tempPicture = patient!image
      If tempPicture.data Then 
         File.Save(tempFile, tempPicture.data)
         PicPatient.Picture = Picture.Load(Tempfile)
     End If
   End If
   WorkspaceEditor.Lock()
   Editor_ShowPage("All Previous Notes")
   Editor_ShowPage("New General Notes") 'Default to general notes tab.
   WorkspaceEditor.Unlock()
   Wait
   cvwAllergies_Refresh()                  'Get all allergies, display on toolbar
   RecallLists_Refresh()            'Display recalls on toolbar
   'cvwMedications_Refresh()                'Get all meds, display current in list
   ScratchPad.Init(currentconsult)  'Get all scratch pad items and display
   pasthistory_refresh_lists()
   mnuButtonSections.Enabled = True   
   mnuButtonProgressNotes.Enabled = True 
   Measurement_Favourites_Refresh()
   Measurement_Defaults_Refresh()
   TabStrip_Lists.Enabled = True
End

Static Public Function IsSamePatient(fk_patient As Integer) As Boolean
   '-------------------------------------------------------------------
   ' returns true if fk_patient is the same as the currently loaded patient
   ' in FClinical. false if no patient loaded.
   ' Ian, this will crash if no FClincal is loaded.
   '-------------------------------------------------------------------
   
   Try Return form_clinical.IsSamePatient_Instance(fk_patient)
   

End

Public Function IsSamePatient_Instance(fk_patient As Integer) As Boolean
  Dim fk As Integer
  
  Try fk = currentconsult!patient!fk_patient
  If Error Then Return False
  If fk = fk_patient Then
    Return True
  Else
    Return False
  Endif
End

Static Public Sub Patient_Picture_Refresh(filepath As String)
     form_clinical.PicPatient.Picture = Picture.Load(filepath)
  ' End If
End
'these routines all over the place and illogical fixme
'meant to update the demographics on this form, called from e.g contacts database

Static Public Sub Patient_Demographics_Refresh()
      form_clinical.Demographics_Refresh()
End

Public Sub Demographics_Refresh()
   'Refresh the patients demographics from outside Fclinical
    'fixme (everywhere) what if patient > 1 address > > 1 record
   '
   Dim patients As Collection 
   Dim p As Collection 
   Dim patient As Collection 
   patients = modContactsDBI.Patient_Get_Using_PK(currentconsult!patient!fk_patient)
   For Each p In Patients
         currentconsult.SetData("patient", p)
         Patient_Demographics_Display()
         Return 
   Next     
End

Static Public Sub Refresh_ProgressNotesPage(pk_pasthistory As Integer)
                Dim page As FLinkContainer
  '  For Each page In WorkspaceEditor.Children
  '    If Page.tag = pagetitle Then 
  '      WorkspaceEditor.ActiveWindow = page
  ' 
  '      Return True
  '    End If
  ' Next
  
  
End
 
Static Public Sub Refresh_Section(section As Integer)
  
  Try form_clinical.Refresh_Section_Instance(section)
   'FIXME REMOVE ME: only update me if same patient in
   'clinical and the inbox
  If Error Then
   Message.warning("Tried To update Form_Clinical From Inbox ")
  End If 
  
End

Public Sub Refresh_Section_Instance(section As Integer)
   '-------------------------------------------------------------------------
   'Refreshs lists, progress note pages when another section alters something
   'If not a list being refreshed, refresh all progress notes pages contained
   'in the workspace, this way e.g if you have added new management plans or
   'historial summaries in past history, and have a progress note page
   'open entering notes for that problem, next time you switch to it those
   'summaries will have been updated
   '-------------------------------------------------------------------------
   Dim hCtrl As Control
   Dim frmConsult As FProgressNotePage
   Dim Page As FLinkContainer
   Dim Container As FLinkContainer
   If IsNull(currentconsult) Then Return 
  
   Select Case section
      Case const.cSection_PastHistory
          '------------------------------------------------------
          'if past history section has added new problems, update
          'the lists showing to the user on main screen
          '------------------------------------------------------
          pasthistory_refresh_lists()
         
      Case const.cSection_Requests
           currentconsult.Refresh("requests_ordered") 'remove key to force a refresh
          ' cvwRequests_Refresh()
            modEditAreaHelpers.Patient_Requests_Show(currentconsult, cvwRequests)
      Case const.cSection_Referrals
           currentconsult.Refresh("letters_received")  
           cvwReferrals_Fill()
      Case Const.cSection_Recalls
           RecallLists_Refresh()
      Case Else
        '-------------------------------------------------
        'Not a list to update must be a progress note page
        'Update this whether active or not.
        '-------------------------------------------------
        For Each page In WorkspaceEditor.Children
            Container = page
            For Each hctrl In page.VBoxEditor.Children     
               If hctrl Is FProgressNotePage Then
               Select Case hctrl.Name
               Case "FProgressNotePage"
                     frmConsult = hctrl       
                     frmConsult.Display_Existing_Notes()  're-load progress notes
                     If section <> Const.cSection_GeneralNotes Then
                        If frmConsult.Get_pk_pasthistory() Then
                            frmConsult.Health_Issue_Reload()
                            page.title = frmConsult.HealthIssue_GetName()
                        End If
                     End If
                     Break
                End Select
               End If
            Next
        Next      
   End Select
End


Public Sub Layout_Form()
   '------------------------------------------------------------------------
  'These labels in the IDE have identifying text (just so you can see them)
  'remove this at runtime
  '------------------------------------------------------------------------
  ' tlPatientComms.text = "Contact Numbers"          'clear labels for patients contact numbers
  ' tlReminders.text = "Reminders"             'clear labels for patients recalls
  ' tlAllergies.text = "Allergies"             'clear labels for patients allergies
  ' lblID.text = ""                   'clear patient ID label
  consultationtypes = modUtil.LoadCombo(cmbConsultationType, modConsultDBI.consult_get_types(), "type")
  cmbConsultationType.index = cmbConsultationType.Find("At consulting rooms")
End

Public Sub Form_Close()
  
  Settings_Save()

  
End



 Public Sub FormFonts_Adjust()
   '------------------------------------------------------------------------
   'first attempt to globally change the label sizes on all forms edit areas
   'when global font is changed
   '------------------------------------------------------------------------  
   Dim i As Object
   Inc application.Busy

   For Each i In EditorPages
       Try Object.Call(i, "EditArea_Resize_Labels")
   Next
   Dec application.Busy
  
End

Public Sub Settings_Save()
      Dim i As Object

      Inc Application.Busy 'show the hourglass cursor
      For Each i In EditorPages
          Try Object.Call(i, "Settings_Save")
      Next

      Settings["Main/HsplitClinical_Main"] = HSplitClinical_Main.Layout
      If Not IsNull(FMetaData) Then
         If FMetaData.Visible = True Then
            Settings["Main/VsplitClinical_RightPane_Metadata"] = VsplitClinical_RightPane.Layout
         Else
            Settings["Main/VsplitClinical_RightPane"] = VsplitClinical_RightPane.Layout
         End If
      End If
      Settings["Requests_List_columns/date"] = cvwRequests.Columns[0].Width
      Settings["Progress Notes/default_zoom"] = WebBrowserNotes.Zoom
      Settings["Main/Hsplit_Toolbar.Layout"] = Hsplit_Toolbar.Layout
      Settings["TabbedLists/cvwRecalls.font"] = cvwRecalls.Font.ToString()
      Settings["TabbedLists/cvwRecalls.columns"] = Modutil.Columnsizes_To_String(cvwRecalls)
      Settings["TabbedLists/cvwRequests.font"] = cvwRequests.Font.ToString()
      Settings["TabbedLists/cvwRequests.columns"] = Modutil.Columnsizes_To_String(cvwRequests)
      Settings["TabbedLists/cvwReferrals.font"] = cvwReferrals.Font.ToString()
      Settings["TabbedLists/cvwResults.font"] = cvwResults.Font.ToString()
      Settings["TabbedLists/cvwResults.columns"] = Modutil.Columnsizes_To_String(cvwResults)
      Settings["TabbedLists/cvwReferrals.columns"] = Modutil.Columnsizes_To_String(cvwReferrals)
      Settings["Clinical/HSplit_MeasurementLists.Layout"] = HSplit_MeasurementLists.Layout
      Settings["Clinical/VSplit_TabbedListsGraph.Layout"] = VSplit_TabbedListsGraph.Layout
      Dec Application.Busy 
End


Private Sub Settings_Load()
   Dim i As Object
   
   Try HSplitClinical_Main.Layout = Settings["Main/HsplitClinical_Main"]
   If Not IsNull(FMetaData) Then
      If FMetaData.Visible = True Then
          Try VsplitClinical_RightPane.Layout = Settings["Main/VsplitClinical_RightPane_Metadata"] 
      Else
         Try VsplitClinical_RightPane.Layout = Settings["Main/VsplitClinical_RightPane"] 
      End If
   End If    
   Try cvwRecalls.Font = Font[Settings["TabbedLists/cvwRecalls.font"]]
   Try cvwRequests.Columns[0].Width = Settings["Requests_List_columns/date"]
   Try cvwRequests.Font = Font[Settings["TabbedLists/cvwRequests.font"]]
   Try cvwReferrals.Font = Font[Settings["TabbedLists/cvwReferrals.font"]]
   Try cvwResults.Font = Font[Settings["TabbedLists/cvwResults.font"]]
   Try Hsplit_Toolbar.Layout = Settings["Main/Hsplit_Toolbar.Layout", "82,291,281,146,112,187"]
   Try WebBrowserNotes.Zoom = Settings["Progress Notes/default_zoom", 1]
   Try HSplit_MeasurementLists.Layout = Settings["Clinical/HSplit_MeasurementLists.Layout"]
   Try VSplit_TabbedListsGraph.Layout = Settings["Clinical/VSplit_TabbedListsGraph.Layout"] 
   Try modUtil.columnSizes_Set(Settings["TabbedLists/cvwResults.columns"], cvwResults)
 
End Sub

Public Sub Consult_Save()
  '-----------------------------------------------
  'Saves any outstanding data for the consultation
  '-----------------------------------------------
  Dim i As Object
  
  Inc Application.Busy 
  For Each i In EditorPages
    Try Object.Call(i, "Save")
    If Error Then
      Print Error.where, Error.Text
    End If
  Next
  Dec Application.Busy
End

Public Sub Patients_Find(Optional search_txt As String) 
   '-----------------------------------------------------------------------------
   'Attemps to find patients according to criteria entered in txtSearch
   'If none, resets focus to txtSearch
   'Otherwise creates an empty patient object
   'If only one name and address auto-load that patient to currentconsult
   'If multiple names/addresses, popup a modal for choice
   'which returns a patient object which becomes currentconsult
   'fixme - implement the patient stack
   '-----------------------------------------------------------------------------
   Dim AllPatients As New Collection
   Dim P As Collection
   Dim patient As Collection
   Dim sql_in_english As String
   
   If IsNull(search_txt) Then search_txt = txtSearch.text
   AllPatients = modContactsDBI.patients_get_firstname_surname(search_txt)
   sql_in_english = AllPatients!sql_in_english
   AllPatients.Remove("sql_in_english")
   If AllPatients.count = 0 Then 
     txtSearch.SetFocus()
      Return
   Else  
     '------------------------------------------------------  
     'Resets the current consult and appropriate collections
     'this includes adding the currently logged on staff
     'member to the list of staff members accessing the
     'patients record (from single machine at the moment)
     'FIX ME - will have to save those accessing patients
     'record in the backend
     '------------------------------------------------------ 
     If AllPatients.count = 1 Then  
       '----------------------------------------------------
       'no way in gambas to get a key without an iteraction
       'get first key
       '----------------------------------------------------
       For Each p In AllPatients
         patient = p
       Next
       patient_load_record(patient)
     Else  
       '---------------------
       'more than one patient
       '---------------------
       Vbox1.Visible = False  
       form_select = New FPatientsSelect(Me)                 
       form_select.SetPatientList(AllPatients, sql_in_english, Me)
       Return
     Endif
   End If   
End

Public Sub cvwMedications_Refresh()
  Dim col_med As Integer = 0
  Dim col_strength As Integer = 1
  Dim col_quantity As Integer = 2
  Dim col_repeats As Integer = 3
  Dim col_start_date As Integer = 4
  Dim Col_date As Integer = 5
  Dim col_pbs As Integer = 6
  Dim col_prescribedFor As Integer = 7
  Dim col_prescribedBy As Integer = 8
  Dim i As Collection
  Dim x As Integer
  Dim cvw As ColumnView
  
  Return
  cvw = cvwMedications
  cvw.Clear()
  cvw.Columns.count = 9
  cvw.Columns[col_med].width = 124
  cvw.Columns[col_strength].width = 45
  cvw.Columns[col_quantity].width = 29
  cvw.Columns[col_repeats].width = 23
  cvw.Columns[col_pbs].width = 72
  cvw.Columns[col_start_date].width = 69
  cvw.Columns[Col_date].width = 69
  cvw.Columns[col_prescribedFor].width = 100
  cvw.Columns[col_prescribedBy].width = 100
  For Each i In currentconsult!medications
    If i!active = True Then
       x = i!pk_item_prescribed
       cvw.Add(i!pk_item_prescribed, 0)
       cvw[x][col_med] = i!brand
       cvw[x][col_strength] = i!strength
       cvw[x][col_quantity] = i!quantity 
       cvw[x][col_repeats] = i!repeats
       cvw[x][col_start_date] = Format(i!script_date, "dd/mm/yyyy")
       cvw[x][col_prescribedFor] = i!description      
       cvw[x][col_prescribedBy] = i!fk_staff
    Endif
  Next
End



Public Sub cvwAllergies_Refresh()
  '---------------------------------------------
  'Fetch the patients allergies from the backend
  '---------------------------------------------
  Dim allergy As Collection
  'For Each i In currentconsult!allergies
  ' FIXME: load the widget 
  'Next
  ' cvwAllergies.Add(0, "Allergies:Nil Recorded")
End


Public Sub cvwReferrals_Fill()
    '-------------------------------------------------------------
    'NAME     : cvwReferrals_Refresh()
    'PURPOSE  : Displays the patients outgoing referral letters
    '           in a list
    'CALLED BY: TabStrip_Lists_MouseUp() 
    'WARNING  : All the lists contained on the gui-element TabStrip_Lists
    '           are members of the tabbedlists group.There is no
    '           cvwReferrals_events() per se, its events are under
    '           TabbedLists_events()
    'TOFIX    : Smarter column sizing 
    '--------------------------------------------------------------

    Dim x As Integer                      'for readability = key
    Dim sString As String
    Dim referral As Collection 
    With cvwReferrals              
       .Clear()
       .Columns.count = 2
       .Columns[0].width = 60
    End With
    '--------------------------------------------------------------
    'Loop through the collection, the key of the columnview becomes
    'the primary key of clin_referrals.inbox 
    '--------------------------------------------------------------    
    For Each referral In currentconsult!referrals_written
         x = referral!pk_referral                      'readability
         If referral!provider_surname Then
            sString = referral!provider_title & " "
            sString &= referral!provider_firstname & " "
            sString &= referral!provider_surname
         Else
            sString = referral!organisation
         End If
         cvwReferrals.Add(x, 0)                                                  'add new row
         cvwReferrals[x][0] = Format(referral!date, "dd/mm/yyyy") 
         If sSTring = "" Then
               cvwReferrals[x][1] = referral!tag 
         Else 
               cvwReferrals[x][1] = sSTring & " - " & referral!tag  
         End If
    Next  
End



Public Sub PastHistory_MakeActive()
  '---------------------------------------------------------
  ' marks an inactive past history problem as active
  '---------------------------------------------------------
  'currentPastHistory!active = True
  'pasthistory_refresh_lists()
End Sub 

Public Sub PastHistory_MakeInActive()
  '-----------------------------------------
  'marks the highlighted problem as inactive
  '-----------------------------------------
  
  pasthistory_refresh_lists()
End Sub


Public Sub Patient_Demographics_Display()
  '--------------------------------------------------------
  'Display core demographics,
  'name, address, sex, age
  'comms limited to (FIXME) user defined list
  'medicare number or other clerical FIXME when implemented
  '--------------------------------------------------------
  Dim com As Collection 
   bExit = True
   txtSearch.text = currentconsult!patient!firstname & " " & currentconsult!patient!surname & " " & currentconsult!patient!street & " " & currentconsult!patient!town
   txtSearch.text &= " " & currentconsult!patient!postcode
   txtSearch.pos = 0
   txtAge.text = modUtil.Calc_age(currentconsult!patient!birthdate)
   currentconsult!patient!age = txtAge.Text
   txtSearch.Tag = currentconsult!patient!firstname & " " & currentconsult!patient!surname & "\n"
  '----------------------------------------------------------------
  'On the top toolbar, show a list containing dob, medicare number,
  'and some basic contact numbers
  '---------------------------------------------------------------
  lblBirthdate.text = Format(currentconsult!patient!birthdate, "dd/mm/yyyy")
   '---------------------------------------------
   'Display comms with abbreviated prefix in list
   '---------------------------------------------
   currentconsult.Refresh("comms") 'refreshed because can be called from outside of this module eg FPersons
  ' modEditAreaHelpers.Patient_Comms_Display(currentconsult!comms, cvwClerical, False)
   tlPatientComms.text = ""
  
    For Each com In currentconsult!comms
        tlPatientComms.text &= const.CommModalityTextBrief[com!fk_type] & ":" & currentconsult!comms[currentconsult!comms.key]!value & "<BR>"
    Next
    If tlPatientComms.text = "" Then tlPatientComms.text = "Contact Numbers"
   LBLID.text = "ID:" & currentconsult!patient!fk_patient 'show database ID under photo" 
   bExit = False
End

Public Sub txtSearch_KeyPress()

  If bExit = True Then 
    Return
  End If
  If key.code = key.Return And Len(Trim(txtSearch.text)) > 0 Then 
    '--------------------------------------------------------
    'Try and find a patient as per the text in the search box\
    'If this fails, then focus is res-set to the search box
    'If finds 1 patient, loads their records
    'If finds > 1 patient, popup multiple choice list
    'which is instance for FPatientsSelect      
    '--------------------------------------------------------
    patients_find()     
  End If

End

Public Sub txtSearch_GotFocus()
  '----------------------------------
   'User has clicked on the search box
   'First check there is no un-saved data
   '-----------------------------------
   Dim i As Object
   
   
   If bexit Then
       Return 
   End If
   TabStrip_Lists.Enabled = False   
   If Not IsNull(currentconsult) Then
     Print "saving consult"
     Consult_Save()
     ScratchPad.Save()
   End If
   bExit = True
   txtSearch.text = "" 
   txtAge.text = ""
   lblID.text = ""
   tlAllergies.text = "Allergies"
   tlReminders.text = "Reminders/Recalls"
   tlPatientComms.text = "Contact Numbers"
   lblBirthdate.text = ""
   WorkspaceEditor_Clear()  'remove all current pages from collection
   ProgressNotes_Clear()
   Tabbed_lists_Clear()   'scripts, recalls, requests lists etc
   TabStrip_Lists.index = 0 'the medication list
   cvwProblemsSignificant.Clear()
   cvwProblemsInActive.Clear()
   cvwProblemsMajor.Clear()
  
   Measurements_Reset()
   txtInboxResults_filter.text = "" 
   txtInboxResults_Exclude.text = ""
   currentconsult = Null
   cmbConsultationType.index = cmbConsultationType.Find("At consulting rooms")
   ScratchPad.Clear()
   
   mnuButtonSections.Enabled = False   
   mnuButtonProgressNotes.Enabled = False 
   ScratchPad.txtScratchPad.Enabled = False  
   TabStripProblemLists.index = 2
   TabStripProblemLists.Caption = "Inactive"
   TabStripProblemLists.index = 1
   TabStripProblemLists.Caption = "Significant"
   TabStripProblemLists.index = 0
   TabStripProblemLists.Caption = "Major"
   Patient_Picture_Clear()
   bExit = False
   Form_ExportClinical.visible = False
   DecisionSupport_Show("", False)
   WorkspaceEditor.Visible = True 
   Vbox_PDF.Visible = False    
   vBoxWebBrowser.Visible = False    
   Deleted_Document_keys = New Collection 
End
Public Sub Patient_Picture_Clear()
   '---------------------------------------------
   ' Clears the picture from the main picture box
   ' puts back in the default
   '---------------------------------------------
   With PicPatient
      .Picture = Picture.Load("icons/misc/no_photo.png")
 
   End With
   Wait        'otherwise, visually, picture won't disappear
End

Public Sub WorkspaceEditor_Clear()
   'Purpose: removes all existing child tabs from the workspace editor
   Dim hWindow As Window
   WorkspaceEditor.Lock()
   For Each hWindow In WorkspaceEditor.Children
     hWindow.Close()
   Next
   WorkspaceEditor.Unlock()
End

Public Sub WorkspaceEditor_RemovePage()
   Dim hWindow As Window
   WorkspaceEditor.Lock()
   For Each hWindow In WorkspaceEditor.Children
       '  hWindow.Close()
   Next
   WorkspaceEditor.Unlock()
  
  
End

Public Sub ProgressNotes_Clear()
  
 ' WebBrowserNotes.Path = Application.Path &/ "emptyprogressnotes.html"
  
   WebBrowserNotes.url = Application.Path &/ "emptyprogressnotes.html"
 
 
End


Public Sub Print_Clinical()

  WebBrowserNotes.Print()
  
End 
Public Sub Care_Plan_Display()
    Inc Application.Busy
    FClinical.WebBrowser_Show(modProgressNotes.Care_Plan_Construct_html(currentconsult), "GP MANAGEMENT PLAN AND TEAM CARE ARRANGEMENTS")
    Dec application.Busy
End

Public Sub Health_Summary_Display()
   Inc Application.Busy
   FClinical.WebBrowser_Show(modProgressNotes.Health_Summary_Construct_html(currentconsult), "HEALTH SUMMARY")
   Dec application.Busy
End


' Public Sub ProgressNotes_Display(sHeading As String)
'    '-----------------------------------------------------------------------------
'    'PURPOSE       :  Allows user to  toggle between progress notes and editor   
'    ' 
'    'WHAT THIS DOES:  Toggles the progress notes on / off In the main display area
'    'HOW THIS WORKS:  vBoxWorkSpace contains the workspace used for the editor
'    '                 vBoxWebBrowser contacts the konquer web browser which is
'    '                 used to display the html of either progress notes or
'    '                 the care plans
'    'CALLED BY     :  MainToolbar_Click()
'    '----------------------------------------------------------------------------
'    If vBoxWorkSpace.Visible = False Then
'          '------------------------------------------
'          'If main workspace editor is not showing
'          'then check if progress notes are showing
'          'if so, just swap html for that of the
'          'care plan summary.
'          '-----------------------------------------
'          If iMainDisplay = cMainDisplay_CarePlan Then
' '           ' lblClinicalHeading.text = "Clinical Desktop: " & sHeading   'tell the user what we are doing
'            ' ProgressNotes_ConstructHTML()                            'construct the html,  place in webrowser
'             iMainDisplay = cMainDisplay_ProgressNotes
'             tbWebBrowserPrint.ToolTip = "Print the progress notes"
'          Else
'            '--------------------------------------
'            'display is already the progress notes
'            'swap back to the data entry screens
'            '-------------------------------------
'            iMainDisplay = cMainDisplay_DataEntry
'            vBoxWebBrowser.Visible = False
'            vBoxWorkSpace.Visible = True
' '          ' lblClinicalHeading.text = "Clinical Desktop"
'           End If
'       Else
'          '-------------------------------------------
'          'Workspace  editor is visible
'          'Save the heading of the tab in the editor
'          'The popup the progress notes
'          '--------------------------------------------
'          iMainDisplay = cMainDisplay_ProgressNotes       'identify the section
'          vBoxWebBrowser.Visible = True                'show the webrowser by making its vbox visible
'          tbWebBrowserPrint.ToolTip = "Print the progress notes"
'          'ProgressNotes_ConstructHTML()                            'construct the html,  place in webrowser
'          
'       End If
' End

Public Sub RecallLists_Refresh()
    '-------------------------------------------------------------
    'NAME     : RecallLists_Refresh()
    'AUTHOR   : Dr Richard Terry
    '           rterry@pacific.net.au
    'PURPOSE  : Displays the patients outstanding recalls in a list
    '           on the toolbar visible at all times, and on the 
    '           tabstrip_lists control
    'CALLED BY: Recalls_Get()
    'RELATED  : 
    'LOGIC    : Recalls_Get() has retrieved a collection
    '           of recalls from the backend, keyed on the primary
    '           key of clin_Recalls.Recalls which stores recalls
    '           either saved by the program or legacy imports
    '           Later when one needs to access any result it will
    '           be contained in 
    '           currentconsult!recalls_logged[cvwRecalls.item.key]
    '        or currentconsult!recalls_logged[cvwReminders.item.key]
    'WARNING  : All the lists contained on the gui-element TabStrip_Lists
    '           are members of the tabbedlists group.There is no
    '           cvwRecalls_events() per se, its events are under
    '           TabbedLists_events()
    'TOFIX    : Smarter column sizing using lblMeasure_reminders
    '--------------------------------------------------------------

    Dim x As Integer                      'for readability = key
    Dim sString As String
    Dim rows As String 
    Dim sColText As String
    Dim sTableStart As String = 
    "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0 >"
     
    Dim sRow As String = ""
      "<TR>"
      "<TD WIDTH=60><FONT COLOR='%color%'>"
      "%col1%</FONT>"
      "</TD>"
      "<TD>"
      "%col2%"
      "</TD>"
      "</TR>"
     
      
    With cvwRecalls              
      .Clear()
      .Columns.count = 2
      .Columns[0].width = 60
     
    End With
   

    Try modUtil.columnSizes_Set(Settings["TabbedLists/cvwRecalls.columns"], cvwRecalls)
    If Error Then
         cvwRecalls.Columns[0].width = 60
    Endif
    currentconsult.Refresh("recalls_logged")
    tlReminders.text = ""
    rows = ""
    For Each currentconsult!recalls_logged
         rows &= srow 
         x = currentconsult!recalls_logged.Key                        'readability
         '---------------------------------------------------------
         'Display in the recalls list on the tabstrip_lists control
         '---------------------------------------------------------
         cvwRecalls.Add(x, 0)
         cvwRecalls[x][0] = Format(currentconsult!recalls_logged[x]!due, "dd/mm/yyyy")
         cvwRecalls[x][1] = currentconsult!recalls_logged[x]!reason
         '---------------------------------------------------
         'Display these recalls as reminders at top of screen
         '---------------------------------------------------
          If DateDiff(Now, currentconsult!recalls_logged[x]!due, gb.Month) < 0 Then
             Rows = Replace(Rows, "%color%", "#800000")
             sColtext = "Overdue:"
             rows = Replace(rows, "%col1", "Overdue")
             Rows = Replace(rows, "%color%", "#FFFFFF")
          Else
              sColtext = "Due in:"
          End If
         sColText &= Abs(DateDiff(Now, currentconsult!recalls_logged[x]!due, gb.Month)) & "M"
         rows = Replace(rows, "%col1%", sColText)
         rows = Replace(rows, "%col2%", currentconsult!recalls_logged[x]!reason)
    Next  
   tlReminders.text = sTableStart & rows & "</TABLE>"
End


Public Sub cvwResults_Refresh()
    '-------------------------------------------------------------
    'PURPOSE  : Displays the patients results i.e
    '           pathology/radiology/nuclear medicine
    '           in the results column view
    'LOGIC    : RequestResults_Get() has retrieved a collection
    '           of results from the backend, keyed on the primary
    '           key of clin_results.inbox_general which stores
    '           pathology/radiology ie non-letters from providers
    '           Loop through this collection load into columnview
    '           only the date, test, who ordered it
    '           Later when one needs to access any result it will
    '           be contained in 
    '           currentconsult.requestResults[cvwResults.item.key]
    'WARNING  : All the lists contained on the gui-element TabStrip_Lists
    '           are members of the tabbedlists group.There is no
    '           cvwResults_events() per se, its events are under
    '           TabbedLists_events()
    'TOFIX    : Smarter column sizing - make second column (1) with 
    '           the requests max-width of the widest item
    '--------------------------------------------------------------
     cvwResults.Clear()
     '--------------------------------------------------------------
    'Loop through the collection, the key of the columnview becomes
    'the primary key of clin_requests.inbox_general   
    '-------------------------------------------------------------- 
    currentconsult.Refresh("results_received")   
 
    ' For Each results_sent In currentconsult!results_received
    '   If Lower(results_sent!tag_user) <> Lower(txtInboxResults_Exclude.text) Then
    '      x = results_sent!pk_document
    '      cvwResults.Add(x, 0)
    '      cvwResults[x][0] = Format(results_sent!date_created, "dd/mm/yyyy")
    '      cvwResults[x][1] = results_sent!tag_user
    '      cvwResults[x][2] = results_sent!originator
    '   End If
    ' Next
    cvwResults_Fill()
End

Public Sub mnuCertificates_Click()
  
  
  
End

Public Sub cvwResults_Fill()
    Dim x As Integer                      'for readability = key
    Dim results_received As Collection 
    Dim filter As String
    Dim exclude As String 
    Dim result_received As String 
    Dim guessed_user_Name As Collection 
    Dim colsizes As String[]
    
    If txtInboxResults_filter.text <> "" Then
        filter = txtInboxResults_filter.text
    End If
    If txtInboxResults_Exclude.text <> "" Then
       exclude = txtInboxResults_Exclude.text & ";"
    Endif
    cvwResults.Clear()
    cvwResults.Columns.count = 3
     For Each results_received In currentconsult!results_received
      result_received = ""
      If filter = "" And exclude = "" Then
         If IsNull(results_received!tag_user) Then                         'not user tag = document not filed
          'attempt to guess the user tag
          CurrentObservations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & results_received!pk_document & " ORDER BY observations.observation_date, set_id")
          guessed_user_Name = modParseDocument.Guess_UserName(currentconsult, synonyms, results_received, CurrentObservations)
          If Not IsNull(guessed_user_Name!name) Then
             result_received = "** UNFILED **:" & guessed_user_Name!name
          Else
             result_received = "** UNFILED RESULT **:" '& results_received!tag
          End If
        Else
              result_received = results_received!tag_user
        End If
   
      Else
          If exclude Then
             If Lower(results_received!tag_user) <> Lower(exclude) Then 
               result_received = results_received!tag_user
             Endif
          Else
              If results_received!tag_user = "" And InStr("unfiled", Lower(filter)) Then
                result_received = "** UNFILED **:"
              Else
                If InStr(Lower(results_received!tag_user), filter) Then 
                   result_received = results_received!tag_user
                Endif
              End If
            End If
      End If
      If result_received <> "" Then 
         x = results_received!pk_document
         cvwResults.Add(x, 0)
         cvwResults[x][0] = Format(results_received!date_created, "dd/mm/yyyy")
         cvwResults[x][1] = result_received 'results_received!tag_user
         cvwResults[x][2] = results_received!originator
      End If   
    Next
    Try colsizes = Split(Settings["TabbedLists/cvwResults.columns"], "|")
    Try cvwResults.Columns[0].width = colsizes[0]
    Try cvwResults.Columns[1].width = colsizes[1]
    Try cvwResults.Columns[1].width = colsizes[2]
  
End

Public Sub Editor_ShowPage(sPageName As String)
   '----------------------------------------------------------------
   'PURPOSE:   Adds a new page to the progress notes workspace
   '           according to sType parameter passsed to it            
   '           e.g "past history", "new page", "Request" etc
   ' 
   ' A FProgressNotePageContainer doesn't contain the texteditor - just a form
   ' containg two rows of toolbars with combo's and text formatting
   ' buttons, contained in VboxEditor
   '
   ' The container then has added to it either other forms or just
   ' a plain textedit control for pages only needing a text editor
   ' Note that Collections start from a zero(0) count
   ' but the tablist count starts from 1 
   ' hence first tab > EditorPages[0] etc
   ' the page tag is either fixed eg "Skin Excision" or 
   ' is a pk_pasthistory if doing progress notes for a past historyDisplay_Health_Issue
   ' item
   'FIXME convert this routine so that lower(page.title) = tag
   'NB: Though it would seem logical not to repeat for every new page 
   '    the code: WorkspaceEditor.Add(NewPage) 
   '    within each case statement, putting it at the end seems to
   '    make it impossible to auto-set focus on the first control
   '    in the new form.
   '--------------------------------------------------------------
   Dim ProgressNotesPage As FProgressNotePage
   Dim AllPreviousNotes As FHtmlViewer
   Dim ExcisionPage As FProcedures
   Dim RequestPage As FRequests
   Dim PregnancyPage As FPregnancy
   Dim FamilyHistoryPage As FFamilyHistory
   Dim HealthAssessmentPage As FHealthAssessment
   Dim OccupationalHistoryPage As FOccupation
   Dim AllergyPage As FAllergy
   Dim RecallPage As FRecalls
   Dim PrescriptionPage As FPrescriptions
   Dim PastHistoryPage As FPastHistory
   Dim ReferralPage As FReferrals
   Dim MentalHealthPage As FMentalhealth
   Dim VaccinationPage As FVaccinations
   Dim workcoverPage As FWorkcover
   Dim WebPage As FBrowser
   Dim DiabetesCycleOfCare As FDACC
   Dim TravelPage As FTravel
     
   Dim page As FLinkContainer
 
 
   Select Case sPageName
     Case "Referrals"
       TabStrip_Lists.Index = clistReferrals
       Refresh_Section_Instance(clistReferrals)  
     Case "Requests"
       TabStrip_Lists.index = cListRequests   
    '   Refresh_Section_Instance(cListRequests)            'swap tabbed lists to requests
       tbResults_Click()
     Case "Workcover"
       TabStrip_Lists.index = cListCertificates
       rbWorkCoverCertificate.value = True
     Case "Measurements"
       TabStrip_Lists.index = clistMeasurements
     Case "Recalls"
       TabStrip_Lists.index = clistRecalls            'show recalls list on tab
   End Select

   If Editor_SetActivePage(sPageName) Then
    Goto EnsureVisible 'was return 
   Endif
   
   Select Case sPageName
   Case "All Previous Notes"
      page = New FLinkContainer
      AllPreviousNotes = New FHtmlViewer(page.VBoxEditor)
      WorkspaceEditor.Add(page)
      page.tag = "All Previous Notes"
      page.Title = "All Previous Notes"
      EditorPages.Add(AllPreviousNotes, "All Previous Notes")
      AllPreviousNotes.webview1.html = modProgressNotes.ConstructHTML_AllProgressNotes(currentconsult)
    Case "DACC"
       page = New FLinkContainer
       DiabetesCycleOfCare = New FDACC(page.VBoxEditor)
       page.tag = "Diabetes Annual Cycle of Care"
       page.Title = "Diabetes Annual Cycle of Care"
       WorkspaceEditor.Add(page)
       EditorPages.Add(TravelPage, "Diabetes Annual Cycle of Care")
   Case "New General Notes"
      '----------------------------------------------------------------------
      'General notes page as the name implies is for notes not tied to a 
      'particular health issue or problem. For particular problems the user
      'should be taught to open an editor tab for that problem.
      '----------------------------------------------------------------------
      page = New FLinkContainer
      ProgressNotesPage = New FProgressNotePage(page.VBoxEditor)
      bExit = True
      WorkspaceEditor.Add(page)
      bExit = False
      page.tag = "New General Notes"
      page.Text = "New General Notes"
      ProgressNotesPage.set_fk_section(const.cSection_GeneralNotes)
      ProgressNotesPage.lblNotesFor.text = "New General Notes"
      ProgressNotesPage.Init(currentconsult)
      EditorPages.Add(ProgressNotesPage, "New General Notes")
    Case "Travel"
      page = New FLinkContainer
      TravelPage = New FTravel(page.VBoxEditor)
      TravelPage.Init(currentconsult)
      page.tag = "Travel"
      page.Title = "Travel"
      WorkspaceEditor.Add(page)
      EditorPages.Add(TravelPage, "Travel")
    Case "Occupational History"
      page = New FLinkContainer
      OccupationalHistoryPage = New FOccupation(page.VBoxEditor)
      OccupationalHistoryPage.Init(currentconsult)
      page.tag = "Occupational History"
      page.Title = "Occupational History"
      WorkspaceEditor.Add(page)
      EditorPages.Add(OccupationalHistoryPage, "Occupational History")
    Case "Health Assessment"
      page = New FLinkContainer
      HealthAssessmentPage = New FHealthAssessment(page.VBoxEditor)
      HealthAssessmentPage.Init(currentconsult)
      page.tag = "HealthAssessment"
      page.Title = "HealthAssessment"
      WorkspaceEditor.Add(page)
      EditorPages.Add(HealthAssessmentPage, "HealthAssessment")    
    Case "Mental Health"
      page = New FLinkContainer
      MentalHealthPage = New FMentalhealth(page.VBoxEditor)
      MentalHealthPage.Init(currentconsult)
      page.tag = "Mental Health"
      page.Title = "Mental Health"
      WorkspaceEditor.Add(page)
      EditorPages.Add(MentalHealthPage, "Mental Health")
    Case "Allergies"
      Message.Info("Allergies Module\n\nThis section currently not available")
      Return 
      page = New FProgressNotePageContainer
      AllergyPage = New FAllergy(page.VBoxEditor)
      AllergyPage.Init(currentconsult)
      page.tag = "Allergies"
      page.Title = "Allergies"
      WorkspaceEditor.Add(page)
      EditorPages.Add(AllergyPage, "Allergies")
    Case "Web"
      page = New FLinkContainer
      WebPage = New FBrowser(page.VBoxEditor)
      page.tag = "Web"
      page.Title = "Web"
      WebPage.Visible = True 'make it visible, default is not visible
      WorkspaceEditor.Add(page)
    Case "Pregnancy"
      Message.info("This section is not available")
      Return 
      page = New FLinkContainer
      PregnancyPage = New FPregnancy(page.VBoxEditor)
      PregnancyPage.Init(currentconsult)
      page.tag = "Pregnancy"
      page.title = "Pregnancy"
      WorkspaceEditor.Add(page)
      EditorPages.Add(PregnancyPage, "Pregnancy")

    Case "Referrals"
      page = New FLinkContainer
      ReferralPage = New FReferrals(page.VBoxEditor)
      ReferralPage.Init(currentconsult)
      page.tag = "Referrals"
      page.Title = "Referrals"
      WorkspaceEditor.Add(page)
      EditorPages.Add(ReferralPage, "Referrals")
    Case "Scripts"
     '  Message.Info("Prescription Module\n\nThis section currently not available")
     ' Return 
      page = New FLinkContainer
      PrescriptionPage = New FPrescriptions(page.VBoxEditor)
     ' PrescriptionPage.Init(currentconsult)
      page.tag = "Scripts"
      page.Title = "Scripts"
      WorkspaceEditor.Add(page)
      EditorPages.Add(PrescriptionPage, "Scripts")
   Case "Family History"
      page = New FLinkContainer
      FamilyHistoryPage = New FFamilyHistory(page.VBoxEditor)
      FamilyHistoryPage.Init(currentconsult)
      page.tag = "Family History"
      page.Title = "Family History"
      WorkspaceEditor.Add(page)
      EditorPages.Add(FamilyHistoryPage, "Family History")
   Case "Health Issues"
      page = New FLinkContainer
      PastHistoryPage = New FPastHistory(page.VBoxEditor)
      PastHistoryPage.Init(currentconsult)
      page.tag = "Health Issues"
      page.Title = "Health Issues"
      WorkspaceEditor.Add(page)
      EditorPages.Add(PastHistoryPage, "Health Issues")
    Case "Vaccinations"
      page = New FLinkContainer
      VaccinationPage = New FVaccinations(page.VBoxEditor)
      page.tag = "Vaccinations"
      page.Title = "Vaccinations"
      WorkspaceEditor.Add(page)
      VaccinationPage.Init(currentconsult)
      EditorPages.Add(VaccinationPage, "Vaccinations")
   Case "Workcover"
      page = New FLinkContainer
      WorkcoverPage = New FWorkcover(page.VBoxEditor)
      page.tag = "Workcover"
      page.Title = "Workcover"
      WorkspaceEditor.Add(page)
      WorkcoverPage.Init(currentconsult)
      EditorPages.Add(WorkcoverPage, "Workcover")
   Case "Requests"
      '------------------------------------------------------------------------
      'Create an  editor page with embedded request form and space for
      'some progress notes underneath
      'Note:   A patient as none or many previously ordered request forms
      '`       i.e currentconsult!RequestForms collection
      '        A consultation has none or many RequestForms ordered just
      '        this consultation
      '        currently this is pointed to by currentconsult.RequestForms
      '------------------------------------------------------------------------
      page = New FLinkContainer
      RequestPage = New FRequests(page.VBoxEditor)
      RequestPage.Init(currentconsult)
      page.tag = "Requests"
      page.title = "Requests"
      WorkspaceEditor.Add(page)
      EditorPages.Add(RequestPage, "Requests")
   Case "Measurements"
     Return 'nothing done yet

   Case "Recalls"
      page = New FLinkContainer
      RecallPage = New FRecalls(page.VBoxEditor)  'add a recalls page
      RecallPage.Init(currentconsult)
      WorkspaceEditor.Add(page)
      page.tag = "Recalls"                        
      page.Title = "Recalls"                      'put up headings
      EditorPages.Add(RecallPage, "Recalls")
      RecallPage.FAdditionalNotesEditor.bExit = False 
   Case "Skin Excision"
      page = New FLinkContainer
      ExcisionPage = New FProcedures(page.VBoxEditor)
      page.Title = "Skin Excision"
      page.Tag = "Skin Excision"
      EditorPages.Add(ExcisionPage, "Skin Excision")
      WorkspaceEditor.Add(page)
      ExcisionPage.Init(currentconsult)
   End Select
   Goto EnsureVisible
   
   EnsureVisible:
                  If Form_ExportClinical.Visible = True Then
                     Form_ExportClinical.Visible = False
                     WorkspaceEditor.Visible = True
                  End If
                  If vBoxWorkSpace.Visible = False Then
                     vBoxWorkSpace.Visible = True
                     vBoxWebBrowser.Visible = False
                     Form_ExportClinical.Visible = False 
                  End If

 
End 

Function Editor_SetActivePage(pagetitle As String) As Boolean
   '---------------------------------------------------------------
   'PURPOSE: If a page is already opened, the twitch to that page
   'EXPECTS: title of a page as a string
   'RETURNS: boolean flag TRUE if page found, FALSE = not yet added
   'for historical reasons which which will make no sens the
   'FProgressNotePageContainer is only a Vbox. FIXME
   '----------------------------------------------------------------
  ' Dim page As FProgressNotePageContainer
   Dim page As FLinkContainer
   For Each page In WorkspaceEditor.Children
     If Page.tag = pagetitle Then 
       WorkspaceEditor.ActiveWindow = page
       Return True
     End If
  Next
  Return False
End

Public Sub Editor_PastHistory_ProgressNotePage(phx As Collection)
  '--------------------------------------------------------------------------------------------------------
  ' Adds a progress note page to the workspace editor
  '
  ' Note that  any text in the editor is linked to the coding for that problem e.g Hypertension.
  ' Note these pages are held in the EditorPages collection, the pk_pasthistory key is the tag for the page
  '--------------------------------------------------------------------------------------------------------  
  Dim page As FLinkContainer
  Dim ProgressNotesPage As FProgressNotePage
  vBoxWebBrowser.Visible = False  'in case visible
  vBoxWorkSpace.Visible = True  
  If Not Editor_SetActivePage(phx!pk_pasthistory) Then
     page = New FLinkContainer
     page.tag = phx!pk_pasthistory
     page.text = phx!description
     ProgressNotesPage = New FProgressNotePage(page.VBoxEditor)
     ProgressNotesPage.lblNotesFor.text = phx!description & " noted at " & phx!age_onset & "yrs"
     ProgressNotesPage.tag = phx!pk_pasthistory
     '----------------------------------------------------------------- 
     ' Initialises the page, sets the pk_pasthistory on the editor page
     ' .Init() does things including load any existing progress notes
     ' for this problem.
     '-----------------------------------------------------------------
     ProgressNotesPage.set_fk_section(Const.cSection_PastHistory)
     ProgressNotesPage.Init(currentconsult)
     EditorPages.Add(ProgressNotesPage, phx!pk_pasthistory)
     WorkspaceEditor.Add(page)
  End If
End
Public Sub PastHistory_Delete()
   '------------------------------------------------------------------------------
   'Deletes the past history item, enforces an audit trail and refreshes the lists
   'the notes are kept in the system, just visible now as struck-through with 
   'an audit note written underneath
   '------------------------------------------------------------------------------ 
  modDBConnect.BeginTrans()
       modPastHistoryDBI.HealthIssue_Delete(currentconsult, currentPastHistory!pk_pasthistory, currentPastHistory)
  modDBConnect.CommitTrans()
  pasthistory_refresh_lists()
End





Public Sub TabStrip_Lists_MouseUp() 
   '----------------------------------------------------------------
   'User has clicked on the tab control which contains all the lists
   'ie prescriptions, recalls, letter, etc.
   'Note that some of the tabs contain **TWO**   lists which we want
   'to toggle eg letters sent, letters received, or requests written
   'results received.
   '
   'There are two lists on many tabstrips. If the tab has already
   'been clicked on, then click won't work, so need the mouse up 
   'FIXME: ?REMOVE tabstrip_lists_click and incorporate in here
   '---------------------------------------------------------------
   If IsNull(currentconsult) Then Return 
   Select Case TabStrip_Lists.Index
   Case cListRequests
      If FMetaData.Visible = True Then
         UnFiled_Document_Metadata_Show(False)
      Endif
      If cvwRequests.Visible Then
         TabStrip_Lists.ToolTip = "Display available results"
         cvwRequests.Visible = False
         cvwResults.Visible = True
       
         '--------------------------------------------------------
         'Check if the results collection is loaded, No, then load
         '--------------------------------------------------------
         cvwResults_Refresh()
      Else
         If Vbox_PDF.Visible = True Then  'pdf viewer could be showing.
           vBoxWorkSpace.Visible = True
           Vbox_PDF.Visible = False 
         End If   
         cvwResults.Visible = False
         cvwRequests.Visible = True
         TabStrip_Lists.ToolTip = "Display previous requests"
       '  cvwRequests_Refresh()
         modEditAreaHelpers.Patient_Requests_Show(currentconsult, cvwRequests)
      End If
      
   Case clistReferrals
        tbLetters_Click()
        ' If cvwReferrals.Visible Then
        '     '-----------------------------------------------------------------------
        '     'Have been viewing referrals we wrote, so toggle to the incoming letters
        '     '-----------------------------------------------------------------------
        '     cvwReferrals.Visible = False  
        '     cvwLettersReceived.Visible = True
        '     TabStrip_Lists.ToolTip = "Display Letter Inbox"
        '    ' 'lblTabListsHeading.Text = "Letters Inbox"  'pig
        '     currentconsult.Refresh("letters received")
        '     tbLetters.text = "Documents Received"
        '     cvwLettersReceived_Fill
        ' Else
        '   cvwReferrals.Visible = True  
        '    tbLetters.text = "Letters Written"
        '   cvwLettersReceived.Visible = False 
        '  cvwReferrals_Refresh()
        ' End If 
   Case clistMeasurements
         currentconsult.Refresh("measurements_available")  
        
         cvwMeasurements_Refresh()   
   Case cListCertificates
         Certificates_Refresh()
          
   End Select
End

Public Sub Certificates_Medical_Refresh()
    Dim x As Integer
    Dim sMsg As String 
    Dim cert As Collection
    
    lblCertificateType.text = "Medical Certificates"
     currentconsult.Refresh("medical_certificates")
    For Each cert In currentconsult!medical_certificates
      x = cert!pk_medicalcertificate
      cvwCertificates.Add(x, 0)
      cvwCertificates[x][0] = Format(cert!certificate_date, "dd/mm/yyyy")
      cvwCertificates[x][1] = cert!reason
      Select Case cert!fk_lu_illness_temporality
        Case 1
             sMsg = "Is "
        Case 2
            sMsg = "Was "      
        
        Case 3
            sMsg = "Will be "
            
      End Select
      Select Case cert!fk_lu_fitness
        Case 1
          sMsg &= "Fit "
        Case 2
          sMsg &= "Unfit"
      End Select
      sMsg &= " from " & Format(cert!from_date, "dd/mm/yyyy")
      If cert!to_date Then
         sMsg &= " to " & Format(cert!to_date, "dd/mm/yyyy")
      Endif
      cvwCertificates[x][2] = sMsg
      cvwCertificates[x][3] = cert!staff_wholename
    Next
End

Public Sub Certificates_Refresh()
   '--------------------------------------------------------------
   'Refreshes the certificate list according to the option buttons
   'medical (sick sheets) workcover or government (e.g centrelink) 
   'fixme: centre link not done
   '---------------------------------------------------------------
   Dim cert As Collection
   Dim x As Integer 'for readability
   Dim sMsg As String
  
   With cvwCertificates
      .Clear()
      .Columns.count = 4
      .Columns[0].width = 60
   End With  
   Select Case iCertificatetype
     
  Case const.certificate_type_medical
       Certificates_Medical_Refresh()
  Case const.certificate_type_workcover
      Workcover_Certificates_Refresh()
  Case const.certificate_type_government
   
  End Select

End

Public Sub Workcover_Certificates_Refresh()
   Dim cert As Collection
   Dim x As Integer
   
   lblCertificateType.text = "Workcover Certificates"
   currentconsult.Refresh("workcover_claims")
   For Each cert In currentconsult!workcover_claims
       x = cert!pk_view
       cvwCertificates.Add(x, 0)
       cvwCertificates[x][0] = Format(cert!visit_date, "dd/mm/yyyy")
       cvwCertificates[x][1] = cert!dentifier
       cvwCertificates[x][2] = cert!diagnosis
       cvwCertificates[x][3] = cert!management_plan
    Next
End
Public Sub cvwMeasurements_Refresh(Optional filter As String)
   Dim measurement_type As Collection 
   cvwMeasurements.Clear()                     '3 columns
   For Each measurement_type In currentconsult!measurements_available
      If filter Then
         If Not (InStr(Lower(measurement_type!identifier), filter)) Then
            Continue
         End If
      End If
           cvwMeasurements.Add(measurement_type!pk_loinc, 0)
           cvwMeasurements[measurement_type!pk_loinc][0] = measurement_type!identifier
     Next
   If cvwMeasurements.count Then
      cvwMeasurements.MoveFirst
      cvwMeasurements.Item.Selected = True
   End If
End

Public Sub cvwLettersReceived_Fill(Optional bRefresh As Boolean = False)
   '------------------------------------------------------------------------------
   'Show all letters in the inbox, if bRefresh is true then reload them all
   'If appropriate, filter display according to the document tag or letter author
   'IAN FIXME: REPLACE ME WITH A RELATIVE ONE-LINER.
   '-----------------------------------------------------------------------------
    Dim x As Integer                      'for readability = key
    Dim letters_received As Collection 
    Dim bSkip As Boolean
    Dim tag As String
    Dim author As String
    
    
    With cvwLettersReceived                       '3 columns FIXME MAKE ME CONIGURABEL
      .Clear()
      .Columns.count = 3
      .Columns[0].Width = 80
      .Columns[1].Width = 150 
    End With 
    '--------------------------------------------------------------
    'Loop through the collection, the key of the columnview becomes
    'the primary key of clin_requests.inbox_general 
    'When documents have been filed - user could have inadvertantly
    'pasted in an invisible CR \n line, which causes the list to
    'span muliple lines, so fix this 
    '-------------------------------------------------------------- 
    If bRefresh Then currentconsult.Refresh("letters_received")   
    For Each letters_received In currentconsult!letters_received  
      bSkip = False                 
      x = letters_received!pk_document 
      '---------------------------------------
      'Does the user want to filter on author?
      '---------------------------------------
      If txtLetterFilterAuthor.text <> "" Then  'Or txtDocumentFilterTag.text <> "" Then
        '---------------------------------------------------------------------------------------------
        ' Yes: User wants to filter by author, if what they are looking for not found, skip the record  
        '---------------------------------------------------------------------------------------------
        If Not InStr(Lower(letters_received!originator), Trim(Lower(txtLetterFilterAuthor.text))) Then
           bskip = True
        Else
          '---------------------------------------------------------------------
          'Have found the author bit, now do they want a particular tag as well?
          '---------------------------------------------------------------------
          If txtLetterFilterTag.text <> "" Then
               If Not InStr(Lower(letters_received!tag_user), Trim(Lower(txtLetterFilterTag.text))) Then
                 bskip = True
               Else
                 bskip = False 
               End If
          Else
              bskip = False 
          Endif
          
         
        End If
      Else
         '------------------------------------------------------------------
         'User dosn't want to filter on author - how about just on user tag?
         '------------------------------------------------------------------
         If txtLetterFilterTag.text <> "" Then
            If letters_received!tag_user = "" Then
              If Not InStr(Lower("unfiled"), Trim(Lower(txtLetterFilterTag.text))) Then
                   bskip = True
              Else
                    bskip = False
              End If
            Else
             If Not InStr(Lower(letters_received!tag_user), Trim(Lower(txtLetterFilterTag.text))) Then
               bskip = True
             Else
               bskip = False 
             End If
            End If
         Endif
      End If
      
      If bskip = False Then 
         cvwLettersReceived.Add(x, 0)
         cvwLettersReceived[x][0] = Format(letters_received!date_created, "dd/mm/yyyy")
         If letters_received!tag_user = "" Then
            cvwLettersReceived[x][1] = "** UNFILED LETTER **"
         Else
            cvwLettersReceived[x][1] = Replace$(letters_received!tag_user, "\n", "")
         End If
         cvwLettersReceived[x][2] = letters_received!originator
      End If   
    Next
    If cvwLettersReceived.count = 0 Then
       'If have run out of letters, eg could have just been filing unfiled ones,reload the list
        If txtLetterFilterAuthor.text <> "" Or txtLetterFilterTag.text <> "" Then 
         txtLetterFilterAuthor.text = ""
         txtLetterFilterTag.text = ""
         cvwLettersReceived_Fill() 'try again
       End If
    Endif
  
End

Public Sub ProgressNotesMenu_Refresh()
   '------------------------------------------------------------------
   'Refreshes the progress notes menu on the main toolbar
   'Clears all existing entries as user could have added new problems
   'rebuilds the menu with menu's for
   '*show all notes
   '*general notes
   '*major problems as submenu
   '*significant active problems as submenu
   '*inactive problems as submenu
   '-------------------------------------------------------------------   
   Dim mnu As Menu
   Dim mnu_major As Menu
   Dim mnu_active As Menu
   Dim mnu_inactive As Menu
   Dim PastHistoryCondition As Collection
   Dim bNeedSeparator As Boolean = True
   Dim bNoMainMenu As Boolean = True
   
   If Not currentconsult Then Return
   '----------------------------------------------------------------
   'Clear menu, even if exit this sub, don't want the last patient's
   'menu items on the list
   '----------------------------------------------------------------
   popupMenuProgressNotes.Children.Clear()  
   '-----------------------------------------------------------
   'Clear all children from the popup menu then add two entries
   'one for general notes, one for show all notes
   '-----------------------------------------------------------
  
   mnu = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
   mnu.name = "Show All Notes"
   mnu.caption = "Show All Notes"
   mnu.tag = "show all notes"
   mnu = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
   mnu.name = "General Notes"
   mnu.caption = "General Notes"
   mnu.tag = "general notes"
   If currentconsult!past_history.count = 0 Then Return 
   '---------------------------------------------------------
   'Next add all the major conditions followed by a separator
   '---------------------------------------------------------
   currentconsult.Refresh("past_history")  
   For Each PastHistoryCondition In currentconsult!past_history
    If PastHistoryCondition!major Then
        If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_1"
            mnu.caption = ""
            bNeedSeparator = False  
         End If
         If bNoMainMenu Then
            mnu_major = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_major.name = "popupMenuProgressNotes_Major"
            mnu_major.caption = "Major Health Issues"
            mnu_major.tag = "major"
            bNoMainMenu = False  
         End If
        
         mnu = New Menu(mnu_major) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
     End If
   Next
  
   bNeedSeparator = True   
   bNoMainMenu = True
   '---------------------------------------------------------------
   'Next add all the significant conditions followed by a separator
   '---------------------------------------------------------------
   For Each PastHistoryCondition In currentconsult!past_history
    If PastHistoryCondition!active = True Then
         If bNeedSeparator Then
           mnu = New Menu(popupMenuProgressNotes)
           mnu.name = "separator_2"
           mnu.caption = ""
           bNeedSeparator = False  
         End If  
         If bNoMainMenu Then
            mnu_active = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_active.name = "popupMenuProgressNotes_Significant"
            mnu_active.caption = "Significant Issues"
            mnu_active.tag = "significant"
            bNoMainMenu = False  
         End If         
         mnu = New Menu(mnu_active) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
    End If
   Next 
   bNeedSeparator = True   
   bNoMainMenu = True
   '--------------------------------------------------------------
   'Lastly add all the inactive conditions followed by a separator
   '--------------------------------------------------------------
    For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!active = False And PastHistoryCondition!major = False
         If bNeedSeparator Then
           mnu = New Menu(popupMenuProgressNotes)
           mnu.name = "separator_3"
           mnu.caption = ""
           bNeedSeparator = False  
         End If  
         If bNoMainMenu Then
            mnu_inactive = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_inactive.name = "popupMenuProgressNotes_Significant"
            mnu_inactive.caption = "Inactive Issues"
            mnu_inactive.tag = "inactive"
            bNoMainMenu = False  
         End If         

         mnu = New Menu(mnu_inactive) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
    Next
End


Public Sub popupMenuProgressNotes_Click()
   '----------------------------------------------------------------------------
   'Show either all notes, general notes only, or those for a health issue alone
   '----------------------------------------------------------------------------
   Dim fk_section As Integer
   Dim shtml As String 
   Dim page_heading As String 
   
   If Not currentconsult Then Return
   
   Select Case Last.tag
    Case "show all notes"
        
         Editor_ShowPage("All Previous Notes")
         Return 
    Case "general notes"
        
         fk_section = const.cSection_GeneralNotes
         page_heading = "GENERAL NOTES"
         shtml = modProgressNotes.ConstructHTML_SingleProblem(currentconsult, 0, fk_section)
    Case Else
    
      fk_section = const.cSection_PastHistory
      shtml = modProgressNotes.ConstructHTML_SingleProblem(currentconsult, Last.tag, fk_section)
      page_heading = UCase(currentconsult!past_history[Last.tag]!description)
  End Select
   form_clinical.vBoxWebBrowser.Visible = True
   form_clinical.vBoxWorkSpace.Visible = False 
  ' currentTemporaryWebbrowserHTMLFilename = modHTML.Display_HTML_Return_Filename(shtml, WebBrowserNotes, "progress_notes")
   WebBrowserNotes.html = shtml
   lblWebBrowserNotes.Text = page_heading

End

Public Sub Pasthistory_Refresh_Lists()
   '------------------------------------------------------------
   'refreshes the cvwProblemsSignificant and cvwProblemsInactive lists
   'the collection members are referenced by the pk_past history
   'which is kept as the key of the list
   '------------------------------------------------------------
 
   Dim PastHistoryCondition As Collection
   Dim sLaterality As String
   currentconsult.Refresh("past_history")  
   ProgressNotesMenu_Refresh
   cvwProblemsMajor.columns.Count = 3
   cvwProblemsSignificant.columns.Count = 3 '0 = date problem noted, 1 = empty as spacer, 2 = the description
   cvwProblemsInActive.columns.Count = 3

   cvwProblemsInActive.Clear()
   cvwProblemsMajor.Clear()
   cvwProblemsSignificant.Clear()
   
   For Each PastHistoryCondition In currentconsult!past_history
      'Print PastHistoryCondition
       If PastHistoryCondition!major Then
          CurrentPastHistoryList = cvwProblemsMajor
       Else If PastHistoryCondition!active Then
          CurrentPastHistoryList = cvwProblemsSignificant
       Else
          CurrentPastHistoryList = cvwProblemsInActive
       End If
       CurrentPastHistoryList.Add(PastHistoryCondition!pk_pasthistory, 0)
       CurrentPastHistoryList[PastHistoryCondition!pk_pasthistory][0] = PastHistoryCondition!year_onset
      Select Case PastHistoryCondition!fk_laterality
      Case const.LateralityBoth
         sLaterality = "(Bilateral)"
      Case const.LateralityLeft
           sLaterality = "(Left)"
      Case const.LateralityRight
        sLaterality = "(Right)"
      Case const.LateralityNone
           sLaterality = ""
      End Select
       CurrentPastHistoryList[PastHistoryCondition!pk_pasthistory][1] = PastHistoryCondition!description & " " & sLaterality
    Next
   TabStripProblemLists.index = 2
   TabStripProblemLists.Caption = "Inactive (" & Str(cvwProblemsInActive.count) & ")"
   TabStripProblemLists.index = 1
   TabStripProblemLists.Caption = "Significant (" & Str(cvwProblemsSignificant.count) & ")"
   TabStripProblemLists.index = 0
   TabStripProblemLists.Caption = "Major (" & Str(cvwProblemsMajor.count) & ")"
  
End Sub

Public Sub WebBrowserNotes_ZoomIn()
   WebBrowserNotes.Zoom = Round(WebBrowserNotes.Zoom * 1.25, -2)
End


Public Sub WebBrowserNotes_ZoomOut()
    WebBrowserNotes.Zoom = Round(WebBrowserNotes.Zoom / 1.25, -2)
End 

Public Sub tbWebBrowser_Click()
  Select Case Last.tag
  Case "progress notes"
       ' 
  Case "refresh"
 
      ' ProgressNotes_ConstructHTML()
  Case "print"
         Print_Browser_Contents()
 Case "clinical summary"
        ' CarePlan_ConstructHTML()
        ' lbl.text = "Health Summary"
  Case "zoom in"
       WebBrowserNotes_ZoomIn
      '  WebBrowserNotes.zoom = modUtil.WebBrowserZoom("zoom in", WebBrowserNotes.zoom)
  Case "zoom out"
       WebBrowserNotes_ZoomOut
        ' WebBrowserNotes.zoom = modUtil.WebBrowserZoom("zoom out", WebBrowserNotes.zoom)
  Case "close"
      ' lblClinicalHeading.text = sMainHeading 'restore the heading
       vBoxWebBrowser.Visible = False
       vBoxWorkSpace.Visible = True
 Case "brief pi close"
         ' VBoxWorkSpace.Visible = True
        '  Vbox_BriefPI.Visible = False
  End Select

End

Public Sub MainToolbar_Click()
   Dim StartDate As String
   Dim LastDate As String
 '  Dim sm As New cDBUser
   Dim x As Integer
   Dim form_About As FAbout
  
  If Not currentconsult Then Return 
  Select Case Last.tag
      Case "health summary"
          Health_Summary_Display()
      Case "care plan"
          Care_Plan_Display()
      Case "export pdf"
           Export_Records()
        
      Case "general notes"    
             '--------------------------------------------------------
             'If all tabs are closed, allow getting back general notes
             '--------------------------------------------------------  
            If currentconsult Then 
               vBoxWebBrowser.Visible = False
               vBoxWorkSpace.Visible = True
               Editor_ShowPage("New General Notes")
            End If 
      Case "print"
       Case "about"
          form_About = New FAbout
          form_About.ShowModal()
      Case "progress notes"
         vBoxWebBrowser.Visible = False
         vBoxWorkSpace.Visible = True
         Editor_ShowPage("All Previous Notes")
      Case "help"
   End Select

End

Public Sub Export_Records()
   '------------------------------------------------------
   'Allow user to export as little or as much as they want
   '------------------------------------------------------
   WorkspaceEditor.Visible = False  
 
   With Form_ExportClinical
      .Init(currentconsult)
      .Form_PDF.BtOpen.Visible = False
      .Visible = True   
      .Raise   
   End With
 End


Public Sub Form_KeyPress()
    Dim CtrlDown As Boolean
    Dim FnDown As Boolean

  Select Case Key.Code
  Case key.F12
      Consult_Save()
  Case key.Esc
   If vBoxWebBrowser.Visible = True Then
      vBoxWebBrowser.Visible = False
      vBoxWorkSpace.Visible = True
      UnFiled_Document_Metadata_Show(False)
   End If
   If Vbox_PDF.Visible = True Then
      Vbox_PDF.Visible = False
      vBoxWorkSpace.Visible = True     
   Endif
  End Select
  'HAVN'T DECIDED WHICH KEYS TO USE, THESE OF FUNCTION KEYS
  ' 
  Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
  '     Case Asc("F")
  '     'If (Key.Code = Asc("F")) And CtrlDown Then
  '       ''' Print "the ctrl F key was pressed"
  '        Editor_ShowPage("Family History")
  '     'Endif
  '      Case Asc("A")
  '        Editor_ShowPage("Allergies")
  ' 
  '      Case Asc("T")
  '       Editor_ShowPage("Travel")
  '      Case Asc("S")
  '         Editor_ShowPage("Scripts")
  '      Case Asc("H")
  '        Editor_ShowPage("Past History")
       Case Asc("R")
         Editor_ShowPage("Recalls")
  '      Case Asc("L")
  '        Editor_ShowPage("Referrals")
  '      Case Asc("W")
  '        Editor_ShowPage("Workcover")
  '      Case Asc("M")
  '        Editor_ShowPage("Mental Health Plan")
  '      Case Asc("E")
  '       ' Editor_ShowPage("Skin Excision")
  '      Case Asc("W")
  '        Editor_ShowPage("Workcover")
      End Select
   End If
   
End



Public Sub cvwWorkcover_Select_DONOTDELETETHIS_IAN()
  ' Dim page As FProgressNotePageContainer
  ' Dim hCtrl As Control
  ' Dim hctrl2 As Control
  ' Dim aForm As FWorkcover
  '  If Not currentconsult Then Return
  ' cvwWorkcover.MoveCurrent
  ' 'FIX ME ?COULD USE  page = WorkspaceEditor.ActiveWindow
  ' For Each page In WorkspaceEditor.Children
  '   If Page.text = "Workcover" Then 
  '       For Each hctrl2 In page.VBoxEditor.Children
  '       If hctrl2 Is FWorkcover Then
  '           aform = hctrl2
  '           If Val(cvwWorkcover.Item.key) < 0 Then
  '              aform.icurrentvisit = Abs(Val(cvwWorkcover.Item.key))
  '              aform.currentvisit = aform.currentclaim.visits[aform.icurrentvisit]
  '              aform.Visit_Display  
  '              aform.Workcover_Form_Preview
  '           Else
  '              aform.currentclaim = currentconsult!workcover_claims[cvwWorkcover.Item.key]
  '              aform.icurrentClaim = cvwWorkcover.Item.key
  '             ' Debug aform.icurrentclaim, "is the current claim"
  '              aform.Claim_Display()
  '              aform.Visits_UpdateList()
  '              aform.cvwWorkCoverVisits.MoveFirst
  '              aform.cvwWorkCoverVisits.Item.Selected = True
  '              aform.icurrentVisit = aform.cvwWorkCoverVisits.Item.key
  '              aform.Visit_Display()
  '         End If
  '       End If 
  '     Next
  '   End If
  ' Next
End


Public Sub cvwWorkcover_DblClick()
   If Not currentconsult Then Return
      Editor_ShowPage("Workcover")
  

End

Public Sub TabbedLists_LostFocus()
  
 Select Case Last.tag
    Case "requests"
     If Last.Header = True Then
        Last.header = False
     End If
     
      End Select
End



Public Sub TabbedLists_Fonts_Select(cvw As Columnview)

  If Dialog.SelectFont() Then Return

   cvw.Font = Dialog.Font
  
End

Public Sub TabbedLists_Menu()
   Dim x As Integer
   Dim menuitem As Menu
   If Not currentconsult Then Return 
   Select Case Last.tag
     
      Case "letters received"
           If cvwLettersReceived.count Then
              mnuLettersReceived.Popup()
           Endif
      Case "requests"
           If cvwRequests.count Then 
              mnuTabbedListRequest.Popup()
           End If
      Case "referrals"
           If cvwReferrals.count Then mnuTabbedListReferral.popup()
      Case "prescriptions"
      Case "measurements"
      Case "recalls"
         '------------------------------------------------------------------------
         'Adjust the popup menu text to indicate the usual default repeat interval
         'turn back on (could be off) all menu options
         '------------------------------------------------------------------------
         If cvwRecalls.count Then 
            For Each menuitem In mnuTabbedListRecalls.Children
             menuitem.Enabled = True
            Next
            mnuTabbedListRecalls_Completed.caption = "Mark Completed Repeat in " & currentrecall!interval & currentrecall!abbrev_text
        Else
            '-------------------------------------------------------------
            'allow the menu, but only couple of things     
            'mnuScratchPad_HistoryEntirew entire pad history or above
            '-------------------------------------------------------------
            For Each menuitem In mnuTabbedListRecalls.Children
               Select Case menuitem.Tag
               Case "view audit trail", "help", "exit"
                  menuitem.Enabled = True  
               Case Else        
                  menuitem.Enabled = False  
               End Select
            Next
         End If
         mnuTabbedListRecalls.popup()
      Case "results"
         mnuResultsReceived_ShowGraphable()
         mnuResultsReceived.Popup()
      Case "inbox"
        
   End Select
End
Public Sub mnuResultsReceived_ShowGraphable()
   '----------------------------------------------------------
   'User has clicked on the popup menu for results
   'Get all measurements available for this result or results
   'Load them onto the graphable menu
   'or disable this option if nothing is graphable
   '----------------------------------------------------------
   Dim graphable_item As Collection
   Dim graphable_items As Collection
   Dim mnu As Menu
   
   cvwResults.MoveCurrent
   mnuResultsReceived_Graphable.Children.Clear()
   graphable_items = modMeasurementsDBI.Get_Graphable(currentconsult!results_received[cvwResults.Item.key]!pk_document)
   If graphable_items.count = 0 Then
      mnuResultsReceived_Graphable.Enabled = False
      Return
   Else  
       mnuResultsReceived_Graphable.Enabled = True  
   End If   
   For Each graphable_item In graphable_items
       mnu = New Menu(mnuResultsReceived_Graphable) As "mnuResultGraphable" 
       mnu.name = graphable_item!identifier  
       mnu.caption = graphable_item!identifier  
       mnu.tag = graphable_item!loinc
   Next
End 

Public Sub mnuResultsReceived_Click()
   '--------------------------------------------------------
   'User has clicked on the menu over result's received
   'Note that graph items, which are added 'on the fly' are
   'handled with mnuResultGraphable_Click()
   '--------------------------------------------------------
   Select Case Last.tag
     Case "change font"
         Try cvwResults.font = modUtil.Change_Fonts(cvwResults.font)
         If Not Error Then 
           Settings["TabbedLists/cvwResults.font"] = cvwResults.Font.ToString()
         End If
     Case "adjust columns"
        cvwResults.Header = True
        cvwResults.Resizable = True 
     Case "edit metadata"
          Document_Edit_Metadata(currentconsult!results_received, cvwResults.Item.key)
     Case "delete"
          Document_Delete(currentconsult!results_received, cvwResults.Item.Key)
          cvwResults_Refresh()
     Case "undelete"
         'fixme implement me
     Case "display"
         Inbox_showResult()
     Case "display as letter"
         Document_Display_As_Letter()
     Case "print"
       'temp
       Print currentconsult!results_received[cvwResults.Item.Key]!pk_document
       '  modPrinting.PrintHtml(currentconsult!results_received[cvwResults.Item.Key]!html, const.Paper_Plain)
   End Select
End 

Public Sub Document_Display_As_Letter()
   '---------------------------------------
   'Swaps display type from result to letter
   '----------------------------------------
   Dim D As New Collection 
   cvwLettersReceived.MoveCurrent() 
   d!pk_document = currentconsult!results_received[cvwResults.Item.Key]!pk_document
   d!fk_lu_display_as = const.Document_Display_As_Letter
   modArchiveDocumentsDBI.Save(d, currentconsult!results_received[cvwResults.Item.Key])
   modDBConnect.CommitTrans()
   cvwResults_Refresh()
End

Public Sub Document_Display_As_Result()
   '---------------------------------------
   'Swaps display type from letter to result
   '----------------------------------------
   Dim D As New Collection 
   cvwLettersReceived.MoveCurrent() 
   d!pk_document = currentconsult!letters_received[cvwLettersReceived.Item.key]!pk_document
   d!fk_lu_display_as = const.Document_Display_As_Result
   modArchiveDocumentsDBI.Save(d, currentconsult!letters_received[cvwLettersReceived.Item.key])
   Deleted_Document_keys.Add(d!pk_document, Deleted_Document_keys.count)
   modDBConnect.CommitTrans()
   
   cvwLettersReceived_Fill(True)
End

Public Sub Document_Edit_Metadata(documents As Collection, document_key As Integer) ' As Integer, user_tag As String)
   '------------------------------------------
   'Edits the metadata of an existing document
   'If not yet shown, show the document
   '------------------------------------------
  ' If vBoxWorkSpace.Visible = False Then
  '   Document_Display()
  ' Else
         With FMetaData
            .Init("Allocated Documents")                                      'gui elements for filing, not allocating like in scanning
            .Edit(documents, document_key)     
            .bexit = True
            
      '    .txtUserObservationName.text = user_tag  
       '   .txtUserObservationName.pos = 0                                      'ensure start of line showing
          .HBox_Save.visible = True                                           'contains the save button
          .hBox_Urgency.Visible = False                                        'not needed as already in the patients notes
          .bExit = False   
          .txtUserObservationName.SetFocus()
         End With 
       '  Try FMetaData.txtUserObservationName.text = 
       UnFiled_Document_Metadata_Show(True)                                    'set up FClinical to show FMetadata
 ' End If
End

Public Sub Document_Delete(documents As Collection, pk_document As Integer)
   '---------------------------------------
   'Swaps display type from letter to result
   '----------------------------------------
   Dim D As New Collection 
   cvwLettersReceived.MoveCurrent() 
   With Message
      .Title = "Delete Document"
      If .Warning("Are you sure you wish to delete this document?\n\nPlease confirm.", "Yes", "No") = 2 Then Return 
   End With
  
   D!pk_document = pk_document
   d!deleted = True
   modArchiveDocumentsDBI.Save(d, documents[pk_document])
   modDBConnect.CommitTrans()
  ' refresh the results As Well
  
End
Public Sub Document_Print(pages As String)
  
  If pages = "single" Then
    
  Endif
  
  
End

Public Sub mnuResultGraphable_Click()
   Dim GraphableItem_Data As New Collection 
   '-----------------------------------------------------------------
   'User has clicked on a graphable item on the results received list
   '-----------------------------------------------------------------
   Measurement_Graph(Last.tag, Last.caption)
   GraphableItem_Data!loinc = Last.tag
   GraphableItem_Data!name = Last.caption 
   pbGraphName.tag = GraphableItem_Data
End 

Public Sub mnuTabbedListReferral_Click()
  cvwReferrals.MoveCurrent()
  Select Case Last.tag
  Case "delete"
    'Referral_Delete()
   Case "undo delete"
   Case "print letter"
         Re_Print(currentconsult!referrals_written[cvwReferrals.Item.key]!letter_html)

   Case "email"
      modUtil.NotImplemented("Email Request")
   Case "preview"
       Referral_Letter_Display()
   Case "sort by letter tag"
   
   Case "font"
      Try cvwReferrals.font = modUtil.Change_Fonts(cvwReferrals.font)
      If Not Error Then 
         Settings["TabbedLists/cvwReferrals.font"] = cvwReferrals.Font.ToString()
      End If
   
   Case "help"
  End Select
  
End
Public Sub Referral_Delete()
  
  
  
End

Public Sub Recalls_Audit_Trail(sAudit_action As String)
  '------------------------------------------------------------
  'Displays either history of current recall or all the recalls
  'according to the mnuTabbedListRecalls.tag property passed as
  'saudit_Action 
  '------------------------------------------------------------
  Dim audit_rows As Collection
  Select Case sAudit_action
  Case "view recall history"
       audit_rows = modRecallsDBI.AuditTrail_Get_Recalls("clin_recalls.vwrecallsaudit", currentconsult!patient!fk_patient, currentrecall!fk_reason)
  Case "view audit trail"
         audit_rows = modRecallsDBI.AuditTrail_Get_Recalls("clin_recalls.vwrecallsaudit", currentconsult!patient!fk_patient)
  End Select
  ' FIXME: display audit data
End

Public Sub PastHistory_Audit_Trail()
  Dim audit_rows As Collection
  'FIXME: use common audit trail system
  'audit_rows = modAuditDBI.AuditTrail_Get_PastHistory("clin_history.vwpasthistoryaudit", currentconsult!patient!fk_patient, currentpasthistory!pk_pasthistory)
  'FClinical.WebBrowser_show(modAuditDBI.Audit_HTML_Construct(audit_rows, "Past History").GetData())
End

Public Sub mnuTabbedListRecalls_click()
   '-----------------------------------------------------------------
   'User has clicked on the recalls list, execute the various options
   'e.g delete the recall, mark it completed, reschedule etc
   '-----------------------------------------------------------------
   Select Case Last.tag
   Case "print"
      modUtil.NotImplemented("Print the recall")
   Case "email"
       modUtil.NotImplemented("Email the recall")
   Case "notify front desk"
      modUtil.NotImplemented("Notify front desk about the recall")
   Case "view recall history", "view audit trail"
         Recalls_Audit_Trail(Last.tag)
   Case "adjust column widths"
      ' modUtil.NotImplemented("Adjust the column widths")
       cvwrecalls.Header = True
       cvwRecalls.Resizable = True
   Case "change fonts"
      Try cvwRecalls.font = modUtil.Change_Fonts(cvwRecalls.font)
      If Not Error Then  'FIXME AND ALL SIMILAR PROBABLY NOT NEEDED AS SAVED WHEN WHOLE PROGRAM CLOSE
            Settings["TabbedLists/cvwRecalls.font"] = cvwRecalls.Font.ToString()
      End If
   Case Else
       modRecallsMenu.Process(currentrecall, Last.tag, currentconsult)
   End Select
End

Public Sub mnuTabbedListRequest_Click()
      cvwRequests.MoveCurrent()

  Select Case Last.tag
      Case "adjust columns"
          cvwRequests.Header = True
          cvwRequests.Resizable = True 
      Case "delete"
   
      Case "undo delete"
      Case "reverse single request"
      Case "re-order"
      Case "re-print"
         If Split(cvwRequests.item.key, "-").Count = 3 Then
            Re_Print(currentconsult!requests_ordered[Right(cvwRequests.item.key, Len(cvwRequests.item.key) - InStr(cvwRequests.Item.key, "-"))]!form_html)
         Else
            Re_Print(currentconsult!requests_ordered[cvwRequests.item.key]!form_html)
         End If
      Case "preview form"
            RequestForm_Display_Previous()
      Case "show result"
            RequestForm_ShowResult()
            
      ' Case "graph"
      '    vBoxWebBrowser.Visible = False
      '    vBoxWorkSpace.Visible = True
      '    'Measurement_Graph()

      Case "sort by date ascending"
      Case "sort by date descending"
         
      Case "sort name ascending"
      Case "sort name descending"
      Case "list as forms"
      Case "list as requests"
      Case "font"
         Try cvwRequests.font = modUtil.Change_Fonts(cvwRequests.font)
         If Not Error 
             Settings["TabbedLists/cvwRequests.font"] = cvwRequests.Font.ToString()

         End If
   End Select
End

Public Sub RequestForm_ShowResult()
  Dim bits As String[]
  If Split(cvwRequests.item.key, "-").count = 2
   WebBrowserNotes.HTML = currentconsult!requests_ordered[cvwRequests.Item.Key]!html
   vBoxWorkSpace.Visible = False        'remove the editor vbox
   vBoxWebBrowser.Visible = True       'show the webrowser by making its vbox visible
 End If
End

Public Sub RequestForm_Display_Previous()
    '--------------------------------------------------------------------
   'Displays a previously saved request form when user clicks on list
   'Key of unexpanded columnview item is n(..n)-n(..n) eg 21-24
   'key of an expanded columnview item is eg 12-24-56
   'replaces pk of an image with the actual image retreived from backend
   '---------------------------------------------------------------------
   cvwRequests.MoveCurrent
   If Split(cvwRequests.item.key, "-").Count = 3 Then
      WebBrowserNotes.html = modConsultDBI.Images_Get(currentconsult!requests_ordered[Right(cvwRequests.item.key, Len(cvwRequests.item.key) - InStr(cvwRequests.Item.key, "-"))]!form_html)
   Else
      WebBrowserNotes.html = modConsultDBI.Images_Get(currentconsult!requests_ordered[cvwRequests.item.key]!form_html)
   End If
   
   tbWebBrowserPrint.ToolTip = "Print the request form"
   vBoxWorkSpace.Visible = False        'remove the editor vbox
   vBoxWebBrowser.Visible = True       'show the webrowser by making its vbox visible
End

Public Sub tbPatientPicture_Menu()

  mnuPatientPhoto.Popup()

End
Public Sub mnuLettersReceived_Click()
  cvwLettersReceived.MoveCurrent()
  Select Case Last.tag
    Case "help"            'show help for this section 
    Case "columns"         'adjust and save column widths
    Case "fonts"           'adjust and save font
    Case "display"         'show the letter
       Document_Display(currentconsult!letters_received, cvwLettersReceived.Item.key)              'display document

    Case "print"           'print the letter'
    Case "file as result"  'change fk_lu_display as to const.Document_Display_As_Result
          Document_Display_As_Result()
    Case "delete"          'mark this as deleted
          Document_Delete(currentconsult!letters_received, cvwLettersReceived.Item.key)
          cvwLettersReceived_Fill(True)
    Case "edit"            'edit the metadata
          Document_Edit_Metadata(currentconsult!letters_received, cvwLettersReceived.Item.key)
    Case "link"            'link to a health issue
    Case "print single"
          Document_Print("single")
    Case "print all"
          Document_Print("all")
    Case "select all"
          cvwLettersReceived.SelectAll(True)
    Case "unselect"
       cvwLettersReceived.SelectAll(False)
  End Select
  
End


Public Sub mnuPatientPhoto_Click()
  
  Select Case Last.tag
   Case "acquire"
      PatientPhoto_Acquire()
   Case "import"
      PatientPhoto_Import()
   Case "edit"
      PatientPhoto_Edit()
   Case "save"
      PatientPhoto_Save()
  End Select
End

Public Sub PatientPhoto_Acquire()
   Message.info("Photo Acquisition is not implemented yet")
End

Public Sub PatientPhoto_Import()
 Message.info("Photo Import is not implemented yet")
End

Public Sub PatientPhoto_Edit()
 Message.info("Photo Editing is not implemented yet")
End

Public Sub PatientPhoto_Save()
 Message.info("Photo Saving is not implemented yet")
End

Public Sub popupMnu_ProblemList_Click()
   '----------------------------------------------------------------------
   'User has clicked on the popup menu over the problem lists in FClinical
   '----------------------------------------------------------------------
  Dim PHPage As FPastHistory
  Dim datachanged As Boolean 
  Dim sHtml As String
  Select Case Last.tag  
      Case "add"
           Editor_ShowPage("Health Issues")
      Case "edit"
           Editor_ShowPage("Health Issues")
          '----------------------------------------------------------
          'Now find that page in the editor and load the past history 
          'into the editing area
          '-----------------------------------------------------------
           PHPage = EditorPages["Health Issues"]
           PHPage.pk_pasthistory_set(currentpasthistory!pk_pasthistory)
           PHPage.HealthIssue_Display()
      Case "link to coding system"
      
      Case "view all previous notes"
          shtml = modProgressNotes.ConstructHTML_SingleProblem(currentconsult, currentpasthistory!pk_pasthistory, const.cSection_PastHistory)
          form_clinical.vBoxWebBrowser.Visible = True
          form_clinical.vBoxWorkSpace.Visible = False 
          lblWebBrowserNotes.Text = UCase(currentconsult!past_history[currentpasthistory!pk_pasthistory]!description)
         ' currentTemporaryWebbrowserHTMLFilename = modHTML.Display_HTML_Return_Filename(shtml, WebBrowserNotes, "progress_notes")
           WebBrowserNotes.html = shtml
      Case "audit trail"
        PastHistory_Audit_Trail()
      Case "new notes"
          Editor_PastHistory_ProgressNotePage(currentpasthistory)
      Case "make significant"
           currentconsult!past_history[CurrentPastHistoryList.Current.key]!active = True
           currentconsult!past_history[CurrentPastHistoryList.Current.key]!major = False
           datachanged = True
      Case "make significant with explanation"
      
      Case "make major"
           currentconsult!past_history[CurrentPastHistoryList.Current.key]!major = True
           currentconsult!past_history[CurrentPastHistoryList.Current.key]!active = False
           datachanged = True
      Case "make major with explanation"
      
      Case "make inactive"
          currentconsult!past_history[CurrentPastHistoryList.Current.key]!active = False
          currentconsult!past_history[CurrentPastHistoryList.Current.key]!major = False
          datachanged = True
      Case "make inactive with explanation"
      
      Case "mark as operation" 
          currentconsult!past_history[CurrentPastHistoryList.Current.key]!operation = True
          datachanged = True  
      Case "mark as confidential"
         currentconsult!past_history[CurrentPastHistoryList.Current.key]!confidential = True
         datachanged = True  
      Case "delete"
            PastHistory_Delete
      Case "help"
       form_clinical.WebBrowser_Show(Application.path & "/help/health-issues.html", "Please consult the help files for further detailed information on this topic")

       End Select
 
  If datachanged Then
     modPastHistoryDBI.Save(currentconsult, CurrentPastHistoryList.Current.key, currentconsult!past_history[CurrentPastHistoryList.Current.key])
     Pasthistory_Refresh_Lists()
  End If   
  popupMnu_ProblemList.hide()
End Sub 

Public Sub PastHistoryLists_Menu()
   popupMnu_ProblemList_MakeMajor.Enabled = True 
   popupMnu_ProblemList_MakeSignificant.Enabled = True  
   popupMnu_ProblemList_MakeInactive.Enabled = True   
   
   With Last
     If .count Then
       .MoveCurrent
      ' popupMnu_ProblemList.caption = currentpasthistory!description
     '  popupMnu_ProblemList_NewNotes.caption = "Add new notes for " & currentpasthistory!description
       popupMnu_ProblemList_title.caption = UCase(currentpasthistory!description)
       Select Case Last.tag
       Case "major"
          popupMnu_ProblemList_MakeMajor.Enabled = False  
          popupMnu_ProblemList_MakeMajor_Explain.Enabled = False  
       Case "significant"
         popupMnu_ProblemList_MakeSignificant.Enabled = False  
         popupMnu_ProblemList_MakeSignificant_Explain.Enabled = False  
       Case "inactive" 
         popupMnu_ProblemList_MakeInactive.Enabled = False   
         popupMnu_ProblemList_MakeInactive_Explain.Enabled = False  
       End Select
       popupMnu_ProblemList.Popup
     End If
   End With

End


Public Sub PastHistoryLists_Select()
   '--------------------------------------------------
   'Moves internal record pointer of the last list the
   'user clicked on to match the row they clicked on.
   'Sets active past history item to that highlighted.
   'Note this routine is needed by:
   '         PastHistoryLists_DblClick()
   '         PastHistoryLists_menu()
   '--------------------------------------------------
   CurrentPastHistoryList = Last
    With Last
      If .count Then
         .MoveCurrent
         currentpasthistory = currentconsult!past_history[.item.key]
      End If
   End With
End

Public Sub PastHistoryLists_DblClick()
   '-----------------------------------------------------
   'Called when the user clicks on any of the three
   'past history lists (Major, significant, inactive
   'Creates a new editor page ie FProgressNotePage instance
   'in the main tab control
   '-----------------------------------------------------
   If Not currentconsult Then Return
   If Not Last.count Then Return 
   
   Last.MoveCurrent()
   Editor_PastHistory_ProgressNotePage(currentconsult!past_history[Last.item.key])
   
 End

Public Sub TabbedLists_DblClick()
   
 
   If IsNull(currentconsult) Then Return
   Last.MoveCurrent 'set internal cursor
   Select Case Last.tag
   Case "requests"
      '---------------------------------------------------------------
      'double clicking on this list, expands the list if not expanded
      'display the result being double clicked on.
      '---------------------------------------------------------------
     '-----------------------------------------------------
      'If this item has a parent - allow dbleclick to
      'display it, otherwise, defaults to expanding the list
      '-----------------------------------------------------
      If Not cvwRequests.MoveParent() Then
         RequestForm_ShowResult()
      End If
      
   Case "letters received" 
      Document_Display(currentconsult!letters_received, cvwLettersReceived.Item.key)              'display document
   Case "referrals"
   
       If vBoxWebBrowser.Visible = False Then
        If cvwReferrals.Visible = True
           Referral_Letter_Display()
        Else
          ' Letter_Received_DISPLAY()
        End If   
      End If
    Case "results"
       Inbox_showResult()
End Select
End

Public Sub Document_Display(documents As Collection, document_key As Integer)
   '---------------------------------------------------------------------------------
   'Displays a document currently in central area until IAN does the emulated browser
   'If document metadata is not complete, prompt user by showing the metadata
   '---------------------------------------------------------------------------------
   Dim filename As String = documents[document_key]!source_file
   Dim currentobservations As Collection 
   Dim shtml As String 
   
   Inc application.Busy
   If vBoxWorkSpace.Visible = True Then vBoxWorkSpace.Visible = False        'remove the editor vbox    
   Try UnFiled_Document_Metadata_Show(False)                                 'remove this it could be showing if not completed from previous document
   Select Case File.Ext(filename)
     Case "pdf"
         vBoxWebBrowser.Visible = False
         Vbox_PDF.Visible = True
         FPDF.Load_PDF(modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/documents/") &/ filename)
     Case "jpg", "png", "bmp", "jpeg", "tiff"
     Case Else 'must be hmtl
           Vbox_PDF.Visible = False  
           If IsNull(documents[document_key]!html) Then        'Null = unfiled, construct this from backend
               CurrentObservations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & document_key & " ORDER BY observations.observation_date, set_id")
               shtml = modHL7Process.Construct_HTML(currentconsult!patient, documents[document_key], currentobservations, True, True, documents[document_key]!fk_lu_display_as)
           Else
              shtml = documents[document_key]!html
           End If
           WebBrowserNotes.html = sHTML
           vBoxWebBrowser.Visible = True        'show the webrowser by making its vbox visible
   End Select
   '---------------------------------------------------------------------------------
   'Has this document been filed by (a) the user?, No? then get user to edit metadata
   '---------------------------------------------------------------------------------
    If IsNull(documents[document_key]!tag_user) And FMetaData.visible = False Then
       Document_Edit_Metadata(Documents, document_key)
    Endif
      Dec application.Busy
End


Public Sub Inbox_showResult()
      '-------------------------------------------------------------------------------------
      'Display a result - this could have been received as HL7 or as as scanned pdf or image
      'It may or may not have been 'filed' - ie viewed in the users inbox
      '-------------------------------------------------------------------------------------
      Dim bExcludeFTReport As Boolean
      Dim bExcludePIT As Boolean
      Dim display_style As Integer = const.Document_Display_As_Result
      Dim fgc As Integer
      Dim bgc As Integer
      Dim sHtml As String 
      Dim SelectedDocument As Collection 
      Dim filename As String 
      Dim file_extension As String
      
      If cvwResults.count = 0 Then Return 
     ' cvwResults.MoveCurrent()
      lblWebBrowserNotes.text = "Result"
      If vBoxWorkSpace.Visible = True Then vBoxWorkSpace.Visible = False        'remove the editor vbox    
      Try UnFiled_Document_Metadata_Show(False)                                     'remove this it could be showing if not completed from previous document
      '--------------------------------------------------------------------------------------------
      'First, do we show the pdf viewer or the web-browser, FIXME:images not yet taken into account
      '--------------------------------------------------------------------------------------------
      file_extension = Lower(File.Ext(currentconsult!results_received[cvwResults.Item.Key]!source_file))
      Select Case file_extension
        Case "pdf"
            vBoxWebBrowser.Visible = False
            Vbox_PDF.Visible = True
            filename = currentconsult!results_received[cvwResults.Item.Key]!source_file
            FPDF.Load_PDF(modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/documents/") &/ filename)
         Case Else
            Vbox_PDF.Visible = False   
            vBoxWebBrowser.Visible = True      
      End Select
      '----------------------------------------------------------------------
      'Now determine if this has actually been viewed and filed by the doctor
      'if it has, then there will be a user tag
      'If not, then show the metadata for this document
      '----------------------------------------------------------------------
      If IsNull(currentconsult!results_received[cvwResults.Item.Key]!tag_user) Then
            FMetaData.Init("Allocated Documents")                                      'gui elements for filing, not allocating like in scanning
            SelectedDocument = currentconsult!results_received[cvwResults.Item.Key] 'makes typing easier        
            '-------------------------------------------------------------------
            'Now, if a HL7 result, if no html - ie not yet file, create the html
            '------------------------------------------------------------------
            If IsNull(currentconsult!results_received[cvwResults.Item.Key]!html) And file_extension <> "pdf" Then 'FIXME: FOR PICTURES
                   bExcludeFTReport = SelectedDocument!exclude_ft_report
                   bExcludePIT = SelectedDocument!exclude_pit
                   fgc = SelectedDocument!abnormals_foreground_color
                   bgc = SelectedDocument!abnormals_background_color
                   display_style = SelectedDocument!fk_lu_message_display_style
                   CurrentObservations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & SelectedDocument!pk_document & " ORDER BY observations.observation_date, set_id")
                   shtml = modHL7Process.Construct_HTML(currentconsult!patient, SelectedDocument, currentobservations, bExcludePIT, bExcludeFTReport, display_style, fgc, bgc)
                   sHtml = Replace(shtml, "%filingas%", cvwResults[cvwResults.Item.key][1])
                   sHtml = Replace(shtml, "** UNFILED **:", "")
                   WebBrowserNotes.html = shtml
            End If
            With FMetaData
                  .Edit(currentconsult!results_received, cvwResults.Item.Key)      'display metadata for this document
                  .bexit = True
                  .txtUserObservationName.text = cvwResults[cvwResults.Item.key][1]   ' Replace$(cvwResults[cvwResults.Item.key][1], "** UNFILED **:", "")
                  .txtUserObservationName.pos = 0                                      'ensure start of line showing
                  .HBox_Save.visible = True                                           'contains the save button
                  .hBox_Urgency.Visible = False                                        'not needed as already in the patients notes
                  .bExit = False   
              End With 
              UnFiled_Document_Metadata_Show(True)                                    'set up FClinical to show FMetadata
       Else
                WebBrowserNotes.html = currentconsult!results_received[cvwResults.Item.Key]!html
                UnFiled_Document_Metadata_Show(False)
       End If 
End

Public Sub FMetaData_tbClose_Click()
      '---------------------------------------------------------
      'Remove FMetadata, put back correct FClinical gui elements
      '---------------------------------------------------------
      UnFiled_Document_Metadata_Show(False)    
      If Vbox_PDF.Visible Then Vbox_PDF.Visible = False
      vBoxWebBrowser.Visible = False
      WorkspaceEditor.Visible = True 
      Wait
      cvwResults_Refresh()  'Fixme, the appropriate one
      cvwLettersReceived_Fill(True) 
End

Public Sub FMetaData_txtUserObservationName_Activate()
   '------------------------------------------------------------------------------------------
   'This over-rides the event on this textbox in the FMetadata
   'For ease of use, when user hits enter here, File doc and roll on to next one automatically
   '------------------------------------------------------------------------------------------   
   Stop Event
   If Last.tag = "user name" Then
     FMetadata_tbSave_Click()
   Endif
   
End
Public Sub FMetaData_tbSave_Activate()
   '------------------------------------------------------------
   'Detects if user clicked <enter> on the FMetadata save button
   'overrides this event and saves. I've done this so that
   'I can then remove the metadata form and re-arrange the screen
   'from this form
   '------------------------------------------------------------  
   Stop Event
   If key.code = key.Return Then
      FMetadata_tbSave_Click()
   Endif
End


Public Sub FMetaData_tbSave_Click()
   '-----------------------------------------------------------------------
   'User is modifying a document's metadata
   'Apply the changes, remove the metadata gui and re-load the results list  
   '-----------------------------------------------------------------------
   Stop Event 
   If FMetaData.Save() Then                     'successful 
      modDBConnect.CommitTrans()                'save transaction
      FMetaData_tbClose_Click()                 'remove the gui components 
   End If
End


Public Sub UnFiled_Document_Metadata_Show(bShow As Boolean)
   '---------------------------------------------------------
   'Show or remove the unfiled document metadata gui elements
   '---------------------------------------------------------  
   FMetaData.visible = bShow  
   VboxActiveProblemList.Visible = Not FMetaData.visible
   Vbox_MiniGraphs.Visible = Not FMetaData.visible
   ScratchPad.Visible = Not FMetaData.visible 
   If bShow Then
     VsplitClinical_RightPane.Layout = Settings["Main/VsplitClinical_RightPane_Metadata"]
   Else
     VsplitClinical_RightPane.Layout = Settings["Main/VsplitClinical_RightPane"]
   Endif
End

Public Sub Referral_Letter_Display()
   '--------------------------------------------------------------------------
   'PURPOSE       :  Display a previously written referral or letterr
   'HOW THIS WORKS:  vBoxWorkSpace contains the workspace used for the editor
   '                 vBoxWebBrowser contacts the konqueror web browser which is
   '                 used to display the html of either progress notes or
   '                 the care plans or this letter
   'CALLED BY     :  TabbedLists_Dblclick 
   '                  Or TabbedLists_Select(If vBoxWebBrowser.visible = True)
   '-------------------------------
    cvwReferrals.MoveCurrent()
    tbWebBrowserPrint.ToolTip = "Print the referral letter"
    WebBrowserNotes.html = modConsultDBI.Images_Get(currentconsult!referrals_written[cvwReferrals.Item.key]!letter_html)
    vBoxWorkSpace.Visible = False        'remove the editor vbox
    vBoxWebBrowser.Visible = True        'show the webrowser by making its vbox visible
End



Public Sub TabbedLists_Select()
   '-------------------------------------------------------------------------------------
   'NOTE the effect of Select and Click on a list are different
   '     Using Referral Letters in a list as an example - if you want to sequentially
   '     show each referral letter as the user runs through the list using the down
   '     arrow keys, the code must be in this subroutine, as _Click event is only
   '     generated when the user clicks on a list
   '     For some lists, we only want to set the underlying collection member e.g Recalls
   '-------------------------------------------------------------------------------------
   Dim Astring As String 
   Dim interval As Integer = 0
   If IsNull(currentconsult) Then Return
   Last.MoveCurrent()   'set internal cursor
   Select Case Last.tag
      Case "recalls"
           cvwRecalls.MoveCurrent()
           currentrecall = currentconsult!recalls_logged[cvwRecalls.Item.key]
      Case "results"
          If vBoxWebBrowser.Visible = True Then
            cvwResults.MoveCurrent()
            Inbox_showResult()
       End If
      Case "requests"
           If Last.Header = True Then
              Last.header = False
           End If
         cvwRequests.MoveCurrent()
         If vBoxWebBrowser.Visible Then
           RequestForm_Display_Previous()
        End If 
      Case "letters received"        
         If vBoxWebBrowser.Visible Or Vbox_PDF.Visible Then 'if visible, just move from letter to letter
             Document_Display(currentconsult!letters_received, cvwLettersReceived.Item.key)        
         End If
      Case "referrals"
         '----------------------------------------------------------------
         'If the central display area is visible the automatically show
         'the letter, otherwise the first letter has to have been loaded
         'by the double click event of any letter in the cvwReferrals list
         '----------------------------------------------------------------
         cvwReferrals.MoveCurrent()
         If vBoxWebBrowser.Visible Then
            Referral_Letter_Display()
        End If
      Case "measurements"
           cvwMeasurements.MoveCurrent()
           Measurement_Graph(cvwMeasurements.Item.key, cvwMeasurements.Item.text)
      Case "measurement favourites"
            cvwMeasurementFavourites.MoveCurrent()
            Measurement_Graph("", cvwMeasurementFavourites.Item.text)
      End Select
End

Public Sub Measurement_Graph_Picture_Clear()
   With pbMeasurementGraph
       .picture = Null
       .tag = ""
       .Refresh()
   End With
End

Public Sub Measurement_Graph(loinc As String, Measurement As String)
   '-----------------------------------------------------------
   'Graph a measurement
   'if Loinc = "" then measurement is BP, height, weight or PF
   'if Loinc <> "" then graph an observable measurement
   '-----------------------------------------------------------
    Dim Interval As Integer = 0
    Dim Astring As String 
    Dim GraphableItem_Data As New Collection 
    
    If IsInteger(Val(txtMeasurementShowLastMonths.text)) Then
         interval = Val(txtMeasurementShowLastMonths.text)
    End If   
    'fixe me replace 1 with font size tiny, med large
    GraphData = New Collection 
    GraphData = modMeasurementsDBI.Make_Graph(currentconsult!patient!fk_patient, loinc, Measurement, pbMeasurementGraph.H, pbMeasurementGraph.W, slGraphFontSize.value, interval)
    GraphData!name = Measurement
    GraphData!fontsize = slGraphFontSize.value
    GraphableItem_Data!loinc = loinc
    GraphableItem_Data!name = Measurement
   
   Try pbMeasurementGraph.picture = Picture.Load(GraphData!graph_filename)
   If Error
      Measurement_Graph_Picture_Clear()
   Else
      pbGraphName.tag = GraphableItem_Data
   End If
  
End
' Public Sub Document_Edit(documents As Collection, document_key As Integer) ' user_tag As String)
'    '------------------------------------------
'    'Edits the metadata of an existing document
'    'If not yet shown, show the document
'    '------------------------------------------
'    If vBoxWorkSpace.Visible = False Then
'      Letter_Received_Display()
'    Endif
'    With FMetaData
'       .Init("Allocated Documents")                                      'gui elements for filing, not allocating like in scanning
'       .Edit(documents, document_key)     
'       .bexit = True
'  '  .txtUserObservationName.text = user_tag  
'     .txtUserObservationName.pos = 0                                      'ensure start of line showing
'     .HBox_Save.visible = True                                           'contains the save button
'     .hBox_Urgency.Visible = False                                        'not needed as already in the patients notes
'     .bExit = False   
'    End With 
'    UnFiled_Document_Metadata_Show(True)                                    'set up FClinical to show FMetadata
' End

' Public Sub Letter_Received_Display()
'    '-------------------------------------------------------------------------------
'    'Displays letters received for the patient - either hl7 or scanned
'    'If document metadata not  yet complete Document_Display will popup the metadata
'    '--------------------------------------------------------------------------------
'    Document_Display(currentconsult!letters_received, cvwLettersReceived.Item.key)              'display document
' End

Public Sub Letter_Received_Display_old()
   ' '-----------------------------------------------------------------------------------------------------
   ' 'Displays letters received for the patient - either hl7 or scanned
   ' 'works out which is which using the file extension of the document and uses the appropriate container
   ' 'If this is an unfiled document > show the metadata form to encourage user to fill this in
   ' '-----------------------------------------------------------------------------------------------------
   '    Dim filename As String 
   '    Dim file_extension As String
   '    Dim Documents As Collection
   '    Dim Document_key As Integer
   '    
   '   cvwLettersReceived.MoveCurrent()                                            'set key to collection 
   '   tbWebBrowserPrint.ToolTip = "Print the letter"
   '   file_extension = File.Ext(currentconsult!letters_received[cvwLettersReceived.Item.key]!source_file)
   '   '--------------------------------------------------
   '   'check file extension to see what container to show
   '   '--------------------------------------------------
   '   If vBoxWorkSpace.Visible = True Then vBoxWorkSpace.Visible = False        'remove the editor vbox    
   '   Try UnFiled_Document_Metadata_Show(False)                                     'remove this it could be showing if not completed from previous document
   '   If Lower(file_extension) = "pdf" Then
   '      vBoxWebBrowser.Visible = False
   '      Vbox_PDF.Visible = True
   '      filename = currentconsult!letters_received[cvwLettersReceived.Item.key]!source_file
   '      FPDF.Load_PDF(modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/documents/") &/ filename)
   '   Else
   '        Vbox_PDF.Visible = False  
   '        WebBrowserNotes.html = currentconsult!letters_received[cvwLettersReceived.Item.key]!html
   '        vBoxWebBrowser.Visible = True        'show the webrowser by making its vbox visible
   '   End If 
   '    '----------------------------------------------------------------------
   '    'Now determine if this has actually been viewed and filed by the doctor
   '    'if it has, then there will be a user tag
   '    'If not, then show the metadata for this document
   '    '----------------------------------------------------------------------
   '    If IsNull(currentconsult!letters_received[cvwLettersReceived.Item.key]!tag_user) Then
   '          FMetaData.Init("Allocated Documents")                                      'gui elements for filing, not allocating like in scanning
   '          user_tag = Replace$(cvwLettersReceived[cvwLettersReceived.Item.key][1], "** UNFILED **:", "") 'why did I do this?
   '          Document_Edit(Documents, document_key, user_tag)
   '          ' With FMetaData
   '          '       .Edit(currentconsult!letters_received, cvwLettersReceived.Item.key)      'display metadata
   '          '       .bexit = True
   '          '       .txtUserObservationName.text = Replace$(cvwLettersReceived[cvwLettersReceived.Item.key][1], "** UNFILED **:", "")
   '          '       .txtUserObservationName.pos = 0                 'ensure start of line showing
   '          '       .HBox_Save.visible = True               'contains the save button
   '          '       .hBox_Urgency.Visible = False                   'not needed as already in the patients notes
   '          '       .bExit = False   
   '          '   End With               
   '          '   UnFiled_Document_Metadata_Show(True)  
   '          '   FMetaData.bexit = False
   '     End If 
End


Public Sub Tabbed_lists_Clear()
   '---------------------------------------------------------
   'PURPOSE    :Clears all the lists on the main tab control
   'REASON     :When user clicks on txtSearch to get a new 
   '            patient, the old data Is showing
   'CALLED BY  :txtSearch_GotFocus()
   '--------------------------------------------------------
   cvwReferrals.clear()
   cvwRequests.clear()
   cvwResults.Clear()
   cvwLettersReceived.Clear()
   cvwMedications.clear()
   cvwRecalls.Clear()
   cvwCertificates.Clear()
   cvwMeasurements.Clear()
End

Public Sub TabbedLists_Click()
   '-------------------------------------------------------------
    'NAME        : TabbedLists_Click()
    'AUTHOR      : Dr Richard Terry rterry@pacific.net.au
    'WHAT IS     : TabbedLists
    '             a tabbed container which here holds all the main
    '             lists the user would want to access e.ge
    '             lists of past medications, results, recalls etc
    'pURPOSE     : the contained lists display the patients results i.e
    '              pathology/radiology/nuclear medicine. display
    '              the appropriate list.
    'CALLED BY   : user clicks on the tab control containing
    '              the main lists.
    'RELATED     : TabbedLists_dblclick()
    'LOGIC       : when a tab containing a list is clicked on if the
    '              contents of this list have not been previously loaded
    '              they are fetched from the back end. If user clicks
    '              twice in succesion on the tab then if there are two
    '              lists on this tab, invisible one is made visible ie.
    '              say requests forms is showing, one click > the
    '              request results list is then showing.
    'WARNING      : 
    'TOFIX        : 
    '--------------------------------------------------------------
 
   If IsNull(currentconsult) Then Return  'do nothing if no consult
   Last.MoveCurrent()
   Select Case Last.tag
    Case "measurement favourite"
         cvwMeasurements.SelectAll(False)
         
    Case "results"
       '-------------------------------------------------------------
       'if the webbrowser contain a result is visible, then just show
       'the result, otherwise the initial showing must be called by
       'user double clicking on the line in the list.
       'REASON: we don't want to auto-show a html result page every time
       'user clicks on list, they may just want a menu etc, but once the
       'results are showing they may well want to keep scrolling down
       'and viewing several results in sucession.
       '--------------------------------------------------------------
       If cvwResults.Header = True Then      'user has been resizing the columns
         cvwResults.Resizable = False
         cvwResults.Header = False  
         Settings["TabbedLists/cvwResults.columns"] = Modutil.Columnsizes_To_String(cvwResults)
       End If
       If vBoxWebBrowser.Visible = True Then
          Inbox_showResult()
       End If
   Case "recalls"
      'user could have just been resizing the columns 
      cvwRecalls.Resizable = False
      cvwRecalls.Header = False  
   Case "requests"
    
   Case "letters received"

   ' Case "referrals"
   '     If vBoxWebBrowser.Visible Then
   '     'Referral_Letter_Display()
   '  End If
   Case "measurements"
      '------------------------------
      'Graph measurements if possible
      '------------------------------
      cvwMeasurementFavourites.SelectAll(False)
   End Select
  

End


Public Sub txtSearch_LostFocus()
  'Make sure the start of name visible
  Last.pos = 0
End

Public Sub cvwMedications_Menu()

  If cvwMedications.count Then
    mnuPopupMedications.popup()
  End If

End

Public Sub mnuPopupMedications_Click()
   Select Case Last.tag
      Case "make inactive"
         Print "make inactive"
      Case "make active"
         Print "make active"
      Case "prescribe single"
               Print "prescribe single"
      Case "prescribe all"
               Print "prescribe all"
      Case "delete single request"
               Print "delete single request"
      Case "reverse single request"
               Print "reverse single request"
      Case "brief product information"
               Print "brief product information"
      Case "full product information"
               Print "full product information"
      Case "change column widths"
               Print "change column widths"
      Case "change fonts"
               Print "change fonts"
      Case "save configuration"
               Print "save configuration"
      Case "view medication history"
               Print "view medication history"
   End Select
End

Public Sub tbSections_Click()
   '------------------------------------------------------------------------
   'Shows the relevant section e.g Family History, as the central webbrowser
   'could have been visible, remove it
   '------------------------------------------------------------------------
   If Not currentconsult Then Return
   WorkspaceEditor.Lock()
   Editor_ShowPage(Last.tag)
   form_clinical.vBoxWebBrowser.Visible = False
   WorkspaceEditor.UnLock()
End

Public Sub TabbedLists_Drag()
  cvwResults.Drag(cvwResults[1].text)
 '  ListBox1.Drag(ListBox1[0].Text, "text/uri-list")
'
End

Public Sub TabbedLists_MouseDown()
 'cv[x][1] = $Result!user_request_names
' cvw= $Result!user_request_namesResults.Drag(cvwResults.Current.Text, "text/uri-list")
'Print cvwResults[x][1] = $Result!user_request_names
 Return
 cvwResults.MoveCurrent()
 cvwResults.Drag(cvwResults[cvwResults.Item.key][1], "text/uri-list")
End


Public Sub tbPatientPicture_Click()

'If HBoxEditorSpecialButtons.Visible = False Then
'  HBoxEditorSpecialButtons.Visible = True
'Else
'HBoxEditorSpecialButtons.Visible = False
'End If   

End

Public Sub tabstrip_lists_Click()
  If IsNull(currentconsult) Then Return 
 Select Case TabStrip_Lists.Index
 Case cListPrescriptions
        ''lblTabListsHeading.Text = "Prescriptions Written"
        TabStrip_Lists.ToolTip = "Display prescriptions written"          
 Case cListRequests

      
 Case clistMeasurements
   '---------------------------------------------------        
   'Using Ians wish for just in time data, get whatever
   'measurements the patient has ever had done
   '---------------------------------------------------
   ''lblTabListsHeading.Text = "Measurements taken"

 Case clistRecalls
            'lblTabListsHeading.Text = "Recalls Logged"
            TabStrip_Lists.ToolTip = "Display recalls loggged"
 Case cListCertificates
           'lblTabListsHeading.Text = "Correspondance Received"
          '  TabStrip_Lists.ToolTip = "Display correspondance received"
 End Select 
'TabStrip_Lists.tooltip = lblTabListsHeading.text

End

Public Sub Re_Print(sHtml As String)  
  '------------------------------------------
  'prints html to default plain paper printer
  '------------------------------------------
   sHtml = modConsultDBI.Images_Get(shtml)
   modPrinting.PrintHtml(sHtml, const.Paper_Plain)
End

Public Sub Print_Browser_Contents()
   '-----------------------------------------------------------------------
   'temporary work-around, convert to pdf and print the html in the webview
   '-----------------------------------------------------------------------
   modPrinting.PrintHtml(WebBrowserNotes.HTML, const.Paper_Plain)
End

Public Sub WorkSpaceEditor_Activate()
   '----------------------------------------------------------------------------------
   'User has clicked on an editor page
   'If it contains progress notes, as these could have been updated in another section
   'update the progress notes
   'IAN CHECK THIS
   '----------------------------------------------------------------------------------
  Dim hCtrl As Control
' Dim Page As FProgressNotePageContainer
  Dim page As FLinkContainer
  Dim frmConsult As FProgressNotePage
  If Not WorkspaceEditor.ActiveWindow Or Bexit Then Return
 
  For Each page In WorkspaceEditor.Children
      If page = WorkspaceEditor.ActiveWindow Then
            For Each hctrl In page.VBoxEditor.Children     
               If hctrl Is Form Then
               Select Case hctrl.Name
               Case "FProgressNotePage"
                     frmConsult = hctrl       
                     frmConsult.Display_Existing_Notes()  're-load progress notes
                     frmConsult.Display_Health_Issue()
                     Break
                End Select
               End If
            Next
      End If
  Next

End

Public Sub mnuSections_Click()
   If Last.tag <> "Ignore" Then
        Editor_ShowPage(Last.tag)
   End If
End




Public Sub tbDecisionSupport_Click()

  DecisionSupport_Show("", False)

End

Public Sub txtFindMeasurement_KeyRelease()
 If Last.tag = "find" Then 
   Try cvwMeasurements_Refresh(Trim(Last.text))
 End If  

End

Public Sub tbRefreshMeasurements_Click()
    txtFindGraphable.text = ""
      cvwMeasurements_Refresh()
  

End

Public Sub txtFindMeasurement_KeyPress()
   If Not txtFindMeasurement_ExcludeKeys(key.code, Last.tag) Then 
     Stop Event
     Return
   End If
  

End
Public Function txtFindMeasurement_ExcludeKeys(keycode As Integer, tag As String) As Boolean
 
   Select Case tag
           Case "number months"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
       Case Else
         bKeyValid = True
   End Select
   Return bKeyValid
End

Public Sub pbMeasurementGraph_MouseDrag()
     Dim Pic As New Picture
     Dim fname As String 
     Dim params As New Collection 
      If Not IsNull(Last.picture) Then
         Drag.Icon = Last.Picture
       '  fname = modPlot.LineGraph(500, 180, GraphData!values, cvwMeasurements.Item.text, "")
       ' fname = modPlot.LineGraph(500, 180, GraphData!values, GraphData!name, "")
         fname = modPlot.LineGraph(500, 180, GraphData!values, GraphData!name, GraphData!name, slGraphFontSize.value)
      '  slGraphFontSize.values
         params!fname = fname
         params!H = 180
         params!W = 500
         pbMeasurementGraph.tag = params
         Pic.Load(fname)
      
        Last.Drag(Pic.Image)
        
    End If
 'pig
End


Public Sub txtFindMeasurement_Change()
  
   Try Measurement_Graph()

End

Public Sub HSplit_MeasurementLists_Resize()

  lblMeasurementFavourites.width = cvwMeasurementFavourites.Width
  lblGraphableObservations.width = cvwMeasurements.width

End

Public Sub tbLetters_Click()
      '----------------------------------------------------
      'User clicks on button on top of list > switches list
      '----------------------------------------------------
    If cvwReferrals.Visible Then
         '-----------------------------------------------------------------------
         'Have been viewing referrals we wrote, so toggle to the incoming letters
         '-----------------------------------------------------------------------
         cvwReferrals.Visible = False  
         tbLetters.text = "Documents Received"
         cvwLettersReceived.Visible = True
         TabStrip_Lists.ToolTip = "Display Letter Inbox"
         cvwLettersReceived_Fill(True)
    Else
         cvwReferrals.Visible = True  
         tbLetters.text = "Letters Written"
         cvwLettersReceived.Visible = False 
         currentconsult.Refresh("letters_received")  
         cvwReferrals_Fill()
    End If   

End

Public Sub tbResults_Click()
      '----------------------------------------------------
      'User clicks on button on top of list > switches list
      '----------------------------------------------------
      
      If cvwRequests.Visible Then
         TabStrip_Lists.ToolTip = "Display available results"
         cvwRequests.Visible = False
         cvwResults.Visible = True
         Try cvwResults.MoveFirst()
         Try cvwResults.Item.Selected = True
         If vBoxWebBrowser.Visible Then
             Inbox_showResult()
         Endif
         Last.text = "Results Received"
         '--------------------------------------------------------
         'Check if the results collection is loaded, No, then load
         '--------------------------------------------------------
         cvwResults_Refresh()
      Else
         cvwResults.Visible = False
         cvwRequests.Visible = True
         ''lblTabListsHeading.Text = "Requests Ordered"
         TabStrip_Lists.ToolTip = "Display previous requests"
       '  cvwRequests_Refresh()
       Last.text = "Requests Ordered"
         modEditAreaHelpers.Patient_Requests_Show(currentconsult, cvwRequests)
      End If
       

End


Public Sub InboxResults_Click()

   Dim loinc As String 
   Dim currentresult As Collection 
   Dim tag As String 
   Dim MD As Collection 
   
   If IsNull(currentconsult) Then Return 
   bexit = True
   chkGraph_MakeDefault.value = False
   bexit = False  
   
   Try tag = Last.tag!name 
   If Error Then
      tag = Last.tag
   Endif
   
   Select Case tag
   Case "egfr"
   
      Measurement_Graph(const.Loinc_EGFR, "eGFR")
   Case "blood pressure"
       Measurement_Graph("", "blood pressure")
   Case "weight"
       Measurement_Graph("", "weight")
   Case "height"
      Measurement_Graph("", "height")
   Case "peak flow"
     
   Case "add"
       'Add to favourites, but first, is it already a favourite?
        For Each MD In MeasurementDefaults 
           If Lower(Md!name) = Lower(pbGraphName.Tag!name) Then Return
        Next
       If Message.Question("Do you wish to add " & pbGraphName.Tag!name & " to the favourites?", "Yes", "No") = 1 Then
          pbGraphName.tag!display_as_default = False
          Measurement_Favourites_Update()
       Endif
   Case "remove"
       If Message.Question("Do you wish to remove " & pbGraphName.Tag!name & " from the favourites?", "Yes", "No") = 1 Then
          modMeasurementsDBI.Measurement_Default_Mark_Deleted(pbGraphName.tag!pk)
          modDBConnect.CommitTrans()
          Measurement_Defaults_Refresh()

       Endif
     
   Case "refresh"
      '------------------------------------------------------
      'Reset the measuremnts list to include all measurements
      '------------------------------------------------------
      bexit = True   
      txtInboxResults_Exclude.Text = ""
      txtInboxResults_filter.text = ""
      bExit = False  
      cvwResults_Fill()
   Case Else
      '---------------------------------------------------------------
      'This must be a user-defined button
      'pbGraphName.tag used to 'store' information about graph default
      'for want of a better place
      '---------------------------------------------------------------
       Measurement_Graph(Last.tag!loinc, Last.tag!name)
       pbGraphName.tag = Last.tag
       If Last.tag!display_as_default = True Then
          bexit = True
          chkGraph_MakeDefault.value = True
          bexit = False  
       End If
   End Select
End
Public Sub InboxResults_KeyRelease()
   '-----------------------------------------------------------------------
   'User has typed in one of the two textboxes underneath the results inbox
   '-----------------------------------------------------------------------
   If Bexit Then Return 
   Select Case Last.tag
   Case "exclude"
       bExit = True
       txtInboxResults_filter.text = ""
       bexit = False
   Case "filter"
       bExit = True
       txtInboxResults_Exclude.text = ""
       bexit = False
   End Select
   cvwResults_Fill()
End

Public Sub chkGraph_MakeDefault_Click()
  If IsNull(currentconsult) Then Return
  If Bexit Then Return 

  If Last.value = True Then
      If Message.Question("Do you wish to make " & pbGraphName.Tag!name & " the default graph for this patient?", "Yes", "No") = 1 Then
         pbGraphName.tag!display_as_default = True
         Measurement_Favourites_Update()
      Else
         pbGraphName.tag!display_as_default = False
   End If
        
  Endif

End

Public Sub Measurement_Favourites_Update()
   pbGraphName.Tag!fk_patient = currentconsult!patient!fk_patient
   modMeasurementsDBI.Measurements_Default_Save(pbGraphName.Tag)
   modDBConnect.CommitTrans()
   Measurement_Defaults_Refresh()
  
End
Public Sub Measurements_Reset()
   '----------------------------------------------------------------------------
   'Remove any measurement things which may have been displayed for last patient
   'e.g a picture of a graphable measurement
   'default buttons - I've only allowed two
   '----------------------------------------------------------------------------
   Dim hctrl As Control
   Dim tb As ToolButton

   Measurement_Graph_Picture_Clear()
   For Each hctrl In HBox_Default_Results.Children        'loop through the three default buttons
         tb = hctrl                                          
         tb.tag = Null               
         tb.text = ""
         tb.Visible = False  
   Next
   bexit = True
   chkGraph_MakeDefault.value = False
   bExit = False  
End

Public Sub Measurement_Defaults_Refresh()
   '------------------------------------------------------------------------
   'Load the patient's measurement defaults
   'We allow up to three Default buttons, display graph which is the default
   'If there is not a default one to display, use BP
   '------------------------------------------------------------------------
   Dim MD As Collection 
   Dim hctrl As Control
   Dim tb As ToolButton
   
   currentconsult.Refresh("measurement_defaults")            'remove from cache
   Measurements_Reset()                                      'remove tags, names, pictures
   MeasurementDefaults = currentconsult!measurement_defaults 'load data a-fresh
   For Each MD In MeasurementDefaults                              
      For Each hctrl In HBox_Default_Results.Children        'loop through the three default buttons
         tb = hctrl                                          
         If IsNull(tb.tag) Then                              'if not yet used, give it a name
            tb.text = MD!name
            tb.tag = MD
            tb.Visible = True  
            Break
         Endif
      Next
      If MD!display_as_default = True Then                   'display graph which is patient's default
         Measurement_Graph(MD!loinc, MD!name)
         bExit = True
         chkGraph_MakeDefault.Value = True
         pbGraphName.tag = MD
         bExit = False  
       End If
   Next
   If IsNull(pbMeasurementGraph.Picture) Then                'but if none set, then use BP as default
       Measurement_Graph("", "blood pressure")
   Endif
End

Public Sub Measurement_Favourites_Refresh()
   '---------------------------------------------------
   'Display a list of:
   '1: measurements available to anyone
   '2: favourites for the patient FIXME NOT IMPLEMENTED
   '---------------------------------------------------
   Dim Measurement As Collection 
 
   cvwMeasurementFavourites.clear()
   For Each measurement In const.Measurement_Types
       cvwMeasurementFavourites.add(measurement!pk, 0)
       cvwMeasurementFavourites[measurement!pk][0] = measurement!name_full
   Next
End


Public Sub slGraphFontSize_Change()
  If IsNull(currentconsult) Then Return 
  Measurement_Graph(pbGraphName.Tag!loinc, pbGraphName.Tag!name)

End

Public Sub cmbConsultationType_Click()

If currentconsult Then
   currentconsult.Set(consultationtypes[cmbConsultationType.Index]!pk, "")
End If   


End


Public Sub DocumentFilter_KeyRelease()
   '-------------------------------------------------------------------------
   'User wants to filter document on either tag or who sent them 'originator'
   '-------------------------------------------------------------------------
   Select Case Last.tag
   Case "tag"
    cvwLettersReceived_Fill()
   Case "author"
      cvwLettersReceived_Fill()
   End Select  

End

Public Sub tbLettersRefresh_Click() 
   '----------------------------------------------------
   'Clears the filters on the letters lists, and reloads
   '----------------------------------------------------
   txtLetterFilterTag.text = ""
   txtLetterFilterAuthor.text = ""
   cvwLettersReceived_Fill(True)
End

Public Sub Hsplit_Toolbar_Enter()

 'Last.background = Color.RGB(104, 218, 191)

End

Public Sub Hsplit_Toolbar_Leave()

  Last.background = Color.RGB(208, 208, 208)

End



Public Sub Certificates_Click()

  
  iCertificatetype = Last.tag
  Certificates_Refresh()
End

Public Sub TabbedLists_MouseDrag()
   Dim x As Integer
   Last.MoveCurrent()
   Select Case Last.tag
     Case "results"
        Drag.icon = Picture.Load("icons/16/bloodtube16x16.png")
        Last.Drag(Str(currentconsult!results_received[cvwResults.Item.Key]!pk_document))
     Case "letters received"
        Drag.icon = Picture.Load("icons/16/referrals_3_1616.png") 'parent.parent.parent.picture
        Last.Drag(Str(currentconsult!letters_received[cvwLettersReceived.Item.Key]!pk_document))
       
   End Select
 
End

Static Public Sub UnitTest(form_main As FMain)
  
  form_main.btnSection_Clinical_Click()
  form_main.pnlClinical.Patients_Find("t p")
  
End
