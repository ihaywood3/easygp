' Gambas class file

' the manager class for the emulated browser
' Copyright (C) 2010-2015 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-----------------------------------------------------------------------
' PURPOSE   a form to hold all clinical lists including the tabs on the
'           right hand side of the FClinical screen
'-----------------------------------------------------------------------

Public form_quick_contact As FQuickContact
Public form_calculator_Tools As FCalculatorTools
Public form_clinlists_medications As FClinLists_Medications
Public form_clinlists_recalls As FClinLists_Recalls
Public form_clinlists_ordering As FClinLists_Ordering
Public form_clinlists_correspondence As FClinLists_Correspondence
Public form_clinlists_certificates As FClinLists_Certificates
Public form_clinlists_measurements As FClinLists_Measurements
Public form_clinlists_images As FClinLists_Images
Public form_clinlists_gpmp_tca As FClinLists_GPMP_TCA
Public form_graphs As FGraph
Private currentconsult As CConsult
Private Const cTab_Medications As Integer = 0  'all these reference lists of tabstip_lists
Private Const cTab_Results As Integer = 1
Private Const cTab_Correspondence As Integer = 2
Private Const cTab_Recalls As Integer = 3
Private Const cTab_Certificates As Integer = 4
Private Const cTab_Measurements As Integer = 5
Public Const cTab_Images As Integer = 6 'accessed from other forms
Public Const cTab_Calculators As Integer = 7
Public Const cTab_Quick_Contacts As Integer = 8
Private Const cTab_GPMPTCA As Integer = 9
Private Const cTab_Miscellaneous_forms As Integer = 10
Public bExit As Boolean     'used i Gui_Clear in Fclinical, stops re-entry to TabStrip_Lists_Click

Static Private form_clinicallists As FClinicalLists

Public Sub _New()

   form_clinicallists = Me
   With form_clinlists_medications = New FClinLists_Medications(Vbox_Medications)
      .Set_Embedded_Form_Name(Me.Name)
   End With
   form_graphs = New FGraph(Vbox_Graphs)
   Settings_Load

End

Static Public Sub Graph_Item(loinc As String, Measurement As String)
   'Called from e.g FClinLists_Ordering popup menu over the results list graphs the measurement

   form_clinicallists.form_graphs.Measurement_Graph(loinc, Measurement)

End

Static Public Function TabStrip_Lists_Get_Index() As Integer

   Return form_clinicallists.TabStrip_Lists.Index

End

Public Sub Gui_Clear()
   '--------------------------------------------------------------------------------
   'Called from FClinical and clears all the lists, labels etc prior to new patient
   'sets currentconsult on those forms to null
   '--------------------------------------------------------------------------------

   If Not IsNull(currentconsult) Then
      form_graphs.lblCreatinineClearance.text = ""
      form_clinlists_medications.Gui_Clear
      If Not IsNull(form_clinlists_correspondence) Then form_clinlists_correspondence.Gui_Clear
      If Not IsNull(form_clinlists_certificates) Then form_clinlists_certificates.Gui_Clear
      If Not IsNull(form_clinlists_ordering) Then form_clinlists_ordering.Gui_Clear
      If Not IsNull(form_clinlists_images) Then form_clinlists_images.Gui_Clear
      If Not IsNull(form_clinlists_recalls) Then form_clinlists_recalls.Gui_Clear
      If Not IsNull(form_clinlists_measurements) Then form_clinlists_measurements.Gui_Clear
      If Not IsNull(form_clinlists_gpmp_tca) Then form_clinlists_gpmp_tca.Gui_Clear
   End If
   currentconsult = Null
   TabStrip_Lists.index = cTab_Medications

   'to be put in when code fixed
   'lvFilesToJoin.Clear()
   ' txtTagUser.text = "" part of the files to join
   ' txtFindGraphable.text = ""
   ' txtMeasurementShowLastMonths.text = ""
   ' txtFindGraphable.text = ""

End

Public Sub Settings_Load()

   VSplit_Lists_Graphs.Layout = Settings["FClinicalLists/Vsplit_Lists_Graphs", modUtilGUI.VSplit([2, 1])]

End

Public Sub Init(cons As CConsult)

   currentconsult = cons
   form_clinlists_medications.Init(currentconsult)
   form_graphs.Set_Embedded_Form(Me.name)
   form_graphs.Init(currentconsult)
   TabStrip_Lists.Enabled = True

End

Public Sub TabStrip_Lists_Click()
   '-------------------------------------------------------------------
   'User has clicked on a tabstrip
   'If the form living on the tabstrip doesn't exist then load the form
   'if the currentconsult in the form on the tabstrip is null then
   're-initialise the form for this patient
   '--------------------------------------------------------------------

   If bexit Then Return
   If IsNull(currentconsult) Then
      Return
   End If
   Inc Application.Busy
   FClinical.Hide_Tasks_And_Problems_Lists(False)
   Vbox_Graphs.Visible = True
   Select Case Last.Index
      Case cTab_Medications
      Case cTab_Results
         If IsNull(form_clinlists_ordering) Then                                      'if results list form not  yet created this instance of EasyGP running
            With form_clinlists_ordering = New FClinLists_Ordering(Vbox_Results)      'create it
               .Set_Graph_Vbox(Vbox_Graphs)
            End With
         End If
         If Not form_clinlists_ordering.Current_Consult_Exists() Then            'If there is no current consult e.g first time used or next patient
            With form_clinlists_ordering
               .Init(currentconsult)
               .cvwResults_Reload
            End With
         End If
      Case cTab_Correspondence
         If IsNull(form_clinlists_correspondence) Then
            With form_clinlists_correspondence = New FClinLists_Correspondence(Vbox_ClinLists_Correspondence)
               .Set_Graph_Vbox(Vbox_Graphs)
            End With
         End If
         If Not form_clinlists_correspondence.Current_Consult_Exists() Then
            With form_clinlists_correspondence
               .Init(currentconsult)
               .cvwLettersReceived_Reload
            End With
         End If
      Case cTab_Recalls
         If IsNull(form_clinlists_recalls) Then
            form_clinlists_recalls = New FClinLists_Recalls(Vbox_Recalls)
         End If
         If Not form_clinlists_recalls.Current_Consult_Exists() Then
            With form_clinlists_recalls
               .Init(currentconsult)
               .cvwRecalls_Reload
            End With
         End If
      Case cTab_Certificates
         If IsNull(form_clinlists_certificates) Then
            form_clinlists_certificates = New FClinLists_Certificates(Vbox_ClinLists_Certificates)
         End If
         If Not form_clinlists_certificates.Current_Consult_Exists() Then
            form_clinlists_certificates.Init(currentconsult)
         End If
      Case cTab_Measurements
         If IsNull(form_clinlists_measurements) Then
            form_clinlists_measurements = New FClinLists_Measurements(Vbox_ClinLists_Measurements)
         End If
         If Not form_clinlists_measurements.Current_Consult_Exists() Then
            form_clinlists_measurements.Init(currentconsult)
         End If
      Case cTab_Images
         If IsNull(form_clinlists_images) Then
            form_clinlists_images = New FClinLists_Images(Vbox_ClinLists_Images)
         End If
         If Not form_clinlists_images.Current_Consult_Exists() Then
            form_clinlists_images.Init(currentconsult)
         End If
      Case cTab_Calculators
         If IsNull(form_calculator_Tools) Then
            form_calculator_Tools = New FCalculatorTools(Hbox_Calculator_Tools)
         End If
         With form_calculator_Tools
            .Init(currentconsult)
         End With
      Case cTab_Quick_Contacts
         If IsNull(form_quick_contact) Then
            With form_quick_contact = New FQuickContact(HBox_Contacts)
               .Init()
            End With
         End If
      Case cTab_GPMPTCA
         If IsNull(form_clinlists_gpmp_tca) Then
            form_clinlists_gpmp_tca = New FClinLists_GPMP_TCA(VBox_ClinLists_gpmp_tca)
         End If
         form_clinlists_gpmp_tca.Init(currentconsult)
      Case cTab_Miscellaneous_forms

   End Select
   Dec Application.Busy
Catch
   Dec Application.Busy

End

Public Sub VSplit_Lists_Graphs_Resize()
   '------------------------------------------------------
   'This is the split between the tabbed lists at the top
   'and the graphs at the bottom
   '------------------------------------------------------

   Settings["FClinicalLists/Vsplit_Lists_Graphs"] = VSplit_Lists_Graphs.Layout

End

Public Sub tbJoin_Click()
   '    '----------------------------------------------
   '    'Joins any pdfs's transfer to the lvFilesToJoin
   '    'the panel containing the join stuff is shown
   '    'when user elects to transfer pdf to join
   '    '  FIXME pretty messy routine proof of concept
   '    ' FDocumentsMetaData to fix the duplicate md5 stuff
   '    '----------------------------------------------
   '
   '    Dim pdf_files As New String[]
   '    Dim fname As String
   '    Dim local_fname As String
   '    Dim remote_fname As String
   '    Dim x As Integer
   '    Dim unique_filename As String
   '    Dim D As New Crow
   '    Dim md5Output As String 'fix me put the md5 calcs in this and FDocumentMetadata into another class somewhere (duplication)
   '    Dim signed_off As New Collection
   '    Dim archiving_dir As String = modAdminDBI.Config_Get("document_archiving_directory", "", Null, modDBConnect.currentUser!fk_clinic)
   '
   '    Select Case Last.tag
   '       Case "join"
   '          If lvFilestojoin.count = 0 Or Trim(txtTagUser.text) = "" Then Return   'no files or no tag get out of here.
   '          fname = Temp$                                                          'get temporary filename (no path)
   '          lvFilestojoin.MoveFirst                                                'add all the files into a collection
   '          For x = 0 To lvFilestojoin.count - 1
   '             pdf_files.Add(archiving_dir &/ lvFilestojoin.item.text)
   '             lvFilestojoin.MoveNext
   '          Next
   '          fname = modPrinting.Join_PDF(pdf_files, fname)                         'join the files together
   '          local_fname = fname
   '          remote_fname = File.Name(fname)
   '          modFiles.Put("document_archiving_directory", remote_fname, local_fname) 'copy the file from /tmp to the filed directory
   '          '-----------------------------------------------------------------------------------
   '          'the new file now has to be filed as one would a newly scanned in and allocated file
   '          'except that it won't end up in the inbox, but will be marked as filed
   '          '------------------------------------------------------------------------------------
   '          D!fk_staff_filed_document = modDBConnect.currentUser!fk_staff
   '          D!date_created = lvFilesToJoin.Tag[0]!date_created
   '          D!fk_patient = currentconsult!patient!fk_patient
   '          D!originator = lvFilesToJoin.Tag[0]!originator  'get the original originator
   '          D!fk_sending_entity = lvFilesToJoin.Tag[0]!fk_sending_entity
   '          D!tag = D!originator & " - joined pdf"
   '          D!tag_user = Trim(txtTagUser.text)
   '          D!fk_lu_urgency = const.UrgencyLevelRoutine
   '          Exec ["/usr/bin/md5sum", fname] To md5Output
   '          D!md5sum = Left(md5Output, InStr(md5Output, " ") - 1)
   '          D!fk_staff_destination = lvFilesToJoin.Tag[0]!fk_staff_destination
   '          If TabStrip_Lists.index = cTabResults Then
   '             D!fk_lu_display_as = const.Document_Display_As_Result
   '          Else
   '             D!fk_lu_display_as = const.Document_Display_As_Letter
   '          Endif
   '          D!incoming_referral = False
   '          D!concluded = True
   '          D.Save("documents.documents", "fk_document")                              'chicken and egg, need unique new document-pk for a unqiue filename
   '          '--------------------------------------------------------------------------------------------------
   '          'now work out a unique readable filename usign patient's name, birthdate and the unique document pk
   '          '--------------------------------------------------------------------------------------------------
   '          unique_filename &= modutil.Filename_Protect(Trim(currentconsult!patient!wholename)) & "." & modutil.DateString_Encode(Format(currentconsult!patient!birthdate, "dd/mm/yyyy")) & "." & Str(Currentconsult!patient!fk_patient) & "."
   '          unique_filename &= modutil.Filename_Protect(D!originator) & "." & Str$(D!fk_document) & "."
   '          unique_filename &= "pdf"
   '          Move archiving_dir &/ File.Name(fname) To archiving_dir &/ unique_filename  'rename the file in the archived document dir to this unique name
   '          D.put_unchanged(D!fk_document, "fk_document")                               'resave this as the source_file into the backend
   '          D!source_file = unique_filename
   '          D.Save("documents.documents", "fk_document")
   '          signed_off!fk_staff = modDBConnect.currentUser!fk_staff                     'mark document as 'signed off'
   '          signed_off!fk_document = D!fk_document
   '          signed_off!date = Now()
   '          modInboxDBI.Document_SignOff(signed_off)
   '          lvFilestojoin.MoveFirst                         ' 'finally remove the original files
   '          For x = 0 To lvFilestojoin.count - 1  'Now mark the orginal documents in the backend as deleted
   '             modDBConnect.update("documents.documents", Null, ["pk": lvFilesToJoin.Tag[x]!pk_document, "deleted": True])
   '          Next
   '          modDBConnect.CommitTrans()
   '          For x = 0 To lvFilestojoin.count - 1
   '             modFiles.Delete("document_archiving_directory", lvFilestojoin.Item.Text)
   '             lvFilestojoin.MoveNext
   '          Next
   '          lvfilesToJoin.Clear()
   '          If TabStrip_Lists.index = cTabResults Then
   '             cvwResults_Refresh(True)
   '          Else
   '             cvwLettersReceived_Refresh(True)
   '          Endif
   '          Goto Remove_Join_Panel
   '       Case "clear"
   '          lvFilesToJoin.Clear
   '       Case "close"
   '          Goto Remove_Join_Panel
   '    End Select
   '    Return
   '
   ' Remove_Join_Panel:
   '    VBox_Files_To_Join.Visible = False
   '    Vbox_MiniGraphs.Visible = True
   '
   ' Catch
   '    modDBConnect.RollBack()
   '

End

Public Sub VBox_Results_Leave()

   With form_clinlists_ordering
      .bExit = True
      .cvwRequests.UnselectAll()
      .bExit = False
   End With
   With form_clinlists_ordering
      .bExit = True             'otherwise, UnselectAll() will trigger cvwResults_Select event. Go figure.
      .cvwResults.UnselectAll()
      .bExit = False
   End With

Catch
   Return 'these forms may be null

End
