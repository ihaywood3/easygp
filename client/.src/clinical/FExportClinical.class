' Gambas class file

' Copyright (C) 2008-2014 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
'PURPOSE          Simple non-conforming to MDW format pdf export
'LIMITATIONS      Diabetes cycle of care dump - early cycles had no latex so are
'                 not dumped however they will be in the progress notes as text.
'TODO             Really clin_consult.lu_progressnote_sections should
'                 consist of the keys to each section not the ad-hoc
'                 naming of sections I've used through the program
'                 FIXME
'                 DON'T ALLOW EXPORT WHEN UNFILED RESULTS OR DOCUMENTS.
'              pdfinfo combined.pdf | grep Pages | sed 's/[^0-9]*//' gives output of no of pages in a pdf
'               pdftk A=first.pdf B=blank.pdf cat A1 B1 A1-end output res.pdf
'----------------------------------------------------------------------
Private bExit As Boolean
Private pdf As Collection
Private pdf_sections As Collection
Private html_sections As Collection
Private Included_Documents As Collection
Private Patient_INR_Count As Integer
Private Form_Help As FHtmlViewer
Public Form_PDF As FPdf
Private Form_NotesEditor As FEditNotes
Private currentconsult As Cconsult
Private Page_Orientation As Integer
Private patient As Collection
Private progressbar_interval As Integer
Private cPage_Select_Options As Integer = 0
Private cPage_Select_ProgressNotes As Integer = 1
Private cPage_Select_Documents As Integer = 2
Private cPage_PDF As Integer = 3
Private cPage_ZipOptions As Integer = 4
Private cPage_CreateZip As Integer = 5
Private Patient_Details As String
Private current_page As Integer                 'page wizard currently on
Private export_filename_and_path As String
Private export_dir As String                    'directory to hold exported files
Private bExportDocuments As Boolean            'if true user wants to export some documents
Private filename_incoming_letters_joined As String
Private filename_results_joined As String
Private filename_health_summary As String
Private filename_workcover_joined As String
Private pagecount_results_joined As Integer

Private pagecount_workcover_joined As Integer
Private pagecount_health_summary As Integer
Private Pagecount_final_filename As Integer
Private page_count_tasks As Integer
Private filename_coverpage_toc As String
Private filename_the_rest As String

Public Sub Form_Close()
   
   Settings_Save()
   
End

Private Function Documents_To_Dump() As Boolean
   
   'if true we will be dumping documents
   If chkLettersReceivedSummary.value = True Then Return True
   If chkResultsReceivedSummary.value = True Then Return True
   If rbAllReferralLetters.value = True Then Return True  
   If rbSelectedReferralLetters.value = True Then Return True   
   If rbAllResultsReceived.value = True Then Return True
   If rbSelectedResultsReceived.value = True Then Return True
   
End

Private Function ProgressNotes_To_Dump() As Boolean
   
   If rbAllProgressNotes.value = True Or rbSelectedProgressNotes.Value = True Then Return True 
   
End

Public Sub Init(cons As Cconsult)
   '-------------------------------------------------------------------
   'Initialise module, bring in a PDF reviewer, refresh all collections
   '-------------------------------------------------------------------
   
   currentconsult = cons
   patient = currentconsult!patient
   With Form_Help = New FHtmlViewer(Vbox_Help)
      .tbWebBrowserZoomIn.Visible = True
      .tbWebBrowserZoomOut.Visible = True
      .Help_Show("medical-record-export-wizard.html")
      .Padding = 0
   End With
   With Form_PDF = New FPdf(HBox_PDF)                             'insert a pdf viewer
      .btZoomOut.Visible = True
      .btZoomIn.Visible = True
   End With
   lblMeasure.text = "  Filename  "
   modEditAreaHelpers.Resize_labels(Vbox_CreateZip, lblmeasure)
   Try Settings_Load()
   Patient_Details = Trim(patient!wholename) & "_" & Format(patient!birthdate, "dd-mm-yyyy")
   Patient_Details = Replace$(Patient_Details, " ", "-")
   Patient_Details = Replace$(Patient_Details, "'", "")           'construct id string eg Mr-Joe-Blow_10-12-1912
   export_dir = User.home &/ Patient_Details
   Reload()
   
End

Public Sub Reload()
   
   Refresh_Collections()                                          'refresh all the patients data collections
   Refresh_Gui()                                                  'show checkboxes where data exists for that collection
   Create_ExportDir()
   pagecount_health_summary = 0
   pagecount_results_joined = 0
   pagecount_health_summary = 0
   filename_results_joined = ""
   filename_workcover_joined = ""
   filename_health_summary = ""
   filename_incoming_letters_joined = ""
   filename_workcover_joined = ""
   
End

Public Sub Save()
   
   Form_PDF.Save_PDF()
   
End

Public Sub Zoom_In()
   
   Form_PDF.Zoom_In()
   
End

Public Sub Zoom_Out()
   
   Form_PDF.Zoom_Out()
   
End

Public Sub Preview()
   
   Return
   Export_File()
   
End

Public Sub Export_File()
   
   '  Create_Indexed_PDF()
   ' Message.info("starting the document dump")
   
   '  Message.info("finished the document dump")
   
End

Public Sub Dump_Documents_As_Single_PDFs()
   '----------------------------------------------------------------------------------
   'Dump any documents or results, certificates etc as single pdf's
   'These would include scanned pdfs or hl7 files sent to the practice for the patient
   'and any results downloaded as pdf's
   'First the Letters received.
   '----------------------------------------------------------------------------------
   
   Dim member As Collection
   Dim file_extension As String
   Dim tempfile As String
   Dim filename As String
   Dim hCtrl As Control
   Dim Cbox As CheckBox
   Dim temp_dir As String
   Dim cmd As String
   Dim pro As Process
   Dim x As Integer
   Dim files_to_join As New Collection
   
   Return
   For Each hctrl In VBox_ProgressNotes.children
      If hctrl Is CheckBox Then
         Cbox = hctrl
         If cbox.value = True Then
            Select Case Cbox.Tag
               Case "letters received"
                  '------------------------------------------
                  'make a temporary directory for the letters
                  '------------------------------------------
                  lboxProgress.Add("Copying all letters received")
                  Wait
                  Temp_dir = "/tmp/letters"
                  Try Mkdir "/tmp/letters"
                  If Error Then
                     If Error.Code = const.File_ioError_DirectoryExists Then
                        pro = Shell "rm /tmp/letters/*.pdf" Wait For Write
                        Try Close #pro
                     Else
                        Message.Info("An error occurred code:" & Error.code & ".\n\nCannot process the letters.")
                        Break
                     End If
                  End If
                  
                  For Each Member In currentconsult!letters_received
                     file_extension = File.Ext(member!source_file)
                     Select Case file_extension
                        Case "pdf"
                           filename = modFiles.Get("document_archiving_directory", member!source_file)
                           If Left$(filename, 4) = "/tmp" Then
                              Move filename To temp_dir &/ member!source_file
                           Else
                              Copy filename To temp_dir &/ member!source_file
                           Endif
                           files_to_join.Add(temp_dir &/ member!source_file, files_to_join.count)
                        Case Else
                           filename = Replace(member!originator & "_" & member!tag_user, " ", "_") & ".pdf" 'fix this for eg o'neil
                           filename = Replace(filename, "(", "")
                           filename = Replace(filename, ")", "")
                           filename = Replace(filename, "'", "")
                           filename = Replace(filename, ",", "")
                           filename = Replace(filename, ">", "for")
                           tempfile = modPrinting.Make_PDF_From_Html(member!html, const.orientation_portrait, "", False, filename, ProgressBar1)
                           Try Move tempfile To Temp_dir &/ filename
                           If Error Then
                              Try Copy tempfile To Temp_dir &/ filename
                              If Not Error Then Kill tempfile
                           Endif
                           files_to_join.Add(Temp_dir &/ filename, files_to_join.count)
                     End Select
                     
                  Next
                  '   modPrinting.Join_PDF(files_to_join, "/tmp/joined_letters.pdf")
                  '----------------------------------------------------------------------------
                  'Now Zip these letters not password protected as will be within the other zip
                  '----------------------------------------------------------------------------
                  cmd = "zip --junk-paths " & export_dir &/ Patient_Details & "_letters_received.zip " & temp_dir &/ "*.pdf"
                  Print cmd
                  lboxProgress.Add("Creating zip file of letters .....")
                  Wait
                  Shell cmd Wait
               Case "results"
                  lboxProgress.Add("Creating Zip file of all results received.")
                  Wait
                  Temp_dir = "/tmp/results"
                  Try Mkdir "/tmp/results"
                  x = 1
                  If Error Then
                     If Error.Code = const.File_ioError_DirectoryExists Then
                        pro = Shell "rm /tmp/results/*.pdf" Wait For Write
                        Try Close #pro
                     Else
                        Message.Info("An error occurred code:" & Error.code & ".\n\nCannot process the results.")
                        Break
                     End If
                  End If
                  For Each Member In currentconsult!results_received
                     '  Print currentconsult!results_received.count
                     file_extension = File.Ext(member!source_file)
                     Select Case file_extension
                        Case "pdf"                                                                             'pdf simple, is old scanned result - just copy it over
                           filename = modFiles.Get("document_archiving_directory", member!source_file)
                           If Left$(filename, 5) = "/tmp/" Then
                              Move filename To temp_dir &/ member!source_file
                           Else
                              Copy filename To temp_dir &/ member!source_file
                           Endif
                        Case Else 'it is html FIXME - WHAT ABOUT PICTURES                                      'html - construct a filename
                           If Not IsNull(member!tag_user) Then
                              filename = Replace(Trim(member!tag_user), ";", "")                                     'strip separators
                              If Right(filename) = ";" Then filename = Left(filename, Len(filename) - 1)
                              filename = Replace(filename, " ", "-")
                              filename = Replace(filename, "/", "-")
                              filename = Replace(filename, "(", "")
                              filename = Replace(filename, ")", "")
                              filename = Replace(filename, "&", "-")
                              filename = Patient_Details & "_" & Format(member!date_created, "dd-mm-yyyy") & "_" & filename & ".pdf" 'eg. Mr-Joe-Blogs_10-02/2010_FBC
                              Print filename, x
                              modPrinting.Make_PDF_From_Html(member!html, const.orientation_portrait, "", False, filename, Null, temp_dir)
                           Else
                              Message.Title = "Fatal error"
                              Message.info("This patient's record cannot be accurately exported as it contains unfiled results which will be skipped.")
                           End If
                           Inc x
                     End Select
                  Next
                  '----------------------------------------------------------------------------
                  'Now Zip these results not password protected as will be within the other zip
                  '----------------------------------------------------------------------------
                  '  cmd = "zip --junk-paths " & export_dir &/ Patient_Details & "_results_received.zip " & temp_dir &/ "*.pdf"
                  '    ' Shell cmd Wait
                  ' modPrinting.Join_PDF(
            End Select
         End If
      End If
   Next
   
End

Public Sub Export_PDF_Create()
   '---------------------------------------------------------------------------------------------------
   'Prepare a pdf of the patients records with minimum of coversheet and TOC
   'page 2=always toc
   '-----------------------------------------------------------------------------------------------------
   
   Dim progressbar_interval As Float
   Dim shtml As String
   Dim bPrintTableOfContents As Boolean = True   
   Dim bPrintCoversheet As Boolean = True  
   Dim ContentsPage As String
   Dim Output_file As String
   Dim patient As Collection = currentconsult!patient 
   Dim export_filename_and_path As String
   Dim sql_letters As String
   Dim sql_results As String
   Dim letter As Collection
   Dim Letters As Collection
   Dim result As Collection
   Dim results As Collection
   Dim document As Collection   
   Dim Letter_PDF_path As Collection   'the letter and the pdf path   
   Dim Result_PDF_path As Collection 
   Dim x As Integer
   Dim tempstring As String
   Dim Temp_dir As String
   Dim pro As Process
   Dim filename_for_all_the_letters As String
   Dim filename_for_all_the_results As String
   Dim final_pdfs_to_join As New Collection
   Dim final_filename As String
   
   pdf_sections = New Collection                              'will collect details of all individual pdf's created for each section dumped
   ProgressBar1.value = 0.0                                   'reset the progress bar
   html_sections = New Collection                             'collection to hold html or dummy html for all asections
   lboxProgress.Add("Analysing data......")
   lboxProgress.Add("Preparing the coversheet......")  
   Wait
   ContentsPage = modProgressNotes.CoverSheet_Construct_HTML(currentconsult).GetData()   ' the patient's name, practice name
   Output_file = patient!wholename                                                       'create filename and remove illegal characters
   Output_file = Replace(Output_file, " ", "_")
   Output_file = Replace(Output_file, "'", "")
   Output_file &= "FileId:" & Str(patient!fk_patient) & "-birthdate:" & Format(patient!birthdate, "dd-mm-yyyy") & ".pdf"
   If chkHealthSummary.Value = True Then Include_Health_Summary
   If ProgressNotes_To_Dump() Then Include_ProgressNotes                            
   If chkTasks.value = True Then Include_Patient_Tasks
   If chkRecalls.value = True Then Include_Recalls_Outstanding
   If Documents_To_Dump() Then Include_Documents_Received
   If chkReferralLetterSummaries.value = True Then Include_Referral_Letter_Summaries
   If chkReferralLetters.value = True Then Include_Referral_Letters
   If chkRequestsOrdered.value = True Then Include_Requests_Ordered_Summary
   If chkDiabeticCycleOfCare.value = True Then Include_Diabetes_Cycle_Of_Care
   If chkMentalHealthPlans.value = True Then Include_Mental_Health_Plans
   If chkWorkcoverSummarised.value = True Then Include_Workcover_Claims_Summary
   If chkWorkcoverForms.value = True Then Include_Workcover_Claims
   If chkMedicalCertificatesSummary.value = True Then Include_Medical_Certificates_summarised
   If chkMedicalCertificatesListed.value = True Then include_Medical_Certificates
   lboxProgress.Add("Creating final pdf......")
   Wait
   lboxProgress.Add("Creating coverpage and table of contents.......")
   Wait
   export_filename_and_path = modPrinting.Make_PDF_From_HTML_Pages(html_sections, const.orientation_portrait, ContentsPage, bPrintTableOfContents, Output_file, ProgressBar1)
   lboxProgress.Add("Joining pdfs.......")
   Wait
   final_pdfs_to_join = New Collection    
   final_pdfs_to_join[0] = modPrinting.PDF_Cut_Out_Pages_From_PDF(export_filename_and_path, 1, 2) 
   For Each pdf In pdf_sections
      final_pdfs_to_join.Add(pdf!filename, final_pdfs_to_join.Count)
   Next
   final_filename = modPrinting.Join_PDF(final_pdfs_to_join, Temp$() & "export")
   With Form_PDF
      .Load_PDF(final_filename)
      .bexit = False 
      .RenderPage
      .PBox.Visible = True
      .HBox_Search.visible = False  
   End With
   VBox_PDF.Visible = True   
   VBox_CreatingPDF.Visible = False   
   
End

Private Sub Include_Diabetes_Cycle_Of_Care()
   '-----------------------------------------------------
   'If patient is diabetic, include their cycle of care's
   '-----------------------------------------------------
   
   Dim DACC As Collection
   Dim fn As String
   Dim dacc_pdf_paths As Collection
   Dim shtml As String
   Dim Temp_dir As String
   Dim pro As Process
   Dim tempstring As String
   Dim x As Integer
   
   Temp_dir = "/tmp/daccs"
   Try Mkdir "/tmp/daccs"
   If Error Then
      If Error.Code = const.File_ioError_DirectoryExists Then
         pro = Shell "rm /tmp/daccs/*.pdf" Wait For Write
         Close #pro
      Else
         Message.Info("An error occurred code:" & Error.code & ".\n\nCannot process the diabetic cycle of care's.")
         Return
      End If
   End If
   dacc_pdf_paths = New Collection    
   lboxProgress.Add("Adding diabetic cycle of care forms.....")
   Wait
   lblProgress.text = "Adding diabetic cycle of care...."
   For Each dacc In currentconsult!diabetes_annual_cycle_of_care
      If Not IsNull(dacc!latex) Then       'early DACCs during development had no latex definition saved.
         tempstring = "/tmp/daccs/" & dacc!pk_view & ".pdf"
         fn = modPrinting.Latex_To_PDF(dacc!latex, tempstring)
         dacc_pdf_paths.Add(fn, x)
         Inc x
         Progressbar1.value = x / currentconsult!diabetes_annual_cycle_of_care.count
      End If   
      Wait
   Next
   shtml = modPrinting.Make_HTML_With_Heading_And_Blank_Pages("Diabetes Cycle of Care", currentconsult!diabetes_annual_cycle_of_care.count)
   html_sections.add(sHtml, html_sections.count)
   Try Kill "/tmp/daccs_done.pdf"
   fn = modPrinting.Join_PDF(dacc_pdf_paths, "/tmp/daccs_done.pdf")
   pdf = New Collection
   pdf!name = "diabetes cycle of care"
   pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
   pdf!filename = fn
   pdf_sections.Add(pdf, pdf_sections.count)  
   
End

Private Sub Include_Requests_Ordered_Summary()
   '-------------------------------------------------------------------------
   'Include any requests ordered e.g could be needed for medico-legal reasons
   '-------------------------------------------------------------------------
   
   Dim sHtml As String
   Dim fn As String
   
   lboxProgress.Add("Generating summary of all requests ordered .....")
   Wait
   lblProgress.text = "Adding requests summmary...."
   progressbar1.Value = 0
   progressbar1.Refresh
   shtml = modProgressNotes.Requests_summary_construct_html(currentconsult!requests_ordered)
   html_sections.add(shtml, html_sections.Count)
   fn = modPrinting.Make_PDF_From_Html(shtml,,,, "requests_ordered_summarized.pdf")
   pdf = New Collection
   pdf!name = "summary requests ordered"
   pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
   pdf!filename = fn
   pdf_sections.Add(pdf, pdf_sections.count)   
   
End

Private Sub Include_Health_Summary()
   '---------------------------------------------------------------------
   'The summary is latex and we can't know how many pages this will take
   'so insert blank html pages with heading to get correct TOC page
   'the pdf pages will be substituted later
   '---------------------------------------------------------------------
   
   Dim templ As CTemplate
   
   lboxProgress.Add("Adding health summary....") 
   Wait
   lblProgress.text = "Adding health summary...."
   progressbar1.Value = 1
   progressbar1.Refresh
   Templ = modProgressNotes.Health_Summary_Construct_LaTex(currentconsult)
   Try Kill "/tmp/health_summary.pdf"
   filename_health_summary = modPrinting.Latex_To_PDF(templ.GetData(), "/tmp/health_summary.pdf")
   pagecount_health_summary = ModUtil.Read_PDF_Page_Count(filename_health_summary) 
   html_sections.add(modPrinting.Make_HTML_With_Heading_And_Blank_pages("Health Summary", pagecount_health_summary), html_sections.count)
   pdf = New Collection
   pdf!name = "health summary"
   pdf!page_count = ModUtil.Read_PDF_Page_Count(filename_health_summary)
   pdf!filename = filename_health_summary
   pdf_sections.Add(pdf, pdf_sections.count)
   
End

Private Sub Include_ProgressNotes()
   '-----------------------------------------
   'Include either all or some progress notes  
   '----------------------------------------- 
   
   Dim pn As String
   Dim fn As String
   
   pn = ProgressNotes_HTML_Prepare()                                 'create the html
   html_sections.add(pn, html_sections.count)                        'add to sections for wkhtmltopdf to create toc
   fn = modPrinting.Make_PDF_From_Html(pn,,,, "progress_notes.pdf")  'create the actual pdf section
   pdf = New Collection  
   pdf!name = "progress notes"
   pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
   pdf!filename = fn
   pdf_sections.add(pdf, pdf_sections.count)   
   
End

Private Sub Include_Workcover_Claims()
   
   Dim tempdir As String
   Dim Workcover_PDF_Paths As Collection
   Dim claim As Collection
   Dim WorkcoverClaims As Collection
   Dim temp_dir As String
   Dim pro As Process
   Dim x As Integer
   Dim filename_for_all_the_workcoverforms As String
   Dim tempstring As String
   Dim filename As String
   Dim progressbar_interval As Integer
   Dim document_pagecount As Integer
   Dim latex As String
   
   lboxProgress.Add("Adding workcover forms .....")
   lblProgress.text = "Adding workcover forms...."
   Wait
   Temp_dir = "/tmp/workcover"
   Try Mkdir "/tmp/workcover"
   If Error Then
      If Error.Code = const.File_ioError_DirectoryExists Then
         pro = Shell "rm /tmp/workcover/*.pdf" Wait For Write
         Close #pro
      Else
         Message.Info("An error occurred code:" & Error.code & ".\n\nCannot process the workcover forms.")
         Return
      End If
   End If
   
   Workcover_PDF_Paths = New Collection
   WorkcoverClaims = modWorkCoverDBI.Claims_Get(currentconsult!patient!fk_patient, "ASC")
   ' note: for me - many of my workcover consultations have no latex definition as i added these later
   ' add the list of workcover claims / dates / fitness in html(indexed)
   ' join the latex of the form( if available) as pdfs.
   '  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   x = 0
   Wait
   For Each claim In WorkcoverClaims
      progressbar1.Value = x / WorkcoverClaims.count
      progressbar1.Refresh
      tempstring = claim!identifier & "-" & Format(claim!certificate_date, "dd-mm-yyyy") & ".pdf"
      tempstring = Replace(tempstring, "(", "")
      tempstring = Replace(tempstring, ")", "") 'FIXME need proper routine to strip out illegal chars from filename
      tempstring = Replace(tempstring, " ", "_")
      tempstring = "/tmp/workcover/" & Replace(tempstring, "/", "_")  'many of my workcover claims descriptions are eg Injury shoulder/neck/back
      If IsNull(claim!latex) Then
         latex = modWorkCoverDBI.WorkcoverForm_LaTeX_Construct(currentconsult, claim).GetData()
      Else
         latex = claim!latex
      Endif
      filename = modPrinting.Latex_To_PDF(latex, tempstring)
      Workcover_PDF_Paths.Add(filename, x)
      Inc x
   Next
   If Not IsNull(Workcover_PDF_Paths) Then
      Try Kill "/tmp/workcover_claims.pdf"
      filename_for_all_the_workcoverforms = modPrinting.Join_PDF(Workcover_PDF_Paths, "/tmp/workcover_claims.pdf")
      document_pagecount = ModUtil.Read_PDF_Page_Count(filename_for_all_the_workcoverforms)
      html_sections.add(modPrinting.Make_HTML_With_Heading_And_Blank_pages("Workcover Forms", document_pagecount), html_sections.count)
      pdf = New Collection  
      pdf!name = "workcover claims"
      pdf!page_count = document_pagecount
      pdf!filename = filename_for_all_the_workcoverforms
      pdf_sections.add(pdf, pdf_sections.count)   
   End If
   
End

Private Sub Include_Workcover_Claims_Summary()
   '------------------------------------------------------------
   'Include a summary of the workcover claim which includes:
   'Date, claim identifier, fitness for work and management plan
   '-------------------------------------------------------------
   
   Dim shtml As String
   Dim fn As String
   
   lboxProgress.Add("Generating summary of workcover consulations .....")
   lblProgress.text = "Adding workcover summary...."
   progressbar1.Value = 1
   progressbar1.Refresh 
   Wait
   sHtml = modWorkCoverDBI.Workcover_summary_construct_html(modWorkCoverDBI.Claims_Get(currentconsult!patient!fk_patient, "ASC"))
   html_sections.add(shtml, html_sections.count)
   fn = modPrinting.Make_PDF_From_Html(shtml,,,, "workcover_claims_summarized.pdf")
   pdf = New Collection
   pdf!name = "workcover claims summarised"
   pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
   pdf!filename = fn
   pdf_sections.Add(pdf, pdf_sections.count)   
   
End

Public Sub Include_Mental_Health_Plans()
   '------------------------------------------------------------------------------
   'Include all mental health plan's written, the html generated for all plans
   'will be in one long string but the pdf generated will be forced to break the
   'page at the end of each plan: <P STYLE='page-Break-before: always'>
   '------------------------------------------------------------------------------
   
   Dim x As Integer
   Dim MHP As Collection 
   Dim tempstring As String
   Dim charpos As Integer
   Dim fn As String 
   Dim sHtml As String
   
   x = 0
   lboxProgress.Add("Exporting mental health plans .....")
   Wait
   For Each MHP In currentconsult!mentalhealthplans
      tempstring = MHP!html
      If x = 0 Then
         charpos = InStr(tempstring, "<P")
         tempstring = Left(tempstring, charpos - 1) & "<DIV  ALIGN=CENTER><H3> Mental Health Plans</H3></DIV>" & Right(tempstring, Len(tempstring) - charpos + 1)
         Inc x
      Else
         tempstring = Replace(tempstring, "<HTML><BODY>", "<HTML><BODY><P STYLE='page-Break-before: always'>")
      End If
      sHtml &= tempstring
   Next
   html_sections.add(sHtml, html_sections.count)
   Try Kill "/tmp/mental_health_plans.pdf"
   fn = modPrinting.Make_PDF_From_Html(shtml,,,, "mental_health_plans.pdf")
   pdf = New Collection
   pdf!name = "mental health plans"
   pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
   pdf!filename = fn
   pdf_sections.Add(pdf, pdf_sections.count)   
   
End

Public Sub Include_Recalls_Outstanding()
   '--------------------------------------------------------
   'Include a listing of all recalls not yet completed
   'note all completed recalls are listed in the audit trail
   '--------------------------------------------------------    
   
   Dim sHtml As String
   Dim fn As String
   
   lboxProgress.Add("Listing outstanding recalls .....")
   lblProgress.text = "Adding recalls...."
   progressbar1.Value = 1
   Wait
   shtml = modProgressNotes.Recalls_summary_construct_html(currentconsult)
   html_sections.add(shtml, html_sections.Count)
   Try Kill "/tmp/recalls.pdf"
   fn = modPrinting.Make_PDF_From_Html(shtml,,,, "recalls.pdf")
   pdf = New Collection
   pdf!name = "recalls"
   pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
   pdf!filename = fn
   pdf_sections.Add(pdf, pdf_sections.count)   
   
End

Public Sub Include_Referral_Letter_Summaries()
   
   Dim sHtml As String
   Dim fn As String
   
   lboxProgress.Add("Generating summary of all referrals written .....")
   Wait
   lblProgress.text = "Adding referrals summmary...."
   progressbar1.Value = 1
   progressbar1.Refresh
   shtml = modProgressNotes.ReferralLetter_summary_construct_html(currentconsult!referrals_written)
   html_sections.add(shtml, html_sections.Count)
   fn = modPrinting.Make_PDF_From_Html(shtml,,,, "referral_letters_summarized.pdf")
   pdf = New Collection
   pdf!name = "summary referral letters"
   pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
   pdf!filename = fn
   pdf_sections.Add(pdf, pdf_sections.count)   
   
End

Public Sub Include_Medical_Certificates_Summarised()
   '-----------------------------------------------------
   'Include a summary listing of the medical certificates
   '-----------------------------------------------------   
   
   Dim certificate As Collection
   Dim sHtml As String
   Dim fn As String
   
   shtml = modProgressNotes.Medical_Certificates_Summary_Construct_Html(currentconsult!medical_certificates)
   html_sections.add(shtml, html_sections.Count)
   fn = modPrinting.Make_PDF_From_Html(shtml,,,, "medical_certificates_summarized.pdf")
   pdf = New Collection
   pdf!name = "medical certificates summarised"
   pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
   pdf!filename = fn
   pdf_sections.Add(pdf, pdf_sections.count)   
   
End

Public Sub Include_Medical_Certificates()
   '------------------------------------------------------------
   'Include a listing of the actual certificates
   'construct dummy pages of html which will later be sustituted
   'This gets wkhtml to pdf to create the TOC with correct page#
   '------------------------------------------------------------   
   
   Dim certificate As Collection
   Dim sHtml As String
   Dim tempstring As String
   Dim fn As String
   Dim charpos As Integer
   Dim certificate_pdf_paths As Collection
   Dim x As Integer
   Dim temp_dir As String
   Dim pro As Process
   Dim page_count As Integer
   
   Temp_dir = "/tmp/medical_certificates"
   Try Mkdir "/tmp/medical_certificates"
   If Error Then
      If Error.Code = const.File_ioError_DirectoryExists Then
         pro = Shell "rm /tmp/medical_certificates/*.pdf" Wait For Write
         Close #pro
      Else
         Message.Info("An error occurred code:" & Error.code & ".\n\nCannot process the medical certificates.")
         Return
      End If
   End If
   certificate_pdf_paths = New Collection    
   progressbar1.value = 0
   progressbar1.Refresh()
   Wait
   Progressbar1.Label = "Adding medical certificates...."
   For Each certificate In currentconsult!medical_certificates
      tempstring = "/tmp/medical_certificates/" & Str(certificate!pk_medicalcertificate) & ".pdf"
      fn = modPrinting.Latex_To_PDF(certificate!latex, tempstring)
      certificate_pdf_paths.Add(fn, x)
      Inc x
      Progressbar1.value = x / currentconsult!medical_certificates.count
      Wait
   Next
   shtml = modPrinting.Make_HTML_With_Heading_And_Blank_Pages("Medical Certificates", currentconsult!medical_certificates.count)
   html_sections.add(sHtml, html_sections.count)
   Try Kill "/tmp/medical_certificates_written.pdf"
   fn = modPrinting.Join_PDF(certificate_pdf_paths, "/tmp/medical_certificates_written.pdf")
   page_count = ModUtil.Read_PDF_Page_Count(fn)
   pdf = New Collection
   pdf!name = "medical certificates listed"
   pdf!page_count = page_count
   pdf!filename = fn
   pdf_sections.Add(pdf, pdf_sections.count)  
   
End

Public Sub Include_Referral_Letters()
   '---------------------------------------------------------------------
   'Include any letters written by staff for the patient
   'Break end of each letter using  <P STYLE='page-Break-before: always'>
   'fixme - take into account LATEX used dby ian
   '---------------------------------------------------------------------
   
   Dim x As Integer
   Dim referral As Collection
   Dim tempstring As String
   Dim fn As String
   Dim sHtml As String
   Dim charpos As Integer
   
   lboxProgress.Add("Adding referral letters summary.....")
   lblProgress.text = "Adding referral letters...."
   Wait
   For Each referral In currentconsult!referrals_written
      progressbar1.Value = x / currentconsult!referrals_written.count
      progressbar1.Refresh
      tempstring = referral!letter_html
      charpos = InStr(referral!letter_html, "<TABLE")
      If x = 0 Then                                        'if the first letter, put in the header to generate the TOC using wkhtmltopdf later
         tempstring = "<HTML><BODY><DIV  ALIGN=CENTER><H3> Referral Letters Written</H3></DIV>" & Right(referral!letter_html, Len(referral!letter_html) - charpos + 1)
      Else
         tempstring = "<HTML><BODY><P STYLE='page-break-before: always'>" & Right(referral!letter_html, Len(referral!letter_html) - charpos + 1)
      Endif
      Inc x
      shtml &= tempstring
   Next
   html_sections.add(sHtml, html_sections.count)
   Try Kill "/tmp/referral_letters_written.pdf"
   fn = modPrinting.Make_PDF_From_Html(shtml,,,, "referral_letters_written.pdf")
   pdf = New Collection
   pdf!name = "referral letters written"
   pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
   pdf!filename = fn
   pdf_sections.Add(pdf, pdf_sections.count)    
   
End

Private Sub Include_Patient_Tasks()
   '-----------------------
   'List outstanding tasks 
   '-----------------------
   
   Dim outstanding_task As Collection  
   Dim x As Integer
   Dim tempstring As String
   Dim charpos As Integer
   Dim fn As String
   
   lboxProgress.Add("Exporting tasks not yet completed for this patient......")
   Wait
   x = 0
   For Each outstanding_task In currentconsult!patient_tasks_outstanding
      If x = 0 Then
         tempstring = modProgressNotes.Tasks_summary_Construct_html(outstanding_task)
         charpos = InStr(tempstring, "<P")
         tempstring = Left(tempstring, charpos - 1) & "<DIV  ALIGN=CENTER><H3> Outstanding Tasks</H3></DIV>" & Right(tempstring, Len(tempstring) - charpos + 1)
         html_sections.add(tempstring, html_sections.count)
         Inc x
      Else
         tempstring = modProgressNotes.Tasks_summary_Construct_html(outstanding_task)
         html_sections.add(tempstring, html_sections.count)
      End If
   Next
   Try Kill "/tmp/tasks.pdf"
   fn = modPrinting.Make_PDF_From_Html(tempstring,,,, "tasks.pdf")
   pdf = New Collection  
   pdf!name = "tasks"
   pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
   pdf!filename = fn
   pdf_sections.add(pdf, pdf_sections.count)   
   
End

Public Sub Include_Documents_Received()
   '------------------------------------------------------------------------
   'Add any letters or results received, either the sub-selection or the lot
   'the documents_included collection only has the pk for a couple of reasons
   '1) the drag command can only drag text (we have used str(documents.pk) or image
   '2) the user can drop documents at random on the list, ie. unsorted, and can't tell from
   '   the keys whether letter or documents so lvwIncludedDocuments_Refresh sorts this distinction out
   'In this routine we pulll back the collection from the db (inefficient, ordered by date (inefficient)
   'FIXME
   'if chkIncludeDocumentAuditTrail.value = True then each document has its audit trail included.
   '-------------------------------------------------------------------------
   
   Dim progressbar_interval As Float
   
   Dim document As Collection
   Dim document_pagecount As Integer
   Dim results As New Collection
   Dim letters As New Collection
   Dim sql_letters As String
   Dim sql_results As String
   Dim temp_dir As String
   Dim Letter_PDF_paths As Collection 
   Dim Result_PDF_paths As Collection
   Dim result As Collection
   Dim letter As Collection
   Dim pro As Process
   Dim tempstring As String
   Dim x As Integer
   Dim filename_for_all_the_letters As String
   Dim filename_for_all_the_results As String
   Dim sHtml As String
   Dim fn As String
   
   '-------------------------------------------------------------------------
   'if this list has contents, then user is selecting a partial document dump
   '-------------------------------------------------------------------------
   If lvwIncludedDocuments.count Then  
      lboxProgress.Add("Collating the subset of documents or results selected.....")
      Wait
      progressbar1.value = 0
      progressbar1.Refresh()
      Wait
      lblProgress.text = "Adding documents recieved...."
      '------------------------------------------------------------------------------------
      'When the document or result is dragged from the letter or results list
      'the resultant order in our list is random, we want them sorted by letters or results
      'fill the results and letters collections
      '------------------------------------------------------------------------------------
      For Each document In Included_Documents                                                  'included_documents is effectively random keys                                           
         If Document!type = "letter" Then                                                      'get all documents which are letters
            sql_letters &= "pk_document=" & document!fk_document & " OR "                      'these will be ordered by dates                  
         End If   
         If Document!type = "result" Then                                                      'get all documents which are results
            sql_results &= "pk_document=" & document!fk_document & " OR "
         End If   
      Next
      If sql_letters <> "" Then                                                                'have letters? make a summary list
         sql_letters = "Select * from documents.vwdocuments where " & Left(sql_letters, Len(sql_letters) - 4) & " Order by date_created"
         Letters = modDBConnect.exec_query_collection(sql_letters)
         html_sections.add(modProgressNotes.Letters_Summary_Construct_html(letters), html_sections.count)
      End If      
      If sql_results <> "" Then                                                               'have results ?make a summary list
         sql_results = "Select * from documents.vwdocuments where " & Left(sql_results, Len(sql_results) - 4) 
         If chkSortResultsByUserTag.value = True Then                                         'either ordered by like tags (not exact for actual loincs)
            sql_results &= "ORDER BY tag_user, date_created"
         Else
            sql_results &= " Order by date_created"                                           'or by date they were created
         End If   
         results = modDBConnect.exec_query_collection(sql_results)
         If chkResultsReceivedSummary.value = True Then    
            lboxProgress.Add("Generating list of all results received .....")
            Wait
            shtml = modProgressNotes.Results_Summary_Construct_HTML(Results, chkIncludeINR.Value)
            html_sections.add(shtml, html_sections.count)
         Endif
         fn = modPrinting.Make_PDF_From_Html(shtml,,,, "incoming_results_summary.pdf")
         pdf = New Collection
         pdf!name = "summary incoming results"
         pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
         pdf!filename = fn
         pdf_sections.Add(pdf, pdf_sections.count)   
      End If    
      
   Else
      '----------------------------------------------------------------------------------------
      'User has not selected a subset - check if user wanted to dump all letters or all results
      'First, the letters
      '----------------------------------------------------------------------------------------
      If chkLettersReceivedSummary.value = True Then    
         lboxProgress.Add("Generating list of all letters received .....")
         Wait
         letters = currentconsult!letters_received_sorted_ascending
         shtml = modProgressNotes.Letters_summary_construct_html(currentconsult!letters_received_sorted_ascending)
         html_sections.add(shtml, html_sections.Count)
         fn = modPrinting.Make_PDF_From_Html(shtml,,,, "incoming_letters_summary.pdf")
         pdf = New Collection
         pdf!name = "summary incoming letters"
         pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
         pdf!filename = fn
         pdf_sections.Add(pdf, pdf_sections.count)   
      End If   
      '----------------------------------------------------------------------------
      'Now the results these were not specifically added documents include them all
      '----------------------------------------------------------------------------
      If chkResultsReceivedSummary.value = True Then    
         results = currentconsult!results_received
         lboxProgress.Add("Generating list of all results received .....")
         Wait
         shtml = modProgressNotes.Results_Summary_Construct_HTML(Results, chkIncludeINR.Value)
         html_sections.add(shtml, html_sections.count)
         fn = modPrinting.Make_PDF_From_Html(shtml,,,, "incoming_results_summary.pdf")
         pdf = New Collection
         pdf!name = "summary incoming results"
         pdf!page_count = ModUtil.Read_PDF_Page_Count(fn)
         pdf!filename = fn
         pdf_sections.Add(pdf, pdf_sections.count)   
      End If   
   End If  
   If rbAllReferralLetters.value = True Or rbSelectedReferralLetters.value = True Then  
      If letters.count Then                                                              'Now, back to letters, if we have some
         Temp_dir = "/tmp/letters"                                                           'create temporary directory to join them all together in
         Try Mkdir "/tmp/letters"
         If Error Then
            If Error.Code = const.File_ioError_DirectoryExists Then
               pro = Shell "rm /tmp/letters/*.pdf" Wait For Write
               Close #pro
            Else
               Message.Info("An error occurred code:" & Error.code & ".\n\nCannot process the letters.")
               Return
            End If
         End If
         Letter_PDF_paths = New Collection                                                   'collection to hold the letters including paths
         '-------------------------------------------------------------------------
         'Later on down this routine, all letters which are pdf's have to be joined
         'to the pdf generated from the html for the coversheet, toc, etc etc
         'Letters are added last in our single pdf so:
         'Letter_PDF_path[0-n] = all the pdfs of the letters, which are either
         ''native' pdfs on our system or pdf's generated from html recieved.
         '-------------------------------------------------------------------------
         x = 0
         lblProgress.text = "Adding letters received...."
         For Each letter In letters          
            Tempstring = ""
            Select Case File.Ext(letter!source_file)                                        'then  check file endings
               Case "pdf"
                  If InStr(letter!source_file, "'") Then
                     Message.title = "Bad File Name"
                     Message.Warning("The file:" & letter!source_file & " has an illegal character in the name, i.e - a ' character\n\nThis cannot be processed and will be skipped.\n\nYou should get your system admin to fix this.")
                     
                  Else
                     Letter_PDF_paths.Add(modFiles.Get("document_archiving_directory", letter!source_file), x)
                  End If 
               Case Else                                                                    'if not a pdf must be hl7 (fixme could bomb if an image
                  '------------------
                  'must be a hl7 file
                  '------------------
                  tempstring &= letter!html
                  progressbar1.value = x / letters.Count
                  progressbar1.Refresh()
                  Wait
                  Letter_PDF_paths.Add(modPrinting.Make_PDF_From_Html(letter!html, const.orientation_portrait, "", False, Str(x) & ".tmp.pdf", Progressbar1, "/tmp/letters/"), x)
            End Select
            Inc x
         Next
      End If   
   End If   
   If Not IsNull(Letter_PDF_paths) Then                                                         'we have collection of letters to combine into one pdf
      Try Kill "/tmp/letters_received.pdf"
      filename_for_all_the_letters = modPrinting.Join_PDF(Letter_PDF_paths, "/tmp/letters_received") 'this routine adds the .pdf extension
      document_pagecount = ModUtil.Read_PDF_Page_Count(filename_for_all_the_letters)           'get the total page count in this new pdf
      html_sections.add(modPrinting.Make_HTML_With_Heading_And_Blank_pages("Letters Received", document_pagecount), html_sections.count)
      pdf = New Collection  
      pdf!name = "letters recieved"
      pdf!page_count = document_pagecount
      pdf!filename = filename_for_all_the_letters
      pdf_sections.add(pdf, pdf_sections.count)   
   End If
   If rbAllResultsReceived.value = True Or rbSelectedResultsReceived.value = True Then    
      If results.count Then                                                              'Now, back to letters, if we have some
         lblProgress.text = "Adding results received...."
         Temp_dir = "/tmp/results"                                                           'create temporary directory to join them all together in
         Try Mkdir "/tmp/results"
         If Error Then
            If Error.Code = const.File_ioError_DirectoryExists Then
               pro = Shell "rm /tmp/results/*.pdf" Wait For Write
               Close #pro
            Else
               Message.Info("An error occurred code:" & Error.code & ".\n\nCannot process the results.")
            End If
         End If
         Result_PDF_paths = New Collection                                                   'collection to hold the letters including paths
         '-------------------------------------------------------------------------
         'Later on down this routine, all letters which are pdf's have to be joined
         'to the pdf generated from the html for the coversheet, toc, etc etc
         'Letters are added last in our single pdf so:
         'Letter_PDF_path[0-n] = all the pdfs of the letters, which are either
         ''native' pdfs on our system or pdf's generated from html recieved.
         '-------------------------------------------------------------------------
         x = 0
         For Each result In results
            Tempstring = ""
            Select Case File.Ext(result!source_file)                                        'then  check file endings
               Case "pdf"
                  Result_PDF_paths.Add(modFiles.Get("document_archiving_directory", result!source_file), x)
                  Print modFiles.Get("document_archiving_directory", result!source_file)
               Case Else                                                                    'if not a pdf must be hl7 (fixme could bomb if an image
                  '------------------
                  'must be a hl7 file
                  '------------------
                  progressbar1.value = x / results.Count
                  progressbar1.Refresh()
                  Wait
                  tempstring &= result!html
                  Result_PDF_paths.Add(modPrinting.Make_PDF_From_Html(result!html, const.orientation_portrait, "", False, Str(x) & ".tmp.pdf", Progressbar1, "/tmp/results/"), x)
            End Select
            Inc x
         Next
      End If   
   End If   
   If Not IsNull(Result_PDF_paths) Then
      Try Kill "/tmp/results_recieved.pdf"
      filename_for_all_the_results = modPrinting.Join_PDF(Result_PDF_paths, "/tmp/results_recieved")  'this routine adds the .pdf extension
      document_pagecount = ModUtil.Read_PDF_Page_Count(filename_for_all_the_results)
      html_sections.add(modPrinting.Make_HTML_With_Heading_And_Blank_pages("Results Received", document_pagecount), html_sections.count)
      pdf = New Collection  
      pdf!name = "results recieved"
      pdf!page_count = document_pagecount
      pdf!filename = filename_for_all_the_results
      pdf_sections.add(pdf, pdf_sections.count)   
   End If
   If Sql_letters <> "" And sql_results <> "" Then
      tempstring = "<HTML><body><DIV ALIGN=CENTRE><H3>Letters and Results Received</H3></DIV"
   Else If sql_letters <> "" And sql_results = "" Then
      tempstring = "<HTML><body><DIV ALIGN=CENTRE><H3>Letters Received</H3></DIV"
   Else
      If sql_results <> "" And sql_letters = "" Then
         tempstring = "<HTML><body><DIV ALIGN=CENTRE><H3>Results Received</H3></DIV"
      Endif
   End If 
   
End

Public Sub New_Entry()
   
   Reload()
   Wizard1.page = 0
   
End

Public Sub Create_Zip()
   '---------------------------------
   'Create the password protected zip
   '---------------------------------
   
   Dim cmd As String
   Dim strOutput As String
   
   Return   
   'copy the indexed pdf to the patients temporary directory
   Try Copy export_filename_and_path To export_dir &/ File.Name(export_filename_and_path)                                                  'try and pdf file to new name
   If Error Then
      Message.Info("An error occurred and the zip file was not created.")
      Return
   End If
   cmd = "zip --junk-paths -P " & Trim(txtPassword2.text) & " " & export_dir &/ Patient_Details & ".zip " & export_dir &/ "* .pdf"  'e.g Peter_Rabbit_01-12-1900.zip"
   Print cmd
   
   taConsole.text = "Starting zip.....\n"
   taConsole.text &= "zip --junk-paths -P ***** " & export_dir &/ Patient_Details & ".zip " & export_dir &/ "* .pdf\n"
   
   Wait
   
   Shell cmd To strOutput
   
   taConsole.text &= strOutput
   
End

Public Sub Create_ExportDir()
   '---------------------------------------------------------------------
   'creates a temporary directory for the patient's file returns the name
   '---------------------------------------------------------------------
   
   Dim pro As Process
   
   Try Mkdir export_dir
   If Error Then
      If Error.Code = const.File_ioError_DirectoryExists Then
         pro = Shell "rm " & export_dir &/ "*.pdf " Wait For Write
         pro = Shell "rm " & export_dir &/ "*.zip " Wait For Write
         Try Close #pro
      Else
         Message.Info("An error occurred code:" & Error.code & ".\n\nCannot dump the file.")
         Return
      End If
   End If
   
End

Public Sub Multiple_PDFs()
   '    '---------------------------------------------------------------------------------------------------------
   '    ' Dump the record but As Multiple PDF 's into a tempdir of User.home + patient name
   '    ' Notes:
   '    '        By convention rightly or wrongly for historical reasons when we scan a filename is this:
   '    '        firstname_surname. yyyymmdd.patientid.organsisation.doc_pk.person.pdf
   '    ' --------------------------------------------------------------------------------------------------------
   '
   '    Dim sHtml As String
   '    Dim temp_dir As String
   '    Dim Destination_File As String
   '    Dim Patient_Details As String
   '    Dim hctrl As Control
   '    Dim cbox As CheckBox
   '    Dim pro As Process
   '    Dim member As Collection
   '    Dim Doc_File_Stem As String
   '    Dim tempstring As String
   '    Dim x As Integer
   '    Dim charpos As Integer
   '
   '    Patient_Details = Trim(patient!wholename) & "_" & Format(patient!birthdate, "dd-mm-yyyy")
   '    Patient_Details = Replace$(Patient_Details, " ", "-")
   '    Patient_Details = Replace$(Patient_Details, "'", "")
   '    Doc_File_Stem = LCase(Patient_Details) & "." & patient!fk_patient
   '    Temp_dir = User.home &/ Patient_Details
   '
   '    Try Mkdir Temp_dir
   '    If Error Then
   '       If Error.Code = const.File_ioError_DirectoryExists Then
   '          pro = Shell "rm " & Temp_dir &/ "*.pdf " Wait For Write
   '          Close #pro
   '       Else
   '          Message.Info("An error occurred code:" & Error.code & ".\n\nCannot dump the file.")
   '          Return
   '       End If
   '    End If
   '    If chkAudit.value = True Then
   '       Message.Title = "Adding Audit to Document Export"
   '       tempstring = "Including the audit trail when exporting the documents will take quite a while.\n\n"
   '       "This is not recommended unless these documents will be used for medico-legal reasons, or you are "
   '       "transferring the records to another practice.\n\n"
   '       "Are you sure you want to do this?"
   '       Select Case Message.Question(tempstring, "Include Audit Details in PDF", "Skip Audit", "Cancel")
   '          Case 3
   '             Return
   '          Case 2
   '             chkAudit.value = False
   '       End Select
   '
   '    Endif
   '    Inc application.Busy
   '    ProgressBar1.value = 0.0
   '    ProgressBar1.Visible = True
   '    lblStatus.Visible = False
   '    Wait
   '    For Each hctrl In VBox1.children
   '       sections = New Collection
   '       sHtml = ""
   '       If hctrl Is CheckBox And hctrl.Visible Then
   '          Cbox = hctrl
   '          If Cbox.Value = True And Cbox.visible Then
   '
   '             Select Case cbox.Tag
   '                Case "health summary"
   '                   shtml = modProgressNotes.Health_Summary_Construct_html(currentconsult)
   '                   Destination_File = Doc_File_Stem & ".health-summary.pdf"
   '                Case "care plan"
   '                   shtml = modProgressNotes.Care_Plan_Construct_html(currentconsult)
   '                   Destination_File = Doc_File_Stem & ".careplan.pdf"
   '                Case "all progress notes"
   '                   shtml = modProgressNotes.AllProgressNotes_Construct_Html(currentconsult)
   '                   Destination_File = Doc_File_Stem & ".progressnotes.pdf"
   '                Case "health issue progress notes"
   '                   Destination_File = Doc_File_Stem & ".progressnotes-by-health-issue.pdf"
   '                   If currentconsult!past_history.count Then
   '                      For Each member In currentconsult!past_history
   '                         html_sections.add(modProgressNotes.ConstructHTML_SingleProblem(currentconsult, member!pk_pasthistory, const.cSection_PastHistory, member!description, True), sections.count)
   '                      Next
   '                   End If
   '                Case "tasks"
   '                   Destination_File = Doc_File_Stem & ".outstanding-tasks.pdf"
   '                   x = 0
   '                   For Each member In currentconsult!patient_tasks_outstanding
   '                      If currentconsult!patient_tasks_outstanding.count Then
   '                         If x = 0 Then
   '                            shtml = modProgressNotes.Tasks_summary_Construct_html(member)
   '                            charpos = InStr(tempstring, "<P")
   '                            shtml = Left(shtml, charpos - 1) & "<DIV  ALIGN=CENTER><H3> Outstanding Tasks</H3></DIV>" & Right(shtml, Len(shtml) - charpos + 1)
   '                            html_sections.add(shtml, sections.count)
   '                            Inc x
   '                         Else
   '                            html_sections.add(modProgressNotes.Tasks_summary_Construct_html(member), sections.count)
   '                         End If
   '                      Endif
   '                   Next
   '                Case "workcover"
   '                   ' shtml =
   '                   '    Destination_File = Doc_File_Stem & ".workcover-forms.pdf"
   '                Case "mental health"
   '                   Destination_File = Doc_File_Stem & ".mental-health-plans.pdf"
   '                   If currentconsult!mentalhealthplans.count Then
   '                      '------------------------------------------------------------------------------
   '                      'So as to get 'Mental Health Plans' into the table of contents, substitute that
   '                      'text into the html of the first mental health plan only, use a temp string
   '                      'otherwise the member itself will be altered
   '                      '------------------------------------------------------------------------------
   '                      x = 0
   '                      For Each Member In currentconsult!mentalhealthplans
   '                         If x = 0 Then
   '                            shtml = member!html
   '                            charpos = InStr(tempstring, "<P")
   '                            shtml = Left(shtml, charpos - 1) & "<DIV  ALIGN=CENTER><H3> Mental Health Plans</H3></DIV>" & Right(shtml, Len(shtml) - charpos + 1)
   '                            html_sections.add(shtml, sections.count)
   '                            Inc x
   '                         Else
   '                            html_sections.add(Member!html, sections.count)
   '                         End If
   '                      Next
   '                   End If
   '                Case "referral letter summaries"
   '                   sHtml = modProgressNotes.ReferralLetter_summary_construct_html(currentconsult)
   '                   Destination_File = Doc_File_Stem & ".referral-letters-summary-listing.pdf"
   '                Case "referrals"
   '                   Destination_File = Doc_File_Stem & ".referrals-written.pdf"
   '                   If currentconsult!referrals_written.count Then
   '                      For Each Member In currentconsult!referrals_written        'all the referrals
   '                         html_sections.add(Member!letter_html, sections.count)
   '                      Next
   '                   End If
   '                Case "requests"
   '                   Destination_File = Doc_File_Stem & ".requests-ordered.pdf"
   '                   If currentconsult!requests_ordered.count Then
   '                      shtml = modProgressNotes.Requests_summary_construct_html(currentconsult)
   '                   End If
   '                Case "recalls"
   '                   Destination_File = Doc_File_Stem & ".recalls-logged.pdf"
   '                   shtml = modProgressNotes.Recalls_summary_construct_html(currentconsult)
   '                Case "results"
   '                   Destination_File = Doc_File_Stem & ".results-received.pdf"
   '                   For Each Member In currentconsult!results_received        'all the referrals
   '                      If x = 0 Then
   '                         tempstring = ""
   '                         If (chkExcludeINR.value = True And chkExcludeINR.Enabled) Or chkExcludeINR.Enabled = False Then
   '                            If member!tag <> "INR" Then tempstring = "<body><DIV ALIGN=CENTRE><H3>Results Received</H3></DIV" & Member!html
   '                         Else
   '                            tempstring = "<body><DIV ALIGN=CENTRE><H3>Results Received"
   '                            If chkExcludeINR.value = True Then
   '                               tempstring &= "<small>(Exluding all INR's)</small>"
   '                            Endif
   '                            tempstring &= "</H3></DIV" & Member!html
   '                         End If
   '                         '----------------------------------------
   '                         'now, is there an audit on this document?
   '                         '----------------------------------------
   '                         If chkAudit.value = True And Len(tempstring) <> 0 Then
   '                            sHtml = modArchiveDocumentsDBI.Audit_Trail_Show_Document_Details_Tasks_Attatched(member!pk_document)
   '                            sHtml &= "<HTML><BODY><TABLE><BR><B>Document Actioning</B><BR>" & modHTML.HTML_Template_Audit_Row_Heading()
   '                            sHtml &= modAudit.MakeTrail("documents.documents", Member!pk_document)
   '                            sHtml &= "</TABLE>"
   '                            sHtml &= "</BODY></HTML>"
   '                            tempstring &= shtml
   '                         End If
   '                         If Len(tempstring) Then
   '                            html_sections.add(tempstring, sections.count)
   '                            Inc x
   '                         End If
   '                      Else
   '                         tempstring = ""
   '                         If chkExcludeINR.value = True And chkExcludeINR.Enabled Then
   '                            If member!tag <> "INR" Then tempstring = member!html
   '                         Else
   '                            tempstring = member!html
   '                         End If
   '                         If chkAudit.value = True And Len(tempstring) <> 0 Then
   '                            sHtml = modArchiveDocumentsDBI.Audit_Trail_Show_Document_Details_Tasks_Attatched(member!pk_document)
   '                            sHtml &= "<HTML><BODY><TABLE><BR><B>Document Actioning</B><BR>" & modHTML.HTML_Template_Audit_Row_Heading()
   '                            sHtml &= modAudit.MakeTrail("documents.documents", Member!pk_document)
   '                            sHtml &= "</TABLE>"
   '                            sHtml &= "</BODY></HTML>"
   '                            tempstring &= shtml
   '                         End If
   '                         If Len(tempstring) Then html_sections.add(tempstring, sections.count)
   '                      End If
   '                   Next
   '                   shtml = ""
   '                Case "letters received list"
   '                   sHtml = modProgressNotes.Letters_summary_construct_html(currentconsult)
   '                   Destination_File = Doc_File_Stem & ".list-of-letters-received.pdf"
   '                Case "letters received"
   '                   For Each member In currentconsult!letters_received_sorted_ascending
   '                      Select Case File.Ext(member!source_file)
   '                         Case "pdf"
   '                            Copy archive_dir &/ member!source_file To temp_dir &/ member!source_file
   '                         Case Else
   '                            '-------------------------------------------------------------------------
   '                            'This is html, so we have to make the file as pdf, use convention as above
   '                            'Doc_File_Stem =  peter_smith.19200323.304
   '                            '-------------------------------------------------------------------------
   '                            filename = Doc_File_Stem & "."
   '                            If Not IsNull(member!organisation) Then
   '                               Destination_File = Replace(member!organisation, ".", "-") & "." & member!originator & "." & member!pk_document
   '                               Destination_File = Replace$(Destination_File, " ", "-")
   '                               Destination_File = Replace$(Destination_File, "--", "-")
   '                               Destination_File = Doc_File_Stem & "." & LCase(Replace$(Destination_File, "'", "")) & ".pdf" 'some apostrophes have escaped through
   '                            Endif
   '                            modPrinting.Make_PDF_From_Html(member!html, const.orientation_portrait, "", False, Destination_File, Progressbar1, Temp_dir)
   '                      End Select
   '                   Next
   '             End Select
   '          Endif
   '       End If
   '       If sections.count Then
   '          Copy modPrinting.Make_PDF_From_HTML_Pages(sections, const.orientation_portrait, "", False, Destination_File, ProgressBar1) To Temp_Dir &/ Destination_File
   '       End If
   '       If shtml Then
   '          modPrinting.Make_PDF_From_Html(shtml, const.orientation_portrait, "", False, Destination_File, Progressbar1, Temp_dir)
   '       Endif
   '    Next
   '    Dec application.Busy
   '
   '    Message.Title = "Export clinical record"
   '    Message.Info("The export has been completed successfully.\n\nAll the files produced will be in the the directory " & Temp_dir)
   ' Catch
   '    Message.Info("FExportClinical.Multiple_PDFs() Error:" & Error.text)
   '
   
End

Public Sub Settings_Save()
   
   Settings["FExportClinical/Form_PDF.currentzoom"] = Form_PDF.CurrentZoom
   
End

Private Sub Settings_Load()
   
   Form_PDF.CurrentZoom = Settings["FExportClinical/Form_PDF.currentzoom"]
   
End

Public Sub rbOrientation_Click()
   
   Page_Orientation = Last.tag
   
End

Public Sub Refresh_Collections()
   '-----------------------------------------------------
   'Remove the keys from all collections hence these will
   're-load the contents when next referenced
   'fixme see note at top of file.
   '-----------------------------------------------------
   
   currentconsult.Refresh("progress_notes")
   currentconsult.Refresh("past_history")
   currentconsult.Refresh("patient_tasks_outstanding")
   currentconsult.Refresh("mentalhealthplans")
   currentconsult.Refresh("referrals_written")
   currentconsult.Refresh("letters_received")
   currentconsult.Refresh("requests_ordered")
   currentconsult.Refresh("recalls_logged")
   currentconsult.Refresh("results_received")
   currentconsult.Refresh("workcover_claims")
   currentconsult.Refresh("medical_certificates")
   currentconsult.Refresh("diabetes_annual_cycle_of_care")
   
End

Public Sub Refresh_Gui()
   '----------------------------------------------------------
   'Re-sets the gui checkboxes, zero's progress bar etc
   'Only exposes the checkboxes for which the patient has data
   '----------------------------------------------------------
   
   Dim cb As CheckBox
   Dim hctrl As Control
   Dim member As Collection
   
   chkSortResultsByUserTag.value = False
   lvwIncludedDocuments.Clear
   bExportDocuments = False
   Inc application.Busy
   modEditAreaHelpers.EditArea_Clear(VBox_Page1)
   For Each hctrl In Vbox_Page1.Children
      If hctrl Is CheckBox Then
         cb = hctrl
         If cb.tag = "toc" Or cb.tag = "coversheet" Then
            cb.Value = True
         Else
            cb.Foreground = Color.LightGray
         End If
      End If
   Next
   ProgressBar1.value = 0.0
   chkIncludeProgressNotesAuditTrail.value = False  
   Wizard1[1].Enabled = False   'the progress notes selection page
   Wizard1[2].Enabled = True  'the referral letter or results selection page
   HBox_ProgressNotes.Visible = currentconsult!progress_notes.count
   chkTasks.Visible = currentconsult!patient_tasks_outstanding.count
   HBox_MentalHealthPlans.visible = currentconsult!mentalhealthplans.count
   chkReferralLetterSummaries.Visible = currentconsult!referrals_written.count
   chkReferralLetters.Visible = currentconsult!referrals_written.count
   chkRequestsOrdered.Visible = currentconsult!requests_ordered.count
   HBox_ResultsReceived.Visible = currentconsult!results_received.count
   chkRecalls.Visible = currentconsult!recalls_logged.count
   HBox_LettersReceived.Visible = currentconsult!letters_received_sorted_ascending.count
   chkLettersReceivedSummary.Visible = currentconsult!letters_received_sorted_ascending.count
   chkResultsReceivedSummary.Visible = currentconsult!results_received.count
   chkDiabeticCycleOfCare.Visible = currentconsult!diabetes_annual_cycle_of_care.count
   chkWorkcoverSummarised.Visible = currentconsult!workcover_claims.count
   chkWorkcoverForms.Visible = currentconsult!workcover_claims.count
   HBox_MedicalCertificates.visible = currentconsult!medical_certificates.count
   chkLettersReceivedSummary.value = False
   chkResultsReceivedSummary.value = False
   chkReferralLetterSummaries.value = False
   chkRecalls.value = False   
   chkDiabeticCycleOfCare.value = False   
   chkReferralLetters.value = False
   chkRequestsOrdered.value = False
   chkMentalHealthPlans.value = False  
   chkWorkcoverSummarised.value = False   
   chkWorkcoverForms.value = False
   chkMedicalCertificatesSummary.value = False   
   chkAuditTrailDocuments.value = False   
   chkAuditTrailTasks.value = False 
   chkAuditTrailRecalls.value = False
   chkMentalHealthPlans.value = False  
   chkIncludeDocumentAuditTrail.value = False   
   chkDumpMentalHealthPlansAsPDFs.value = False 
   With chkDumpIncomingLettersAsPDFs
      .value = False
      .Enabled = False  
   End With
   With chkDumpIncomingResultsAsPDFs
      .value = False
      .Enabled = False  
   End With
   With chkDumpReferralLettersAsPDFs
      .value = False  
      .Enabled = False  
   End With
   If modStaffTasksDBI.Tasks_For_Patient_Exist(currentconsult!patient!fk_patient) Then chkAuditTrailTasks.Visible = True   
   '------------------------------------------------------------------------
   'if  there is incoming correspondance then showing heading and checkboxes
   '------------------------------------------------------------------------
   If HBox_LettersReceived.Visible Then  
      lblIncomingCorrespondance.visible = True
      chkIncludeDocumentAuditTrail.visible = True
   Else
      lblIncomingCorrespondance.visible = False
      chkIncludeDocumentAuditTrail.visible = False 
   End If   
   If chkResultsReceivedSummary.visible Then
      HBox_ResultsReceived.Visible = True 
   Else
      HBox_ResultsReceived.Visible = False   
   Endif
   If HBox_ResultsReceived.Visible = True Or chkResultsReceivedSummary.visible = True Then
      lblIncomingCorrespondance.visible = True 
      If HBox_ResultsReceived.Visible Then
         chkIncludeDocumentAuditTrail.visible = True
      Endif
   Else
      lblIncomingCorrespondance.visible = False
   Endif
   '----------------------------------------------------------------------
   ' If there is outgoing correspondance, show that heading and checkboxes
   '----------------------------------------------------------------------
   If chkMedicalCertificatesSummary.visible = True Or chkReferralLetterSummaries.visible = True Or chkReferralLetters.visible = True Or chkRequestsOrdered.visible = True Or chkMentalHealthPlans.value = True Or chkWorkcoverForms.visible = True
      lblOutgoingCorrespondance.Visible = True  
   Else
      lblOutgoingCorrespondance.Visible = False   
   End If   
   If currentconsult!results_received.count Or currentconsult!letters_received_sorted_ascending.count Then chkAuditTrailDocuments.Visible = True  
   If chkRecalls.Visible Then chkAuditTrailRecalls.visible = True 
   If chkRecalls.Visible = True Or chkTasks.Visible = True Or chkAuditTrailDocuments.Visible = True Then
      lblAuditing.Visible = True 
   Else
      lblAuditing.Visible = False 
   Endif
   
   For Each hctrl In Vbox_Page1.Children
      If hctrl Is CheckBox Then
         cb = hctrl
         If cb.Visible Then
            If cb.tag = "toc" Or cb.tag = "coversheet" Then
               cb.Enabled = False   
            Else
               cb.Foreground = Color.Black
               cb.Enabled = True
            End If 
         End If
      End If
   Next
   Patient_INR_Count = modResearchDBI.Patient_INR_Count(currentconsult!patient!fk_patient)
   If Patient_INR_Count Then
      With chkIncludeINR
         .Visible = True
         .Enabled = False 
         .value = False 
      End With  
   Else
      With chkIncludeINR
         .Visible = False
         .value = False  
         .Enabled = False  
      End With
   Endif
   Dec application.Busy
   
End

Public Sub Wizard1_Change()
   
   '-------------------------------------------------------------
   'This event occurs as the wizard changes to the next page
   '-------------------------------------------------------------
   
   current_page = Wizard1.Index
   Select Case Wizard1.Index
      Case cPage_Select_Options
         Form_Help.Help_Show("medical-record-export-wizard.html")   
      Case cPage_Select_ProgressNotes
         Setup_Page_Select_ProgressNotes 
      Case cPage_Select_Documents
         Setup_Page_Select_Documents
      Case cPage_PDF
         Setup_Page_CreatePDF
         Export_PDF_Create 
      Case cPage_ZipOptions
         txtFilename.text = export_dir &/ File.Name(export_filename_and_path)
      Case cPage_CreateZip
         Create_Zip()
   End Select
   
End

Public Sub Wizard1_BeforeChange()
   '-------------------------------------------------------------
   'This event triggers before the page actually changes,
   'so here is an opportunity to stop
   'the event if the information on the page is not correct
   'The index = the index of the page the wizard is currently on
   '-------------------------------------------------------------
   
   Select Case Wizard1.Index
      Case cPage_Select_Options
         
         If rbAllProgressNotes.value = True Then
            Wizard1[1].Enabled = False   
         Else If rbSelectedProgressNotes.value = True Then    
            Wizard1[1].Enabled = True 
         Endif
         If rbSelectedReferralLetters.value = True Or rbSelectedResultsReceived.value = True Then
            Wizard1[2].Enabled = True
         Else
            Wizard1[2].Enabled = False  
         Endif
         If Patient_INR_Count And chkIncludeINR.value = True And (rbAllResultsReceived.value = True Or rbSelectedResultsReceived.value = True) Then
            Message.Title = "WARNING"
            If Message.Question("There are " & Str(Patient_INR_Count) & " INR's in this patient's results.\n\nAre you sure you want to include all these in the pdf?", "Yes", "No") = 2 Then  
               Stop Event
               Return
            End If 
         Endif
      Case cPage_Select_ProgressNotes
         If rbSelectedReferralLetters.value = True Or rbSelectedResultsReceived.value = True Then
            Wizard1[2].Enabled = True
         Else
            Wizard1[2].Enabled = False  
         Endif
      Case cPage_ZipOptions
         If txtPassword2.text = "" Or txtpassword1.text <> txtPassword2.text Then
            Message.Title = "Invalid Password"
            Message.Info("Please provide a valid password before proceeding.")
            Stop Event
         End If
         
   End Select
   
End

Public Sub Setup_Page_CreatePDF()
   
   VBox_PDF.Visible = False   
   VBox_CreatingPDF.Visible = True 
   lboxProgress.Clear
   
End

Public Sub Setup_Page_Select_Documents()
   
   'If user wants to select a subset of results or referras
   If IsNull(Included_Documents) Then Included_Documents = New Collection
   Form_Help.Help_Show("selecting-letters-or-results-for-export.html")
   
End

Public Sub Setup_Page_Select_ProgressNotes()
   
   If IsNull(Form_NotesEditor) Then 
      With Form_NotesEditor = New FEditNotes(VBox_ProgressNotes)
         .Init(currentConsult, True) 'True = include checkboxes
         .Visible = True
      End With 
      Form_Help.Help_Show("selecting-progress-notes-for-export.html")
   End If   
   
End

Public Sub ZipInfo_LostFocus()
   
   If Last.tag = "password2" And Trim(txtpassword1.text) <> Trim(txtPassword2.text) Then
      Message.Info("The two passwords don't match.")
   Endif
   
End

Public Sub chkDisplayPassword_Click()
   
   txtpassword1.Password = Not Last.value
   txtPassword2.Password = Not Last.value
   
End

Public Sub lvwIncludedDocuments_Drop()
   '---------------------------------------------------------------------
   'Something is being dropped on the included documents list
   'We will (at some stage) accept stuff which is a document or a graph
   'at moment I'm only allowing a document from documents (ie path or
   'letter/scanned document
   'Drag.source = the control this is coming from, but
   'is a 'control', not for example a columnview  so
   'have to test it as below
   '---------------------------------------------------------------------
   
   Dim cv As ColumnView                'the 'source' control if columnview
   Dim Inclusion As Collection
   Dim select_mode As Integer
   Dim x As Integer
   
   'if selection mode = 1  = single document is highlighted
   If Drag.Source Is Columnview Then              'a result or letter ie document
      cv = Drag.Source
      cv.MoveCurrent()
      Select_mode = cv.mode
      If cv.mode = 1 Then
         Inclusion = New Collection
         Inclusion!fk_document = Drag.data
         If Not Inclusion_In_List(Inclusion) Then
            Included_Documents.Add(Inclusion, lvwIncludedDocuments.count)
         End If
      Else
         cv.MoveFirst()
         For x = 0 To cv.count - 1
            If cv.Item.Selected = True Then
               inclusion = New Collection
               Inclusion!fk_document = cv.Item.Key 'the key of the document
               If Not Inclusion_In_List(Inclusion) Then
                  Included_Documents.Add(Inclusion, Included_Documents.count)
               End If
            Endif
            cv.MoveNext()
         Next
      End If
      cv.UnselectAll()
   Else
      '---------------------------------
      'Must be a graph which was dropped
      '---------------------------------
      ' Included_Documents!type = "graph"
      'Included_Documentsa!filename = Drag.Source.Tag!fname
      '  sString = "graph of something"
      'lvwIncludedDocumentss.add(lvwIncludedDocumentss.count, sSTring)
   End If
   lvwIncludedDocuments_Refresh(Included_Documents)
   
End

Public Sub Inclusion_In_List(inclusion As Collection) As Boolean
   '-------------------------------------------------------------------
   'Checks if an included document is in the list returns true if it is
   'Inclusions_EditArea is count 0 based
   'May at later date not just include documents.
   '-------------------------------------------------------------------
   
   Dim I As Collection
   
   If Included_Documents.count = 0 Then Return False
   For Each I In Included_Documents
      If I!fk_document = Inclusion!fk_document Then
         Return True
      End If
   Next
   Return False
   
End

Public Sub lvwIncludedDocuments_Refresh(Inclusions As Collection)
   '---------------------------------------------------------------------
   'Refresh the inclusions list for the current document in the edit area
   'ie. this is the list next to the letter text, not the one
   'underneath which is for thos letters already printed
   'Called by lvwIncludedDocuments_Drop: Inclusions_EditArea collection
   '           Referral_Edit:Inclusions_Referral_This_Consult collection
   '---------------------------------------------------------------------
   
   Dim inclusion As Collection
   Dim sString As String
   Dim document As Collection
   
   lvwIncludedDocuments.Clear()
   For Each Inclusion In Inclusions
      Try Document = currentconsult!results_received[inclusion!fk_document]         '? a result??
      If IsNull(document) Then                                                      'it wasn't a result
         Try Document = currentconsult!letters_received[inclusion!fk_document]      '? a letter ??
         If Not IsNull(document) Then
            inclusion!type = "letter"
         Endif
      Else
         inclusion!type = "result"
         
      End If
      sString = Format(Document!date_created, "dd/mm/yyyy") & " " & Document!tag_user
      lvwIncludedDocuments.add(lvwIncludedDocuments.count, sSTring)
   Next
   lblDocuments.text = "Included Documents (" & Str(lvwIncludedDocuments.Count) & ")"
   Print Included_Documents
   
End

Public Function ProgressNotes_HTML_Prepare() As String
   '---------------------------------------------------------------
   'Returns the html of all the progress notes user wants to export
   '---------------------------------------------------------------
   
   Dim hb As HBox
   Dim vb As VBox
   Dim hctrl As Control
   Dim tl As TextLabel
   Dim notes As String
   Dim wbv As WebView
   Dim sTable As String 
   Dim sRowTemplate As String 
   Dim bHaveRow As Boolean
   Dim cb As CheckBox
   Dim hctrl1 As Control
   
   lboxProgress.Add("Adding progress notes......")  
   lblProgress.text = "Adding progress notes...."
   Wait
   sRowTemplate = ""
   "<TR VALIGN=TOP>"
   "<TD WIDTH=15%"
   "%col1%<BR>"
   "</TD>"
   "<TD WIDTH=85%>"
   "%col2%<BR>"
   "</TD>"
   "</TR>"
   notes = "<HTML><BODY<DIV ALIGN=CENTER><H3>Progress Notes"
   If chkIncludeProgressNotesAuditTrail.Value = True Then
      notes &= " With Complete Audit Trails"
   Endif
   notes &= "</H3><Div>" 'This ensures the heading will be included in the table of contents"
   If Not IsNull(Form_NotesEditor) Then    
      For Each hctrl In Form_NotesEditor.lcNotes.Children
         bHaveRow = False  
         If hctrl Is Hbox Then
            hb = hctrl   
            For Each hctrl In hb.Children
               If hctrl Is Vbox Then
                  vb = hctrl 
                  For Each hctrl1 In vb.Children
                     If hctrl1 Is CheckBox Then
                        cb = hctrl1   
                        If cb.value = True Then 
                           bHaveRow = True    
                           Break
                        End If   
                     End If   
                  Next
               Endif
               If bHaveRow Then 
                  If hctrl Is TextLabel Then
                     sTable = "<TABLE width=100%>"
                     sTable &= sRowTemplate
                     tl = hctrl 
                     sTable = Replace(sTable, "%col1%", tl.Text)
                  Endif
                  If hctrl Is Vbox Then
                     VB = hctrl   
                     For Each hctrl1 In vb.Children
                        If hctrl1 Is WebView Then
                           wbv = hctrl1 
                           ' stable = Replace(stable, "%col2%", modUtil.Fix_HTML(wbv.html, []))
                           stable = Replace(stable, "%col2%", wbv.html)
                           notes &= stable & "</TABLE>"
                           Break
                        Endif
                     Next
                  Endif
               End If   
            Next
         Endif
      Next   'fixme clean up the abysmal html
   Else
      '----------------------------- 
      'Must want all progress notes
      '----------------------------
      notes = modProgressNotes.AllProgressNotes_Construct_Html(currentconsult, chkIncludeProgressNotesAuditTrail.value, progressbar1)
   End If   
   Return notes
   
End

Public Sub chkSelectAllNotes_Click()
   '---------------------------------------------------------------------------------------
   'User has clicked on the option to select or de-select all the individual progress notes   
   '---------------------------------------------------------------------------------------
   
   Notes_Checkboxes_Reset(chkSelectAllNotes.value)
   
End

Public Sub Notes_Checkboxes_Reset(bFlag As Boolean)
   '---------------------------------------------------------
   'Called either when clearing the form 
   'of if user has decided to select or  unselect all notes   
   'by clicking on the 'Select All Notes' under the notes list
   '----------------------------------------------------------
   
   Dim hb As HBox
   Dim hctrl As Control
   Dim cb As CheckBox
   Dim vb As VBox
   Dim bCheckboxFound As Boolean
   
   For Each hctrl In Form_NotesEditor.lcNotes.Children
      If hctrl Is Hbox Then
         hb = hctrl   
         For Each hctrl In hb.Children
            If hctrl Is Vbox Then
               vb = hctrl 
               For Each hctrl In vb.Children
                  If hctrl Is CheckBox Then
                     cb = hctrl   
                     cb.value = bFlag 
                     Break
                     bCheckboxFound = True   
                  End If   
               Next
            Endif
            If bCheckboxFound Then Break
         Next
      Endif
      If bCheckboxFound Then Break
   Next
   
End

Public Sub IncomingCorrespondance_Click()
   
   If bexit Then Return
   bexit = True   
   If Last.value = True Then bExportDocuments = True
   Select Case Last.tag
      Case "selected letters received", "all letters received"
         chkDumpIncomingLettersAsPDFs.Enabled = True  
      Case "no letters"
         With chkDumpIncomingLettersAsPDFs
            .Enabled = False
            .value = False 
         End With
      Case "all results received", "selected results received"
         chkIncludeINR.Enabled = True  
         chkDumpIncomingResultsAsPDFs.Enabled = True  
      Case "no results"
         With chkIncludeINR
            .Enabled = False 
            .value = False   
         End With
         With chkDumpIncomingResultsAsPDFs
            .Enabled = False
            .value = False 
         End With
   End Select
   
   bexit = False  
   
End
