' Gambas class file

Private ProgressNotes As Collection
Private currentconsult As CConsult
Private ProgressNoteRow As CProgressNoteSelect
Private Form_NotesEditor As FEditNotes
Private Included_Documents As Collection
Private Form_Help As FHtmlViewer

Public Sub Init(cons As CConsult)
   
   currentconsult = cons
   currentconsult.Refresh("progress_notes")
   If IsNull(Form_NotesEditor) Then Form_NotesEditor = New FEditNotes(VBox_ProgressNotes)
   With Form_NotesEditor
      .Init(currentConsult, True) 'True = include checkboxes
      .Visible = True
   End With
   Included_Documents = New Collection 
   With Form_Help = New FHtmlViewer(Vbox_Help)
      .tbWebBrowserZoomIn.Visible = True
      .tbWebBrowserZoomOut.Visible = True
      .Help_Show("partial-record-export.html")
   End With
   Settings_Load
   
End

Public Sub Preview()
   
   PDF_Prepare
   
End

Public Sub PDF_Prepare()
   '---------------------------------------------------------------------------------------------------
   'proof on concept
   'just thrown together by cutn paste for experiment  
   'the documents_included collection only has the pk for a couple of reasons
   '1) the drag command can only drag text (we have used str(documents.pk) or image
   '2) the user can drop documents at random on the list, ie. unsorted, and can't tell from
   '   the keys whether letter or documents so lvwIncludedDocuments_Refresh sorts this distinction out
   'In this routine we pulll back the collection from the db (inefficient, ordered by date (inefficient)
   'FIXME
   '-----------------------------------------------------------------------------------------------------
   
   Dim shtml As String
   Dim sections As New Collection
   Dim bPrintTableOfContents As Boolean = True   
   Dim bPrintCoversheet As Boolean = True  
   Dim ContentsPage As String
   Dim Output_file As String
   Dim patient As Collection = currentconsult!patient 
   Dim export_filename_and_path As String
   Dim sql_letters As String
   Dim sql_results As String
   Dim letter As Collection
   Dim Letters As Collection
   Dim result As Collection
   Dim results As Collection
   Dim document As Collection   
   Dim Letter_PDF_path As Collection   'the letter and the pdf path   
   Dim Result_PDF_path As Collection 
   Dim x As Integer
   Dim tempstring As String
   Dim Temp_dir As String
   Dim pro As Process
   Dim filename_for_all_the_letters As String
   Dim filename_for_all_the_results As String
   Dim final_pdfs_to_join As New Collection
   
   ProgressBar1.Visible = True   
   ContentsPage = modProgressNotes.CoverSheet_Construct_HTML(currentconsult).GetData()
   Output_file = patient!wholename                                                       'create filename and remove illegal characters
   Output_file = Replace(Output_file, " ", "_")
   Output_file = Replace(Output_file, "'", "")
   Output_file &= "FileId:" & Str(patient!fk_patient) & "-birthdate:" & Format(patient!birthdate, "dd-mm-yyyy") & ".pdf"
   sections.Add(ProgressNotes_HTML_Get(), sections.count)                                  'get only progress notes with checkbox checked
   
   'ask Ian a better way to do this When the document or result is dragged from the letter or results list
   'the resultant order in our list is random, we want them sorted by letters or results
   For Each document In Included_Documents                                                  'included_documents is effectively random keys                                           
      If Document!type = "letter" Then                                                      'get all documents which are letters
         sql_letters &= "pk_document=" & document!fk_document & " OR "                      'these will be ordered by dates                  
      End If   
      If Document!type = "result" Then                                                      'get all documents which are results
         sql_results &= "pk_document=" & document!fk_document & " OR "
      End If   
   Next
   If sql_letters <> "" Then                                                                'have letters? make a summary list
      sql_letters = "Select * from documents.vwdocuments where " & Left(sql_letters, Len(sql_letters) - 4) & " Order by date_created"
      Letters = modDBConnect.exec_query_collection(sql_letters)
      sections.Add(modProgressNotes.Letters_Summary_Construct_html(letters), sections.count)
   End If      
   If sql_results <> "" Then                                                               'have results ?make a summary list
      sql_results = "Select * from documents.vwdocuments where " & Left(sql_results, Len(sql_results) - 4) 
      If chkSortResultsByUserTag.value = True Then                                         'either ordered by like tags (not exact for actual loincs)
         sql_results &= "ORDER BY tag_user, date_created"
      Else
         sql_results &= " Order by date_created"                                           'or by date they were created
      End If   
      results = modDBConnect.exec_query_collection(sql_results)
      sections.Add(modProgressNotes.Results_Summary_Construct_HTML(Results), sections.count)
   Endif
   If sql_letters <> "" Then                                                              'Now, back to letters, if we have some
      Temp_dir = "/tmp/letters"                                                           'create temporary directory to join them all together in
      Try Mkdir "/tmp/letters"
      If Error Then
         If Error.Code = const.File_ioError_DirectoryExists Then
            pro = Shell "rm /tmp/letters/*.pdf" Wait For Write
            Close #pro
         Else
            Message.Info("An error occurred code:" & Error.code & ".\n\nCannot process the letters.")
            
         End If
      End If
      Letter_PDF_path = New Collection                                                   'collection to hold the letters including paths
      '-------------------------------------------------------------------------
      'Later on down this routine, all letters which are pdf's have to be joined
      'to the pdf generated from the html for the coversheet, toc, etc etc
      'Letters are added last in our single pdf so:
      'Letter_PDF_path[0-n] = all the pdfs of the letters, which are either
      ''native' pdfs on our system or pdf's generated from html recieved.
      '-------------------------------------------------------------------------
      For Each letter In letters                                                        
         Tempstring = ""
         ' If x = 0 Then                                                                   'first page of joined letters = a heading (expand this)
         '     tempstring = "<HTML><body><DIV ALIGN=CENTRE><H3>LETTERS RECEIVED</H3></DIV</BODY></HTML>"
         '   Letter_PDF_path.Add(modPrinting.Make_PDF_From_Html(tempstring, const.orientation_portrait, "", False, Str(x) & ".tmp.pdf", Progressbar1, "/tmp/letters/"), x)
         Inc x 
         '  End If
         Select Case File.Ext(letter!source_file)                                        'then  check file endings
            Case "pdf"
               Print modFiles.Get("document_archiving_directory", letter!source_file)
               Letter_PDF_path.Add(modFiles.Get("document_archiving_directory", letter!source_file), x)
            Case Else                                                                    'if not a pdf must be hl7 (fixme could bomb if an image
               '------------------
               'must be a hl7 file
               '------------------
               tempstring &= letter!html
               Letter_PDF_path.Add(modPrinting.Make_PDF_From_Html(letter!html, const.orientation_portrait, "", False, Str(x) & ".tmp.pdf", Progressbar1, "/tmp/letters/"), x)
         End Select
         Inc x
      Next
   End If   
   Print export_filename_and_path
   If Not IsNull(Letter_PDF_path) Then
      filename_for_all_the_letters = modPrinting.Join_PDF(Letter_PDF_path, Temp() & ".pdf")
   End If
   If sql_results <> "" Then                                                              'Now, back to letters, if we have some
      Temp_dir = "/tmp/results"                                                           'create temporary directory to join them all together in
      Try Mkdir "/tmp/results"
      If Error Then
         If Error.Code = const.File_ioError_DirectoryExists Then
            pro = Shell "rm /tmp/results/*.pdf" Wait For Write
            Close #pro
         Else
            Message.Info("An error occurred code:" & Error.code & ".\n\nCannot process the results.")
         End If
      End If
      Result_PDF_path = New Collection                                                   'collection to hold the letters including paths
      '-------------------------------------------------------------------------
      'Later on down this routine, all letters which are pdf's have to be joined
      'to the pdf generated from the html for the coversheet, toc, etc etc
      'Letters are added last in our single pdf so:
      'Letter_PDF_path[0-n] = all the pdfs of the letters, which are either
      ''native' pdfs on our system or pdf's generated from html recieved.
      '-------------------------------------------------------------------------
      x = 0
      For Each result In results
         Tempstring = ""
         ' If x = 0 Then                                                                   'first page of joined letters = a heading (expand this)
         '     tempstring = "<HTML><body><DIV ALIGN=CENTRE><H3>RESULTS RECEIVED</H3></DIV</BODY></HTML>"
         '     Result_PDF_path.Add(modPrinting.Make_PDF_From_Html(tempstring, const.orientation_portrait, "", False, Str(x) & ".tmp.pdf", Progressbar1, "/tmp/results/"), x)
         '     Inc x 
         '   End If
         Select Case File.Ext(result!source_file)                                        'then  check file endings
            Case "pdf"
               Print modFiles.Get("document_archiving_directory", result!source_file)
               Result_PDF_path.Add(modFiles.Get("document_archiving_directory", result!source_file), x)
            Case Else                                                                    'if not a pdf must be hl7 (fixme could bomb if an image
               '------------------
               'must be a hl7 file
               '------------------
               tempstring &= result!html
               Result_PDF_path.Add(modPrinting.Make_PDF_From_Html(result!html, const.orientation_portrait, "", False, Str(x) & ".tmp.pdf", Progressbar1, "/tmp/results/"), x)
         End Select
         Inc x
      Next
   End If   
   If Not IsNull(Result_PDF_path) Then
      filename_for_all_the_results = modPrinting.Join_PDF(Result_PDF_path, Temp() & ".pdf")
   End If
   If Sql_letters <> "" And sql_results <> "" Then
      tempstring = "<HTML><body><DIV ALIGN=CENTRE><H3>Letters and Results Received</H3></DIV"
   Else If sql_letters <> "" And sql_results = "" Then
      tempstring = "<HTML><body><DIV ALIGN=CENTRE><H3>Letters Received</H3></DIV"
   Else
      If sql_results <> "" And sql_letters = "" Then
         tempstring = "<HTML><body><DIV ALIGN=CENTRE><H3>Results Received</H3></DIV"
      Endif
   End If 
   tempstring &= "<P>The following pages contain the full text of either selected letters or results</P>" 
   tempstring &= "Please note that in this development version of EasyGP that the page numbering of these pages will not reflect the actual page number of this pdf "
   tempstring &= "as all the letters and all the results were joined from single pdf's with if the source was html will contain their own page numbers, or if the source "
   tempstring &= "was a a scanned file then there will be no page number at all."
   
   sections.Add(tempstring & "</Html>", sections.count)
   If sections.count Then                                                                  'if we have sections to compile into pdf's do so
      export_filename_and_path = modPrinting.Make_PDF_From_HTML_Pages(sections, const.orientation_portrait, ContentsPage, bPrintTableOfContents, Output_file, ProgressBar1)
   End If   
   
   x = 0
   final_pdfs_to_join.Add(export_filename_and_path, x)
   If sql_letters <> "" Then 
      Inc x  
      final_pdfs_to_join.Add(filename_for_all_the_letters, x)
   End If
   If sql_results <> "" Then   
      Inc x
      final_pdfs_to_join.Add(filename_for_all_the_results, x)
   Endif
   
   '  Print filename_for_all_the_letters
   ' Print export_filename_and_path
   ' Print modPrinting.Join_PDF(final_pdfs_to_join)
   FClinical.Editor_ShowPage_External("pdf file", "Partial Export", modPrinting.Join_PDF(final_pdfs_to_join))
   ProgressBar1.Visible = False  
   
End

Public Sub PDF_Prepare_works_sort_of_rough()
   '---------------------------------------------------------------------------------------------------
   'proof on concept
   'just thrown together by cutn paste for experiment  
   'the documents_included collection only has the pk for a couple of reasons
   '1) the drag command can only drag text (we have used str(documents.pk) or image
   '2) the user can drop documents at random on the list, ie. unsorted, and can't tell from
   '   the keys whether letter or documents so lvwIncludedDocuments_Refresh sorts this distinction out
   'In this routine we pulll back the collection from the db (inefficient, ordered by date (inefficient)
   'FIXME
   '-----------------------------------------------------------------------------------------------------
   
   Dim shtml As String
   Dim sections As New Collection
   Dim bPrintTableOfContents As Boolean = True   
   Dim bPrintCoversheet As Boolean = True  
   Dim ContentsPage As String
   Dim Output_file As String
   Dim patient As Collection = currentconsult!patient 
   Dim export_filename_and_path As String
   Dim sql_letters As String
   Dim sql_results As String
   Dim letter As Collection
   Dim Letters As Collection
   Dim result As Collection
   Dim results As Collection
   Dim document As Collection   
   Dim Letter_PDF_path As Collection   'the letter and the pdf path   
   Dim Result_PDF_path As Collection 
   Dim x As Integer
   Dim tempstring As String
   Dim Temp_dir As String
   Dim pro As Process
   Dim filename_for_all_the_letters As String
   Dim filename_for_all_the_results As String
   Dim final_pdfs_to_join As New String[]
   
   ProgressBar1.Visible = True   
   ContentsPage = modProgressNotes.CoverSheet_Construct_HTML(currentconsult).GetData()
   Output_file = patient!wholename                                                       'create filename and remove illegal characters
   Output_file = Replace(Output_file, " ", "_")
   Output_file = Replace(Output_file, "'", "")
   Output_file &= "FileId:" & Str(patient!fk_patient) & "-birthdate:" & Format(patient!birthdate, "dd-mm-yyyy") & ".pdf"
   sections.Add(ProgressNotes_HTML_Get(), sections.count)                                  'get only progress notes with checkbox checked
   
   'ask Ian a better way to do this When the document or result is dragged from the letter or results list
   'the resultant order in our list is random, we want them sorted by letters or results
   For Each document In Included_Documents                                                  'included_documents is effectively random keys                                           
      If Document!type = "letter" Then                                                      'get all documents which are letters
         sql_letters &= "pk_document=" & document!fk_document & " OR "                      'these will be ordered by dates                  
      End If   
      If Document!type = "result" Then                                                      'get all documents which are results
         sql_results &= "pk_document=" & document!fk_document & " OR "
      End If   
   Next
   If sql_letters <> "" Then                                                                'have letters? make a summary list
      sql_letters = "Select * from documents.vwdocuments where " & Left(sql_letters, Len(sql_letters) - 4) & " Order by date_created"
      Letters = modDBConnect.exec_query_collection(sql_letters)
      sections.Add(modProgressNotes.Letters_Summary_Construct_html(letters), sections.count)
   End If      
   If sql_results <> "" Then                                                               'have results ?make a summary list
      sql_results = "Select * from documents.vwdocuments where " & Left(sql_results, Len(sql_results) - 4) 
      If chkSortResultsByUserTag.value = True Then                                         'either ordered by like tags (not exact for actual loincs)
         sql_results &= "ORDER BY tag_user, date_created"
      Else
         sql_results &= " Order by date_created"                                           'or by date they were created
      End If   
      results = modDBConnect.exec_query_collection(sql_results)
      sections.Add(modProgressNotes.Results_Summary_Construct_HTML(Results), sections.count)
   Endif
   If sql_letters <> "" Then                                                              'Now, back to letters, if we have some
      Temp_dir = "/tmp/letters"                                                           'create temporary directory to join them all together in
      Try Mkdir "/tmp/letters"
      If Error Then
         If Error.Code = const.File_ioError_DirectoryExists Then
            pro = Shell "rm /tmp/letters/*.pdf" Wait For Write
            Close #pro
         Else
            Message.Info("An error occurred code:" & Error.code & ".\n\nCannot process the letters.")
            
         End If
      End If
      Letter_PDF_path = New String[]                                            'collection to hold the letters including paths
      '-------------------------------------------------------------------------
      'Later on down this routine, all letters which are pdf's have to be joined
      'to the pdf generated from the html for the coversheet, toc, etc etc
      'Letters are added last in our single pdf so:
      'Letter_PDF_path[0-n] = all the pdfs of the letters, which are either
      ''native' pdfs on our system or pdf's generated from html recieved.
      '-------------------------------------------------------------------------
      For Each letter In letters                                                        
         Tempstring = ""
         If x = 0 Then                                                                   'first page of joined letters = a heading (expand this)
            tempstring = "<HTML><body><DIV ALIGN=CENTRE><H3>LETTERS RECEIVED</H3></DIV</BODY></HTML>"
            Letter_PDF_path.Add(modPrinting.Make_PDF_From_Html(tempstring, const.orientation_portrait, "", False, Str(x) & ".tmp.pdf", Progressbar1, "/tmp/letters/"))
            Inc x 
         End If
         Select Case File.Ext(letter!source_file)                                        'then  check file endings
            Case "pdf"
               Print modFiles.Get("document_archiving_directory", letter!source_file)
               Letter_PDF_path.Add(modFiles.Get("document_archiving_directory", letter!source_file))
            Case Else                                                                    'if not a pdf must be hl7 (fixme could bomb if an image
               '------------------
               'must be a hl7 file
               '------------------
               tempstring &= letter!html
               Letter_PDF_path.Add(modPrinting.Make_PDF_From_Html(letter!html, const.orientation_portrait, "", False, Str(x) & ".tmp.pdf", Progressbar1, "/tmp/letters/"))
         End Select
         Inc x
      Next
   End If   
   Print export_filename_and_path
   If Not IsNull(Letter_PDF_path) Then
      filename_for_all_the_letters = modPrinting.Join_PDF(Letter_PDF_path, Temp() & ".pdf")
   End If
   If sql_results <> "" Then                                                              'Now, back to letters, if we have some
      Temp_dir = "/tmp/results"                                                           'create temporary directory to join them all together in
      Try Mkdir "/tmp/results"
      If Error Then
         If Error.Code = const.File_ioError_DirectoryExists Then
            pro = Shell "rm /tmp/results/*.pdf" Wait For Write
            Close #pro
         Else
            Message.Info("An error occurred code:" & Error.code & ".\n\nCannot process the results.")
         End If
      End If
      Result_PDF_path = New String[]                                                   'collection to hold the letters including paths
      '-------------------------------------------------------------------------
      'Later on down this routine, all letters which are pdf's have to be joined
      'to the pdf generated from the html for the coversheet, toc, etc etc
      'Letters are added last in our single pdf so:
      'Letter_PDF_path[0-n] = all the pdfs of the letters, which are either
      ''native' pdfs on our system or pdf's generated from html recieved.
      '-------------------------------------------------------------------------
      x = 0
      For Each result In results
         Tempstring = ""
         If x = 0 Then                                                                   'first page of joined letters = a heading (expand this)
            tempstring = "<HTML><body><DIV ALIGN=CENTRE><H3>RESULTS RECEIVED</H3></DIV</BODY></HTML>"
            Result_PDF_path.Add(modPrinting.Make_PDF_From_Html(tempstring, const.orientation_portrait, "", False, Str(x) & ".tmp.pdf", Progressbar1, "/tmp/results/"))
            Inc x 
         End If
         Select Case File.Ext(result!source_file)                                        'then  check file endings
            Case "pdf"
               Print modFiles.Get("document_archiving_directory", result!source_file)
               Result_PDF_path.Add(modFiles.Get("document_archiving_directory", result!source_file))
            Case Else                                                                    'if not a pdf must be hl7 (fixme could bomb if an image
               '------------------
               'must be a hl7 file
               '------------------
               tempstring &= result!html
               Result_PDF_path.Add(modPrinting.Make_PDF_From_Html(result!html, const.orientation_portrait, "", False, Str(x) & ".tmp.pdf", Progressbar1, "/tmp/results/"))
         End Select
         Inc x
      Next
   End If   
   If Not IsNull(Result_PDF_path) Then
      filename_for_all_the_results = modPrinting.Join_PDF(Result_PDF_path, Temp() & ".pdf")
   End If
   
   If sections.count Then                                                                  'if we have sections to compile into pdf's do so
      export_filename_and_path = modPrinting.Make_PDF_From_HTML_Pages(sections, const.orientation_portrait, ContentsPage, bPrintTableOfContents, Output_file, ProgressBar1)
   End If   
   
   x = 0
   final_pdfs_to_join.Add(export_filename_and_path)
   If sql_letters <> "" Then 
      Inc x  
      final_pdfs_to_join.Add(filename_for_all_the_letters)
   End If
   If sql_results <> "" Then   
      Inc x
      final_pdfs_to_join.Add(filename_for_all_the_results)
   Endif
   
   '  Print filename_for_all_the_letters
   ' Print export_filename_and_path
   ' Print modPrinting.Join_PDF(final_pdfs_to_join)
   FClinical.Editor_ShowPage_External("pdf file", "Partial Export", modPrinting.Join_PDF(final_pdfs_to_join))
   ProgressBar1.Visible = False  
   
End

Public Sub Form_Close()
   
   Settings_Save 
   
End

Public Sub Settings_Save()
   
   Settings["FExportPartial/HSplit_Main.Layout"] = HSplit_Main.Layout
   Settings["FExportPartial/Help_zoom"] = Form_Help.WebView1.Zoom
   
End

Private Sub Settings_Load()
   
   HSplit_Main.Layout = Settings["FExportPartial/HSplit_Main", modUtilGUI.HSplit([1, 1])] 
   Try Form_Help.WebView1.Zoom = Settings["FExportPartial/Help_zoom"] 
   
End

Public Sub New_Entry()
   
   Reset_Gui
   
End

Public Sub Reset_Gui()
   ' 
   
   Notes_Checkboxes_Reset(False)
   lvwIncludedDocuments.Clear
   Included_Documents = New Collection
   
End

Public Sub Reload()
   
   Dim note As Collection
   
   For Each note In currentconsult!progress_notes
      '     ProgressNoteRow = New CProgressNoteSelect(VBox_ProgressNotes, note)
   Next 
   
End

Public Sub lvwIncludedDocuments_Drop()
   '---------------------------------------------------------------------
   'Something is being dropped on the included documents list
   'We will (at some stage) accept stuff which is a document or a graph
   'at moment I'm only allowing a document from documents (ie path or
   'letter/scanned document
   'Drag.source = the control this is coming from, but
   'is a 'control', not for example a columnview  so
   'have to test it as below
   '---------------------------------------------------------------------
   
   Dim cv As ColumnView                'the 'source' control if columnview
   Dim Inclusion As Collection
   Dim select_mode As Integer
   Dim x As Integer
   
   'if selection mode = 1  = single document is highlighted
   If Drag.Source Is Columnview Then              'a result or letter ie document
      cv = Drag.Source
      cv.MoveCurrent()
      Select_mode = cv.mode
      If cv.mode = 1 Then
         Inclusion = New Collection
         Inclusion!fk_document = Drag.data
         If Not Inclusion_In_List(Inclusion) Then
            Included_Documents.Add(Inclusion, lvwIncludedDocuments.count)
         End If
      Else
         cv.MoveFirst()
         For x = 0 To cv.count - 1
            If cv.Item.Selected = True Then
               inclusion = New Collection
               Inclusion!fk_document = cv.Item.Key 'the key of the document
               If Not Inclusion_In_List(Inclusion) Then
                  Included_Documents.Add(Inclusion, Included_Documents.count)
               End If
            Endif
            cv.MoveNext()
         Next
      End If
      cv.UnselectAll()
   Else
      '---------------------------------
      'Must be a graph which was dropped
      '---------------------------------
      ' Included_Documents!type = "graph"
      'Included_Documentsa!filename = Drag.Source.Tag!fname
      '  sString = "graph of something"
      'lvwIncludedDocumentss.add(lvwIncludedDocumentss.count, sSTring)
   End If
   lvwIncludedDocuments_Refresh(Included_Documents)
   
End

Public Sub Inclusion_In_List(inclusion As Collection) As Boolean
   '-------------------------------------------------------------------
   'Checks if an included document is in the list returns true if it is
   'Inclusions_EditArea is count 0 based
   'May at later date not just include documents.
   '-------------------------------------------------------------------
   
   Dim I As Collection
   
   If Included_Documents.count = 0 Then Return False
   For Each I In Included_Documents
      If I!fk_document = Inclusion!fk_document Then
         Return True
      End If
   Next
   Return False
   
End

Public Sub lvwIncludedDocuments_Refresh(Inclusions As Collection)
   '---------------------------------------------------------------------
   'Refresh the inclusions list for the current document in the edit area
   'ie. this is the list next to the letter text, not the one
   'underneath which is for thos letters already printed
   'Called by lvwIncludedDocuments_Drop: Inclusions_EditArea collection
   '           Referral_Edit:Inclusions_Referral_This_Consult collection
   '---------------------------------------------------------------------
   
   Dim inclusion As Collection
   Dim sString As String
   Dim document As Collection
   
   lvwIncludedDocuments.Clear()
   For Each Inclusion In Inclusions
      Try Document = currentconsult!results_received[inclusion!fk_document]         '? a result??
      If IsNull(document) Then                                                      'it wasn't a result
         Try Document = currentconsult!letters_received[inclusion!fk_document]      '? a letter ??
         If Not IsNull(document) Then
            inclusion!type = "letter"
         Endif
      Else
         inclusion!type = "result"
         
      End If
      sString = Format(Document!date_created, "dd/mm/yyyy") & " " & Document!tag_user
      lvwIncludedDocuments.add(lvwIncludedDocuments.count, sSTring)
   Next
   lblDocuments.text = "Included Documents (" & Str(lvwIncludedDocuments.Count) & ")"
   Print Included_Documents
   
End

Public Sub Mini_Help() As String
   
   Return ""
   
End

Public Sub chkSelectAllNotes_Click()
   
   Notes_Checkboxes_Reset(True)
   
End

Public Sub Notes_Checkboxes_Reset(bFlag As Boolean)
   '---------------------------------------------------------
   'Called either when clearing the form 
   'of if user has decided to select or  unselect all notes   
   'by clicking on the 'Select All Notes' under the notes list
   '----------------------------------------------------------
   
   Dim hb As HBox
   Dim hctrl As Control
   Dim cb As CheckBox
   Dim vb As VBox
   Dim bCheckboxFound As Boolean
   
   For Each hctrl In Form_NotesEditor.lcNotes.Children
      If hctrl Is Hbox Then
         hb = hctrl   
         For Each hctrl In hb.Children
            If hctrl Is Vbox Then
               vb = hctrl 
               For Each hctrl In vb.Children
                  If hctrl Is CheckBox Then
                     cb = hctrl   
                     cb.value = bFlag 
                     Break
                     bCheckboxFound = True   
                  End If   
               Next
            Endif
            If bCheckboxFound Then Break
         Next
      Endif
      If bCheckboxFound Then Break
   Next
   
End

Public Function ProgressNotes_HTML_Get() As String
   '---------------------------------------------------------------
   'Returns the html of all the progress notes user wants to export
   '---------------------------------------------------------------
   
   Dim hb As HBox
   Dim vb As VBox
   Dim hctrl As Control
   Dim tl As TextLabel
   Dim notes As String
   Dim wbv As WebView
   Dim sTable As String 
   Dim sRowTemplate As String 
   Dim bHaveRow As Boolean
   Dim cb As CheckBox
   Dim hctrl1 As Control
   
   sRowTemplate = ""
   "<TR VALIGN=TOP>"
   "<TD WIDTH=15%"
   "%col1%<BR>"
   "</TD>"
   "<TD WIDTH=85%>"
   "%col2%<BR>"
   "</TD>"
   "</TR>"
   notes = "<HTML><BODY<DIV ALIGN=CENTER><H3>Progress Notes</H3><DIV>" 'This ensures the heading will be included in the table of contents
   For Each hctrl In Form_NotesEditor.lcNotes.Children
      bHaveRow = False  
      If hctrl Is Hbox Then
         hb = hctrl   
         For Each hctrl In hb.Children
            If hctrl Is Vbox Then
               vb = hctrl 
               For Each hctrl1 In vb.Children
                  If hctrl1 Is CheckBox Then
                     cb = hctrl1   
                     If cb.value = True Then 
                        bHaveRow = True    
                        Break
                     End If   
                  End If   
               Next
            Endif
            If bHaveRow Then 
               If hctrl Is TextLabel Then
                  sTable = "<TABLE width=100%>"
                  sTable &= sRowTemplate
                  tl = hctrl 
                  sTable = Replace(sTable, "%col1%", tl.Text)
               Endif
               If hctrl Is Vbox Then
                  VB = hctrl   
                  For Each hctrl1 In vb.Children
                     If hctrl1 Is WebView Then
                        wbv = hctrl1 
                        ' stable = Replace(stable, "%col2%", modUtil.Fix_HTML(wbv.html, []))
                        stable = Replace(stable, "%col2%", wbv.html)
                        notes &= stable & "</TABLE>"
                        Break
                     Endif
                  Next
               Endif
            End If   
            'If bHaveRow Then Break
         Next
      Endif
   Next   'fixme clean up the abysmal html
   
   Print notes
   Return notes
   
End
