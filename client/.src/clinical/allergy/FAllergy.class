' Gambas class file

' Copyright (C) 2008-2014 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' --------------------------------------------------------------------
' PURPOSE   A module to record allergies/sensitivities/reactions
'           The term allergy here is a misnomer and refers to both FIXME
' TODO      Check accuracy
'           Implement help and delete
'           Check save works for previously created allergies
'           Implement search on generics alone
'           Write somethingin the progress notes
'----------------------------------------------------------------------

Private currentconsult As CConsult
Private bExit As Boolean
Private bKeyValid As Boolean
'The keys for each allergy
Private fk_code As String
Private fk_coding_system As Integer
Private fk_consult As Integer 
Private fk_allergysensitivity As Integer
Private fk_brand As String    'if not null the key to drugs.brands
Private fk_product As String 'if not null the key to drugs.products
Private fk_progressnote As Integer
Private atccode As String
Private brands As Collection
Private generics As Collection 
Private obs As Observer
Private Form_Terms As FCodedTermSelector
Private iCodingSystem As Integer  
Private currentTerm As Collection
Private SpellChecker As ClskSpell
Private timer_count As Integer
Private bGenericSearch As Boolean
Private drugs As Collection
Private Allergies As Collection 
Private iReactionType As Integer = const.ReactionType_Allergy
Private sSpecificity As String    'g=generic, b=brand c=class
Private Reaction_Types As String[]
Private ReferenceHboxForTopListView As Hbox               'used if split moves to reposition columnview
Private cvwAllergiesSensitivites_key As Integer
Static Private form_allergy As FAllergy

Static Public Sub Allergies_Reload_External()
   '-----------------------------------------------------------
   'Called from FClinical to reload allergies list if the  user
   'has eg made patient not allergic by the quick popup menu
   '-----------------------------------------------------------   
   
   form_allergy.Reload() 
   
End
'Public Sub Init(cons As CConsult, ac As CConsult)

Public Sub Init(cons As CConsult)
   '--------------------------------
   'Do all the initialization things
   '--------------------------------
   
   form_allergy = Me  
   Try Settings_Load()
   currentconsult = cons
   lblmeasure.text = " Authority Approval No.  "                'resize edit area labels, keep size consistant across forms - this from script is the widest
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblMeasure)
   modEditAreaHelpers.Resize_label(lblNoKnownAllergies, lblMeasure)
   With Form_Terms = New FCodedTermSelector(Me)
      .Ignore = True
      .Visible = False   
      .Height = 200    
      .Timer1.Enabled = False 
   End With
   obs = New Observer(Form_Terms.columnview1) As "cvwTerms"
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teForSpelling
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teForSpelling
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   With cvwAllergiesSensitivites
      .Columns.count = 5
      .Columns[0].text = "ACT Class or Allergen"
      .Columns[1].text = "Specificity"
      .Columns[1].width = 200
      .Columns[2].text = "Type"
      .Columns[3].text = "Details"
      .Columns[4].text = "Confirmed"
   End With
   Reaction_Types = New String[3]
   Reaction_Types[1] = "Allergy"
   Reaction_Types[2] = "Sensitivity"
   Reload()
   
End

Public Sub Save()
   
   '-------------------------------------------------------------
   'Save the allergy which At a minimum must have either
   '1) An allergen eg Bee or Crustacean
   '  or
   '2) A drug, a drug it must must have an ATCcode
   '         or
   'be 'nil known' i.e chkNilKnown.value = True
   'Plus: description Of the reaction optionally coded
   '  Clin_allergies.allergies:
   '   (pk serial primary key,
   '   fk_consult integer Not Null,
   '   fk_brand uuid Default Null, 
   '   fk_product uuid Default Null,
   '   allergen text default null, 
   '   specificity char(1) default null, 
   '   details text Not Null,
   '   fk_lu_reaction_type integer Not Null,
   '   fk_coding_system integer,
   '   fk_code text default null, 
   '   confirmed boolean Default True, 
   '   deleted boolean Default False, 
   '   date_reaction text default null
   '   fk_progressnote integer NOT NULL, -- The associated progress note summary Of this allergy - at least Of the latest Time it was accessed
   '   nil_allergies_sensitivities boolean Default False,
   '---------------------------------------------------------------
   
   Dim allergy As CRow
   Dim progressnote As CRow
   
   FClinical.Enable_Save_Button(False)            'stop clicking twice FIXME does not work
   If Vbox_EditArea_Outer.Padding = 0 Then        'The main allergy input area
      If HBox_EditArea_NoKnownAllergies.padding = 0 Then   'just the Hbox around the no known allergies checkbox
         Goto Enable_Save   
      End If
   End If   
   If Not Valid_Allergy_Or_Sensitivity() Then Goto Enable_Save   
   Inc Application.Busy
   allergy = New CRow
   If fk_allergysensitivity Then
      allergy.put_unchanged(fk_allergysensitivity, "fk_allergy")
   Endif
   If fk_consult = 0 Then
      allergy!fk_consult = currentconsult.GetPK()
   Else
      allergy!fk_consult = fk_consult
   Endif 
   If chkNilKnown.value = False Then 
      If Not IsNull(fk_brand) And If fk_brand <> "" Then
         allergy!fk_brand = fk_brand
      Else
         allergy!fk_brand = Null
      Endif
      If fk_product <> "" Then
         allergy!fk_product = fk_product  
      Else
         allergy!fk_brand = Null
         allergy!fk_product = Null
      Endif
      If Trim(txtAllergen.text) <> "" Then 
         allergy!allergen = modUtil.StripExtraBlanks(txtAllergen.text)
         allergy!specificity = Null 
      Else
         allergy!allergen = Null    '
         allergy!specificity = sSpecificity 
      End If   
      allergy!details = Trim(txtDetails.text) 
      If fk_coding_system <> 0 Then
         allergy!fk_coding_system = fk_coding_system
         allergy!fk_code = fk_code       'string value
      Else
         allergy!fk_coding_system = 0 'integer can't be null, could be removing coding system
         allergy!fk_code = ""
      Endif
      If rbConfirmedYes.Value = True Then
         allergy!confirmed = True
      Else
         allergy!confirmed = False  
      Endif
      allergy!fk_lu_reaction_type = iReactionType
      allergy!date_reaction = modUtil.StripExtraBlanks(txtDate.text)
   Else
      allergy!nil_allergies_sensitivities = True
   End If
   '--------------------------------------------------------------------------------------
   'If the progress note was written on today, we can edit it, otherwise, create a new one
   '--------------------------------------------------------------------------------------
   ProgressNote = New CRow 
   If fk_progressnote And txtDateEntered.text = Format(Now, "dd/mm/yyyy") Then  'if originally entered on today
      ProgressNote.put_unchanged(fk_progressnote, "fk_progressnote")            'am editing todays progress note
      ProgressNote!fk_audit_action = const.cAuditAction_Insert                  'is an insert
   Else     
      ProgressNote!fk_audit_action = const.cAuditAction_Edit
   End If   
   ProgressNote!fk_consult = currentconsult.GetPK()
   ProgressNote!notes = Progress_Notes_Create()
   ProgressNote!fk_section = const.cSection_allergies
   '  ProgressNote!fk_code = fk_code  FIXME Fix THE VWPROGRESSNOTES And UNCOMMENT THIS Line
   ProgressNote!problem = "Allergies"
   
   ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
   allergy!fk_progressnote = progressnote!fk_progressnote
   allergy.Save("clin_allergies.allergies", "fk_allergy")
   modDBConnect.CommitTrans()
   Refresh_FClinical() 
   Try FPrescriptions.Allergies_Refresh()
   Reload()
   Goto Enable_Save
   
   ' 
Enable_Save:
   
   FClinical.Enable_Save_Button(True)
   Dec Application.Busy
   
End

Public Sub Refresh_FClinical()
   
   FClinical.Refresh_Section(const.cSection_Allergies)    'refresh lists on main screen FClinical
   FClinical.Refresh_AllPreviousNotes() 
   Try FClinical.Refresh_Section(const.cSection_HealthSummary)
   
End

Public Sub Allergy_Or_Sensitivity_New()
   
   Dim sMsg As String
   
   If chkNilKnown.value = True Then
      sMsg = "You have elected to add an allergy.\n\n"
      sMsg = "Delete existing status: Nil Known Allergies or Sensitivites?"
      If Message.Question(sMsg, "Yes", "No") = 1 Then
         Allergy_Or_Sensitivity_Delete
         Allergy_Or_Sensitivity_New   're-enter the routine
      End If
   Endif
   cvwAllergiesSensitivites.UnselectAll
   chkNilKnown.value = False   
   EditArea_Clear()
   Reset_Keys() 
   Vbox_EditArea.Enabled = True  
   HBox_NoKnownAllergies.enabled = True
   chkNilKnown.value = False   
   txtDateEntered.text = Format(Now, "dd/mm/yyyy") ' not editable
   txtGeneric.SetFocus()
   
End

Public Sub Allergy_Or_Sensitivity_Edit()
   
   If allergies[cvwAllergiesSensitivites_key]!nil_allergies_sensitivities = False Then
      Vbox_EditArea.Enabled = True
      txtDate.SetFocus()
   Else
      HBox_NoKnownAllergies.enabled = True
   End If   
   
End

Public Sub Allergy_Or_Sensitivity_Delete()
   '------------------------------------------------------------------
   'Deletes an allergy
   'If this allergy was entered another consultation, enforce an audit
   'Indicate the change in the progress notes and update the
   'main task bar in FClinical
   '------------------------------------------------------------------

   Dim allergy As Collection   'ease of typing.
   Dim audit_notes As String
   
   If Message.Question("Delete current allergy?", "Yes", "No") = 2 Then Return
   cvwAllergiesSensitivites.MoveCurrent()
   allergy = allergies[cvwAllergiesSensitivites.Item.key]
   audit_notes = Replace(Progress_Notes_Create(), "edited", "")
   If allergy!fk_consult <> currentconsult.GetPK() Then                                              'if allergy was not deleted this consult
      Print allergy!notes  
      allergy!notes = "<strike><P><FONT COLOR='#b3b3b3'>" & allergy!notes & "</strike></P>"
      ' allergy!notes = Replace$(allergy!notes, "<TABLE", "<TABLE BGCOLOR='#CFCFCF' ")                 'now, mark this allergy as having been deleted by the user in the notes as part of audit trail
      'allergy!notes = Replace$(allergy!notes, "<small>", "<small><strike>", gb.IgnoreCase)
      ' allergy!notes = Replace$(allergy!notes, "</small>", "</strike></small>", gb.IgnoreCase)
      ' allergy!notes = Replace(allergy!notes, "</TABLE>", "</TABLE><small><B><I>Audit note:</B> this allergy was deleted by " & modDBConnect.currentUser!wholename & " on " & Format(Now, "dd/mm/yyyy") & ". For the explanation see the audit trail on the date.</I></small>")
      allergy!notes &= "<small><B><I>Audit note:</B> this allergy was deleted by " & modDBConnect.currentUser!wholename & " on " & Format(Now, "dd/mm/yyyy") & ". For the explanation see the audit trail on the date.</I></small>"
      Print allergy!notes  
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": fk_progressnote, "notes": allergy!notes])   'and save this progress note
      modDBConnect.update("clin_allergies.allergies", Null, ["pk": fk_allergysensitivity, "deleted": True])      'and delete from the backend.
      If modAudit.MakeAudit(currentconsult, "mark deleted", "clin_allergies.allergies", fk_allergysensitivity, const.cSection_allergies, audit_notes) Then
         modDBConnect.CommitTrans()
      Else
         modDBConnect.RollBack
      End If 
   Else                                                                                                         'the allergy was inserted this consultation
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": fk_progressnote, "deleted": True])         'just delete the progress note associated with it.
      modDBConnect.update("clin_allergies.allergies", Null, ["pk": fk_allergysensitivity, "deleted": True])      'and delete from the backend.
      modDBConnect.CommitTrans()
   End If 
   If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then
      FClinical.Refresh_Section(const.cSection_Allergies) 'retrieve the data from the backend again.
      FClinical.Refresh_AllPreviousNotes()
      FClinical.Refresh_Section(const.cSection_HealthSummary)
   End If 
   
   Reload()
   
End

Public Sub Allergy_Or_Sensitivity_Display()
   '-----------------------------------------
   'Display the currently highlighted allergy
   '------------------------------------------
   
   Dim allergy As Collection
   
   EditArea_Clear()
   HBox_NoKnownAllergies.Enabled = False  
   cvwAllergiesSensitivites.MoveCurrent()
   allergy = allergies[cvwAllergiesSensitivites_key]
   If allergy!nil_allergies_sensitivities = True Then   
      bexit = True    
      chkNilKnown.value = allergy!nil_allergies_sensitivities
      bexit = False   
   Else
      EditArea_Clear          
   End If    
   '------------------------
   're-allocate all the keys
   '------------------------
   Reset_Keys                                                         
   If Not IsNull(allergy!fk_coding_system) Then fk_coding_system = allergy!fk_coding_system
   If Not IsNull(allergy!fk_code) Then fk_code = allergy!fk_code
   fk_consult = allergy!fk_consult  
   Try fk_brand = allergy!fk_brand
   Try fk_product = allergy!fk_product
   fk_progressnote = allergy!fk_progressnote
   fk_allergysensitivity = allergy!pk
   '----------------------------------------------
   'Now fill the gui - textboxes, radiobuttons etc
   '----------------------------------------------
   bExit = True
   txtDateEntered.text = Format(allergy!consult_date, "dd/mm/yyyy") 'not editable
   txtDate.text = allergy!date_reaction
   Try txtBrand.text = allergy!brand
   Try txtGeneric.text = allergy!generic
   Try txtAllergen.text = allergy!allergen 
   Try txtATCName.text = allergy!product_atcname
   atccode = allergy!product_atccode
   If Not IsNull(allergy!term) Then 
      txtCodedTerm.text = allergy!term & " (" & allergy!fk_code & ")"
   End If   
   Try txtATCClass.text = allergy!class_name
   If allergy!confirmed Then
      rbConfirmedYes.value = True
   Else
      rbConfirmedNo.value = True
   Endif
   If allergy!fk_lu_reaction_type = const.ReactionType_Allergy Then
      rbReactionAllergy.value = True
      iReactionType = const.ReactionType_Allergy
   Else
      rbReactionSensitivity.value = True
      iReactionType = const.ReactionType_Sensitivity
   Endif
   Hbox_Specificity.Enabled = True
   Select Case allergy!specificity
      Case Null
         Hbox_Specificity.Enabled = False 
      Case "c"
         rbSpecificityClass.value = True
      Case "g"
         rbSpecificityGeneric.Value = True
      Case "b"
         rbSpecificityBrand.Value = True  
   End Select
   txtDetails.text = allergy!details
   txtDate.SetFocus()
   bExit = False  
   
End

Public Function Progress_Notes_Create() As String
   '-----------------------------------------------------------------------
   'Creates html for the allergy just noted to insert in the progress notes
   '-----------------------------------------------------------------------  
   
   Dim pn As String
   
   If chkNilKnown.value = False Then
      
      If txtDateEntered.text = Format(Now, "dd/mm/yyyy") Then       'the progress note is created today
         pn = "<B>%reaction_type% noted </B>"
      Else
         pn = "<B>%reaction_type% details edited </B>"     'otherwise this is an edit
      End If   
      pn = Replace(pn, "%reaction_type%", Reaction_Types[iReactionType]) & "<BR>"
      Select Case Trim(txtAllergen.text)
         Case ""
            pn &= "<B>Class</B>: " & Trim(txtATCClass.text) & "<BR>"
            pn &= "<B>Scope</B>: "
            Select Case sSpecificity
               Case "c"
                  pn &= "class reaction"
               Case "g"
                  pn &= "reaction to the generic only"
               Case "b"
                  pn &= "reaction to the brand only"
            End Select
            If rbConfirmedYes.value = True Then
               pn &= " - Confirmed"
            Else
               pn &= " - Not confirmed"
            Endif
            pn &= "<BR>"
            pn &= "<B>Drug: </B>" & Trim(txtGeneric.text) & " " & "(" & Trim(txtBrand.text) & ")<BR>"
            pn = Replace(pn, "()", "")
            pn &= "<B>Details: </B>" & Trim(txtDetails.text) & "<BR>"
            If fk_code <> "" Then
               pn &= "<B>Coding: </B>" & Trim(txtCodedTerm.text) & "<BR>"
            Endif
         Case Else
            'this is a non-drug allergen
            pn &= "<B>Non Drug:</B>" & Trim(txtAllergen.text) & "<BR>"
            pn &= "<B>Details: </B>" & Trim(txtDetails.text) & "<BR>"
            If fk_code <> "" Then
               pn &= "<B>Coding: </B>" & Trim(txtCodedTerm.text) & "<BR>"
            Endif
      End Select 
      
   Else
      pn = "Allergies: patient questioned and reports nil known."
   End If   
   Print pn
   Return pn 
   
End

Public Sub Reload()
   '------------------------------------------------------------------------------------
   'Reload data from backend - display any existing allergies or sensitivities
   'columnview key is integer 0 based so as to use   modUtil.Columnview_Columns_Set_Size
   '------------------------------------------------------------------------------------ 
   
   Dim allergy As Collection
   Dim specificity As String
   Dim x As Integer
   
   EditArea_Clear()                                      'clear the input area
   bExit = True
   chkNilKnown.value = False
   bExit = False  
   currentconsult.Refresh("allergies")                   'remove key from cache > later forces a reload
   allergies = modUtil.Copy_Collection_Keyed_Sequentially(currentconsult!allergies)                 'reload latest list from the backend
   cvwAllergiesSensitivites.Clear()
   For Each allergy In allergies
      If allergy!nil_allergies_sensitivities = True Then
         cvwAllergiesSensitivites.Columns.count = 1
         cvwAllergiesSensitivites.Add(x, 0)
         cvwAllergiesSensitivites[x][0] = "Nil Known Allergies or Sensitivites"
      Else
         cvwAllergiesSensitivites.Add(x, 0)
         ' If IsNull(allergy!date_reaction) Then
         '    cvwAllergiesSensitivites[x][0] = " Date?"
         ' Else
         '    cvwAllergiesSensitivites[x][0] = allergy!date_reaction 'could be free text
         ' Endif
         If allergy!specificity = "g" Then 
            cvwAllergiesSensitivites[x][0] = allergy!generic
         Else
            cvwAllergiesSensitivites[x][0] = Trim(allergy!class_name & " " & allergy!allergen) 'will be only one
         Endif
         Select Case allergy!specificity
            Case "c"
               specificity = "class"
            Case "g"
               specificity = "generic"
            Case "b"
               specificity = "brand"
         End Select
         cvwAllergiesSensitivites[x][1] = "  " & specificity & " reaction  "
         cvwAllergiesSensitivites[x][2] = "  " & allergy!reaction_type & "  "
         cvwAllergiesSensitivites[x][3] = "  " & allergy!details & "  "
         If allergy!confirmed Then
            cvwAllergiesSensitivites[x][4] = "  Confirmed  "
         Else
            cvwAllergiesSensitivites[x][4] = "  Not Confirmed  "
         Endif
         Inc x
      Endif
   Next
   
   If cvwAllergiesSensitivites.count Then
      modUtil.Columnview_Columns_Set_Size(cvwAllergiesSensitivites, lblmeasure)
      With cvwAllergiesSensitivites
         .MoveFirst
         .SetFocus
         .Item.Selected = True  
      End With
   Endif
   ' lblDate.SetFocus() 'to anything
Catch
   Return 'bad.... bug in allergies module had put in 2 * same allergy FIXME robert bartley  

End

Public Sub form_Close()
   
   timer1_Stop()
   
End

Public Sub Settings_Save()
   
   Settings["FAllergy/VSplit_Allergies.Layout"] = VSplit_Allergies.layout
   
End

Public Sub Settings_Load()
   
   VSplit_Allergies.layout = Settings["FAllergy/VSplit_Allergies.Layout", modUtil.VSplit([244, 319, 284])]
   cvwAllergiesSensitivites.Font = Font[Settings["FAllergy/cvwAllergies.font", "Arial,9"]]
   
End

Public Sub EditArea_Clear()
   '-------------------------------------------------------------
   'Clear the editing area, re-set current Allergy or sensitivity
   '-------------------------------------------------------------
   
   Vbox_EditArea.Enabled = False 
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   bExit = True                                      'stop re-entrance into change routines
   listview1.Visible = False                         'remove popup list if showing
   listview1.Clear()
   listview1.Visible = False
   sSpecificity = const.ReactionSpecificity_Class
   rbSpecificityClass.value = True
   iReactionType = const.ReactionType_Allergy
   rbReactionAllergy.value = True
   rbConfirmedYes.Value = True 
   bExit = False
   HBox_EditArea_NoKnownAllergies.padding = 0
   Hbox_Specificity.Enabled = True
   EditArea_Notify_DataChange(False)
   
End

Public Sub Reset_Keys()
   
   fk_code = ""      '
   fk_coding_system = 0
   fk_allergysensitivity = 0
   fk_consult = 0
   fk_brand = Null
   fk_product = ""
   fk_progressnote = 0
   iReactionType = const.ReactionType_Allergy
   sSpecificity = const.ReactionSpecificity_Class
   
End

Public Sub listview1_KeyPress()
   
   If Key.code = Key.return Then
      listview1_DblClick()
   End If
   
End

Public Sub listview1_DblClick()
   
   Last.MoveCurrent
   Select Case Last.tag.tag
      Case "brand"
         Brand_Select()
      Case "generic"
         Generic_Select(generics[listview1.Item.key])
   End Select
   listview1.Visible = False
   
Catch
   listview1.Visible = False
   Return  
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   
   If flag = True Then 
      Vbox_EditArea_Outer.Padding = 1
   Else
      VBox_EditArea_outer.Padding = 0
   Endif
   
End

Public Function EditArea_txtBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   '----------------------------------------------------------
   'PURPOSE       Restrict key presses for validation purposes
   'HOW IT WORKS  see routines names
   'actually not implemented here FIXME
   '-----------------------------------------------------------
   
   Select Case Tag
      Case "brand", "allergen", "coded term", "free text reaction", "generic", "date reaction", "coded term", "atc name", "details"
         bKeyValid = True
   End Select
   Return bKeyValid
   
End

Public Sub Timer1_Timer()
   '------------------------------------------------------------------------------
   'If the timer is running, user is typing in either the brand or generic textbox
   '------------------------------------------------------------------------------   
   
   If bExit Then Return
   Inc timer_count
   If timer_count > 3 Then
      If bGenericSearch Then
         Generics_Get()
      Else
         Brands_Get()
      End If  
   Endif
   
End

Public Sub Brand_Select()
   
   Dim R As Result
   
   listview1.MoveCurrent()
   bExit = True
   txtBrand.text = listview1.Item.Text
   atccode = brands[listview1.Item.key]!atccode
   R = modAllergyDBI.ATC_Code_Get_Class(Left(atccode, 4))
   Try txtATCClass.text = R!atcname
   txtGeneric.text = brands[listview1.Item.key]!generic
   txtATCName.text = brands[listview1.Item.key]!atcname
   bExit = False  
   fk_brand = brands[listview1.Item.key]!pk
   fk_product = brands[listview1.Item.key]!fk_product
   ListView1.Visible = False
   txtCodedTerm.SetFocus()
Catch
   bexit = False
   Return
   
End

Private Sub Brands_Get()
   
   Dim brand As Collection 
   
   Timer1.Stop
   With listview1
      .Clear()
      .Visible = False 
   End With
   brands = modPrescribingDBI.Brands_Get_Basic(Trim(txtBrand.text))
   If brands.count Then    
      For Each brand In brands
         listview1.Add(brand!pk, brand!brand & " " & brand!display_strength & " " & brand!form)
      Next
      With listview1
         .tag = txtBrand
         .Visible = True
      End With 
   End If   
   
End

Public Sub Generic_Select(generic As Collection)
   
   txtGeneric.text = generic!generic
   atccode = generic!atccode
   txtATCClass.text = generic!class_name  
   fk_product = generic!fk_product   
   txtCodedTerm.SetFocus
   
End

Private Sub Generics_Get()
   '----------------------------------------
   'Gets list of generics, classes and codes
   '----------------------------------------   
   
   Dim Generic As Collection
   
   Timer1.Stop
   With listview1
      .Clear()
      .Visible = False
   End With
   generics = modPrescribingDBI.Generics_Get_Class(Trim(txtGeneric.text))
   For Each generic In generics
      listview1.Add(listview1.count, generic!generic & " - " & generic!class_name)
   Next
   With listview1
      .Visible = True
      .tag = txtGeneric
   End With
Catch
   Message.info("An error occurred with generic allergy allocation - please report")  
   
End

Public Function Valid_Allergy_Or_Sensitivity() As Boolean
   '-------------------------------------------------------------------
   'Returns true if the information in the edit area is a valid allergy
   'If the 'nil known' checkbox is not checked
   'then at a minimum must have either
   '1) An allergen eg Bee or Crustacean
   '  or
   '2) A drug, hence must have an ATCcode
   '    plus
   '    description Of the reaction optionally coded
   '    plus
   '    date of reaction
   '------------------------------------------------------------------- 
   
   Dim sMsg As String
   
   If chkNilKnown.value = True Then Return True
   If txtBrand.text <> "" Then 
      If atccode = "" Then
         Message.Info("Please select a valid generic or brand.")
         txtBrand.Background = Color.rgb(95, 255, 175)
         txtBrand.SetFocus()
         Return 
      Endif
   End If   
   If txtGeneric.text <> "" Then
      If atccode = "" Then
         Message.Info("Please select a valid generic or brand.")
         txtGeneric.Background = Color.rgb(95, 255, 175)
         txtGeneric.SetFocus()
         Return 
      Endif
   Endif
   If Trim(txtCodedTerm.text) <> "" Then
      If fk_code = "" Then
         smsg = "You have entered text in the coded term field, but not selected a valid code.\n\n"
         "You should either remove this text or search again, selecting from the list." 
         Message.Title = "Invalid Coded Term"
         Message.Info(sMsg)
         txtCodedTerm.Background = Color.rgb(95, 255, 175)
         txtCodedTerm.SetFocus()
         Return
      End If 
   Else
      Message.title = "Coding drug allergies"
      sMsg = "Please enter a coded term for this drug reaction"
      Message.Info(sMsg)
      txtCodedTerm.Background = Color.rgb(95, 255, 175)
      txtCodedTerm.SetFocus()
      Return 
   End If   
   
   If atccode = "" Then       'user not entering a drug
      If Trim(txtAllergen.text) <> "" Then
         Goto Check_Have_Allergy_Details
      Else
         txtAllergen.Background = Color.rgb(95, 255, 175)
         txtAllergen.SetFocus
         Return
      Endif
   End If 
   
Check_Have_Allergy_Details:
   If Trim(txtDetails.text) = "" Then
      Message.Info("Please enter some details about the reaction for this allergen or drug.")
      txtDetails.Background = Color.rgb(95, 255, 175)
      txtDetails.setfocus()
      Return
   Endif
   Return True
   
End

Public Sub EditArea_TxtBox_GotFocus()
   
   Timer1.Enabled = False  
   Listview1.Visible = False
   Last.BackGround = Color.rgb(95, 255, 175)
   
End 

Public Sub EditArea_TextBox_Change()
   
   If bExit Then
      Return
   End If   
   Select Case Last.tag
      Case "allergen"
         If Trim(txtAllergen.text) <> "" Then
            'user entering an allergen - can't have drug stuff
            txtBrand.text = ""
            txtGeneric.text = ""
            txtATCClass.text = ""
            txtATCName.text = ""
            Hbox_Specificity.Enabled = False 
            fk_brand = Null
            fk_product = ""
            atccode = ""
            rbSpecificityHidden.value = True    'switch the other 3 off
         Else
            Hbox_Specificity.Enabled = True
            rbSpecificityClass.value = True  
         Endif
      Case "brand"
         If Trim(txtBrand.text) = "" Then 
            fk_brand = Null
         Else
            txtAllergen.text = "" 'should re-enter this routine
            
         End If   
      Case "generic"
         If Trim(txtBrand.text) <> "" Then 
            txtAllergen.text = ""
         Endif
      Case "atc name"
         If Trim(txtATCName.TEXT) = "" Then 
            atccode = ""
         Else
            txtAllergen.text = ""
         End If   
      Case "coded term"
         If Trim(txtCodedTerm.TEXT) = "" Then 
            fk_code = ""
            fk_coding_system = 0
         End If   
   End Select
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.White
   
End

Public Sub EditArea_TextBox_KeyRelease()
   
   If bExit Then Return 
   
   Select Case Last.tag
      Case "coded term"   
         Terms_Get()
      Case "brand"
         Timer1.Enabled = True
         timer_count = 0
         bGenericSearch = False  
      Case "generic"
         bGenericSearch = True
         Timer1.Enabled = True
         timer_count = 0
   End Select
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   bkeyvalid = EditArea_txtbox_ExcludeKeys(key.code, Last.tag)
   
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case key.Code
      Case key.Down
         If listview1.Visible And listview1.Count Then 
            listview1.SetFocus
            listview1.MoveFirst
            listview1.Item.Selected = True
            Return
         End If
         If Form_Terms.visible Then 
            With Form_Terms.columnview1
               .SetFocus
               .MoveFirst
               .Item.selected = True
            End With
            Return
         End If    
   End Select
Catch
   Return 

End

Public Sub Coded_Term_Select()
   '-------------------------------------------
   'User has chosen a term from popup listview1
   'Display this in the txtCodedTerm Textbox
   'Set currentProblem!fk_code to the pk_term
   '-------------------------------------------
   
   CurrentTerm = Form_Terms.Get_Term()
   '-----------------------------------------------------------------------
   'We allow free text in the health issue = past history problem
   'so, if user has typed something in there like ** very bad diabetes**
   '(bad example I know), then we keep this as the health issue but it
   'will be coded back to the appropriate icpc2+ term
   'However if they havn't typed anything in here, put the natural language
   'term in the txtConditon text box and the coded term in the coded textbox
   'e.g Diabetes;Type1 (T89002) or something similar
   '------------------------------------------------------------------------
   
   txtCodedTerm.text = CurrentTerm!term & " (" & CurrentTerm!code & ")"
   fk_code = CurrentTerm!code
   fk_coding_system = CurrentTerm!fk_coding_system
   
End

Public Sub cvwTerms_KeyPress()
   '------------------------------------------------------------------
   'Act only on the <ENTER> key display what is in list in the textbox
   'This event occurs of Form_Terms and is over-ridden by this observer
   '------------------------------------------------------------------
   
   If Key.code = Key.Return Then 
      ' Stop Event                    'stop event on Form_Terms 
      cvwTerms_DblClick()
   End If
   
End

Public Sub cvwTerms_DblClick()
   '-----------------------------------------------------------------
   'This is an observer event on  Form_Terms.ColumnView1 - see Init()
   '----------------------------------------------------------------
   
   Stop Event
   
   Coded_Term_Select() 
   Form_Terms.Visible = False 
   txtDetails.SetFocus()
   
End

Public Sub Terms_Get()
   '-------------------------------------------------------------------------------------
   'Gets list of diagnostic terms
   'Cannot set default if count is one because must  be able to add new occupations
   'can't remove the label because it needs to occupy space to keep textbox correct width
   '-------------------------------------------------------------------------------------
   
   If Trim(txtCodedTerm.text) = "" Then
      fk_code = ""
      fk_coding_system = 0
      Return
   End If
   Form_Terms.Set_SearchText(Trim(Last.text))
   Form_Terms.Get_Terms()
   
End

Public Sub EditArea_TextBox_Activate()
   
   Select Case Last.tag
      Case "allergen"
         If Trim(Last.text) = "" Then
            txtBrand.SetFocus()
         Else
            txtCodedTerm.SetFocus()
         Endif
      Case "date reaction"
         txtBrand.SetFocus()
      Case "brand"
         txtCodedTerm.SetFocus()
      Case "generic"
         txtCodedTerm.SetFocus()
      Case "coded term"
         txtDetails.SetFocus()
   End Select
   
End

Public Sub EditArea_RadioButtons_KeyPress()
   
   Select Case key.code
      Case key.tab, key.Return
         Select Case Last.tag
            Case 1
               If Last.value = False Then
                  rbReactionSensitivity.SetFocus()
               Else
                  rbConfirmedYes.SetFocus()
               Endif
            Case 2
               
         End Select
   End Select
   
End

Public Sub timer1_Stop()
   
   With Timer1
      .Stop
      .Enabled = False
   End With 
   
End

Public Sub Form_Leave()
   
   timer1_Stop()
   
End

Public Sub New_Entry()
   '------------------------------------------------------------------------------------------------------
   'This is called from the main toolbar in FClinical and here for consistant nomenclature between modules
   '------------------------------------------------------------------------------------------------------   
   
   Allergy_Or_Sensitivity_New()
   
End 

Public Sub Refresh()
   '--------------------------------
   'Called from toolbar in FClinical
   '--------------------------------  
   
   Reload() 
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   listview1.Visible = False  
   ReferenceHboxForTopListView = Last.Parent.parent
   Form_Terms.Visible = False 
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
      Case "coded term"
         With Form_Terms
            .top = Last.Parent.Parent.Top + Last.Parent.Height + Vsplit_Allergies.top + Me.Padding
            .width = txtCodedTerm.Width
            .Left = Last.Parent.Left + VBox_EditArea.padding + Me.Padding
            .Raise 
            .Visible = False  
            If Trim(Last.text) <> "" Then
               .Set_SearchText(Trim(Last.text))
            End If   
         End With    
      Case "brand", "generic"
         With listview1
            .top = Last.Parent.Parent.top + Last.Height
            .width = Last.Parent.width / 2
            .left = Last.Parent.Left + VBox_EditArea.padding
            .Raise()
         End With
   End Select
   
End

Public Sub rbAllergySensitivity_Click()
   
   If bExit Then Return 
   iReactionType = Last.tag
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_RadioButtons_Click()
   
   If bExit Then Return    
   EditArea_Notify_DataChange(True)
   
End

Public Sub cvwAllergiesSensitivites_Select()
   '-------------------------------------------------------------
   'User has clicked on the allergies list - display in edit area
   '-------------------------------------------------------------  
   
   cvwAllergiesSensitivites.MoveCurrent
   cvwAllergiesSensitivites_key = cvwAllergiesSensitivites.Item.Key
   Allergy_Or_Sensitivity_Display()
   
End

Public Sub cvwAllergiesSensitivites_Menu()
   
   If cvwAllergiesSensitivites.count Then
      mnuAllergiesSensitivities.Popup()
   Endif
   
End

Public Sub mnuAllergiesSensitivities_Click()
   
   Select Case Last.tag
      Case "edit"
         Allergy_Or_Sensitivity_Edit()
      Case "delete"
         Allergy_Or_Sensitivity_Delete()
      Case "font"
         modUtil.Columnview_SetFont(cvwAllergiesSensitivites, "FAllergy")
      Case "help"
         modUtil.NotImplemented("Help for allergies")
   End Select
Catch
   Return 
   
End

Public Sub rbSpecificity_Click()
   
   If Bexit Then Return
   sSpecificity = Last.tag
   EditArea_Notify_DataChange(True)
   
End

Public Sub Vsplit_Allergies_Resize()
   
   If listview1.Visible Then
      listview1.top = ReferenceHboxForTopListView.top + ReferenceHboxForTopListView.Height
   Endif
   If Form_Terms.Visible Then
      Form_Terms.top = ReferenceHboxForTopListView.top + ReferenceHboxForTopListView.Height
   Endif
   
End

Public Sub Form_Resize()
   
   Vsplit_Allergies_Resize()
   Form_Terms.width = txtCodedTerm.Width
   
End

Public Sub chkNilKnown_Click()
   '-----------------------------------------------
   'If use checks this checkbox they are indicating 
   'no known allergies or sensitivites
   '-----------------------------------------------
   
   Dim sMsg As String
   
   If bexit Then Return
   If Last.value = True Then      'no known allergies or sensitivites
      If cvwAllergiesSensitivites.count Then   'existing allergies/sensitivities, user must be making mistake or changing mind
         sMsg = "You have indicated the patient has 'No Known Allergies or sensitivites' but there are existing ones recorded.\n\n"
         "You should delete these before proceeding."
         bExit = True
         chkNilKnown.value = False
         bExit = False  
         Message.info(sMsg)
         Return
      End If 
      EditArea_Clear
      Reset_Keys
      Vbox_EditArea.Enabled = False
      HBox_EditArea_NoKnownAllergies.padding = 1
   Else
      Vbox_EditArea.Enabled = True  
      HBox_EditArea_NoKnownAllergies.padding = 0
   End If   
   
End
