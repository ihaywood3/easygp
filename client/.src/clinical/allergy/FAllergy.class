' Gambas class file

' Copyright (C) 2008-2012 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' --------------------------------------------------------------------
' PURPOSE   A module to record allergies/sensitivities/reactions
' TODO      Check accuracy
'           Implement help and delete
'           Check save works for previously created allergies
'----------------------------------------------------------------------

Private currentconsult As CConsult
Private bExit As Boolean
Private bKeyValid As Boolean
Private generics_to_atc As Collection
Private brands_to_atc As Collection
Private Terms As Collection
Private Term As Collection 
'The keys for each allergy
Private fk_code As String
Private fk_coding_system As Integer
Private fk_consult As Integer 
Private fk_allergy As Integer
Private fk_brand As String 
Private atccode As String
Private atccodes As Collection

Private brands As Collection
Private generics As Collection
Private obs As Observer
Private Form_Terms As FCodedTermSelector
Private sSearchLimit As Integer = 20 'default to only get 20 terms
Private iCodingSystem As Integer  
Private currentTerm As Collection
Private SpellChecker As ClskSpell
Private timer_count As Integer
Private bGenericSearch As Boolean
Private drugs As Collection
Private Allergies As Collection 
Private iReactionType As Integer = const.ReactionType_Allergy

Public Sub Init(cons As CConsult)
   '--------------------------------
   'Do all the initialization things
   '--------------------------------
   
   Try Settings_Load()
   currentconsult = cons  
   lblMeasure.text = "  Non Drug Allergies  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblMeasure)
   With Form_Terms = New FCodedTermSelector(Me)
      .Ignore = True
      .Visible = False   
      .Height = 200
   End With
   obs = New Observer(Form_Terms.columnview1) As "cvwTerms"
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teForSpelling
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teForSpelling
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   With cvwAllergies
      .Columns.count = 7
      .Columns[0].text = "Date Noted"
      .Columns[1].text = "Allergen"  'either drug or other substance
      .Columns[2].text = ""          'brand if a drug
      .Columns[3].text = "ACT Class"
      .Columns[4].text = "Type"
      .Columns[5].text = "Details"
      .Columns[6].text = "Confirmed"
   End With
   Reload()
   
End

Public Sub Save()
   
   '-------------------------------------------------------------
   'Save the allergy which At a minimum must have either
   '1) An allergen eg Bee or Crustacean
   '  or
   '2) A drug, a drug it must must have an ATCcode
   'Plus: description Of the reaction optionally coded
   '
   'clin_allergies.Allergies:
   '    pk serial primary key,
   '   fk_consult integer NOT NULL,
   '   fk_brand uuid, -- if not null key to drugs.brand table points to brand with which this allergy was noted
   '   allergen text, -- if not null then the substance that the person was allergic or sensitive to, eg could be bee or cedar
   '   generic_specific boolean, -- if true and the allergan was a drug then the reaction was generic specific not class specific...
   '   fk_lu_reaction integer NOT NULL, -- key to clin_allergies.lu_reaction which is a free text representation of the reaction
   '   fk_lu_reaction_type integer NOT NULL, -- foreign key to allergies.lu_reaction_type 1=allergy 2=sensitivity
   '   fk_coding_system integer, -- key to coding.lu_coding_system containing name of coding system   that this allergy is linked to
   '   fk_code text, -- the text of the code references coding.generic_terms.code
   '   confirmed boolean DEFAULT true, -- if true (the default) then the allergy has been confirmed
   '   deleted boolean DEFAULT false, -- If True Then this record Is Marked As Deleted
   '   atccode text,
   '   date_reaction text, -- the Date Of reaction, could be Date, could be Year, could be Null
   ' 
   
   '---------------------------------------------------------------
   
   Dim allergy As CRow
   Dim R As Result
   
   If Vbox_EditArea_Outer.Padding = 0 Then Return  
   If Not Valid_Allergy() Then Return 
   allergy = New CRow
   If fk_allergy Then
      allergy.put_unchanged(fk_allergy, "fk_allergy")
   Endif
   If fk_consult = 0 Then
      allergy!fk_consult = currentconsult.GetPK()
   Else
      allergy!fk_consult = fk_consult
   Endif 
   If fk_brand <> "" Then
      allergy!fk_brand = fk_brand
   Else
      allergy!fk_brand = Null
   Endif
   If Trim(txtAllergen.text) <> "" Then 
      allergy!allergen = modUtil.StripExtraBlanks(txtAllergen.text)
   Else
      allergy!allergen = Null 
   End If   
   If chkDrugSpecific.value = True Then
      allergy!generic_specific = True
   Else
      allergy!generic_specific = False 
   Endif
   allergy!fk_lu_reaction = modAllergyDBI.Reaction_save(modUtil.StripExtraBlanks(txtReaction.text))
   If fk_coding_system <> 0 Then
      allergy!fk_coding_system = fk_coding_system
      allergy!fk_code = fk_code       'string value
   Else
      allergy!fk_coding_system = 0 'integer can't be null, could be removing coding system
      allergy!fk_code = ""
   Endif
   If rbConfirmedYes.Value = True Then
      allergy!confirmed = True
   Else
      allergy!confirmed = False  
   Endif
   allergy!fk_lu_reaction_type = iReactionType
   allergy!atccode = atccode
   ' If modAllergyDBI.Atc_Code_Exists(Left(atccode, 4)) Then 
   '    allergy!atccode_class = Left(atccode, 4)
   ' Endif
   allergy!date_reaction = modUtil.StripExtraBlanks(txtDate.text)
   allergy.Save("clin_allergies.allergies", "fk_allergy")
   modDBConnect.CommitTrans()
   Reload()
   
End

Public Sub Allergy_New()
   
   EditArea_Clear()
   Reset_Keys() 
   Vbox_EditArea.Enabled = True  
   txtBrand.SetFocus()

End

Public Sub Allergy_Edit()
   
   Vbox_EditArea.Enabled = True
   txtDate.SetFocus()
End

Public Sub Allergy_Display()
   '-----------------------------------------
   'Display the currently highlighted allergy
   '------------------------------------------

   Dim allergy As Collection
   
   cvwAllergies.MoveCurrent()
   allergy = allergies[cvwAllergies.Item.key]
   EditArea_Clear                                                     'clear input area
   '------------------------
   're-allocate all the keys
   '------------------------
   Reset_Keys                                                         
   If Not IsNull(allergy!fk_coding_system) Then fk_coding_system = allergy!fk_coding_system
   If Not IsNull(allergy!fk_code) Then fk_code = allergy!fk_code
   fk_consult = allergy!fk_consult  
   Try fk_brand = allergy!fk_brand
   fk_allergy = allergy!pk
   '----------------------------------------------
   'Now fill the gui - textboxes, radiobuttons etc
   '----------------------------------------------
   bExit = True
   txtDate.text = allergy!date_reaction
   Try txtBrand.text = allergy!brand
   Try txtGeneric.text = allergy!generic
   Try txtAllergen.text = allergy!allergen 
   Try txtATCName.text = allergy!atcname
   Try txtCodedTerm.text = allergy!term & " (" & allergy!fk_code & ")"
   Try txtATCClass.text = allergy!atc_class  
   If allergy!confirmed Then
      rbConfirmedYes.value = True
   Else
      rbConfirmedNo.value = True
   Endif
   If allergy!fk_lu_reaction_type = const.ReactionType_Allergy Then
      rbReactionAllergy.value = True
      iReactionType = const.ReactionType_Allergy
   Else
      rbReactionSensitivity.value = True
      iReactionType = const.ReactionType_Sensitivity
   Endif
   txtReaction.text = allergy!reaction
   bExit = False  
   txtDate.SetFocus()

End

Public Function Progress_Notes_Create() As String
   '-----------------------------------------------------------------------
   'Creates html for the allergy just noted to insert in the progress notes
   '-----------------------------------------------------------------------  
   
   Dim pn As String
   
   Return pn 
   
End

Public Sub Reload()
   '------------------------------
   'display any existing allergies
   '------------------------------ 
   
   Dim allergy As Collection
   
   FClinical.Refresh_Section(const.cSection_Allergies)    'refresh lists on main screen FClinical
   FClinical.Refresh_AllPreviousNotes() 
   currentconsult.Refresh("allergies")                   'remove key from cache > later forces a reload
   allergies = currentconsult!allergies
   cvwAllergies.Clear()
   For Each allergy In allergies
      cvwAllergies.Add(allergy!pk, 0)
      cvwAllergies[allergy!pk][0] = allergy!date_reaction 'could be free text
    '  cvwAllergies[allergy!pk][1] = allergy!generic
    '  cvwAllergies[allergy!pk][2] = allergy!brand
      cvwAllergies[allergy!pk][3] = allergy!atc_class
      cvwAllergies[allergy!pk][4] = allergy!reaction_type
      cvwAllergies[allergy!pk][5] = allergy!reaction
      If allergy!confirmed Then
         cvwAllergies[allergy!pk][6] = "Yes"
      Else
         cvwAllergies[allergy!pk][6] = "No"
      Endif
   Next
   cvwAllergies.SetFocus()

End

Public Sub form_Close()
   
   timer1_Stop()
   Settings_Save()
   
End

Public Sub Form_Save()
   
   FClinical.Refresh_AllPreviousNotes()
   
End

Public Sub Settings_Save()
   
   Settings["Allergies/VSplit_Allergies.Layout"] = VSplit_Allergies.layout
   
End

Public Sub Settings_Load()
   
   VSplit_Allergies.layout = Settings["Allergies/VSplit_Allergies.Layout"]
   
End

Public Sub EditArea_Clear()
   'Clear the editing area, re-set current Allergy

   Vbox_EditArea.Enabled = False 
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   bExit = True                                      'stop re-entrance into change routines
   EditArea_Notify_DataChange(False)
   listview1.Visible = False                         'remove popup list if showing
   listview1.Clear()
   listview1.Visible = False
   chkDrugSpecific.Value = False
   txtDate.text = Format(Now, "dd/mm/yyyy")
   iReactionType = const.ReactionType_Allergy
   rbReactionAllergy.value = True
   rbConfirmedYes.Value = True 
   bExit = False
   Print Vbox_EditArea.Enabled

End

Public Sub Reset_Keys()
   
   fk_code = ""      '
   fk_coding_system = 0
   fk_allergy = 0
   fk_consult = 0
   fk_brand = ""
   iReactionType = const.ReactionType_Allergy
   
End

Public Sub listview1_KeyPress()
   
   If Key.code = Key.return Then
      listview1_DblClick()
   End If
   
End

Public Sub listview1_DblClick()
   
   Select Case Last.tag.tag
      Case "brand"
         Brand_Select()
      Case "generic"
         Generic_Select()
      Case "atc name"
         Print atccodes
         ATCName_Select()
      Case "reaction"
         
   End Select
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   
   If flag = True Then 
      Vbox_EditArea_Outer.Padding = 1
   Else
      VBox_EditArea_outer.Padding = 0
   Endif
   
End

Public Function EditArea_txtBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   '----------------------------------------------------------
   'PURPOSE       Restrict key presses for validation purposes
   'HOW IT WORKS  see routines names
   'actually not implemented here
   '-----------------------------------------------------------
   
   Select Case Last.Tag
      Case "brand", "allergen", "coded term", "free text reaction", "generic", "date reaction", "coded term", "atc name"
         bKeyValid = True
         
   End Select
   Return bKeyValid
   
End

Public Sub Timer1_Timer()
   '------------------------------------------------------------------------------
   'If the timer is running, user is typing in either the brand or generic textbox
   '------------------------------------------------------------------------------   
   
   If bExit Then Return
   Inc timer_count
   If timer_count > 3 Then
      If bGenericSearch Then
         Generics_Get(Trim(txtGeneric.text))
      Else
         Brands_Get()
      End If  
   Endif
   
End

Private Sub ATCName_Select()
   
   listview1.MoveCurrent()
   atccode = atccodes[listview1.Item.key]!atccode
   txtATCName.text = atccodes[listview1.Item.key]!atcname
   listview1.Visible = False  
   txtCodedTerm.SetFocus()
   
End

Private Sub ATCName_Get()
   '--------------------------------------------------------------------------
   'Get list of ATCNames e.g user may not know brand or care about the generic
   '--------------------------------------------------------------------------   
   
   Dim atccode As Collection

   listview1.Clear()
   atccodes = modAllergyDBI.ATC_Get(Trim(txtATCName.text))
   If atccodes.count <> 0 Then   
      For Each atccode In atccodes 
         listview1.Add(atccode!atccode, atccode!atcname)
      Next  
      With listview1 
         .Visible = True   
         .tag = txtATCName
      End With
   End If
   Print atccodes
   
End

Public Sub Brand_Select()
   Dim atcclass As Collection 
   
   listview1.MoveCurrent()
   bExit = True
   txtBrand.text = listview1.Item.Text
   atccode = brands[listview1.Item.key]!atccode
   atcclass = modAllergyDBI.ATC_Code_Get_Class(Left(atccode, 4))
   Try txtATCClass.text = atcclass!atcname
   txtGeneric.text = brands[listview1.Item.key]!generic
   txtATCName.text = brands[listview1.Item.key]!atcname
   bExit = False  
   fk_brand = brands[listview1.Item.key]!pk
   ListView1.Visible = False
   txtCodedTerm.SetFocus()
   
End

Private Sub Brands_Get()
   
   Dim brand As Collection 
   
   Timer1.Stop
   
   listview1.Clear()
   brands = modPrescribingDBI.Brands_Get_Basic(Trim(txtBrand.text))
   If brands.count Then    
      For Each brand In brands
         listview1.Add(brand!pk, brand!brand & " " & brand!display_strength & " " & brand!form)
      Next
      With listview1
         .tag = txtBrand
         .Visible = True
      End With 
   End If   
   
End

Public Sub Generic_Select()
   ' 
   ' listview1.MoveCurrent
   ' txtGeneric.text = listview1.Item.Text
   ' atccode = generics_to_atc[listview1.Item.Text]
   ' ListView1.Visible = False
   
End

Private Sub Generics_Get(generic As String)
   
   ' Dim r As Result
   ' 
   ' Timer1.Stop
   ' listview1.Clear()
   ' generics_to_atc = New Collection
   ' Let r = modPrescribingDBI.Generics_Get_Basic(generic)
   ' For Each r
   '    Try listview1.Add(r!generic, r!generic)
   '    Let generics_to_atc[r!generic] = r!atccode
   '    listview1.tag = txtGeneric
   ' Next
   ' listview1.Visible = True
   
End

Public Function Valid_Allergy() As Boolean
   '-------------------------------------------------------------------
   'Returns true if the information in the edit area is a valid allergy
   'At a minimum must have either
   '1) An allergen eg Bee or Crustacean
   '  or
   '2) A drug, hence must have an ATCcode
   '    plus
   '    description Of the reaction optionally coded
   '    plus
   '    date of reaction
   '------------------------------------------------------------------- 

   If Trim(txtDate.text) = "" Then
      txtDate.Background = Color.rgb(95, 255, 175)
      txtDate.SetFocus()
      Return 
   Endif
   If txtATCName.text = "" Then
      txtATCName.Background = Color.rgb(95, 255, 175)
      txtATCName.SetFocus
      Return
   Endif
   If atccode = "" Then
      txtATCName.Background = Color.rgb(95, 255, 175)
      txtATCName.SetFocus
      Return
   Else
      
      Goto Check_Have_Allergy_Details
   End If
   If Trim(txtAllergen.text) <> "" Then
      Goto Check_Have_Allergy_Details
   Else
      txtAllergen.Background = Color.rgb(95, 255, 175)
      txtAllergen.SetFocus
      Return
   Endif
   
Check_Have_Allergy_Details:
   
   If fk_code = "" Then
      
      txtCodedTerm.Background = Color.rgb(95, 255, 175)
      txtCodedTerm.SetFocus()
      Return
   Endif
   If Trim(txtReaction.text) = "" Then
      txtReaction.Background = Color.rgb(95, 255, 175)
      txtReaction.Text.setfocus()
   Endif
   Return True
   
End

Public Sub Button1_Click()
   
   Dim sql As String
   Dim generics As Collection
   Dim generic As Collection
   Dim distinct_generics As Collection
   Dim dg As CRow 
   
   sql = "Select distinct  generic, atccode from drugs.product order by generic "
   Generics = modDBConnect.exec_query_collection(sql)
   For Each generic In generics
      If Not InStr(generic, ";") Then
         dg = New CRow  
         dg!generic = generic!generic
         dg!atccode = generic!atccode
         distinct_generics.Add(generic, distinct_generics.count)
      Endif
   Next
   
End 

Public Sub EditArea_TxtBox_GotFocus()
   
   Listview1.Visible = False
   Last.BackGround = Color.rgb(95, 255, 175)
   
End 

Public Sub EditArea_TextBox_Change()
   
   If bExit Then
      Return
   End If   
   Select Case Last.tag
      Case "brand"
         If Trim(txtBrand.text) = "" Then fk_brand = 0
      Case "atc name"
         If Trim(txtATCName.TEXT) = "" Then atccode = ""
      Case "coded term"
         If Trim(txtCodedTerm.TEXT) = "" Then 
            fk_code = ""
            fk_coding_system = 0
         End If   
   End Select
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.White
   
End

Public Sub EditArea_TextBox_KeyRelease()
   
   If bExit Then Return 
   
   Select Case Last.tag
      Case "coded term"
         Form_Terms.Set_SearchText(Trim(Last.text))
      Case "atc name"
      '   ATCName_Get()
      Case "brand"
         Timer1.Enabled = True
         timer_count = 0
         bGenericSearch = False  
      Case "generic"
         bGenericSearch = True
         Timer1.Enabled = True
         timer_count = 0
   End Select
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   bkeyvalid = EditArea_txtbox_ExcludeKeys(key.code, Last.tag)
   
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case key.Code
      Case key.Down
         If listview1.Visible Then 
            listview1.SetFocus
            listview1.MoveFirst
            listview1.Item.Selected = True
            Return
         End If
         If Form_Terms.visible Then 
            With Form_Terms.columnview1
               .SetFocus
               .MoveFirst
               .Item.selected = True
            End With
            Return
         End If    
   End Select
   
End

Public Sub Coded_Term_Select()
   '-------------------------------------------
   'User has chosen a term from popup listview1
   'Display this in the txtCodedTerm Textbox
   'Set currentProblem!fk_code to the pk_term
   '-------------------------------------------
   
   CurrentTerm = Form_Terms.Get_Term()
   '-----------------------------------------------------------------------
   'We allow free text in the health issue = past history problem
   'so, if user has typed something in there like ** very bad diabetes**
   '(bad example I know), then we keep this as the health issue but it
   'will be coded back to the appropriate icpc2+ term
   'However if they havn't typed anything in here, put the natural language
   'term in the txtConditon text box and the coded term in the coded textbox
   'e.g Diabetes;Type1 (T89002) or something similar
   '------------------------------------------------------------------------
   
   txtCodedTerm.text = CurrentTerm!term & " (" & CurrentTerm!code & ")"
   fk_code = CurrentTerm!code
   fk_coding_system = CurrentTerm!fk_coding_system
   
End

Public Sub cvwTerms_KeyPress()
   '------------------------------------------------------------------
   'Act only on the <ENTER> key display what is in list in the textbox
   'This event occurs of Form_Terms and is over-ridden by this observer
   '------------------------------------------------------------------
   
   If Key.code = Key.Return Then 
      ' Stop Event                    'stop event on Form_Terms 
      cvwTerms_DblClick()
   End If
   
End

Public Sub cvwTerms_DblClick()
   '-----------------------------------------------------------------
   'This is an observer event on  Form_Terms.ColumnView1 - see Init()
   '----------------------------------------------------------------
   
   Stop Event
   
   Coded_Term_Select() 
   Form_Terms.Visible = False 
   txtReaction.SetFocus()
   
End

Public Sub Terms_Get()
   '-------------------------------------------------------------------------------------
   'Gets list of diagnostic terms
   'Cannot set default if count is one because must  be able to add new occupations
   'can't remove the label because it needs to occupy space to keep textbox correct width
   '-------------------------------------------------------------------------------------
   
   Dim term As Collection 
   Dim key As String
   
   If Trim(txtCodedTerm.text) = "" Then
      fk_code = ""
      fk_coding_system = 0
      Return
   End If
   Timer1.Enabled = False  
   Form_Terms.Get_Terms()
   
End

' Don't fret Ian, I'll remove this when I put the update query in svn.
' Create table clin_allergies.lu_reaction_type
' (pk serial primary key,
'  type text Not Null);
' 
'  insert into clin_allergies.lu_reaction_type(type)values( 'allergy');
'  insert into clin_allergies.lu_reaction_type(type)values( 'sensitivity');
' 
' drop table clin_allergies.allergies cascade;
' 
'   Create TABLE clin_allergies.allergies
' (
'   pk serial primary key,
'   fk_consult integer Not Null,
'   fk_brand uuid Default Null,
'   allergen text Default Null,
'   generic_specific boolean Default Null,
'   fk_lu_reaction integer Not Null,
'   fk_lu_reaction_type integer Not Null,
'   fk_coding_system integer Default Null,
'   fk_code text Default Null,
'   confirmed boolean Default True,
'   deleted boolean Default False,
'   atc text Default Null,
'   date_reaction text Default Null,
'   CONSTRAINT allergies_fk_consult_fkey FOREIGN KEY(fk_consult)
'       REFERENCES clin_consult.consult(pk)MATCH SIMPLE
'       ON UPDATE NO ACTION ON DELETE NO ACTION,
'  CONSTRAINT allergies_fk_brand_fkey FOREIGN KEY(fk_brand)
'       REFERENCES drugs.brand(pk)MATCH SIMPLE
'       ON UPDATE NO ACTION ON DELETE NO ACTION,
'  CONSTRAINT allergies_atc_fkey FOREIGN KEY(atc)
'       REFERENCES drugs.atc(atccode)MATCH SIMPLE
'       ON UPDATE NO ACTION ON DELETE NO ACTION,
'  CONSTRAINT allergies_fk_lu_reaction_fkey FOREIGN KEY(fk_lu_reaction)
'       REFERENCES clin_allergies.lu_reaction(pk)MATCH SIMPLE
'       ON UPDATE NO ACTION ON DELETE NO ACTION,
'  CONSTRAINT allergies_fk_lu_reaction_type_key FOREIGN KEY(fk_lu_reaction_type)
'       REFERENCES clin_allergies.lu_reaction_type(pk)MATCH SIMPLE
'       ON UPDATE NO ACTION ON DELETE NO ACTION,
'  CONSTRAINT allergies_fk_coding_system_key FOREIGN KEY(fk_coding_system)
'       REFERENCES coding.lu_systems(pk)MATCH SIMPLE
'       ON UPDATE NO ACTION ON DELETE NO ACTION 
'  );
'  
' ALTER TABLE clin_allergies.allergies OWNER To easygp;
' GRANT ALL ON TABLE clin_allergies.allergies To easygp;
' GRANT ALL ON TABLE clin_allergies.allergies To staff;
' 
' 
' 
' COMMENT ON COLUMN clin_allergies.allergies.fk_brand Is
' 'if not null key to drugs.brand table points to brand with which this allergy was noted';
' COMMENT ON COLUMN clin_allergies.allergies.allergen Is
' 'if not null then the substance that the person was allergic or sensitive to, eg could be bee or cedar';
' COMMENT ON COLUMN clin_allergies.allergies.generic_specific Is
' 'if true and the allergan was a drug then the reaction was generic specific not class specific
' For example someone can be nauseous on one nsaid but Not another ';
' COMMENT ON COLUMN clin_allergies.allergies.fk_lu_reaction Is
' 'key to clin_allergies.lu_reaction which is a free text representation of the reaction';
' COMMENT ON COLUMN clin_allergies.allergies.fk_lu_reaction_type Is
' 'foreign key to allergies.lu_reaction_type 1=allergy 2=sensitivity';
' COMMENT ON COLUMN clin_allergies.allergies.fk_coding_system Is 
' 'key to coding.lu_coding_system containing name of coding system   that this allergy is linked to';
' COMMENT ON COLUMN clin_allergies.allergies.fk_code Is 
' 'the text of the code references coding.generic_terms.code';
' COMMENT ON COLUMN clin_allergies.allergies.confirmed Is 
' 'if true (the default) then the allergy has been confirmed';
' COMMENT ON COLUMN clin_allergies.allergies.deleted Is '
' If True Then this record Is Marked As Deleted ';
' COMMENT ON COLUMN clin_allergies.allergies.date_reaction Is '
' the Date Of reaction, could be Date, could be Year, could be Null ';

Public Sub EditArea_TextBox_Activate()
   
   Select Case Last.tag
      Case "allergen"
         txtReaction.SetFocus()
      Case "date reaction"
         txtBrand.SetFocus()
      Case "brand"
         txtReaction.SetFocus()
      Case "generic"
         txtReaction.SetFocus()
      Case "reaction"
         txtCodedTerm.SetFocus()
      Case "coded term"
         txtReaction.SetFocus()
   End Select
   
End

Public Sub EditArea_RadioButtons_KeyPress()
   
   Select Case key.code
      Case key.tab, key.Return
         Select Case Last.tag
            Case 1
               If Last.value = False Then
                  rbReactionSensitivity.SetFocus()
               Else
                  rbConfirmedYes.SetFocus()
               Endif
            Case 2
               
         End Select
   End Select
   
End

Public Sub timer1_Stop()
   
   With Timer1
      .Stop
      .Enabled = False
   End With 
   
End

Public Sub Form_Leave()
   
   timer1_Stop()
   
End

Public Sub New_Entry()
   '------------------------------------------------------------------------------------------------------
   'This is called from the main toolbar in FClinical and here for consistant nomenclature between modules
   '------------------------------------------------------------------------------------------------------   
   
   Allergy_New()
   
End 

Public Sub Refresh()
   
   Reload() 
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   listview1.Visible = False  
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
      Case "coded term"
         With Form_Terms
            .top = Last.Parent.Parent.Top + Last.Parent.Height + Vsplit_Allergies.top 
            .width = txtCodedTerm.Width
            .Left = Last.Parent.Left + VBox1.padding
            .Raise 
            .Visible = False  
            If Trim(Last.text) <> "" Then
               .Set_SearchText(Trim(Last.text))
            End If   
         End With    
      Case "brand", "generic", "atc name"
         With listview1
            .top = Last.Parent.Parent.top + Last.Height
            .width = Last.Parent.width / 2
            .left = Last.Parent.Left
            .Raise()
         End With
   End Select
   
End

Public Sub rbAllergySensitivity_Click()
   
   iReactionType = Last.tag
   EditArea_Notify_DataChange(True)
   
End

Public Sub chkEditArea_Click()
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_RadioButtons_Click()
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub cvwAllergies_Select()
   '-------------------------------------------------------------
   'User has clicked on the allergies list - display in edit area
   '-------------------------------------------------------------  

   Allergy_Display()

End

Public Sub cvwAllergies_Menu()
   
   If cvwAllergies.count Then
      mnuAllergies.Popup()
   Endif
   
End

Public Sub mnuAllergies_Click()
   
   Select Case Last.tag
      Case "edit"
            Allergy_Edit()
      Case "delete"
          modUtil.NotImplemented("Delete allergy")
      Case "font"
         modUtil.Columnview_SetFont(cvwAllergies, "Allergies")
      Case "help"
         modUtil.NotImplemented("Help for allergies")
   End Select

End
