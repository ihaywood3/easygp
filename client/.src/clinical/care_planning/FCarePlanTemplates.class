' Gambas class file

Private Form_Help As FHtmlViewer
Private fk_lu_template As Integer
Private fk_generic_term As String
Private bExit As Boolean
Private Form_Terms As FCodedTermSelector
Private obs As Observer
Private currentTerm As Collection
Private fk_coding_system As Integer
Private bKeyValid As Boolean
Private ReferenceHboxForTopColumnview As HBox
Private $hEditor_gridview1 As Object
Private grids_data As Collection
Private templates As Collection
Private template As Collection
Private pk_view As String
Private cvwTemplates_key As Integer
Private goals As Collection
Private goal As New Collection
Private treatments As Collection
Private treatment As Collection
Private bFillingGrid As Boolean

Public Sub Init()

   With form_help = New FHtmlViewer(Vbox_Help)
      .tbWebBrowserZoomIn.Visible = True
      .tbWebBrowserZoomOut.Visible = True
   End With
   form_help.Help_Show("care-plan-templates.html")
   Reload()
   With GridView1
      .Columns.count = 2
      .Columns[0].text = "Goals or Changes To Be Achieved"
      .Columns[1].text = "Required treaments and services"
      .Rows.count = 0
   End With
   With Form_Terms = New FCodedTermSelector(Vbox_EditArea)
      .Ignore = True
      .Visible = False
      .Height = 200
   End With
   obs = New Observer(Form_Terms.ColumnView1) As "cvwCodedTerms"
   Settings_Load()
   grids_data = New Collection
   grids_data.Add(["col1": "Patient to have a clear understanding of diabetes and their role in managing the condition",
      "col2": "Education"], grids_data.count)
   ' grids_data.Add(["col2": "Education"], grids_data.count)
   grids_data.Add(["col1": "Maintain diabetic control",
      "col2": "Patient to monitor glucose levels regularly.\n"
   "On-going review and monitoring componts of the DACC"], grids_data.count)
   '  grids_data.Add(["col2": "Patient to monitor glucose levels regularly.\n"
   '  "On-going review and monitoring componts of the DACC"], grids_data.count)

   ' grids_data.Add(["col1": "Minimise risk of complications: eye, foot, renal"], grids_data.count)
   ' grids_data.Add(["col1": "Understand the role of medication"], grids_data.count)
   ' grids_data.Add(["col1": "Maintain healthy diet and optimal weight range"], grids_data.count)
   ' grids_data.Add(["col1": "Maintain exercise routine"], grids_data.count)
   ' grids_data.Add(["col1": "Smoking cessation"], grids_data.count)
   ' With cvwTemplates
   '    .Clear
   ' End With
   Template_new()
   ' gridview1_Reload

End

Public Sub Reload()
   'load list of existing templates

   Dim template As Collection
   Dim x As Integer
   Dim last_fk_lu_template As Integer

   With cvwTemplates
      .Clear
   End With
   templates = modUtil.Copy_Collection_Keyed_Sequentially(modCarePlanDBI.Templates_get())
   For Each template In templates
      If last_fk_lu_template <> template!fk_lu_template Then
         cvwTemplates.Add(x, 0)
         cvwTemplates[x][0] = template!template
         last_fk_lu_template = template!fk_lu_template
      End If
   Next

End

Public Sub Coded_Term_Select()
   '-------------------------------------------
   'User has chosen a term from popup listview1
   'Display this in the txtCodedTerm Textbox
   'Set currentProblem!fk_generic_term to the pk_term
   '-------------------------------------------

   CurrentTerm = Form_Terms.Get_Term()
   '-----------------------------------------------------------------------
   'We allow free text in the health issue = past history problem
   'so, if user has typed something in there like ** very bad diabetes**
   '(bad example I know), then we keep this as the health issue but it
   'will be coded back to the appropriate icpc2+ term
   'However if they havn't typed anything in here, put the natural language
   'term in the txtConditon text box and the coded term in the coded textbox
   'e.g Diabetes;Type1 (T89002) or something similar
   '------------------------------------------------------------------------
   If txtCondition.text = "" Then
      txtCondition.text = CurrentTerm!term
   End If
   txtCodedTerm.text = CurrentTerm!term & " (" & CurrentTerm!code & ")"
   fk_generic_term = CurrentTerm!code
   fk_coding_system = CurrentTerm!fk_coding_system

End

Public Sub Terms_Get()
   '-----------------------------
   'Gets list of diagnostic terms
   '-----------------------------

   Dim term As Collection
   Dim key As String

   If Trim(txtCodedTerm.text) = "" Then
      currentTerm!code = ""
      Return
   End If
   Form_Terms.Get_Terms()

End

Public Sub cvwCodedTerms_Keypress()
   '------------------------------------------------------------------
   'Act only on the <ENTER> key display what is in list in the textbox
   'This event occurs of Form_Terms and is over-ridden by this observer
   '------------------------------------------------------------------

   If Key.code = Key.Return Then
      ' Stop Event                    'stop event on Form_Terms
      cvwCodedTerms_DblClick()
   End If

End         ' With VBox_ColumnView
'    .top = Vbox_EditArea_inner.top + Last.Parent.Parent.top + Last.Parent.height
'    .left = Last.Parent.Left
'    .width = Vbox_EditArea_inner.width / 2
' End With

Public Sub cvwCodedTerms_DblClick()

   Stop Event

   Coded_Term_Select()
   Form_Terms.Visible = False

End

Public Sub EditArea_Buttons_Click()

   Select Case Last.tag

      Case "new"
         Template_new()
      Case "save"
         Save()
   End Select

End

Public Sub EditArea_TextBox_GotFocus()

   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
      Case "coded term"
         ReferenceHboxForTopColumnview = HBox_CodedTerm
         With Form_Terms
            .top = Last.Parent.Parent.top + Last.Height
            .width = txtCodedTerm.Width
            .Left = Last.Parent.Left + Vbox_EditArea.padding
            .Raise
            .Visible = False
            If Trim(Last.text) <> "" Then
               .Set_SearchText(Trim(Last.text))
            End If
         End With
   End Select

End

Public Sub EditArea_TextBox_LostFocus()

   Last.BackGround = Color.white

End

Public Sub EditArea_Notify_DataChanged(flag As Boolean)

   If flag Then
      tbSave.Foreground = Color.Red
      Vbox_EditArea_Outer.Padding = 1
      tbSave.Enabled = True
   Else
      tbSave.Foreground = Color.Black
      Vbox_EditArea_Outer.Padding = 0
      tbSave.Enabled = False
   Endif

End

Public Sub Template_new()

   EditArea_Clear()
   fk_lu_template = 0
   With GridView1
      .Rows.count = 2
   End With
   Vbox_EditArea.Enabled = True

End

Public Function EditArea_TextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean

   ' Select Case tag
   '    Case "age due from", "age due to"
   '       bKeyValid = bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
   '    Case "date inactive"
   '       bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
   '    Case Else
   '       bKeyValid = True
   ' End Select
   Return bKeyValid

End

Public Sub EditArea_Clear()

   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)

End

Public Sub Settings_Save()

End

Private Sub Settings_Load()

End

Public Sub Save()

   Dim template As CRow
   Dim goal As CRow
   Dim treatment As CRow
   Dim x As Integer
   Dim y As Integer
   Dim link_template_goal_treatment As CRow

   Dim treatments As String[]

   If Vbox_EditArea_Outer.Padding = 0 Then Return

   If Not Template_Valid() Then Return

   template = New CRow

   If fk_lu_template Then
      template.put_unchanged(fk_lu_template, "fk_lu_template")
   Endif
   template!fk_generic_term = fk_generic_term
   template!template = Trim(txtCondition.text)
   template.Save("clin_careplans.lu_templates", "fk_lu_template")

   For x = 0 To gridview1.Rows.count - 1
      If Lower(Trim(gridview1[x, 0].Text)) <> "" And Lower(Trim(gridview1[x, 1].Text)) <> " then"
         goal = New CRow
         goal!goal = Lower(Trim(gridview1[x, 0].Text))
         goal.Save("clin_careplans.lu_template_goals", "fk_lu_template_goal")
         treatments = Split(Lower(Trim(gridview1[x, 1].Text)), "\n")
         For y = 0 To treatments.count - 1
            treatment = New CRow
            treatment!treatment = treatments[y]
            treatment.Save("clin_careplans.lu_treatments", "fk_lu_treatment")
            link_template_goal_treatment = New CRow
            link_template_goal_treatment!fk_lu_template = template!fk_lu_template
            link_template_goal_treatment!fk_lu_goal = goal!fk_lu_template_goal
            link_template_goal_treatment!fk_lu_treatment = treatment!fk_lu_treatment
            link_template_goal_treatment.Save("clin_careplans.lu_link_template_goals_treatments", "fk_lu_link_template_goal_treatment")
         Next
      End If
   Next
   modDBConnect.CommitTrans()
   Vbox_EditArea.Enabled = False

End

Public Function Template_Valid() As Boolean

   If fk_generic_term = "" Or fk_coding_system = 0 Then
      txtCodedTerm.Background = Color.rgb(95, 255, 175)
      txtCodedTerm.SetFocus()
      Return
   Endif
   If Trim(txtCondition.text) = "" Then
      With txtCondition
         .Background = Color.rgb(95, 255, 175)
         .SetFocus()
         Return
      End With
   Endif

   Return True

End

Public Sub EditArea_TextBox_Change()

   Select Case Last.tag
      Case "coded term"
         If Trim(Last.text) = "" Then
            Form_Terms.Visible = False
            fk_generic_term = ""
            fk_coding_system = 0
         End If
   End Select

End

Public Sub EditArea_TextBox_KeyRelease()

   Select Case Last.tag
      Case "coded term"
         '------------------------------------------
         'on every key-release, start the timer
         'and search for term like txtCodedTerm.text
         '------------------------------------------
         Form_Terms.Set_SearchText(Trim(Last.text))
   End Select

End

Public Sub EditArea_TextBox_KeyPress()

   If Key.code = Key.Down Then
      ' If listview1.Visible Then
      '    listview1.SetFocus
      '    listview1.MoveFirst
      '    listview1.Item.Selected = True
      ' End If
      If Form_Terms.visible Then
         With Form_Terms.ColumnView1
            .SetFocus
            .MoveFirst
            .Item.selected = True
         End With
         Return
      End If
   End If

End

Public Sub VSplit_Main_Resize()

   If Form_Terms.visible Then
      Form_Terms.top = vbox_EditArea.Top + HBox_CodedTerm.top + txtCodedTerm.Height

   Endif

End

Public Sub HSplit_Main_Resize()

   If Form_Terms.visible Then
      Form_Terms.width = txtCodedTerm.Width
   Endif

End

Public Sub GridView1_ColumnResize(Column As Integer)

   bexit = True
   Gridview_Refresh
   bexit = False

End

Public Sub Gridview_Refresh()

   '  If bexit Then Return
   gridview1_Reload()
   gridview1_MoveEditingControl

End

Public Sub Gridview_Refresh_old()

   Return
   If bexit Then Return
   gridview1_Reload()
   gridview1.height = Gridview1_Get_Rows_Height() + 24
   gridview1_MoveEditingControl

End

Public Sub GridView1_MouseUp()

   If gridview1.row = - 1 Then Return
   Print "on row ", gridview1.Row
   GridView1_ShowEditingControl

End

Public Function Gridview1_Get_Rows_Height() As Integer

   Dim x As Integer
   Dim h As Integer

   For x = 0 To gridview1.Rows.count - 1
      h += gridview1.Rows[x].H
   Next
   Return h

End

Private Sub gridview1_MoveEditingControl()
   '------------------------------------------------------------------------
   'Move the editing Hbox control to match a grid cell co-ordinates and size
   '------------------------------------------------------------------------

   If IsNull($hEditor_gridview1) Or gridview1.Row = - 1 Then
      Print "null"
      Return
   End If
   Print gridview1.height - gridview1.ClientH

   With gridview1[gridview1.Row, gridview1.column]
      $hEditor_gridview1.Move(gridview1.X + .X - gridview1.ScrollX + 2, gridview1.Y + .Y - gridview1.ScrollY + 24, .Width - 2, .Height - 2)
      $hEditor_gridview1.Raise
   End With

End

Public Sub GridView1_ShowEditingControl()
   '--------------------------------------------------------------------------------
   'nicked from the gambas IDE FProperty.class
   'Shows the control we are using to 'edit' the grid cell aligned over that cell
   'Maybe un-necessariily complex due to my simple brain but does this
   'The panGvwItemsBilledEditor = a Hbox holding 3 controls
   ' - a textbox for editing
   ' - a combobox for choosing the fee levels
   ' - a transparent label to let user click on something without entering edit mode
   '   which is what happens in the gambas IDE - I didn't use this because then I
   '   couldn't show a menu over the grid
   '--------------------------------------------------------------------------------

   Dim hEditor As Object

   textedit1.Hide
   hEditor = textedit1
   textedit1.text = gridview1[gridview1.row, gridview1.column].Text

   ' cmbFeeType.Hide
   ' gvwItemsBilled_lblOverLay.Hide
   ' panGvwItemsBilledEditor.Hide
   ' Select Case gvwItemsBIlled.column
   '    Case cGridColumnItem_FeeType
   '       cmbFeeType.Index = cmbFeeType.Find(gvwItemsBIlled[gvwItemsBIlled.Row, cGridColumnItem_FeeType].Text)
   '       hEditor = cmbFeeType
   '    Case Else
   '       hEditor = gvwItemsBilled_lblOverLay
   ' End Select

   $hEditor_gridview1 = hEditor
   ' gvwItemsBilled_MoveProperty        ' Move the Hbox panGvwItemsBilledEditor into position over the cell
   ' $hEditor_gvwItems.Show             ' Make transparent label "visible" or the combo box visible
   'panGvwItemsBilledEditor.Show       ' Show the container, hence the  control
   ' $hEditor_gvwItems.SetFocus         ' give control focus > responded to key and click events
   gridview1_MoveEditingControl
   $hEditor_gridview1.show
   $hEditor_gridview1.SetFocus

End

Public Sub TextEdit1_Change()

   If bexit Or gridview1.column = -1 Then Return
   Try grids_data[GridView1.row]!col2 = textedit1.text
   If Error Then
      grids_data.Add(["col1": gridview1[gridview1.row, 0].text, "col2": gridview1[gridview1.row, 1].text], grids_data.count)
   Endif
   gridview1[gridview1.row, gridview1.Column].text = textedit1.text
   ' GridView1_ColumnResize(gridview1.Column)

End

Public Sub grids_data_Fill()

   Dim iGoal As Integer
   Dim itreatment As Integer
   Dim iLineCount As Integer
   Dim sTreatments As String

   grids_data.Clear()

   For iGoal = 0 To goals.count - 1
      For itreatment = 0 To goals[iGoal]!treatments.Count - 1
         sTreatments &= goals[iGoal]!treatments[itreatment]!treatment & "\n"
      Next
      grids_data.Add(["col1": goals[iGoal]!goal, "col2": sTreatments], grids_data.count)
   Next

End

Public Sub gridview1_Reload_new()

   Dim iGoal As Integer
   Dim itreatment As Integer
   Dim iLineCount As Integer

   grids_data_Fill

   gridview1.Clear()
   gridview1.Rows.count = Max(goals.Count, 10)
   For iGoal = 0 To goals.count - 1
      '  gridview1.Rows[iGoal].Height = -1
      With gridview1[iGoal, 0]
         .text = goals[iGoal]!goal
         .WordWrap = True
      End With
      iLineCount = 0
      With gridview1[iGoal, 1]
         For itreatment = 0 To goals[iGoal]!treatments.Count - 1
            .text &= goals[iGoal]!treatments[itreatment]!treatment & "\n"
            .WordWrap = False
            Inc iLineCount
         Next
      End With
      If iLineCount = 1 Then
         gridview1.Rows[iGoal].Height = -1
      Else
         gridview1.Rows[iGoal].Height = iLineCount * 24
      End If
   Next

   '  HBox_ManagementGoals.height = gridview1.Height

End

Public Sub gridview1_Reload()

   Dim x As Integer
   Dim y As Integer

   '  If bexit Then Return
   gridview1.Rows.Count = goals.Count + 1
   ' Print goals

   For x = 0 To grids_data.Count - 1   'for each row
      Print x
      gridview1.Rows[x].Height = -1
      Print x
      With gridview1[x, 0]
         .Text = grids_data[x]!col1
         .WordWrap = True
      End With
      With gridview1[x, 1]
         .Text = grids_data[x]!col2
         .WordWrap = False
      End With

   Next

   HBox_ManagementGoals.height = gridview1.Height
   EditArea_Notify_DataChanged(True)

End

Public Sub cvwTemplates_Select()

   cvwTemplates.key = Last.Item.Key

End

Public Sub cvwTemplates_Menu()

   If cvwTemplates.count Then mnuTemplates.Popup()

End

Public Sub mnuTemplates_Click()

   Select Case Last.tag
      Case "edit"
         Template_Display()
   End Select

End

Public Sub Template_Display()

   Dim TPL As Collection
   Dim last_fk_goal As Integer

   bFillingGrid = True
   template = templates[cvwTemplates_key]
   txtCondition.text = template!template
   txtCodedTerm.text = template!term & "(" & template!fk_generic_term & ")"
   goals = New Collection                                     'each template has goals

   'now display the goals and tasks/treatment/services whatever  you may call them
   For Each TPL In templates
      If TPL!fk_lu_template = template!fk_lu_template Then          'new template
         If last_fk_goal <> TPL!fk_lu_goal Then                     'if this is a new goal
            goal = New Collection                                   'new goal collection
            goal!goal = TPL!goal
            goal!fk_lu_goal = TPL!fk_lu_goal
            goal!treatments = New Collection                        'each goal has treatments/actions
            treatment = New Collection
            treatment!fk_lu_treatment = TPL!fk_lu_treatment
            treatment!treatment = TPL!treatment
            goal!treatments.Add(treatment, goal!treatments.count)
            last_fk_goal = TPL!fk_lu_goal
            goals.Add(goal, goals.count)
         Else                                                      'the same goal
            treatment = New Collection                             'add the next treatment
            treatment!fk_lu_treatment = TPL!fk_lu_treatment
            treatment!treatment = TPL!treatment
            goal!treatments.Add(treatment, goal!treatments.count)
         End If

      Endif
   Next
   grids_data_Fill
   GridView1.Columns[0].width = gridview1.width / 2
   bFillingGrid = False

End

' CREATE TABLE clin_careplans.lu_templates
' (
'   pk serial NOT NULL,
'   template text NOT NULL,
'   fk_generic_term text NOT NULL,
'   deleted boolean DEFAULT false,
'   CONSTRAINT lu_templates_pkey PRIMARY KEY (pk )
' )
' WITH (
'   OIDS=FALSE
' );
' ALTER TABLE clin_careplans.lu_templates
'   OWNER TO richard;

' CREATE TABLE clin_careplans.lu_treatments
' (
'   pk serial NOT NULL,
'   treatment text NOT NULL,
'   CONSTRAINT lu_treatments_pkey PRIMARY KEY (pk )
' )
' WITH (
'   OIDS=FALSE
' );
' ALTER TABLE clin_careplans.lu_treatments
'   OWNER TO richard;
'

' Create TABLE clin_careplans.lu_template_goals
' (
'   pk serial Not Null,
'   goal text Not Null,
'   CONSTRAINT lu_template_goals_pkey PRIMARY KEY(pk)
' )
' With (
'   OIDS = False
' );
' ALTER TABLE clin_careplans.lu_template_goals
'   OWNER To richard;

' Create TABLE clin_careplans.lu_link_template_goals_treatments
' (
'   pk serial Not Null,
'   fk_lu_template integer Not Null,
'   fk_lu_goal integer Not Null,
'   fk_lu_treatment integer Not Null,
'   CONSTRAINT lu_link_template_goals_treatments_pkey PRIMARY KEY(pk)
' )
' With (
'   OIDS = False
' );
' ALTER TABLE clin_careplans.lu_link_template_goals_treatments
'   OWNER To richard;

' drop view clin_careplans.vwTemplates;
' Create or replace view clin_careplans.vwTemplates as
'
' SELECT
'   fk_lu_template || '-' || fk_lu_treatment as pk_view,
'
'   lu_templates.template,
'   lu_templates.fk_generic_term,
'   lu_template_goals.goal,
'   lu_link_template_goals_treatments.fk_lu_template,
'   lu_link_template_goals_treatments.fk_lu_goal,
'   lu_link_template_goals_treatments.fk_lu_treatment,
'   lu_link_template_goals_treatments.pk as fk_lu_link_template_goals_treatment,
'   lu_treatments.treatment,
'   generic_terms.term
' FROM
'   clin_careplans.lu_templates,
'   clin_careplans.lu_treatments,
'   clin_careplans.lu_template_goals,
'   clin_careplans.lu_link_template_goals_treatments,
'   coding.generic_terms
' WHERE
'   lu_templates.pk = lu_link_template_goals_treatments.fk_lu_template AND
'   lu_link_template_goals_treatments.fk_lu_goal = lu_template_goals.pk AND
'   lu_link_template_goals_treatments.fk_lu_treatment = lu_treatments.pk AND
'   coding.generic_terms.code = lu_templates.fk_generic_term;
'

Public Sub TextEdit1_KeyPress()

   If gridview1.Column = 0 And Key.code = Key.enter Then
      gridview1.column = 1
      GridView1_MouseUp()
   Endif

End
