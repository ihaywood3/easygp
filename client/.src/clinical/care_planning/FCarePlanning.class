' Gambas class file

Private CarePlans As Collection
Private CarePlan As Collection
Private TeamCareMembers As Collection
Private TeamCareMember As Collection
Private iTeamCareMember As Integer
Private PlanComponents As Collection
Private PlanComponent As Collection
Private fk_component As Integer 
Private HealthIssues As Collection
Private view_careplan_components As Collection 
Private HealthIssue As Collection
Private TeamCareMember_SearchBy_Criteria As Integer
Private currentCarePlanComponent As COLLECTION   
Private collection_members As Collection
Private collection_member As Collection 
Private bExit As Boolean
Private currentconsult As CConsult
Public Problemlists As FPastHistoryProblemLists
Public ProblemList As ColumnView                      'the List last clicked on
Public Obs As Observer
Private bediting As Integer
Private fk_organisation As Integer
Private fk_branch As Integer
Private fk_person As Integer
Private fk_employee As Integer
Private pk_pasthistory As Integer
Private fk_coding_system As Integer
Private fk_code As String 
Private fk_progressnote As Integer 
Private TeamCareMember_Deleted As Collection
Private TeamCareMembers_BeforeEdit As Collection
Private interval As Integer
Private fk_interval_unit As Integer
Private default_interval As Integer
Private fk_default_interval_unit As Integer
Private fk_recall_reason As Integer
Private CarePlanCompoents As Collection
Static Private form_careplanning As FCarePlanning

Static Public Sub Edit_CarePlan()
   '---------------------------------------------------------
   'This static routine is called from the problem lists form
   '---------------------------------------------------------   
   
   form_careplanning.Edit() 
   
End

Public Sub Init(cons As Cconsult)
   
   form_careplanning = Me
   currentconsult = cons 
   With ProblemLists = New FPastHistoryProblemLists(HBox_ProblemLists)
      .Init(currentconsult, "Care Planning")
   End With
   obs = New Observer(Problemlists.cvwProblemsActive) As "HealthIssues"
   obs = New Observer(Problemlists.cvwProblemsMajor) As "HealthIssues"
   obs = New Observer(Problemlists.cvwProblemsInActive) As "HealthIssues"
   cvwCareComponents.Columns.count = 3
   cmbContactMethod.Add("Home", const.CommModalityHome)
   cmbContactMethod.Add("Work", const.CommModalityWork)
   cmbContactMethod.Add("Fax", const.CommModalityFax)
   cmbContactMethod.Add("Email", const.CommModalityEmail)
   cmbContactMethod.Add("Mobile", const.CommModalityMobile)
   cmbContactMethod.Add("VOIP", const.CommModalityVOIP)
   cmbContactMethod.Add("Web URL ", const.CommModalityWeb)
   cmbContactMethod.Add("Phone unspecified", const.CommModalityPhone)
   cmbContactMethod.Add("Toll Free", const.CommModalityTollFree)
   cmbContactMethod.Add("Letter", const.CommModalityLetter)
   
   lblmeasure.text = "  Management Summary  "
   modEditAreaHelpers.Resize_labels(Vbox_CarePlanning, lblmeasure)
   Try Settings_Load()
   currentconsult.Refresh("past history")
   
End

Public Sub HealthIssues_Click()
   '-------------------------------------------------------------------
   'User has clicked on a problem list, set this to be the current list
   '-------------------------------------------------------------------   
   
   Stop Event
   EditArea_Clear()
   ProblemList = Last
   Display()
   
End

Public Sub Display()
   '--------------------------------------------------------------------
   'Displays the care plan details for the currently highlighted problem
   '--------------------------------------------------------------------
   
   HealthIssue = modUtil.Copy_Collection(currentconsult!past_history[ProblemList.item.key])
   txtHealthIssue.text = UCase(HealthIssue!description)
   ' If Not IsNull(HealthIssue!combined_term_code) Then
   '  lblCarePlanning.Text &= " diagnosed in " & HealthIssue!year_onset & " at age " & HealthIssue!age_onset & "Coding:" & HealthIssue!system & " [" & HealthIssue!combined_term_code & "]"
   'Endif
   txtAim.text = HealthIssue!aim_of_plan
   txtHistoricalSummary.text = HealthIssue!condition_summary
   txtManagementSummary.text = HealthIssue!management_summary
   pk_pasthistory = ProblemList.item.key
   TeamCareMembers_Get()
   Components_CarePlan_Display()
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   
   If flag Then 
      Vbox_EditArea.Padding = 1
      
   Else
      vbox_EditArea.Padding = 0
   End If
   
End

Public Sub EditArea_Clear()
   '----------------------------------------------------------------
   'Clears the editing area - ie clears all txtboxes, checkboxes and
   'resets all variables, sets foreground of error message to white
   'to make them 'disappear'
   'clin_history.data_past_history has these fields
   ' removed me: kk=I checked this was set 
   '   pk serial 
   '   fk_consult          kk
   '   age_onset           KK
   '   age_onset_units
   '   description         kk
   '   notes               kk
   '   fk_laterality       kk
   '   year_onset          KK
   '   active              kk
   '   operation           kk
   '   cause_of_death      kk
   '   confidential        kk
   '   major             Inc inbox_auto_process_counter
   '   deleted             kk
   '   year_onset_uncertain  kk
   '   management_summary    kk
   '   condition_summary     kk
   '   team_care_members  ---------
   '   risk_factor              kk
   '   fk_coding_system integer kk
   '   fk_code integer          kk
   '
   '   FIXME RICHARD remove hard code for coding system to config
   'fixme richard to allow year or month units
   '----------------------------------------------------------------
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   txtDue.Clear()
   tlResponsibility.text = "Responsibility of Team Member"
   With cvwCareComponents
      .Clear()
      '   .SelectAll(False)
   End With
   With cvwTeamCareMembers
      .Clear()
      ' .SelectAll(False) 
   End With
   columnview1.Visible = False   
   listview1.Visible = False  
   '----------------------------------------------------------------------
   'Reset gui-elements to start up condition
   'Remove padding to edit area (it's background is red) white = no change
   '----------------------------------------------------------------------
   EditArea_Notify_DataChange(False)
   ListView1.Visible = False  
   pk_pasthistory = 0
   fk_coding_system = 0
   fk_code = 0
   fk_progressnote = -1
   Vbox_EditArea.Enabled = False 
   Vbox_EditArea.Enabled = True
   With lblHealthIssue
      .Text = "Care Plan For"  
      .Foreground = Color.Black
   End With
   Careplan_Component_New()
   PlanComponents = New Collection
   view_careplan_components = New Collection 
   TeamCareMembers = New Collection
   TeamCareMember_Deleted = New Collection
   teamcaremembers_BeforeEdit = New Collection 
   iTeamCareMember = 0
   chkautoRecall.value = True
   txtTeamCareMember_Responsibility.text = ""
   TeamCareMember_SearchBy_Criteria = Const.contacttype_PersonsAndPatients 'fix me 
   rbSearchBy_person.value = True
   cmbContactMethod.Index = const.ContactMethodLetter
   bExit = False
   
End

Public Sub Editarea_NotifyData_Change(flag As Boolean)
   
   If Flag Then
      Vbox_EditArea.Padding = 1
   Else
      Vbox_EditArea.Padding = 0  
      
   Endif
   
End

Public Sub Save()
   '---------------------------------------------------------------
   'Save the care plan for this past history item
   'This could include changes to the past history item itself
   'Unlike many editing areas, the underlying collection has been
   'copied from the original at the time of display (see Display())
   'this is because the ModPastHistoryDBI.Save(...) routine needs
   'an intact collection to be able to write the description of
   'any audit changes.
   '---------------------------------------------------------------
   
   Dim Recall As Collection
   Dim pk_recall As Integer = -1     'if > zero this is an existing recall for a component.
   
   If Vbox_EditArea.padding = 0 Then Return
   If Not Valid_CarePlan() Then Return 
   HealthIssue!description = Trim(txtHealthIssue.text)
   HealthIssue!management_summary = Trim(txtManagementSummary.text)     
   HealthIssue!condition_summary = Trim(txtHistoricalSummary.text) 
   HealthIssue!aim_of_plan = Trim(txtAim.text)
   modDBConnect.BeginTrans()
   modPastHistoryDBI.Save(currentconsult, pk_pasthistory, HealthIssue)
   modPastHistoryDBI.Save_TeamCareMembers(TeamCareMembers_BeforeEdit, TeamCareMembers, pk_pasthistory)   
   '------------------------------------------------------------------------------------------ 
   'For each care plan component which the user wants to be included as a recall
   'create and save the recall, the key of which is returned into the PlanComponent collection
   '------------------------------------------------------------------------------------------ 
   For Each PlanComponent In PlanComponents
      If PlanComponent!recall = True Then
         recall = New Collection  
         recall!fk_urgency = const.UrgencyLevelRoutine
         If Not IsNull(PlanComponent!fk_recall) Then
            pk_recall = PlanComponent!fk_recall
         Else
            pk_recall = -1 
         Endif
         If Not IsNull(PlanComponent!fk_reason) Then
            recall!fk_reason = PlanComponent!fk_reason
         Else
            recall!fk_reason = 0 
         Endif
         PlanComponent.Remove("fk_reason")
         recall!reason = PlanComponent!component
         recall!default_interval = default_interval 'work this out
         recall!fk_default_interval_unit = fk_default_interval_unit
         recall!fk_interval_unit = fk_interval_unit
         recall!interval = interval 
         recall!due = PlanComponent!due
         recall!fk_contact_method = cmbContactMethod.Index
         recall!fk_appointment_length = const.AppointmentLengthStandard
         recall!active = True
         recall!additional_text = ""
         recall!fk_staff = modDBConnect.currentUser!fk_staff 
         recall!fk_pasthistory = pk_pasthistory
         PlanComponent!fk_recall = modRecallsDBI.Save(currentconsult, pk_recall, recall)
         PlanComponent.Remove("recall") 'this was  a flag = true or false.
         PlanComponent.Remove("fk_default_interval_unit") 'this was  a flag = true or false.
         PlanComponent.Remove("fk_interval_unit")
         PlanComponent.Remove("default_interval")
         PlanComponent.Remove("interval") 
      Endif
   Next
   '-------------------------------------
   'finally save the care plan components
   '-------------------------------------
   modPastHistoryDBI.Save_CarePlanComponents(view_careplan_components, PlanComponents, pk_pasthistory)
   modDBConnect.CommitTrans()
   ProblemLists.Refresh()
   FClinical.Refresh_Section(const.cSection_PastHistory)
   
End

Public Sub Edit()
   
   Vbox_EditArea.Enabled = True   
   With lblHealthIssue
      .Text = "Edit Care Plan For"
      .Foreground = Color.Red 
   End With
   txtAim.SetFocus()
   
End

Public Function Valid_CarePlan() As Boolean
   
   Return True 
   
End

Public Sub Settings_Save()
   
   Settings["Care Planning/HSplit_TeamCareMembers.layout"] = HSplit_TeamCareMembers.Layout
   Settings["Care Planning/VSplit_CarePlanning.Layout"] = VSplit_CarePlanning.Layout
   
End

Private Sub Settings_Load() 
   
   HSplit_TeamCareMembers.Layout = Settings["Care Planning/HSplit_TeamCareMembers.layout"] 
   VSplit_CarePlanning.Layout = Settings["Care Planning/VSplit_CarePlanning.Layout"]
   
End

Public Sub EditArea_TxtBox_LostFocus()
   
   If bExit Then Return 
   Last.pos = 0
   Last.background = Color.White 
   If Last.tag = "date due" Then
      If Not IsDate(Last.text) Then
         bExit = True   
         Last.text = ""
         bexit = False  
      End If
   End If  
   
End

Public Sub EditArea_TxtBox_GotFocus()
   
   Select Case Last.tag
      Case "team care members"
         With columnview1
            .top = Last.Parent.Parent.Parent.Top + Last.height
            .width = HSplit_TeamCareMembers.Width ' + Hbox_rbSearchBy.width 
            .Left = Last.Parent.Parent.left
            .Visible = False  
            .height = HSplit_TeamCareMembers.Height
            .Columns.count = 4
         End With
         If cvwTeamCareMembers.count Then
            iTeamCareMember = cvwTeamCareMembers.count
         Else
            iTeamCareMember = 0
         End If    
      Case "component"
         With ListView1
            .top = Last.Parent.Parent.Top + Last.height
            .width = HSplit_TeamCareMembers.Width ' + Hbox_rbSearchBy.width 
            .Left = Last.Parent.left
            .Visible = False  
            .height = HSplit_TeamCareMembers.Height
         End With
         
   End Select
   
End

Public Sub EditArea_TxtBox_Change()
   
   If Bexit Then Return 
   Select Case Last.tag  
      Case "team care members"
         If Trim(Last.text) = "" Then  
            columnview1.Visible = False  
            fk_organisation = 0
            fk_branch = 0
            fk_employee = 0
            fk_person = 0
         End If
         
      Case "responsibility" 
         Print "in change the value of iTeamCareMember is", iTeamCareMember 
         TeamCareMembers[iTeamCareMember]!responsibility = Trim(Last.text)
         Print "Responsibility=", TeamCareMembers[iTeamCareMember]!responsibility
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtTeamCareMembers.SetFocus()
         End If
      Case "historical summary"
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "") 
         End If
         txtManagementSummary.SetFocus()
      Case "management plan"
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "") 
         End If
         txtTeamCareMembers.SetFocus()
      Case "default interval"
         If txtDefaultInterval.text = "" Then 
            txtDue.text = ""
         End If
      Case "interval"
         If Trim(txtInterval.text) <> "" Then 
            Calculate_Recall_Date(txtInterval)
         End If
         
   End Select
   Editarea_NotifyData_Change(True)
   
End

Public Function EditArea_txtbox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   '----------------------------------------------------------
   'PURPOSE       Restrict key presses for validation purposes
   'HOW IT WORKS  see routines names
   'FIXME         Ian would do this much simpler I'm sure
   '-----------------------------------------------------------
   
   Dim bKeyValid As Boolean
   
   Select Case Last.Tag
      Case "date due"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_Date_DWMY, keycode)
      Case "default interval", "interval"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_Date_DWMY, keycode)
         
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TxtBox_KeyPress()
   
   Dim bkeyvalid As Boolean
   '----------------------------------------------------
   'Each line may have a different set of key exclusions
   'so only keep valid keypresses
   '----------------------------------------------------
   bkeyvalid = EditArea_txtbox_ExcludeKeys(key.code, Last.tag)
   
   If bkeyvalid = False Then
      Stop Event
      Return
   End If 
   Select Case Key.code
      Case key.Down
         If columnview1.Visible Then
            With columnview1
               .MoveFirst
               .SetFocus() 
               .Item.Selected = True   
            End With 
            
         Endif
         If ListView1.Visible Then
            With ListView1
               .MoveFirst
               .Item.Selected = True   
               .SetFocus() 
            End With 
            
         Endif
      Case key.return, key.Tab
         Select Case Last.tag
            Case "default interval"  
               '---------------------------------------------------------
               'If at this point, either the user is putting in a decault
               'for the first time, or changing an existingone
               'if no date present, insert the date from calculating
               'time from now  + the default time
               '----------------------------------------------------------
               If Not txtDue.text Then
                  Calculate_Recall_Date(txtDefaultInterval)
                  If txtDue.text Then
                     ' txtInterval.text = txtDefaultInterval.Text
                     tbAcceptComponent.SetFocus()
                  End If
               Else
                  If Not txtInterval.text Then
                     txtInterval.SetFocus
                  Else
                     tbAcceptComponent.SetFocus()
                  End If
               End If
            Case "interval"  
               Calculate_Recall_Date(txtInterval)
               If txtDue.text Then
                  
                  tbAcceptComponent.SetFocus()
               End If          
         End Select
   End Select
   
End

Public Sub EditArea_TxtBox_KeyRelease()
   
   If bExit Then Return 
   
   Select Case Last.tag
      Case "team care members"
         '-----------------------------------------------------
         'Search for a company or a person as team care members
         '-----------------------------------------------------   
         TeamCareMember_Get()
      Case "component"
         CarePlan_Component_Get()
         
   End Select
   
End

Public Sub TeamCareMembers_Add(member As Collection)
   
   Dim tcm As New Collection 
   
   tcm = New Collection
   Try tcm!summary = columnview.Item.text 'not present for patient
   Try tcm!fk_organisation = member!fk_organisation
   Try tcm!fk_branch = member!fk_branch
   Try tcm!fk_employee = member!fk_employee
   Try tcm!fk_person = member!fk_person
   ' tcm!wholename = member!title & " " & member!firstname & " " & member!surname 
   tcm!wholename = Member!wholename
   If IsNull(Member!responsibility) Then
      tcm!responsibility = ""
   Else  
      tcm!responsibility = Member!responsibility
   End If   
   '---------------------------------------
   'Ok, all seems in order, add to the list
   '---------------------------------------
   TeamCareMembers.Add(tcm, TeamCareMembers.Count)
   
   TeamCareMembers_RefreshList()
   
   txtTeamCareMembers.Clear()
   txtTeamCareMember_Responsibility.text = ""
   txtTeamCareMember_Responsibility.setfocus()
   columnview1.Visible = False 
   cvwTeamCareMembers.MoveLast()                                  'move to last on the list
   cvwTeamCareMembers.Item.Selected = True                        'highlight the selection
   cvwTeamCareMembers_Select()                                    'Display current responsiblity if it exists
   
End

Public Sub TeamCareMembers_RefreshList()
   '-------------------------------------------
   'Refreshes the list of team care members
   'columnview index = the position in the list
   '-------------------------------------------
   
   Dim TeamCareMember As Collection 
   Dim aCollection As Collection
   Dim x As Integer
   
   cvwTeamCareMembers.Clear()
   For Each TeamCareMember In TeamCareMembers
      cvwTeamCareMembers.Add(Str(x), 0) 
      cvwTeamCareMembers[(Str(x))][0] = TeamCareMembers_MakeSummary(TeamCareMember)
      Inc x
   Next
   If TeamCareMembers.count Then
      cvwTeamCareMembers.MoveFirst
      cvwTeamCareMembers.Item.Selected = True
      cvwTeamCareMembers_Click()
   End If
   
End

Public Sub TeamCareMembers_RefreshCollection()
   '-----------------------------------------------------
   'When an item is removed from a collection, its count
   'not longer reflects its internal key order
   'so rebuild it
   '-----------------------------------------------------
   
   Dim teamMember As Collection 
   
   TeamCareMembers = New Collection 
   For Each collection_member In TeamCareMembers_BeforeEdit
      teammember = New Collection
      teamMember!pk = collection_member!pk
      teammember!fk_pasthistory = collection_member!fk_pasthistory
      teammember!fk_organisation = collection_member!fk_organisation
      teammember!fk_branch = collection_member!fk_branch
      teammember!fk_employee = collection_member!fk_employee
      teammember!fk_person = collection_member!fk_person
      teammember!wholename = collection_member!wholename
      teammember!summary = collection_member!summary
      teammember!responsibility = collection_member!responsibility
      TeamCareMembers.Add(teammember, TeamCareMembers.count)
   Next
   
End

Public Sub TeamCareMembers_Init()
   '---------------------------
   'CALLED BY  EditArea_Clear()
   '---------------------------
   
   ' Dim member As New Collection 
   ' 
   ' TeamCareMembers = New Collection 
   ' '  TeamCareMember_Deleted = New Collection   
   ' cvwTeamCareMembers.Clear()
   '  Member!fk_person = currentconsult!patient!fk_person
   ' Member!wholename = "Patient: " & currentconsult!patient!wholename 
   ' Member!responsibility = "Keep record of when appointments are due\n" 
   '   "Make appointments for investigations and specialists as requested\n"
   
   ' TeamCareMembers_Add(Member)
End

Public Sub TeamCareMembers_Get()
   '-------------------------------------------------------------
   'Get the team care members from backend, they are keyed by the
   'clin_history.team_care_members.pk, no good if we want to add
   'new items to the list, so re-order the collection with keys
   'corresponding to the cvwTeamMembers.count value
   '-------------------------------------------------------------
   
   TeamCareMembers_BeforeEdit = New Collection
   TeamCareMembers_BeforeEdit = modPastHistoryDBI.TeamCareMembers_Get(pk_pasthistory) 'the old data - never changed
   TeamCareMembers_RefreshCollection()        'create a copy of this collection to keep changes
   TeamCareMembers_RefreshList()
   ' 
   
End

Public Sub ColumnView1_KeyPress()
   
   If Key.Code = Key.RETURN Then 
      ColumnView1_DblClick() 
   End If
   
End

Public Sub ColumnView1_DblClick()
   
   TeamCareMember_Select()
   columnview1.Visible = False   
   
End

Public Sub Person_Get()
   '-------------------------------------------------------------
   'Gets a list of persons who could be sole traders or employees
   '-------------------------------------------------------------
   
   Dim address As String
   
   columnview1.Visible = False 
   If Trim(txtTeamCareMembers.text) = "" Then Return 
   collection_members = modReferralsDBI.Person_Get_By_Surname(Trim(txtTeamCareMembers.text))
   columnview1.Clear()
   If collection_members.count Then 
      For Each collection_member In collection_members
         columnview1.Add(collection_member!pk_view, 0)
         columnview1[collection_member!pk_view][0] = collection_member!wholename
         columnview1[collection_member!pk_view][1] = "(" & collection_member!occupation & ")"
         columnview1.Columns[2].width = 150
         If Not IsNull(collection_member!organisation) Then
            columnview1[collection_member!pk_view][2] = collection_member!organisation & " " & collection_member!branch
         Else
            columnview1[collection_member!pk_view][2] = ""
         Endif
         Try address = Trim(collection_member!street1 & " " & collection_member!street2)
         Try address &= collection_member!town & " " & collection_member!postcode
         columnview1[collection_member!pk_view][3] = address
      Next
      columnview1.tag = txtTeamCareMembers 
      columnview1.Visible = True
      columnview1.Raise
      Return 
   Else 
      columnview1.Visible = False   
   End If
   
End

Public Sub TeamCareMembers_MakeSummary(Collection_member As Collection) As String
   '---------------------------------------------------------------------------
   'makes a summary like organisation-address-employee (occupation) for display
   '---------------------------------------------------------------------------
   
   Dim sMsg As String
   
   If IsNull(Collection_member!fk_employee) And IsNull(Collection_member!fk_organisation) Then
      '----------------------------------------------------------
      'ok- if not an organisation or an employee must be a person
      '----------------------------------------------------------
      TeamCareMember_SearchBy_Criteria = Const.contacttype_PersonsAndPatients
      sMsg = collection_member!wholename & " " & collection_member!summary 
   Else If Not IsNull(Collection_member!fk_person) Then
      TeamCareMember_SearchBy_Criteria = Const.contacttype_employee
      sMsg = collection_member!wholename & collection_member!summary
   Else If Not IsNull(Collection_member!fk_organisation) Then
      TeamCareMember_SearchBy_Criteria = Const.contacttype_organisation
      sMsg = collection_member!summary ' & " "
      ' Else
      '    TeamCareMember_SearchBy_Criteria = Const.contacttype_PersonsAndPatients 'remove this
   End If
   Return sMsg    
   
End

Public Sub TeamCareMember_Select()
   '---------------------------------------------
   'User selects a team care member from the list
   '--------------------------------------------- 
   
   bExit = True
   '-----------------------------------------------------------
   'Routine called by user clicking on list or pressing <enter>
   '-----------------------------------------------------------
   ' If listview2.Visible Then
   '    listview2.MoveCurrent   'set internal cursor to match marquee
   '    collection_member = collection_members[listview2.Item.key]
   '    Try fk_organisation = collection_member!fk_organisation
   '    Try fk_branch = collection_member!fk_branch
   '    Try fk_person = collection_member!fk_person
   '    Try fk_employee = collection_member!fk_employee
   '    bExit = False
   '    If Not teamcare_member_check_duplicated(collection_member) Then
   '       TeamCareMembers_Add(collection_member)
   '    End If
   ' End If
   ' 
   If columnview1.Visible Then
      columnview1.MoveCurrent   'set internal cursor to match marquee
      collection_member = collection_members[columnview1.Item.key]
      Try fk_organisation = collection_member!fk_organisation
      Try fk_branch = collection_member!fk_branch
      Try fk_person = collection_member!fk_person
      Try fk_employee = collection_member!fk_employee
      bExit = False
      If Not teamcare_member_check_duplicated(collection_member) Then
         TeamCareMembers_Add(collection_member)
      End If
   End If
   
   bExit = False    
   
End

Public Sub TeamCareMember_Get()
   '---------------------------------------
   'Searches for possible team care members
   '---------------------------------------
   
   Dim sMsg As String 
   
   If Trim(txtTeamCareMembers.text) = "" Then Return 
   Try Person_Get()
   If collection_members.count = 0 Then
      Try Organisation_Get()
      If collection_members.count = 0 Then
         '  Patient_Get() 
      Endif
   Endif
   Return 
   
   If Trim(txtTeamCareMembers.text) = "" Then
      ListView1.Visible = False  
      Return
   End If
   
   Select Case TeamCareMember_SearchBy_Criteria
      Case Const.contacttype_organisation
         collection_members = modContactsDBI.Organisations_Get(Trim(txtTeamCareMembers.text))
         If collection_members.count = 0 Then
            bExit = True
            rbSearchBy_branch.value = True
            bExit = False
            Return
         End If
      Case Const.contacttype_employee
         collection_members = modContactsDBI.Employee_Get(Trim(txtTeamCareMembers.text))
         If collection_members.count = 0 Then
            rbSearchBy_Organisation.value = True
            Return
         End If
      Case Const.contacttype_PersonsAndPatients 'set to inlude all patients and other persons
         collection_members = modContactsDBI.Person_Get(Trim(txtTeamCareMembers.text), const.contacttype_PersonsAndPatients)
      Case const.contacttype_branch
         collection_members = modContactsDBI.Branches_Get_Like(Trim(txtTeamCareMembers.text))
         If collection_members.count = 0 Then
            rbSearchBy_Employee.value = True
            Return
         End If
   End Select
   ListView1.Clear
   '-----------------------------------------------------------------
   'If categories exist to match the text, auto-select or show a list
   '-----------------------------------------------------------------
   If collection_members.count Then 
      Try collection_members.Remove("sql_in_english") 'ian included this for FClinical patient search
      For Each collection_member In collection_members
         Select Case TeamCareMember_SearchBy_Criteria
            Case Const.contacttype_organisation, Const.contacttype_branch
               sMsg = collection_member!organisation & " " & collection_member!branch & " " 
               sMsg &= Trim(collection_member!street1 & " " & collection_member!street2) & " " & collection_member!town & " " & collection_member!postcode 
            Case Const.contacttype_employee
               smsg = collection_member!title & " "
               sMsg &= collection_member!firstname & " "
               smsg &= collection_member!surname & " "
               sMsg &= "(" & collection_member!occupation & ") "
               sMsg &= collection_member!organisation & " " & collection_member!branch & " "  
               sMsg &= Trim(collection_member!street1 & " " & collection_member!street2) & " " & collection_member!town & " " & collection_member!postcode 
            Case Const.contacttype_PersonsAndPatients
               smsg = collection_member!wholename
               sMsg &= Trim(collection_member!street1 & " " & collection_member!street2) & " " & collection_member!town & " " & collection_member!postcode 
               
         End Select
         ListView1.Add(collection_member!pk_view, sMsg)
      Next 
      ListView1.Visible = True
      ListView1.Raise
      ListView1.tag = txtTeamCareMembers
      Return 
   Else 
      ListView1.Visible = False  
   End If
   
End

Public Sub TeamCareMember_AddPatient()
   
   Dim member As New Collection
   
   bExit = True
   rbSearchBy_person.value = True
   bExit = False
   ListView1.Clear 'bad fudge see TeamCaremembers_add for reason
   fk_person = currentconsult!patient!fk_person
   fk_organisation = 0
   fk_branch = 0
   fk_employee = 0
   Member!fk_person = currentconsult!patient!fk_person
   Member!wholename = currentconsult!patient!wholename 
   If Not teamcare_member_check_duplicated(Member) Then
      TeamCareMembers_Add(member)
   End If
   
End

Public Function teamcare_member_check_duplicated(Member As Collection) As Boolean
   '--------------------------------
   'returns False if not a duplicate
   '-------------------------------- 
   
   Dim sMsg As String = "You have selected:\n\n"
   
   If Not (fk_organisation Or fk_branch Or fk_employee Or fk_person) Then
      Select Case TeamCareMember_SearchBy_Criteria
         Case Const.contacttype_employee
            smsg = "The employee "
         Case Const.contacttype_organisation
            smsg = "The organisation "
         Case Const.contacttype_PersonsAndPatients
            smsg = "The person "
      End Select
      sMsg &= "that you are looking for does not yet exist in the contacts database.\n\n" 
      sMsg &= "You cannot enter free text here.\n\n"
      sMsg &= "Please add the details via the contacts section before proceeding."
      Goto reset
   End If
   For Each member In TeamCareMembers
      Select Case TeamCareMember_SearchBy_Criteria
         Case Const.contacttype_employee
            If member!fk_employee = fk_employee Then
               sMsg &= member!summary & "\n\nA person of this name already exsits in the team care list" 
               Goto reset
            End If
         Case Const.contacttype_organisation
            If member!fk_organisation = fk_organisation And member!fk_branch = fk_branch Then
               sMsg &= member!summary & "\n\nA person of this name already exsits in the team care list" 
               Goto reset 
            End If   
         Case Const.contacttype_PersonsAndPatients
            If member!fk_person = fk_person Then
               sMsg &= member!wholename & " " & member!summary & "\n\nA person Of this name already exsits In the team care list"
               Goto reset
            End If   
      End Select
   Next  
   Return False
   Reset:
   ListView1.Visible = False 
   txtTeamCareMembers.SetFocus()
   txtTeamCareMembers.Text = ""
   Message.Info(sMsg)  
   Return True 'ie is a duplicate
   
End

Public Sub mnuTeamCare_Click()
   ' '--------------------------------------------------------------------------
   ' 'Users has selected a team care member
   ' 'As all contacts must be added via contacts modules these may not be edited
   ' '--------------------------------------------------------------------------
   ' 
   ' Dim c As Collection 
   ' Dim the_key As Integer
   ' 
   ' cvwTeamCareMembers.MoveCurrent()
   ' 
   ' Select Case Last.tag
   '    Case "delete"
   '       '----------------------------------------------------------------
   '       'Delete a team care member and details, keeping a copy
   '       'The teamcaremembers collection is 0-n keyed on the list
   '       'mark item as deleted in DB
   '       'keep a copy in TeamCareMember_Deleted collectin keyed to the pk
   '       '----------------------------------------------------------------
   '       modDBConnect.BeginTrans() 'noop
   '       
   '       modPastHistoryDBI.TeamCareMembers_Delete(TeamCareMembers[cvwTeamCareMembers.Item.Key]!pk)  
   '       modDBConnect.CommitTrans()                                                                
   '       TeamCareMember_Deleted.Add(TeamCareMembers[cvwTeamCareMembers.Item.Key], TeamCareMembers[cvwTeamCareMembers.Item.Key]!pk) 
   '       TeamCareMembers_Get() 'refresh the collection
   '       mnuTeamCare_UndoDelete.Enabled = True  
   '    Case "undo delete"
   '       '---------------------
   '       'One level of undelete
   '       '---------------------
   '       'TeamCareMembers.Add(TeamCareMember_Deleted[TeamCareMember_Deleted.key])
   '       If TeamCareMember_Deleted.Length Then
   '          For Each c In TeamCareMember_Deleted
   '             the_key = c!pk
   '          Next
   '          
   '          modDBConnect.BeginTrans()
   '          
   '          modPastHistoryDBI.TeamCareMembers_UnDelete(TeamCareMember_Deleted[the_key]!pk)
   '          modDBConnect.CommitTrans()
   '          TeamCareMember_Deleted = New Collection 
   '          TeamCareMembers_Get()
   '          mnuTeamCare_UndoDelete.Enabled = False 
   '       End If 
   '    Case "help"
   '    Case "quit"
   ' End Select
   ' 
   
End

Public Sub cvwTeamCareMembers_Menu()
   
   If cvwTeamCareMembers.count Or TeamCareMember_Deleted.count Then
      If TeamCareMember_Deleted.count Then
         mnuTeamCare_UndoDelete.Enabled = True
      End If
      If cvwTeamCareMembers.count = 0 Then
         mnuTeamCare_Delete.Enabled = False  
      Else
         mnuTeamCare_Delete.Enabled = True     
      End If
      mnuTeamCare.Popup()
   End If
   
End

Public Sub cvwTeamCareMembers_Click()
   
   cvwTeamCareMembers_Select()
   
End

Public Sub cvwTeamCareMembers_Select()
   '----------------------------------------------------------------
   'Display the team care members responsibility
   'either user clicks on or scrolls down to a row of the columnview
   'We cannot edit team members except via the contacts database,
   '----------------------------------------------------------------
   
   If bexit Then Return 
   cvwTeamCareMembers.MoveCurrent()
   iTeamCareMember = Val(cvwTeamCareMembers.Item.key)
   Print "cvwTeamCareMembers.Item.key", cvwTeamCareMembers.Item.key
   If Not IsNull(TeamCareMembers[iTeamCareMember]!wholename) Then
      ' tlResponsibility.text = "Responsibilities of " & TeamCareMembers[iTeamCareMember]!wholename 
      lblMember.text = TeamCareMembers[iTeamCareMember]!wholename 
   End If
   bExit = True
   If IsNull(TeamCareMembers[iTeamCareMember]!responsibility) Then
      txtTeamCareMember_Responsibility.text = ""
   Else
      txtTeamCareMember_Responsibility.text = TeamCareMembers[iTeamCareMember]!responsibility
   End If
   bExit = False  
   
End

Public Sub cvwCareComponents_Click()
   '-----------------------------------------------------------------------
   'edit the row highlighted, if not yet saved, remove from list at editing
   '-----------------------------------------------------------------------
   
   bediting = True
   bexit = True
   cvwCareComponents.MoveCurrent
   currentCarePlanComponent = PlanComponents[cvwCareComponents.Item.key]
   txtComponent.text = currentCarePlanComponent!component
   txtdue.text = currentCarePlanComponent!due
   'if this is as yet unsaved, remove it from the array when edited
   If IsNull(currentCarePlanComponent!pk_careplan_components_due) Then
      PlanComponents.Remove(cvwCareComponents.Item.key)
      cvwCareComponents_Refresh()
   End If
   bExit = False
   
End

Public Sub CarePlan_Component_Get()
   '--------------------------------------------------
   'User is adding a new care plan component e.g hba1c
   '--------------------------------------------------   
   
   If Len(Trim(txtComponent.text)) = 0 Then  
      Listview1.Visible = False  
      Return
   End If
   ' collection_members = modPastHistoryDBI.CarePlan_Component_Names_Get(Trim(txtComponent.text))
   collection_members = modRecallsDBI.Get_Reasons(Trim(txtComponent.text))
   listview1.Clear
   '-----------------------------------------------------------------
   'If categories exist to match the text, auto-select or show a list
   '-----------------------------------------------------------------
   If collection_members.count Then 
      For Each collection_member In collection_members
         ' Listview1.Add(collection_member!pk, collection_member!component)
         Listview1.Add(collection_member!pk_reason, collection_member!reason)
      Next 
      Listview1.Visible = True
      Listview1.Raise
      Listview1.tag = txtComponent
      Return 
   Else
      listview1.Visible = False   
   End If
   
End

Public Function duplicate_component() As Boolean
   
End

Public Sub CarePlan_Component_Select(Optional bSourceIsTextbox As Boolean = False)
   '-------------------------------------------------------------------------------
   'User is selecting a care plan component from the list or <ENTER> on the textbox
   '-------------------------------------------------------------------------------
   
   Dim x As Integer
   Dim bFoundMatch As Boolean
   Dim SelectedReason As Collection
   
   fk_component = 0
   If Trim(txtComponent.text) = "" Then Return 
   bExit = True   
   '-------------------------------------------------------------------
   'If user just hit <enter> form the textbox
   'assume they want either their text or have seen a match in the list
   'all this may not be needed, unless I decide to keep the component key
   'instead of looking the keys up every save.
   '-------------------------------------------------------------------
   If bSourceIsTextbox Then
      If Listview1.Visible = True Then    
         listview1.MoveFirst
         For x = 0 To listview1.count - 1
            If Lower(listview1.Item.text) = Trim(Lower(listview1.tag.text)) Then
               Goto SetRecall
               Break
            End If
         Next
         listview1.Visible = False  
      End If   
      txtDefaultInterval.SetFocus() 'this is a new recall reason
      Return 
   End If 
   Goto SetRecall
   
   SetRecall:
   
   Listview1.MoveCurrent 
   SelectedReason = collection_members[listview1.Item.key]
   fk_recall_reason = listview1.Item.Key 
   txtComponent.text = Listview1.Item.Text
   txtDefaultInterval.text = SelectedReason!interval & SelectedReason!abbrev_text 
   interval = SelectedReason!interval
   fk_interval_unit = SelectedReason!fk_interval_unit
   default_interval = SelectedReason!interval
   'this is not a type-o fk_default_interval_unit will always be fk_interval_unit 
   'though the interval value may be different - see note in the recalls module
   'by searching for AT SOME STAGE RE-THINK THIS.
   fk_default_interval_unit = SelectedReason!fk_interval_unit '
   Calculate_Recall_Date(txtDefaultInterval)
   
   Listview1.Visible = False 
   tbAcceptComponent.SetFocus()
   bExit = False    
   
End

Public Sub CarePlan_Component_Select_old(Optional bSourceIsTextbox As Boolean = False)
   '-------------------------------------------------------------------------------
   'User is selecting a care plan component from the list or <ENTER> on the textbox
   '-------------------------------------------------------------------------------
   
   Dim x As Integer
   Dim bFoundMatch As Boolean
   
   fk_component = 0
   If Trim(txtComponent.text) = "" Then Return 
   bExit = True   
   '-------------------------------------------------------------------
   'If user just hit <enter> form the textbox
   'assume they want either their text or have seen a match in the list
   'all this may not be needed, unless I decide to keep the component key
   'instead of looking the keys up every save.
   '-------------------------------------------------------------------
   If bSourceIsTextbox Then
      If Listview1.Visible = True Then    
         listview1.MoveFirst
         For x = 0 To listview1.count - 1
            If Lower(listview1.Item.text) = Trim(Lower(listview1.tag.text)) Then
               Listview1.Visible = False  
               fk_component = listview1.item.key 'remove all the above if don't use this
               Break
            End If
         Next
         listview1.Visible = False  
      End If   
      txtDue.SetFocus()
      Return 
   End If 
   '---------------------------------------
   'Routine called by user clicking on list
   '---------------------------------------
   Listview1.MoveCurrent   'set internal cursor to match marquee
   txtComponent.text = Listview1.Item.Text
   Listview1.Visible = False  
   bExit = False       
   
End

Public Sub PlanComponents_Add(currentCarePlanComponent As Collection)
   
   PlanComponent = New Collection
   
   PlanComponent!due = Val(txtDue.text)
   PlanComponent!component = Trim(txtComponent.text)
   PlanComponents.Add(PlanComponent, PlanComponents.count)
   cvwCareComponents_Refresh()
   
End   

' Public Sub cvwCareComponents_Refresh()
'    '--------------------------------------------
'    'Reloads the care plan components to the list
'    '--------------------------------------------
' 
'    Dim existing_component As Collection
'    Dim x As Integer
'    
'    cvwCareComponents.Clear()
'    For Each PlanComponent In PlanComponents
'       
'       cvwCareComponents.Add(x, 0)
'       cvwCareComponents[x][0] = PlanComponent!component
'       cvwCareComponents[x][1] = Format(PlanComponent!due, "dd/mm/yyy")
'       Inc x
'    Next 
' End

Public Sub Components_CarePlan_Display()
   '----------------------------------------------------------------------------
   'Gets collection of any care plan components and when due eg hba1c, eye check
   '----------------------------------------------------------------------------  
   
   view_careplan_components = modPastHistoryDBI.Get_CarePlan_Components(pk_pasthistory)
   CarePlan_Components_Set_data()
   
End

Public Sub CarePlan_Components_Set_data()
   '---------------------------------------------------------
   'Makes a copy of each of the existing care plan components
   'contained in view_careplan_components and put this new
   'collection into PlanComponents, that way
   'the old can be compared to the new when saved
   'Loads any existing data into the scroll view
   'FIXME IMPLEMENT THE RECALLS
   'temp: trying now to use columnview, so code is mixed
   '---------------------------------------------------------
   Dim existing_component As Collection
   Dim member As Collection 
   Dim x As Integer
   
   PlanComponents = New Collection 
 '  PlanComponent = modUtil.Copy_Collection(view_careplan_components)
   For Each existing_component In view_careplan_components
      member = New Collection 
      member!component = existing_component!component
      member!fk_pasthistory = existing_component!fk_pasthistory
      member!pk_careplan_components = existing_component!pk_careplan_components
      If Not IsNull(existing_component!fk_recall) Then
         member!fk_recall = existing_component!fk_recall
         member!recall = True
      Else
         member!recall = False
      End If 
      member!fk_reason = existing_component!fk_reason
      member!due = existing_component!due
      member!default_interval = existing_component!default_interval
      member!fk_default_interval_unit = existing_component!fk_default_interval_unit
      member!fk_interval_unit = existing_component!fk_interval_unit
      member!interval = existing_component!interval
      PlanComponents.Add(member, x)
      Inc x
   Next
   cvwCareComponents_Refresh()
   
End

Public Sub cvwCareComponents_Refresh()
   '--------------------------------------------
   'Reloads the care plan components to the list
   '--------------------------------------------
   
   Dim existing_component As Collection
   Dim x As Integer
   
   cvwCareComponents.Clear()
   For Each PlanComponent In PlanComponents
      
      cvwCareComponents.Add(x, 0)
      cvwCareComponents[x][1] = PlanComponent!component
      cvwCareComponents[x][0] = Format(PlanComponent!due, "dd/mm/yyy")
      If PlanComponent!fk_recall Then
         cvwCareComponents[x][2] = "Auto Recall" 'fixme put in details
      Else
         cvwCareComponents[x][2] = "Opportunistic"
      End If    
      Inc x
   Next 
   
End

Public Sub CarePlan_Components_Calculate_Recall_Date(txt As Textbox)
   '--------------------------------------------
   'Works out a date from e.g 18M or 2Y
   'FIXME put in weeks and days
   '--------------------------------------------
   
   Dim sIntervalUnits As String 'eg if txtdate contains 3M then units interval is 3
   Dim iNumberOfMonths As Integer      'do not need both these declared, but do for readability
   Dim iNumberOfYears As Integer 
   Dim iNumberOfDays As Integer
   Dim iNumberOfWeeks As Integer
   Dim vPossibleDate As Variant
   Dim aDate As Date
   Dim x As Integer
   
   bExit = True 'stop change event of edit area triggering
   
   If UCase(Right(Trim(txt.text), 1)) = "M" Then
      '---------------------------------------------------------------------------
      'Try and convert the rest of the string (ie left part which should be number
      'to a number, if error, pop up invalid date and return
      'Remember that  bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code) has
      'only allowed numbers or mM or Yy for this textbox, but some idiot could
      'have tried out patience by typing in e.g 10m10M or something
      '---------------------------------------------------------------------------
      Try iNumberOfMonths = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txt.text = "" 
         Return
      End If
      ' If txt.tag = "interval" Then
      '    fk_interval_unit = const.Units_month
      '    interval = iNumberOfMonths
      ' Else
      '    fk_default_interval_unit = const.Units_month
      '    default_interval = iNumberOfMonths
      '    If Trim(txtInterval.text) = "" Then 
      '      fk_interval_unit = const.Units_month
      '      interval = iNumberOfMonths
      '      txtInterval.text = txtDefaultInterval.Text
      '    End If
      ' Endif
      txt.text = Format(DateAdd(Now, gb.Month, iNumberOfMonths), "dd/mm/yyyy")
      
   Else If UCase(Right(Trim(txt.text), 1)) = "Y" Then
      '---------------------------------------------------------------------------
      'Try and convert the rest of the string (ie left part which should be number
      'to a number, if error, pop up invalid date and return
      'Remember that  bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code) has
      'only allowed numbers or mM or Yy for this textbox, but some idiot could
      'have tried out patience by typing in e.g 10m10M or something
      '---------------------------------------------------------------------------
      Try iNumberOfYears = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txt.text = "" 
         Return
      End If
      
      txt.text = Format(DateAdd(Now, gb.Year, iNumberOfYears), "dd/mm/yyyy")
      '    If txt.tag = "interval" Then
      '      fk_interval_unit = const.Units_year
      '      interval = iNumberOfYears
      '    Else
      '       fk_default_interval_unit = const.Units_year
      '       default_interval = iNumberOfYears
      '       If Trim(txtInterval.text) = "" Then 
      '           fk_interval_unit = const.Units_year
      '           interval = iNumberOfYears
      '           txtInterval.text = txtDefaultInterval.Text
      '       End If
      '   
      '    End If
      
   Else 
      If LCase(Trim(txt.text)) = "now" Then
         txt.text = Format(Now, "dd/mm/yyyy")
      End If  
   End If
   bExit = False 
   
End

Public Sub rbTeamCareMember_SearchCriteria_Click()
   
   TeamCareMember_SearchBy_Criteria = Last.tag
   If bExit Then Return 
   TeamCareMember_Get()
   
End

Public Sub txtdue_change()
   
   If bexit Then Return 
   If Trim(Last.text) Then EditArea_Notify_DataChange(True)
   
End

Public Sub txtdue_gotfocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub txtdue_Lostfocus()  
   
   Last.background = Color.white
   
End

Public Sub txtdue_Keypress()
   
   If Key.code = Key.return Then
      
      CarePlan_Components_Calculate_Recall_Date(Last)
      If IsDate(Last.text) Then
         Careplan_Components_Accept()
      End If  
   Endif 
   
End

Public Sub Careplan_Components_Accept() 
   '-----------------------------------------------------------------------------------------------  
   'user adding new or changing existing
   'when editing currentCarePlanComponent =PlanComponents[cvwCareComponents.Item.key]
   'As these are equivalent, changing one, ie currentCarePlanComponent automatically changes
   'the contents ofcurrent_careplan_components[cvwCareComponents.Item.key], so it suffices,just
   'to refresh the list. The original fk_component isn't used FIXME DELETE ME as the save
   'routine dis-regards it anyway and re-looks it up
   '-----------------------------------------------------------------------------------------------
   PlanComponent = New Collection
   PlanComponent!fk_reason = fk_recall_reason
   PlanComponent!component = Trim(txtComponent.text)
   PlanComponent!due = Val(txtdue.text)
   If chkautoRecall.value = True Then
      PlanComponent!recall = True
   Else
      PlanComponent!recall = False
   End If 
   PlanComponent!default_interval = default_interval
   PlanComponent!fk_default_interval_unit = fk_default_interval_unit
   PlanComponent!fk_interval_unit = fk_interval_unit
   PlanComponent!interval = interval
   If IsNull(PlanComponent!pk_careplan_components) Then
      PlanComponents.Add(PlanComponent, PlanComponents.count)
   End If

   cvwCareComponents_Refresh()
   bexit = True
   Careplan_Component_New()
   
   bEditing = False
   bExit = False  
   txtComponent.SetFocus()
   
End

Public Sub Careplan_Component_New()
   '  bExit = True
   
   PlanComponent = New Collection 
   txtComponent.Clear
   txtDue.Clear   
   txtDefaultInterval.Clear
   txtInterval.Clear
   fk_recall_reason = 0
   ' bExit = False  
   
End

Public Sub ListView1_KeyPress()
   '------------------------------------------------------------------
   'Act only on the <ENTER> key display what is in list in the textbox
   '------------------------------------------------------------------
   
   If Key.code = Key.Return Then 
      
      ListView1_DblClick
   End If
   
End

Public Sub ListView1_DblClick()
   '---------------------------------------------------------------------
   'CALLED BY     :listview1_keypress(enter) or
   '              :user double clicking on a row of a list
   'WHAT IT DOES  :Accepts the list contents into the appropriate textbox
   '              :and the listkey into the appropriate collection
   '---------------------------------------------------------------------
   
   Select Case ListView1.Tag.tag
      Case "component" 
         CarePlan_Component_Select()
      Case "team care members"
         TeamCareMember_Select()
         txtTeamCareMembers.SetFocus()
   End Select
   ListView1.Visible = False
   
End

Public Sub Organisation_Get()
   '--------------------------------------------------
   'Gets list of all organisations and their branches
   '-------------------------------------------------
   
   columnview1.Visible = False 
   If Trim(txtTeamCareMembers.text) = "" Then Return 
   fk_organisation = 0
   fk_branch = 0
   collection_members = modContactsDBI.Organisations_Get(Trim(txtTeamCareMembers.text))
   If Not collection_members.count Then Return 
   columnview1.Clear()
   '-----------------------------------------------------------------------------------
   'If collection_memberes of an organisation  exist to match the text, auto-select or show a list
   '-----------------------------------------------------------------------------------
   For Each collection_member In collection_members
      Columnview1.Add(collection_member!pk_view, 0)
      Columnview1[collection_member!pk_view][0] = collection_member!organisation
      Columnview1[collection_member!pk_view][1] = collection_member!branch
      Columnview1[collection_member!pk_view][2] = Trim(collection_member!street1 & " " & collection_member!street2)
      Columnview1[collection_member!pk_view][3] = collection_member!suburb & " " & collection_member!postcode
   Next 
   
   '  If collection_members.count = 1 Then 
   '   TeamCareMember_Select()
   '    Return  
   'End If
   columnview1.Visible = True
   columnview1.Raise
   columnview1.tag = txtTeamCareMembers   
   
End

Public Sub EditAreaButtons_Click()
   '---------------------------------------------------
   'User has clicked on either the accept or ok buttons
   'at the bottom of the editing area
   '----------------------------------------------------
   
   Print TeamCareMembers
   Select Case Last.tag
      Case "accept"
         '---------------------------------------------------
         'Accept everything in editing area either to its
         'existing spot in PH collection ie
         'modglobal.clinicalform.currentcurrentconsult.patient!past_history
         'of add to collection if a new problem
         '---------------------------------------------------
         Save()
      Case "add component"
         If Trim(txtComponent.text) <> "" And Trim(txtDue.text) <> "" Then
            Careplan_Components_Accept()
         Endif
      Case "new component"
         bexit = True
         txtComponent.text = ""
         txtDue.text = ""
         bediting = False  
         bexit = False  
         currentCarePlanComponent = New Collection
         listview1.Visible = False  
   End Select
   
End

Public Sub EditArea_TxtBox_Activate()
   '-----------------
   'Enter key pressed
   '-----------------   
   
   Select Case Last.tag
      Case "date due"
         modEditAreaHelpers.Calculate_Date_From_Interval(Last)
         If IsDate(Trim(Last.text)) Then 
            Careplan_Components_Accept
         Else
            Last.setfocus()
         End If 
      Case "component"
         CarePlan_Component_Select(True) 'if true - then this routine knows user hit enter on the textbox
   End Select
   
End

Public Sub Calculate_Recall_Date(txt As Textbox)
   '--------------------------------------------
   'Works out a date from e.g 18M or 2Y
   'FIXME put in weeks and days
   '--------------------------------------------
   
   Dim sIntervalUnits As String 'eg if txtDue contains 3M then units interval is 3
   Dim iNumberOfMonths As Integer      'do not need both these declared, but do for readability
   Dim iNumberOfYears As Integer 
   Dim iNumberOfDays As Integer
   Dim iNumberOfWeeks As Integer
   Dim vPossibleDate As Variant
   Dim aDate As Date
   Dim x As Integer
   
   bExit = True 'stop change event of edit area triggering
   If UCase(Right(Trim(txt.text), 1)) = "M" Then
      '---------------------------------------------------------------------------
      'Try and convert the rest of the string (ie left part which should be number
      'to a number, if error, pop up invalid date and return
      'Remember that  bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code) has
      'only allowed numbers or mM or Yy for this textbox, but some idiot could
      'have tried out patience by typing in e.g 10m10M or something
      '---------------------------------------------------------------------------
      Try iNumberOfMonths = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txtDue.text = "" 
         Return
      End If
      If txt.tag = "interval" Then
         fk_interval_unit = const.Units_month
         interval = iNumberOfMonths
      Else
         fk_default_interval_unit = const.Units_month
         default_interval = iNumberOfMonths
         If Trim(txtInterval.text) = "" Then 
            fk_interval_unit = const.Units_month
            interval = iNumberOfMonths
            txtInterval.text = txtDefaultInterval.Text
         End If
      Endif
      txtDue.text = Format(DateAdd(Now, gb.Month, iNumberOfMonths), "dd/mm/yyyy")
      
   Else If UCase(Right(Trim(txt.text), 1)) = "Y" Then
      '---------------------------------------------------------------------------
      'Try and convert the rest of the string (ie left part which should be number
      'to a number, if error, pop up invalid date and return
      'Remember that  bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code) has
      'only allowed numbers or mM or Yy for this textbox, but some idiot could
      'have tried out patience by typing in e.g 10m10M or something
      '---------------------------------------------------------------------------
      Try iNumberOfYears = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txtDue.text = "" 
         Return
      End If
      
      txtDue.text = Format(DateAdd(Now, gb.Year, iNumberOfYears), "dd/mm/yyyy")
      If txt.tag = "interval" Then
         fk_interval_unit = const.Units_year
         interval = iNumberOfYears
      Else
         fk_default_interval_unit = const.Units_year
         default_interval = iNumberOfYears
         If Trim(txtInterval.text) = "" Then 
            fk_interval_unit = const.Units_year
            interval = iNumberOfYears
            txtInterval.text = txtDefaultInterval.Text
         End If
         
      End If
      
   Else If UCase(Right(Trim(txt.text), 1)) = "W" Then
      Try iNumberOfWeeks = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txtDue.text = "" 
         Return
      End If
      
      If txt.tag = "interval" Then
         fk_interval_unit = const.Units_week
         interval = iNumberOfWeeks
      Else
         fk_default_interval_unit = const.Units_week
         default_interval = iNumberOfWeeks
         If Trim(txtInterval.text) = "" Then 
            fk_interval_unit = const.Units_week
            interval = iNumberOfWeeks
            txtInterval.text = txtDefaultInterval.Text
         End If
         
      Endif
      txtDue.text = Format(DateAdd(Now, gb.Week, iNumberOfWeeks), "dd/mm/yyyy")
      
   Else
      
      If UCase(Right(Trim(txt.text), 1)) = "D" Then
         Try iNumberOfdays = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
         If Error Then
            txtDue.text = "" 
            Return
         End If
         If txt.tag = "interval" Then
            fk_interval_unit = const.Units_day
            interval = iNumberOfdays
         Else
            fk_default_interval_unit = const.Units_day
            default_interval = iNumberOfdays
            If Trim(txtInterval.text) = "" Then 
               fk_interval_unit = const.Units_day
               interval = iNumberOfdays
               txtInterval.text = txtDefaultInterval.Text
            End If
         Endif
      End If
      txtDue.text = Format(DateAdd(Now, gb.Day, iNumberOfdays), "dd/mm/yyyy")
   End If
   bExit = False 
   
End

' SelectedReason = recallreasons[listview1.Item.key]
' Select Case listview1.Tag.tag
'    Case "recall for"
'       '-------------------------------------------
'       'User has been searching for a recall reason
'       '-------------------------------------------    
'       txtRecallFor.text = listview1.Item.Text
'       fk_reason = listview1.Item.Key 
'       lblRecallForInvalid.Visible = False
'       listview1.Visible = False
'       '----------------------------------------------------------
'       'When first selected set actual interval = default interval
'       '----------------------------------------------------------
'       txtDefaultInterval.text = SelectedReason!interval & SelectedReason!abbrev_text 
'       txtInterval.text = txtDefaultInterval.text 
'       '--------------------------------------------------------------
'       'Set variables,  Calculate_Recall_Date() sets fk_interval_units
'       'if interval is changed  by user
'       '--------------------------------------------------------------
'       interval = SelectedReason!interval
'       fk_interval_unit = SelectedReason!fk_interval_unit
'       
'       default_interval = SelectedReason!interval
'       fk_default_interval_unit = SelectedReason!fk_interval_unit
'       
'       Calculate_Recall_Date(txtDefaultInterval)
'       chkPatientDefaultInterval.value = True
'       '----------------------------------------------------
'       'Lastly, check if any template exists for this reason
'       'if reason = matched to a combo item, auto-show
'       'Can't use  cmbTemplates.Find(Trim(txtRecallFor.text))
'       'because this is case sensitive
'       '----------------------------------------------------
'       If cmbTemplates.Find(Trim(txtRecallFor.text)) <> -1 Then
'          cmbTemplates.index = cmbTemplates.Find(Trim(txtRecallFor.text))
'       End If   
'       ' For Each Template In templates
'       '    If Trim(Lower(txtRecallFor.text)) = Lower(template!name) Then
'       '       cmbTemplates.index = templates.Key
'       '       cmbTemplates_click()
'       '       Break
'       '    End If
'       ' Next
'       tbSave.SetFocus()
'       '---------------------------------------------------------
'       'At this point, the user either accepts all these defaults
'       'or goes back and changes them.
'       '---------------------------------------------------------

Public Sub EditAreaButtons_KeyPress()

   If key.code = key.return Then
      Select Case Last.tag
         Case "add component" 
             Careplan_Components_Accept() 
      End Select
   Endif
   
End
