' Gambas class file

Private CarePlans As Collection
Private CarePlan As Collection
Private TeamCareMembers As Collection
Private TeamCareMember As Collection
Private PlanComponents As Collection
Private PlanComponent As Collection
Private HealthIssues As Collection
Private view_careplan_components As Collection 
Private HealthIssue As Collection
Private TeamCareMember_SearchBy_Criteria As Integer
Private current_careplan_components As Collection
Private currentCarePlanComponent As COLLECTION   
Private collection_members As Collection
Private collection_member As Collection 
Private bExit As Boolean
Private currentconsult As CConsult
Public Problemlists As FPastHistoryProblemLists
Public Obs As Observer
Private bediting As Integer
Private fk_organisation As Integer
Private fk_branch As Integer
Private fk_person As Integer
Private fk_employee As Integer
Private pk_pasthistory As Integer
Private fk_coding_system As Integer
Private fk_code As String 
Private fk_progressnote As Integer 
Private iTeamCareMember As Integer
Private iCol As Integer

Public Sub Init(cons As Cconsult)
   
   currentconsult = cons 
   With ProblemLists = New FPastHistoryProblemLists(HBox_ProblemLists)
      .Init(currentconsult, "Care Planning")
   End With
   obs = New Observer(Problemlists.cvwProblemsActive) As "HealthIssues"
   obs = New Observer(Problemlists.cvwProblemsMajor) As "HealthIssues"
   obs = New Observer(Problemlists.cvwProblemsInActive) As "HealthIssues"
   
   lblmeasure.text = "  Management Summary  "
   modEditAreaHelpers.Resize_labels(Vbox_CarePlanning, lblmeasure)
   Reload()
   CarePlan_New()
   
End

Public Sub HealthIssues_Click()
   
   Stop Event
   
   HealthIssue = currentconsult!past_history[Last.item.key]
   txtHealthIssue.text = UCase(HealthIssue!description)
   ' If Not IsNull(HealthIssue!combined_term_code) Then
   '  lblCarePlanning.Text &= " diagnosed in " & HealthIssue!year_onset & " at age " & HealthIssue!age_onset & "Coding:" & HealthIssue!system & " [" & HealthIssue!combined_term_code & "]"
   'Endif
   txtAim.text = HealthIssue!aim_of_plan
   txtHistoricalSummary.text = HealthIssue!condition_summary
   txtManagementSummary.text = HealthIssue!management_summary
   
End

Public Sub Reload()
   
End

Public Sub CarePlan_New()
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   
   If flag Then 
      vbox_EditingArea.Padding = 1
      With tbAccept
         .Foreground = Color.Red
         .Enabled = True   
      End With
      
   Else
      vbox_EditingArea.Padding = 0
      With tbaccept
         .Foreground = Color.black
         .Enabled = False  
      End With
   End If
   
End
Public Sub EditArea_Clear()
   '----------------------------------------------------------------
   'Clears the editing area - ie clears all txtboxes, checkboxes and
   'resets all variables, sets foreground of error message to white
   'to make them 'disappear'
   'clin_history.data_past_history has these fields
   ' removed me: kk=I checked this was set 
   '   pk serial 
   '   fk_consult          kk
   '   age_onset           KK
   '   age_onset_units
   '   description         kk
   '   notes               kk
   '   fk_laterality       kk
   '   year_onset          KK
   '   active              kk
   '   operation           kk
   '   cause_of_death      kk
   '   confidential        kk
   '   major             Inc inbox_auto_process_counter
   '   deleted             kk
   '   year_onset_uncertain  kk
   '   management_summary    kk
   '   condition_summary     kk
   '   team_care_members  ---------
   '   risk_factor              kk
   '   fk_coding_system integer kk
   '   fk_code integer          kk
   '
   '   FIXME RICHARD remove hard code for coding system to config
   'fixme richard to allow year or month units
   '----------------------------------------------------------------
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   ' chkRiskFactor.Value = False   
   ' rbConfidentialNo.value = True
   ' rbLateralityNone.value = True
   ' txtComponent.Clear()
   txtDue.Clear()
   
   cvwCareComponents.Clear()
 '  bEditing = False
   '----------------------------------------------------------------------
   'Reset gui-elements to start up condition
   'Remove padding to edit area (it's background is red) white = no change
   '----------------------------------------------------------------------
   EditArea_Notify_DataChange(False)
   listview2.Visible = False  
   pk_pasthistory = 0
   fk_coding_system = 0
   fk_code = 0
   fk_progressnote = -1
   Vbox_EditingArea.Enabled = False 
   bExit = False
   
End

Public Sub Editarea_NotifyData_Change()
   
End

Public Sub Save()
   
   Reload()
   
End

Public Sub Edit()
   
End

Public Function Valid_CarePlan() As Boolean
   
   Return True 
   
End

Public Sub Settings_Save()
   
End

Private Sub Settings_Load() 
   
End

Public Sub EditArea_TxtBox_GotFocus()
   
   Select Case Last.tag
      Case "team care members"
         With listview2
            .top = Last.Parent.Parent.Top + Last.height
            .width = txtTeamCareMembers.Width ' + Hbox_rbSearchBy.width 
            .Left = Last.Parent.Parent.left
            .Visible = False  
            .border = False   
         End With
   End Select
   
End

Public Sub EditArea_TxtBox_Change()
   
   Select Case Last.tag  
      Case "team care members"
         If Trim(Last.text) = "" Then  
            listview2.Visible = False  
            fk_organisation = 0
            fk_branch = 0
            fk_employee = 0
            fk_person = 0
         End If   
      Case "responsibility" 
         Try TeamCareMembers[iTeamCareMember]!responsibility = Trim(Last.text)
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtTeamCareMembers.SetFocus()
         End If
   End Select
   
End

Public Sub EditArea_TxtBox_KeyPress()
   
   Select Case Last.tag
      Case "team care members"
         '-------------------------------------------
         'Add team members names and responsibilities
         '-------------------------------------------
         If Trim(txtTeamCareMembers.text) = "" Then
            tbAccept.SetFocus()
         Else
            '---------------------------------------------------
            'Add the next team member and set focus for next one
            '---------------------------------------------------
            txtTeamCareMember_Responsibility.SetFocus()
         End If
      Case "care plan component"
         ' '------------------------------------------------------------
         'First calculate the date if user typed in numberM or numberY
         '------------------------------------------------------------
         ' If icol Mod 2 Then
         '    CarePlan_Components_Calculate_Recall_Date(txtComponent)
         ' End If
         ' grdComponents[irow, icol].text = txtComponent.Text
         ' CarePlan_Components_Update_Collection()
         ' '----------------------------------------------------------
         ' 'Now, don't allow a new row to be added, if the current row
         ' 'hasn't been filled
         ' '----------------------------------------------------------
         ' icol = icol + 1
         ' If icol = 2 Then
         '    If grdComponents[irow, 0].text = "" Or grdComponents[irow, 1].text = "" Then
         '       icol = 1
         '       Stop Event
         '       Return
         '    End If  
         '    If irow + 1 = grdComponents.Rows.Count Then
         '       Inc grdComponents.Rows.count
         '    End If
         '    irow = Min(iRow + 1, grdComponents.Rows.Count - 1)
         '    grdComponents.Rows[irow].Height = 16
         '    grdComponents[irow, 2].Picture = Picture.Load("icons/16/unchecked.png")
         '    icol = 0
        ' End If
        ' Next_rc()            
         
      Case "responsibility" 
   End Select
   
End

Public Sub EditArea_TxtBox_KeyRelease()
   
   If bExit Then Return 
   
   Select Case Last.tag
      Case "team care members"
         '-----------------------------------------------------
         'Search for a company or a person as team care members
         '-----------------------------------------------------   
         TeamCareMembers_Selection("get") 
      Case "care plan component"
         CarePlan_Components_Selection("get")
         
   End Select
   
End
Public Sub TeamCareMembers_Add(member As Collection)
   
   Dim tcm As New Collection 
   
   tcm = New Collection
   Try tcm!summary = listview2.Item.text 'not present for patient
   Try tcm!fk_organisation = member!fk_organisation
   Try tcm!fk_branch = member!fk_branch
   Try tcm!fk_employee = member!fk_employee
   Try tcm!fk_person = member!fk_person
   ' tcm!wholename = member!title & " " & member!firstname & " " & member!surname 
   tcm!wholename = Member!wholename
   If IsNull(Member!responsibility) Then
      tcm!responsibility = ""
   Else  
      tcm!responsibility = Member!responsibility
   End If   
   '---------------------------------------
   'Ok, all seems in order, add to the list
   '---------------------------------------
   TeamCareMembers.Add(tcm, TeamCareMembers.Count)
   
   TeamCareMembers_RefreshList()
   
   txtTeamCareMembers.Clear()
   txtTeamCareMember_Responsibility.text = ""
   txtTeamCareMember_Responsibility.setfocus()
   listview2.Visible = False 
   cvwTeamCareMembers.MoveLast()
   cvwTeamCareMembers.Item.Selected = True   
   cvwTeamCareMembers_Select()
   
End

Public Sub TeamCareMembers_RefreshList()
   '---------------------------------------
   'Refreshes the list of team care members
   '---------------------------------------
   
   Dim TeamCareMember As Collection 
   Dim aCollection As Collection
   
   cvwTeamCareMembers.Clear()
   For Each TeamCareMember In TeamCareMembers
      cvwTeamCareMembers.Add(cvwTeamCareMembers.count, TeamCareMembers_MakeSummary(TeamCareMember))
   Next
   If TeamCareMembers.count Then
      cvwTeamCareMembers.MoveFirst
      cvwTeamCareMembers.Item.Selected = True
      cvwTeamCareMembers_Click()
   End If
   
End

Public Sub TeamCareMembers_RefreshCollection()
   '-----------------------------------------------------
   'When an item is removed from a collection, its count
   'not longer reflects its internal key order
   'so rebuild it
   '-----------------------------------------------------
   
   Dim teamMember As Collection 
   
   TeamCareMembers = New Collection 
   ' For Each collection_member In TeamCareMembers_old
   '    teammember = New Collection
   '    teamMember!pk = collection_member!pk
   '    teammember!fk_pasthistory = collection_member!fk_pasthistory
   '    teammember!fk_organisation = collection_member!fk_organisation
   '    teammember!fk_branch = collection_member!fk_branch
   '    teammember!fk_employee = collection_member!fk_employee
   '    teammember!fk_person = collection_member!fk_person
   '    teammember!wholename = collection_member!wholename
   '    teammember!summary = collection_member!summary
   '    teammember!responsibility = collection_member!responsibility
   '    TeamCareMembers.Add(teammember, TeamCareMembers.count)
   ' Next
   
End
Public Sub TeamCareMembers_Init()
   '---------------------------
   'CALLED BY  EditArea_Clear()
   '---------------------------
   
   Dim member As New Collection 
   ' Terms = New Collection
   TeamCareMembers = New Collection 
 '  TeamCareMember_Deleted = New Collection   
   cvwTeamCareMembers.Clear()
   '  Member!fk_person = currentconsult!patient!fk_person
   ' Member!wholename = "Patient: " & currentconsult!patient!wholename 
   ' Member!responsibility = "Keep record of when appointments are due\n" 
   '   "Make appointments for investigations and specialists as requested\n"
   
   ' TeamCareMembers_Add(Member)
End

Public Sub TeamCareMembers_Get()
   '-------------------------------------------------------------
   'Get the team care members from backend, they are keyed by the
   'clin_history.team_care_members.pk, no good if we want to add
   'new items to the list, so re-order the collection with keys
   'corresponding to the cvwTeamMembers.count value
   '-------------------------------------------------------------
   
   ' TeamCareMembers_old = New Collection
   ' TeamCareMembers_old = modPastHistoryDBI.TeamCareMembers_Get(pk_pasthistory) 'the old data - never changed
   ' TeamCareMembers_RefreshCollection()        'create a copy of this collection to keep changes
   ' TeamCareMembers_RefreshList()
   ' 
End

Public Sub TeamCareMembers_MakeSummary(Collection_member As Collection) As String
   '---------------------------------------------------------------------------
   'makes a summary like organisation-address-employee (occupation) for display
   '---------------------------------------------------------------------------
   
   ' Dim sMsg As String
   ' 
   ' If IsNull(Collection_member!fk_employee) And IsNull(Collection_member!fk_organisation) Then
   '    '----------------------------------------------------------
   '    'ok- if not an organisation or an employee must be a person
   '    '----------------------------------------------------------
   '    TeamCareMember_SearchBy_Criteria = Const.contacttype_PersonsAndPatients
   '    sMsg = collection_member!wholename & " " & collection_member!summary 
   ' Else If Not IsNull(Collection_member!fk_person) Then
   '    TeamCareMember_SearchBy_Criteria = Const.contacttype_employee
   '    sMsg = collection_member!wholename & collection_member!summary
   ' Else If Not IsNull(Collection_member!fk_organisation) Then
   '    TeamCareMember_SearchBy_Criteria = Const.contacttype_organisation
   '    sMsg = collection_member!summary ' & " "
   '    ' Else
   '    '    TeamCareMember_SearchBy_Criteria = Const.contacttype_PersonsAndPatients 'remove this
   ' End If
   ' Return sMsg    
   ' 
End
Public Sub TeamCareMembers_Selection(action As String, Optional calling_control As String)
   'Either fetches as list of potential team care members according to the value of rb
   ' 
   ' Dim x As Integer
   ' Dim sMsg As String
   ' 
   ' Select Case action
   '    Case "get"
   '       
   '       If Len(Trim(txtTeamCareMembers.text)) = 0 Then
   '          listview2.Visible = False  
   '          Return
   '       End If
   '       Select Case TeamCareMember_SearchBy_Criteria
   '          Case Const.contacttype_organisation
   '             collection_members = modContactsDBI.Organisations_Get(Trim(txtTeamCareMembers.text))
   '             If collection_members.count = 0 Then
   '                bExit = True
   '                rbSearchBy_branch.value = True
   '                
   '                bExit = False
   '                Return
   '             End If
   '          Case Const.contacttype_employee
   '             collection_members = modContactsDBI.Employee_Get(Trim(txtTeamCareMembers.text))
   '             If collection_members.count = 0 Then
   '                rbSearchBy_Organisation.value = True
   '                Return
   '             End If
   '          Case Const.contacttype_PersonsAndPatients 'set to inlude all patients and other persons
   '             collection_members = modContactsDBI.Person_Get(Trim(txtTeamCareMembers.text), const.contacttype_PersonsAndPatients)
   '          Case const.contacttype_branch
   '             collection_members = modContactsDBI.Branches_Get_Like(Trim(txtTeamCareMembers.text))
   '             If collection_members.count = 0 Then
   '                rbSearchBy_Employee.value = True
   '                Return
   '             End If
   '       End Select
   '       listview2.Clear
   '       '-----------------------------------------------------------------
   '       'If categories exist to match the text, auto-select or show a list
   '       '-----------------------------------------------------------------
   '       If collection_members.count Then 
   '          Try collection_members.Remove("sql_in_english") 'ian included this for FClinical patient search
   '          For Each collection_member In collection_members
   '             Select Case TeamCareMember_SearchBy_Criteria
   '                Case Const.contacttype_organisation, Const.contacttype_branch
   '                   sMsg = collection_member!organisation & " " & collection_member!branch & " " 
   '                   sMsg &= Trim(collection_member!street1 & " " & collection_member!street2) & " " & collection_member!town & " " & collection_member!postcode 
   '                Case Const.contacttype_employee
   '                   smsg = collection_member!title & " "
   '                   sMsg &= collection_member!firstname & " "
   '                   smsg &= collection_member!surname & " "
   '                   sMsg &= "(" & collection_member!occupation & ") "
   '                   sMsg &= collection_member!organisation & " " & collection_member!branch & " "  
   '                   sMsg &= Trim(collection_member!street1 & " " & collection_member!street2) & " " & collection_member!town & " " & collection_member!postcode 
   '                Case Const.contacttype_PersonsAndPatients
   '                   smsg = collection_member!wholename
   '                   sMsg &= Trim(collection_member!street1 & " " & collection_member!street2) & " " & collection_member!town & " " & collection_member!postcode 
   '                   
   '             End Select
   '             listview2.Add(collection_member!pk_view, sMsg)
   '          Next 
   '          listview2.Visible = True
   '          listview2.Raise
   '          listview2.tag = txtTeamCareMembers
   '          Return 
   '       Else 
   '          listview2.Visible = False  
   '       End If
   '       
   '    Case "accept"
   '       '-------------------------------------------------------
   '       'CALLED BY  : user hitting <enter> in txtTeamCareMembers
   '       '             user hitting <enter> on the popup list 
   '       '             user double clicking on the popup list
   '       '-------------------------------------------------------
   '       bExit = True
   '       If calling_control = "textbox" Then
   '          '-------------------------------------------------------
   '          'User has just hit <enter> without scrolling on the list
   '          'try and find a match
   '          '-------------------------------------------------------
   '          If listview2.Visible Then
   '             '    listview1.MoveFirst
   '             '    For x = 0 To listview1.count - 1
   '             '       If Lower(listview1.Item.text) = Trim(Lower(txtEmployeeOccupation.text)) Then
   '             '          fk_occupation = listview1.Item.Key
   '             '          Break
   '             '       End If
   '             '   Next
   '          End If
   '          '------------------------------------------------------------------
   '          'Either no match was found OR list wasn't visible anyway = no match
   '          '------------------------------------------------------------------
   '          '  fk_occupation = 0
   '          listview2.Visible = False     
   '       Else
   '          '-----------------------------------------------------------
   '          'Routine called by user clicking on list or pressing <enter>
   '          '-----------------------------------------------------------
   '          If listview2.Visible Then
   '             listview2.MoveCurrent   'set internal cursor to match marquee
   '             collection_member = collection_members[listview2.Item.key]
   '             Try fk_organisation = collection_member!fk_organisation
   '             Try fk_branch = collection_member!fk_branch
   '             Try fk_person = collection_member!fk_person
   '             Try fk_employee = collection_member!fk_employee
   '             bExit = False
   '             If Not teamcare_member_check_duplicated(collection_member) Then
   '                TeamCareMembers_Add(collection_member)
   '             End If
   '          End If
   '       End If
   '       
   '       bExit = False  
   ' End Select
   
End

Public Sub TeamCareMember_AddPatient()
   
   Dim member As New Collection
   
   bExit = True
   rbSearchBy_person.value = True
   bExit = False
   listview2.Clear 'bad fudge see TeamCaremembers_add for reason
   fk_person = currentconsult!patient!fk_person
   fk_organisation = 0
   fk_branch = 0
   fk_employee = 0
   Member!fk_person = currentconsult!patient!fk_person
   Member!wholename = currentconsult!patient!wholename 
   If Not teamcare_member_check_duplicated(Member) Then
      TeamCareMembers_Add(member)
   End If
   
End

Public Function teamcare_member_check_duplicated(Member As Collection) As Boolean
   '--------------------------------
   'returns False if not a duplicate
   '-------------------------------- 
   
   Dim sMsg As String = "You have selected:\n\n"
   
   If Not (fk_organisation Or fk_branch Or fk_employee Or fk_person) Then
      Select Case TeamCareMember_SearchBy_Criteria
         Case Const.contacttype_employee
            smsg = "The employee "
         Case Const.contacttype_organisation
            smsg = "The organisation "
         Case Const.contacttype_PersonsAndPatients
            smsg = "The person "
      End Select
      sMsg &= "that you are looking for does not yet exist in the contacts database.\n\n" 
      sMsg &= "You cannot enter free text here.\n\n"
      sMsg &= "Please add the details via the contacts section before proceeding."
      Goto reset
   End If
   For Each member In TeamCareMembers
      Select Case TeamCareMember_SearchBy_Criteria
         Case Const.contacttype_employee
            If member!fk_employee = fk_employee Then
               sMsg &= member!summary & "\n\nA person of this name already exsits in the team care list" 
               Goto reset
            End If
         Case Const.contacttype_organisation
            If member!fk_organisation = fk_organisation And member!fk_branch = fk_branch Then
               sMsg &= member!summary & "\n\nA person of this name already exsits in the team care list" 
               Goto reset 
            End If   
         Case Const.contacttype_PersonsAndPatients
            If member!fk_person = fk_person Then
               sMsg &= member!wholename & " " & member!summary & "\n\nA person Of this name already exsits In the team care list"
               Goto reset
            End If   
      End Select
   Next  
   Return False
   Reset:
   listview2.Visible = False 
   txtTeamCareMembers.SetFocus()
   txtTeamCareMembers.Text = ""
   Message.Info(sMsg)  
   Return True 'ie is a duplicate
   
End

Public Sub mnuTeamCare_Click()
   ' '--------------------------------------------------------------------------
   ' 'Users has selected a team care member
   ' 'As all contacts must be added via contacts modules these may not be edited
   ' '--------------------------------------------------------------------------
   ' 
   ' Dim c As Collection 
   ' Dim the_key As Integer
   ' 
   ' cvwTeamCareMembers.MoveCurrent()
   ' 
   ' Select Case Last.tag
   '    Case "delete"
   '       '----------------------------------------------------------------
   '       'Delete a team care member and details, keeping a copy
   '       'The teamcaremembers collection is 0-n keyed on the list
   '       'mark item as deleted in DB
   '       'keep a copy in TeamCareMember_Deleted collectin keyed to the pk
   '       '----------------------------------------------------------------
   '       modDBConnect.BeginTrans() 'noop
   '       
   '       modPastHistoryDBI.TeamCareMembers_Delete(TeamCareMembers[cvwTeamCareMembers.Item.Key]!pk)  
   '       modDBConnect.CommitTrans()                                                                
   '       TeamCareMember_Deleted.Add(TeamCareMembers[cvwTeamCareMembers.Item.Key], TeamCareMembers[cvwTeamCareMembers.Item.Key]!pk) 
   '       TeamCareMembers_Get() 'refresh the collection
   '       mnuTeamCare_UndoDelete.Enabled = True  
   '    Case "undo delete"
   '       '---------------------
   '       'One level of undelete
   '       '---------------------
   '       'TeamCareMembers.Add(TeamCareMember_Deleted[TeamCareMember_Deleted.key])
   '       If TeamCareMember_Deleted.Length Then
   '          For Each c In TeamCareMember_Deleted
   '             the_key = c!pk
   '          Next
   '          
   '          modDBConnect.BeginTrans()
   '          
   '          modPastHistoryDBI.TeamCareMembers_UnDelete(TeamCareMember_Deleted[the_key]!pk)
   '          modDBConnect.CommitTrans()
   '          TeamCareMember_Deleted = New Collection 
   '          TeamCareMembers_Get()
   '          mnuTeamCare_UndoDelete.Enabled = False 
   '       End If 
   '    Case "help"
   '    Case "quit"
   ' End Select
   ' 

End

Public Sub cvwTeamCareMembers_Menu()
   
   ' If cvwTeamCareMembers.count Or TeamCareMember_Deleted.count Then
   '    If TeamCareMember_Deleted.count Then
   '       mnuTeamCare_UndoDelete.Enabled = True
   '    End If
   '    If cvwTeamCareMembers.count = 0 Then
   '       mnuTeamCare_Delete.Enabled = False  
   '    Else
   '       mnuTeamCare_Delete.Enabled = True     
   '    End If
   '    mnuTeamCare.Popup()
   ' End If
   ' 
End

Public Sub cvwTeamCareMembers_Click()
   
   '  cvwTeamCareMembers_Select()
   
End

Public Sub cvwTeamCareMembers_Select()
   ' '----------------------------------------------------------------
   ' 'Display the team care members responsibility
   ' 'either user clicks on or scrolls down to a row of the columnview
   ' 'We cannot edit team members except via the contacts database,
   ' '----------------------------------------------------------------
   ' 
   ' If bexit Then Return 
   ' cvwTeamCareMembers.MoveCurrent()
   ' iTeamCareMember = cvwTeamCareMembers.Item.key
   ' If Not IsNull(TeamCareMembers[iTeamCareMember]!wholename) Then
   '    '  tlResponsibility.text = "Responsibilities of " & TeamCareMembers[iTeamCareMember]!wholename 
   ' End If
   ' bExit = True
   ' If IsNull(TeamCareMembers[iTeamCareMember]!responsibility) Then
   '    txtTeamCareMember_Responsibility.text = ""
   '    
   ' Else
   '    txtTeamCareMember_Responsibility.text = TeamCareMembers[iTeamCareMember]!responsibility
   '    
   ' End If
   ' bExit = False  
   ' 

End

' Public Sub Create_Row()
'   '  Dim HBox_CareComponents As New HBox(HBox_CareComponents)
'   '  current_Task_Row = HBox_CareComponents
'   '  With HBox_CareComponents
'   '    .height = 20
'   '    .Width = ScrollView1.width
'   '    .width = columnview1
'   '    .Expand = True
'   '  End With
'    
'    CareTaskRow = New cCareTaskRow(HBox_CareComponents)
' 
'    CareTaskRow.tb1.tag = CareTaskRow.tb2
'    CareTaskRow.tb2.tag = CareTaskRow.cb1
'    obs = New Observer(CareTaskRow.tb1) As "txtComponent"
'    obs = New Observer(CareTaskRow.tb2) As "txtDue"
'    obs = New Observer(CareTaskRow.cb1) As "chkbox"
'    CareTaskRow.tb1.SetFocus()
'    ' ScrollView1.EnsureVisible(
'    Inc task_rows 
'  
' End
' 
' Public Sub ScrollView1_DblClick()
'   Dim hCtrl As Control
'   Dim tb As TextBox
'   Dim data_count As Integer
'   If IsNull(current_Task_Row) Then 
'      Create_Row()
'      Return
'   Else
'     For Each hCtrl In current_Task_Row.children 
'         If hctrl Is TextBox Then
'           tb = hctrl
'           If tb.text <> "" Then
'               Inc data_count
'           Endif
'         Endif
'     Next
'     If data_count = 2 Then Create_Row()
'   End If
' 
' End

' Public Function CarePlan_Tasks_Get() As collection 
'    '------------------------------------------------------------
'    'extracts data from the task component, dates and combo boxes
'    'Yes I could have used an editable grid but I didn't
'    'If it detects an incomplete row, simply skips over it
'    'returns a collection looking like this:
'    'task[0-n] of tasks
'    'task[0]!component = "hba1c"
'    'task[0]1due = "01/02/2010"
'    'task[0]recall = TRUE or null
'    '------------------------------------------------------------
'   Dim hCtrl As Control
'   Dim tb As TextBox
'   Dim cb As CheckBox  
'   Dim hb As HBox
'   Dim task_row As Collection
'   Dim tasks As New collection
'  
'   For Each hctrl In ScrollView1.children
'      If hctrl Is hbox Then
'         task_row = New Collection
'         task_row!fk_pasthistory = pk_pastHistory
'         hb = hctrl
'         For Each hctrl In hb.Children
'             If hctrl Is textbox Then
'                tb = hctrl
'                If Trim(tb.text) = "" Then Break
'                If tb.name = "task" Then
'                   task_row!component = Trim(tb.text) 
'                Else
'                   Try task_row!due = Val(tb.text)
'                   If Error Then   'should never happen.
'                      Message.Info("A date conversion error occurred for the task " & tb.text)
'                   Endif
'                Endif
'             Endif
'             If hctrl Is CheckBox Then
'                cb = hctrl
'                If cb.value = True Then
'                   task_row!recall = True
'                Endif
'                tasks.Add(task_row, tasks.count)
'             Endif
'          Next
'      Endif
'   Next
'   Return tasks 
'   
' End

Public Sub cvwCareComponents_Click()
   '-----------------------------------------------------------------------
   'edit the row highlighted, if not yet saved, remove from list at editing
   '-----------------------------------------------------------------------
   
   bediting = True
   bexit = True
   cvwCareComponents.MoveCurrent
   currentCarePlanComponent = current_careplan_components[cvwCareComponents.Item.key]
   txtComponent.text = currentCarePlanComponent!component
   txtdue.text = currentCarePlanComponent!due
   'if this is as yet unsaved, remove it from the array when edited
   If IsNull(currentCarePlanComponent!pk_careplan_components_due) Then
      current_careplan_components.Remove(cvwCareComponents.Item.key)
      cvwCareComponents_Refresh()
   End If
   bExit = False
   
End

Public Sub CarePlan_Components_Selection(action As String, Optional calling_control As String)
   '-----------------------------------------------
   'Fetches a list of existing care plan components
   '-----------------------------------------------
   
   Dim x As Integer
   Dim sMsg As String
   
   Select Case action
      Case "get"
         
         ' If Len(Trim(txtComponent.text)) = 0 Then
         If Len(Trim(listview1.tag.text)) = 0 Then  
            Listview1.Visible = False  
            Return
         End If
         collection_members = modPastHistoryDBI.CarePlan_Component_Names_Get(Trim(listview1.tag.text))
         listview1.Clear
         '-----------------------------------------------------------------
         'If categories exist to match the text, auto-select or show a list
         '-----------------------------------------------------------------
         If collection_members.count Then 
            For Each collection_member In collection_members
               
               Listview1.Add(collection_member!pk, collection_member!component)
            Next 
            Listview1.Visible = True
            Listview1.Raise
            ' Listview1.tag = txtComponent
            Return 
         End If
         Listview1.Visible = False  
      Case "accept"
         '-------------------------------------------------------
         'CALLED BY  : user hitting <enter> in txtTeamCareMembers
         '             user hitting <enter> on the popup list 
         '             user double clicking on the popup list
         '-------------------------------------------------------
         bExit = True
         If calling_control = "textbox" Then
            '-------------------------------------------------------
            'User has just hit <enter> without scrolling on the list
            'try and find a match
            '-------------------------------------------------------
            If Listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If Lower(listview1.Item.text) = Trim(Lower(listview1.tag.text)) Then
                     Listview1.Visible = False  
                     Break
                  End If
               Next
               listview1.Visible = False  
            End If
            '------------------------------------------------------------------
            'Either no match was found OR list wasn't visible anyway = no match
            '------------------------------------------------------------------
            ' fk_component = 0
            Listview1.Visible = False     
         Else
            '-----------------------------------------------------------
            'Routine called by user clicking on list or pressing <enter>
            '-----------------------------------------------------------
            If Listview1.Visible Then
               Listview1.MoveCurrent   'set internal cursor to match marquee
               bExit = False
               ' If Not duplicate_teamcare_member(collection_member) Then
               '    TeamCareMembers_Add(collection_member)
               ' End If
               listview1.tag.text = listview1.Item.Text
            End If
         End If
         
         bExit = False  
   End Select
   
End

Public Sub CarePlan_Components_Get()
   '----------------------------------------------------------------------------
   'Gets collection of any care plan components and when due eg hba1c, eye check
   '----------------------------------------------------------------------------  
   
   view_careplan_components = modPastHistoryDBI.Get_CarePlan_Components_Due(pk_pasthistory)
   CarePlan_Components_Set_data()
   
End

Public Sub CarePlan_Components_Set_data()
   '---------------------------------------------------------
   'Makes a copy of each of the existing care plan components
   'contained in view_careplan_components and put this new
   'collection intocurrent_careplan_components, that way
   'the old can be compared to the new when saved
   'Loads any existing data into the scroll view
   'FIXME IMPLEMENT THE RECALLS
   'temp: trying now to use columnview, so code is mixed
   '---------------------------------------------------------
   
   Dim existing_component As Collection
   Dim member As Collection 
   Dim x As Integer
   
   current_careplan_components = New Collection 
   For Each existing_component In view_careplan_components
      member = New Collection 
      member!component = existing_component!component
      
      member!fk_pasthistory = existing_component!fk_pasthistory
      member!pk_careplan_components_due = existing_component!pk_careplan_components_due
      ' x = existing_component!pk_careplan_components_due
      member!fk_component = existing_component!fk_component
      member!due = existing_component!due
      current_careplan_components.Add(member, x)
      Inc x
   Next
   cvwCareComponents_Refresh()
   
End

Public Sub cvwCareComponents_Refresh()
   '--------------------------------------------
   'Reloads the care plan components to the list
   '--------------------------------------------
   
   Dim existing_component As Collection
   Dim x As Integer
   
   cvwCareComponents.Clear()
   For Each existing_component In current_careplan_components
      
      cvwCareComponents.Add(x, 0)
      cvwCareComponents[x][0] = existing_component!component
      cvwCareComponents[x][1] = Format(existing_component!due, "dd/mm/yyy")
      Inc x
   Next 
   
End

' Public Sub CarePlan_Components_Update_Collection()
'    '--------------------------------------------------------------
'    'For each new row, create a collection and add to the main
'    'care plan collection for this health item  = past history item
'    '--------------------------------------------------------------
'    Dim member As collection
'    If irow >current_careplan_components.count - 1 Then
'       Member = New Collection
'       Member!component = ""
'       member!fk_pasthistory = pk_pasthistory
'      current_careplan_components.Add(Member, irow)
'    End If
'    Select Case icol
'    Case 0
'    current_careplan_components[irow]!component = Trim(txtComponent.text)
'    Case 1
'      Trycurrent_careplan_components[irow]!due = Val(Trim(txtComponent.text))
'      If Error Then
'          txtComponent.text = ""
'         current_careplan_components[irow]!due = ""
'      End If
'    End Select  
' End

Public Sub CarePlan_Components_Calculate_Recall_Date(txt As Textbox)
   '--------------------------------------------
   'Works out a date from e.g 18M or 2Y
   'FIXME put in weeks and days
   '--------------------------------------------
   
   Dim sIntervalUnits As String 'eg if txtdate contains 3M then units interval is 3
   Dim iNumberOfMonths As Integer      'do not need both these declared, but do for readability
   Dim iNumberOfYears As Integer 
   Dim iNumberOfDays As Integer
   Dim iNumberOfWeeks As Integer
   Dim vPossibleDate As Variant
   Dim aDate As Date
   Dim x As Integer
   
   bExit = True 'stop change event of edit area triggering
   
   If UCase(Right(Trim(txt.text), 1)) = "M" Then
      '---------------------------------------------------------------------------
      'Try and convert the rest of the string (ie left part which should be number
      'to a number, if error, pop up invalid date and return
      'Remember that  bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code) has
      'only allowed numbers or mM or Yy for this textbox, but some idiot could
      'have tried out patience by typing in e.g 10m10M or something
      '---------------------------------------------------------------------------
      Try iNumberOfMonths = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txt.text = "" 
         Return
      End If
      ' If txt.tag = "interval" Then
      '    fk_interval_unit = const.Units_month
      '    interval = iNumberOfMonths
      ' Else
      '    fk_default_interval_unit = const.Units_month
      '    default_interval = iNumberOfMonths
      '    If Trim(txtInterval.text) = "" Then 
      '      fk_interval_unit = const.Units_month
      '      interval = iNumberOfMonths
      '      txtInterval.text = txtDefaultInterval.Text
      '    End If
      ' Endif
      txt.text = Format(DateAdd(Now, gb.Month, iNumberOfMonths), "dd/mm/yyyy")
      
   Else If UCase(Right(Trim(txt.text), 1)) = "Y" Then
      '---------------------------------------------------------------------------
      'Try and convert the rest of the string (ie left part which should be number
      'to a number, if error, pop up invalid date and return
      'Remember that  bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code) has
      'only allowed numbers or mM or Yy for this textbox, but some idiot could
      'have tried out patience by typing in e.g 10m10M or something
      '---------------------------------------------------------------------------
      Try iNumberOfYears = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txt.text = "" 
         Return
      End If
      
      txt.text = Format(DateAdd(Now, gb.Year, iNumberOfYears), "dd/mm/yyyy")
      '    If txt.tag = "interval" Then
      '      fk_interval_unit = const.Units_year
      '      interval = iNumberOfYears
      '    Else
      '       fk_default_interval_unit = const.Units_year
      '       default_interval = iNumberOfYears
      '       If Trim(txtInterval.text) = "" Then 
      '           fk_interval_unit = const.Units_year
      '           interval = iNumberOfYears
      '           txtInterval.text = txtDefaultInterval.Text
      '       End If
      '   
      '    End If
      
   Else 
      If LCase(Trim(txt.text)) = "now" Then
         txt.text = Format(Now, "dd/mm/yyyy")
      End If  
   End If
   bExit = False 
   
End

' Public Sub txtComponent_Keypress()
' 
'   Select Case Key.Code
' 
'   Case Key.Return, Key.tab ', Key.Right
'       '------------------------------------------------------------
'       'First calculate the date if user typed in numberM or numberY
'       '------------------------------------------------------------
'        If icol Mod 2 Then
'           CarePlan_Components_Calculate_Recall_Date(txtComponent)
'        End If
'        grdComponents[irow, icol].text = txtComponent.Text
'        ()
'        '----------------------------------------------------------
'        'Now, don't allow a new row to be added, if the current row
'        'hasn't been filled
'        '----------------------------------------------------------
'        icol = icol + 1
'        If icol = 2 Then
'           If grdComponents[irow, 0].text = "" Or grdComponents[irow, 1].text = "" Then
'             icol = 1
'             Stop Event
'             Return
'           End If  
'           If irow + 1 = grdComponents.Rows.Count Then
'               Inc grdComponents.Rows.count
'           End If
'           irow = Min(iRow + 1, grdComponents.Rows.Count - 1)
'           grdComponents.Rows[irow].Height = 16
'           grdComponents[irow, 2].Picture = Picture.Load("icons/16/unchecked.png")
'           icol = 0
'        End If
'        Next_rc()
'   Case Key.Down
'        grdComponents[irow, icol].text = txtComponent.Text
'        CarePlan_Components_Update_Collection()
'        irow = Min(iRow + 1, grdComponents.Rows.Count - 1)
'        Next_rc()
'   Case Key.Up
'       grdComponents[irow, icol].text = txtComponent.Text
'       CarePlan_Components_Update_Collection()
'       iRow = Max(iRow - 1, 0)
'       Next_rc()
'   End Select
' End
' 
' Public Sub Next_rc()
'    grdComponents_dblClick 
'     
' End

Public Sub mnuGrid_Click()
   
   Select Case Last.tag
      Case "add row"
      Case "cut"
      Case "copy"
      Case "paste"
      Case "undo"
      Case "redo"
      Case "template"
      Case "clear text"
         
   End Select
   
End
' Public Sub CarePlan_Components_ClearGrid()
'    '-----------------------------
'    'removes contents of all cells
'    '-----------------------------
'    grdComponents.Rows.count = 0  
' End

' Public Sub grdComponents_Menu()
'    
'    mnuGrid.Popup()
'    
' End

Public Sub rbTeamCareMember_SearchCriteria_Click()
   
   TeamCareMember_SearchBy_Criteria = Last.tag
   If bExit Then Return 
   TeamCareMembers_Selection("get")
   
End

Public Sub txtComponent_Change()
   
   If bexit Then Return 
   If Trim(Last.text) Then EditArea_Notify_DataChange(True)
   
End

Public Sub txtComponent_Keypress()
   
   Select Case key.Code
      Case key.Return, key.Tab
         txtdue.setfocus()
      Case key.Down
         listview1.setfocus()
   End Select
   
End

Public Sub txtComponent_KeyRelease()
   
   CarePlan_Components_Selection("get")
   
End

Public Sub txtComponent_Gotfocus()
   
   ' Last.BackGround = Color.rgb(95, 255, 175)
   ' With listview1
   '    .top = (Vsplit_PastHistory.top + VSplit_PastHistory.Layout[0] + Vsplit1.layout[0] + HSplit_TeamCareMembers.top) + Last.height + VBox1.Padding
   '    .left = HSplit_TeamCareMembers.layout[0] + HSplit_TeamCareMembers.layout[1] + HSplit_TeamCareMembers.left + VBox1.Padding
   '    .width = cvwCareComponents.Width
   '    .Visible = False
   '    .Clear()
   '    .raise
   '    .tag = Last
   ' End With
   
End

Public Sub txtComponent_Lostfocus()
   
   Last.background = Color.white
   Last.pos = 0
   
End

Public Sub txtdue_change()
   
   If bexit Then Return 
   If Trim(Last.text) Then EditArea_Notify_DataChange(True)
   
End

Public Sub txtdue_gotfocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub txtdue_Lostfocus()  
   
   Last.background = Color.white
   
End

Public Sub txtdue_Keypress()
   
   If Key.code = Key.return Then
      
      CarePlan_Components_Calculate_Recall_Date(Last)
      If IsDate(Last.text) Then
         Careplan_Components_Accept()
      End If  
   Endif 
   
End

' Public Sub chkbox_Keypress()
'   
'   If Key.code = Key.return Then
'       Create_Row()
'   Endif
'   
' End


Public Sub Careplan_Components_Accept() 
   ' '-----------------------------------------------------------------------------------------------  
   ' 'user adding new or changing existing
   ' 'when editing currentCarePlanComponent =current_careplan_components[cvwCareComponents.Item.key]
   ' 'As these are equivalent, changing one, ie currentCarePlanComponent automatically changes
   ' 'the contents ofcurrent_careplan_components[cvwCareComponents.Item.key], so it suffices,just
   ' 'to refresh the list. The original fk_component isn't used FIXME DELETE ME as the save
   ' 'routine dis-regards it anyway and re-looks it up
   ' '-----------------------------------------------------------------------------------------------
   ' 
   ' currentCarePlanComponent!component = Trim(txtComponent.text)
   ' currentCarePlanComponent!due = Val(txtdue.text)
   ' 
   ' If IsNull(currentCarePlanComponent!pk_careplan_components_due) Then
   '    current_careplan_components.Add(currentCarePlanComponent, current_careplan_components.count)
   ' End If
   ' cvwCareComponents_Refresh()
   ' bexit = True
   ' txtComponent.Clear()
   ' txtDue.Clear()
   ' 
   ' txtComponent.SetFocus()
   ' 
   ' bEditing = False
   ' bExit = False  
   
End

Public Sub Careplan_Component_New()
 ' currentCarePlanComponent = New Collection 
  
  
End
Public Sub ListView1_KeyPress()
   '------------------------------------------------------------------
   'Act only on the <ENTER> key display what is in list in the textbox
   '------------------------------------------------------------------
   
   If Key.code = Key.Return Then 
      
      listview1_DblClick
   End If
   
End


Public Sub listview1_DblClick()
   '---------------------------------------------------------------------
   'CALLED BY     :listview1_keypress(enter) or
   '              :user double clicking on a row of a list
   'WHAT IT DOES  :Accepts the list contents into the appropriate textbox
   '              :and the listkey into the appropriate collection
   '---------------------------------------------------------------------
   
   '  Select Case listview1.Tag.
   '  Case "care plan component" 
   CarePlan_Components_Selection("accept", "list")
   '  End Select
   listview1.Visible = False
   txtDue.SetFocus()
   
End

Public Sub ListView2_KeyPress()
   '------------------------------------------------------------------
   'Act only on the <ENTER> key display what is in list in the textbox
   '------------------------------------------------------------------
   
   If Key.code = Key.Return Then 
      listview2_DblClick
   End If
   
End

Public Sub listview2_DblClick()
   'FIXME USE LISTVIEW1
   
   TeamCareMembers_Selection("accept", "list")
   
End

Public Sub EditAreaButtons_Click()
   '---------------------------------------------------
   'User has clicked on either the accept or ok buttons
   'at the bottom of the editing area
   '----------------------------------------------------
   
   Select Case Last.tag
      Case "help"
       '  If bEmbedded = False Then FClinical.Help_Show(Application.Path &/ "help/health-issues.html", "Help:Health Issues", True)
      Case "accept"
         '---------------------------------------------------
         'Accept everything in editing area either to its
         'existing spot in PH collection ie
         'modglobal.clinicalform.currentcurrentconsult.patient!past_history
         'of add to collection if a new problem
         '---------------------------------------------------
         Save()
      Case "add component"
         If Trim(txtComponent.text) <> "" And Trim(txtDue.text) <> "" Then
            Careplan_Components_Accept()
         Endif
      Case "new component"
         bexit = True
         txtComponent.text = ""
         txtDue.text = ""
         bediting = False  
         bexit = False  
         currentCarePlanComponent = New Collection
         listview1.Visible = False  
   End Select
End