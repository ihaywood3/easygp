' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'--------------------------------------------------------------------------
' PURPOSE   A module to enter medical certificates
'           See also FMedicalCertificates which manages/reviews all of them
' TODOS     Add Email certificate and electronic signature
' BUGS      If user clicks preview from FClinical toolbar when certificate
'           has been edited the preview does not reflect the changes
'--------------------------------------------------------------------------
Private ReferenceHboxForTopOfPopupList As Hbox     'used if split moves to reposition list or the terms popup
Private bExit As Boolean                           'exit subroutines as needed
Private bkeyvalid As Boolean                       'see  EditArea_TxtBox_ExcludeKeys
Private bCancel As Boolean                         'set by close key
Private currentconsult As CConsult                 'passed from the notes editor
Private fk_coding_system As Variant                'if non-zero is a valid coding system
Private fk_code As Variant                          'if not "" then a valid code
Private cvwCertificates_Key As Variant
Private Const cFit As Integer = 1                  'constants to make code easier to read
Private Const cUnFit As Integer = 2
Private Fitness As Variant
Private Const cIs As Integer = 1
Private Const cWas As Integer = 2
Private Const cWillBe As Integer = 3
Private Temporality As String[]
Private iFitness_Temporality As Integer            'key to clin_certificates.lu_illness_temporality
Private iFitness As Integer                        'key to clin_certificates.lu_fitness
Private Certificates As Collection                 'All existing certificates for the patient
Private Certificate As Collection                  'current certificate
Private fk_certificate As Variant                         'key to clin_certificates.vwMedicalCertificates
Private Reasons As Collection                      'collection of reasons for being sick for popup list
Private Reason As Collection
Private timer_count As Integer                    'zero'd on keypress in txtCodedTerm see Timer1_timer()
Private Form_Terms As FCodedTermSelector      'Popup form to display coded terms for user to choose from
Private obs As Observer                           'to over-ride events on  FCodedTermSelector
Private fk_progressnote As Variant                'if not zero (0) then points to progress note for a certificate
Private Deleted_Certificates As Collection
Private bSwitch_To_FClinical As Boolean = True    'auto switch back to FClinical

Public Sub Form_Show()
   '------------------------------------------------------------
   'This module is set to automatically switch back to FClinical
   'To save having yet another mouse click on the top tabs
   '------------------------------------------------------------

   bSwitch_To_FClinical = True

End

Public Sub Form_Close()
   '--------------------------------------------------------------------------------
   'Save settings if closed by the user as opposed to FClinical saving tabs settings
   '--------------------------------------------------------------------------------

   Settings_Save()

End

Public Sub Init(Cons As CConsult)
   '---------------------------------------
   'Set by calling form - usually FClinical
   '---------------------------------------

   currentconsult = cons                                          'set current consult

   Try Settings_Load()
   Fitness = New String[3]
   Fitness[1] = "fit"
   Fitness[2] = "unfit"
   Temporality = New String[4]
   Temporality[1] = "is"
   Temporality[2] = "was"
   Temporality[3] = "will be"
   With Form_Terms = New FCodedTermSelector(Vbox_EditArea)        'hide a new instance of popup coded term selector
      .Ignore = True
      .ColumnView1.Background = Color.White
      .Visible = False
      .Expand = True
      .Raise()
   End With
   With cvwCertificates
      .Columns.count = 7
      .Columns[0].Text = "Certificate Date"   'can be back date
      .Columns[1].Text = "Reason"
      .Columns[2].Text = "Coded Reason"
      .Columns[3].Text = "Fitness"
      .Columns[4].Text = "From Date"
      .Columns[5].Text = "To Date"
      .Columns[6].Text = "Notes"
   End With
   RbIs.Width = rbUnfit.Width
   obs = New Observer(Form_Terms.columnview1) As "Terms_columnview"  'Over-ride events on this form
   lblMeasure.text = "  Coded Term "                                 'max length label expected
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblMeasure)       'resize all to same size
   Deleted_Certificates = modCertificatesDBI.MedicalCertificates_Get_Deleted(Cons.GetPK()) 'get those deleted this consult
   Certificates_Nofity_Deleted()
   timer1.Enabled = True
   Reload()                                                          'Reload all written this consult, default to new certificate

End

Private Sub Certificates_Nofity_Deleted()
   '------------------------------------------------------------------------------------------
   'Update the label at the top of the certificates list to show user if any have been deleted
   '------------------------------------------------------------------------------------------

   lblCertificatesThisConsultation.text = "Certificates This Consultation"
   If Deleted_Certificates.count Then
      lblCertificatesThisConsultation.text &= " (" & Str(Deleted_Certificates.count) & " deleted)"
   End If

End

Private Sub Settings_Load()

   VSplit_Certificates.Layout = Settings["FMedicalCertificate/VSplit_Certificates.Layout", modUtilGUI.VSplit([211, 646])]
   cvwCertificates.font = Font[Settings["FMedicalCertificate/cvwCertificates.font", "DejaVu Sans,9"]]

End

Public Sub Settings_Save()
   '-----------------------------------------------------------
   'Public because this may be called by FClinical closing down
   '-----------------------------------------------------------

   Settings["FMedicalCertificate/VSplit_Certificates.Layout"] = VSplit_Certificates.Layout

End

Public Function Progress_Note_Construct() As String
   '----------------------------------------------------------------
   'Allows a progress notes editor page to retreive a summary of the
   'certificate before closing
   '----------------------------------------------------------------

   Dim summary As String

   If bCancel Then Return ""
   Summary = "<BR><B>Medical certificate</B>"
   summary &= "<BR> - dated " & Trim(txtDate.text) & " for "
   summary &= Trim(txtReason.Text)
   If Trim(txtCodedTerm.text) <> "" Then
      summary &= " [" & Trim(txtCodedTerm.text) & "]"
   Endif
   summary &= "<BR> - "
   summary &= Temporality[iFitness_Temporality] & " " & Fitness[iFitness] & " for work "
   summary &= "from " & Trim(txtDateFrom.text)
   If Trim(txtDateTo.text) <> "" Then
      summary &= " to " & Trim(txtDateTo.text)
   Endif
   If txtNotes.text <> "" Then
      summary &= "<BR> - notes:" & Trim(txtnotes.text)
   Endif
   Return summary & "<BR>"

End

Public Sub Coded_Terms_Get()
   '-------------------------------------------------------------------------------------
   'Gets list of coded terms
   'Cannot set default if count is one because must  be able to add new occupations
   'can't remove the label because it needs to occupy space to keep textbox correct width
   '-------------------------------------------------------------------------------------

   If Trim(txtCodedTerm.text) = "" Then
      fk_code = Null
      fk_coding_system = Null
      Form_Terms.Visible = False
      Return
   End If
   If Trim(txtCodedTerm.text) <> "" Then
      Form_Terms.Set_SearchText(Trim(txtCodedTerm.text))
   End If

End

Public Sub EditArea_Clear()
   '--------------------------
   'Clears the data input area
   '--------------------------

   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   EditArea_Notify_Data_Change(False)

End

Public Sub Certificate_New()
   '----------------------------------------------------------------------------------------
   'Called from New_Entry which is called by FClinical toolbar button or in code eg Reload()
   '----------------------------------------------------------------------------------------

   EditArea_Clear()
   '  txtdate.text = Format(Now, "dd/mm/yyyy")
   txtdate.text = Format(currentconsult.GetConsultDate(), "dd/mm/yyyy")
   RbIs.Value = True     'default to is
   rbUnfit.value = True  'unfit
   fk_coding_system = Null
   fk_code = Null
   fk_progressnote = Null
   fk_certificate = Null
   bCancel = False
   EditArea_Notify_Data_Change(False)
   Vbox_EditArea_Outer.Enabled = True
   txtReason.SetFocus()

End

Public Sub mnuMedicalCertificates_Click()
   '------------------------------------------------------------------
   'When the certificates columnview was clicked on to show the menu
   'the  Certificate Collection  already exists as it has been filled
   'by the user clicking on a particular row. If user has deleted
   'certificates then when the menu was popped up in the first place
   'the 'undo delete' submenu's have as their tag the collection
   'of the deleted certificate, hence the TypeOf test here.
   '------------------------------------------------------------------

   Dim MCert As Collection

   If TypeOf(Last.tag) = gb.String Then
      Select Case Last.tag
         Case "edit"
            Edit()
         Case "delete"
            Delete()
         Case "reprint current"
            modPrinting.Print_latex(Certificate!latex, const.Paper_Plain, 1)
         Case "reprint all"
            For Each MCert In Certificates
               modPrinting.Print_latex(MCert!latex, const.Paper_Plain, 1)
            Next
         Case "help"
            FClinical.Editor_ShowPage_External("browser", "Help Medical Certificates", modEditAreaHelpers.Help_HTML_Fix_Image_Path("medical-certificates.html"))
         Case "preview"
            Certificate_Preview()
         Case "font"
            modUtilGUI.Columnview_SetFont(cvwCertificates, "FMedicalCertificate")
      End Select
   Else              'tag is a collection = the deleted certificate
      Delete_Undo(Last.tag)

   End If
Catch
   Return

End

Public Sub ListView1_KeyPress()
   '-------------------------------------------------
   'the user's reasons for certficate list is showing
   '-------------------------------------------------

   If Key.code = Key.Return Then
      listview1_DblClick()
   End If

End

Public Sub Listview1_DblClick()
   '----------------------------------------------------
   'CALLED BY  :user directly clicks on list or
   '           : listview1_keyPress where key =enter
   '
   'listview1 used to display multiple choice of items
   'when user as initiated  search eg for illness reasons
   '----------------------------------------------------

   listview1.MoveCurrent()
   Reason_Select(Last)

End

Public Sub EditAreaButtons_Click()

   Dim hCtrl As Control
   Dim txtbox As TextBox

   Select Case Last.tag
      Case "pick date"
         For Each Hctrl In Last.parent.children
            If hctrl Is Textbox Then
               txtbox = hctrl
               DateChooser1.tag = txtbox
               Break
            End If
         Next
         With HBox_Calander
            .top = Last.Parent.Parent.top + Last.Parent.Height
            .left = Last.Parent.left
            .Raise()
         End With
         DateChooser1.Parent.Visible = True
         DateChooser1.Parent.Raise
   End Select

End

Public Sub DateChooser1_Activate()
   '------------------------------------------------
   'User is selecting a date from the popup calander
   '------------------------------------------------

   Last.tag.text = Format(Last.value, "dd/mm/yyyy")
   HBox_Calander.Visible = False
   Select Case Last.tag.tag
      Case "from", "to"
         txtDateTo.setfocus()
   End Select

End

Public Sub DateChooser1_LostFocus()

   DateChooser1.visible = False

End

Public Sub EditAreaTextBox_Change()
   '--------------------------------------------
   're-set appropriate keys if user deletes text
   '--------------------------------------------

   If bexit Then Return
   Select Case Last.tag
      Case "coded term"
         If Trim(Last.text) = "" Then
            fk_code = Null
            fk_coding_system = Null
            Form_Terms.Visible = False
         Endif
   End Select
   EditArea_Notify_Data_Change(True)

End

Public Sub EditAreaTextBox_LostFocus()

   Last.BackGround = Color.White

   Select Case Last.tag

      Case "coded term"
         timer1.Stop
      Case "from"       'must have a from date

         If Not IsDate(Last.text) Then
            txtDateFrom.text = ""
            txtDateFrom.SetFocus()
         End If
      Case "to"   'not essential e.g dould be fit from date
         If Trim(Last.text) <> "" Then
            If Not IsDate(Last.text) Then
               txtDateTo.text = ""
               txtDateTo.SetFocus()
            End If
         Endif
   End Select

End

Public Sub EditAreaTextBox_GotFocus()

   Last.BackGround = Color.rgb(95, 255, 175)
   Form_Terms.Visible = False    'always ensure not visible, as could have been, and user just clicked elsewhere
   listview1.Visible = False

   Select Case Last.tag
      Case "reason"
         ReferenceHboxForTopOfPopupList = Last.Parent.Parent
         With listview1
            .top = Last.parent.Parent.top + Last.height
            .left = Last.Parent.left + Vbox_EditArea.Padding
            .Visible = False
            .width = Vbox_EditArea.width / 2
            .Raise()
         End With
      Case "coded term"
         With Form_Terms
            .top = Last.parent.Parent.top + Last.height
            .left = Last.Parent.left + Vbox_EditArea.Padding
            .height = listview1.Height
            .width = txtCodedTerm.Width
            .Visible = False
            .ColumnView1.Clear
         End With
         timer_count = 0
      Case "from"
         DateChooser1.tag = Last
         If Last.text = "" Then
            Last.text = Format(currentconsult.GetConsultDate(), "dd/mm/yyyy")
            Last.pos = 0
         End If
      Case "to"
         DateChooser1.tag = Last
   End Select

End

Public Function EditArea_TxtBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean

   Select Case tag
      Case "date"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, keycode) 'only date keys
      Case "from", "to"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_Date_DWMY, keycode) 'also can type 1M, or 1W etc
      Case Else
         bKeyValid = True  'applies to all other textboxes
   End Select
   Return bKeyValid

End

Public Sub EditAreaTextBox_KeyPress()

   If bexit Then Return
   bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code, Last.tag) 'Do some basic key validation on date input areas
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case Key.Code
      Case Key.Return, Key.Tab
         Select Case Last.tag
            Case "date"
               txtReason.SetFocus()
            Case "reason"
               If listview1.Visible And Trim(Last.text) <> "" Then
                  Reason_Select(Last)
               Else
                  txtCodedTerm.SetFocus()
               End If
            Case "coded term"
               txtDateFrom.SetFocus()
            Case "from"
               txtDateTo.SetFocus
            Case "to"
               txtnotes.SetFocus()
            Case "notes"
               tbfocus.SetFocus() 'to focus on anything.
         End Select
      Case key.Down
         If Form_Terms.Visible Then
            Form_Terms.columnview1.MoveFirst
            Form_Terms.columnview1.Item.Selected = True
            Form_Terms.columnview1.SetFocus()
         Endif
         If listview1.Visible Then
            listview1.MoveFirst
            listview1.Item.Selected = True
            listview1.setfocus()
         Endif
   End Select

End

Public Sub New_Entry()
   '----------------------------------------------------------------------
   'Called from FClinicalToolbar, called this because can't use New() and
   'all across easyp this is the wording I've chosen
   'see FClinicalToolbar.MainToolbar_Click for details
   '----------------------------------------------------------------------

   Certificate_New()

End

Public Sub Print_Content()
   '--------------------------------------------------------------------------
   'Called from FClinical - a users logical would expect print button to print
   '--------------------------------------------------------------------------

   Save()

End

Public Sub Save()
   '--------------------------------------------
   'Saves the medical certificate to the backend
   '
   '   fk_consult integer NOT NULL, -- foreign key to clin_consult.consult table identifies consult date and staff member
   '   reason text,                 -- temporary concession to non-coders, the text reason for the certificate
   '   fk_coding_system integer,    -- key to coding.lu_coding_system containing name of coding system eg icpc, icd10
   '   fk_code text,                -- the coded reason for the illness eg N18
   '   fk_lu_illness_temporality integer NOT NULL, -- foreign key to fk_lu_illness_temporality table to tell temporal nature of the certificate...
   '   from_date date NOT NULL,        -- Date from which the person was unwell or resuming workk
   '   to_date date,                   -- Date to which the person will be unwell
   '   deleted boolean DEFAULT false,  -- if true the record is marked as deleted
   '   fk_lu_fitness integer,          -- fit or unfit
   '   notes text                      -- optional notes
   '   print_notes boolean             -- if true the the notes are printed on the certificate
   '   date                            -- the actual date of certificate, may not be consult date
   '--------------------------------------------

   Dim sProgressNotes As String
   Dim Certificate As CRow

   If Vbox_EditArea_Outer.Padding = 0 Then Return
   If Not Valid_Certificate() Then Return
   Vbox_EditArea_Outer.Enabled = False

   Certificate = New CRow
   If Not IsNull(fk_certificate) Then
      certificate.put_unchanged(fk_certificate, "fk_certificate")
   End If
   Certificate!reason = Trim(txtReason.Text)
   If Not IsNull(fk_coding_system) Then
      Certificate!fk_coding_system = fk_coding_system
      Certificate!fk_code = fk_code
   Else
      Certificate!fk_coding_system = Null
      Certificate!fk_code = Null
   End If
   Certificate!certificate_date = Val(txtdate.text) 'the actual date we want on certificate, may not be consult.date
   Certificate!from_date = Val(txtDateFrom.text)
   Try Certificate!to_date = Val(txtDateTo.text)
   Certificate!notes = Trim(txtNotes.text)
   Certificate!print_notes = CBool(chkPrintOnCertificate.value)
   Certificate!fk_lu_illness_temporality = iFitness_Temporality
   Certificate!fk_lu_fitness = iFitness
   Certificate!fk_consult = currentconsult.GetPK()
   Certificate!latex = MedicalCertificate_LaTex_Construct(Certificate).GetData()
   sProgressNotes = Progress_Note_Construct()
   Certificate!fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, sProgressNotes, const.cSection_MedicalCertificates, fk_progressnote, "Medical Certificates")
   Certificate.Save("clin_certificates.medical_certificates", "fk_certificate")
   modPrinting.Print_latex(Certificate!latex, const.Paper_Plain, 1)
   modDBConnect.CommitTrans()
   Refresh_FClinical
   Reload()

End

Public Sub Refresh_FClinical()
   '----------------------------------------------------------------------------------------
   'When certificate is created or deleted for example progress notes and lists in FClinical
   'need dto be updated to reflect this
   'if saving then the program will auto-switch back to FClinical to save clicking on the
   'general notes tab, I could later make this configurable FIXME
   '----------------------------------------------------------------------------------------

   FClinical.Refresh_Section(const.cSection_MedicalCertificates)                          'in case certificates list is showing
   If bSwitch_To_FClinical Then FClinical.Editor_ShowPage_External("New General Notes", "New General Notes", "")       'default to flick back to general notes

End

Public Sub Timer1_Timer()

   Inc timer_count
   If timer_count > 1 Then  'FIXME MAKE THESE USER CONFIGURABLE PER TYPING SPEED
      timer1.stop
      timer_count = 0
      Coded_Terms_Get()
   End If

End

Public Sub Print()
   '----------------------------------------------------------------------
   'Print the certificate and insert an annotation into the progress notes
   '----------------------------------------------------------------------

   modPrinting.Print_latex(certificate!latex, const.Paper_Plain, 1)

End

Public Sub MedicalCertificate_LaTex_Construct(Certificate As CRow) As CTemplate
   ' Private Const cIs As Integer = 1
   ' Private Const cWas As Integer = 2
   ' Private Const cWillBe As Integer = 3
   ' Private Const cFit As Integer = 1                  'constants to make code easier to read
   ' Private Const cUnFit As Integer = 2

   Dim templ As New CTemplate("medical-certificate", "tex")

   templ.Subst_common(currentconsult)
   Select Case Certificate!fk_lu_illness_temporality
      Case cIs
         templ.Checkbox("temporality_is", True)
         templ.Checkbox("temporality_was", False)
         templ.Checkbox("temporality_will_be", False)
      Case cWas
         templ.Checkbox("temporality_is", False)
         templ.Checkbox("temporality_was", True)
         templ.Checkbox("temporality_will_be", False)
      Case cWillBe
         templ.Checkbox("temporality_is", False)
         templ.Checkbox("temporality_was", False)
         templ.Checkbox("temporality_will_be", True)
   End Select

   Select Case Certificate!fk_lu_fitness
      Case cFit
         templ.Checkbox("fit_for_work", True)
         templ.Checkbox("unfit_for_work", False)
      Case cUnFit
         templ.Checkbox("fit_for_work", False)
         templ.Checkbox("unfit_for_work", True)
   End Select

   templ.Subst("from_date", Format(Certificate!from_date, "dd/mm/yyyy"))
   If IsNull(Certificate!to_date) Then
      templ.Subst("to_date", "(N/A)")
   Else
      templ.Subst("to_date", Format(Certificate!to_date, "dd/mm/yyyy"))
   End If

   If Not IsNull(Certificate!notes) And Certificate!print_notes Then
      templ.Subst("additional_notes", Certificate!notes)
   Else
      templ.Subst("additional_notes", "")
   Endif
   templ.Subst("certificate.date", Format(Certificate!certificate_date, "dd/mm/yyyy"))

   Return templ

End

Public Sub EditAreaTextBox_KeyRelease()

   Select Case Last.tag
      Case "coded term"
         timer1.Start
         timer_count = 0
      Case "reason"
         Reasons_Get()
      Case "from", "to"
         If HBox_Calander.Visible Then HBox_Calander.Visible = False
   End Select

End

Public Sub EditAreaTextBox_Activate()

   Select Case Last.tag
      Case "to"
         modEditAreaHelpers.Calculate_Date_From_Interval(txtDateTo, currentconsult.GetConsultDate())
   End Select

End

Public Sub EditArea_Buttons_KeyPress()

   If key.code = key.Return Then Save()

End

Public Function Valid_Certificate() As Boolean
   '--------------------------------------------------------------
   'Returns true if contents of edit area valid
   'Must at minimum have a reason (not printed on the certificate)
   'a coded reason (at least try and get one) and a from date of
   '(fitness or unfitness)
   '--------------------------------------------------------------

   Dim sMsg As String

   If txtdate.text = "" Or Not IsDate(txtDate.text) Then
      With txtdate
         .Background = Color.rgb(95, 255, 175)
         .SetFocus()
      End With
      Return False
   Endif
   If txtReason.text = "" Then
      With txtReason
         .Background = Color.rgb(95, 255, 175)
         .SetFocus()
      End With
      Return False
   Endif
   If IsNull(fk_code) Then 'this is a string
      sMsg = "It's usually a good idea to code your certificates!\n\n"
      "Skip coding?"
      Message.Title = "Medical Certificates"
      If Message.Warning(sMsg, "Yes - save without a code", "Oops - let me code it") = 1 Then Return True
      With txtCodedTerm
         .Background = Color.rgb(95, 255, 175)
         .SetFocus()
      End With
      fk_coding_system = Null
      Return False
   Else
      If IsNull(fk_coding_system) Then
         sMsg = "Invalid coded term.\n\nPlease select a valid term from the popup terms list."
         Message.Title = "Medical Certificate"
         If Message.Warning(sMsg, "Save without code", "Oops - let me code it") = 1 Then Return True
         With txtCodedTerm
            .Background = Color.rgb(95, 255, 175)
            .SetFocus()
         End With
         Return False
      Endif
   End If
   If Trim(txtDateFrom.text) = "" Then
      With txtDateFrom
         .Background = Color.rgb(95, 255, 175)
         .SetFocus()
      End With
      Return False
   Endif
   Return True

End

Public Sub EditAreaRadioButton_Click()

   Form_Terms.Visible = False    'always ensure not visible, as could have been, and user just clicked elsewhere
   listview1.Visible = False         'ditto
   Select Case Last.tag
      Case "is"
         iFitness_Temporality = cIs
      Case "was"
         iFitness_Temporality = cWas
      Case "will be"
         iFitness_Temporality = cWillBe
      Case "fit"
         iFitness = cFit
      Case "unfit"
         iFitness = cUnFit
   End Select
   EditArea_Notify_Data_Change(True)

End

Public Sub Reasons_Get()
   '------------------------------------------------------------
   'Get list of reasons for patient's sickness on per-user basis
   '------------------------------------------------------------

   If Trim(txtReason.text) = "" Then Return

   With listview1
      .Clear()
      .Visible = False
   End With
   Reasons = modCertificatesDBI.Reasons_Get(Trim(txtReason.text))
   For Each reason In Reasons
      listview1.Add(reason!pk, reason!reason)
   Next
   If reasons.count Then
      listview1.Visible = True
   Else
      listview1.Visible = False
   Endif

End

Public Sub Reason_Select(CallingControl As Object)
   '------------------------------------------------------------------
   'Select a reason from the Reasons collection i.e why patient is unfit
   'Firstly has user just hit enter without selecting from list?
   '--------------------------------------------------------------------

   Dim bFound As Boolean

   If CallingControl Is TextBox Then
      For Each reason In reasons
         If Lower(Trim(txtReason.text)) = Lower(reason!reason) Then
            bFound = True
            Goto Accept
         Endif
      Next
      listview1.Visible = False
      txtCodedTerm.SetFocus()
   Else
      Goto Accept
   End If

   Return

Accept:
   listview1.MoveCurrent
   bExit = True
   txtReason.text = listview1.Item.Text
   bExit = False
   listview1.Visible = False
   txtCodedTerm.SetFocus()
Catch
   Return

End

Public Sub Terms_Columnview_KeyPress()

   If key.code = key.return Then
      Terms_Columnview_dblClick
   End If
Catch
   Return

End

Public Sub Terms_Columnview_dblClick()

   Dim CurrentTerm As Collection

   Stop Event
   Form_Terms.Visible = False
   Last.movecurrent()
   CurrentTerm = Form_Terms.Terms[Form_Terms.columnview1.Item.key]
   fk_code = CurrentTerm!code
   fk_coding_system = CurrentTerm!fk_coding_system
   txtCodedTerm.text = CurrentTerm!term & " (" & CurrentTerm!code & ")"
   txtCodedTerm.pos = 0
   txtDateFrom.SetFocus()
Catch
   Return

End

Public Sub Reload()
   '---------------------------------------------------------------
   'Reloads all medical certificates written just this consultation
   '---------------------------------------------------------------

   Certificates_This_Consult_Show()           'Display any existing forms
   Certificate_New()

End

Public Sub EditArea_Notify_Data_Change(flag As Boolean)

   If bexit Then Return
   If flag Then
      Vbox_EditArea_Outer.Padding = 1
   Else
      Vbox_EditArea_Outer.Padding = 0
   End If

End

Public Sub Certificates_This_Consult_Show()
   '----------------------------------------------------------------------
   'Show all certificates written this consult underneath the editing area
   '----------------------------------------------------------------------

   Dim Certificate As Collection
   Dim sSTring As String
   Dim x As Integer

   currentconsult.Refresh("medical_certificates_this_consult")        'remove key = refresh
   Certificates = modUtil.Copy_Collection_Keyed_Sequentially(currentconsult!medical_certificates_this_consult)    'only get those written today
   cvwCertificates.Clear()                                            'clear the list
   For Each Certificate In Certificates
      cvwCertificates.Add(x, 0)
      cvwCertificates[x][0] = Format(Certificate!certificate_date, "dd/mm/yyyy") & "  "
      cvwCertificates[x][1] = Certificate!reason & "  "     'the free text reason
      If Not IsNull(Certificate!code) Then
         cvwCertificates[x][2] = Certificate!term & " (" & Certificate!code & ")  "  'the coded reason
      End If
      sString = Temporality[Certificate!fk_lu_illness_temporality]
      sString &= "  " & Fitness[Certificate!fk_lu_fitness] & "  for work from  "
      cvwCertificates[x][3] = sString                 'fitness for work
      cvwCertificates[x][4] = Format(Certificate!from_date, "dd/mm/yyyy") & "  "
      Try cvwCertificates[x][5] = Format(Certificate!to_date, "dd/mm/yyyy") & "  "  'can be null
      cvwCertificates[x][6] = Certificate!notes
      Inc x
   Next
   modUtilGUI.Columnview_Columns_Set_Size(cvwCertificates, lblmeasure)
   EditArea_Notify_Data_Change(False)

End

Public Sub Preview()
   '----------------------------------------------------------------------
   'Previews  a medical certificate, called from main toolbar in FClinical
   '----------------------------------------------------------------------

   Certificate_Preview()

End

Public Sub Certificate_Preview()
   '-----------------------------------------------------------
   'The certificate is shown as a PDF on a new tab in Fclinical
   'fixme not yet implemented
   '-----------------------------------------------------------

   Dim filename As String

   If IsNull(certificate) Then Return

   Filename = modPrinting.Latex_To_PDF(certificate!latex)
   FClinical.Editor_ShowPage_External("pdf file", "MC:" & Format(Certificate!certificate_date, "dd/mm/yyyy"), filename)

End

Public Sub Certificate_Display()
   '------------------------------------------------------------------
   'Displays the current certificate when user clicks on it
   'User cannot edit this unless selects from popup menu over the list
   '------------------------------------------------------------------

   EditArea_Clear()                    'clear display between each row
   Vbox_EditArea_Outer.Enabled = False
   bExit = True                        'stop the EditArea_Notify_Data_Change etc
   fk_certificate = Certificates[cvwCertificates_Key]!pk_medicalcertificate  'key to the view for use in save
   Certificate = Certificates[cvwCertificates_Key] 'current certificate ease of typing
   fk_progressnote = Certificate!fk_progressnote
   fk_code = Certificate!fk_code
   fk_coding_system = Certificate!fk_coding_system
   txtReason.text = Certificate!reason
   If Not IsNull(Certificate!code) Then
      txtCodedTerm.text = Certificate!term & " (" & Certificate!code & ")"  'the coded reason
   End If
   txtnotes.text = Certificate!notes
   Select Case Certificate!fk_lu_illness_temporality 'sets  iFitness_Temporality via click event
      Case cIs
         RbIs.Value = True
      Case cWas
         RbWas.Value = True
      Case cWillBe
         rbWillbe.Value = True
   End Select
   Select Case Certificate!fk_lu_fitness
      Case cFit
         rbfit.value = True
      Case cUnFit
         rbUnfit.value = True
   End Select
   If Certificate!print_notes Then
      chkPrintOnCertificate.value = True
   Endif
   txtdate.text = Format(Certificate!certificate_date, "dd/mm/yyyy")
   txtDateFrom.text = Format(Certificate!from_date, "dd/mm/yyyy")
   Try txtDateTo.text = Format(Certificate!to_date, "dd/mm/yyyy")
   bExit = False

End

Public Sub Edit()
   '---------------------------------------------------------
   'Allow the user to edit an existing certificate definition
   '---------------------------------------------------------

   Vbox_EditArea_Outer.Enabled = True

End

Public Sub cvwCertificates_Select()
   '--------------------------------------------------------
   'User has clicked on a row in the certificates columnview
   'i.e those certificates generated this consultation
   '--------------------------------------------------------

   cvwCertificates.MoveCurrent()       'sets current key
   cvwCertificates_Key = cvwCertificates.Item.Key
   Certificate_Display()

End

Public Sub Delete()

   '--------------------------------------------------------------------------------------
   'Delete the currently hightlighted certificate, this will only ever be a reserval
   'within the context of the current consultation. When the certificates columnview
   'was clicked on to get the menu in the first play, this sets the certificate collection
   'Also remove the associated progress note in Fclinical
   '--------------------------------------------------------------------------------------

   bSwitch_To_FClinical = False
   If Message.Question("Are you sure you want to delete this certificate?", "Yes", "No") = 2 Then
      Return
   Else
      Deleted_Certificates.Add(certificate, certificate!pk_medicalcertificate)
      modDBConnect.update("clin_certificates.medical_certificates", Null, ["pk": certificate!pk_medicalcertificate, "deleted": True])
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": certificate!fk_progressnote, "deleted": True])
      modDBConnect.CommitTrans()
      Certificates_Nofity_Deleted()
      Refresh_FClinical
   End If
   Refresh_FClinical
   bSwitch_To_FClinical = True
   Reload()

End

Public Sub Delete_Undo(Deleted_Certificate As Collection)
   '-----------------------------------------------
   'Undo a deleted certificate chosen from the menu
   '-----------------------------------------------

   Dim Commitresult As Result

   bSwitch_To_FClinical = False

   modDBConnect.update("clin_certificates.medical_certificates", Null, ["pk": Deleted_Certificate!pk_medicalcertificate, "deleted": False])
   modDBConnect.update("clin_consult.progressnotes", Null, ["pk": Deleted_Certificate!fk_progressnote, "deleted": False])
   Commitresult = modDBConnect.CommitTrans()
   Deleted_Certificates.Remove(Deleted_Certificate!pk_medicalcertificate)
   Certificates_Nofity_Deleted()
   Refresh_FClinical
   bSwitch_To_FClinical = True
   Reload()

End

Public Sub cvwCertificates_menu()

   Dim mnu As Menu
   Dim Deleted_Certificate As Collection

   '----------------------------------------------------------
   'ok, we have certicates, even if only deleted ones
   'enable all menu items, but only undo if something to undo
   '----------------------------------------------------------

   For Each mnu In mnuMedicalCertificates.Children                'There are certificates on the list or something in the cache
      If cvwCertificates.count <> 0 Then                                     'if certificates exist on the list, enable the menu options
         mnu.Enabled = True
      Else
         mnu.Enabled = False
      End If
   Next
   mnuMedicalCertificates_Help.Enabled = True
   mnuMedicalCertificates_UndoDelete.Children.Clear               'remove all (if any) children of the menu
   If Deleted_Certificates.count <> 0 Then                             'if deleted certificates exist, enable redo
      mnuMedicalCertificates_UndoDelete.Enabled = True
      For Each Deleted_Certificate In Deleted_Certificates
         With mnu = New Menu(mnuMedicalCertificates_UndoDelete) As "mnuMedicalCertificates"
            .Text = Deleted_Certificate!reason & "  - From " & Format(Deleted_Certificate!from_date, "dd/mm/yyyy") & " to  " & Format(Deleted_Certificate!to_date, "dd/mm/yyyy")
            .tag = Deleted_Certificate
         End With
      Next
   Else
      mnuMedicalCertificates_UndoDelete.Enabled = False
   End If
   mnuMedicalCertificates.Popup()

End

Public Sub chkPrintOnCertificate_Click()

   If bexit Then Return
   EditArea_Notify_Data_Change(True)

End

Public Sub VSplit_Certificates_Resize()

   If listview1.Visible Then
      listview1.top = ReferenceHboxForTopOfPopupList.top + ReferenceHboxForTopOfPopupList.height
   Endif
   If Form_Terms.Visible Then
      Form_Terms.top = HBox_CodedTerm.Top + HBox_CodedTerm.Height
   Endif

End

Public Sub Form_Resize()

   Form_Terms.width = txtCodedTerm.Width

End

Public Sub Form_Leave()

   timer1.stop

End

Public Sub Form_KeyPress()

   If Key.code = Key.esc Then
      If Form_Terms.Visible Then
         Form_Terms.Visible = False
      Endif
      If HBox_Calander.visible Then
         HBox_Calander.Visible = False
      Endif
   Endif

End
