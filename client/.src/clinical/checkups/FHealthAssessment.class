' Gambas class file
' ' Gambas class file
' ' Copyright (C) 2008,2009 Dr. Richard Terry
' 
' ' This program is free software: you can redistribute it and/or modify
' ' it under the terms of the GNU General Public License as published by
' ' the Free Software Foundation, either version 3 of the License, or
' ' (at your option) any later version.
' 
' ' This program is distributed in the hope that it will be useful,
' ' but WITHOUT ANY WARRANTY; without even the implied warranty of
' ' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' ' GNU General Public License for more details.
' 
' ' You should have received a copy of the GNU General Public License
' ' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' 
Private bEmbedded As Boolean
Private bkeyvalid As Boolean
Private bexit As Boolean
Private pk_socialhistory As Integer 
Private bEditing As Boolean

Private currentconsult As CConsult
Private currentHealthAssessment As Collection
Private member As Collection
Private The_Collection As Collection
Private FHealthIssues As FPastHistoryProblemLists
Private frmProgressNotes As FProgressNotePage
Private iWizardPageCount As Integer 
'Pages for the wizard
Public FrmSystemReview As FOver75SystemReview
Public FrmNuitrition As FOver75Nuitrition
Public FrmPsychoSocial As FOver75PsychoSocial
Public FrmHomeSafety As FOver75HomeSafety
Public FrmMobility As FOver75Mobility
Public FrmHTMLViewer As FHtmlViewer

Public frmGoalsandPlan As FOver75GoalsAndPlan
Public form_name As String
Public currentForm As Object
Public PreviousForm As Object
Public nextForm As Object
Static Private form_health_assessment As FHealthAssessment


Public Function Get_Red_Flags() As String 
   Return form_health_assessment.RedFlags_Construct_HTML()
End
Public Function ProgressNotes_Get() As String
  
  Return form_health_assessment.ClinicalNotes_Get()
  
  
End

Public Function ClinicalNotes_Get() As String
  
   Return frmProgressNotes.Notes_Editor.teNotes.RichText
  
End

Public Sub Init(cons As CConsult)
  currentconsult = cons
  Try Settings_Load()
  form_health_assessment = Me
  FrmSystemReview = New FOver75SystemReview(VBox_WizardPage)
  FrmNuitrition = New FOver75Nuitrition(VBox_WizardPage)
  FrmHomeSafety = New FOver75HomeSafety(VBox_WizardPage)
  FrmPsychoSocial = New FOver75PsychoSocial(VBox_WizardPage)
  FrmMobility = New FOver75Mobility(VBox_WizardPage)
  FrmHTMLViewer = New FHtmlViewer(Vbox_LastForm)
  frmProgressNotes = New FProgressNotePage(VBox_WizardPage)
  frmGoalsandPlan = New FOver75GoalsAndPlan(Vbox_WizardPage)
  With frmProgressNotes
      .Init(currentconsult)
      .Visible = False 
      .tag = "progress notes"
      .picBoxHeadingIcon.Visible = False  
      .lblNotesFor.text = "CLINICAL NOTES"
      .lblNotesFor.expand = True 
      .lblNotesFor.Alignment = Align.Center
      .lblNotesFor.Background = Color.ButtonBackground
      .lblNotesFor.Foreground = Color.TextForeground
      .lblPreviousNotes.text = "Issues flagged from Assessment"
  End With 
  modUtil.LoadCombo(FOver75PsychoSocial.cmbFamilyRelationships, modFamilyHistoryDBI.FamilyHistory_Get_Relationships(), "relationship")
  Socialhistory_Display()
  HealthAssessment_New()
End

Public Function RedFlags_Construct_HTML() As String
   '-------------------------------------------------------
   'Looks through all the forms and pulls out the red flags
   '-------------------------------------------------------
   Dim flags As New Collection
   Dim flag As String
   Dim sHtml As String
   Dim section_score As Integer
   Dim sString As String 
   '------------------------------------------------------
   'Get nuitrition data and collection of positive answers
   'Always indicate if nuitrition score is ok
   '------------------------------------------------------
   flags = FrmNuitrition.Nuitrition_RedFlags_Get() 
   
   sHtml = "<b>Nuitrition</b><BR> "
   section_score = FrmNuitrition.Nuitrition_Score_Get() 
   sString = "The patient's nuitrition score indicates that "
   If section_score < 4 Then
      sString &= "their nuitrition is probably ok.<BR>"
  Else If section_score > 5 Then 
      sString &= "they could be at high risk of nuitritional problems, specifically:<BR>"
  Else
      sString &= "they could be at moderate risk of nuitritional problems, specifically:<BR>"
  End If 
  shtml &= sString
  If flags.count Then 
      For Each flag In flags
        sHtml &= "-" & flag & "<br>"
       Next
  End If
  '-----------------------------------
  'Now mobility problems if they exist
  '-----------------------------------
  
   flags = FrmMobility.Mobility_Problems_Get()
   If flags.count Then
       sHtml &= "<b>Mobility</b><BR> "
       For Each flag In flags
       sHtml &= "-" & flag & "<br>"
      Next
   End If
  Return shtml
End

Public Sub Form_Close()
  
  Settings_Save()
  
  
End

Public Sub EditArea_Clear()
  
   ' rbStateOfHealthIndeterminate.value = True ' reset the radiobuttons
    rbNuitrition_Clear()
    FOver75Nuitrition.lblNuitritionScore.text = ""
    FOver75Nuitrition.EditArea_Clear()
    bExit = True  
    bExit = False
End
Public Sub EditArea_Page_PsychoSocial_Clear()
  
    FOver75PsychoSocial.cmbFamilyRelationships.Visible = False  
  
End

Public Sub HealthAssessment_New()
   '-----------------------------
   'Start a new health assessment
   '-----------------------------   
   EditArea_Clear()
   currentHealthAssessment = New Collection 
  ' tlFamilyHistory.text = family_history_Construct_html()
   Socialhistory_Display()
   frmProgressNotes.Visible = False
   FrmHomeSafety.Visible = False
   FrmMobility.Visible = False   
   FrmNuitrition.Visible = False 
   FrmPsychoSocial.Visible = False
   FrmSystemReview.Visible = True  
   PreviousForm = FrmSystemReview
   currentForm = FrmSystemReview
   Nextform = FrmPsychoSocial
   form_name = "system review"
   iWizardPageCount = 1
   WizardPage_Notify(1)
End
Public Sub WizardPage_Notify(iPage As Integer)
  
  lblWizardPage.text = "Page " & Str$(ipage) & " of 7"
  
End


Public Sub Settings_Save()


  ' Settings["HealthAssessment_Over75/VSplit_Family_and_Health_Issues.Layout"] = VSplit_Family_and_Health_Issues.Layout
   Settings["HealthAssessment_Over75/HSplit_HealthAssessments.Layout"] = HSplit_HealthAssessments.Layout
 
 
  

End

Private Sub Settings_Load()


   HSplit_HealthAssessments.Layout = Settings["HealthAssessment_Over75/HSplit_HealthAssessments.Layout"]
 '  VSplit_Family_and_Health_Issues.Layout = Settings["HealthAssessment_Over75/VSplit_Family_and_Health_Issues.Layout"]
  

End


Public Sub SocialHistory_Display()
   '-----------------------------------------
   'Displays the current social history
   'there is never more than 1 member in the
   'social history colection
   '-----------------------------------------
    Dim item As Collection
    pk_socialhistory = -1
    For Each item In currentconsult!social_history
       FrmPsychoSocial.taResponsiblePerson.text = item!responsible_person
       FrmPsychoSocial.teSocialHistory.text = item!history
       pk_socialhistory = item!pk_socialhistory
    Next
    bExit = False
End
Public Sub rbNuitrition_Clear()
  ' '---------------------------------------------------
  ' ' re-sets all the radiobuttons for nuitrition
  ' '-------------------------------------------------------
  ' Dim hCtrl As Control
  ' Dim HBoxContainer As HBox
  ' Dim HBoxRadioButtonContainer As HBox
  ' Dim rb As RadioButton
  ' 
  ' For Each hctrl In VBox_Nuitrition.Children
  '  If hctrl Is Hbox Then
  '      HBoxContainer = hCtrl
  '      For Each hctrl In HBoxContainer.Children
  '        If hctrl Is Hbox Then
  '           HBoxRadioButtonContainer = hCtrl
  '           For Each hctrl In HBoxRadioButtonContainer.children
  '            
  '                 If hctrl Is RadioButton And hctrl.tag = "hidden" Then 
  '                    rb = hctrl
  '                    rb.value = True 
  '                     Break
  '                 
  '                 End If
  '            Next
  '        End If   
  '      Next
  '  End If
  ' Next
  
End  
  
  

Public Sub HealthAssessment_Preview()
  
  
  
End

Public Sub Save()
  
 FClinical.Refresh_AllPreviousNotes()
  
End

' Public Sub Init(cons As cConsult)
'    ' '---------------------------------------------------------------------------
'    ' 'Load settings, do a little gui-homework
'    ' 'Fetch all current MentalHealth claims
'    ' '--------------------------------------------------------------------------
'    ' currentconsult = cons
'    ' Settings_Load()               'load split sizes and browser zoom for this form
'    ' 
'    ' textbox_help = modMentalHealthDBI.textbox_help_Get()           'link input textboxes to help prompts
'    ' 
'    ' 
'    ' '----------------------------------------------------------------------------
'    ' 'Create an instance of a html viewer and create observers for its buttons
'    ' 'Over-ride the events on the embedded web browser back and forwards buttons
'    ' 'and close buttons. Its boot up position will be on the first tab, but if
'    ' 'user clicks on tabs subsequently it will be 'shuffled around' by reparenting
'    ' '----------------------------------------------------------------------------
'    ' FHtml_Viewer = New FHtmlViewer(VBox_LastForm)
'    ' hObs = New Observer(FHtml_Viewer.tbWebBrowserClose) As "tbPreview_Close"
'    ' hObs = New Observer(FHtml_Viewer.tbWebBrowserBack) As "tbButton_Back"
'    ' hObs = New Observer(FHtml_Viewer.tbWebBrowserForeward) As "tbButton_forward"
'    ' '-----------------------------------------------------------------
'    ' 'Create a new progress notes page for clinical mental health notes
'    ' '-----------------------------------------------------------------
'    ' ProgressNotesPage = New FProgressNotePage(VBox_ProgressNotes)
'    ' ProgressNotesPage.Set_fk_section(const.cSection_MentalHealth)
'    ' ProgressNotesPage.Init(currentconsult)
'    ' '----------------------
'    ' 'Init some gui-elements
'    ' '----------------------
'    ' cvwPlans.Columns.Count = 7
'    ' cmbAssessmentTool.Add("DASS")
'    ' cmbAssessmentTool.Add("K10")
'    ' iDefault_Distress_Tool = 2 'make Me a Default FIXME currently K10
'    ' cmbAssessmentTool.index = iDefault_Distress_Tool - 1 '
'    ' columnview1.Columns.count = 2          'the popup columnview for terms
'    ' Reload()
'    ' '------------------------------------------
'    ' 'Show the latest mental health plan at init
'    ' '------------------------------------------
'    ' If Not IsNull(mentalhealthplan) Then
'    '       Plan_Show(mentalhealthplan!html)
'    ' End If
' End
' 
' Public Sub Reload()
'    ' 
'    ' Plans_Refresh()         'Show plans in the columnview
'    ' Plan_New()              'clear the editing area as for new pla n
'    ' 
' End
' 
' 
' 
' 
' Public Sub Form_Settings(mode As String)
'   
'   Select Case mode
'   Case "save"
'       ' Settings["MentalHealth/HSplit_MentalHealthPlans.Layout"] = HSplit_MentalHealthPlans.Layout
'       ' Settings["MentalHealth/VSplit_EditArea_Right.Layout"] = VSplit_EditArea_Right.Layout
'       ' Settings["MentalHealth/VSplit_EditArea_Left.Layout"] = VSplit_EditArea_Left.Layout
'       ' Settings["MentalHealth/HSplit_EditArea.Layout"] = HSplit_EditArea.Layout
'       ' Settings["MentalHealth/VSplit_MentalHealth.Layout"] = VSplit_MentalHealth.Layout
'       ' Settings["MentalHealth/LastPlan.zoom"] = FHtml_Viewer.WebBrowser1.zoom
'   Case "load"
'       ' HSplit_MentalHealthPlans.Layout = Settings["MentalHealth/HSplit_MentalHealthPlans.Layout"]
'       ' VSplit_EditArea_Right.Layout = Settings["MentalHealth/VSplit_EditArea_Right.Layout"]
'       ' VSplit_EditArea_Left.Layout = Settings["MentalHealth/VSplit_EditArea_Left.Layout"] 
'       ' HSplit_EditArea.Layout = Settings["MentalHealth/HSplit_EditArea.Layout"] 
'       ' VSplit_MentalHealth.Layout = Settings["MentalHealth/VSplit_MentalHealth.Layout"]
'       ' Try FHtml_Viewer.WebBrowser1.Zoom = Settings["MentalHealth/LastPlan.zoom", const.zoom[1]]
'       ' Try Fpreview.WebBrowser1.Zoom = Settings["MentalHealth/default_zoom_preview", const.zoom[1]]
'  
'  End Select
' End
' 
' 
' Public Sub txtMentalHealthPlan_LostFocus()
'   Last.BackGround = Color.White
'   
'   Last.Border = False
'   
' 
' End
' 
' ' Public Sub txtMentalHealthPlan_GotFocus()
' '  ''Last.Border = True
' '   
' '  Last.BackGround = Color.rgb(95, 255, 175)
' ' End
' 
' 
' 
' ' Public Sub TabStrip3_Menu()
' ' 
' '   mnuTabstrip.Popup()
' 
' End
' ' Public Sub mnuTabstrip_Click()
' '   
' '   Select Case Last.tag
' '   Case "font"
' '     If Dialog.SelectColor() Then Return
' '      Tabstrip3.foreground = Dialog.color
' '   Case "font colour"
' '    Print "font colour"
' '   End Select
' '   
' ' End
' ' 
' ' Public Sub Dummy_data()
' '   txtDiagnosis.text = "Adjustment Disorder With disturbance Of emotions And conduct"
' '   txtpresentingProblems.text = ""
' '     "Remorse and Insomnia"
' '     "Problems with managing anger"
' '     "Amphetamine and marijuana dependence?"
' '     "Benzodiazepam dependence?"
' '     "Drug withdraw"
' '     "Perpetuator of DV"
' '   txtMentalStateExamination.text = ""
' '    "Appearance and behaviour: Alex appears much older than his 37 years, he looks exhausted, distressed and teary, his eyes remain downcast, rarely making eye contact."
' '   "Content of thought: remorseful"
' '   "Insight: has some insight into the his behaviour and the effect on others"
' '   "Mood: depressed"
' '   "Affect: congruent"
' '   "Speech: tearful at times"
' '   "Otherwise NAD"
' '   txtBioPsychoSocial.text = ""
' '   "Alex is currently living with his sister. His wife indicates that he has been verbally abusive to her before and punched holes in the wall on several occasions.  There has previously been an apprehended violence order against Alex.  Alex has been in gaol for six months for amphetamine use. He says he now only occasionally uses amphetamines and marijuana - mostly on weekends.  Alex is currently unemployed.  He left school in year 9, and has no other qualifications.  Alex has 3 daughters."
' '   "No medications recorded, allergies not known. Use of alcohol and smoking status are not known."
' '   txtGoals.text = ""
' ' "The main issues are safety for both Alex, his wife and daughters, disruption to the family and changed living conditions, unemployment and financial stresses."
' '   ""
' '   "The immediate goal is to relieve Alex's distress and keep him and his family safe."
' '   txtRisk.text = ""
' '   "There is low-moderate risk for Alex of an OD due to depressed mood and drug use, and of harm to his wife, though minimal risk of harm to his sister. It is unceratin as to whether Alex's daughters witnessed this or earlier episodes, and may be at risk of behavioural or developmental problems."
' '    txtTreatment.text = ""
' ' "Treatment: Alex given a short supply of valium (low dose) to relieve immediate distress and help him get some sleep." 
' '  "" 
' ' "It Is important that Alex look after himself, eat well And reduce activities that disrupt his sleep.Alex will Continue To live With his sister For the Time being And maintain regular visits With the GP." ""
' '   ""
' '   "Referral to a psychologist for further assessment and indivdual sessions to identify stressors and improve coping skills.  Alex will consider attending a men's group to deal with anger issues before attending relationship counselling. Information provided on stress and coping, dealing with anger and the stimulant treatment program."
' '    txtPatientActions.text = "" 
' '    "Make appointment with psychologist"
' '    txtReviewDate.text = "1 Month - 01/12/2009"
' ' End
' ' Public Sub Terms_Get()
' '    '-------------------------------------------------------------------------------------
' '    'Gets list of diagnostic terms
' '    'Cannot set default if count is one because must  be able to add new occupations
' '    'can't remove the label because it needs to occupy space to keep textbox correct width
' '    '-------------------------------------------------------------------------------------
' '    Dim term As collection 
' '    Dim key As String
' '    If Trim(txtCodedTerm.text) = "" Then
' '         fk_code = 0
' '         fk_coding_system = 0
' '         VBox_ColumnView.Visible = False   
' '         Return
' '    End If
' '    
' '    Terms = modCodingDBI.Get_Terms(Trim(txtCodedTerm.text), chkLimit.value, chkicd10.value, SpinBoxTermLimits.value)
' '    Print terms
' '    With columnview1
' '          .Clear()
' '          .Columns[0].Width = txtCodedTerm.width - 100
' '          .Columns[1].width = 100
' '        
' '    End With
' '    If Terms.count Then
' '       For Each term In Terms
' '        key = term!code
' '        columnview1.Add(key, 0)
' '        columnview1[key][0] = term!term
' '        columnview1[key][1] = term!system
' '       Next 
' '       lblTermCount.text = Str$(terms.count) & " terms retreived"
' '       columnview1.tag = txtCodedTerm
' '       columnview1.Raise
' '       columnview1.Visible = True
' '      VBox_ColumnView.Visible = True 
' '    Else 
' '       VBox_ColumnView.Visible = False 'empty recordset
' ' 
' '       If Trim(txtCodedTerm.text) <> "" Then
' '          ' lblNewCondition.Foreground = Color.Red
' '       Endif 
' '    End If  
' ' End
' ' 
' ' Public Sub Columnview1_KeyPress()
' '    If key.code = key.return Then Columnview1_DblClick()
' ' End
' ' 
' ' Public Sub Coded_Term_Select()
' '    '---------------------------------------------
' '    'User has chosen a term from popup columnview1
' '    'Display this in the txtCodedTerm Textbox
' '    '---------------------------------------------
' '     columnview1.MoveCurrent()   'match internal cursor to visible row
' '     fk_code = Terms[columnview1.Item.key]!code
' '     'CurrentTerm = Terms[columnview1.Item.key]
' '     fk_coding_system = Terms[columnview1.Item.key]!fk_coding_system
' '     If txtDiagnosis.text = "" Then
' '        txtDiagnosis.text = columnview1.Item.Text
' '       
' '     End If   
' '     txtCodedTerm.text = Terms[columnview1.Item.key]!term & " (" & Terms[columnview1.Item.key]!code & ")"
' '     txtpresentingProblems.SetFocus()
' ' End
' ' 
' ' Public Sub Columnview1_DblClick()
' '    Coded_Term_Select() 
' '    Columnview1.Visible = False 
' '     VBox_ColumnView.Visible = False   
' ' End
' ' 
' ' Public Sub Decision_support(section As String)
' '   Dim anger As String = ""
' '  
' '     "<HTML>"
' '     "<BODY>"
' '     "<P><STRONG>Presenting Complaints </STRONG></P>"
' '     "<UL>"
' '     "<LI><P>May present initially with tension-related physical symptoms"
' '     "(headache, pounding heart), but inquiry will reveal prominent"
' '     "anxiety and excessive worry. "
' '     "</P>"
' '     "</UL>"
' '     "<P><STRONG>Diagnostic Features</STRONG><BR><STRONG></P>"
' '     "<P><STRONG>The key feature is months of uncontrollable worry over"
' '     "everyday things</STRONG></P>"
' '     "<UL>"
' '     "<LI><P STYLE=\"margin-bottom: 0cm\">Multiple symptoms of worry,"
' '     "anxiety or tension: "
' '     "</P>"
' '     "<UL>"
' '     "<LI><P STYLE=\"margin-bottom: 0cm\">Mental tension (worry, feeling"
' '     "tense or nervous, poor concentration "
' '     "</P>"
' '     "<LI><P STYLE=\"margin-bottom: 0cm\">Physical tension (restlessness,"
' '     "headaches, tremors, can't relax) "
' '     "</P>"
' '     "<LI><P STYLE=\"margin-bottom: 0cm\">Physical arousal (dizziness,"
' '     "sweating, fast or pounding heart, dry mouth, stomach pains) "
' '     "</P>"
' '     "</UL>"
' '     "<LI><P STYLE=\"margin-bottom: 0cm\">May last for months and often"
' '     "recurs. "
' '     "</P>"
' '     "<LI><P>Often triggered by stressful events in those with a chronic"
' '     "tendency to worry. "
' '     "</P>"
' '     "</UL>"
' '     "<P><STRONG>Differential Diagnosis </STRONG><BR></P>"
' '     "<UL>"
' '     "<LI><P STYLE=\"margin-bottom: 0cm\">If low or sad mood is also"
' '     "present, see section on <A HREF=\"http://www.gpcare.org/diagnosis/08%20Depression%20F32%20Diagnosis.html\">Depression</A>"
' '     "</P>"
' '     "<LI><P STYLE=\"margin-bottom: 0cm\">If sudden attacks of unprovoked"
' '     "anxiety are present, see section on <A HREF=\"http://www.gpcare.org/diagnosis/20%20Panic%20Disorder%20F41.0%20-%20D.html\">Panic"
' '     "Disorder.</A> "
' '     "</P>"
' '     "<LI><P STYLE=\"margin-bottom: 0cm\">If fear and avoidance of specific"
' '     "situations are present, see section on <A HREF=\"http://www.gpcare.org/diagnosis/21%20Phobic%20Disorder%20F40%20-%20D%20-%20D.html\">Phobic"
' '     "Disorders.</A> "
' '     "</P>"
' '     "<LI><P STYLE=\"margin-bottom: 0cm\">If heavy alcohol or drug use is"
' '     "present, see sections on <A HREF=\"http://www.gpcare.org/diagnosis/03%20Alcohol%20Use%20Disorders%20F10%20-%20d.html\">Alcohol"
' '     "Use disorders</A>, or <A HREF=\"http://www.gpcare.org/diagnosis/12%20Drug%20Use%20Disorders%20F11%20diagnosis.html\">Drug"
' '     "Use Disorder</A>. "
' '     "</P>"
' '     "<LI><P>Certain physical conditions (thyrotoxicosis) or medications"
' '     "(methyl xanthines, beta agonists) may cause anxiety symptoms but few"
' '     "cause excessive worry. "
' '     "</P>"
' '     "</UL>"
' '     "<P>Edited by Gavin Andrews MD, UNSW, <BR>© 2007 <A HREF=\"http://www.crufad.com/\" TARGET=\"_parent\">CRUfAD</A></P>"
' '     "<P><BR><BR>"
' '     "</P>"
' '     "</BODY>"
' '     "</HTML>"
' '   Select Case section
' '   Case "presenting problem"
' '        FClinical.DecisionSupport_SetHTML(anger)
' '        
' '   
' '   End Select
' ' End
' ' Public Sub Help_Prompt_Input(Show_support_for As String)
' '    '-------------------------------------------------------------
' '    'Shows a modicium of assistance to help users formulate a plan
' '    '-------------------------------------------------------------
' '    Select Case Show_support_for
' '    Case "presenting problems"
' '    Case "biopsychosocial history"
' '    Case "mental state"
' '  '  Case "risk none", "risk low", "risk medium", "risk high"
' '    Case "risk comemnts"
' '    Case "goals"
' '    Case "treatment and referrals"
' '    Case "actions"
' '    
' '    End Select
' ' End
' ' 
' ' Public Function EditArea_TxtBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean  
' '       Select Case tag
' '         Case "date"
' '           bKeyValid = modUtil.AllowKeys(const.AllowKeys_Date_DWMY, keycode)
' '         Case Else
' '           bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
' '       End Select
' '        Return bKeyValid
' ' 
' ' End
' ' 
' ' 
' ' Public Sub tbPreview_Close_Click()
' '   
' '   Stop Event
' '   If Tabstrip3.index = 1 Then
' '       FHtml_Viewer.Hide()
' '       VSplit_MentalHealth.Visible = True 
' '   End If 
' '   
' ' End
' ' 
' ' Public Sub MentalHealthPlans_Show()
' '    '----------------------------------------------------------------
' '    'Show all existing mental health plans in a html viewer and allow
' '    'the user to arrow back and forth to view them
' '    '----------------------------------------------------------------
' '    With FHtml_Viewer
' '       .lblWebBrowserNotes.text = "MentalHealth Plans"
' '       .tbWebBrowserBack.Visible = True
' '       .tbWebBrowserForeward.Visible = True
' '       .tbWebBrowserForeward.ToolTip = "Next MentalHealth plan"
' '       .tbWebBrowserBack.ToolTip = "Previous MentalHealth plan"
' '    End With
' '   
' '   
' ' End
' ' 
' ' Public Function Plan_Is_Valid() As Boolean
' '    '----------------------------------------------
' '    'Does minimal validation to ensure a valid plan
' '    'returns true if valid, false if not
' '    'fixme decide what is a minimum
' '    '----------------------------------------------  
' '    If Trim(txtDiagnosis.text) = "" Then 
' '       txtDiagnosis.SetFocus()
' '        Return False
' '    End If
' '    If fk_code = "" Then  'icpc and icd10 codes are strings
' '       txtCodedTerm.SetFocus()
' '        Return False
' '    End If   
' '    If Trim(txtpresentingProblems.text) = "" Then
' '       txtpresentingProblems.SetFocus()
' '    End If
' '    If Not (IsDate(txtReviewDate.text)) Then
' ' '       txtReviewDate.text = ""
' '       txtReviewDate.SetFocus
' '       Return False
' '    End If
' '   Return True
' '   
' ' End
' 
' Public Function Plan_Html_Construct() As String
'    ' Dim sText As String
'    ' Dim sHtml As String = modHTML.mentalhealthplan_template
'    ' If rbInitialPlan.Value = True Then
'    '    sText = "INITIAL"
'    ' Else
'    '    sTeXT = "REVIEW"
'    ' End If
'    ' sHtml = Replace(shtml, "%type", sText)
'    ' sHtml = Replace(shtml, "%name", currentconsult!patient!title & " " & currentconsult!patient!firstname & " " & currentconsult!patient!surname)
'    ' sHtml = Replace(shtml, "%address", currentconsult!patient!street & " " & currentconsult!patient!town & " " & " " & currentconsult!patient!postcode)
'    ' sHtml = Replace(shtml, "%street", currentconsult!patient!street)
'    ' sHtml = Replace(shtml, "%suburb", currentconsult!patient!town & " " & currentconsult!patient!postcode)
'    ' sHtml = Replace(shtml, "%diagnosis", Trim(txtDiagnosis.text))
'    ' sHtml = Replace(shtml, "%presentingproblems", Trim(txtpresentingProblems.text))
'    ' sHtml = Replace(shtml, "%biopsychosocial", Trim(txtBioPsychoSocial.text))
'    ' sHtml = Replace(shtml, "%mmse", Trim(txtMentalStateExamination.text))
'    ' sHtml = Replace(shtml, "%risklevel", Const.smentalhealth_risk[fk_lu_risk_to_others])
'    ' sHtml = Replace(shtml, "%risk", Trim(txtRisk.text))
'    ' sHtml = Replace(shtml, "%goals", Trim(txtGoals.text))   
'    ' sHtml = Replace(shtml, "%treatment", Trim(txtTreatment.text))
'    ' sHtml = Replace(shtml, "%actions", Trim(txtPatientActions.text))
'    ' sHtml = Replace(shtml, "%reviewdate", "The plan will be reviewed on " & Format(Val(txtReviewDate.text), "dd/mm/yyyy"))
'    ' Return shtml
' End
' 
' Public Sub Plan_Preview()
'    ' If pk_view = 0 Then Return
'    ' With FHtml_Viewer
'    '    .tbWebBrowserBack.visible = False   
'    '    .tbWebBrowserForeward.visible = False  
'    '    .lblWebBrowserNotes.text = ""
'    ' End With 
'    ' FHtml_Viewer.Reparent(VBox_Preview)
'    ' FHtml_Viewer.Raise
'    ' VSplit_MentalHealth.Visible = False 
'    ' modHTML.Display_HTML(Plan_Html_Construct(), FHtml_Viewer.WebBrowser1, "plan_preview")
' End
' 
' Public Sub Plan_New()
'    ' '------------------------------------------------------------------------------
'    ' 'User wants a new plan - set focus to presenting symptoms and put up mini-help
'    ' '------------------------------------------------------------------------------ 
'    ' EditArea_Clear()
'    ' currentTerm = New Collection 
'    ' TeamCareMembers_Init()
'    ' ReferralTo_SearchBy_Criteria = Const.contacttype_employee
'    ' fk_lu_risk_to_others = Const.mentalhealth_risk_undefined
'    ' fk_lu_plan_type = Const.mentalhealth_plantype_initial
'    ' rbInitialPlan.value = True  
'    ' txtpresentingProblems.SetFocus()
'    ' Help_Prompt_Input(txtpresentingProblems.tag)
' End
' 
' Public Sub Plan_Edit()
'    ' '------------------------------------------------------------------------------
'    ' 'User has clicked on an existing mental health plan display in the editing area
'    ' 'pk_view is set by user clicking on the plans list: cvwPlans_click()
'    ' 'extract the keys needed, otherwise, just load the textboxes
'    ' 'fk_problem may not be >0 as the problem may not have been entered into th
'    ' 'health issues (past history) section although it should have been
'    ' '------------------------------------------------------------------------------
'    ' pk_view = cvwPlans.Item.Key
'    ' '--------------------------------------------------------------------------
'    ' 'If the plan is edited and the user DOES NOT CHANGE THE PLAN TYPE TO REVIEW
'    ' 'it will be saved as the orginal plan (modified)
'    ' '---------------------------------------------------------------------------
'    ' fk_plan = pk_view
'    ' fk_code = mentalhealthplans[fk_plan]!fk_code
'    ' fk_coding_system = mentalhealthplans[fk_plan]!fk_coding_system
'    ' Try fk_problem = mentalhealthplans[fk_plan]!fk_problem
'    ' fk_lu_risk_to_others = mentalhealthplans[fk_plan]!fk_lu_risk_to_others
'    ' 
'    ' fk_lu_plan_type = mentalhealthplans[fk_plan]!fk_lu_plan_type  'can be changed
'    ' Select Case fk_lu_plan_type
'    '    Case Const.mentalhealth_plantype_initial
'    '       rbInitialPlan.value = True
'    '    Case Const.mentalhealth_plantype_review
'    '       rbReviewPlan.Value = True  
'    ' End Select
'    ' 
'    '  '----------------------
'    ' 'Populate the textboxes
'    ' '----------------------  
'    ' bExit = True
'    ' txtdiagnosis.text = mentalhealthplans[fk_plan]!diagnosis
'    ' txtCodedTerm.text = mentalhealthplans[fk_plan]!coded_term & " (" & mentalhealthplans[fk_plan]!fk_code & ")" 
'    ' txtMentalStateExamination.text = mentalhealthplans[fk_plan]!mental_state_examination
'    ' txtpresentingProblems.text = mentalhealthplans[fk_plan]!presenting_problems
'    ' txtBioPsychoSocial.text = mentalhealthplans[fk_plan]!bio_psycho_social
'    ' txtMentalStateExamination.text = mentalhealthplans[fk_plan]!mental_state_examination
'    ' Select Case fk_lu_risk_to_others
'    '    Case Const.mentalhealth_risk_none
'    '        rbHarmNone.value = True
'    '    Case Const.mentalhealth_risk_low
'    '        rbHarmLow.value = True
'    '    Case Const.mentalhealth_risk_medium
'    '        rbHarmMedium.value = True
'    '    Case Const.mentalhealth_risk_high
'    '       rbHarmHigh.value = True
'    ' End Select
'    ' 
'    ' txtRisk.text = mentalhealthplans[fk_plan]!risk_harm_comments
'    ' txtGoals.text = mentalhealthplans[fk_plan]!goals
'    ' txtTreatment.text = mentalhealthplans[fk_plan]!treatment_referrrals 
'    ' txtPatientActions.text = mentalhealthplans[fk_plan]!patient_action
'    ' txtReviewDate.text = Format(mentalhealthplans[fk_plan]!review_date, "dd/mm/yyy")
'    ' Plan_Show(mentalhealthplans[fk_plan]!html)
'    ' bExit = True
'    '   
'    ' 
'   
' End
' 
' Public Sub Plans_Refresh()
'    ' '----------------------------------------------------------
'    ' 'Refreshes the plans collection and puts back into the list
'    ' '----------------------------------------------------------
'    ' Dim plan As collection
'    ' Dim x As Integer
'    ' Dim bDataChanged As Boolean
'    ' Dim sPerson As String
'    ' currentconsult.Refresh("mentalhealthplans")
'    ' mentalhealthplans = currentconsult!mentalhealthplans  
'    ' cvwPlans.Clear()           'clear the list    
'    ' '-------------------------------------------------
'    ' 'Display the plan: Date/diagnosis/Type/Prepared By
'    ' '-------------------------------------------------
'    ' For Each mentalhealthplan In mentalhealthplans 
'    '     x = mentalhealthplan!pk_mentalhealth_plan
'    '     cvwPlans.Add(x, 0)
'    '     cvwPlans[x][0] = Format(mentalhealthplan!plan_date, "dd/mm/yyyy")
'    '     cvwPlans[x][1] = "  "
'    '     cvwPlans[x][2] = mentalhealthplan!diagnosis
'    '     cvwPlans[x][3] = "  "
'    '     cvwPlans[x][4] = mentalhealthplan!type
'    '     cvwPlans[x][5] = "  "
'    '     cvwPlans[x][6] = "Prepared by:" & mentalhealthplan!title & mentalhealthplan!wholename
'    '     If x = 0 Then
'    '       Plan_Show(mentalhealthplan!html)
'    '     End If
'    '     Inc x
'    '  Next
' End
' 
' 
' 
' Public Sub Plan_Show(shtml As String)
'    ' With FHtml_Viewer
'    '    .tbWebBrowserBack.visible = True   
'    '    .tbWebBrowserForeward.visible = True  
'    '    .lblWebBrowserNotes.text = ""
'    ' End With 
'    ' FHtml_Viewer.Reparent(VBox_LastForm)
'    ' FHtml_Viewer.Raise
'    ' modHTML.Display_HTML(shtml, FHtml_Viewer.WebBrowser1, "plan_preview")
' End
' 
' 
' 
' Public Sub EditAreaButtons_Click()
'   ' 
'   ' Select Case Last.tag
'   ' Case "save"
'   '     Save()
'   ' Case "new"
'   '     Plan_New()
'   '  Case "preview"
'   '    Plan_Preview()
'   '  End Select  
' End
' 
' Public Sub Save()
'   '  '-----------------------------------------------
'   '  'Saves the current mental health plan
'   '  'First validate enough information for the save
'   '  '-----------------------------------------------
'   '  Dim sMsg As String
'   '   If Not Plan_Is_Valid() Then Return
'   '  '----------------------------
'   '  '   pk serial NOT NULL,
'   '  '   fk_consult integer NOT NULL, -- key to clin_consult.consult > gives Dr and date plan formulated
'   '  '   fk_problem integer, -- key to clin_history.past_history if not null is linked to health issue
'   '  '   diagnosis text NOT NULL, -- the diagnosis may be free text but could be coded
'   '  '   fk_coding_system integer, -- if not null this is the coding system used for the coded diagnosis
'   '  '   fk_code text,
'   '  '   presenting_problems text,
'   '  '   bio_psycho_social text,
'   '  '   mental_state_examination text,
'   '  '   fk_lu_risk_to_others integer, -- key to lu_risk_to_others table
'   '  '   fk_stress_assessment integer, -- key to stress_assessment table eg results of K10
'   '  '   risk_harm_comments text,
'   '  '   goals text,
'   '  '   treatment_referrrals text,
'   '  '   patient_action text,
'   '  '   review_date date,
'   '  '   html text,
'   '  '   
'   '  '  OK: First prompt the user if they seem to be reviewing an existing plan
'   '  '-------------------------------------------------------------------------
'   '  If fk_plan And fk_lu_plan_type = Const.mentalhealth_plantype_review Then
'   '      sMsg = "You are saving an existing plan.\n\n"
'   '             "Conifirm save as a review?"
'   '      If Message.Warning(smsg, "Yes", "No") = 2 Then
'   '         Return
'   '      End If
'   '      fk_plan = 0
'   '  End If   
'   '      
'   '  mentalhealthplan = New Collection
'   '  mentalhealthplan!fk_lu_plan_type = fk_lu_plan_type
'   '  mentalhealthplan!fk_consult = currentconsult.GetPK()
'   '  If fk_plan <> 0 Then
'   '     mentalhealthplan!fk_plan = fk_plan
'   '  End If
'   '  If fk_problem <> 0 Then
'   '     mentalhealthplan!fk_problem = fk_problem
'   '  End If
'   '  mentalhealthplan!diagnosis = Trim(txtdiagnosis.text)
'   '  mentalhealthplan!fk_coding_system = fk_coding_system
'   '  mentalhealthplan!fk_code = fk_code
'   '  mentalhealthplan!presenting_problems = Trim(txtpresentingProblems.text)
'   '  mentalhealthplan!bio_psycho_social = Trim(txtBioPsychoSocial.text)
'   '  mentalhealthplan!mental_state_examination = Trim(txtMentalStateExamination.text)
'   '  
'   '  If fk_lu_risk_to_others <> const.mentalhealth_risk_undefined Then  
'   '     mentalhealthplan!fk_lu_risk_to_others = fk_lu_risk_to_others
'   '  End If
'   '  mentalhealthplan!risk_harm_comments = Trim(txtRisk.text)
'   '  mentalhealthplan!goals = Trim(txtGoals.text)
'   '  mentalhealthplan!treatment_referrrals = Trim(txtTreatment.text)   
'   '  mentalhealthplan!patient_action = Trim(txtPatientActions.text)
'   '  mentalhealthplan!review_date = Val(txtReviewDate.text)
'   '  mentalhealthplan!html = Plan_Html_Construct()
'   ' modDBConnect.BeginTrans()
'   ' fk_plan = modMentalHealthDBI.Save(currentconsult, pk_view, mentalhealthplan)
'   ' modDBConnect.CommitTrans()
'   ' Reload()
'   
' End
' ' 
' ' Public Sub EditArea_AlertDataChanged(flag As Boolean)
' '    '--------------------------------------------------
' '    'Adds or removes padding around edit area 
' '    'to indicate if data is changed and unsaved
' '    '--------------------------------------------------
' '    'Print "in recall datachange_Update_indicators"
' '   If flag Then
' '       HBox_EditArea.Padding = 1
' '       HBox_EditArea.Background = Color.red
' '       tbSave.Foreground = color.red 
' '       
' '   Else
' '       HBox_EditArea.Padding = 0
' '       HBox_EditArea.Background = Color.white
' '       tbSave.Foreground = color.black
' '   End If
' '   
' ' End  
' ' Public Sub EditArea_Clear()
' '    '-----------------------
' '    'Clears the editing area
' '    '-----------------------
' '    bExit = True
' '    txtBioPsychoSocial.text = ""
' '    txtdiagnosis.text = ""
' '    txtCodedTerm.text = ""
' '    chkicd10.Value = False   'fixme, what it not using icpc
' '    txtGoals.text = ""
' '    txtMentalStateExamination.text = ""
' '    txtPatientActions.text = ""
' '    txtPatientActions.text = ""
' '    txtpresentingProblems.text = ""
' '    txtReviewDate.text = ""
' '    txtTreatment.text = ""
' '    txtRisk.text = ""
' '    txtScore.text = ""
' '    cmbAssessmentTool.index = iDefault_Distress_Tool
' '    rbReset.value = True 'turn off all the visible radio buttons
' '    EditArea_AlertDataChanged(False)
' '    pk_view = 0
' '    bExit = False   
' '   
' ' End
' ' 
' ' Public Sub EditArea_TxtBox_GotFocus()
' '   Last.BackGround = Color.rgb(95, 255, 175)
' '   Help_Prompt_Input(Last.tag)
' '   Select Case Last.tag
' '   Case "referral to"
' '         With listview2
' '             .top = VBox_Referrals.top + HBox_ReferralTo.top + txtReferralTo.Height + VSplit_EditArea_Right.top
' '             .left = txtReferralTo.Left
' '             .width = HSplit_TeamCareMembers.Width
' '         End With
' '   Case "diagnosis", "coded diagnosis"
' '       With VBox_ColumnView
' '             .top = VBox16.top + Last.parent.top + Last.parent.height
' '             .left = Last.Left
' '             .width = Last.width
' '       End With
' '   End Select
' '    FClinical.DecisionSupport_SetHTML(textbox_help[Last.tag])
' ' End
' ' 
' ' Public Sub EditArea_TxtBox_KeyRelease()
' ' 
' '   Select Case Last.tag
' '   Case "referral to"
' '      TeamCareMember_Selection("get")
' '   Case "coded diagnosis"
' '        Terms_Get()
' '   Case "presenting problem"
' '       If InStr(Last.text, "anxiety") Then
' '           Decision_support(Last.tag)
' '       End If   
' '   End Select
' ' 
' ' End
' ' 
' ' Public Sub EditArea_TxtBox_LostFocus()
' ' 
' '   Last.BackGround = color.White
' '   If Last.tag = "review date" Then
' '    If Not (IsDate(Val(Last.text))) Then
' '       txtReviewDate.text = ""
' '       txtReviewDate.SetFocus
' '    End If
' '   End If
' ' End
' ' 
' ' Public Sub EditArea_TxtBox_Change()
' '  If bexit Then Return
' ' 
' '   Select Case Last.tag
' '   Case "coded diagnosis"
' '      If Trim(txtCodedTerm.text) = "" Then
' '         VBox_ColumnView.Visible = False   
' '         fk_code = 0
' '         fk_coding_system = 0
' '      End If
' '    Case "presenting problems"
' '      If InStr(Last.text, "\n\n") Then
' '          Last.text = Replace(Last.text, "\n\n", "")
' '          txtBioPsychoSocial.SetFocus()
' '      End If
' '    Case "biopsychosocial history"
' '         If InStr(Last.text, "\n\n") Then
' '             Last.text = Replace(Last.text, "\n\n", "")
' '             txtMentalStateExamination.SetFocus()
' '         End If
' '    Case "mental state"
' '         If InStr(Last.text, "\n\n") Then
' '             Last.text = Replace(Last.text, "\n\n", "")
' '             rbHarmNone.SetFocus()
' '         End If
' '    Case "risk comments"
' '         If InStr(Last.text, "\n\n") Then
' '             Last.text = Replace(Last.text, "\n\n", "")
' '             txtGoals.SetFocus()
' '         End If
' ' 
' '    Case "goals"
' '            If InStr(Last.text, "\n\n") Then
' '             Last.text = Replace(Last.text, "\n\n", "")
' '             txtTreatment.SetFocus()
' '         End If
' ' 
' '    Case "treatment"
' '         If InStr(Last.text, "\n\n") Then
' '             Last.text = Replace(Last.text, "\n\n", "")
' '             txtPatientActions.SetFocus()
' '         End If
' '    Case "actions"
' '       If InStr(Last.text, "\n\n") Then
' '             Last.text = Replace(Last.text, "\n\n", "")
' '             txtReviewDate.SetFocus()
' '       End If
' '   End Select
' ' End
' ' 
' ' Public Sub EditArea_TxtBox_KeyPress()
' '    Dim x As Integer
' '    If bexit Then Return
' '    Select Case Key.code
' '    Case Key.Down
' '       If VBox_ColumnView.Visible Then  
' '          columnview1.SetFocus()
' '          columnview1.MoveFirst()
' '          columnview1.Item.Selected = True
' '       End If
' '      If listview2.Visible = True Then
' '         listview2.SetFocus()
' '         listview2.MoveFirst()
' '         Listview2.Item.Selected = True
' '      End If 
' '    Case Key.return 
' '       Select Case Last.tag
' '       Case "diagnosis"
' '          If Trim(txtCodedTerm.text) <> "" Then
' '              txtpresentingProblems.SetFocus()
' '          Else
' '             txtCodedTerm.SetFocus()
' '          End If  
' '       Case "coded diagnosis"
' '          'user could have typed a full term in so we have to check for a match
' '          If VBox_ColumnView.Visible Then
' '             columnview1.MoveFirst
' '             For x = 0 To terms.count - 1
' '                columnview1.MoveCurrent
' '                If Lower(Trim(Last.text)) = Lower(Terms[columnview1.Item.key]!term) Then
' '                   Coded_Term_Select()
' '                   Break
' '                End If
' '             Next
' '          End If
' '          txtpresentingProblems.SetFocus()
' '          
' '       Case "presenting problems"
' '        '  txtBioPsychoSocial.SetFocus()
' '       Case "biopsychosocial history"
' '         ' txtMentalStateExamination.SetFocus()
' '       Case "mental state"
' '     
' '       Case "risk comemnts"
' '       Case "goals"
' '       Case "treatment and referrals"
' '       Case "actions"
' '       End Select
' '    End Select
' ' 
' ' End
' ' 
' ' Public Sub SpinBoxTermLimits_Change()
' ' 
' '   Terms_Get()
' ' 
' ' End
' ' 
' ' Public Sub EditArea_ChkBoxes_Click()
' ' 
' '   '  Case "icd10", "limit"
' '          Terms_Get()
' ' 
' ' End
' ' 
' ' Public Sub cvwPlans_Click()
' '    cvwPlans.MoveCurrent()
' '    Plan_Edit
' ' End
' ' 
' ' Public Sub TabStrip3_Click()
' '    '--------------------------------
' '    'User clicks on the main tabstrip
' '    '--------------------------------
' '    Select Case Last.index
' '    Case 0
' '        FHtml_Viewer.Reparent(VBox_LastForm)
' '    Case 1
' '       VSplit_MentalHealth.Visible = True
' '       FHtml_Viewer.Hide()
' '    End Select
' '    FHtml_Viewer.Raise
' ' End
' ' 
' ' Public Sub EditArea_RadioButtons_KeyPress()
' ' 
' '   If key.code = key.return Then
' '          txtRisk.SetFocus()
' '   End If
' ' 
' ' End
' ' 
' ' Public Sub EditArea_RadioButtons_Click()
' ' 
' '    fk_lu_risk_to_others = Last.tag
' ' 
' ' End
' ' 
' ' Public Sub rbReviewPlan_Click()
' '    '----------------------------------------------
' '    'Tag of these controls = either:
' '    ' Const.mentalhealth_plantype_initial or review
' '    '---------------------------------------------- 
' '    fk_lu_plan_type = Last.tag
' ' End
' ' 
' ' Public Sub ListView2_KeyPress()
' '    '------------------------------------------------------------------
' '    'Act only on the <ENTER> key display what is in list in the textbox
' '    '------------------------------------------------------------------
' '    If Key.code = Key.Return Then 
' '       listview2_DblClick
' '    End If
' ' End
' ' 
' ' Public Sub listview2_DblClick()
' '   'FIXME USE LISTVIEW1
' '  TeamCareMember_Selection("accept", "list")
' '   listview2.Visible = False   
' ' End
' ' 
' ' 
' ' Public Sub TeamCareMember_Selection(action As String, Optional calling_control As String)
' '    '-------------------------------------------------------------------------------
' '    'Allows user to search for persons/organisations/employees they are referring to
' '    '-------------------------------------------------------------------------------
' '    Dim x As Integer
' '    Dim sMsg As String
' '   
' '    Select Case action
' '    Case "get"
' '    
' '        If Len(Trim(txtReferralTo.text)) = 0 Then
' '           listview2.Visible = False  
' '           Return
' '        End If
' '          Select Case ReferralTo_SearchBy_Criteria
' '             Case Const.contacttype_organisation
' '                 collection_members = modContactsDBI.Organisations_Get(Trim(txtReferralTo.text))
' '                 If collection_members.count = 0 Then
' '                   bExit = True
' '                 '  rbSearchBy_branch.value = True
' '                   bExit = False
' '                   Return
' '                 End If
' '             Case Const.contacttype_employee
' '                collection_members = modContactsDBI.Employee_Get(Trim(txtReferralTo.text))
' '                  If collection_members.count = 0 Then
' '                   rbSearchBy_Organisation.value = True
' '                   Return
' '                End If
' '             Case Const.contacttype_PersonsAndPatients 'set to inlude all patients and other persons
' '                collection_members = modContactsDBI.Person_Get(Trim(txtReferralTo.text), const.contacttype_PersonsAndPatients)
' '             Case const.contacttype_branch
' '                collection_members = modContactsDBI.Branches_Get_Like(Trim(txtReferralTo.text))
' '                If collection_members.count = 0 Then
' '                   rbSearchBy_Employee.value = True
' '                   Return
' '               End If
' '           End Select
' '          listview2.Clear
' '          '-----------------------------------------------------------------
' '          'If categories exist to match the text, auto-select or show a list
' '          '-----------------------------------------------------------------
' '          If collection_members.count Then 
' '            Try collection_members.Remove("sql_in_english") 'ian included this for FClinical patient search
' '            For Each collection_member In collection_members
' '               Select Case ReferralTo_SearchBy_Criteria
' '                   Case Const.contacttype_organisation, Const.contacttype_branch
' '                      sMsg = collection_member!organisation & " " & collection_member!branch & " " 
' '                      sMsg &= collection_member!street & " " & collection_member!town & " " & collection_member!postcode 
' '                   Case Const.contacttype_employee
' '                      smsg = collection_member!title & " "
' '                      sMsg &= collection_member!firstname & " "
' '                      smsg &= collection_member!surname & " "
' '                      sMsg &= "(" & collection_member!occupation & ") "
' '                      sMsg &= collection_member!organisation & " " & collection_member!branch & " "  
' '                      sMsg &= collection_member!street & " " & collection_member!town & " " & collection_member!postcode 
' '                   Case Const.contacttype_PersonsAndPatients
' '                     smsg = collection_member!wholename
' '                     sMsg &= collection_member!street & " " & collection_member!town & " " & collection_member!postcode 
' '                         
' '               End Select
' '               listview2.Add(collection_member!pk_view, sMsg)
' '             Next 
' '           listview2.Visible = True
' '           listview2.Raise
' '           listview2.tag = txtReferralTo
' '            Return 
' '          Else 
' '           listview2.Visible = False  
' '          End If
' '         
' '             
' '        
' '    Case "accept"
' '       '-------------------------------------------------------
' '       'CALLED BY  : user hitting <enter> in txtTeamCareMembers
' '       '             user hitting <enter> on the popup list 
' '       '             user double clicking on the popup list
' '       '-------------------------------------------------------
' '        bExit = True
' '        If calling_control = "textbox" Then
' '          '-------------------------------------------------------
' '          'User has just hit <enter> without scrolling on the list
' '          'try and find a match
' '          '-------------------------------------------------------
' '           If listview2.Visible Then
' '          '    listview1.MoveFirst
' '          '    For x = 0 To listview1.count - 1
' '          '       If Lower(listview1.Item.text) = Trim(Lower(txtEmployeeOccupation.text)) Then
' '          '          fk_occupation = listview1.Item.Key
' '          '          Break
' '          '       End If
' '          '   Next
' '          End If
' '          '------------------------------------------------------------------
' '          'Either no match was found OR list wasn't visible anyway = no match
' '          '------------------------------------------------------------------
' '        '  fk_occupation = 0
' '         listview2.Visible = False     
' '        Else
' '          '-----------------------------------------------------------
' '          'Routine called by user clicking on list or pressing <enter>
' '          '-----------------------------------------------------------
' '          If listview2.Visible Then
' '            listview2.MoveCurrent   'set internal cursor to match marquee
' '            collection_member = collection_members[listview2.Item.key]
' '            Try fk_organisation = collection_member!fk_organisation
' '            Try fk_branch = collection_member!fk_branch
' '            Try fk_person = collection_member!fk_person
' '            Try fk_employee = collection_member!fk_employee
' '            bExit = False
' '            If Not teamcare_member_check_duplicated(collection_member) Then
' '                TeamCareMembers_Add(collection_member)
' '            End If
' '          End If
' '        End If
' '      
' '       bExit = False  
' '    End Select
' ' 
' ' End
' ' Public Sub TeamCareMembers_Add(member As collection)
' '    Dim tcm As New collection 
' '    tcm = New collection
' '    Try tcm!summary = listview2.Item.text 'not present for patient
' '    Try tcm!fk_organisation = member!fk_organisation
' '    Try tcm!fk_branch = member!fk_branch
' '    Try tcm!fk_employee = member!fk_employee
' '    Try tcm!fk_person = member!fk_person
' '   ' tcm!wholename = member!title & " " & member!firstname & " " & member!surname 
' '    tcm!wholename = Member!wholename
' '    If IsNull(Member!responsibility) Then
' '       tcm!responsibility = ""
' '    Else  
' '       tcm!responsibility = Member!responsibility
' '    End If   
' '    '---------------------------------------
' '    'Ok, all seems in order, add to the list
' '    '---------------------------------------
' '    TeamCareMembers.Add(tcm, TeamCareMembers.Count)
' '    
' '    TeamCareMembers_RefreshList()
' '  
' '   
' '    txtReferralTo.Clear()
' '     txtTeamCareMember_Responsibility.text = ""
' '     txtTeamCareMember_Responsibility.setfocus()
' '    ' listview2.Visible = False 
' '    cvwTeamCareMembers.MoveLast()
' '    cvwTeamCareMembers.Item.Selected = True   
' '    cvwTeamCareMembers_Select()
' '    Return
' ' 
' ' End
' ' 
' ' Public Sub TeamCareMembers_MakeSummary(Collection_member As collection) As String
' '    '---------------------------------------------------------------------------
' '    'makes a summary like organisation-address-employee (occupation) for display
' '    '---------------------------------------------------------------------------
' '    Dim sMsg As String
' '    If IsNull(Collection_member!fk_employee) And IsNull(Collection_member!fk_organisation) Then
' '       '----------------------------------------------------------
' '       'ok- if not an organisation or an employee must be a person
' '       '----------------------------------------------------------
' '       ReferralTo_SearchBy_Criteria = Const.contacttype_PersonsAndPatients
' '       sMsg = collection_member!wholename & " " & collection_member!summary 
' '     Else If Not IsNull(Collection_member!fk_person) Then
' '          ReferralTo_SearchBy_Criteria = Const.contacttype_employee
' '          sMsg = collection_member!wholename & collection_member!summary
' '     Else If Not IsNull(Collection_member!fk_organisation) Then
' '          ReferralTo_SearchBy_Criteria = Const.contacttype_organisation
' '          sMsg = collection_member!summary ' & " "
' '    ' Else
' '    '    TeamCareMember_SearchBy_Criteria = Const.contacttype_PersonsAndPatients 'remove this
' '    End If
' '    Return sMsg    
' ' End
' ' 
' ' Public Sub TeamCareMembers_RefreshList()
' '    '---------------------------------------
' '    'Refreshes the list of team care members
' '    '---------------------------------------
' '    Dim TeamCareMember As collection 
' '    Dim aCollection As Collection
' '    
' '   cvwTeamCareMembers.Clear()
' '    For Each TeamCareMember In TeamCareMembers
' '      cvwTeamCareMembers.Add(cvwTeamCareMembers.count, TeamCareMembers_MakeSummary(TeamCareMember))
' '    Next
' ' End
' ' 
' ' Public Sub cvwTeamCareMembers_Select()
' '    '----------------------------------------------------------------
' '    'Display the team care members responsibility
' '    'either user clicks on or scrolls down to a row of the columnview
' '    'We cannot edit team members except via the contacts database,
' '    '----------------------------------------------------------------
' '    If bexit Then Return 
' '    cvwTeamCareMembers.MoveCurrent()
' '    iTeamCareMember = cvwTeamCareMembers.Item.key
' '    If Not IsNull(TeamCareMembers[iTeamCareMember]!wholename) Then
' '          tlResponsibility.text = "Responsibilities of " & TeamCareMembers[iTeamCareMember]!wholename 
' '    End If
' '    bExit = True
' '    If IsNull(TeamCareMembers[iTeamCareMember]!responsibility) Then
' '       txtTeamCareMember_Responsibility.text = ""
' '       
' '    Else
' '       txtTeamCareMember_Responsibility.text = TeamCareMembers[iTeamCareMember]!responsibility
' '      
' '    End If
' '    bExit = False  
' ' End
' ' Public Sub TeamCareMembers_RefreshCollection()
' '    '-----------------------------------------------------
' '    'When an item is removed from a collection, its count
' '    'not longer reflects its internal key order
' '    'so rebuild it
' '    '-----------------------------------------------------
' '    Dim teamMember As collection 
' '    
' '    TeamCareMembers = New collection 
' '    For Each collection_member In TeamCareMembers_old
' '      teammember = New Collection
' '      teamMember!pk = collection_member!pk
' '      teammember!fk_pasthistory = collection_member!fk_pasthistory
' '      teammember!fk_organisation = collection_member!fk_organisation
' '      teammember!fk_branch = collection_member!fk_branch
' '      teammember!fk_employee = collection_member!fk_employee
' '      teammember!fk_person = collection_member!fk_person
' '      teammember!wholename = collection_member!wholename
' '      teammember!summary = collection_member!summary
' '      teammember!responsibility = collection_member!responsibility
' '      TeamCareMembers.Add(teammember, TeamCareMembers.count)
' '     Next
' ' End
' ' 
' ' Public Sub rbTeamCareMember_SearchCriteria_Click()
' '    '-----------------------------------------------------------------------------
' '    'User wants to change/define the type of search for someone to refer to
' '    'The tag of the radiobuttons for searching for  is eg contacttype_organisation
' '    'Re-trigger the search
' '    '-----------------------------------------------------------------------------
' '    ReferralTo_SearchBy_Criteria = Last.tag
' '    If bExit Then Return 
' '   TeamCareMember_Selection("get")
' ' End
' ' 
' ' Public Function teamcare_member_check_duplicated(Member As collection) As Boolean
' '    '--------------------------------
' '    'returns False if not a duplicate
' '    '-------------------------------- 
' '   
' '    Dim sMsg As String = "You have selected:\n\n"
' '    If Not (fk_organisation Or fk_branch Or fk_employee Or fk_person) Then
' '       Select Case ReferralTo_SearchBy_Criteria
' '          Case Const.contacttype_employee
' '               smsg = "The employee "
' '           Case Const.contacttype_organisation
' '               smsg = "The organisation "
' '         Case Const.contacttype_PersonsAndPatients
' '             smsg = "The person "
' '       End Select
' '       sMsg &= "that you are looking for does not yet exist in the contacts database.\n\n" 
' '       sMsg &= "You cannot enter free text here.\n\n"
' '       sMsg &= "Please add the details via the contacts section before proceeding."
' '       Goto reset
' '    End If
' '    For Each member In TeamCareMembers
' '       Select Case ReferralTo_SearchBy_Criteria
' '       Case Const.contacttype_employee
' '            If member!fk_employee = fk_employee Then
' '              sMsg &= member!summary & "\n\nA person of this name already exsits in the team care list" 
' '             Goto reset
' '             End If
' '       Case Const.contacttype_organisation
' '          If member!fk_organisation = fk_organisation And member!fk_branch = fk_branch Then
' '             sMsg &= member!summary & "\n\nA person of this name already exsits in the team care list" 
' '             Goto reset 
' '          End If   
' '       Case Const.contacttype_PersonsAndPatients
' '        If member!fk_person = fk_person Then
' '           sMsg &= member!wholename & " " & member!summary & "\n\nA person Of this name already exsits In the team care list"
' ' Goto reset
' '         End If   
' '       End Select
' '    Next  
' '    Return False
' ' Reset:
' '   listview2.Visible = False 
' '   txtReferralTo.SetFocus()
' '   txtReferralTo.Text = ""
' '   Message.Info(sMsg)  
' '   Return True 'ie is a duplicate
' ' End
' ' 
' ' Public Sub TeamCareMembers_Init()
' '    '-----------------------------------------------------
' '    'CALLED BY  EditArea_Clear()
' '    'The patient will always be the foundation team member
' '    '-----------------------------------------------------
' '    Dim member As New collection 
' '    'Terms = New Collection
' '    TeamCareMembers = New collection 
' '    TeamCareMember_Deleted = New collection   
' '    cvwTeamCareMembers.Clear()
' ' 
' ' End
 



Public Sub EditArea_RadioButtons_Click()

  currentHealthAssessment!fk_lu_state_of_health = Last.value

End
Public Function family_history_Construct_html() As String
Dim sFamilyHistory As String
Dim FM As Collection 
Dim last_key As Integer
'----------------------------------
'Force a refresh of all information
'----------------------------------
currentconsult.Refresh("family_history")

'sFamilyHistory = "<small><small>"


For Each FM In currentconsult!family_history
    If last_key <> FM!fk_member Then
       last_key = FM!fk_member
       sFamilyHistory &= "<B>" & FM!relationship & " " & FM!name & "</B><BR>"
       '----------------------------------------------------
       'Construct something like this
       ' Mother (Hilda smith)
       '   Hypertension onset age 50
       '   Carcinoma Breast onset age 65 (caused death)
       '----------------------------------------------------
    End If
   '--------------------------
   'One condition per view row
   '--------------------------
   sFamilyHistory &= FM!condition
   Try sFamilyHistory &= " onset " & FM!age_of_onset
   If FM!cause_of_death = True Then
      sFamilyHistory &= " (caused death"
      If Not IsNull(FM!age_of_death) Then
          sFamilyHistory &= "-" & FM!age_of_death & " yrs)"
      Else
          sFamilyHistory &= ") "
      End If
   End If
   sFamilyHistory &= "<BR>" 
Next
'sFamilyHistory &= "</small></small>"

'shtml &= sFamilyHistory & "<BR>" & sHTMLEnd

Return sFamilyHistory
End



Public Sub EditAreaButtons_Click()

  Select Case Last.tag
  Case "new"
       HealthAssessment_New()
  Case "save"
       Save()
  Case "preview"
       HealthAssessment_Preview()
    Case "previous"
      'Go back a form
      'At this point: current form = one we are viewing
      'previous form = form before this one = one we want to view now as going back
        currentForm.Visible = False 
        form_name = currentForm.tag
       Select Case form_name
        Case "system review"
            currentForm = FrmSystemReview
            nextForm = FrmPsychoSocial
        Case "psychosocial"
            
            currentForm = FrmSystemReview
            nextForm = FrmNuitrition
        Case "nuitrition"
            currentForm = FrmPsychoSocial
            nextForm = FrmMobility
        Case "mobility"
           currentForm = FrmNuitrition
           nextForm = FrmHomeSafety

        Case "home safety"
           currentForm = FrmMobility
           nextForm = frmProgressNotes
      '  Case "red flags"
           
         '  currentForm = FrmHomeSafety
           'nextForm = frmProgressNotes
         
        Case "progress notes"
          '  FrmRedFlags.tlRedFlags.text = RedFlags_Construct_HTML()
            currentForm = FrmHomeSafety
            nextForm = frmGoalsandPlan
      Case "goals and plan"
          currentForm = frmProgressNotes
       End Select 
       form_name = currentForm.tag
       currentForm.Visible = True 
       iWizardPageCount = Max(1, (iWizardPageCount - 1))
      WizardPage_Notify(iWizardPageCount)
    Case "next"
       PreviousForm = currentForm              'form being viewed before change now is last form
       PreviousForm.Visible = False 
       currentForm = nextForm
       currentForm.Visible = True 
       form_name = currentForm.tag
       Select Case form_name
        Case "system review"
            nextForm = FrmPsychoSocial
        Case "psychosocial"
            nextForm = FrmNuitrition
        Case "nuitrition"
            nextForm = FrmMobility
        Case "mobility"
            nextForm = FrmHomeSafety
        Case "home safety"
         '  FrmRedFlags.tlRedFlags.text = RedFlags_Construct_HTML()
       '    nextForm = FrmRedFlags
      '  Case "red flags"
           NextForm = frmProgressNotes
           frmProgressNotes.WebBrowser1.html = Get_Red_Flags()
        Case "progress notes"
            NextForm = frmGoalsandPlan
        
        End Select 
        iWizardPageCount = Min(7, (iWizardPageCount + 1))
        WizardPage_Notify(iWizardPageCount)
 
  
    End Select
 
End
