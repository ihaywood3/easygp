' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-------------------------------------------------------------------------------------
'This is probably quite a mess and needs to be sorted out, absolutely work in progress
'
'The patients prescence in the surgery could take place in one room with one
'staff member, or over multiple rooms with multiple staff members. For the point of
'the exercise at the moment I am arbitrarily using the date of consultation as the
'unifying measure of an entire patient encounter
'-------------------------------------------------------------------------------------

Private cache As Collection
Private pk_consult As Variant
Public summary As String
Public fk_type As Integer
Private consult_date As Date

Public Sub Refresh(key As String)
   '--------------------------------------------------------------
   ' Refreshes the cache by removing the key which effectively
   ' means it will be re-loaded from the database when next called
   '--------------------------------------------------------------
   
   cache.Remove(key)
   
End

Public Function IsCreated() As Boolean
   ' return flag if consult created yet
   
   If pk_consult = -1 Or If IsNull(pk_consult) Then
      Return False
   Else
      Return True
   End If
   
End

Public Function GetConsultDate() As Date
   'returns the consult date, create consult if does not exist   
  If Not IsCreated() Then
      Create()
  Endif
  Return consult_date 
End

Public Function GetPK() As Variant
   ' return consult's pk
   ' create the consult on the backend if required
   
   If Not IsCreated() Then
      ' Create
      Create()
   End If
   Return pk_consult
   
End

Public Sub Set(fk_type2 As Integer, summary2 As String)
   ' set type and summary
   ' if consult has been saved to backend, will update the backend
   ' otherwise just stored in RAM
   
   If (fk_type2 <> fk_type Or summary2 <> summary) And pk_consult > -1 Then
      ' we need to update the backend
      modConsultDBI.Consult_Update(pk_consult, fk_type2, summary2)
      modDBConnect.CommitTrans()
   End If 
   fk_type = fk_type2
   summary = summary2
   
End

Public Sub _new(patient As Collection, Optional iConsult_Type As Integer = 0, Optional bForceNew As Boolean = False)
   '-------------------------------------------------------------------
   ' creates a consultation not saved to the backend until necessary
   ' This is called by any form needing to save data related to a patient
   ' When checking if consult started today checks optionally against
   ' the consult type
   ' eg If adding documents From the inbox the user
   ' may have done a couple, gone off entered notes for another patient
   ' filed someone elses result, then gone back to the orginal patient
   ' We don't want multiple consult.pk for the same type of task
   ' const.ConsultType_Added_From_Inbox
   ' fixme at the moment if user doing a consult in Fclinical then
   ' whatever was the chosen type from the combo at the top overides
   ' any other previously used eg could have seen the patient and then
   ' they went home and you rang them and discussed something on the phone
   ' If a consultation exists today for that staff member then it's
   ' pk is re-used FIXME this is not good enough eg. for PM consults
   ' 14/09/2013: added optional checking on consult_type for today
   ' fixme do something about continuation of a consult on the same
   ' day but with several hours difference e.g pm consult
   ' fixme do something with summary i.e decide to implement or not
   ' -------------------------------------------------------------------
   ' CREATE TABLE clin_consult.consult
   ' (
   '   pk serial NOT NULL,
   '   consult_date timestamp without time zone NOT NULL,
   '   fk_patient integer NOT NULL,
   '   fk_staff integer NOT NULL,
   '   fk_type integer,
   '   summary text,
   '   CONSTRAINT consult_pkey PRIMARY KEY (pk )
   ' )iConsult_Type
   ' WITH (
   '   OIDS=FALSE
   ' );
   '--------------------------------------------------------------------
   
   Dim sql As String 
   Dim R As Result
   
   cache = New Collection    
   cache!patient = patient
   pk_consult = Null
   fk_type = 0   'THINK ABOUT THIS, eventually always need a type, in document etc need Cconsult and ?what is type ?const.cConsultType_Audit
   summary = ""
   If Not bForceNew Then
     sql = "Select date(consult_date), pk, fk_type from  clin_consult.consult where fk_patient = "  'Select consult details from clin_consult
     sql &= patient!fk_patient & " AND fk_staff=" & modDBConnect.currentUser!fk_staff               'for this patient and this staff memebr
     If iConsult_Type Then                                                                          'if consult type defined 
        sql &= " AND fk_type=" & iConsult_Type                                                      'match to that type of consult
        sql &= " AND  date(consult_date) = '" & Format(Now, "dd/mm/yyyy") & "'::date"             'and to today's date
     Else                                                                        'if not (the default = called from FClinical)
        sql &= " AND fk_type <" & const.ConsultType_DataImport                   'any types eg at surgery/home visit/phone etc This needs fixing talk to me RT 10 =
     Endif                                                                       '     
     sql &= " ORDER BY pk DESC limit 1"                                          'this pulls in the last consult of the requested type or the default FClinical consult                                       
     R = modDBConnect.exec_query(sql)  
     If Not R.count Then 
        fk_type = iConsult_Type
        Return                                                  'no records at all for this patient, start new consult
     Else 
        If Format(R!date, "dd/mm/yyyy") = Format(Now, "dd/mm/yyyy") Then           'they have been seen ?is the last consult on today's date?
           pk_consult = R!pk                                                       'Yes, then re-use the primary key of clin_consult.consult and the type
           fk_type = R!fk_type
           consult_date = R!date
        Else
           fk_type = iConsult_Type  
        Endif
     End If
   Else
      fk_type = iConsult_Type   
  Endif
End


Public Function _get(key As String) As Collection
   ' this implements the "!" notation
   ' so currentconsult!past_history grabs the past history
   ' it's a cache: it will get past history from the backend
   ' if necessary
   ' the consult's own properties can be accessed this way too:
   ' currentconsult!pk, currentconsult!fk_type, etc.
   
   If Not cache.Exist(key) Then
      cache[key] = GetData(key)
   End If
   Return cache[key]
   
End

Public Sub SetData(key As String, data As Collection)
   'temporary patch to update patients demographics, whilst the patient is loaded
   'e.g if changed from contacts
   
   Select Case key
      Case "patient"
         cache!patient = data
   End Select
   
End

Private Function GetData(key As String) As Collection
   '-----------------------------------------------------------------  
   ' this is where new cacheable values should be defined, like this
   ' Case "name"
   '   Return modBlahBlahDBI.GetBlah(cache!patient!pk_patient)
   ' don't put a big load of code here: put it in the DBI module
   '---------------------------------------------------------------- 
   
   Select Case key
      Case "addresses"
         Message.Info("RICHARD STOP IMMEDIATELY AND CHECK THIS CODE")
         If cache!patient.Exists("addresses")
            Return cache!patient!addresses
         Else
            Return modContactsDBI.person_addresses_get(cache!patient!fk_patient)
         Endif
      Case "allergies"
         Return modAllergyDBI.Allergies_Get(cache!patient!fk_patient)
      Case "antenatal_visits"
         Return modPregnancyDBI.Antenatal_Visits_Get(cache!patient!fk_patient)
      Case "comms"
         '---------------------------------------------------------
         ' bit of a cheat here, same for addresses
         ' sometimes comms in patient collection, so use that first
         '---------------------------------------------------------
         'If cache!patient.Exists("comms") Then
         
         ' Return cache!patient!comms
         '  Else
         Return modContactsDBI.person_comms_get(cache!patient!fk_person)
         '  Endif
      Case "clinics"
         Return modContactsDBI.Clinics_Get()        
      Case "consult_date"
         Return consult_date
      Case "family_history"
         Return modFamilyHistoryDBI.FamilyHistory_Get(cache!patient!fk_patient)
      Case "fk_type"
         Return fk_type
      Case "diabetes_annual_cycle_of_care"
         Return modDACCDBI.DACCS_Get(cache!patient!fk_patient)
      Case "images"
         Return modImagesDBI.Patient_Images_Get(cache!patient!fk_patient)  
      Case "measurements"
         Return modMeasurementsDBI.Measurements_Get(cache!patient!fk_patient)
      Case "measurements_recorded_this_consult"
         Return modUtil.Todays_Rows(GetData("measurements"))
      Case "measurements_available"
         '---------------------------------------------------------------------------
         'these are the default types of measurements to display in the graphing area
         'on the progress notes page unique for each patient
         '---------------------------------------------------------------------------
         Return modMeasurementsDBI.Measurements_Get_Available(cache!patient!fk_patient)
      Case "measurement_defaults"
         Return modMeasurementsDBI.Measurement_Defaults_Get(cache!patient!fk_patient)
      Case "mentalhealthplans"
         Return modMentalHealthDBI.Plans_Get(cache!patient!fk_patient)
      Case "occupational_history"
         Return modOccupationalHistoryDBI.OccupationalHistory_Get(cache!patient!fk_patient)
      Case "past_history"
         Return modPastHistoryDBI.PastHistory_Get(cache!patient!fk_patient)
      Case "progress_notes_codes"
         Return modProgressNotesDBI.ProgressNotes_Codes_Get_For_Patient(cache!patient!fk_patient)
      Case "progress_notes_codes_today"
         Return modUtil.Todays_Rows(GetData("progress_notes_codes"))
      Case "medical_certificates"
         Return modCertificatesDBI.MedicalCertificates_Get(cache!patient!fk_patient)
      Case "medical_certificates_this_consult"  'should be _today FIXME AFTER CHECKING
         Return modUtil.Todays_Rows(GetData("medical_certificates"))
      Case "patient"
         '-------------------------------------------------------------------
         'this should never happen as it's put in the cache on initialisation
         'FIXME   but demographic data could be changed in other sections
         'eg. contains IAN THINK ABOUT THIS.
         '-------------------------------------------------------------------
         Error.Raise("patient should always be populated in cConsult") 
      Case "progress_notes_audit"
         Return modConsultDBI.progressnotes_get(cache!patient!fk_patient, "", True)
      Case "progress_notes" 
         Return modConsultDBI.progressnotes_get(cache!patient!fk_patient)
      Case "progress_notes_today"
         Return modUtil.Todays_Rows(GetData("progress_notes")) 
      Case "staff_tasks"
         Return modStaffTasksDBI.Tasks_For_Patient_Get(cache!patient!fk_patient)
      Case "skin_procedures"
         Return modProceduresDBI.SkinProcedures_Get(cache!patient!fk_patient)
      Case "recalls_logged"
         Return modRecallsDBI.Get_Logged(cache!patient!fk_patient)
      Case "recalls_this_consult" 
         Return modUtil.Todays_Rows(GetData("recalls_logged"))
         '-----------------------------------------------------------------------------------------------------------------
         'Special cases for letters or correspondence in
         'letter_received = what we want to view usually, latest to oldest
         'letters_received_sorted_ascending - historical chronological list for export
         'letters_received_sorted_ascending_orginator - historical chronological list sorted by originator date for export
         '-----------------------------------------------------------------------------------------------------------------
      Case "recreationaldrugs"
         Return modRecreationalDrugs.Recreational_Drugs_Used(cache!patient!fk_patient)
      Case "letters_received"
         Return modReferralsDBI.Letters_Received_Get(cache!patient!fk_patient)
      Case "letters_received_sorted_ascending"
         Return modReferralsDBI.Letters_Received_Get(cache!patient!fk_patient, "asc")
      Case "letters_received_sorted_ascending_orginator"
         Return modReferralsDBI.Letters_Received_Get(cache!patient!fk_patient, "asc", True)
      Case "prescriptions_written"   'written this consultatation
         Return modPrescribingDBI.Prescriptions_Written_This_Consult(pk_consult)
      Case "medications"
         Return modPrescribingDBI.Prescriptions_Written(cache!patient!fk_patient)
      Case "referrals_written"
         Return modReferralsDBI.Referrals_Written_Get(cache!patient!fk_patient)
      Case "inr_recorded_this_consult"
         Return modMeasurementsDBI.INRs_Get
      Case "referrals_written_this_consult"
         Return modReferralsDBI.Referrals_Written_This_Consult_Get(cache!patient!fk_patient)
      Case "requests_ordered"
         Return modRequestsDBI.RequestForms_Get(cache!patient!fk_patient)
      Case "requests_ordered_this_consult"
         Return modUtil.Todays_Rows(GetData("requests_ordered"))
      Case "results_received"
         Return modRequestsDBI.Results_Get(cache!patient!fk_patient)
      Case "social_history"
         Return modSocialHistoryDBI.SocialHistory_Get(cache!patient!fk_patient)
      Case "staff"
         Return modContactsDBI.Staff_Get()
      Case "summary"
         Return summary
      Case "vaccinations_given"
         Return modVaccinationDBI.Vaccinations_Get(cache!patient!fk_patient)
      Case "workcover_claims"
         Return modWorkCoverDBI.Claims_Get(cache!patient!fk_patient)  
      Case Else
         ' someone needs to define a new cacheable object
         Message.info("unknown patient data object in cConsult: " & key & "\n\n.Please notify the develpers")
   End Select
   
End

Private Sub Create()
   
   Dim coll As Collection
   
   coll = modConsultDBI.Consult_Create(cache!patient!fk_patient, fk_type, summary)
   consult_date = coll!consult_date
   pk_consult = coll!pk
   modDBConnect.CommitTrans()
   
End
