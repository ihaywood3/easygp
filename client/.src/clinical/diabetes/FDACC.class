' Gambas class file

' Gambas class file
' Copyright (C) 2008-2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-----------------------------------------------------------------------------------------
' PURPOSE         A form for the Australian General Practice Diabetes Annual Cycle of Care
'                 Also provides a 'snapshot' of up-to-date-ness of diabetic parameters.
' HOW THIS WORKS  EasyGP attempts to pull as much information from the backend
'                    - e.g letters from category like ophth* and occupations like the same
'                    - pulls in latest blood tests and measurements if they exist
'                    - this data cannot be entered manually on this screen
'                    - user prompted if validation fails on save.
' TODO            Printout .text file of the form.
'                 Microalbumin, currently only works for the ratio
'                 Not the timed overnight Or 24 / 24 collections
'                 I've hidden the little bit of decision support I gather along the way
'                 but its still done.?where to show
' BUGS            Please report to rterry@pacific.net.au
'                 There will be many as pre-alpha and never used
'-----------------------------------------------------------------------------------------

Private bExit As Boolean
Private bSavePending As Boolean                 'if True will be saved even if not complete eg pending results coming back
Private Activity As String[]
Private currentconsult As CConsult
Private HBA1c As Result 
Private EyeReview As Result
Private fk_patient As Integer
Private LastBP As String 'of BP|date
Private LastRUAlbCreatRatio As Result
Private DACCS As Collection
Private DACC As Collection
Private date_last_Claimed As Date               'date of last DACC medicare billing
Private date_completed As Date                  'date the DACC was completed
Private date_saved As Date                      'date the DACC was saved may <> date_completed which can be  null 
Private fk_consult As Integer 
Private pk_view As Integer
Private fk_dacc As Integer    
Private fk_progressnote As Integer     'if not 0 = key to clin_consult.progressnotes
Private bCompleted As Boolean
Private NextTextBoxDetails As TextEdit
Private NextTextBoxLast As TextEdit 
Private NextTextboxDue As TextEdit
Private height As Variant = 0
Private weight As Variant = 0
Private FProgressNotes As FProgressNoteEditor

Public Sub Init(cons As CConsult)
   
   currentconsult = cons
   With FProgressNotes = New FProgressNoteEditor(Vbox_Notes)
      .Init(currentconsult)
   End With 
   
   Settings_Load()
   fk_patient = currentconsult!patient!fk_patient
   lblNextDue.width = TextLabel12.width
   Reload()    'loads any current DACCS and displays the most recent.
   
End

Public Function Valid_Data() As Boolean
   '------------------------------------------------
   'Checks for valid input and returns true if valid
   'Prompts user with message if invalid.
   '------------------------------------------------
   
   Dim bInvalid As Boolean
   Dim hCtrl As Control
   Dim HB As HBox
   Dim TE As TextEdit
   Dim bits As String[]
   Dim bit As String
   Dim sMsg As String  
   '---------------------------------------------------------------
   'First, is this DACC being claimed within 12/12 of the last one?
   '----------------------------------------------------------------
   If Not IsNull(date_last_Claimed) Then 
      If DateDiff(Now, date_last_Claimed, gb.year) < 1 Then
         sMsg = "The DACC item number may have been claimed on " & Format(date_last_Claimed, "dd/mm/yyyy")
         sMsg &= ".\n\nIt is not due until " & Format(DateAdd(date_last_Claimed, gb.year, 1))
         sMsg &= ". \n\nThis DACC may not be claimable.\n\nContinue?"
         If Message.Question(sMsg, "Yes", "No") = 2 Then Return
      Endif
   End If   
   '----------------------------------------------------------------------------
   'Check all the textboxes in the editing area, if should have a date, validate
   '----------------------------------------------------------------------------
   bSavePending = False 
   For Each hctrl In Vbox_EditArea_Inner.Children
      If hctrl.tag <> "skip" Then                   'Hbox's without appropriate contents have this tag
         HB = hctrl
         For Each hCtrl In HB.Children   
            '-------------------------------------------------------------------           
            'look at all child controls In Each HBox
            'if it should contain a date or columnized dates eg for h,w,bmi
            'check date valid
            '---------------------------------------------
            If InStr(Lower(hctrl.name), "due") Or InStr(Lower(hctrl.name), "last")
               TE = hctrl
               If Trim(Te.text) <> "" And Not IsDate(Te.text) Then 'its its not blank or columized dates which though individual dates ok Val(txt)<> date
                  bits = Split(Trim(Te.text), "\n", "", True)      'check if it is 'OVERDUE or stacked dates
                  For Each bit In bits
                     If Not IsDate(bit) Then  'some textboxes have multiple dates
                        TE.SetFocus()
                        Goto Invalid
                     End If
                  Next
               Endif
            Else
               '---------------------------------------------------------------------------
               'Note a textedit containing date(s), if empty, should have some sort of data
               '---------------------------------------------------------------------------
               If hctrl Is TextEdit Then
                  TE = hctrl
                  If Trim(TE.text) = "" Then
                     TE.SetFocus()
                     Goto Invalid
                  Endif
               Endif
            End If
         Next
      Endif
   Next
   
   Return True 
   
   '------------------------------------------------------------------------------
   'If user wishes to save the DACC as a 'pending results', eg some stuff needs to
   'come back before claiming, allow this if they choose
   '------------------------------------------------------------------------------
   Invalid:
   sMsg = "The information needed to complete this Diabetic Annual Cycle of Care is incomplete.\n\n"
   "Please note, that measurents such as BP, Height, Weight, and pathology values must exist "
   "in your database, so you may have to enter updated values now, then refresh this screen.\n\n"
   "Also, pathology results must exist in the database. If these have been done at another practice "
   "it is suggested you ring the company who performed these and arrange a HL7 download to obtain the "
   "actual data - it will be needed anyway for statistical analysis later.\n\n"
   "A special note about eyes:\n\n"
   "EasyGP will look through this patients documents and try and find aletter from either an "
   "optometrist or an ophthalmologist etc. It won't be able to find this information however if "
   "you have mis-spelt the occupation or category for this type of provider, so if you think you "
   "have received a letter which isn't being found - go back to contacts and check.\n\n"
   "These data entry fields however, can contain free text if you are certain the eye check has been done.\n\n"
   "Do you wish to save this as an almost completed DACC?"
   
   Message.Title = "Diabetic Cycle of Care"
   If Message.Question(sMsg, "Yes", "No") = 1 Then
      bSavePending = True   
      Return True 
   Endif
   Return   
   
End

Public Sub EditArea_NotifyData_Change(flag As Boolean)
   '----------------------------------------------
   'If data has changed, edit area outlined in red
   'for visual notification
   '----------------------------------------------   
   
   If Flag Then
      Vbox_EditArea.Padding = 1
      tbSave.Foreground = Color.red
   Else
      
      Vbox_EditArea.Padding = 0
      tbSave.Foreground = Color.black
      
   Endif
   
End

Public Sub EditArea_Clear()
   
   bExit = True   
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_Inner)
   bExit = False  
   
End

Public Sub Refresh()
   '-------------------------------------------------------
   'User to refresh the components, get as much as possible
   '-------------------------------------------------------
   
   tlNotes.text = ""
   bExit = True 
   Try Last_Hbaic()
   Try Last_BMI()
   Try Last_Eye_Review()
   Try Last_BP()
   Try Last_Microalbumin()
   Last_Diet()
   Last_Smoking()
   Last_Education()
   Last_Activity()
   Last_Medication()
   Last_Foot_Check()
   Last_Lipids()
   bExit = False     
   Vbox_EditArea_Inner.Enabled = True  
   tbEdit.enabled = False
   
End

Public Sub Save()
   '---------------------------------------------------------------------------------------------------------
   ' Save the annual cycle of care, refreshes the data and progress notes in FClinical
   ' Over-rides the save in the embedded progress notes
   '
   '  pk serial NOT NULL,
   '   fk_consult integer NOT NULL,
   '   date_completed date,
   '   hba1c_date date, -- date of last hba1c could be null if not yet completed but DACC saved...
   '   hba1c_date_due date,
   '   hba1c_details text,
   '   eyes_date date, -- Date the eye check was done, may be entered without paperwork to verify
   '   eyes_date_due date,
   '   eyes_details text, -- Whoever checked the eyes, could be person or entity, but hopefully in most cases...
   '   bp_date date,
   '   bp_date_due date,
   '   bp_details text,
   '   bmi_date date,
   '   bmi_date_due date,
   '   bmi_text text,
   '   feet_date date,
   '   feet_date_due date,
   '   feet_text text,
   '   lipids_date date,
   '   lipids_date_due date,
   '   lipids_details text,
   '   microalbumin_date date,
   '   microalbumin_date_due date,
   '   microalbumin_details text,
   '   education_date date,
   '   education_date_due date,
   '   education_details text,
   '   diet_date date,
   '   diet_date_due date,
   '   diet_details text,
   '   exercise_date date,
   '   exercise_date_due date,
   '   exercise_details text,
   '   smoking_date date,
   '   smoking_date_due date,
   '   smoking_details text,
   '   medication_review date,
   '   medication_review_date_due date,
   '   medication_review_details text,
   '   fk_progressnote
   '   deleted
   ' ----------------------------------------------------------------------------------------
    
   Dim sProgressNotes As String            '=the tabulated DACC plus any clinical notes for this section
   Message.Info("Sorry can't save, I've screwed up some code tonight, but off to bed now")
   Return
   
   ' If Vbox_EditArea.Padding = 0 Or Then Return 
   If Vbox_EditArea.Padding = 0 Or ((Trim(FProgressNotes.teNotes.text) = "" And FProgressNotes.Get_copy_of_editor_text() = "") Or Not FProgressNotes.get_data_changed()) Then
      Return 
   Endif
   
   If Not Valid_Data() Then Return
   DACC = New Collection
   Select Case fk_dacc
      Case 0                                           'DACC is new
         If bSavePending = False Then
            DACC!date_completed = Val(Format(Now(), "dd/mm/yyyy"))  'new and completed add completion date
            
         End If   
      Case Else                                   'DACC has already been saved
         If Not IsNull(date_completed) Then      'Saving an edited completed DACC (allowed on the same day only)
            DACC!date_completed = date_completed 'keep original completed date
         Else
            DACC!date_completed = Val(Format(Now(), "dd/mm/yyyy"))         'saving a partially completed DACC today
         End If
   End Select
   
   DACC!fk_consult = currentconsult.GetPK() 
   DACC!hba1c_date = Val(teNotesHBA1cLast.text)
   DACC!hba1c_date_due = Val(teNotesHBA1cDue.text)
   DACC!hba1c_details = teNotesHBA1C.text
   DACC!eyes_date = Val(teNotesEyesLast.text)
   DACC!eyes_date_due = Val(teNotesEyesDue.text)
   DACC!eyes_details = teNotesEyes.text
   DACC!bp_date = Val(teNotesBPLast.text)
   DACC!bp_date_due = Val(teNotesBPDue.text)
   DACC!bp_details = teNotesBP.Text
   If fk_dacc = 0 Then 
      DACC!bmi_date = Now()
   Else
      DACC!bmi_date = Val(teNotesBMILast.Text)
   End If     
   DACC!bmi_date_due = Val(teNotesBMIDue.text)
   DACC!bmi_details = Replace(teNotesBMI.Text, "\n\n", "\n")
   DACC!feet_date = Val(teNotesFeetLast.text) 'missing
   DACC!feet_date_due = Val(teNotesFeetDue.text) 'missing
   DACC!feet_details = teNotesFeet.text
   DACC!lipids_date = Val(teNotesHDLLast.text)
   DACC!lipids_date_due = Val(teNotesHDLDue.text)
   DACC!lipids_details = teNotesHDL.text
   DACC!microalbumin_date = Val(teNotesMicroalbuminLast.text) 'missing
   DACC!microalbumin_date_due = Val(teNotesMicroalbuminDue.text)
   DACC!microalbumin_details = teNotesMicroalbumin.Text
   DACC!education_date = Val(teNotesEducationLast.text)
   DACC!education_date_due = Val(teNotesEducationDue.text)
   DACC!education_details = teNotesEducation.text
   DACC!diet_date = Val(teNotesDietLast.text)
   DACC!diet_date_due = Val(teNotesDietDue.text)
   DACC!diet_details = teNotesDiet.Text
   DACC!exercise_date = Val(teNotesActivityLast.text)
   DACC!exercise_date_due = Val(teNotesActivityDue.text)
   DACC!exercise_details = teNotesActivity.Text
   DACC!smoking_date = Val(teNotesSmokingLast.text)
   DACC!smoking_date_due = Val(teNotesSmokingDue.text)
   DACC!smoking_details = teNotesSmoking.text
   DACC!medication_review_date = Val(teNotesMedicationLast.text)
   DACC!medication_review_date_due = Val(teNotesMedicationDue.text)
   DACC!medication_review_details = teNotesMedication.Text
   
   modDBConnect.BeginTrans()
   '----------------------------------------------------------------------
   'Only save the tabulated DACC into progress notes where it is completed
   'Table will appear before comments in the progress notes.
   '----------------------------------------------------------------------
   If Not IsNull(DACC!date_completed) Then 
      sProgressNotes = Progress_note_create_HTML(DACC).GetData()
   Else
      sProgressNotes = "<P>Diabetic Annual Cycle of Care partially completed</P>"
   End If  
   DACC!fk_progressnote_components = modConsultDBI.ProgressNote_Save(currentconsult, Progress_note_create_HTML(DACC).GetData(), const.cSection_GeneralNotes, fk_progressnote, "diabetes", 0, False)
   If Not ((Trim(FProgressNotes.teNotes.text) = "" And FProgressNotes.Get_copy_of_editor_text() = "") Or Not FProgressNotes.get_data_changed()) Then
      DACC!fk_progressnote_comments = modConsultDBI.ProgressNote_Save(currentconsult, FProgressNotes.teNotes.RichText, const.cSection_GeneralNotes, fk_progressnote, "diabetes", 0, False)
   End If
   modDACCDBI.Save_DACC(DACCS, fk_dacc, DACC)
   modDBConnect.CommitTrans()
   EditArea_NotifyData_Change(False)
   FProgressNotes.DataChange_Update_Indicators(False)
   FClinical.Refresh_AllPreviousNotes()
   Reload()
   
End

Public Sub Last_Hbaic()
   '-----------------------------------------------------------------
   'Attempts to get the last hba1c, if within the minimum time period
   'shows a compeleted icon, otherwise say its due now.
   '-----------------------------------------------------------------
   
   Dim bCompleted As Boolean
   Dim sString As String 
   
   teNotesHBA1c.RichText = "placeholder"
   hba1c = modMeasurementsDBI.Get_Loinc_Value(fk_patient, const.loinc_hba1c, 1, "DESC") 'Last hba1c by date
   If hba1c.count Then  
      sString = "<B>HBA1c:</B> " & hba1c!value_numeric & " (" & hba1c!reference_range & ")"    'display the value
      teNotesHBA1cLast.text = Format(hba1c!observation_date, "dd/mm/yyyy")                      'and when done
      If DateDiff(Now, DateAdd(hba1c!observation_date, gb.Month, 12), gb.Month) < 0 Then
         teNotesBPDue.text = "OVERDUE"
      Else
         teNotesHBA1cDue.text = Format(DateAdd(hba1c!observation_date, gb.Year, 2), "dd/mm/yyyy") 
         bCompleted = True 
      End If   
   Else
      teNotesHBA1cDue.text = "OVERDUE"
      bCompleted = False   
   End If  
   teNotesHBA1c.richtext = Replace(teNotesHBA1c.richtext, "placeholder", sString)
   If hba1c!value_numeric > 7 Then tlNotes.Text &= " - Hba1c is: " & hba1c!value_numeric & " (" & hba1c!reference_range & ")" & " - a value of &gt; 7 indicates suboptimal control<BR>"
   
End

Public Sub Last_Foot_Check()
   'TODO implement backend and include skin, pulses and sensation check
   
   Dim bCompleted As Boolean
   
   If teNotesFeetLast.text = "" Then
      teNotesFeetDue.text = "OVERDUE"
   Endif
   
End

Public Sub Last_Education()
   
   Dim bCompleted As Boolean
   
   If teNotesEducationLast.text = "" Then
      teNotesEducationDue.text = "OVERDUE"
   Endif
   
End

Public Sub Last_Activity()
   
   Dim bCompleted As Boolean
   
   If teNotesActivityLast.text = "" Then
      teNotesActivityDue.text = "OVERDUE"
   Endif
   
End

Public Sub Last_Medication()
   
   Dim bCompleted As Boolean
   
   If teNotesMedicationLast.text = "" Then
      teNotesMedicationDue.text = "OVERDUE"
   Endif
   
End

Public Sub Last_Diet()
   
   Dim bCompleted As Boolean
   
   If teNotesDietLast.text = "" Then
      teNotesDietDue.text = "OVERDUE"
   Endif
   
End

Public Sub Last_Smoking()
   
   Dim bCompleted As Boolean
   
   If teNotesSmokingLast.text = "" Then
      teNotesSmokingDue.text = "OVERDUE"
   Endif
   
End

Public Sub Last_Microalbumin()
   '------------------------------------------------
   'Microalbumin, currently only works for the ratio
   'not the timed overnight
   '------------------------------------------------
   
   Dim bCompleted As Boolean
   Dim sString As String
   Dim R As Result
   
   teNotesMicroalbumin.RichText = "placeholder"
   R = modMeasurementsDBI.Get_Loinc_Value(fk_patient, const.loinc_RUAlbCreatRatio, 1, "DESC") 'Last R by date
   If R.count Then  
      sString = "<B>Malb</B>=" & R!value_numeric & " (" & R!reference_range & ")" 
      teNotesMicroalbuminLast.text = Format(R!observation_date, "dd/mm/yyyy") 
      If DateDiff(Now, DateAdd(R!observation_date, gb.Month, 12), gb.Month) < 0 Then
         teNotesMicroalbuminDue.text = "OVERDUE"
      Else
         teNotesMicroalbuminDue.text = Format(DateAdd(R!observation_date, gb.Year, 1), "dd/mm/yyyy") 
         bCompleted = True 
      End If
      If Not IsNull(R!abnormal) Then
         tlNotes.text &= "- microalbuminuria noted:" & R!value_numeric & " (" & R!reference_range & ")<BR>"
      Endif
   Else
      teNotesMicroalbuminDue.text = "OVERDUE"
      bCompleted = False   
   End If  
   teNotesMicroalbumin.richtext = Replace(teNotesMicroalbumin.richtext, "placeholder", sString)
   
End 

Public Sub Last_Lipids()
   '------------------------------------------------
   'Attempt to get TC, HDL, LDL and Triglycerides
   '------------------------------------------------
   
   Dim bCompleted As Boolean
   Dim sString As String 
   
   teNotesHDL.richtext = "placeholder"      
   sString = Lipid_Get_Component("TC  = ", const.Loinc_TotalCholesterol, sSTring)
   sString = Lipid_Get_Component("Trig = ", const.Loinc_Triglycerides, sSTring)
   sString = Lipid_Get_Component("HDL = ", const.Loinc_HDL, sSTring)
   sString = Lipid_Get_Component("LDL = ", const.Loinc_LDL, sSTring)
   teNotesHDL.richtext = Replace(teNotesHDL.richtext, "placeholder", sString)
   teNotesHDL.pos = 1
   
End 

Public Sub Lipid_Get_Component(sComponentName As String, sLoinc As String, sString As String) As String 
   '--------------------------------------------------------------------
   'Gets a lipid component, and adds the result to the string which will
   'be shown in the lipids box
   '--------------------------------------------------------------------
   
   Dim R As Result
   Dim RefRange As String
   
   R = modMeasurementsDBI.Get_Loinc_Value(fk_patient, sLoinc, 1, "DESC")
   If R.count Then  
      'Now, due to HAPS being fuckwits, they send their range bracketed
      RefRange = R!reference_range
      RefRange = Replace(RefRange, "(", "")
      RefRange = Replace(RefRange, ")", "")
      RefRange = Replace(RefRange, "<", "&lt;")  
      sString &= "<B>" & sComponentName & "</B> " & Format(R!value_numeric, "###.##") & "(" & RefRange & ")<BR>"
      teNotesHDLLast.text = Format(R!observation_date, "dd/mm/yyyy") 
      If DateDiff(Now, DateAdd(R!observation_date, gb.Month, 12), gb.Month) < 0 Then
         teNotesHDLDue.text = "OVERDUE"
      Else
         teNotesHDLDue.text = Format(DateAdd(R!observation_date, gb.Year, 1), "dd/mm/yyyy") 
         bCompleted = True 
      End If
      If sLoinc = const.Loinc_TotalCholesterol Then
         If R!value_numeric > 3.5 Then
            tlNotes.text &= "- total cholesterol of " & R!value_numeric & " elevated - aim for TC &lt;3.5 and LDL &lt;2.0)"
         Endif
      Endif
   Else
      teNotesHDLDue.text = "OVERDUE"
      bCompleted = False   
   End If  
   Return sString
   
End

Public Function Progress_note_create_HTML(DACC As Collection) As CTemplate
   '----------------------------------------------------------------
   'Creates a table akin to what is seen on the screen, as a summary
   'for the progress notes
   '-----------------------------------------------------------------
   
   Dim templ As CTemplate
   
   templ = New CTemplate(modHTML.Diabetes_Annual_Cycle_Of_Care_HTML())
   templ.Subst_common(currentconsult)
   templ.Subst("data_hba1c", DACC!hba1c_details)
   templ.Subst("last_hba1c", DACC!hba1c_date)
   templ.Subst("due_hba1c", DACC!hba1c_date_due)
   
   templ.Subst("data_eyes", DACC!eyes_details)
   templ.Subst("last_eyes", DACC!eyes_date)
   templ.Subst("due_eyes", DACC!eyes_date_due)
   
   templ.Subst("data_bp", DACC!bp_details)
   templ.Subst("last_bp", DACC!bp_date)
   templ.Subst("due_bp", DACC!bp_date_due)
   
   templ.Subst("data_bmi", DACC!bmi_details)
   templ.Subst("last_bmi", DACC!bmi_date)
   templ.Subst("due_bmi", DACC!bmi_date_due)
   
   templ.Subst("data_feet", DACC!feet_details)
   templ.Subst("last_feet", DACC!feet_date)
   templ.Subst("due_feet", DACC!feet_date_due)
   
   templ.Subst("data_lipids", DACC!lipids_details)
   templ.Subst("last_lipids", DACC!lipids_date)
   templ.Subst("due_lipids", DACC!lipids_date_due) 
   
   templ.Subst("data_microalbumin", DACC!microalbumin_details)
   templ.Subst("last_microalbumin", DACC!microalbumin_date)
   templ.Subst("due_microalbumin", DACC!microalbumin_date_due)
   
   templ.Subst("data_education", DACC!education_details)
   templ.Subst("last_education", DACC!education_date)
   templ.Subst("due_education", DACC!education_date_due)
   
   templ.Subst("data_diet", DACC!diet_details)
   templ.Subst("last_diet", DACC!diet_date)
   templ.Subst("due_diet", DACC!diet_date_due)
   
   templ.Subst("data_exercise", DACC!exercise_details)
   templ.Subst("last_exercise", DACC!exercise_date)
   templ.Subst("due_exercise", DACC!exercise_date_due)
   
   templ.Subst("data_smoking", DACC!smoking_details)
   templ.Subst("last_smoking", DACC!smoking_date)
   templ.Subst("due_smoking", DACC!smoking_date_due) 
   
   templ.Subst("data_medication_review", DACC!medication_review_details)
   templ.Subst("last_medication_review", DACC!medication_review_date)
   templ.Subst("due_medication_review", DACC!medication_review_date_due)
   templ.Subst("next_due", Format(DateAdd(DACC!date_completed, 1, gb.year), "dd/mm/yyyy"))
   Return templ
   
End

Public Sub Last_BMI()
   '------------------------------------------------
   'Calculate last BMI, assumes height dosn't change
   'Last weight must be within the 6M period
   '------------------------------------------------
   
   Dim sData As String[]
   Dim weight As Variant
   Dim height As Variant
   Dim BMI As Float
   Dim bHaveHeight As Boolean
   Dim bHaveWeight As Boolean
   Dim bCompleted As Boolean
   Dim StrInsert As String          'the data to insert where we have the placeholder
   Dim strDates As String 
   Dim StrOverDueStatus As String 
   '-------------------------------------------
   'Get height as a delimted string:height|date
   '-------------------------------------------
   currentconsult.Refresh("measurements")
   SData = Split(modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Height), "|")
   teNotesBMI.richtext = "placeholder"
   teNotesBMILast.Richtext = "placeholder"
   teNotesBMIDue.richtext = "placeholder"
   If sData.count Then                                               
      StrInsert = "<B>Height</B>=" & sData[0] & "<BR>"                      'put height into details column
      height = sData[0]                                                       
      strDates = sData[1] & "<BR>"                    'and date into when last done column
      bHaveHeight = True   
   Endif
   '----------------------------------------------------------------------------------------
   'Ditto for weight, but if weight taken > 6 months ago, prompt that measurement is overdue
   '----------------------------------------------------------------------------------------
   SData = Split(modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Weight), "|")
   If SData.Count Then
      weight = sData[0]
      StrInsert &= "<B>Weight</B>=" & weight & "<BR>"
      If DateDiff(Now, DateAdd(Val(sData[1]), gb.month, 6), gb.month) > 0 Then
         bHaveWeight = True
      Endif
      strDates &= sData[1] & "<BR>"
   End If   
   '------------------------------------------------------------
   'if have enough data, calculate BMI, if not prompt as overdue
   'or - if weight out of date, prompt as overdue
   '------------------------------------------------------------
   If bHaveHeight And bHaveWeight Then                               'have height and weight, and in date
      Try BMI = Format((weight / (height ^ 2)) * 10000, "##.#")
      If Not Error Then
         bCompleted = True 
         StrInsert &= "<B>BMI=</B>" & BMI
         teNotesBMIDue.text = Format(DateAdd(Val(sData[1]), gb.Month, 6), "dd/mm/yyyy")
         strDates &= Format(Now, "dd/mm/yyyy")
         tlNotes.text &= "- with a weight of " & weight & " and BMI of " & BMI & modDecisionSupport.BMI_DecSupp(weight, height) & "<BR>"
         
      Else
         teNotesBMIDue.text = "OVERDUE"
      Endif
   Else
      If bHaveHeight = False Then
         StrOverDueStatus = "OVERDUE<BR>"
      Else
         StrOverDueStatus = "<BR>"
      Endif
      If bHaveWeight = False Then 
         StrOverDueStatus &= "OVERDUE"
      End If 
      teNotesBMIDue.richtext = Replace(teNotesBMIDue.Richtext, "placeholder", StrOverDueStatus)
   End If   
   teNotesBMI.richtext = Replace(teNotesBMI.richtext, "placeholder", strinsert)
   teNotesBMILast.richtext = Replace(teNotesBMILast.richtext, "placeholder", strDates)
   
End 

Public Sub Last_BP() 
   '------------------------------------------------------------
   'Display last recorded BP, if not in date, completion = false
   '------------------------------------------------------------
   
   Dim bits As New String[]
   Dim bCompleted As Boolean
   Dim sString As String
   Dim BPBits As String[]
   Dim BpNotAtTarget As Boolean
   
   teNotesBP.RichText = "placeholder"
   lastbp = modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_BP)
   bits = Split(modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_BP), "|")
   If bits.count Then
      sString = "<B>BP</B>=" & bits[0]
      teNotesBPLast.text = bits[1]
      If DateDiff(Now, DateAdd(Val(bits[1]), gb.Month, 12), gb.Month) < 0 Then
         teNotesBPDue.text = "OVERDUE"
      Else
         teNotesBPDue.text = Format(DateAdd(Val(bits[1]), gb.MOnth, 6), "dd/mm/yyyy")
         bCompleted = True   
      End If  
   Else
      teNotesBPDue.text = "OVERDUE"
   End If 
   teNotesBP.richtext = Replace(teNotesBP.richtext, "placeholder", sString)
   BPBits = Split(bits[0], "/")
   If Val(BPBits[0]) > 135 Then
      tlNotes.text &= "- systolic pressure is above target at " & BPBits[0] & "<BR>"
      BpNotAtTarget = True 
   End If
   If Val(BPBits[1]) > 80 Then
      tlNotes.text &= "- diastolic pressure is above target at " & BPBits[1] & "<BR>"
      BpNotAtTarget = True 
   End If
   If BpNotAtTarget Then tlNotes.text &= " - recommended target BP level is &lt; 130/80 for diabetics<BR>"
   
End 

Public Sub Last_Eye_Review()
   '------------------------------------------------------------------------
   'Attempts to find if someone has written to us with an eye review, either
   'ophthalmologist or optomotrist and displays who if found
   'the texteditor needs a 'place holder' to be replaced with the text you
   'want to show. My intention with this HREF is that at some point
   'clicking on the link will show the letter FIXME
   '-------------------------------------------------------------------------
   
   Dim bCompleted As Boolean
   Dim strinsert As String
   
   EyeReview = modDACCDBI.Last_Eye_Review(fk_patient, 1, "DESC")
   If EyeReview.count Then 
      teNotesEyes.richtext = "place"
      strinsert = "<A HREF='" & Str$(EyeReview!pk_document) & "'>"
      If Not IsNull(EyeReview!organisation_category) Then
         strinsert &= EyeReview!organisation
      Else
         strinsert &= EyeReview!originator 
      Endif
      strinsert &= "</A><BR>" & EyeReview!tag_user & "<BR>"
      teNotesEyes.richtext = Replace(teNotesEyes.richtext, "place", strinsert)
      teNotesEyesLast.text = Format(EyeReview!date_created, "dd/mm/yyyy")
      If DateDiff(Now, DateAdd(EyeReview!date_created, gb.Year, 2), gb.year) < 0 Then
         teNotesEyesDue.text = "OVERDUE"
      Else
         teNotesEyesDue.text = Format(DateAdd(EyeReview!date_created, gb.Year, 2), "dd/mm/yyyy")
         bCompleted = True    
      End If  
   Else
      teNotesEyesDue.text = "OVERDUE"
   Endif
   
End

Private Sub Settings_Load()
   
   Try VSplit_DecSupport_Notes.layout = Settings["DACC/VSplit_DecSupport_Notes.layout"] 

End

Public Sub Settings_Save()

   Settings["DACC/VSplit_DecSupport_Notes.layout"] = VSplit_DecSupport_Notes.layout
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "new"
      Case "edit"          'only ever usable if an  existing DACC is displayed
         Edit()
      Case "save"
         Save()
      Case "refresh"
         Refresh()         'refresh components, don't touch keys
   End Select
   
End

Public Sub New_Dacc()
   
   EditArea_Clear()  'Clear entry area and refresh as many components as possible
   Reset_Keys()      
   Refresh()         
   
End

Public Sub Edit()
   '-----------------------------
   'Allow editing on the same day
   '-----------------------------
   
   Dim sMsg As String
   
   If Not IsNull(date_completed) And Format(date_completed, "dd/mm/yyyy") <> Format(Now, "dd/mm/yyyy") Then
      sMsg = "This DACC was completed on " & Format(date_completed, "dd/mm/yyyy")
      sMsg &= " and cannot be edited.\n\nIf the information in this DACC is inaccurate "
      sMsg &= "you may delete it now."
      Message.Title = "Diabetes Annual Cycle of Care"
      If Message.Question(sMsg, "Delete DACC", "Cancel") = 2 Then Return
      'fixme delete the dACC
   Else
      Vbox_EditArea_Inner.Enabled = True     
   End If
   
End

Public Sub Reset_Keys()
   
   fk_progressnote = -1
   fk_dacc = 0
   fk_consult = 0
   date_completed = Null
   date_saved = Null
   '  bSavePending = False 
   
End

Public Sub teDue_LostFocus()
   
   Last.background = Color.White
   
End

Public Sub teDue_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub teDone_LostFocus()
   
   Last.background = Color.White
   
End

Public Sub teDone_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub teNotesDACC_LostFocus()
   
   Last.pos = 1
   
End

Public Sub teNotesDACC_gotFocus()
   
   Select Case Last.tag
      Case "hba1c"
         NextTextBoxDetails = teNotesEyes
         NextTextBoxLast = teNotesHBA1cLast
         NextTextboxDue = teNotesHBA1cDue
      Case "eyes"
         NextTextBoxDetails = teNotesBP
         NextTextBoxLast = teNotesEyesLast  
         NextTextboxDue = teNotesEyesDue
         
      Case "bp"
         NextTextBoxDetails = teNotesBMI
         NextTextBoxLast = teNotesBPLast
         NextTextboxDue = teNotesBPDue
         
      Case "bmi"
         NextTextBoxDetails = teNotesFeet
         NextTextBoxLast = teNotesBMILast 
         NextTextboxDue = teNotesBMIDue
         
      Case "feet"
         NextTextBoxDetails = teNotesHDL
         NextTextBoxLast = teNotesFeetLast 
         NextTextboxDue = teNotesFeetDue
         
      Case "hdl"
         NextTextBoxDetails = teNotesMicroalbumin
         NextTextBoxLast = teNotesHDLLast  
         NextTextboxDue = teNotesHDLDue
         
      Case "microalbumin"
         NextTextBoxDetails = teNotesEducation
         NextTextBoxLast = teNotesMicroalbuminLast
         NextTextboxDue = teNotesMicroalbuminDue
         
      Case "education"
         NextTextBoxDetails = teNotesDiet
         NextTextBoxLast = teNotesEducationLast
         NextTextboxDue = teNotesEducationDue
         
      Case "diet"
         NextTextBoxLast = teNotesDietLast
         NextTextBoxDetails = teNotesActivitY
         NextTextboxDue = teNotesDietDue
         
      Case "activity"
         NextTextBoxDetails = teNotesSmoking
         NextTextBoxLast = teNotesActivityLast
         NextTextboxDue = teNotesActivityDue
         
      Case "smoking"
         NextTextBoxDetails = teNotesMedication
         NextTextBoxLast = teNotesSmokingLast
         NextTextboxDue = teNotesSmokingDue
         
      Case "medication"
         NextTextBoxLast = teNotesMedicationLast
         NextTextboxDue = teNotesMedicationDue
         
   End Select
   
End

Public Sub teNotesDACC_Change()
   '--------------------------------------------------------------
   'As the text in the details of the activity column changes,
   'if no last done or due dates exist, calculate these on the 
   'basis of the tag on the parental HBOX 'fixme this should come
   'pre-configured from a database table
   'if enter pressed twice, move onto the next textbox
   '--------------------------------------------------------------
   
   If bexit Then Return 
   
   If Trim(Last.text) <> "" Then
      If Trim(NextTextBoxLast.Text) = "" Then
         NextTextBoxLast.text = Format(Now, "dd/mm/yyyy")
         NextTextboxDue.text = Format(DateAdd(Now, gb.month, Val(Last.Parent.tag)), "dd/mm/yyyy")
      Endif
   Else
      NextTextBoxLast.text = ""
      NextTextboxDue.text = "OVERDUE"
   Endif
   If Last.pos > 0 And InStr(Last.text, "\n\n") Then
      'FIXME - GET IAN DO DO REGEX   TO REMOVE A <P> </p> COMBINATION HERE 
      Select Case Last.tag
         Case "bp", "bmi", "hdl", "microalbumin"
            
         Case Else
            Last.text = Replace(Last.text, "\n\n", "\n")
            If Right(Last.text, 2) = "\n" Then
               bexit = True
               Last.text = Left(Last.text, Len(Last.text) - 2)
               Last.pos = 0
               bExit = False 
            Endif
            
      End Select
      NextTextBoxDetails.SetFocus()
      NextTextBoxDetails.Pos = Len(NextTextBoxDetails.Text)
   End If
   EditArea_NotifyData_Change(True)
   
End

Public Sub teNotesDACC_KeyPress()
   
   Select Case Key.Code
      Case Key.return 
         Select Case Last.tag
            Case "hba1c"
            Case "eyes"
            Case "bp"
            Case "bmi"
            Case "feet"
            Case "hdl"
            Case "microalbumin"
            Case "education"
            Case "diet"
            Case "activity"
            Case "smoking"
            Case "medication"
               tbSave.SetFocus()
         End Select
   End Select
   
End

Public Sub Reload()
   '------------------------------------------------------------
   'Refreshes any existing DACC data
   'Previous DACC's may (if I do it later) be able to be edited
   'currently only the latest one can
   'the columnview is now not visible
   '-----------------------------------------------------------   
   
   With cvwDACCS
      .columns.count = 2
      .Clear
   End With 
   currentconsult.Refresh("diabetes_annual_cycle_of_care")
   DACCS = currentconsult!diabetes_annual_cycle_of_care
   If DACCS.count = 0 Then                            'No DACC's then is overdue!
      lblLastClaimed.text = "Overdue"
      lblNextDue.text = ""
      New_Dacc()
   Else
      lblLastClaimed.text = ""
      For Each DACC In DACCS                          'sorted DESC so ist always latest
         If lblLastClaimed.text = "" Then 
            '----------------------------------------------------
            'Appropriate message for completed or incomplete DACC
            '----------------------------------------------------
            If Not IsNull(DACC!date_completed) Then 
               date_last_Claimed = DACC!date_completed
               lblLastClaimed.text = "Last Claim: " & Format(DACC!date_completed, "dd/mm/yyyy")
               lblNextDue.text = "Next Due: " & Format(DateAdd(DACC!date_completed, gb.year, 1))
            Else
               lblLastClaimed.text = "Unfinished: " & Format(DACC!consult_date, "dd/mm/yyyy")
            End If    
            Display(DACC)
         End If   
         cvwDACCS.Add(DACC!pk, 0)
         cvwDACCS[DACC!pk][0] = DACC!date_completed
      Next
      tbEdit.Enabled = True   
   End If
   
End

Public Sub Display(DACC As Collection)
   '------------------------------------------------------------------
   'Displays the last DACC saved which may/may not have been completed
   'Hence all the Try's in this subroutine.
   '------------------------------------------------------------------
   
   EditArea_Clear()
   bExit = True
   fk_consult = DACC!fk_consult                    'consult DACC last worked on or finished
   fk_dacc = DACC!pk                               'key to  chronic_disease_management.diabetes_annual_cycle_of_care
   date_completed = DACC!date_completed            'can be null if an interim unclaimed DACC
   date_saved = DACC!consult_date                 'will never be null
   Try fk_progressnote = DACC!fk_progressnote     'may be null if date_completed is null
   teNotesHBA1C.text = DACC!hba1c_details
   Try teNotesHBA1CLast.text = Format(DACC!hba1c_date, "dd/mm/yyyy")
   Try teNotesHBA1CDue.text = Format(DACC!hba1c_date_due, "dd/mm/yyyy")
   teNotesEyes.text = DACC!eyes_details
   Try teNotesEyesLast.text = Format(DACC!eyes_date, "dd/mm/yyyy")
   Try teNotesEyesDue.text = Format(DACC!eyes_date_due, "dd/mm/yyyy")    
   teNotesBP.text = DACC!bp_details
   Try teNotesBPLast.text = Format(DACC!bp_date, "dd/mm/yyyy")
   Try teNotesBPDue.text = Format(DACC!bp_date_due, "dd/mm/yyyy")
   teNotesBMI.text = DACC!bmi_details
   Try teNotesBMILast.text = Format(DACC!bmi_date, "dd/mm/yyyy")
   Try teNotesBMIDue.text = Format(DACC!bmi_date_due, "dd/mm/yyyy")  
   teNotesFeet.text = DACC!feet_details
   Try teNotesFeetLast.text = Format(DACC!feet_date, "dd/mm/yyyy")
   Try teNotesFeetDue.text = Format(DACC!feet_date_due, "dd/mm/yyyy")
   teNotesHDL.text = DACC!lipids_details
   Try teNotesHDLLast.text = Format(DACC!lipids_date, "dd/mm/yyyy")  
   Try teNotesHDLDue.text = Format(DACC!lipids_date_due, "dd/mm/yyyy")
   teNotesMicroalbumin.text = DACC!microalbumin_details
   Try teNotesMicroalbuminLast.text = Format(DACC!microalbumin_date, "dd/mm/yyyy")
   Try teNotesMicroalbuminDue.text = Format(DACC!microalbumin_date_due, "dd/mm/yyyy")
   teNotesEducation.text = DACC!education_details
   Try teNotesEducationLast.text = Format(DACC!education_date, "dd/mm/yyyy")
   Try teNotesEducationDue.text = Format(DACC!education_date_due, "dd/mm/yyyy")
   teNotesDiet.text = DACC!diet_details
   Try teNotesDietLast.text = Format(DACC!diet_date, "dd/mm/yyyy")
   Try teNotesDietDue.text = Format(DACC!diet_date_due, "dd/mm/yyyy")
   teNotesActivity.text = DACC!exercise_details
   Try teNotesActivityLast.text = Format(DACC!exercise_date, "dd/mm/yyyy")
   Try teNotesActivityDue.text = Format(DACC!exercise_date_due, "dd/mm/yyyy")
   teNotesSmoking.text = DACC!smoking_details
   Try teNotesSmokingLast.text = Format(DACC!smoking_date, "dd/mm/yyyy")
   Try teNotesSmokingDue.text = Format(DACC!smoking_date_due, "dd/mm/yyyy")
   teNotesMedication.text = DACC!medication_review_details
   Try teNotesMedicationLast.text = Format(DACC!medication_review_date, "dd/mm/yyyy")
   Try teNotesMedicationDue.text = Format(DACC!medication_review_date_due, "dd/mm/yyyy")
   bExit = False  
   Vbox_EditArea_Inner.Enabled = False 
   '----------------------------------------------------
   're-display any previous progress notes for this DACC
   '----------------------------------------------------
   If Not IsNull(DACC!notes) Then 
      With FProgressNotes
         .bExit = True  'stop the datachanged event    
         .teNotes.RichText = DACC!notes
         .bExit = False 
      End With    
   End If      

End

Public Sub teDue_Change()
   
   If Last.text = "OVERDUE" Then
      Last.Foreground = Color.Red
   Else
      Last.Foreground = Color.Black
   End If
   
End

Public Sub EditArea_Buttons_KeyPress()
   
   If Key.code = Key.Return Then
      Save()
   Endif
   
End
