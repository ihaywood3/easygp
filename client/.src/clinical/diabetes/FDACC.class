' Gambas class file

' Gambas class file
' Copyright (C) 2008-2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-----------------------------------------------------------------------------------------
' PURPOSE         A form for the Australian General Practice Diabetes Annual Cycle of Care
' HOW THIS WORKS  
' TODO
' BUGS            Please report to rterry@pacific.net.au
'                 There will be many as pre-alpha and never used
'-----------------------------------------------------------------------------------------

Private bExit As Boolean
Private Activity As String[]
Private currentconsult As CConsult
Private HBA1c As Result 
Private EyeReview As Result
Private fk_patient As Integer
Private LastBP As String 'of BP|date
Private LastRUAlbCreatRatio As Result
Private DACCS As Collection
Private DACC As Collection
Private pk_view As Integer
Private fk_dacc As Integer    
Private bCompleted As Boolean
Private NextTextBoxDetails As TextEdit
Private NextTextBoxLast As TextEdit 
Private NextTextboxDue As TextEdit
Private height As Variant = 0
Private weight As Variant = 0

Public Sub Init(cons As CConsult)
   
   currentconsult = cons
   Settings_Load()
   fk_patient = currentconsult!patient!fk_patient
  
   Reload()
  
   
End

Public Function Valid_Data() As Boolean
   '------------------------------------------------
   'Checks for valid input and returns true if valid
   '------------------------------------------------
   
   Dim bInvalid As Boolean
   Dim hCtrl As Control
   Dim HB As HBox
   Dim TE As TextEdit
   Dim bits As String[]
   Dim bit As String
   
   bcompleted = True   
   '----------------------------------------------------------------------------
   'Check all the textboxes in the editing area, if should have a date, validate
   '----------------------------------------------------------------------------
   For Each hctrl In Vbox_EditArea_Inner.Children
      If hctrl.tag <> "skip" Then                   'Hbox's without appropriate contents
         HB = hctrl
         For Each hCtrl In HB.Children
            If InStr(Lower(hctrl.name), "due") Or InStr(Lower(hctrl.name), "last")
               TE = hctrl
               If Te.text <> "" And Not IsDate(Te.text) Then
                  bits = Split(Te.text, "\n", "", True)
                  For Each bit In bits
                      If Not IsDate(bit) And bit <> "OVERDUE" Then 
                        TE.SetFocus()
                        Return
                     End If
                  Next
                Endif
            Else
               If hctrl Is TextEdit Then
                  TE = hctrl
                  If TE.text = "" Then
                     bcompleted = False
                     '   rbCompleteYes.value = True
                  Endif
               Endif
            End If
         Next
      Endif
   Next
   
   Return True 
   
End
Public Sub EditArea_NotifyData_Change(flag As Boolean)
  
  If Flag Then
    Vbox_EditArea.Padding = 1
    tbSave.Foreground = Color.red
  Else
    
     Vbox_EditArea.Padding = 0
    tbSave.Foreground = Color.blackl

  Endif
  
End

Public Sub EditArea_Clear()
   bExit = True   
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_Inner)
   bExit = False  
End

Public Sub New_DACC()
   '-------------------------------------------------------------
   'User want a new DACC, attempt to get as much info as possible
   '-------------------------------------------------------------
   bExit = True 
   Try Last_Hbaic()
   Try Last_BMI()
   Try Last_Eye_Review()
   Try Last_BP()
   Try Last_Microalbumin()
   Last_Diet()
   Last_Smoking()
   Last_Education()
   Last_Activity()
   Last_Medication()
   Last_Foot_Check()
   Last_Lipids()
   bExit = False     
End

Public Sub Save()
   '---------------------------------------------------------------------------------------------------------
   ' Save the annual cycle of care
   '  pk serial NOT NULL,
   '   fk_consult integer NOT NULL,
   '   date_completed date,
   '   hba1c_date date, -- date of last hba1c could be null if not yet completed but DACC saved...
   '   hba1c_date_due date,
   '   hba1c_details text,
   '   eyes_date date, -- Date the eye check was done, may be entered without paperwork to verify
   '   eyes_date_due date,
   '   eyes_details text, -- Whoever checked the eyes, could be person or entity, but hopefully in most cases...
   '   bp_date date,
   '   bp_date_due date,
   '   bp_details text,
   '   bmi_date date,
   '   bmi_date_due date,
   '   bmi_text text,
   '   feet_date date,
   '   feet_date_due date,
   '   feet_text text,
   '   lipids_date date,
   '   lipids_date_due date,
   '   lipids_details text,
   '   microalbumin_date date,
   '   microalbumin_date_due date,
   '   microalbumin_details text,
   '   education_date date,
   '   education_date_due date,
   '   education_details text,
   '   diet_date date,
   '   diet_date_due date,
   '   diet_details text,
   '   exercise_date date,
   '   exercise_date_due date,
   '   exercise_details text,
   '   smoking_date date,
   '   smoking_date_due date,
   '   smoking_details text,
   '   medication_review date,
   '   medication_review_date_due date,
   '   medication_review_details text,
   ' ----------------------------------------------------------------------------------------
   If Vbox_EditArea.Padding = 0 Then Return 
   If Not Valid_Data() Then Return
   DACC = New Collection
   If fk_dacc Then
      DACC!fk_dacc = fk_dacc
   Else
      DACC!date_completed = Now()
   Endif
   DACC!fk_consult = currentconsult.GetPK()
   ' If rbCompleteYes.value = True Then
   '    DACC!data_completed = Now()
   ' Endif
   DACC!hba1c_date = Val(teNotesHBA1cLast.text)
   DACC!hba1c_date_due = Val(teNotesHBA1cDue.text)
   DACC!hba1c_details = teNotesHBA1C.text
   DACC!eyes_date = Val(teNotesEyesLast.text)
   DACC!eyes_date_due = Val(teNotesEyesDue.text)
   DACC!eyes_details = teNotesEyes.text
   DACC!bp_date = Val(teNotesBPLast.text)
   DACC!bp_date_due = Val(teNotesBPDue.text)
   DACC!bp_details = teNotesBP.Text
   DACC!bmi_date = Val(teNotesBMILast.text)
   DACC!bmi_date_due = Val(teNotesBMIDue.text)
   DACC!bmi_details = Replace(teNotesBMI.Text, "\n\n", "\n")
   DACC!feet_date = Val(teNotesFeetLast.text)
   DACC!feet_date_due = Val(teNotesFeetDue.text)
   DACC!feet_details = teNotesFeet.text
   DACC!lipids_date = Val(teNotesHDLLast.text)
   DACC!lipids_date_due = Val(teNotesHDLDue.text)
   DACC!lipids_details = teNotesHDL.text
   DACC!microalbumin_date = Val(teNotesMicroalbuminLast.text)
   DACC!microalbumin_date_due = Val(teNotesMicroalbuminDue.text)
   DACC!microalbumin_details = teNotesMicroalbumin.Text
   DACC!education_date = Val(teNotesEducationLast.text)
   DACC!education_date_due = Val(teNotesEducationDue.text)
   DACC!education_details = teNotesEducation.text
   DACC!diet_date = Val(teNotesDietLast.text)
   DACC!diet_date_due = Val(teNotesDietDue.text)
   DACC!diet_details = teNotesDiet.Text
   DACC!exercise_date = Val(teNotesActivityLast.text)
   DACC!exercise_date_due = Val(teNotesActivityDue.text)
   DACC!exercise_details = teNotesActivity.Text
   DACC!smoking_date = Val(teNotesSmokingLast.text)
   DACC!smoking_date_due = Val(teNotesSmokingDue.text)
   DACC!smoking_details = teNotesSmoking.text
   DACC!medication_review_date = Val(teNotesMedicationLast.text)
   DACC!medication_review_date_due = Val(teNotesMedicationDue.text)
   DACC!medication_review_details = teNotesMedication.Text
   modDBConnect.BeginTrans()
      modDACCDBI.Save_DACC(DACCS, DACC)
   modDBConnect.CommitTrans()
   Reload()
   
End

Public Sub Form_Open()
   
   ' TextLabel1.text = "HBa1c" 
   ' TextLabel2.text = "Eye examination"
   ' TextLabel3.text = "Blood Pressure"
   ' TextLabel4.text = "Weight, height and BMI"
   ' TextLabel5.text = "Examine Feet"
   ' TextLabel6.text = "TC, Triglycerides & HDL"
   ' TextLabel7.text = "Microalbumin"
   ' TextLabel8.text = "Provide self care education"
   ' TextLabel9.text = "Review Diet"
   ' TextLabel10.text = "Physical activity"
   ' TextLabel11.text = "Check smoking status"
   ' TextLabel12.text = "Review of medication"
   
End

Public Sub Last_Hbaic()
   '-----------------------------------------------------------------
   'Attempts to get the last hba1c, if within the minimum time period
   'shows a compeleted icon, otherwise say its due now.
   '-----------------------------------------------------------------
   
   Dim bCompleted As Boolean
   Dim sString As String 
   
   teNotesHBA1c.RichText = "placeholder"
   hba1c = modMeasurementsDBI.Get_Loinc_Value(fk_patient, const.loinc_hba1c, 1, "DESC") 'Last hba1c by date
   If hba1c.count Then  
      sString = "<B>HBA1c:</B> " & hba1c!value_numeric & " (" & hba1c!reference_range & ")"    'display the value
      teNotesHBA1cLast.text = Format(hba1c!observation_date, "dd/mm/yyyy")                      'and when done
      If DateDiff(Now, DateAdd(hba1c!observation_date, gb.Month, 12), gb.Month) < 0 Then
         teNotesBPDue.text = "OVERDUE"
        Else
         teNotesHBA1cDue.text = Format(DateAdd(hba1c!observation_date, gb.Year, 2), "dd/mm/yyyy") 
         bCompleted = True 
      End If   
   Else
      teNotesHBA1cDue.text = "OVERDUE"
      bCompleted = False   
   End If  
   teNotesHBA1c.richtext = Replace(teNotesHBA1c.richtext, "placeholder", sString)
   If hba1c!value_numeric > 7 Then tlNotes.Text &= " - a Hba1c value of &gt; 7 indicates suboptimal control<BR>"
   
   Display_Completion_Status(Hbox_Hba1c, bCompleted)
   
End

Public Sub Last_Foot_Check()
   'TODO implement backend and include skin, pulses and sensation check
   
   Dim bCompleted As Boolean
   
   If teNotesFeetLast.text = "" Then
      teNotesFeetDue.text = "OVERDUE"
      Display_Completion_Status(Hbox_Feet, bCompleted)
   Endif
   
End

Public Sub Last_Education()
   'TODO implement backend and include skin, pulses and sensation check
   
   Dim bCompleted As Boolean
   
   If teNotesEducationLast.text = "" Then
      teNotesEducationDue.text = "OVERDUE"
      Display_Completion_Status(Hbox_SelfCare, bCompleted)
   Endif
   
End

Public Sub Last_Activity()
   'TODO implement backend and include skin, pulses and sensation check
   
   Dim bCompleted As Boolean
   
   If teNotesActivityLast.text = "" Then
      teNotesActivityDue.text = "OVERDUE"
      Display_Completion_Status(Hbox_Activity, bCompleted)
   Endif
   
End

Public Sub Last_Medication()
   'TODO implement backend and include skin, pulses and sensation check
   
   Dim bCompleted As Boolean
   
   If teNotesMedicationLast.text = "" Then
      teNotesMedicationDue.text = "OVERDUE"
      Display_Completion_Status(Hbox_Medication, bCompleted)
   Endif
   
End

Public Sub Last_Diet()
   'TODO implement backend and include skin, pulses and sensation check
   
   Dim bCompleted As Boolean
   
   If teNotesDietLast.text = "" Then
      teNotesDietDue.text = "OVERDUE"
      Display_Completion_Status(HBox_Diet, bCompleted)
   Endif
   
End

Public Sub Last_Smoking()
   'TODO implement backend and include skin, pulses and sensation check
   
   Dim bCompleted As Boolean
   
   If teNotesSmokingLast.text = "" Then
      teNotesSmokingDue.text = "OVERDUE"
      Display_Completion_Status(HBox_Smoking, bCompleted)
   Endif
   
End

Public Sub Last_Microalbumin()
   '------------------------------------------------
   'Microalbumin, currently only works for the ratio
   'not the timed overnight
   '------------------------------------------------
   
   Dim bCompleted As Boolean
   Dim sString As String
   Dim R As Result
   
   teNotesMicroalbumin.RichText = "placeholder"
   R = modMeasurementsDBI.Get_Loinc_Value(fk_patient, const.loinc_RUAlbCreatRatio, 1, "DESC") 'Last R by date
   If R.count Then  
      sString = "<B>Malb</B>=" & R!value_numeric & " (" & R!reference_range & ")" 
      teNotesMicroalbuminLast.text = Format(R!observation_date, "dd/mm/yyyy") 
      If DateDiff(Now, DateAdd(R!observation_date, gb.Month, 12), gb.Month) < 0 Then
         teNotesMicroalbuminDue.text = "OVERDUE"
      Else
         teNotesMicroalbuminDue.text = Format(DateAdd(R!observation_date, gb.Year, 1), "dd/mm/yyyy") 
         bCompleted = True 
      End If
      If Not IsNull(R!abnormal) Then
         tlNotes.text &= "- microalbuminuria noted <BR>"
      Endif
   Else
      teNotesMicroalbuminDue.text = "OVERDUE"
      bCompleted = False   
   End If  
   teNotesMicroalbumin.richtext = Replace(teNotesMicroalbumin.richtext, "placeholder", sString)
   Display_Completion_Status(Hbox_Microalbumin, bCompleted)
   
End 

Public Sub Last_Lipids()
   '------------------------------------------------
   'Attempt to get TC, HDL, LDL and Triglycerides
   '------------------------------------------------
   
   Dim bCompleted As Boolean
   Dim sString As String 
   
   teNotesHDL.richtext = "placeholder"      
   sString = Lipid_Get_Component("TC  = ", const.Loinc_TotalCholesterol, sSTring)
   sString = Lipid_Get_Component("Trig = ", const.Loinc_Triglycerides, sSTring)
   sString = Lipid_Get_Component("HDL = ", const.Loinc_HDL, sSTring)
   sString = Lipid_Get_Component("LDL = ", const.Loinc_LDL, sSTring)
   teNotesHDL.richtext = Replace(teNotesHDL.richtext, "placeholder", sString)
   teNotesHDL.pos = 1
   Display_Completion_Status(Hbox_HDL, bCompleted)
   
End 

Public Sub Lipid_Get_Component(sComponentName As String, sLoinc As String, sString As String) As String 
   '--------------------------------------------------------------------
   'Gets a lipid component, and adds the result to the string which will
   'be shown in the lipids box
   '--------------------------------------------------------------------
   
   Dim R As Result
   Dim RefRange As String
   
   R = modMeasurementsDBI.Get_Loinc_Value(fk_patient, sLoinc, 1, "DESC")
   If R.count Then  
      'Now, due to HAPS being fuckwits, they send their range bracketed
      RefRange = R!reference_range
      RefRange = Replace(RefRange, "(", "")
      RefRange = Replace(RefRange, ")", "")
      RefRange = Replace(RefRange, "<", "&lt;")  
      sString &= "<B>" & sComponentName & "</B> " & Format(R!value_numeric, "###.##") & "(" & RefRange & ")<BR>"
      teNotesHDLLast.text = Format(R!observation_date, "dd/mm/yyyy") 
      If DateDiff(Now, DateAdd(R!observation_date, gb.Month, 12), gb.Month) < 0 Then
         teNotesHDLDue.text = "OVERDUE"
      Else
         teNotesHDLDue.text = Format(DateAdd(R!observation_date, gb.Year, 1), "dd/mm/yyyy") 
         bCompleted = True 
      End If
      If sLoinc = const.Loinc_TotalCholesterol Then
         If R!value_numeric > 3.5 Then
            tlNotes.text &= "- total cholesterol of " & R!value_numeric & " elevated - aim for TC &lt;3.5 and LDL &lt;2.0)"
         Endif
      Endif
   Else
      teNotesHDLDue.text = "OVERDUE"
      bCompleted = False   
   End If  
   Return sString
   
End

Public Sub Last_BMI()
   '------------------------------------------------
   'Calculate last BMI, assumes height dosn't change
   'Last weight must be within the 6M period
   '------------------------------------------------
   
   Dim sData As String[]
   Dim weight As Variant
   Dim height As Variant
   Dim BMI As Float
   Dim bHaveHeight As Boolean
   Dim bHaveWeight As Boolean
   Dim bCompleted As Boolean
   Dim StrInsert As String          'the data to insert where we have the placeholder
   Dim strDates As String 
   Dim StrOverDueStatus As String 
   '-------------------------------------------
   'Get height as a delimted string:height|date
   '-------------------------------------------
   SData = Split(modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Height), "|")
   teNotesBMI.richtext = "placeholder"
   teNotesBMILast.Richtext = "placeholder"
   teNotesBMIDue.richtext = "placeholder"
   If sData.count Then                                               
      StrInsert = "<B>Height</B>=" & sData[0] & "<BR>"                      'put height into details column
      height = sData[0]                                                       
      strDates = sData[1] & "<BR>"                    'and date into when last done column
      bHaveHeight = True   
   Endif
   '----------------------------------------------------------------------------------------
   'Ditto for weight, but if weight taken > 6 months ago, prompt that measurement is overdue
   '----------------------------------------------------------------------------------------
   SData = Split(modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Weight), "|")
   If SData.Count Then
      weight = sData[0]
      StrInsert &= "<B>Weight</B>=" & weight & "<BR>"
      If DateDiff(Now, DateAdd(Val(sData[1]), gb.month, 6), gb.month) > 0 Then
         bHaveWeight = True
      Endif
      strDates &= sData[1] & "<BR>"
   End If   
   '------------------------------------------------------------
   'if have enough data, calculate BMI, if not prompt as overdue
   'or - if weight out of date, prompt as overdue
   '------------------------------------------------------------
   If bHaveHeight And bHaveWeight Then                               'have height and weight, and in date
      Try BMI = Format((weight / (height ^ 2)) * 10000, "##.#")
      If Not Error Then
         bCompleted = True 
         StrInsert &= "<B>BMI=</B>" & BMI
         teNotesBMIDue.text = Format(DateAdd(Val(sData[1]), gb.Month, 6), "dd/mm/yyyy")
         
         tlNotes.text &= "- " & modDecisionSupport.BMI_DecSupp(weight, height) & "<BR>"
         'fixme just pass the BMI
         
      Else
         teNotesBMIDue.text = "OVERDUE"
      Endif
   Else
      If bHaveHeight = False Then
         StrOverDueStatus = "OVERDUE<BR>"
      Else
         StrOverDueStatus = "<BR>"
      Endif
      If bHaveWeight = False Then 
         StrOverDueStatus &= "OVERDUE"
      End If 
      teNotesBMIDue.richtext = Replace(teNotesBMIDue.Richtext, "placeholder", StrOverDueStatus)
   End If   
   teNotesBMI.richtext = Replace(teNotesBMI.richtext, "placeholder", strinsert)
   teNotesBMILast.richtext = Replace(teNotesBMILast.richtext, "placeholder", strDates)
   Display_Completion_Status(Hbox_BMI, bCompleted)
   
End 

Public Sub Last_BP() 
   '------------------------------------------------------------
   'Display last recorded BP, if not in date, completion = false
   '------------------------------------------------------------
   
   Dim bits As New String[]
   Dim bCompleted As Boolean
   Dim sString As String
   Dim BPBits As String[]
   Dim BpNotAtTarget As Boolean
   
   teNotesBP.RichText = "placeholder"
   lastbp = modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_BP)
   bits = Split(modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_BP), "|")
   If bits.count Then
      sString = "<B>BP</B>=" & bits[0]
      teNotesBPLast.text = bits[1]
      If DateDiff(Now, DateAdd(Val(bits[1]), gb.Month, 12), gb.Month) < 0 Then
         teNotesBPDue.text = "OVERDUE"
      Else
         teNotesBPDue.text = Format(DateAdd(Val(bits[1]), gb.MOnth, 6), "dd/mm/yyyy")
         bCompleted = True   
      End If  
   Else
      teNotesBPDue.text = "OVERDUE"
   End If 
   teNotesBP.richtext = Replace(teNotesBP.richtext, "placeholder", sString)
   BPBits = Split(bits[0], "/")
   If Val(BPBits[0]) > 135 Then
      tlNotes.text &= "- systolic pressure is above target at " & BPBits[0] & "<BR>"
      BpNotAtTarget = True 
   End If
   If Val(BPBits[1]) > 80 Then
      tlNotes.text &= "- diastolic pressure is above target at " & BPBits[1] & "<BR>"
      BpNotAtTarget = True 
   End If
   If BpNotAtTarget Then tlNotes.text &= " - recommended target BP level is &lt; 130/80 for diabetics<BR>"
   Display_Completion_Status(Hbox_BP, bCompleted)
   
End 

Public Sub Last_Eye_Review()
   '------------------------------------------------------------------------
   'Attempts to find if someone has written to us with an eye review, either
   'ophthalmologist or optomotrist and displays who if found
   'the texteditor needs a 'place holder' to be replaced with the text you
   'want to show. My intention with this HREF is that at some point
   'clicking on the link will show the letter FIXME
   '-------------------------------------------------------------------------
   
   Dim bCompleted As Boolean
   Dim strinsert As String
   
   EyeReview = modDACCDBI.Last_Eye_Review(fk_patient, 1, "DESC")
   If EyeReview.count Then 
      teNotesEyes.richtext = "place"
      strinsert = "<A HREF='" & Str$(EyeReview!pk_document) & "'>"
      If Not IsNull(EyeReview!organisation_category) Then
         strinsert &= EyeReview!organisation
      Else
         strinsert &= EyeReview!originator
      Endif
      strinsert &= "</A><BR>"
      teNotesEyes.richtext = Replace(teNotesEyes.richtext, "place", strinsert)
      teNotesEyesLast.text = Format(EyeReview!date_created, "dd/mm/yyyy")
      If DateDiff(Now, DateAdd(EyeReview!date_created, gb.Year, 2), gb.year) < 0 Then
         teNotesEyesDue.text = "OVERDUE"
      Else
         teNotesEyesDue.text = Format(DateAdd(EyeReview!date_created, gb.Year, 2), "dd/mm/yyyy")
         bCompleted = True    
      End If  
   Else
      teNotesEyesDue.text = "OVERDUE"
   Endif
   Display_Completion_Status(Hbox_Eyes, bCompleted)
   
End

Public Sub Display_Completion_Status(HB As HBox, bCompleted As Boolean)
   '--------------------------------------------------------------
   'Gives visual display to indicate state of component completion
   'by putting up either a tick or a red dot next to the row
   '---------------------------------------------------------------
   
   Dim hctrl As Control
   Dim vb As VBox
   Dim pb As PictureBox
   
   For Each hctrl In HB.children
      If hctrl Is VBox Then
         vb = hctrl
         For Each hctrl In VB.children
            If hctrl Is PictureBox Then
               pb = hctrl  
               If bCompleted Then
                  pb.Picture = Picture.Load("icons/12/green_dot.png")
                  
               Else
                  '     pb.Picture = Picture.Load("icons/12/red_dot.png")
                  pb.Picture = Null
               Endif
            Endif
         Next
      Endif
   Next
   
End

Private Sub Settings_Load()
   
   Try VSplit_DACC.Layout = Settings["DACC/VSplit_DACC.layout"] 
   Try HSplit_DACCComments.layout = Settings["DACC/HSplit_DACCComments.layout"]
   
End

Public Sub Settings_Save()
   
   Settings["DACC/VSplit_DACC.layout"] = VSplit_DACC.Layout
   Settings["DACC/HSplit_DACCComments.layout"] = HSplit_DACCComments.layout
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "save"
         Save()
      Case "refresh"
         New_DACC()
   End Select
   
End

Public Sub teDue_LostFocus()
   
   Last.background = Color.White
   
End

Public Sub teDue_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub teDone_LostFocus()
   
   Last.background = Color.White
   
End

Public Sub teDone_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub teNotesDACC_LostFocus()
   
   Last.pos = 1
   
End

Public Sub teNotesDACC_gotFocus()
   
   Select Case Last.tag
      Case "hba1c"
         NextTextBoxDetails = teNotesEyes
         NextTextBoxLast = teNotesHBA1cLast
         NextTextboxDue = teNotesHBA1cDue
      Case "eyes"
         NextTextBoxDetails = teNotesBP
         NextTextBoxLast = teNotesEyesLast  
         NextTextboxDue = teNotesEyesDue
         
      Case "bp"
         NextTextBoxDetails = teNotesBMI
         NextTextBoxLast = teNotesBPLast
         NextTextboxDue = teNotesBPDue
         
      Case "bmi"
         NextTextBoxDetails = teNotesFeet
         NextTextBoxLast = teNotesBMILast 
         NextTextboxDue = teNotesBMIDue
         
      Case "feet"
         NextTextBoxDetails = teNotesHDL
         NextTextBoxLast = teNotesFeetLast 
         NextTextboxDue = teNotesFeetDue
         
      Case "hdl"
         NextTextBoxDetails = teNotesMicroalbumin
         NextTextBoxLast = teNotesHDLLast  
         NextTextboxDue = teNotesHDLDue
         
      Case "microalbumin"
         NextTextBoxDetails = teNotesEducation
         NextTextBoxLast = teNotesMicroalbuminLast
         NextTextboxDue = teNotesMicroalbuminDue
         
      Case "education"
         NextTextBoxDetails = teNotesDiet
         NextTextBoxLast = teNotesEducationLast
         NextTextboxDue = teNotesEducationDue
         
      Case "diet"
         NextTextBoxLast = teNotesDietLast
         NextTextBoxDetails = teNotesActivitY
         NextTextboxDue = teNotesDietDue
         
      Case "activity"
         NextTextBoxDetails = teNotesSmoking
         NextTextBoxLast = teNotesActivityLast
         NextTextboxDue = teNotesActivityDue
         
      Case "smoking"
         NextTextBoxDetails = teNotesMedication
         NextTextBoxLast = teNotesSmokingLast
         NextTextboxDue = teNotesSmokingDue
         
      Case "medication"
         NextTextBoxLast = teNotesMedicationLast
         NextTextboxDue = teNotesMedicationDue
         
   End Select
   
End

Public Sub teNotesDACC_KeyRelease()
   '--------------------------------------------------------
   'Parse for user defined shortcuts FIXME MAKE USER DEFINED
   '--------------------------------------------------------
   
   If InStr(LCase(Last.RichText), "bp=") Then
      ParseText_Keyword(Last, "bp=")
   End If
   
   If InStr(LCase(Last.RichText), "h=") Then  'FIXME MAKE THIS CASE INSENSITIVE
      ParseText_Keyword(Last, "h=")
   End If
   If InStr(LCase(Last.RichText), "w=") Then  'FIXME MAKE THIS CASE INSENSITIVE
      ParseText_Keyword(Last, "w=")
   End If
   
End

Public Sub teNotesDACC_Change()
   '--------------------------------------------------------------
   'As the text in the details of the activity column changes,
   'if no last done or due dates exist, calculate these on the 
   'basis of the tag on the parental HBOX 'fixme this should come
   'pre-configured from a database table
   'if enter pressed twice, move onto the next textbox
   '--------------------------------------------------------------
   
   If bexit Then Return 
   
   If Trim(Last.text) <> "" Then
      If Trim(NextTextBoxLast.Text) = "" Then
         NextTextBoxLast.text = Format(Now, "dd/mm/yyyy")
         NextTextboxDue.text = Format(DateAdd(Now, gb.month, Val(Last.Parent.tag)), "dd/mm/yyyy")
      Endif
   Else
      NextTextBoxLast.text = ""
      NextTextboxDue.text = ""
   Endif
   If Last.pos > 0 And InStr(Last.text, "\n\n") Then
      'FIXME - GET IAN DO DO REGEX   TO REMOVE A <P> </p> COMBINATION HERE 
      Select Case Last.tag
      Case "bp", "bmi", "hdl", "microalbumin"
     
      Case Else
          Last.text = Replace(Last.text, "\n\n", "\n")
          If Right(Last.text, 2) = "\n" Then
             bexit = True
             Last.text = Left(Last.text, Len(Last.text) - 2)
              bExit = False 
          Endif


      End Select
                NextTextBoxDetails.SetFocus()
          NextTextBoxDetails.Pos = Len(NextTextBoxDetails.Text)
   End If
   EditArea_NotifyData_Change(True)
End

Public Sub teNotesDACC_KeyPress()
   
   Select Case Last.tag
      Case "hba1c"
      Case "eyes"
      Case "bp"
      Case "bmi"
      Case "feet"
      Case "hdl"
      Case "microalbumin"
      Case "education"
      Case "diet"
      Case "activity"
      Case "smoking"
      Case "medication"
         
   End Select
   
End

Public Sub ParseText_Keyword(te As Textedit, keyword As String)
   '--------------------------------------------------------------
   'FIXME THIS IS DUPLICATED IN fPROGRESNOTEEDIDITOR.CLASS
   'Tries to convert any BP=nnn/nn or nnn/nnn contained
   'in the background HTML to a valid BP If unsuccessful, then
   'no formatted html is inserted, so the user immediately knows
   'they have typed something wrong.
   '
   'Example as user types in te BP=120/70 the html looks like
   'this. Note that this routine is not triggered until a ascii 32
   'appears after the 120/70:
   '
   ' <html><head><meta name="qrichtext" content="1" /></head>
   '<body style="font-size:9pt;font-family:Bitstream Vera Sans">
   ' <p>BP=120/70 </p>
   ' </body></html>
   '
   'After this routine, the resultant html looks like this:
   '
   ' <html><head><meta name="qrichtext" content="1" /></head>
   '<body style="font-size:9pt;font-family:Bitstream Vera Sans">
   ' <p><a href="Bloodpressure">Blood Pressure=120/70 </a><br /></p>
   ' </body></html>
   '
   'and the cursor is moved on to the next line.
   
   'The resultant hmtl is parsed and the values extracted when the
   ' progress note is later saved
   '
   'FIXME: NO CODE YET TO RE-CONSTRUCT THE HTML IF THE USER
   'PARTIALY DELETES THE FORMATTED TEXT AFTER IT HAS BEEN INSERTED
   '--------------------------------------------------------------
   Dim sMeasurement As String
   Dim cp1 As Integer
   Dim cp2 As Integer
   Dim BMI As Float
     
   CP1 = InStr(LCase(te.RichText), keyword)
   cp2 = InStr(te.RichText, "<", CP1)
   sMeasurement = Mid(te.RichText, cp1, Cp2 - cp1)
   If Not (Right(sMeasurement, 1) = Chr(32)) Then 
      Return
   End If
   '---------------------------------------------------------
   'If measurement encountered and is valid, try and calc BMI
   '---------------------------------------------------------
   If modMeasurements.IsMeasurement(te, keyword, sMeasurement) Then
      Select Case keyword
        Case "h="
          Height = Val(Replace(sMeasurement, keyword, ""))
        Case "w="
          Weight = Val(Replace(sMeasurement, keyword, ""))
      End Select
      If Height <> 0 And Weight <> 0 Then 
         BMI = Format((weight / (height ^ 2)) * 10000, "##.#")
         teNotesBMI.Richtext &= "<A HREF='" & "BMI=" & " '>" & "BMI=" & Str(BMI) & "</A>"
         tlNotes.text &= "- " & modDecisionSupport.BMI_DecSupp(weight, height)
      End If   
   Endif
   
End
Public Sub reload()
  
  cvwDACCS.columns.count = 2
  DACCS = currentconsult!diabetes_annual_cycle_of_care
 For Each DACC In DACCS
    cvwDACCS.Add(DACC!pk, 0)
    cvwDACCS[DACC!pk][0] = DACC!date_completed
   ' cvwDACCS[DACC!pk, 0] = DACC!date_completed
 Next
  
End

Public Sub Display()
   '----------------------
   'Displays the last DACc
   '----------------------
   Dim C As Collection
   
   bExit = True
   c = DACCS[cvwDACCS.Item.key]
   fk_dacc = c!pk
   teNotesHBA1C.text = c!hba1c_details
   teNotesHBA1CLast = c!Date
   teNotesHBA1CDue = c!date_due  
   teNotesEyes.text = c!eyes_details
   teNotesEyesLast.text = c!eyes_date
   teNotesEyesDue.text = c!eyes_date_due     

   teNotesBP.text = c!bp_details
   teNotesBPLast.text = c!bp_date
   teNotesBPDue.text = c!bp_due
   teNotesBMI.text = c!bmi_details
   teNotesBMILast.text = c!bmi_date
   teNotesBMIDue.text = c!bmi_due   
   teNotesFeet.text = c!feet_details
   teNotesFeetLast.text = c!feet_date
   teNotesFeetDue.text = c!feet_due 
   teNotesHDL.text = c!lipids_details
   teNotesHDLLast.text = c!lipids_date  
   teNotesHDLDue.text = c!lipids_due
   teNotesMicroalbumin.text = c!microalbumin_details
   teNotesMicroalbuminLast.text = c!microalbumin_date
   teNotesMicroalbuminDue.text = c!microalbumin_date_due
   teNotesEducation.text = c!education_details
   teNotesEducationLast.text = c!education_date
   teNotesEducationDue.text = c!education_date_due
   teNotesDiet.text = c!diet_details
   teNotesDietLast.text = c!diet_date
   teNotesDietDue.text = c!diet_date_due
   teNotesActivity.text = c!exercise_details
   teNotesActivityLast.text = c!exercise_date
   teNotesActivityDue.text = c!exercise_date_due
   teNotesSmoking.text = c!smoking_details
   teNotesSmokingLast.text = c!smoking_date
   teNotesSmokingDue.text = c!smoking_date_due
   teNotesMedication.text = c!medication_review_details
   teNotesMedicationLast.text = c!medication_review_date
   teNotesMedicationDue.text = c!medication_review_date_due 
   lblDACC.text = "Completed:" & Format(c!date_completed, "dd/mm/yyyy")
   bExit = False  
  
End

Public Sub cvwDACCS_Select()
  EditArea_Clear()
  cvwDACCS.MoveCurrent()
  Display()

End

Public Sub teDue_Change()
  If Last.text = "OVERDUE" Then
   Last.Foreground = Color.Red
  Else
   Last.Foreground = Color.Black
  End If

End
