' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'------------------------------------------------------------------------------------
' NOTES:
' 
'  1) The currentconsult!family_history collection must have a unique key
'     - the only unique key in clin_history.vwFamilyHistory is the pk_condition
'     - so some rows in the database might look like this:
'       pk_condition     condition          fk_member etc etc
'        1                hypertension       1
'        2                copd               1
'        3                angina             2   etc
'
'  2) When the patients collection of family history loads:
'     a) lvwMembers (the list on the left) contains a list of members
'     when I populate that list, I've used the pk_condition as the list key, so that
'     if the user clicks on the list you know which row (dosn't matter if multiple)
'     contains the family member details. bkeyvalid = EditArea_ExcludeKeys(key.code, Last.tag) bkeyvalid = EditArea_ExcludeKeys(key.code, Last.tag)
'     b) lvwConditions (thelist on the right) contains a list of members conditions
'        it is also keyed on pk_condition so you know which collection member you
'        are dealing with
'-----------------------A_Member--------------------------------------------------------------
'TODO: check user not entering a duplicated condition in the validate routine
'     
'-------------------------------------------------------------------------------------
Private bEmbedded As Boolean              'If true the form is embedded in a frmConsultNotes editor
Private bExit As Boolean                  'used to prevent re-entry into routines
Private fk_member As Integer              'clin_history.family_members.pk
Private fk_member_country_birth As String 'clin_history.family_members.fk_country_birth
Private fk_member_relationship As Integer 'clin_history.family_members.fk_relationship
Private currentconsult As Cconsult        'always set from calling form
Private fk_condition As Integer           'key to clin_history.family_conditions
Private row_key_member As Integer 
Private row_key_condition As Integer
Private fk_code As String                 'the code for the family members condition
Private fk_coding_system As Integer       'probably need to remove this FIXME
Private Terms As Collection
Private Form_Terms As FCodedTermSelector
Private obs As Observer
Private CurrentTerm As Collection 
Private countries As Collection
Private country As Collection
Private occupations As Collection
Private occupation As Collection

Public Sub set_embedded(flag As Boolean)
   '--------------------------------------------------
   'If this form is embeded from another form set flag
   '--------------------------------------------------
   
   bEmbedded = flag
   
End

Public Sub Init(cons As CConsult)
   '----------------------------------------------------------
   'PURPOSE    :Basic initialiseation
   'CALLED BY  :calling form e.g FrmClinical.Editor_ShowPage()
   '---------------------------------------------------------- 
   
   bExit = True                                                       'stop change events triggering
   currentconsult = cons                                              'set current consult on this form
   Try Settings_Load()                                                'set splits, font sizes etc
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Inner, lblmeasure)  'resize all labels
   modEditAreaHelpers.Resize_label(label25, lblmeasure)
   bexit = False  
   With Form_Terms = New FCodedTermSelector(Me)
      .Ignore = True
      .Visible = False   
      .Height = 200
   End With
   obs = New Observer(Form_Terms.ColumnView1) As "cvwCodedTerms"
   cvwConditions.Columns.count = 3
   VBox_EditArea_Outer.Enabled = False 
   Reload()   'Display family members history lists
   
End

Public Sub Form_Close()
   '---------------------------------------------
   'Save settings of all splits etc on form close
   '---------------------------------------------
   ' Save()           'no 'save social history button'
   
   Settings_Save()         
   
End

Public Sub Reset_Fonts()
   '-----------------------------------------------------------------------------
   'PURPOSE     :If application.fonts has been changed, then the labels could
   '            no longer be wide enough so the display would look funny
   '           
   'HOW IT WORKS:loop through all the labels on the form and make sure they
   '             are correct size.LblMeasure is a hidden control.
   'NB:         :Resize those labels in the gui with autoresize = false
   '             I have set ones I don't want to be resized manually by this
   '             routine too auto-resize = True - ie they will do it themselves
   '-----------------------------------------------------------------------------
   
   Dim hCtrl As Control
   Dim ABox As HBox
   Dim lbl As Label
   
   For Each Hctrl In Vbox_EditArea_inner.Children
      If hctrl Is Hbox Then
         Abox = hctrl
         For Each hctrl In Abox.Children
            If hctrl Is Label Then
               lbl = hctrl
               If lbl.AutoResize = False Then
                  lbl.width = lblmeasure.Width 
               End If   
               Break
            End If
         Next
      End If
   Next
   
End

Private Sub Settings_Save()
   
   '-------------------------------------------
   'Save the sizes of splits to the config file
   '-------------------------------------------
   If bEmbedded Then
      Settings["FamilyHistory_Embedded/Vsplit_FamilyHistory"] = Vsplit_FamilyHistory.Layout
      Settings["FamilyHistory_Embedded/HSplit_MembersConditions"] = HSplit_MembersConditions.layout
   Else
      Settings["FamilyHistory/Vsplit_FamilyHistory"] = Vsplit_FamilyHistory.Layout
      Settings["FamilyHistory/HSplit_MembersConditions"] = HSplit_MembersConditions.layout
      
   End If
   
End

Private Sub Settings_Load()
   
   '-------------------------------------------
   'load the sizes of splits from the config file
   '-------------------------------------------
   If bEmbedded Then
      Try Vsplit_FamilyHistory.Layout = Settings["FamilyHistory_Embedded/Vsplit_FamilyHistory"]
      Try HSplit_MembersConditions.layout = Settings["FamilyHistory_Embedded/HSplit_MembersConditions"]
   Else
      Try Vsplit_FamilyHistory.Layout = Settings["FamilyHistory/Vsplit_FamilyHistory"]
      Try HSplit_MembersConditions.layout = Settings["FamilyHistory/HSplit_MembersConditions"]
      Try cvwConditions.Font = Font[Settings["FamilyHistory/cvwConditions.font"]]
      Try lvwMembers.Font = Font[Settings["FamilyHistory/lvwMembers.font"]]
   End If
   
End

Public Sub Reload()
   '----------------------------------------------
   'Updates the family members showing in the list
   'pk_view = pk_condition = unique per row
   '----------------------------------------------
   
   Dim member As Collection 
   Dim last_fk_member As Integer
   Dim sString As String
   
   lvwMembers.Clear
   For Each Member In currentconsult!family_history
      '------------------------------------------------------
      'for each new member,add their name to the members list
      '------------------------------------------------------
      If last_fk_member <> Member!fk_member Then 
         sstring = member!relationship
         If Not IsNull(member!name) Then
            sString &= " - " & member!name 
         Endif
         lvwMembers.Add(member!pk_view, sString) 
         last_fk_member = Member!fk_member
      End If   
   Next
   If lvwMembers.count Then  
      lvwMembers.MoveLast()
      lvwMembers.Item.Selected = True
   End If   
   
End

Public Sub ConditionsList_Refresh()
   
   Dim member As Collection
   Dim sRowText As String
   '-------------------------------------------------------------
   'clear the conditions list and loop through the family history
   'add conditions for the family member hightlighted in the
   'members list
   '--------------------------------------------------------------
   cvwConditions.Clear
   For Each Member In currentconsult!family_history
      If Member!fk_member = currentconsult!family_history[lvwMembers.Item.key]!fk_member Then
         '------------------------------------------------------------
         'Add 3 columns 1=condition 2=age onset 3=caused death at age:
         '------------------------------------------------------------
         cvwConditions.Add(Member!fk_condition, 0) 'same as pk_view
         cvwConditions[Member!fk_condition][0] = Member!condition
         If Member!age_of_onset Then 
            sRowText = Member!age_of_onset & " yrs "
         Else
            sRowText = ""
         End If
         cvwConditions[Member!fk_condition][1] = sRowText
         If Member!cause_of_death Then 
            sRowText = "caused death at age" & " " & Member!age_of_death
         Else
            sRowText = ""
         Endif
         cvwConditions[Member!fk_condition][2] = sRowText
      End If
   Next
   
End

Public Sub EditArea_Clear()
   '-----------------------------------------------------------
   'Clears the editing area totally. We make the assumption
   'that most likely, the user is only going to be interested
   'in recording the family member type eg 'mother', not the
   'name, country of birth, occupation etc, so set focus
   'to that textbox
   '-----------------------------------------------------------
   
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_inner)
   Form_Terms.Visible = False
   tbClearCondition.text = "New Condition"
   
End

Public Sub EditArea_Condition_Clear()
   '-------------------------------------------------------------
   'Clears only the family member condition textboxes,leaving the
   'internal details of the family member intact
   'CALLED BY: EditArea_Clear()
   '         : Condition_Accept()
   '         : EditAreaButtons_Click()
   '-------------------------------------------------------------
   
   bExit = True
   txtCondition.text = ""
   txtCodedTerm.text = ""
   fk_code = ""
   fk_coding_system = 0
   txtConditionNotes.text = ""
   txtAgeOnset.text = ""
   rbCausedDeathNo.value = True
   txtCondition.SetFocus
   fk_condition = -1
   bExit = False
   
End

Public Function EditArea_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   '----------------------------------------------------------
   'PURPOSE       Restrict key presses for validation purposes
   'HOW IT WORKS  see routines names
   '----------------------------------------------------------
   
   Select Case tag
      Case "name", "relationship", "notes", "occupation", "condition", "country origin" 'no input restrictions
         Return True
      Case "age onset", "age death"
         Return modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "birthdate"
         Return modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
   End Select
   Return
   
End

Public Sub FamilyMember_KeyPress()
   '-----------------------------------------------
   'If enter key pressed, deal with that, otherwise
   'check if it was down arrow key, if Yes, move
   'to the popup list if it is visible
   'check key code and restrict as appropriate
   '-----------------------------------------------
   
   Dim x As Integer
   
   If EditArea_ExcludeKeys(key.code, Last.tag) = False Then
      Stop Event
      Return
   End If
   '-----------------------------------------------
   'ok, key is validate, process as per control tag
   '-----------------------------------------------
   If Key.code = Key.return Then
      
      Select Case Last.tag
            
         Case "name"
            txtBirthdate.SetFocus
         Case "birthdate"
            txtCountryOrigin.SetFocus
         Case "country origin"
            txtOccupation.SetFocus
         Case "occupation"
            txtRelationship.SetFocus
         Case "relationship"
            '------------------------------------------------------------
            'Allow user to have hit enter without scolling down the list
            'attempt to match user input with list contents
            '------------------------------------------------------------
            If listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If Lower(listview1.Item.Text) = Lower(Trim(txtRelationship.text)) Then
                     fk_member_relationship = listview1.Item.Key
                     txtcondition.SetFocus()
                     listview1.Visible = False  
                     Return 
                  End If
                  listview1.MoveNext
               Next
            End If
            '----------------------
            'If no match was found
            '----------------------
            txtRelationship.text = ""  'will re-set appropriate things
            txtRelationship.SetFocus
            listview1.Visible = False  
         Case "age death"
            tbAccept.SetFocus()
      End Select
      listview1.Visible = False
   Else 
      If Key.code = Key.Down Then 
         If listview1.Visible Then 
            listview1.SetFocus
            listview1.MoveFirst
            listview1.Item.Selected = True
         End If
      End If
   End If
   
End

Public Sub CausedDeath_Click()
   '-------------------------------------------------
   'User has clicked the cause of death button yes/no
   '-------------------------------------------------   
   
   If bexit Then Return
   '--------------------------------------------
   'assume that often the age death = age onset
   'if not,they can change it anyway
   '--------------------------------------------
   If Trim(txtAgeDeath.text) = "" Then 
      txtAgeDeath.text = txtAgeOnset.Text
   End If
   EditArea_Notify_DataChange(True)
   txtAgeDeath.SetFocus
   
End

Public Sub CausedDeath_KeyPress()
   
   If Key.code = Key.return Then 
      Select Case Last.tag
         Case "yes"
            '--------------------------------------------
            'assume that often the age death = age onset
            'if not,they can change it anyway
            '--------------------------------------------
            If Trim(txtAgeDeath.text) = "" Then 
               txtAgeDeath.text = txtAgeOnset.Text
            End If
            txtAgeDeath.setfocus
         Case "no"
            If rbCausedDeathNo.value = True Then   
               txtAgeDeath.SetFocus
            Else 
               rbCausedDeathYes.SetFocus
            End If
      End Select 
   End If
   
End

Public Sub FamilyMember_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   With listview1
      .left = Last.Parent.Left
      .tag = Last.tag
      .top = Last.Parent.parent.top + Last.Height 
      .Visible = False   
   End With
   ' 
   ' Select Case Last.tag
   '       
   '    Case "country origin"
   '       listview1.top = Vbox_EditArea_inner.top + hbox_countryorigin.top + hbox_countryorigin.height
   '    Case "occupation"
   '       listview1.top = Vbox_EditArea_inner.top + hbox_occupation.top + hbox_occupation.height
   '    Case "relationship"
   '       listview1.top = Vbox_EditArea_inner.top + Last.parent.Parent.top + Last.Parent.height
   ' End Select
   
End

Public Sub FamilyMember_KeyRelease()
   
   Select Case Last.tag
      Case "country origin"
         Country_Selection("get")
      Case "relationship"
         Relationship_Get()
      Case "occupation"
         Occupation_Selection("get")
   End Select
   
End

Public Sub FamilyMember_Change()
   
   If bexit Then Return 
   Select Case Last.tag
      Case "relationship"
         '----------------------------------------------------
         'Relation should have been accepted from a popup list
         '----------------------------------------------------
         If Trim(Last.text) = "" Then
            fk_member_relationship = 0
         End If
      Case "age death"
         '-----------------------------------------------------------
         'display age of death, if invalid, highlight textbox in red
         '-----------------------------------------------------------
         If Not IsInteger(txtAgeDeath.text) Then
            txtAgeDeath.text = ""
         End If
   End Select 
   EditArea_Notify_DataChange(True)            'red border around edit area
   
End Sub 

Public Sub Relationship_Get()
   '-----------------------------------------------------------
   'Gets the family member relationship (list) from the backend
   '-----------------------------------------------------------
   
   Dim $Result As Result
   
   If Trim(txtRelationship.text) = "" Then
      fk_member_relationship = 0
      Return
   End If
   $Result = modFamilyHistoryDBI.FamilyHistory_Get_Relationship(Trim(txtRelationship.text))
   If $Result.count Then 
      listview1.Clear
      For Each $Result 
         listview1.Add(Str$($Result!pk), $Result!relationship)
      Next 
      listview1.tag = txtRelationship
      listview1.Raise
      listview1.Visible = True
   Else 
      listview1.Visible = False  'empty recordset
   End If  
   
End

Public Sub Country_Selection(action As String, Optional calling_control As String) 
   '-----------------------------------------
   'Select a country of birth of the relative
   '-----------------------------------------
   
   Dim iMatched As Boolean
   
   Select Case action
      Case "get"
         '----------------------------------------------------------
         'Load all the towns like txtSuburb into the popup listview1
         '----------------------------------------------------------
         Countries = modContactsDBI.country_get(Lower(Trim$(txtCountryOrigin.text)))
         listview1.Clear
         If Countries.count Then 
            For Each Country In Countries
               listview1.Add(Country!pk, Country!country)
            Next 
            If Countries.count = 1 Then 
               Country_Selection("accept")
            Else 
               listview1.Visible = True
               listview1.Raise
               listview1.tag = txtCountryOrigin
            End If
         Else
            listview1.Visible = False  
         End If
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            '-------------------------------------------------------
            'User has just hit <enter> without scrolling on the list
            'try and find a match
            '-------------------------------------------------------
            If listview1.Visible Then
               listview1.MoveFirst
               Do Until listview1.MoveNext()
                  If InStr(Lower(listview1.Item.text), Trim(Lower(txtCountryOrigin.text))) Then
                     iMatched = True 
                     fk_member_country_birth = Countries[listview1.Item.key]!country_code
                     Break
                  End If
               Loop
               If Not iMatched Then
                  listview1.Visible = False
                  txtCountryOrigin.SetFocus()
                  Return 'no match found for suburb user typed in The_Collection
               End If 
            End If
         Else
            '-------------------------------------
            'User is selecting from the popup list
            '-------------------------------------
            If listview1.Visible Then
               listview1.MoveCurrent()             'match internal cursor to marquee
            End If
         End If
         '------------------------------------------------------------------------------------------
         'either way, a match has been found within the list, or the user has selected from the list
         '------------------------------------------------------------------------------------------
         txtCountryOrigin.text = Countries[listview1.Item.key]!country
         fk_member_country_birth = Countries[listview1.Item.key]!country_code
         txtOccupation.SetFocus
         listview1.Visible = False  
         bExit = False  
   End Select
   
End

Public Sub CountryOrigin_Get()
   '-----------------------------------------------------
   'Retrieve a list of countries of origin
   'Note that in database fk_country_birth is text = 'AU'.
   'No valid country, remove red border and exit
   '-----------------------------------------------------
   
   Dim $Result As Result
   
   If Trim(txtCountryOrigin.text) = "" Then
      fk_member_country_birth = ""
      Return
   End If
   '----------------------------------------------------------------------
   'Get a list of countries like textbox text
   'Load into the listview, the listviews tag = the calling textbox itself
   '----------------------------------------------------------------------
   $Result = modContactsDBI.country_get(Trim(txtCountryOrigin.text))
   If $Result.count = 0 Then
      '--------------------------------
      'empty recordset. remove the list
      '--------------------------------
      listview1.Visible = False
      If Len(Trim(txtCountryOrigin.text)) > 1 Then
         fk_member_country_birth = ""
         bExit = True
         txtCountryOrigin.text = ""
         bExit = False 
      End If
   Else
      listview1.Clear
      For Each $Result 
         '---------------------------------------------------------
         'if a single country - auto display that, and set focus on
         'next textbox down which is family member occupation
         '---------------------------------------------------------
         If $Result.count = 1 Then 
            txtCountryOrigin.text = $Result!Country
            fk_member_country_birth = $Result!country_code
            listview1.Visible = False
            txtOccupation.SetFocus
            Return
         End If
         '-----------------------------------------------
         'otherwise load the list box for multiple choice
         '-----------------------------------------------
         listview1.Add(Str$($Result!country_code), $Result!Country)
      Next 
      '-----------------------------------------------
      'set listview tag, ensure it listview is visible
      '-----------------------------------------------
      listview1.tag = txtCountryOrigin
      listview1.Raise
      listview1.Visible = True
   End If  
   
End

Public Sub Occupation_Selection(action As String, Optional calling_control As String)
   
   Dim x As Integer
   
   Select Case action
      Case "get"
         
         If Len(Trim(txtOccupation.text)) = 0 Then Return
         Occupations = modContactsDBI.Occupation_Get(Trim(txtOccupation.text))
         listview1.Clear
         '-----------------------------------------------------------------
         'If categories exist to match the text, auto-select or show a list
         '-----------------------------------------------------------------
         If Occupations.count Then 
            For Each Occupation In Occupations
               listview1.Add(Occupation!pk, Occupation!occupation)
            Next 
            If Occupations.count = 1 Then 
               If Trim(Lower(txtOccupation.text)) = Lower(Occupation!occupation) Then
                  Occupation_Selection("select", "list")
                  Return
               End If
            End If
            listview1.Visible = True
            listview1.Raise
            listview1.tag = txtOccupation
            Return 
         End If
         listview1.Visible = False  
      Case "accept"
         '----------------------------------------------------------------------
         'CALLED BY  : user hitting <enter> in txtoccupation ie editarea_keypress
         '             user hitting <enter> on the popup list
         '             user double clicking on the popup list
         '----------------------------------------------------------------------
         bExit = True
         If calling_control = "textbox" Then
            '-------------------------------------------------------
            'User has just hit <enter> without scrolling on the list
            'try and find a match
            '-------------------------------------------------------
            If listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If Lower(listview1.Item.text) = Trim(Lower(txtOccupation.text)) Then
                     
                     Break
                  End If
               Next
            End If
            '------------------------------------------------------------------
            'Either no match was found OR list wasn't visible anyway = no match
            '------------------------------------------------------------------
            listview1.Visible = False     
         Else
            '-----------------------------------------------------------
            'Routine called by user clicking on list or pressing <enter>
            '-----------------------------------------------------------
            If listview1.Visible Then
               listview1.MoveCurrent   'set internal cursor to match marquee
               txtOccupation.Text = listview1.Item.Text
            End If
         End If
         txtRelationship.SetFocus()
         bExit = False  
   End Select
   
End

Public Sub ListView1_KeyPress()
   '------------------------------------------------------------------
   'User has scrolled onto the popup list and his a key, allow <enter>
   'to accept the line contents to the edit area
   '------------------------------------------------------------------
   
   If Key.code = Key.Return Then 
      listview1_DblClick
   End If
   
End

Public Sub listview1_DblClick()
   '-----------------------------------------------------------------
   'The popup list has been populated, this routine is called either
   'by using double clicking on list, or by hitting <enter> when the
   'list has focus. Accept the contents of the current line to the gui
   'NB: listview1.MoveCurrent needed to move the internal cursor of
   '    the list to match the row the user is actually clicking on
   '------------------------------------------------------------------
   
   Dim sMsg As String
   Dim bAllowOneONly As Boolean
   
   listview1.MoveCurrent   
   '-------------------------------------------------------------
   ' When listview was loaded, the actual calling textbox became
   ' its tag, so the tag of this textbox is used
   '-------------------------------------------------------------
   Select Case listview1.Tag.Tag
      Case "relationship"
         '---------------------------------------------------- 
         'Check if the relationship is duplicated
         'This is not allowable for mother/father/grandparents
         'This is allowable for aunts/uncles/neices
         'all keys < 13 can have only 1 entry eg mother/father/general history 
         '---------------------------------------------------- 
         If Relationship_Check_Duplicated(listview1.Item.Key) Then
            If Val(listview1.Item.Key) < 13 Then bAllowOneONly = True
            Select Case bAllowOneONly
               Case True   
                  sMsg = "You have '" & listview1.Item.Text & "' in the family members list.\n\n"
                  sMsg &= "To add another condition for this relative type:\n\n"
                  sMsg &= "1) Select the family member from the family members list\n\n"
                  sMsg &= "2) Click on the button above labelled 'New Condition For Relative'"
                  Message.info(sMsg)
                  EditArea_Clear()
                  VBox_EditArea_Outer.Enabled = False  
                  lvwMembers.SetFocus()
                  listview1.Visible = False 
               Case Else
                  sMsg = "You have '" & listview1.Item.Text & "' in the family members list.\n\n"
                  sMsg &= "As there could be 1 or more of this type of relationship, you should try and fill in the name the relative.\n\n"
                  sMsg &= "If you meant to add a condition to the existing relative of this type, please select the relative from the Family Members list and try again."
                  Message.info(sMsg)
                  Goto AcceptRelative
                  
            End Select  
         Else 
            ' fk_member_relationship = listview1.Item.Key
            ' txtRelationship.text = listview1.Item.Text
            ' tbClearCondition.text = "New Condition for " & txtRelationship.Text
            ' If InStr(txtRelationship.Text, "General") Then
            '    Allow_Entry_Family_Member_Details(True) 
            ' Else  
            '    txtName.Enabled = True 
            '    txtBirthdate.Enabled = True  
            '    txtCountryOrigin.Enabled = True 
            '    txtOccupation.Enabled = True 
            ' Endif
            ' txtCondition.SetFocus()
            Goto AcceptRelative
         End If  
      Case "occupation"
         Occupation_Selection("accept", "list") 
      Case "country origin"
         Country_Selection("accept", "list")
         txtOccupation.SetFocus()
   End Select
   listview1.Visible = False  
   Return 
   
AcceptRelative:
   fk_member_relationship = listview1.Item.Key
   txtRelationship.text = listview1.Item.Text
   tbClearCondition.text = "New Condition for " & txtRelationship.Text
   If InStr(txtRelationship.Text, "General") Then
      Allow_Entry_Family_Member_Details(True) 
   Else  
      txtName.Enabled = True 
      txtBirthdate.Enabled = True  
      txtCountryOrigin.Enabled = True 
      txtOccupation.Enabled = True 
   Endif
   txtCondition.SetFocus()
   
End

Public Sub Allow_Entry_Family_Member_Details(bFlag As Boolean)
   '-------------------------------------------------------------
   'For general family history there can't be a person's name etc
   '-------------------------------------------------------------   
   
   If BFlag Then
      txtName.Enabled = bFlag 
      txtBirthdate.Enabled = bFlag  
      txtCountryOrigin.Enabled = bFlag 
      txtOccupation.Enabled = bFlag 
   Else
      bExit = True
      txtName.text = ""
      txtName.Enabled = bFlag 
      txtBirthdate.text = ""
      txtBirthdate.Enabled = bFlag  
      txtCountryOrigin.text = ""
      txtCountryOrigin.Enabled = bFlag 
      txtOccupation.text = ""
      txtOccupation.Enabled = bFlag 
      fk_member_country_birth = ""
      bexit = bFlag  
   Endif
   
End

Public Sub FamilyMember_LostFocus()
   
   Last.BackGround = Color.white
   Last.pos = 0
   Select Case Last.tag
      Case "relationship"
      Case "country origin"
         If fk_member_country_birth = "" Then 
            txtCountryOrigin.text = ""
         Else
         End If
      Case "birthdate"
         If Not IsDate(Trim(txtBirthdate.text)) Then
            txtBirthdate.text = ""
         End If
      Case "age death"
         If Trim(txtAgeDeath.text) <> "" Then 
            If Trim(txtAgeOnset.text) <> "" Then 
               If Val(txtAgeDeath.text) < Val(txtAgeOnset.text) Then
                  txtAgeOnset.SetFocus()
               End If
            End If
         End If
   End Select
   
End

Public Sub cvwConditions_Select()
   '----------------------------------------------------------------------------
   'user has clicked on a particular condition. re-display this in the edit area
   '----------------------------------------------------------------------------
   
   cvwConditions.MoveCurrent()
   If row_key_member = 0 Then
      Member_Display()  
   End If 
   Condition_Display()
   
End

Public Sub lvwMembers_Menu()
   
   If lvwMembers.count Then
      mnuFamilyMember.popup
   End If 
   
End

Public Sub Member_Display()
   '-------------------------------------------------------------------
   'Displays the details of the family member highlighted in lvwMembers
   '-------------------------------------------------------------------
   
   bExit = True
   lvwMembers.MoveCurrent()
   
   row_key_member = lvwMembers.Item.Key
   fk_member = currentconsult!family_history[lvwMembers.Item.key]!fk_member
   Try fk_member_country_birth = currentconsult!family_history[lvwMembers.Item.key]!fk_country_birth
   fk_member_relationship = currentconsult!family_history[lvwMembers.Item.key]!fk_relationship
   txtName.text = currentconsult!family_history[lvwMembers.Item.key]!name
   txtBirthdate.text = currentconsult!family_history[lvwMembers.Item.key]!birthdate
   txtCountryOrigin.text = currentconsult!family_history[lvwMembers.Item.key]!country
   txtOccupation.text = currentconsult!family_history[lvwMembers.Item.key]!occupation
   txtAgeDeath.text = currentconsult!family_history[lvwMembers.Item.key]!age_of_death
   txtRelationship.text = currentconsult!family_history[lvwMembers.Item.key]!relationship
   tbClearCondition.text = "New condition for " & txtRelationship.text
   bExit = False
   
End

Public Sub lvwMembers_Select()
   
   '-----------------------------------------------------
   'User has clicked on the list of family members
   'Clear editing area and display members details
   'and load the conditions list with their diseases
   'move to the first condition and display that condition
   'in the editing area
   '------------------------------------------------------
   
   If lvwMembers.count = 0 Then Return
   EditArea_Clear()                    'clear the display area
   Member_Display()                    'display members detail in edit area
   
   ConditionsList_Refresh()            'display their conditions in conditions list
   cvwConditions.MoveFirst()           'move to top of conditions list
   cvwConditions.SetFocus()
   cvwConditions.Item.selected = True  'hightlight this row for the user
   Condition_Display()    
   
End

Public Sub lvwMembers_Click()
   
End

Public Sub EditArea_Resize_Labels()
   '-------------------------------------------------------------------
   'Adjust all lables as per current system font to make sure text fits
   '-------------------------------------------------------------------
   
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_inner, lblmeasure)
   
End

Public Sub EditAreaButtons_KeyPress()
   
   If key.code = key.Return Then 
      EditAreaButtons_Click
   End If
   
End

Public Sub EditAreaButtons_Click()
   
   Select Case Last.tag
      Case "help"
         FClinical.Help_Show("fh-add-or-change.html", "Help:Family History", True)
      Case "responsible person"
         Message.Info("Search for responsible person in the database:feature not implemented yet")
      Case "save"
         Save() 'both family and social history
      Case "new condition"
         Condition_New()
      Case "new relative"
         Member_New()
      Case "import"
         modUtil.NotImplemented("Importing family history is not yet implemented")
         
         Return 
         Message.Info("Importing a family member is not implemented yet")
   End Select
   
End

Public Sub New_Entry()
   '---------------------
   'Called from FClinical
   '---------------------
   
   Member_New() 
   
End

Public Sub Member_New()
   
   EditArea_Clear()
   VBox_EditArea_Outer.Enabled = True 
   fk_member_country_birth = ""
   fk_member_relationship = 0
   fk_member = -1 
   row_key_member = -1 
   Condition_New()  
   Allow_Entry_Family_Member_Details(True)
   txtRelationship.SetFocus() 
   
End

Public Sub Save()
   '-------------------------------------------------------
   ' Save the family Member And condition To database 
   '------------------------------------------------------
   
   ' dd
   '-------------------------------
   'The view has 1-n rows
   'eg member1 condition1
   '     "     condition2
   '   member2 condition1 etc
   ' So the key of the members list = the view key of it's record in the old data
   ' the key of the conditions list = the view key of its record in the old data
   ' 
   'TABLE clin_history.family_members
   '   pk serial NOT NULL,
   '   fk_relationship integer NOT NULL,
   '   fk_person integer, -- I put this in in-case it was needed if we had imported family history from an person who exists in the easygp database.
   '   "name" text,
   '   birthdate date,
   '   age_of_death integer,
   '   fk_occupation integer,
   '   fk_country_birth character(2),
   '   deleted boolean DEFAULT false,
   '   fk_consult integer,
   '
   ' TABLE clin_history.family_conditions
   '   pk serial NOT NULL,
   '   fk_member integer NOT NULL,Click
   '   condition text NOT NULL, -- note: the condition may NEVER exist in the coded database, ...
   '   age_of_onset integer,
   '   cause_of_death boolean DEFAULT false,
   '   notes text,
   '   deleted boolean DEFAULT false,
   '   fk_consult integer,
   '   contributed_to_death boolean,
   '   fk_code text, -- foreign key to coding.generic_terms table. Note this key is a text string...
   '-------------------------------
   
   Dim member As Collection 
   Dim condition As Collection
   
   If Vbox_EditArea.padding = 0 Then Return 
   If Not Valid_EditArea_Contents() Then Return 
   VBox_EditArea_Outer.Enabled = False 
   If fk_member = -1 Then
      row_key_member = 0
   End If
   If fk_condition = -1 Then
      row_key_condition = 0
   End If 
   
   member = New Collection
   
   If fk_member <> -1 Then member!fk_member = fk_member
   member!fk_relationship = fk_member_relationship
   member!name = Trim(txtName.text)
   member!birthdate = Val(txtBirthdate.text) 
   member!age_of_death = Val(txtAgeDeath.text)
   member!occupation = Trim(txtOccupation.text)
   member!fk_country_birth = fk_member_country_birth
   
   condition = New Collection
   If fk_condition <> -1 Then condition!fk_condition = fk_condition
   condition!condition = Trim(txtcondition.text)
   condition!age_of_onset = Val(txtAgeOnset.text)
   If rbDiagnosisCertainYes.Value = True Then
       condition!diagnosis_certain = True
   Else
      condition!diagnosis_certain = False 
   Endif
   If rbCausedDeathYes.value = True Then 
      condition!cause_of_death = True
   Else
      condition!cause_of_death = False
   End If  
   condition!notes = Trim(txtConditionNotes.text)
   If rbContributedToDeathYes.value = True Then
      condition!contributed_to_death = True
   Else
      condition!contributed_to_death = False  
   Endif
   condition!fk_code = fk_code
   fk_member = modFamilyHistoryDBI.FamilyHistory_Save(currentconsult, fk_member, Member, fk_condition, condition, row_key_member, row_key_condition)
   modDBConnect.CommitTrans()
   
   currentconsult.Refresh("family_history")     'reload all the history
   Reload()                  'reload visual display
   EditArea_Notify_DataChange(False)
   FClinical.Refresh_Section(const.cSection_HealthSummary)
   
End

Public Function Valid_EditArea_Contents() As Boolean 
   '--------------------------------------------------------------------
   'validates the contents of edit area returns FALSE if invalid
   '  Mimimum amount of data:
   '  a family member and valid key
   '  a condition eg hypertension with some sort of valid coded term
   '-------------------------------------------------------------------
   
   Dim member As Collection 
   Dim duplicatedcondition As Boolean
   Dim sMsg As String 
   
   If fk_member_relationship = 0 Then 
      txtRelationship.SetFocus
      Return 
   End If  
   '---------------------------------------
   'Next a valid condition e.g Hypertension
   '---------------------------------------
   If txtCondition.text = "" Then 
      txtCondition.SetFocus
      Return
   End If
   '-----------------------
   'Next a valid coded term
   '-----------------------
   If fk_code = "" Then
      txtCodedTerm.setfocus()
      Return
   End If   
   
   Return True
   
End

Public Sub Condition_Display()
   '-------------------------------------------------------
   'User has clicked on conditions list 
   'Displays a condition in editing area ready for editing
   '-------------------------------------------------------
   
   Dim fk_member As Integer
   
   EditArea_Condition_Clear()
   bExit = True  
   cvwConditions.MoveCurrent
   row_key_condition = cvwConditions.Item.Key
   fk_condition = currentconsult!family_history[row_key_condition]!fk_condition
   fk_code = currentconsult!family_history[row_key_condition]!fk_code
   txtcondition.text = currentconsult!family_history[row_key_condition]!condition
   Try txtCodedTerm.text = currentconsult!family_history[row_key_condition]!term & " (" & currentconsult!family_history[row_key_condition]!code & ")" 
   txtConditionNotes.text = currentconsult!family_history[row_key_condition]!notes  
   txtAgeOnset.text = currentconsult!family_history[row_key_condition]!age_of_onset
   If currentconsult!family_history[row_key_condition]!cause_of_death = True Then 
      rbCausedDeathYes.Value = True
   Else 
      rbCausedDeathNo.Value = True
   End If
   If currentconsult!family_history[row_key_condition]!diagnosis_certain = True Then 
      rbDiagnosisCertainYes.value = True  
   Else
      rbDiagnosisCertainNo.value = True
   Endif
   If currentconsult!family_history[row_key_condition]!contributed_to_death = True Then 
      rbContributedToDeathYes.Value = True
   Else 
      rbContributedToDeathNo.Value = True
   End If
   bExit = False
   EditArea_Notify_DataChange(False)
   
End

Public Sub Condition_New()
   '------------------------------------------------------------------
   'Adds a new condition for current relative.
   'if no relative chosen, then the currently highlighted one is used
   'If no relatives yet exist, just re-set the editing area which
   're-sets focus back to txtRelationship ready for a person.
   '--------------------------------------
   
   EditArea_Condition_Clear()
   VBox_EditArea_Outer.Enabled = True  
   txtCondition.SetFocus()
   
End

Public Sub FamilyMemberCondition_KeyRelease()
   
   Select Case Last.tag
      Case "coded term"
         '------------------------------------------
         'on every key-release, start the timer
         'and search for term like txtCodedTerm.text
         '------------------------------------------ 
         Form_Terms.Set_SearchText(Trim(Last.text))
   End Select
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   '------------------------------------------------------------
   'Outlines the edit area in red to indicate change to the user
   '------------------------------------------------------------
   
   If Flag Then
      Vbox_EditArea.Padding = 1
      tbAccept.Foreground = Color.Red
      tbAccept.Enabled = True 
   Else
      Vbox_EditArea.Padding = 0
      tbAccept.Foreground = Color.Black
      tbAccept.Enabled = False
   End If
   
End

Public Sub FamilyMemberCondition_Change()
   
   If bexit Then Return 
   Select Case Last.tag 
      Case "coded term"  
         If Trim(Last.text) = "" Then
            Form_Terms.Visible = False
            fk_code = ""
            fk_coding_system = 0 
         End If
      Case "age onset"
         If IsInteger(txtAgeOnset.text) Then
            Hbox_AgeOnset.BackGround = Color.White
            Hbox_AgeOnset.Padding = 0
         Else 
            txtAgeOnset.text = ""
         End If
         
   End Select 
   EditArea_Notify_DataChange(True)            'red border around edit area
   
End

Public Sub FamilyMemberCondition_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   With listview1 
      .Visible = False
      .left = txtRelationship.Left
      .tag = Last.tag
   End With
   
   Select Case Last.tag
      Case "coded term"
         With Form_Terms
            .top = Last.Parent.Parent.Top + Last.Parent.Height 
            .width = txtCodedTerm.Width / 2
            .Left = Last.Parent.Left + Vbox_EditArea_inner.padding + Me.padding
            .Raise 
            .Visible = False  
            If Trim(Last.text) <> "" Then
               .Set_SearchText(Trim(Last.text))
            End If  
         End With
      Case Else
         Form_Terms.Visible = False  
   End Select   
   
End

Public Sub FamilyMemberCondition_KeyPress()
   
   Dim x As Integer
   
   If Key.code = Key.return Then
      
      Select Case Last.tag
         Case "condition"
            txtCodedTerm.SetFocus() 
         Case "coded term"
            '------------------------------------------------------------------
            'User has hit the <enter key> without scrolling onto the terms list
            '------------------------------------------------------------------   
            If Form_Terms.Visible = False Then
               Message.Info("You must select a valid term from the terms list, what you have typed was not found.")
               txtCodedTerm.text = "" 
            Else
               '------------------------------------------------------- 
               'Does the text match any of the terms in the terms list?
               '--------------------------------------------------------
               For Each CurrentTerm In Form_Terms.Terms 
                  If Lower(Last.text) = Lower(CurrentTerm!term) Then
                     If txtCondition.text = "" Then
                        txtCondition.text = CurrentTerm!term
                     End If   
                     txtCodedTerm.text = CurrentTerm!term & " (" & CurrentTerm!code & ")"
                     fk_code = CurrentTerm!code
                     fk_coding_system = CurrentTerm!fk_coding_system
                     Form_Terms.Visible = False 
                     Break
                  End If   
               Next
            Endif
            txtConditionNotes.SetFocus
         Case "notes"
            txtAgeOnset.SetFocus
         Case "age onset"
            rbCausedDeathNo.SetFocus
         Case "age death"
            tbAccept.SetFocus
      End Select 
      listview1.Visible = False
   Else 
      If Key.code = Key.Down Then 
         If listview1.Visible Then 
            listview1.SetFocus
            listview1.MoveFirst
            listview1.Item.Selected = True
         End If
         If Form_Terms.visible Then 
            With Form_Terms.ColumnView1 
               .SetFocus
               .MoveFirst
               .Item.selected = True
            End With
            Return
         End If
      End If
   End If
   
End

Public Sub FamilyMemberCondition_LostFocus()
   
   Last.BackGround = Color.white
   Last.pos = 0
   Select Case Last.tag
      Case "coded term"
         Form_Terms.Timer1.Stop()
   End Select
   
End

Public Sub cvwConditions_Menu()
   '-----------------------------------------------------
   'User has clicked on the family member conditions list
   'popup the menu
   '-----------------------------------------------------  
   
   If cvwConditions.count Then
      mnuMemberConditions.Popup()
   End If
   
End

Public Sub mnuFamilyMember_Click()
   '----------------------------------
   'Actions for the family member menu
   '----------------------------------
   
   Select Case Last.tag
      Case "delete"
         Member_Delete()
      Case "help"
         modUtil.NotImplemented("Help")
      Case "font"
         modUtil.Listview_SetFont(lvwMembers, "FamilyHistory")
   End Select
   
End

Public Sub Member_Delete()
   '----------------------------------------------
   'Delete the currently highlighted family member
   '---------------------------------------------- 
   
End

Public Sub mnuMemberConditions_Click()
   '---------------------------------------------
   'Actions for the popup members conditions menu  
   '----------------------------------------------
   
   Select Case Last.tag
      Case "edit" 
         Condition_Edit() 
      Case "delete single"
         Condition_Delete()
      Case "delete all"
         ' MemberConditions_Delete()
      Case "font"
         modUtil.Columnview_SetFont(cvwConditions, "FamilyHistory")
      Case "help"
         modUtil.NotImplemented("Help")
   End Select
   
End

Public Sub Condition_Edit()
   
   VBox_EditArea_Outer.Enabled = True
   If InStr(txtRelationship.text, "General") Then
      Allow_Entry_Family_Member_Details(False) 
   Else
      Allow_Entry_Family_Member_Details(True) 
   Endif
   
End

Public Sub Condition_Delete()
   
   Dim sMsg As String
   Dim condition As Collection 
   Dim sToday As String
   '-----------------------------------------------------------------
   'Delete just the highlighted condition, give user a second chance 
   'to back out
   '-----------------------------------------------------------------
   cvwConditions.MoveCurrent()
   ' condition = FH[lvwMembers.Item.key].conditions[lvwConditions.Item.key]
   Select Message.Warning("Do you really want to delete the condition: " & txtCondition.text, "Yes", "No")
         
      Case 1
         sMsg = "THIS CONDITION WILL BE PERMANANTLY DELETED!\n\n"
         "Do you still wish to proceed?"
         Select Message.Warning(sMsg, "Yes", "No")
            Case 1
               ' If condition.fk_consult <> 0 Then
               ' '--------------------------------------------------------------------
               ' 'Non zero fk_consult = saved in either this or a previous consulation
               ' 'create basic audit trail entry
               ' '--------------------------------------------------------------------
               ' gvar.audit = New cAudit
               ' gvar.audit.action = gvar.sAuditAction[gvar.cAuditAction_Delete]
               ' gvar.audit.tablename = "clin_history.data_fh_conditions"
               ' gvar.audit.fk_action = gvar.cAuditAction_Delete
               ' If modglobal.clinicalform.currentConsult.pk_consult = 0 Then
               '    modConsultDBI.Consult_Create(modglobal.clinicalform.currentConsult)
               ' End If
               ' gvar.audit.fk_consult = modglobal.clinicalform.currentConsult.pk_consult 
               ' gvar.audit.pk_row = condition.pk_condition
               ' gvar.audit.fk_staff = gvar.staff_member.fk_staff
               ' gvar.audit.fk_section = gvar.cSection_FamilyHistory
               ' gvar.audit.section = "Family History" 
               ' '-----------------------------------------------------------
               ' 'Construct a basic string of what the memebers condition was
               ' '-----------------------------------------------------------
               ' gvar.audit.data_summary = lvwMembers.Item.Text & "-"
               ' gvar.audit.data_summary &= condition.condition & Trim(" " & condition.notes & " ")
               ' If condition.age_of_onset Or condition.cause_of_death Then 
               '    gvar.audit.data_summary &= "- "
               '    If condition.age_of_onset Then
               '      gvar.audit.data_summary &= "first noted at " & condition.age_of_onset & " yrs "
               '    End If
               '    If condition.cause_of_death Then
               '       gvar.audit.data_summary &= "(caused death)"
               '    End If
               '    gvar.audit.data_summary &= "<BR>"
               ' End If
               ' If condition.notes Then
               '   gvar.audit.data_summary &= "-" & condition.notes & "<BR>"
               ' End If
               
               ' If modglobal.clinicalform.currentConsult.pk_consult = condition.fk_consult Then
               '    '------------------------------------------------------------------
               '    'If this item was saved during the current consultation insert some
               '    'behind the scenes auditing
               '    '------------------------------------------------------------------
               '    gvar.audit.reason = "Deleted during consultation"
               ' Else
               '   
               '    '-----------------------------------------------------
               '    'Deleted during a previous consult, so add audit trail
               '    'and make the user tell us why they deleted the item
               '    '-----------------------------------------------------
               '    sToday = Format(Now, "dd/mm/yyyy")
               '    frmAudit.ShowModal
               ' Endif 
               ' '---------------------------------------------------------------
               'Now, delete the previously saved condition + insert audit trail
               '---------------------------------------------------------------
               ' If modConsultDBI.FamilyHistory_Condition_Delete(condition, gvar.audit) Then
               ' modFamilyHistoryDBI.Condition_Delete(currentconsult, currentcondition)
               currentconsult.Refresh("family_history")
               'this code duplicated in init() fixme
               bexit = True
               Reload()
               If lvwMembers.count Then      'If there are actually family members
                  '---------------------------------------------------------------
                  'for the first member only in the list, fill the conditions list
                  '----------------------------------------------------------------
                  lvwMembers.MoveFirst()     'move to first on the list
                  lvwMembers_Click           'click event to show member/condition
               Else
                  EditArea_Clear()           'no data at all - implicit add
               End If   
               bExit = False  
               ' End If
               
               '  End If
               Return   
               ' '  If FH[lvwMembers.Item.key].conditions[lvwConditions.Item.key].
               '  If modConsultDBI.FamilyHistory_Condition_Delete(FH[lvwMembers.Item.key].conditions[lvwConditions.Item.key]) = True Then
               '     FH[lvwMembers.Item.key].conditions.Remove(lvwConditions.Item.key)
               '     FamilyHistory_Refresh_Lists()
               '  End If
               
            Case 2
               Return
         End Select
         
   End Select
   FClinical.Refresh_Section(const.cSection_HealthSummary)
   
End

Public Sub MemberConditions_Delete()
   
End

Public Sub ContributedToDeath_Click()
   '------------------------------------------------------------
   'A disease may not be the cause Of death but contribute To it
   '------------------------------------------------------------
   
   If bexit Then Return
   
   If rbContributedToDeathNo.Value = True Then 
      If rbCausedDeathYes.Value = True Then
         rbContributedToDeathNo.Value = True  
         Return
      End If   
   Endif 
   txtAgeDeath.SetFocus
   
End

Public Function Relationship_Check_Duplicated(fk_new_relationship As Integer) As Boolean
   '----------------------------------------------------------
   'Checks the user is not putting in a duplicate relationship
   'Not sure why but this bugged out big time when the 
   'info message included in this subroutine FIXME
   '---------------------------------------------------------- 
   
   Dim member As Collection
   Dim sMsg As String
   
   For Each Member In currentconsult!family_history
      If member!fk_relationship = fk_new_relationship Then
         Return True 
      Endif
   Next  
   Return 
   
End

Public Sub Coded_Term_Select()
   '-------------------------------------------
   'User has chosen a term from popup listview1
   'Display this in the txtCodedTerm Textbox
   'Set currentProblem!fk_code to the pk_term
   '-------------------------------------------
   
   CurrentTerm = Form_Terms.Get_Term()
   '-----------------------------------------------------------------------
   'We allow free text in the health issue = past history problem
   'so, if user has typed something in there like ** very bad diabetes**
   '(bad example I know), then we keep this as the health issue but it
   'will be coded back to the appropriate icpc2+ term
   'However if they havn't typed anything in here, put the natural language
   'term in the txtConditon text box and the coded term in the coded textbox
   'e.g Diabetes;Type1 (T89002) or something similar
   '------------------------------------------------------------------------
   If txtCondition.text = "" Then
      txtCondition.text = CurrentTerm!term
   End If   
   txtCodedTerm.text = CurrentTerm!term & " (" & CurrentTerm!code & ")"
   fk_code = CurrentTerm!code
   fk_coding_system = CurrentTerm!fk_coding_system
   
End

Public Sub Terms_Get()
   '-----------------------------
   'Gets list of diagnostic terms
   '-----------------------------
   
   Dim term As Collection 
   Dim key As String
   
   If Trim(txtCodedTerm.text) = "" Then
      currentTerm!code = ""
      Return
   End If
   Form_Terms.Get_Terms()
   
End

Public Sub cvwCodedTerms_Keypress()
   '------------------------------------------------------------------
   'Act only on the <ENTER> key display what is in list in the textbox
   'This event occurs of Form_Terms and is over-ridden by this observer
   '------------------------------------------------------------------
   
   If Key.code = Key.Return Then 
      ' Stop Event                    'stop event on Form_Terms 
      cvwCodedTerms_DblClick()
   End If
   
End         ' With VBox_ColumnView
'    .top = Vbox_EditArea_inner.top + Last.Parent.Parent.top + Last.Parent.height
'    .left = Last.Parent.Left
'    .width = Vbox_EditArea_inner.width / 2
' End With

Public Sub cvwCodedTerms_DblClick()
   
   Stop Event
   
   Coded_Term_Select() 
   Form_Terms.Visible = False 
   txtConditionNotes.SetFocus()
   
End
