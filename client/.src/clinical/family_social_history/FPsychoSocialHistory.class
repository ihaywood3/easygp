' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' ---------------------------------------------------------------------------
' PURPOSE     - To allow entering social history and responsible persons
' NOTES       - As we often won't know exactly where a relative lives
'               the backend allows free text for the suburb so oversea;s
'               addresses can be kept
'               in Clin_History.vwSocialHistory if fk_responsible_person
'               is not null, then the responsible person exists in our DB
'               then the corresponding fields are person_responsible
'               otherwise the resonsible_person fields contain text
' BUGS        - probably - just mail me rterry@internode.on.net
' --------------------------------------------------------------------------
Private currentConsult As CConsult
Public bExit As Boolean  'Parent_EditArea_Vboxdo not make private used in FPatientBillingCards when clearing this forms edit area
Private bEditing As Boolean                'true if todays date <> date the original fk_consult generated
Private pk_socialhistory As Variant
Private fk_progressnote As Variant
Private fk_consult As Variant
Private fk_town As Variant
Private fk_progressnote_confidential As Variant
Private pk_view_responsible_persons As Variant '(pk_person-pk_adress)
Private fk_staff_may_view_confidential As Variant  'the only staff member who can view the social history-
Private Towns As Collection
Private Countries As Collection
Private town As Collection
Private responsible_persons As Collection
Private responsible_person As Collection
Private restrict_view_to_roles As Collection 
Private roles As Collection 
Private Staff As Collection
Private country_code As String
Private existing_confidential_notes As String
Private Parent_Form_Name As String
Private teHistoryConfidential_font_size As Integer
Private timer_count As Integer
Private Parent_Form_Vbox_EditArea As VBox
Public form_responsible_person As FFindPerson  'accessed from FBillingPatients
Public form_carer As FFindPerson               'accessed from FBillingPatients
Private Const cCarer As Integer = 0
Private Const cResponsiblePerson As Integer = 1

Static Private Form_Psychosocial As FPsychoSocialHistory

Public Sub Set_Parent_Form(inForm As String)
   
   Parent_Form_Name = inForm   
   
End

Public Sub Set_Consult(cons As CConsult)
   '--------------------------------------------------------------------------------------------------
   'Only used in one circumstance
   'in FPatients when creating a new patient, the next of kin could have been entered
   'but no currentconsult hence no currentconsult!patient!fk_patient can exist
   'This is set in FPatients.Save at
   ' If bAddingNewPatient Then
   '    NOK_Consult = New CConsult(["fk_patient": patient!fk_patient], const.ConsultType_ClericalNote)
   '    form_billing.form_next_of_kin.Set_Consult(NOK_Consult)
   ' end if
   ' -------------------------------------------------------------------------------------------------
   
   currentConsult = Cons 
   
End

Public Sub _new()
   
   With form_responsible_person = New FFindPerson(Vbox_Responsible_Person)
      .lblHeading.text = "Next of Kin or Responsible person"
      .Set_Search_Type(cResponsiblePerson)
      .Set_Parent_Form(Parent_Form_Name, Vbox_EditArea)
   End With
   With form_carer = New FFindPerson(Vbox_Carer)
      .lblHeading.text = "Carer (If not the same as responsible person)"
      .Set_Search_Type(cCarer)
      .Set_Parent_Form(Parent_Form_Name, Vbox_EditArea)
   End With
   teHistoryConfidential_font_size = teConfidentialHistory.Font.Size
   lblMeasure.text = "   Do Not Print Confidential History   "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Inner, lblMeasure)
   modEditAreaHelpers.Resize_labels(VBox100, lblMeasure)
   roles = modUtilGUI.LoadCombo(cmbRoles, modUtil.Copy_Collection_Keyed_Sequentially(modAdminDBI.Roles_Get()), "role")
   lblYourRole.text = "Your Role = " & modDBConnect.currentUser!role
   
End

Public Sub Set_Parent_From_VBox_EditArea(vb As Vbox)
   
   Parent_Form_Vbox_EditArea = vb
   
End

Public Sub Init(cons As CConsult)
   
   Form_Psychosocial = Me
   If Parent_Form_Name = "FPatientBillingCards" Then
      form_carer.Set_FPatients_VBox_EditArea(Parent_Form_Vbox_EditArea)
      form_responsible_person.Set_FPatients_VBox_EditArea(Parent_Form_Vbox_EditArea)
   Endif
   
   currentConsult = cons
   
   Reload()
   
End

Static Public Sub NextOfKin_Reload(fk_person As Variant)
   '------------------------------------------------------------------------------------
   'Called from FPatients, if a patient there has been changed and they are this persons
   'next of kin, reload their details. useful if you update the patient in FPatients 
   '(the contact manager for patient's and you have changed their details. Note that
   'comms are kept in conacts keyed to the patient's fk_person
   '-------------------------------------------------------------------------------------
   
   If Form_Psychosocial.form_responsible_person.Get_fk_responsible_person() = fk_person Then
      Form_Psychosocial.Reload()
   Endif
Catch
   Return 
   
End

Public Sub EditArea_Notify_Data_Change(flag As Boolean)
   '---------------------------------------------------------------------------------------------------------------
   'if embedded in FPatients or FRecordVisit (via FPatientBillingCards) then parent edit area notifies a datachange
   '---------------------------------------------------------------------------------------------------------------
   
   If bexit Then Return 
   If flag Then
      Vbox_EditArea.Padding = 1
      If Parent_Form_Name = "FPatientBillingCards" Then
         Parent_Form_Vbox_EditArea.padding = 1
         FRecordVisit.Enable_BOKBIllingSaveButton(True)
         Vbox_EditArea.background = Color.Background
      Endif
   Else
      Vbox_EditArea.Padding = 0
      If Parent_Form_Name = "FPatientBillingCards" Then
         Parent_Form_Vbox_EditArea.padding = 0
         FRecordVisit.Enable_BOKBIllingSaveButton(False)
         Vbox_EditArea.background = Color.Background
      Endif
   Endif
   
End

Public Sub Edit()
   
   form_responsible_person.VBox_EditArea.Enabled = True 
   Print form_responsible_person.VBox_EditArea.Enabled
   form_carer.VBox_EditArea.Enabled = True
   VBox100.Enabled = True   
   
End

Public Sub Save()
   '-----------------------------------------------------------------------
   'Save components of psycho-social history, currently there is no psycho!
   'responsible person stuff arbitrary at the moment
   'basically if user has found the responsible person from the patient's list then
   'the patient pk is kept as fk_responsible patient
   'if not, then the name/adress are just kept in text fields
   ' CREATE TABLE clin_history.social_history
   ' (
   '   pk serial NOT NULL,
   '   fk_consult integer NOT NULL,
   '   history text,
   '   deleted boolean DEFAULT false,
   '   fk_responsible_person integer, -- if not null this is the key to  clerical.data_persons table
   '   responsible_person text, -- if not null and fk_patient is null then this is used as name as responsible person
   '   responsible_person_street1 text, -- if not null is the street of responsible person who is not in patients database
   '   responsible_person_street2 text, -- if not null is the street2 of responsible person who is not in patients database
   '   responsible_person_town text, -- if not null is the fk_town of responsible person who is not in patients database
   '   responsible_person_postcode text,
   '   responsible_person_state text,
   '   responsible_person_contacts text, -- one or more types of contact
   '   responsible_person_notes text,
   '   country_code text,
   '   do_not_print_confidential_notes boolean DEFAULT true, -- if True (the default) then any confidential social history  is never printed on the patient health summary
   '   fk_progressnote integer NOT NULL, -- the default value should not be null, however for historical reasons I never ...
   '   fk_progressnote_confidential integer, -- any progress notes for this social history item which are confidential
   '   fk_staff_may_view_confidential integer, -- if not null then only the staff memember pointed to by this key may read the confidential history
   '   restrict_view_to_roles integer[], -- if not null then the confidential social history has role restrictions ...
   '   history_confidential text, -- important social information history you would not want to let out in the wild...
   '   CONSTRAINT social_history_pkey PRIMARY KEY (pk ),
   '   CONSTRAINT social_history_fk_staff_may_view_confidential_fkey FOREIGN KEY (fk_staff_may_view_confidential)
   '       REFERENCES admin.staff (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '-----------------------------------------------------------------------
   
   Dim socialhistory As CRow
   Dim role As Collection
   Dim progressnote As CRow   
   Dim ProgressNote_Confidential As CRow  
   
   If Vbox_EditArea.padding = 0 Then Return 'And Parent_Form <> "FPatientBillingCards" Then Return 'if embedded in FPatients/FPatientBillingCards always attempt a save (fixme)
   If Not Valid_SocialHistory() Then Return
   
   socialhistory = New CRow
   If Not IsNull(pk_socialhistory) Then          
      socialhistory.put_unchanged(pk_socialhistory, "pk_socialhistory")
   End If
   If IsNull(fk_consult) Then
      socialhistory!fk_consult = currentconsult.GetPK()
   Else
      socialhistory!fk_consult = fk_consult
   Endif
   If existing_confidential_notes <> "" Or Trim(teConfidentialHistory.text) <> "" Then     'had old notes or have some new ones
      ProgressNote_Confidential = New CRow
      ProgressNote_Confidential!fk_consult = currentConsult.GetPK()
      If existing_confidential_notes <> "" Then                                            'had some note before
         If Not IsNull(fk_progressnote_confidential) Then                                         'if done at today's consult
            ProgressNote_Confidential.put_unchanged(fk_progressnote_confidential, "fk_progressnote_confidential")
         Endif
      End If   
      ProgressNote_Confidential!notes = ProgressNotes_Confidential_Create()
      ProgressNote_Confidential!fk_section = const.cSection_SocialHistory
      ProgressNote_Confidential!fk_audit_action = const.cAuditAction_Insert
      ProgressNote_Confidential.Save("clin_consult.progressnotes", "fk_progressnote_confidential")
      socialhistory!fk_progressnote_confidential = modConsultDBI.ProgressNote_Save(currentconsult, ProgressNotes_Create_Normal(), const.cSection_SocialHistory, fk_progressnote, "Social History")
      socialhistory!fk_progressnote_confidential = ProgressNote_Confidential!fk_progressnote_confidential
   End If   
   socialhistory!fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, ProgressNotes_Create_Normal(), const.cSection_SocialHistory, fk_progressnote, "Social History")
   socialhistory!history = Trim(teSocialHistory.text)
   socialhistory!history_confidential = Trim(teConfidentialHistory.text)
   socialhistory!do_not_print_confidential_notes = CBool(chkDoNotPrintConfidential.value)
   If Not IsNull(fk_staff_may_view_confidential) Then 
      socialhistory!fk_staff_may_view_confidential = fk_staff_may_view_confidential
   Else
      socialhistory!fk_staff_may_view_confidential = Null
   End If   
   If lvwAllowedRoles.count And IsNull(fk_staff_may_view_confidential) Then
      socialhistory!restrict_view_to_roles = "{"
      For Each role In restrict_view_to_roles
         socialhistory!restrict_view_to_roles &= role!pk_role & ","
      Next
      socialhistory!restrict_view_to_roles = Left(socialhistory!restrict_view_to_roles, Len(socialhistory!restrict_view_to_roles) - 1) & "}"
   Endif
   If Not IsNull(form_responsible_person.Get_fk_person()) Then                            'if fk_person exists then the person is in our database                       
      socialhistory!fk_responsible_person = form_responsible_person.Get_fk_person()
      socialhistory!responsible_person_wholename = Null
      socialhistory!responsible_person_street1 = Null
      socialhistory!responsible_person_street2 = Null
      socialhistory!responsible_person_town = Null
      socialhistory!responsible_person_state = Null
      socialhistory!responsible_person_postcode = Null
      socialhistory!country_code_responsible_person = Null
   Else
      socialhistory!fk_responsible_person = Null                     'may have been removed
      socialhistory!responsible_person_wholename = form_responsible_person.Get_Person()
      socialhistory!responsible_person_street1 = form_responsible_person.Get_Street1()
      socialhistory!responsible_person_street2 = form_responsible_person.Get_Street2()
      socialhistory!responsible_person_town = form_responsible_person.Get_Town()
      socialhistory!responsible_person_state = form_responsible_person.Get_State()
      socialhistory!responsible_person_postcode = form_responsible_person.Get_Postcode()
      socialhistory!country_code_responsible_person = form_responsible_person.Get_country_code()                    'defaults to 'AU' in backend fixme
   Endif
   socialhistory!responsible_person_notes = form_responsible_person.Get_Notes()
   socialhistory!responsible_person_contacts = form_responsible_person.Get_Contacts()
   If Not IsNull(Form_Carer.Get_fk_person()) Then                                  
      socialhistory!fk_carer = Form_Carer.Get_fk_person()
      socialhistory!carer_wholename = Null
      socialhistory!carer_street1 = Null
      socialhistory!carer_street2 = Null
      socialhistory!carer_town = Null
      socialhistory!carer_state = Null
      socialhistory!carer_postcode = Null
      socialhistory!country_code_carer = Null
   Else
      socialhistory!fk_carer = Null                     'may have been removed
      socialhistory!carer_wholename = Form_Carer.Get_Person()
      socialhistory!carer_street1 = Form_Carer.Get_Street1()
      socialhistory!carer_street2 = Form_Carer.Get_Street2()
      socialhistory!carer_town = Form_Carer.Get_Town()
      socialhistory!carer_state = Form_Carer.Get_State()
      socialhistory!carer_postcode = Form_Carer.Get_Postcode()
      socialhistory!country_code_carer = Form_Carer.Get_country_code()       'defaults to 'AU' in backend fixme
   Endif 
   socialhistory!carer_notes = form_carer.Get_Notes()
   socialhistory!carer_contacts = form_carer.Get_Contacts()
   socialhistory.Save("clin_history.social_history", "pk_socialhistory")
   modDBConnect.CommitTrans()
   If FClinical.IsSamePatient(currentConsult!patient!fk_patient) Then
      FClinical.Refresh_Section(const.cSection_HealthSummary)                'check if health summary showing, if so update it
      Try FGPMPTCA.GPMP_Update()
   End If 
   If Parent_Form_Name = "FPatientBillingCards" Then                         'If this form instance is in billing                  
      FClinical.Refresh_Section(const.cSection_SocialHistory)                 'update Fclinical psycho-social history if needed
   End If 
   EditArea_Notify_Data_Change(False)
   Reload()
   
End

Public Sub Fesponsible_Person_Save()
   
   If Not Valid_Responsible_person() Then Return
   
End

Public Function Valid_Responsible_person() As Boolean
   '--------------------------------------------------------
   'Accept at minimum a name, anything else is up for grabs
   'hopefully they will have used contacts, if not we may
   'save the persons details and put in contacts?
   '--------------------------------------------------------
   
   Return True
   
End

Public Function Valid_SocialHistory() As Boolean
   '---------------------------------------------------------------
   'Validate there is at least some social history or a next of kin
   'Return True if valid
   '---------------------------------------------------------------
   
   Dim sMsg As String
   Dim bHaveNoNextOfKin As Boolean
   Dim bHaveConfidentialHistory As Boolean
   
   If Trim(teConfidentialHistory.text) <> "" Then             'if have confidential text, make sure have set confidentiality
      If IsNull(fk_staff_may_view_confidential) Then 
         If IsNull(restrict_view_to_roles) Then
            Goto ExplainConfidentiality
         Else
            If restrict_view_to_roles.count = 0 Then
               Goto ExplainConfidentiality
            Endif
         Endif
      Endif
      bHaveConfidentialHistory = True  
   Endif
   ' If Not IsNull(fk_responsible_person) Or If Trim(txtResponsiblePerson.Text) Then  'can save record if have at least a responsible person
   '    Return True
   ' Endif
   If Not form_responsible_person.Person_Valid() Then Return
   If Not form_carer.Person_Valid() Then Return
   If IsNull(pk_socialhistory) Then                      'no social history ever and no confidential history and no next of kin, don't save
      If Trim(teSocialHistory.text) = "" And bHaveConfidentialHistory = False And bHaveNoNextOfKin Then      'none to save
         Return False
      Endif
   Endif
   
   Return True
ExplainConfidentiality:
   Message.Title = "Confidential Psycho-Social History"
   sMsg = "If you are going to enter confidential information about this patient then you should "
   "either select the staff member who can access this history, or the roles of staff members "
   "you would permit to view the patient's history"
   Message.Warning(sMsg, "Ok")
   With txtStaffMayView
      .Background = Color.rgb(95, 255, 175)
      .SetFocus
   End With
   Return  
   
End

Public Sub Reload()
   '------------------------------------------------------------------------
   'Reloads the psycho-social history and confidential psycho/social history
   'if bEditing = True the record is being changed at a date 
   'different from its creation
   'FIXME: this should use exec_query_first to return single collection
   '------------------------------------------------------------------------
   
   Dim SH As Collection
   Dim role As Collection
   Dim x As Integer
   Dim role_keys As Variant[]
   Dim bUserCanView As Boolean
   Dim sMsg As String
   Dim sUsersCanView As String
   
   EditArea_Clear()
   form_responsible_person.EditArea_Clear
   form_carer.EditArea_Clear
   currentconsult.Refresh("social_history")
   If Not currentconsult!social_history.count Then
      chkDoNotPrintConfidential.value = True
      Return
   End If   
   bExit = True
   For Each SH In currentconsult!social_history             'there is only one
      pk_socialhistory = SH!pk_socialhistory
      Try fk_staff_may_view_confidential = SH!fk_staff_may_view_confidential
      If SH!fk_consult <> currentConsult.GetPK() Then
         fk_consult = Null
         fk_progressnote = Null
         fk_progressnote_confidential = Null
         bEditing = True 
      Else
         fk_consult = SH!fk_consult
         fk_progressnote = SH!fk_progressnote
         If Not IsNull(SH!fk_progressnote_confidential) Then
            fk_progressnote_confidential = SH!fk_progressnote_confidential
         End If   
         bEditing = False   
      Endif
      form_responsible_person.Person_Display(SH)
      form_carer.Person_Display(SH)
      teSocialHistory.text = SH!history
      If Not IsNull(SH!history_confidential)                 'if there is confidential history
         existing_confidential_notes = SH!history_confidential
         If SH!fk_staff_may_view_confidential Then
            txtStaffMayView.text = SH!staff_may_view_confidential_wholename 'usually null unless absolutly restricted to 1 staff member
            bUserCanView = True 
         End If   
         If Not IsNull(SH!restrict_view_to_roles) Then
            role_keys = Split(Mid(SH!restrict_view_to_roles, 2, Len(SH!restrict_view_to_roles) - 2), ",")
            For x = 0 To role_keys.count - 1
               restrict_view_to_roles.Add(["pk_role": role_keys[x]], restrict_view_to_roles.count)
               For Each role In roles
                  If role!pk_role = role_keys[x] Then
                     lvwAllowedRoles.Add(lvwAllowedRoles.count, role!role)
                     If modDBConnect.currentUser!fk_role = role_keys[x] Then
                        bUserCanView = True   
                     Else
                        sUsersCanView &= role!role & ","
                     Endif
                     Break
                  Endif
               Next
            Next
         Endif
         Try sUsersCanView = Left(sUsersCanView, Len(sUsersCanView) - 1)
         If bUserCanView Or modDBConnect.currentUser!fk_role = const.StaffRole_Practice_Principal Then 
            HBox_teConfidentialHistory.enabled = True
            HBox_DoNotPRINT.enabled = True
            HBox_ViewByDr.enabled = True
            ' HBox_SelectRole.enabled = True
            HBox_RolesPermitted.enabled = True
            teConfidentialHistory.text = SH!history_confidential
            tbAddrole.Enabled = True   
         Else
            sMsg = "There is confidential information available for this patient but  you are not permitted "
            "to view of update it.\n\nIf you think this is a mistake please contact the system admin."
            Message.title = "Viewing Confidential Psycho-Social History Information"
            Message.info(sMsg)
            With teConfidentialHistory
               .Font.Size = 12
               .RichText = "<BR><P><B>SENSITIVE/RESTRICTED INFORMATION</b></P>This can only be viewed by users of the role '" & sUsersCanView & "'"
            End With
         End If  
      Else  'we have no confidential history , user can be allowed to enter some
         HBox_teConfidentialHistory.enabled = True
         HBox_DoNotPRINT.enabled = True
         HBox_ViewByDr.enabled = True
         '  HBox_SelectRole.enabled = True
         HBox_RolesPermitted.enabled = True
         tbAddrole.Enabled = True
      End If   
      chkDoNotPrintConfidential.value = SH!do_not_print_confidential_notes
   Next
   bExit = False
   
End

Public Sub Columnview1_KeyPress()
   '---------------------------------------
   'User hits <Enter key> on the columnview
   'trigger the accept code
   '---------------------------------------   
   
   If Key.code = Key.Return Then
      Columnview1_DblClick
   End If
   
End

Public Sub Columnview1_DblClick()
   'fixme fix this code
   
   columnview1.MoveCurrent
   Staff_May_View_Select(staff[columnview1.Item.key])
   columnview1.Visible = False
Catch
   Return
   
End

Public Sub EditArea_Clear()
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_inner)
   modEditAreaHelpers.EditArea_Clear(VBox100)
   Try teConfidentialHistory.Font.size = teHistoryConfidential_font_size  'could be zero
   lvwAllowedRoles.Clear
   fk_staff_may_view_confidential = Null
   pk_socialhistory = Null
   fk_consult = Null
   fk_progressnote = Null
   existing_confidential_notes = ""
   fk_progressnote_confidential = Null
   country_code = "AU"         'the default
   bExit = False
   cmbRoles.index = -1
   restrict_view_to_roles = New Collection
   chkDoNotPrintConfidential.value = True
   HBox_teConfidentialHistory.enabled = False  'these next 5 hold the confidential information
   HBox_DoNotPRINT.enabled = False
   HBox_ViewByDr.enabled = False
   ' HBox_SelectRole.enabled = False
   HBox_RolesPermitted.enabled = False
   tbAddrole.Enabled = False  
   bEditing = False   
   EditArea_Notify_Data_Change(False)
   
End

Public Sub EditArea_TextBox_KeyRelease()
   
   Select Case Last.tag
      Case "staff can view"
         Staff_Find(Last)
   End Select
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   Select Case key.code
      Case key.Down
         
         If columnview1.Visible Then
            columnview1.MoveFirst
            columnview1.SetFocus()
            columnview1.Item.Selected = True
         Endif
      Case key.return, key.Tab
         Select Case Last.tag
            Case "social history"
               form_responsible_person.txtSearch.SetFocus
         End Select
   End Select
   
End

Public Sub Form_Resize()
   
   '  If columnview1.Visible Then
   '    columnview1.width = txtTown.Width 'fixme.
   ' Endif
   
End

Public Sub Staff_Find(txtbox As Textbox)
   '----------------------------------------------------------------
   'Show multiple staff members for selection from vwStaffInClinics
   'User can choose the person to allocate the task to
   'columns: 0=surname 1=firstname 2=sex 3=street 4= town/postcode
   'Fixme put this in a central location, used all over the place
   'e.g FPsychoSocialHistory
   '----------------------------------------------------------------
   
   Dim x As Integer
   Dim staff_member As Collection
   
   With columnview1
      .Clear()
      .Columns.count = 3
      .Visible = False
   End With
   If Trim(txtbox.text) = "" Then Return
   staff = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get(Trim(txtbox.text)))
   For Each staff_member In staff
      columnview1.Add(x, 0)
      columnview1[x][0] = staff_member!title & " " & staff_member!wholename
      columnview1[x][1] = staff_member!occupation
      columnview1[x][2] = staff_member!branch
      Inc x
   Next
   lblmeasure.font = columnview1.Font
   modUtilGUI.Columnview_Columns_Set_Size(columnview1, lblmeasure)
   If Staff.count Then
      Columnview1.Visible = True
      columnview1.Visible = True
      Columnview1.Raise
   End If
   
End

Public Sub Staff_May_View_Select(sm As Collection)
   '---------------------------------------------------
   'User is selecting a staff member who alone can view
   'the social history
   '---------------------------------------------------
   
   Try txtStaffMayView.text = sm!title & " " & sm!wholename
   fk_staff_may_view_confidential = sm!fk_staff
   columnview1.Visible = False
   lvwAllowedRoles.Clear
   cmbRoles.index = -1
   
End

Public Sub tbAddrole_Click()
   '-----------------------------------------------------------------------
   'User has decided to add a role allowed to view the confidential history
   'Remove any staff name previous allocated as can't do both
   '-----------------------------------------------------------------------
   
   txtStaffMayView.text = "" ' trigges EditArea_TextBox_Change and remove key 
   If Not restrict_view_to_roles.Exist(roles[cmbRoles.index]!pk_role) Then
      lvwAllowedRoles.Add(lvwAllowedRoles.count, cmbRoles.text)
      restrict_view_to_roles.Add(["pk_role": roles[cmbRoles.index]!pk_role], restrict_view_to_roles.count)
      EditArea_Notify_Data_Change(True)
   Endif
   cmbRoles.index = -1    
   tbAddrole.SetFocus
   
End

Public Function ProgressNotes_Create_Normal() As String
   '---------------------------------------------- 
   'Create some html to put into the progressnotes
   '---------------------------------------------- 
   
   Dim pn As String
   Dim sHeading As String = "Social History"
   
   If Parent_Form_Name = "FPatientBillingCards" Then sHeading = "Next of Kin Details"
   pn = "<B>" & sHeading   
   If bEditing Then
      pn &= " (changed)"
   Else
      pn &= " taken"
   Endif
   pn &= "</B><BR>"
   If Parent_Form_Name <> "FPatientBillingCards"  'secretarial staff cannot access the social history text, only responsible person
      pn &= Trim(teSocialHistory.text)
      If Trim(teConfidentialHistory.text) <> "" Then
         pn &= "Some confidential psycho-social history was added but viewing this is restricted to any authorised users and only in the psycho-social history of the program.<BR>"
      Endif
      pn &= "<BR>"
   End If   
   If Trim(form_responsible_person.txtWholename.text) <> "" Then
      pn &= "The next of kin/responsible person is noted to be " & Trim(form_responsible_person.txtWholename.text) & "."
   Endif
   If Trim(form_responsible_person.teNotes.text) <> "" Then
      pn &= " Notes: " & Trim(form_responsible_person.teNotes.text)
   Endif
   Return pn   
   
End

Public Function ProgressNotes_Confidential_Create() As String
   '-----------------------------------------------------------------------------
   'Creates progress notes for text which is confidential and will only be viewed
   'by designated user or role
   '------------------------------------------------------------------------------
   
   Dim pn As String
   
   pn = "<B>Confidential psycho-social notes"
   If existing_confidential_notes <> "" And Trim(teConfidentialHistory.text) = "" Then 'there were notes, but now deleted
      pn &= " have been deleted by " & modDBConnect.currentUser!wholename & "</B><BR>"
      pn &= "<I>:" & existing_confidential_notes & "</I><BR>"
   Else                                                                             
      If existing_confidential_notes <> "" Then                                        'note before this consult did exist
         If Trim(Lower(existing_confidential_notes)) <> Trim(Lower(teConfidentialHistory.text)) Then '?have they changed?
            pn &= " (changed)</B>"
         Endif
      Else                                                                             ' no previous existing psycho-social notes
         pn &= " (New)</B>"
      Endif
      pn &= "<BR></B>" '</B> may not be needed but wgas
      pn &= Trim(teConfidentialHistory.text)
   End If 
   Return pn
   
End

Public Sub EditArea_TextBox_Change()
   
   EditArea_Notify_Data_Change(True)
   
End

Public Sub chkDoNotPrintConfidential_Click()
   
   EditArea_Notify_Data_Change(True)
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   If Last.tag = "staff can view" Then
      With columnview1
         .Visible = False 
         .top = Last.Parent.Parent.top + Last.Parent.Parent.height  
         .left = Last.Parent.left 
      End With
   Endif
   
End
