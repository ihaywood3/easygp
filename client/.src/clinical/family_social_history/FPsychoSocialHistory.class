' Gambas class file

' Copyright (C) 2008-2014 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' ---------------------------------------------------------------------------
' PURPOSE     - A pretty rudimentry module to allow entering social history
'             - As per the name it needs the 'psycho' part done
' NOTES       - As we often won't know exactly where a relative lives
'               the backend allows free text for the suburb so oversea;s
'               addresses can be kept
'               in Clin_History.vwSocialHistory if fk_responsible_person
'               is not null, then the responsible person exists in our DB
'               then the corresponding fields are person_responsible
'               otherwise the resonsible_person fields contain text
' BUGS        - probably - just mail me rterry@internode.on.net
' --------------------------------------------------------------------------
Private currentConsult As CConsult
Public bExit As Boolean  'do not make private used in FPatientBillingCards when clearing this forms edit area
Private pk_socialhistory As Integer
Private responsible_persons As Collection
Private responsible_person As Collection
Public fk_responsible_person As Integer 'do not make this private
Private pk_view_responsible_persons As String '(pk_person-pk_adress)-
Private Towns As Collection
Private Countries As Collection
Private town As Collection
Private fk_town As Integer
Private restrict_view_to_roles As Collection 
Private timer_count As Integer
Private country_code As String
Private fk_progressnote As Integer
Private fk_consult As Integer
Private roles As Collection 
Private Staff As Collection
Private fk_staff_may_view_confidential As Integer  'the only staff member who can view the social history
Private bEditing As Boolean                'true if todays date <> date the original fk_consult generated
Private fk_progressnote_confidential As Integer
Private existing_confidential_notes As String
Private teHistoryConfidential_font_size As Integer
Private Parent_Form As String
Private ParentForm_Vbox_EditArea As VBox

Static Private Form_Psychosocial As FPsychoSocialHistory

Public Sub Set_Parent_Form(inForm As String)
   
   Parent_Form = inForm   
   
End

Public Sub Set_Consult(cons As CConsult)
   '--------------------------------------------------------------------------------------------------
   'Only used in one circumstance
   'in FPatients when creating a new patient, the next of kin could have been entered
   'but no currentconsult hence no currentconsult!patient!fk_patient can exist
   'This is set in FPatients.Save at
   ' If bAddingNewPatient Then
   '    NOK_Consult = New CConsult(["fk_patient": patient!fk_patient], const.ConsultType_ClericalNote)
   '    form_billing.form_next_of_kin.Set_Consult(NOK_Consult)
   ' end if
   ' -------------------------------------------------------------------------------------------------
   
   currentConsult = Cons 
   
End

Public Sub _new()
   
   teHistoryConfidential_font_size = teConfidentialHistory.Font.Size
   lblMeasure.text = "   Do Not Print Confidential History   "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Inner, lblMeasure)
   modEditAreaHelpers.Resize_labels(Vbox_ResponsiblePerson, lblMeasure)
   roles = modUtil.LoadCombo(cmbRoles, modUtil.Copy_Collection_Keyed_Sequentially(modAdminDBI.Roles_Get()), "role")
   lblYourRole.text = "Your Role = " & modDBConnect.currentUser!role
   
End

Public Sub Set_Parent_From_VBox_EditArea(vb As Vbox)
   
   ParentForm_Vbox_EditArea = vb
   
End

Public Sub Init(cons As CConsult)
   
   Form_Psychosocial = Me
   currentConsult = cons
   timer1.Enabled = True
   timer1.stop
   Reload()
   
End

Static Public Sub NextOfKin_Reload(fk_person As Integer)
   '------------------------------------------------------------------------------------
   'Called from FPatients, if a patient there has been changed and they are this persons
   'next of kin, reload their details. useful if you update the patient in FPatients 
   '(the contact manager for patient's and you have changed their details. Note that
   'comms are kept in conacts keyed to the patient's fk_person
   '-------------------------------------------------------------------------------------
   
   If Form_Psychosocial.fk_responsible_person = fk_person Then
      Form_Psychosocial.Reload()
   Endif
   
End

Public Sub EditArea_Notify_Data_Change(flag As Boolean)
   '---------------------------------------------------------------------------------------------------------------
   'if embedded in FPatients of FRecordVisit (via FPatientBillingCards) then parent edit area notifies a datachange
   '---------------------------------------------------------------------------------------------------------------
   
   If bexit Then Return 
   ' If Parent_Form = "FPatientBillingCards" And flag = True Then ' Or Parent_Form = "FRecordVisit" Then
   '    ParentForm_Vbox_EditArea.padding = 1
   '    FRecordVisit.Enable_BOKBIllingSaveButton(True)
   '    With Vbox_EditArea
   '       .background = Color.Background
   '       .Padding = 1
   '    End With
   '    Return 
   ' End If   
   If flag Then
      Vbox_EditArea.Padding = 1
      If Parent_Form = "FPatientBillingCards" Then
         ParentForm_Vbox_EditArea.padding = 1
         FRecordVisit.Enable_BOKBIllingSaveButton(True)
         Vbox_EditArea.background = Color.Background
      Endif
   Else
      Vbox_EditArea.Padding = 0
      If Parent_Form = "FPatientBillingCards" Then
         ParentForm_Vbox_EditArea.padding = 0
         FRecordVisit.Enable_BOKBIllingSaveButton(False)
         Vbox_EditArea.background = Color.Background
      Endif
   Endif
   
End

Public Sub EditArea_Notify_Data_Change_old(flag As Boolean)
   '---------------------------------------------------------------------------------------------------------------
   'if embedded in FPatients of FRecordVisit (via FPatientBillingCards) then parent edit area notifies a datachange
   '---------------------------------------------------------------------------------------------------------------
   
   If bexit Then Return 
   If Parent_Form = "FPatientBillingCards" And flag = True Then ' Or Parent_Form = "FRecordVisit" Then
      ParentForm_Vbox_EditArea.padding = 1
      FRecordVisit.Enable_BOKBIllingSaveButton(True)
      With Vbox_EditArea
         .background = Color.Background
         .Padding = 1
      End With
      Return 
   End If   
   If flag Then
      Vbox_EditArea.Padding = 1
   Else
      
      Vbox_EditArea.Padding = 0
   Endif
   
End

Public Sub EditArea_Notify_Data_Change_oldest(flag As Boolean)
   
   If Parent_Form <> "FPatientBillingCards" Then
      If flag
         Vbox_EditArea.Padding = 1
         '  tbSave.Foreground = Color.Red
      Else
         Vbox_EditArea.Padding = 0
         '   tbSave.Foreground = Color.Black
      Endif
   Else
      ParentForm_Vbox_EditArea.padding = 1
   End If   
   
End

Public Sub Save()
   '-----------------------------------------------------------------------
   'Save components of psycho-social history, currently there is no psycho!
   'responsible person stuff arbitrary at the moment
   'basically if user has found the responsible person from the patient's list then
   'the patient pk is kept as fk_responsible patient
   'if not, then the name/adress are just kept in text fields
   ' CREATE TABLE clin_history.social_history
   ' (
   '   pk serial NOT NULL,
   '   fk_consult integer NOT NULL,
   '   history text,
   '   deleted boolean DEFAULT false,
   '   fk_responsible_person integer, -- if not null this is the key to  clerical.data_persons table
   '   responsible_person text, -- if not null and fk_patient is null then this is used as name as responsible person
   '   responsible_person_street1 text, -- if not null is the street of responsible person who is not in patients database
   '   responsible_person_street2 text, -- if not null is the street2 of responsible person who is not in patients database
   '   responsible_person_town text, -- if not null is the fk_town of responsible person who is not in patients database
   '   responsible_person_postcode text,
   '   responsible_person_state text,
   '   responsible_person_contacts text, -- one or more types of contact
   '   responsible_person_notes text,
   '   country_code text,
   '   do_not_print_confidential_notes boolean DEFAULT true, -- if True (the default) then any confidential social history  is never printed on the patient health summary
   '   fk_progressnote integer NOT NULL, -- the default value should not be null, however for historical reasons I never ...
   '   fk_progressnote_confidential integer, -- any progress notes for this social history item which are confidential
   '   fk_staff_may_view_confidential integer, -- if not null then only the staff memember pointed to by this key may read the confidential history
   '   restrict_view_to_roles integer[], -- if not null then the confidential social history has role restrictions ...
   '   history_confidential text, -- important social information history you would not want to let out in the wild...
   '   CONSTRAINT social_history_pkey PRIMARY KEY (pk ),
   '   CONSTRAINT social_history_fk_staff_may_view_confidential_fkey FOREIGN KEY (fk_staff_may_view_confidential)
   '       REFERENCES admin.staff (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '-----------------------------------------------------------------------
   
   Dim socialhistory As CRow
   Dim role As Collection
   Dim progressnote As CRow   
   Dim ProgressNote_Confidential As CRow  
   
   If Vbox_EditArea.padding = 0 Then Return 'And Parent_Form <> "FPatientBillingCards" Then Return 'if embedded in FPatients/FPatientBillingCards always attempt a save (fixme)
   If Not Valid_SocialHistory() Then Return
   
   socialhistory = New CRow
   If pk_socialhistory <> 0 Then         'if is =-1 then is a new record
      socialhistory.put_unchanged(pk_socialhistory, "pk_socialhistory")
   End If
   If fk_consult = 0 Then
      socialhistory!fk_consult = currentconsult.GetPK()
   Else
      socialhistory!fk_consult = fk_consult
   Endif
   '----------------------
   'Save the progress note
   ' '--------------------
   ProgressNote = New CRow
   If fk_progressnote Then
      ProgressNote.put_unchanged(fk_progressnote, "fk_progressnote")
   Endif
   ProgressNote!fk_consult = currentConsult.GetPK()
   ProgressNote!notes = ProgressNotes_Create_Normal()
   ProgressNote!fk_section = const.cSection_SocialHistory
   ProgressNote!fk_audit_action = const.cAuditAction_Insert
   ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
   If existing_confidential_notes <> "" Or Trim(teConfidentialHistory.text) <> "" Then     'had old notes or have some new ones
      ProgressNote_Confidential = New CRow
      ProgressNote_Confidential!fk_consult = currentConsult.GetPK()
      If existing_confidential_notes <> "" Then                                            'had some note before
         If fk_progressnote_confidential <> 0 Then                                         'if done at today's consult
            ProgressNote_Confidential.put_unchanged(fk_progressnote_confidential, "fk_progressnote_confidential")
         Endif
      End If   
      ProgressNote_Confidential!notes = ProgressNotes_Confidential_Create()
      ProgressNote_Confidential!fk_section = const.cSection_SocialHistory
      ProgressNote_Confidential!fk_audit_action = const.cAuditAction_Insert
      ProgressNote_Confidential.Save("clin_consult.progressnotes", "fk_progressnote_confidential")
      socialhistory!fk_progressnote_confidential = ProgressNote_Confidential!fk_progressnote_confidential
   End If   
   socialhistory!fk_progressnote = ProgressNote!fk_progressnote
   socialhistory!history = Trim(teSocialHistory.text)
   socialhistory!history_confidential = Trim(teConfidentialHistory.text)
   socialhistory!do_not_print_confidential_notes = CBool(chkDoNotPrintConfidential.value)
   If fk_staff_may_view_confidential Then 
      socialhistory!fk_staff_may_view_confidential = fk_staff_may_view_confidential
   Else
      socialhistory!fk_staff_may_view_confidential = Null
   End If   
   If lvwAllowedRoles.count And fk_staff_may_view_confidential = 0 Then
      socialhistory!restrict_view_to_roles = "{"
      For Each role In restrict_view_to_roles
         socialhistory!restrict_view_to_roles &= role!pk_role & ","
      Next
      socialhistory!restrict_view_to_roles = Left(socialhistory!restrict_view_to_roles, Len(socialhistory!restrict_view_to_roles) - 1) & "}"
   Endif
   If fk_responsible_person Then                                   'if non zero, have retreived from the backend
      socialhistory!fk_responsible_person = fk_responsible_person
      socialhistory!responsible_person = ""
   Else
      socialhistory!fk_responsible_person = Null                     'may have been removed
      socialhistory!responsible_person = Trim(txtResponsiblePerson.Text)
      socialhistory!responsible_person_street1 = Trim(txtStreet1.text)
      socialhistory!responsible_person_street2 = Trim(txtStreet2.text)
      socialhistory!responsible_person_town = Trim(txtTown.text)
      socialhistory!responsible_person_state = Trim(txtState.text)
      socialhistory!responsible_person_postcode = Trim(txtPostcode.text)
      socialhistory!country_code = country_code                    'defaults to 'AU' in backend
   Endif
   socialhistory!responsible_person_notes = Trim(teResponsiblePersonNotes.text)
   socialhistory!responsible_person_contacts = Trim(txtContactNumber.text)
   socialhistory.Save("clin_history.social_history", "pk_socialhistory")
   modDBConnect.CommitTrans()
   If FClinical.IsSamePatient(currentConsult!patient!fk_patient) Then
      FClinical.Refresh_Section(const.cSection_HealthSummary)                'check if health summary showing, if so update it
      FClinical.Refresh_AllPreviousNotes()
   End If   
   Reload()
   
End

Public Sub Fesponsible_Person_Save()
   
   If Not Valid_Responsible_person() Then Return
   
End

Public Function Valid_Responsible_person() As Boolean
   '--------------------------------------------------------
   'Accept at minimum a name, anything else is up for grabs
   'hopefully they will have used contacts, if not we may
   'save the persons details and put in contacts?
   '--------------------------------------------------------
   
   Return True
   
End

Public Function Valid_SocialHistory() As Boolean
   '---------------------------------------------------------------
   'Validate there is at least some social history or a next of kin
   'Return True if valid
   '---------------------------------------------------------------
   
   Dim sMsg As String
   Dim bHaveNoNextOfKin As Boolean
   Dim bHaveConfidentialHistory As Boolean
   
   If Trim(teConfidentialHistory.text) <> "" Then             'if have confidential text, make sure have set confidentiality
      If fk_staff_may_view_confidential = 0 Then 
         If IsNull(restrict_view_to_roles) Then
            Goto ExplainConfidentiality
         Else
            If restrict_view_to_roles.count = 0 Then
               Goto ExplainConfidentiality
            Endif
         Endif
      Endif
      bHaveConfidentialHistory = True  
   Endif
   If fk_responsible_person Or If Trim(txtResponsiblePerson.Text) Then  'can save record if have at least a responsible person
      Return True
   Endif
   If pk_socialhistory = 0 Then                      'no social history ever and no confidential history and no next of kin, don't save
      If Trim(teSocialHistory.text) = "" And bHaveConfidentialHistory = False And bHaveNoNextOfKin Then      'none to save
         Return False
      Endif
   Endif
   
   Return True
ExplainConfidentiality:
   Message.Title = "Confidential Psycho-Social History"
   sMsg = "If you are going to enter confidential information about this patient then you should "
   "either select the staff member who can access this history, or the roles of staff members "
   "you would permit to view the patient's history"
   Message.Warning(sMsg, "Ok")
   With txtStaffMayView
      .Background = Color.rgb(95, 255, 175)
      .SetFocus
   End With
   Return  
   
End

Public Sub Reload()
   '------------------------------------------------------------------------
   'Reloads the psycho-social history and confidential psycho/social history
   'if bEditing = True the record is being changed at a date 
   'different from its creation
   'FIXME: this should use exec_query_first to return single collection
   '------------------------------------------------------------------------
   
   Dim SH As Collection
   Dim role As Collection
   Dim x As Integer
   Dim role_keys As Integer[]
   Dim bUserCanView As Boolean
   Dim sMsg As String
   Dim sUsersCanView As String
   
   EditArea_Clear()
   
   currentconsult.Refresh("social_history")
   If Not currentconsult!social_history.count Then
      chkDoNotPrintConfidential.value = True
      Return
   End If   
   bExit = True
   For Each SH In currentconsult!social_history             'there is only one
      pk_socialhistory = SH!pk_socialhistory
      Try fk_responsible_person = SH!fk_responsible_person
      Try fk_staff_may_view_confidential = SH!fk_staff_may_view_confidential
      If SH!fk_consult <> currentConsult.GetPK() Then
         fk_consult = 0
         fk_progressnote = 0
         fk_progressnote_confidential = 0
         bEditing = True 
      Else
         fk_consult = SH!fk_consult
         fk_progressnote = SH!fk_progressnote
         If Not IsNull(SH!fk_progressnote_confidential) Then
            fk_progressnote_confidential = SH!fk_progressnote_confidential
         End If   
         bEditing = False   
      Endif
      If fk_responsible_person <> 0 Then
         txtResponsiblePerson.text = SH!person_responsible_title & " " & SH!person_responsible_firstname & " " & SH!person_responsible_surname
         With txtStreet1
            .text = SH!person_responsible_street1
            .Enabled = False  
         End With
         With txtStreet2
            .text = SH!person_responsible_street2
            .Enabled = False  
         End With
         With txtTown
            .text = SH!person_responsible_town
            .Enabled = False  
         End With
         With txtState
            .text = SH!person_responsible_state
            .Enabled = False  
         End With
         With txtPostcode
            .text = SH!person_responsible_postcode
            .Enabled = False  
         End With
         With txtContactNumber
            .text = Responsible_person_Get_Comms(fk_responsible_person) 'get comms for this fk_person from contacts
            .Enabled = False  
         End With
      Else
         txtResponsiblePerson.text = SH!responsible_person
         country_code = SH!country_code
         With txtResponsiblePerson
            .text = SH!responsible_person
            .Enabled = True   
         End With
         With txtStreet1
            .text = SH!responsible_person_street1
            .Enabled = True   
         End With
         With txtStreet2
            .text = SH!responsible_person_street2
            .Enabled = True   
         End With
         With txtTown
            .text = SH!responsible_person_town
            .Enabled = True   
         End With
         With txtState
            .text = SH!responsible_person_state
            .Enabled = True   
         End With
         With txtPostcode
            .text = SH!responsible_person_postcode
            .Enabled = True   
         End With
         With txtContactNumber
            .text = SH!responsible_person_contacts
         End With
      End If
      teResponsiblePersonNotes.text = SH!responsible_person_notes
      teSocialHistory.text = SH!history
      If Not IsNull(SH!history_confidential)                 'if there is confidential history
         existing_confidential_notes = SH!history_confidential
         If SH!fk_staff_may_view_confidential Then
            txtStaffMayView.text = SH!staff_may_view_confidential_wholename 'usually null unless absolutly restricted to 1 staff member
            bUserCanView = True 
         End If   
         If Not IsNull(SH!restrict_view_to_roles) Then
            role_keys = Split(Mid(SH!restrict_view_to_roles, 2, Len(SH!restrict_view_to_roles) - 2), ",")
            For x = 0 To role_keys.count - 1
               restrict_view_to_roles.Add(["pk_role": role_keys[x]], restrict_view_to_roles.count)
               For Each role In roles
                  If role!pk_role = role_keys[x] Then
                     lvwAllowedRoles.Add(lvwAllowedRoles.count, role!role)
                     If modDBConnect.currentUser!fk_role = role_keys[x] Then
                        bUserCanView = True   
                     Else
                        sUsersCanView &= role!role & ","
                     Endif
                     Break
                  Endif
                  
               Next
            Next
         Endif
         Try sUsersCanView = Left(sUsersCanView, Len(sUsersCanView) - 1)
         If bUserCanView Then 
            HBox_teConfidentialHistory.enabled = True
            HBox_DoNotPRINT.enabled = True
            HBox_ViewByDr.enabled = True
            HBox_SelectRole.enabled = True
            HBox_RolesPermitted.enabled = True
            teConfidentialHistory.text = SH!history_confidential
            tbAddrole.Enabled = True   
         Else
            sMsg = "There is confidential information available for this patient but  you are not permitted "
            "to view of update it.\n\nIf you think this is a mistake please contact the system admin."
            Message.title = "Viewing Confidential Psycho-Social History Information"
            Message.info(sMsg)
            With teConfidentialHistory
               .Font.Size = 12
               .RichText = "<BR><P><B>SENSITIVE/RESTRICTED INFORMATION</b></P>This can only be viewed by users of the role '" & sUsersCanView & "'"
               
            End With
         End If  
      Else  'we have no confidential history , user can be allowed to enter some
         HBox_teConfidentialHistory.enabled = True
         HBox_DoNotPRINT.enabled = True
         HBox_ViewByDr.enabled = True
         HBox_SelectRole.enabled = True
         HBox_RolesPermitted.enabled = True
         tbAddrole.Enabled = True
      End If   
      chkDoNotPrintConfidential.value = SH!do_not_print_confidential_notes
      
   Next
   bExit = False
   
End

Public Function Responsible_person_Get_Comms(fk_person As Integer) As String
   '------------------------------------------------------------- 
   'if the responsible person is in our database, get their comms
   '------------------------------------------------------------ 
   
   Dim comm As Collection
   Dim sComms As String
   
   For Each comm In modContactsDBI.person_comms_get(fk_person)
      If comm!fk_type = const.CommModalityMobile Then
         scomms &= " Mobile:" & comm!value
      End If
      If comm!fk_type = const.CommModalityHome Then
         scomms &= " Phone:" & comm!value
      Endif
      If comm!fk_type = const.CommModalityPhone Then
         scomms &= " Phone:" & comm!value
      Endif
   Next 
   Return Trim(sComms)
   
End

Public Sub responsible_person_Find()
   '-----------------------------------------------------------------------
   'Search for (amongst the patients) a person who will be the next of kin
   'aka, now-a-days as the 'responsible person
   '----------------------------------------------------------------------
   
   Dim x As Integer
   
   With columnview1
      .Visible = False
      .clear()
      .Columns.count = 3
   End With
   If Trim(txtSearch.text) = "" Then Return
   timer1.Stop()  'fixme or at least checkme out
   Inc Application.Busy
   Responsible_Persons = modContactsDBI.Person_Get(Trim(txtSearch.text), const.contacttype_PersonsAndPatients)
   Responsible_Persons.Remove("sql_in_english")
   Responsible_Persons = modUtil.Copy_Collection_Keyed_Sequentially(Responsible_Persons)
   If responsible_persons.count Then
      For Each responsible_person In Responsible_Persons
         columnview1.Add(x, 0)
         columnview1[x][0] = responsible_person!surname & ", " & responsible_person!firstname
         columnview1[x][1] = Trim(responsible_person!street1 & " " & responsible_person!street2)
         columnview1[x][2] = responsible_person!town
         Inc x
      Next
      If responsible_person.count = 1 Then
         Responsible_Person_Select()
      Else
         lblmeasure.font = columnview1.Font
         modUtil.Columnview_Columns_Set_Size(columnview1, lblmeasure)
         With columnview1
            .Visible = True
            .Raise
         End With
      End If
   Endif
   Dec Application.Busy
   
End

Public Sub Responsible_Person_Select()
   '-----------------------------------------------------------------------------
   'User has clicked on a name in the list, accept this as the responsible person
   '-----------------------------------------------------------------------------
   
   timer1.stop
   pk_view_responsible_persons = columnview1.Item.key
   bexit = True
   txtSearch.text = ""
   txtResponsiblePerson.text = responsible_persons[pk_view_responsible_persons]!wholename
   With txtStreet1
      .text = responsible_persons[pk_view_responsible_persons]!street1
      .Enabled = False
   End With
   With txtStreet2
      .text = responsible_persons[pk_view_responsible_persons]!street2
      .Enabled = False
   End With
   With txtTown
      .text = responsible_persons[pk_view_responsible_persons]!town
      .Enabled = False
   End With
   With txtState
      .text = responsible_persons[pk_view_responsible_persons]!state
      .Enabled = False
   End With
   With txtPostcode
      .text = responsible_persons[pk_view_responsible_persons]!postcode
      .Enabled = False
   End With
   fk_responsible_person = responsible_persons[pk_view_responsible_persons]!fk_person
   With txtContactNumber
      .text = Responsible_person_Get_Comms(fk_responsible_person) 'get the latest comms
      .Enabled = False
   End With
   
   '   If Len(txtContactNumber.text) Then
   teResponsiblePersonNotes.SetFocus
   '   Else
   '      txtContactNumber.SetFocus
   '   End If   
   bexit = False
   
End

Public Sub Columnview1_KeyPress()
   '---------------------------------------
   'User hits <Enter key> on the columnview
   'trigger the accept code
   '---------------------------------------   
   
   If Key.code = Key.Return Then
      Columnview1_DblClick
   End If
   
End

Public Sub Columnview1_DblClick()
   'fixme fix this code
   
   columnview1.MoveCurrent
   Select Case Last.tag.tag
      Case "search"
         responsible_person = responsible_persons[columnview1.Item.key]
         Responsible_Person_Select()
      Case "staff can view"
         Staff_May_View_Select(staff[columnview1.Item.key])
   End Select
   columnview1.Visible = False
Catch
   Return
   
End

Public Sub ListView1_KeyPress()
   '------------------------------------------------------------------
   'User has scrolled onto the popup list and his a key, allow <enter>
   'to accept the line contents to the edit area
   '------------------------------------------------------------------
   
   If Key.code = Key.Return Then
      listview1_DblClick
   End If
   
End

Public Sub listview1_DblClick()
   
   listview1.MoveCurrent()
   Select Case Last.tag.tag
      Case "search"
         Responsible_Person_Select
         txtContactNumber.SetFocus
      Case "suburb"
         town = Towns[listview1.Item.key]
         Suburb_Select
         txtContactNumber.SetFocus
      Case "country"
         Country_Select
         txtContactNumber.SetFocus
   End Select
   listview1.Visible = False
Catch
   Return
   
End

Public Sub EditArea_Clear()
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_inner)
   modEditAreaHelpers.EditArea_Clear(Vbox_ResponsiblePerson)
   Try teConfidentialHistory.Font.size = teHistoryConfidential_font_size  'could be zero
   teResponsiblePersonNotes.text = ""
   lvwAllowedRoles.Clear
   fk_staff_may_view_confidential = 0
   fk_responsible_person = 0  'defaults
   pk_socialhistory = 0
   fk_consult = 0
   fk_progressnote = 0
   existing_confidential_notes = ""
   fk_progressnote_confidential = 0
   country_code = "AU"         'the default
   bExit = False
   cmbRoles.index = -1
   restrict_view_to_roles = New Collection
   chkDoNotPrintConfidential.value = True
   HBox_teConfidentialHistory.enabled = False  'these next 5 hold the confidential information
   HBox_DoNotPRINT.enabled = False
   HBox_ViewByDr.enabled = False
   HBox_SelectRole.enabled = False
   HBox_RolesPermitted.enabled = False
   tbAddrole.Enabled = False  
   bEditing = False   
   EditArea_Notify_Data_Change(False)
   
End

Public Sub EditArea_TextBox_KeyRelease()
   
   Select Case Last.tag
      Case "search"
         timer_count = 0
         timer1.Start()
      Case "staff can view"
         Staff_Find(Last)
      Case "suburb"
         Suburb_get()
      Case "country"
         Country_Find()
   End Select
   
End

Public Sub Timer1_Timer()
   
   Inc timer_count          'constantly being zero'd by editarea_keypress until user pauses typign
   If timer_count > 2 Then  'arbitary should be user configured depending on typing speed FIXME
      timer1.Stop
      responsible_person_Find()
   End If
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   Select Case key.code
      Case key.Down
         If Listview1.Visible Then
            ListView1.MoveFirst
            Listview1.SetFocus()
            Listview1.Item.Selected = True
         Endif
         If columnview1.Visible Then
            columnview1.MoveFirst
            columnview1.SetFocus()
            columnview1.Item.Selected = True
         Endif
      Case key.return, key.Tab
         Select Case Last.tag
            Case "social history"
               txtSearch.SetFocus()
            Case "search"
               txtResponsiblePerson.SetFocus()
            Case "name"
               If txtStreet1.text = "" Then
                  txtStreet1.SetFocus
               End If
            Case "street1"
               txtTown.SetFocus() 'skip street2, usually don't have one.
            Case "street2"
            Case "suburb"
               txtContactNumber.SetFocus
            Case "contact number"
               teResponsiblePersonNotes.SetFocus()
            Case "responsible person notes"
               '   tbSave.SetFocus()
         End Select
   End Select
   
End

Public Sub Responsible_Person_Remove()
   
   fk_responsible_person = 0
   bExit = True
   modEditAreaHelpers.EditArea_Clear(VBox_ResponsiblePerson)
   chkDoNotPrintConfidential.value = True
   txtStreet1.Enabled = True  
   txtStreet2.Enabled = True
   txtTown.Enabled = True  
   txtContactNumber.Enabled = True
   txtCountry.Enabled = True
   txtPostcode.Enabled = True 
   txtState.Enabled = True 
   bExit = False
   If Parent_Form = "FPatientBillingCards" Or Parent_Form = "FRecordVisit" Then
      EditArea_Notify_Data_Change(False)
   Endif
   listview1.Visible = False
   
End

Public Sub EditArea_TextBox_Change()
   
   If Bexit Then Return
   EditArea_Notify_Data_Change(True)
   Select Case Last.tag
      Case "name"                                           'no name = no keys or data
         If Trim(Last.text) = "" Then
            Responsible_Person_Remove()
            listview1.Visible = False
         Else
            fk_responsible_person = 0
         End If
      Case "staff can view"
         If Trim(Last.text) = "" Then
            fk_staff_may_view_confidential = 0
         Endif
      Case "search"
         If Trim(Last.text) = "" Then
            Responsible_Person_Remove()
            
         Else
            If fk_responsible_person Then
               If Message.Question("Do you want to remove the current responsible person?", "Yes", "No") = 2 Then
                  txtResponsiblePerson.SetFocus
                  Return   
               End If   
               modEditAreaHelpers.EditArea_Clear(VBox_ResponsiblePerson)
               If Parent_Form = "FPatientBillingCards" Then
                  EditArea_Notify_Data_Change(False)
               Endif
               fk_responsible_person = 0  'defaults
            Endif
         End If
         timer_count = 0 'once count = 3 then timer1_timer fires , ie user stopped typing
   End Select
   
End

Public Sub EditArea_TextBox_Lostfocus()
   
   Last.BackGround = Color.white
   timer1.Stop()
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   listview1.Visible = False
   columnview1.Visible = False
   Select Case Last.tag
      Case "search", "country", "suburb", "staff can view"
         With ListView1
            .top = Last.Parent.Parent.top + Last.Parent.height
            .left = Last.Parent.Left
            .width = txtTown.Width
            .Raise
            .tag = Last
         End With
         With columnview1
            .top = Last.Parent.Parent.top + Last.Parent.height
            .left = Last.Parent.Left
            .width = Last.width
            .Raise
            .tag = Last
         End With
         If Last.tag = "search" Then
            If fk_responsible_person Then
               If Message.Question("Do you want to remove the current responsible person?", "Yes", "No") = 2 Then
                  txtResponsiblePerson.SetFocus
                  Return 
               End If      
            Endif
            Responsible_Person_Remove
         Endif
         
   End Select
   
End

Public Sub Suburb_Select()
   '-------------------------------------------------------------------
   'Select the suburb. The Town collection is set in listview1_dblclick
   '-------------------------------------------------------------------
   
   bExit = True
   txtTown.text = Town!town
   txtState.text = Town!state
   txtPostcode.text = Town!postcode
   fk_town = Town!pk
   bExit = False
   
End

Public Sub Suburb_get()
   '-------------------------------------------------
   'Get the suburb where the responsible person lives
   '-------------------------------------------------
   
   With listview1
      .Clear
      .Visible = False
   End With
   If Trim$(txtTown.text) = "" Then Return
   Inc Application.Busy
   Towns = modContactsDBI.Get_Town(Lower(Trim$(txtTown.text)))
   If Towns.count Then
      For Each town In Towns
         listview1.Add(town!pk, town!town & " " & town!state & " " & town!postcode)
      Next
      If Towns.count = 1 Then
         Suburb_Select()
         txtContactNumber.SetFocus
      Else
         With listview1
            .Visible = True
            .Raise
            .tag = txtTown
         End With
      End If
   End If
   Dec Application.Busy
   
End

Public Sub Country_Find()
   '----------------------------------------------------------
   'Allocate country if the default Australia is not acceptable
   '-----------------------------------------------------------
   
   Dim country As Collection
   
   With listview1
      .Visible = False
      .Clear
   End With
   If Trim$(txtCountry.text) = "" Then Return
   countries = modContactsDBI.country_get(Lower(Trim$(txtCountry.text)))
   If countries.count Then
      For Each country In countries
         listview1.Add(country!pk, country!country)
      Next
      If countries.count = 1 Then
         Country_Select
      Else
         listview1.Visible = True
         listview1.Raise
         listview1.tag = txtCountry
      End If
   Else
      listview1.Visible = False
   End If
   
End

Public Sub Country_Select()
   '--------------------------------------------
   'User selecting a country from the popup list
   '--------------------------------------------
   
   bExit = True
   Listview1.MoveCurrent()
   txtCountry.text = Countries[Listview1.Item.key]!country
   country_code = Countries[Listview1.Item.key]!country_code
   Listview1.Visible = False
   bExit = False
Catch
   bexit = False
   Return
   
End

Public Sub Form_Leave()
   
   timer1.Enabled = False
   
End

Public Sub Form_Resize()
   
   If listview1.Visible Then
      listview1.width = txtTown.Width
   Endif
   If columnview1.Visible Then
      columnview1.width = txtTown.Width 'fixme.
   Endif
   
End

Public Sub Staff_Find(txtbox As Textbox)
   '----------------------------------------------------------------
   'Show multiple staff members for selection from vwStaffInClinics
   'User can choose the person to allocate the task to
   'columns: 0=surname 1=firstname 2=sex 3=street 4= town/postcode
   'Fixme put this in a central location, used all over the place
   'e.g FPsychoSocialHistory
   '----------------------------------------------------------------
   
   Dim iLastStaff_Member_pk As Integer
   Dim x As Integer
   Dim staff_member As Collection
   
   With columnview1
      .Clear()
      .Columns.count = 3
      .Visible = False
   End With
   If Trim(txtbox.text) = "" Then Return
   staff = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get(Trim(txtbox.text)))
   iLastStaff_Member_pk = -1
   For Each staff_member In staff
      columnview1.Add(x, 0)
      columnview1[x][0] = staff_member!title & " " & staff_member!wholename
      columnview1[x][1] = staff_member!occupation
      columnview1[x][2] = staff_member!branch
      Inc x
   Next
   lblmeasure.font = columnview1.Font
   modUtil.Columnview_Columns_Set_Size(columnview1, lblmeasure)
   If Staff.count Then
      Columnview1.Visible = True
      columnview1.Visible = True
      Columnview1.Raise
      columnview1.tag = txtbox
   End If
   
End

Public Sub Staff_May_View_Select(sm As Collection)
   '---------------------------------------------------
   'User is selecting a staff member who alone can view
   'the social history
   '---------------------------------------------------
   
   Try txtStaffMayView.text = sm!title & " " & sm!wholename
   fk_staff_may_view_confidential = sm!fk_staff
   columnview1.Visible = False
   lvwAllowedRoles.Clear
   cmbRoles.index = -1
   
End

Public Sub tbAddrole_Click()
   '-----------------------------------------------------------------------
   'User has decided to add a role allowed to view the confidential history
   'Remove any staff name previous allocated as can't do both
   '-----------------------------------------------------------------------
   
   txtStaffMayView.text = "" ' trigges EditArea_TextBox_Change and remove key 
   
   If Not restrict_view_to_roles.Exist(roles[cmbRoles.index]!pk_role) Then
      lvwAllowedRoles.Add(lvwAllowedRoles.count, cmbRoles.text)
      restrict_view_to_roles.Add(["pk_role": roles[cmbRoles.index]!pk_role], restrict_view_to_roles.count)
   Endif
   cmbRoles.index = -1    
   tbAddrole.SetFocus
   
End

Public Function ProgressNotes_Create_Normal() As String
   '---------------------------------------------- 
   'Create some html to put into the progressnotes
   '---------------------------------------------- 
   
   Dim pn As String
   Dim sHeading As String = "Social History"
   
   If Parent_Form = "FPatientBillingCards" Then sHeading = "Next of Kin Details"
   
   pn = "<B>" & sHeading   
   If bEditing Then
      pn &= " (changed)"
   Else
      pn &= " taken"
   Endif
   pn &= "</B><BR>"
   If Parent_Form <> "FPatientBillingCards"  'secretarial staff cannot access the social history text, only responsible person
      pn &= Trim(teSocialHistory.text)
      If Trim(teConfidentialHistory.text) <> "" Then
         pn &= "Some confidential psycho-social history was added but viewing this is restricted to any authorised users and only in the psycho-social history of the program.<BR>"
      Endif
      pn &= "<BR>"
   End If   
   If Trim(txtResponsiblePerson.text) <> "" Then
      pn &= "The next of kin/responsible person is noted to be " & Trim(txtResponsiblePerson.text) & "."
   Endif
   If Trim(teResponsiblePersonNotes.text) <> "" Then
      pn &= " Notes: " & Trim(teResponsiblePersonNotes.text)
   Endif
   Return pn   
   
End

Public Function ProgressNotes_Confidential_Create() As String
   '-----------------------------------------------------------------------------
   'Creates progress notes for text which is confidential and will only be viewed
   'by designated user or role
   '------------------------------------------------------------------------------
   
   Dim pn As String
   
   pn = "<B>Confidential psycho-social notes"
   If existing_confidential_notes <> "" And Trim(teConfidentialHistory.text) = "" Then 'there were notes, but now deleted
      pn &= " have been deleted by " & modDBConnect.currentUser!wholename & "</B><BR>"
      pn &= "<I>:" & existing_confidential_notes & "</I><BR>"
   Else                                                                             
      If existing_confidential_notes <> "" Then                                        'note before this consult did exist
         If Trim(Lower(existing_confidential_notes)) <> Trim(Lower(teConfidentialHistory.text)) Then '?have they changed?
            pn &= " (changed)</B>"
         Endif
      Else                                                                             ' no previous existing psycho-social notes
         pn &= " (New)</B>"
      Endif
      pn &= "<BR>"
      pn &= Trim(teConfidentialHistory.text)
   End If 
   
   Return pn
   
End

Public Sub tbRemoveResponsiblePerson_Click()
   
   If Message.Question("Do you want to remove the current responsible person?", "Yes", "No") = 2 Then
      txtResponsiblePerson.SetFocus
      Return 
   End If      
   Responsible_Person_Remove
   
End

Public Sub EditArea_Buttons_Click()
   
End
