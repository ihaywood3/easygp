' Gambas module file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

Public Sub FamilyHistory_Get_Relationship(relationship As String) As Result

   '----------------------------------------------------
   'Gets a list of relationships eg Brother, Husband etc
   '----------------------------------------------------
   Dim sql As String
   Dim $Result As Result

   sql = "SELECT * FROM common.lu_family_relationships where Lower(relationship) LIKE $$%"
   sql &= Lower(relationship) & "%$$"
   $Result = modDBConnect.exec_query(sql)
   Return $Result

End

Public Function FamilyHistory_Get_Relationships() As Collection

   Return modDBConnect.exec_query_collection("Select * from common.lu_family_relationships ORDER BY relationship")

End

Public Function FamilyHistory_Get(pk_patient As Integer) As Collection
   '-------------------------------------------------------------------------
   'Selects all this patients family members and their conditions from a view
   'the only unique row identifier from the view is the condition_pk
   'There could 1 or many rows per person
   'i.e           person1      condition 1
   '              person1      condition 2
   '              person2      condition 1
   '-------------------------------------------------------------------------

   Dim sql As String

   sql = "SELECT * FROM clin_history.vwFamilyHistory "
   sql &= "WHERE fk_patient =" & pk_patient & " AND link_deleted = FALSE AND condition_Deleted = FALSE"
   Return modDBConnect.exec_query_collection(sql)

End

' Public Function FamilyHistory_Save(currentconsult As Cconsult, pk_member As Integer, member As Collection, pk_condition As Integer, condition As Collection, row_key_member As Integer, row_key_condition As Integer) As Integer
'    '-------------------------
'    'Save or update the member
'    '-------------------------
'    ' pk_member = Member_Save(currentconsult, pk_member, member, row_key_member)
'
'    pk_member = Member_Save(currentconsult, member, row_key_member)
'    '----------------------------
'    'Save or update the condition
'    '----------------------------
'    condition!fk_member = pk_member
'    pk_condition = Condition_Save(currentconsult, pk_condition, condition, row_key_condition)
'    '----------------------------------------------------
'    'link the member to the patient if not already linked
'    '-----------------------------------------------------
'    Link_Member_Patient(pk_member, currentconsult!patient!fk_patient)
'    Return pk_member
'
' End

' Public Function Member_Save(currentconsult As Cconsult, member As Collection, row_key_member As Integer) As Integer
'    '---------------------------------
'    'Save or update the current member
'    'Check if the occupation exists
'    '---------------------------------
'
'    Dim R As Result
'    Dim fk_member As Integer
'
'    ' If member!fk_occupation = 0 Then  'could be null ? if so will crash
'    If member!occupation <> "" Then
'       R = modDBConnect.exec_query("Select * from common.lu_occupations WHERE occupation LIKE $$" & member!occupation & "$$")
'       If R.count Then
'          member!fk_occupation = R!pk
'       Else
'          member!fk_occupation = modCommonDBI.Occupation_Save(member!occupation)
'       Endif
'    Endif
'    ' End If
'    Try Member.Remove("occupation")
'
'    If IsNull(member!fk_member) Then
'       member!fk_consult = currentconsult.GetPK()
'       Return modDBConnect.insert("clin_history.family_members", Member)
'    Else
'       '---------------------------------------------------------------------------------------------------
'       'if an existing record, update, note pk_condition is just a unique key relating to the view row here
'       '---------------------------------------------------------------------------------------------------
'       fk_member = member!fk_member
'       member.remove("fk_member")
'       If modDbConnect.update("clin_history.family_members", currentconsult!family_history[row_key_member], member, "fk_member") Then
'          '------------------------------------------------------------------------
'          'Not a new social history, edit the record
'          'what was changed, for auditing purposes this will be hidden
'          '------------------------------------------------------------------------
'          '   Message.Info("Richard - stop program and check here")
'       End If
'    End If
'    Return fk_member
'
' End

' Public Function Condition_Save(currentconsult As Cconsult, old_pk As Integer, condition As Collection, view_key As Integer) As Integer
'    '--------------------------------------------------------------------------------------
'    'Saves or updates a family members condition
'    'note pk_condition is the unique view key name as it was the only unique row in the view
'    '---------------------------------------------------------------------------------------
'
'    If old_pk < 0 Then
'       condition!fk_consult = currentconsult.GetPK()
'       old_pk = modDBConnect.insert("clin_history.family_conditions", condition)
'    Else
'       condition.Remove("fk_condition")
'       If modDBConnect.update("clin_history.family_conditions", currentconsult!family_history[view_key], condition, "fk_condition") Then ' save to backend and update the collection in RAM too
'          '------------------------------------------------------------------------
'          'Not a new condition, edit the record
'          'what was changed, for auditing purposes this will be hidden
'          '------------------------------------------------------------------------
'          '   Message.Info("Richard - stop program and check here")
'       End If
'    End If
'    Return old_pk
'
' End

' Public Sub Link_Member_Patient(pk_member As Integer, fk_patient As Integer)
'    '-----------------------------------
'    'Links a  family member to a patient
'    '-----------------------------------
'
'    Dim sql As String
'    Dim $Result As Result
'
'    sql = "Select * from clin_history.family_links where fk_member = " & pk_member
'    sql &= " AND fk_patient = " & fk_patient
'    $REsult = modDBConnect.exec_query(sql)
'    If $Result.count = 0 Then
'       sql = "INSERT INTO  clin_history.family_links (fk_member, fk_patient) "
'       "VALUES ("
'       sql &= pk_member & "," & fk_patient & ")"
'       $Result = modDBConnect.exec_query(sql)
'    End If
'
' End

Public Function Condition_Delete(currentconsult As CConsult, condition As Collection) As Boolean
   '---------------------------------------------------
   'Deletes a single condition for a family member
   'returns True if deletion was a success
   '
   'Caveat on this is:
   '1: code is unproven to work (ie the return bit)
   '
   'Plus note:
   'clin_history.data_FH_Conditions contains conditions
   'for a particular family member which could be
   'shared over any number of patient records where
   'they share that family member.
   'Under the current database structure if you mark
   'a condition for the family member deleted
   'it will disappear from ALL OTHER FAMILY MEMBER
   'RECORDS. This is fixable in the future if necessary
   'fixme the audit trail.
   'old routine to be updated
   '---------------------------------------------------

   Dim sql As String
   ' Dim pn As New cProgressNote
   ' Dim sql As String
   '
   ' pn.fk_consult = audit.fk_consult
   ' pn.fk_section = gvar.ClinicalNotesSection_FamilyHistory
   ' pn.problem = "Family History"
   ' pn.notes &= "<B>condition was deleted: </B>"
   ' pn.notes &= audit.data_summary
   ' Debug pn.notes
   ' modConsultDBI.ProgressNote_save(pn)
   '
   sql = "Update clin_history.family_conditions SET deleted = TRUE where pk = " & condition!fk_condition
   modDBConnect.exec_query(sql)
   ' Audit_Save(audit)
   modDBConnect.CommitTrans()
   Return True 'fixme

End

Public Function FamilyHistory_Condition_Delete(currentconsult As CConsult, condition As Collection) As Boolean
   '---------------------------------------------------
   'Deletes a single condition for a family member
   'returns True if deletion was a success
   '
   'Caveat on this is:
   '1: code is unproven to work (ie the return bit)
   '
   'Plus note:
   'clin_history.data_FH_Conditions contains conditions
   'for a particular family member which could be
   'shared over any number of patient records where
   'they share that family member.
   'Under the current database structure if you mark
   'a condition for the family member deleted
   'it will disappear from ALL OTHER FAMILY MEMBER
   'RECORDS. This is fixable in the future if necessary
   'fixme the audit trail.
   'old routine to be updated
   '---------------------------------------------------
   '  Dim pn As New cProgressNote
   '  Dim sql As String
   '
   '  pn.fk_consult = audit.fk_consult
   '  pn.fk_section = gvar.ClinicalNotesSection_FamilyHistory
   '  pn.problem = "Family History"
   '  pn.notes &= "<B>condition was deleted: </B>"
   '  pn.notes &= audit.data_summary
   '  Debug pn.notes
   '  modConsultDBI.ProgressNote_save(pn)
   '  sql = "Update clin_history.data_fh_conditions SET deleted = TRUE where pk = " & condition.pk_condition
   '  modDBConnect.BeginTrans()
   '  modDBConnect.exec_query(sql)
   ' ' Audit_Save(audit)
   '  Return modDBConnect.CommitTrans_New()
   '

End

' Public Function FamilyHistory_Member_Delete(member As cFamilyMember) As Boolean
'    '----------------------------------------------------
'    'currently marks a link record as deleted, may change
'    'need to fix up a proper mechanism of return
'    'for when the transaction fails.
'    'old routines to be updated
'    '----------------------------------------------------
'    Dim sql As String
'
'    sql = "Update clin_history.data_fh_links "
'    sql &= "SET deleted = TRUE "
'    sql &= "WHERE pk = " & member.fk_link
'    modDbConnect.BeginTrans()
'    modDBConnect.exec_query(sql)
'    Return modDBConnect.CommitTrans_new()
' End

