' Gambas module file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

'FIXME: pks should not be hard coded but gathered from backend.
'FIXME: Ideally, the definitions would be user configurable and fetched from backend too
Private progressnote_searches As Collection[] = [["re1": "bp ?[=:;] ?([0-9]{2,3}/[0-9]{2,3})", "pretty": "<span style=\"color: #1414FF; text-decoration:underline;\">blood pressure: &1 mmHg</span>  ",
   "re2": "blood pressure: ?([0-9]{2,3})/([0-9]{2,3})", "pk": 1],
   ["re1": "h ?[=:;] ?([0-9\\.]{1,5})", "pretty": "<span style=\"color: #1414FF; text-decoration:underline;\">height: &1 cm</span>  ", "re2": "height: ?([0-9\\.]{1,5})", "pk": 4],
   ["re1": "\\bw ?[=:;] ?([0-9\\.]{1,5})", "pretty": "<span style=\"color: #1414FF; text-decoration:underline;\">weight: &1 kg</span>  ", "re2": "[^\\-]weight: ?([0-9\\.]{1,5})", "pk": 2],
   ["re1": "pf ?[=:;] ?([0-9\\.]{1,5})", "pretty": "<span style=\"color: #1414FF; text-decoration:underline;\">peak flow: &1 L/min</span>  ", "re2": "peak flow: ?([0-9\\.]{1,5})", "pk": 3],
   ["re1": "wa ?[=:;] ?([0-9\\.]{2,3})", "pretty": "<span style=\"color: #1414FF; text-decoration:underline;\">waist circumference: &1 cm</span>  ", "re2": "waist circumference: ?([0-9\\.]{2,3})", "pk": 5],
   ["re1": "hi ?[=:;] ?([0-9\\.]{2,3})", "pretty": "<span style=\"color: #1414FF; text-decoration:underline;\">hip circumference: &1 cm</span>  ", "re2": "hip circumference: ?([0-9\\.]{2,3})", "pk": 6]]
'["re1": "bsl ?[=:;] ?([0-9\\.]{1,4})[^0-9]", "pretty": "<b>blood sugar: &1 mM</b>", "re2": "blood sugar: ?([0-9\\.]{1,4})[^0-9]", "pk": ?],

Public Sub Measurement_Default_Save(currentconsult As Cconsult, measurement_default As Collection) As Integer
   
   measurement_default!fk_patient = currentconsult!patient!fk_patient
   measurement_default!pk = modDBConnect.insert("clin_measurements.patients_defaults", measurement_default)
   modDBConnect.CommitTrans()
   Return measurement_default!pk
   
End

Public Sub measurement_Default_Mark_Deleted(pk_default As Integer)
   '----------------------------------------------------
   'Fclinical.InboxResults_Click()
   'User has deleted one of the defaults for the patient
   '----------------------------------------------------
   
   modDBConnect.exec_query("Update clin_measurements.patients_defaults set deleted = True WHERE pk = " & pk_default)
   
End

Public Sub Measurements_Default_Save(measurement_default As Collection) As Integer
   '--------------------------------------------------------------
   'FIXME: not complete
   'Saves types of measurements to be made available for a patient
   '--------------------------------------------------------------
   
   If IsNull(measurement_default!pk) Then
      measurement_default!pk = modDBConnect.insert("clin_measurements.patients_defaults", measurement_default)
   End If
   
End

Public Sub Measurement_Types_Get_For_Patient(pk_patient As Integer) As Collection
   '------------------------------------------------------------------
   'Gets a list of the types of measurements recorded for the patient
   'and display in the measurements list IN ADDITION TO THE DEFAULT
   'ones ie BP, height, weight
   '-----------------------------------------------------------------
   
   Dim sql As String
   Dim $Result As Result
   
   sql = "select fk_lu_type, name_abbreviated from clin_measurements.vwPatientsDefaults "
   sql &= "WHERE fk_patient = "
   sql &= pk_patient
   $Result = modDBConnect.exec_query(sql)
   ' For Each $Result
   '    lvw.Add($Result!fk_lu_type, $Result!name_abbreviated)
   ' Next
   '
   
End

Public Function Make_Graph(fk_patient As Integer, loinc As String, heading As String, H As Integer, W As Integer, font_size As Integer, Optional line_type As String = "unique", Optional number_months As Integer) As Collection
   '------------------------------------------------------
   'Creates a graph - currrently just returns the picture
   '------------------------------------------------------
   
   Dim Graph_Data As Collection
   
   Graph_Data = modPlot.Graph_And_Values_Get(fk_patient, loinc, heading, H, W, font_size, line_type, number_months)
   If IsNull(Graph_Data!graph_filename) Then
      Graph_Data!name = heading
   End If
   Return Graph_Data
   
End

Public Function Get_Types() As Collection
   '---------------------------------------------------------------
   'Returns a collection of measurement types eg BP, height, weight
   'CALLED BY: FMain.const.init()
   '----------------------------------------------------------------
   
   Return modCache.Get("clin_measurements.lu_type")
   
End

Public Sub measurement_Defaults_Get(fk_patient As Integer) As Collection
   '-------------------------------------------------------------
   'Get the the default measurements to be shown for this patient.
   'This is in addition to the usual eg BP
   'The one with defalt = true is shown as the default graph
   '-------------------------------------------------------------
   
   Dim sql As String
   
   sql = "Select * from clin_measurements.patients_defaults where fk_patient =" & fk_patient & " AND deleted = False"
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Sub Measurement_Types_Defaults_Get(fk_patient As Integer) As Collection
   '---------------------------------------------------------------
   'Gets the default measurement types for display for this patient
   'currently not used, decide if use or discard
   '---------------------------------------------------------------
   
   Dim sql As String
   
   sql = "select pk_patients_defaults, fk_lu_type, name_abbreviated from clin_measurements.vwPatientsDefaults "
   sql &= "WHERE fk_patient = "
   sql &= fk_patient
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Measurements_get_loinc(fk_patient As Integer, loinc As String, Optional limit As Integer = 0, sort_dir As String = "DESC") As Collection
   
   Dim sql As String
   
   sql = "Select distinct pk_observations, observation_date as date, value as measurement,reference_range from documents.vwGraphableobservations where fk_patient = "
   sql &= fk_patient & " and loinc = $$" & loinc & "$$ order by observation_date " & sort_dir
   If limit Then sql &= " LIMIT " & limit
   
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Get_Graphable(fk_document As Integer) As Collection
   '---------------------------------------------------------------------------------------------
   'uses fk_document to get a loinc code and names of all graphable observations for the document
   '---------------------------------------------------------------------------------------------
   
   Dim sql As String
   
   sql = "Select * from documents.vwGraphableObservations where fk_document = " & fk_document & " AND value_numeric is not null"
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Sub Measurements_Get_Available(fk_patient As Integer) As Collection
   '----------------------------------------------
   ' fetches available measurement types
   ' fixme - do union query with height/weight/bp
   '----------------------------------------------
   
   Dim sql As String
   
   sql = "select distinct identifier, loinc as pk_loinc from documents.vwGraphableObservations where fk_patient =" & fk_patient
   '   sql &= fk_patient & " And loinc <> '' order by identifier"
   
   ' sql = "select * from clin_measurements.vwMeasurements "
   ' sql &= "WHERE fk_patient = " & fk_patient
   ' sql &= " ORDER BY fk_type,consult_date  Desc"
   ' Return modDBConnect.exec_query_collection(sql)
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Measurement_Get_Latest(measurements As Collection, fk_type As Integer) As Collection
   '-------------------------------------------------------------------------
   ' Returns the last measurement of fk_type as as string if exists
   ' otherwise returned string is empty
   'The measurements collection is in date order - the last one is returned
   ' Public Const Measurement_BP As Integer = 1
   ' Public Const Measurement_Weight As Integer = 2
   ' Public Const Measurement_PeakFlow As Integer = 3
   ' Public Const Measurement_Height As Integer = 4
   '--------------------------------------------------------------------------
   
   Dim M As Collection
   Dim m2 As Collection
   
   If measurements.Count = 0 Then Return Null
   For Each m In measurements
      If m!fk_type = fk_type Then
         If Not IsNull(m!measurement) Then m2 = m
      End If
   Next
   If IsNull(m2) Then Return Null
   m = New Collection
   If fk_type = const.Measurement_BP
      m!data = BP_Format(m2!measurement)
   Else
      m!data = m2!measurement
   End If
   m!date = Format(M2!consult_date, "dd/mm/yyyy")
   Return m
   
End

Public Function Measurements_Get(fk_patient As Integer) As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clin_measurements.vwMeasurements where fk_patient = " & fk_patient)
   
End

Public Function BP_Format(M As Variant) As String
   '--------------------------------------------
   'expects a number, returns a formatted string
   'number = systolic *1000 + diastolic
   '--------------------------------------------
   
   Dim systolic As Integer
   Dim diastolic As Variant
   Dim sysd As Integer = M
   
   systolic = sysd Div 1000
   diastolic = sysd Mod 1000
   Return Str$(Systolic) & "/" & Str$(Diastolic)
   
End

Public Sub ProgressNote_Parse_For_Measurement_Keypress(notes As String) As String
   'Parse progressnote for measurements "the first time" i.e. as the user is typing
   'Makes the measurements bold and expands some of the abbrevations
   'However does NOT do any backend saving
   
   Dim re As Regexp
   Dim s1 As String
   Dim i As Collection
   
   For Each i In progressnote_searches
      re = New Regexp(notes, i!re1, Regexp.Caseless)
      If re.Offset > -1 Then
         s1 = Replace$(i!pretty, "&1", re.SubMatches[1].Text)
         Return Left$(notes, re.Offset) & s1 & Right$(notes, - (re.Offset + Len(re.Text)))
      Endif
   Next
   Return notes
   
End

Public Sub ProgressNote_Parse_For_Measurement_Save(cons As CConsult, notes As String)
   '----------------------------------------------------------------------------
   'Parse progress note for any measurements, extract these, and save to backend
   'look for eg 'blood pressure=' then the next ascii 32 after that
   '                              the measurement if the bit inbetween
   'Just save its value, unless a BP in which case split into two and recombine
   '
   'Sample of some parsable html:
   '       "<a href='blood pressure'>blood pressure=120/80 mmhg</a><br />"
   '       "<a href='weight'>weight=99 kg</a><br />"
   '       "<a href='height'>height=178 cm</a><br />"
   '       "<a href='blood sugar'>blood sugar=5.6 mmole</a></p><p>"
   '       "<a href='blood pressure'>blood pressure=180/100 mmhg</a>"
   'As a progress note page could be saved multiple times during any consult due
   'to user invervention - eg actively pressing F12 or clicking save
   'check the measurement is not already saved during this consultation.
   '----------------------------------------------------------------------------------
   
   Dim i As Collection
   Dim re As Regexp
   Dim remain As String
   Dim measurements As New Collection
   Dim measurement As Collection
   
   For Each i In progressnote_searches
      remain = notes
      re = New Regexp(remain, i!re2, Regexp.Caseless)
      Do Until re.Offset = -1
         Debug "found: " & re.Text & " at " & re.Offset
         measurement = New Collection
         measurement!fk_type = i!pk
         If measurement!fk_type = const.Measurement_BP Then
            ' BPs are encoded into a single value by multiplying systolic by 1000 and adding diastolic
            measurement!measurement = (Val(re.SubMatches[1].Text) * 1000) + Val(re.SubMatches[2].Text)
         Else
            measurement!measurement = Val(re.SubMatches[1].Text)
         End If
         measurements.Add(measurement, i!pk)
         remain = Right$(remain, - (re.Offset + Len(re.Text)))
         re = New Regexp(remain, i!re2, Regexp.Caseless)
      Loop
   Next
   Debug notes
   Measurements_Save(cons, measurements)
   
End

Public Sub Measurements_Save(cons As CConsult, measurements As Collection)
   '----------------------------------------------------------------------
   'saves any outstanding values for the patient's measurements
   'Use the sledge hammer approach
   'just delete all measurements for this consult and re-save the new ones
   'I tried it the 'fancy way', checking the new-ones against what was
   'already save and not worth the complications
   '----------------------------------------------------------------------
   
   Dim m As Collection
   
   modDBConnect.exec_query("Delete  from clin_measurements.measurements where fk_consult = " & cons.GetPK())
   For Each m In Measurements
      m!fk_consult = cons.GetPK()
      m!time_noted = Format(Time(Now()), "hh:nn:ss") 'yes nn= mins cause mm=months
      Measurement_Save(m)
   Next
   
End

Public Sub Measurement_Save(m As Collection) As Integer
   '-------------------------
   'Save a single measurement
   '-------------------------
   
   If m!pk Then
      Message.info("Richard in measurements ?bug here")
   Else
      'New measurement
      m!pk = modDBConnect.insert("clin_measurements.measurements", m)
   End If
   Return m!pk
   
End

Public Sub Run_Measurement_Fix(ProgressNotes As Collection, fk_patient As Integer)
   'temporary routine for Richard to clean up his progress note measurments fucked up during developement
   'temp for me to fix measurements fucked up during development.
   
   Dim pn As Collection
   Dim charpos As Integer
   Dim sPattern As String
   Dim MT As Collection
   Dim slashpos As Integer
   Dim systolic As String
   Dim diastolic As String
   Dim measurement As Collection
   Dim measurements As New Collection
   Dim measurement$ As String
   Dim sHtml As String
   Dim bits As String[]
   Dim existing_measurements As Collection
   
   modDBConnect.BeginTrans()
   existing_measurements = modDBConnect.exec_query_collection("select * from clin_measurements.vwMeasurements where fk_patient =" & fk_patient)
   For Each measurement In existing_measurements
      modDBConnect.exec_query("Delete from clin_measurements.measurements where pk=" & measurement!pk_measurement)
   Next
   
   For Each pn In ProgressNotes
      For Each MT In const.Measurement_Types
         '----------------------------------------------------------
         'For each type of measurement, the key = eg BP, BSL, Height
         'as represented by const.measurement_type
         'e.g  const_measurement_BSL
         '----------------------------------------------------------
         sHtml = pn!notes
         sPattern = ">" & MT!name_full & "="
         charpos = -1
         '----------------------------------------------------------
         'Now, loop through the entire html in the progress note for
         'just the single type of measurement
         '-----------------------------------------------------------
         Do Until charpos = 0
            charpos = InStr(shtml, sPattern)
            If charpos Then
               sHtml = Right(shtml, Len(shtml) - charpos - Len(sPattern) + 1)
               charpos = InStr(shtml, " ")             'found the space after measurement
               measurement$ = Left(shtml, charpos - 1)  'the measurement
               '-------------------------------------------------------------------------------------
               'Developmental code bugs had bad parsing, so e.g bp could end up in html as bp=-120/70
               'fix this
               '--------------------------------------------------------------------------------------
               If InStr(measurement$, "-") Then          'if is a - before the measurement
                  measurement$ = Replace$(measurement$, "-", "")
                  pn!notes = Replace(pn!notes, "-" & measurement$, measurement$)
                  modDBConnect.update("clin_consult.progressnotes", Null, ["pk": pn!pk_progressnote, "notes": pn!notes])
               Endif
               measurement = New Collection
               measurement!fk_type = MT!pk
               measurement!fk_consult = pn!fk_consult
               bits = Split(pn!consult_date, " ")
               Try bits = Split(bits[1], ".")        'legacy consult notes imported may not have time in the consult date.
               Try measurement!time_noted = bits[0]
               
               If measurement!fk_type = const.Measurement_BP Then
                  slashpos = InStr(measurement$, "/")
                  systolic = Left(measurement$, slashpos - 1) & "000" 'now e.g 180000
                  diastolic = Right(measurement$, Len(measurement$) - slashpos)
                  measurement!measurement = Val(systolic) + Val(diastolic)
               Else
                  measurement!measurement = Val(measurement$)
               End If
               measurements.Add(measurement, measurements.count)
            End If
         Loop
         
      Next
   Next
   '-----------------------------------------
   'Now finally, re-save these to the backend
   '-----------------------------------------
   For Each measurement In measurements
      measurement!pk = modDBConnect.insert("clin_measurements.measurements", measurement)
   Next
   modDBConnect.CommitTrans()
   
End

Public Function Units_Get_Text() As Collection
   '--------------------------------------------
   'gets the text equivalent of const.units_name
   'IAN FIXME
   '--------------------------------------------
   
   Return modCache.Get("common.lu_units")
   
End

Public Sub Units_Get_Types(cmb As ComboBox)
   
   Dim i As Collection
   
   For Each i In modCache.Get("common.lu_units")
      cmb.Add(i!full_text, i!pk)
   Next
   
End

Public Function Get_Lipids(fk_patient As Integer) As Result
   '--------------------------------------------
   'Maybe a bad thing, but a one off union query
   'const.Loinc_TotalCholesterol
   'const.Loinc_Triglycerides
   'const.Loinc_HDL
   'const.Loinc_LDL
   '--------------------------------------------
   
   Dim sql_stem As String
   Dim sql As String
   
   sql_stem = "(Select * from documents.vwObservations where fk_patient = " & fk_patient & " AND loinc = $$%LOINC%$$ "
   sql_stem &= "ORDER BY observation_date DESC LIMIT 1) "
   sql = sql_stem
   sql = Replace(sql, "%LOINC%", const.Loinc_TotalCholesterol)
   sql &= "UNION " & sql_stem
   sql = Replace(sql, "%LOINC%", const.Loinc_Triglycerides)
   sql &= "UNION " & sql_stem
   sql = Replace(sql, "%LOINC%", const.Loinc_HDL)
   sql &= "UNION " & sql_stem
   sql = Replace(sql, "%LOINC%", const.Loinc_LDL)
   sql &= " ORDER BY observation_date DESC"
   Print sql
   
   Return modDBConnect.exec_query(sql)
   
End

Public Function Get_Albumin_Creatinine(fk_patient As Integer, Optional btimedonly As Boolean = False, Optional limit As Integer = 1) As Result
   '----------------------------------------------------------------------
   ' Used in DACC at this point only
   ' Looks for all identifiable LOINCs for this and returns only the latest
   ' FIXME: modify for btimedonly - no current use scenario
   '----------------------------------------------------------------------
   
   Dim sql As String
   
   sql = "Select * from documents.vwObservations where fk_patient  = " & fk_patient & " AND loinc=$$" & const.Loinc_Spot_RUAlbCreatRatio & "$$ AND value_numeric is not null  UNION "
   sql &= "Select * from documents.vwObservations where fk_patient  = " & fk_patient & " AND loinc=$$" & const.Loinc_Spot_ProtCreatRatio & "$$ AND value_numeric is not null UNION "
   sql &= "Select * from documents.vwObservations where fk_patient  = " & fk_patient & " AND loinc=$$" & const.Loinc_Spot_Urine_Albumin & "$$ AND value_numeric is not null UNION "
   sql &= "Select * from documents.vwObservations where fk_patient  = " & fk_patient & " AND loinc=$$" & const.loinc_Timed_UrineAlbumin_Excretion & "$$ AND value_numeric is not null "
   sql &= "ORDER BY observation_date DESC LIMIT " & limit
   Return modDBConnect.exec_query(sql)
   
End

Public Function Get_Loinc_Value(fk_patient As Integer, loinc As String, Optional limit As Integer = 0, Optional sort As String = "ASC") As Result
   'Returns a patients eg, hba1c's - if limit = 1 then this is the last measurement
   'if you want the most recent then sort DESC
   'fixme ?egf's not being imported in path properly if value >^90 for example
   
   Dim sql As String
   
   sql = "Select * from documents.vwObservations where fk_patient = " & fk_patient & " AND loinc = $$" & loinc & "$$ AND value_numeric is not null "
   sql &= "ORDER BY observation_date " & sort
   If limit Then
      sql &= " LIMIT " & limit
   Endif
   Return modDBConnect.exec_query(sql)
   
End

Public Function INRPlans_Get(fk_patient As Integer) As Collection
   'Returns collection representing the INR plan for the patient
   
   Return modDBConnect.exec_query_first("Select * from clin_measurements.vwINRPlans where fk_patient = " & fk_patient) 
   
End

Public Function Warfarin_Last_Dose_Get(fk_patient As Integer) As String
   '------------------------------------------------------------------
   'If a last dose exists then return this.
   'Note in the gui in FINbox when FINR is used the dose_advised now
   'becomes the 'last dose'
   '------------------------------------------------------------------

   Dim R As Result
   
   R = modDBConnect.exec_query(" Select * From clin_measurements.vwINRManagement where fk_patient = " & fk_patient & " ORDER by date_inr DESC LIMIT 1")
   If R.count Then
      Return R!dose_advised
   Endif
   
End

Public Function INR_Get_Todays(fk_patient As Integer) As Collection
   '------------------------------------------------------------------------------------
   'Gets the INR's from document.observations for today 
   'This could be multiple e.g could be adding say a patient's list of home INR's
   '------------------------------------------------------------------------------------
   
   Dim sql As String
   
   Sql = "Select * from clin_measurements.vwINRManagement where fk_patient = " & fk_patient
   sql &= " AND date(date_INR)= '" & Format(Now, "dd/mm/yyyy") & "'::date"
   Return modDBConnect.exec_query_collection(sql) 
   
End

Public Function Warfarin_Get_Last_Lab_INR(fk_patient As Integer) As Collection 
   '---------------------------------------------------------------------------------------
   'Gets the last INR which was sent from a proper lab (ie has a source .ORU or HL7 file
   'clin_measurments.vwLabINR excludes INR documents generated by point-of-service-testing
   'as these have no source_file
   '---------------------------------------------------------------------------------------
   
   Return modDBConnect.exec_query_first("Select * From clin_measurements.vwLabINRs where fk_patient = " & fk_patient & " ORDER BY observation_date DESC LIMIT 1")
   
End

Public Function Previous_INR_Management(fk_patient As Integer, Optional limit As Integer = 20) As Collection
   'Returns all previous INR's for the patient (HL7 downloaded + internal point-of-testing INR's)
   'all of which live in clin_Management.vwINRManagment.

   Dim sql As String
   
   '  sql = "Select * from documents.vwgraphableobservations where loinc = $$" & const.Loinc_INR & "$$"
   'sql &= " AND fk_patient=" & fk_patient
   ' sql &= " ORDER BY observation_date DESC LIMIT " & LIMIT 
   sql = "Select * from clin_measurements.vwINRManagement where fk_patient=" & fk_patient 
   sql &= " ORDER BY date_inr DESC LIMIT " & limit
   Return modDBConnect.exec_query_collection(sql)
   
End
