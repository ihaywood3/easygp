' Gambas module file

' Gambas class file
' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'---------------------------------------------------------------------
' PURPOSE      A module to prepare tabulated results from results
'---------------------------------------------------------------------
' Private pk_document As Integer
' Private Graphable_Items As Collection
' Private currentConsult As CConsult
' Private sHtml As String
' 
' Public Sub _new(cons As CConsult, pk As Integer)
'    pk_document = pk  
'    currentconsult = cons
'    graphable_items = modMeasurementsDBI.Get_Graphable(pk_document)
'    Create_HTML()
' End
' 
' 
' Public Function Get_HTML() As String
'    
'   Return sHTML 
'    
' End
' 
' Public Sub Create_HTML() 
'    
'    'graphable items = collection of graphable loincs corresponding to this request
'    'eg could be fbc, uec, uec + lfts, uec+ lfts + HDL etc, 
'    Dim loinc As String
'    Dim GI As Collection
'    Dim R As Result
'    Dim recordset As Collection 
'    Dim Rs As New Collection 'of results
'    Dim limit As Integer = 50
'    Dim data As String
'    Dim aval As String[]
'    Dim numdate As Integer
'    Dim num_cols As Integer 
'    Dim dates As New String[]
'    Dim a_date As String 
'    Dim numdates As New Integer[]
'    Dim a_row As String 
'    Dim row_labels As New String[]
'    Dim row_label As String 
'    Dim RC As Collection 
'    Dim item_result As Collection 
'    Dim item_results As Collection 
'    Dim all_results As Collection 
'    Dim range_cells As String
'    Dim bHaveRange As Boolean 
'    Dim range_html As String 
'   
'    sHtml = "<HTML><BODY><small>"
'    
'    "<TABLE WIDTH=100% BORDER=1  BORDERCOLOR='#ECECEC'CELLPADDING=0 CELLSPACING=0>%cumulative</TABLE></small></BODY></HTML>"
'    range_html = sHtml
'    '--------------------------------------------------------------------------------
'    'each graphable item's loinc, may have different number of date columns
'    'e.g bilirubin could have been done as part of a LFTS or just as an isolated test
'    '--------------------------------------------------------------------------------
'    all_results = New Collection 
'    For Each GI In graphable_items
'       '---------------
'       'e.g haemoglobin
'       '    haematocrit'
'       '    basophils
'       '    eosinophils
'       '---------------
'       loinc = GI!loinc                 
'       row_labels.Add(GI!identifier)
'       '----------------------------------------------------------
'       'Get all dates these individual loinc's have been performed
'       '----------------------------------------------------------
'       R = modMeasurementsDBI.Get_Loinc_Value(currentconsult!patient!fk_patient, loinc, limit) '1-n results for this loinc e.g for bilirubin
'      
'       If R.count Then
'          item_results = New Collection 
'          num_cols = Max(num_cols, R.count)   'work out the number of columns
'          
'          For Each R
'             a_date = modUtil.DateString_Encode(Format(R!observation_date, "dd/mm/yyyy"))
'             If Not dates.Exist(a_date) Then
'                dates.Add(a_date) 
'             Endif
'             item_result = New Collection 
'             item_result!identifier = r!identifier
'             item_result!observation_date = R!observation_date
'             item_result!value_numeric = R!value_numeric
'             item_result!abnormal = R!abnormal 
'             item_result!reference_range = R!reference_range
'             item_result!units = R!units
'             item_results.Add(item_result, R!observation_date)
'          Next 
'          all_results.Add(item_results, GI!identifier)
'       Endif
'    Next
'    '----------------------------------------------------------------------
'    'Sort the dates into order
'    'construct all the columns across the top of the first row in the table
'    '----------------------------------------------------------------------
'    dates.Sort
'    a_row = "<TR><TD></TD>"
'    range_cells = "<TR><TD><P ALIGN=CENTER><small>Units</small></P></TD><TD><P ALIGN=CENTER><small>Range</small></P></TD><TR>"
'    For Each data In dates  '   <P ALIGN=CENTER>
'       a_row &= "<TD><P ALIGN=CENTER><B><small>&nbsp;&nbsp;" & Format(modUtil.DateString_Decode(data), "dd/mm/yyyy") & "&nbsp;&nbsp;</small></B></P></TD>"
'    Next
'    a_row &= "</TR>"
'    '-------------------------------------------- 
'    'now add each row's label in the first column
'    '--------------------------------------------
'    For Each row_label In row_labels
'       a_row &= "<TR><TD>" & row_label & "</TD>" '"</TR>"                         'put up the row name eg Haemoglobin
'       For Each a_date In Dates 
'        
'          For Each RC In all_results[row_label]
'            ' If all_results.key = row_label Then                                     'have a collection of dates
'                 If Format(RC!observation_date, "dd/mm/yyyy") = Format(modUtil.DateString_Decode(a_date), "dd/mm/yyyy") Then      'if find the same data data as the column date
'                    '  If bHaveRange = False Then                                            'each date = a column
'                    '   range_cells &= "<TD><P ALIGN=CENTER>" & RC!reference_range & "</P></TD>"
'                    '   bHaveRange = True 
'                    ' Endif
'                    If RC!abnormal Then 
'                          a_row &= "<TD><P ALIGN=CENTER><FONT COLOR='#ff0000'>" & RC!value_numeric & "</P></TD>"                 'put in the data"
'                    Else
'                          a_row &= "<TD><P ALIGN=CENTER><FONT COLOR='#00000'>" & RC!value_numeric & "</P></TD>"                 'put in the data"
'                    End If
'                     Break 
'                 Endif
'            ' End If
'          Next
'       Next
'       a_row &= "</TR>"
'   Next  
'   
'   sHtml = Replace(shtml, "%cumulative", a_row)
'  ' Form_HTML.Webview2.Html = Replace(range_html, "%cumulative", range_cells)
' End
