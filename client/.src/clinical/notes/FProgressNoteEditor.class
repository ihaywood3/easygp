' Gambas class file

' Copyright (C) 2008-2015 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-----------------------------------------------------------------------
Private bCancelSave As Boolean
Private fk_todo As Variant          'if not zero then the key to clin_consult.next_visit table
Private bEditLastConsult As Boolean
Private bAllowTransactionCompletion As Boolean = True
Private pk_progressnote As Variant
Private lvwFavourites_Key As Variant
Private sticky_notes As Collection
Private Favourite_Codes As Collection      'of the clinician's favourite codes e.g could hard to rememember ones or common ones
Private Templates As Collection            'the collection of user definated templates eg 'annual checkup
Private template As Collection             'any currently selected template
Private pk_template As Variant             'if not null is key to clin_consult.lu_progressnote_templates
Public bBold As Boolean
Public cp1 As Integer
Public cp2 As Integer
Public sBP As String
Public sMeasurement As String
Public sWeight As String
Public sHeight As String 'FIXME remove me back to patient
Public pk_pastHistory As Variant 'temporary the pk of the past history item using this page.
Public bExit As Boolean
Public editor_contents As String 'fixme make me an array/push/pop
Private dxPos As Integer
Private dxText As String
Public CurAt As Integer
Public Paragraph_At As Integer
Public character_at As Integer
Public iZoom As Integer  ' With MiniBMICalc = New FBMICalc(HBox_BMICalc)
Public default_Zoom As Integer
Public check_state As Boolean
Public FDraw As FDrawEditor
Private hObs As Observer
Public EmbeddedForm As Object    'any form embedded in this FIXME probably no longer used
Public Embedded_Form As String    'the name of the form this is embedded in
Public sShortCutText As String
Public CtrlDown As Boolean
Public FnDown As Boolean
Private copy_of_Editor_text As String
Private data_changed As Boolean 'if true the content of the notes has changed.
Private currentconsult As CConsult
Private ParentPage As FProgressNoteEditor 'currently not used
Private shortcuts As Collection 
Private SpellChecker As ClskSpell
Private bFontBold As Boolean
Private FTermSelector As FCodedTermSelector
Private obs As Observer
Private Last_Key_Numeric As Boolean
Private ProgressNotesCodes As Collection
Private cvwReasonForEncounter_Key As Variant
Private Form_Save_Template As FSaveNotesTemplate
Private fk_section As Variant 'current default 0 = general notes
Private cMedications_remove_from_html As Integer = 1
Private last_todos As String                               'todo's saved last visit

Static Private form_progress_note_editor As FProgressNoteEditor        
Private current_notes As TextLabel
Private current_transparent_Label As Label
Private Last_Row_Clicked As HBox
Public Sub _new()
   
  Timer1.delay = 1000 * 15
   
End

Public Sub Set_Embedded_In_Form(form_name As String)
   
   Embedded_Form = form_name   
   
End

Static Public Sub Deleted_Measurement_Remove(type As String, value As String, units As String)
   'called from clinlists_Measurements to remove the text of a deleted measurement from the progress notes
   'if the user right clicked the measurement on those list 
   
   form_progress_note_editor.Delete_Measurement(type, value, units)
   
End

Public Sub Delete_Measurement(type As String, value As String, units As String)
   'Called when user deletes a measurement using popup menu over the measurement lists
   
   Dim Measurement_text As String = type & ": " & value & " " & units
   
   bexit = True   
   teNotes.RichText = Replace(tenotes.RichText, Measurement_text, "")
   DataChange_Update_Indicators(True)
   bExit = False  
   Save
   
End

Public Function Progress_Notes_Codes_Get() As Collection
   
   If IsNull(ProgressNotesCodes) Then    'temporary bugfix fixme this shouldn't be null no time to find out why
      ProgressNotesCodes = New Collection
   Endif
   Return ProgressNotesCodes
   
End 

Static Public Sub Shortcuts_Reload()
   
   Try form_progress_note_editor.Shortcuts_Init  'this form may not be loaded for this - called from user preferences
   
End

Static Public Sub cvwMedicationsToday_Update()
   '--------------------------------------------------------------------------
   'Called by FPrescriptions to update the meds list on the progress note page
   '--------------------------------------------------------------------------
   
   form_progress_note_editor.Todays_Medications_Show()
   
End

Static Public Sub Insert_text_External(placeholder As String, rich_text As String)
   
 form_progress_note_editor.teNotes.Insert(placeholder) 
 Print form_progress_note_editor.teNotes.Text
 
 form_progress_note_editor.teNotes.richtext = Replace$(form_progress_note_editor.teNotes.richtext, ".sometext", rich_text)
   
End


Public Sub Todays_Medications_Show()
   
   modPrescribingDBI.medications_prescribed_today_list(currentconsult, cvwMedicationsToday)
   
End

Public Sub Set_ExternalTransaction()
   
   bAllowTransactionCompletion = False
   
End

Public Sub Set_fk_ProgressNote(pn_key As Variant)
   
   pk_progressNote = pn_Key 
   
End

Public Sub Init(cons As CConsult, Optional bEditLastNotes As Boolean = False) 
   '-----------------------------------------------------------------------
   'Init variables, embedded forms
   'If progress notes have already been written this consultation show them
   '-----------------------------------------------------------------------
   
   Dim R As Result
   
   form_progress_note_editor = Me
   currentconsult = cons
   Settings_Load
   ProgressNotesCodes = New Collection   
   bEditLastConsult = bEditLastNotes
   Last_Key_Numeric = False
   copy_of_Editor_text = ""
   tenotes.text = ""                            'clear edit set update flags to false
   txtToDoNextVisit.text = ""
   If Embedded_Form = "FInbox" Then
      Hbox_Save.Visible = True   
   Endif
   pk_progressnote = Null                                                                 '-1 = no progress notes yet, the default
   If currentconsult.IsCreated() Then                                                     'consult already created today
      R = modConsultDBI.ProgressNotes_GetFor_fk_Consult(currentconsult.GetPK())     'are there notes for today
      If r.count Then                                                                   'yes?
         tenotes.RichText = Replace(modConsultDBI.Images_Get(R!notes), "file://", "")   'add back in the images and display notes to user
         pk_progressnote = R!pk_progressnote
      Endif
   End If 
   Shortcuts_Init                                                                'add shortcuts e.g .dx will expand to Diagnosis
   ProgressNotes_Codes_Reload                                                          'Reloads any existing codes for this currentconsult
   lvwFavourites_Refresh                                                               'load the users favourite codes to make consult coding easier
   With FTermSelector = New FCodedTermSelector(HBox_Coding)                            'pre-load the popup terms selector
      .Ignore = False
      .left = 10
      .width = teNotes.width - 20
      .Background = Color.Background
      .Visible = False
      .Expand = True
   End With
   obs = New Observer(FTermSelector.columnview1) As "Terms_columnview"
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = tenotes
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   modUtil.FindProgram("aspell", "aspell")                                            'FIXME - do something with this
   Templates_ReLoad()
   With cvwMedicationsToday
      .Columns.count = 3
      .Columns[0].width = 124
      .Columns[1].width = 80
      .Columns[2].width = 100
      .columns[0].text = "Drug"
      .columns[1].text = "Dose"
      .columns[2].text = "instructions"
   End With
   modPrescribingDBI.medications_prescribed_today_list(currentconsult, cvwMedicationsToday)
   lblBMICalculator.width = lblToDoNextVisit.Width
   Todos_Next_Visit_Reload
   Sticky_Notes_Reload        'any tasks allocated to user within the office
   DataChange_Update_Indicators(False)
      
End

Public Sub Todos_Save()
   '------------------------------------------------------------------
   ' save the todo's for next visit
   '
   ' CREATE TABLE clin_consult.next_visit
   ' (
   '   pk serial NOT NULL,
   '   fk_consult integer NOT NULL,
   '   todo text,
   '   CONSTRAINT next_visit_pkey PRIMARY KEY (pk ),
   '   CONSTRAINT next_visit_fk_consult_fkey FOREIGN KEY (fk_consult)
   '       REFERENCES clin_consult.consult (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '--------------------------------------------------------------------
   
   Dim todo As CRow
   
   If last_todos = Trim(txtToDoNextVisit.text) Then Return 
   todo = New CRow
   If Not IsNull(fk_todo) Then
      todo.put_unchanged(fk_todo, "fk_todo")
   Endif
   todo!fk_consult = currentconsult.GetPK()
   todo!todo = Trim(txtToDoNextVisit.text)
   todo.Save("clin_consult.next_visit", "fk_todo")
   fk_todo = todo!fk_todo
   modDBConnect.CommitTrans()
   
End

Public Sub Todos_Next_Visit_Reload()
   '-------------------------------------------------   
   'Loads the to-do's next visit for a particular role
   '--------------------------------------------------
   
   Dim todo As Collection  
   
   todo = modProgressNotesDBI.ToDo_Next_Visit_Get(currentconsult!patient!fk_patient)
   If Not IsNull(todo) Then 
      txtToDoNextVisit.text = todo!todo
      last_todos = todo!todo
      fk_todo = todo!pk
   End If 
   
End

Public Sub Preview()
   
   ' FClinical.Editor_ShowPage_External("pdf document external", "Today's Notes.pdf", modProgressNotes.ProgressNotes_Add_Page_Header_Create_PDF_File(teNotes.RichText, currentconsult, "CONSULTATION"))
   FClinical.Editor_ShowPage_External("pdf document external", "Today's Notes.pdf", ProgressNotes_Today())
   
End

Public Sub Print_Content()
   '-------------------------------------------------------------------------------------
   'creates pdf with page header of the progress notes and prints directly with no prompt
   'fixme - make the fonts smaller.
   '-------------------------------------------------------------------------------------
   
   If Trim(teNotes.text) = "" Then Return                                                                  'don't print if no notes
   Message.title = "Progress Notes"                                                                         'ensure title
   If Message.Question("Are you sure you want to print out today's notes?", "Yes", "No") = 2 Then Return    'allow back out
   modPrinting.Print_PDF(ProgressNotes_Today())
   
End  

Public Sub ProgressNotes_Today() As String
   'Returns all the progress notes today, not just those in the editor (must have been saved)
   
   Dim sHtml As String
   
   sHtml = modProgressNotes.AllProgressNotes_Construct_Html(currentconsult, False, True, Null, Now())
   sHtml = modProgressNotes.ProgressNotes_Add_Page_Header_Create_PDF_File(sHtml, currentConsult, "CONSULTATION")
   
   Return sHtml 
   
End

Public Sub Save()
   '------------------------------------------------------------------------------------------------
   ' Saves the contents of the editor page if data has changed in the text editor. 
   ' If this is the first time this consult then the clin_consult.pk is returned as pk_progress note
   ' to allow appropriate editing and redisplay the changed notes.
   ' If nothing to save, or no change, or bCancelSave then exit
   ' Special note on bCancelSave:
   ' Imagine this scenario:
   '     User is entering progress notes on a problem in the
   '     editor, then realises that they have incorrectly put
   '     in this problem (eg wrong patient) and then have opened thfFe past history/health issue
   '     section, and deleted the health item. So, we have to close the editor page which is
   '     now both open and invalid, however normally, closing the editor page will auto-save
   '     any changes to both the progress notes and the past history/health issue (which now
   '     does not exist, so just cancel the save
   '     
   ' Saves the codes for these progress notes
   '-----------------------------------------------------------------------------------------------
   
   Dim progress_note_code As CRow   
   Dim PNC As Collection 
   
   If bCancelSave Then Return
   '-----------------------------------------------------------------------------------------
   'Have to handle these sorts of scenarios - user adds some notes during consult, but then
   'totally deletes the notes. As these notes have been previously saved, need to resave the
   'editor even when it is empty but only if th copy of what was in there is not "" ie don't
   'save just an empty editor. At moment I  just re-save but save an empty string
   '-----------------------------------------------------------------------------------------
   Todos_Save                                'must be done separately as if user just put in todo, no notes, don't want empty progress notes
   If (Trim(teNotes.text) = "" And copy_of_Editor_text = "") Or Not data_changed Then
      Return
   End If
   pk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, teNotes.RichText, const.cSection_GeneralNotes, pk_progressnote, "New General Notes")
   '---------------------------------------------------------------------------------------
   ' CREATE TABLE clin_consult.progressnotes_codes
   ' (
   '   pk serial NOT NULL,
   '   fk_progressnote integer NOT NULL,
   '   fk_code text NOT NULL,   '= key to coding.generic_terms
   '   fk_coding_system integer NOT NULL,
   '   deleted boolean NOT NULL DEFAULT false,
   '   CONSTRAINT progressnotes_codes_pkey PRIMARY KEY (pk ),
   '   CONSTRAINT progressnotes_codes_fk_coding_system_fkey FOREIGN KEY (fk_coding_system)
   '       REFERENCES coding.lu_systems (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT progressnotes_codes_fk_progressnote_fkey FOREIGN KEY (fk_progressnote)
   '       REFERENCES clin_consult.progressnotes (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   ' Save the codes for these progress notes
   '----------------------------------------------------------------------------------------
   For Each PNC In ProgressNotesCodes
      progress_note_code = New CRow
      If PNC!pk Then
         progress_note_code.put_unchanged(PNC!pk, "pk")
      End If   
      progress_note_code!fk_progressnote = pk_progressnote
      progress_note_code!fk_code = PNC!fk_code
      progress_note_code.Save("clin_consult.progressnotes_codes", "pk")
   Next
   '--------------------------------------------------
   'Sometimes the save routine is called from a form
   'which wants to encapsulate its own transaction
   'so the commit trans is done from the calling form
   'Update all the progress notes in FClinical
   'Any new images will be added to the images collection in FClinical via modConsultDBI.Notes_Parse_For_Images(..)
   '-------------------------------------------------
   If bAllowTransactionCompletion Then
      modDBConnect.CommitTrans()
      copy_of_Editor_text = teNotes.text                                  'save copy of what is in the editor for later comparison.
      DataChange_Update_Indicators(False)                                 'remove the red border which indicates data change
      If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then  'Is the same patient in FClinical - editor used all over the place
         FClinical.Update_graphs                                          'update any graphs
         FClinical.Update_ClinList_Measurements                           'update measurement list if showing
         FClinical.Refresh_Section(const.cSection_HealthSummary)          'refresh the health summary if showing
      End If
      If Embedded_Form = "FInbox" Then
         FInbox.Previous_Notes_Refresh                                    'refresh the 'Context' tab in the inbox
      Endif
   End If
   ProgressNotes_Codes_Reload
   
End

Public Sub Add_Shortcut(text As String, abbrev As String, bold As Boolean, uline As Boolean, section As Boolean)
   
   shortcuts.Add(["text": text, "abbrev": abbrev, "bold": bold, "uline": uline, "section": section], abbrev)
   
End

Public Function Get_Copy_of_Editor_text() As String
   
   Return copy_of_Editor_text
   
End

Public Function Get_Copy_of_Editor_RichText() As String
   
   Return tenotes.RichText
   
End

Public Sub Form_Close()
   
   Settings_Save()
   Save()
   
End

Public Sub Form_KeyPress()
   
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
         Case Asc("F")
            
      End Select
   End If
   
End

Public Sub DataChange_Update_Indicators(flag As Integer)
   '------------------------------------------
   'Removes Or sets the red border To indicate
   'if data is changed or note, resets flags
   '------------------------------------------
   
   If flag Then
      Vbox_ConsultNotes.BackGround = Color.Red
      Vbox_ConsultNotes.Padding = 1
      data_changed = True
   Else
      Vbox_ConsultNotes.BackGround = Color.Gray
      Vbox_ConsultNotes.Padding = 1
      data_changed = False
   End If
   
End

Public Sub teNotes_GotFocus()
   
   cvwReasonForEncounter.Visible = True
   FTermSelector.Visible = False
   
End

Public Sub teNotes_Change()
   
   If bExit Then Return
   '-------------------------------------------------------------
   'DO NOT be smart and make me Last (ie don't use Last.whatever)
   'this change event is called external to this form
   'see FInboxDocumentPage.Editor_Init()
   '-------------------------------------------------------------
   If Trim(teNotes.text) = "" Then
      '--------------------------------------------------------------------
      'If there is not text, this dosn't mean that the data hasn't changed
      'e.g it could have already been saved, and just deleted = changed
      'Each time this parent's form saves the data, it sets:
      'copy_of_Editor_text to the last, saved text
      '--------------------------------------------------------------------
      If copy_of_Editor_text = "" Then
         DataChange_Update_Indicators(False)
      Else
         DataChange_Update_Indicators(True)
      End If
      cvwReasonForEncounter.Clear
      template = New Collection
   Else
      DataChange_Update_Indicators(True)
      Editor1.text = tenotes.text
      textarea1.text = tenotes.text
   End If
   tenotes.EnsureVisible
   Print teNotes.RichText
   
End

Public Sub Editor_Fonts_Reset()
   '------------------------------------------------------------
   'Clears any font attributes ie saves clicking muliple buttons
   '------------------------------------------------------------
   
   Object.Lock(btnBold)
   Object.Lock(btnItalic)
   Object.Lock(btnUnderline)
   Object.Lock(btnAlignLeft)
   Object.Lock(btnAlignCenter)
   Object.Lock(btnAlignRight)
   Object.Lock(btnAlignJustify)
   Object.Lock(cmbFonts)
   Object.Lock(SpinBox1)
   Object.Lock(tbColours)
   btnBold.Value = False
   btnItalic.Value = False
   btnUnderline.Value = False
   
   btnAlignLeft.value = False
   btnAlignCenter.value = False
   btnAlignJustify.Value = False 'what is this
   btnAlignRight.value = False
   'FIXME put in the default font
   'put in black as default colour
   teNotes.Format.Font.Bold = False
   teNotes.Format.Font.Italic = False
   teNotes.Format.Font.Underline = False
   teNotes.Format.Font.StrikeOut = False
   teNotes.Format.Alignment = Align.Left
   tbColours.Color = Color.Black
   teNotes.Format.Color = Color.Black
   Object.UnLock(btnBold)
   Object.UnLock(btnItalic)
   Object.UnLock(btnUnderline)
   
   Object.UnLock(btnAlignLeft)
   Object.UnLock(btnAlignCenter)
   Object.UnLock(btnAlignRight)
   Object.UnLock(btnAlignJustify)
   Object.UnLock(cmbFonts)
   Object.UnLock(SpinBox1)
   Object.UnLock(tbColours)
   
End

Public Sub Fonts_Fill_Combo()
   
   Dim sFont As String
   
   For Each sFont In Fonts
      cmbFonts.add(sFont)
   Next
   
End

Public Sub tbColours_Change()
   
   teNotes.Format.Color = tbColours.Color
   teNotes.SetFocus()
   
End

Public Sub SpinBox1_Change()
   
   teNotes.Format.Font.Size = Last.Value
   teNotes.SetFocus()
   
End

Public Sub cmbFonts_Click()
   
   teNotes.Format.Font.Name = Last.text
   teNotes.SetFocus()
   
End

Public Sub Terms_Get()
   '-------------------------------------------------------------------------------------
   'Gets list of diagnostic terms
   'Cannot set default if count is one because must  be able to add new occupations
   'can't remove the label because it needs to occupy space to keep textbox correct width
   '-------------------------------------------------------------------------------------
   
   dxpos = InStr(teNotes.text, "Coded Diagnosis:")
   dxText = Mid$(teNotes.text, dxPos + 16, tenotes.pos - dxpos)
   With FTermSelector
      .set_SearchText(dxText)
      .Visible = True
   End With
   
End

Public Sub tenotes_KeyPress()
   
   Dim CtrlDown As Boolean
   
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
         Case Asc("L")
            teNotes.Format.Alignment = Align.Left
         Case Asc("M")
            teNotes.Format.Alignment = Align.Center
         Case Asc("R")
            teNotes.Format.Alignment = Align.Right
         Case Asc("M")
         Case Asc("w") 'WIPE fixme put in docs
            backup()
            teNotes.Clear()
            template = Null
         Case Asc("O") 'OOPS fixme implement me
         Case Asc("B")
            teNotes.Format.Font.Bold = Not teNotes.Format.Font.Bold
         Case Asc("I")
            teNotes.Format.Font.Italic = Not teNotes.Format.Font.Italic
         Case Asc("U")
            teNotes.Format.Font.Underline = Not teNotes.Format.Font.Underline
         Case Asc("Z")
            If teNotes.text = "" Then
               teNotes.RichText = editor_contents.text() 'bug here null object FIXME
            End If
      End Select
   End If
   Let Last_Key_Numeric = False
   If Key.Code >= Key["0"] And If Key.Code <= Key["9"] Then Last_Key_Numeric = True
   If Key.Code = Key["."] Then Last_Key_Numeric = True
Catch
   Return
   
End

Public Sub DrawEditor_Show()
   '---------------------------------------------
   'Show the drawing editor cum web-cam interface
   'not used at moment but please do not delete
   '---------------------------------------------
   
   bexit = True
   sShortCutText = ".draw"
   If Me.Parent.Window Is FProgressNotePage Then
      ParentPage = Me.Parent.Window
   Endif
   Fdraw = New FDrawEditor(Vbox_ConsultNotes)
   FDraw_Create_Observer()
   EmbeddedForm_Show(FDraw)
   FDraw.Enabled = True
   FDraw.Init("", currentconsult)
   bexit = False
   
End

Public Sub teNotes_KeyRelease()
   
   Dim s As Collection
   Dim re As Regexp
   Dim notes As String
   
   If bExit Then
      Return
   End If
   If InStr(teNotes.text, ".draw") Then
      DrawEditor_Show()
      Return
   End If
   For Each s In shortcuts
      If s!section Then
         If Key.Code = Key.Return Then
            Try re = New Regexp(teNotes.Text, "\\" & s!abbrev & " (.*)", Regexp.Caseless)
            If re.Offset >= 0 Then Auto_Text_Section(s, re)
         Endif
      Else
         If InStr(teNotes.Text, s!abbrev, 0, gb.IgnoreCase) Then Auto_Text(s)
      End If
   Next
   
   If Not Last_Key_Numeric Then
      notes = modMeasurementsDBI.ProgressNote_Parse_For_Measurement_Keypress(teNotes.RichText, txtHeight, txtweight) 
      If notes <> teNotes.RichText Then teNotes.RichText = notes ' only replace when there is a change
   Endif
   
Catch 'the ReExp code above sometimes crashes Ian FIXME
   Return 
   
End

Public Sub EmbeddedForm_Close()
   '--------------------------------------
   'Closes any form embedded in the editor
   'reloads the main HSplit layout
   '--------------------------------------
   
   Dim Charpos As Integer
   
   charpos = InStr(teNotes.text, sShortCutText)
   EmbeddedForm.Close()
   teNotes.Richtext = Replace$(teNotes.richtext, sShortCutText, "")
   teNotes.pos = charpos - 1
   teNotes.Visible = True
   teNotes.SetFocus()
   HBox_WordProcessorButtons.Visible = True
   lblTodaysNotes.Visible = True
   VBox_Reason_For_Encounter.Visible = True
   
End

Public Sub EmbeddedForm_Show(F As Form)
   '------------------------------------------
   'Pops up an embedded form according to the
   'short cuts in the teNotes editor
   'Set EmbeddedForm so that tbHideForm can
   'close it later
   '------------------------------------------
   
   teNotes.Visible = False
   VBox_Reason_For_Encounter.Visible = False
   HBox_WordProcessorButtons.Visible = False
   lblTodaysNotes.Visible = False
   EmbeddedForm = F
   EmbeddedForm.Show()
   
End

Public Sub cmbTemplates_Click()
   '----------------------------------------------------------------------------------------
   'If notes exist in the editor then give user option of over-writing or adding to the end
   'or cancelling.
   '----------------------------------------------------------------------------------------
   
   If Len(tenotes.text) > 0 Then
      message.title = "Progress Notes Templates"
      Select Case message.Question("Please select how you wish to apply this template", "Erase previous notes", "Add to end of existing notes", "Cancel")
         Case 1
            teNotes.Clear()
            bexit = True
            Try teNotes.RichText = templates[cmbTemplates.index]!template
            bExit = False
         Case 2
            bexit = True
            Try teNotes.RichText &= templates[cmbTemplates.index]!template
            bExit = False
      End Select
   Else
      teNotes.Clear()
      bexit = True
      Try teNotes.RichText = templates[cmbTemplates.index]!template
      bExit = False
   Endif
   DataChange_Update_Indicators(True)
   Try pk_template = templates[cmbTemplates.index]!pk
   template = templates[cmbTemplates.index]
   If template!auto_code_consult = True Then
      ProgressNotes_Code_Add(template)
   Endif
Catch
   Return   'sometimes the message box due to delay in the gui can already be showing.
   
End

Public Sub teNotes_Drop()
   '-----------------------------------------------------------
   'Accept drop only at moment from known image source
   'Inserts this picture at the current cursor position
   ' FIXME fixing eg use mime type To know data - type
   'and insert appropriately eg   "text/x-moz-url"
   '----------------------------------------------------------
   
   Dim pic As New Picture
   
   Try pic = pic.Load(Drag.Source.Tag!fname)
   If Error Then
      message.info("Sorry mime type" & Drag.format & " not implemented.\n\nYou could speak to the developer's if this is important to you.")
      Return
   Endif
   Clipboard.Copy(pic.image)
   If Not InStr(tenotes.richtext, ".pic") Then tenotes.Insert(".pic") 'inserts pic at current cursor position
   Insert_Picture("clipboard")
Catch
   Return
   
End

Public Sub RequestForm_ToolButtons_Click()
   
   Stop Event
   FRequests.Hide
   teNotes.Show()
   
End

Public Sub DrawEditor_ToolButtons_Click()
   '-------------------------------------------------------
   ' Only two tool buttons in the draw editor are monitored
   'see FDraw_Create_Observer()
   '-------------------------------------------------------
   
   Stop Event
   Select Case Last.tag
      Case "close"
         '-------------------------------------------------------------
         'User has closed the drawing editor, not by saving the picture
         'so need to remove .draw
         '-------------------------------------------------------------
         teNotes.RichText = Replace$(teNotes.RichText, ".draw", "")
         EmbeddedForm_Close()
         tbWebCam.enabled = True
      Case "insert picture"
         '--------------------------------------------------------
         'User is closing the drawing editor by inserting an image
         '--------------------------------------------------------
         Insert_Picture1()
   End Select
   
End

Public Sub Insert_Picture1()
   '--------------------------------------------------------------------
   'User is inserting a picture from the draw editor back into the notes
   '--------------------------------------------------------------------
   'FIX ME, PUT IN APPROPRIATE HEIGHT.WIDTH FROM THE DRAW FORM.
   
   Dim pic As Picture
   Dim sPicPath As String
   Dim tempFile As String
   Dim h As Integer
   Dim w As Integer
   
   If Not IsNull(Fdraw.$hImage) Then
      tempFile = Temp() & ".png"
      Fdraw.$hImage.Save(Tempfile)
      pic = Picture[tempfile]
      h = Abs(pic.Height * 2 / 3)
      w = Abs(pic.width * 2 / 3)
      sPicPath = "<P><TABLE WIDTH=100%><TR><TD WIDTH=100%><P><IMG "
      sPicPath &= "src=\"" & tempfile & "\" "
      sPicPath &= " NAME=\"graphics\" ALIGN=\"LEFT\" WIDTH=\"" & Str(W) & "\" HEIGHT=\"" & Str(H) & "\" BORDER=\"0\"></TR></TD></TABLE><BR><BR>"
      teNotes.richtext = Replace$(teNotes.richtext, ".draw", sPicPath)
   End If
   EmbeddedForm_Close()
   
End

Public Sub Insert_Picture(sSource As String)
   '--------------------------------------------------
   'Inserts a picture into the form. This can come
   'from either a cut/paste/import or from the
   'draw
   'Creates an event observer.
   'this will bug out if user clicks save in  Fdraw
   'without selecting image
   '--------------------------------------------------
   
   Dim NewImage As Image
   Dim pic As Picture
   Dim sPicPath As String
   Dim tempfile As String
   Dim h As Integer
   Dim w As Integer
   
   tempFile = Temp() & ".png"
   Select Case sSource
      Case "editor"
         
      Case "clipboard"
         '----------------------------------------------------------
         'If source of paste is a clipboard, validate it it an image
         '----------------------------------------------------------
         If Clipboard.type = Clipboard.Image Then
            If Not InStr(tenotes.richtext, ".pic") Then
               tenotes.Insert(".pic")
            End If
            Try NewImage = Clipboard.Paste()
            If Error Then
               File.Save(tempfile, Clipboard.Paste())
            Else
               NewImage.Save(Tempfile)
            Endif
            Shell "convert " & Tempfile & " -bordercolor White -border 5x5 " & Tempfile Wait
            pic = Picture[Tempfile]
            w = Abs(pic.width * 2 / 3)
            h = pic.Height
            w = pic.width
            sPicPath = "<TABLE WIDTH=100% CELLPADDING=4 CELLSPACING=3 ><TR><TD WIDTH=100%><P><IMG "
            sPicPath &= "src=\"" & Tempfile & "\" "
            sPicPath &= " NAME=\"graphics\" ALIGN=\"LEFT\" WIDTH=\"" & Str(W) & "\" HEIGHT=\"" & Str(H) & "\" BORDER=\"0\"></TR></TD></TABLE><BR>"
            teNotes.richtext = Replace$(teNotes.richtext, ".pic", sPicPath)
         End If
   End Select
   
End

Public Sub CalcBMI()
   'this code is duplicated all over the place FIXME.
   
   Dim Height As Variant
   Dim weight As Variant
   Dim lowest As Variant
   Dim heighest As Variant
   Dim sString As String
   
   Height = Val(txtHeight.text) / 100
   weight = Val(txtWeight.text)
   txtBMI.text = Format((weight / (height ^ 2)), "##.#")
   lowest = Format(20 * height ^ 2, "##.#")
   heighest = Format(25 * height ^ 2, "###.#")
   Try sString = Format(20 * (height ^ 2), "##.#") & " - " & Format(25 * (height ^ 2), "###.#") & "Kg "  'IDEAL
   lblBMIComment.text = "Ideal Weight Range " & sString
   If weight > 25 * height ^ 2 Then
      With lblOverweight
         .text = "Overweight"
         .Visible = True   
      End With
      With txtOverweight
         .text = Format(weight - 25 * height ^ 2, "###.#")
         .Visible = True   
      End With
   Else If weight < 20 * height ^ 2 Then 
      With lblOverweight
         .text = "Underweight"
         .Visible = True   
      End With
      With txtOverweight
         .text = Format(20 * height ^ 2 - weight, "##.#")
         .Visible = True   
      End With
   Endif
   
End

Public Sub mnuNotes_Click()
   
   Dim Save_Template As FSaveNotesTemplate
   
   Select Case Last.tag
      Case "aclasta infusion form"
          modPrinting.Print_latex_PDF(modForms.Aclasta_Infusion_Form(currentconsult))
      Case "s100 consent clozapine form"
         modPrinting.Print_latex_PDF(modMentalHealthDBI.Clozapine_Patient_Consent_Form_Create_Latex(currentconsult)) 'contains unique hard coded PBS code 4998
      Case "meds_habits_immunisations"
         Meds_Habits_Immunisations_Insert
      Case "next depot date"
         tenotes.Insert(".depotdate")
         teNotes.richtext = Replace$(teNotes.richtext, ".depotdate", "<BR><B>Depot next due on:</B> " & Format(DateAdd(currentconsult.GetConsultDate(), gb.month, 3), "dd/mm/yyyy") & "<BR>")
      Case "next b12 date"
         tenotes.Insert(".b12date")
         teNotes.richtext = Replace$(teNotes.richtext, ".b12date", "<BR><B>B12 next due on:</B> " & Format(DateAdd(currentconsult.GetConsultDate(), gb.month, 3), "dd/mm/yyyy") & "<BR>")
      Case "paste image"
         Insert_Picture("clipboard")
      Case "paste"
         If Clipboard.type = Clipboard.Text Then
            tenotes.Insert(Clipboard.Text)
         End If
      Case "insert medication list", "insert medication list with heading", "insert medication list today's medications", "insert medication list today's medications with heading"
         Medications_Insert_List(modPrescribingDBI.Medications_Prepare_List(currentconsult, Last.tag))
      Case "immunisations"
         Immunisations_Insert
      Case "insert problem list"
         Problem_list_Insert
      Case "delete template"   
         Template_Delete(pk_template)
      Case "save new template"
         pk_template = Null
         template = New Collection  
         Template_Save(modStrings.Capitalise_Words_In_String(Last.tag))
      Case "save existing template"
         Template_Save(modStrings.Capitalise_Words_In_String(Last.tag))
      Case "save as shortcut"
         FClinical.Editor_ShowPage_External("Short Cuts", "Short Cuts", tenotes.selection.Richtext)
      Case "help"
         modUtilGUI.NotImplemented("Help for progress notes")
      Case "habits"
         Habits_Insert
   End Select
Catch
   Return  
   
End

Public Sub Meds_Habits_Immunisations_Insert()
   '-----------------------------------------------------------------------------------
   'Inserts three lists at once to save popping up the menu over the progress notes * 3
   'used e.g in annual checkups
   '-----------------------------------------------------------------------------------
   
   Dim sAllLists As String
   
   tenotes.Insert(".threelists")
   sAllLists = modPrescribingDBI.Medications_Prepare_List(currentConsult, "insert medication list with heading")
   sAllLists &= modVaccinationDBI.List_Immunisations_As_RichText_String_With_Heading(currentconsult)
   sAllLists &= Habits_Prepare_List()
   teNotes.richtext = Replace$(teNotes.richtext, ".threelists", sAllLists)
   
End

Public Sub Immunisations_Insert()
   '---------------------------------------------
   'Inserts a list of the patient's immunisations 
   '---------------------------------------------
   
   Dim sImmsList As String
   
   sImmsList = modVaccinationDBI.List_Immunisations_As_RichText_String_With_Heading(currentconsult)
   tenotes.Insert(".immslist")
   teNotes.richtext = Replace$(teNotes.richtext, ".immslist", sImmsList)  
   
End

Public Sub Template_Delete(pk_template As Variant)
   ' Deletes a template
   ' Same code in FReferrals FixMe
   
   Dim sMsg As String
   
   Message.Title = "Delete Template"
   
   sMsg = "Are you sure you wan to delete the existing template:\n\n"
   sMsg &= template!name
   If Message.Question(sMsg, "Yes - Delete Template", "No") = 2 Then Return
   modDBConnect.exec_query("Update clin_consult.lu_progressnote_templates set deleted = True where pk=" & pk_template)
   modDBConnect.CommitTrans
   Templates_ReLoad
   
End

Public Sub Template_Save(sTitle As String)
   '---------------------------------------------------------------------------------------------------
   'Saves new or existing template, if existing then the clin_referrals.lu_referral_letter_template.pk
   'is passed to the popup dialog which saves the template
   'same code in FReferral fixme
   '---------------------------------------------------------------------------------------------------
   
   Dim template_name As String
   Dim old_pk_template As Variant = pk_template 
   
   If InStr(sTitle, "Existing") Then
      template_name = cmbTemplates.Text
   End If   
   
   With Form_Save_Template = New FSaveNotesTemplate
      .Title = sTitle  
      .Set_Embedded_In_Form("FProgressNoteEditor")
      .Init(teNotes.RichText, template)
      If .ShowModal() Then
         Templates_ReLoad()
         If Not IsNull(old_pk_template) Then  
            template = template_Reload(old_pk_template)
            pk_template = template!pk
         Endif
      Endif
   End With
   
End

Public Sub Template_Reload(old_pk_template As Variant) As Collection
   
   Dim T As Collection
   
   For Each T In templates 
      If T!pk = old_pk_template Then
         Return T  
      Endif
   Next
   
End

Public Function Habits_Prepare_List() As String
   '-------------------------------------------------------------------------------------
   'Prepares a string of habits
   'Currently only inserts alcohol and smoking quick'n dirty paste from elsewhere (FIXME)
   '-------------------------------------------------------------------------------------
   
   Dim sHabitsListHTML As String
   Dim sSmoking As String
   Dim sAlcohol As String
   Dim item As Collection
   
   currentconsult.Refresh("recreationaldrugs")
   sHabitsListHTML = "<B>Recreational Drugs (Habits)</B>"
   If currentconsult!recreationaldrugs.count = 0 Then
      sHabitsListHTML &= "<BR>Nil Recorded"
   Else
      sSmoking = "Nicotine - "                                                   'lets tell users no info recorded
      sAlcohol = "Alcohol - "                                              'lets tell users no info recorded
      For Each item In currentconsult!recreationaldrugs
         ' everyone should have a smoking record although of course users may not put them in
         If item!fk_lu_recreational_drug = const.cRecreational_Drug_Nicotine Then
            If Mid(sHabitsListHTML, 36, 2) <> "BR" Then
               sHabitsListHTML &= "<BR>"
            Endif
            If item!never_used_drug Then
               sSmoking &= "never smoked"
            Else
               If Not IsNull(item!substance_amount) Then
                  sSmoking &= Str(item!substance_amount) & "/day "
               Else
                  sSmoking &= "?/day "
               Endif
               If Not IsNull(item!age_started) Then
                  sSmoking &= "age " & Str(item!age_started) & " to "
               Else
                  sSmoking &= "from age ? to"
               Endif
               If Not IsNull(item!age_last_used) Then
                  sSmoking &= Str(item!age_last_used)
               Else
                  sSmoking &= "?"
               Endif
            End If
            sHabitsListHTML &= sSmoking & "<BR>"
         End If
         If item!fk_lu_recreational_drug = const.cRecreational_Drug_Alcohol Then
            If Mid(sHabitsListHTML, 36, 2) <> "BR" Then
               sHabitsListHTML &= "<BR>"
            Endif
            If item!never_used_drug = True Then
               sAlcohol &= " has never drunk alcohol "
            Else
               If Not IsNull(item!age_last_used) Then
                  sAlcohol &= "Ex-Drinker since "
                  sAlcohol &= item!age_last_used & "yrs"
               Else                                                                   'will always be a quantity I insisted in the gui
                  If Not IsNull(item!substance_amount) Then
                     sAlcohol &= Str(item!substance_amount) & " gm"
                  Else
                     sAlcohol &= "?gm"
                  Endif
                  Select Case item!fk_lu_substance_frequency
                     Case const.Units_day
                        sAlcohol &= " per day"
                     Case const.Units_month
                        sAlcohol &= " per month"
                     Case const.Units_week
                        sAlcohol &= " per week"
                  End Select
               Endif
            End If
            sHabitsListHTML &= sAlcohol & "<BR>"
         End If
      Next
   End If
   Return sHabitsListHTML
   
End

Public Sub Habits_Insert()
   
   tenotes.Insert(".habitslist")
   teNotes.richtext = Replace$(teNotes.richtext, ".habitslist", Habits_Prepare_List())
   
End

Public Sub Problem_list_Insert()
   '---------------------------------
   'Insert an enumerated problem list
   '---------------------------------
   
   Dim PH As Collection
   Dim sLaterality As String
   Dim sString As String = "<OL>"
   
   tenotes.Insert(".problemlist")
   currentconsult.Refresh("past_history")
   For Each PH In currentconsult!past_history
      If PH!major = True And PH!risk_factor = False And Lower(PH!description) <> "normal cholesterol" Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "Bilateral"
            Case const.LateralityLeft
               sLaterality = "Left"
            Case const.LateralityRight
               sLaterality = "Right"
            Case Null ' const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description))
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "
         sstring &= "</B>" & management_summary(PH)
      Endif
   Next
   For Each PH In currentconsult!past_history
      If PH!active = True And PH!risk_factor = False And PH!major = False And Lower(PH!description) <> "normal cholesterol" Then 
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "Both"
            Case const.LateralityLeft
               sLaterality = "Left"
            Case const.LateralityRight
               sLaterality = "Right"
            Case Null ' const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description))
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "
         sstring &= "</B>" & management_summary(PH)
      Endif
   Next
   For Each PH In currentconsult!past_history
      If PH!risk_factor = True And Lower(PH!description) <> "normal cholesterol" Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "Both"
            Case const.LateralityLeft
               sLaterality = "Left"
            Case const.LateralityRight
               sLaterality = "Right"
            Case Null ' const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description))
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "
         sstring &= "</B>" & management_summary(PH)
      Endif
   Next
   sString &= "</OL><P></P>"
   
   teNotes.richtext = Replace$(teNotes.richtext, ".problemlist", sSTring)
   
End

Public Function management_summary(PH As Collection) As String
   
   Dim sstring As String
   
   If Not IsNull(PH!aim_of_plan) Then sstring = modUtil.Ucase_Word_First_Letter(modUtil.text_gt_lt_protect(PH!aim_of_plan)) & ". "
   If Not IsNull(PH!plan_contribution_gp) Then sstring &= "GP will " & PH!plan_contribution_gp & ". "
   If Not IsNull(PH!plan_contribution_patient) Then sstring &= "Patient will " & PH!plan_contribution_patient & ". "
   If Not IsNull(PH!plan_contribution_others) Then sstring &= modUtil.Ucase_Word_First_Letter(PH!plan_contribution_others) & "."
   If sstring <> "" Then
      sstring = "<BR><B>Current Plan: </B>" & sstring  
   Endif
   Return sstring
   
End

Public Sub Medications_Insert_List(sMedsList As String)
   '-----------------------------------------
   'Inserts a medications list into the notes
   '------------------------------------------   
   
   tenotes.Insert(".medslist")
   teNotes.richtext = Replace$(teNotes.richtext, ".medslist", sMedsList)
   
End

Public Sub Templates_ReLoad()
   
   pk_template = Null
   template = New Collection
   templates = modUtilGUI.LoadCombo(cmbTemplates, modUtil.Copy_Collection_Keyed_Sequentially(modProgressNotes.Templates_Get()), "name")
   cmbTemplates.index = -1
   
End

Public Sub teNotes_Menu()
   
   Paragraph_At = teNotes.ToParagraph(teNotes.pos)
   character_at = teNotes.ToIndex(teNotes.pos)
   If Trim(teNotes.text) = "" Then
      mnuNotes_SaveTemplate.Enabled = False
      mnuNotes_SaveExistingTemplate.enabled = False  
      mnuNotes_DeleteTemplate.Enabled = False   
   Else
      mnuNotes_SaveTemplate.Enabled = True
      If template.count Then
         With mnuNotes_SaveExistingTemplate
            .Enabled = True 
            .text = "Edit Template '" & template!name & "'"
         End With
         With mnuNotes_DeleteTemplate
            .Enabled = True
            .text = "Delete Template '" & template!name & "'"
         End With
      Else
         mnuNotes_DeleteTemplate.Enabled = False  
         mnuNotes_SaveExistingTemplate.Enabled = False  
      End If   
   Endif
   If Clipboard.type = Clipboard.Image Then
      mnuNotes_PasteImage.Enabled = True
      mnuNotes_Paste.Enabled = False
   Else
      mnuNotes_PasteImage.Enabled = False
      mnuNotes_Paste.Enabled = True
   Endif
   If teNotes.Selection.Text <> "" Then
      mnuNotes_SaveShortCut.enabled = True
   Else
      mnuNotes_SaveShortCut.enabled = False
   Endif
   mnuNotes.Popup()
   ' 
   
End

Public Sub FDraw_Create_Observer()
   'just a routine to overide the btn_save event of Fdraw
   'do not delete this though not currently used
   
   hObs = New Observer(Fdraw.btnSave) As "DrawEditor_ToolButtons"
   hObs = New Observer(Fdraw.tbClose) As "DrawEditor_ToolButtons"
   
End

Public Sub tbclosedraw_click()
   
   Stop Event
   
End

Public Sub Editor_Clear()
   '-----------------------------------
   'Clears the text editor with warning
   '-----------------------------------
   
   Select Case message.Warning("Caution:\n\nTo continue will entirely erase your notes.\n\nAre you sure?", "Yes - erase notes", "No")
      Case 1
         bExit = True
         teNotes.Clear()
         bExit = False
         sWeight = ""
         sHeight = ""
         bFontBold = False
         cmbTemplates.index = -1
         BMI_Clear
         pk_template = Null
         cmbTemplates.index = -1
         template = New Collection 
         modConsultDBI.ProgressNote_Delete_Truly(pk_progressnote)
         pk_progressnote = Null
         currentconsult.Refresh("progress_notes")               'refresh the progress notes collection
   End Select
Catch
   Return
   
End

Public Sub EditorButtons_Click()
   
   Dim curpos As Integer
   '---------------------------------------------
   'User has clicked on one of the editor buttons
   '---------------------------------------------
   Select Case Last.tag
         
      Case "spell"
         SpellChecker.init()
         SpellChecker.StartSpelling()
         teNotes.SetFocus()
      Case "list"
         teNotes.Insert(".!@.")
         teNotes.RichText = Replace(teNotes.RichText, ".!@.", "<ul type='disc'><LI> </LI></UL>")
         teNotes.RichText = Replace(teNotes.RichText, "style=\" margin-top:12px; margin-bottom:12px", "style=\" margin-top:6px; margin-bottom:6px")
         teNotes.Pos = curpos
         teNotes.Pos = Len(tenotes.text)
      Case "about"
         Balloon.Info("A simple TextEditor adapted from an example by\nFabien Bodard (gambix@users.sourceforge.net)\nand Benoît Minisini", Last)
      Case "erase"
         Editor_Clear()
      Case "bold"
         teNotes.Format.Font.Bold = Last.Value
      Case "italic"
         teNotes.Format.Font.Italic = Last.Value
      Case "underline"
         teNotes.Format.Font.Underline = Last.Value
      Case "strikeout"
         teNotes.Format.Font.StrikeOut = Last.Value
      Case "align left"
         teNotes.Format.Alignment = Align.Left
      Case "align centre"
         teNotes.Format.Alignment = Align.Center
      Case "align right"
         teNotes.Format.Alignment = Align.Right
      Case "justify"
         teNotes.Format.Alignment = Align.Justify
      Case "load file"
         ' Dialog.Title = "Select Image File"
         ' Dialog.Filter = ["*.png", "Image Files", "*", "All files"]
         ' If Dialog.OpenFile() Then Return
         ' FImageGet.$hImage = Image.Load(Dialog.Path)
         ' FImageGet.ShowModal()
         ' Insert_Picture("clipboard")
      Case "dot point"
      Case "hide form"
         EmbeddedForm_Close()
   End Select
   
End

Public Function backup()
   '-----------------------------------------
   'FIXME BETTER NAME
   'make me a stack
   'Saves the editor contents before erasing
   'just in case user did it by accident
   '-----------------------------------------
   
   editor_contents = teNotes.RichText()
   
End

Public Sub teNotes_Cursor()
   
   If bexit = True Then Return
   
   Object.Lock(btnBold)
   Object.Lock(btnItalic)
   Object.Lock(btnUnderline)
   Object.Lock(btnAlignLeft)
   Object.Lock(btnAlignCenter)
   Object.Lock(btnAlignRight)
   Object.Lock(btnAlignJustify)
   Object.Lock(SpinBox1)
   Object.Lock(tbColours)
   
   btnBold.Value = teNotes.Format.Font.Bold
   btnItalic.Value = teNotes.Format.Font.Italic
   btnUnderline.Value = teNotes.Format.Font.Underline
   
   Select Case teNotes.Format.Alignment
      Case Align.Left
         btnAlignLeft.Value = True
      Case Align.Right
         btnAlignRight.Value = True
      Case Align.Center
         btnAlignCenter.Value = True
      Case Align.Justify
         btnAlignJustify.Value = True
      Case Align.Normal
         btnAlignLeft.Value = True ' If the displayed langage is left to right written, that's OK. Elsewhere...
   End Select
   
   tbColours.Color = teNotes.Format.Color
   cmbFonts.Text = teNotes.Format.Font.Name
   SpinBox1.Value = teNotes.Format.Font.Size
   
   Object.UnLock(btnBold)
   Object.UnLock(btnItalic)
   Object.UnLock(btnUnderline)
   Object.UnLock(btnAlignLeft)
   Object.UnLock(btnAlignCenter)
   Object.UnLock(btnAlignRight)
   Object.UnLock(btnAlignJustify)
   Object.UnLock(cmbFonts)
   Object.UnLock(SpinBox1)
   Object.UnLock(tbColours)
   
End

Public Sub Auto_Text(shortcut As Collection)
   'Replace a text shortcut at the current cursor position with 
   'expanded user defined text. Silly hack abusing the clipboard
   'in order to allow inserting html tags
   
   Dim curpos As Integer = tenotes.Pos
   
   tenotes.Select(curpos - Len(shortcut!abbrev), Len(shortcut!abbrev)) 
   tenotes.Cut()
   bexit = True                                                             'prevent entering needless processing in subroutines
   Clipboard.Copy(shortcut!text, "text/html")
   tenotes.Paste()
   DataChange_Update_Indicators(True)
   bexit = False
   
End

Public Sub Auto_Text_Section(shortcut As Collection, re As Regexp)
   
   teNotes.Text = Replace$(teNotes.Text, re.Text & "\n", "")
   If shortcut!uline Then
      teNotes.Format.Font.Underline = True
   Endif
   teNotes.Format.Font.Bold = shortcut!bold
   teNotes.Insert(shortcut!text & " " & re[1].Text & "\n")
   teNotes.Format.Font.Bold = False
   teNotes.Format.Font.Underline = False
   DataChange_Update_Indicators(True)
   
End

Public Sub tbLoadFile_Click()
   '-----------------------------------------------------------
   'Load a file and insert into the editor either image or text
   'todo -the text
   '-----------------------------------------------------------
   
   Dim I As Image
   
   Dialog.Title = "Select Image File"
   Dialog.Filter = ["Pictures (*.png;*.jpg;*.jpeg)", "All files (*.*)"]
   If Dialog.OpenFile() Then Return
   Try FImageGet.Set_Image(Image.Load(Dialog.Path))  ' check this is a valid image
   
   If Not Error Then
      FImageGet.ShowModal()                          'show in a popup dialog, user can resize etc
      Insert_Picture("clipboard")                    'insert using "src=\'filename' etc for future parsing
   Else
      Try teNotes.Insert(File.Load(Dialog.Path))
      If Error Then
         Message.Info("An error occurred whilst trying to insert the file.\n")
      End If
   End If
   
End

Public Sub tbWebCam_Click()
   'Yes the whole of this module was a quick knock up and needs re-writing
   'sloppy ++ don not delete this
   
   teNotes.Insert(".draw")
   teNotes_KeyRelease()
   
End

Public Sub Terms_Columnview_KeyPress()
   
   If key.code = key.return Then
      Terms_Columnview_dblClick
   End If
   
End

Public Sub Terms_Columnview_dblClick()
   '----------------------------------------------------
   'User is selecting a coded term for this consultation
   'auto-save this immediately to the backend
   '----------------------------------------------------   
   
   Dim CurrentTerm As Collection
   ' Dim coded_diagnosis As New Collection
   
   Stop Event
   FTermSelector.Visible = False
   Last.movecurrent()
   CurrentTerm = FTermSelector.Terms[FTermSelector.columnview1.Item.key]  'BUG HERE
   ProgressNotes_Code_Add(CurrentTerm)
   With FTermSelector
      .Visible = False 
      .set_SearchText("")
   End With
Catch
   Return 
   
End

Public Sub ProgressNotes_Code_Add(CurrentTerm As Collection)
   '-------------------------------------------------------------
   'Adds a coded term to progress notes code
   'Called by Terms_Columnview_dblClick or lvwFavourites_Dblclick
   '------------------------------------------------------------   
   
   Dim coded_diagnosis As New Collection
   Dim existing_code As Collection 
   Dim bcodeExists As Boolean
   Dim sMsg As String
   
   If Trim(teNotes.text) = "" Then
      If Not modAdminDBI.Has_User_Seen_Tip("FProgressNoteEditor.CodingProgressNotes") Then 
         sMsg = "<P>You have elected to code for a progress note but have not yet entered any notes.</P>"
         "<P>That's fine, if you know what you are going to write in the progress notes later and have just elected "
         "to put in your coding first.</P><P>Be aware that if you save this consultation without writing any "
         "text or putting any image into the progress notes text editor, that your selected codes will not be saved "
         "as they cannot be linked to any existing notes in the database.</P>"
         With FUsageTip
            .Init("Coding ProgressNotes", "FProgressNoteEditor.CodingProgressNotes", sMsg)
            .ShowModal()
         End With  
      End If
      
   Endif
   For Each existing_code In ProgressNotesCodes   'First check this is not duplicated
      If CurrentTerm!code = existing_code!fk_code Then
         bcodeExists = True   
      Endif
   Next
   If Not bcodeExists Then
      coded_diagnosis!fk_progressnote = pk_progressnote
      coded_diagnosis!fk_code = currentterm!code
      coded_diagnosis!fk_coding_system = CurrentTerm!fk_coding_system
      coded_diagnosis!term = CurrentTerm!term
      ProgressNotesCodes.Add(coded_diagnosis, ProgressNotesCodes.count)
      DataChange_Update_Indicators(True)
      cvwReasonForEncounter_ReLoad()
   End If   
   cvwReasonForEncounter.Visible = True
   With txtReasonEncounter
      .Clear()
      .SetFocus()
   End With
Catch
   Return 
   
End

Public Sub cvwReasonForEncounter_ReLoad()
   
   Dim PNC As Collection
   Dim x As Integer
   
   With cvwReasonForEncounter
      .Clear 
      .Columns.count = 1
   End With
   For Each PNC In ProgressNotesCodes
      cvwReasonForEncounter.Add(x, 0)
      cvwReasonForEncounter[x][0] = PNC!term & " (" & PNC!fk_code & ")"
      Inc x
   Next
   
End

Public Sub ProgressNotes_Codes_Reload()
   '--------------------------------------------------------
   'Reloads any existing codes for this progress note editor
   '--------------------------------------------------------
   
   If Not IsNull(pk_progressnote) Then 
      ProgressNotesCodes = modUtil.Copy_Collection_Keyed_Sequentially(modProgressNotes.ProgressNotes_Codes_Get(pk_progressNote))
   End If   
   cvwReasonForEncounter_ReLoad()
   
End

Public Sub Form_Resize()
   
   Try FTermSelector.width = Me.Width - 100
   HSplit_Coding_Buttons_Resize
   
End

Public Sub txtReasonEncounter_KeyPress()
   
   Select Case Key.Code
      Case key.Down
         With FTermSelector.ColumnView1
            .SetFocus
            .MoveFirst
            .Item.Selected = True   'bug here, typed in bsl hit <enter> crash
         End With
      Case key.Return
         tenotes.SetFocus()
         cvwReasonForEncounter.Visible = True
         FTermSelector.Visible = False 
   End Select
Catch
   Return 
   
End

Public Sub txtReasonEncounter_KeyRelease()
   '-----------------------------------------------------------------
   'User is typing trying to find term as reason for the consultation
   '-----------------------------------------------------------------
   
   If Trim(txtReasonEncounter.text) <> "" Then                       'if text to search for
      FTermSelector.Set_SearchText(Trim(Last.text))   'do the search
   End If   
   If FTermSelector.ColumnView1.count Then             'if terms found
      FTermSelector.Visible = True                     'remove the terms form
      cvwReasonForEncounter.Visible = False            'hide the currently coded items
   Else                                                'no terms were found
      FTermSelector.Visible = False                    'remove terms form
      cvwReasonForEncounter.Visible = True             'show whatever terms we've picked               
   Endif
   
End

Public Sub txtReasonEncounter_Change()
   '-------------------------------------------------------------------------------
   'If the user deletes the seach text, re-institute the reasons for encounter list
   '-------------------------------------------------------------------------------   
   
   If txtReasonEncounter.text = "" Or FTermSelector.ColumnView1.count = 0 Then
      FTermSelector.Visible = False
      cvwReasonForEncounter.Visible = True
   Endif
   
End

Public Sub txtReasonEncounter_GotFocus()
   
   cvwReasonForEncounter.Visible = True
   FTermSelector.Visible = False 
   
End

Public Sub VBox_Reason_For_Encounter_Leave()
   '-------------------------------------------------------
   'trigger resetting of appropriate list if leave the area
   'containing the reasons for encounter
   '-------------------------------------------------------  
   
   txtReasonEncounter.text = ""   'this also resets the list visible if not already and removes terms
   
End

Public Sub Settings_Save()
   
   Settings["Notes_Editor/HSplit_Coding_Buttons.layout"] = HSplit_Coding_Buttons.Layout
   
End

Public Sub Settings_Load() 'do not make this private
   
   HSplit_Coding_Buttons.layout = Settings["Notes_Editor/HSplit_Coding_Buttons.layout", modUtilGui.HSplit([1, 1, 1])]
   cvwReasonForEncounter.font = Font[Settings["Notes_Editor/cvwReasonForEncounter.font", "DejaVu Sans,9"]]
   lvwFavourites.font = Font[Settings["Notes_Editor/lvwFavourites.font", "DejaVu Sans,9"]] 
   cvwMedicationsToday.font = Font[Settings["Notes_Editor/cvwMedicationsToday.font", "DejaVu Sans,9"]]
   VSplit_Meds_StickyNotes.Layout = Settings["Notes_Editor/VSplit_Meds_StickyNotes.Layout", modUtilGUI.VSplit([1, 1])]   
   
End

Public Sub tbSaveConsultAsPDF_Click()
   
   '---------------------------------------------------------------------------
   'Save the pdf as a file optionally provider the filename as the patient name
   '---------------------------------------------------------------------------
   
   Dim filename As String
   
   Dialog.Filter = ["*.pdf", "PDF"]
   
   If Not IsNull(currentconsult) Then
      filename = Replace(Trim(currentconsult!patient!wholename), " ", "-") & "_" & Format(currentconsult!patient!birthdate, "dd-mm-yyyy")
      filename &= "_exported_" & Format(currentconsult.GetConsultDate(), "dd-mm-yyyy") & "-" & "todays_notes"
      Dialog.title = "Export Consult as  PDF for " & currentconsult!patient!wholename
      Dialog.Path = User.home &/ filename
   Else
      Dialog.title = "Save the consult as PDF"
   Endif
   
   If Dialog.SaveFile() Then Return    'user cancels save
   
   If File.Ext(Dialog.Path) <> "pdf" Then
      Dialog.Path &= ".pdf"
   Endif
   Filename = modPrinting.Make_PDF_From_Html(tenotes.Richtext,,,, File.Name(Dialog.Path),, File.Dir(Dialog.Path))
   FClinical.Editor_ShowPage_External("pdf document external", "ProgressNotes.pdf", filename)
   
End

Public Sub cvwReasonForEncounter_Select()
   
   cvwReasonForEncounter.MoveCurrent
   cvwReasonForEncounter_Key = Last.item.Key
   
End

Public Sub cvwReasonForEncounter_Menu()
   
   If Last.count Then
      mnuConsultCodes.Popup
   Endif
   
End

Public Sub ProgessNote_Codes_Delete()
   '-----------------------------------------------
   'Deletes an item from the consultation code list
   ' CREATE TABLE clin_consult.progressnotes_codes
   ' (
   '   pk serial NOT NULL,
   '   fk_progressnote integer NOT NULL,
   '   fk_code text NOT NULL,
   '   deleted boolean NOT NULL DEFAULT false,
   '   CONSTRAINT progressnotes_codes_pkey PRIMARY KEY (pk ),
   '   CONSTRAINT progressnotes_codes_fk_progressnote_fkey FOREIGN KEY (fk_progressnote)
   '       REFERENCES clin_consult.progressnotes (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '-----------------------------------------------
   
   If Message.Question("Are you sure you want to delete this coded item?", "Yes", "No") = 2 Then Return  
   If Not IsNull(ProgressNotesCodes[cvwReasonForEncounter_key]!pk) Then        'if already saved for this consult, remove from backend
      modDBConnect.update(" clin_consult.progressnotes_codes", Null, ["pk": ProgressNotesCodes[cvwReasonForEncounter_key]!pk, "deleted": True])
      modDBConnect.CommitTrans()
      ' FClinical.Refresh_AllPreviousNotes()                             'Refresh the progress notes (if visible) i.e remove the saved coded progress note
   End If   
   ProgressNotesCodes.Remove(cvwReasonForEncounter_key)         'eitherway, remove from the collection
   ProgressNotesCodes = modUtil.Copy_Collection_Keyed_Sequentially(ProgressNotesCodes) 're-order the collection 
   cvwReasonForEncounter_ReLoad
   
End

Public Sub mnuConsultCodes_Click()
   
   Select Case Last.tag
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwReasonForEncounter, "Notes_Editor")
      Case "help"
         modUtilGUI.NotImplemented("Help for coding consultations")
      Case "delete"
         ProgessNote_Codes_Delete
      Case "add to favourites"
         Code_Add_To_Favourites()    'put in the row if not exist to check not already on the list
   End Select
Catch
   Return 
   
End

Public Sub Code_Add_To_Favourites()
   'If doesn't already exist, add to favourites   
   
   Dim code As Collection
   
   For Each code In Favourite_Codes
      If code!code = ProgressNotesCodes[cvwReasonForEncounter_key]!fk_code Then
         Return
      Endif
   Next
   modCodingDBI.Codes_User_Favourite_Save(modDBConnect.currentUser!fk_staff, ProgressNotesCodes[cvwReasonForEncounter_key])
   lvwFavourites_Refresh 
   
End

Public Sub BMI_Clear()
   
   txtHeight.text = ""
   txtWeight.text = ""
   txtBMI.text = ""
   
End

Public Sub EditArea_TxtBox_Change()
   
   Select Case Last.tag
      Case "height", "weight"
         Try CalcBMI()
      Case "to do next visit"
         
   End Select
   
End

Public Sub tbBMIClear_Click()
   
   txtweight.text = ""
   txtHeight.text = ""
   txtBMI.text = ""
   lblBMIComment.text = ""
   lblOverweight.Visible = False 
   With txtOverweight
      .text = ""
      .Visible = False  
   End With
   
End

Public Sub HSplit_Coding_Buttons_Resize()
   
   lblCodedFavourites.width = HSplit_Coding_Buttons.Layout[1]
   
   
End

Public Sub lvwFavourites_Refresh()
   '---------------------------------------------------------------------------- 
   'Reload the users favourite codes - saves searching e.g for hard to find ones
   '----------------------------------------------------------------------------
   
   Dim favourite As Collection
   
   lvwFavourites.clear
   Favourite_Codes = modUtil.Copy_Collection_Keyed_Sequentially(modCodingDBI.Codes_User_Favourites_Get(modDBConnect.currentUser!fk_staff))
   For Each favourite In Favourite_Codes
      lvwFavourites.Add(lvwFavourites.count, favourite!term & " (" & favourite!code & ")")
   Next
   
End

Public Sub lvwFavourites_keypress()
   
   If Key.code = Key.return Then
      lvwFavourites_dblclick
   Endif
   
End

Public Sub lvwFavourites_dblclick()
   '---------------------------------------------------
   'Transfer the code to the cvwReasonForEncounter list
   '---------------------------------------------------
   
   lvwFavourites.MoveCurrent
   ProgressNotes_Code_Add(Favourite_Codes[lvwFavourites.Item.key])
Catch
   Return
   
End

Public Sub lvwFavourites_Menu()
   
   lvwFavourites.MoveCurrent
   lvwFavourites_Key = lvwFavourites.Item.Key
   If lvwFavourites.count Then mnuCodeFavourites.Popup
   
End

Public Sub mnuCodeFavourites_Click()
   
   Dim sMsg As String
   
   Select Case Last.tag
      Case "delete"
         modCodingDBI.Codes_User_Favourite_Delete(Favourite_Codes[lvwFavourites_Key])
         lvwFavourites_Refresh
      Case "use code"
         If Not modAdminDBI.Has_User_Seen_Tip("FProgressNoteEditor.Favourites") Then 
            sMsg = "<P>Make coding your consultations quicker and easier.</P>"
            "<P>Instead of using the popup menu to select your code, just double click on the item in the favourites list "
            "and it will be transferred to the coded terms list for your current encounter - "
            "its much quicker!.</P><P>You can also remove codes at any time using the 'Remove' option from the popup menu.<P>"
            "<P>You can move favourites on/off the list for example you could put the code 'immunization; influenza(R44003)'"
            " onto your favourties list just for the duration of the flu season.</P>"
            "<P>You could also temporarily put on a term you find hard to remember until you can pull select it easily from the general terms search.</P>"
            With FUsageTip
               .Init("Using the Favourites Terms List", "FProgressNoteEditor.Favourites", sMsg)
               .ShowModal()
            End With  
         End If
         lvwFavourites_dblclick
      Case "font"
         modUtilGui.Columnview_SetFont(lvwFavourites, "Notes_Editor")
   End Select 
Catch
   Return 
   
End

Public Sub Set_fk_section(fk As Variant)
   '-----------------------------------------------------------------------------
   'Sets the primary key of the current progress note
   'this is currrently not used, was used when I allow per-problem progress notes
   '-----------------------------------------------------------------------------
   
   '  fk_section = fk
   
End

Public Sub Shortcuts_Init()
   '-----------------------------------------------------------------
   'get user and system shortcuts for use in editor
   'these are triggered by a '.' character eg .dx expands to Diagnosis
   'these can be created by user - see FStsaffPreferencesShortcuts
   'which also will call this routine to re-load if new ones added
   '------------------------------------------------------------------
   
   Dim shortcut As New Collection
   
   Shortcuts = New Collection       'used later
   For Each shortcut In modConsultDBI.Shortcuts_For_User_get(modDBConnect.currentUser!fk_staff, True) 'True = included system shortcuts
      Add_Shortcut(shortcut!expanded, shortcut!shortcut, False, False, False)
   Next
   
End

Public Sub tbSave_Click()
   
   Save()
   
End

Public Sub Sticky_Notes_Reload()
   Dim note As Collection
   
   scrollview1.Children.Clear
   sticky_notes = modStaffShiftDBI.Staff_Messages_Get_Outstanding(modDBConnect.currentUser!fk_staff)
   For Each note In sticky_notes
      Sticky_Notes_Row(note)
   Next
End

Public Sub mnuStickyNotes_Click()
   
  Dim last_note As Collection = Last_Row_Clicked.Tag
   
  Select Case Last.tag
  Case "delete"
  Case "mark completed"
    If modDBConnect.update("clerical.staff_Messages", Null, ["pk": last_note!pk_staff_messages, "completed": True, "fk_staff_completed": modDBConnect.currentUser!fk_staff]) Then  
       modDBConnect.CommitTrans
       Sticky_Notes_Reload
    Endif
  End Select 
   
End

Public Sub Sticky_Notes_Row(row_data As Collection)
   
    'adds a new row to a scrollview representing an internal office staff message
   'fixme code duplicated in FProgressNoteEditor - no time to think
   
   Dim HB As HBox
   Dim lbl As TextLabel
   Dim hline As Separator
   Dim urgency_pic As PictureBox
   Dim sTableTemplate As String
   Dim sDestinationStaff As String
   Dim sHtml As String 

   sHtml = ""
   "<COL WIDTH=5%>"
   "<COL WIDTH=85%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=5%>"
   "col1"
   "</TD>"
   "<TD WIDTH=85%>"
   "col4"
   "</TD>"
   "</TR>" 
  ' If IsNull(day_notes) Then day_notes = New HBox[]
   With HB = New HBox(scrollview1) As "notes_row"         'create the box to hold everything
      .AutoResize = True 
      .Padding = 2
      .tag = row_data
      .Background = Color.White
   End With
   With urgency_pic = New PictureBox(HB) As "picUrgency"  'green, amber and red
      .height = 28
      .Width = 28
      .Alignment = Align.TopLeft
      Select Case row_data!fk_lu_urgency
         Case 1
            .Picture = Picture.Load("icons/12/green_dot.png")
         Case 2
            .Picture = Picture.Load("icons/12/amber_dot.png")
         Case 3
            .Picture = Picture.Load("icons/12/red_dot.png")
      End Select
   End With
   
   With lbl = New TextLabel(HB) As "lblNotes"              'the row of notes
      .AutoResize = True 
      .Alignment = Align.TopLeft
      .width = scrollview1.width - 10
      .text = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=5 CELLSPACING=1>"
      .text &= sHTML
      .text = Replace(.text, "col1", Format(row_data!shift_date, "dd/mm/yyyy"))
      .text = Replace(.text, "col4", row_data!notes)
      .text &= "</TABLE>"
      .Expand = True
   End With
   Hb.Height = lbl.Height
   With hline = New Separator(scrollview1)  ' a line to separate each noes
      .height = 1
      .background = Color.DarkGray
   End With
   Wait
 
   
End

Public Sub Timer1_Timer()
   
   Sticky_Notes_Reload
   
End

Public Sub lblNotes_Menu()

mnuStickyNotes.Popup 
   
End

Public Sub lblNotes_mousedown()
   
   Try Last_Row_Clicked.Background = Color.RGB(255, 255, 220)
   Last.Parent.background = Color.RGB(215, 232, 240) 'Color.LightBackground
   Last_Row_Clicked = Last.Parent 
   
End
Public Sub cvwMedicationsToday_Menu()
   
   If cvwMedicationsToday.count Then mnuMedicationsPrescribedToday.Popup
   
End

Public Sub mnuMedicationsPrescribedToday_Click()
   
   Select Case Last.tag
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwMedicationsToday, "Notes_Editor")
      Case "copy drug details"
         Clipboard.Copy(cvwMedicationsToday.Item.Text, "text/html") 'fixme this does not work when go to paste
   End Select 
   
End

Public Sub VSplit_Meds_StickyNotes_Resize()
   
   Settings["Notes_Editor/VSplit_Meds_StickyNotes.Layout"] = VSplit_Meds_StickyNotes.Layout   
   
End

Public Sub Form_Leave()

   Timer1.Enabled = False  

End

Public Sub Form_Enter()

   Timer1.Enabled = True   

End
