' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-----------------------------------------------------------------------
Private Templates As Collection
Public bBold As Boolean
Public cp1 As Integer
Private $Result As Result
Public cp2 As Integer
Public sBP As String
Public sMeasurement As String
Public sWeight As String
Public sHeight As String 'FIXME remove me back to patient
Public pk_pastHistory As Integer 'temporary the pk of the past history item using this page.
Public bExit As Boolean
Public editor_contents As String 'fixme make me an array/push/pop
Private dxPos As Integer
Private dxText As String
Public CurAt As Integer
Public Paragraph_At As Integer
Public character_at As Integer
Public iZoom As Integer
Public default_Zoom As Integer
Public check_state As Boolean
Public FDraw As FDrawEditor
Private Terms As Collection
Public FExcise As FProcedures
Private hObs As Observer
Public EmbeddedForm As Object
Public sShortCutText As String
Public CtrlDown As Boolean
Public FnDown As Boolean
Private copy_of_Editor_text As String
Private data_changed As Boolean 'if true the content of the notes has changed.
Private currentconsult As CConsult
Private ParentPage As FProgressNotePage
Private ParentLayout As Integer[]
Private shortcuts As Collection
Private SpellChecker As ClskSpell
Private bFontBold As Boolean
Private FTermSelector As FCodedTermSelector
Private obs As Observer
Private VSplit_Layout As Integer[]
Private ParentForm As FProgressNotePage
Private Last_Key_Numeric As Boolean

Public Sub Set_Copy_of_Editor_text(sText As String)
   
   copy_of_Editor_text = sText
   
End

Public Sub Timer1_Timer()
   ' Inc Application.Busy
   ' tenotes.Enabled = False
   ' ParentForm.Save()
   ' Dec Application.Busy
   ' tenotes.Enabled = True
   
End

Public Sub Init(cons As CConsult, notes As String, Optional heading As String, Optional F As FProgressNotePage) 'temporary optional param for me RT 02Feb12 FIXME
   '-----------------------------------------------------------------------
   'If progress notes have already been written this consultation show them
   '-----------------------------------------------------------------------
   
   Dim R As Result
   Dim sString As String
   
   Last_Key_Numeric = False
   ParentForm = F                            'Fixme, clumbsy but then accesses FprogressNotePage.Save() see spell checker this module
   currentconsult = cons
   tenotes.RichText = notes
   shortcuts = New Collection
   'FIXME: These need to be made user defined
   Add_Shortcut("System Review", ".sr", True, False, False)
   Add_Shortcut("ANNUAL CHECKUP", ".ann", True, True, False)
   Add_Shortcut("Presenting Symptoms", ".ps", True, False, False)
   Add_Shortcut("On Examination", ".oe", True, False, False)
   Add_Shortcut("Diagnosis", ".dx", True, False, False)
   Add_Shortcut("Plan", ".pl", True, False, False)
   Add_Shortcut("Patient Concerns", ".pc", True, False, False)
   Add_Shortcut("Treatment", ".rx", True, False, False)
   Add_Shortcut("Workcover Notes", ".wc", True, False, False)
   Add_Shortcut("no diarrhoea ", ".nd", False, False, False)
   Add_Shortcut("no vomiting ", ".nv", False, False, False)
   Add_Shortcut("afebrile ", ".af", False, False, False)
   Add_Shortcut("Review of Results ", ".rr", True, False, False)
   Add_Shortcut("Travel Advice/Vaccination ", ".tav", True, False, False)
   Add_Shortcut("Investigations ", ".in", True, False, False)
   Add_Shortcut("Complaints ", ".co", True, False, False)
   Add_Shortcut("Immunization ", ".imm", True, False, False)
   Add_Shortcut("Scripts ", ".scr", True, False, False)
   Add_Shortcut("Home Visit ", ".hv", True, False, False)
   Add_Shortcut("Section:", ".sh", True, True, True)
   Add_Shortcut("Impression:", ".imp", True, False, False)
   Add_Shortcut("Coded Diagnosis:", ".cdx", True, False, False)
   
   With FTermSelector = New FCodedTermSelector(HBox_Coding)
      .Ignore = False
      .left = 10
      .width = teNotes.width - 20
      .Background = Color.Background
      .Visible = False
      .Expand = True
   End With
   obs = New Observer(FTermSelector.columnview1) As "Terms_columnview"
   With cvwReasonForEncounter
      .Columns.count = 2
      
   End With
   'Spelling stuff
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = tenotes
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   modUtil.FindProgram("aspell", "aspell") 'FIXME - do something with this
   Templates_ReLoad()
   If heading <> "" Then
      With lblTodaysNotes
         .text = heading
         .Visible = True
      End With
      HBox_Templates.visible = False
   End If
   
End

Private Sub Add_Shortcut(text As String, abbrev As String, bold As Boolean, uline As Boolean, section As Boolean)
   
   shortcuts.Add(["text": text, "abbrev": abbrev, "bold": bold, "uline": uline, "section": section], abbrev)
   
End

Public Function Get_Copy_of_Editor_text() As String
   
   Return copy_of_Editor_text
   
End

Public Function Get_Copy_of_Editor_RichText() As String
   
   Return tenotes.RichText
   
End

Public Sub Form_Close()
   
   Settings_Save()
   
End

Public Sub Form_KeyPress()
   
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
         Case Asc("F")
            
      End Select
   End If
   
End

Public Function get_data_changed() As Boolean
   
   Return data_changed
   
End

Public Sub DataChange_Update_Indicators(flag As Integer)
   '------------------------------------------
   'Removes Or sets the red border To indicate
   'if data is changed or note, resets flags
   '------------------------------------------
   
   If flag Then
      Vbox_ConsultNotes.BackGround = Color.Red
      Vbox_ConsultNotes.Padding = 1
      
      data_changed = True
   Else
      Vbox_ConsultNotes.BackGround = Color.Gray
      Vbox_ConsultNotes.Padding = 1
      tlsuggestions.text = ""
      data_changed = False
   End If
   
End

Public Sub teNotes_GotFocus()
   
   cvwReasonForEncounter.Visible = True
   FTermSelector.Visible = False
   
End

Public Sub teNotes_Change()
   
   If bExit Then Return
   '-------------------------------------------------------------
   'DO NOT be smart and make me Last (ie don't use Last.whatever)
   'this change event is called external to this form
   'see FInboxDocumentPage.Editor_Init()
   '-------------------------------------------------------------
   ' textarea1.text = teNotes.richtext
   If Trim(teNotes.text) = "" Then
      
      '--------------------------------------------------------------------
      'If there is not text, this dosn't mean that the data hasn't changed
      'e.g it could have already been saved, and just deleted = changed
      'Each time this parent's form saves the data, it sets:
      'copy_of_Editor_text to the last, saved text
      '--------------------------------------------------------------------
      If copy_of_Editor_text = "" Then
         DataChange_Update_Indicators(False)
      Else
         DataChange_Update_Indicators(True)
      End If
   Else
      DataChange_Update_Indicators(True)
      Editor1.text = tenotes.text
      textarea1.text = tenotes.text
   End If
   '-------------------------------------------------------------------------
   'The consult notes editor is either being used for general notes, or for
   'a specific past history item if embedded frmFClinical
   'so if Condition is null then it is general notes onFClinical (my convention)
   ' '-------------------------------------------------------------------------
   '  If Not Condition Then
   '    ' modglobal.clinicalform.currentConsult.GeneralNotes.notes = teNotes.RichText
   '    ' gvar.currentconsult.generalnotes.notes = teNotes.RichText
   '     'modglobal.clinicalForm.
   '  Else
   '     ' The condition was set by the calling form egFClinical.ShowPage
   '   ' Condition.todays_notes_changed = True
   '   ' Condition.todays_notes = teNotes.richtext
   '   ' modDbug.pasthistory_debug(modglobal.clinicalform.currentpatient.past_history, modglobal.clinicalform.teDebugOutput)
   '  End If
   
End

Public Sub Editor_Fonts_Reset()
   '------------------------------------------------------------
   'Clears any font attributes ie saves clicking muliple buttons
   '------------------------------------------------------------
   
   Object.Lock(btnBold)
   Object.Lock(btnItalic)
   Object.Lock(btnUnderline)
   Object.Lock(btnAlignLeft)
   Object.Lock(btnAlignCenter)
   Object.Lock(btnAlignRight)
   Object.Lock(btnAlignJustify)
   Object.Lock(cmbFonts)
   Object.Lock(SpinBox1)
   Object.Lock(ColourButton1)
   btnBold.Value = False
   btnItalic.Value = False
   btnUnderline.Value = False
   
   btnAlignLeft.value = False
   btnAlignCenter.value = False
   btnAlignJustify.Value = False 'what is this
   btnAlignRight.value = False
   'FIXME put in the default font
   'put in black as default colour
   teNotes.Format.Font.Bold = False
   teNotes.Format.Font.Italic = False
   teNotes.Format.Font.Underline = False
   teNotes.Format.Font.StrikeOut = False
   teNotes.Format.Alignment = Align.Left
   ColourButton1.Color = Color.Black
   teNotes.Format.Color = Color.Black
   Object.UnLock(btnBold)
   Object.UnLock(btnItalic)
   Object.UnLock(btnUnderline)
   
   Object.UnLock(btnAlignLeft)
   Object.UnLock(btnAlignCenter)
   Object.UnLock(btnAlignRight)
   Object.UnLock(btnAlignJustify)
   Object.UnLock(cmbFonts)
   Object.UnLock(SpinBox1)
   Object.UnLock(ColourButton1)
   
End

Public Sub Fonts_Fill_Combo()
   
   Dim sFont As String
   
   For Each sFont In Fonts
      cmbFonts.add(sFont)
   Next
   
End

Public Sub ColourButton1_Change()
   
   teNotes.Format.Color = ColourButton1.Color
   teNotes.SetFocus()
   
End

Public Sub SpinBox1_Change()
   
   teNotes.Format.Font.Size = Last.Value
   teNotes.SetFocus()
   
End

Public Sub cmbFonts_Click()
   
   teNotes.Format.Font.Name = Last.text
   teNotes.SetFocus()
   
End

Public Sub Terms_Get()
   '-------------------------------------------------------------------------------------
   'Gets list of diagnostic terms
   'Cannot set default if count is one because must  be able to add new occupations
   'can't remove the label because it needs to occupy space to keep textbox correct width
   '-------------------------------------------------------------------------------------
   
   Dim term As Collection
   Dim key As String
   Dim curpos As Integer
   Dim charpos As String
   Dim blankchar As Integer = -1
   
   ' Do Until blankchar = 0
   dxpos = InStr(teNotes.text, "Coded Diagnosis:")
   dxText = Mid$(teNotes.text, dxPos + 16, tenotes.pos - dxpos)
   ' charpos = InStr(teNotes.text,
   ' "<p dir=\"ltr\">Dx"
   With FTermSelector
      .set_SearchText(dxText)
      .Visible = True
   End With
   ' charpos = teNotes.ToPos
   ' textarea1.text = teNotes.richtext
   '  Loop
   
   '  If Trim(txtCodedTerm.text) = "" Then
   '       currentTerm!code = ""
   '       lblNewCondition.Foreground = Color.white
   '       Return
   '  End If
   '
   '   Terms = modCodingDBI.Get_Terms(dxText, chkLimit.value, chkicd10.value, SpinBoxTermLimits.value)
   ' VBox1.Height = Vsplit1.height
   ' With columnview1
   '    .Clear()
   '    .Columns.count = 2
   '    .Columns[0].Width = teNotes.width - 300
   '    .Columns[1].width = 100
   '    .width = teNotes.width
   '
   ' End With
   ' If Terms.count Then
   '    For Each term In Terms
   '       key = term!code
   '       columnview1.Add(key, 0)
   '       columnview1[key][0] = term!term
   '       columnview1[key][1] = term!system
   '    Next
   '    lblTermCount.text = Str$(terms.count) & " terms retreived"
   '    columnview1.tag = "something"
   '    columnview1.Raise
   '    columnview1.Visible = True
   '    VBox9.Visible = True
   ' Else
   '    columnview1.Visible = False 'empty recordset
   '    VBox9.Visible = False
   '
   ' End If
   
End

Public Sub getlist_diagnoses()
   
   Dim curpos As Integer
   Dim charpos As String
   Dim blankchar As Integer = -1
   ' modTemp.TemP_Condition_Get("hyper", listview2)
   curpos = teNotes.Pos
   ' Do Until blankchar = 0
   'dxText = Mid(teNotes.text, curpos - 1, curpos)
   dxText = Mid$(teNotes.text, dxPos + 3, curpos - dxpos + 3)
   'charpos =
   ' modTemp.TemP_Condition_Get(dxText, listview2)
   ' =================
   'this was in modtemp and nothing else
   '------------------------------------
   
   ' Public Sub TemP_Condition_Get(txt As String, listview1 As ListView)
   '
   '       Dim $Result As Result
   '
   '       If Trim(txt) = "" Then
   '          listview1.Visible = False
   '           Return
   '       End If
   '       $Result = modcodingDBI.Condition_Get(Trim(txt))
   '      If $Result.count Then
   '         listview1.Clear
   '          For Each $Result
   '
   '                     listview1.Add(Str$($Result!pk), $Result!description)
   '                     $Result.MoveNext
   '
   '
   '            Next
   '           ' listview1.tag = txtCondition
   '            listview1.Raise
   '            listview1.Visible = True
   '
   '       Else
   '           'empty recordset
   '          listview1.Visible = False
   '
   '       End If
   ' End
   
   ' Loop
End

Public Sub tenotes_KeyPress()
   
   Dim CtrlDown As Boolean
   Dim FnDown As Boolean
   
   ' If Key.code = Key.down And listview2.Visible Then
   '    listview2.MoveFirst
   '    listview2.SetFocus
   '    listview2.Item.Selected = True
   '    Return
   ' End If
   'FIXME MERGE ME WITH EDITORbUTTONS_CLICK()
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
            ' Case Asc("B") 'fixme decide on keys for formattiing.
            '   teNotes.Format.Font.Bold = Not (bBold)
         Case Asc("L")
            teNotes.Format.Alignment = Align.Left
         Case Asc("M")
            teNotes.Format.Alignment = Align.Center
         Case Asc("R")
            teNotes.Format.Alignment = Align.Right
         Case Asc("M")
         Case Asc("w") 'WIPE fixme put in docs
            backup()
            teNotes.Clear()
            tlsuggestions.Text = ""
         Case Asc("O") 'OOPS fixme implement me
         Case Asc("B")
            teNotes.Format.Font.Bold = Not teNotes.Format.Font.Bold
         Case Asc("I")
            teNotes.Format.Font.Italic = Not teNotes.Format.Font.Italic
         Case Asc("U")
            teNotes.Format.Font.Underline = Not teNotes.Format.Font.Underline
            
         Case Asc("Z")
            If teNotes.text = "" Then
               teNotes.RichText = editor_contents.text() 'bug here null object FIXME
            End If
            
      End Select
   End If
   Let Last_Key_Numeric = False
   If Key.Code >= Key["0"] And If Key.Code <= Key["9"] Then Last_Key_Numeric = True
   If Key.Code = Key["."] Then Last_Key_Numeric = True
   ' If key.code = key.down And FTermSelector.Visible Then
   '    With FTermSelector.ColumnView1
   '       .SetFocus()
   '       .MoveFirst
   '       .Item.Selected = True
   '    End With
   ' End If
   
End

Public Sub listview2_keypress()
   
   ' If Key.code = Key.return Then
   '    listview2.MoveCurrent
   '    'teNotes.text = Replace(teNotes.text, "Dx " & dxText, "Diagnosis:" & listview2.Item.text)
   '    teNotes.RichText = Replace$(teNotes.RichText, "Dx " & dxText, "<A HREF='Diagnosis'>Diagnosis " & listview2.Item.text & "</A><BR>")
   '    listview2.Visible = False
   '    teNotes.pos = Len(teNotes.text)
   '    teNotes.SetFocus
   ' End If
   
End

Public Sub DrawEditor_Show()
   '---------------------------------------------
   'Show the drawing editor cum web-cam interface
   '---------------------------------------------
   
   bexit = True
   sShortCutText = ".draw"
   If Me.Parent.Window Is FProgressNotePage Then
      ParentPage = Me.Parent.Window
   Endif
   Fdraw = New FDrawEditor(Vbox_ConsultNotes)
   FDraw_Create_Observer()
   EmbeddedForm_Show(FDraw)
   FDraw.Enabled = True
   FDraw.Init("", currentconsult)
   bexit = False
   
End

Public Sub teNotes_KeyRelease()
   
   Dim s As Collection
   Dim re As Regexp
   Dim notes As String
   
   If bExit Then
      Return
   End If
   If InStr(teNotes.text, ".draw") Then
      DrawEditor_Show()
      Return
   End If
   
   For Each s In shortcuts
      If s!section Then
         If Key.Code = Key.Return Then
            Try re = New Regexp(teNotes.Text, "\\" & s!abbrev & " (.*)", Regexp.Caseless)
            If re.Offset >= 0 Then Auto_Text_Section(s, re)
         Endif
      Else
         If InStr(teNotes.Text, s!abbrev, 0, gb.IgnoreCase) Then Auto_Text(s)
      End If
   Next
   
   If Not Last_Key_Numeric Then
      notes = modMeasurementsDBI.ProgressNote_Parse_For_Measurement_Keypress(teNotes.RichText)
      If notes <> teNotes.RichText Then teNotes.RichText = notes ' only replace when there is a change
   Endif
Catch 'the ReExp code above sometimes crashes Ian FIXME
   Return 
   
End

Public Sub EmbeddedForm_Close()
   '--------------------------------------
   'Closes any form embedded in the editor
   'reloads the main HSplit layout
   '--------------------------------------
   
   Dim Charpos As Integer
   
   charpos = InStr(teNotes.text, sShortCutText)
   EmbeddedForm.Close()
   teNotes.Richtext = Replace$(teNotes.richtext, sShortCutText, "")
   teNotes.pos = charpos - 1
   teNotes.Visible = True
   teNotes.SetFocus()
   HBox_WordProcessorButtons.Visible = True
   lblTodaysNotes.Visible = True
   VBox_Reason_For_Encounter.Visible = True
   
End

Public Sub EmbeddedForm_Show(F As Form)
   '------------------------------------------
   'Pops up an embedded form according to the
   'short cuts in the teNotes editor
   'Set EmbeddedForm so that tbHideForm can
   'close it later
   '------------------------------------------
   
   teNotes.Visible = False
   VBox_Reason_For_Encounter.Visible = False
   HBox_WordProcessorButtons.Visible = False
   lblTodaysNotes.Visible = False
   EmbeddedForm = F
   EmbeddedForm.Show()
   
End

Public Sub cmbTemplates_Click()
   '----------------------------------------------------------------------------------------
   'If notes exist in the editor then give user option of over-writing or adding to the end
   'or cancelling.
   '----------------------------------------------------------------------------------------
   
   If Len(tenotes.text) > 0 Then
      message.title = "Using Templates"
      Select Case message.Question("Please select how you wish to apply this template", "Erase previous notes", "Add to end of existing notes", "Cancel")
         Case 1
            teNotes.Clear()
            bexit = True
            Try teNotes.RichText = templates[cmbTemplates.index]!template
            bExit = False
         Case 2
            bexit = True
            Try teNotes.RichText &= templates[cmbTemplates.index]!template
            bExit = False
      End Select
   Else
      teNotes.Clear()
      bexit = True
      Try teNotes.RichText = templates[cmbTemplates.index]!template
      bExit = False
   Endif
   Return
   
End

Public Sub teNotes_Drop()
   '-----------------------------------------------------------
   'Accept drop only at moment from known image source
   'Inserts this picture at the current cursor position
   ' FIXME fixing eg use mime type To know data - type
   'and insert appropriately eg   "text/x-moz-url"
   '----------------------------------------------------------
   
   Dim pic As New Picture
   
   Try pic = pic.Load(Drag.Source.Tag!fname)
   If Error Then
      message.info("Sorry mime type" & Drag.format & " not implemented.\n\nYou could speak to the developer's if this is important to you.")
      Return
   Endif
   Clipboard.Copy(pic.image)
   If Not InStr(tenotes.richtext, ".pic") Then tenotes.Insert(".pic") 'inserts pic at current cursor position
   Insert_Picture("clipboard")
   
End

Public Sub RequestForm_ToolButtons_Click()
   
   Stop Event
   FRequests.Hide
   teNotes.Show()
   
End

Public Sub DrawEditor_ToolButtons_Click()
   '-------------------------------------------------------
   ' Only two tool buttons in the draw editor are monitored
   'see FDraw_Create_Observer()
   '-------------------------------------------------------
   
   Stop Event
   Select Case Last.tag
      Case "close"
         '-------------------------------------------------------------
         'User has closed the drawing editor, not by saving the picture
         'so need to remove .draw
         '-------------------------------------------------------------
         teNotes.RichText = Replace$(teNotes.RichText, ".draw", "")
         EmbeddedForm_Close()
         tbWebCam.enabled = True
      Case "insert picture"
         '--------------------------------------------------------
         'User is closing the drawing editor by inserting an image
         '--------------------------------------------------------
         Insert_Picture1()
   End Select
   
End

Public Sub Insert_Picture1()
   '--------------------------------------------------------------------
   'User is inserting a picture from the draw editor back into the notes
   '--------------------------------------------------------------------
   'FIX ME, PUT IN APPROPRIATE HEIGHT.WIDTH FROM THE DRAW FORM.
   
   Dim curpos As Integer
   Dim pic As Picture
   Dim aString As String
   Dim sPicPath As String
   Dim tempFile As String
   Dim h As Integer
   Dim w As Integer
   
   If Not IsNull(Fdraw.$hImage) Then
      tempFile = Temp() & ".png"
      Fdraw.$hImage.Save(Tempfile)
      pic = Picture[tempfile]
      h = Abs(pic.Height * 2 / 3)
      w = Abs(pic.width * 2 / 3)
      sPicPath = "<P><TABLE WIDTH=100%><TR><TD WIDTH=100%><P><IMG "
      sPicPath &= "src=\"" & tempfile & "\" "
      sPicPath &= " NAME=\"graphics\" ALIGN=\"LEFT\" WIDTH=\"" & Str(W) & "\" HEIGHT=\"" & Str(H) & "\" BORDER=\"0\"></TR></TD></TABLE><BR><BR>"
      teNotes.richtext = Replace$(teNotes.richtext, ".draw", sPicPath)
   End If
   EmbeddedForm_Close()
   
End

Public Sub Insert_Picture(sSource As String)
   '--------------------------------------------------
   'Inserts a picture into the form. This can come
   'from either a cut/paste/import or from the
   'draw
   'Creates an event observer.
   'this will bug out if user clicks save in  Fdraw
   'without selecting image
   '--------------------------------------------------
   
   Dim s As String
   Dim par As Integer = 2
   Dim pos As Integer = 2
   Dim temp As String
   Dim count As Integer
   Dim flag As Boolean = True
   Dim lastpos As Integer
   Dim parmarkpos As Integer
   
   Dim curpos As Integer
   Dim PicBox As PictureBox
   Dim NewImage As Image
   Dim Picture1 As New Picture
   Dim pic As Picture
   Dim sPicPath As String
   Dim tempfile As String
   Dim h As Integer
   Dim w As Integer
   Dim tempstring As String
   
   tempFile = Temp() & ".png"
   Select Case sSource
      Case "editor"
         
      Case "clipboard"
         '----------------------------------------------------------
         'If source of paste is a clipboard, validate it it an image
         '----------------------------------------------------------
         If Clipboard.type = Clipboard.Image Then
            If Not InStr(tenotes.richtext, ".pic") Then
               tenotes.Insert(".pic")
            End If
            NewImage = Clipboard.Paste()
            NewImage.Save(Tempfile)
            Shell "convert " & Tempfile & " -bordercolor White -border 5x5 " & Tempfile Wait
            pic = Picture[Tempfile]
            w = Abs(pic.width * 2 / 3)
            h = pic.Height
            w = pic.width
            sPicPath = "<TABLE WIDTH=100% CELLPADDING=4 CELLSPACING=3 ><TR><TD WIDTH=100%><P><IMG "
            sPicPath &= "src=\"" & Tempfile & "\" "
            sPicPath &= " NAME=\"graphics\" ALIGN=\"LEFT\" WIDTH=\"" & Str(W) & "\" HEIGHT=\"" & Str(H) & "\" BORDER=\"0\"></TR></TD></TABLE><BR>"
            teNotes.richtext = Replace$(teNotes.richtext, ".pic", sPicPath)
         End If
   End Select
   
End

Public Sub CalcBMI()
   '-------------------------------------------------------------------------
   'Checks html to see if weight/height exist, if do > shows a calculated BMI
   'and the weight range, and number of Kg's overweight
   '-------------------------------------------------------------------------
   
   Dim sHeight As String
   Dim sWeight As String
   Dim Data As String[]
   Dim BMI As Float
   Dim c As Collection
   Dim range As String
   Dim sMsgOverweight As String = "Patient is in overweight range of BMI"
   Dim sMsgObese As String = "Patient is in obese range of BMI"
   Dim sMsgUnderweight As String = "Patient is in the underweight range of BMI"
   Dim sWeightMessage As String
   
   '---------------------------------------------------------------------------------
   'Either, get height from these notes, or if none, check if we have an existing one
   '---------------------------------------------------------------------------------
   If InStr(Lower(teNotes.richtext), "height=") Then
      CP1 = InStr(LCase(teNotes.RichText), "height=")
      cp2 = InStr(teNotes.RichText, "cm", CP1)
      sHeight = Mid(teNotes.RichText, cp1, Cp2 - cp1 - 1)
      sheight = Right(sheight, Len(sheight) - InStr(sheight, "="))
   Else
      c = modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Height)
      Try sHeight = c!data
      If Not Error Then
         teNotes.Richtext &= "Last measured height  on " & c!date & " was " & sHeight & "<BR>"
      Endif
   Endif
   If InStr(Lower(teNotes.richtext), "weight=") Then
      CP1 = InStr(LCase(teNotes.RichText), "weight=")
      cp2 = InStr(teNotes.RichText, "kg", CP1)
      sWeight = Mid(teNotes.RichText, cp1, Cp2 - cp1 - 1)
      sweight = Right(sweight, Len(sweight) - InStr(sweight, "="))
   End If
   If sHeight <> "" And sWeight <> "" Then
      BMI = Val(sweight) / ((sHeight / 100) * (sHeight / 100))
      BMI = Val(Format(Str$(BMI), "##.#"))
      teNotes.Insert("BMI=" & Str(BMI) & " \n(" & modDecisionSupport.BMI_DecSupp(sweight, sheight) & ")\n")
   Else
      '  message.Info("No height data recorded for this patient. To calculate the BMI automatically please enter eg h=180 and hit spacebar")
   End If
   
End

Public Sub mnuNotes_Click()
   
   Dim Save_Template As FSaveNotesTemplate
   
   Select Case Last.tag
      Case "next depot date"
         tenotes.Insert(".depotdate")
         teNotes.richtext = Replace$(teNotes.richtext, ".depotdate", "<BR><B>Depot next due on:</B> " & Format(DateAdd(Now, gb.month, 3), "dd/mm/yyyy") & "<BR>")
      Case "next b12 date"
         tenotes.Insert(".b12date")
         teNotes.richtext = Replace$(teNotes.richtext, ".b12date", "<BR><B>B12 next due on:</B> " & Format(DateAdd(Now, gb.month, 3), "dd/mm/yyyy") & "<BR>")
      Case "paste image"
         Insert_Picture("clipboard")
      Case "paste"
         If Clipboard.type = Clipboard.Text Then
            tenotes.Insert(Clipboard.Text)
         End If
      Case "insert medication list", "insert medication list with heading", "insert medication list today's medications", "insert medication list today's medications with heading"
         Medications_Insert_List(Last.tag)
      Case "insert problem list"
         Problem_list_Insert()
      Case "save as template"
         With Save_Template = New FSaveNotesTemplate
            .Title = "Save Template"
            .Init(teNotes.RichText)
            If .ShowModal() Then
               Templates_ReLoad()
            Endif
         End With
      Case "help"
         modUtil.NotImplemented("Help for progress notes")
      Case "habits"
         Habits_Insert
   End Select
   
End

Public Sub Habits_Insert()
   'Currently only inserts alcohol and smoking quick'n dirty paste from elsewhere (FIXME)
   
   Dim sHabitsListHTML As String
   Dim sSmoking As String
   Dim sAlcohol As String
   Dim item As Collection
   
   currentconsult.Refresh("recreationaldrugs")
   tenotes.Insert(".habitslist")
   sHabitsListHTML = "<B>Recreational Drugs (Habits)</B>"
   sSmoking = "Nicotine - "                                                   'lets tell users no info recorded
   sAlcohol = "Alcohol - "                                              'lets tell users no info recorded
   For Each item In currentconsult!recreationaldrugs
      ' everyone should have a smoking record although of course users may not put them in
      If item!fk_lu_recreational_drug = const.cRecreational_Drug_Nicotine Then
         
         If Mid(sHabitsListHTML, 36, 2) <> "BR" Then
            sHabitsListHTML &= "<BR>"
         Endif
         
         If item!never_used_drug Then
            sSmoking &= "never smoked"
         Else
            If Not IsNull(item!substance_amount) Then
               sSmoking &= Str(item!substance_amount) & "/day"
            Else
               sSmoking &= "?/day"
            Endif
            If Not IsNull(item!age_started) Then
               sSmoking &= "age " & Str(item!age_started) & " to "
            Else
               sSmoking &= "from age ? to"
            Endif
            If Not IsNull(item!age_last_used) Then
               sSmoking &= Str(item!age_last_used)
            Else
               sSmoking &= "?"
            Endif
            
         End If
         sHabitsListHTML &= sSmoking & "<BR>"
      End If
      If item!fk_lu_recreational_drug = const.cRecreational_Drug_Alcohol Then
         If Mid(sHabitsListHTML, 36, 2) <> "BR" Then
            sHabitsListHTML &= "<BR>"
         Endif
         
         If item!never_used_drug = True Then
            sAlcohol &= " has never drunk alcohol "
         Else
            
            If Not IsNull(item!age_last_used) Then
               sAlcohol &= "Ex-Drinker since "
               sAlcohol &= Format(item!age_last_used, "dd/mm/yyyy")
            Else                                                                   'will always be a quantity I insisted in the gui
               If Not IsNull(item!substance_amount) Then
                  sAlcohol &= Str(item!substance_amount) & " gm"
               Else
                  sAlcohol &= "?gm"
               Endif
               Select Case item!fk_lu_substance_frequency
                  Case const.Units_day
                     sAlcohol &= " per day"
                  Case const.Units_month
                     sAlcohol &= " per month"
                  Case const.Units_week
                     sAlcohol &= " per week"
               End Select
            Endif
         End If
         sHabitsListHTML &= sAlcohol & "<BR>"
      End If
   Next
   teNotes.richtext = Replace$(teNotes.richtext, ".habitslist", sHabitsListHTML)
   
End


Public Sub Problem_list_Insert()
   '---------------------------------
   'Insert an enumerated problem list
   '---------------------------------
   
   Dim PH As Collection
   Dim sLaterality As String
   Dim iProblemcount As Integer = 1
   Dim sString As String = "<OL>"
   
   tenotes.Insert(".problemlist")
   For Each PH In currentconsult!past_history
      If PH!major = True And PH!risk_factor = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "Bilateral"
            Case const.LateralityLeft
               sLaterality = "Left"
            Case const.LateralityRight
               sLaterality = "Right"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description))
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "
         sstring &= "</B>"
         sString &= "<BR>Current Plan:" & modUtil.text_gt_lt_protect(PH!aim_of_plan & ", " & PH!management_summary) & "</P>" 'otherwise bp<130/80 etc the < interpreted as a html tag
      Endif
   Next
   For Each PH In currentconsult!past_history
      If PH!active = True And PH!risk_factor = False And PH!major = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "Both"
            Case const.LateralityLeft
               sLaterality = "Left"
            Case const.LateralityRight
               sLaterality = "Right"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description))
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "
         sstring &= "</B>"
         sString &= "<BR>Current Plan:" & modUtil.text_gt_lt_protect(PH!aim_of_plan & ", " & PH!management_summary) & "</P>"
      Endif
   Next
   For Each PH In currentconsult!past_history
      If PH!risk_factor = True Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "Both"
            Case const.LateralityLeft
               sLaterality = "Left"
            Case const.LateralityRight
               sLaterality = "Right"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description))
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "
         sstring &= "</B>"
         sString &= "<BR>Current Plan:" & modUtil.text_gt_lt_protect(PH!aim_of_plan & ", " & PH!management_summary) & "</P>"
      Endif
   Next
   sString &= "</OL><P></P>"
   
   teNotes.richtext = Replace$(teNotes.richtext, ".problemlist", sSTring)
   
End

Public Sub Problem_list_Insert_works_accurately()
   '---------------------------------
   'Insert an enumerated problem list
   '---------------------------------
   
   Dim PH As Collection
   Dim sLaterality As String
   Dim iProblemcount As Integer = 1
   Dim sString As String = "<OL>"
   
   tenotes.Insert(".problemlist")
   For Each PH In currentconsult!past_history
      If PH!major = True And PH!risk_factor = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description))
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "
         sstring &= "</B>"
         '  sString &= "<BR>Current Plan:" & PH!aim_of_plan & "," & PH!management_summary
         '  sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
         ' sstring &= "\\tabularnewline \n"
         sString &= "<BR>Current Plan:" & PH!aim_of_plan & ", " & PH!management_summary & "</P>"
         
      Endif
   Next
   For Each PH In currentconsult!past_history
      If PH!active = True And PH!risk_factor = False And PH!major = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description))
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "
         sstring &= "</B>"
         '  sString &= "<BR>Current Plan:" & PH!aim_of_plan & "," & PH!management_summary
         '  sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
         ' sstring &= "\\tabularnewline \n"
         sString &= "<BR>Current Plan:" & PH!aim_of_plan & ", " & PH!management_summary & "</P>"
      Endif
   Next
   For Each PH In currentconsult!past_history
      If PH!risk_factor = True Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description))
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "
         sstring &= "</B>"
         '  sString &= "<BR>Current Plan:" & PH!aim_of_plan & "," & PH!management_summary
         '  sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
         ' sstring &= "\\tabularnewline \n"
         sString &= "<BR>Current Plan:" & PH!aim_of_plan & ", " & PH!management_summary & "</P>"
      Endif
   Next
   sString &= "</OL><P></P>"
   Print sstring
   
   ' <OL>
   '    <LI><P>Testinttettesting</P>
   '    <LI><P>testing</P>
   '    <LI><P>testing</P>
   '    <LI><P></P>
   ' </OL>
   
   teNotes.richtext = Replace$(teNotes.richtext, ".problemlist", sSTring)
   
End

Public Sub Problem_list_Insert_works_with_laterality()
   '---------------------------------
   'Insert an enumerated problem list
   '---------------------------------
   
   Dim PH As Collection
   Dim sLaterality As String
   Dim iProblemcount As Integer = 1
   Dim sString As String = "<OL>"
   
   tenotes.Insert(".problemlist")
   For Each PH In currentconsult!past_history
      If PH!major = True And PH!risk_factor = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         ' sstring &= "<LI><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description)) & "</B>"
         ' If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "  '& "</P>"
         ' sString &= "<BR>Current Plan:" & PH!aim_of_plan & "," & PH!management_summary
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description))
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "
         sstring &= "</B>" & "</P>"
         '  sString &= "<BR>Current Plan:" & PH!aim_of_plan & "," & PH!management_summary
         
      Endif
   Next
   For Each PH In currentconsult!past_history
      If PH!active = True And PH!risk_factor = False And PH!major = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description))
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "
         sstring &= "</B>" & "</P>"
         '  sString &= "<BR>Current Plan:" & PH!aim_of_plan & "," & PH!management_summary
      Endif
   Next
   For Each PH In currentconsult!past_history
      If PH!risk_factor = True Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description))
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "
         sstring &= "</B>" & "</P>"
         '  sString &= "<BR>Current Plan:" & PH!aim_of_plan & "," & PH!management_summary
         '  sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
         ' sstring &= "\\tabularnewline \n"
      Endif
   Next
   sString &= "</OL><P></P>"
   Print sstring
   
   ' <OL>
   '    <LI><P>Testinttettesting</P>
   '    <LI><P>testing</P>
   '    <LI><P>testing</P>
   '    <LI><P></P>
   ' </OL>
   
   teNotes.richtext = Replace$(teNotes.richtext, ".problemlist", sSTring)
   
End

Public Sub Problem_list_Insert_works()
   '---------------------------------
   'Insert an enumerated problem list
   '---------------------------------
   
   Dim PH As Collection
   Dim sLaterality As String
   Dim iProblemcount As Integer = 1
   Dim sString As String = "<OL>"
   
   tenotes.Insert(".problemlist")
   For Each PH In currentconsult!past_history
      If PH!major = True And PH!risk_factor = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         ' sstring &= "<LI><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description)) & "</B>"
         ' If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "  '& "</P>"
         ' sString &= "<BR>Current Plan:" & PH!aim_of_plan & "," & PH!management_summary
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description)) & "</B>" & "</P>"
         '  If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") "  '& "</P>"
         '  sString &= "<BR>Current Plan:" & PH!aim_of_plan & "," & PH!management_summary
         
      Endif
   Next
   For Each PH In currentconsult!past_history
      If PH!active = True And PH!risk_factor = False And PH!major = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description)) & "</B>" & "</P>"
         '  If sLaterality <> "" Then sSTring &= " (" & sLaterality & ") " & "</P>"
         '  sString &= "<BR>Current Plan:" & PH!aim_of_plan & "," & PH!management_summary
      Endif
   Next
   For Each PH In currentconsult!past_history
      If PH!risk_factor = True Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "<LI><P><B>" & modUtil.Ucase_Word_First_Letter(LCase(PH!description)) & "</B>" & "</P>"
         If sLaterality <> "" Then sSTring &= " (" & sLaterality & ")"
         '  sString &= "<BR>Current Plan:" & PH!aim_of_plan & "," & PH!management_summary
         '  sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
         ' sstring &= "\\tabularnewline \n"
      Endif
   Next
   sString &= "</OL><P></P>"
   Print sstring
   
   ' <OL>
   '    <LI><P>Testinttettesting</P>
   '    <LI><P>testing</P>
   '    <LI><P>testing</P>
   '    <LI><P></P>
   ' </OL>
   
   teNotes.richtext = Replace$(teNotes.richtext, ".problemlist", sSTring)
   
End

Public Sub Medications_Insert_List(sMenuText As String)
   '----------------------------------------------------
   'Insert a list of the current medications
   'Either with heading, the whole list, or just today
   '----------------------------------------------------
   
   Dim sMedListHTML As String
   Dim sMedListHtmlRow As String
   Dim medication As Collection
   Dim medications As Collection
   Dim sMedlist As String
   Dim btodaysMedication As Boolean
   
   If InStr(sMenuText, "today") Then
      medications = FClinical.Prescribed_today_list_get_external()
   Else
      medications = FClinical.active_medication_list_get_external()
   Endif
   
   If Not medications.count Then Return
   
   sMedlist = "<BR>"
   If InStr(sMenuText, "heading") And Not InStr(sMenuText, "today") Then
      sMedlist = "<B>Medications</B><BR>"
   Endif
   If InStr(sMenuText, "heading") And InStr(sMenuText, "today") Then
      sMedlist = "<B>Medications Prescribed Today</B><BR>"
   End If
   For Each medication In medications
      If InStr(sMenuText, "today") Then
         
         smedlist &= medication!generic & " " & medication!strength & " " & medication!form & " ("
         smedlist &= medication!instruction & " for " & medication!prescribed_for
         smedlist &= " (" & medication!brand & ") "
         smedlist &= medication!prescribed!quantity & " R" & medication!prescribed!repeats 
         If medication!med!start_date = medication!med!last_date Then
            smedlist &= "<B><I> *new medication*</I></B>"
         Endif
         sMedlist &= "<BR>"
      Else
         smedlist &= medication!generic & " " & medication!strength & " " & medication!form & " ("
         smedlist &= medication!instruction & " for " & medication!prescribed_for
         smedlist &= " (" & medication!brand & ") "
         smedlist &= medication!prescribed!quantity & " R" & medication!prescribed!repeats & "<BR>"
      End If
   Next
   tenotes.Insert(".medslist")
   teNotes.richtext = Replace$(teNotes.richtext, ".medslist", smedlist)
   
End

Public Sub Templates_ReLoad()
   
   templates = modUtil.LoadCombo(cmbTemplates, modProgressNotes.Templates_Get(), "name")
   cmbTemplates.index = -1
   
End

Public Sub teNotes_Menu()
   
   Paragraph_At = teNotes.ToParagraph(teNotes.pos)
   character_at = teNotes.ToIndex(teNotes.pos)
   If Trim(Last.text) = "" Then
      mnuNotes_SaveTemplate.Enabled = False
   Else
      mnuNotes_SaveTemplate.Enabled = True
   Endif
   If Clipboard.type = Clipboard.Image Then
      mnuNotes_PasteImage.Enabled = True
      mnuNotes_Paste.Enabled = False
   Else
      mnuNotes_PasteImage.Enabled = False
      mnuNotes_Paste.Enabled = True
   Endif
   mnuNotes.Popup()
   
End

Public Sub FDraw_Create_Observer()
   'just a routine to overide the btn_save event of Fdraw
   
   hObs = New Observer(Fdraw.btnSave) As "DrawEditor_ToolButtons"
   hObs = New Observer(Fdraw.tbClose) As "DrawEditor_ToolButtons"
   
End

Public Sub tbclosedraw_click()
   
   Stop Event
   
End

Public Sub Editor_Clear()
   '-----------------------------------
   'Clears the text editor with warning
   '-----------------------------------
   
   Select Case message.Warning("Caution:\n\nTo continue will entirely erase your notes.\n\nAre you sure?", "Yes - erase notes", "No")
      Case 1
         bExit = True
         teNotes.Clear()
         tlsuggestions.Text = ""
         bExit = False
         sWeight = ""
         sHeight = ""
         bFontBold = False
         cmbTemplates.index = -1
   End Select
   
End

Public Sub EditorButtons_Click()
   
   Dim curpos As Integer
   '---------------------------------------------
   'User has clicked on one of the editor buttons
   '---------------------------------------------
   Select Case Last.tag
      Case "table"
         'insert a table
         teNotes.Insert(".!@.")
         teNotes.RichText = Replace(teNotes.RichText, ".!@.", "<P>" & modHTML.two_col_table() & "</P>")
      Case "spell"
         SpellChecker.init()
         SpellChecker.StartSpelling()
         ParentForm.Save()
         teNotes.SetFocus()
      Case "list"
         teNotes.Insert(".!@.")
         teNotes.RichText = Replace(teNotes.RichText, ".!@.", "<ul type='disc'><LI> </LI></UL>")
         teNotes.RichText = Replace(teNotes.RichText, "style=\" margin-top:12px; margin-bottom:12px", "style=\" margin-top:6px; margin-bottom:6px")
         teNotes.Pos = curpos
         teNotes.Pos = Len(tenotes.text)
      Case "about"
         Balloon.Info("A simple TextEditor adapted from an example by\nFabien Bodard (gambix@users.sourceforge.net)\nand Benoît Minisini", Last)
      Case "erase"
         Editor_Clear()
      Case "bold"
         teNotes.Format.Font.Bold = Last.Value
      Case "italic"
         teNotes.Format.Font.Italic = Last.Value
      Case "underline"
         teNotes.Format.Font.Underline = Last.Value
      Case "strikeout"
         teNotes.Format.Font.StrikeOut = Last.Value
      Case "align left"
         teNotes.Format.Alignment = Align.Left
      Case "align centre"
         teNotes.Format.Alignment = Align.Center
      Case "align right"
         teNotes.Format.Alignment = Align.Right
      Case "justify"
         teNotes.Format.Alignment = Align.Justify
      Case "load file"
         ' Dialog.Title = "Select Image File"
         ' Dialog.Filter = ["*.png", "Image Files", "*", "All files"]
         ' If Dialog.OpenFile() Then Return
         ' FImageGet.$hImage = Image.Load(Dialog.Path)
         ' FImageGet.ShowModal()
         ' Insert_Picture("clipboard")
      Case "dot point"
      Case "hide form"
         EmbeddedForm_Close()
   End Select
   
End

Public Function backup()
   '-----------------------------------------
   'FIXME BETTER NAME
   'make me a stack
   'Saves the editor contents before erasing
   'just in case user did it by accident
   '-----------------------------------------
   
   editor_contents = teNotes.RichText()
   
End

Public Sub teNotes_Cursor()
   
   Object.Lock(btnBold)
   Object.Lock(btnItalic)
   Object.Lock(btnUnderline)
   Object.Lock(btnAlignLeft)
   Object.Lock(btnAlignCenter)
   Object.Lock(btnAlignRight)
   Object.Lock(btnAlignJustify)
   Object.Lock(SpinBox1)
   Object.Lock(ColourButton1)
   
   btnBold.Value = teNotes.Format.Font.Bold
   btnItalic.Value = teNotes.Format.Font.Italic
   btnUnderline.Value = teNotes.Format.Font.Underline
   
   Select Case teNotes.Format.Alignment
      Case Align.Left
         btnAlignLeft.Value = True
      Case Align.Right
         btnAlignRight.Value = True
      Case Align.Center
         btnAlignCenter.Value = True
      Case Align.Justify
         btnAlignJustify.Value = True
      Case Align.Normal
         btnAlignLeft.Value = True ' If the displayed langage is left to right written, that's OK. Elsewhere...
   End Select
   
   ColourButton1.Color = teNotes.Format.Color
   cmbFonts.Text = teNotes.Format.Font.Name
   SpinBox1.Value = teNotes.Format.Font.Size
   
   Object.UnLock(btnBold)
   Object.UnLock(btnItalic)
   Object.UnLock(btnUnderline)
   Object.UnLock(btnAlignLeft)
   Object.UnLock(btnAlignCenter)
   Object.UnLock(btnAlignRight)
   Object.UnLock(btnAlignJustify)
   Object.UnLock(cmbFonts)
   Object.UnLock(SpinBox1)
   Object.UnLock(ColourButton1)
   
End

Public Sub Auto_Text(shortcut As Collection)
   
   Dim curpos As Integer = tenotes.Pos
   
   If shortcut!uline Then
      teNotes.Format.Font.Underline = True
   Endif
   teNotes.Format.Font.Bold = shortcut!bold
   tenotes.Insert(shortcut!text)
   teNotes.RichText = Replace(teNotes.RichText, shortcut!abbrev, "")
   teNotes.Format.Font.Bold = False
   teNotes.Format.Font.Underline = False
   tenotes.pos = curpos + Len(shortcut!text) - Len(shortcut!abbrev)
   tenotes.SetFocus()
   
End

Public Sub Auto_Text_Section(shortcut As Collection, re As Regexp)
   
   teNotes.Text = Replace$(teNotes.Text, re.Text & "\n", "")
   If shortcut!uline Then
      teNotes.Format.Font.Underline = True
   Endif
   teNotes.Format.Font.Bold = shortcut!bold
   teNotes.Insert(shortcut!text & " " & re.SubMatches[1].Text & "\n")
   teNotes.Format.Font.Bold = False
   teNotes.Format.Font.Underline = False
   
End

Public Sub tbLoadFile_Click()
   '-----------------------------------------------------------
   'Load a file and insert into the editor either image or text
   'todo -the text
   '-----------------------------------------------------------
   
   teNotes.Insert(".pic")
   Dialog.Title = "Select Image File"
   Dialog.Filter = ["Pictures (*.png;*.jpg;*.jpeg)", "All files (*.*)"]
   
   If Dialog.OpenFile() Then Return
   '----------------------------------------------------
   'Ok, check this is a valid image (e.g they could have
   'changed the file selector to any file
   '-----------------------------------------------------
   Try FImageGet.Set_Image(Image.Load(Dialog.Path))
   '  Try FImageGet.$hImage = Image.Load(Dialog.Path)
   If Not Error Then
      FImageGet.ShowModal()
      Insert_Picture("clipboard")
   Else
      Try teNotes.Insert(File.Load(Dialog.Path))
      If Error Then
         Message.Info("An error occurred whilst trying to insert the file.\n")
      End If
   End If
   
End

Public Sub tbWebCam_Click()
   'Yes the whole of this module was a quick knock up and needs re-writing
   'sloppy ++
   
   teNotes.Insert(".draw")
   teNotes_KeyRelease()
   
End

Public Sub Terms_Columnview_KeyPress()
   
   If key.code = key.return Then
      Terms_Columnview_dblClick
   End If
   
End

Public Sub Terms_Columnview_dblClick()
   
   Dim CurrentTerm As Collection
   Dim x As Integer
   
   Stop Event
   FTermSelector.Visible = False
   Last.movecurrent()
   CurrentTerm = FTermSelector.Terms[FTermSelector.columnview1.Item.key]
   x = cvwReasonForEncounter.count
   cvwReasonForEncounter.Add(x, 0)
   cvwReasonForEncounter[x][0] = CurrentTerm!term & "(" & CurrentTerm!code & ")"
   With FTermSelector
      .Visible = False 
      .set_SearchText("")
   End With
   cvwReasonForEncounter.Visible = True
   With txtReasonEncounter
      .Clear()
      .SetFocus()
   End With
   
End

Public Sub TextArea1_Change()
   '
   '  Editor1.text = "TA.pos" & Str(textarea1.Pos) & "\n"
   ' Editor1.text &= " TA.line" & Str(textarea1.Line) & "\n"
   '  Editor1.text &= " TA.column " & Str(textarea1.Column) & "\n"
   '  ' Editor1.text &= " teNotes.textheight" & textarea1.
   '   Editor1.text &= "E1-font" & Editor1.Font.Name & "\n"
   '   Editor1.Font = tenotes.Font '  Vsplit_Notes.Layout = [1, 1]
   
   '    Editor1.text &= "Editor1.LineHeight " & Editor1.LineHeight & "\n"
   '   Try Editor1.text &= "Editor1.x" & Str(Editor1.Cursor.x)
   '  Try Editor1.text &= "Editor1.y" & Str(Editor1.Cursor.y)
   ' cvwTerms.left = 20
   
   '  FTermSelector.left = 20
   ' FTermSelector.top = (Editor1.LineHeight * (textArea1.line + 1)) + Hbox_WordProcessorButtons.height - textArea1.line + 5
   ' cvwTerms.top = (Editor1.LineHeight * (Editor1.line + 1)) + Hbox_WordProcessorButtons.height - Editor1.line
   '  Editor1.CharWidth 'in pixels
   ' Editor1.Goto( Line , col)
   ' Editor1.PosToColumn
   ' Editor1.PosToLine
   ' Editor1.p
   
End

Public Sub Form_Resize()
   
   FTermSelector.width = Me.Width - 100
   
End

Public Sub txtReasonEncounter_KeyPress()
   
   Select Case Key.Code
      Case key.Down
         With FTermSelector.ColumnView1
            .SetFocus
            .MoveFirst
            .Item.Selected = True
         End With
      Case key.Return
         tenotes.SetFocus()
         cvwReasonForEncounter.Visible = True
         FTermSelector.Visible = False 
   End Select
   
End

Public Sub txtReasonEncounter_KeyRelease()
   '-----------------------------------------------------------------
   'User is typing trying to find term as reason for the consultation
   '-----------------------------------------------------------------
   
   If Trim(Last.text) <> "" Then                       'if text to search for
      FTermSelector.Set_SearchText(Trim(Last.text))   'do the search
   End If   
   If FTermSelector.ColumnView1.count Then             'if terms found
      FTermSelector.Visible = True                     'remove the terms form
      cvwReasonForEncounter.Visible = False            'hide the currently coded items
   Else                                                'no terms were found
      FTermSelector.Visible = False                    'remove terms form
      cvwReasonForEncounter.Visible = True             'show whatever terms we've picked               
   Endif
   
End

Public Sub txtReasonEncounter_Change()
   '-------------------------------------------------------------------------------
   'If the user deletes the seach text, re-institute the reasons for encounter list
   '-------------------------------------------------------------------------------   
   
   If txtReasonEncounter.text = "" Or FTermSelector.ColumnView1.count = 0 Then
      FTermSelector.Visible = False
      cvwReasonForEncounter.Visible = True
   Endif
   
End

Public Sub txtReasonEncounter_GotFocus()
   
   cvwReasonForEncounter.Visible = True
   FTermSelector.Visible = False 
   
End

Public Sub VBox_Reason_For_Encounter_Leave()
   '-------------------------------------------------------
   'trigger resetting of appropriate list if leave the area
   'containing the reasons for encounter
   '-------------------------------------------------------  
   
   txtReasonEncounter.text = ""   'this also resets the list visible if not already and removes terms
   
End

Public Sub Settings_Save()
   
   If HSplit_Reasons_For_encounter.Visible Then
      Settings["Notes_Editor_HSplit_Reasons_For_encounter.visible/VSplit_Notes.Layout"] = Vsplit_Notes.Layout
      Settings["Notes_Editor/HSplit_Reasons_For_encounter.layout"] = HSplit_Reasons_For_encounter.Layout
   Else
      Settings["Notes_Editor/HSplit_Reasons_For_encounter.notvisible/VSplit_Notes.Layout"] = Vsplit_Notes.Layout
   End If
   
End

Public Sub Settings_Load() 'do not make this private
   
   If HSplit_Reasons_For_encounter.Visible Then
      Vsplit_Notes.Layout = Settings["Notes_Editor_HSplit_Reasons_For_encounter.visible/VSplit_Notes.Layout", modUtil.HSplit([4, 1])]
      HSplit_Reasons_For_encounter.Layout = Settings["Notes_Editor/HSplit_Reasons_For_encounter.layout", modUtil.HSplit([4, 1])]
   Endif
   
End
