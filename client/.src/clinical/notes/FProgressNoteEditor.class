' Gambas class file

' Gambas class file
' Copyright (C) 2008-2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-----------------------------------------------------------------------

Public bBold As Boolean
Public cp1 As Integer
Private $Result As Result
Public cp2 As Integer 
Public sBP As String
Public sMeasurement As String
Public sWeight As String
Public sHeight As String 'FIXME remove me back to patient
Public pk_pastHistory As Integer 'temporary the pk of the past history item using this page.
Public bExit As Boolean
Public editor_contents As String 'fixme make me an array/push/pop
Private dxPos As Integer
Private dxText As String
Public CurAt As Integer
Public Paragraph_At As Integer
Public character_at As Integer 
Public iZoom As Integer
Public default_Zoom As Integer
Public check_state As Boolean
Public FDraw As FDrawEditor
Private Terms As Collection 
Public FExcise As FProcedures
Private hObs As Observer
Public Form_Medical_Certificate As FMedicalCertificate
Public EmbeddedForm As Object
Public sShortCutText As String 
Public CtrlDown As Boolean
Public FnDown As Boolean
Private copy_of_Editor_text As String
Private data_changed As Boolean 'if true the content of the notes has changed.
Private currentconsult As CConsult
Private ParentPage As FProgressNotePage
Private ParentLayout As Integer[]
Private shortcuts As Collection 
Private SpellChecker As ClskSpell
Private bFontBold As Boolean

Public Sub Set_Copy_of_Editor_text(sText As String)
   
   copy_of_Editor_text = sText  
   
End

Public Sub Init(cons As CConsult)
   
   currentconsult = cons
   shortcuts = New Collection 
   'FIXME: These need to be made user defined
   Add_Shortcut("System Review", ".sr", True, False, False)
   Add_Shortcut("ANNUAL CHECKUP", ".ann", True, True, False)
   Add_Shortcut("Presenting Symptoms", ".ps", True, False, False)
   Add_Shortcut("On Examination", ".oe", True, False, False)
   Add_Shortcut("Diagnosis", ".dx", True, False, False)
   Add_Shortcut("Plan", ".pl", True, False, False)
   Add_Shortcut("Patient Concerns", ".pc", True, False, False)
   Add_Shortcut("Treatment", ".rx", True, False, False)
   Add_Shortcut("Workcover Notes", ".wc", True, False, False)
   Add_Shortcut("no diarrhoea ", ".nd", False, False, False)
   Add_Shortcut("no vomiting ", ".nv", False, False, False)
   Add_Shortcut("afebrile ", ".af", False, False, False)
   Add_Shortcut("Review of Results ", ".rr", True, False, False)
   Add_Shortcut("Travel Advice/Vaccination ", ".tva", True, False, False)
   Add_Shortcut("Investigations ", ".in", True, False, False)
   Add_Shortcut("Complaints ", ".co", True, False, False)
   Add_Shortcut("Immunization ", ".imm", True, False, False)
   Add_Shortcut("Scripts ", ".scr", True, False, False)
   Add_Shortcut("Home Visit ", ".hv", True, False, False)
   Add_Shortcut("Section:", ".sh", True, True, True)
   'Spelling stuff
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = tenotes
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   modUtil.FindProgram("aspell", "aspell")
  
End

Private Sub Add_Shortcut(text As String, abbrev As String, bold As Boolean, uline As Boolean, section As Boolean)
  shortcuts.Add(["text": text, "abbrev": abbrev, "bold": bold, "uline": uline, "section": section], abbrev)  
End


Public Function Get_Copy_of_Editor_text() As String
   
   Return copy_of_Editor_text 
   
End

Public Function Get_Copy_of_Editor_RichText() As String
   
  Return tenotes.RichText 
   
End

Public Sub Form_Close()
   
 
   
End

Public Sub Form_KeyPress()
   
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
         Case Asc("F")
            mnuForms.Popup()
            
      End Select
   End If
   
End

Public Function get_data_changed() As Boolean
   
   Return data_changed   
   
End

Public Sub DataChange_Update_Indicators(flag As Integer)
   '------------------------------------------
   'Removes Or sets the red border To indicate
   'if data is changed or note, resets flags
   '------------------------------------------
   
   If flag Then 
      Vbox_ConsultNotes.BackGround = Color.Red
      Vbox_ConsultNotes.Padding = 1
      
      data_changed = True  
   Else
      Vbox_ConsultNotes.BackGround = Color.Gray
      Vbox_ConsultNotes.Padding = 1
      tlsuggestions.text = ""
      data_changed = False 
   End If
   
End 

Public Sub teNotes_Change()
   
   If bExit Then Return
   '-------------------------------------------------------------
   'DO NOT be smart and make me Last (ie don't use Last.whatever)
   'this change event is called external to this form
   'see FInboxDocumentPage.Editor_Init()
   '-------------------------------------------------------------
   ' textarea1.text = teNotes.richtext
   If Trim(teNotes.text) = "" Then
      
      '--------------------------------------------------------------------
      'If there is not text, this dosn't mean that the data hasn't changed
      'e.g it could have already been saved, and just deleted = changed
      'Each time this parent's form saves the data, it sets:
      'copy_of_Editor_text to the last, saved text
      '--------------------------------------------------------------------
      If copy_of_Editor_text = "" Then
         DataChange_Update_Indicators(False)
      Else
         DataChange_Update_Indicators(True)
      End If
   Else
      DataChange_Update_Indicators(True)
   End If
   '-------------------------------------------------------------------------
   'The consult notes editor is either being used for general notes, or for
   'a specific past history item if embedded frmFClinical
   'so if Condition is null then it is general notes onFClinical (my convention)
   ' '-------------------------------------------------------------------------
   '  If Not Condition Then 
   '    ' modglobal.clinicalform.currentConsult.GeneralNotes.notes = teNotes.RichText
   '    ' gvar.currentconsult.generalnotes.notes = teNotes.RichText
   '     'modglobal.clinicalForm.
   '  Else
   '     ' The condition was set by the calling form egFClinical.ShowPage
   '   ' Condition.todays_notes_changed = True
   '   ' Condition.todays_notes = teNotes.richtext
   '   ' modDbug.pasthistory_debug(modglobal.clinicalform.currentpatient.past_history, modglobal.clinicalform.teDebugOutput) 
   '  End If
   
End

Public Sub Editor_Fonts_Reset()
   '------------------------------------------------------------
   'Clears any font attributes ie saves clicking muliple buttons
   '------------------------------------------------------------
   
   Object.Lock(btnBold)
   Object.Lock(btnItalic)
   Object.Lock(btnUnderline)
   Object.Lock(btnAlignLeft)
   Object.Lock(btnAlignCenter)
   Object.Lock(btnAlignRight)
   Object.Lock(btnAlignJustify)
   Object.Lock(cmbFonts)
   Object.Lock(SpinBox1)
   Object.Lock(ColourButton1)
   btnBold.Value = False
   btnItalic.Value = False
   btnUnderline.Value = False
   
   btnAlignLeft.value = False
   btnAlignCenter.value = False
   btnAlignJustify.Value = False 'what is this
   btnAlignRight.value = False
   'FIXME put in the default font
   'put in black as default colour
   teNotes.Format.Font.Bold = False
   teNotes.Format.Font.Italic = False
   teNotes.Format.Font.Underline = False
   teNotes.Format.Font.StrikeOut = False
   teNotes.Format.Alignment = Align.Left
   ColourButton1.Color = Color.Black
   teNotes.Format.Color = Color.Black
   Object.UnLock(btnBold)
   Object.UnLock(btnItalic)
   Object.UnLock(btnUnderline)
   
   Object.UnLock(btnAlignLeft)
   Object.UnLock(btnAlignCenter)
   Object.UnLock(btnAlignRight)
   Object.UnLock(btnAlignJustify)
   Object.UnLock(cmbFonts)
   Object.UnLock(SpinBox1)
   Object.UnLock(ColourButton1)
   
End

Public Sub Fonts_Fill_Combo()
   
   Dim sFont As String
   
   For Each sFont In Fonts
      cmbFonts.add(sFont)
   Next
   
End

Public Sub ColourButton1_Change()
   
   teNotes.Format.Color = ColourButton1.Color
   
End

Public Sub SpinBox1_Change()
   
   teNotes.Format.Font.Size = Last.Value
   teNotes.SetFocus
   
End

Public Sub cmbFonts_Click()
   
   teNotes.Format.Font.Name = Last.text 
   teNotes.SetFocus
   
End

Public Sub Terms_Get()
   '-------------------------------------------------------------------------------------
   'Gets list of diagnostic terms
   'Cannot set default if count is one because must  be able to add new occupations
   'can't remove the label because it needs to occupy space to keep textbox correct width
   '-------------------------------------------------------------------------------------
   
   Dim term As Collection 
   Dim key As String
   Dim curpos As Integer
   Dim charpos As String
   Dim blankchar As Integer = -1
   
   Return 
   ' Do Until blankchar = 0
   dxText = Mid$(teNotes.text, dxPos + 3, curpos - dxpos + 3)
   ' charpos = InStr(teNotes.text,
   ' "<p dir=\"ltr\">Dx"
   charpos = teNotes.ToPos
   textarea1.text = teNotes.richtext
   '  Loop
   
   '  If Trim(txtCodedTerm.text) = "" Then
   '       currentTerm!code = ""
   '       lblNewCondition.Foreground = Color.white
   '       Return
   '  End If
   '  
'   Terms = modCodingDBI.Get_Terms(dxText, chkLimit.value, chkicd10.value, SpinBoxTermLimits.value)
   ' VBox1.Height = Vsplit1.height
   ' With columnview1
   '    .Clear()
   '    .Columns.count = 2
   '    .Columns[0].Width = teNotes.width - 300
   '    .Columns[1].width = 100
   '    .width = teNotes.width 
   '    
   ' End With
   ' If Terms.count Then
   '    For Each term In Terms
   '       key = term!code
   '       columnview1.Add(key, 0)
   '       columnview1[key][0] = term!term
   '       columnview1[key][1] = term!system
   '    Next 
   '    lblTermCount.text = Str$(terms.count) & " terms retreived"
   '    columnview1.tag = "something"
   '    columnview1.Raise
   '    columnview1.Visible = True
   '    VBox9.Visible = True 
   ' Else 
   '    columnview1.Visible = False 'empty recordset
   '    VBox9.Visible = False
   '    
   ' End If  
   
End

Public Sub getlist_diagnoses()
   
   Dim curpos As Integer
   Dim charpos As String
   Dim blankchar As Integer = -1
   ' modTemp.TemP_Condition_Get("hyper", listview2)
   curpos = teNotes.Pos
   ' Do Until blankchar = 0
   'dxText = Mid(teNotes.text, curpos - 1, curpos)
   dxText = Mid$(teNotes.text, dxPos + 3, curpos - dxpos + 3)
   'charpos =
   ' modTemp.TemP_Condition_Get(dxText, listview2)
   ' =================
   'this was in modtemp and nothing else
   '------------------------------------
   
   ' Public Sub TemP_Condition_Get(txt As String, listview1 As ListView)
   '      
   '       Dim $Result As Result
   '      
   '       If Trim(txt) = "" Then
   '          listview1.Visible = False
   '           Return
   '       End If
   '       $Result = modcodingDBI.Condition_Get(Trim(txt))
   '      If $Result.count Then 
   '         listview1.Clear
   '          For Each $Result 
   '                    
   '                     listview1.Add(Str$($Result!pk), $Result!description)
   '                     $Result.MoveNext
   '                 
   '                   
   '            Next 
   '           ' listview1.tag = txtCondition
   '            listview1.Raise
   '            listview1.Visible = True
   '                    
   '       Else 
   '           'empty recordset
   '          listview1.Visible = False
   '               
   '       End If  
   ' End
   
   ' Loop
End

Public Sub temp()
   '     Dim CtrlDown As Boolean
   '     Dim FnDown As Boolean
   '   ' Try FnDown = Key.Function
   '   ' If FnDown Then
   '   '  Select Case key.Code
   '   '  Case key.F12
   '     Editor_SpecialButtons_Click() 'save everything
   '   '  End Select
   '   ' End If
   '   Select Case Key.Code
   '   Case key.F12
   '  
   '   Case key.Esc
   '    If vBoxWebBrowser.Visible = True Then
   '       vBoxWebBrowser.Visible = False
   '       vBoxWorkSpace.Visible = True
   '    End If
   '   
   
   ' End Select
   
   ' 
   ' Try CtrlDown = Key.Control
   '  If CtrlDown Then
   '     Select Case Key.code
   '     Case Asc("F")
   '     'If (Key.Code = Asc("F")) And CtrlDown Then
   '        Editor_ShowPage("Family History")
   '     'Endif
   '      Case Asc("A")
   '        Editor_ShowPage("Allergies")
   ' 
   '      Case Asc("T")
   '       Editor_ShowPage("Travel")
   '      Case Asc("S")
   '         Editor_ShowPage("Scripts")
   '      Case Asc("H")
   '        Editor_ShowPage("Past History")
   '      Case Asc("R")
   '        Editor_ShowPage("Requests")
   '      Case Asc("L")
   '        Editor_ShowPage("Referrals")
   '      Case Asc("W")
   '        Editor_ShowPage("Workcover")
   '      Case Asc("M")
   '        Editor_ShowPage("Mental Health Plan")
   '      Case Asc("E")
   '       ' Editor_ShowPage("Skin Excision")
   '      Case Asc("W")
   '        Editor_ShowPage("Workcover")
   '     End Select
   '  End If
End 

Public Sub tenotes_KeyPress()
   
   Dim CtrlDown As Boolean
   Dim FnDown As Boolean
   
   ' If Key.code = Key.down And listview2.Visible Then
   '    listview2.MoveFirst
   '    listview2.SetFocus 
   '    listview2.Item.Selected = True
   '    Return 
   ' End If
   'FIXME MERGE ME WITH EDITORbUTTONS_CLICK()
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
            ' Case Asc("B") 'fixme decide on keys for formattiing.
            '   teNotes.Format.Font.Bold = Not (bBold)
         Case Asc("L")
            teNotes.Format.Alignment = Align.Left
         Case Asc("M")
            teNotes.Format.Alignment = Align.Center
         Case Asc("R")
            teNotes.Format.Alignment = Align.Right
         Case Asc("M")
         Case Asc("w") 'WIPE fixme put in docs
            backup()
            teNotes.Clear()
            tlsuggestions.Text = ""
         Case Asc("O") 'OOPS fixme implement me
         Case Asc("B")
           teNotes.Format.Font.Bold = Not teNotes.Format.Font.Bold
         Case Asc("I")
            teNotes.Format.Font.Italic = Not teNotes.Format.Font.Italic
         Case Asc("U")
            teNotes.Format.Font.Underline = Not teNotes.Format.Font.Underline
  
         Case Asc("Z")
            If teNotes.text = "" Then
               teNotes.RichText = editor_contents.text() 'bug here null object FIXME
            End If
            
      End Select
   End If
   
End

Public Sub listview2_keypress()
   
   ' If Key.code = Key.return Then
   '    listview2.MoveCurrent
   '    'teNotes.text = Replace(teNotes.text, "Dx " & dxText, "Diagnosis:" & listview2.Item.text)
   '    teNotes.RichText = Replace$(teNotes.RichText, "Dx " & dxText, "<A HREF='Diagnosis'>Diagnosis " & listview2.Item.text & "</A><BR>")
   '    listview2.Visible = False
   '    teNotes.pos = Len(teNotes.text)
   '    teNotes.SetFocus
   ' End If
   
End

Public Sub DrawEditor_Show()
      bexit = True 
      sShortCutText = ".draw"
      If Me.Parent.Window Is FProgressNotePage Then
         ParentPage = Me.Parent.Window
         ParentPage.HSplit1.Layout = [0, 1]    
      Endif
      
      Fdraw = New FDrawEditor(Vbox_ConsultNotes)
      FDraw_Create_Observer()
      EmbeddedForm_Show(FDraw)
      FDraw.Enabled = True 
      FDraw.Init("", currentconsult) 
      bexit = False  
      Return  
   
   
End

Public Sub teNotes_KeyRelease()

   Dim s As Collection
   Dim re As Regexp
   
   If bExit Then 
      Return 
   End If   
   ' Try CtrlDown = Key.Control
   ' If CtrlDown Then
   '    Select Case Key.code
   '       Case Asc("F")
   '          mnuForms.Popup()
   '          Return 
   '    End Select
   ' End If
   ' '--------------------------------------------------------
   'Parse for user defined shortcuts FIXME MAKE USER DEFINED
   '--------------------------------------------------------
   ' If InStr(teNotes.text, "Dx ") Then
   '    dxpos = InStr(teNotes.text, "Dx ")
   '    getlist_diagnoses()
   '    Terms_Get()
   '    
   ' End If
   ' ' If InStr(teNotes.Text, ".F") Then
   '    mnuForms.Popup()
   ' End If 
   If InStr(teNotes.text, ".draw") Then
      DrawEditor_Show()
      Return 
   End If  

   For Each s In shortcuts
     If s!section Then
         If Key.Code = Key.Return Then
            re = New Regexp(teNotes.Text, "\\" & s!abbrev & " (.*)", Regexp.Caseless)
            If re.Offset >= 0 Then Auto_Text_Section(s, re)
         Endif
     Else
         If InStr(teNotes.Text, s!abbrev, 0, gb.IgnoreCase) Then Auto_Text(s)
     End If 
   Next
  
   
   If InStr(teNotes.text, ".mc") Then
      sShortCutText = ".mc"
    '  FClinical.Editor_ShowPage_External("Medical Certificate", "Medical Certificate", "")
      If IsNull(Form_Medical_Certificate) Then
         Form_Medical_Certificate = New FMedicalCertificate(Vbox_ConsultNotes)
         hObs = New Observer(Form_Medical_Certificate) As "MedicalCertificateClose"
      Endif
      Form_Medical_Certificate.Init(currentconsult)
      EmbeddedForm_Show(Form_Medical_Certificate)
   End If  
   
   If InStr(teNotes.text, ".rq") Then
      teNotes.text = Replace(teNotes.text, ".rq", "")
      Inc Application.Busy 
      FClinical.Add_Tab("Requests") 
      Dec Application.Busy
      Return 
      
   Endif
   If InStr(teNotes.text, ".ref") Then
      
      teNotes.text = Replace(teNotes.text, ".ref", "")
      Inc Application.Busy 
      FClinical.Add_Tab("Referrals") 
      Dec Application.Busy
      Return 
   Endif
   If InStr(teNotes.text, ".wcf") Then
      teNotes.text = Replace(teNotes.text, ".wcf", "")
      Inc Application.Busy 
      FClinical.Add_Tab("Workcover") 
      Dec Application.Busy
      Return 
   Endif
   '------------------------------
   'Now parse for any measurements
   'rich text would be <p>BP=120/70_</p>
   'where _ here represents what is 
   'actually an ascii 32 character
   '------------------------------
   If InStr(LCase(teNotes.RichText), "bp=") Then
      ParseText_Keyword("bp=")
   End If
   If InStr(LCase(teNotes.RichText), "bsl=") Then  'FIXME MAKE THIS CASE INSENSITIVE
      ParseText_Keyword("bsl=")
   End If
   If InStr(LCase(teNotes.RichText), "h=") Then  'FIXME MAKE THIS CASE INSENSITIVE
      ParseText_Keyword("h=")
   End If
   If InStr(LCase(teNotes.RichText), "w=") Then  'FIXME MAKE THIS CASE INSENSITIVE
      ParseText_Keyword("w=")
   End If
   
End

Public Function Validate_BSL() As Boolean
   
   Dim charpos As Integer
   Dim aString As String
   
   Charpos = InStr(teNotes.text, "BSL=")
   Try astring = Mid$(teNotes.text, charpos + 4, 4)
   If Len(astring) < 3 Then Return
   Try Val(astring)
   If Error Then
      Return False
   Else
      teNotes.RichText = Replace$(teNotes.RichText, "BSL=" & astring, "<A HREF='" & Str$(const.Measurement_BSL) & "'>blood sugar=" & astring & "</A><BR>")
      teNotes.pos = InStr(teNotes.text, "blood sugar=" & astring) + Len("blood sugar=" & astring)
      
   End If  
   Return True
   
End

Public Sub teNotes_Paste()
   
   Dim spicPath As String 
   Dim pic As New Picture
   Dim H As Integer
   Dim W As Integer
   
   Stop Event
   If Drag.Type = Drag.Image Then
      pic.Load(Drag.Source.Tag!fname)
      H = Drag.Source.Tag!H
      W = Drag.Source.Tag!W
      sPicPath = "<TABLE WIDTH=100%><TR><TD WIDTH=100%><P><IMG src=\"" & Drag.Source.tag!fname & "\"" 
      sPicPath &= " NAME=\"graphics\" ALIGN=\"LEFT\" WIDTH=\"" & Str(W) & "\" HEIGHT=\"" & Str(H) & "\" BORDER=\"0\"></TR></TD></TABLE><BR><BR>" '<BR CLEAR=Left>
      teNotes.text &= "%image%"
      teNotes.richtext = Replace$(teNotes.richtext, "%image%", sPicPath)
   End If
   
End 

Public Sub EmbeddedForm_Close()
   '--------------------------------------
   'Closes any form embedded in the editor
   'reloads the main HSplit layout
   '--------------------------------------
   
   Dim Charpos As Integer
   
   charpos = InStr(teNotes.text, sShortCutText)
   EmbeddedForm.Close()
   teNotes.Richtext = Replace$(teNotes.richtext, sShortCutText, "")
   teNotes.pos = charpos - 1
   teNotes.Visible = True
   teNotes.SetFocus()
   HBox_WordProcessorButtons.Visible = True
   lblTodaysNotes.Visible = True
   
End

Public Sub mnuForms_Click()
   
   ' Select Case Last.tag
   ' Case "medical certificate"
   '     sShortCutText = ".mc"
   '     FMedicalCertificate = New FMedicalCertificate(Vbox_ConsultNotes)
   '      EmbeddedForm_Show(FMedicalCertificate)
   ' 
   ' End Select
   
End

Public Sub MedicalCertificateClose_Close()
   '------------------------------------------------------------------------
   'Removes the medical certificate form. If this routine was called by the
   'user saving and printing a medical certificate, show this in the notes
   'FIXME: THIS is wrong and sloppy Eg. user can now just delete this, but
   'the certificate is already printed. Perhaps this is ok, after all it is
   'their responsibility
   'fixme - can't get this to work (ie close) so I've just hidden it
   '-----------------------------------------------------------------------
   
   Dim CertificateSummary As String
   
   Stop Event
   CertificateSummary = Form_Medical_Certificate.Get_Summary()
   teNotes.richtext = Replace$(teNotes.richtext, ".mc", CertificateSummary)
   Form_Medical_Certificate.Hide() ' fixme fixme 
   EmbeddedForm_Close()
   
End

Public Sub EmbeddedForm_Show(F As Form)
   '------------------------------------------
   'Pops up an embedded form according to the
   'short cuts in the teNotes editor
   'Set EmbeddedForm so that tbHideForm can
   'close it later
   '------------------------------------------
   
   teNotes.Visible = False
   HBox_WordProcessorButtons.Visible = False
   lblTodaysNotes.Visible = False
   EmbeddedForm = F
   EmbeddedForm.Show()
   
End

' Public Sub Drawing_Editor_Show()
'    
'    If FDraw.Visible Then
'       FDraw.Hide()
'       FDraw.Ignore = True -
'       teNotes.Visible = True
'    Else
'       teNotes.Visible = False
'       FDraw.Visible = True
'       ' FDraw_Resize()
'    End If
'    
' End

Public Sub cmbTemplates_Click()
   
   ' teNotes.text = Last.text 
   teNotes.Clear() 
   'teNotes.text = "darned that up"
   Try teNotes.RichText = File.Load("html/" & Last.text & ".html")
   If Error Then 
      message.Info("Cannot find the template " & Last.text)
   End If
   
End

Public Sub teNotes_Drop()
   
   teNotes_Paste
   
End

Public Sub RequestForm_ToolButtons_Click()
   
   Stop Event
   FRequests.Hide
   teNotes.Show()
   
End

Public Sub DrawEditor_ToolButtons_Click()
   '-------------------------------------------------------
   ' Only two tool buttons in the draw editor are monitored
   'see FDraw_Create_Observer()
   '-------------------------------------------------------

   Stop Event
   Select Case Last.tag
      Case "close"
         '------------------------------------------------------------- 
         'User has closed the drawing editor, not by saving the picture
         'so need to remove .draw
         '-------------------------------------------------------------
         teNotes.RichText = Replace$(teNotes.RichText, ".draw", "")
         EmbeddedForm_Close()
         ParentPage.HSplit1.Layout = ParentPage.HSplit1_Layout
      Case "insert picture"
         '-------------------------------------------------------- 
         'User is closing the drawing editor by inserting an image
         '-------------------------------------------------------- 
         Insert_Picture()
   End Select

End

Public Sub Insert_Picture1(sSource As String)
   '--------------------------------------------------
   'Inserts a picture into the form. This can come
   'from either a cut/paste/import or from the
   'draw 
   'Creates an event observer.
   'this will bug out if user clicks save in  Fdraw 
   'without selecting image
   '--------------------------------------------------
   
   Dim s As String
   Dim par As Integer = 2
   Dim pos As Integer = 2
   Dim temp As String
   Dim count As Integer
   Dim flag As Boolean = True
   Dim lastpos As Integer
   Dim parmarkpos As Integer
   
   Dim curpos As Integer
   Dim PicBox As PictureBox
   Dim NewImage As Image
   Dim Picture1 As New Picture 
   Dim pic As Picture
   Dim sPicPath As String
   Dim tempfile As String
   Dim hObs As Observer
   Dim h As Integer
   Dim w As Integer
   Dim tempstring As String
   
   tempFile = Temp() & ".png"  
   Select Case sSource
      Case "editor"
         ' '------------------------------------------------
         ' 'Picture is being inserted from the draw editor
         ' 'It is either a new picture, or one being edited
         ' '------------------------------------------------
         ' If Fdraw.bediting = True Then
         '    '-------------------------------------------------
         '    'If editing get the handle of the picture box with
         '    'the temp file, and update that picture
         '    'Hbox_pictures = the container of any pictures
         '    'in the editing area
         '    '-------------------------------------------------
         '    For Each PicBox In Hbox_pictures.Children
         '        If PicBox.tag = Fdraw.sPicturePath Then
         '           Fdraw.$hImage.Save(Picbox.Tag)
         '           Picbox.Picture = Picture1.Load(Picbox.Tag)
         '          
         '           EmbeddedForm_Close()
         '           Return
         '        End If
         '     Next
         '  Else
         '      '-----------------------------------------------------
         '      'Not editing, so is a new picture being returned
         '      'from the draw editor
         '      'Add a new picture box and observer for events
         '      'Use the Save routine from FDraw to create a png
         '      'file with this image (TempFile)
         '      '-----------------------------------------------------
         '      PicBox = New PictureBox(Hbox_pictures)
         '      PicBox.Border = Border.Plain
         '      hObs = New Observer(Picbox) As "RequestPictures"
         '      Fdraw.$hImage.Save(Tempfile)
         '      EmbeddedForm_Close()
         '  End If
      Case "clipboard"
         '----------------------------------------------------------
         'If source of paste is a clipboard, validate it it an image
         '----------------------------------------------------------
         If Clipboard.type = Clipboard.Image Then
            ' PicBox = New PictureBox(Hbox_pictures)
            'PicBox.Border = Border.Plain
            '' hObs = New Observer(Picbox) As "RequestPictures"
            NewImage = Clipboard.Paste()
            NewImage.Save(Tempfile)
            
            Shell "convert " & Tempfile & " -bordercolor White -border 5x5 /tmp/border.png" Wait
            pic = Picture["/tmp/border.png"]
            w = Abs(pic.width * 2 / 3)
            h = pic.Height
            w = pic.width
            sPicPath = "<TABLE WIDTH=100% CELLPADDING=4 CELLSPACING=3 ><TR><TD WIDTH=100%><P><IMG "
            sPicPath &= "src=\"" & "/tmp/border.png" & "\" "  
            sPicPath &= " NAME=\"graphics\" ALIGN=\"LEFT\" WIDTH=\"" & Str(W) & "\" HEIGHT=\"" & Str(H) & "\" BORDER=\"0\"></TR></TD></TABLE><BR><BR>" 
            '  H = P.h
            ' w = P.w
            ' End If
            teNotes.richtext = Replace$(teNotes.richtext, ".pic", sPicPath)
            s = teNotes.RichText
            
            ' Do Until count = Paragraph_At + 1
            '    parmarkpos = InStr(s, "<p>", lastpos)
            '    ' If count = par + 1 Then
            '    '    s = Left(s, lastpos)
            '    '    Break
            '    ' End If
            '    lastpos = parmarkpos + 1
            '    Inc count
            ' Loop
            ' 'now are at start of paragraph the cursor is on
            ' tempstring = Left(teNotes.RichText, lastpos + pos + 2)
            ' tempstring &= sPicPath & Right(teNotes.RichText, Len(teNotes.RichText) - lastpos - pos - 2)
            ' teNotes.RichText = tempstring   
         Else
            '-------------------------------------------
            'Not an image, nothing to paste leave routine
            '--------------------------------------------
            Return
         End If
   End Select
   
End

Public Sub Insert_Picture()
   '--------------------------------------------------------------------
   'User is inserting a picture from the draw editor back into the notes
   '--------------------------------------------------------------------
   'FIX ME, PUT IN APPROPRIATE HEIGHT.WIDTH FROM THE DRAW FORM.
   
   Dim curpos As Integer
   Dim pic As Picture
   Dim aString As String
   Dim sPicPath As String
   Dim tempFile As String
   Dim h As Integer
   Dim w As Integer
   
   If Not IsNull(Fdraw.$hImage) Then 
      tempFile = Temp() & ".png"
      Fdraw.$hImage.Save(Tempfile)
      pic = Picture[tempfile]
      h = Abs(pic.Height * 2 / 3)
      w = Abs(pic.width * 2 / 3)
      sPicPath = "<P><TABLE WIDTH=100%><TR><TD WIDTH=100%><P><IMG "
      sPicPath &= "src=\"" & tempfile & "\" "  
      sPicPath &= " NAME=\"graphics\" ALIGN=\"LEFT\" WIDTH=\"" & Str(W) & "\" HEIGHT=\"" & Str(H) & "\" BORDER=\"0\"></TR></TD></TABLE><BR><BR>" 
      teNotes.richtext = Replace$(teNotes.richtext, ".draw", sPicPath)
   End If
   EmbeddedForm_Close()
   
End

Public Sub ParseText_Keyword(keyword As String)
   '--------------------------------------------------------------
   'Tries to convert any BP=nnn/nn or nnn/nnn contained
   'in the background HTML to a valid BP If unsuccessful, then
   'no formatted html is inserted, so the user immediately knows
   'they have typed something wrong.
   '
   'Example as user types in teNotes BP=120/70 the html looks like
   'this. Note that this routine is not triggered until a ascii 32
   'appears after the 120/70:
   '
   ' <html><head><meta name="qrichtext" content="1" /></head>
   '<body style="font-size:9pt;font-family:Bitstream Vera Sans">
   ' <p>BP=120/70 </p>
   ' </body></html>
   '
   'After this routine, the resultant html looks like this:
   '
   ' <html><head><meta name="qrichtext" content="1" /></head>
   '<body style="font-size:9pt;font-family:Bitstream Vera Sans">
   ' <p><a href="Bloodpressure">Blood Pressure=120/70 </a><br /></p>
   ' </body></html>
   '
   'and the cursor is moved on to the next line.
   
   'The resultant hmtl is parsed and the values extracted when the
   ' progress note is later saved
   '
   'FIXME: NO CODE YET TO RE-CONSTRUCT THE HTML IF THE USER
   'PARTIALY DELETES THE FORMATTED TEXT AFTER IT HAS BEEN INSERTED
   '--------------------------------------------------------------
   Dim sMeasurement As String
   Dim cp1 As Integer
   Dim cp2 As Integer
   
   CP1 = InStr(LCase(teNotes.RichText), keyword)
   cp2 = InStr(teNotes.RichText, "<", CP1)
   sMeasurement = Mid(teNotes.RichText, cp1, Cp2 - cp1)
   If Not (Right(sMeasurement, 1) = Chr(32)) Then 
      Return
   End If
   'IsMeasurement(keyword, sMeasurement)
   modMeasurements.IsMeasurement(teNotes, keyword, sMeasurement)
   'I've left these here for the moment as FProgressNotes editor
   'is a bit of a mess FIXME
   ' If keyword = "h=" Then
   '    sHeight = SS 
   '     CalcBMI()
   '  End If
   '  If keyword = "w=" Then
   '     sWeight = SS
   '     CalcBMI()
   '  Endif
   '  Return True
   
End

Public Function IsMeasurement(keyword As String, sMeasurement As String) As Boolean
   
   Dim Delimiter As String
   Dim charpos As Integer
   Dim SS As String
   Dim html_aref_tag As String
   Dim html_text As String
   Dim sUnits As String
   
   Select Case keyword
      Case "bp="
         Delimiter = "/"
         html_text = "blood pressure"
         html_aref_tag = "blood pressure"
         sUnits = "mmhg"
      Case "h="
         Delimiter = "."
         html_text = "height"
         html_aref_tag = "height"
         sUnits = "cm"
      Case "w="
         Delimiter = "."
         html_text = "weight"
         html_aref_tag = "weight"
         sUnits = "kg"
      Case "bsl="
         Delimiter = "."
         html_text = "blood Sugar"
         html_aref_tag = "blood Sugar"
         sUnits = "mmole"
   End Select
   SS = Right(sMeasurement, Len(sMeasurement) - InStr(sMeasurement, "="))
   charpos = InStr(SS, delimiter)
   Try Val(Left(SS, charpos - 1))
   If Error Then Return False
   Try Right(SS, Len(SS) - charpos)
   If Error Then Return False
   teNotes.RichText = Replace$(LCase(teNotes.RichText), keyword & SS, "<A HREF='" & html_aref_tag & "'>" & html_text & "=" & SS & sUnits & "</A><BR>")
   teNotes.pos = InStr(teNotes.text, html_text & "=" & SS & sunits) + Len(html_text & " = " & SS & sUnits)
   If keyword = "h=" Then
      sHeight = SS 
      CalcBMI()
   End If
   If keyword = "w=" Then
      sWeight = SS
      CalcBMI()
   Endif
   Return True
   
End

Public Function CalcBMI() As String
   '-------------------------------------------------------------------------
   'Checks html to see if weight/height exist, if do > shows a calculated BMI
   'and the weight range, and number of Kg's overweight
   '-------------------------------------------------------------------------
   
   Dim Height As String
   Dim Data As String[] 
   Dim BMI As Float
   Dim range As String 
   Dim sMsgOverweight As String = "Patient is in overweight range of BMI"
   Dim sMsgObese As String = "Patient is in obese range of BMI"
   Dim sMsgUnderweight As String = "Patient is in the underweight range of BMI"
   Dim sWeightMessage As String  
   '---------------------------------------------------------------------------------
   'Either, get height from these notes, or if none, check if we have an existing one
   '---------------------------------------------------------------------------------
   ' If InStr(Lower(teNotes.richtext), "height=") Then     
   '    CP1 = InStr(LCase(teNotes.RichText), "height=")
   '    cp2 = InStr(teNotes.RichText, "cm", CP1)
   '    height = Mid(teNotes.RichText, cp1, Cp2 - cp1)
   '    height = Right(Height, Len(Height) - InStr(Height, "="))
   ' End If
   If sHeight = "" 
      Data = Split(modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Height), "|")
      Try sHeight = Data[0]
      If Not Error Then
         teNotes.Richtext &= "Last measured height  on " & Data[1] & " was " & sHeight & "<BR>"
      Endif
   Endif
   If sWeight = "" Then
      Data = Split(modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Weight), "|")
      Try sWeight = Data[0]
      If Not Error Then
         teNotes.Richtext &= "Last measured weight on " & Data[1] & " was " & sWeight & "<BR>"
      Endif
   Endif
   If sHeight <> "" And sWeight <> "" Then 
      BMI = Val(sweight) / ((sHeight / 100) * (sHeight / 100)) 
      BMI = Val(Format(Str$(BMI), "##.#"))
      If BMI > 20 And BMI < 25 Then range = "normal" 
      
      If BMI > 25 And BMI < 30 Then range = "overweight"
      If BMI > 30 Then range = "obese" 
      If BMI < 20 Then range = "underweight"
      Select Case range
         Case "underweight"
            If Not (InStr(tlsuggestions.text, sMsgUnderweight)) Then
               If Trim(tlsuggestions.text) = "" Then
                  tlsuggestions.text = sMsgUnderweight   
               Else
                  tlsuggestions.text &= "<BR>" & sMsgUnderweight
               End If
            End If
            sWeightMessage = sMsgUnderweight
         Case "overweight"
            If Not (InStr(tlsuggestions.text, sMsgOverweight)) Then
               If Trim(tlsuggestions.text) = "" Then
                  tlsuggestions.text = sMsgOverweight   
               Else
                  tlsuggestions.text &= "<BR>" & sMsgOverweight
               End If
            End If
            sWeightMessage = sMsgOverweight
         Case "obese"
            If Not (InStr(tlsuggestions.text, sMsgObese)) Then
               If Trim(tlsuggestions.text) = "" Then
                  tlsuggestions.text = sMsgObese   
               Else
                  tlsuggestions.text &= "<BR>" & sMsgObese
               End If
            End If
            sWeightMessage = sMsgOverweight
      End Select
      teNotes.Richtext &= "<A HREF='" & "BMI=" & " '>" & "BMI=" & Str(BMI) & "</A>"
      If sWeightMessage Then
         teNotes.Richtext &= " <small>(" & sWeightMessage & ")</small><BR>"
      Endif
      
      Return Format(BMI, "##.#")
   Else
      '  message.Info("No height data recorded for this patient. To calculate the BMI automatically please enter eg h=180 and hit spacebar")
      Return "" 
   End If
   
End

Public Sub mnuNotes_Click()
   
   Select Case Last.tag
      Case "paste"
         If Not InStr(tenotes.richtext, ".pic") Then
            tenotes.text = ".pic"
         End If 
         Insert_Picture1("clipboard")
         
   End Select
   
End

Public Sub Medical_Certificate_Show()
   
   If FMedicalCertificate.Visible Then  
      FMedicalCertificate.Hide()
      FMedicalCertificate.Ignore = True
      teNotes.Visible = True
   Else
      teNotes.Visible = False
      FMedicalCertificate.Visible = True
   End If
   
End

Public Sub teNotes_Menu()
   
   Paragraph_At = teNotes.ToParagraph(teNotes.pos)
   character_at = teNotes.ToIndex(teNotes.pos)
   
   'teNotes.text = 
   mnuNotes.Popup()
   
End

Public Sub FDraw_Create_Observer()
   'just a routine to overide the btn_save event of Fdraw
   
   hObs = New Observer(Fdraw.btnSave) As "DrawEditor_ToolButtons"
   hObs = New Observer(Fdraw.tbClose) As "DrawEditor_ToolButtons"
   
End

Public Sub tbclosedraw_click()
   
   Stop Event
   Print "here" 
   
End

Public Sub Editor_Clear()
   '-----------------------------------
   'Clears the text editor with warning
   '-----------------------------------
   
   Select Case message.Warning("Caution:\n\nTo continue will entirely erase your notes.\n\nAre you sure?", "Yes - erase notes", "No")
      Case 1
         bExit = True   
         teNotes.Clear()
         tlsuggestions.Text = ""
         bExit = False
         sWeight = ""
         sHeight = ""
         bFontBold = False 
   End Select
   
End

Public Sub EditorButtons_Click()
    Dim curpos As Integer
   '---------------------------------------------
   'User has clicked on one of the editor buttons
   '---------------------------------------------
   Select Case Last.tag
     Case "spell"
       SpellChecker.init()
       SpellChecker.StartSpelling()
     Case "list"
          teNotes.Insert(".!@.")
          teNotes.RichText = Replace(teNotes.RichText, ".!@.", "<ul type='disc'><LI> </LI></UL>") 
          teNotes.RichText = Replace(teNotes.RichText, "style=\" margin-top:12px; margin-bottom:12px", "style=\" margin-top:6px; margin-bottom:6px")
         
          teNotes.Pos = curpos
         
          Print tenotes.Paragraph
         teNotes.Pos = Len(tenotes.text)
         Print tenotes.RichText
      Case "about"
         Balloon.Info("A simple TextEditor adapted from an example by\nFabien Bodard (gambix@users.sourceforge.net)\nand Benoît Minisini", Last)
      Case "erase"
         Editor_Clear()
      Case "bold"
         teNotes.Format.Font.Bold = Last.Value
      Case "italic"
         teNotes.Format.Font.Italic = Last.Value
      Case "underline"
         teNotes.Format.Font.Underline = Last.Value
      Case "strikeout"
         teNotes.Format.Font.StrikeOut = Last.Value
      Case "align left"
         teNotes.Format.Alignment = Align.Left
      Case "align centre"
         teNotes.Format.Alignment = Align.Center
      Case "align right"
         teNotes.Format.Alignment = Align.Right
      Case "justify"
         teNotes.Format.Alignment = Align.Justify  
      Case "load file"
         ' Dialog.Title = "Select Image File"
         ' Dialog.Filter = ["*.png", "Image Files", "*", "All files"]
         ' If Dialog.OpenFile() Then Return
         ' FImageGet.$hImage = Image.Load(Dialog.Path)
         ' FImageGet.ShowModal()       
         ' Insert_Picture1("clipboard")
      Case "dot point"
      Case "hide form"
         EmbeddedForm_Close()
   End Select
   
End

Public Function backup()
   '-----------------------------------------
   'FIXME BETTER NAME 
   'make me a stack
   'Saves the editor contents before erasing
   'just in case user did it by accident
   '-----------------------------------------
   
   editor_contents = teNotes.RichText()
   
End

Public Sub teNotes_Cursor()
   
   Object.Lock(btnBold)
   Object.Lock(btnItalic)
   Object.Lock(btnUnderline)
   Object.Lock(btnAlignLeft)
   Object.Lock(btnAlignCenter)
   Object.Lock(btnAlignRight)
   Object.Lock(btnAlignJustify)
   Object.Lock(SpinBox1)
   Object.Lock(ColourButton1)
   
   btnBold.Value = teNotes.Format.Font.Bold
   btnItalic.Value = teNotes.Format.Font.Italic
   btnUnderline.Value = teNotes.Format.Font.Underline
   
   Select Case teNotes.Format.Alignment
      Case Align.Left
         btnAlignLeft.Value = True
      Case Align.Right
         btnAlignRight.Value = True
      Case Align.Center
         btnAlignCenter.Value = True
      Case Align.Justify
         btnAlignJustify.Value = True
      Case Align.Normal
         btnAlignLeft.Value = True ' If the displayed langage is left to right written, that's OK. Elsewhere...
   End Select
   
   ColourButton1.Color = teNotes.Format.Color
   cmbFonts.Text = teNotes.Format.Font.Name
   SpinBox1.Value = teNotes.Format.Font.Size
   
   Object.UnLock(btnBold)
   Object.UnLock(btnItalic)
   Object.UnLock(btnUnderline)
   Object.UnLock(btnAlignLeft)
   Object.UnLock(btnAlignCenter)
   Object.UnLock(btnAlignRight)
   Object.UnLock(btnAlignJustify)
   Object.UnLock(cmbFonts)
   Object.UnLock(SpinBox1)
   Object.UnLock(ColourButton1)
   
End

Public Sub Auto_Text(shortcut As Collection)
   
   teNotes.RichText = Replace(teNotes.RichText, shortcut!abbrev, "")
   If shortcut!uline Then 
      teNotes.Format.Font.Underline = True    
   Endif
   teNotes.Format.Font.Bold = shortcut!bold
   tenotes.Insert(shortcut!text)
   teNotes.Format.Font.Bold = False 
   teNotes.Format.Font.Underline = False 
   
End

Public Sub Auto_Text_Section(shortcut As Collection, re As Regexp)
   
   teNotes.Text = Replace$(teNotes.Text, re.Text & "\n", "")
   If shortcut!uline Then 
      teNotes.Format.Font.Underline = True    
   Endif
   teNotes.Format.Font.Bold = shortcut!bold
   teNotes.Insert(shortcut!text & " " & re.SubMatches[1].Text & "\n")
   teNotes.Format.Font.Bold = False 
   teNotes.Format.Font.Underline = False
   
End
Public Sub tbLoadFile_Click()
   '-----------------------------------------------------------
   'Load a file and insert into the editor either image or text
   'todo -the text
   '-----------------------------------------------------------
   
   teNotes.Insert(".pic")
   Dialog.Title = "Select Image File"
   Dialog.Filter = ["Pictures (*.png;*.jpg;*.jpeg)", "All files (*.*)"]
   
   If Dialog.OpenFile() Then Return
   '----------------------------------------------------
   'Ok, check this is a valid image (e.g they could have
   'changed the file selector to any file
   '-----------------------------------------------------
   Try FImageGet.Set_Image(Image.Load(Dialog.Path))
   '  Try FImageGet.$hImage = Image.Load(Dialog.Path)
   If Not Error Then 
      FImageGet.ShowModal()       
      Insert_Picture1("clipboard")
   Else
      Try teNotes.Insert(File.Load(Dialog.Path))
      If Error Then
         Message.Info("An error occurred whilst trying to insert the file.\n")
      End If
   End If
   
End

Sub temp_keep_this()
   ' sPicPath = "<TABLE WIDTH=100%><TR><TD WIDTH=100%><P><IMG "
   '  If PictureBox1.tag <> "" Then
   '    sPicPath &= "pk_image=" & Pictures[PictureBox1.tag]!fk_image & " "
   '    H = PictureBox1.Picture.H
   '    W = PictureBox1.Picture.W
   '  Else
   '     Tempfile = Temp() & ".png" 
   '     P = HBox_MainPicture.Screenshot()
   '     P.Save(Tempfile) 
   '     sPicPath &= "src=" & tempfile & " "  
   '     H = P.h
   '     w = P.w
   '  End If
   '  sPicPath &= " NAME=graphics ALIGN=LEFT WIDTH=" & Str(W) & " HEIGHT=" & Str(H) & " BORDER=0></TR></TD></TABLE><BR><BR>" 
   '  Return sPicPath
   
End

Public Sub tbWebCam_Click()
   ' teNotes.Foreground = teNotes.Background

   Print tenotes.RichText
   Print
   Print tenotes.Text
   
   teNotes.Insert(".draw")
   teNotes_KeyRelease()
   Return 
   ' If FWebCam.ShowModal() Then  
   '    Insert_picture1("clipboard")
   ' Else
   '    teNotes.text = Replace(teNotes.text, ".pic", "")
   ' End If  
   
End
