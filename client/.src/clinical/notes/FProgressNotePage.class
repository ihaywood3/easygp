' Gambas class file

' Copyright (C) 2008-2014 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
Public bExit As Boolean
Public iZoom As Integer
Public default_Zoom As Integer
Private currentconsult As Cconsult
Private HealthIssue As Collection
Public Notes_Editor As FProgressNoteEditor
Public pk_progressnote As Integer
Private fk_section As Integer '  see clin_consult.lu_progressnotes_sections
Private pk_pasthistory As Integer
Public FPast_History As FPastHistory
Public bCancelSave As Boolean
Private bAllowTransactionCompletion As Boolean = True
Public HSplit1_Layout As Integer[] 'allows embedded forms to reset the layout
Private Embedded_Form As String

Public Sub _new()
   Notes_Editor = New FProgressNoteEditor(Vbox_ProgressNoteEditor)
     
   
   
End

Public Sub set_Embedded_Form(f As String)
   
   Embedded_Form = f
   
End

Public Sub Set_ExternalTransaction()
   
   bAllowTransactionCompletion = False
   
End

Public Function HealthIssue_GetName() As String
   
   Return healthissue!description
   
End

Public Function Refresh_HealthIssue_Collection()
   '-------------------------------------
   'refreshes the past history collection
   '-------------------------------------
   
   Dim PH As Collection
   
   For Each PH In currentconsult!past_history
      If PH!pk_pasthistory = pk_pasthistory Then
         HealthIssue = PH
         Break
      End If
   Next
   
End


Public Sub Print_Content()
   '-------------------------------------------------------------------------------------
   'creates pdf with page header of the progress notes and prints directly with no prompt
   '-------------------------------------------------------------------------------------
   If Trim(Notes_Editor.teNotes.text) = "" Then Return                                                      'don't print if no notes
   Message.title = "Progress Notes"                                                                         'ensure title
   If Message.Question("Are you sure you want to print out today's notes?", "Yes", "No") = 2 Then Return    'allow back out
   modPrinting.Print_PDF(modProgressNotes.ProgressNotes_Add_Page_Header_Create_PDF_File(Notes_Editor.teNotes.RichText, currentConsult, "CONSULTATION"))

End   

Public Sub Preview()
   
   FClinical.Editor_ShowPage_External("pdf document external", "Today's Notes.pdf", modProgressNotes.ProgressNotes_Add_Page_Header_Create_PDF_File(Notes_Editor.teNotes.RichText, currentconsult, "CONSULTATION"))
   
End

Public Function set_pk_pasthistory(pk As Integer) As Integer
   '------------------------------------------
   'Returns the pk_past_history
   'e.g used in FClincial.workSpaceActivate()
   '-----------------------------------------
   
   pk_pasthistory = pk
   
End

Public Function Get_pk_pasthistory() As Integer
   '------------------------------------------
   'Returns the pk_past_history
   'e.g used in FClincial.workSpaceActivate()
   '-----------------------------------------
   
   Return pk_pasthistory
   
End

Public Function Get_pk_progressNote() As Integer
   
   Return pk_progressnote
   
End

Public Sub SetPK(pk As Integer)
   '-------------------------------------------------
   'Sets the primary key of the current progress note
   'FIXME FIX MY NAME EVERYWHERE USED TO Set_pk_progressnote
   'to make more sense
   '-------------------------------------------------
   
   pk_progressnote = pk
   
End

Public Sub Set_fk_section(fk As Integer)
   '-------------------------------------------------
   'Sets the primary key of the current progress note
   '-------------------------------------------------
   
   fk_section = fk
   
End

Public Sub Save()
   '----------------------------------------------------------
   ' Saves the contents of the editor page if data has changed
   ' in the text editor. If this is the first time this consult
   ' then the clin_consult.pk is returned as pk_progress note
   ' to allow appropriate editing. Rediplay the changed notes
   ' If nothing to save, or no change, or bCancelSave then exit
   ' Special note on bCancelSave:
   ' Imagine this scenario:
   '     User is entering progress notes on a problem in the
   '     editor, then realises that they have incorrectly put
   '     in this problem (eg wrong patient) and then have opened the past history/health issue
   '     section, and deleted the health item. So, we have to close the editor page which is
   '     now both open and invalid, however normally, closing the editor page will auto-save
   '     any changes to both the progress notes and the past history/health issue (which now
   '     does not exist, so just cancel the save
   '     
   ' Saves the codes for these progress notes
   '-----------------------------------------------------------
   
   Dim progress_note_code As CRow   
   Dim PNC As Collection 
   
   If bCancelSave Then Return
   '--------------------------------------------------------------------------------------
   'Save any changes to the embedded health issue (past history) form and re-load its data
   'Refresh any past history tab which contains the same past history item as use is
   'adding progress notes to
   '--------------------------------------------------------------------------------------
   
   If pk_pasthistory <> 0 Then
      FPast_History.Save()
      Health_Issue_Reload()
   End If
   '-----------------------------------------------------------------------------------------
   'Have to handle these sorts of scenarios - user adds some notes during consult, but then
   'totally deletes the notes. As these notes have been previously saved, need to resave the
   'editor even when it is empty but only if th copy of what was in there is not "" ie don't
   'save just an empty editor. At moment I  just re-save but save an empty string
   '-----------------------------------------------------------------------------------------
   If (Trim(Notes_Editor.teNotes.text) = "" And Notes_Editor.Get_copy_of_editor_text() = "") Or Not Notes_Editor.get_data_changed() Then
      
      Return
   End If
   pk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, Notes_Editor.teNotes.RichText, fk_section, pk_progressnote, lblNotesFor.text, pk_pasthistory)
   '----------------------------------------
   ' CREATE TABLE clin_consult.progressnotes_codes
   ' (
   '   pk serial NOT NULL,
   '   fk_progressnote integer NOT NULL,
   '   fk_code text NOT NULL,   '= key to coding.generic_terms
   '   fk_coding_system integer NOT NULL,
   '   deleted boolean NOT NULL DEFAULT false,
   '   CONSTRAINT progressnotes_codes_pkey PRIMARY KEY (pk ),
   '   CONSTRAINT progressnotes_codes_fk_coding_system_fkey FOREIGN KEY (fk_coding_system)
   '       REFERENCES coding.lu_systems (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT progressnotes_codes_fk_progressnote_fkey FOREIGN KEY (fk_progressnote)
   '       REFERENCES clin_consult.progressnotes (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   ' Save the codes for these progress notes
   '----------------------------------------
   For Each PNC In Notes_Editor.Progress_Notes_Codes_Get()
      progress_note_code = New CRow
      If PNC!pk Then
         progress_note_code.put_unchanged(PNC!pk, "pk")
      End If   
      progress_note_code!fk_progressnote = pk_progressnote
      progress_note_code!fk_code = PNC!fk_code
      progress_note_code.Save("clin_consult.progressnotes_codes", "pk")
   Next
   '--------------------------------------------------
   'Sometimes the save routine is called from a form
   'which wants to encapsulate its own transaction
   'so the commit trans is done from the calling form
   'Update all the progress notes in FClinical
   'Any new images will be added to the images collection in FClinical via modConsultDBI.Notes_Parse_For_Images(..)
   '-------------------------------------------------
   If bAllowTransactionCompletion Then
      modDBConnect.CommitTrans()
      Notes_Editor.Set_Copy_of_Editor_text(Notes_Editor.teNotes.text) 'save copy of what is in the editor for later comparison.
      Notes_Editor.DataChange_Update_Indicators(False)
      If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then
         FClinical.Refresh_AllPreviousNotes()
         FClinical.Refresh_Section(const.cSection_HealthSummary)
         FClinical.Update_graphs()
      End If
      If Embedded_Form = "FInbox" Then
         FInbox.Previous_Notes_Refresh 'refresh the 'Context' tab in the inbox
      Endif
      
   End If
   With Notes_Editor
      .Set_fk_ProgressNote(pk_progressnote)
      .ProgressNotes_Codes_Reload
   End With
   
End

Public Sub DataChange_Update_Indicators(flag As Integer)
   '------------------------------------------
   'Removes Or sets the red border To indicate
   'if data is changed
   '------------------------------------------
   
   If flag Then
      '  Vbox_Summary.Padding = 1
      ' Vbox_Plan.Padding = 1
   Else
      
      '  Vbox_Summary.Padding = 0
      '  Vbox_Plan.Padding = 0
      
   End If
   
End

Public Sub Init(Cons As CConsult, Optional heading As String)
   '-----------------------------------------------------------
   'PURPOSE    Do all the form initialisation stuff
   'NOTE:      pk_pasthistory = Me.tag
   '           fk_section
   '           healthissue collection
   '           set by the calling routine
   '           Fclinical.Editor_ShowPage() for general notes or
   '           Fclinical.Editor_ShowPastHistory() for specific
   '           past history item.
   '           heading=temporary 02Feb12 RT fixme
   '------------------------------------------------------------
   
   Dim hctrl As Control
   Dim R As Result
   Dim Notes_This_Consult As String  'any notes already written this consultation
   
   currentconsult = Cons
   If Embedded_Form = "FInbox" Then
      VBox_Other_Notes_Sections.Visible = False 
      Hbox_Save.Visible = True   
      lblNotesFor.text = "New General Notes"
   Endif
   '-------------------------------------------------------
   'If fk_consult, then reload last notes written for today
   '-------------------------------------------------------
   ' If Embedded_Form <> "FInbox" Then
   '  R = modConsultDBI.ProgressNotes_GetFor_fk_Consult_new(currentconsult.GetPK(), pk_pasthistory)
   ' Else
   pk_progressnote = -1   '-1 = no progress notes yet
   If currentconsult.IsCreated() Then
      If pk_pasthistory <> 0 Then
         R = modConsultDBI.ProgressNotes_GetFor_fk_Consult_new(currentconsult.GetPK(), "", pk_pasthistory)
      Else
         R = modConsultDBI.ProgressNotes_GetFor_fk_Consult_new(currentconsult.GetPK())
      End If
      If r.count Then
         Notes_This_Consult = Replace(modConsultDBI.Images_Get(R!notes), "file://", "")
         pk_progressnote = R!pk_progressnote
      Endif
   Endif
   With Notes_Editor ' this is loaded in _New()  = New FProgressNoteEditor(Vbox_ProgressNoteEditor)
      .Set_fk_ProgressNote(pk_progressnote)
      .Init(currentconsult, Notes_This_Consult, heading, Me) 'FIXME passing Me this way is wrong/clumbsy passed to allow access to Save() in this module
      .DataChange_Update_Indicators(False)
   End With
   
   If Not IsNull(Me.tag) Then                                       'if this page is for problems specific notes
      Notes_Editor.HSplit_Reasons_For_encounter.visible = False     'don't show the reasons for encounter gui
      HSplit_HealthIssue_Plan_and_Notifications.visible = True    'do show the management plan stuff
      pk_pasthistory = Me.Tag
      FPast_History = New FPastHistory(HBox_HealthIssue)
      For Each hctrl In FPast_History.Vbox_EditArea.Children
         If hctrl Is HBox
            If hctrl.tag <> "show" Then
               hctrl.Visible = False
            End If
         End If
      Next
      With FPast_History
         .VBox_ProblemLists.Visible = False
         .set_embedded(True, "notes")
         .Init(currentconsult)
         .VBox_ProblemLists.visible = False
         .HBox_ManagementSummary.Expand = True
      End With
      Health_Issue_Reload()
      FPast_History.set_fk_progressnote(pk_progressnote) 'do not move this
      Refresh_HealthIssue_Collection()
   Else
      pk_pasthistory = 0
      Notes_Editor.Settings_Load
      HSplit_HealthIssue_Plan_and_Notifications.Visible = False
   End If
   '----------------------------------------------------------
   ' 'General notes has no health issues so hide these textboxes
   ' 'otherwise Display health issue summary and management plan
   ' 'for the past history item being used.
   ' '----------------------------------------------------------
   ' If pk_pasthistory = 0 Then
   '    '   VSplit_Summary_Plan.Visible = False
   ' Else
   '    Refresh_HealthIssue()
   '   ' Display_Health_Issue()
   ' End If
   Try Settings_Load()
   
   Notes_Editor.teNotes.SetFocus()
   
End

Private Sub Settings_Save()
   
   If HSplit_HealthIssue_Plan_and_Notifications.visible Then
      Settings["Consult Notes/VSplit_VSplit_ProgressNotes_PlanShowing"] = VSplit_ProgressNotes.Layout
      Settings["Consult Notes/HSplit_HealthIssue_Plan_and_Notifications.Layout"] = HSplit_HealthIssue_Plan_and_Notifications.Layout
   Else
      Settings["Consult Notes/VSplit_VSplit_ProgressNotes_PlanNotShowing"] = VSplit_ProgressNotes.Layout
   End If
   
End

Private Sub Settings_Load()
   
   If HSplit_HealthIssue_Plan_and_Notifications.visible Then
      Try VSplit_ProgressNotes.Layout = Settings["Consult Notes/VSplit_VSplit_ProgressNotes_PlanShowing"]
      HSplit_HealthIssue_Plan_and_Notifications.Layout = Settings["Consult Notes/HSplit_HealthIssue_Plan_and_Notifications.Layout", modUtilGUI.HSplit([3, 1])]
   Else
      VSplit_ProgressNotes.Layout = [1, 0] 'Settings["Consult Notes/VSplit_VSplit_ProgressNotes_PlanNotShowing", [1, 0])
   End If
   
End

Public Sub Form_Close()
   
   Save()
   Settings_Save()
   
End

Public Function Display_Health_Issue()
   
   ' If IsNull(HealthIssue) Then Return
   ' bExit = True
   ' Refresh_HealthIssue()
   ' lblNotesFor.text = HealthIssue!description
   ' bExit = False
   
End

Public Sub HealthIssue_Change()
   '--------------------------------------------------
   'Shows the health issues current historical summary
   'and managment plan
   'if updated, will update the past history tab if
   'opened to that health issue
   'and visa-versa (when I get around to doing it
   '--------------------------------------------------
   ' If Bexit Then Return
   '  If IsNull(HealthIssue) Then Return
   ' Select Case Last.tag
   ' Case "summary"
   '  '  Healthissue!condition_summary = Trim(teHealthIssueSummary.text)
   '   ' Healthissue!data_changed = True
   '    Vbox_Summary.Padding = 1
   ' Case "plan"
   '   ' Healthissue!management_summary = Trim(teHealthIssuePlan.text)
   '    Vbox_Plan.padding = 1
   '   ' Healthissue!data_changed = True
   ' End Select
   
End

Public Sub Health_Issue_Reload()
   '-----------------------------------------------------------
   'load health issue into the past history form, which in this
   'incarnation only shows the aim/summary/plan
   '-----------------------------------------------------------
   
   With FPast_History
      .pk_pasthistory_set(pk_pasthistory)
      .HealthIssue_Display
      .EditArea_Notify_DataChange(False)
      .HealthIssue_Edit
   End With
   
End

Public Sub PictureBox2_MouseDrag()
   
   If Not IsNull(Last.picture) Then
      Drag.Icon = Last.Picture
      Last.Drag(Last.Picture.Image)
   End If
   
End

Public Sub tbSave_Click()
   
   Save()
   
End
