' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
Public bExit As Boolean
Public iZoom As Integer
Public default_Zoom As Integer
Private currentconsult As Cconsult
Private HealthIssue As Collection
Public Notes_Editor As FProgressNoteEditor
Public pk_progressnote As Variant
Private fk_section As Variant '  see clin_consult.lu_progressnotes_sections
Private pk_pasthistory As Variant
Public FPast_History As FPastHistory
Public bCancelSave As Boolean
Private bAllowTransactionCompletion As Boolean = True
Public HSplit1_Layout As Integer[] 'allows embedded forms to reset the layout
Private Embedded_Form As String

Public Sub _new()
   Notes_Editor = New FProgressNoteEditor(Vbox_ProgressNoteEditor)
  
End

Public Sub set_Embedded_Form(f As String)
   
   Embedded_Form = f
   
End

Public Sub Set_ExternalTransaction()
   
   bAllowTransactionCompletion = False
   
End

Public Function HealthIssue_GetName() As String
   
   Return healthissue!description
   
End

Public Function Refresh_HealthIssue_Collection()
   '-------------------------------------
   'refreshes the past history collection
   '-------------------------------------
   
   Dim PH As Collection
   
   For Each PH In currentconsult!past_history
      If PH!pk_pasthistory = pk_pasthistory Then
         HealthIssue = PH
         Break
      End If
   Next
   
End


Public Sub Init(Cons As CConsult, Optional heading As String)
   '-----------------------------------------------------------
   'PURPOSE    Do all the form initialisation stuff
   'NOTE:      pk_pasthistory = Me.tag
   '           fk_section
   '           healthissue collection
   '           set by the calling routine
   '           Fclinical.Editor_ShowPage() for general notes or
   '           Fclinical.Editor_ShowPastHistory() for specific
   '           past history item.
   '           heading=temporary 02Feb12 RT fixme
   '------------------------------------------------------------
   
   Dim hctrl As Control
   Dim R As Result
   Dim Notes_This_Consult As String  'any notes already written this consultation
   
   currentconsult = Cons
   If Embedded_Form = "FInbox" Then
      VBox_Other_Notes_Sections.Visible = False 
      Hbox_Save.Visible = True   
      lblNotesFor.text = "New General Notes"
   Endif
   '-------------------------------------------------------
   'If fk_consult, then reload last notes written for today
   '-------------------------------------------------------
   pk_progressnote = Null   '-1 = no progress notes yet
   If currentconsult.IsCreated() Then
      R = modConsultDBI.ProgressNotes_GetFor_fk_Consult(currentconsult.GetPK())
      If r.count Then
         Notes_This_Consult = Replace(modConsultDBI.Images_Get(R!notes), "file://", "")
         pk_progressnote = R!pk_progressnote
      Endif
   Endif
   With Notes_Editor ' this is loaded in _New()  = New FProgressNoteEditor(Vbox_ProgressNoteEditor)
      .Set_fk_ProgressNote(pk_progressnote)
      .Init(currentconsult, Notes_This_Consult, heading, Me) 'FIXME passing Me this way is wrong/clumbsy passed to allow access to Save() in this module
      .DataChange_Update_Indicators(False)
   End With
   
   If Not IsNull(Me.tag) Then                                       'if this page is for problems specific notes
      Notes_Editor.HSplit_Reasons_For_encounter.visible = False     'don't show the reasons for encounter gui
      HSplit_HealthIssue_Plan_and_Notifications.visible = True    'do show the management plan stuff
      pk_pasthistory = Me.Tag
      FPast_History = New FPastHistory(HBox_HealthIssue)
      For Each hctrl In FPast_History.Vbox_EditArea.Children
         If hctrl Is HBox
            If hctrl.tag <> "show" Then
               hctrl.Visible = False
            End If
         End If
      Next
      With FPast_History   '?no longer used
         .VBox_ProblemLists.Visible = False
         .set_embedded(True, "notes")
         .Init(currentconsult)
         .VBox_ProblemLists.visible = False
         .HBox_ManagementSummary.Expand = True
      End With
      Health_Issue_Reload()   '?no longer used
      FPast_History.set_fk_progressnote(pk_progressnote) ' ?no longer used
      Refresh_HealthIssue_Collection() ' no longer used
   Else
      pk_pasthistory = Null
      Notes_Editor.Settings_Load
      HSplit_HealthIssue_Plan_and_Notifications.Visible = False
   End If
   Try Settings_Load()
   Notes_Editor.teNotes.SetFocus()
   
End

Private Sub Settings_Save()
   
   If HSplit_HealthIssue_Plan_and_Notifications.visible Then
      Settings["Consult Notes/VSplit_VSplit_ProgressNotes_PlanShowing"] = VSplit_ProgressNotes.Layout
      Settings["Consult Notes/HSplit_HealthIssue_Plan_and_Notifications.Layout"] = HSplit_HealthIssue_Plan_and_Notifications.Layout
   Else
      Settings["Consult Notes/VSplit_VSplit_ProgressNotes_PlanNotShowing"] = VSplit_ProgressNotes.Layout
   End If
   
End

Private Sub Settings_Load()
   
   If HSplit_HealthIssue_Plan_and_Notifications.visible Then
      Try VSplit_ProgressNotes.Layout = Settings["Consult Notes/VSplit_VSplit_ProgressNotes_PlanShowing"]
      HSplit_HealthIssue_Plan_and_Notifications.Layout = Settings["Consult Notes/HSplit_HealthIssue_Plan_and_Notifications.Layout", modUtilGUI.HSplit([3, 1])]
   Else
      VSplit_ProgressNotes.Layout = [1, 0] 'Settings["Consult Notes/VSplit_VSplit_ProgressNotes_PlanNotShowing", [1, 0])
   End If
   
End

Public Sub Form_Close()
   
  ' Save()
  ' Settings_Save()
   
End

Public Function Display_Health_Issue()
   
   ' If IsNull(HealthIssue) Then Return
   ' bExit = True
   ' Refresh_HealthIssue()
   ' lblNotesFor.text = HealthIssue!description
   ' bExit = False
   
End

Public Sub HealthIssue_Change()
   '--------------------------------------------------
   'Shows the health issues current historical summary
   'and managment plan
   'if updated, will update the past history tab if
   'opened to that health issue
   'and visa-versa (when I get around to doing it
   '--------------------------------------------------
   ' If Bexit Then Return
   '  If IsNull(HealthIssue) Then Return
   ' Select Case Last.tag
   ' Case "summary"
   '  '  Healthissue!condition_summary = Trim(teHealthIssueSummary.text)
   '   ' Healthissue!data_changed = True
   '    Vbox_Summary.Padding = 1
   ' Case "plan"
   '   ' Healthissue!management_summary = Trim(teHealthIssuePlan.text)
   '    Vbox_Plan.padding = 1
   '   ' Healthissue!data_changed = True
   ' End Select
   
End

Public Sub Health_Issue_Reload()
   '-----------------------------------------------------------
   'load health issue into the past history form, which in this
   'incarnation only shows the aim/summary/plan
   '-----------------------------------------------------------
   
   With FPast_History
      .pk_pasthistory_set(pk_pasthistory)
      .HealthIssue_Display
      .EditArea_Notify_DataChange(False)
      .HealthIssue_Edit
   End With
   
End

Public Sub PictureBox2_MouseDrag()
   
   If Not IsNull(Last.picture) Then
      Drag.Icon = Last.Picture
      Last.Drag(Last.Picture.Image)
   End If
   
End

