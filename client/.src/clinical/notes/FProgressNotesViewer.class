' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' --------------------------------------------------------------------
' PURPOSE   A module to allow viewing of html progress notes
'           plus sub routines to print and preview as pdf
'           of switch to an edit mode to allow editing of the consults
'---------------------------------------------------------------------

Public Form_NotesEditor As FEditNotes
Public currentConsult As CConsult
Public original_text As String
Public Highlighted_text As String
Private bMatchCAse As Boolean
Private bHighlightAll As Boolean
Private charpos As Integer
Private lastpos As Integer
Static Private form_notes_viewer As FProgressNotesViewer

Public Sub Form_KeyPress()

   Dim CtrlDown As Boolean
   Dim FnDown As Boolean

   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code

         Case Asc("F"), Asc("f")
            If HBox_Find.Visible = False Then
               Hbox_Find.Visible = True
               txtFind.SetFocus()
            Else
               ' Hbox_Find.Visible = False
               ' If original_text <> "" Then WebView1.HTML = original_text
               ' webview1.SetFocus()
            End If

      End Select
   End If

End

Static Public Sub Edit_Mode_Remove(bRefresh As Boolean)

   form_notes_viewer.Edit_mode_Exit(bRefresh)

End

Public Sub Edit_mode_Exit(bRefresh As Boolean)

   Form_NotesEditor.Visible = False
   If bRefresh Then
      WebView1.html = modProgressNotes.AllProgressNotes_Construct_Html(currentconsult)
   Endif
   With lblWebBrowserNotes
      .Foreground = Color.BLACK
      .text = ""
      .Visible = False
   End With
   tbEditMode.text = "Edit Mode"
   With WebView1
      .Visible = True
      .SetFocus()
   End With

End

Public Sub Init(cons As CConsult, sHtml As String)
   '--------------------------------------------------
   'Called from Parent usually FClinical
   'set consult class and show the html in the webview
   '--------------------------------------------------

   form_notes_viewer = Me
   currentConsult = cons
   WebView1.html = sHtml
   ProgressNotesMenu_Refresh

End

Public Sub ProgressNotesMenu_Refresh()
   '------------------------------------------------------------------
   'Refreshes the popup progress notes menu
   'Clears all existing entries as user could have added new problems
   'rebuilds the menu with menu's for
   '*show all notes
   '*general notes
   '*major problems as submenu
   '*significant active problems as submenu
   '*inactive problems as submenu
   '-------------------------------------------------------------------

   Dim mnu As Menu
   Dim mnu_major As Menu
   Dim mnu_active As Menu
   Dim mnu_inactive As Menu
   Dim PastHistoryCondition As Collection
   Dim bNeedSeparator As Boolean = True
   Dim bNoMainMenu As Boolean = True

   If Not currentconsult Then Return
   '----------------------------------------------------------------
   'Clear menu, even if exit this sub, don't want the last patient's
   'menu items on the list
   '----------------------------------------------------------------
   popupMenuProgressNotes.Children.Clear()
   '-----------------------------------------------------------
   'Clear all children from the popup menu then add two entries
   'one for general notes, one for show all notes
   '-----------------------------------------------------------

   mnu = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
   mnu.name = "Show All Notes"
   mnu.caption = "Show All Notes"
   mnu.tag = "show all notes"

   If currentconsult!past_history.count = 0 Then Return
   '---------------------------------------------------------
   'Next add all the major conditions followed by a separator
   '---------------------------------------------------------
   currentconsult.Refresh("past_history")
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!major Then
         If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_1"
            mnu.caption = ""
            bNeedSeparator = False
         End If
         If bNoMainMenu Then
            mnu_major = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_major.name = "popupMenuProgressNotes_Major"
            mnu_major.caption = "Show all notes for Major Health Issues"
            mnu_major.tag = "major"
            bNoMainMenu = False
         End If

         mnu = New Menu(mnu_major) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next

   bNeedSeparator = True
   bNoMainMenu = True
   '---------------------------------------------------------------
   'Next add all the significant conditions followed by a separator
   '---------------------------------------------------------------
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!active = True Then
         If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_2"
            mnu.caption = ""
            bNeedSeparator = False
         End If
         If bNoMainMenu Then
            mnu_active = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_active.name = "popupMenuProgressNotes_Significant"
            mnu_active.caption = "Show all notes for Significant Issues"
            mnu_active.tag = "significant"
            bNoMainMenu = False
         End If
         mnu = New Menu(mnu_active) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next
   bNeedSeparator = True
   bNoMainMenu = True
   '--------------------------------------------------------------
   'Lastly add all the inactive conditions followed by a separator
   '--------------------------------------------------------------
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!active = False And PastHistoryCondition!major = False
         If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_3"
            mnu.caption = ""
            bNeedSeparator = False
         End If
         If bNoMainMenu Then
            mnu_inactive = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_inactive.name = "popupMenuProgressNotes_Significant"
            mnu_inactive.caption = "Show all notes for Inactive Issues"
            mnu_inactive.tag = "inactive"
            bNoMainMenu = False
         End If

         mnu = New Menu(mnu_inactive) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next

End

Public Sub tbEditMode_Click()
   '---------------------------------------------------------------
   'If user wants to edit the notes in FClincal switch to edit mode
   '---------------------------------------------------------------

   If Last.text = "Exit Edit Mode" Then
      Edit_mode_Exit(True)
      Return
   Endif
   If IsNull(Form_NotesEditor) Then Form_NotesEditor = New FEditNotes(Vbox1)
   With Form_NotesEditor
      .Init(currentConsult)
      .Visible = True
   End With
   WebView1.Visible = False
   tbEditMode.text = "Exit Edit Mode"
   With lblWebBrowserNotes
      .Foreground = Color.Red
      .text = "EDIT MODE - Please note - All your actions/alterations will be audited."
      .Visible = True
   End With

End

Public Sub zoom_in()
   '-----------------------------------------------------------------------------
   'Don't put this back in tbWebBrowser_click as is called from outside this form
   '-----------------------------------------------------------------------------

   WebView1.Zoom = Round(webview1.Zoom * 1.1, -2)

End

Public Sub zoom_out()
   '-----------------------------------------------------------------------------
   'Don't put this back in tbWebBrowser_click as is called from outside this form
   '-----------------------------------------------------------------------------

   WebView1.Zoom = Round(webview1.Zoom / 1.1, -2)

End

Public Sub Preview()

   '-------------------------------------------------------------------------------------
   'Creates a single PDF of the html in the webview and loads onto a new tab in Fclinical
   '-------------------------------------------------------------------------------------

   Dim filename As String

   Try Kill "/tmp/any"
   Inc Application.Busy
   filename = modPrinting.Make_PDF_From_Html(webview1.html, const.orientation_portrait)
   If Exist(filename) Then
      FClinical.Editor_ShowPage_External("pdf file", "notes", filename)
      If Error Then
         Message.Title = "EasyGP Error"
         Message.Info("An error occurred whilst generating the pdf./n/nIf this persists please contact support.")
      Endif
   End If
   Dec Application.Busy

End

Public Sub Print_Content()
   '----------------------------------------------------------------
   'Prints the content of the webview as series of unformatted pages
   '----------------------------------------------------------------

   modPrinting.PrintHtml(WebView1.HTML, const.Paper_Plain)

End

Public Sub txtFind_Activate()

   Dim findtext As String = Trim(txtFind.text)

   original_text = WebView1.HTML
   charpos = InStr(original_text, findtext)      'current occurrence
   If charpos Then
      lastpos = charpos

   Endif

   If Not bMatchCAse Then
      Highlighted_text = Replace(original_text, LCase(Trim(txtFind.text)), "<SPAN STYLE='background: #ffff00'>" & Trim(txtFind.text) & "</SPAN>", gb.IgnoreCase)
   Else
      Highlighted_text = Replace(original_text, Trim(txtFind.text), "<SPAN STYLE='background: #ffff00'>" & Trim(txtFind.text) & "</SPAN>")
   End If
   WebView1.HTML = Highlighted_text

End

Public Sub checkboxes_Click()

   Select Case Last.tag
      Case "highlight all"
         bHighlightAll = Last.Value
      Case "match case"
         bMatchCase = Last.Value
   End Select

End

Public Sub tbWebBrowser_Click()

   Highlighted_text = Replace(original_text, LCase(Trim(txtFind.text)), "<SPAN STYLE='background: #ffff00'>" & Trim(txtFind.text) & "</SPAN>", gb.IgnoreCase)

End

Public Sub WebView1_Menu()

   Stop Event
   popupMenuProgressNotes.popup()

End

Public Sub popupMenuProgressNotes_Click()

   Select Case Last.tag
      Case "show all notes"
         LblNotesFilter.text = ""
         webview1.html = modProgressNotes.AllProgressNotes_Construct_Html(currentconsult)
      Case Else
         ' LblNotesFilter.text = currentConsult!past_history[Last.tag]!description & " notes"
         ' webview1.html = modProgressNotes.ConstructHTML_SingleProblem(currentconsult, Last.tag, const.cSection_PastHistory)
         FClinical.Editor_ShowPage_External("Single Health Issue Notes", currentConsult!past_history[Last.tag]!description & " ((PREVIOUS NOTES)", modProgressNotes.ConstructHTML_SingleProblem(currentconsult, Last.tag, const.cSection_PastHistory))
   End Select

End

Public Sub ComboBox1_Click()

End

Public Sub tbSavePDF_Click()

   Save_PDF

End

Public Sub Save_PDF()
   '---------------------------------------------------------------------------
   'Save the pdf as a file optionally provider the filename as the patient name
   '---------------------------------------------------------------------------

   Dim filename As String

   Dialog.Filter = ["*.pdf", "PDF"]

   If Not IsNull(currentconsult) Then
      filename = Replace(Trim(currentconsult!patient!wholename), " ", "-") & "_" & Format(currentconsult!patient!birthdate, "dd-mm-yyyy")
      filename &= "_exported_" & Format(Now, "dd-mm-yyyy") & "-" & "progress_notes"
      Dialog.title = "Export PDF for " & currentconsult!patient!wholename
      Dialog.Path = User.home &/ filename
   Else
      Dialog.title = "Save the PDF"
   Endif

   If Dialog.SaveFile() Then Return    'user cancels save

   If File.Ext(Dialog.Path) <> "pdf" Then
      Dialog.Path &= ".pdf"
   Endif
   Filename = modPrinting.Make_PDF_From_Html(webview1.HTML,,,, File.Name(Dialog.Path),, File.Dir(Dialog.Path))
   FClinical.Editor_ShowPage_External("pdf document external", "ProgressNotes.pdf", filename)

End
