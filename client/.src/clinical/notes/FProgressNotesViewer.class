' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry, Mr Berndt Brinkman
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' --------------------------------------------------------------------
' PURPOSE   A module to allow viewing of html progress notes
'           plus sub routines to print and preview as pdf
'           of switch to an edit mode to allow editing of the consults
'---------------------------------------------------------------------

Public Form_NotesEditor As FEditNotes
Public currentConsult As CConsult
Public original_text As String
Public Highlighted_text As String
Private bMatchCAse As Boolean
Private bHighlightAll As Boolean
Private bTextFound As Boolean = False
Private SearchCount As Integer
Private bMouseClick As Boolean
Private NumberOfSearchresults As Integer

Static Private form_notes_viewer As FProgressNotesViewer

Public Sub Form_KeyPress()
   
   Dim CtrlDown As Boolean
   
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
         Case Asc("F"), Asc("f")
            If HBox_Find.Visible = False Then
               Hbox_Find.Visible = True
               txtFind.SetFocus()
            End If
      End Select
   End If
   
End

Static Public Sub Edit_Mode_Remove(bRefresh As Boolean)
   
   form_notes_viewer.Edit_mode_Exit(bRefresh)
   
End

Public Sub Edit_mode_Exit(bRefresh As Boolean)
   
   Form_NotesEditor.Visible = False
   If bRefresh Then
      WebView1.html = modProgressNotes.AllProgressNotes_Construct_Html(currentconsult)
   Endif
   With lblWebBrowserNotes
      .Foreground = Color.BLACK
      .text = ""
      .Visible = False
   End With
   tbEditMode.text = "Edit Mode"
   With WebView1
      .Visible = True
      .SetFocus()
   End With
   
End

Public Sub Init(cons As CConsult, sHtml As String)
   '--------------------------------------------------
   'Called from Parent usually FClinical
   'set consult class and show the html in the webview
   '--------------------------------------------------
   
   form_notes_viewer = Me
   currentConsult = cons
   ProgressNotes_Show(sHtml)
   ProgressNotesMenu_Refresh
   
End

Public Sub ProgressNotes_Show(shtml As String)
   '------------------------------------------------------------------------------------------------------
   'This is used by Init() and by FInbox to reload the context notes at the behest of other embedded forms
   '------------------------------------------------------------------------------------------------------
   
   WebView1.html = sHtml
   
End

Public Sub ProgressNotesMenu_Refresh()
   '------------------------------------------------------------------
   'Refreshes the popup progress notes menu
   'Clears all existing entries as user could have added new problems
   'rebuilds the menu with menu's for
   '*show all notes
   '*general notes
   '*major problems as submenu
   '*significant active problems as submenu
   '*inactive problems as submenu
   '-------------------------------------------------------------------
   
   Dim mnu As Menu
   Dim mnu_major As Menu
   Dim mnu_active As Menu
   Dim mnu_inactive As Menu
   Dim PastHistoryCondition As Collection
   Dim bNeedSeparator As Boolean = True
   Dim bNoMainMenu As Boolean = True
   Dim audit_actions As Collection
   
   If Not currentconsult Then Return
   audit_actions = modDBConnect.exec_query_collection("select distinct fk_audit_action as pk_audit_action , audit_action from clin_consult.vwProgressnotes where fk_patient=" & currentConsult!patient!fk_patient & " ORDER BY audit_action")
   '----------------------------------------------------------------
   'Clear menu, even if exit this sub, don't want the last patient's
   'menu items on the list
   '----------------------------------------------------------------
   popupMenuProgressNotes.Children.Clear()
   '-----------------------------------------------------------
   'Clear all children from the popup menu then add two entries
   'one for general notes, one for show all notes
   '-----------------------------------------------------------
   
   mnu = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
   mnu.name = "Show All Notes"
   mnu.caption = "Show All Notes"
   mnu.tag = "show all notes"
   If currentconsult!past_history.count = 0 Then Return
   '---------------------------------------------------------
   'Next add all the major conditions followed by a separator
   '---------------------------------------------------------
   currentconsult.Refresh("past_history")
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!major Then
         If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_1"
            mnu.caption = ""
            bNeedSeparator = False
         End If
         If bNoMainMenu Then
            mnu_major = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_major.name = "popupMenuProgressNotes_Major"
            mnu_major.caption = "Show all notes for Major Health Issues"
            mnu_major.tag = "major"
            bNoMainMenu = False
         End If
         mnu = New Menu(mnu_major) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next
   bNeedSeparator = True
   bNoMainMenu = True
   '---------------------------------------------------------------
   'Next add all the significant conditions followed by a separator
   '---------------------------------------------------------------
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!active = True Then
         If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_2"
            mnu.caption = ""
            bNeedSeparator = False
         End If
         If bNoMainMenu Then
            mnu_active = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_active.name = "popupMenuProgressNotes_Significant"
            mnu_active.caption = "Show all notes for Significant Issues"
            mnu_active.tag = "significant"
            bNoMainMenu = False
         End If
         mnu = New Menu(mnu_active) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next
   bNeedSeparator = True
   bNoMainMenu = True
   '--------------------------------------------------------------
   'Lastly add all the inactive conditions followed by a separator
   '--------------------------------------------------------------
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!active = False And PastHistoryCondition!major = False
         If bNeedSeparator Then
            mnu = New Menu(popupMenuProgressNotes)
            mnu.name = "separator_3"
            mnu.caption = ""
            bNeedSeparator = False
         End If
         If bNoMainMenu Then
            mnu_inactive = New Menu(popupMenuProgressNotes) As "popupMenuProgressNotes"
            mnu_inactive.name = "popupMenuProgressNotes_Significant"
            mnu_inactive.caption = "Show all notes for Inactive Issues"
            mnu_inactive.tag = "inactive"
            bNoMainMenu = False
         End If
         mnu = New Menu(mnu_inactive) As "popupMenuProgressNotes"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next
   
End

Public Sub tbEditMode_Click()
   '---------------------------------------------------------------
   'If user wants to edit the notes in FClincal switch to edit mode
   '---------------------------------------------------------------
   
   If Last.text = "Exit Edit Mode" Then
      Edit_mode_Exit(True)
      Return
   Endif
   If IsNull(Form_NotesEditor) Then Form_NotesEditor = New FEditNotes(Vbox1)
   With Form_NotesEditor
      .Init(currentConsult)
      .Visible = True
   End With
   WebView1.Visible = False
   tbEditMode.text = "Exit Edit Mode"
   With lblWebBrowserNotes
      .Foreground = Color.Red
      .text = "EDIT MODE - Please note - All your actions/alterations will be audited."
      .Visible = True
   End With
   
End

Public Sub zoom_in()
   '-----------------------------------------------------------------------------
   'Don't put this back in tbWebBrowser_click as is called from outside this form
   '-----------------------------------------------------------------------------
   
   WebView1.Zoom = Round(webview1.Zoom * 1.1, -2)
   
End

Public Sub zoom_out()
   '-----------------------------------------------------------------------------
   'Don't put this back in tbWebBrowser_click as is called from outside this form
   '-----------------------------------------------------------------------------
   
   WebView1.Zoom = Round(webview1.Zoom / 1.1, -2)
   
End

Public Sub Preview()
   
   '-------------------------------------------------------------------------------------
   'Creates a single PDF of the html in the webview and loads onto a new tab in Fclinical
   '-------------------------------------------------------------------------------------
   FClinical.Editor_ShowPage_External("pdf document external", "ProgressNotes.pdf", modProgressNotes.ProgressNotes_Add_Page_Header_Create_PDF_File(webview1.html, currentconsult, "ALL PROGRESS NOTES"))
Catch
   Message.Info("An error occurred whilst attempting to preview the pdf of the progress notes.\n\nIf this persists please discuss with your system administrator.")
   
End

Public Sub Print_Content()
   '-------------------------------------------------------------------------------------
   'creates pdf with page header of the progress notes and prints directly with no prompt
   '-------------------------------------------------------------------------------------

   modPrinting.Print_PDF(modProgressNotes.ProgressNotes_Add_Page_Header_Create_PDF_File(webview1.HTML, currentConsult, "ALL PROGRESS NOTES"))
   
Catch
   Message.Info("An error occurred whilst attempting to print the progress notes.\n\nIf this persists please discuss with your system administrator.")
   
End

Public Sub txtFind_Activate()
   '-------------------------------------------------------------------
   'User has hit the <enter>key in the txtfind textbox, initiate search
   '-------------------------------------------------------------------   
   
   Search
   
End

Public Sub FindTextinHTML(SearchDirection As Boolean)
   
   If bMouseClick = True Then
      webview1.HTML = webview1.HTML  'the search function has to start at the beginning after a mouseclick on webview1
      bMouseClick = False
   Endif
   
   If WebView1.FindText(txtFind.Text, SearchDirection, bMatchCAse, True) = False Then 
      btPrevious.Enabled = True 
      btNext.Enabled = True
      txtFind.Background = Color.Lighter(Color.White)   '16711680 = Red
   Else
      btPrevious.Enabled = False
      btNext.Enabled = False
      SearchCount = 0
      txtFind.Background = Color.Lighter(16711680)   '16711680 = Red
   Endif
   
End

Private Sub HighlightAll()
   
   Dim charpos As Integer
   Dim lastpos As Integer
   Dim SplitString As New String[3]
   Dim findtext As String = Trim(txtFind.text)
   Dim count As Integer
   
   Highlighted_text = WebView1.HTML
   bTextFound = False
   If bMatchCAse = False Then
      charpos = InStr(WebView1.HTML, findtext, 1, gb.IgnoreCase)      'current occurrence
      lastpos = RInStr(WebView1.HTML, findtext, Len(WebView1.HTML), gb.IgnoreCase)
      While charpos > 0 And charpos <= lastpos
         If InStr(Highlighted_text, "<", charpos, gb.IgnoreCase) <> 0 And InStr(Highlighted_text, "<", charpos, gb.IgnoreCase) < InStr(Highlighted_text, ">", charpos, gb.IgnoreCase) Then
            SplitString[0] = Mid(Highlighted_text, 1, charpos - 1)
            SplitString[1] = Mid(Highlighted_text, charpos, Len(findtext))
            SplitString[2] = Mid(Highlighted_text, charpos + Len(findtext), Len(Highlighted_text) - charpos + Len(findtext))
            Highlighted_text = SplitString[0] & "<SPAN STYLE='background: #ffff00'>" & SplitString[1] & "</SPAN>" & SplitString[2] 
            charpos = InStr(Highlighted_text, findtext, charpos + 1 + Len("<SPAN STYLE='background: #ffff00'>" & "</SPAN>"), gb.IgnoreCase)
            lastpos = lastpos + Len("<SPAN STYLE='background: #ffff00'>" & "</SPAN>")
            bTextFound = True
            txtFind.Background = Color.Lighter(Color.White)
         Else
            charpos = InStr(Highlighted_text, findtext, charpos + 1, gb.IgnoreCase)
         Endif
      Wend
   Else
      charpos = InStr(original_text, findtext, 1)      'current occurrence
      lastpos = RInStr(original_text, findtext, Len(original_text))
      While charpos > 0 And charpos <= lastpos
         If InStr(Highlighted_text, "<", charpos) <> 0 And InStr(Highlighted_text, "<", charpos) < InStr(Highlighted_text, ">", charpos) Then
            SplitString[0] = Mid(Highlighted_text, 1, charpos - 1)
            SplitString[1] = Mid(Highlighted_text, charpos, Len(findtext))
            SplitString[2] = Mid(Highlighted_text, charpos + Len(findtext), Len(Highlighted_text) - charpos + Len(findtext))
            Highlighted_text = SplitString[0] & "<SPAN STYLE='background: #ffff00'>" & SplitString[1] & "</SPAN>" & SplitString[2] 
            charpos = InStr(Highlighted_text, findtext, charpos + 1 + Len("<SPAN STYLE='background: #ffff00'>" & "</SPAN>"))
            lastpos = lastpos + Len("<SPAN STYLE='background: #ffff00'>" & "</SPAN>")
            bTextFound = True
            txtFind.Background = Color.Lighter(Color.White)
         Else
            charpos = InStr(Highlighted_text, findtext, charpos + 1)
         Endif
      Wend
   Endif
   If bTextFound = False Then 
      txtFind.Background = Color.Lighter(16711680) 
      WebView1.HTML = original_text
   Else
      WebView1.HTML = Highlighted_text
      If SearchCount > 0 Then 
         For Count = 1 To SearchCount
            FindTextinHTML(False)
         Next
      Endif
      If SearchCount < 0 Then 
         For Count = -1 DownTo SearchCount
            FindTextinHTML(True)
         Next
      Endif
   Endif
   
End

Public Sub checkboxes_Click()
   
   Dim count As Integer
   
   Select Case Last.tag
      Case "highlight all"
         bHighlightAll = Last.Value
         If txtFind.Text = "" Then
            Return
         Endif
         If bTextFound = False Then
            original_text = WebView1.HTML
         Else
            webview1.HTML = original_text
         Endif
         If SearchCount = 0 Then SearchCount = 1
         If bHighlightAll = False Then 
            webview1.HTML = original_text
            If SearchCount > 0 Then 
               For Count = 1 To SearchCount
                  FindTextinHTML(False)
               Next
            Endif
            If SearchCount < 0 Then 
               For Count = -1 DownTo SearchCount
                  FindTextinHTML(True)
               Next
            Endif
            Return
         Endif
         HighlightAll
      Case "match case"
         bMatchCase = Last.Value
         If txtFind.Text = "" Then
            Return
         Endif
         SearchCount = 0
         If original_text <> "" Then webview1.HTML = original_text
         If bHighlightAll = True Then 
            SearchCount = 1
            HighlightAll
         Endif
   End Select
   
End

Public Sub WebView1_Menu()
   '-------------------------------------------
   'Over-ride the webview menu and show our own
   '-------------------------------------------   
   
   Stop Event
   popupMenuProgressNotes.popup()
   
End

Public Sub popupMenuProgressNotes_Click()
   
   Select Case Last.tag
      Case "show all notes"
         LblNotesFilter.text = ""
         webview1.html = modProgressNotes.AllProgressNotes_Construct_Html(currentconsult)
      Case Else
         FClinical.Editor_ShowPage_External("Single Health Issue Notes", currentConsult!past_history[Last.tag]!description & " ((PREVIOUS NOTES)", modProgressNotes.ConstructHTML_SingleProblem(currentconsult, Last.tag, const.cSection_PastHistory))
   End Select
   
End

Public Sub tbSavePDF_Click()
   
   Save_PDF
   
End

Public Sub Save()
   
   Save_PDF
   
End

Public Sub Save_PDF()
   '---------------------------------------------------------------------------
   'Save the pdf as a file optionally provider the filename as the patient name
   '---------------------------------------------------------------------------
   
   Dim filename As String
   
   Dialog.Filter = ["*.pdf", "PDF"]
   If Not IsNull(currentconsult) Then
      filename = Replace(Trim(currentconsult!patient!wholename), " ", "-") & "_" & Format(currentconsult!patient!birthdate, "dd-mm-yyyy")
      filename &= "_exported_" & Format(Now, "dd-mm-yyyy") & "-" & "progress_notes"
      Dialog.title = "Export PDF for " & currentconsult!patient!wholename
      Dialog.Path = User.home &/ filename
   Else
      Dialog.title = "Save the PDF"
   Endif
   If Dialog.SaveFile() Then Return    'user cancels save
   If File.Ext(Dialog.Path) <> "pdf" Then
      Dialog.Path &= ".pdf"
   Endif
   
   Filename = modPrinting.Make_PDF_From_Html(webview1.HTML,,,, File.Name(Dialog.Path),, File.Dir(Dialog.Path))
   '  Filename = modProgressNotes.ProgressNotes_Add_Page_Header_Create_PDF_File(webview1.html, currentconsult, "ALL PROGRESS NOTES")
   Filename = modProgressNotes.ProgressNotes_Add_Page_Header_Create_PDF_File(webview1.html, currentconsult, "ALL PROGRESS NOTES", File.Name(Dialog.Path), File.Dir(Dialog.Path))

End

Public Sub btNext_Click()
   
   FindTextinHTML(False)
   SearchPositionCorrection(False)
   
End

Public Sub btPrevious_Click()
   
   FindTextinHTML(True)
   SearchPositionCorrection(True)
   
End

Public Sub Search()
   
   Dim findtext As String = Trim(txtFind.text)
   Dim charpos As Integer
   Dim lastpos As Integer
   
   SearchCount = 0
   webview1.HTML = webview1.HTML
   If bTextFound = False Then 
      original_text = webview1.HTML
   Else
      webview1.HTML = original_text
   Endif
   If txtFind.Text = "" Then
      btPrevious.Enabled = False
      btNext.Enabled = False
      chkHighlightAll.Enabled = False
      Return
   Else
      btPrevious.Enabled = True
      btNext.Enabled = True
      chkHighlightAll.Enabled = True
   Endif
   NumberOfSearchresults = 0
   If bMatchCAse = False Then
      charpos = InStr(webview1.HTML, findtext, 1, gb.IgnoreCase)      'current occurrence
      lastpos = RInStr(WebView1.HTML, findtext, Len(WebView1.HTML), gb.IgnoreCase)
      While charpos > 0 And charpos <= lastpos
         Print charpos
         If InStr(webview1.HTML, "<", charpos, gb.IgnoreCase) <> 0 And InStr(webview1.HTML, "<", charpos, gb.IgnoreCase) < InStr(webview1.HTML, ">", charpos, gb.IgnoreCase) Then
            If InStr(webview1.HTML, "{", charpos, gb.IgnoreCase) <> 0 And InStr(webview1.HTML, "{", charpos, gb.IgnoreCase) < InStr(webview1.HTML, "}", charpos, gb.IgnoreCase) Then
               Inc NumberOfSearchresults
            Endif
         Endif
         charpos = InStr(webview1.HTML, findtext, charpos + 1, gb.IgnoreCase)
      Wend
   Else
      charpos = InStr(webview1.HTML, findtext, 1)      'current occurrence
      lastpos = RInStr(webview1.HTML, findtext, Len(original_text))
      While charpos > 0 And charpos <= lastpos
         If InStr(webview1.HTML, "<", charpos) <> 0 And InStr(webview1.HTML, "<", charpos) < InStr(webview1.HTML, ">", charpos) Then
            Inc NumberOfSearchresults
         Endif
         charpos = InStr(webview1.HTML, findtext, charpos + 1)
      Wend
   Endif
   FindTextinHTML(False)
   SearchPositionCorrection(False)
   If bHighlightAll = True Then HighlightAll()
   
End

Public Sub WebView1_MouseUp()
   
   bMouseClick = True
   
End

Private Sub SearchPositionCorrection(SearchDirection As Boolean)
   
   If SearchDirection = False Then
      If SearchCount = -1 Then  
         SearchCount = 1
      Else
         Inc SearchCount
      Endif
   Else
      If SearchCount = 1 Then
         SearchCount = -1
      Else
         Dec SearchCount
      Endif
   Endif 
   If SearchCount > 0 Then
      If SearchCount > NumberOfSearchresults Then
         SearchCount = SearchCount - NumberOfSearchresults
      Endif 
   Endif
   If SearchCount < 0 Then
      If SearchCount < - (NumberOfSearchresults) Then
         SearchCount = SearchCount + NumberOfSearchresults
      Endif
   Endif
   
End

Public Sub chkIncludeAuditTrail_Click()
   '---------------------------------------------------
   'include all audits in the html the user is viewing
   '---------------------------------------------------

   lblAuditInformation.Visible = Last.value
   webview1.HTML = modProgressNotes.AllProgressNotes_Construct_Html(currentconsult, chkIncludeAuditTrail.value)
   
End
