' Gambas module file

' Copyright (C)2008-2014 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------

Public Function age_onset(PH As Collection) As String
   '------------------------------------------------------------- 
   'returns string representationt the age onset of the condition
   '------------------------------------------------------------- 
   
   Dim age_onset As String
   
   age_onset = Str$(PH!age_onset)
   If PH!age_onset_units = const.Units_year Then
      age_onset &= "yrs"
   Endif
   If PH!age_onset_units = const.Units_month Then
      age_onset &= "months"
   Endif
   Return age_onset
   
End

Public Function ProgressNotes_Add_Page_Header_Create_PDF_File(controls_html As String, currentconsult As CConsult, sHeading As String, Optional sFilename As String = "", Optional sDir As String = "") As String
   
   '------------------------------------------------------------------------------------------------
   'Adds the patient name and page header to the html of the progress notes and returns the filename
   '------------------------------------------------------------------------------------------------ 
   Dim sHtml As String
   
   sHtml = "<HTML><HR>" & modHTML.Patient_Practice_Heading_Simple_HTML(currentconsult)
   sHtml = Replace(sHtml, "%central_heading%", sHeading & "<br><small>Created on:" & Format(currentconsult.GetConsultDate(), "dd/mm/yyyy") & "</small>")
   SHTML &= controls_html & "<html>"
   If sFilename = "" Then 
      Return modPrinting.Make_PDF_From_Html(shtml)
   Else
      Return modPrinting.Make_PDF_From_Html(shtml,,,, sFilename,, sDir)
   End If   
   
End

Public Function ProgressNotes_Codes_Get(fk_progressnote As Integer, Optional deleted As Boolean = False) As Collection
   
   Dim sql As String
   
   sql = "Select * from clin_consult.vwProgressNotesCodes where fk_progressnote =" & fk_progressnote & " AND deleted ="
   If deleted Then
      sql &= "True"
   Else
      sql &= "False"
   Endif
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Immunisation_Summary_Construct_Latex(currentconsult As CConsult) As CTemplate
   '-----------------------------------------------------------------------------------
   'Generates a latext page of the patient's vaccinations
   'used in clerical FPatientSummaries to allow staff to print out immunisation summary
   '-----------------------------------------------------------------------------------
   
   Dim templ As New CTemplate("immunisation-summary", "tex")
   Dim Vaccination As Collection
   Dim x As Integer
   Dim fluvax_year_most_recent As Integer
   Dim fluvax As Collection
   Dim tetanus_year_most_recent As Integer
   Dim tetanus_vax As Collection
   Dim typhoid_year_most_recent As Integer
   Dim typhoid_vax As Collection
   
   templ.Subst_common(currentconsult)
   Templ.Subst("date_printed", Format(Now(), "dd/mm/yyyy"))
   For Each vaccination In currentconsult!vaccinations_given
      Select Case Lower(vaccination!schedule)      'date can be 2007, 04/2007 or 01/04/2007
         Case "influenza"
            x = 0
            If IsDate(vaccination!date_given) Then
               x = Year(Val(vaccination!date_given))
            Else
               If Len(vaccination!date_given) = 4 Then
                  x = Val(vaccination!date_given)
               Endif
               If Len(vaccination!date_given) = 6 Then
                  Try x = Val(Right(vaccination!date_given, 4))
               Endif
            End If
            If x > fluvax_year_most_recent Then
               fluvax_year_most_recent = x
               fluvax = modUtil.Copy_Collection(vaccination)
            Endif
         Case "tetanus - every 10 years", "tetanus diphtheria pertussis", "tetanus diptheria pertussus polio"
            x = 0
            If IsDate(vaccination!date_given) Then
               x = Year(Val(vaccination!date_given))
            Else
               If Len(vaccination!date_given) = 4 Then
                  x = Val(vaccination!date_given)
               Endif
               If Len(vaccination!date_given) = 6 Then
                  Try x = Val(Right(vaccination!date_given, 4))
               Endif
            End If
            If x > tetanus_year_most_recent Then
               tetanus_year_most_recent = x
               tetanus_vax = modUtil.Copy_Collection(vaccination)
            Endif
         Case "typhoid"
            x = 0
            If IsDate(vaccination!date_given) Then
               x = Year(Val(vaccination!date_given))
            Else
               If Len(vaccination!date_given) = 4 Then
                  x = Val(vaccination!date_given)
               Endif
               If Len(vaccination!date_given) = 6 Then
                  Try x = Val(Right(vaccination!date_given, 4))
               Endif
            End If
            If x > typhoid_year_most_recent Then
               typhoid_year_most_recent = x
               typhoid_vax = modUtil.Copy_Collection(vaccination)
            Endif
         Case Else
            If vaccination!not_given = False Then
               templ.Row(vaccination!schedule, vaccination!date_given, vaccination!brand)
            Else
               templ.Row(vaccination!schedule, vaccination!brand, "Not Given " & vaccination!notes)
            End If   
      End Select
   Next
   If Not IsNull(fluvax) Then
      templ.Row(fluvax!schedule, fluvax!date_given, fluvax!brand)
   Endif
   If Not IsNull(tetanus_vax) Then
      templ.Row(tetanus_vax!schedule, tetanus_vax!date_given, tetanus_vax!brand)
   Endif
   If Not IsNull(typhoid_vax) Then
      templ.Row(typhoid_vax!schedule, typhoid_vax!date_given, typhoid_vax!brand)
   Endif
   templ.Table("vaccinations")
   Print templ.GetData()
   Return templ
   
End

Public Function Family_History_Create_Latex(templ As CTemplate, Family_history As Collection) As String 
   '-------------------------------------------------------------------------------------
   'Family History
   '    Construct something like this
   '    Mother (Hilda smith) <<bolded heading
   '    Hypertension onset age 50
   '    Carcinoma Breast onset age 65 (caused death)
   'As in Health Summary or GPMP pass entire family history but in Team Care Arrangements
   'pass only a selection, the collection itself rather than cConsult is passed
   '-------------------------------------------------------------------------------------
   
   Dim sString As String
   Dim last_key As Integer
   Dim FH As Collection 
   
   sstring = ""
   For Each FH In family_history
      If last_key <> FH!fk_member Then
         last_key = FH!fk_member
         sstring &= "\\textbf{" & FH!relationship & " " & FH!name & "}\\\\"
      End If
      sstring &= FH!condition
      If IsNull(FH!age_of_onset) Then
         sstring &= " onset?"
      Else
         sstring &= " onset " & FH!age_of_onset
      Endif
      If FH!cause_of_death = True Then
         sstring &= " (caused death"
         If Not IsNull(FH!age_of_death) Then
            sstring &= "-" & FH!age_of_death & " yrs)"
         Else
            sstring &= ") "
         End If
      End If
      sstring &= "\\\\"
   Next
   Return sstring
   
End

Public Sub Habits_Make_Latex_Rows(templ As CTemplate, currentconsult As CConsult)
   '------------------------------------------------------------------------------------ 
   'Now the basic recreational drugs, the rows created here are passed back in Templ
   'but these row's are added when the table is created later in the calling routine
   '-------------------------------------------------------------------------------------
   
   Dim sData As String
   Dim sAge As String
   Dim item As Collection
   
   For Each item In currentconsult!recreationaldrugs
      ' everyone should have a smoking record although of course users may not put them in
      If item!fk_lu_recreational_drug = const.cRecreational_Drug_Nicotine Then
         sData = ""
         If item!never_used_drug Then
            Templ.Row("smoking", "Never", "")
         Else
            If Not IsNull(item!substance_amount) Then
               sData &= Str(item!substance_amount) & "/day"
            Else
               sData &= "?/day"
            Endif
            
            If Not IsNull(item!age_started) Then
               sAge = "age " & Str(item!age_started) & " to "
            Else
               sAge &= "from age ? to"
            Endif
            If Not IsNull(item!age_last_used) Then
               sAge &= Str(item!age_last_used)
            Else
               sAge &= "?"
            Endif
            Templ.Row("smoking", sData, sAge)
         End If
      End If
      If item!fk_lu_recreational_drug = const.cRecreational_Drug_Alcohol Then
         sData = ""
         If item!never_used_drug = True Then
            Templ.Row("alcohol", "Never", "")
         Else
            If Not IsNull(item!age_last_used) Then
               Templ.Row("alcohol", "Ex-Drinker", "")
            Else                                                                   'will always be a quantity I insisted in the gui
               If Not IsNull(item!substance_amount) Then
                  sData = Str(item!substance_amount) & " gm"
               Else
                  sData = "?gm"
               Endif
               Select Case item!fk_lu_substance_frequency
                  Case const.Units_day
                     sData &= "/day"
                  Case const.Units_month
                     sData &= "/month"
                  Case const.Units_week
                     sData &= "/week"
               End Select
               Templ.Row("alcohol", sData, "")
            Endif
         End If
      End If
   Next
   
End

Public Sub Medications_Make_Latex_Table(templ As CTemplate, currentconsult As CConsult)
   '----------------------------------------------------------------------------------------
   'Construct a Table of the current medications generic/strength/instruction/why prescribed
   'The default (unchangeable at this time) is to print generic names only, not brands
   'whinge to me if you can make a use-case
   '----------------------------------------------------------------------------------------
   
   Dim medication As Collection
   Dim fk_generic_product_keys As New String[]
   Dim sString As String
   
   If currentconsult!medications.count Then  
      For Each medication In currentconsult!medications
         If fk_generic_product_keys.Find(medication!prescribed!fk_medication) = True Then 'true= not found
            fk_generic_product_keys.Add(medication!prescribed!fk_medication, fk_generic_product_keys.count)
            If medication!med!active = True Then 
               If medication!prescribed!print_reason = True Then 
                  Sstring = medication!prescribed_for
               Else
                  sString = ""
               End If   
               templ.Row("\\small{" & medication!generic & "}", "\\small{" & medication!strength & "}", "\\small{" & medication!instruction & "}", "\\small{" & sstring & "}")
            End If   
         End If
      Next
   Else
      templ.Row("No active medications recorded", "", "")
   End If   
   templ.Table("medications")
   
End

Public Sub Allergies_Make_Latex(templ As CTemplate, currentconsult As CConsult)
   '-----------------------------------------------------------------------
   'Construct a table of known allergies, possibilities are
   'Unknown
   'Nil allergies or sensitivities
   'A heading of the table (class etc) + row(s) of allergy/sensitivity data
   '------------------------------------------------------------------------ 
   
   Dim item As Collection
   Dim x As Integer
   
   If Not currentconsult!allergies.count Then  
      templ.Row("Unknown", "", "", "")
   End If   
   x = 0  'counter
   For Each Item In currentconsult!allergies
      If IsNull(item!nil_allergies_sensitivities) And x = 0 Then
         If IsNull(item!allergen) Then  
            templ.Row("\\textbf{\\small Class}", "Generic", "Reaction Type", "Details")
            Inc x
         End If 
      Endif
      If item!nil_allergies_sensitivities = True Then
         templ.Row("No known allergies or sensitivites")
      Else
         If Not IsNull(Item!allergen) Then 'non drug allergy
            templ.Row("Non Drug Allergy:", item!allergen, "", "")
         Else
            templ.Row("ATC Class:" & Item!class_name, item!generic, "Type: " & item!reaction_type, "Details: " & item!details)
         End If   
      End If   
   Next
   templ.Table("allergies")
   
End

Public Sub Measurements_Make_Latex_Rows(templ As CTemplate, currentconsult As CConsult)
   '-----------------------------------------------------------------------
   ' make the LaTex for the latest measurements and habits
   ' Note   M!date = already date formatted in measurement_get_latest query
   '-----------------------------------------------------------------------
   
   Dim height As Collection   'height!measurement and height!date etc
   Dim weight As Collection
   Dim waist As Collection
   Dim hip As Collection
   Dim BMI As Variant
   Dim BP As Collection
   Dim max_ideal_weight As Variant = 0
   Dim min_ideal_weight As Variant = 0
   
   currentconsult.Refresh("measurements")
   
   height = Measurement_Row_Make_Latex(Templ, currentconsult, const.Measurement_Height, "Height")
   weight = Measurement_Row_Make_Latex(Templ, currentconsult, const.Measurement_Weight, "Weight")
   If Not IsNull(weight) And Not IsNull(Height) Then    
      If Not IsNull(weight!data) <> 0 And Not IsNull(Height!data) Then     'null object bug no height collection (andrew bertram)
         BMI = Format((weight!data / (height!data ^ 2)) * 10000, "##.#")
         templ.Row("\\small{BMI}", "\\small{" & BMI & "}", "\\small{" & weight!date & "}") 'height date probably irrelevant"
      End If 
   End If   
   Try max_ideal_weight = 25 * (Height!data / 100) * (Height!data / 100)
   Try min_ideal_weight = 20 * (Height!data / 100) * (Height!data / 100)
   If max_ideal_weight <> 0 And min_ideal_weight <> 0 Then
      templ.Row("\\small{Ideal Weight}", "\\small{" & Format(min_ideal_weight, "##") & "-" & Format(max_ideal_weight, "##") & "kg" & "}", "")
   Else
      templ.Row("\\small{Ideal Weight}", "", "")
   End If  
   If Not IsNull(weight) Then
      If weight!data <> 0 And max_ideal_weight <> 0 Then
         If weight!data > max_ideal_weight Then
            templ.Row("\\small{Overweight}", "\\small{" & Format(weight!data - max_ideal_weight, "##.#") & "kg" & "}", "")
         Else
            templ.Row("\\small{Overweight}", "", "")
         End If   
      Else
         templ.Row("\\small{Overweight}", "", "")
      End If
   End If
   BP = Measurement_Row_Make_Latex(Templ, currentconsult, const.Measurement_BP, "BP")
   Measurement_Loinc_Make_Latex_Row(templ, currentconsult, const.Loinc_EGFR, "eGFR", True) 'display row for this even if no value found
   Measurement_Loinc_Make_Latex_Row(templ, currentconsult, const.Loinc_HBA1c, "Hba1c")
   '
   ' 'get latest waist circumference
   ' m = modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Waist)
   ' If Not IsNull(m) Then
   '    waist = CFloat(m!data)
   '    templ.Subst("waisthip_date", m!date)
   ' Else
   '    waist = 0.0
   ' Endif
   ' 'get latest hip circumference
   ' m = modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Hip)
   ' If Not IsNull(m) Then
   '    hip = CFloat(m!data)
   ' Else
   '    hip = 0.0
   ' Endif
   ' 'calculate and display waist/hip ratio if measurements available
   ' If (waist > 0.0 And hip > 0.0) Then
   '    templ.Subst("waisthip_data", Format(waist / hip, "##.##"))
   ' Else
   '    templ.Subst("waisthip_data", "N/A") 
   ' Endif
   ' templ.Subst("exercise_date", "")   'FIXME - no module to put this in yet
   ' templ.Subst("alcohol_date", "")  'FIXME - no module to put this in yet
   ' templ.Subst("smoking_date", "")   'FIXME - no module to put this in yet
   ' templ.Subst("waisthip_date", "")   'FIXME - no module to put this in yet"
   
   templ.Table("habits-measurements")
   
End

Public Sub Measurement_Loinc_Make_Latex_Row(templ As CTemplate, currentconsult As CConsult, loinc_code As String, sLoinc As String, Optional bShowIfDoesNotExist As Boolean = False)
   '-----------------------------------------------------------------------------
   'Make up a Latex row for either GPMP or TCA with a particular Loinc Code
   'if bShowIfDoesNotExist is true it will insert a row and leave the value empty
   '-----------------------------------------------------------------------------
   
   Dim R As Result
   Dim sRange As String
   Dim sObservation_Date As String
   
   r = modMeasurementsDBI.Get_Loinc_Value(currentconsult!patient!fk_patient, loinc_code, 1, "DESC") 'Last R by date
   If r.count Then
      sRange = r!reference_range
      sRange = Replace(sRange, "(", "")
      sRange = Replace(sRange, ")", "")
      Try sObservation_Date = Format(r!observation_date, "dd/mm/yyyy")
      If Error Then
         sObservation_Date = "?date"
      Endif
      templ.Row("\\small{" & sLoinc & "}", "\\small{" & r!value_numeric & " (" & sRange & ")" & "}", sObservation_Date)
   Else
      If bShowIfDoesNotExist Then templ.Row("\\small" & sLoinc & "}", "", "")
   End If
   
End

Public Sub Measurement_Row_Make_Latex(templ As CTemplate, currentconsult As CConsult, const_measurement As Integer, sRowName As String) As Collection 
   '-----------------------------------------------------------------------------
   'creates a latex row and returns collection  = value of the measurement + date
   'this is for non-loic measurements
   '-----------------------------------------------------------------------------
   
   Dim sDate As String
   Dim sMeasurement As String
   Dim m As Collection 
   Dim value As Variant
   Dim sQualifier As String
   Dim BMI As Variant
   
   m = modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const_measurement)
   If Not IsNull(m) Then
      value = m!data
      sMeasurement = m!data 
      Select Case const_measurement
         Case const.Measurement_BP
            sQualifier = "mmHg"
         Case const.Measurement_Waist, const.Measurement_Hip, const.Measurement_Height
            sQualifier = "cm"
      End Select
      sDate = m!date
   Else
      sMeasurement = "-"
      sDate = "-"
   Endif
   templ.Row("\\small{" & sRowName & "}", "\\small{" & sMeasurement & sQualifier & "}", "\\small{" & sDate & "}")
   Return m
   
End

Public Function Health_Summary_Construct_Latex_to_11sept14(currentconsult As Cconsult, Optional GPMPTCA As Variant = Null, Optional selected_team_care_members As Collection = Null) As CTemplate
   '-----------------------------------------------------------------------------------------
   'Generate latex for either general health summary, care plan or team care arrangements
   'If Team Care Arrangements then separate list of those providers phone numbers is included
   'The health issues are displayed in either single column across the page or multi-cols (2)
   'according to user preference set in FStaffPreferencesUser
   'GPMPTCA is variant because can be cRow or a collection, depending on where used
   'FGPMPTCA GPMP_Save() = cRow, internally in FGPMPTCA it is a collection  
   '-----------------------------------------------------------------------------------------  
   
   Dim sString As String
   Dim sString1 As String
   Dim sstring2 As String
   Dim templ As CTemplate
   Dim item As Collection
   Dim r As Result
   Dim sLastOccupation As String
   Dim Last_Key As Integer
   Dim sLaterality As String
   Dim PH As Collection
   Dim Medication As Collection
   Dim vaccination As Collection
   Dim recall As Collection
   Dim fluvax_year_most_recent As Integer
   Dim fluvax As Collection
   Dim tetanus_year_most_recent As Integer
   Dim tetanus_vax As Collection
   Dim typhoid_year_most_recent As Integer
   Dim typhoid_vax As Collection
   Dim sLaVarientstOccupation As String
   Dim x As Integer
   Dim sSocialHistory As String
   Dim TCM As Collection
   Dim bHaveProviders As Boolean
   Dim comm As Collection
   Dim comms As Collection
   Dim selected_TCM As Collection 
   Dim bSkipProvider As Boolean
   Dim usual_doctor As Collection
   Dim sMsg As String
   Dim provider As Collection
   Dim bMultiColumnGPMP As Boolean 
   Dim bProvidersHaveHeadings As Boolean = modAdminDBI.Config_Get_Staff_Member("health-summaries-providers-have-headings", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff)
   
   'If patient's usual doctor <> the current user, then get the doctor or warn if absent
   If Not IsNull(currentconsult!patient!fk_doctor) Then
      usual_doctor = modAdminDBI.Preferred_Doctor_Get(currentconsult!patient!fk_doctor)
   Else
      modPatientWarnings.Usual_Doctor_InForm_Missing(currentconsult)  'warn if missing, give them change to add
   Endif
   currentconsult.Refresh("family_history")
   currentconsult.Refresh("social_history")
   currentconsult.Refresh("past_history")
   currentconsult.Refresh("occupational_history")
   currentconsult.Refresh("recalls_logged")
   currentconsult.Refresh("recreationaldrugs")
   currentconsult.Refresh("allergies")
   currentconsult.Refresh("measurements")
   currentconsult.Refresh("vaccinations_given")
   
   If IsNull(selected_team_care_members) Then selected_team_care_members = New Collection 
   
   If Not IsNull(GPMPTCA) Then
      bMultiColumnGPMP = modAdminDBI.Config_Get_Staff_Member("multi-column-gpmp", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff)
      If bMultiColumnGPMP Then 
         templ = New CTemplate("gp-management-plan-multi-cols", "tex")
      Else
         templ = New CTemplate("gp-management-plan-no-cols", "tex")
      End If   
      sString = "GP MANAGEMENT PLAN"                                    'default heading
      If GPMPTCA!item_number = 732 Then                                'unless a review
         If modUtil.IsSameDay(currentconsult.getConsultDate(), GPMPTCA!date_claimed) Then        'claimed today
            sstring = "GP MANAGEMENT PLAN REVIEW"
         Endif
      End If   
      If Not IsNull(usual_doctor) Then
         sString &= "\\\\Usual GP: " & usual_doctor!title & " " & usual_doctor!wholename & "\\\\"
      Else
         sString &= "\\\\Usual GP: " & modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename & "\\\\"
      End If   
      sSTring &= "Date updated: " & Format(currentconsult.getConsultDate(), "dd/mm/yyyy") & "\\\\"
      If Not IsNull(GPMPTCA!date_claimed) Then
         sString &= "Date last claimed:" & Format(GPMPTCA!date_claimed, "dd/mm/yyyy") & "\\\\"
         sString &= "Due for review on:" & Format(GPMPTCA!review_date, "dd/mm/yyyy") & "\\\\"
      Else
         sString &= "Date last claimed:<unclaimed>\\\\"
         sString &= "Due for review on:<unclaimed\\\\"
      End If   
      templ.Subst("documenttype", sstring)
      If Not IsNull(GPMPTCA!copy_offered_to_patient) Then 
         If GPMPTCA!copy_offered_to_patient = True Then 
            templ.Checkbox("copy-offered-to-patient", True)
         Else
            templ.Checkbox("copy-offered-to-patient", False)
         End If  
      Else
         templ.Checkbox("copy-offered-to-patient", False)
      Endif
      If Not IsNull(GPMPTCA!patient_has_carer) Then
         If GPMPTCA!patient_has_carer = True Then  
            templ.Checkbox("patient-has-carer-checkbox", True)
         Else
            templ.Checkbox("patient-has-carer-checkbox", False)
         End If 
      Else
         templ.Checkbox("patient-has-carer-checkbox", False)
      End If 
      If Not IsNull(GPMPTCA!copy_offered_to_carer) Then
         If GPMPTCA!copy_offered_to_carer = True
            templ.Checkbox("copy-given-to-carer-checkbox", True)
         Else
            templ.Checkbox("copy-given-to-carer-checkbox", False)
         End If   
      Else
         templ.Checkbox("copy-given-to-carer-checkbox", False)
      End If   
   Else
      If modAdminDBI.Config_Get_Staff_Member("multi-column-health-summary", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff) Then
         templ = New CTemplate("health-summary-multi-cols", "tex")
      Else 
         templ = New CTemplate("health-summary-no-cols", "tex")
      End If   
      If Not IsNull(usual_doctor) Then
         Templ.Subst("documenttype", "PATIENT HEALTH SUMMARY\\\\" & "\\\\Usual GP: " & usual_doctor!title & " " & usual_doctor!wholename & "\\\\")
      Else
         Templ.Subst("documenttype", "PATIENT HEALTH SUMMARY\\\\" & "\\\\Usual GP: <unknown>\\\\")
      End If
   Endif
   templ.Subst_common(currentconsult)
   Templ.Subst("date_printed", Format(currentconsult.getConsultDate(), "dd/mm/yyyy"))
   Allergies_Make_Latex(templ, currentconsult) 'will be 'unknown' or 'Nil' or the details
   For Each item In currentconsult!social_history
      sSocialHistory = item!history
      If Not IsNull(item!history_confidential) Then
         sSocialHistory &= " Confidential parts of this history have been omitted."
      Endif
      templ.Subst("socialhistory", sSocialHistory)
      If Not IsNull(item!fk_responsible_person) Then
         sString = item!person_responsible_title & " " & item!person_responsible_firstname & " " & item!person_responsible_surname
      Else
         sString = item!responsible_person
         If Not IsNull(item!responsible_person_street1) Then
            sSTring &= "\\\\" & item!responsible_person_street1
         Endif
         If Not IsNull(item!responsible_person_town) Then
            sSTring &= "\\\\" & item!responsible_person_town & " " & item!responsible_person_postcode
         Endif
      End If
      sString &= "\\\\Phone:" & item!responsible_person_contacts
      templ.Subst("responsibleperson", Trim(sString))
   Next
   Templ.Subst("responsibleperson", "")
   Templ.Subst("socialhistory", "")
   '----------------------------------
   'Construct the occupational history
   '----------------------------------
   sstring = ""
   For Each item In currentconsult!occupational_history
      sString = ""
      If Not IsNull(item!from_age) Then   
         sString = "age " & item!from_age 
         If Not IsNull(item!to_age) Then
            sstring &= "-" & item!to_age
         Endif
      Endif
      If sLastOccupation <> item!occupation Then
         sstring1 = item!occupation
         templ.Row(sString1, sString, item!exposure)
         sLastOccupation = item!occupation
      Else
         templ.Row("", item!from_age & " to " & item!to_age, item!exposure)
         templ.Row("", sString, item!exposure)
      End If
   Next
   If currentconsult!patient!retired = True Then
      templ.Row("(Retired)", "", "")
   Endif
   templ.Table("occupationalhistory")
   '----------------
   'the risk factors
   '----------------
   sstring = ""
   For Each PH In currentconsult!past_history
      If PH!risk_factor = True And PH!confidential = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "\\item[\\footnotesize " & PH!year_onset & "]"
         sstring &= "{\\textbf{\\footnotesize " & UCase(PH!description) & " " & sLaterality & " " & age_onset(PH) & "}\\\\"
         If Not IsNull(PH!aim_of_plan) Then
            If Not IsNull(PH!condition_summary) Then    
               sstring &= "\\textbf{" & "Relevant History: " & "}" & PH!condition_summary & "." & "\\\\"
            End If   
            sstring &= "\\textbf{" & "Goals of Care         : " & "}" & PH!aim_of_plan & ". \\\\" 
            If Not IsNull(PH!health_need) Then  
               sstring &= "\\textbf{" & "Needs to address: " & "}" & PH!health_need & ". \\\\"
            End If 
            '----------------------------------------------------------------------- 
            'Does user want a format with individual headings for the contributers?
            '------------------------------------------------------------------------
            If bProvidersHaveHeadings Then 
               sstring &= "\\textbf{Plan: }\\\\"    
               If Not IsNull(ph!plan_contribution_gp) Then
                  sstring &= "\\textbf{GP} will " & ph!plan_contribution_gp & "\\\\ "
               Endif
               If Not IsNull(PH!plan_contribution_patient) Then
                  sstring &= "\\textbf{Patient} will " & PH!plan_contribution_patient & "\\\\ "
               Endif
               If Not IsNull(Ph!plan_contribution_others) Then
                  For Each provider In PH!providersofcare
                     sstring &= "\\textbf{" & provider!wholename & "} [" & modStrings.Capitalise_Words_In_String(provider!occupation) & "] will " & provider!contribution_to_plan & ".\\\\"
                  Next    
               End If
            Else
               '-------------------------------------------------------------
               'No - just put all the plan members details into one paragraph
               '-------------------------------------------------------------
               sstring &= "\\textbf{Plan: }"    
               If Not IsNull(ph!plan_contribution_gp) Then
                  sstring &= "GP will " & ph!plan_contribution_gp & ". "
               Endif
               If Not IsNull(PH!plan_contribution_patient) Then
                  sstring &= "Patient will " & PH!plan_contribution_patient & ". "
               Endif
               If Not IsNull(Ph!plan_contribution_others) Then
                  sstring &= Ph!plan_contribution_others & "."
               End If
            End If 
         Else
            sstring &= "\\text{"
            If Not IsNull(PH!condition_summary) Then 
               sstring &= PH!condition_summary & ". "
            Endif
            If Not IsNull(Ph!management_summary) Then
               sSTring &= PH!management_summary & "."
            End If
            sString &= "}"
         End If 
      Endif
   Next
   templ.Subst("riskfactors", sstring) 
   Last_Key = 0
   templ.Subst("family-history", Family_History_Create_Latex(templ, currentconsult!family_history))
   '-----------------------------------------------------------------
   'create rows for habits and measurements then  call the make table
   '-----------------------------------------------------------------
   Habits_Make_Latex_Rows(templ, currentconsult)
   Measurements_Make_Latex_Rows(templ, currentConsult)
   templ.Table("habits-measurements")
   templ.Subst("exercise_data", "N/A")   'FIXME - no module to put this in yet
   templ.Subst("alcohol_data", "")
   '------------------------------
   'Now do the major health issues
   '------------------------------
   sstring = ""
   For Each PH In currentconsult!past_history
      If PH!major = True And PH!risk_factor = False And PH!confidential = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "\\item[\\footnotesize " & PH!year_onset & "]"
         sstring &= "{\\textbf{\\footnotesize " & UCase(PH!description) & " " & sLaterality & " " & age_onset(PH) & "}\\\\"
         ' If the user Is Using this as a management plan, must have aims, goals And management
         If Not IsNull(PH!aim_of_plan) Then
            If Not IsNull(PH!condition_summary) Then    
               sstring &= "\\textbf{" & "Relevant History: " & "}" & PH!condition_summary & "." & "\\\\"
            End If  
            sstring &= "\\textbf{" & "Goals of Care               : " & "}" & PH!aim_of_plan & ". \\\\" 
            If Not IsNull(PH!health_need) Then  
               sstring &= "\\textbf{" & "Needs to address: " & "}" & PH!health_need & ". \\\\"
            End If   
            '----------------------------------------------------------------------- 
            'Does user want a format with individual headings for the contributers?
            '------------------------------------------------------------------------
            If bProvidersHaveHeadings Then 
               sstring &= "\\textbf{Plan: }\\\\"    
               If Not IsNull(ph!plan_contribution_gp) Then
                  sstring &= "\\textbf{GP} will " & ph!plan_contribution_gp & "\\\\ "
               Endif
               If Not IsNull(PH!plan_contribution_patient) Then
                  sstring &= "\\textbf{Patient} will " & PH!plan_contribution_patient & "\\\\ "
               Endif
               If Not IsNull(Ph!plan_contribution_others) Then
                  For Each provider In PH!providersofcare
                     sstring &= "\\textbf{" & provider!wholename & "} [" & modStrings.Capitalise_Words_In_String(provider!occupation) & "] will " & provider!contribution_to_plan & ".\\\\"
                  Next    
               End If
            Else
               '-------------------------------------------------------------
               'No - just put all the plan members details into one paragraph
               '-------------------------------------------------------------
               sstring &= "\\textbf{Plan: }"    
               If Not IsNull(ph!plan_contribution_gp) Then
                  sstring &= "GP will " & ph!plan_contribution_gp & ". "
               Endif
               If Not IsNull(PH!plan_contribution_patient) Then
                  sstring &= "Patient will " & PH!plan_contribution_patient & ". "
               Endif
               If Not IsNull(Ph!plan_contribution_others) Then
                  sstring &= Ph!plan_contribution_others & "."
               End If
            End If 
         Else
            sstring &= "\\text{"
            If Not IsNull(PH!condition_summary) Then 
               sstring &= PH!condition_summary & ". "
            Endif
            If Not IsNull(Ph!management_summary) Then
               sSTring &= PH!management_summary & "."
            End If
            sString &= "}"
         End If 
         
      Endif
   Next
   templ.Subst("majorhealthissues", sstring)
   '---------------------------------
   'Now the significant health issues
   '---------------------------------
   sstring = ""
   For Each PH In currentconsult!past_history 
      If PH!active = True And PH!risk_factor = False And PH!major = False And PH!confidential = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "\\item[\\footnotesize " & PH!year_onset & "]"
         sstring &= "\\textbf{\\footnotesize " & UCase(PH!description) & " " & sLaterality & " " & age_onset(PH) & "}\\\\"
         'If the user is using this as a management plan, must have aims, goals and management
         If Not IsNull(PH!aim_of_plan) Then
            If Not IsNull(PH!condition_summary) Then    
               sstring &= "\\textbf{" & "Relevant History: " & "}" & PH!condition_summary & "." & "\\\\"
            End If  
            sstring &= "\\textbf{" & "Goals of Care                : " & "}" & PH!aim_of_plan & ". \\\\" 
            If Not IsNull(PH!health_need) Then  
               sstring &= "\\textbf{" & "Needs to address: " & "}" & PH!health_need & ". \\\\"
            End If  
            If bProvidersHaveHeadings Then  
               sstring &= "\\textbf{Plan: }\\\\"    
               If Not IsNull(ph!plan_contribution_gp) Then
                  sstring &= "\\textbf{GP} will " & ph!plan_contribution_gp & "\\\\ "
               Endif
               If Not IsNull(PH!plan_contribution_patient) Then
                  sstring &= "\\textbf{Patient} will " & PH!plan_contribution_patient & "\\\\ "
               Endif
               If Not IsNull(Ph!plan_contribution_others) Then
                  For Each provider In PH!providersofcare
                     sstring &= "\\textbf{" & provider!wholename & "} [" & modStrings.Capitalise_Words_In_String(provider!occupation) & "] will " & provider!contribution_to_plan & ".\\\\"
                  Next    
               End If  
            Else
               '--------------------------------------------------
               'This is the plan without headings for contributers
               '--------------------------------------------------
               sstring &= "\\textbf{Plan: }"    
               If Not IsNull(ph!plan_contribution_gp) Then
                  sstring &= "GP will " & ph!plan_contribution_gp & ". "
               Endif
               If Not IsNull(PH!plan_contribution_patient) Then
                  sstring &= "Patient will " & PH!plan_contribution_patient & ". "
               Endif
               If Not IsNull(Ph!plan_contribution_others) Then
                  sstring &= Ph!plan_contribution_others & "."
               End If
            End If   
         Else
            sstring &= "\\text{"
            If Not IsNull(PH!condition_summary) Then 
               sstring &= PH!condition_summary & ". "
            Endif
            If Not IsNull(Ph!management_summary) Then
               sSTring &= PH!management_summary & "."
            End If
            sString &= "}"
         End If
      Endif
   Next
   templ.Subst("significanthealthissues", sstring)
   Medications_Make_Latex_Table(templ, currentConsult)  'generic/strength/instruction/why prescribed
   '---------------------------------------------------------------------------------------------
   'Construct a Table of the vaccinations bit complicated because I allowed the date given to be
   'text eg 2009, maybe should go back and fix this, hence they are not in sort order by date
   '---------------------------------------------------------------------------------------------
   templ.Row("\\textbf{\\footnotesize IMMUNIZATIONS}", "", "")
   For Each vaccination In currentconsult!vaccinations_given
      Select Case Lower(vaccination!schedule)      'date can be 2007, 04/2007 or 01/04/2007
         Case "influenza"
            x = 0
            If IsDate(vaccination!date_given) Then
               x = Year(Val(vaccination!date_given))
            Else
               If Len(vaccination!date_given) = 4 Then
                  x = Val(vaccination!date_given)
               Endif
               If Len(vaccination!date_given) = 6 Then
                  Try x = Val(Right(vaccination!date_given, 4))
               Endif
            End If
            If x > fluvax_year_most_recent Then
               fluvax_year_most_recent = x
               fluvax = modUtil.Copy_Collection(vaccination)
            Endif
         Case "tetanus - every 10 years", "tetanus diphtheria pertussis", "tetanus diptheria pertussus polio"
            x = 0
            If IsDate(vaccination!date_given) Then
               x = Year(Val(vaccination!date_given))
            Else
               If Len(vaccination!date_given) = 4 Then
                  x = Val(vaccination!date_given)
               Endif
               If Len(vaccination!date_given) = 6 Then
                  Try x = Val(Right(vaccination!date_given, 4))
               Endif
            End If
            If x > tetanus_year_most_recent Then
               tetanus_year_most_recent = x
               tetanus_vax = modUtil.Copy_Collection(vaccination)
            Endif
         Case "typhoid"
            x = 0
            If IsDate(vaccination!date_given) Then
               x = Year(Val(vaccination!date_given))
            Else
               If Len(vaccination!date_given) = 4 Then
                  x = Val(vaccination!date_given)
               Endif
               If Len(vaccination!date_given) = 6 Then
                  Try x = Val(Right(vaccination!date_given, 4))
               Endif
            End If
            If x > typhoid_year_most_recent Then
               typhoid_year_most_recent = x
               typhoid_vax = modUtil.Copy_Collection(vaccination)
            Endif
         Case Else
            If vaccination!not_given = False Then 
               templ.Row(vaccination!schedule, vaccination!date_given, vaccination!brand)
            Else
               templ.Row(vaccination!schedule, vaccination!brand, "Not Given " & vaccination!notes)
            End If
      End Select
   Next
   If Not IsNull(fluvax) Then
      templ.Row(fluvax!schedule, fluvax!date_given, fluvax!brand)
   Endif
   If Not IsNull(tetanus_vax) Then
      templ.Row(tetanus_vax!schedule, tetanus_vax!date_given, tetanus_vax!brand)
   Endif
   If Not IsNull(typhoid_vax) Then
      templ.Row(typhoid_vax!schedule, typhoid_vax!date_given, typhoid_vax!brand)
   Endif
   templ.Table("vaccinations")
   templ.Row("\\textbf{\\footnotesize RECALLS}", "")
   For Each recall In currentconsult!recalls_logged
      templ.Row(Format(recall!due, "dd/mm/yyyy"), recall!reason)
   Next
   templ.Table("recalls")
   'Now the inactive health issues
   sstring = ""
   For Each PH In currentconsult!past_history
      If PH!active = False And PH!major = False And PH!risk_factor = False And PH!confidential = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "\\item[\\footnotesize " & PH!year_onset & "]"
         sstring &= "\\textbf{\\footnotesize " & UCase(PH!description) & " " & sLaterality & " " & age_onset(PH) & "}\\\\"
         ' sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
         sstring &= "\\text{" 
         If Not IsNull(PH!condition_summary) Then
            sstring &= PH!condition_summary & ". "
         End If   
         If Not IsNull(PH!management_summary) Then
            sstring &= PH!management_summary & ". "
         End If  
         sstring &= "}"
      Endif
   Next
   templ.Subst("inactivehealthissues", sstring)
   '---------------------------------------------------------------------------------------------------------------
   'First, if this LaTex is being used as a Team Care Arrangement - put separate list of Team Care Members Contacts
   '---------------------------------------------------------------------------------------------------------------
   Print selected_team_care_members
   For Each TCM In selected_team_care_members  
      sstring2 = ""
      If Not IsNull(TCM!organisation) Then
         sstring2 = TCM!organisation
         If TCM!branch <> "HEAD OFFICE" Then
            sstring2 &= "\\\\" & TCM!branch 
         Endif
         sstring2 &= "\\\\"
      Endif
      sstring2 &= Trim(TCM!street1 & "\\\\ " & TCM!street2) & "\\\\" & TCM!town & " " & TCM!postcode
      ' templ.Row(modStrings.Capitalise_Words_In_String(TCM!wholename), sstring2)  'create a row in the table
      templ.Row(modStrings.Capitalise_Words_In_String(TCM!wholename), modStrings.Capitalise_Words_In_String(TCM!occupation), sstring2)  'create a row in the table
      
      If TCM!fk_branch Then
         comms = modContactsDBI.Branch_Comms_Get(TCM!fk_branch)      'or branch
      Else 
         If TCM!fk_person Then                                             'get comms for person
            comms = modContactsDBI.person_comms_get(TCM!fk_person)
         End If   
      Endif
      For Each comm In comms                                            'and put them in the table
         templ.Row("", "", comm!type & " " & comm!value)
      Next
   Next
   If selected_team_care_members.count Then
      templ.Subst("tca_provider_contacts_heading", "\\textbf{TEAM CARE PROVIDERS CONTACT LIST}\\\\")
      templ.Table("tca_provider_contact_list")
   Else
      templ.Subst("tca_provider_contacts_heading", "")
      templ.Subst("tca_provider_contact_list", "")
   End If   
   '----------------------------------------------------------------------------
   'lastly if there are team care members/providers put in their contact details
   'excluding those in the previous list if team care arrangements in place
   'fixme also used in FGPMPlan with the TCA stuff
   '----------------------------------------------------------------------------
   sstring1 = ""
   For Each PH In currentconsult!past_history                                        'Loop through all health issue items               
      If Not IsNull(PH!providersofcare) Then                                         'If the health issue has team care member(s)
         Print PH!providersofcare
         For Each TCM In PH!providersofcare                                          'for each of the team members for this particular health issue
            bSkipProvider = False                                                    
            For Each selected_TCM In selected_team_care_members                      'check its not one we want to print under the team care members contact ist                 '
               If TCM!fk_provider_of_care = selected_TCM!fk_provider_of_care Then    'Yes?
                  bSkipProvider = True                                               'then skip this, don't put on the general providers list
                  Break
               Endif
            Next
            If Not bSkipProvider Then                                               'not part of the team care listing
               If Not InStr(sString1, TCM!wholename) Then                           'check not duplicated in another health issue
                  bHaveProviders = True                                             'flag will tell us to print an 'other's provider list'
                  sstring2 = ""
                  If Not IsNull(TCM!organisation) Then
                     sstring2 = TCM!organisation
                     If TCM!branch <> "HEAD OFFICE" Then
                        sstring2 &= "\\\\" & TCM!branch 
                     Endif
                     sstring2 &= "\\\\"
                  Endif
                  sstring2 &= Trim(TCM!street1 & "\\\\ " & TCM!street2) & "\\\\" & TCM!town & " " & TCM!postcode
                  templ.Row(modStrings.Capitalise_Words_In_String(TCM!wholename), modStrings.Capitalise_Words_In_String(TCM!occupation), sstring2)  'create a row in the table
                  ' templ.Row(modStrings.Capitalise_Words_In_String(TCM!wholename), sstring2)  'create a row in the table
                  If TCM!fk_branch Then
                     comms = modContactsDBI.Branch_Comms_Get(TCM!fk_branch)      'or branch
                  Else 
                     If TCM!fk_person Then                                             'get comms for person
                        comms = modContactsDBI.person_comms_get(TCM!fk_person)
                     End If   
                  Endif
                  For Each comm In comms                                            'and put them in the table
                     templ.Row("", "", comm!type & " " & comm!value)
                  Next
                  sstring1 &= TCM!wholename & " "                                  'keep provider name so we can check it's not used again
               End If  
            End If
            '  templ.Row("", "", "") 
         Next
      Endif
   Next 
   If bHaveProviders Then 
      If selected_team_care_members.count Then     
         templ.Subst("health_provider_contact_list_heading", "\\textbf{OTHER HEALTH PROVIDERS CONTACT LIST}\\\\")
      Else
         templ.Subst("health_provider_contact_list_heading", "\\textbf{HEALTH PROVIDERS CONTACT LIST}\\\\")
      End If
      templ.Table("health_provider_contact_list")
   Else
      templ.Subst("health_provider_contact_list_heading", "")
      templ.Subst("health_provider_contact_list", "")
   End If   
   Print templ.GetData()
   Return templ
   
End

Public Function Health_Summary_Construct_Latex(currentconsult As Cconsult, Optional GPMPTCA As Variant = Null, Optional selected_team_care_members As Collection = Null) As CTemplate
   '-----------------------------------------------------------------------------------------
   'Generate latex for either general health summary, care plan or team care arrangements
   'If Team Care Arrangements then separate list of those providers phone numbers is included
   'The health issues are displayed in either single column across the page or multi-cols (2)
   'according to user preference set in FStaffPreferencesUser
   'GPMPTCA is variant because can be cRow or a collection, depending on where used
   'FGPMPTCA GPMP_Save() = cRow, internally in FGPMPTCA it is a collection  
   '-----------------------------------------------------------------------------------------  
   
   Dim sString As String
   Dim sString1 As String
   Dim sstring2 As String
   Dim templ As CTemplate
   Dim item As Collection
   Dim r As Result
   Dim sLastOccupation As String
   Dim Last_Key As Integer
   Dim sLaterality As String
   Dim PH As Collection
   Dim Medication As Collection
   Dim vaccination As Collection
   Dim recall As Collection
   Dim fluvax_year_most_recent As Integer
   Dim fluvax As Collection
   Dim tetanus_year_most_recent As Integer
   Dim tetanus_vax As Collection
   Dim typhoid_year_most_recent As Integer
   Dim typhoid_vax As Collection
   Dim sLaVarientstOccupation As String
   Dim x As Integer
   Dim sSocialHistory As String
   Dim TCM As Collection
   Dim bHaveProviders As Boolean
   Dim comm As Collection
   Dim comms As Collection
   Dim selected_TCM As Collection 
   Dim bSkipProvider As Boolean
   Dim usual_doctor As Collection
   Dim sMsg As String
   Dim provider As Collection
   Dim bMultiColumnGPMP As Boolean 
   Dim bProvidersHaveHeadings As Boolean = modAdminDBI.Config_Get_Staff_Member("health-summaries-providers-have-headings", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff)
   
   'If patient's usual doctor <> the current user, then get the doctor or warn if absent
   If Not IsNull(currentconsult!patient!fk_doctor) Then
      usual_doctor = modAdminDBI.Preferred_Doctor_Get(currentconsult!patient!fk_doctor)
   Else
      modPatientWarnings.Usual_Doctor_InForm_Missing(currentconsult)  'warn if missing, give them change to add
   Endif
   currentconsult.Refresh("family_history")
   currentconsult.Refresh("social_history")
   currentconsult.Refresh("past_history")
   currentconsult.Refresh("occupational_history")
   currentconsult.Refresh("recalls_logged")
   currentconsult.Refresh("recreationaldrugs")
   currentconsult.Refresh("allergies")
   currentconsult.Refresh("measurements")
   currentconsult.Refresh("vaccinations_given")
   
   If IsNull(selected_team_care_members) Then selected_team_care_members = New Collection 
   
   If Not IsNull(GPMPTCA) Then
      bMultiColumnGPMP = modAdminDBI.Config_Get_Staff_Member("multi-column-gpmp", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff)
      If bMultiColumnGPMP Then 
         Try templ = New CTemplate("gp-management-plan-multi-cols", "tex")
         If Error Then 
             modUtilGUI.Template_Missing("gp-management-plan-multi-cols")
             Return
         End If   
      Else
         Try templ = New CTemplate("gp-management-plan-no-cols", "tex")
         If Error Then
            modUtilGUI.Template_Missing("gp-management-plan-no-cols")
            Return
         Endif
      End If   
      sString = "GP MANAGEMENT PLAN"                                    'default heading
      If GPMPTCA!item_number = 732 Then                                'unless a review
         If modUtil.IsSameDay(currentconsult.getConsultDate(), GPMPTCA!date_claimed) Then        'claimed today
            sstring = "GP MANAGEMENT PLAN REVIEW"
         Endif
      End If   
      If Not IsNull(usual_doctor) Then
         sString &= "\\\\Usual GP: " & usual_doctor!title & " " & usual_doctor!wholename & "\\\\"
      Else
         sString &= "\\\\Usual GP: " & modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename & "\\\\"
      End If   
      sSTring &= "Date updated: " & Format(currentconsult.getConsultDate(), "dd/mm/yyyy") & "\\\\"
      If Not IsNull(GPMPTCA!date_claimed) Then
         sString &= "Date last claimed:" & Format(GPMPTCA!date_claimed, "dd/mm/yyyy") & "\\\\"
         sString &= "Due for review on:" & Format(GPMPTCA!review_date, "dd/mm/yyyy") & "\\\\"
      Else
         sString &= "Date last claimed:<unclaimed>\\\\"
         sString &= "Due for review on:<unclaimed\\\\"
      End If   
      templ.Subst("documenttype", sstring)
      If Not IsNull(GPMPTCA!copy_offered_to_patient) Then 
         If GPMPTCA!copy_offered_to_patient = True Then 
            templ.Checkbox("copy-offered-to-patient", True)
         Else
            templ.Checkbox("copy-offered-to-patient", False)
         End If  
      Else
         templ.Checkbox("copy-offered-to-patient", False)
      Endif
      If Not IsNull(GPMPTCA!patient_has_carer) Then
         If GPMPTCA!patient_has_carer = True Then  
            templ.Checkbox("patient-has-carer-checkbox", True)
         Else
            templ.Checkbox("patient-has-carer-checkbox", False)
         End If 
      Else
         templ.Checkbox("patient-has-carer-checkbox", False)
      End If 
      If Not IsNull(GPMPTCA!copy_offered_to_carer) Then
         If GPMPTCA!copy_offered_to_carer = True
            templ.Checkbox("copy-given-to-carer-checkbox", True)
         Else
            templ.Checkbox("copy-given-to-carer-checkbox", False)
         End If   
      Else
         templ.Checkbox("copy-given-to-carer-checkbox", False)
      End If   
   Else
      If modAdminDBI.Config_Get_Staff_Member("multi-column-health-summary", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff) Then
         templ = New CTemplate("health-summary-multi-cols", "tex")
      Else 
         templ = New CTemplate("health-summary-no-cols", "tex")
      End If   
      If Not IsNull(usual_doctor) Then
         Templ.Subst("documenttype", "PATIENT HEALTH SUMMARY\\\\" & "\\\\Usual GP: " & usual_doctor!title & " " & usual_doctor!wholename & "\\\\")
      Else
         Templ.Subst("documenttype", "PATIENT HEALTH SUMMARY\\\\" & "\\\\Usual GP: <unknown>\\\\")
      End If
   Endif
   templ.Subst_common(currentconsult)
   Templ.Subst("date_printed", Format(currentconsult.getConsultDate(), "dd/mm/yyyy"))
   Allergies_Make_Latex(templ, currentconsult) 'will be 'unknown' or 'Nil' or the details
   For Each item In currentconsult!social_history
      sSocialHistory = item!history
      If Not IsNull(item!history_confidential) Then
         sSocialHistory &= " Confidential parts of this history have been omitted."
      Endif
      templ.Subst("socialhistory", sSocialHistory)
      If Not IsNull(item!fk_responsible_person) Then
         sString = item!person_responsible_title & " " & item!person_responsible_firstname & " " & item!person_responsible_surname
      Else
         sString = item!responsible_person
         If Not IsNull(item!responsible_person_street1) Then
            sSTring &= "\\\\" & item!responsible_person_street1
         Endif
         If Not IsNull(item!responsible_person_town) Then
            sSTring &= "\\\\" & item!responsible_person_town & " " & item!responsible_person_postcode
         Endif
      End If
      sString &= "\\\\Phone:" & item!responsible_person_contacts
      templ.Subst("responsibleperson", Trim(sString))
   Next
   Templ.Subst("responsibleperson", "")
   Templ.Subst("socialhistory", "")
   '----------------------------------
   'Construct the occupational history
   '----------------------------------
   sstring = ""
   For Each item In currentconsult!occupational_history
      sString = ""
      If Not IsNull(item!from_age) Then   
         sString = "age " & item!from_age 
         If Not IsNull(item!to_age) Then
            sstring &= "-" & item!to_age
         Endif
      Endif
      If sLastOccupation <> item!occupation Then
         sstring1 = item!occupation
         templ.Row(sString1, sString, item!exposure)
         sLastOccupation = item!occupation
      Else
         templ.Row("", item!from_age & " to " & item!to_age, item!exposure)
         templ.Row("", sString, item!exposure)
      End If
   Next
   If currentconsult!patient!retired = True Then
      templ.Row("(Retired)", "", "")
   Endif
   templ.Table("occupationalhistory")
   '----------------
   'the risk factors
   '----------------
   sstring = ""
   For Each PH In currentconsult!past_history
      If PH!risk_factor = True And PH!confidential = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "\\item[\\footnotesize " & PH!year_onset & "]"
         sstring &= "{\\textbf{\\footnotesize " & UCase(PH!description) & " " & sLaterality & " " & age_onset(PH) & "}\\\\"
         If Not IsNull(PH!aim_of_plan) Then
            If Not IsNull(PH!condition_summary) Then    
               sstring &= "\\textbf{" & "Relevant History: " & "}" & PH!condition_summary & "." & "\\\\"
            End If   
            sstring &= "\\textbf{" & "Goals of Care         : " & "}" & PH!aim_of_plan & ". \\\\" 
            If Not IsNull(PH!health_need) Then  
               sstring &= "\\textbf{" & "Needs to address: " & "}" & PH!health_need & ". \\\\"
            End If 
            '----------------------------------------------------------------------- 
            'Does user want a format with individual headings for the contributers?
            '------------------------------------------------------------------------
            If bProvidersHaveHeadings Then 
               sstring &= "\\textbf{Plan: }\\\\"    
               If Not IsNull(ph!plan_contribution_gp) Then
                  sstring &= "\\textbf{GP} will " & ph!plan_contribution_gp & "\\\\ "
               Endif
               If Not IsNull(PH!plan_contribution_patient) Then
                  sstring &= "\\textbf{Patient} will " & PH!plan_contribution_patient & "\\\\ "
               Endif
               If Not IsNull(Ph!plan_contribution_others) Then
                  For Each provider In PH!providersofcare
                     sstring &= "\\textbf{" & provider!wholename & "} [" & modStrings.Capitalise_Words_In_String(provider!occupation) & "] will " & provider!contribution_to_plan & ".\\\\"
                  Next    
               End If
            Else
               '-------------------------------------------------------------
               'No - just put all the plan members details into one paragraph
               '-------------------------------------------------------------
               sstring &= "\\textbf{Plan: }"    
               If Not IsNull(ph!plan_contribution_gp) Then
                  sstring &= "GP will " & ph!plan_contribution_gp & ". "
               Endif
               If Not IsNull(PH!plan_contribution_patient) Then
                  sstring &= "Patient will " & PH!plan_contribution_patient & ". "
               Endif
               If Not IsNull(Ph!plan_contribution_others) Then
                  sstring &= Ph!plan_contribution_others & "."
               End If
            End If 
         Else
            sstring &= "\\text{"
            If Not IsNull(PH!condition_summary) Then 
               sstring &= PH!condition_summary & ". "
            Endif
            If Not IsNull(Ph!management_summary) Then
               sSTring &= PH!management_summary & "."
            End If
            sString &= "}"
         End If 
      Endif
   Next
   templ.Subst("riskfactors", sstring) 
   Last_Key = 0
   templ.Subst("family-history", Family_History_Create_Latex(templ, currentconsult!family_history))
   '-----------------------------------------------------------------
   'create rows for habits and measurements then  call the make table
   '-----------------------------------------------------------------
   Habits_Make_Latex_Rows(templ, currentconsult)
   Measurements_Make_Latex_Rows(templ, currentConsult)
   templ.Table("habits-measurements")
   templ.Subst("exercise_data", "N/A")   'FIXME - no module to put this in yet
   templ.Subst("alcohol_data", "")
   '------------------------------
   'Now do the major health issues
   '------------------------------
   sstring = ""
   For Each PH In currentconsult!past_history
      If PH!major = True And PH!risk_factor = False And PH!confidential = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "\\item[\\footnotesize " & PH!year_onset & "]"
         sstring &= "{\\textbf{\\footnotesize " & UCase(PH!description) & " " & sLaterality & " " & age_onset(PH) & "}\\\\"
         ' If the user Is Using this as a management plan, must have aims, goals And management
         If Not IsNull(PH!aim_of_plan) Then
            If Not IsNull(PH!condition_summary) Then    
               sstring &= "\\textbf{" & "Relevant History: " & "}" & PH!condition_summary & "." & "\\\\"
            End If  
            sstring &= "\\textbf{" & "Goals of Care               : " & "}" & PH!aim_of_plan & ". \\\\" 
            If Not IsNull(PH!health_need) Then  
               sstring &= "\\textbf{" & "Needs to address: " & "}" & PH!health_need & ". \\\\"
            End If   
            '----------------------------------------------------------------------- 
            'Does user want a format with individual headings for the contributers?
            '------------------------------------------------------------------------
            If bProvidersHaveHeadings Then 
               sstring &= "\\textbf{Plan: }\\\\"    
               If Not IsNull(ph!plan_contribution_gp) Then
                  sstring &= "\\textbf{GP} will " & ph!plan_contribution_gp & "\\\\ "
               Endif
               If Not IsNull(PH!plan_contribution_patient) Then
                  sstring &= "\\textbf{Patient} will " & PH!plan_contribution_patient & "\\\\ "
               Endif
               If Not IsNull(Ph!plan_contribution_others) Then
                  For Each provider In PH!providersofcare
                     sstring &= "\\textbf{" & provider!wholename & "} [" & modStrings.Capitalise_Words_In_String(provider!occupation) & "] will " & provider!contribution_to_plan & ".\\\\"
                  Next    
               End If
            Else
               '-------------------------------------------------------------
               'No - just put all the plan members details into one paragraph
               '-------------------------------------------------------------
               sstring &= "\\textbf{Plan: }"    
               If Not IsNull(ph!plan_contribution_gp) Then
                  sstring &= "GP will " & ph!plan_contribution_gp & ". "
               Endif
               If Not IsNull(PH!plan_contribution_patient) Then
                  sstring &= "Patient will " & PH!plan_contribution_patient & ". "
               Endif
               If Not IsNull(Ph!plan_contribution_others) Then
                  sstring &= Ph!plan_contribution_others & "."
               End If
            End If 
         Else
            sstring &= "\\text{"
            If Not IsNull(PH!condition_summary) Then 
               sstring &= PH!condition_summary & ". "
            Endif
            If Not IsNull(Ph!management_summary) Then
               sSTring &= PH!management_summary & "."
            End If
            sString &= "}"
         End If 
         
      Endif
   Next
   templ.Subst("majorhealthissues", sstring)
   '---------------------------------
   'Now the significant health issues
   '---------------------------------
   sstring = ""
   For Each PH In currentconsult!past_history 
      If PH!active = True And PH!risk_factor = False And PH!major = False And PH!confidential = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "\\item[\\footnotesize " & PH!year_onset & "]"
         sstring &= "\\textbf{\\footnotesize " & UCase(PH!description) & " " & sLaterality & " " & age_onset(PH) & "}\\\\"
         'If the user is using this as a management plan, must have aims, goals and management
         If Not IsNull(PH!aim_of_plan) Then
            If Not IsNull(PH!condition_summary) Then    
               sstring &= "\\textbf{" & "Relevant History: " & "}" & PH!condition_summary & "." & "\\\\"
            End If  
            sstring &= "\\textbf{" & "Goals of Care                : " & "}" & PH!aim_of_plan & ". \\\\" 
            If Not IsNull(PH!health_need) Then  
               sstring &= "\\textbf{" & "Needs to address: " & "}" & PH!health_need & ". \\\\"
            End If  
            '--------------------------------------------------
            'This is the plan without headings for contributers
            '--------------------------------------------------
            sstring &= "\\textbf{Plan: }"    
            If Not IsNull(ph!plan_contribution_gp) Then
               sstring &= "GP will " & ph!plan_contribution_gp & ". "
            Endif
            If Not IsNull(PH!plan_contribution_patient) Then
               sstring &= "Patient will " & PH!plan_contribution_patient & ". "
            Endif
            If Not IsNull(Ph!plan_contribution_others) Then
               sstring &= Ph!plan_contribution_others & "."
            End If
            ' sstring &= "\\textbf{" & "Plan :    " & "}"  
            ' If Not IsNull(ph!plan_contribution_gp) Then
            '    sstring &= "GP will " & ph!plan_contribution_gp & ". "
            ' Endif
            ' If Not IsNull(PH!plan_contribution_patient) Then
            '    sstring &= "Patient will " & PH!plan_contribution_patient & ". "
            ' Endif
            ' If Not IsNull(Ph!plan_contribution_others) Then
            '    sstring &= Ph!plan_contribution_others & "."
            ' End If
            ' sstring &= "\\\\"
            ' sstring &= "}"
         Else
            sstring &= "\\text{"
            If Not IsNull(PH!condition_summary) Then 
               sstring &= PH!condition_summary & ". "
            Endif
            If Not IsNull(Ph!management_summary) Then
               sSTring &= PH!management_summary & "."
            End If
            sString &= "}"
         End If
      Endif
   Next
   templ.Subst("significanthealthissues", sstring)
   Medications_Make_Latex_Table(templ, currentConsult)  'generic/strength/instruction/why prescribed
   '---------------------------------------------------------------------------------------------
   'Construct a Table of the vaccinations bit complicated because I allowed the date given to be
   'text eg 2009, maybe should go back and fix this, hence they are not in sort order by date
   '---------------------------------------------------------------------------------------------
   templ.Row("\\textbf{\\footnotesize IMMUNIZATIONS}", "", "")
   For Each vaccination In currentconsult!vaccinations_given
      Select Case Lower(vaccination!schedule)      'date can be 2007, 04/2007 or 01/04/2007
         Case "influenza"
            x = 0
            If IsDate(vaccination!date_given) Then
               x = Year(Val(vaccination!date_given))
            Else
               If Len(vaccination!date_given) = 4 Then
                  x = Val(vaccination!date_given)
               Endif
               If Len(vaccination!date_given) = 6 Then
                  Try x = Val(Right(vaccination!date_given, 4))
               Endif
            End If
            If x > fluvax_year_most_recent Then
               fluvax_year_most_recent = x
               fluvax = modUtil.Copy_Collection(vaccination)
            Endif
         Case "tetanus - every 10 years", "tetanus diphtheria pertussis", "tetanus diptheria pertussus polio"
            x = 0
            If IsDate(vaccination!date_given) Then
               x = Year(Val(vaccination!date_given))
            Else
               If Len(vaccination!date_given) = 4 Then
                  x = Val(vaccination!date_given)
               Endif
               If Len(vaccination!date_given) = 6 Then
                  Try x = Val(Right(vaccination!date_given, 4))
               Endif
            End If
            If x > tetanus_year_most_recent Then
               tetanus_year_most_recent = x
               tetanus_vax = modUtil.Copy_Collection(vaccination)
            Endif
         Case "typhoid"
            x = 0
            If IsDate(vaccination!date_given) Then
               x = Year(Val(vaccination!date_given))
            Else
               If Len(vaccination!date_given) = 4 Then
                  x = Val(vaccination!date_given)
               Endif
               If Len(vaccination!date_given) = 6 Then
                  Try x = Val(Right(vaccination!date_given, 4))
               Endif
            End If
            If x > typhoid_year_most_recent Then
               typhoid_year_most_recent = x
               typhoid_vax = modUtil.Copy_Collection(vaccination)
            Endif
         Case Else
            If vaccination!not_given = False Then 
               templ.Row(vaccination!schedule, vaccination!date_given, vaccination!brand)
            Else
               templ.Row(vaccination!schedule, vaccination!brand, "Not Given " & vaccination!notes)
            End If
      End Select
   Next
   If Not IsNull(fluvax) Then
      templ.Row(fluvax!schedule, fluvax!date_given, fluvax!brand)
   Endif
   If Not IsNull(tetanus_vax) Then
      templ.Row(tetanus_vax!schedule, tetanus_vax!date_given, tetanus_vax!brand)
   Endif
   If Not IsNull(typhoid_vax) Then
      templ.Row(typhoid_vax!schedule, typhoid_vax!date_given, typhoid_vax!brand)
   Endif
   templ.Table("vaccinations")
   templ.Row("\\textbf{\\footnotesize RECALLS}", "")
   For Each recall In currentconsult!recalls_logged
      templ.Row(Format(recall!due, "dd/mm/yyyy"), recall!reason)
   Next
   templ.Table("recalls")
   'Now the inactive health issues
   sstring = ""
   For Each PH In currentconsult!past_history
      If PH!active = False And PH!major = False And PH!risk_factor = False And PH!confidential = False Then
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "\\item[\\footnotesize " & PH!year_onset & "]"
         sstring &= "\\textbf{\\footnotesize " & UCase(PH!description) & " " & sLaterality & " " & age_onset(PH) & "}\\\\"
         ' sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
         sstring &= "\\text{" 
         If Not IsNull(PH!condition_summary) Then
            sstring &= PH!condition_summary & ". "
         End If   
         If Not IsNull(PH!management_summary) Then
            sstring &= PH!management_summary & ". "
         End If  
         sstring &= "}"
      Endif
   Next
   templ.Subst("inactivehealthissues", sstring)
   '---------------------------------------------------------------------------------------------------------------
   'First, if this LaTex is being used as a Team Care Arrangement - put separate list of Team Care Members Contacts
   '---------------------------------------------------------------------------------------------------------------
   Print selected_team_care_members
   For Each TCM In selected_team_care_members  
      sstring2 = ""
      If Not IsNull(TCM!organisation) Then
         sstring2 = TCM!organisation
         If TCM!branch <> "HEAD OFFICE" Then
            sstring2 &= "\\\\" & TCM!branch 
         Endif
         sstring2 &= "\\\\"
      Endif
      sstring2 &= Trim(TCM!street1 & "\\\\ " & TCM!street2) & "\\\\" & TCM!town & " " & TCM!postcode
      ' templ.Row(modStrings.Capitalise_Words_In_String(TCM!wholename), sstring2)  'create a row in the table
      templ.Row(modStrings.Capitalise_Words_In_String(TCM!wholename), modStrings.Capitalise_Words_In_String(TCM!occupation), sstring2)  'create a row in the table
      
      If TCM!fk_branch Then
         comms = modContactsDBI.Branch_Comms_Get(TCM!fk_branch)      'or branch
      Else 
         If TCM!fk_person Then                                             'get comms for person
            comms = modContactsDBI.person_comms_get(TCM!fk_person)
         End If   
      Endif
      For Each comm In comms                                            'and put them in the table
         templ.Row("", "", comm!type & " " & comm!value)
      Next
   Next
   If selected_team_care_members.count Then
      templ.Subst("tca_provider_contacts_heading", "\\textbf{TEAM CARE PROVIDERS CONTACT LIST}\\\\")
      templ.Table("tca_provider_contact_list")
   Else
      templ.Subst("tca_provider_contacts_heading", "")
      templ.Subst("tca_provider_contact_list", "")
   End If   
   '----------------------------------------------------------------------------
   'lastly if there are team care members/providers put in their contact details
   'excluding those in the previous list if team care arrangements in place
   'fixme also used in FGPMPlan with the TCA stuff
   '----------------------------------------------------------------------------
   sstring1 = ""
   For Each PH In currentconsult!past_history                                        'Loop through all health issue items               
      If Not IsNull(PH!providersofcare) Then                                         'If the health issue has team care member(s)
         Print PH!providersofcare
         For Each TCM In PH!providersofcare                                          'for each of the team members for this particular health issue
            bSkipProvider = False                                                    
            For Each selected_TCM In selected_team_care_members                      'check its not one we want to print under the team care members contact ist                 '
               If TCM!fk_provider_of_care = selected_TCM!fk_provider_of_care Then    'Yes?
                  bSkipProvider = True                                               'then skip this, don't put on the general providers list
                  Break
               Endif
            Next
            If Not bSkipProvider Then                                               'not part of the team care listing
               If Not InStr(sString1, TCM!wholename) Then                           'check not duplicated in another health issue
                  bHaveProviders = True                                             'flag will tell us to print an 'other's provider list'
                  sstring2 = ""
                  If Not IsNull(TCM!organisation) Then
                     sstring2 = TCM!organisation
                     If TCM!branch <> "HEAD OFFICE" Then
                        sstring2 &= "\\\\" & TCM!branch 
                     Endif
                     sstring2 &= "\\\\"
                  Endif
                  sstring2 &= Trim(TCM!street1 & "\\\\ " & TCM!street2) & "\\\\" & TCM!town & " " & TCM!postcode
                  templ.Row(modStrings.Capitalise_Words_In_String(TCM!wholename), modStrings.Capitalise_Words_In_String(TCM!occupation), sstring2)  'create a row in the table
                  ' templ.Row(modStrings.Capitalise_Words_In_String(TCM!wholename), sstring2)  'create a row in the table
                  If TCM!fk_branch Then
                     comms = modContactsDBI.Branch_Comms_Get(TCM!fk_branch)      'or branch
                  Else 
                     If TCM!fk_person Then                                             'get comms for person
                        comms = modContactsDBI.person_comms_get(TCM!fk_person)
                     End If   
                  Endif
                  For Each comm In comms                                            'and put them in the table
                     templ.Row("", "", comm!type & " " & comm!value)
                  Next
                  sstring1 &= TCM!wholename & " "                                  'keep provider name so we can check it's not used again
               End If  
            End If
            '  templ.Row("", "", "") 
         Next
      Endif
   Next 
   If bHaveProviders Then 
      If selected_team_care_members.count Then     
         templ.Subst("health_provider_contact_list_heading", "\\textbf{OTHER HEALTH PROVIDERS CONTACT LIST}\\\\")
      Else
         templ.Subst("health_provider_contact_list_heading", "\\textbf{HEALTH PROVIDERS CONTACT LIST}\\\\")
      End If
      templ.Table("health_provider_contact_list")
   Else
      templ.Subst("health_provider_contact_list_heading", "")
      templ.Subst("health_provider_contact_list", "")
   End If   
   Print templ.GetData()
   Return templ
   
End

Public Function Health_Summary_Construct_html(currentconsult As Cconsult) As String
   '--------------------------------------------------------
   'Constructs a health summmary which is really a care plan
   '
   'Essentially this consists of the following code, which
   'creates a number of row definitions, and encapsulates
   'the whole lot within an outer table definition
   '
   'each 'cell' mentioned below  is a row definition
   'with two columns:
   '
   ' "<TR VALIGN=TOP>"
   '  "<TD WIDTH=col1_width>"
   '     "<P>col1</P>"
   '  "</TD>"
   '  "<TD WIDTH=col2_width>"
   '      "<P>col2</P>"
   '  "</TD>"'c'c'c
   ' "</TR>" 'c
   ' Where col1 contains either text or another table
   ' Where col2 contains eitehr text or another table
   ' the parameteters col_width are substituted appropriatly
   '
   ' <HTML>
   '      <TABLE>
   '        <TD>
   '           2 cells - social history/family history
   '        </TD>
   '        <TD>
   '           2 cells - with these headings
   '                    MAJOR PROBLEM - RISK FACTORS
   '        </TD>
   '        <TD>
   '           2 cells containmax_ideal_weighting
   '               Tables major problems/Table Risk factors
   '        </TD>
   '        <TD>
   '           2 cells - with these headings
   '                  ACTIVE PROBLEMS - SIGNIFICANT PROBLEMS
   '        </TD>
   '        <TD>
   '           2 cells -'c left = 'Reminders logged
   '                   'c- right = table of reminders logged
   '        </TD>
   
   '     </TABLE>
   ' </HTML>
   
   Dim sHTMLHeader As String
   Dim shtml As String
   Dim sTableStart As String
   Dim sTableEnd As String
   Dim sHTMLEnd As String
   Dim sRowTemplate As String
   Dim sRowTemplate1 As String
   Dim sRowTemplate2 As String
   Dim sSocialHistory As String
   Dim sResponsiblePerson As String
   Dim sOccupation As String
   Dim sFamilyHistory As String
   Dim FM As Collection
   Dim PH As Collection
   Dim TeamCaremember As String
   Dim sRow As String
   Dim sTable As String
   Dim sString As String
   Dim sData As String[]
   Dim height As Integer
   Dim weight As Variant
   Dim BMI As Variant
   Dim max_ideal_weight As Variant
   Dim min_ideal_weight As Variant
   Dim last_key As Integer
   Dim collection_member As Collection
   Dim all_Collections As Collection
   Dim sLaterality As String
   '----------------------------------
   'Force a refresh of all information
   '----------------------------------
   currentconsult.Refresh("family_history")
   currentconsult.Refresh("social_history")
   'currentconsult.Refresh("measurements")
   currentconsult.Refresh("past_history")
   currentconsult.Refresh("occupational_history")
   currentconsult.Refresh("recalls_logged")
   
   sHTMLHeader = "<html>"
   sTableStart = "<table border=%BORDER% cellpadding=0 cellspacing=%cellspacing% width=100% >"
   sTableEnd = "</table>"
   sHTMLEnd = "</body></html>"
   
   ' sRowTemplate = ""
   '   "<TR VALIGN=TOP>"
   '       "<TD WIDTH=col1_width>"
   '          "<P>col1</P>"
   '       "</TD>"
   '       "<TD WIDTH=col2_width>"
   '           "<P>col2</P>"
   '       "</TD>"
   '      "</TR>"
   ' <TD WIDTH=50%>
   '          <P STYLE="background: #008000"><BR>
   '          </P>
   '       </TD>
   
   sRowTemplate = ""
   "<TR VALIGN=TOP>"
   "<TD WIDTH=col1_width>"
   
   "col1<BR>"
   "</TD>"
   "<TD WIDTH=col2_width>"
   
   "col2<BR>"
   "</TD>"
   "</TR>" 'STYLE = "background: #008000" >
   sRowTemplate1 = ""
   "<TR VALIGN=TOP>"
   "<TD WIDTH=col1_width>"
   "col1<BR>"
   "</TD>"
   "<TD WIDTH=col2_width>"
   "col2<BR>"
   "</TD>"
   "<TD WIDTH=col3_width>"
   "col3<BR>"
   "</TD>"
   "</TR>"
   '------------------------------
   'A row template with one column
   '------------------------------
   sRowTemplate2 = ""
   "<TR VALIGN=TOP>"
   "<TD WIDTH=100%>"
   "col1<BR>"
   "</TD>"
   "</TR>"
   '-------------------------------------------
   'Firstly build the social history and habits
   '-------------------------------------------
   'shtml = sHTMLHeader & "<P ALIGN=CENTER><B>HEALTH SUMMARY</B></P>" & sTableStart
   shtml = sHTMLHeader & "<DIV ALIGN=CENTER><H3>Health Summary</H3></DIV>" & sTableStart
   sTableStart = Replace(sTableStart, "%cellspacing%", "5")
   sTableStart = Replace(sTableStart, "%BORDER%", "1")
   '- - - - - - -
   'Allergy
   '-------
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "55%") 'pcol1 has the year noted
   sRow = Replace(sRow, "col2_width", "45%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>ALLERGIES AND SENSITIVITIES</B></P>")
   sRow = Replace(sRow, "col2", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B></B></P>")
   shtml &= sRow
   'FIXME, PUT IN SOME REAL DATA
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "55%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "45%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "Nil Recorded")
   sRow = Replace(sRow, "col2", "")
   shtml &= sRow
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "55%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "45%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>SOCIAL HISTORY</B></P>")
   sRow = Replace(sRow, "col2", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>FAMILY HISTORY</B></P>")
   shtml &= sRow
   '
   ' sRow = sRowTemplate
   ' sRow = Replace(sRow, "col1_width", "55%")
   ' sRow = Replace(sRow, "col2_width", "45%")
   ' sSocialHistory = "<small><B>SOCIAL HISTORY</B><BR>"
   all_Collections = currentconsult!social_history
   For Each collection_member In all_Collections
      sSocialHistory &= "<small>" & collection_member!history & "</small><BR>"
      ' sSocialHistory &= collection_member!history & "<BR>"
      
      '---------------------------------
      'Insert responsible person details
      '---------------------------------
      sResponsiblePerson = "<small><B>RESPONSIBLE PERSON (Please contact in emergency)</B><BR>"
      ' sResponsiblePerson = "<B>RESPONSIBLE PERSON(Please contact In emergency)</B><BR>"
      sResponsiblePerson &= collection_member!responsible_person & "</small><BR>"
      '  sResponsiblePerson &= collection_member!responsible_person & "<BR>"
   Next
   '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   'construct an occupational history
   '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   
   sOccupation = "<small><B>OCCUPATIONAL HISTORY</B><BR>"
   Last_key = 0
   For Each collection_member In currentconsult!occupational_history
      If Last_key <> collection_member!fk_occupation Then
         If Right(sOccupation) = "," Then
            sOccupation = Left(sOccupation, Len(sOccupation) - 1)
         End If
         '-----------------------------------------------------------------
         'If this is the first row in the view for an occupation, show that
         '-----------------------------------------------------------------
         Last_key = collection_member!fk_occupation
         sString = "<BR><B>" & collection_member!occupation & "</B>"
         If collection_member!current = True Then
            sString &= " [Current]"
         Else
            If collection_member!retired = True Then
               sString &= " [Retired]"
            End If
         End If
         '-----------------------
         'work out the age string
         '-----------------------
         
         If Not IsNull(collection_member!from_age) Then
            sString &= " from age " & collection_member!from_age & "yrs"
            If Not IsNull(collection_member!to_age) Then
               sString &= " to age " & collection_member!to_age & "yrs"
            End If
         Else
            If Not IsNull(collection_member!to_age) Then
               sString &= " from age -? to age " & collection_member!to_age
            End If
         End If
         sOccupation &= sString    ' & "<BR>"
         '-------------------------
         'First exposure?add prefix
         '-------------------------
         If collection_member!exposure <> "" Then
            sOccupation &= "  - workplace exposure: " & collection_member!exposure & ","
         End If
      Else
         '--------------------------------------------------------
         'If the same occupation, just add any more work exposures
         '--------------------------------------------------------
         If collection_member!exposure <> "" Then
            sOccupation &= collection_member!exposure & ","
         End If
      End If
      
   Next
   If Right(sOccupation) = "," Then
      sOccupation = Left(sOccupation, Len(sOccupation) - 1)
   End If
   sOccupation &= "</small>"
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "55%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "45%") 'col 2 has the rest
   sRow = Replace$(sRow, "col1", sSocialHistory & "<BR>" & sResponsiblePerson & "<BR>" & sOccupation)
   '------------------
   'the family history
   '------------------
   sFamilyHistory &= "<small>"
   Last_key = 0
   For Each FM In currentconsult!family_history
      If last_key <> FM!fk_member Then
         last_key = FM!fk_member
         sFamilyHistory &= "<B>" & FM!relationship & " " & FM!name & "</B><BR>"
         '----------------------------------------------------
         'Construct something like this
         ' Mother (Hilda smith)
         '   Hypertension onset age 50
         '   Carcinoma Breast onset age 65 (caused death)
         '----------------------------------------------------
      End If
      '--------------------------
      'One condition per view row
      '--------------------------
      sFamilyHistory &= FM!condition
      Try sFamilyHistory &= " onset " & FM!age_of_onset
      If FM!cause_of_death = True Then
         sFamilyHistory &= " (caused death"
         If Not IsNull(FM!age_of_death) Then
            sFamilyHistory &= "-" & FM!age_of_death & " yrs)"
         Else
            sFamilyHistory &= ") "
         End If
      End If
      
      ' If Not IsNull(FM!age_of_onset) Then
      
      '  If FM!age_of_onset Or FM!cause_of_death Then
      '   If FM!age_of_onset Then
      '    sFamilyHistory &= " onset " & FM!age_of_onset
      '  End If
      '   If FM!cause_of_death Then
      '      sFamilyHistory &= " (caused death"
      '  If FM!age_of_death Then
      '      sFamilyHistory &= "-" & FM!age_of_death & " yrs)"
      '  Else
      '      sFamilyHistory &= ")"
      '  End If
      ' End If
      'End If
      sFamilyHistory &= "<BR>"
   Next
   sFamilyHistory &= "</small>"
   sRow = Replace$(sRow, "col2", sFamilyHistory)
   shtml &= sRow & "<BR>"
   
   '----------------------------------------------------------
   'Next do the major health issues and Risk Factor Management
   'by building a table of rows e.g
   '1988 Hypertension
   '     - levels up to 190/100
   '     - managment plan
   'First, the headings
   '-----------------------------------------------------------
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "55%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "45%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>MAJOR HEALTH ISSUES</B></P>")
   sRow = Replace(sRow, "col2", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>MEASUREMENTS</B></P>")
   shtml &= sRow
   '-----------------------------------------------------------
   'Next, create the outer table:
   '  left side will contain an inner table or multiple rows
   '  on condition
   '  the right side will contain an inner table of multiple
   '  rows of risk factor management
   '  we will later substitute these names for tables
   'fix me I keep putting in stupid  or duplicated bits of htmlFClinical.
   ' when developing quickly
   '----------------------------------------------------------
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "50%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "50%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "table_left")
   sRow = Replace(sRow, "col2", "table_right")
   'temp code
   '--------------------------------------------------
   'Now replace the right hand column with a single
   'table with two rows, the top row to be later
   'replaced with the measurements table, the bottom
   'row to be later replaced with a risk factors table
   '--------------------------------------------------
   sTable = sTableStart & sRowTemplate2   'row with a single full width column
   sTable = Replace(sTable, "%BORDER%", "1")
   sTable = Replace(sTable, "col1", "Measurements_Table")
   sTable &= sRowTemplate2
   sTable = Replace(sTable, "col1", "RiskFactors_Table")
   sTable &= sTableEnd
   sRow = Replace(sRow, "table_right", sTable)
   
   shtml &= sRow & sTableEnd
   '----------------------------------------------------------------
   'Now create the inner table which will replace "table_left"
   'Now add the patients major medical conditions - this is a table
   'and we will give it a border of 1 pixel
   '----------------------------------------------------------------
   sTable = sTableStart
   sTable = Replace(sTable, "%BORDER%", "1")
   sTable = Replace(sTable, "%cellspacing%", "0")
   '---------------------------------------------------------------
   'Now create some rows, incrementally adding these into the table
   '----------------------------------------------------------------
   For Each PH In currentconsult!past_history
      If PH!major = True And PH!risk_factor = False Then
         sRow = sRowTemplate
         sRow = Replace(sRow, "col1_width", "10%") 'col1 has the year noted
         sRow = Replace(sRow, "col2_width", "90%") 'col 2 has the rest
         
         sRow = Replace(sRow, "col1", "<B>" & PH!year_onset & "</B>")
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sSTring = "<B>" & UCase(PH!description) & " " & sLaterality & "</B><BR>"
         sString &= "<small>"
         sString &= PH!condition_summary & ". "
         ' sString &= "<B><I>Management Plan </I></B>"
         sString &= PH!management_summary & "."  ' & "<BR>"
         '------------------------------------------------------
         'insert any team care members and their responsibilties
         '------------------------------------------------------
         If PH!team_care_members <> "" Then
            sString &= "<B><I>Team Care Members </I></B><BR>"
            For Each TeamCaremember In PH!providersofcare
               sSTring &= "-" & TeamCaremember & "<BR>"
            Next
         End If
         sRow = Replace(sRow, "col2", sString)
         sTable &= sRow
      End If
   Next
   '----------------------------------------------------------------
   'Now finish off the table definition and place this table, within
   'the parent table
   '----------------------------------------------------------------
   sTable &= sTableEnd
   shtml = Replace(shtml, "table_left", sTable)
   
   '----------------------------------------------------------------
   'Now create the inner table which will replace "table_right"
   'which will contain risk factors - this is a table
   'and we will give it a border of 1 pixel
   '----------------------------------------------------------------
   
   sTable = sTableStart
   sTable = Replace(sTable, "%BORDER%", "1")
   sTable = Replace(sTable, "%cellspacing%", "0")
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "25%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "75%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<B>Smoking</B>")
   
   sString = sRow
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "25%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "75%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<B>Alcohol</B>")
   sString &= sRow
   
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "25%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "75%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<B>Other Drugs</B>")
   sString &= sRow
   '------
   'height
   '------
   sRow = sRowTemplate1
   sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "20%") 'col 2
   sRow = Replace(sRow, "col3_width", "45%") 'col 3 has the rest
   sRow = Replace(sRow, "col1", "<B>Height</B>")
   
   currentconsult.Refresh("measurements")
   If currentconsult!measurements.count Then
      
      sData = New String[]
      Try SData = Split(modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Height), "|")
      
      If sData.count Then
         height = sData[0]
         sRow = Replace(sRow, "col2", "<B>" & sData[0] & "cm</B>")
         sRow = Replace(sRow, "col3", "(" & sData[1] & ")")
      Else
         sRow = Replace(sRow, "col2", "N/A")
         sRow = Replace(sRow, "col3", "")
      End If
      sString &= sRow
      '------
      'Weight
      '------
      sRow = sRowTemplate1
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "20%") 'col 2 has the rest
      sRow = Replace(sRow, "col3_width", "45%") 'col 3 has the rest
      sRow = Replace(sRow, "col1", "<B>Weight</B>")
      sData = New String[]
      Try SData = Split(modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Weight), "|")
      If SData.Count Then
         weight = sData[0]
         sRow = Replace(sRow, "col2", "<B>" & sData[0] & "Kg</B>")
         sRow = Replace(sRow, "col3", "(" & sData[1] & ")")
      Else
         sRow = Replace(sRow, "col2", "N/A")
         sRow = Replace(sRow, "col3", "")
      End If
      sString &= sRow
      '---------------------------------
      'Now Calculate the BMI if possible
      '---------------------------------
      sRow = sRowTemplate1
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "20%") 'col 2 has the rest
      sRow = Replace(sRow, "col3_width", "45%") 'col 3 has the rest
      sRow = Replace(sRow, "col1", "<B>BMI</B>")
      Try BMI = Format((weight / (height ^ 2)) * 10000, "##.#")
      sRow = Replace(sRow, "col2", "<B>" & BMI & "</B>")
      sRow = Replace(sRow, "col3", "")
      sString &= sRow
      '---------
      'waist/hip
      '---------
      sRow = sRowTemplate1
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "20%") 'col 2 has the rest
      sRow = Replace(sRow, "col3_width", "45%") 'col 3 has the rest
      sRow = Replace(sRow, "col1", "<B>Waist/Hip</B>")
      sRow = Replace(sRow, "col3", "")
      sString &= sRow
      '---------------------------------------------------------
      'Kg's overweight BMI * H2 = max ideal weight - approximate
      '---------------------------------------------------------
      Try max_ideal_weight = 25 * (height / 100) * (height / 100)
      Try min_ideal_weight = 20 * (height / 100) * (height / 100)
      sRow = sRowTemplate1
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "20%") 'col 2 has the rest
      sRow = Replace(sRow, "col3_width", "45%") 'col 3 has the rest
      sRow = Replace(sRow, "col1", "<B>Ideal Weight</B>")
      If max_ideal_weight Then
         sRow = Replace(sRow, "col2", "<B>" & Format(min_ideal_weight, "##") & "-" & Format(max_ideal_weight, "##") & "Kg</B>")
         sRow = Replace(sRow, "col3", "")
      Else
         sRow = Replace(sRow, "col2", "N/A")
         sRow = Replace(sRow, "col3", "")
      End If
      sString &= sRow
      '-------------------------------------
      'Now the approximate amount overweight
      '-------------------------------------
      sRow = sRowTemplate
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "30%") 'col 2 has the rest
      'sRow = Replace(sRow, "col1", "<B>Overweight</B>")
      If Not IsNull(BMI) Then
         If Val(BMI) > 25 Then
            If max_ideal_weight Then
               sRow = Replace(sRow, "col1", "<B>Overweight</B>")
               sRow = Replace(sRow, "col2", "<B>" & Format(weight - max_ideal_weight, "##.##") & "Kg</B>")
            Else
               sRow = Replace(sRow, "col2", "N/A")
            End If
         End If
         If Val(BMI) < 20 Then
            If min_ideal_weight Then
               sRow = Replace(sRow, "col1", "<B>Underweight</B>")
               sRow = Replace(sRow, "col2", "<B>" & Format(min_ideal_weight - weight, "##.##") & "-" & Format(max_ideal_weight - weight, "##.##") & "Kg</B>")
            Else
               sRow = Replace(sRow, "col2", "N/A")
            End If
         End If
      Else
         sRow = Replace(sRow, "col2", "N/A")
      End If
      
      sString &= sRow
      
      sRow = sRowTemplate
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "75%") 'col 2 has the rest
      sRow = Replace(sRow, "col1", "<B>Exercise</B>")
      sString &= sRow
      
      sRow = sRowTemplate1
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "30%") 'col 2 has the rest
      sRow = Replace(sRow, "col3_width", "45%")  'col 2 has the rest
      sRow = Replace(sRow, "col1", "<B>BP</B>")
      
      If sData.count Then
         sRow = Replace(sRow, "col2", "<B>" & sData[0] & "</B>")
         sRow = Replace(sRow, "col3", "(" & sData[1] & ")")
      Else
         sRow = Replace(sRow, "col2", "NA")
         sRow = Replace(sRow, "col3", "")
         
      End If
      sString &= sRow
   End If
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "75%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<B>eGFR</B>")
   'fix up this bad hack
   all_Collections = modMeasurementsDBI.Measurements_get_loinc(currentconsult!patient!fk_patient, const.Loinc_EGFR, 1)
   
   If all_Collections.count Then
      For Each collection_member In all_Collections
         sRow = Replace(sRow, "col2", "<B>" & collection_member!measurement & "ml/Min</B>")
         sRow = Replace(sRow, "col3", "(" & collection_member!reference_range & ")")
      Next
   Else
      sRow = Replace(sRow, "col2", "N/A")
      sRow = Replace(sRow, "col3", "")
   End If
   sString &= sRow
   'fish
   sTable &= sSTring
   sTable &= sTableEnd
   
   shtml = Replace(shtml, "Measurements_Table", sTable) ' & "<B>RISK FACTOR MANAGMENT</B><BR>")
   
   '---------------------------------------------------------
   'Now make a table for the risk factors and insert it into
   'the RiskFactors_Row placer
   '---------------------------------------------------------
   sTable = sTableStart
   sTable &= sRowTemplate2
   'FIXME - couldn't get heading to centre align without paragraph which I didn't wnat
   
   sTable = Replace(sTable, "col1", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>RISK FACTORS</B></P>")
   Log.DebugMsg(shtml)
   For Each PH In currentconsult!past_history
      If PH!risk_factor = True Then
         sRow = sRowTemplate2
         '-----------------------------------
         'The heading for the risk factor e.g
         'Hyperension  (1986)
         '------------------------------------
         sString = ""
         sSTring &= "<B>" & UCase(PH!description) & "-" & PH!year_onset & "</B><BR>"
         sString &= "<small>"
         sString &= PH!condition_summary & "."
         
         If PH!management_summary <> "" Then
            '  sString &= "<BR><B>Management Summary</B><BR>" & PH!management_summary
            sString &= PH!management_summary & "."
         End If
         sString &= "</small>"
         sRow = Replace(sRow, "col1", sString)
         sTable &= sRow                         'add each row to the table
      End If
   Next
   sTable &= sTableEnd
   shtml = Replace(shtml, "RiskFactors_Table", sTable)
   '----------------------------------------------------------
   'Next other active problems and significant past history
   'the display is much simpler eg
   '1988 Solar Damage
   '1990  Osteoathritis Back
   ' create the outer table:
   '  left side will contain an inner table or multiple rows
   '  of active but not major problems
   '  the right side will contain an inner table of multiple
   '  rows of significant past problems
   '  we will later substitute these names for tables
   '----------------------------------------------------------
   sTable = sTableStart
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "50%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "50%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>OTHER ACTIVE PROBLEMS</B></P>")
   sRow = Replace(sRow, "col2", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>PAST PROBLEMS</B></P>")
   sTable &= sRow & sTableEnd
   shtml &= sTable
   
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "50%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "50%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "table_left")
   sRow = Replace(sRow, "col2", "table_right")
   shtml &= sTableStart & sRow & sTableEnd
   '----------------------------------------------------------------
   'Now create the inner table which will replace "table_left"
   'Now add the patients major medical conditions - this is a table
   'and we will give it a border of 1 pixel
   '----------------------------------------------------------------
   sTable = sTableStart
   sTable = Replace(sTable, "%BORDER%", "1")
   sTable = Replace(sTable, "%cellspacing%", "0")
   '---------------------------------------------------------------
   'Now create some rows, incrementally adding these into the table
   '----------------------------------------------------------------
   For Each PH In currentconsult!past_history
      If PH!active = True And PH!risk_factor = False Then
         sRow = sRowTemplate
         sRow = Replace(sRow, "col1_width", "10%") 'col1 has the year noted
         sRow = Replace(sRow, "col2_width", "90%") 'col 2 has the rest
         Debug PH!year_onset, PH!description
         sRow = Replace(sRow, "col1", "<B>" & PH!year_onset & "<B>")
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sSTring = "<B>" & UCase(PH!description) & " " & sLaterality & "</B><BR>"
         sString &= "<small>"
         sString &= PH!condition_summary
         sString &= "</small>"
         sRow = Replace(sRow, "col2", sString)
         sTable &= sRow
      End If
   Next
   '----------------------------------------------------------------
   'Now finish off the table definition and place this table, within
   'the parent table
   '----------------------------------------------------------------
   sTable &= sTableEnd
   shtml = Replace(shtml, "table_left", sTable)
   '----------------------------------------------------------------
   'Now create the inner table which will replace "table_right"
   'Now add the patients significant medical conditions
   '----------------------------------------------------------------
   sTable = sTableStart
   sTable = Replace(sTable, "%BORDER%", "1")
   sTable = Replace(sTable, "%cellspacing%", "0")
   '---------------------------------------------------------------
   'Now create some rows, incrementally adding these into the table
   '----------------------------------------------------------------
   For Each PH In currentconsult!past_history
      If PH!active = False And PH!major = False And PH!risk_factor = False Then
         sRow = sRowTemplate
         sRow = Replace(sRow, "col1_width", "10%") 'col1 has the year noted
         sRow = Replace(sRow, "col2_width", "90%") 'col 2 has the rest
         sRow = Replace(sRow, "col1", "<B>" & PH!year_onset & "<B>")
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sSTring = "<B>" & UCase(PH!description) & " " & sLaterality & "</B><BR>"
         sString &= "<small>"
         sString &= PH!condition_summary
         sString &= "</small>"
         sRow = Replace(sRow, "col2", sString)
         sTable &= sRow
      End If
   Next
   '----------------------------------------------------------------
   'Now finish off the table definition and place this table, within
   'the parent table
   '----------------------------------------------------------------
   sTable &= sTableEnd
   shtml = Replace(shtml, "table_right", sTable)
   'temporary fudge as we don't have the data for stuff yet int
   'the database (the risk factors), replace all remaining 'col2'
   shtml = Replace(shtml, "col2", "N/A")
   '---------------------------------
   'Next add any reminders or recalls
   '---------------------------------
   sRow = sRowTemplate2
   sRow = Replace(sRow, "col1_width", "100%") 'col1 has the yeaeasygp-rtr noted
   sRow = Replace(sRow, "col1", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>RECALLS AND REMINDERS</B></P>")
   
   shtml &= SrOW
   'shtml &= "<small><B>REMINDERS LOGGED</B><BR>"
   
   sTable = sTableStart
   sTable = Replace(sTable, "%BORDER%", "1")
   sTable = Replace(sTable, "%cellspacing%", "0")
   For Each collection_member In currentconsult!recalls_logged
      sRow = sRowTemplate
      sRow = Replace(sRow, "col1_width", "30%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "70%") 'col 2 has the rest
      
      sRow = Replace(sRow, "col1", "<B><small>" & collection_member!reason & "<B>")
      sstring = "Due: " & collection_member!due
      sString &= " (Logged by " & collection_member!wholename & "</small>)"
      sRow = Replace(sRow, "col2", sString)
      sTable &= sRow
   Next
   sTable &= sTableEnd
   shtml &= sTable
   '------------------------------------------
   'Finally finish off the main table and page
   '------------------------------------------
   shtml = shtml & sTableEnd & sHTMLEnd
   'I left the borders in to see what I was doing, remove them
   shtml = Replace(shtml, "border=1", "border=0")
   shtml = Replace(shtml, "%BORDER%", "0")
   Return shtml
   
End

Public Function CoverSheet_Construct_HTML(currentconsult As Cconsult) As CTemplate
   '--------------------------------------------------------------------
   'Construct a coversheet for the front of a printed document, with the 
   'practice name, exporting doctor name and patient details
   '--------------------------------------------------------------------
   
   Dim templ As CTemplate
   
   templ = New CTemplate(modHTML.Exported_Front_Page_Template)
   '---------------------------------------------------------
   'Substitute appropriate information into the form template
   'first the common stuff like practice details, dr details
   '---------------------------------------------------------
   templ.Subst_common(currentconsult)
   Return templ
   
End

Public Function Tasks_summary_Construct_html(outstanding_task As Collection) As String
   '-------------------------------------------------------
   'Construct html +/- Audit trail of any outstanding tasks
   '-------------------------------------------------------
   
   Dim sHtml As String
   '  Dim fk_document As Integer = outstanding_task!fk_row
   
   ' sHtml = modArchiveDocumentsDBI.Audit_Trail_Show_Document_Details_Tasks_Attatched(fk_document)
   ' shtml &= "<HTML><BODY><TABLE><BR><B>Document Actioning</B><BR>" & modHTML.HTML_Template_Audit_Row_Heading()
   ' shtml &= modAudit.MakeTrail("documents.documents", fk_document)
   ' shtml &= "</TABLE>"
   ' shtml &= "</BODY></HTML>"
   ' Return shtml
   
   If Not IsNull(outstanding_task!fk_row) Then 
      sHtml = modArchiveDocumentsDBI.Audit_Trail_Show_Document_Details_Tasks_Attatched(outstanding_task!fk_row)
      shtml &= "<HTML><BODY><TABLE><BR><B>Document Actioning</B><BR>" & modHTML.HTML_Template_Audit_Row_Heading()
      shtml &= modAudit.MakeTrail("documents.documents", outstanding_task!fk_row)
   Else
      shtml &= "<HTML><BODY><TABLE><BR><B>Staff Task Audit Trail</B><BR>" 
      shtml &= modAudit.MakeTrail("clerical.tasks", outstanding_task!fk_task)
   End If   
   shtml &= "</TABLE>"
   shtml &= "</BODY></HTML>"
   Return sHtml
   
End

Public Function ReferralLetter_summary_construct_html(Referrals_written As Collection) As String
   
   Dim sHtml As String
   Dim referral As Collection
   Dim sRow_Template As String 
   Dim sSTring As String 
   
   sRow_Template = ""
   "<COL WIDTH=10%>"
   "<COL WIDTH=40%>"
   "<COL WIDTH=50%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=10%>"
   "%consult_date<BR>"
   "</TD>"
   "<TD WIDTH=40%>"
   "%to<BR>"
   "</TD>"
   "<TD WIDTH=50%>"
   "%reason<BR>"
   "</TD>"
   "</TR>"
   shtml = "<HTML><BODY><DIV ALIGN=CENTER><H3>Summary of Referral Letters</H3></DIV><TABLE>"
   shtml &= sRow_Template
   sHtml = Replace(shtml, "%consult_date", "<B>Date</B>")
   sHtml = Replace(shtml, "%to", "<B>To</B>")
   sHtml = Replace(shtml, "%reason", "<B>Reason</B>")
   '---------------------------------------------------------
   'Note - imported letters won't have tag's = contents col 3
   '---------------------------------------------------------
   For Each referral In referrals_written
      shtml &= sRow_Template
      If referral!surname Then
         sString = referral!title & " " & referral!wholename
      Else
         sString = referral!organisation
      End If
      shtml = Replace(shtml, "%consult_date", modUtil.Format_Date(referral!date_referral))
      If sSTring = "" Then
         shtml = Replace(shtml, "%to", "")
      Else
         shtml = Replace(shtml, "%to", sSTring)
      End If
      If Not IsNull(referral!tag) Then
         shtml = Replace(shtml, "%reason", referral!tag)
      End If
      Print sHtml
   Next
   Return sHtml & "</TABLE></BODY></HTML>"
   
End

Public Function Results_Summary_Construct_Html(results_received As Collection, bIncludeINR As Boolean) As String
   '-------------------------------------------------------
   'Construct a summary of results recieved by the tag_user
   '-------------------------------------------------------
   
   Dim R As Collection
   Dim sHtml As String
   Dim bSkipRow As Boolean
   Dim sRow_Template As String = ""
   
   "<COL WIDTH=10%>"
   "<COL WIDTH=60%>"
   "<COL WIDTH=30%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=10%>"
   "%date_created<BR>"
   "</TD>"
   "<TD WIDTH=60%>"
   "%organisation<BR>"
   "</TD>"
   "<TD WIDTH=30%>"
   "%tag_user<BR>"
   "</TD>"
   "</TR>"
   shtml = "<HTML><BODY><DIV ALIGN=CENTER><H3>Summary Of Results Received</H3></DIV><TABLE>"
   shtml &= sRow_Template
   sHtml = Replace(shtml, "%date_created", "<B>Date</B>")
   sHtml = Replace(shtml, "%organisation", "<B>From</B>")
   sHtml = Replace(shtml, "%tag_user", "<B>Reason</B>")
   For Each R In results_received
      If InStr(Lower(R!tag), "inr") Then  'IF result is inr and want to include it do so
         If bIncludeINR Then  'this construct logic is fucked, fix this when not asleep FIXME.
            shtml &= sRow_Template
            sHtml = Replace(shtml, "%date_created", Format(R!date_created, "dd/mm/yyyy"))
            sHtml = Replace(shtml, "%organisation", R!organisation)
            sHtml = Replace(shtml, "%tag_user", R!tag_user)  
            bSkipRow = True    'already have the row
         Else
            bSkipRow = True    'skip if not wanted.
         Endif
      Else
         bSkipRow = False  
      Endif
      If Not bSkipRow Then    
         shtml &= sRow_Template
         sHtml = Replace(shtml, "%date_created", Format(R!date_created, "dd/mm/yyyy"))
         If IsNull(R!organisation) Then
            sHtml = Replace(shtml, "%organisation", R!originator)
         Else
            sHtml = Replace(shtml, "%organisation", R!organisation)
         End If   
         sHtml = Replace(shtml, "%tag_user", R!tag_user)
      End If   
   Next
   Return sHtml & "</TABLE></BODY></HTML>"
   
End

Public Function Requests_summary_construct_html(requests_ordered As Collection) As String
   '----------------------------------------------
   'make up a html summary of all requests ordered
   '----------------------------------------------
   
   Dim current_form_fk As Integer
   Dim last_form_fk As Integer
   Dim sHTml As String
   Dim request As Collection
   Dim sRow_Template As String = ""
   
   "<TR VALIGN=TOP>"
   "<TD WIDTH=89>"
   "%request_date<BR>"
   "</TD>"
   "<TD WIDTH=250>"
   "%organisation<BR>"
   "</TD>"
   "<TD WIDTH=300>"
   "%request<BR>"
   "</TD>"
   "<TD WIDTH=265>"
   "%notes<BR>"
   "</TD>"
   "</TR>"
   
   shtml = "<HTML><BODY<DIV ALIGN=CENTER><H3>Requests Ordered</H3></DIV><TABLE><small><small>"
   "<COL WIDTH=89>"
   "<COL WIDTH=250>"
   "<COL WIDTH=300>"
   "<COL WIDTH=265>"
   sHtml &= sRow_Template
   sHtml = Replace(shtml, "%request_date", "<B>Requested</B>")
   sHtml = Replace(shtml, "%organisation", "<B>Provider</B>")
   sHtml = Replace(shtml, "%request", "<B>Request(s)</B>")
   sHtml = Replace(shtml, "%notes", "<B>Notes</B>")
   sHTML &= "<small>"
   '----------------------------------------------------------------
   'the requests_ordered collection has multiple lines per form, one
   'for each request, so just show the summary
   '-----------------------------------------------------------------
   For Each request In requests_ordered
      current_form_fk = request!fk_form
      If last_form_fk <> current_form_fk Then
         last_form_fk = request!fk_form
         sHtml &= sRow_Template
         sHtml = Replace(shtml, "%consult_date", modUtil.Format_Date(request!consult_date))
         sHtml = Replace(shtml, "%request_date", modUtil.Format_Date(request!date))
         sHtml = Replace(shtml, "%organisation", request!organisation)
         sHtml = Replace(shtml, "%request", request!requests_summary)
         sHtml = Replace(shtml, "%notes", request!notes_summary)
         If request!forms_results_html <> "" Then
            sHtml = Replace(shtml, "%result_available", "Yes")
         Else
            sHtml = Replace(shtml, "%result_available", "No")
         End If
      End If
   Next
   Return sHtml & "</TABLE></SMALL></small></BODY></HTML>"
   
End

Public Function Letters_Summary_Construct_html(letters_received_sorted_ascending As Collection) As String
   '-----------------------------------------------------
   'Constructs a table of letters/correspondence recieved
   '-----------------------------------------------------
   
   Dim sHTml As String
   Dim letter As Collection
   Dim sRow_Template As String = ""
   
   "<COL WIDTH=89>"
   "<COL WIDTH=319>"
   "<COL WIDTH=379>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=89>%letter_date<BR></TD>"
   "<TD WIDTH=450>%letter_from<BR></TD>"
   "<TD WIDTH=500>%letter_summary<BR></TD>"
   "</TR>"
   shtml = "<HTML><BODY<DIV ALIGN=CENTER><H3>Summary Of Letters Received</H3></DIV><TABLE><small><small>"
   sHtml &= sRow_Template
   sHtml = Replace(shtml, "%letter_date", "<B>Letter Date</B>")
   sHtml = Replace(shtml, "%letter_from", "<B>From</B>")
   sHtml = Replace(shtml, "%letter_summary", "<B>Summary</B>")
   sHTML &= "<small>"
   '----------------------------------------------------------------
   'the requests_ordered collection has multiple lines per form, one
   'for each request, so just show the summary
   '-----------------------------------------------------------------
   For Each letter In letters_received_sorted_ascending
      sHtml &= sRow_Template
      sHtml = Replace(shtml, "%letter_date", Format(letter!date_created, "dd/mm/yyyy"))
      sHtml = Replace(shtml, "%letter_from", letter!originator)
      sHtml = Replace(shtml, "%letter_summary", letter!tag_user)
   Next
   Return sHtml & "</TABLE></SMALL></small></BODY></HTML>"
   
End

Public Function Recalls_summary_construct_html(currentconsult As CConsult) As String
   '----------------------------------------------
   'make up a html summary of all requests ordered
   '----------------------------------------------
   
   Dim sHTml As String
   Dim recall As Collection
   Dim sRow_Template As String = ""
   
   "<COL WIDTH=89>"
   "<COL WIDTH=319>"
   "<COL WIDTH=379>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=89>%recall_date<BR></TD>"
   "<TD WIDTH=450>%recall_for<BR></TD>"
   "<TD WIDTH=500>%logged_by<BR></TD>"
   "</TR>"
   shtml = "<HTML><BODY<DIV ALIGN=CENTER><H3>Recalls Outstanding</H3></DIV><TABLE><small><small>"
   sHtml &= sRow_Template
   sHtml = Replace(shtml, "%recall_date", "<B>Date Due</B>")
   sHtml = Replace(shtml, "%recall_for", "<B>Recall For</B>")
   sHtml = Replace(shtml, "%logged_by", "<B>Logged by</B>")
   sHTML &= "<small>"
   For Each recall In currentconsult!recalls_logged
      sHtml &= sRow_Template
      sHtml = Replace(shtml, "%recall_date", Format(recall!due, "dd/mm/yyyy"))
      sHtml = Replace(shtml, "%recall_for", recall!reason)
      sHtml = Replace(shtml, "%logged_by", recall!title & " " & recall!wholename)
   Next
   Return sHtml & "</TABLE></SMALL></small></BODY></HTML>"
   
End

Public Function Medical_Certificates_Summary_Construct_Html(medical_certificates As Collection) As String
   '----------------------------------------------
   'make up a html summary of all requests ordered
   '----------------------------------------------
   
   Dim sHTml As String
   Dim recall As Collection
   Dim sRow_Template As String 
   Dim certificate As Collection
   Dim sString As String
   
   sRow_Template = ""
   "<COL WIDTH=10%>"
   "<COL WIDTH=10%>"
   "<COL WIDTH=30%>"
   "<COL WIDTH=30%>"
   "<COL WIDTH=20%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=10%>%certificate_date<BR></TD>"
   "<TD WIDTH=10%>%is_was_will_be<BR></TD>"
   "<TD WIDTH=20%>%reason<BR></TD>"
   "<TD WIDTH=30%>%period_covered<BR></TD>"
   "<TD WIDTH=30%>%notes<BR></TD>"
   "</TR>"
   shtml = "<HTML><BODY<DIV ALIGN=CENTER><H3>Summmary Of Medical Certificates</H3></DIV><TABLE><small><small>"
   sHtml &= sRow_Template
   sHtml = Replace(shtml, "%certificate_date", "<B>Certificate Date</B>")
   sHtml = Replace(shtml, "%is_was_will_be", "")
   sHtml = Replace(shtml, "%reason", "<B>Reason</B>")
   sHtml = Replace(shtml, "%period_covered", "<B>Period Covered</B>")
   sHtml = Replace(shtml, "%notes", "<B>Notes</B>")
   sHTML &= "<small>"
   For Each certificate In medical_certificates
      sString = ""
      sHtml &= sRow_Template
      sHtml = Replace(shtml, "%certificate_date", Format(certificate!certificate_date, "dd/mm/yyyy"))
      sHtml = Replace(shtml, "%reason", certificate!reason)
      sHtml = Replace(shtml, "%is_was_will_be", certificate!temporality & " " & certificate!fitness)
      sstring = Format(certificate!from_date, "dd/mm/yyyy")
      If Not IsNull(certificate!to_date) Then
         sstring &= " - " & Format(certificate!to_date, "dd/mm/yyyy")
      Endif
      sHtml = Replace(shtml, "%period_covered", sstring)
      sHtml = Replace(shtml, "%notes", certificate!notes)
   Next
   Print sHtml
   Return sHtml & "</TABLE></SMALL></small></BODY></HTML>"
   
End

Public Function Care_Plan_Construct_html(currentconsult As CConsult) As String
   ' '-----------------------------------------------------------------------------------------------
   ' 'Displays the GP Managment plan - ie health issue care plan and team care arrangements in detail
   ' 'Collects the team care members names and addresses along the way to put a list at the bottom of
   ' 'the page along with contact details.
   ' '-----------------------------------------------------------------------------------------------
   ' 
   ' Dim PH As Collection
   ' Dim sText As String
   ' Dim sTempString As String
   ' Dim sPlanHtml As String
   ' Dim sHealthIssueRow As String
   ' Dim sHistory_Management_Components As String
   ' Dim sCumulative_html_forPlan As String
   ' Dim sCumulative_html_for_components As String
   ' Dim sComponent_row As String
   ' Dim sTeamCare_row As String
   ' Dim careplan_components As Collection
   ' Dim member As Collection
   ' 
   ' Dim TeamCareMembers As Collection
   ' Dim Team_Names_And_Addresses As New Collection
   ' Dim Team_Members_Address_Already_done As Collection
   ' Dim bduplicate As Boolean
   ' Dim x As Integer
   ' Dim comms As Collection
   ' Dim comm As Collection
   ' Dim sPageHeader As String = ""
   ' 
   ' "<HTML>"
   ' "<BODY>"
   ' "<DIV ALIGN=CENTER><H3>Care Plan</H3></div>"
   ' '----------------------------------------------------------------------------------
   ' 'the sHealthIssueRow_template is a single row of 2 columns 1=the issue 2 = the plan
   ' '----------------------------------------------------------------------------------
   ' Dim sHealthIssueRow_template As String = ""
   ' 
   ' "<TR VALIGN=TOP>"
   ' "<TD WIDTH=20%>"
   ' "<P ALIGN=LEFT><B>%healthissue</B></P>"
   ' "</TD>"
   ' "<TD WIDTH=80%>"
   ' "<P ALIGN=LEFT>%plandetails</P>"
   ' "</TD>"
   ' 
   ' "</TR>"
   ' 
   ' Dim sNames_Addresses_Phone_Template As String = ""
   ' 
   ' "<TR VALIGN=TOP>"
   ' "<TD WIDTH=20%>"
   ' "<P ALIGN=LEFT><B>%name_teamcare_member</B></P>"
   ' "</TD>"
   ' "<TD WIDTH=80%>"
   ' "<P ALIGN=LEFT>%address_phone</P>"
   ' "</TD>"
   ' "</TR>"
   ' 
   ' '-------------------------------------------------------------------------------------
   ' 'this is s table which consists of 3 columns
   ' 'col 1 = the chronological history of the health issue  = free text
   ' 'col 2 = the management plan summary of the health issue = free text
   ' 'co 3  = will contain a 2 column table of n lines of care plan components and when due
   ' '-------------------------------------------------------------------------------------
   ' Dim sResponsible_Table_start As String = ""
   ' 
   ' "<TABLE WIDTH=100%  BORDER=0 CELLPADDING=1 CELLSPACING=0>"
   ' "<COL WIDTH=38%>"
   ' "<COL WIDTH=54%>"
   ' "<COL WIDTH=10%>"
   ' 
   ' Dim sComms_table_start As String = ""
   ' 
   ' "<TABLE WIDTH=100%  BORDER=0 CELLPADDING=0 CELLSPACING=0>"
   ' "<COL WIDTH=10%>"
   ' "<COL WIDTH=90%>"
   ' Dim sComms_Table_row As String = ""
   ' 
   ' "<TR VALIGN=TOP>"
   ' "<TD WIDTH=10%>"
   ' "%comm_type<BR>"
   ' "</TD>"
   ' "<TD WIDTH=90%>"
   ' "%comm_value<BR>"
   ' "</TD>"
   ' "</TR>"
   ' Dim sResponsible_Table_row_template As String = ""
   ' 
   ' "<TR VALIGN=TOP>"
   ' "<TD WIDTH=38%>"
   ' "<P ALIGN=LEFT><small><B>%wholename</B></small><BR> %address</P>"
   ' "</TD>"
   ' "<TD WIDTH=54%>"
   ' "<P ALIGN=LEFT>%responsibilities</P>"
   ' "</TD>"
   ' "<TD WIDTH=10%>"
   ' "<P ALIGN=LEFT>%comms</P>"
   ' "</TD>"
   ' "</TR>"
   ' 
   ' Dim sHistory_Management_Components_Template As String = ""
   ' 
   ' "<TABLE WIDTH=100% BORDER=0 CELLPADDING=3 CELLSPACING=0>"
   ' "<COL WIDTH=60%>"
   ' "<COL WIDTH=40%>"
   ' "<TR VALIGN=TOP>"
   ' "<TD>"
   ' "<P ALIGN=LEFT><B>Historical Summary and  Management Plan</B></P>"
   ' "%historicalsummary_and_plan<BR>"
   ' "</TD>"
   ' "<TD><B>Tasks and when due</B><BR>"
   ' "%componentstable"
   ' "</TD>"
   ' "</TR>"
   ' "</TABLE>"
   ' 
   ' Dim sComponentTable_start As String = ""
   ' 
   ' "<TABLE WIDTH=100% BORDER=0 >"
   ' "<COL WIDTH=128*>"
   ' "<COL WIDTH=128*>"
   ' 
   ' Dim sComponentTable_Row_template As String = ""
   ' 
   ' "<TR VALIGN=TOP>"
   ' "<TD WIDTH=50%>"
   ' "<P>%item</P>"
   ' "</TD>"
   ' "<TD WIDTH=50% SDVAL=\"39845\" SDNUM=\"3081;0;DD/MM/YY\">"
   ' "<P ALIGN=LEFT>%due</P>"
   ' "</TD>"
   ' "</TR>"
   ' 
   ' Dim sOutsideTableStart As String = ""
   ' 
   ' "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>"
   ' "<COL WIDTH=20%>"
   ' "<COL WIDTH=80%>"
   ' '---------------------------
   ' 'Ok, lets construct the plan
   ' '---------------------------
   ' 
   ' sPlanHtml = sPageHeader & sOutsideTableStart
   ' For Each PH In currentconsult!past_history
   '    '-----------------------------------------------------------------------------
   '    'For each past history item which is either major/significant or a risk factor
   '    'include in plan. Don't include inactive problems
   '    '-----------------------------------------------------------------------------
   '    If PH!active = True Or ph!risk_factor = True Or PH!major = True Then
   '       If Not IsNull(PH!aim_of_plan) Then
   '          '----------------------------------------------------------------------------
   '          'Left hand column is simple - just the upper cased health issue name eg NIDDM
   '          '----------------------------------------------------------------------------\
   '          sHealthIssueRow = sHealthIssueRow_template
   '          sHealthIssueRow = Replace(sHealthIssueRow, "%healthissue", UCase(PH!description))
   '          '---------------------------------------------------------------------
   '          'right hand column is really complex, made up of all the fields in the
   '          'health issue/past history section
   '          'First a note about he problems onset and the aim of the plan
   '          '---------------------------------------------------------------------
   '          sText = "Noted at age " & PH!age_onset & " yrs considered to be a "
   '          If PH!major Then
   '             sText &= "major problem."
   '          Else If PH!active Then
   '             sText &= "significant problem."
   '          Else If PH!risk_factor Then
   '             stext &= "risk factor. "
   '          End If
   '          sText &= "<BR>The aim of the plan is to "
   '          '-------------------------------------------------------
   '          'Lcase first letter, preserve internal caps in sentance.
   '          '-------------------------------------------------------
   '          sText &= LCase(Left(PH!aim_of_plan, 1)) & Right(PH!aim_of_plan, Len(PH!aim_of_plan) - 1)
   '          
   '          If Right(Trim(sText), 1) <> "." Then
   '             sText = Trim(sText) & "."
   '          End If
   '          sCumulative_html_forPlan = sText
   '          '-------------------------------------------------------------------------
   '          'At this point the right hand column of html, collected in the string
   '          'sCumulative_html_forPlan just has a note about the severity of
   '          'the issue (major/significant/risk factor) and the plain aim
   '          'Now an inner table - of the history/managment/components of the plan
   '          '--------------------------------------------------------------------------
   '          sHistory_Management_Components = sHistory_Management_Components_Template
   '          If PH!condition_summary Then
   '             sText = "- "
   '             sText &= LCase(Left(PH!condition_summary)) & Right(PH!condition_summary, Len(PH!condition_summary) - 1)
   '             If Right(Trim(sText), 1) <> "." Then
   '                sText = Trim(sText) & "."
   '             End If
   '             sText &= " "
   '          End If
   '          If PH!management_summary Then
   '             sText &= UCase(Left(PH!management_summary)) & Right(PH!management_summary, Len(PH!management_summary) - 1)  '& "."
   '             If Right(Trim(sText), 1) <> "." Then
   '                sText = Trim(sText) & "."
   '             End If
   '             sText &= " "
   '          End If
   '          sHistory_Management_Components = Replace(sHistory_Management_Components, "%historicalsummary_and_plan", sText)
   '          sCumulative_html_forPlan &= sHistory_Management_Components
   '          '-------------------------------------------------------------------------------------------
   '          'At this point the right hand column of html, collected in the string
   '          'sCumulative_html_forPlan now has the condition's severity, its aim, and two columns filled
   '          'under that with the historical summary and the management plan summary
   '          'Now have to add 1-n rows of components and when due eg HBA1c due 01/02/2009
   '          'we now have to query the database for these
   '          '-------------------------------------------------------------------------------------------
   '          sCumulative_html_for_components = sComponentTable_start
   '          careplan_components = modPastHistoryDBI.Get_CarePlan_Components(PH!pk_pasthistory)
   '          For Each Member In careplan_components
   '             sComponent_row = sComponentTable_Row_template
   '             sComponent_row = Replace(sComponent_row, "%item", member!component)
   '             If Not IsNull(member!due) Then
   '                sComponent_row = Replace(sComponent_row, "%due", Format(member!due, "dd/mm/yyyy"))
   '             Else
   '                sComponent_row = Replace(sComponent_row, "%due", "")
   '             End If
   '             sCumulative_html_for_components &= sComponent_row
   '          Next
   '          '-------------------------------
   '          'finish off the components table
   '          '-------------------------------
   '          sCumulative_html_for_components &= "</TABLE>"
   '          
   '          sCumulative_html_forPlan = Replace(sCumulative_html_forPlan, "%componentstable", sCumulative_html_for_components)
   '          
   '          '-----------------------------------------------------------------------
   '          'Now get the team care members and their responsibilities, if they exist
   '          '-----------------------------------------------------------------------
   '          TeamCareMembers = modPastHistoryDBI.TeamCareMembers_Get(PH!pk_pasthistory)
   '          If TeamCareMembers.count Then
   '             sCumulative_html_forPlan &= "<P ALIGN=CENTER><B>Team care members and their responsibilities</P>"
   '             sCumulative_html_forPlan &= sResponsible_Table_start
   '             For Each Member In TeamCareMembers
   '                Team_Names_And_Addresses.Add(Member, Team_Names_And_Addresses.count)
   '                sTeamCare_row = sResponsible_Table_row_template
   '                sTeamCare_row = Replace(sTeamCare_row, "%wholename", Member!wholename)
   '                sTeamCare_row = Replace(sTeamCare_row, "%responsibilities", Member!responsibility)
   '                sCumulative_html_forPlan &= sTeamCare_row
   '             Next
   '             sCumulative_html_forPlan &= "</TABLE>"
   '          End If
   '          'temporary till I get the comms
   '          sCumulative_html_forPlan = Replace(sCumulative_html_forPlan, "%comms", "<BR>")
   '          sCumulative_html_forPlan = Replace(sCumulative_html_forPlan, "%address", "")
   '          sCumulative_html_forPlan &= "<HR>"
   '          sHealthIssueRow = Replace(sHealthIssueRow, "%plandetails", sCumulative_html_forPlan)
   '          sPlanHtml &= sHealthIssueRow '& ' "<HR>"
   '          'temporary just checking visual effects
   '          sPlanHtml = Replace(sPlanHtml, "Management Plan Summary", "<BR>")
   '          ' sPlanHtml = Replace(sPlanHtml, "Historical Summary", "History and Plan")
   '          
   '       End If
   '    End If
   ' Next
   ' sPlanHtml &= "</TABLE>"
   ' '------------------------------------------------------------------------------
   ' 'Now underneath the whole thing - list all the names and addresses of providers
   ' 'column 1 = the name, column 2 = the addresses/phones
   ' '------------------------------------------------------------------------------
   ' sPlanHtml &= "<P ALIGN=CENTER><B>CONTACT DETAILS OF TEAM CARE MEMBERS</B></P>"
   ' sPlanHtml &= "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>"
   ' "<COL WIDTH=20%>"
   ' "<COL WIDTH=80%>"
   ' ' sPlanHtml &= "<P><B>     " & Member!wholename & "</B>" & Member!summary & "</P>"
   ' Team_Members_Address_Already_done = New Collection
   ' For Each Member In Team_Names_And_Addresses
   '    '------------------------------------------------------
   '    'Put name of team care member in the left hand column
   '    'First check they are not a duplicate as could be part
   '    'of the management of > 1 health issue
   '    '------------------------------------------------------
   '    bduplicate = False
   '    For x = 0 To Team_Members_Address_Already_done.count - 1
   '       If Member!wholename = Team_Members_Address_Already_done[x]!wholename Then
   '          bduplicate = True
   '          Break
   '       End If
   '    Next
   '    If Not bduplicate Then
   '       sPlanHtml &= sNames_Addresses_Phone_Template
   '       sPlanHtml = Replace(sPlanHtml, "%name_teamcare_member", "<B>" & Member!wholename & "</B>")
   '       
   '       '-------------------------------------------
   '       'Now get the comms for this team care member
   '       '-------------------------------------------
   '       If IsNull(member!fk_branch) Then
   '          comms = modContactsDBI.person_comms_get(member!fk_person)
   '       Else
   '          comms = modContactsDBI.Branch_Comms_Get(Member!fk_branch)
   '       End If
   '       stext = "<B>" & Member!summary & "</B><BR>" & sComms_table_start
   '       For Each comm In comms
   '          sText &= sComms_Table_row
   '          sText = Replace(sText, "%comm_type", comm!type)
   '          'FIXME DO THE SAME FOR EMAIL
   '          If comm!fk_type = const.CommModalityWeb Then
   '             sTempstring = "<A HREF='http://%url/'>%url</A>"
   '             sTempstring = Replace(sTempstring, "%url", comm!value)
   '             sText = Replace(sText, "%comm_value", sTempstring)
   '          Else
   '             sText = Replace(sText, "%comm_value", comm!value)
   '          End If
   '       Next
   '       sText &= "</TABLE>"
   '       sPlanHtml = Replace(sPlanHtml, "%address_phone", sText)
   '       Team_Members_Address_Already_done.Add(Member, Team_Members_Address_Already_done.count)
   '    End If
   ' Next
   ' sPlanHtml &= "</TABLE>"
   ' sPlanHtml &= "</BODY></HTML>"
   ' Return sPlanHtml
   
End

Public Function Codes_Get(progress_notes_codes As Collection, fk_progressnote As Integer) As String
   
   Dim pnc As Collection
   Dim codes As String
   
   For Each pnc In progress_notes_codes
      If pnc!fk_progressnote = fk_progressnote Then
         codes &= "<BR>" & pnc!term & " (" & pnc!fk_code & ")"
      Endif
   Next
   Return codes 
   
End

Public Function AllProgressNotes_Construct_Html_new(currentconsult As CConsult, Optional bIncludeAuditTrail As Boolean, Optional bExcludePastHistory As Boolean, Optional pb As ProgressBar = Null) As String
   '--------------------------------------------------------
   'first attempt to exclude past history item's themselves
   'Constructs the html for the problem using pk_pasthistory
   'ordered by date and time order.
   '
   'If pk_pasthistory = 0 = the general tab, or if non-zero
   'it is primary key of clin_history.data_pasthistory
   'FIXME: BUG HERE AFTER A SAVE IT IS IGNORING THE NEW
   '       MEMBER OF THE COLLECTION
   'FIXME: INCLUDE TIME
   'FIXME: ian best way of using  USE TEMP FILES  fix end of routine
   '
   '-----------------------------------------------------------
   
   Dim sStart As String
   Dim sTableTemplate As String
   Dim sTable As String
   Dim sEnd As String
   Dim progress_notes_codes As Collection 
   Dim progressNotes As Collection
   Dim icounter As Integer
   Dim sHtml As String
   Dim progressnote As Collection
   Dim sCurrentDate As String
   Dim sLastDate As String 'because we use date-time, only want a date
   Dim last_fk_staff As Integer
   Dim sCurrentConsultType As String
   Dim SLastconsultType As String
   Dim sString As String
   
   currentconsult.Refresh("progress_notes_codes")
   progress_notes_codes = currentconsult!progress_notes_codes
   sStart = "<HTML>"
   "<BODY>"
   sTableTemplate = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0 >"
   "<COL WIDTH=14%>"
   "<COL WIDTH=64%>"
   
   "<TR VALIGN=TOP>"
   "<TD WIDTH=14%>"
   "col1"
   "</TD>"
   "<TD WIDTH=50%>"
   "<TABLE %background-color% WIDTH=100% BORDER=0 CELLPADDING=5 CELLSPACING=0>"
   "<COL WIDTH=100%>"
   "<TD WIDTH=100% VALIGN=TOP>"
   "col2"
   "</TD>"
   "</TR>"
   "</TABLE>"
   "</TD>"
   "<TH WIDTH=22%>"
   "<P ALIGN=LEFT><FONT SIZE=2 STYLE=\"font-size: 10pt\"><I>col3</I></FONT></P>"
   "</TH>"
   "</TR>"
   "</TABLE>"
   sEnd = "</BODY>"
   "</HTML>"
   sHtml = sStart & "<DIV ALIGN=CENTER><H3> All Progress Notes"  ' & "</H3></DIV>"
   
   If bIncludeAuditTrail Then
      currentconsult.Refresh("progress_notes_audit")
      progressNotes = currentconsult!progress_notes_audit
      sHtml &= " With Audit Trail"
   Else
      currentconsult.Refresh("progress_notes")
      progressNotes = currentconsult!progress_notes
   Endif
   sHtml &= "</H3></DIV>"
   For Each progressnote In progressNotes
      '---------------------------------------------------------
      'Each new date has one or more sections of clinical notes
      'so we want it to end uplooking like
      '
      'column 1         column 2
      '
      '01/02/2000       Gangrene of the leg
      '
      'Ok: if the progress note belongs to the problem in this
      'progress note page, then just display its rows
      ' 'there was  longstanding bug where pk_consult was generated and notes
      ' saved as "Progress Note" when nothing was in fact entered
      ' FIXME - at some point put i
      '---------------------------------------------------------
      Try pb.value = icounter / progressNotes.Count
      Try pb.Refresh
      Inc icounter   
      If Not IsNull(progressnote!notes) And PRogressnote!notes <> "Progress Note" Then   
         sCurrentDate = Format(progressnote!consult_date, "dd/mm/yyyy")
         '  modConsultDBI.ImageFix(progressnote!notes, progressnote!fk_consult)
         If bIncludeAuditTrail Or If (sCurrentDate <> sLastDate Or progressnote!fk_staff <> last_fk_staff Or progressnote!consult_type <> SLastconsultType) Then
            '-------------------------------------------------------------------
            'As soon as the date changes, print the new days date in col1
            '-------------------------------------------------------------------
            sCurrentConsultType = progressnote!consult_type
            SLastconsultType = sCurrentConsultType
            last_fk_staff = progressnote!fk_staff
            sString = sCurrentDate & "<BR><small><small>" & progressnote!consult_type & "<BR>"
            sString &= Format(progressnote!consult_date, gb.MediumTime) & "<BR>"
            sString &= progressnote!title & " " & progressnote!firstname & " " & progressnote!surname & "</small></small>" 'put staff position in here
            sTable = sTableTemplate
            sTable = Replace$(sTable, "col1", sString)
            sTable = Form_Notes_Table(STable, progressnote, progress_notes_codes)
            sHtml = sHtml & sTable 
            sLastDate = sCurrentDate
         Else
            '-----------------------------------------------------------------
            'Otherwise, if the date is the same, simply add the problems notes
            '-----------------------------------------------------------------
            sTable = sTableTemplate
            sCurrentConsultType = progressnote!consult_type
            If sCurrentConsultType <> SLastconsultType Then
               sstring = "<BR><small><small>" & progressnote!consult_type & "<BR>"
               sString &= Format(progressnote!consult_date, gb.MediumTime) & "<BR>"
               sString &= progressnote!title & " " & progressnote!firstname & " " & progressnote!surname & "</small></small>" 'put staff position in here
               sTable = Replace$(sTable, "col1", sstring)
            Else
               sTable = Replace$(sTable, "col1", "") 'put time in here.
            End If
            sTable = Form_Notes_Table(sTable, progressnote, progress_notes_codes)
            sHtml = sHtml & sTable '& "<br>"
         Endif
      End If   
   Next
   sHtml = shtml & sEnd
   '-----------------------------------------------------------
   'Check if there is an image in this note - if so, replace it
   '-----------------------------------------------------------
   If InStr(sHtml, "pk_image") Then
      sHtml = modConsultDBI.Images_Get(sHtml)
   End If
   Return sHtml
   
End

Public Function AllProgressNotes_Construct_Html(currentconsult As CConsult, Optional bIncludeAuditTrail As Boolean, Optional bExcludePastHistory As Boolean, Optional pb As ProgressBar = Null) As String
   '--------------------------------------------------------
   'Constructs the html for the problem using pk_pasthistory
   'ordered by date and time order.
   '
   'If pk_pasthistory = 0 = the general tab, or if non-zero
   'it is primary key of clin_history.data_pasthistory
   'FIXME: BUG HERE AFTER A SAVE IT IS IGNORING THE NEW
   '       MEMBER OF THE COLLECTION
   'FIXME: INCLUDE TIME
   'FIXME: ian best way of using  USE TEMP FILES  fix end of routine
   '
   '-----------------------------------------------------------
   
   Dim sStart As String
   Dim sTableTemplate As String
   Dim sTable As String
   Dim sEnd As String
   Dim progress_notes_codes As Collection 
   Dim progressNotes As Collection
   Dim icounter As Integer
   Dim sHtml As String
   Dim progressnote As Collection
   Dim sCurrentDate As String
   Dim sLastDate As String 'because we use date-time, only want a date
   Dim last_fk_staff As Integer
   Dim sCurrentConsultType As String
   Dim SLastconsultType As String
   Dim sString As String
   
   currentconsult.Refresh("progress_notes_codes")
   progress_notes_codes = currentconsult!progress_notes_codes
   sStart = "<HTML>"
   "<BODY>"
   sTableTemplate = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0 >"
   "<COL WIDTH=14%>"
   "<COL WIDTH=64%>"
   
   "<TR VALIGN=TOP>"
   "<TD WIDTH=14%>"
   "col1"
   "</TD>"
   "<TD WIDTH=50%>"
   "<TABLE %background-color% WIDTH=100% BORDER=0 CELLPADDING=5 CELLSPACING=0>"
   "<COL WIDTH=100%>"
   "<TD WIDTH=100% VALIGN=TOP>"
   "col2"
   "</TD>"
   "</TR>"
   "</TABLE>"
   "</TD>"
   "<TH WIDTH=22%>"
   "<P ALIGN=LEFT><FONT SIZE=2 STYLE=\"font-size: 10pt\"><I>col3</I></FONT></P>"
   "</TH>"
   "</TR>"
   "</TABLE>"
   sEnd = "</BODY>"
   "</HTML>"
   sHtml = sStart & "<DIV ALIGN=CENTER><H3> All Progress Notes"  ' & "</H3></DIV>"
   
   If bIncludeAuditTrail Then
      currentconsult.Refresh("progress_notes_audit")
      progressNotes = currentconsult!progress_notes_audit
      sHtml &= " With Audit Trail"
   Else
      currentconsult.Refresh("progress_notes")
      progressNotes = currentconsult!progress_notes
   Endif
   sHtml &= "</H3></DIV>"
   For Each progressnote In progressNotes
      '---------------------------------------------------------
      'Each new date has one or more sections of clinical notes
      'so we want it to end uplooking like
      '
      'column 1         column 2
      '
      '01/02/2000       Gangrene of the leg
      '
      'Ok: if the progress note belongs to the problem in this
      'progress note page, then just display its rows
      ' 'there was  longstanding bug where pk_consult was generated and notes
      ' saved as "Progress Note" when nothing was in fact entered
      ' FIXME - at some point put i
      '---------------------------------------------------------
      Try pb.value = icounter / progressNotes.Count
      Try pb.Refresh
      Inc icounter   
      If Not IsNull(progressnote!notes) And PRogressnote!notes <> "Progress Note" Then   
         sCurrentDate = Format(progressnote!consult_date, "dd/mm/yyyy")
         '  modConsultDBI.ImageFix(progressnote!notes, progressnote!fk_consult)
         If bIncludeAuditTrail Or If (sCurrentDate <> sLastDate Or progressnote!fk_staff <> last_fk_staff Or progressnote!consult_type <> SLastconsultType) Then
            '-------------------------------------------------------------------
            'As soon as the date changes, print the new days date in col1
            '-------------------------------------------------------------------
            sCurrentConsultType = progressnote!consult_type
            SLastconsultType = sCurrentConsultType
            last_fk_staff = progressnote!fk_staff
            sString = sCurrentDate & "<BR><small><small>" & progressnote!consult_type & "<BR>"
            sString &= Format(progressnote!consult_date, gb.MediumTime) & "<BR>"
            sString &= progressnote!title & " " & progressnote!firstname & " " & progressnote!surname & "</small></small>" 'put staff position in here
            sTable = sTableTemplate
            sTable = Replace$(sTable, "col1", sString)
            sTable = Form_Notes_Table(STable, progressnote, progress_notes_codes)
            sHtml = sHtml & sTable 
            sLastDate = sCurrentDate
         Else
            '-----------------------------------------------------------------
            'Otherwise, if the date is the same, simply add the problems notes
            '-----------------------------------------------------------------
            sTable = sTableTemplate
            sCurrentConsultType = progressnote!consult_type
            If sCurrentConsultType <> SLastconsultType Then
               sstring = "<BR><small><small>" & progressnote!consult_type & "<BR>"
               sString &= Format(progressnote!consult_date, gb.MediumTime) & "<BR>"
               sString &= progressnote!title & " " & progressnote!firstname & " " & progressnote!surname & "</small></small>" 'put staff position in here
               sTable = Replace$(sTable, "col1", sstring)
            Else
               sTable = Replace$(sTable, "col1", "") 'put time in here.
            End If
            sTable = Form_Notes_Table(sTable, progressnote, progress_notes_codes)
            sHtml = sHtml & sTable '& "<br>"
         Endif
      End If   
   Next
   sHtml = shtml & sEnd
   '-----------------------------------------------------------
   'Check if there is an image in this note - if so, replace it
   '-----------------------------------------------------------
   If InStr(sHtml, "pk_image") Then
      sHtml = modConsultDBI.Images_Get(sHtml)
   End If
   Return sHtml
   
End

Private Function Form_Notes_Table(sTable As String, progressnote As Collection, progress_notes_codes As Collection) As String
   
   Select Case progressnote!fk_audit_action
      Case 1, 2, 20  ' ordinary notes or imported
         sTable = Replace$(sTable, "col2", progressnote!notes)
         sTable = Replace$(sTable, "%background-color%", "")
      Case 36 ' PCEHR entries
         sTable = Replace$(sTable, "col2", progressnote!notes)
         sTable = Replace$(sTable, "%background-color%", "bgcolor = '#CCD6ED'")
      Case Else
         sTable = Replace$(sTable, "%background-color%", "bgcolor = '#FFDCE7'")
         sTable = Audit_Create_HTML(sTable, progressnote)
   End Select
   sTable = Replace(sTable, "col3", Codes_Get(progress_notes_codes, progressnote!pk_progressnote))
   sTable = Replace(sTable, "col3", "")
   Return sTable
   
End

Public Function Audit_Create_HTML(sTable As String, pnotes As Collection) As String
   '-----------------------------------------
   'Inserts audit log consisting of this text
   'column 1       column2
   'Staff Member   Dr who (role)
   'Notes          the audit notes
   'Table/Row      linked table, row
   '---------------- -------------------------
   
   Dim audit_trail As String
   Dim table_row As String
   Dim start_table As String 
   
   start_table = ""
   "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>"
   "<COL WIDTH=25%>"
   "<COL WIDTH=75%>"
   Table_row = ""
   "<TR VALIGN=TOP>"
   "<TD WIDTH=25%><P>%col1%</P></TD>"
   "<TD WIDTH=75%><P>%col2%</P></TD>"
   "</TR>"
   
   audit_trail = "<B>Audit of " & modUtil.Ucase_Word_First_Letter(pnotes!section) & " - '" & pnotes!audit_action & "'</B><BR>"
   audit_trail &= start_table & table_row
   audit_trail = Replace(audit_trail, "%col1%", "Notes")
   audit_trail = Replace(audit_trail, "%col2%", modUtil.Ucase_Word_First_Letter(pnotes!notes))
   audit_trail &= table_row
   audit_trail = Replace(audit_trail, "%col1%", "Source Table & Row")
   audit_trail = Replace(audit_trail, "%col2%", pnotes!linked_table & " row " & Str(pnotes!fk_row))
   audit_trail &= "</TABLE>"
   sTable = Replace$(sTable, "col2", audit_trail)
   
   Return stable
   
End

Public Function ConstructHTML_SingleDate(currentconsult As Cconsult, sDate As String, Optional heading As String, Optional bUseheading As Boolean) As String
   '--------------------------------------------------------
   'Constructs the html for single date
   '-----------------------------------------------------------
   
   Dim sStart As String
   Dim sTableTemplate As String
   Dim sTable As String
   Dim sEnd As String
   Dim sHtml As String
   Dim progressnote As Collection
   Dim sCurrentDate As String
   Dim sLastDate As String 'because we use date-time, only want a date
   Dim progress_notes As Collection
   
   sStart = "<HTML>"
   "<BODY>"
   sTableTemplate = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0 >"
   "<COL WIDTH=35*>"
   "<COL WIDTH=135*>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=14%>"
   "<P>col1</P>"
   "</TD>"
   "<TD WIDTH=86%>"
   "<TABLE WIDTH=100% BORDER=0 CELLPADDING=5 CELLSPACING=0>"
   "<COL WIDTH=256*>"
   "<TR>"
   "<TD WIDTH=100% VALIGN=TOP>"
   "<P>col2</P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   "</TD>"
   
   "</TR>"
   "</TABLE>"
   sEnd = "</BODY>"
   "</HTML>"
   sHtml = sStart
   If bUseheading Then
      ' sHtml &= "<P ALIGN=CENTER><B>" & heading & "<B></p>"
      sHtml &= "<DIV ALIGN=CENTER><H3>Notes for " & heading & "</H3></DIV>"
   End If
   
   progress_notes = modConsultDBI.progressnotes_get(currentconsult!patient!fk_patient, sDate)
   For Each progressnote In progress_notes
      '---------------------------------------------------------
      'Each new date has one or more sections of clinical notes
      'so we want it to end uplooking like
      '
      'column 1         column 2
      '
      '01/02/2000       Gangrene of the leg
      '
      'Ok: if the progress note belongs to the problem in this
      'progress note page, then just display its rows
      '---------------------------------------------------------
      ' If progressnote!fk_problem = pk_pasthistory Then ' And progressnote!fk_section = fk_section Then
      sCurrentDate = Format(progressnote!consult_date, "dd/mm/yyyy")
      
      If sCurrentDate <> sLastDate Then
         '-------------------------------------------------------------------
         'As soon as the date changes, print the new days date in col1
         '-------------------------------------------------------------------
         sTable = sTableTemplate
         sTable = Replace$(sTable, "col1", Format$(progressnote!consult_date, "dd/mm/yyyy"))
         sTable = Replace$(sTable, "col2", progressnote!notes)
         sHtml = sHtml & sTable & "<br>"
         sLastDate = sCurrentDate
      Else
         '-----------------------------------------------------------------
         'Otherwise, if the date is the same, simply add the problems notes
         '-----------------------------------------------------------------
         sTable = sTableTemplate
         sTable = Replace$(sTable, "col1", "")
         sTable = Replace$(sTable, "col2", progressnote!notes)
         sHtml = sHtml & sTable & "<br>"
      Endif
      ' End If
   Next
   sHtml = shtml & sEnd
   '-----------------------------------------------------------
   'Check if there is an image in this note - if so, replace it
   '-----------------------------------------------------------
   If InStr(sHtml, "pk_image") Then
      sHtml = modConsultDBI.Images_Get(sHtml)
   End If
   Return sHtml
   
End

Public Function ConstructHTML_SingleProblem(currentconsult As Cconsult, pk_pasthistory As Integer, fk_section As Integer, Optional heading As String, Optional bUseheading As Boolean) As String
   '--------------------------------------------------------
   'Constructs the html for the problem using pk_pasthistory
   'ordered by date and time order.
   '
   'If pk_pasthistory = 0 = the general tab, or if non-zero
   'it is primary key of clin_history.data_pasthistory
   'FIXME: BUG HERE AFTER A SAVE IT IS IGNORING THE NEW
   '       MEMBER OF THE COLLECTION
   'FIXME: INCLUDE TIME
   'FIXME: ian best way of using  USE TEMP FILES  fix end of routine
   '
   '-----------------------------------------------------------
   
   Dim sStart As String
   Dim sTableTemplate As String
   Dim sTable As String
   Dim sEnd As String
   Dim sHtml As String
   Dim progressnote As Collection
   Dim sCurrentDate As String
   Dim sLastDate As String 'because we use date-time, only want a date
   
   sStart = "<HTML>"
   "<BODY>"
   sTableTemplate = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0 >"
   "<COL WIDTH=35*>"
   "<COL WIDTH=135*>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=14%>"
   "<P>col1</P>"
   "</TD>"
   "<TD WIDTH=86%>"
   "<TABLE WIDTH=100% BORDER=0 CELLPADDING=5 CELLSPACING=0>"
   "<COL WIDTH=256*>"
   "<TR>"
   "<TD WIDTH=100% VALIGN=TOP>"
   "<P>col2</P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   "</TD>"
   
   "</TR>"
   "</TABLE>"
   sEnd = "</BODY>"
   "</HTML>"
   sHtml = sStart
   If bUseheading Then
      ' sHtml &= "<P ALIGN=CENTER><B>" & heading & "<B></p>"
      sHtml &= "<DIV ALIGN=CENTER><H3>Notes for " & heading & "</H3></DIV>"
   End If
   currentconsult.Refresh("progress_notes")
   For Each progressnote In currentconsult!progress_notes
      '---------------------------------------------------------
      'Each new date has one or more sections of clinical notes
      'so we want it to end uplooking like
      '
      'column 1         column 2
      '
      '01/02/2000       Gangrene of the leg
      '
      'Ok: if the progress note belongs to the problem in this
      'progress note page, then just display its rows
      '---------------------------------------------------------
      If progressnote!fk_problem = pk_pasthistory Then ' And progressnote!fk_section = fk_section Then
         sCurrentDate = Format(progressnote!consult_date, "dd/mm/yyyy")
         
         If sCurrentDate <> sLastDate Then
            '-------------------------------------------------------------------
            'As soon as the date changes, print the new days date in col1
            '-------------------------------------------------------------------
            sTable = sTableTemplate
            sTable = Replace$(sTable, "col1", Format$(progressnote!consult_date, "dd/mm/yyyy"))
            sTable = Replace$(sTable, "col2", progressnote!notes)
            sHtml = sHtml & sTable & "<br>"
            sLastDate = sCurrentDate
         Else
            '-----------------------------------------------------------------
            'Otherwise, if the date is the same, simply add the problems notes
            '-----------------------------------------------------------------
            sTable = sTableTemplate
            sTable = Replace$(sTable, "col1", "")
            sTable = Replace$(sTable, "col2", progressnote!notes)
            sHtml = sHtml & sTable & "<br>"
         Endif
      End If
   Next
   sHtml = shtml & sEnd
   '-----------------------------------------------------------
   'Check if there is an image in this note - if so, replace it
   '-----------------------------------------------------------
   If InStr(sHtml, "pk_image") Then
      sHtml = modConsultDBI.Images_Get(sHtml)
   End If
   Return sHtml
   
End

Public Sub Templates_Save(template As CRow)
   
   template.Save("clin_consult.lu_progressnote_templates", "pk_template")
   
End

Public Function Templates_Get() As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clin_consult.lu_progressnote_templates where fk_staff = " & modDBConnect.currentUser!fk_staff)
   
End
