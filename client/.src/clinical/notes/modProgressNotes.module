' Gambas module file

' Copyright (C) 2008,2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
Public Function Health_Summary_Construct_LaTeX(currentconsult As Cconsult) As CTemplate
   
   Dim sName As String
   Dim sAddress As String
   Dim sString As String
   Dim comm As Collection 
   Dim templ As New CTemplate("hsumv3", "tex")
   Dim iIncomplete As Integer
   Dim sMissing As String = "**missing**"
   Dim item As Collection 
   Dim items As Collection 
   Dim r As Result
   Dim sRange As String 
   Dim height As Variant
   Dim weight As Variant
   Dim BMI As Variant
   Dim m As Collection
   Dim Last_Key As Integer
   Dim sLaterality As String  
   Dim PH As Collection 
   Dim Medication As Collection
   Dim vaccination As Collection
   Dim recall As Collection 
   Dim max_ideal_weight As Variant = 0
   Dim min_ideal_weight As Variant = 0

   currentconsult.Refresh("family_history")
   currentconsult.Refresh("social_history")
   currentconsult.Refresh("past_history")
   currentconsult.Refresh("occupational_history")
   currentconsult.Refresh("recalls_logged")
   
   templ.Subst_common(currentconsult)
   
   For Each item In currentconsult!social_history
      templ.Subst("socialhistory", item!history)
      If Not IsNull(item!fk_responsible_person) Then
         sString = item!person_responsible_title & " " & item!person_responsible_firstname & " " & item!person_responsible_surname
      Else
         sString = item!responsible_person
      End If 
      sString &= " " & item!responsible_person_contacts
      templ.Subst("responsibleperson", Trim(sString))
   Next
   
   '----------------------------------
   'Construct the occupational history
   '----------------------------------
   sstring = ""
   For Each item In currentconsult!occupational_history
      templ.Row(item!occupation, item!from_age & " to " & item!to_age, item!exposure)
   Next
   templ.Table("occupationalhistory")
   sstring = ""
   
   For Each PH In currentconsult!past_history
      If PH!risk_factor = True Then
         sstring &= "\\textbf{" & PH!year_onset & "}" & "\\&"
         sstring &= "\\textbf{" & UCase(PH!description) & " " & sLaterality & "}\\\\"
         sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
         sstring &= "\\tabularnewline \n"
      Endif
   Next
   templ.Subst("riskfactors", sstring)
   
   sstring = ""
   Last_Key = 0
   '-----------------------------------------------
   'Family History
   '    Construct something like this
   '    Mother (Hilda smith)
   '    Hypertension onset age 50    
   '    Carcinoma Breast onset age 65 (caused death)
   '-----------------------------------------------
   
   For Each item In currentconsult!family_history
      If last_key <> item!fk_member Then
         last_key = item!fk_member
         sstring &= "\\textbf{" & item!relationship & " " & item!name & "}\\\\"
      End If
      sstring &= item!condition
      If IsNull(item!age_of_onset) Then
         sstring &= " onset?" 
      Else
         sstring &= " onset " & item!age_of_onset
      Endif
      If item!cause_of_death = True Then
         sstring &= " (caused death"
         If Not IsNull(item!age_of_death) Then
            sstring &= "-" & item!age_of_death & " yrs)"
         Else
            sstring &= ") "
         End If
      End If
      sstring &= "\\\\"
   Next
   templ.Subst("familyhistory", sstring)
   
   m = modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Height)
   If Not IsNull(m) Then
      height = m!data
      templ.Subst("height_data", m!data & "cm")
      templ.Subst("height_date", m!date)
   Else
      templ.Subst("height_data", "-")
      templ.Subst("height_date", "-") 
   Endif
   m = modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Weight)
   If Not IsNull(m) Then
      weight = m!data
      templ.Subst("weight_data", m!data & "kg")
      templ.Subst("weight_date", m!date)
   Else
      templ.Subst("weight_data", "-")
      templ.Subst("weight_date", "-")
   Endif 
   m = modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_BP)
   If Not IsNull(m) Then
      templ.Subst("bp_data", m!data & "mmHg")
      templ.Subst("bp_date", m!date)
   Else
      templ.Subst("bp_data", "-")
      templ.Subst("bp_date", "-")
   Endif
   
   r = modMeasurementsDBI.Get_Loinc_Value(currentconsult!patient!fk_patient, const.Loinc_EGFR, 1, "DESC") 'Last R by date
   If r.count Then 
      sRange = r!reference_range 
      sRange = Replace(sRange, "(", "")
      sRange = Replace(sRange, ")", "")
      templ.Subst("egfr_date", r!observation_date)
      templ.Subst("egfr_data", r!value_numeric & " (" & sRange & ")")
   Else
       templ.Subst("egfr_data", "N/A")
       templ.Subst("egfr_date", "")
   End If   
   
   Try BMI = Format((weight / (height ^ 2)) * 10000, "##.#")
   If Not Error Then
      templ.Subst("bmi_data", BMI)  
   Else 
      templ.Subst("bmi_data", "N/A")
   End If  
   Try max_ideal_weight = 25 * (height / 100) * (height / 100)
   Try min_ideal_weight = 20 * (height / 100) * (height / 100)
   If max_ideal_weight <> 0 And min_ideal_weight <> 0 Then
      templ.Subst("idealweight_data", Format(min_ideal_weight, "##") & "-" & Format(max_ideal_weight, "##") & "Kg")  
   Else 
      templ.Subst("idealweight_data", "N/A")
   End If  
   If weight <> 0 And max_ideal_weight <> 0 Then
      templ.Subst("overweight_data", Format(weight - max_ideal_weight, "##.#") & "Kg") 
   Else 
      templ.Subst("overweight_data", "N/A")
   End If  
   templ.Subst("exercise_data", "N/A")   'FIXME - no module to put this in yet
   templ.Subst("alcohol_data", "N/A")  'FIXME - no module to put this in yet
   templ.Subst("smoking_data", "N/A")   'FIXME - no module to put this in yet
   templ.Subst("waisthip_data", "N/A")   'FIXME - no module to put this in yet"
   templ.Subst("exercise_date", "")   'FIXME - no module to put this in yet
   templ.Subst("alcohol_date", "")  'FIXME - no module to put this in yet
   templ.Subst("smoking_date", "")   'FIXME - no module to put this in yet
   templ.Subst("waisthip_date", "")   'FIXME - no module to put this in yet"

   '------------------------------
   'Now do the major health issues
   '------------------------------
   sstring = ""
   For Each PH In currentconsult!past_history
      If PH!major = True And PH!risk_factor = False Then
         
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "\\textbf{" & PH!year_onset & "}" & "\\&"
         sstring &= "\\textbf{" & UCase(PH!description) & " " & sLaterality & "}\\\\"
         sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
         sstring &= "\\tabularnewline \n"
      Endif
   Next
   templ.Subst("majorhealthissues", sstring)
   sstring = ""
   For Each PH In currentconsult!past_history
      If PH!active = True And PH!risk_factor = False And PH!major = False Then
         
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "\\textbf{" & PH!year_onset & "}" & "\\&"
         sstring &= "\\textbf{" & UCase(PH!description) & " " & sLaterality & "}\\\\"
         sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
         sstring &= "\\tabularnewline \n"
      Endif
   Next
   templ.Subst("significanthealthissues", sstring)
   
   
   ' sString = ""
   '  For Each medication In currentconsult!medications
   '   If medication!active = True Then 
   '       sstring &= medication!generic & " \\& " & medication!strength & medication!form & " \\& " 
   '       sstring &= medication!instruction & " \\& " & medication!prescribed_for & "\\tabularnewline "
   '   End If  
   '  Next
   ' templ.Subst("medications", sString)
   For Each medication In currentconsult!medications
      If medication!active = True Then
         '   sSTring = medication!strength & " " & medication!form
         templ.Row(medication!generic, medication!strength, medication!instruction, medication!prescribed_for)
      End If
   Next
   templ.Table("medications")
  
   
   For Each vaccination In currentconsult!vaccinations_given
           templ.Row(vaccination!schedule, vaccination!date_given, vaccination!brand & "-" & vaccination!serial_no)
   Next
   templ.Table("vaccinations")
   For Each recall In currentconsult!recalls_logged
           templ.Row(recall!due, recall!reason)
   Next
   templ.Table("recalls")
    sstring = ""
    For Each PH In currentconsult!past_history
       If PH!active = False And PH!major = False And PH!risk_factor = False Then
    
          Select Case PH!fk_laterality
             Case const.LateralityBoth
                sLaterality = "(Bilateral)"
             Case const.LateralityLeft
                sLaterality = "(Left)"
             Case const.LateralityRight
                sLaterality = "(Right)"
             Case const.LateralityNone
                sLaterality = ""
          End Select
        sstring &= "\\textbf{" & PH!year_onset & "}" & "\\&"
        sstring &= "\\textbf{" & UCase(PH!description) & " " & sLaterality & "}\\\\"
        sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
        sstring &= "\\tabularnewline \n"
       Endif
   Next
   templ.Subst("inactivehealthissues", sstring)
   Return templ

End

Public Function Health_Summary_Construct_LaTeX_V1(currentconsult As Cconsult) As CTemplate
   
   Dim sName As String
   Dim sAddress As String
   Dim sString As String
   Dim comm As Collection 
   Dim templ As New CTemplate("hsum", "tex")
   Dim iIncomplete As Integer
   Dim sMissing As String = "**missing**"
   Dim item As Collection 
   Dim items As Collection 
   Dim r As Result
   Dim sRange As String 
   Dim height As Variant
   Dim weight As Variant
   Dim BMI As Variant
   Dim m As Collection
   Dim Last_Key As Integer
   Dim sLaterality As String  
   Dim PH As Collection 
   
   currentconsult.Refresh("family_history")
   currentconsult.Refresh("social_history")
   currentconsult.Refresh("past_history")
   currentconsult.Refresh("occupational_history")
   currentconsult.Refresh("recalls_logged")
   
   templ.Subst_common(currentconsult)
   
   For Each item In currentconsult!social_history
      templ.Subst("socialhistory", item!history)
      templ.Subst("responsibleperson", item!responsible_person)
   Next
   
   '----------------------------------
   'Construct the occupational history
   'Ian here, one needs to specific the column widths of the three items
   'as I did here (generated by Lyx)
   ' \begin{tabular}{>{\raggedright}p{2.5cm}>{\raggedright}p{2cm}>{\raggedright}p{3cm}}
   ' \textbf{Occupation} &  & \textbf{Exposures}\tabularnewline
   ' {!occupationalhistory} 
   '\end{tabular}% 
   '----------------------------------
   sstring = ""
   For Each item In currentconsult!occupational_history
      ' templ.Row(item!occupation, item!from_age & " to " & item!to_age, item!exposure & "-")
      sstring &= item!occupation & "\\&" & (item!from_age & " to " & item!to_age) & "\\&" & item!exposure & "\\tabularnewline \n"
   Next
   templ.Subst("occupationalhistory", sstring)
   '-----------------------------------------------
   'Family History
   '    Construct something like this
   '   Mother (Hilda smith)
   '   Hypertension onset age 50     templ.Row(" ", sString)
   
   '   Carcinoma Breast onset age 65 (caused death)
   'Ian: the problem is that whatever is constructed here, after the first line return \\
   'in the outputted file, the rest ends up back in the social history column of the page.
   '-----------------------------------------------
   sstring = ""
   Last_Key = 0
   
   For Each item In currentconsult!family_history
      If last_key <> item!fk_member Then
         last_key = item!fk_member
         sstring &= "\\textbf{" & item!relationship & "}" & item!name & "\\\\"
      End If
      sstring &= item!condition
      Try sstring &= " onset " & item!age_of_onset
      If item!cause_of_death = True Then
         sstring &= " (caused death"
         If Not IsNull(item!age_of_death) Then
            sstring &= "-" & item!age_of_death & " yrs)"
         Else
            sstring &= ") "
         End If
      End If
      sstring &= "\\\\"
   Next
   templ.Subst("familyhistory", sstring)
   
   m = modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Height)
   If Not IsNull(m) Then
      height = m!data
      templ.Subst("height_data", m!data)
      templ.Subst("height_date", m!date)
   Else
      templ.Subst("height_data", "-")
      templ.Subst("height_date", "-") 
   Endif
   m = modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Weight)
   If Not IsNull(m) Then
      weight = m!data
      templ.Subst("weight_data", m!data)
      templ.Subst("weight_date", m!date)
   Else
      templ.Subst("weight_data", "-")
      templ.Subst("weight_date", "-")
   Endif 
   m = modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_BP)
   If Not IsNull(m) Then
      templ.Subst("bp_data", m!data)
      templ.Subst("bp_date", m!date)
   Else
      templ.Subst("bp_data", "-")
      templ.Subst("bp_date", "-")
   Endif
   r = modMeasurementsDBI.Get_Loinc_Value(currentconsult!patient!fk_patient, const.Loinc_EGFR, 1, "DESC") 'Last R by date
   If r.count Then 
      sRange = r!reference_range 
      sRange = Replace(sRange, "(", "")
      sRange = Replace(sRange, ")", "")
      templ.Subst("egfr_date", r!observation_date)
      templ.Subst("egfr_data", r!value_numeric & " (" & sRange & ")")
   End If   
   
   Try BMI = Format((weight / (height ^ 2)) * 10000, "##.#")
   If Not Error Then
      templ.Subst("bmi_data", BMI)  
   Else 
      templ.Subst("bmi_data", "N/A")
   End If   
   '------------------------------
   'Now do the major health issues
   '------------------------------
   sstring = ""
   For Each PH In currentconsult!past_history
      If PH!major = True And PH!risk_factor = False Then
         
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "\\textbf{" & PH!year_onset & "}" & "\\&"
         sstring &= "\\textbf{" & UCase(PH!description) & " " & sLaterality & "}\\\\"
         sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
         sstring &= "\\tabularnewline \n"
      Endif
   Next
   templ.Subst("majorhealthissues", sstring)
   sstring = ""
   For Each PH In currentconsult!past_history
      If PH!active = True And PH!risk_factor Then
         
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sstring &= "\\textbf{" & PH!year_onset & "}" & "\\&"
         sstring &= "\\textbf{" & UCase(PH!description) & " " & sLaterality & "}\\\\"
         sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
         sstring &= "\\tabularnewline \n"
      Endif
   Next
   templ.Subst("significanthealthissues", sstring)
   
   '  sstring = ""
   '  For Each PH In currentconsult!past_history
   '     If PH!active = False And PH!major = False And PH!risk_factor = False Then
   '  
   '        Select Case PH!fk_laterality
   '           Case const.LateralityBoth
   '              sLaterality = "(Bilateral)"
   '           Case const.LateralityLeft
   '              sLaterality = "(Left)"
   '           Case const.LateralityRight
   '              sLaterality = "(Right)"
   '           Case const.LateralityNone
   '              sLaterality = ""
   '        End Select
   '      sstring &= "\\textbf{" & PH!year_onset & "}" & "\\&"
   '      sstring &= "\\textbf{" & UCase(PH!description) & " " & sLaterality & "}\\\\"
   '      sstring &= "\\text{" & PH!condition_summary & ". " & PH!management_summary & "." & "}"
   '      sstring &= "\\tabularnewline \n"
   '     Endif
   ' Next
   ' templ.Subst("inactivehealthissues", sstring)
   
   Return templ

End

Public Function Health_Summary_Construct_html(currentconsult As Cconsult) As String
   '--------------------------------------------------------
   'Constructs a health summmary which is really a care plan
   '
   'Essentially this consists of the following code, which 
   'creates a number of row definitions, and encapsulates
   'the whole lot within an outer table definition
   '
   'each 'cell' mentioned below  is a row definition 
   'with two columns:
   '
   ' "<TR VALIGN=TOP>"
   '  "<TD WIDTH=col1_width>"
   '     "<P>col1</P>"
   '  "</TD>"
   '  "<TD WIDTH=col2_width>"
   '      "<P>col2</P>"
   '  "</TD>"'c'c'c
   ' "</TR>" 'c
   ' Where col1 contains either text or another table
   ' Where col2 contains eitehr text or another table
   ' the parameteters col_width are substituted appropriatly
   '
   ' <HTML>
   '      <TABLE>
   '        <TD>
   '           2 cells - social history/family history
   '        </TD>
   '        <TD>
   '           2 cells - with these headings
   '                    MAJOR PROBLEM - RISK FACTORS
   '        </TD>
   '        <TD>
   '           2 cells containmax_ideal_weighting
   '               Tables major problems/Table Risk factors
   '        </TD>
   '        <TD>
   '           2 cells - with these headings
   '                  ACTIVE PROBLEMS - SIGNIFICANT PROBLEMS
   '        </TD>
   '        <TD>
   '           2 cells -'c left = 'Reminders logged
   '                   'c- right = table of reminders logged
   '        </TD>
   
   '     </TABLE>
   ' </HTML>
   
   Dim sHTMLHeader As String
   Dim shtml As String
   Dim sTableStart As String
   Dim sTableEnd As String
   Dim sHTMLEnd As String
   Dim sRowTemplate As String
   Dim sRowTemplate1 As String 
   Dim sRowTemplate2 As String 
   Dim sSocialHistory As String
   Dim sResponsiblePerson As String
   Dim sOccupation As String
   Dim sFamilyHistory As String
   Dim FM As Collection
   Dim PH As Collection
   Dim TeamCareMembers As String[]
   Dim TeamCaremember As String
   Dim RC As Collection
   Dim sRow As String
   Dim sTable As String
   Dim sTableMeasurements As String
   Dim sTableRiskFactors As String
   Dim STempString As String
   Dim sTemp As String
   Dim sString As String
   Dim sText As String
   Dim OH As New Collection 
   Dim OE As Collection 
   Dim sData As String[]
   Dim height As Integer
   Dim weight As Variant
   Dim BMI As Variant
   Dim max_ideal_weight As Variant
   Dim min_ideal_weight As Variant
   Dim last_key As Integer
   Dim last_sub_key As Integer
   Dim current_key As Integer
   Dim collection_member As Collection
   Dim all_Collections As Collection
   Dim sLaterality As String
   '----------------------------------
   'Force a refresh of all information
   '----------------------------------
   currentconsult.Refresh("family_history")
   currentconsult.Refresh("social_history")
   'currentconsult.Refresh("measurements")
   currentconsult.Refresh("past_history")
   currentconsult.Refresh("occupational_history")
   currentconsult.Refresh("recalls_logged")
   
   'sHTMLHeader = "<html><head><meta name='qrichtext' content='1' /></head><body style='font-size:16pt;font-family:Bitstream Vera Sans'> <br><br>"
   sHTMLHeader = "<html>"
   sTableStart = "<table border=%BORDER% cellpadding=0 cellspacing=%cellspacing% width=100% >"
   sTableEnd = "</table>"
   sHTMLEnd = "</body></html>"
   
   ' sRowTemplate = ""
   '   "<TR VALIGN=TOP>"
   '       "<TD WIDTH=col1_width>"
   '          "<P>col1</P>"
   '       "</TD>"
   '       "<TD WIDTH=col2_width>"
   '           "<P>col2</P>"
   '       "</TD>"
   '      "</TR>" 
   ' <TD WIDTH=50%>
   '          <P STYLE="background: #008000"><BR>
   '          </P>
   '       </TD>
   
   sRowTemplate = ""
   "<TR VALIGN=TOP>"
   "<TD WIDTH=col1_width>"
   
   "col1<BR>"
   "</TD>"
   "<TD WIDTH=col2_width>"
   
   "col2<BR>"
   "</TD>"
   "</TR>" 'STYLE = "background: #008000" >
   sRowTemplate1 = ""
   "<TR VALIGN=TOP>"
   "<TD WIDTH=col1_width>"
   "col1<BR>"
   "</TD>"
   "<TD WIDTH=col2_width>"
   "col2<BR>"
   "</TD>"
   "<TD WIDTH=col3_width>"
   "col3<BR>"
   "</TD>"
   "</TR>"  
   '------------------------------
   'A row template with one column
   '------------------------------
   sRowTemplate2 = ""
   "<TR VALIGN=TOP>"
   "<TD WIDTH=100%>"
   "col1<BR>"
   "</TD>"
   "</TR>"   
   '-------------------------------------------
   'Firstly build the social history and habits
   '-------------------------------------------
   'shtml = sHTMLHeader & "<P ALIGN=CENTER><B>HEALTH SUMMARY</B></P>" & sTableStart   
   shtml = sHTMLHeader & "<DIV ALIGN=CENTER><H3>Health Summary</H3></DIV>" & sTableStart 
   sTableStart = Replace(sTableStart, "%cellspacing%", "5")
   sTableStart = Replace(sTableStart, "%BORDER%", "1")
   '- - - - - - -
   'Allergy
   '-------
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "55%") 'pcol1 has the year noted
   sRow = Replace(sRow, "col2_width", "45%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>ALLERGIES AND SENSITIVITIES</B></P>")
   sRow = Replace(sRow, "col2", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B></B></P>")
   shtml &= sRow 
   'FIXME, PUT IN SOME REAL DATA
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "55%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "45%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "Nil Recorded")
   sRow = Replace(sRow, "col2", "")
   shtml &= sRow 
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "55%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "45%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>SOCIAL HISTORY</B></P>")
   sRow = Replace(sRow, "col2", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>FAMILY HISTORY</B></P>")
   shtml &= sRow 
   ' 
   ' sRow = sRowTemplate
   ' sRow = Replace(sRow, "col1_width", "55%")
   ' sRow = Replace(sRow, "col2_width", "45%")
   ' sSocialHistory = "<small><B>SOCIAL HISTORY</B><BR>"
   all_Collections = currentconsult!social_history
   For Each collection_member In all_Collections
      sSocialHistory &= "<small>" & collection_member!history & "</small><BR>"
      ' sSocialHistory &= collection_member!history & "<BR>"
      
      '---------------------------------
      'Insert responsible person details
      '---------------------------------
      sResponsiblePerson = "<small><B>RESPONSIBLE PERSON (Please contact in emergency)</B><BR>"
      ' sResponsiblePerson = "<B>RESPONSIBLE PERSON(Please contact In emergency)</B><BR>"
      sResponsiblePerson &= collection_member!responsible_person & "</small><BR>"
      '  sResponsiblePerson &= collection_member!responsible_person & "<BR>"
   Next
   '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   'construct an occupational history
   '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   
   sOccupation = "<small><B>OCCUPATIONAL HISTORY</B><BR>"
   Last_key = 0 
   For Each collection_member In currentconsult!occupational_history 
      If Last_key <> collection_member!fk_occupation Then
         If Right(sOccupation) = "," Then
            sOccupation = Left(sOccupation, Len(sOccupation) - 1)
         End If   
         '-----------------------------------------------------------------
         'If this is the first row in the view for an occupation, show that
         '-----------------------------------------------------------------
         Last_key = collection_member!fk_occupation 
         sString = "<BR><B>" & collection_member!occupation & "</B>"
         If collection_member!current = True Then
            sString &= " [Current]"
         Else
            If collection_member!retired = True Then 
               sString &= " [Retired]"
            End If
         End If
         '-----------------------
         'work out the age string
         '-----------------------
         
         If Not IsNull(collection_member!from_age) Then
            sString &= " from age " & collection_member!from_age & "yrs" 
            If Not IsNull(collection_member!to_age) Then
               sString &= " to age " & collection_member!to_age & "yrs" 
            End If
         Else
            If Not IsNull(collection_member!to_age) Then
               sString &= " from age -? to age " & collection_member!to_age
            End If
         End If
         sOccupation &= sString    ' & "<BR>"
         '-------------------------
         'First exposure?add prefix
         '-------------------------
         If collection_member!exposure <> "" Then
            sOccupation &= "  - workplace exposure: " & collection_member!exposure & ","
         End If
      Else
         '--------------------------------------------------------
         'If the same occupation, just add any more work exposures
         '--------------------------------------------------------
         If collection_member!exposure <> "" Then
            sOccupation &= collection_member!exposure & ","
         End If
      End If
      
   Next
   If Right(sOccupation) = "," Then
      sOccupation = Left(sOccupation, Len(sOccupation) - 1)
   End If   
   sOccupation &= "</small>"
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "55%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "45%") 'col 2 has the rest
   sRow = Replace$(sRow, "col1", sSocialHistory & "<BR>" & sResponsiblePerson & "<BR>" & sOccupation)
   '------------------
   'the family history
   '------------------
   sFamilyHistory &= "<small>"
   Last_key = 0
   For Each FM In currentconsult!family_history
      If last_key <> FM!fk_member Then
         last_key = FM!fk_member
         sFamilyHistory &= "<B>" & FM!relationship & " " & FM!name & "</B><BR>"
         '----------------------------------------------------
         'Construct something like this
         ' Mother (Hilda smith)
         '   Hypertension onset age 50
         '   Carcinoma Breast onset age 65 (caused death)
         '----------------------------------------------------
      End If
      '--------------------------
      'One condition per view row
      '--------------------------
      sFamilyHistory &= FM!condition
      Try sFamilyHistory &= " onset " & FM!age_of_onset
      If FM!cause_of_death = True Then
         sFamilyHistory &= " (caused death"
         If Not IsNull(FM!age_of_death) Then
            sFamilyHistory &= "-" & FM!age_of_death & " yrs)"
         Else
            sFamilyHistory &= ") "
         End If
      End If
      
      ' If Not IsNull(FM!age_of_onset) Then
      
      '  If FM!age_of_onset Or FM!cause_of_death Then 
      '   If FM!age_of_onset Then
      '    sFamilyHistory &= " onset " & FM!age_of_onset
      '  End If
      '   If FM!cause_of_death Then
      '      sFamilyHistory &= " (caused death"
      '  If FM!age_of_death Then
      '      sFamilyHistory &= "-" & FM!age_of_death & " yrs)"
      '  Else
      '      sFamilyHistory &= ")"
      '  End If
      ' End If
      'End If  
      sFamilyHistory &= "<BR>" 
   Next
   sFamilyHistory &= "</small>"
   sRow = Replace$(sRow, "col2", sFamilyHistory)
   shtml &= sRow & "<BR>"
   
   '----------------------------------------------------------
   'Next do the major health issues and Risk Factor Management
   'by building a table of rows e.g
   '1988 Hypertension
   '     - levels up to 190/100
   '     - managment plan
   'First, the headings
   '-----------------------------------------------------------
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "55%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "45%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>MAJOR HEALTH ISSUES</B></P>")
   sRow = Replace(sRow, "col2", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>MEASUREMENTS</B></P>")
   shtml &= sRow 
   '-----------------------------------------------------------
   'Next, create the outer table:
   '  left side will contain an inner table or multiple rows
   '  on condition
   '  the right side will contain an inner table of multiple
   '  rows of risk factor management
   '  we will later substitute these names for tables
   'fix me I keep putting in stupid  or duplicated bits of html
   ' when developing quickly
   '---------------------------------------------------------- 
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "50%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "50%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "table_left")
   sRow = Replace(sRow, "col2", "table_right")
   'temp code
   '--------------------------------------------------
   'Now replace the right hand column with a single
   'table with two rows, the top row to be later
   'replaced with the measurements table, the bottom
   'row to be later replaced with a risk factors table
   '--------------------------------------------------
   sTable = sTableStart & sRowTemplate2   'row with a single full width column
   sTable = Replace(sTable, "%BORDER%", "1")
   sTable = Replace(sTable, "col1", "Measurements_Table")
   sTable &= sRowTemplate2
   sTable = Replace(sTable, "col1", "RiskFactors_Table")
   sTable &= sTableEnd
   sRow = Replace(sRow, "table_right", sTable)
   
   shtml &= sRow & sTableEnd
   '----------------------------------------------------------------
   'Now create the inner table which will replace "table_left"
   'Now add the patients major medical conditions - this is a table
   'and we will give it a border of 1 pixel
   '----------------------------------------------------------------
   sTable = sTableStart
   sTable = Replace(sTable, "%BORDER%", "1")
   sTable = Replace(sTable, "%cellspacing%", "0")
   '---------------------------------------------------------------
   'Now create some rows, incrementally adding these into the table
   '----------------------------------------------------------------
   For Each PH In currentconsult!past_history
      If PH!major = True And PH!risk_factor = False Then
         sRow = sRowTemplate
         sRow = Replace(sRow, "col1_width", "10%") 'col1 has the year noted
         sRow = Replace(sRow, "col2_width", "90%") 'col 2 has the rest
         
         sRow = Replace(sRow, "col1", "<B>" & PH!year_onset & "</B>") 
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sSTring = "<B>" & UCase(PH!description) & " " & sLaterality & "</B><BR>"
         sString &= "<small>"
         sString &= PH!condition_summary & ". "
         ' sString &= "<B><I>Management Plan </I></B>"
         sString &= PH!management_summary & "."  ' & "<BR>"
         '------------------------------------------------------
         'insert any team care members and their responsibilties
         '------------------------------------------------------
         If PH!team_care_members <> "" Then
            sString &= "<B><I>Team Care Members </I></B><BR>"
            For Each TeamCaremember In PH!TeamCareMembers
               sSTring &= "-" & TeamCaremember & "<BR>"
            Next 
         End If
         sRow = Replace(sRow, "col2", sString)
         sTable &= sRow
      End If
   Next
   '----------------------------------------------------------------
   'Now finish off the table definition and place this table, within
   'the parent table
   '----------------------------------------------------------------
   sTable &= sTableEnd
   shtml = Replace(shtml, "table_left", sTable)
   
   '----------------------------------------------------------------
   'Now create the inner table which will replace "table_right"
   'which will contain risk factors - this is a table
   'and we will give it a border of 1 pixel
   '----------------------------------------------------------------
   
   sTable = sTableStart
   sTable = Replace(sTable, "%BORDER%", "1")
   sTable = Replace(sTable, "%cellspacing%", "0")
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "25%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "75%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<B>Smoking</B>")
   
   sString = sRow
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "25%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "75%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<B>Alcohol</B>")
   sString &= sRow
   
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "25%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "75%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<B>Other Drugs</B>")
   sString &= sRow
   '------
   'height
   '------
   sRow = sRowTemplate1
   sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "20%") 'col 2 
   sRow = Replace(sRow, "col3_width", "45%") 'col 3 has the rest
   sRow = Replace(sRow, "col1", "<B>Height</B>")
   
   currentconsult.Refresh("measurements")
   If currentconsult!measurements.count Then 
      
      sData = New String[]
      Try SData = Split(modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Height), "|")
      
      If sData.count Then
         height = sData[0]
         sRow = Replace(sRow, "col2", "<B>" & sData[0] & "cm</B>")
         sRow = Replace(sRow, "col3", "(" & sData[1] & ")")
      Else
         sRow = Replace(sRow, "col2", "N/A")
         sRow = Replace(sRow, "col3", "")
      End If
      sString &= sRow
      '------
      'Weight
      '------
      sRow = sRowTemplate1
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "20%") 'col 2 has the rest
      sRow = Replace(sRow, "col3_width", "45%") 'col 3 has the rest
      sRow = Replace(sRow, "col1", "<B>Weight</B>")
      sData = New String[]
      Try SData = Split(modMeasurementsDBI.Measurement_Get_Latest(currentconsult!measurements, const.Measurement_Weight), "|")
      If SData.Count Then
         weight = sData[0]
         sRow = Replace(sRow, "col2", "<B>" & sData[0] & "Kg</B>")
         sRow = Replace(sRow, "col3", "(" & sData[1] & ")")
      Else
         sRow = Replace(sRow, "col2", "N/A")
         sRow = Replace(sRow, "col3", "")
      End If
      sString &= sRow
      '---------------------------------
      'Now Calculate the BMI if possible
      '---------------------------------
      sRow = sRowTemplate1
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "20%") 'col 2 has the rest
      sRow = Replace(sRow, "col3_width", "45%") 'col 3 has the rest
      sRow = Replace(sRow, "col1", "<B>BMI</B>")
      Try BMI = Format((weight / (height ^ 2)) * 10000, "##.#")
      sRow = Replace(sRow, "col2", "<B>" & BMI & "</B>")
      sRow = Replace(sRow, "col3", "")
      sString &= sRow
      '---------
      'waist/hip
      '---------
      sRow = sRowTemplate1
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "20%") 'col 2 has the rest
      sRow = Replace(sRow, "col3_width", "45%") 'col 3 has the rest
      sRow = Replace(sRow, "col1", "<B>Waist/Hip</B>")
      sRow = Replace(sRow, "col3", "")
      sString &= sRow
      '---------------------------------------------------------
      'Kg's overweight BMI * H2 = max ideal weight - approximate
      '---------------------------------------------------------
      Try max_ideal_weight = 25 * (height / 100) * (height / 100)
      Try min_ideal_weight = 20 * (height / 100) * (height / 100)
      sRow = sRowTemplate1
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "20%") 'col 2 has the rest
      sRow = Replace(sRow, "col3_width", "45%") 'col 3 has the rest
      sRow = Replace(sRow, "col1", "<B>Ideal Weight</B>")
      If max_ideal_weight Then
         sRow = Replace(sRow, "col2", "<B>" & Format(min_ideal_weight, "##") & "-" & Format(max_ideal_weight, "##") & "Kg</B>")
         sRow = Replace(sRow, "col3", "")
      Else
         sRow = Replace(sRow, "col2", "N/A")
         sRow = Replace(sRow, "col3", "")
      End If
      sString &= sRow
      '-------------------------------------
      'Now the approximate amount overweight
      '-------------------------------------
      sRow = sRowTemplate
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "30%") 'col 2 has the rest
      'sRow = Replace(sRow, "col1", "<B>Overweight</B>")
      If Not IsNull(BMI) Then
         If Val(BMI) > 25 Then
            If max_ideal_weight Then
               sRow = Replace(sRow, "col1", "<B>Overweight</B>")
               sRow = Replace(sRow, "col2", "<B>" & Format(weight - max_ideal_weight, "##.##") & "Kg</B>")
            Else
               sRow = Replace(sRow, "col2", "N/A")
            End If
         End If
         If Val(BMI) < 20 Then
            If min_ideal_weight Then
               sRow = Replace(sRow, "col1", "<B>Underweight</B>")
               sRow = Replace(sRow, "col2", "<B>" & Format(min_ideal_weight - weight, "##.##") & "-" & Format(max_ideal_weight - weight, "##.##") & "Kg</B>")
            Else
               sRow = Replace(sRow, "col2", "N/A")
            End If
         End If
      Else
         sRow = Replace(sRow, "col2", "N/A")
      End If
      
      sString &= sRow
      
      sRow = sRowTemplate
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "75%") 'col 2 has the rest
      sRow = Replace(sRow, "col1", "<B>Exercise</B>")
      sString &= sRow
      
      sRow = sRowTemplate1
      sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "30%") 'col 2 has the rest
      sRow = Replace(sRow, "col3_width", "45%")  'col 2 has the rest
      sRow = Replace(sRow, "col1", "<B>BP</B>")
      
      If sData.count Then
         sRow = Replace(sRow, "col2", "<B>" & sData[0] & "</B>")
         sRow = Replace(sRow, "col3", "(" & sData[1] & ")")
      Else
         sRow = Replace(sRow, "col2", "NA")
         sRow = Replace(sRow, "col3", "")
         
      End If
      sString &= sRow
   End If
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "35%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "75%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<B>eGFR</B>")
   'fix up this bad hack
   all_Collections = modMeasurementsDBI.Measurements_get_loinc(currentconsult!patient!fk_patient, const.Loinc_EGFR, 1)
   
   If all_Collections.count Then
      For Each collection_member In all_Collections
         sRow = Replace(sRow, "col2", "<B>" & collection_member!measurement & "ml/Min</B>")
         sRow = Replace(sRow, "col3", "(" & collection_member!reference_range & ")")
      Next
   Else
      sRow = Replace(sRow, "col2", "N/A")
      sRow = Replace(sRow, "col3", "")
   End If
   sString &= sRow
   'fish
   sTable &= sSTring 
   sTable &= sTableEnd
   
   shtml = Replace(shtml, "Measurements_Table", sTable) ' & "<B>RISK FACTOR MANAGMENT</B><BR>")
   
   '---------------------------------------------------------
   'Now make a table for the risk factors and insert it into 
   'the RiskFactors_Row placer
   '---------------------------------------------------------
   sTable = sTableStart 
   sTable &= sRowTemplate2
   'FIXME - couldn't get heading to centre align without paragraph which I didn't wnat
   
   sTable = Replace(sTable, "col1", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>RISK FACTORS</B></P>")
   Log.DebugMsg(shtml)
   For Each PH In currentconsult!past_history
      If PH!risk_factor = True Then
         sRow = sRowTemplate2
         '-----------------------------------
         'The heading for the risk factor e.g
         'Hyperension  (1986)
         '------------------------------------
         sString = ""
         sSTring &= "<B>" & UCase(PH!description) & "-" & PH!year_onset & "</B><BR>"
         sString &= "<small>"
         sString &= PH!condition_summary & "."
         
         If PH!management_summary <> "" Then
            '  sString &= "<BR><B>Management Summary</B><BR>" & PH!management_summary
            sString &= PH!management_summary & "."
         End If
         sString &= "</small>"
         sRow = Replace(sRow, "col1", sString)
         sTable &= sRow                         'add each row to the table
      End If
   Next
   sTable &= sTableEnd
   shtml = Replace(shtml, "RiskFactors_Table", sTable)
   '----------------------------------------------------------
   'Next other active problems and significant past history
   'the display is much simpler eg
   '1988 Solar Damage
   '1990  Osteoathritis Back
   ' create the outer table:
   '  left side will contain an inner table or multiple rows
   '  of active but not major problems
   '  the right side will contain an inner table of multiple
   '  rows of significant past problems
   '  we will later substitute these names for tables
   '---------------------------------------------------------- 
   sTable = sTableStart
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "50%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "50%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>OTHER ACTIVE PROBLEMS</B></P>")
   sRow = Replace(sRow, "col2", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>PAST PROBLEMS</B></P>")
   sTable &= sRow & sTableEnd
   shtml &= sTable
   
   sRow = sRowTemplate
   sRow = Replace(sRow, "col1_width", "50%") 'col1 has the year noted
   sRow = Replace(sRow, "col2_width", "50%") 'col 2 has the rest
   sRow = Replace(sRow, "col1", "table_left")
   sRow = Replace(sRow, "col2", "table_right")
   shtml &= sTableStart & sRow & sTableEnd
   '----------------------------------------------------------------
   'Now create the inner table which will replace "table_left"
   'Now add the patients major medical conditions - this is a table
   'and we will give it a border of 1 pixel
   '----------------------------------------------------------------
   sTable = sTableStart
   sTable = Replace(sTable, "%BORDER%", "1")
   sTable = Replace(sTable, "%cellspacing%", "0")
   '---------------------------------------------------------------
   'Now create some rows, incrementally adding these into the table
   '----------------------------------------------------------------
   For Each PH In currentconsult!past_history
      If PH!active = True And PH!risk_factor = False Then
         sRow = sRowTemplate
         sRow = Replace(sRow, "col1_width", "10%") 'col1 has the year noted
         sRow = Replace(sRow, "col2_width", "90%") 'col 2 has the rest
         Debug PH!year_onset, PH!description
         sRow = Replace(sRow, "col1", "<B>" & PH!year_onset & "<B>") 
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sSTring = "<B>" & UCase(PH!description) & " " & sLaterality & "</B><BR>"
         sString &= "<small>"
         sString &= PH!condition_summary 
         sString &= "</small>"
         sRow = Replace(sRow, "col2", sString)
         sTable &= sRow
      End If
   Next
   '----------------------------------------------------------------
   'Now finish off the table definition and place this table, within
   'the parent table
   '----------------------------------------------------------------
   sTable &= sTableEnd
   shtml = Replace(shtml, "table_left", sTable)
   '----------------------------------------------------------------
   'Now create the inner table which will replace "table_right"
   'Now add the patients significant medical conditions 
   '----------------------------------------------------------------
   sTable = sTableStart
   sTable = Replace(sTable, "%BORDER%", "1")
   sTable = Replace(sTable, "%cellspacing%", "0")
   '---------------------------------------------------------------
   'Now create some rows, incrementally adding these into the table
   '----------------------------------------------------------------
   For Each PH In currentconsult!past_history
      If PH!active = False And PH!major = False And PH!risk_factor = False Then
         sRow = sRowTemplate
         sRow = Replace(sRow, "col1_width", "10%") 'col1 has the year noted
         sRow = Replace(sRow, "col2_width", "90%") 'col 2 has the rest
         sRow = Replace(sRow, "col1", "<B>" & PH!year_onset & "<B>") 
         Select Case PH!fk_laterality
            Case const.LateralityBoth
               sLaterality = "(Bilateral)"
            Case const.LateralityLeft
               sLaterality = "(Left)"
            Case const.LateralityRight
               sLaterality = "(Right)"
            Case const.LateralityNone
               sLaterality = ""
         End Select
         sSTring = "<B>" & UCase(PH!description) & " " & sLaterality & "</B><BR>"
         sString &= "<small>"
         sString &= PH!condition_summary 
         sString &= "</small>"
         sRow = Replace(sRow, "col2", sString)
         sTable &= sRow
      End If
   Next
   '----------------------------------------------------------------
   'Now finish off the table definition and place this table, within
   'the parent table
   '----------------------------------------------------------------
   sTable &= sTableEnd
   shtml = Replace(shtml, "table_right", sTable)
   'temporary fudge as we don't have the data for stuff yet int
   'the database (the risk factors), replace all remaining 'col2'
   shtml = Replace(shtml, "col2", "N/A")
   '---------------------------------
   'Next add any reminders or recalls
   '---------------------------------
   sRow = sRowTemplate2
   sRow = Replace(sRow, "col1_width", "100%") 'col1 has the yeaeasygp-rtr noted
   sRow = Replace(sRow, "col1", "<P STYLE = 'background: #D5D1D5' ALIGN=CENTER><B>RECALLS AND REMINDERS</B></P>")
   
   shtml &= SrOW
   'shtml &= "<small><B>REMINDERS LOGGED</B><BR>"
   
   sTable = sTableStart 
   sTable = Replace(sTable, "%BORDER%", "1")
   sTable = Replace(sTable, "%cellspacing%", "0")
   For Each collection_member In currentconsult!recalls_logged
      sRow = sRowTemplate
      sRow = Replace(sRow, "col1_width", "30%") 'col1 has the year noted
      sRow = Replace(sRow, "col2_width", "70%") 'col 2 has the rest
      
      sRow = Replace(sRow, "col1", "<B><small>" & collection_member!reason & "<B>")
      sstring = "Due: " & collection_member!due 
      sString &= " (Logged by " & collection_member!wholename & "</small>)"
      sRow = Replace(sRow, "col2", sString)
      sTable &= sRow
   Next
   sTable &= sTableEnd
   shtml &= sTable
   '------------------------------------------
   'Finally finish off the main table and page
   '------------------------------------------
   shtml = shtml & sTableEnd & sHTMLEnd
   'I left the borders in to see what I was doing, remove them
   shtml = Replace(shtml, "border=1", "border=0")
   shtml = Replace(shtml, "%BORDER%", "0")
   Return shtml
   
End

Public Function CoverSheet_Construct_HTML(currentconsult As Cconsult) As CTemplate
   '-------------------------------------------------------------------------
   'PURPOSE: Contructs a request form in html by using a template and
   '         substituting the appropriate information
   'note that patient.name etc don't mean anything, just used for readability
   'At the top of the page we have in the template, which will show on the 
   'left hand side of the form the tags provider.branch etc.
   'This is the Head office of the default provider (could be the only address)
   'At the top of the page on the right hand side we have default.branch
   'This the default branch user could be sending most patients to, but this 
   'could be the same as the Provider.Branch if a single address
   '-------------------------------------------------------------------------
   
   Dim templ As CTemplate
   Dim x As Integer
   Dim comm As Collection 
   Dim sHtml As String
   Dim sString As String
   Dim sImagePath As String
   Dim pic As Picture
   Dim cc As String 
   Dim branch As Collection 
   Dim branchlocations As String
   
   templ = New CTemplate(modHTML.Exported_Front_Page_Template)
   '---------------------------------------------------------
   'Substitute appropriate information into the form template
   'first the common stuff like practice details, dr details
   '---------------------------------------------------------
   templ.Subst_common(currentconsult)
   Return templ
   
End

Public Function Tasks_summary_Construct_html(task As Collection) As String
   '-------------------------------------------------------
   'Construct html +/- Audit trail of any outstanding tasks
   '------------------------------------------------------- 

   Dim sHtml As String
   '  Dim task As Collection 
   Dim sString As String = ""
   Dim fk_document As Integer = Task!fk_row
   
   ' For Each task In currentconsult!staff_tasks
   sHtml = modArchiveDocumentsDBI.Staff_Tasks_Document_Audit_Trail(fk_document)
   shtml &= "<HTML><BODY><TABLE><BR><B>Document Actioning</B><BR>" & modHTML.HTML_Template_Audit_Row_Heading() 
   shtml &= modAudit.MakeTrail("documents.documents", fk_document)
   shtml &= "</TABLE>"
   shtml &= "</BODY></HTML>"
   ' Next 
   Return shtml

End

Public Function ReferralLetter_summary_construct_html(currentconsult As Cconsult) As String
   
   Dim sHtml As String
   Dim referral As Collection 
   Dim sString As String = ""
   Dim sRow_Template As String = ""
   
   "<COL WIDTH=10%>"
   "<COL WIDTH=40%>"
   "<COL WIDTH=50%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=10%>"
   "%consult_date<BR>"
   "</TD>"
   "<TD WIDTH=40%>"
   "%to<BR>"
   "</TD>"
   "<TD WIDTH=50%>"
   "%reason<BR>"
   "</TD>"
   "</TR>" 
   shtml = "<HTML><BODY><DIV ALIGN=CENTER><H3>Summary of Referral Letters</H3><DIV><TABLE>"
   shtml &= sRow_Template
   sHtml = Replace(shtml, "%consult_date", "<B>Date</B>")
   sHtml = Replace(shtml, "%to", "<B>To</B>")
   sHtml = Replace(shtml, "%reason", "<B>Reason</B>")
   '---------------------------------------------------------
   'Note - imported letters won't have tag's = contents col 3
   '---------------------------------------------------------
   For Each referral In currentconsult!referrals_written
      shtml &= sRow_Template 
      If referral!surname Then
         sString = referral!title & " " & referral!wholename
      Else
         sString = referral!organisation
      End If
      shtml = Replace(shtml, "%consult_date", modUtil.Format_Date(referral!date_referral))
      If sSTring = "" Then
         shtml = Replace(shtml, "%to", "")
      Else 
         shtml = Replace(shtml, "%to", sSTring)
      End If
      If Not IsNull(referral!tag) Then
         shtml = Replace(shtml, "%reason", referral!tag)
      End If
   Next
   Return sHtml & "</TABLE></BODY></HTML>"
   
End

Public Function Results_Summary_Construct_HTML(currentconsult As CConsult) As String 
   
   Dim R As Collection 
   Dim sString As String
   
   For Each R In currentconsult!results_received
      sString &= R!html
   Next
   Return sString
   
End

Public Function Requests_summary_construct_html(currentconsult As CConsult) As String
   '----------------------------------------------
   'make up a html summary of all requests ordered
   '----------------------------------------------
   
   Dim current_form_fk As Integer
   Dim last_form_fk As Integer
   Dim sHTml As String 
   Dim request As Collection 
   Dim sRow_Template As String = ""
   
   "<COL WIDTH=89>"
   "<COL WIDTH=319>"
   "<COL WIDTH=379>"
   "<COL WIDTH=145>"
   "<COL WIDTH=100>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=89>"
   "%request_date<BR>"
   "</TD>"
   "<TD WIDTH=450>"
   "%organisation<BR>"
   "</TD>"
   "<TD WIDTH=500>"
   "%request<BR>"
   "</TD>"
   "<TD WIDTH=200>"
   "%notes<BR>"
   "</TD>"
   "</TR>"
   
   ' shtml = "<HTML><BODY><P><B>REQUESTS ORDERED</B></P><TABLE><small>"
   shtml = "<HTML><BODY<DIV ALIGN=CENTER><H3>Requests Ordered</H3><DIV><TABLE><small><small>"
   sHtml &= sRow_Template
   ' sHtml = Replace(shtml, "%consult_date", "<B>Ordered On</B>")
   sHtml = Replace(shtml, "%request_date", "<B>Requested</B>")
   sHtml = Replace(shtml, "%organisation", "<B>Provider</B>")
   sHtml = Replace(shtml, "%request", "<B>Request(s)</B>")
   sHtml = Replace(shtml, "%notes", "<B>Notes</B>")
   ' sHtml = Replace(shtml, "%result_available", "<B>Back</B>")
   sHTML &= "<small>"
   '----------------------------------------------------------------
   'the requests_ordered collection has multiple lines per form, one
   'for each request, so just show the summary
   '-----------------------------------------------------------------
   For Each request In currentconsult!requests_ordered
      current_form_fk = request!fk_form
      If last_form_fk <> current_form_fk Then
         last_form_fk = request!fk_form
         sHtml &= sRow_Template
         sHtml = Replace(shtml, "%consult_date", modUtil.Format_Date(request!consult_date))
         sHtml = Replace(shtml, "%request_date", modUtil.Format_Date(request!date))
         sHtml = Replace(shtml, "%organisation", request!organisation)
         sHtml = Replace(shtml, "%request", request!requests_summary)
         sHtml = Replace(shtml, "%notes", request!notes_summary)
         If request!forms_results_html <> "" Then 
            sHtml = Replace(shtml, "%result_available", "Yes")
         Else
            sHtml = Replace(shtml, "%result_available", "No")
         End If
      End If
   Next
   Return sHtml & "</TABLE></SMALL></small></BODY></HTML>"
   
End

Public Function Letters_Summary_Construct_html(currentconsult As CConsult) As String
   '-----------------------------------------------------
   'Constructs a table of letters/correspondence recieved
   '-----------------------------------------------------   

   Dim current_form_fk As Integer
   Dim last_form_fk As Integer
   Dim sHTml As String 
   Dim letter As Collection 
   Dim sRow_Template As String = ""
   
   "<COL WIDTH=89>"
   "<COL WIDTH=319>"
   "<COL WIDTH=379>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=89>%letter_date<BR></TD>"
   "<TD WIDTH=450>%letter_from<BR></TD>"
   "<TD WIDTH=500>%letter_summary<BR></TD>"
   "</TR>"
   shtml = "<HTML><BODY<DIV ALIGN=CENTER><H3>Letters Received Summary</H3><DIV><TABLE><small><small>"
   sHtml &= sRow_Template
   sHtml = Replace(shtml, "%letter_date", "<B>Letter Date</B>")
   sHtml = Replace(shtml, "%letter_from", "<B>From</B>")
   sHtml = Replace(shtml, "%letter_summary", "<B>Summary</B>")
   sHTML &= "<small>"
   '----------------------------------------------------------------
   'the requests_ordered collection has multiple lines per form, one
   'for each request, so just show the summary
   '-----------------------------------------------------------------
   For Each letter In currentconsult!letters_received_sorted_ascending
      sHtml &= sRow_Template
      sHtml = Replace(shtml, "%letter_date", Format(letter!date_created, "dd/mm/yyyy"))
      sHtml = Replace(shtml, "%letter_from", letter!originator)
      sHtml = Replace(shtml, "%letter_summary", letter!tag_user)
   Next
   Return sHtml & "</TABLE></SMALL></small></BODY></HTML>"  
   
End

Public Function Recalls_summary_construct_html(currentconsult As CConsult) As String
   '----------------------------------------------
   'make up a html summary of all requests ordered
   '----------------------------------------------
   
   Dim current_form_fk As Integer
   Dim last_form_fk As Integer
   Dim sHTml As String 
   Dim recall As Collection 
   Dim sRow_Template As String = ""
   
   "<COL WIDTH=89>"
   "<COL WIDTH=319>"
   "<COL WIDTH=379>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=89>%recall_date<BR></TD>"
   "<TD WIDTH=450>%recall_for<BR></TD>"
   "<TD WIDTH=500>%logged_by<BR></TD>"
   "</TR>"
   shtml = "<HTML><BODY<DIV ALIGN=CENTER><H3>Recalls Outstanding</H3><DIV><TABLE><small><small>"
   sHtml &= sRow_Template
   sHtml = Replace(shtml, "%recall_date", "<B>Date Due</B>")
   sHtml = Replace(shtml, "%recall_for", "<B>Recall For</B>")
   sHtml = Replace(shtml, "%logged_by", "<B>Logged by</B>")
   sHTML &= "<small>"
   '----------------------------------------------------------------
   'the requests_ordered collection has multiple lines per form, one
   'for each request, so just show the summary
   '-----------------------------------------------------------------
   For Each recall In currentconsult!recalls_logged
      sHtml &= sRow_Template
      sHtml = Replace(shtml, "%recall_date", Format(recall!due, "dd/mm/yyyy"))
      sHtml = Replace(shtml, "%recall_for", recall!reason)
      sHtml = Replace(shtml, "%logged_by", recall!title & " " & recall!wholename)
   Next
   Return sHtml & "</TABLE></SMALL></small></BODY></HTML>"
   
End

Public Function Care_Plan_Construct_html(currentconsult As CConsult) As String
   '-----------------------------------------------------------------------------------------------
   'Displays the GP Managment plan - ie health issue care plan and team care arrangements in detail
   'Collects the team care members names and addresses along the way to put a list at the bottom of
   'the page along with contact details.
   '-----------------------------------------------------------------------------------------------
   
   Dim PH As Collection 
   Dim sText As String
   Dim sTempString As String 
   Dim sPlanHtml As String 
   Dim sHealthIssueRow As String 
   Dim sHistory_Management_Components As String  
   Dim sCumulative_html_forPlan As String  
   Dim sCumulative_html_for_components As String 
   Dim sResponsible_Table_row As String
   Dim sCumulative_html_for_TeamCare As String 
   Dim sComponent_row As String
   Dim sTeamCare_row As String 
   Dim careplan_components As Collection 
   Dim member As Collection 
   
   Dim TeamCareMembers As Collection 
   Dim Team_Names_And_Addresses As New Collection
   Dim Team_Members_Address_Already_done As Collection 
   Dim bduplicate As Boolean
   Dim x As Integer
   Dim comms As Collection 
   Dim comm As Collection 
   Dim pk_branch As Integer
   Dim pk_last_person As Integer
   '  "<P ALIGN=CENTER><B>HEALTH ISSUES - GP MANAGEMENT PLAN AND TEAM CARE ARRANGEMENTS</B></P>"
   Dim sPageHeader As String = ""
   
   "<HTML>"
   "<BODY>"
   
   "<DIV ALIGN=CENTER><H3>Care Plan</H3></div>"
   '----------------------------------------------------------------------------------
   'the sHealthIssueRow_template is a single row of 2 columns 1=the issue 2 = the plan
   '----------------------------------------------------------------------------------
   Dim sHealthIssueRow_template As String = ""
   
   "<TR VALIGN=TOP>"
   "<TD WIDTH=20%>"
   "<P ALIGN=LEFT><B>%healthissue</B></P>"
   "</TD>"
   "<TD WIDTH=80%>"
   "<P ALIGN=LEFT>%plandetails</P>"
   "</TD>"
   
   "</TR>"
   
   Dim sNames_Addresses_Phone_Template As String = ""
   
   "<TR VALIGN=TOP>"
   "<TD WIDTH=20%>"
   "<P ALIGN=LEFT><B>%name_teamcare_member</B></P>"
   "</TD>"
   "<TD WIDTH=80%>"
   "<P ALIGN=LEFT>%address_phone</P>"
   "</TD>"
   "</TR>"
   
   '-------------------------------------------------------------------------------------
   'this is s table which consists of 3 columns
   'col 1 = the chronological history of the health issue  = free text
   'col 2 = the management plan summary of the health issue = free text
   'co 3  = will contain a 2 column table of n lines of care plan components and when due
   '-------------------------------------------------------------------------------------
   Dim sResponsible_Table_start As String = ""
   
   "<TABLE WIDTH=100%  BORDER=0 CELLPADDING=1 CELLSPACING=0>"
   "<COL WIDTH=38%>"
   "<COL WIDTH=54%>"
   "<COL WIDTH=10%>"
   
   Dim sComms_table_start As String = ""
   
   "<TABLE WIDTH=100%  BORDER=0 CELLPADDING=0 CELLSPACING=0>"
   "<COL WIDTH=10%>"
   "<COL WIDTH=90%>" 
   Dim sComms_Table_row As String = ""
   
   "<TR VALIGN=TOP>"
   "<TD WIDTH=10%>"
   "%comm_type<BR>"
   "</TD>"
   "<TD WIDTH=90%>"
   "%comm_value<BR>"
   "</TD>"
   "</TR>"    
   Dim sResponsible_Table_row_template As String = ""
   
   "<TR VALIGN=TOP>"
   "<TD WIDTH=38%>"
   "<P ALIGN=LEFT><small><B>%wholename</B></small><BR> %address</P>"
   "</TD>"
   "<TD WIDTH=54%>"
   "<P ALIGN=LEFT>%responsibilities</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P ALIGN=LEFT>%comms</P>"
   "</TD>"
   "</TR>"
   
   Dim sHistory_Management_Components_Template As String = ""
   
   "<TABLE WIDTH=100% BORDER=0 CELLPADDING=3 CELLSPACING=0>"
   "<COL WIDTH=60%>"
   "<COL WIDTH=40%>"
   "<TR VALIGN=TOP>"
   "<TD>"
   "<P ALIGN=LEFT><B>Historical Summary and  Management Plan</B></P>" 
   "%historicalsummary_and_plan<BR>"
   "</TD>"
   "<TD><B>Tasks and when due</B><BR>"
   "%componentstable"
   "</TD>"
   "</TR>"
   "</TABLE>"
   
   Dim sComponentTable_start As String = ""
   
   "<TABLE WIDTH=100% BORDER=0 >"
   "<COL WIDTH=128*>"
   "<COL WIDTH=128*>"
   
   Dim sComponentTable_Row_template As String = ""
   
   "<TR VALIGN=TOP>"
   "<TD WIDTH=50%>"
   "<P>%item</P>" 
   "</TD>"
   "<TD WIDTH=50% SDVAL=\"39845\" SDNUM=\"3081;0;DD/MM/YY\">"
   "<P ALIGN=LEFT>%due</P>"
   "</TD>"
   "</TR>"
   
   Dim sOutsideTableStart As String = ""
   
   "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>"
   "<COL WIDTH=20%>"
   "<COL WIDTH=80%>"
   '---------------------------
   'Ok, lets construct the plan
   '---------------------------
   
   sPlanHtml = sPageHeader & sOutsideTableStart
   For Each PH In currentconsult!past_history
      '-----------------------------------------------------------------------------
      'For each past history item which is either major/significant or a risk factor
      'include in plan. Don't include inactive problems
      '-----------------------------------------------------------------------------
      If PH!active = True Or ph!risk_factor = True Or PH!major = True Then
         If Not IsNull(PH!aim_of_plan) Then
            '----------------------------------------------------------------------------
            'Left hand column is simple - just the upper cased health issue name eg NIDDM
            '----------------------------------------------------------------------------\
            sHealthIssueRow = sHealthIssueRow_template
            sHealthIssueRow = Replace(sHealthIssueRow, "%healthissue", UCase(PH!description))
            '---------------------------------------------------------------------
            'right hand column is really complex, made up of all the fields in the 
            'health issue/past history section
            'First a note about he problems onset and the aim of the plan
            '---------------------------------------------------------------------
            sText = "Noted at age " & PH!age_onset & " yrs considered to be a "
            If PH!major Then
               sText &= "major problem."
            Else If PH!active Then
               sText &= "significant problem."
            Else If PH!risk_factor Then
               stext &= "risk factor. "
            End If
            sText &= "<BR>The aim of the plan is to "
            '-------------------------------------------------------
            'Lcase first letter, preserve internal caps in sentance.
            '-------------------------------------------------------
            sText &= LCase(Left(PH!aim_of_plan, 1)) & Right(PH!aim_of_plan, Len(PH!aim_of_plan) - 1)
            
            If Right(Trim(sText), 1) <> "." Then
               sText = Trim(sText) & "."
            End If
            sCumulative_html_forPlan = sText
            '-------------------------------------------------------------------------
            'At this point the right hand column of html, collected in the string
            'sCumulative_html_forPlan just has a note about the severity of
            'the issue (major/significant/risk factor) and the plain aim
            'Now an inner table - of the history/managment/components of the plan
            '--------------------------------------------------------------------------
            sHistory_Management_Components = sHistory_Management_Components_Template
            If PH!condition_summary Then
               sText = "- " 
               sText &= LCase(Left(PH!condition_summary)) & Right(PH!condition_summary, Len(PH!condition_summary) - 1)
               If Right(Trim(sText), 1) <> "." Then
                  sText = Trim(sText) & "."
               End If  
               sText &= " "
            End If      
            If PH!management_summary Then
               sText &= UCase(Left(PH!management_summary)) & Right(PH!management_summary, Len(PH!management_summary) - 1)  '& "."
               If Right(Trim(sText), 1) <> "." Then
                  sText = Trim(sText) & "."
               End If  
               sText &= " "
            End If            
            sHistory_Management_Components = Replace(sHistory_Management_Components, "%historicalsummary_and_plan", sText)
            sCumulative_html_forPlan &= sHistory_Management_Components
            '-------------------------------------------------------------------------------------------
            'At this point the right hand column of html, collected in the string
            'sCumulative_html_forPlan now has the condition's severity, its aim, and two columns filled
            'under that with the historical summary and the management plan summary
            'Now have to add 1-n rows of components and when due eg HBA1c due 01/02/2009
            'we now have to query the database for these
            '-------------------------------------------------------------------------------------------
            sCumulative_html_for_components = sComponentTable_start
            careplan_components = modPastHistoryDBI.Get_CarePlan_Components(PH!pk_pasthistory)
            For Each Member In careplan_components
               sComponent_row = sComponentTable_Row_template
               sComponent_row = Replace(sComponent_row, "%item", member!component)
               If Not IsNull(member!due) Then
                  sComponent_row = Replace(sComponent_row, "%due", Format(member!due, "dd/mm/yyyy"))
               Else
                  sComponent_row = Replace(sComponent_row, "%due", "")
               End If
               sCumulative_html_for_components &= sComponent_row
            Next
            '-------------------------------
            'finish off the components table
            '-------------------------------
            sCumulative_html_for_components &= "</TABLE>"
            
            sCumulative_html_forPlan = Replace(sCumulative_html_forPlan, "%componentstable", sCumulative_html_for_components)
            
            '-----------------------------------------------------------------------
            'Now get the team care members and their responsibilities, if they exist
            '-----------------------------------------------------------------------
            TeamCareMembers = modPastHistoryDBI.TeamCareMembers_Get(PH!pk_pasthistory) 
            If TeamCareMembers.count Then
               sCumulative_html_forPlan &= "<P ALIGN=CENTER><B>Team care members and their responsibilities</P>"
               sCumulative_html_forPlan &= sResponsible_Table_start
               For Each Member In TeamCareMembers
                  Team_Names_And_Addresses.Add(Member, Team_Names_And_Addresses.count)
                  sTeamCare_row = sResponsible_Table_row_template
                  sTeamCare_row = Replace(sTeamCare_row, "%wholename", Member!wholename)
                  sTeamCare_row = Replace(sTeamCare_row, "%responsibilities", Member!responsibility)
                  sCumulative_html_forPlan &= sTeamCare_row
               Next
               sCumulative_html_forPlan &= "</TABLE>"
            End If   
            'temporary till I get the comms
            sCumulative_html_forPlan = Replace(sCumulative_html_forPlan, "%comms", "<BR>")
            sCumulative_html_forPlan = Replace(sCumulative_html_forPlan, "%address", "")
            sCumulative_html_forPlan &= "<HR>"
            sHealthIssueRow = Replace(sHealthIssueRow, "%plandetails", sCumulative_html_forPlan)
            sPlanHtml &= sHealthIssueRow '& ' "<HR>"
            'temporary just checking visual effects
            sPlanHtml = Replace(sPlanHtml, "Management Plan Summary", "<BR>")
            ' sPlanHtml = Replace(sPlanHtml, "Historical Summary", "History and Plan")
            
         End If
      End If
   Next
   sPlanHtml &= "</TABLE>"
   '------------------------------------------------------------------------------
   'Now underneath the whole thing - list all the names and addresses of providers
   'column 1 = the name, column 2 = the addresses/phones
   '------------------------------------------------------------------------------
   sPlanHtml &= "<P ALIGN=CENTER><B>CONTACT DETAILS OF TEAM CARE MEMBERS</B></P>"
   sPlanHtml &= "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>"
   "<COL WIDTH=20%>"
   "<COL WIDTH=80%>"
   ' sPlanHtml &= "<P><B>     " & Member!wholename & "</B>" & Member!summary & "</P>"
   Team_Members_Address_Already_done = New Collection 
   For Each Member In Team_Names_And_Addresses
      '------------------------------------------------------
      'Put name of team care member in the left hand column
      'First check they are not a duplicate as could be part
      'of the management of > 1 health issue
      '------------------------------------------------------
      bduplicate = False   
      For x = 0 To Team_Members_Address_Already_done.count - 1
         If Member!wholename = Team_Members_Address_Already_done[x]!wholename Then
            bduplicate = True
            Break
         End If
      Next
      If Not bduplicate Then 
         sPlanHtml &= sNames_Addresses_Phone_Template
         sPlanHtml = Replace(sPlanHtml, "%name_teamcare_member", "<B>" & Member!wholename & "</B>")
         
         '-------------------------------------------
         'Now get the comms for this team care member
         '-------------------------------------------
         If IsNull(member!fk_branch) Then
            comms = modContactsDBI.person_comms_get(member!fk_person)
         Else
            comms = modContactsDBI.Branch_Comms_Get(Member!fk_branch)
         End If
         stext = "<B>" & Member!summary & "</B><BR>" & sComms_table_start
         For Each comm In comms
            sText &= sComms_Table_row
            sText = Replace(sText, "%comm_type", comm!type)
            'FIXME DO THE SAME FOR EMAIL
            If comm!fk_type = const.CommModalityWeb Then
               sTempstring = "<A HREF='http://%url/'>%url</A>"
               sTempstring = Replace(sTempstring, "%url", comm!value)
               sText = Replace(sText, "%comm_value", sTempstring)
            Else
               sText = Replace(sText, "%comm_value", comm!value)
            End If
         Next
         sText &= "</TABLE>"
         sPlanHtml = Replace(sPlanHtml, "%address_phone", sText)
         Team_Members_Address_Already_done.Add(Member, Team_Members_Address_Already_done.count)
      End If   
   Next
   sPlanHtml &= "</TABLE>"
   sPlanHtml &= "</BODY></HTML>"
   Return sPlanHtml
   
End

Public Function ConstructHTML_AllProgressNotes(currentconsult As CConsult) As String 
   '--------------------------------------------------------
   'Constructs the html for the problem using pk_pasthistory
   'ordered by date and time order.
   '
   'If pk_pasthistory = 0 = the general tab, or if non-zero
   'it is primary key of clin_history.data_pasthistory
   'FIXME: BUG HERE AFTER A SAVE IT IS IGNORING THE NEW
   '       MEMBER OF THE COLLECTION
   'FIXME: INCLUDE TIME
   'FIXME: ian best way of using  USE TEMP FILES  fix end of routine
   '
   '-----------------------------------------------------------
   
   Dim sStart As String
   Dim sCumNotes As String 
   Dim sTableTemplate As String
   Dim sTableTemplate1 As String 
   Dim sTable As String
   Dim sEnd As String
   ' Dim currentProgressNote As cProgressNote
   Dim sHtml As String
   Dim progressnote As Collection 
   Dim sCurrentDate As String
   Dim sLastDate As String 'because we use date-time, only want a date
   Dim sCurrentConsultType As String
   Dim SLastconsultType As String 
   Dim sString As String
   ' Dim sTime As String 
   
   sStart = "<HTML>"
   "<BODY>"
   sTableTemplate = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0 >"
   "<COL WIDTH=35*>"
   "<COL WIDTH=135*>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=14%>"
   "col1"
   "</TD>"
   "<TD WIDTH=86%>"
   "<TABLE WIDTH=100% BORDER=0 CELLPADDING=5 CELLSPACING=0>"
   "<COL WIDTH=256*>"
   "<TR>"
   "<TD WIDTH=100% VALIGN=TOP>"
   "col2"
   "</TD>"
   "</TR>"
   "</TABLE>"
   "</TD>"
   
   "</TR>"
   "</TABLE>"
   
   sTableTemplate1 = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0 >"
   "<COL WIDTH=35*>"
   "<COL WIDTH=135*>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=14%>"
   "<P>col1</P>"
   "</TD>"
   "<TD WIDTH=86%>"
   "<TABLE WIDTH=100% BORDER=0 CELLPADDING=5 CELLSPACING=0>"
   "<COL WIDTH=256*>"
   "<TR>"
   "<TD WIDTH=100% VALIGN=TOP>"
   "<P>col2</P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   "</TD>"
   
   "</TR>"
   "</TABLE>"
   sEnd = "</BODY>"
   "</HTML>" 
   ' sHtml = sStart & "<P ALIGN=CENTER><B>ALL PROGRESS NOTES LISTED CHRONOLOGICALLY</B></P>"
   sHtml = sStart & "<DIV ALIGN=CENTER><H3> All Progress Notes - " & currentconsult!patient!wholename & "</H3></DIV>"
   currentconsult.Refresh("progress_notes")
   For Each progressnote In currentconsult!progress_notes
      '---------------------------------------------------------
      'Each new date has one or more sections of clinical notes
      'so we want it to end uplooking like
      '
      'column 1         column 2  
      '
      '01/02/2000       Gangrene of the leg
      '
      'Ok: if the progress note belongs to the problem in this
      'progress note page, then just display its rows
      '---------------------------------------------------------
      'If progressnote!fk_problem = pk_pasthistory And progressnote!fk_section = fk_section Then
      sCurrentDate = Format(progressnote!consult_date, "dd/mm/yyyy")
      modConsultDBI.ImageFix(progressnote!notes, progressnote!fk_consult)
      If sCurrentDate <> sLastDate Then
         '-------------------------------------------------------------------
         'As soon as the date changes, print the new days date in col1
         '-------------------------------------------------------------------
         sCurrentConsultType = progressnote!consult_type
         SLastconsultType = sCurrentConsultType
         sString = sCurrentDate & "<BR><small><small>" & progressnote!consult_type & "<BR>"
         sString &= Format(progressnote!consult_date, gb.MediumTime) & "<BR>"
         sString &= progressnote!title & " " & progressnote!firstname & " " & progressnote!surname & "</small></small>" 'put staff position in here
         sTable = sTableTemplate 
         ' sTable = Replace$(sTable, "col1", Format$(progressnote!consult_date, "dd/mm/yyyy"))
         sTable = Replace$(sTable, "col1", sString)
         sTable = Replace$(sTable, "col2", progressnote!notes)
         sHtml = sHtml & sTable '& ' "<br>"
         sLastDate = sCurrentDate
      Else 
         '-----------------------------------------------------------------
         'Otherwise, if the date is the same, simply add the problems notes
         '-----------------------------------------------------------------
         sTable = sTableTemplate
         sCurrentConsultType = progressnote!consult_type
         If sCurrentConsultType <> SLastconsultType Then
            
            sstring = "<BR><small><small>" & progressnote!consult_type & "<BR>"
            sString &= Format(progressnote!consult_date, gb.MediumTime) & "<BR>"
            sString &= progressnote!title & " " & progressnote!firstname & " " & progressnote!surname & "</small></small>" 'put staff position in here
            sTable = Replace$(sTable, "col1", sstring)
         Else
            sTable = Replace$(sTable, "col1", "") 'put time in here.
         End If
         sTable = Replace$(sTable, "col2", progressnote!notes)
         sHtml = sHtml & sTable '& "<br>"
      Endif
      '  End If
   Next
   sHtml = shtml & sEnd
   '-----------------------------------------------------------
   'Check if there is an image in this note - if so, replace it
   '-----------------------------------------------------------
   If InStr(sHtml, "pk_image") Then
      sHtml = modConsultDBI.Images_Get(sHtml)
   End If
   Return sHtml
   
End

Public Function ConstructHTML_SingleDate(currentconsult As Cconsult, sDate As String, Optional heading As String, Optional bUseheading As Boolean) As String 
   '--------------------------------------------------------
   'Constructs the html for single date
   '-----------------------------------------------------------
   
   Dim sStart As String
   
   Dim sTableTemplate As String
   Dim sTable As String
   Dim sEnd As String
   'Dim currentProgressNote As cProgressNote
   Dim sHtml As String
   Dim progressnote As Collection 
   Dim sCurrentDate As String
   Dim sLastDate As String 'because we use date-time, only want a date
   Dim progress_notes As Collection 
   
   sStart = "<HTML>"
   "<BODY>"
   sTableTemplate = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0 >"
   "<COL WIDTH=35*>"
   "<COL WIDTH=135*>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=14%>"
   "<P>col1</P>"
   "</TD>"
   "<TD WIDTH=86%>"
   "<TABLE WIDTH=100% BORDER=0 CELLPADDING=5 CELLSPACING=0>"
   "<COL WIDTH=256*>"
   "<TR>"
   "<TD WIDTH=100% VALIGN=TOP>"
   "<P>col2</P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   "</TD>"
   
   "</TR>"
   "</TABLE>"
   sEnd = "</BODY>"
   "</HTML>" 
   sHtml = sStart
   If bUseheading Then
      ' sHtml &= "<P ALIGN=CENTER><B>" & heading & "<B></p>"
      sHtml &= "<DIV ALIGN=CENTER><H3>Notes for " & heading & "</H3></DIV>"
   End If 
   
   progress_notes = modConsultDBI.progressnotes_get(currentconsult!patient!fk_patient, sDate)
   For Each progressnote In progress_notes
      '---------------------------------------------------------
      'Each new date has one or more sections of clinical notes
      'so we want it to end uplooking like
      '
      'column 1         column 2  
      '
      '01/02/2000       Gangrene of the leg
      '
      'Ok: if the progress note belongs to the problem in this
      'progress note page, then just display its rows
      '---------------------------------------------------------
      ' If progressnote!fk_problem = pk_pasthistory Then ' And progressnote!fk_section = fk_section Then
      sCurrentDate = Format(progressnote!consult_date, "dd/mm/yyyy")
      
      If sCurrentDate <> sLastDate Then
         '-------------------------------------------------------------------
         'As soon as the date changes, print the new days date in col1
         '-------------------------------------------------------------------
         sTable = sTableTemplate 
         sTable = Replace$(sTable, "col1", Format$(progressnote!consult_date, "dd/mm/yyyy"))
         sTable = Replace$(sTable, "col2", progressnote!notes)
         sHtml = sHtml & sTable & "<br>"
         sLastDate = sCurrentDate
      Else 
         '-----------------------------------------------------------------
         'Otherwise, if the date is the same, simply add the problems notes
         '-----------------------------------------------------------------
         sTable = sTableTemplate
         sTable = Replace$(sTable, "col1", "")
         sTable = Replace$(sTable, "col2", progressnote!notes)
         sHtml = sHtml & sTable & "<br>"
      Endif
      ' End If
   Next
   sHtml = shtml & sEnd
   '-----------------------------------------------------------
   'Check if there is an image in this note - if so, replace it
   '-----------------------------------------------------------
   If InStr(sHtml, "pk_image") Then
      sHtml = modConsultDBI.Images_Get(sHtml)
   End If
   Return sHtml  
   
End

Public Function ConstructHTML_SingleProblem(currentconsult As Cconsult, pk_pasthistory As Integer, fk_section As Integer, Optional heading As String, Optional bUseheading As Boolean) As String
   '--------------------------------------------------------
   'Constructs the html for the problem using pk_pasthistory
   'ordered by date and time order.
   '
   'If pk_pasthistory = 0 = the general tab, or if non-zero
   'it is primary key of clin_history.data_pasthistory
   'FIXME: BUG HERE AFTER A SAVE IT IS IGNORING THE NEW
   '       MEMBER OF THE COLLECTION
   'FIXME: INCLUDE TIME
   'FIXME: ian best way of using  USE TEMP FILES  fix end of routine
   '
   '-----------------------------------------------------------
   
   Dim sStart As String
   
   Dim sTableTemplate As String
   Dim sTable As String
   Dim sEnd As String
   'Dim currentProgressNote As cProgressNote
   Dim sHtml As String
   Dim progressnote As Collection 
   Dim sCurrentDate As String
   Dim sLastDate As String 'because we use date-time, only want a date
   
   sStart = "<HTML>"
   "<BODY>"
   sTableTemplate = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0 >"
   "<COL WIDTH=35*>"
   "<COL WIDTH=135*>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=14%>"
   "<P>col1</P>"
   "</TD>"
   "<TD WIDTH=86%>"
   "<TABLE WIDTH=100% BORDER=0 CELLPADDING=5 CELLSPACING=0>"
   "<COL WIDTH=256*>"
   "<TR>"
   "<TD WIDTH=100% VALIGN=TOP>"
   "<P>col2</P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   "</TD>"
   
   "</TR>"
   "</TABLE>"
   sEnd = "</BODY>"
   "</HTML>" 
   sHtml = sStart
   If bUseheading Then
      ' sHtml &= "<P ALIGN=CENTER><B>" & heading & "<B></p>"
      sHtml &= "<DIV ALIGN=CENTER><H3>Notes for " & heading & "</H3></DIV>"
   End If 
   
   For Each progressnote In currentconsult!progress_notes
      '---------------------------------------------------------
      'Each new date has one or more sections of clinical notes
      'so we want it to end uplooking like
      '
      'column 1         column 2  
      '
      '01/02/2000       Gangrene of the leg
      '
      'Ok: if the progress note belongs to the problem in this
      'progress note page, then just display its rows
      '---------------------------------------------------------
      If progressnote!fk_problem = pk_pasthistory Then ' And progressnote!fk_section = fk_section Then
         sCurrentDate = Format(progressnote!consult_date, "dd/mm/yyyy")
         
         If sCurrentDate <> sLastDate Then
            '-------------------------------------------------------------------
            'As soon as the date changes, print the new days date in col1
            '-------------------------------------------------------------------
            sTable = sTableTemplate 
            sTable = Replace$(sTable, "col1", Format$(progressnote!consult_date, "dd/mm/yyyy"))
            sTable = Replace$(sTable, "col2", progressnote!notes)
            sHtml = sHtml & sTable & "<br>"
            sLastDate = sCurrentDate
         Else 
            '-----------------------------------------------------------------
            'Otherwise, if the date is the same, simply add the problems notes
            '-----------------------------------------------------------------
            sTable = sTableTemplate
            sTable = Replace$(sTable, "col1", "")
            sTable = Replace$(sTable, "col2", progressnote!notes)
            sHtml = sHtml & sTable & "<br>"
         Endif
      End If
   Next
   sHtml = shtml & sEnd
   '-----------------------------------------------------------
   'Check if there is an image in this note - if so, replace it
   '-----------------------------------------------------------
   If InStr(sHtml, "pk_image") Then
      sHtml = modConsultDBI.Images_Get(sHtml)
   End If
   Return sHtml
   
End

Public Sub Templates_Save(template As Collection)
   
   If IsNull(template!pk) Then   
      modDBConnect.insert("clin_consult.lu_progressnote_templates", template)
   End If   
   
End

Public Function Templates_Get() As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clin_consult.lu_progressnote_templates where fk_staff = " & modDBConnect.currentUser!fk_staff)
   
End
