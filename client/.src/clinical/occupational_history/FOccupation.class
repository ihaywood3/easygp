' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Publico License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' PURPOSE      A module to allow entry of one or more occupations
'              and occupational exposures
'              its quite old and needs re-writing using cRow
'              FIXME
'              Notes - contrary to the code the retired status of patient is
'                      kept in currentconsult!patient!retired which derives
'                      in the view from data_persons
'----------------------------------------------------------------------
Private currentconsult As CConsult
Private ReferenceHboxForTopColumnview As Hbox               'used if split moves to reposition columnview
Private SpellChecker As ClskSpell 
Private bEmbedded As Boolean
Private bExit As Boolean
Private bKeyValid As Boolean
Private Exposures As Collection                            
Private Occupation As Collection
Private occupations As Collection
Private occupational_history As Collection
Private fk_occupations_exposure As Variant                   'if not null key to clin_history.occupational_exposures
Private fk_lu_occupational_exposure As Variant               'if not null, key to clin_history.lu_occupational_exposures
Private fk_occupation As Variant
Private fk_progressnote As Variant
Private fk_consult As Variant
Private fk_occupational_history As Variant      'key to clin_history.occupations table
Private cvwExposures_key As String
Private pk_view As Variant  'key to the row in the view.
Private cvwOccupations_key As Variant 

Static Private form_occupations As FOccupation

Public Sub set_embedded(flag As Boolean)
   '--------------------------------------------------
   'If this form is embeded from another form set flag
   '--------------------------------------------------
   
   bEmbedded = flag
   
End

Public Sub Init(cons As CConsult)
   '----------------------------------------------------------
   'PURPOSE    :Basic initialiseation
   'CALLED BY  :calling form e.g FrmClinical.Editor_ShowPage()
   '----------------------------------------------------------
   
   form_occupations = Me   
   currentconsult = cons         'set current consult on this form
   Settings_Load()               'set splits, font sizes etc
   lblmeasure.text = " Occupation (Description)   "                'resize edit area labels, keep size consistant across forms - this from script is the widest
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Inner, lblmeasure)
   cvwExposures.Columns.count = 2
   With cvwOccupations
      .Columns.count = 5
      .Columns[1].width = 200 'the occupation
      .Columns[2].width = 150 'from-to age
   End With
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teForSpelling
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"  'FIXME
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   Reload()
   
End

Static Public Sub Occupations_Reload()
   '-------------------------------------------------------------------------------------------
   'Called from FPatients, will only ever be called if the doctor viewing the patient's record
   'has also updated their occupation in FPatients, highly unlikely
   'FIXME, need some sort of mesagebus so that if clerical update patients occupation and the 
   'doctor has occupations open, they are warned, updated whatever
   '--------------------------------------------------------------------------------------------
   
   form_occupations.Reload()
   
End

Public Sub Reload()
   
   EditArea_Clear()
   EditArea_NotifyChange(False)
   OccupationsList_Refresh()
   '--------------------------------------------------------------------
   'At Init of this form if there are occupations in the list, highlight
   'the first one, and show its occupational exposures
   '--------------------------------------------------------------------
   If cvwOccupations.count Then
      '---------------------------------------------------------------
      'for the first member only in the list, fill the exposures list
      '----------------------------------------------------------------
      cvwOccupations.MoveFirst()     'move to first on the list
      cvwOccupations.Item.Selected = True
      cvwOccupations.SetFocus() '
   End If
   
End

Public Sub Form_Close()
   '------------------
   'Save splits layout
   '------------------
   
   Settings_Save()
   
End

Public Sub Settings_Save()
   
   If bEmbedded = True Then
      Settings["FOccupation/VSplit_Occupation.Layout"] = VSplit_Occupations.layout
      Settings["FOccupation/HSplit_Occupation.Layout"] = HSplit_Occupations.layout
   Else
      Settings["FOccupation/VSplit_Occupation.Layout"] = VSplit_Occupations.layout
      Settings["FOccupation/HSplit_Occupation.Layout"] = HSplit_Occupations.layout
   End If
   
End

Public Sub Settings_Load()
   
   If bEmbedded = True Then
      VSplit_Occupations.layout = Settings["FOccupation/VSplit_Occupation.Layout", modUtilGUI.VSplit([224, 364, 259])]
      HSplit_Occupations.layout = Settings["FOccupation/HSplit_Occupation.Layout", modUtilGUI.HSplit([595, 594])]
   Else
      VSplit_Occupations.layout = Settings["FOccupation/VSplit_Occupation.Layout", modUtilGUI.VSplit([224, 364, 259])]
      HSplit_Occupations.layout = Settings["FOccupation/HSplit_Occupation.Layout", modUtilGUI.HSplit([595, 594])]
      cvwExposures.Font = Font[Settings["FOccupation/cvwExposures.font", "DejaVu Sans,9"]]
      cvwOccupations.Font = Font[Settings["FOccupation/cvwOccupations.font", "DejaVu Sans,9"]]
   End If
   
End

Public Sub EditArea_Exposure_Clear()
   
   bExit = True
   txtExposure.text = ""
   txtduration.text = ""
   txtNotesExposure.text = ""
   fk_occupations_exposure = Null
   fk_lu_occupational_exposure = Null
   bExit = False
   exposures = New Collection    
   
End

Public Sub EditArea_Occupation_Clear()
   
   bExit = True
   Vbox_EditArea_Inner.Padding = 0
   txtOccupation.text = ""                            'clear the text boxes
   txtFromAge.text = ""
   txtToAge.text = ""
   txtNotes.text = ""
   chkCurrent.Value = False
   chkRetired.Value = False
   chkMainOccupation.value = False  
   listview1.Clear()
   listview1.Visible = False
   bExit = False
   
End

Public Sub Occupation_New()
   
   Exposure_New()
   EditArea_Occupation_Clear()
   Exposures = New Collection
   fk_progressnote = Null
   fk_occupational_history = Null
   fk_occupation = Null
   pk_view = Null
   Vbox_EditArea.Enabled = True
   txtOccupation.SetFocus()
   If Not cvwOccupations.count Then chkMainOccupation.value = True   
   
End

Public Sub Exposure_New()
   
   EditArea_Exposure_Clear()        'clear edit area
   cvwExposures.UnselectAll()    'ie. remove the marquee
   cvwOccupations.UnselectAll()  'take focus off lists
   txtExposure.SetFocus()
   
End

Public Sub EditArea_Clear()
   '------------------------------------------------------------
   'Clears the editing area totally both occupation and exposure
   '------------------------------------------------------------
   
   Vbox_EditArea.Enabled = False 
   EditArea_Occupation_Clear
   EditArea_Exposure_Clear
   
End

Public Sub EditArea_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   ReferenceHboxForTopColumnview = Last.Parent.Parent
   Select Case Last.tag
      Case "occupation", "exposure"
         With listview1
            .top = ReferenceHboxForTopColumnview.top + ReferenceHboxForTopColumnview.Height
            .left = Last.Parent.left + Vbox_EditArea_Inner.Padding
            .width = Last.width
            .Raise
            .Clear
            .Visible = False
            .tag = Last
         End With
   End Select
   
End

Public Sub EditArea_LostFocus()
   
   Last.BackGround = Color.White
   Last.pos = 0
   Select Case Last.tag
      Case "from age"
         If Last.text <> "" Then
            If Val(Last.text) > currentconsult!patient!age_numeric Then
               Last.text = ""
               Last.setfocus()
            Endif
         End If
      Case "to age"
         If Last.text <> "" Then
            If Val(Last.text) > currentconsult!patient!age_numeric Or Val(Last.text) < Val(txtToAge.text) Then
               txtToAge.SetFocus()
            Endif
         End If
   End Select
   
End

Public Sub listview1_KeyPress()
   
   If Key.code = Key.return Then
      
      listview1_DblClick()
   End If
   
End

Public Sub listview1_DblClick()
   '------------------------------------
   'User has clicked on the popup list
   'move internal cursor to current item
   '------------------------------------
   
   listview1.MoveCurrent
   Select Case Last.tag.tag
      Case "occupation"
         Occupation_Select()
         txtFromAge.SetFocus()
      Case "exposure"
         Exposure_Select()
   End Select
   listview1.Visible = False  
   
End

Public Sub Occupation_Select()
   
   bexit = True   
   txtOccupation.Text = listview1.Item.Text
   fk_occupation = listview1.Item.key
   bexit = False  
Catch
   Return
   
End

Public Function Occupation_Valid() As Boolean
   '--------------------------------------------------------------------
   ' validates the contents of edit area returns FALSE if invalid
   ' Mimimum amount of data an occupation with a valid key
   '-----------------------------------------------
   
   Dim sMsg As String
   Dim bHasMainOccupation As Boolean
   
   If Trim(txtOccupation.text) = "" Then Return False
   SpellCheck_TextBox(txtoccupation)
   fk_occupation = modCommonDBI.Occupation_Check_Valid(txtOccupation)
   If IsNull(fk_occupation) Then Return  'user aborted saving new occupation when prompted by dialog
   'Make sure one occupation is listed as main
   If chkMainOccupation.value = False Then
      For Each occupation In currentconsult!occupational_history
         If occupation!main_occupation = True Then 
            bHasMainOccupation = True
            Break 
         End If   
      Next
      If Not bHasMainOccupation Then   
         sMsg = "There are no current occupations selected to be the main occupation.\n\n"
         "This occupation will be selected as the default main occupation. If this is not "
         "correct  you will have to go back and change this later."
         Message.Info(sMsg)
         chkMainOccupation.Value = True
      End If   
   Endif
   If Trim(txtduration.text) <> "" Then
      If Trim(txtExposure.text) = "" Then
         Message.Info("Please enter the type of workspace substance the person has been exposed to "
         "including the duration in years or months eg 10Y")
         txtExposure.SetFocus
         Return 
      Endif
      If Trim(txtduration.Text) <> "" Then
         If rbDurationDays.Value = True Then Return True
         If rbDurationMonths.Value = True Then Return True
         If rbDurationYears.Value = True Then Return True
         Goto DurationerrorMessage
      Endif
   Endif
   
   Return True
DurationerrorMessage:
   Message.Title = "Occupational Exposure Duration"
   Message.Info("Please enter a valid duration and interval for the exposure by clicking on the appropriate radio button for days, months or years")
   rbDurationYears.SetFocus
   Return
   
End

Public Sub SpellCheck_TextBox(tb As TextBox)
   
   bexit = True
   teForSpelling.text = tb.text
   bexit = False
   SpellChecker.init(tb)
   SpellChecker.StartSpelling()
   
End

Public Sub Exposure_select()
   '--------------------------------------------------
   'User is selecting an exposure from the popup list
   'txtExposure.text = the exposure, but this must be
   'added to the exposure list by the user hitting
   '<enter> at txtExposure.
   '--------------------------------------------------
   
   listview1.MoveCurrent()
   txtExposure.text = listview1.Item.Text
   fk_lu_occupational_exposure = Listview1.Item.Key
   ListView1.Visible = False
   txtduration.SetFocus()
Catch
   Return 
   
End

Public Sub EditArea_Change()
   
   If bexit Then Return
   Select Case Last.tag
      Case "from age", "to age"
         If Last.text <> "" Then 
            bexit = True   
            If Val(Last.text) > currentconsult!patient!age_numeric Then 
               Message.info("Please enter an age less than the patient's current age, which is recorded as " & Str(currentconsult!patient!age_numeric))
               Last.text = ""
            Endif
            bexit = False  
         End If   
      Case "occupation"
         '-------------------------------------------------------
         'Triggered by either user typing in it and not selecting
         'from the popup list, in which case OH.fk_occupation=0
         'or by user selecting from popup listview1 in which case
         'fk_occupation is set by that routine
         '--------------------------------------------------------
         If Trim(Last.text) = "" Then
            fk_occupation = Null
            With listview1
               .Visible = False
               .Clear
            End With
         End If
      Case "notes occupation"
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            Last.pos = 0
         End If
      Case "exposure"
         '-------------------------------------------------------
         'Triggered by either user typing in it and not selecting
         'from the popup list, in which case
         'fk_lu_occupational_exposure is null
         'or by user selecting from popup listview1 in which case
         'fk_lu_occupational_exposure is set by that routine
         '--------------------------------------------------------
         If Trim(Last.text) = "" Then
            Exposure_New()
         End If
      Case "duration"
         
   End Select
   '------------------------------------------
   'Highlight edit area in red to show changes
   '------------------------------------------
   EditArea_NotifyChange(True)
   
End

Public Sub EditArea_NotifyChange(flag As Boolean)
   '------------------------------------------------------------
   'Outlines the edit area in red to indicate change to the user
   '------------------------------------------------------------
   
   If Flag Then
      Vbox_EditArea.Padding = 1
   Else
      Vbox_EditArea.Padding = 0
   End If
   
End

Public Function EditArea_TxtBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   '--------------------------------------------------
   'Validate keypresses by excluding various key types
   '--------------------------------------------------
   
   Select Case tag
      Case "occupation", "exposure", "notes exposure", "notes occupation"
         bKeyValid = True
      Case "from age", "to age"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "duration"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub Editarea_KeyPress()
   '--------------------------------------------
   'Validate keys, e.g only numbers for age etc
   '--------------------------------------------
   
   Dim x As Integer
   
   bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code, Last.tag)
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case Key.Code
      Case Key.Down
         '--------------------------------------------
         'If down key pressed, move onto popup listbox
         '--------------------------------------------
         If listview1.Visible Then
            listview1.MoveFirst
            listview1.Item.Selected = True
            listview1.setfocus
         End If
      Case Key.Return, Key.tab
         Select Case Last.tag
            Case "occupation"
               txtFromAge.SetFocus
            Case "from age"
               txtToAge.SetFocus
            Case "to age"
               txtNotes.SetFocus
            Case "notes occupation"
               txtExposure.SetFocus
            Case "exposure"
               '--------------------------------------------------
               'User has hit <enter> without picking from the list
               'check first that if listview1 is visible, that
               'the text dosn't match any of the entires, if it
               'does, accept that entry and its key
               '-----------------------------------------------
               If listview1.Visible Then
                  For x = 0 To listview1.Count - 1
                     listview1.MoveFirst
                     If Lower(Trim(Last.text)) = Lower(listview1.item.text) Then
                        Exposure_Select
                        Return
                     End If
                     listview1.MoveNext
                  Next
               End If
               '---------------------------------------------------------
               'If get to here, then either list not visible, or no match
               '---------------------------------------------------------
               If Trim(Last.text) <> "" Then
                  '-----------------------------------------------
                  'this must be a new exposure not in the database
                  '-----------------------------------------------
                  txtduration.SetFocus()
               End If
            Case "duration"
               '-------------------------------------------------
               'User hit <enter> in the duration textbox
               'check there is an exposure, if ok, accept to list
               '-------------------------------------------------
               If Trim(txtExposure.text) = "" Then
                  txtExposure.SetFocus()
               End If
               txtNotesExposure.setfocus()
         End Select
   End Select
   
End

Public Sub EditArea_KeyRelease()
   '-----------------------------------------------
   'Search routines are triggered on the this event
   '-----------------------------------------------
   
   Select Case Last.tag
      Case "occupation"
         occupations = modCommonDBI.Occupations_Get(listview1, txtOccupation)
      Case "exposure"
         Exposures_Get()
   End Select
   
End

Public Sub EditAreaButtons_Click()
   '------------------------------------------
   'The buttons on the button of the edit area
   '------------------------------------------
   
   Select Case Last.tag
      Case "help"
         FClinical.Help_Show("occupational-history.html", "Help:Occupational History", True)
      Case "accept"  'Do an immediate save to the database and re-populate the occupations list
         Save()
      Case "new exposure"
         Exposure_New()
      Case "new occupation"
         Occupation_New()
         
   End Select
   
End

Public Sub New_Entry()
   '---------------------------------------------------------------
   'Called from FClinical, called this because can't use New() and
   'all across easyp this is the wording I've chosen
   'see FClinicalToolbar.MainToolbar_Click for details
   '---------------------------------------------------------------   
   
   Occupation_New()
   
End

Public Sub Save()
   '----------------------------------------------------------------
   'PURPOSE        :Save the occupation and exposures
   'CALLED BY      :tbAccept (editarea_buttons grou tag "accept"
   '               :Either user has hit <enter> at this button
   '               :or clicked on it with the mouse
   'WHAT IT DOES   :Checks for minimal data validity - an oocupation
   '----------------------------------------------------------------
   
   Dim person As CRow   
   
   Dim occupational_history As CRow  
   
   Dim occupations_exposure As CRow            'what the person is exposed to
   Dim lu_occupational_exposure As CRow          'the lookup table of occupational exposures
   
   If Vbox_EditArea.Padding = 0 Or Not Occupation_Valid() Then Return 'nothing to save or inadequate data
   ' If chkMainOccupation.value = False Then    
   '    For Each occupation In currentconsult!occupational_history
   '       If occupation!main_occupation = True Then
   '          bHasMainOccupation = True
   '          Break 
   '       Endif
   '    Next
   '    If Not bHasMainOccupation Then   
   '       If Not modAdminDBI.Has_User_Seen_Tip("FOccupation.MainOccupation") Then 
   '          sMsg = "<BR><P>This patient has no main occupation recorded.</P>"
   '          "<P>If no occupations have been saved for this patient to date, "
   '          "and you want this occupation to be displayed on the task bar, you should tick the checkbox "
   '          "labelled 'Main Occupation'.</P>"
   '          "<P>If you do not do this it is assumed to be a past occupation, not the main current one, and will not be used for display purposes.</P>"
   '          "<P>Once an occupation is saved and designated 'main' it will be attached to the patient's details as well as the occupational history and "
   '          "even if you unmark it as 'main' will remain on the task bar until replaced by an alternate occupation."
   '          With FUsageTip
   '             .Init("Adding a Main Occupation", "FOccupation.MainOccupation", sMsg)
   '             If Not .ShowModal() Then Return
   '          End With  
   '       End If
   '    End If
   ' End If   
   '-------------------------------------------------------------------------------------------------------------
   ' CREATE TABLE clin_history.occupational_history
   ' (
   '   pk serial NOT NULL,
   '   fk_consult integer NOT NULL,
   '   fk_occupation integer NOT NULL, -- foreign key to common.lu_occupations
   '   from_age integer, -- age person started working in this occupation, can be null, measured in years...
   '   to_age integer,
   '   current boolean DEFAULT false, -- if true this is the patients current occupation
   '   retired boolean DEFAULT false, -- if true then the patient is retired with this as last occupation
   '   notes_occupation text, -- notes about either the occupation or further comment on exposure risks
   '   deleted boolean DEFAULT false,
   '   fk_progressnote integer, 
   '   main_occupation boolean DEFAULT false,
   '   CONSTRAINT occupational_history_pkey PRIMARY KEY (pk),
   '   CONSTRAINT occupational_history_fk_consult_fkey FOREIGN KEY (fk_consult)
   '       REFERENCES clin_consult.consult (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT occupational_history_fk_occupation_fkey FOREIGN KEY (fk_occupation)
   '       REFERENCES common.lu_occupations (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT occupational_history_fk_progressnote_fkey FOREIGN KEY (fk_progressnote)
   '       REFERENCES clin_consult.progressnotes (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '------------------------------------------------------------------------------------------------------------
   Vbox_EditArea.Enabled = False 
   occupational_history = New CRow  
   If Not IsNull(fk_occupational_history) Then
      occupational_history.put_unchanged(fk_occupational_history, "fk_occupational_history")
   End If
   occupational_history!fk_consult = currentconsult.GetPK()
   occupational_history!fk_occupation = fk_occupation
   occupational_history!from_age = Val(txtFromAge.text)
   occupational_history!to_age = Val(txtToAge.text)
   occupational_history!notes_occupation = Trim(txtNotes.text)
   If chkMainOccupation.value = True Then                                        'if this new occupation is *main*
      occupational_history!main_occupation = True      
      modOccupationalHistoryDBI.Patient_Occupations_Mark_NotMain(currentconsult) 'mark all the patient's other occupations as not main
   Else
      occupational_history!main_occupation = False 
   Endif
   If chkCurrent.value = True Then                                               'can have many current occupations                                       
      occupational_history!current = True
   Else
      occupational_history!current = False   
   End If
   occupational_history!fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, Progress_Notes_Create(), const.cSection_OccupationalHistory, fk_progressnote, "Occupations")
   occupational_history.Save("clin_history.occupational_history", "fk_occupational_history")
   '----------------------------------------------------------------------------------------
   'The exposure - may not exist
   '----------------------------------------------------------------------------------------
   ' CREATE TABLE clin_history.lu_exposures
   ' (
   '   pk serial NOT NULL,
   '   exposure text NOT NULL,
   '   deleted boolean,
   '   CONSTRAINT lu_exposures_pkey PRIMARY KEY (pk)
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '----------------------------------------------------------------------------------------
   If Trim(txtExposure.text) <> "" Then  
      If IsNull(fk_lu_occupational_exposure) Then
         lu_occupational_exposure = New CRow 
         lu_occupational_exposure!exposure = Trim(txtExposure.text)
         lu_occupational_exposure.Save("clin_history.lu_occupational_exposures", "fk_lu_occupational_exposure")
         fk_lu_occupational_exposure = lu_occupational_exposure!fk_lu_occupational_exposure
      Endif
      '--------------------------------------------------------------------------------------------------
      ' CREATE TABLE clin_history.occupations_exposures
      ' (
      '   pk serial NOT NULL,
      '   fk_occupational_history integer NOT NULL, -- foreign key to clin_history.occupational_history
      '   fk_lu_occupational_exposure integer NOT NULL, -- foreign key to clin_history.lu_exposures
      '   exposure_duration integer, -- length of time exposed
      '   fk_lu_units integer, -- foreign key to common.lu_units table...
      '   deleted boolean DEFAULT false,
      '   notes_exposure text,
      '   CONSTRAINT occupations_exposures_pkey PRIMARY KEY (pk),
      '   CONSTRAINT occupations_exposures_fk_lu_occupational_exposure FOREIGN KEY (fk_lu_occupational_exposure)
      '       REFERENCES clin_history.lu_occupational_exposures (pk) MATCH SIMPLE
      '       ON UPDATE NO ACTION ON DELETE NO ACTION,
      '   CONSTRAINT occupations_exposures_fk_lu_units FOREIGN KEY (fk_lu_units)
      '       REFERENCES common.lu_units (pk) MATCH SIMPLE
      '       ON UPDATE NO ACTION ON DELETE NO ACTION,
      '   CONSTRAINT occupations_exposures_fk_occupational_history_fkey FOREIGN KEY (fk_occupational_history)
      '       REFERENCES common.lu_occupations (pk) MATCH SIMPLE
      '       ON UPDATE NO ACTION ON DELETE NO ACTION
      ' )
      ' WITH (
      '   OIDS=FALSE
      ' );
      '-------------------------------------------------------------------------------------------------------------------
      occupations_exposure = New CRow  
      If Not IsNull(fk_occupations_exposure) Then                                                 'an existing exposure changed
         occupations_exposure.put_unchanged(fk_occupations_exposure, "fk_occupations_exposure")
      End If
      occupations_exposure!fk_occupational_history = occupational_history!fk_occupational_history
      occupations_exposure!fk_lu_occupational_exposure = fk_lu_occupational_exposure
      If Trim(txtduration.text) <> "" Then   
         If rbDurationDays.value = True Then occupations_exposure!fk_lu_units = const.Units_day
         If rbDurationMonths.value = True Then occupations_exposure!fk_lu_units = const.Units_month
         If rbDurationYears.Value = True Then occupations_exposure!fk_lu_units = const.Units_year
         occupations_exposure!exposure_duration = Val(txtduration.text)
      End If   
      If Trim(txtNotesExposure.text) <> "" Then  
         occupations_exposure!notes_exposure = Trim(txtNotesExposure.text)
      Else
         occupations_exposure!notes_exposure = Null
      End If
      occupations_exposure.Save("clin_history.occupations_exposures", "fk_occupations_exposure")
   End If   
   '--------------------------------------------------------------------------------
   'Update the contacts.data_persons table which contains the patient's occupation
   '-------------------------------------------------------------------------------
   person = New CRow                                          'update retirement status at a minimum
   person.put_unchanged(currentconsult!patient!fk_person, "fk_person")
   If occupational_history!main_occupation Then                  'if this is the main occupation
      person!fk_occupation = fk_occupation
   End If   
   If chkRetired.Value = True Then
      person!retired = True
   Else
      person!retired = False  
   Endif
   person.Save("contacts.data_persons", "fk_person")
   '------------------------------------------------------------
   ' Finally update other parts of the program using occupations
   '------------------------------------------------------------
   modDbConnect.CommitTrans()
   EditArea_NotifyChange(False)   
   currentconsult!patient!fk_occupation = fk_occupation
   currentconsult!patient!occupation = Trim(txtoccupation.text) 
   If chkMainOccupation.value = True Or cvwOccupations.count = 0 Then  
      FClinicalToolbar.Refresh_Occupation              'and the display on the main clinical toolbar
   End If   
   FClinical.Refresh_Section(const.cSection_HealthSummary)    'check if health summary showing, if so update it as it has occupations on it
   Try FGPMPTCA.GPMP_Update()
   Reload()   
   
End

Public Function Progress_Notes_Create() As String
   '--------------------------------------------
   'Construct progress notes for this occupation
   '--------------------------------------------
   
   Dim sHtml As String
   Dim sString As String
   
   '-----------------------------------------------------------------
   'If this is the first row in the view for an occupation, show that
   '-----------------------------------------------------------------
   sString = "New occupation noted: "
   If fk_consult <> currentconsult.GetPK()
      sString = "Occupational details changed:"
   End If
   
   sString &= Trim(txtoccupation.text)
   If chkCurrent.value = True Then  
      sString &= " [Current]"
   Else
      If chkRetired.Value = True Then
         sString &= " [Retired]"
      End If
   End If
   '-----------------------
   'work out the age string
   '-----------------------
   If Trim(txtFromAge.text) <> "" Then
      sString &= " from age " & Trim(txtFromAge.text) & "yrs"
      If Trim(txtToAge.text) <> "" Then
         sString &= " to age " & Trim(txtToAge.text) & "yrs"
      End If
   Else
      If Trim(txtToAge.text) <> "" Then
         sString &= " from age -? to age " & Trim(txtToAge.text)
      End If
   End If
   If Trim(txtNotes.text) <> "" Then   
      sString &= " (" & Trim(txtNotes.text) & " )"
   End If
   sHtml &= sString
   If Trim(txtExposure.text) <> "" Then
      sHtml &= " - workplace exposure: " & Trim(txtExposure.text)
      If Trim(txtduration.text) <> "" Then 
         sHtml &= " for a period of "
         shtml &= Trim(txtduration.text) & " "
         If rbDurationDays.value = True Then shtml &= "day"
         If rbDurationMonths.Value = True Then shtml &= "month"
         If rbDurationYears.Value = True Then shtml &= "year"
         
         If Val(txtduration.text) > 1 Then
            shtml &= "s"
         End If
      End If
      sHtml &= ". "
      If Trim(txtNotesExposure.text) <> "" Then
         sHtml &= " Notes:" & Trim(txtNotesExposure.text) & "."
      End If
   End If   
   
   'this is old code, for when you could put in multiple exposures, keep this
   'till I fix the gui to do that
   ' If Exposures.count <> 0 Then
   '    For Each Exposure In Exposures
   '       '--------------------------------------------------------
   '       'If the same occupation, just add any more work exposures
   '       'except if this progress note is being constructed during
   '       'a delete
   '       '--------------------------------------------------------
   '       If Exposure!exposure <> "" And IsNull(Exposure!deleted) Then
   '          If Not InStr(shtml, "workplace exposure") Then 'do not move these lines
   '             sHtml &= " - workplace exposure: "       'otherwise text for delete where
   '          End If                                         'single exposure exists will be wrong
   '          sHtml &= Exposure!exposure
   '          If Not IsNull(Exposure!exposure_duration) Then
   '             sHtml &= " for a period of "
   '             shtml &= Str(Exposure!exposure_duration) & " " & const.UnitsText[Exposure!fk_lu_units]
   '             If Exposure!exposure_duration > 1 Then
   '                shtml &= "s"
   '             End If
   '          End If
   '          sHtml &= ". "
   '          If Not IsNull(Exposure!notes_exposure) Then
   '             sHtml &= " Notes:" & Trim(Exposure!notes_exposure)
   '          End If
   '          sHtml &= ","
   '       End If
   '    Next
   ' End If
   If Right(sHtml) = "," Then
      sHtml = Left(sHtml, Len(sHtml) - 1)
   End If
   Return sHtml
   
End

Public Sub Exposure_Delete()
   '------------------------------------------------------------------------------------------------------------
   'Delete the highlighted exposure, insist on audit if done in different consultation or day (if user the same)
   'FIXME - IMPLEMENT THIS
   '------------------------------------------------------------------------------------------------------------
   
   EditArea_NotifyChange(True)
   If Message.Warning("Do you really want to delete this work exposure: " & occupational_history[cvwExposures_key]!exposure, "Yes", "No") = 2 Then
      EditArea_NotifyChange(False)
      Return
   End If
   modDBConnect.update("clin_history.occupations_exposures", Null, ["pk": fk_occupations_exposure, "deleted": True])
   EditArea_Exposure_Clear      'removes exposure and resets the keys
   Vbox_EditArea.Padding = 1
   Save()       're-save this will re-generate the progress notes without the exposure details
   
End

Public Sub Exposures_Get()
   '------------------------------------------------------
   'fetches a list of substances or things the person may
   'have been exposed to from clin_History.lu_exposures
   '------------------------------------------------------
   
   Dim $Result As Result
   
   With listview1
      .Clear
      .Visible = False  
   End With
   If Trim(txtExposure.text) = "" Then Return
   $Result = modOccupationalHistoryDBI.Exposures_Get(Trim(txtExposure.text))
   If $Result.count Then
      For Each $Result
         listview1.Add($Result!pk, $Result!exposure)
      Next
      listview1.Visible = True
   Else
      listview1.Visible = False
   End If
   
End

Public Sub OccupationsList_Refresh()
   '--------------------------------------------------------------------------------------
   'Refreshes the occupational history list and displays it like this:
   ' Occupation from-age to-age notes - exposure(s)
   'Note: the only unique key in view is :occupational_history!pk_link_occupation_exposure
   'which identifies the occupational history item for editing
   '---------------------------------------------------------------------------------------
   
   Dim Astring As String
   Dim current_fk_occupation As Variant
   
   cvwOccupations.Clear()
   currentconsult.Refresh("occupational_history")     'reload all the history
   occupational_history = currentconsult!occupational_history 'for ease of typing
   For Each occupation In occupational_history
      '-------------------------------------------------------------------------------------------
      'If this is a new occupation, then add a new row to the columnview
      '      occupation  from-age to-age notes and exposures
      'e.g: teacher from age 20-40 'worked in the outback' exposed to noise, dust and pupils
      'The key of the columnview = the index of the currentconsult!occupational_history collection
      '-------------------------------------------------------------------------------------------
      If occupation!fk_occupation <> current_fk_occupation Then
         '-------------------------------------------------------------------------------------------
         'If the occupation on the row we are reading <> the last one read, add new row in columnview
         '-------------------------------------------------------------------------------------------
         current_fk_occupation = occupation!fk_occupation  'set the occupation
         pk_view = occupation!pk_view                            'unique key from view
         cvwOccupations.Add(pk_view, 0)                                    'column 0 = the occupation
         cvwOccupations[pk_view][0] = occupation!occupation
         '-------------------------------------------------
         'We must allow the occupation only for slack users
         '-------------------------------------------------
         Astring = ""
         If Not IsNull(occupation!from_age) Then
            Astring = "From age " & occupation!from_age
            If Not IsNull(occupation!to_age) Then
               Astring &= " to age " & occupation!to_age
            End If
         Else
            If Not IsNull(occupation!to_age) Then
               Astring = "From age -unknown to age " & occupation!to_age
            End If
         End If
         cvwOccupations[pk_view][1] = Astring
      End If
   Next
   
End

Public Sub Reset_Fonts()
   '-----------------------------------------------------------------------------
   'PURPOSE     :If application.fonts has been changed, then the labels could
   '            no longer be wide enough so the display would look funny
   '
   'HOW IT WORKS:loop through all the labels on the form and make sure they
   '             are correct size.LblMeasure is a hidden control.
   'NB:         :Resize those labels in the gui with autoresize = false
   '             I have set ones I don't want to be resized manually by this
   '             routine too auto-resize = True - ie they will do it themselves
   '-----------------------------------------------------------------------------
   
   Dim hCtrl As Control
   Dim ABox As HBox
   Dim lbl As Label
   
   For Each Hctrl In Vbox_EditArea_Inner.Children
      If hctrl Is Hbox Then
         Abox = hctrl
         For Each hctrl In Abox.Children
            If hctrl Is Label Then
               lbl = hctrl
               If lbl.AutoResize = False Then
                  lbl.width = lblmeasure.Width
               End If
               Break
            End If
         Next
      End If
   Next
   
End

Public Sub cvwOccupations_Select()
   
   cvwOccupations.MoveCurrent
   cvwOccupations_key = cvwOccupations.Item.Key      'key to clin_history.vwOccupationalHistory
   pk_view = cvwOccupations.Item.key       '= pk_link_occupational_exposure for no reason other than uniqueness
   Occupational_Details_Display()                   'display occupation details in edit area
   
End

Public Sub Occupational_Details_Display()
   '-------------------------------------------------------------------------------------
   'Displays the current occupation in the editing area
   'Note: view_key_occupation = key to the currentconsult!occupational_history collection
   '    : currentoccupation!fk_occupation = key to common.lu_occupations table eg. Teacher
   '    : currentoccupation.fk_occupations = key to clin_history.occupations table
   '      which is info about the patients current occupation eg age from-to, notes etc
   '-------------------------------------------------------------------------------------
   
   EditArea_Clear()                       'clear the display area
   Vbox_EditArea.Enabled = False 
   bExit = True
   fk_occupation = occupational_history[pk_view]!fk_occupation                          'key to lu_occupations
   fk_occupational_history = occupational_history[pk_view]!fk_occupational_history      'key to the data table clin_history.occupations
   fk_progressnote = Null
   If Format(currentconsult.GetConsultDate(), "dd/mm/yyyy") = Format(occupational_history[pk_view]!consult_date, "dd/mm/yyyy") Then
      fk_progressnote = occupational_history[pk_view]!fk_progressnote
   End If
   fk_consult = occupational_history[pk_view]!fk_consult
   txtOccupation.text = occupational_history[pk_view]!occupation
   txtFromAge.text = occupational_history[pk_view]!from_age
   txtToAge.text = occupational_history[pk_view]!to_age
   txtNotes.text = occupational_history[pk_view]!notes_occupation
   chkMainOccupation.value = occupational_history[pk_view]!main_occupation
   chkCurrent.value = occupational_history[pk_view]!current
   chkRetired.value = currentconsult!patient!retired
   bExit = False
   EditArea_NotifyChange(False)
   cvwOccupations.Item.Selected = True     'by setting marquee
   ExposuresList_Refresh()                 'display their exposures in edit area
   If cvwExposures.count <> 0 Then
      cvwExposures.MoveFirst()               'and highlight first row of the list
      cvwExposures.Item.Selected = True      'by setting marquee
      Exposure_Display()
   End If
   
End

Public Sub ExposuresList_Refresh()
   '-------------------------------------------------------
   'User has clicked on a row of cvwOccupationalhistory, so
   'next refresh the exposures for that occupation
   '-------------------------------------------------------
   
   Dim exposure As Collection
   Dim view_row As Collection
   
   Exposures = New Collection
   '------------------------------------------------------
   'For each of the patients occupational histories
   'if this occupation = the one loaded into the edit area
   'add the exposures to the exposures list
   'NB: if a new item is later added to this list, then
   'cannot use a numerical key as any number could be
   'the same as pk_link_occupation_exposure, so when we
   'later do this I will use the actual exposure itself
   'as the key. However this is all bullshit as I've
   'temporarily removed the ability to add > 1 exposure!
   'so will never be more than 1 collection member - fixme
   '-------------------------------------------------------
   cvwExposures.Clear()
   For Each view_row In occupational_history
      If view_row!fk_occupation = fk_occupation And view_row!exposure_deleted = False Then
         cvwExposures_key = view_row!pk_view
         cvwExposures.Add(cvwExposures_key, 0)
         cvwExposures[cvwExposures_key][0] = view_row!exposure
         cvwExposures[cvwExposures_key][1] = Str(view_row!exposure_duration) & view_row!abbrev_text 'e.g 10Y
         '-------------------------------------------------------------------------------
         'Now add the individual exposure to the exposures collection for this occupation
         '-------------------------------------------------------------------------------
         exposure = New Collection
         exposure!fk_occupations_exposures = view_row!fk_occupations_exposures        'key to occupations exposures table
         exposure!fk_exposure = view_row!fk_exposure
         exposure!exposure = view_row!exposure
         exposure!exposure_duration = view_row!exposure_duration
         exposure!fk_lu_units = view_row!fk_lu_units
         exposure!notes_exposure = view_row!notes_exposure
         Exposures.Add(Exposure, cvwExposures_key) 'the key linking back to the view row
      Endif
   Next
   
End

Public Sub Exposure_Display()
   '--------------------------------------------------------------------------
   'Displays the exposure in the editing area from the current highlighted row
   '--------------------------------------------------------------------------
   
   EditArea_Exposure_Clear()
   bExit = True
   fk_occupations_exposure = occupational_history[cvwExposures_key]!fk_occupations_exposure
   fk_lu_occupational_exposure = occupational_history[cvwExposures_key]!fk_lu_occupational_exposure
   txtduration.text = occupational_history[cvwExposures_key]!exposure_duration
   Select Case occupational_history[cvwExposures_key]!fk_lu_units
      Case const.Units_day
         rbDurationDays.value = True   
      Case const.Units_month
         rbDurationMonths.value = True 
      Case const.Units_year
         rbDurationYears.value = True  
   End Select
   txtNotesExposure.text = occupational_history[cvwExposures_key]!notes_exposure
   txtExposure.text = occupational_history[cvwExposures_key]!exposure
   bExit = False
   
End

Public Sub EditAreaButtons_KeyPress()
   '---------------------------------
   'Enter key triggers button actions
   '---------------------------------
   
   If key.code <> key.return Then Return
   EditAreaButtons_Click()
   
End

Public Sub mnuExposures_Click()
   
   Select Case Last.tag
      Case "edit"
         Vbox_EditArea.Enabled = True
      Case "delete"
         exposure_delete()
      Case "help"
         modUtilGUI.NotImplemented("Help")
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwExposures, "FOccupation")
   End Select
Catch
   Return
   
End

Public Sub mnuOccupations_Click()
   '--------------------------------------------------------------
   'User has clicked on the popup list over the actual occupations.
   '---------------------------------------------------------------
   
   Select Case Last.tag
      Case "edit"
         Vbox_EditArea.Enabled = True
      Case "delete"
         occupation_delete()                     'Delete occupation and all exposures
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwOccupations, "FOccupation")
      Case "help"
         modUtilGUI.NotImplemented("Help")
   End Select
Catch
   Return
   
End

Public Sub Occupation_Delete()
   '--------------------------------------------------------------------------------------------
   'Deletes an occupation and all its exposures, don't enforce audit reason - not that important
   'check if health summary showing, if so update it as it has occupations on it
   '--------------------------------------------------------------------------------------------
   
   Dim audit_note As String
   
   cvwOccupations.MoveCurrent()
   audit_note = "The patient's occupation " & occupational_history[pk_view]!occupation & " was deleted."
   If Message.Question("Are you sure  you want to delete the occupation " & cvwOccupations.Item.text & "?\n\nIf you continue all associated work exposures will also be deleted.", "Yes", "No") = 2 Then Return
   modDBConnect.update("clin_history.occupational_history", Null, ["pk": fk_occupational_history, "deleted": True])                  'delete the occupation
   If occupational_history[pk_view]!fk_consult = currentconsult.GetPK() Then                                                         'if created today remove associated progress note
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": occupational_history[pk_view]!fk_progressnote, "deleted": True]) 'and put in obligatory audit trail (well should be I think sometimes I've forgotten!)
      modAudit.MakeAudit(currentconsult, "reversal", "clin_consult.progressnotes", occupational_history[pk_view]!fk_progressnote, const.cSection_progressnotes, "occupation deleted during current consult - i.e reversal of entry")
   Endif
   modDBConnect.exec_query("Update clin_history.occupations_exposures set deleted = True where fk_occupational_history = " & fk_occupational_history)  'and any exposures
   If occupational_history[pk_view]!main_occupation Then
      modDBConnect.exec_query("update  contacts.data_persons set fk_occupation = null where pk=" & currentconsult!patient!fk_person)
   Endif
   If modAudit.MakeAudit(currentconsult, "delete", "clin_history.occupational_history", fk_occupational_history, const.cSection_OccupationalHistory, audit_note) Then
      modDBConnect.CommitTrans()
      FClinical.Refresh_Section(const.cSection_HealthSummary) 
      FClinicalToolbar.Refresh_Occupation
   Else
      modDbConnect.RollBack
   End If   
   Reload()
   
End

Public Sub cvwOccupations_Menu()
   
   If cvwOccupations.count Then mnuOccupations.Popup()
   
End

Public Sub cvwExposures_Menu()
   
   If cvwExposures.count Then mnuExposures.Popup()
   
End

Public Sub Delete()
   
End

Public Sub cvwExposures_Click()
   
   If Not cvwExposures.count Then Return
   cvwExposures.MoveCurrent
   cvwExposures_key = cvwExposures.Item.Key
   Exposure_Display()
   
End

Public Sub Vsplit_Occupations_Resize()
   
   If Listview1.Visible Then
      Listview1.top = ReferenceHboxForTopColumnview.top + ReferenceHboxForTopColumnview.Height
   Endif
   
End

Public Sub Form_Resize()
   
   Vsplit_Occupations_Resize()
   Listview1.width = txtOccupation.Width
   
End

Public Sub chkEditArea_Click()
   
   EditArea_NotifyChange(True)
   If Last.tag = "retired" Then chkCurrent.value = False 
   
End
