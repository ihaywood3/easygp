' Gambas module file

' DATABASE routines so load and save patients occupations data
'
' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------

Public Function Save(currentconsult As Cconsult, fk_occupational_history As Integer, occupation As Collection, fk_exposure As Integer, exposure As Collection, pk_view As String, view_key_exposure As String) As Integer 
   '---------------------------------------------------------------------------------------
   'Save or update the patients occupational history either just the occupation or
   'if there was an associated work exposure save that as well.
   'This edit area is unusual in that there may be only a single bit of data saved 
   '- the primary key To an occupation, into the table in clin_history.occupational_history
   '---------------------------------------------------------------------------------------
   
   '------------------------------------------------------------
   'First save the actual occupation, age from, to and any notes
   '------------------------------------------------------------
   fk_occupational_history = Patients_Occupation_Save(currentconsult, fk_occupational_history, occupation, pk_view) 
   '---------------------------------------
   'Save any new exposures eg 'Teacher' 
   '---------------------------------------
   If IsNull(exposure!fk_exposure) And Not IsNull(exposure!exposure) Then
      exposure!fk_exposure = Exposure_Save(exposure)
   End If
   
   ' If IsNull(exposure!fk_occupations_exposures) Then
   ' 
   '     
   ' Else
   '     modDBConnect.update("clin_history.occupations_exposures", currentconsult!occupational_history[view_key_exposure], exposure, "fk_occupations_exposures")
   ' End If
   '--------------------------------------------
   'Link the occupation and the current exposure
   '--------------------------------------------
   If Not IsNull(exposure!fk_exposure) Then
      exposure!fk_occupations_exposures = Occupation_Exposure_Link(currentconsult, exposure, fk_occupational_history, view_key_exposure)
   End If
   
   Return fk_occupational_history  '= the view key
   
End

Public Sub Exposure_Mark_Deleted(currentconsult As CConsult, exposure As Collection) ' pk_occupations_exposures As Integer
   '----------------------------------------------------------------------------------------
   'Marks a workplace exposure as deleted from patients record does not delete the exposure.
   'Exposure dates of entry are not kept currently
   '-----------------------------------------------------------------------------------------
   
   Dim audit As New Collection
   Dim sql As String
   Dim iAuditAction As Integer
   
   exposure!tablename = "occupations_exposures" 'so audit knows which table to display
   sql = "UPDATE clin_history.occupations_exposures  SET  deleted = True WHERE pk = "
   sql &= exposure!fk_occupations_exposures
   
   audit!fk_row = exposure!pk_occupations_exposures
   audit!fk_consult = currentconsult.GetPK()
   audit!fk_section = const.cSection_OccupationalHistory
   audit!fk_action = const.cAuditAction_Delete
   
   audit!data_summary = exposure!exposure
   iAuditAction = const.cAuditAction_MarkDeleted
   
   '-------------------------------------------------------------------------------------------------
   ' occupational exposure could be deleted either during consulation (ie mistake in the first place)
   'in which case don't need FAudit to popup and get the reason as we are allowed to change out mind
   'within the consultation.
   '--------------------------------------------------------------------
   FAudit.Init(Exposure, Const.cSection_OccupationalHistory, iAuditAction, currentconsult)
   If Not FAudit.ShowModal() Then Return 
   audit!reason = Last.tag & ":<BR> - " & Lower(const.globalstring)
   '----------------------------------------
   'Ok, delete and and create an audit trail
   '----------------------------------------
   modDBConnect.exec_query(sql)                                                 'mark the occupation as deleted
   Message.Info("Richard - stop program and check here")
   
End

Public Function Patient_Occupation_Is_It_Recorded(fk_patient As Integer, fk_occupation As Integer) As Boolean
   '------------------------------------------------------------------------------------------ 
   'checks to see if the patient's occupation is recorded in clin_history.occupational_history
   'This is only used if the clerical staff enter the patient's occupation
   'Returns True if the occupation is recorded
   '------------------------------------------------------------------------------------------ 
   
   Dim sql As String
   Dim R As Result
   
   sql = "Select * from clin_history.vwOccupationalHistory where fk_patient=" & fk_patient & " AND fk_occupation=" & fk_occupation
   R = modDBConnect.exec_query(sql)
   If R.count Then 'patient has not got this occupation recorded
      Return True  
   End If
   Return 
   
End

Public Function Patients_Occupation_Save(currentconsult As Cconsult, fk_occupational_history As Integer, Occupation As Collection, pk_view As String) As Integer
   '----------------------------------------------------------------------------------------------------------
   'WHAT THIS DOES :Saves the patients occupation details to clin_history.occupations table
   'returns the primary key of this table. Note the occupation_details <> contacts.data_patients.fk_occupation
   'Check If the occupation exists
   'Note: fk_occuption = key to common. lu_occupation table
   '      if it <> fk_occupations = key to clin_history.occupations table = person's occupations
   '----------------------------------------------------------------------------------------------------------
   
   If Occupation!fk_occupation = 0 Then  '?could be null
      Occupation!fk_occupation = modCommonDBI.occupation_save(Occupation!occupation)
   End If
   Try Occupation.Remove("occupation")             'remove unwanted key or it crashes IAN CHECKME
   '---------------------------------------------------------------------------
   'no existing primary key, create new entry in clin_history.occupations table
   '---------------------------------------------------------------------------
   If fk_occupational_history < 0 Then 
      Occupation!fk_consult = currentconsult.GetPK()
      Occupation!fk_occupational_history = modDBConnect.insert("clin_history.occupational_history", Occupation)
   Else
      '----------------------------------------------------------------------------------
      'This is an existing record, ' save to backend and update the collection in RAM too
      '----------------------------------------------------------------------------------
      If modDBConnect.update("clin_history.occupational_history", currentconsult!occupational_history[pk_view], Occupation, "fk_occupational_history") Then 
         '------------------------------------------------------------------------
         'If successful save, write the audit trail
         'what was changed, for auditing purposes this will be hidden
         '------------------------------------------------------------------------
         ' modConsultDBI.Make_Audit(currentconsult, gvar.cSection_SocialHistory, history!history, currentconsult!social_history[old_pk]!history)
      End If
   End If
   Return Occupation!fk_occupational_history
   
End

Public Sub Occupation_Exposure_Link(currentconsult As Cconsult, exposure As Collection, fk_occupational_history As Integer, view_key_exposure As String) As Integer
   '-------------------------------------------------------------
   'Creates or edits a link between an occupation and an exposure
   'in clin_history.occupations_exposures table
   'e.g would link a 'fitter and Turner' to 'noise'
   ' exposure collection at entry to this routine:
   '        !exposure                 - needed at entry, not needed now
   '        !fk_exposure              - key to clin_history.exposures table
   '        !fk_occupations           - key to clin_history.occupations table
   '        !exposure_duration        - value eg 10
   '        !exposure_duration_units  - key to common.lu_units table
   '        !notes                    - notes about the exposure
   '---------------------------------------------------------------
   
   Try exposure.Remove("exposure")  'don't need the text IAN CHECKME NOT DOING THIS > CRASH I THINK THIS IS NEEDED
   If IsNull(exposure!fk_occupations_exposures) Then
      '--------------------------------------
      'If the exposure is new, create the link
      '---------------------------------------
      exposure!fk_occupational_history = fk_occupational_history
      exposure!fk_occupations_exposures = modDBConnect.insert("clin_history.occupations_exposures", Exposure)  
   Else
      '--------------------------------------------
      'This is an existing record, save any changes
      '--------------------------------------------
      If modDBConnect.update("clin_history.occupations_exposures", currentconsult!occupational_history[view_key_exposure], exposure, "fk_occupations_exposures") Then ' save to backend and update the collection in RAM too
         '------------------------------------------------------------------------
         'If successful save, write the audit trail
         'what was changed, for auditing purposes this will be hidden
         '------------------------------------------------------------------------
         Message.Info("Richard - stop program and check here")
      End If
   End If
   Return exposure!fk_occupations_exposures
   
End

Public Function Exposures_Get(exposure As String) As Result
   '------------------------------------------------------------
   'Gets a list of things the worker  could have been exposed to
   'returns collection which could be empty
   '------------------------------------------------------------
   
   Dim sql As String
   
   sql = "SELECT * FROM clin_history.lu_exposures WHERE lower (exposure) ILIKE $$" 
   sql &= Lower(exposure) & "%$$  LIMIT 20"
   Return modDBConnect.exec_query(sql)
   
End

Public Function Exposure_Save(exposure As Collection) As Integer
   '-----------------------------------------------------------
   'Inserts a new exposure into clin_history.lu_exposures table
   'returns the primary key
   'FIXME
   '-----------------------------------------------------------
   
   Dim sql As String
   
   sql = "insert into clin_history.lu_exposures (exposure)  VALUES($$"
   sql &= exposure!exposure & "$$) returning pk"
   Return modDBConnect.exec_query(sql)!pk
   
End

Public Sub OccupationalHistory_Get(fk_patient As Integer) As Collection
   '-----------------------------------------------------
   'returns a collection of occupational histories ordered by occupation
   'hence the collection will look like this:
   '  occupation1 exposure1
   '  occupation1 exposure2
   '  occupation2 exposure1
   ' or 
   '  occupation3  (nil exposure)
   '-----------------------------------------------------
   
   Dim sql As String
   
   sql = "Select * from clin_history.vwOccupationalHistory where fk_patient = " & fk_patient & " And " 
   SQL &= "occupational_history_deleted = False " ' and (exposure_deleted = False or exposure_deleted is null) "
   SQL &= " ORDER BY fk_occupation"
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Sub Patient_Occupation_Make_Current_And_Main(fk_occupational_history As Integer)
   '---------------------------------------------------------------------------------- 
   'Makes the occupation pointed to by the key the  key the main and active occupation
   '----------------------------------------------------------------------------------
   
   modDBConnect.update("Clin_history.occupational_history", Null, ["pk": fk_occupational_history, "current": True])
   modDBConnect.update("Clin_history.occupational_history", Null, ["pk": fk_occupational_history, "main_occupation": True])
   
End

Public Sub Patient_Occupations_Mark_NotCurrentOrMain(currentconsult As CConsult)
   '-----------------------------------------------------------------------------------------
   'Mark all occupations in their occupational history as not current and not main occupation
   'Called in two occasions in Fclinical.Occupation_Save which itself is called when the
   'user has typed in the occupation textbox on the main toolbar. (just a quick way for the
   'user to update the occupation without loading the FOccupationalHistory module
   '-----------------------------------------------------------------------------------------
   
   Dim C As Collection
   Dim occupationalhistory As CRow

   For Each C In currentconsult!occupational_history
      occupationalhistory = New CRow
      occupationalhistory.put_unchanged(C!fk_occupational_history, "fk_occupational_history")
      occupationalhistory!fk_consult = C!fk_consult          'not null field, re-use old fk_consult, it doesn't matter
      occupationalhistory!fk_occupation = C!fk_occupation    'not null field,
      occupationalhistory!main_occupation = False  
      occupationalhistory!current = False  
      occupationalhistory.Save("Clin_history.occupational_history", "fk_occupational_history")
   Next 
   
End

