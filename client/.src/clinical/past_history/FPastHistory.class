' Gambas class file

' Copyright (C) 2008-2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'FIXME:
' Look at implications if you allow the user to change an existing diagnosis wording
' this should be allowable eg (could have made a spelling mistake etc, but need
' to ripple this change through to other sections sharing the previous spelling
'Don't change the save icon colour until actually do the accept.
'ABOUT THE FORM DESIGN
'                       The rblaterality tags = const.laterality values, 0,1,2,3
'                       the rbSignificance tags = const.HealthIssue_*name*, 0,1,2
'-------------------------------------------------------------------------------
Private currentconsult As CConsult
Private bEmbedded As Boolean             'If true the form is embedded in a frmConsultNotes editor

Private embedded_form As String          'the form this form is embedded in
Private bKeyValid As Boolean            'used in textbox routines
Private iAgeinMonths As Integer         'currentconsult.patients age in months
Private iCodingSystem As Integer  
Private CurrentPastHistoryCVW As Columnview
Private Terms As Collection
Private Term As Collection 
Private currentPastHistory As Collection
Private currentTerm As Collection
Private pk_pasthistory As Integer
Public iProblemKey As Integer   'see problemlists_Select
Private bExit As Boolean
Private bEditing As Boolean 'True if we are editing an existing saved or unsaved record.
Private collection_members As Collection
Private collection_member As Collection 
Private TeamCareMember_SearchBy_Criteria As Integer
Private obs As Observer
Private iAgeOnsetUnits As Integer 
Private fk_pastHistory As Integer
Private fk_progressnote As Integer
Private fk_laterality As Integer
Private fk_significance As Integer
Private fk_code As String
Private fk_coding_system As Integer
Private fk_consult As Integer 

Private sSearchLimit As Integer = 20 'default to only get 20 terms
'fixme make me configurable
'-----------------------------------------------------
'these integer keys used to identify team care members
'-----------------------------------------------------
Private fk_organisation As Integer
Private fk_branch As Integer
Private fk_employee As Integer
Private fk_person As Integer
'--------------------------------------------------------------------------
'These are used to identify which of the three problem lists are clicked on
'--------------------------------------------------------------------------
Private scurrentPastHistoryList As String
Private iTemporaryProblemKey As Integer
Private currentICPC2Term As Collection 
'------------------------------
'stuff for the components grid
'-----------------------------
Private iRow As Integer
Private icol As Integer
Private iRowHeight As Integer
Private current_careplan_components As Collection
Private view_careplan_components As Collection
Private embedded_in_form As String
Private currentCarePlanComponent As Collection
Private CareTaskRow As CCareTaskRow
Private task_rows As Integer
Private current_Task_Row As Hbox
Private Form_Terms As FCodedTermSelector
Private ProblemLists As FPastHistoryProblemLists
Static Private form_pasthistory As FPastHistory        

Public Sub set_embedded(flag As Boolean, embeddedinform As String)
   '--------------------------------------------------
   'If this form is embeded from another form set flag
   'embeddedinform = either "notes" or "documents"
   '--------------------------------------------------
   
   bEmbedded = flag
   embedded_in_form = embeddedinform
   
End

Public Function Consult_Exists() As Boolean
   '-----------------------------------------------------
   'If the consult as been passed to the form return true
   '-----------------------------------------------------  
   
   If IsNull(currentconsult) Then Return False
   Return True
   
End

Public Function Consult_Set_Null() 
   '-----------------------------------------------------
   'If the consult as been passed to the form return true
   '-----------------------------------------------------  
   
   currentconsult = Null
   
End

Public Function HealthIssue_GetName() As String
   
   '  Return currentPastHistory!description 
   Message.Info("Richard: in Past history: Trying to get name:check this")
   
End

Public Function pk_pasthistory_get() As Integer
   
   Return pk_pasthistory
   
End

Public Function pk_pasthistory_set(fk_ph As Integer)
   '----------------------------------------------------
   'allows a another form to set the current problem
   'eg FClinical with popup menu over the problem lists
   'so that this can be edited
   '---------------------------------------------------
   
   pk_pasthistory = fk_ph
   iProblemKey = fk_ph
   
End

Public Sub Update_Editarea_Plan(sText As String, progressnote_pk_pastHistory As Integer)
   '---------------------------------------------------------------------------------
   'Perhaps temporary, this is called from a progress note page
   'if the user has updated the progress notes summary in the progress note
   'and at the same time is editing the same past history item in past history module
   'match the text
   '---------------------------------------------------------------------------------
   
   If pk_pasthistory = progressnote_pk_pastHistory Then
      txtManagementSummary.text = sText
   End If
   
End

Public Sub Update_Editarea_Plan_Summary(sText As String, progressnote_pk_pastHistory As Integer)
   
   If pk_pasthistory = progressnote_pk_pastHistory Then
      txtHistoricalSummary.text = sText
   End If
   
End 

Public Sub Init(Cons As CConsult)
   '----------------------------------------------------------
   'PURPOSE    :Basic initialiseation
   'CALLED BY  :calling form e.g FrmClinical.Editor_ShowPage()
   ' Load the problem lists, create observors etc.
   '----------------------------------------------------------

   form_pasthistory = Me
   currentconsult = cons         'set current consult on this form
   
   With Form_Terms = New FCodedTermSelector(Me)
      .Ignore = True
      .Visible = False   
      .Height = 200
   End With
   
   With ProblemLists = New FPastHistoryProblemLists(VBox_ProblemLists)
      .Init(currentconsult, "Past History") 
   End With
   obs = New Observer(Problemlists.cvwProblemsActive) As "ProblemLists"
   obs = New Observer(Problemlists.cvwProblemsMajor) As "ProblemLists"
   obs = New Observer(Problemlists.cvwProblemsInActive) As "ProblemLists"
   ' obs = New Observer(ProblemLists.mnuProblemLists) As "mnuProblemLists"
   ' Object.Attach(ProblemLists.mnuProblemLists, Me, "mnuProblemLists")
   Try Settings_Load()               'set splits, font sizes etc
   lblMeasure.text = "  Management Summary  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblMeasure)
   modEditAreaHelpers.Resize_label(lblButtonBar, lblMeasure)
   obs = New Observer(Form_Terms.ColumnView1) As "Columnview1"
   HealthIssue_New()
   
End

Static Public Sub Edit_PastHistory()
   
   form_pasthistory.HealthIssue_Edit() 
   
End

Public Sub Form_Close()
   '----------------------------------------------
   'Save all current form settings and split sizes
   '----------------------------------------------
   
   Settings_Save()  
   ' Save()
   
End

Public Sub EditArea_YearOnset_CheckValid()
   '-------------------------------------------------------
   'IAN:README MAKE ME SMARTER
   'This is meant to just ensure the year of onset is valid
   ' Don't allow if invalid age or age < 0
   '-------------------------------------------------------
   
   Dim sTemp As String
   Dim STempYear As String
   Dim bDateValid As Boolean
   
   STemp = Trim(txtYearOnset.text)
   Select Case Len(sTemp)
      Case 4 'could be yyyy
         STempYear = "01/01/" & sTemp
         If IsDate(STempYear) Then 
            bDateValid = True
         Else
            txtYearOnset.text = ""
         End If
      Case 7 'could be mm/yyyy
         STempYear = "01/" & sTemp
         If IsDate(STempYear) Then 
            bDateValid = True
         Else
            txtYearOnset.text = ""
         End If
         
      Case 10 'could be dd/mm/yyyy
         If IsDate(STempYear) Then
            bDateValid = True
         Else
            txtYearOnset.text = ""
         End If
   End Select    
   
   If bDateValid = False Or DateDiff(currentconsult!patient!birthdate, STempYear, gb.year) < 0 Then
      ' lblYearOnsetInvalid.Text = "<<Invalid: try mm/yyyy e.g 12/2002 or" 
      ' lblYearOnsetInvalid.Foreground = Color.red
      ' lblYearOnsetInvalid.Visible = True   
      txtYearOnset.text = ""
   Else 
      '  lblWarning.Foreground = Color.white
      'calculate age this came on using months, so end up with mm/yyyy
      txtAgeOnset.text = DateDiff(currentconsult!patient!birthdate, STempYear, gb.year)
   End If
   
End

Public Function EditArea_AgeOnset_CheckValid() As Boolean
   '---------------------------------------------------------------
   'Ensures the age of onset if valid, display an prompt if invalid
   '---------------------------------------------------------------
   
   If Trim(txtAgeOnset.text) <> "" Then 
      If Val((Trim(txtAgeOnset.text))) > currentconsult!patient!age_numeric Then
         '    lblWarning.text = "<<Invalid age " & Trim(txtAgeOnset.text) & " is older than current age of " & currentconsult!patient!age_numeric
         '  lblWarning.Visible = True   
         
         Return False
         '  txtAgeOnset.SetFocus
      Else
         '    lblWarning.Visible = False
         txtYearOnset.text = Year(currentconsult!patient!birthdate) + Val(txtAgeOnset.text)
         txtHistoricalSummary.SetFocus()
         Return True
      End If
   End If
   Return False
   
End

Public Sub Reset_Fonts()
   '------------------------------------------------------------
   'If user has changed the application font, re-size all labels
   'to make gui look ok again
   '------------------------------------------------------------  
   
   Dim hCtrl As Control
   Dim ABox As HBox
   Dim lbl As Label
   
   For Each Hctrl In VBox_EditArea.Children
      If hctrl Is Hbox Then
         Abox = hctrl
         For Each hctrl In Abox.Children
            If hctrl Is Label Then
               lbl = hctrl
               '------------------------------------------------------
               'Resize those labels in the gui with autoresize = false
               'I have set ones I don't want to be resized to 
               'auto-resize = True
               '------------------------------------------------------
               If lbl.AutoResize = False Then
                  lbl.width = lblmeasure.Width 
               End If   
               Break
            End If
         Next
      End If
   Next
   
End

Public Sub EditArea_TxtBox_GotFocus()
   '-------------------------------------------
   'Set listbox to the correct screen position
   'Highlight the textbox with nice green color
   'FIXME: make this user-configurable
   '-------------------------------------------
   
   Dim x As Integer
   
   Listview1.Visible = False
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
      Case "coded term" 
         With Form_Terms
            .top = Last.Parent.Parent.Top + Last.Parent.Height + VSplit_PastHistory.top 
            .width = txtCodedTerm.Width
            .Left = Last.Parent.Left + VBox1.padding
            .Raise 
            .Visible = False  
            If Trim(Last.text) <> "" Then
               .Set_SearchText(Trim(Last.text))
            End If     
         End With
         
   End Select 
   
End

Public Sub EditArea_TxtBox_LostFocus()
   '-------------------------------------------------------------
   'When textbox loses focus, change color of background to white  .Border = False   
   '
   '-------------------------------------------------------------
   
   Last.BackGround = Color.White
   Select Case Last.tag
      Case "age onset"
         EditArea_AgeOnset_CheckValid()
      Case "coded term"
         Form_Terms.Timer1.Stop()
      Case "historical summary"
      Case "management plan"
         
   End Select    
   
End

Public Sub HealthIssue_Delete()
   '------------------------------------------------------------------------
   'Delete the currently highlighted health issue or problem
   'Annotates any existing progress notes as to who did the deletion
   'and converts all the text to strike through
   'Checks if this health is is currently open on a tab and removes the tab
   '-----------------------------------------------------------------------
   
   If Message.Warning("Are you sure you want to delete the current health issue?\n\n" & currentPastHistory!description, "Yes", "No") = 2 Then Return 
   modDBConnect.BeginTrans()
   modPastHistoryDBI.HealthIssue_Delete(currentconsult, pk_pasthistory, currentPastHistory)
   modDBConnect.CommitTrans()
   FClinical.Editor_RemovePage(iProblemKey)
   Reload()
   
End

Public Sub HealthIssue_Edit()
   
   Vbox_EditingArea.Enabled = True 
   
End

Public Sub HealthIssue_Display()
   '----------------------------------------------------------
   'Place the contents of currentProblem into the editing area
   'When this data is placed into the textboxes and checkboxes
   'the change event in those controls will also be triggered
   'so must set bExit to true whilst loading the data
   'Note: cannot do:currentPastHistory = currentconsult!past_history[pk_pasthistory]
   '----------------------------------------------------------
   
   Dim PH_From_View As Collection    'for easy of readability = member of the view selected
   
   EditArea_Clear()  'clear boxes, create new currentPastHistory also clears pk_pasthistory fixme
   bEditing = True
   pk_pasthistory = iProblemKey 'set when user clicked on list see problemlists_select 
   PH_From_View = currentconsult!past_history[pk_pasthistory]
   '-------------------------------------------------------------------
   'set a couple of keys, the rest of the members of currentPastHistory
   'will be set by the change events in the edit area
   '-------------------------------------------------------------------  
   fk_consult = PH_From_View!fk_consult
   fk_coding_system = PH_From_View!fk_coding_system
   fk_code = PH_From_View!fk_code
   '-----------------------------------------------------------------------------
   'If we are editing a past history item, saved during current consult, 
   'or, if re-editing this item within the working day then
   'use the pk_progress note which will already have been created, otherwise there
   'is no fk_progress note yet
   'FIXME: What if a different user is doing this? Must put in some auditing here
   '-----------------------------------------------------------------------------
   fk_progressnote = -1
   If PH_From_View!fk_progressnote <> 0 Then
      If Format(Now, "dd/mm/yyyy") = Format(PH_From_View!date_noted, "dd/mm/yyyy") Then 
         fk_progressnote = PH_From_View!fk_progressnote
      End If
   End If 
   txtCondition.text = PH_From_View!description
   txtCodedTerm.text = PH_From_View!combined_term_code
   Select Case PH_From_View!fk_laterality
      Case 1 
         rbLateralityLeft.value = const.LateralityLeft
      Case 2 
         rbLateralityRight.value = const.LateralityRight
      Case 3 
         rbLateralityBoth.value = const.LateralityBoth
   End Select
   txtHistoricalSummary.text = PH_From_View!condition_summary
   txtAgeOnset.text = PH_From_View!age_onset
   txtYearOnset.text = PH_From_View!year_onset
   iAgeOnsetUnits = PH_From_View!age_onset_units
   txtManagementSummary.text = PH_From_View!management_summary
   txtAim.text = PH_From_View!aim_of_plan
   rbSignificantActive.value = PH_From_View!active
   rbMajor.value = PH_From_View!major
   If PH_From_View!active = False And PH_From_View!major = False Then
      rbInactive.Value = True
   End If   
   chkOperation.Value = PH_From_View!operation
   chkConfidential.Value = PH_From_View!confidential
   chkCauseOfDeath.Value = PH_From_View!cause_of_death
   chkRiskFactor.Value = PH_From_View!risk_factor
   EditArea_Notify_DataChange(False)
   
End 

Public Sub ProblemLists_Click()
   '----------------------------------------------------------------
   'The user has clicked on any of the three problems lists
   'so display this problem in the editing area. Note that
   'this sets the flag bEditing to true see EditArea_HealthIssue_Display
   '----------------------------------------------------------------
   
   Stop Event 
   
   If Not Last.count Then Return 
   Select Case Last.tag
      Case "major problems"
         ProblemLists.cvwProblemsInActive.UnselectAll()
         ProblemLists.cvwProblemsActive.UnselectAll()
      Case "inactive problems"
         ProblemLists.cvwProblemsMajor.UnselectAll()
         ProblemLists.cvwProblemsActive.UnselectAll()
      Case "active problems"
         ProblemLists.cvwProblemsMajor.UnselectAll()
         ProblemLists.cvwProblemsInActive.UnselectAll()
   End Select
   Last.MoveCurrent
   iProblemKey = Last.Item.key
   HealthIssue_Display()
   
End

Public Sub EditArea_Clear()
   '----------------------------------------------------------------
   'Clears the editing area - ie clears all txtboxes, checkboxes and
   'resets all variables, sets foreground of error message to white
   'to make them 'disappear'
   'clin_history.data_past_history has these fields
   ' removed me: kk=I checked this was set 
   '   pk serial 
   '   fk_consult          kk
   '   age_onset           KK
   '   age_onset_units
   '   description         kk
   '   notes               kk
   '   fk_laterality       kk
   '   year_onset          KK
   '   active              kk
   '   operation           kk
   '   cause_of_death      kk
   '   confidential        kk
   '   major             Inc inbox_auto_process_counter
   '   deleted             kk
   '   year_onset_uncertain  kk
   '   management_summary    kk
   '   condition_summary     kk
   '   team_care_members  ---------
   '   risk_factor              kk
   '   fk_coding_system integer kk
   '   fk_code integer          kk
   '
   '   FIXME RICHARD remove hard code for coding system to config
   'fixme richard to allow year or month units
   '----------------------------------------------------------------
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   chkRiskFactor.Value = False   
   rbConfidentialNo.value = True
   rbLateralityNone.value = True
  bEditing = False
   '----------------------------------------------------------------------
   'Reset gui-elements to start up condition
   'Remove padding to edit area (it's background is red) white = no change
   '----------------------------------------------------------------------
   EditArea_Notify_DataChange(False)
   listview2.Visible = False  
   pk_pasthistory = 0
   fk_coding_system = 0
   fk_code = 0
   fk_progressnote = -1
   fk_laterality = const.LateralityNone
   fk_significance = const.healthIssue_Major
   rbMajor.Value = True 
   iAgeOnsetUnits = const.Units_year
   With lblhealthIssue
      .Foreground = Color.Black
      .text = "Health Issue" 
   End With
   Vbox_EditingArea.Enabled = False 
   bExit = False
   
End

Public Sub HealthIssue_New()
   
   '-----------------------------------------------------
   'user wants to add a new problem or condition or issue
   'Clear editing area, resetting all gui elements
   'classes, collections, flags etc, de-select problem
   'lists (ie remove the marque line)
   '-----------------------------------------------------
   EditArea_Clear()
   With ProblemLists
      .cvwProblemsActive.UnselectAll()
      .cvwProblemsInActive.UnselectAll()
      .cvwProblemsMajor.UnselectAll()
   End With
   With lblhealthIssue
      .Foreground = Color.Red
      .text = "New Health Issue" 
   End With
   Vbox_EditingArea.Enabled = True
   txtCodedTerm.SetFocus()
   
End

Public Sub EditAreaButtons_Click()
   '---------------------------------------------------
   'User has clicked on either the accept or ok buttons
   'at the bottom of the editing area
   '----------------------------------------------------
   
   Select Case Last.tag
      Case "help"
         If bEmbedded = False Then FClinical.Help_Show(Application.Path &/ "help/health-issues.html", "Help:Health Issues", True)
      Case "accept"
         '---------------------------------------------------
         'Accept everything in editing area either to its
         'existing spot in PH collection ie
         'modglobal.clinicalform.currentcurrentconsult.patient!past_history
         'of add to collection if a new problem
         '---------------------------------------------------
         Save()
      Case "new problem"
         HealthIssue_New() 
   End Select
   
End

Public Sub Reload()
   
   Dim fk_patient_in_FClinical As Integer
   
   currentconsult.Refresh("past_history")                   'remove key from cache > later forces a reload
   If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then
      FClinical.Refresh_Section(const.cSection_PastHistory)    'refresh lists on main screen FClinical
      FClinical.Refresh_AllPreviousNotes() 
   End If   
   EditArea_Clear()                                         'clear for next condition
   txtCodedTerm.SetFocus()
   ProblemLists.Refresh()                                   'reload lists on embedded form
   
End

Public Function ProgressNotes_Summary() As String
   '---------------------------------------------------------------------
   'Note this is sort-of-duplicated in FClinical.Care_Plan_construct_html
   'so probably should change design and combine
   '---------------------------------------------------------------------
   
   Dim PH As Collection = currentPastHistory 'for ease of typing
   Dim sText As String
   Dim sCumulative_html_forPlan As String
   Dim sResponsible_Table_start As String = ""
   
   "<TABLE WIDTH=100%  BORDER=0 CELLPADDING=1 CELLSPACING=0>"
   "<COL WIDTH=38%>"
   "<COL WIDTH=54%>"
   "<COL WIDTH=10%>"
   Dim sResponsible_Table_row_template As String = ""
   
   "<TR VALIGN=TOP>"
   "<TD WIDTH=38%>"
   "<P ALIGN=LEFT><small><B>%wholename</B></small><BR> %address</P>"
   "</TD>"
   "<TD WIDTH=54%>"
   "<P ALIGN=LEFT>%responsibilities</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P ALIGN=LEFT>%comms</P>"
   "</TD>"
   "</TR>"
   Dim sTeamCare_row As String
   Dim member As Collection 
   
   sText = "<BR><B>" & UCase(PH!description) & "</B><BR>"
   sText &= "- noted at age " & PH!age_onset
   If PH!operation = True Then
      sText &= " (operation)"
   End If
   If PH!major Then
      sText &= " considered to be a major problem"
   Else If PH!active Then
      sText &= " considered to be a significant problem"
   Else If PH!inactive Then
      sText &= " considered to be a inactive problem"
   End If
   
   If PH!risk_factor Then
      stext &= " and a risk factor "
   End If
   stext &= "."
   If PH!condition_summary Then
      sText &= "<BR>- " 
      sText &= LCase(Left(PH!condition_summary)) & Right(PH!condition_summary, Len(PH!condition_summary) - 1)
   End If      
   If PH!aim_of_plan Then
      sText &= "<BR>- the aim of management is to "
      '-------------------------------------------------------
      'Ucase first letter, preserve internal caps in sentance.
      '-------------------------------------------------------
      sText &= LCase(Left(PH!aim_of_plan)) & Right(PH!aim_of_plan, Len(PH!aim_of_plan) - 1)
      If Right(Trim(sText), 1) <> "." Then
         sText = Trim(sText) & "."
      End If  
   End If
   
   If PH!management_summary Then
      sText &= "<BR>- the management plan is to "
      sText &= LCase(Left(PH!management_summary)) & Right(PH!management_summary, Len(PH!management_summary) - 1)
   End If
   '---------------------
   'Now team care members
   '---------------------
   ' If TeamCareMembers.count Then
   '    sText &= "<BR>"
   '    For Each Member In TeamCareMembers
   '       sText &= " - " & Member!wholename & "'s responsbilities are: " & Member!responsibility & "<BR>"
   '    Next
   ' End If  
   Return sText
   
End

Public Sub Save()
   '--------------------------------------------------
   ' Save the past history condition (ie health issue)
   ' Minimally needed data validated
   ' The Audit information is collected here 
   '   pk serial NOT NULL,
   '   fk_consult integer NOT NULL,
   '   age_onset integer NOT NULL,
   '   age_onset_units integer NOT NULL,
   '   description text NOT NULL,
   '   fk_laterality integer DEFAULT 0,
   '   year_onset text NOT NULL,
   '   active boolean DEFAULT false,
   '   operation boolean DEFAULT false,
   '   cause_of_death boolean DEFAULT false,
   '   confidential boolean DEFAULT false,
   '   major boolean DEFAULT false,
   '   deleted boolean DEFAULT false,
   '   management_summary text DEFAULT ''::text,
   '   condition_summary text DEFAULT ''::text,
   '   risk_factor boolean DEFAULT false,
   '   fk_coding_system integer NOT NULL, -- key to coding.lu_coding_system containing name of coding system ...
   '   fk_code text,
   '   aim_of_plan text,
   '   fk_progressnote integer,
   
   '--------------------------------------------------
   
   Dim member As Collection 
   Dim Lastpk_pastHistory As Integer
   Dim sProgressNotes As String 
   Dim bNewPastHistoryItem As Boolean
   
   If Vbox_EditingArea.Padding = 0 Then
      Return  'the outer vbox if no padding = no change of data
   End If   
   If Not Valid_EditArea_Contents() Then
      Return 
   End If
   
   currentPastHistory = New Collection
   If pk_pasthistory <> 0 
      currentPastHistory!pk_pasthistory = pk_pasthistory
   End If   
   If fk_consult <> 0 Then
      currentPastHistory!fk_consult = fk_consult
   Else
      currentPastHistory!fk_consult = currentconsult.GetPK()
   End If 
   currentPastHistory!age_onset = Val(txtAgeOnset.text) 'CHECK THIS IS VALIDATED ABOVE
   currentPastHistory!age_onset_units = iAgeOnsetUnits
   currentPastHistory!description = Trim(txtCondition.text)
   currentPastHistory!fk_laterality = fk_laterality
   currentPastHistory!year_onset = Trim(txtYearOnset.text) 'eg could be 1993 or 08/1993 
   Select Case fk_significance
      Case const.healthIssue_Major
         currentPastHistory!major = True
      Case const.healthIssue_Significant
         currentPastHistory!active = True
      Case Else
         'these both default to false in the backend
   End Select
   If chkOperation.Value = True Then 
      currentPastHistory!operation = True
   Else
      currentPastHistory!operation = False
   End If
   If chkCauseOfDeath.Value = True Then
      currentPastHistory!cause_of_death = True
   Else
      currentPastHistory!cause_of_death = False
   Endif 
   If rbConfidentialYes.value Then 
      currentPastHistory!confidential = True
   Else
      currentPastHistory!confidential = False
   End If
   currentPastHistory!management_summary = Trim(txtManagementSummary.text)     
   currentPastHistory!condition_summary = Trim(txtHistoricalSummary.text) 
   If chkRiskFactor.value = True Then 
      currentPastHistory!risk_factor = True
   Else
      currentPastHistory!risk_factor = False
   End If    
   currentPastHistory!aim_of_plan = Trim(txtAim.text)
   currentPastHistory!fk_coding_system = fk_coding_system
   currentPastHistory!fk_code = fk_code 
   sProgressNotes = ProgressNotes_Summary()     'don't move this out of order or will lose team members names
   If pk_pasthistory = -1 Then bNewPastHistoryItem = True  '?what was this for 
   modDBConnect.BeginTrans()
   pk_pastHistory = modPastHistoryDBI.Save(currentconsult, pk_pasthistory, currentPastHistory) 
   fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, sProgressNotes, const.cSection_PastHistory, fk_progressnote, "Past History", pk_pasthistory, False)
   '-----------------------------------------------------------------------------------------------
   'difficult - the fk_progressnote can't exist until this is saved as it needs the pk_past history
   'so as an interim stupid solution I've re-saved it after the progress note is saved.
   '-----------------------------------------------------------------------------------------------
   
   modPastHistoryDBI.Link_To_ProgressNote(pk_pasthistory, fk_progressnote)
   modDBConnect.CommitTrans()
   Reload()
   
End

Public Function Valid_EditArea_Contents() As Boolean 
   '--------------------------------------------------------------------
   'validates the contents of edit area returns FALSE if invalid
   '-------------------------------------------------------------------
   
   Dim sMsg As String 
   
   If txtCondition.text = "" Then
      txtCondition.SetFocus()
      Return
   End If
   
   If fk_code = "" Or fk_coding_system = 0 Then  'remember fk_code is string see coding schema for details
      txtCodedTerm.SetFocus() 
      Return
   End If
   
   If Len(Trim(txtAgeOnset.text)) = 0 Then
      txtAgeOnset.SetFocus()
      Return False
   End If
   If Len(Trim(txtYearOnset.text)) = 0 Then
      txtAgeOnset.SetFocus()
      Return 
   End If
   
   If Trim(txtManagementSummary.text) <> "" Then
      If txtAim.text = "" Then
         txtAim.SetFocus()
         Return 
      End If 
   End If   
   Return True
   
End

Public Sub EditArea_TxtBox_KeyRelease()
   
   If bExit Then Return 
   
   Select Case Last.tag
      Case "problem"
         
      Case "coded term"
         '------------------------------------------
         'on every key-release, start the timer
         'and search for term like txtCodedTerm.text
         '------------------------------------------
         Form_Terms.Set_SearchText(Trim(Last.text))
   End Select 
   
End

Public Sub EditArea_TxtBox_Change()
   
   Dim x As Integer
   
   If bExit Then Return
   
   Select Case Last.tag
      Case "problem"
         If Len(Trim(Last.text)) Then
            '     currentPastHistory!description = Trim(Last.text)
         Else
            currentPastHistory!description = ""
         End If   
      Case "coded term"  
         If Trim(Last.text) = "" Then
            Form_Terms.Visible = False 
         End If
         
      Case "historical summary"
         
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtAim.SetFocus()
         End If 
      Case "aim of plan"
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtManagementSummary.SetFocus()
         End If 
         
      Case "age onset"
         '----------------------------------------
         'Sets or removes currentproblem!age_onset
         'SEE ALSO: EditArea_AgeOnset_CheckValid()
         '----------------------------------------
         If Len(Trim(txtAgeOnset.text)) = 0 Then
            txtYearOnset.text = ""
         End If
         
      Case "year onset"
         If Len(Trim(txtYearOnset.text)) = 0 Then
            txtAgeOnset.text = ""
         End If
         
      Case "management plan"  
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
         End If
   End Select
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   
   If flag Then 
      vbox_EditingArea.Padding = 1
      With tbAccept
         .Foreground = Color.Red
         .Enabled = True   
      End With
      
   Else
      vbox_EditingArea.Padding = 0
      With tbaccept
         .Foreground = Color.black
         .Enabled = False  
      End With
   End If
   
End

Public Sub EditArea_ChkBoxes_Click()
   '---------------------------------------------------------------------------------------------
   'comment on top two lines of this routine
   'this qt bug may have been fixed in recent releases
   'This is in here because in QT, if a textbox loses focus and the next control clicked on is
   'not a list/textbox/editor, then the lost focus event is not triggered
   'we need the lost focus event because user could have tabbed off a control, hence the keypress
   'event may not have validated the data in the textbox
   'Note on intended checkbox usage:
   '  chkMajor  = if checked then major problem and needs to be in a care plan
   '  chkActive = if checked then a significant problem
   '  Neither of these = problem is a past history item most likely dealt with
   '---------------------------------------------------------------------------------------------
   
   Dim flag As Boolean
   
   If bexit Then Return 
   EditArea_AgeOnset_CheckValid()
   
   '-----------------------------------------------
   'Deals with all the check boxes in the edit area
   '-----------------------------------------------
   If bExit Then Return
   flag = Abs(Last.value)
   
   Select Case Last.tag
         
      Case "patient"
         'Patient becomes a team member for this problem
         '     If flag Then
         '        TeamCareMember_AddPatient()
         '     Else
         '     End If   
         ' Case "operation"
         
         ' Case "confidential"
         '    currentPastHistory!confidential = flag
         ' Case "major"
         '    currentPastHistory!major = flag
         '    If currentPastHistory!major = True Then
         '       chkActive.Value = Not flag
         '       chkInactive.Value = Not flag
         '       currentPastHistory!active = False 
         '    End If
         ' Case "risk factor"
         '    currentPastHistory!risk_factor = flag
         ' Case "active"
         '    '--------------------------------------------------
         '    'Flip on/off the active value. Make sure that if you
         '    'make the problem significant and active then
         '    'switch off the major checkbox
         '    '---------------------------------------------------
         '    currentPastHistory!active = flag
         '    If chkActive.Value = True Then
         '       chkMajor.Value = Not flag
         '       chkInactive.value = Not flag
         '       currentPastHistory!major = False
         '    End If
         ' Case "inactive"
         '    
         '    If chkInActive.Value = True Then
         '       chkMajor.Value = Not flag
         '       chkActive.value = Not flag
         '       currentPastHistory!major = False
         '       currentPastHistory!active = False   
         '    End If
      Case "left"
         ' If chkLateralityLeft.value = True Then
         '    currentPastHistory!fk_laterality = const.LateralityLeft
         '    
         '    chkLateralityRight.value = False
         '    chkLateralityBoth.Value = False
         ' End If
      Case "right"
         ' If chkLateralityRight.value = True Then
         '    currentPastHistory!fk_laterality = const.LateralityRight
         ' End If
         ' chkLateralityLeft.value = False
         ' chkLateralityBoth.Value = False
      Case "both"
         ' If chkLateralityBoth.value = True Then
         '    currentPastHistory!fk_laterality = const.LateralityBoth
         ' End If
         ' chkLateralityLeft.value = False
         ' chkLateralityRight.value = False
      Case "cause of death"
         '  currentPastHistory!cause_of_death = chkCauseOfDeath.Value
   End Select
   'If chkLateralityLeft.value = False And chkLateralityRight.value = False And chkLateralityBoth.value = False Then
   ' currentPastHistory!fk_laterality = const.LateralityNone
   '  End If
   
   EditArea_Notify_DataChange(True)  'give visual message to user data has changed
   
End 

Public Function EditArea_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   '----------------------------------------------------------
   'PURPOSE       Restrict key presses for validation purposes
   'HOW IT WORKS  see routines names
   'FIXME         Ian would do this much simpler I'm sure
   '-----------------------------------------------------------
   
   Select Case Last.Tag
      Case "problem", "coded term", "historical summary", "management plan", "responsibility", "aim of plan", "care plan component"
         bKeyValid = True
      Case "age onset"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "year onset"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TxtBox_KeyPress()
   
   Dim X As Integer
   Dim sYearOnset As String
   Dim STempYear As String
   Dim STemp As String
   Dim bDateValid As Boolean
   '----------------------------------------------------
   'Each line may have a different set of key exclusions
   'so only keep valid keypresses
   '----------------------------------------------------
   bkeyvalid = EditArea_ExcludeKeys(key.code, Last.tag)
   
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case key.Code
      Case key.return, key.Tab
         Select Case Last.tag
            Case "problem"
               'user could have hit <enter> with listview1.popped up full of terms
               'and because they can see the term in the list assume that this 
               'is beign chosen, so iterate through and see if can find a match
               '-----------------------------------------
               'the text could match the popped up list
               'without the user having scrolled on to it
               '-----------------------------------------
               If listview1.Visible Then
                  listview1.MoveFirst
                  For x = 0 To listview1.count - 1
                     If LCase(listview1.Item.text) = LCase(Trim(txtCondition.text)) Then
                        currentPastHistory!fk_reason = listview1.Item.Key
                        currentPastHistory!description = listview1.Item.Text
                        txtCondition.text = listview1.Item.Text
                        HBox_Problem.Padding = 0
                        txtHistoricalSummary.setfocus
                        
                        Break
                     End If
                     listview1.MoveNext
                  Next
               End If
               listview1.Visible = False
               txtCodedTerm.SetFocus()
            Case "coded term"
               ' txtAgeOnset.SetFocus()
               ' chkMajor.SetFocus()
            Case "historical summary"
               txtAim.SetFocus() 
               
            Case "age onset"
               If Not EditArea_AgeOnset_CheckValid() Then
                  txtYearOnset.SetFocus()
               End If   
            Case "year onset"
               EditArea_YearOnset_CheckValid()
               txtHistoricalSummary.SetFocus()
            Case "aim of plan"
               txtManagementSummary.SetFocus()
               ' Case "team care members"
               '    '-------------------------------------------
               '    'Add team members names and responsibilities
               '    '-------------------------------------------
               '    If Trim(txtTeamCareMembers.text) = "" Then
               '       tbAccept.SetFocus()
               '    Else
               '       '---------------------------------------------------
               '       'Add the next team member and set focus for next one
               '       '---------------------------------------------------
               '       txtTeamCareMember_Responsibility.SetFocus()
               '    End If
               ' Case "care plan component"
               '    ' '------------------------------------------------------------
               ' 'First calculate the date if user typed in numberM or numberY
               ' '------------------------------------------------------------
               '  If icol Mod 2 Then
               '     CarePlan_Components_Calculate_Recall_Date(txtComponent)
               '  End If
               '  grdComponents[irow, icol].text = txtComponent.Text
               '  CarePlan_Components_Update_Collection()
               '  '----------------------------------------------------------
               '  'Now, don't allow a new row to be added, if the current row
               '  'hasn't been filled
               '  '----------------------------------------------------------
               '  icol = icol + 1
               '  If icol = 2 Then
               '     If grdComponents[irow, 0].text = "" Or grdComponents[irow, 1].text = "" Then
               '       icol = 1
               '       Stop Event
               '       Return
               '     End If  
               '     If irow + 1 = grdComponents.Rows.Count Then
               '         Inc grdComponents.Rows.count
               '     End If
               '     irow = Min(iRow + 1, grdComponents.Rows.Count - 1)
               '     grdComponents.Rows[irow].Height = 16
               '     grdComponents[irow, 2].Picture = Picture.Load("icons/16/unchecked.png")
               '     icol = 0
               '  End If
               '  Next_rc()            
               ' 
               '   Case "responsibility"
               
         End Select
      Case key.Up
         ' Select Case Last.tag
         ' '   Case "care plan component"
         '       ' grdComponents[irow, icol].text = txtComponent.Text
         '       ' CarePlan_Components_Update_Collection()
         '       ' iRow = Max(iRow - 1, 0)
         '       ' Next_rc()
         ' End Select
      Case Key.Down
         If listview1.Visible Then 
            listview1.SetFocus
            listview1.MoveFirst
            listview1.Item.Selected = True
            Return
         End If
         If Form_Terms.visible Then 
            With Form_Terms.ColumnView1 
               .SetFocus
               .MoveFirst
               .Item.selected = True
            End With
            Return
         End If
         If listview2.Visible Then 
            listview2.SetFocus
            listview2.MoveFirst
            listview2.Item.Selected = True
            Return
         End If
         ' Select Case Last.tag
         '    Case "care plan component"
         '       '  grdComponents[irow, icol].text = txtComponent.Text
         '       ' CarePlan_Components_Update_Collection()
         '       ' irow = Min(iRow + 1, grdComponents.Rows.Count - 1)
         '       ' Next_rc()
         '       
         ' End Select
   End Select
   
End

Public Sub EditArea_ChkBoxes_KeyPress()
   'FIXME - THE TABBING TO EXCLUDE STUFF
   '' Print " the last tag was ", Last.tag
   '' Print "the key code was", key.Code, key.Enter, key.Return
   
   Select Case Key.Code
      Case key.Return
         Select Case Last.tag
            Case "year onset uncertain" 'this checkbox excluded from <keyenter> order
               chkOperation.SetFocus 
            Case "operation"
               chkConfidential.SetFocus
            Case "confidential"
               '  chkMajor.SetFocus
            Case "major"
               txtAgeOnset.SetFocus()
            Case "active"
               tbaccept.SetFocus
            Case "cause of death" 'excluded usually because hopefully most currentconsult.patients don't die.
               tbAccept.SetFocus
         End Select
         
   End Select
   
End

Public Sub Columnview1_KeyPress()
   '------------------------------------------------------------------
   'Act only on the <ENTER> key display what is in list in the textbox
   'This event occurs of Form_Terms and is over-ridden by this observer
   '------------------------------------------------------------------
   
   If Key.code = Key.Return Then 
      ' Stop Event                    'stop event on Form_Terms 
      Columnview1_DblClick()
   End If
   
End

Public Sub Columnview1_DblClick()
   
   Stop Event
   
   Coded_Term_Select() 
   Form_Terms.Visible = False 
   
End


Public Sub Settings_Save()
   
   If bEmbedded Then
      Settings["Past_History_Embedded_" & embedded_in_form & "/VSplit_PastHistory"] = VSplit_PastHistory.Layout
   Else
      Settings["Past_History/VSplit_PastHistory"] = VSplit_PastHistory.Layout
   End If
   ProblemLists.Settings_Save()
   
End

Private Sub Settings_Load()
   
   If bEmbedded Then
      Try VSplit_PastHistory.Layout = Settings["Past_History_Embedded_" & embedded_in_form & "/VSplit_PastHistory"]
   Else
      Try VSplit_PastHistory.Layout = Settings["Past_History/VSplit_PastHistory"]
   End If
   
End

Public Sub Coded_Term_Select()
   '-------------------------------------------
   'User has chosen a term from popup listview1
   'Display this in the txtCodedTerm Textbox
   'Set currentProblem!fk_code to the pk_term
   '-------------------------------------------
   
   CurrentTerm = Form_Terms.Get_Term()
   '-----------------------------------------------------------------------
   'We allow free text in the health issue = past history problem
   'so, if user has typed something in there like ** very bad diabetes**
   '(bad example I know), then we keep this as the health issue but it
   'will be coded back to the appropriate icpc2+ term
   'However if they havn't typed anything in here, put the natural language
   'term in the txtConditon text box and the coded term in the coded textbox
   'e.g Diabetes;Type1 (T89002) or something similar
   '------------------------------------------------------------------------
   If txtCondition.text = "" Then
      txtCondition.text = CurrentTerm!term
   End If   
   txtCodedTerm.text = CurrentTerm!term & " (" & CurrentTerm!code & ")"
   fk_code = CurrentTerm!code
   fk_coding_system = CurrentTerm!fk_coding_system
   
End

Public Sub Terms_Get()
   '-------------------------------------------------------------------------------------
   'Gets list of diagnostic terms
   'Cannot set default if count is one because must  be able to add new occupations
   'can't remove the label because it needs to occupy space to keep textbox correct width
   '-------------------------------------------------------------------------------------
   
   Dim term As Collection 
   Dim key As String
   
   If Trim(txtCodedTerm.text) = "" Then
      currentTerm!code = ""
      Return
   End If
   Form_Terms.Get_Terms()
   
End

Public Sub rbLaterality_Click()
   
   EditArea_Notify_DataChange(True)
   fk_laterality = Last.tag
   
End

Public Sub EditArea_RadioButtons_Click()
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub rbRisk_Click()
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub rbConfidential_Click()
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub rbSignificance_Click()
   
   fk_significance = Last.tag
   
End
