' Gambas class file

' Copyright (C) 2008-2014 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' ---------------------------------------------------------------------------------------------------
' PURPOSE     - A module to allow entry of pa person's health issues or past history
' FIXME:      - Look at implications if you allow the user to change an existing diagnosis wording
'               this should be allowable eg (could have made a spelling mistake etc, but need
'               to ripple this change through to other sections sharing the previous spelling
'             - Implement speller properly
' NOTES       - The rblaterality tags = const.laterality values, 0,1,2,3
'             - The rbSignificance tags = const.HealthIssue_*name*, 0,1,2
' BUGS        - When a new record is saved and reloaded, the status (major/active/significant)
'               is not re-saved on edit. You can however change this in the popup menu over the lists
'----------------------------------------------------------------------------------------------------
Private ReferenceHboxForPopupControls As HBox
Private currentconsult As CConsult
Private bEmbedded As Boolean             'If true the form is embedded in a frmConsultNotes editor
Private SpellChecker As ClskSpell
Private bKeyValid As Boolean            'used in textbox routines
Private currentPastHistory As Collection
Private currentTerm As Collection
Public pk_pasthistory As Integer
Private bExit As Boolean
Private bEditing As Boolean 'True if we are editing an existing saved or unsaved record.
Private obs As Observer
Private iAgeOnsetUnits As Integer
Private fk_progressnote As Integer
Private fk_laterality As Integer
Private fk_significance As Integer
Private fk_code As String
Private fk_coding_system As Integer
Private fk_consult As Integer
'------------------------------
'stuff for the components grid
'-----------------------------

Private embedded_in_form As String
Private Form_Terms As FCodedTermSelector
Private ProblemLists As FPastHistoryProblemLists
Static Private form_pasthistory As FPastHistory

Public Sub _new()
   
   form_pasthistory = Me
   With Form_Terms = New FCodedTermSelector(Vbox_EditArea)
      .Ignore = True
      .Visible = False
      .Height = 200
   End With 
   ProblemLists = New FPastHistoryProblemLists(VBox_ProblemLists)
   obs = New Observer(Problemlists.cvwProblemsActive) As "ProblemLists"
   obs = New Observer(Problemlists.cvwProblemsMajor) As "ProblemLists"
   obs = New Observer(Problemlists.cvwProblemsInActive) As "ProblemLists"
   Settings_Load()               'set splits, font sizes etc
   lblMeasure.text = "  Management Summary  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblMeasure)
   obs = New Observer(Form_Terms.ColumnView1) As "cvwTerms"
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teForSpelling
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   Vbox_EditingArea.Enabled = False
   
End

Static Public Sub Edit_PastHistory()
   
   form_pasthistory.HealthIssue_Edit()
   
Catch
   Return   'bug here there can be a null object form_pasthistory (fixme)
End

Static Public Sub Delete_PastHistory()
   
   form_pasthistory.HealthIssue_Delete()
   
End

Static Public Sub Refresh_Problem(pkph As Integer)
   '------------------------------------------------------------------------------
   'If user has changed an attribute of a past history/health item being displayed
   'then refresh the editing area
   '------------------------------------------------------------------------------
   
   If form_pasthistory.pk_pasthistory = pkph Then
      form_pasthistory.Reload()
   Endif
   
End

Static Public Sub Reload_Lists()
   
   form_pasthistory.Reload()
   
End

Public Sub set_embedded(flag As Boolean, embeddedinform As String)
   '--------------------------------------------------
   'If this form is embeded from another form set flag
   'embeddedinform = either "notes" or "documents"
   '--------------------------------------------------
   
   bEmbedded = flag
   embedded_in_form = embeddedinform
   HBox_Buttons.Visible = True   
   
End

Public Sub set_fk_progressNote(key As Integer)
   '-------------------------------------------------------
   'As this forms Save() is called from FProgressnotesPage
   'when user is writing notes on a health issue and has
   'update the aim/historical summary/management plan
   '-------------------------------------------------------
   
   fk_progressnote = key
   
End

Public Function Consult_Exists() As Boolean
   '-----------------------------------------------------
   'If the consult as been passed to the form return true
   '-----------------------------------------------------
   
   If IsNull(currentconsult) Then Return False
   Return True
   
End

Public Function Consult_Set_Null()
   '-----------------------------------------------------
   'If the consult as been passed to the form return true
   '-----------------------------------------------------
   
   currentconsult = Null
   
End

Public Function HealthIssue_GetName() As String
   
   '  Return currentPastHistory!description
   Message.Info("Richard: in Past history: Trying to get name:check this")
   
End

Public Function pk_pasthistory_get() As Integer
   
   Return pk_pasthistory
   
End

Public Function pk_pasthistory_set(fk_ph As Integer)
   '----------------------------------------------------
   'allows a another form to set the current problem
   'eg FClinical with popup menu over the problem lists
   'so that this can be edited
   '---------------------------------------------------
   
   pk_pasthistory = fk_ph
   
End

Public Sub Update_Editarea_Plan(sText As String, progressnote_pk_pastHistory As Integer)
   '---------------------------------------------------------------------------------
   'Perhaps temporary, this is called from a progress note page
   'if the user has updated the progress notes summary in the progress note
   'and at the same time is editing the same past history item in past history module
   'match the text
   '---------------------------------------------------------------------------------
   
   If pk_pasthistory = progressnote_pk_pastHistory Then
      txtManagementSummary.text = sText
   End If
   
End

Public Sub Update_Editarea_Plan_Summary(sText As String, progressnote_pk_pastHistory As Integer)
   
   If pk_pasthistory = progressnote_pk_pastHistory Then
      txtHistoricalSummary.text = sText
   End If
   
End

Public Sub Init(Cons As CConsult)
   
   currentconsult = cons         'set current consult on this form
   ProblemLists.Init(currentconsult, "Past History")
   rbMajor.width = rbSignificantActive.Width
   chkOperation.width = rbSignificantActive.Width
   chkCauseOfDeath.width = rbSignificantActive.Width
   rbConfidentialYes.width = rbSignificantActive.Width
   rbConfidentialno.width = rbSignificantActive.Width
End

Public Sub Form_Close()
   '----------------------------------------------
   'Save all current form settings and split sizes
   '----------------------------------------------
   
   Settings_Save()
   
End

Public Sub EditArea_YearOnset_CheckValid()
   '-------------------------------------------------------
   'IAN:README MAKE ME SMARTER
   'This is meant to just ensure the year of onset is valid
   ' Don't allow if invalid age or age < 0
   '-------------------------------------------------------
   
   Dim sTemp As String
   Dim STempYear As String
   Dim bDateValid As Boolean
   
   STemp = Trim(txtYearOnset.text)
   Select Case Len(sTemp)
      Case 4 'could be yyyy
         STempYear = "01/01/" & sTemp
         If IsDate(STempYear) Then
            bDateValid = True
         Else
            txtYearOnset.text = ""
         End If
      Case 7 'could be mm/yyyy
         STempYear = "01/" & sTemp
         If IsDate(STempYear) Then
            bDateValid = True
         Else
            txtYearOnset.text = ""
         End If
         
      Case 10 'could be dd/mm/yyyy
         If IsDate(STempYear) Then
            bDateValid = True
         Else
            txtYearOnset.text = ""
         End If
   End Select
   
   If bDateValid = False Or DateDiff(currentconsult!patient!birthdate, STempYear, gb.year) < 0 Then
      txtYearOnset.text = ""
   Else
      txtAgeOnset.text = DateDiff(currentconsult!patient!birthdate, STempYear, gb.year)
   End If
   
End      

Public Function EditArea_AgeOnset_CheckValid() As Boolean
   '---------------------------------------------------------------
   'Ensures the age of onset if valid, display an prompt if invalid
   'Put a catch here at some stage to catch undefined bug see note
   'I think this is fixed now
   '---------------------------------------------------------------
   
   If bExit Then Return    
   If Trim(txtAgeOnset.text) <> "" Then
      If Val((Trim(txtAgeOnset.text))) > currentconsult!patient!age_numeric Then 'bug here when used in inbox no age-numeric, have age_display should be fixed check this
         Return
      Else
         txtYearOnset.text = Year(currentconsult!patient!birthdate) + Val(txtAgeOnset.text)
         txtAim.SetFocus()
         Return True
      End If
   End If
   
Catch
   Return   
   
End

Public Sub Reset_Fonts()
   '------------------------------------------------------------
   'If user has changed the application font, re-size all labels
   'to make gui look ok again
   '------------------------------------------------------------
   
   Dim hCtrl As Control
   Dim ABox As HBox
   Dim lbl As Label
   
   For Each Hctrl In VBox_EditArea.Children
      If hctrl Is Hbox Then
         Abox = hctrl
         For Each hctrl In Abox.Children
            If hctrl Is Label Then
               lbl = hctrl
               '------------------------------------------------------
               'Resize those labels in the gui with autoresize = false
               'I have set ones I don't want to be resized to
               'auto-resize = True
               '------------------------------------------------------
               If lbl.AutoResize = False Then
                  lbl.width = lblmeasure.Width
               End If
               Break
            End If
         Next
      End If
   Next
   
End

Public Sub EditArea_TxtBox_GotFocus()
   '-------------------------------------------
   'Set listbox to the correct screen position
   'Highlight the textbox with nice green color
   'FIXME: make this user-configurable
   '-------------------------------------------
   
   Listview1.Visible = False
   Form_Terms.Visible = False
   Last.BackGround = Color.rgb(95, 255, 175)
   ReferenceHboxForPopupControls = Last.Parent.Parent
   Select Case Last.tag
      Case "coded term"
         With Form_Terms
            .top = Last.Parent.Parent.Top + Last.Parent.Height
            .width = txtCodedTerm.Width
            .Left = Last.Parent.Left + VBox1.padding
            .Raise
            .Visible = False
            If Trim(Last.text) <> "" Then
               .Set_SearchText(Trim(Last.text))
            End If
         End With
   End Select
Catch
   Return 'fixme take this out to see why this sub crashes.  
   
End

Public Sub EditArea_TxtBox_LostFocus()
   '-------------------------------------------------------------
   'When textbox loses focus, change color of background to white  .Border = False
   '
   '-------------------------------------------------------------
   
   If bexit Then Return 
   Last.BackGround = Color.White
   Select Case Last.tag
      Case "age onset"
         EditArea_AgeOnset_CheckValid()
      Case "coded term"
         Form_Terms.Timer1.Stop()
      Case "aim of plan"
         bExit = True
         SpellChecker.init(txtAim) 'can't use last because invoking spell checker > recursive lost_focus()
         SpellChecker.StartSpelling()
         bExit = False
      Case "problem"
         bExit = True
         SpellChecker.init(txtCondition) 'can't use last because invoking spell checker > recursive lost_focus()
         SpellChecker.StartSpelling()
         bExit = False
   End Select
   
End

Public Sub HealthIssue_Delete()
   '------------------------------------------------------------------------------------
   'Delete the currently highlighted health issue or problem
   'Annotates any existing progress notes as to who did the deletion
   'and converts all the text to strike through
   'fixme - doesn't take into account e.g if an editor open for that health issue -FIXME
   '------------------------------------------------------------------------------------
   
   Dim sMsg As String
   
   Message.Title = "Delete Health Issue Item"
   sMsg = "You have chosen to delete a Health Issue.\n\n"
   "Note that any actual progress notes associated with this health issue will not be visually removed from the progress notes "
   "but will be 'struck through' and accompanied by an audit-trail annotation of who deleted this information and why.\n\n"
   "Do you want to continue"
   If Message.Question(sMsg, "Yes", "No") = 2 Then Return
   modPastHistoryDBI.HealthIssue_Delete(currentconsult, pk_pasthistory, currentconsult!past_history[pk_pasthistory]) 'commit trans IS in modPastHistoryDBI routine
   FClinical.Editor_RemovePage(pk_pasthistory)
   Reload()
   
End

Public Sub HealthIssue_Edit()
   
   Vbox_EditingArea.Enabled = True
   
End

Public Sub HealthIssue_Display()
   '--------------------------------------------------------------------------------
   'Place the contents of currentProblem into the editing area
   'When this data is placed into the textboxes and checkboxes
   'the change event in those controls will also be triggered
   'so must set bExit to true whilst loading the data
   'pk_past history is set when user clicks on list in the form  ProblemLists
   'The click event on this form is over-ridden in this from by ProblemLists_Click()
   '--------------------------------------------------------------------------------
   
   Dim PH_From_View As Collection                            'for easy of readability = member of the view selected
   
   EditArea_Clear()                                          'clear boxes resets all keys
   bEditing = True
   bExit = True   
   PH_From_View = currentconsult!past_history[pk_pasthistory] 'for easier reading
   '-------------------------------------------------------------------
   'set a couple of keys, the rest of the members of currentPastHistory
   'will be set by the change events in the edit area
   '-------------------------------------------------------------------
   fk_consult = PH_From_View!fk_consult
   fk_coding_system = PH_From_View!fk_coding_system
   fk_code = PH_From_View!fk_code
   '-----------------------------------------------------------------------------
   'If we are editing a past history item, saved during current consult,
   'or, if re-editing this item within the working day then
   'use the pk_progress note which will already have been created, otherwise there
   'is no fk_progress note yet
   'FIXME: What if a different user is doing this? Must put in some auditing here
   '-----------------------------------------------------------------------------
   fk_progressnote = 0
   If PH_From_View!fk_progressnote <> 0 Then
      If Format(Now, "dd/mm/yyyy") = Format(PH_From_View!date_noted, "dd/mm/yyyy") Then
         fk_progressnote = PH_From_View!fk_progressnote
      End If
   End If
   txtCondition.text = PH_From_View!description
   txtCodedTerm.text = PH_From_View!combined_term_code
   Select Case PH_From_View!fk_laterality
      Case 1
         rbLateralityLeft.value = const.LateralityLeft
      Case 2
         rbLateralityRight.value = const.LateralityRight
      Case 3
         rbLateralityBoth.value = const.LateralityBoth
   End Select
   With txtHistoricalSummary    'This is also set in FProgressnote Page - need to ensure start of line is showing in that module, as the main split could be 50/50
      .text = PH_From_View!condition_summary
      .pos = 1
   End With
   txtAgeOnset.text = PH_From_View!age_onset
   txtYearOnset.text = PH_From_View!year_onset
   iAgeOnsetUnits = PH_From_View!age_onset_units
   With txtManagementSummary
      .text = PH_From_View!management_summary
      .pos = 1
   End With
   With txtAim
      .text = PH_From_View!aim_of_plan
      .pos = 1
   End With
   rbSignificantActive.value = PH_From_View!active
   rbMajor.value = PH_From_View!major
   If PH_From_View!active = False And PH_From_View!major = False Then
      rbInactive.Value = True
   End If
   chkOperation.Value = PH_From_View!operation
   If PH_From_View!confidential Then
      rbConfidentialYes.value = True
   Else
      rbConfidentialNo.Value = True
   Endif
   chkCauseOfDeath.Value = PH_From_View!cause_of_death
   chkRiskFactor.Value = PH_From_View!risk_factor
   EditArea_Notify_DataChange(False)
   bexit = False  
   
End

Public Sub ProblemLists_Click()
   '----------------------------------------------------------------
   'The user has clicked on any of the three problems lists
   'so display this problem in the editing area. Note that
   'this sets the flag bEditing to true see EditArea_HealthIssue_Display
   '----------------------------------------------------------------
   
   Stop Event
   If Not Last.count Then Return
   Select Case Last.tag
      Case "major problems"
         ProblemLists.cvwProblemsInActive.UnselectAll()
         ProblemLists.cvwProblemsActive.UnselectAll()
      Case "inactive problems"
         ProblemLists.cvwProblemsMajor.UnselectAll()
         ProblemLists.cvwProblemsActive.UnselectAll()
      Case "active problems"
         ProblemLists.cvwProblemsMajor.UnselectAll()
         ProblemLists.cvwProblemsInActive.UnselectAll()
   End Select
   Last.MoveCurrent
   pk_pasthistory = Last.Item.key
   HealthIssue_Display()
   If embedded_in_form = "FInbox" Then
      Try FInbox.Previous_Notes_Refresh() 'tab may not be open
   Endif
   
End

Public Sub EditArea_Clear()
   '----------------------------------------------------------------
   'Clears the editing area - ie clears all txtboxes, checkboxes and
   'resets all variables, sets foreground of error message to white
   'to make them 'disappear'
   'clin_history.data_past_history has these fields
   ' removed me: kk=I checked this was set
   '   pk serial
   '   fk_consult          kk
   '   age_onset           KK
   '   age_onset_units
   '   description         kk
   '   notes               kk
   '   fk_laterality       kk
   '   year_onset          KK
   '   active              kk
   '   operation           kk
   '   cause_of_death      kk
   '   confidential        kk
   '   major             Inc inbox_auto_process_counter
   '   deleted             kk
   '   year_onset_uncertain  kk
   '   management_summary    kk
   '   condition_summary     kk
   '   team_care_members  ---------
   '   risk_factor              kk
   '   fk_coding_system integer kk
   '   fk_code integer          kk
   '
   '   FIXME RICHARD remove hard code for coding system to config
   'fixme richard to allow year or month units
   '----------------------------------------------------------------
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   chkRiskFactor.Value = False
   rbConfidentialNo.value = True
   rbLateralityNone.value = True
   bEditing = False
   '----------------------------------------------------------------------
   'Reset gui-elements to start up condition
   'Remove padding to edit area (it's background is red) white = no change
   '----------------------------------------------------------------------
   EditArea_Notify_DataChange(False)
   listview2.Visible = False
   fk_laterality = const.LateralityNone
   fk_significance = const.healthIssue_Major
   rbMajor.Value = True
   iAgeOnsetUnits = const.Units_year
   With lblhealthIssue
      .Foreground = Color.Black
      .text = "Health Issue"
   End With
   Vbox_EditingArea.Enabled = False
   bExit = False
   
End

Public Sub Reset_Keys()
   
   pk_pasthistory = 0
   fk_coding_system = 0
   fk_code = ""
   fk_progressnote = 0
   
End

Public Sub New_Entry()
   '----------------------------------------------------------------------
   'Called from FClinical where the button tag is a generic 'New Entry'
   'I've left the orginal nomenclature here for easier reading of the code
   '----------------------------------------------------------------------
   
   HealthIssue_New()
   
End

Public Sub HealthIssue_New()
   
   '-----------------------------------------------------
   'user wants to add a new problem or condition or issue
   'Clear editing area, resetting all gui elements
   'classes, collections, flags etc, de-select problem
   'lists (ie remove the marque line)
   '-----------------------------------------------------
   EditArea_Clear()
   Reset_Keys()
   With ProblemLists
      .cvwProblemsActive.UnselectAll()
      .cvwProblemsInActive.UnselectAll()
      .cvwProblemsMajor.UnselectAll()
   End With
   With lblhealthIssue
      .Foreground = Color.Red
      .text = "New Health Issue"
   End With
   Vbox_EditingArea.Enabled = True
   EditArea_Notify_DataChange(False)
   txtCodedTerm.SetFocus()
   
End

Public Sub Reload()
   
   currentconsult.Refresh("past_history")                   'remove key from cache > later forces a reload
   If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then
      FClinical.Refresh_Section(const.cSection_PastHistory)    'refresh lists on main screen FClinical
      FClinical.Refresh_AllPreviousNotes()
   End If
   ProblemLists.Reload(True)   'refresh the lists                             'reload lists on embedded form
   HealthIssue_New()
   
End

Public Function ProgressNotes_Summary(PH As CRow) As String
   '---------------------------------------------------------------------
   'Note this is sort-of-duplicated in FClinical.Care_Plan_construct_html
   'so probably should change design and combine
   '---------------------------------------------------------------------
   
   '  Dim PH As Collection = currentPastHistory 'for ease of typing
   Dim sText As String
   ' Dim sResponsible_Table_start As String = ""
   ' 
   ' "<TABLE WIDTH=100%  BORDER=0 CELLPADDING=1 CELLSPACING=0>"
   ' "<COL WIDTH=38%>"
   ' "<COL WIDTH=54%>"
   ' "<COL WIDTH=10%>"
   ' Dim sResponsible_Table_row_template As String = ""
   ' 
   ' "<TR VALIGN=TOP>"
   ' "<TD WIDTH=38%>"
   ' "<P ALIGN=LEFT><small><B>%wholename</B></small><BR> %address</P>"
   ' "</TD>"
   ' "<TD WIDTH=54%>"
   ' "<P ALIGN=LEFT>%responsibilities</P>"
   ' "</TD>"
   ' "<TD WIDTH=10%>"
   ' "<P ALIGN=LEFT>%comms</P>"
   ' "</TD>"
   ' "</TR>"
   
   sText = "<BR><B>" & UCase(PH!description) & "</B><BR>"
   sText &= "- noted at age " & PH!age_onset
   If PH!operation = True Then                  'will always exist
      sText &= " (operation)"
   End If
   If Ph.Exist("major") Then                    'may not exist
      sText &= " considered to be a most significant problem"
   Else If PH.Exist("active") Then              'may not exist
      If ph!active = True Then sText &= " considered to be a significant problem"
   Else If PH.Exists("inactive") Then           'may not exist
      If PH!inactive Then sText &= " considered to be a inactive problem"
   End If
   If PH!risk_factor Then                  'will always exist
      stext &= " and a risk factor "
   End If
   stext &= "."
   If PH!condition_summary Then           'will always exist even if "" string
      sText &= "<BR>- "
      sText &= LCase(Left(PH!condition_summary)) & Right(PH!condition_summary, Len(PH!condition_summary) - 1)
   End If
   If PH!aim_of_plan Then                 'will always exist even if "" string
      sText &= "<BR>- the aim of management is to "
      '-------------------------------------------------------
      'Ucase first letter, preserve internal caps in sentance.
      '-------------------------------------------------------
      sText &= LCase(Left(PH!aim_of_plan)) & Right(PH!aim_of_plan, Len(PH!aim_of_plan) - 1)
      If Right(Trim(sText), 1) <> "." Then
         sText = Trim(sText) & "."
      End If
   End If
   If PH!management_summary Then          'will always exist even if "" string
      sText &= "<BR>- the management plan is to "
      sText &= LCase(Left(PH!management_summary)) & Right(PH!management_summary, Len(PH!management_summary) - 1)
   End If
   '---------------------
   'Now team care members
   '---------------------
   ' If TeamCareMembers.count Then
   '    sText &= "<BR>"
   '    For Each Member In TeamCareMembers
   '       sText &= " - " & Member!wholename & "'s responsbilities are: " & Member!responsibility & "<BR>"
   '    Next
   ' End If
   Return sText
   
End

Public Function Save() As Boolean 'called from FProgressNotesPage.Save also 
   '--------------------------------------------------
   ' Save the past history condition (ie health issue)
   ' Returns True is successful (used in FInbox to auto-save new health issues if uses forgets)
   ' Minimally needed data validated
   ' The Audit information is collected here
   '   pk serial NOT NULL,
   '   fk_consult integer NOT NULL,
   '   age_onset integer NOT NULL,
   '   age_onset_units integer NOT NULL,
   '   description text NOT NULL,
   '   fk_laterality integer DEFAULT 0,
   '   year_onset text NOT NULL,
   '   active boolean DEFAULT false,
   '   operation boolean DEFAULT false,
   '   cause_of_death boolean DEFAULT false,
   '   confidential boolean DEFAULT false,
   '   major boolean DEFAULT false,
   '   deleted boolean DEFAULT false,
   '   management_summary text DEFAULT ''::text,
   '   condition_summary text DEFAULT ''::text,
   '   risk_factor boolean DEFAULT false,
   '   fk_coding_system integer NOT NULL, -- key to coding.lu_coding_system containing name of coding system ...
   '   fk_code text,
   '   aim_of_plan text,
   '   fk_progressnote integer,
   '   clin_consult.ProgressNote:
   '   pk serial NOT NULL,
   '   fk_consult integer,
   '   notes text,
   '   fk_section integer,
   '   fk_code bigint,
   '   problem text,
   '   fk_problem integer,
   '   fk_audit_action integer DEFAULT 1, fk_code
   '   linked_table regclass,
   '   fk_row integer,
   '   fk_audit_reason integer,sString
   '   deleted boolean DEFAULT false,
   
   '--------------------------------------------------
   Dim sProgressNotes As String
   Dim PastHistory As CRow
   Dim ProgressNote As CRow
   
   If Vbox_EditingArea.Padding = 0 Then
      Return  'the outer vbox if no padding = no change of data
   End If
   If Not Valid_EditArea_Contents() Then
      Return
   End If
   PastHistory = New CRow
   If pk_pasthistory <> 0 Then
      PastHistory.put_unchanged(pk_pasthistory, "pk_pasthistory")
   End If
   PastHistory!fk_consult = currentconsult.GetPK()
   PastHistory!age_onset = Val(txtAgeOnset.text) 'CHECK THIS IS VALIDATED ABOVE
   PastHistory!age_onset_units = iAgeOnsetUnits
   PastHistory!description = modUtil.Ucase_Word_First_Letter(Trim(txtCondition.text))
   PastHistory!fk_laterality = fk_laterality
   PastHistory!year_onset = Trim(txtYearOnset.text) 'eg could be 1993 or 08/1993
   Select Case fk_significance
      Case const.healthIssue_Major
         PastHistory!major = True
      Case const.healthIssue_Significant
         PastHistory!active = True
         PastHistory!major = False  
      Case const.healthIssue_Inactive
         PastHistory!major = False  
         PastHistory!active = False    
   End Select
   If chkOperation.Value = True Then
      PastHistory!operation = True
   Else
      PastHistory!operation = False
   End If
   If chkCauseOfDeath.Value = True Then
      PastHistory!cause_of_death = True
   Else
      PastHistory!cause_of_death = False
   Endif
   If rbConfidentialYes.value Then
      PastHistory!confidential = True
   Else
      PastHistory!confidential = False
   End If
   PastHistory!management_summary = Trim(txtManagementSummary.text)
   PastHistory!condition_summary = Trim(txtHistoricalSummary.text)
   If chkRiskFactor.value = True Then
      PastHistory!risk_factor = True
   Else
      PastHistory!risk_factor = False
   End If
   PastHistory!aim_of_plan = Trim(txtAim.text)
   PastHistory!fk_coding_system = fk_coding_system
   PastHistory!fk_code = fk_code
   sProgressNotes = ProgressNotes_Summary(PastHistory)
   modDBConnect.BeginTrans()
   PastHistory.Save("clin_history.past_history", "pk_pasthistory")
   '----------------------
   'Save the progress note
   '----------------------
   ProgressNote = New CRow
   If fk_progressnote Then
      ProgressNote.put_unchanged(fk_progressnote, "fk_progressnote")
   Endif
   ProgressNote!fk_consult = PastHistory!fk_consult
   ProgressNote!notes = sProgressNotes
   ProgressNote!fk_section = const.cSection_Pasthistory
   '  ProgressNote!fk_code = fk_code  FIXME Fix THE VWPROGRESSNOTES And UNCOMMENT THIS Line
   ProgressNote!problem = "Past History"
   ProgressNote!fk_problem = PastHistory!pk_pasthistory
   ProgressNote!fk_audit_action = const.cAuditAction_Insert
   ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
   '-----------------------------------------------------------------------------------------------
   'difficult - the fk_progressnote can't exist until this is saved as it needs the pk_past history
   'so as an interim stupid solution I've re-saved it after the progress note is saved.
   '-----------------------------------------------------------------------------------------------
   modPastHistoryDBI.Link_To_ProgressNote(PastHistory!pk_pasthistory, ProgressNote!fk_progressnote)
   modDBConnect.CommitTrans()
   'Past history can be embedded
   If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then 
      FClinical.Refresh_AllPreviousNotes()
      FClinical.Refresh_Section(const.cSection_HealthSummary)    'check if health summary showing, if so update it as it has occupations on it
   End If  
   If embedded_in_form = "FInbox" Then
      Try FInbox.Previous_Notes_Refresh() 'tab may not be open
   Endif
   Vbox_EditingArea.Padding = 0
   Reload()
   
End

Public Function Valid_EditArea_Contents() As Boolean
   '--------------------------------------------------------------------
   'validates the contents of edit area returns FALSE if invalid
   '-------------------------------------------------------------------
   
   If txtCondition.text = "" Then
      txtCondition.SetFocus()
      Return
   End If
   If fk_code = "" Or fk_coding_system = 0 Then  'remember fk_code is string see coding schema for details
      txtCodedTerm.SetFocus()
      Return
   End If
   If Len(Trim(txtAgeOnset.text)) = 0 Then
      txtAgeOnset.SetFocus()
      Return False
   End If
   If Len(Trim(txtYearOnset.text)) = 0 Then
      txtAgeOnset.SetFocus()
      Return
   End If
   If Trim(txtManagementSummary.text) <> "" Then
      If txtAim.text = "" Then
         txtAim.SetFocus()
         Return
      End If
   End If
   Return True
   
End

Public Sub EditArea_TxtBox_KeyRelease()
   
   If bExit Then Return
   
   Select Case Last.tag
      Case "problem"
         
      Case "coded term"
         '------------------------------------------
         'on every key-release, start the timer
         'and search for term like txtCodedTerm.text
         '------------------------------------------
         Form_Terms.Set_SearchText(Trim(Last.text))
   End Select
   
End

Public Sub EditArea_TxtBox_Change()
   
   If bExit Then
      Return
   End If
   
   Select Case Last.tag
      Case "problem"
         teForSpelling.Text = Last.text
         Print teForSpelling.Text
      Case "coded term"
         If Trim(Last.text) = "" Then
            Form_Terms.Visible = False
            'fixme ?nullify the codes
         End If
      Case "historical summary"
         teForSpelling.Text = Last.text
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtAim.SetFocus()
         End If
      Case "aim of plan"
         teForSpelling.Text = Last.text
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtManagementSummary.SetFocus()
         End If
      Case "age onset"
         '----------------------------------------
         'Sets or removes currentproblem!age_onset
         'SEE ALSO: EditArea_AgeOnset_CheckValid()
         '----------------------------------------
         If Len(Trim(txtAgeOnset.text)) = 0 Then
            txtYearOnset.text = ""
         End If
      Case "year onset"
         If Len(Trim(txtYearOnset.text)) = 0 Then
            txtAgeOnset.text = ""
         End If
      Case "management plan"
         teForSpelling.Text = Last.text
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
         End If
   End Select
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   
   If flag = True Then
      vbox_EditingArea.Padding = 1
   Else
      vbox_EditingArea.Padding = 0
   Endif
   
End

Public Sub EditArea_ChkBoxes_Click()
   '---------------------------------------------------------------------------------------------
   'comment on top two lines of this routine
   'this qt bug may have been fixed in recent releases
   'This is in here because in QT, if a textbox loses focus and the next control clicked on is
   'not a list/textbox/editor, then the lost focus event is not triggered
   'we need the lost focus event because user could have tabbed off a control, hence the keypress
   'event may not have validated the data in the textbox
   'Note on intended checkbox usage:
   '  chkMajor  = if checked then major problem and needs to be in a care plan
   '  chkActive = if checked then a significant problem
   '  Neither of these = problem is a past history item most likely dealt with
   '---------------------------------------------------------------------------------------------
   
   If bexit Then Return
   EditArea_AgeOnset_CheckValid()
   '-----------------------------------------------
   'Deals with all the check boxes in the edit area
   '-----------------------------------------------
   If bExit Then Return
   EditArea_Notify_DataChange(True)  'give visual message to user data has changed
   
End

Public Function EditArea_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   '----------------------------------------------------------
   'PURPOSE       Restrict key presses for validation purposes
   'HOW IT WORKS  see routines names
   'FIXME         Ian would do this much simpler I'm sure
   '-----------------------------------------------------------
   
   Select Case Tag
      Case "problem", "coded term", "historical summary", "management plan", "responsibility", "aim of plan", "care plan component", "contribution", "member"
         bKeyValid = True
      Case "age onset"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "year onset"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TxtBox_KeyPress()
   
   Dim X As Integer
   '----------------------------------------------------
   'Each line may have a different set of key exclusions
   'so only keep valid keypresses
   '----------------------------------------------------
   bkeyvalid = EditArea_ExcludeKeys(key.code, Last.tag)
   
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case key.Code
      Case key.return, key.Tab
         Select Case Last.tag
            Case "problem"
               'user could have hit <enter> with listview1.popped up full of terms
               'and because they can see the term in the list assume that this
               'is beign chosen, so iterate through and see if can find a match
               '-----------------------------------------
               'the text could match the popped up list
               'without the user having scrolled on to it
               '-----------------------------------------
               If listview1.Visible Then
                  listview1.MoveFirst
                  For x = 0 To listview1.count - 1
                     If LCase(listview1.Item.text) = LCase(Trim(txtCondition.text)) Then
                        currentPastHistory!fk_reason = listview1.Item.Key
                        currentPastHistory!description = listview1.Item.Text
                        txtCondition.text = listview1.Item.Text
                        HBox_Problem.Padding = 0
                        txtHistoricalSummary.setfocus
                        Break
                     End If
                     listview1.MoveNext
                  Next
               End If
               listview1.Visible = False
               txtCodedTerm.SetFocus()
            Case "coded term"
               If fk_code <> "" Then
                  txtAgeOnset.SetFocus()
               End If
               
            Case "age onset"
               If Trim(Last.text) <> "" Then
                  If Not EditArea_AgeOnset_CheckValid() Then
                     txtAgeOnset.SetFocus()
                  End If
               Else
                  txtYearOnset.SetFocus()
               End If
            Case "year onset"
               EditArea_YearOnset_CheckValid()
               txtHistoricalSummary.SetFocus
            Case "historical summary"
               txtAim.SetFocus
            Case "aim of plan"
               txtManagementSummary.SetFocus()
            Case "management plan"
               If Trim(txtManagementSummary.text) = "" Then
                  txtManagementSummary.text = ""
                  Last.pos = 0
               Endif
               txtManagementSummary.SetFocus() 'Stay where you are
         End Select
         
      Case Key.Down
         If listview1.Visible Then
            listview1.SetFocus
            listview1.MoveFirst
            listview1.Item.Selected = True
            Return
         End If
         If Form_Terms.visible Then
            With Form_Terms.ColumnView1
               .SetFocus
               .MoveFirst
               .Item.selected = True
            End With
            Return
         End If
         If listview2.Visible Then
            listview2.SetFocus
            listview2.MoveFirst
            listview2.Item.Selected = True
            Return
         End If
   End Select
Catch
   Return
   
End

Public Sub EditArea_ChkBoxes_KeyPress()
   'FIXME - THE TABBING TO EXCLUDE STUFF
   
   Select Case Key.Code
      Case key.Return
         Select Case Last.tag
            Case "year onset uncertain" 'this checkbox excluded from <keyenter> order
               chkOperation.SetFocus
            Case "operation"
               rbConfidentialNo.SetFocus
            Case "major"
               txtAgeOnset.SetFocus()
         End Select
         
   End Select
   
End

Public Sub cvwTerms_KeyPress()
   '------------------------------------------------------------------
   'Act only on the <ENTER> key display what is in list in the textbox
   'This event occurs of Form_Terms and is over-ridden by this observer
   '------------------------------------------------------------------
   
   If Key.code = Key.Return Then
      ' Stop Event                    'stop event on Form_Terms
      cvwTerms_DblClick()
   End If
   
End

Public Sub cvwTerms_DblClick()
   '-----------------------------------------------------------------
   'This is an observer event on  Form_Terms.ColumnView1 - see Init()
   '----------------------------------------------------------------
   
   Stop Event
   
   Coded_Term_Select()
   Form_Terms.Visible = False
   rbMajor.SetFocus()
   
End

Public Sub Settings_Save()
   
   If bEmbedded Then
      Settings["FPastHistory_Embedded_" & embedded_in_form & "/VSplit_PastHistory"] = VSplit_PastHistory.Layout
   Else
      Settings["FPastHistory/VSplit_PastHistory"] = VSplit_PastHistory.Layout
   End If
   ProblemLists.Settings_Save()
   
End

Private Sub Settings_Load()
   '[317,530]'
   
   If bEmbedded Then
      VSplit_PastHistory.Layout = Settings["FPastHistory_Embedded_" & embedded_in_form & "/VSplit_PastHistory", modUtilGUI.VSplit([299, 548])]
   Else
      VSplit_PastHistory.Layout = Settings["FPastHistory/VSplit_PastHistory", modUtilGUI.VSplit([299, 548])]
   End If
   
End

Public Sub Coded_Term_Select()
   '-------------------------------------------
   'User has chosen a term from popup listview1
   'Display this in the txtCodedTerm Textbox
   'Set currentProblem!fk_code to the pk_term
   '-------------------------------------------
   
   CurrentTerm = Form_Terms.Get_Term()
   '-----------------------------------------------------------------------
   'We allow free text in the health issue = past history problem
   'so, if user has typed something in there like ** very bad diabetes**
   '(bad example I know), then we keep this as the health issue but it
   'will be coded back to the appropriate icpc2+ term
   'However if they havn't typed anything in here, put the natural language
   'term in the txtConditon text box and the coded term in the coded textbox
   'e.g Diabetes;Type1 (T89002) or something similar
   '------------------------------------------------------------------------
   If txtCondition.text = "" Then
      txtCondition.text = CurrentTerm!term
   End If
   txtCodedTerm.text = CurrentTerm!term & " (" & CurrentTerm!code & ")"
   fk_code = CurrentTerm!code
   fk_coding_system = CurrentTerm!fk_coding_system
   
End

Public Sub Terms_Get()
   '-------------------------------------------------------------------------------------
   'Gets list of diagnostic terms
   'Cannot set default if count is one because must  be able to add new occupations
   'can't remove the label because it needs to occupy space to keep textbox correct width
   '-------------------------------------------------------------------------------------
   
   If Trim(txtCodedTerm.text) = "" Then
      currentTerm!code = ""
      Return
   End If
   Form_Terms.Get_Terms()
   
End

Public Sub rbLaterality_Click()
   
   EditArea_Notify_DataChange(True)
   fk_laterality = Last.tag
   
End

Public Sub EditArea_RadioButtons_Click()
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub rbRisk_Click()
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub rbConfidential_Click()
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub rbSignificance_Click()
   
   fk_significance = Last.tag
   EditArea_Notify_DataChange(True)
   
End

Public Sub Spelling_Check()
   '--------------------------------------------------------------------------------------------------
   'Check the letters spelling
   'called by EditorButtons_Click() and Save()
   'bHaveSpellChecked is set so as not to bug a user who has already spell checked when they save
   'This is not perfect but pragmatic, i.e they could have introduced errors after their initial check
   'but then hey, that's their problem
   '--------------------------------------------------------------------------------------------------
   
   SpellChecker.init()
   SpellChecker.StartSpelling()
   ' bHaveSpellChecked = True
   
End

Public Sub Form_Resize()
   
   Form_Terms.width = txtCodedTerm.width
   VSplit_PastHistory_Resize
   
End

Public Sub VSplit_PastHistory_Resize()
   
   If Form_Terms.Visible Then
      Form_Terms.top = ReferenceHboxForPopupControls.Top + ReferenceHboxForPopupControls.Height
   Endif
   
End

Public Sub Form_KeyPress()
   
   If Key.code = Key.Esc Then
      If Form_Terms.Visible Then
         Form_Terms.Visible = False
      Endif
   Endif
   
End

Public Sub tbHealthIssueNew_Click()
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "save"
         Save
      Case "new"
         New_Entry
   End Select
   
End

Public Sub Form_Open()
   
End
