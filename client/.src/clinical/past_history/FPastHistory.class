' Gambas class file

' Copyright (C) 2008-2015 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' ---------------------------------------------------------------------------------------------------
' PURPOSE     - A module to allow entry of pa person's health issues or past history
'               along with care providers and management plan
' NOTES       - The rblaterality tags = const.laterality values, 0,1,2,3
'             - The rbSignificance tags = const.HealthIssue_*name*, 0,1,2
'             - providers of care = persons/organisations/employees who are involved in care
'             - the providers of care in the grid will be used to generate TCA + GPMP
'             - TCA  = Team Care Arrangements
'             - GPMP = General Practitioner Management Plan
'----------------------------------------------------------------------------------------------------
Private bUserWantsSpellCheck As Boolean      'True if User has set this preference in FPreferencesClinical
Private POC_Row As Integer
Private POC_Col As Integer
Private provider_contributions As String[] 'kept because I can't control the tableview reliably - losing focus > dosn't save a cells contents
Private bOver_ride_DontShow As Boolean 
Private Control_with_Focus As Control
Private table_row_height As Integer
Private Persons As Collection
Private PersonWritingTo As Collection
Private ProvidersOfCare As Collection
Private tvProvidersOfCare_Row As Integer
Private ReferenceHboxForPopupControls As HBox
Private currentconsult As CConsult
Private bEmbedded As Boolean             'If true the form is embedded in a frmConsultNotes editor
Private SpellChecker As ClskSpell
Private bKeyValid As Boolean            'used in textbox routines
Private currentPastHistory As Collection
Private currentTerm As Collection
Public pk_pasthistory As Integer
Private bExit As Boolean
Private bEditing As Boolean 'True if we are editing an existing saved or unsaved record.
Private obs As Observer
Private iAgeOnsetUnits As Integer
Private fk_progressnote As Integer
Private fk_laterality As Integer
Private fk_significance As Integer
Private fk_code As String
Private fk_coding_system As Integer
Private fk_consult As Integer
Private yesno As String[]
'------------------------------
'stuff for the components grid
'-----------------------------

Private embedded_in_form As String
Private Form_Terms As FCodedTermSelector
Public ProblemLists As FPastHistoryProblemLists 'do not make this private

Static Private form_pasthistory As FPastHistory

Public Sub _new()
   
   form_pasthistory = Me
   With Form_Terms = New FCodedTermSelector(Vbox_EditArea)
      .Ignore = True
      .Visible = False
      .Height = 200
   End With 
   ProblemLists = New FPastHistoryProblemLists(VBox_ProblemLists)
   obs = New Observer(Problemlists.cvwProblemsActive) As "ProblemLists"
   obs = New Observer(Problemlists.cvwProblemsMajor) As "ProblemLists"
   obs = New Observer(Problemlists.cvwProblemsInActive) As "ProblemLists"
   Settings_Load()               'set splits, font sizes etc
   lblMeasure.text = "  Management Summary  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblMeasure)
   obs = New Observer(Form_Terms.ColumnView1) As "cvwTerms"
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teForSpelling
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   Vbox_EditingArea.Enabled = False
   
End

Static Public Sub Reload_PastHistory_Lists()
   '-----------------------------------------------------------------
   'Reloads just the past history list
   'called from Fclinical via an action on popupmenuPastHistory
   'eg making something active/inactive
   'don't need (True.. ie reload, already done in FClinical when it
   'reloads its own past history lists
   '-----------------------------------------------------------------
   
   form_pasthistory.ProblemLists.ReLoad  
   
End

Static Public Sub Edit_PastHistory()
   
   form_pasthistory.HealthIssue_Edit()
   
Catch
   Return   'bug here there can be a null object form_pasthistory (fixme)
   
End

Static Public Sub Delete_PastHistory()
   
   form_pasthistory.HealthIssue_Delete()
   
End

Static Public Sub Refresh_Problem(temp_coll As Collection)
   '------------------------------------------------------------------------------
   'If user has changed an attribute of a past history/health item being displayed
   'then refresh the editing area if this problem is being edited
   '------------------------------------------------------------------------------
   
   form_pasthistory.EditArea_Upate_from_fclinical(temp_coll)
   
End

Static Public Sub Reload_Lists()
   
   form_pasthistory.Reload()
   
End

Public Sub EditArea_Upate_from_fclinical(temp_coll As Collection)
   '-----------------------------------------------------------------------------
   'If this form is open, and a health issue is in the process of being edited
   'and the user has used the popup menu on FClinical to change a parameter then
   'change this in the edit area
   'most unlikely but is inconsistent if this is not done
   '----------------------------------------------------------------------------   
   
   If Vbox_EditingArea.Enabled = True Then 
      If form_pasthistory.pk_pasthistory = Temp_coll!pk_pasthistory Then
         If temp_coll!active = True Then rbSignificantActive.Value = True
         If temp_coll!major = True Then rbMajor.value = True
         If temp_coll!active = False And temp_coll!major = False Then rbInactive.value = True   
         If temp_coll!confidential = True Then rbConfidentialYes.value = True
         If temp_coll!confidential = False Then rbConfidentialNo.Value = True 
         If temp_coll!operation = True Then chkOperation.value = True
         If temp_coll!operation = False Then chkOperation.Value = False 
      Endif
   End If
   
End

Public Sub set_embedded(flag As Boolean, embeddedinform As String)
   '--------------------------------------------------
   'If this form is embeded from another form set flag
   'embeddedinform = either "notes" or "documents"
   '--------------------------------------------------
   
   bEmbedded = flag
   embedded_in_form = embeddedinform
   HBox_Buttons.Visible = True   
   
End

Public Sub set_fk_progressNote(key As Integer)
   '-------------------------------------------------------
   'As this forms Save() is called from FProgressnotesPage
   'when user is writing notes on a health issue and has
   'update the aim/historical summary/management plan
   '-------------------------------------------------------
   
   fk_progressnote = key
   
End

Public Function Consult_Exists() As Boolean
   '-----------------------------------------------------
   'If the consult as been passed to the form return true
   '-----------------------------------------------------
   
   If IsNull(currentconsult) Then Return False
   Return True
   
End

Public Function Consult_Set_Null()
   '-----------------------------------------------------
   'If the consult as been passed to the form return true
   '-----------------------------------------------------
   
   currentconsult = Null
   
End

Public Function HealthIssue_GetName() As String
   
   '  Return currentPastHistory!description
   Message.Info("Richard: in Past history: Trying to get name:check this")
   
End

Public Function pk_pasthistory_get() As Integer
   
   Return pk_pasthistory
   
End

Public Function pk_pasthistory_set(fk_ph As Integer)
   '----------------------------------------------------
   'allows a another form to set the current problem
   'eg FClinical with popup menu over the problem lists
   'so that this can be edited
   '---------------------------------------------------
   
   pk_pasthistory = fk_ph
   
End

Public Sub Decision_Support()
   '--------------------------------------------------------------------------
   'Called when user clicks on the 'Support' button the main Fclinical Toolbar
   '--------------------------------------------------------------------------
   
   If Not IsNull(Control_with_Focus) Then
      bOver_ride_DontShow = True
      Mini_Help_Show(Control_with_Focus.tag) ' overide the don't show this again parameter
      bOver_ride_DontShow = False   
   Endif
   
End

Public Sub Update_Editarea_Plan(sText As String, progressnote_pk_pastHistory As Integer)
   '---------------------------------------------------------------------------------
   'Perhaps temporary, this is called from a progress note page
   'if the user has updated the progress notes summary in the progress note
   'and at the same time is editing the same past history item in past history module
   'match the text
   '---------------------------------------------------------------------------------
   
   If pk_pasthistory = progressnote_pk_pastHistory Then
      txtPlanContributionGP.text = sText
   End If
   
End

Public Sub Update_Editarea_Plan_Summary(sText As String, progressnote_pk_pastHistory As Integer)
   
   If pk_pasthistory = progressnote_pk_pastHistory Then
      txtHistoricalSummary.text = sText
   End If
   
End

Public Sub Init(Cons As CConsult)
   
   currentconsult = cons         'set current consult on this form
   bUserWantsSpellCheck = modAdminDBI.Config_Get_Staff_Member("spelling-health-issues", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff)
   ProblemLists.Init(currentconsult, "Past History")
   rbMajor.width = rbSignificantActive.Width
   chkOperation.width = rbSignificantActive.Width
   chkCauseOfDeath.width = rbSignificantActive.Width
   rbConfidentialYes.width = rbSignificantActive.Width
   rbConfidentialno.width = rbSignificantActive.Width
   vbox_Providers.width = lblPlan.Width
   With tvProvidersOfCare
      .Rows.H = 32
      .Rows.count = 0
      .Columns.count = 2
      .Columns[0].text = "Name"
      .Columns[1].text = "Contribution to Care"
   End With
   HBox_GridView_Providers.Height = 124
   table_row_height = 24
   yesno = New String[]
   yesno.add("Yes")
   yesno.add("No")
   
End

Public Sub Form_Resize()
   
   Try tvProvidersOfCare.Columns[0].width = VBox_GridView.width / 4
   
End

Public Sub Form_Close()
   '----------------------------------------------
   'Save all current form settings and split sizes
   '----------------------------------------------
   
   Settings_Save()
   
End

Public Sub EditArea_YearOnset_CheckValid()
   '-------------------------------------------------------
   'IAN:README MAKE ME SMARTER
   'This is meant to just ensure the year of onset is valid
   ' Don't allow if invalid age or age < 0
   '-------------------------------------------------------
   
   Dim sTemp As String
   Dim STempYear As String
   Dim bDateValid As Boolean
   
   STemp = Trim(txtYearOnset.text)
   Select Case Len(sTemp)
      Case 4 'could be yyyy
         STempYear = "01/01/" & sTemp
         If IsDate(STempYear) Then
            bDateValid = True
         Else
            txtYearOnset.text = ""
         End If
      Case 7 'could be mm/yyyy
         STempYear = "01/" & sTemp
         If IsDate(STempYear) Then
            bDateValid = True
         Else
            txtYearOnset.text = ""
         End If
         
      Case 10 'could be dd/mm/yyyy
         If IsDate(STempYear) Then
            bDateValid = True
         Else
            txtYearOnset.text = ""
         End If
   End Select
   
   If bDateValid = False Or DateDiff(currentconsult!patient!birthdate, STempYear, gb.year) < 0 Then
      txtYearOnset.text = ""
   Else
      txtAgeOnset.text = DateDiff(currentconsult!patient!birthdate, STempYear, gb.year)
   End If
   
End      

Public Function EditArea_AgeOnset_CheckValid() As Boolean
   '---------------------------------------------------------------
   'Ensures the age of onset if valid, display an prompt if invalid
   'Put a catch here at some stage to catch undefined bug see note
   'I think this is fixed now
   '---------------------------------------------------------------
   
   If bExit Then Return    
   If Trim(txtAgeOnset.text) <> "" Then
      If Val((Trim(txtAgeOnset.text))) > currentconsult!patient!age_numeric Then 'bug here when used in inbox no age-numeric, have age_display should be fixed check this
         Return
      Else
         txtYearOnset.text = Year(currentconsult!patient!birthdate) + Val(txtAgeOnset.text)
         txtHistoricalSummary.SetFocus()
         Return True
      End If
   End If
   
Catch
   Return   
   
End

Public Sub Reset_Fonts()
   '------------------------------------------------------------
   'If user has changed the application font, re-size all labels
   'to make gui look ok again
   '------------------------------------------------------------
   
   Dim hCtrl As Control
   Dim ABox As HBox
   Dim lbl As Label
   
   For Each Hctrl In VBox_EditArea.Children
      If hctrl Is Hbox Then
         Abox = hctrl
         For Each hctrl In Abox.Children
            If hctrl Is Label Then
               lbl = hctrl
               '------------------------------------------------------
               'Resize those labels in the gui with autoresize = false
               'I have set ones I don't want to be resized to
               'auto-resize = True
               '------------------------------------------------------
               If lbl.AutoResize = False Then
                  lbl.width = lblmeasure.Width
               End If
               Break
            End If
         Next
      End If
   Next
   
End

Public Sub EditArea_TxtBox_GotFocus()
   '-------------------------------------------
   'Set listbox to the correct screen position
   'Highlight the textbox with nice green color
   'FIXME: make this user-configurable
   '-------------------------------------------
   
   Control_with_Focus = Last
   Listview1.Visible = False
   columnview1.Visible = False
   Form_Terms.Visible = False
   tvProvidersOfCare.Visible = True
   Last.BackGround = Color.rgb(95, 255, 175)
   ReferenceHboxForPopupControls = Last.Parent.Parent
   Select Case Last.tag
      Case "coded term"
         With Form_Terms
            .top = Last.Parent.Parent.Top + Last.Parent.Height
            .width = txtCodedTerm.Width
            .Left = Last.Parent.Left + VBox1.padding
            .Raise
            .Visible = False
            If Trim(Last.text) <> "" Then
               .Set_SearchText(Trim(Last.text))
            End If
         End With
   End Select
   Mini_Help_Show(Last.tag)
Catch
   Return 'fixme take this out to see why this sub crashes.  
   
End

Public Sub Mini_Help_Show(sTag As String)
   '---------------------------------------------------------------------------------
   'if bOver_ride_DontShow = True then the help cum decision support is shown
   'even if user has clicked on the 'don't show again
   'this will occur if user clicks on the main FClinical toolbar to re-show the
   'support
   'multiple controls on this form have the same help shown hence the main_tags thing
   '----------------------------------------------------------------------------------   
   
   Dim smsg As String  
   Dim sHeading As String 
   Dim Main_tags As String = "historical summary health need aim of plan contribution gp contribution patient'"
   
   If Not InStr(Main_tags, sTag) Then sTag = "health issue details"
   If (modAdminDBI.Has_User_Seen_Tip("FPastHistory." & Lower(sTag)) Or Vbox_EditArea.Enabled = False) And bOver_ride_DontShow = False Then Return  
   Select Case Last.tag
      Case "historical summary"
         sheading = "Health Issue Details"
         smsg = "<P><B>The Historical Summary</B></P>"
         "<P>The historical summary, as the name suggests is information about the health issue - including presentation, evolution of the condition, "
         "relevant investigations, relevant results and current status.</P>"
         "The purpose of this is to allow other clinicians to be able to understand where the patient is at with the particular health issue "
         "and to be able to take over if you are not present.</P>"
         "<P>Though this sounds like it would take up alot of space, it is by definition a summary and should be kept brief but with enough information to be informative. "
         "Often you will find you can cut and paste from incoming letters as shown by these examples:</P>"
         "<LI> Coronary artery disease. Anterior myocardial infarction 2007. Late presentation. Inducible monomorphic ventricular tachycardia at EPS testing 2008. AICD "
         "implantation (Medtronic Virtuoso VR device with 6947 lead)."
         "<P ALIGN=CENTER>or</P>"
         "<LI> Fasting BSL6.8 > 75g GTT F=5.7 2HR=19.6. His control was always was reasonable for the first 10 years until 2005 then developed secondary oral failure "
         "and was started on Lantus in 2010. With the decline in his cognition his control has  worsened and hypoglycaemia is a problem.</P>"
         "<P ALIGN=CENTER>or</P>"
         "<P>Under the problem of Hypercholesterolaemia - a cut and paste of a the result at time of diagnosis:</P>"
         "<UL><Table>"
         "<TR VALIGN=TOP>"
         "<TD> Cholesterol</TD>"
         "<TD> 7.4mmol/L </TD>"
         "<TD> (3.9-5.5)</TD>"
         "</TR>"
         "<TR VALIGN=TOP>"
         "<TD> Triglycerides</TD>"
         "<TD> 1.1 mmol/L </TD>"
         "<TD> (0.5-1.7)</TD>"
         "</TR>"
         "<TR VALIGN=TOP>"
         "<TD> HDL Cholesterol</TD>"
         "<TD> 1.6  mmol/L </TD>"
         "<TD> (0.8-1.5)</TD>"
         "</TR>"
         "<TR VALIGN=TOP>"
         "<TD>LDL Cholesterol</TD>"
         "<TD> 5.3  mmol/L </TD>"
         "<TD> (1.7-3.5)</TD>"
         "</TR>"
         "</TABLE>"
      Case "health need"
         sHeading = "Team Care Arrangements"
         smsg = "<P><B>Why is this Team Care Arrangement Needed?</B></P>"
         "<P>You must identify the reason or need this patient has which has prompted you, the doctor, to to want to send the patient to an allied health care provider.</P>"
         "<P>Remember that the medicare documentation explicity states that team care arrangements are not mechanisms to give rebates to a patient for allied health services. They "
         "actually have to need the service for a specific reason.</P>"
         "<P>For example, if the patient has diabetes, are they are neglecting their health, have persistantly raised blood sugars, are overweight, and as a result "
         "have peripheral neuropathy and microvascular disease, then the need could be stated as follows:<P>"
         "<LI>to address persistantly poor glycaemic control, a lack of understanding of carbohydrate metabolism, an inability to lose weight, and poor circulation and trophic changes in the feet"
         "<P>The goals of management are then based on these needs, as well as general goals for that disease state.</P>"
      Case "aim of plan"
         sHeading = "Goals of Care"
         smsg = "<P>The goals of your care planning will not be identical for each patient.</P> <P>Whereas the core of managing a particular disease will be similar "
         "for all patient's with the same condition, for example for diabetes:</P>"
         "<LI>To achieve a hba1c or <6.5 and avoid the micro and macrovascular complications of diabetes..."
         "<P>Each patient could potentially have additional goals based on needs specific to that particular patient. In a way the goals are really the 'inverse' of what the patient's needs are:</P>"
         "<P>For example if the patient has poor diabetic control, and is not taking care of their diabetes and has foot ulceration, the goals could also include:</P>"
         "<LI>to improve glycaemic control, assist the patient in taking responsibility to care for their diabetes, to lose weight and to improve foot care"
      Case "contribution gp"
         sHeading = "Contribution of the GP"
         sMsg = "<P>You should describe actions that you, the GP will be doing to contribute To the patient 's care.</P>"
         "<P>For example, for the diabetic patient your general role could be</P>"
         "<LI>To utlise the components of the Diabetes Cycle of Care to monitor overall diabetic control"
         "<LI>To weigh each visit and try and motivate the patient to lose weight"
         "<P>I.E general actions and specific actions For a particuliar patient.<P>"
      Case "contribution patient"
         sHeading = "Contribution of the Patient"
         sMsg = "<P>You should describe things the patient should do to contribute to their care.</P>"
         "<P>For example 'Take medications as listed and attend the dietitian "
         "and podiatrist under the Team Care Arrangements.</P>"
      Case Else
         stag = "health issue details" 'over-ride all the other tags
         sheading = "Health Issue Details"
         sMsg = "<P><B>Health Issue</B><BR>"
         "This may be identical to your coded term, or a modification e.g Poorly Controlled Diabetes Type 2.</P>"
         "<P><B>Coded Term</B><BR>"
         "You should select these from the list which pops up as your type -  either from ICPC2 Plus if you subscribe to this, or ICD10 if not. An example could be Diabetes mellitus (T90002)<P>"
         "<P><B>Significance</B></P>"
         "<UL>"
         "<LI>"
         "<LI<B>Most Significant Issues</B> as the term suggests are those health issues which have most impact on or are most relevant to the patient. "
         "What the clinician thinks is most significant and the patient thinks is most significant may be two different things and it is important "
         "to take both into consideration. Asking the question of the patient 'Which particuilar issue troubles you most' will often yield surprising answers. "
         "Also what may be a less significant issue to one type of patient e.g 'Solar Damage', may be a serious and most significant issue to another."
         "<LI><B>Most Significant Issues</B><BR>"
         " are health issues which are important to know about, but less likely to have an immediate impact on the patients health e.g could be asymptomatic hyperuricaemia, or gall stones "
         "which are noted to be present but not causing problems." 
         "<LI><B>Inactive Health Issues</B>"
         " are issues which have been resolved e.g a patient who has had serious osteoarthritis of the knee, but undergoes a total knee replacement, would have that issues moved "
         "to this list"
         "<LI><B>Risk Factors</B>"
         " are usually obvious e.g hypertension, hypercholesterolaemia, however it could also be important to list as a risk factor 'Normal Cholesterol' just so the reader knows this potential "
         "risk factor is not an issue, or perhaps 'Social Disadvantage'. Note that smoking and alcohol quantification are kept in the health summary elsewhere, however if the patient was " 
         "had a significant impact from this, it would be allocated as a health issue problem. "
         "You can include risk factors in either the Most Significant or Significant Lists, but when printed out or displayed in a pdf they will "
         "be grouped under a separate heading. Should you wish a risk factor for display purposes to be grouped into e.g a Most Significant list, e.g obesity, then you should "
         "uncheck the risk factor checkbox."
         "</UL>"
         "<P><B>Confidential</B><BR>"
         "If marked confidential then the health issue will not be printed on the health summary.</P>"
   End Select
   modUtilGUI.Decision_Support_Help_Show(smsg, sHeading, "FPastHistory." & Lower(stag))
   
End

Public Sub EditArea_TxtBox_LostFocus()
   '-------------------------------------------------------------------------------
   'When textbox loses focus, change color of background to white  .Border = False
   'optionally (see init and user perferences section) spell check the controls
   '--------------------------------------------------------------------------------
   
   If bexit Then Return 
   Last.BackGround = Color.White
   
   Select Case Last.tag
      Case "age onset"
         EditArea_AgeOnset_CheckValid()
      Case "coded term"
         Form_Terms.Timer1.Stop()
      Case "historical summary", "health need", "aim of plan", "contribution gp", "contribution patient"
         If Last Is TextArea Then 'which it should be but for safety
            bExit = True
            teForSpelling.text = Last.Text
            SpellChecker.init()
            SpellChecker.StartSpelling()
            Last.text = teForSpelling.Text
            bExit = False
         End If   
      Case "problem"
         If bUserWantsSpellCheck Then  
            bExit = True
            SpellChecker.init(txtCondition) 'can't use last because invoking spell checker > recursive lost_focus()
            SpellChecker.StartSpelling()
            bExit = False
         End If   
   End Select
   
End

Public Sub HealthIssue_Delete()
   '------------------------------------------------------------------------------------
   'Delete the currently highlighted health issue or problem
   'Annotates any existing progress notes as to who did the deletion
   'and converts all the text to strike through
   'fixme - doesn't take into account e.g if an editor open for that health issue -FIXME
   '------------------------------------------------------------------------------------
   
   Dim sMsg As String
   
   Message.Title = "Delete Health Issue Item"
   sMsg = "You have chosen to delete a Health Issue.\n\n"
   "Note that any actual progress notes associated with this health issue will not be visually removed from the progress notes "
   "but will be 'struck through' and accompanied by an audit-trail annotation of who deleted this information and why.\n\n"
   "Do you want to continue"
   If Message.Question(sMsg, "Yes", "No") = 2 Then Return
   modPastHistoryDBI.HealthIssue_Delete(currentconsult, pk_pasthistory, currentconsult!past_history[pk_pasthistory]) 'commit trans IS in modPastHistoryDBI routine
   FClinical.Editor_RemovePage(pk_pasthistory)
   Reload()
   
End

Public Sub HealthIssue_Edit()
   
   Vbox_EditingArea.Enabled = True
   
End

Public Sub HealthIssue_Display()
   '--------------------------------------------------------------------------------
   'Place the contents of currentProblem into the editing area
   'When this data is placed into the textboxes and checkboxes
   'the change event in those controls will also be triggered
   'so must set bExit to true whilst loading the data
   'pk_past history is set when user clicks on list in the form  ProblemLists
   'The click event on this form is over-ridden in this from by ProblemLists_Click()
   '--------------------------------------------------------------------------------
   
   Dim PH_From_View As Collection                            'for easy of readability = member of the view selected
   Dim POC As New Collection                                 'single provider of care
   
   EditArea_Clear()                                          'clear boxes resets all keys
   bEditing = True
   bExit = True   
   PH_From_View = currentconsult!past_history[pk_pasthistory] 'for easier reading
   '-------------------------------------------------------------------
   'set a couple of keys, the rest of the members of currentPastHistory
   'will be set by the change events in the edit area
   '-------------------------------------------------------------------
   fk_consult = PH_From_View!fk_consult
   fk_coding_system = PH_From_View!fk_coding_system
   fk_code = PH_From_View!fk_code
   '-----------------------------------------------------------------------------
   'If we are editing a past history item, saved during current consult,
   'or, if re-editing this item within the working day then
   'use the pk_progress note which will already have been created, otherwise there
   'is no fk_progress note yet
   'FIXME: What if a different user is doing this? Must put in some auditing here
   '-----------------------------------------------------------------------------
   fk_progressnote = 0
   If PH_From_View!fk_progressnote <> 0 Then
      If Format(currentconsult.GetConsultDate(), "dd/mm/yyyy") = Format(PH_From_View!date_noted, "dd/mm/yyyy") Then
         fk_progressnote = PH_From_View!fk_progressnote
      End If
   End If
   txtCondition.text = PH_From_View!description
   txtCodedTerm.text = PH_From_View!combined_term_code
   Select Case PH_From_View!fk_laterality
      Case 1
         rbLateralityLeft.value = const.LateralityLeft
      Case 2
         rbLateralityRight.value = const.LateralityRight
      Case 3
         rbLateralityBoth.value = const.LateralityBoth
   End Select
   With txtHistoricalSummary    'This is also set in FProgressnote Page - need to ensure start of line is showing in that module, as the main split could be 50/50
      .text = PH_From_View!condition_summary
      .pos = 0
   End With
   txtAgeOnset.text = PH_From_View!age_onset
   txtYearOnset.text = PH_From_View!year_onset
   iAgeOnsetUnits = PH_From_View!age_onset_units
   With txtPlanContributionGP
      .text = PH_From_View!plan_contribution_gp
      .pos = 0
   End With
   With txtPlanContributionPatient
      .text = PH_From_View!plan_contribution_patient
      .pos = 0
   End With
   'insert the team care members here
   If Not IsNull(ph_from_view!providersofcare) Then
      For Each POC In ph_from_view!providersofcare
         ProvidersOfCare.Add(POC, ProvidersOfCare.count)
      Next  
      tvProvidersOfCare_Reload
   End If   
   With txtHealthNeed
      .text = PH_From_View!health_need
      .pos = 0
   End With
   With txtAim
      .text = PH_From_View!aim_of_plan
      .pos = 0
   End With
   rbSignificantActive.value = PH_From_View!active
   rbMajor.value = PH_From_View!major
   If PH_From_View!active = False And PH_From_View!major = False Then
      rbInactive.Value = True
   End If
   chkOperation.Value = PH_From_View!operation
   If PH_From_View!confidential Then
      rbConfidentialYes.value = True
   Else
      rbConfidentialNo.Value = True
   Endif
   chkCauseOfDeath.Value = PH_From_View!cause_of_death
   chkRiskFactor.Value = PH_From_View!risk_factor
   EditArea_Notify_DataChange(False)
   bexit = False  
   
End

Public Sub ProblemLists_Click()
   '----------------------------------------------------------------
   'The user has clicked on any of the three problems lists
   'so display this problem in the editing area. Note that
   'this sets the flag bEditing to true see EditArea_HealthIssue_Display
   '----------------------------------------------------------------
   
   Stop Event
   If Not Last.count Then Return
   Select Case Last.tag
      Case "major problems"
         ProblemLists.cvwProblemsInActive.UnselectAll()
         ProblemLists.cvwProblemsActive.UnselectAll()
      Case "inactive problems"
         ProblemLists.cvwProblemsMajor.UnselectAll()
         ProblemLists.cvwProblemsActive.UnselectAll()
      Case "active problems"
         ProblemLists.cvwProblemsMajor.UnselectAll()
         ProblemLists.cvwProblemsInActive.UnselectAll()
   End Select
   Last.MoveCurrent
   pk_pasthistory = Last.Item.key
   HealthIssue_Display()
   If embedded_in_form = "FInbox" Then
      Try FInbox.Previous_Notes_Refresh() 'tab may not be open
   Endif
   
End

Public Sub EditArea_Clear()
   '----------------------------------------------------------------
   'Clears the editing area - ie clears all txtboxes, checkboxes and
   'resets all variables, sets foreground of error message to white
   'to make them 'disappear'
   
   '----------------------------------------------------------------
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   chkRiskFactor.Value = False
   rbConfidentialNo.value = True
   rbLateralityNone.value = True
   bEditing = False
   '----------------------------------------------------------------------
   'Reset gui-elements to start up condition
   'Remove padding to edit area (it's background is red) white = no change
   '----------------------------------------------------------------------
   EditArea_Notify_DataChange(False)
   listview2.Visible = False
   fk_laterality = const.LateralityNone
   fk_significance = const.healthIssue_Major
   rbMajor.Value = True
   iAgeOnsetUnits = const.Units_year
   With lblhealthIssue
      .Foreground = Color.Black
      .text = "Health Issue"
   End With
   Vbox_EditingArea.Enabled = False
   ProvidersOfCare = New Collection 
   With tvProvidersOfCare
      .Rows.count = 0
      .Clear
   End With
   bExit = False
   Form_Terms.Visible = False 
   provider_contributions = New String[]   
   
End

Public Sub Reset_Keys()
   
   pk_pasthistory = 0
   fk_coding_system = 0
   fk_code = ""
   fk_progressnote = 0
   
End

Public Sub New_Entry()
   '----------------------------------------------------------------------
   'Called from FClinical where the button tag is a generic 'New Entry'
   'I've left the orginal nomenclature here for easier reading of the code
   '----------------------------------------------------------------------
   
   HealthIssue_New()
   
End

Public Sub HealthIssue_New()
   
   '-----------------------------------------------------
   'user wants to add a new problem or condition or issue
   'Clear editing area, resetting all gui elements
   'classes, collections, flags etc, de-select problem
   'lists (ie remove the marque line)
   '-----------------------------------------------------
   EditArea_Clear()
   Reset_Keys()
   With ProblemLists
      .cvwProblemsActive.UnselectAll()
      .cvwProblemsInActive.UnselectAll()
      .cvwProblemsMajor.UnselectAll()
   End With
   With lblhealthIssue
      .Foreground = Color.Red
      .text = "New Health Issue"
   End With
   Vbox_EditingArea.Enabled = True
   EditArea_Notify_DataChange(False)
   txtCodedTerm.SetFocus()
   
End

Public Sub Reload()
   
   currentconsult.Refresh("past_history")                   'remove key from cache > later forces a reload
   If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then
      FClinical.Refresh_Section(const.cSection_PastHistory)    'refresh lists on main screen FClinical
      ' FClinical.Refresh_AllPreviousNotes()
   End If
   ProblemLists.Reload(True)   'refresh the lists                             'reload lists on embedded form
   HealthIssue_New()
   Try FCentrelink.Health_Issues_Reload()
   
End

Public Function ProgressNotes_Summary(PH As CRow) As String
   '---------------------------------------------------------------------
   'Note this is sort-of-duplicated in FClinical.Care_Plan_construct_html
   'so probably should change design and combine
   '---------------------------------------------------------------------
   
   Dim sText As String
   
   sText = "<BR><B>" & UCase(PH!description) & "</B><BR>"
   sText &= "- noted at age " & PH!age_onset
   If PH!operation = True Then                  'will always exist
      sText &= " (operation)"
   End If
   If Ph.Exist("major") Then                    'may not exist
      sText &= " considered to be a most significant problem"
   Else If PH.Exist("active") Then              'may not exist
      If ph!active = True Then sText &= " considered to be a significant problem"
   Else If PH.Exists("inactive") Then           'may not exist
      If PH!inactive Then sText &= " considered to be a inactive problem"
   End If
   If PH!risk_factor Then                  'will always exist
      stext &= " and a risk factor "
   End If
   stext &= "."
   If PH!condition_summary Then           'will always exist even if "" string
      sText &= "<BR>- "
      sText &= LCase(Left(PH!condition_summary)) & Right(PH!condition_summary, Len(PH!condition_summary) - 1)
   End If
   If PH!aim_of_plan Then                 'will always exist even if "" string
      sText &= "<BR>- the aim of management is to "
      '-------------------------------------------------------
      'Ucase first letter, preserve internal caps in sentance.
      '-------------------------------------------------------
      sText &= LCase(Left(PH!aim_of_plan)) & Right(PH!aim_of_plan, Len(PH!aim_of_plan) - 1)
      If Right(Trim(sText), 1) <> "." Then
         sText = Trim(sText) & "."
      End If
   End If
   sText &= "<BR>"
   If Not IsNull(ph!plan_contribution_gp) Then
      sText &= "GP will " & ph!plan_contribution_gp & ". "
   Endif
   If Not IsNull(PH!plan_contribution_patient) Then
      sText &= "Patient will " & PH!plan_contribution_patient & ". "
   Endif
   If Not IsNull(Ph!plan_contribution_others) Then
      sText &= Ph!plan_contribution_others & "."
   End If
   Return sText
   
End

Public Function Save() As Boolean 'called from FProgressNotesPage.Save also 
   '--------------------------------------------------
   ' Save the past history condition (ie health issue)
   ' Returns True is successful (used in FInbox to auto-save new health issues if uses forgets)
   ' Minimally needed data validated
   ' The Audit information is collected here
   ' CREATE TABLE clin_history.past_history
   ' (
   '   pk serial NOT NULL,
   '   fk_consult integer NOT NULL,
   '   age_onset integer NOT NULL,
   '   age_onset_units integer NOT NULL,
   '   description text NOT NULL,
   '   fk_laterality integer DEFAULT 0,
   '   year_onset text NOT NULL,
   '   active boolean DEFAULT false,
   '   operation boolean DEFAULT false,
   '   cause_of_death boolean DEFAULT false,
   '   confidential boolean DEFAULT false,
   '   major boolean DEFAULT false,
   '   deleted boolean DEFAULT false,
   '   year_onset_uncertain boolean DEFAULT false,
   '   condition_summary text DEFAULT ''::text,
   '   risk_factor boolean DEFAULT false,
   '   fk_coding_system integer NOT NULL, -- key to coding.lu_coding_system containing name of coding system ...
   '   fk_code text,
   '   aim_of_plan text,
   '   health_need text,
   '   fk_progressnote integer, -- foreign key to clin_consult.progressnotes table, used only during each consultation...
   '   plan_contribution_gp text,
   '   plan_contribution_patient text,
   '   plan_contribution_others text,
   '   CONSTRAINT past_history_pkey PRIMARY KEY (pk )
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );FClini
   '--------------------------------------------------
   
   Dim sProgressNotes As String
   Dim PastHistory As CRow
   Dim ProgressNote As CRow
   Dim ProviderOfCare As CRow 
   Dim member As Collection  
   Dim sString As String
   
   If Vbox_EditingArea.Padding = 0 Then 
      Return  'the outer vbox if no padding = no change of data
   End If   
   If Not Valid_EditArea_Contents() Then
      Return
   End If   
   PastHistory = New CRow
   If pk_pasthistory <> 0 Then
      PastHistory.put_unchanged(pk_pasthistory, "pk_pasthistory")
   End If
   PastHistory!fk_consult = currentconsult.GetPK()
   PastHistory!age_onset = Val(txtAgeOnset.text) 'CHECK THIS IS VALIDATED ABOVE
   PastHistory!age_onset_units = iAgeOnsetUnits
   PastHistory!description = Trim(txtCondition.text) ' modUtil.Ucase_Word_First_Letter(Trim(txtCondition.text))
   PastHistory!fk_laterality = fk_laterality
   PastHistory!year_onset = Trim(txtYearOnset.text) 'eg could be 1993 or 08/1993
   Select Case fk_significance
      Case const.healthIssue_Major
         PastHistory!major = True
      Case const.healthIssue_Significant
         PastHistory!active = True
         PastHistory!major = False  
      Case const.healthIssue_Inactive
         PastHistory!major = False  
         PastHistory!active = False    
   End Select
   If chkOperation.Value = True Then
      PastHistory!operation = True
   Else
      PastHistory!operation = False
   End If
   If chkCauseOfDeath.Value = True Then
      PastHistory!cause_of_death = True
   Else
      PastHistory!cause_of_death = False
   Endif
   If rbConfidentialYes.value Then
      PastHistory!confidential = True
   Else
      PastHistory!confidential = False
   End If
   
   PastHistory!health_need = modUtilGUI.Strip_Last_Character(Lower(txtHealthNeed.text), True)  'rips of last period or comma
   PastHistory!plan_contribution_gp = modUtilGUI.Lcase_Word_First_Letter(modUtilGUI.Strip_Last_Character(txtPlanContributionGP.text, True))
   PastHistory!plan_contribution_patient = modUtilGUI.Lcase_Word_First_Letter(modUtilGUI.Strip_Last_Character(txtPlanContributionPatient.text, True))
   sstring = ""
   For Each member In ProvidersOfCare
      sString &= member!wholename & " (" & member!occupation & ") will "
      sstring &= member!contribution_to_plan & ". "
   Next
   PastHistory!plan_contribution_others = modUtilGUI.Strip_Last_Character(sString, True)
   PastHistory!condition_summary = modUtilGUI.Strip_Last_Character(txtHistoricalSummary.text, True)
   If chkRiskFactor.value = True Then
      PastHistory!risk_factor = True
   Else
      PastHistory!risk_factor = False
   End If
   PastHistory!aim_of_plan = modUtilGUI.Strip_Last_Character(txtAim.text, True)
   PastHistory!fk_coding_system = fk_coding_system
   PastHistory!fk_code = fk_code
   sProgressNotes = ProgressNotes_Summary(PastHistory)
   modDBConnect.BeginTrans()
   PastHistory.Save("clin_history.past_history", "pk_pasthistory")
   '----------------------------------------------------------------------------------
   'Now link any providers of care to the past history item
   ' CREATE TABLE clin_history.link_pasthistory_providers
   ' (
   '   pk serial NOT NULL,
   '   fk_pasthistory integer NOT NULL,
   '   fk_branch integer,
   '   fk_employee integer,
   '   fk_person integer,
   '   deleted boolean DEFAULT false,
   '   contribution_to_plan text,
   '   CONSTRAINT link_pasthistory_providers_pkey PRIMARY KEY (pk ),
   '   CONSTRAINT link_pasthistory_providers_fk_branch_fkey FOREIGN KEY (fk_branch)
   '       REFERENCES contacts.data_branches (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT link_pasthistory_providers_fk_employee_fkey FOREIGN KEY (fk_employee)
   '       REFERENCES contacts.data_employees (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT link_pasthistory_providers_fk_pasthistory_fkey FOREIGN KEY (fk_pasthistory)
   '       REFERENCES clin_history.past_history (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT link_pasthistory_providers_fk_person_fkey FOREIGN KEY (fk_person)
   '       REFERENCES contacts.data_persons (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '------------------------------------------------------------------------------------
   For Each member In ProvidersOfCare
      ProviderOfCare = New CRow
      If member!fk_provider_of_care Then
         ProviderOfCare.put_unchanged(member!fk_provider_of_care, "fk_provider_of_care")
      End If   
      If member!fk_branch Then
         ProviderOfCare!fk_branch = member!fk_branch
      Else
         member!fk_branch = Null
      End If   
      If member!fk_employee Then 
         ProviderOfCare!fk_employee = member!fk_employee
      Else
         ProviderOfCare!fk_employee = Null
      End If
      If member!fk_person Then 
         ProviderOfCare!fk_person = member!fk_person
      Else
         ProviderOfCare!fk_person = Null
      End If   
      ProviderOfCare!fk_pasthistory = PastHistory!pk_pasthistory
      ProviderOfCare!contribution_to_plan = member!contribution_to_plan
      ProviderOfCare.Save("clin_history.link_pasthistory_providers", "fk_provider_of_care")
   Next
   '----------------------
   'Save the progress note
   '----------------------
   ProgressNote = New CRow
   If fk_progressnote Then
      ProgressNote.put_unchanged(fk_progressnote, "fk_progressnote")
   Endif
   ProgressNote!fk_consult = PastHistory!fk_consult
   ProgressNote!notes = sProgressNotes
   ProgressNote!fk_section = const.cSection_Pasthistory
   '  ProgressNote!fk_code = fk_code  FIXME Fix THE VWPROGRESSNOTES And UNCOMMENT THIS Line
   ProgressNote!problem = "Past History"
   ProgressNote!fk_problem = PastHistory!pk_pasthistory
   ProgressNote!fk_audit_action = const.cAuditAction_Insert
   ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
   '-----------------------------------------------------------------------------------------------
   'difficult - the fk_progressnote can't exist until this is saved as it needs the pk_past history
   'so as an interim stupid solution I've re-saved it after the progress note is saved.
   '-----------------------------------------------------------------------------------------------
   modPastHistoryDBI.Link_To_ProgressNote(PastHistory!pk_pasthistory, ProgressNote!fk_progressnote)
   modDBConnect.CommitTrans()
   'Past history can be embedded
   If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then 
      '  FClinical.Refresh_AllPreviousNotes()
      FClinical.Refresh_Section(const.cSection_HealthSummary)    'check if health summary showing, if so update it as it has occupations on it
   End If  
   Try FGPMPTCA.TCM_Providers_Update_Problems_Static() 
   Try FGPMPTCA.GPMP_Update()
   
   If embedded_in_form = "FInbox" Then
      Try FInbox.Previous_Notes_Refresh() 'tab may not be open
   Endif
   Vbox_EditingArea.Padding = 0
   Reload()
   
End 

Public Sub ColumnView1_KeyPress()
   '--------------------------------------------------------------
   'This is the popup list of persons selected to be a team member
   '--------------------------------------------------------------   
   
   If Key.code = Key.return Then columnview1_DblClick 
   
End

Public Sub columnview1_DblClick()
   '--------------------------------------------------------------
   'This is the popup list of persons selected to be a team member
   '--------------------------------------------------------------  
   
   columnview1.MoveCurrent
   columnview1.Visible = False   
   tvProvidersOfCare.Visible = True  
   Person_Select(Persons[columnview1.Item.key])  
Catch
   Return 'still the same old columnview problem of null key
   
End

Public Sub Person_Get()
   '-------------------------------------------------------------
   'Gets a list of persons who could be sole traders or employees
   '-------------------------------------------------------------
   
   Dim address As String
   Dim x As Integer
   Dim person As Collection
   
   With columnview1
      .Visible = False
      .Columns.count = 4
      .Clear
   End With
   If Trim(txtProvidersOfCare.text) = "" Then Return
   lblMeasure.font = columnview1.Font
   'get union of non patient persons and employees exclude records where person left the address
   persons = modUtil.Copy_Collection_Keyed_Sequentially(modReferralsDBI.Person_Get_By_Surname(Trim(txtProvidersOfCare.text), True))
   If persons.count <> 0 Then
      For Each person In persons
         If Not (person!retired = True Or person!fk_status = const.Employee_status_leftOrganisation) Then   'exlude retired or persons left this address
            columnview1.Add(x, 0)
            columnview1[x][0] = person!wholename
            columnview1[x][1] = "(" & person!occupation & ") "
            If Not IsNull(person!organisation) Then
               columnview1[x][2] = person!organisation & " " & person!branch
               If Not IsNull(person!street1) Then address = person!street1 
               If Not IsNull(person!street2) Then address &= " " & person!street2
               Try address &= person!town & " " & person!postcode
               columnview1[x][3] = address
            Else
               Try columnview1[x][2] = Trim(person!street1 & " " & person!street2)
               Try columnview1[x][3] = person!town & " " & person!postcode
            Endif
            Inc x
         End If   
         
      Next
      If columnview1.count Then 
         modUtilGui.Columnview_Columns_Set_Size(columnview1, lblmeasure)
         With columnview1
            .tag = txtProvidersOfCare
            .Visible = True
            .Raise
         End With
         tvProvidersOfCare.Visible = False  
      End If   
   End If
   
End

Public Sub tvProvidersOfCare_Save(Row As Integer, Column As Integer, Value As String) 
   
   If column <> 0 Then 
      tvProvidersOfCare[Row, Column].text = Trim(Value)
      ProvidersOfCare[row]!contribution_to_plan = modUtilGUI.Strip_Last_Character(Trim(value), True)
      EditArea_Notify_DataChange(True)
   End If 
   
End

Public Sub tvProvidersOfCare_Leave()
   
   ' tvProvidersOfCare.Refresh()
   
End

Public Sub tvProvidersOfCare_Click()
   
   POC_Row = tvProvidersOfCare.Row
   If tvProvidersOfCare.Column = 1 Then tvProvidersOfCare.Editwith(TextEdit1)
   
End

Public Sub tvProvidersOfCare_Reload()
   '----------------------------------------------------------------
   'Called either when first loading the providers of care tableview
   'or if provider of care has been deleted
   '-----------------------------------------------------------------  
   
   Dim POC As Collection
   
   tvProvidersOfCare.Clear
   tvProvidersOfCare.rows.Count = 0
   For Each POC In ProvidersOfCare
      Inc tvProvidersOfCare.Rows.Count
      tvProvidersOfCare[tvProvidersOfCare.Rows.count - 1, 0].Text = POC!wholename & " (" & POC!occupation & ")"
      tvProvidersOfCare[tvProvidersOfCare.Rows.count - 1, 1].text = POC!contribution_to_plan
      If tvProvidersOfCare.Rows.count > 2 Then
         HBox_GridView_Providers.height += 28
      Endif
   Next
   
End

Public Sub Person_Select(person As Collection)
   '-----------------------------------------------------------------------------------------
   'User selects person to send letter to from popup list
   'Remembering that the view contains person with addresses in organisations or sole traders
   'Hence all the Try's. Also, an organisation or person can be in the database 'name only'
   'without associated address. Bumma eh!
   '------------------------------------------------------------------------------------------
   
   Dim TCM As New Collection
   
   If IsNull(ProvidersOfCare) Then ProvidersOfCare = New Collection
   If person!occupation = "unknown" Then
      Message.Info("You cannot add a provider when you have not entered their occupation in the contacts database.\n\nYou should rectify this before proceeding.")
      Return
   Else
      TCM!wholename = person!wholename
      If person!fk_person Then 
         TCM!fk_person = person!fk_person  'these can be 0, removing the 0 fixme 
      Else 
         TCM!fk_person = Null
      End If   
      If person!fk_branch Then  
         TCM!fk_branch = person!fk_branch
      Else
         TCM!fk_branch = Null
      End If
      If person!fk_employee Then
         TCM!fk_employee = person!fk_employee
      Else
         TCM!fk_employee = Null
      End If   
      TCM!occupation = person!occupation
      ProvidersOfCare.Add(TCM, ProvidersOfCare.count)
      txtProvidersOfCare.text = ""
      Inc tvProvidersOfCare.Rows.Count
      tvProvidersOfCare[tvProvidersOfCare.Rows.count - 1, 0].Text = person!title & " " & person!firstname & " " & person!surname & " (" & person!occupation & ")"
      Wait
      If tvProvidersOfCare.Rows.Count > 2 Then
         HBox_GridView_Providers.Height += 32
      Endif
      EditArea_Notify_DataChange(True)
      tvProvidersOfCare.SetFocus
      tvProvidersOfCare.row = tvProvidersOfCare.Rows.count - 1
      provider_contributions.Resize(tvProvidersOfCare.rows.count)
      textedit1.tag = tvProvidersOfCare.row 'see Valid_EditArea_Contents and explanatory note at start of file re problems with the tableview
      With tvProvidersOfCare
         .column = 1
         .EditWith(textedit1)
      End With   
      
   End If   
   
End

Public Function Valid_EditArea_Contents() As Boolean
   '--------------------------------------------------------------------
   'validates the contents of edit area returns FALSE if invalid
   '-------------------------------------------------------------------
   
   Dim tablerow As Integer
   Dim member As Collection
   Dim sMsg As String
   
   If txtCondition.text = "" Then
      txtCondition.SetFocus()
      Return
   Else
      If InStr(txtCondition.text, ";") Then
         sMsg = "The health issue text:\n\n" & txtCondition.text & "\n\ncontains a ';' character - this is probably not a good idea given that mere mortals "
         "will be reading it and trying to make sense of it.\n\n"
         "You should always change auto-inserted terms based on the code you have chosen with a more readable term.\n\n"
         "Would you like to correct this before saving your data?"
         If Message.Question(sMsg, "Yes", "No - I'm happy with confusing language!") = 1 Then Return
      Endif
   End If
   If fk_code = "" Or fk_coding_system = 0 Then  'remember fk_code is string see coding schema for details
      txtCodedTerm.SetFocus()
      Return
   End If
   If Len(Trim(txtAgeOnset.text)) = 0 Then
      txtAgeOnset.SetFocus()
      Return False
   End If
   If Len(Trim(txtYearOnset.text)) = 0 Then
      txtAgeOnset.SetFocus()
      Return
   End If
   If Trim(txtPlanContributionGP.text) <> "" Then
      If txtAim.text = "" Then
         txtAim.SetFocus()
         Return
      End If
   End If
   '------------------------------------------------------------------------
   'Now the team care members, I find the table view storing data erratic
   'see textedit1_lostfocus which usually picks it up but if user goes
   'from typing in col2 > straight to the save button the lost focus does
   'not trigger, so force it here. To make this work I've put the row num
   'in the tag of the textedit1
   '------------------------------------------------------------------------
   For Each member In ProvidersOfCare
      If IsNull(member!contribution_to_plan) Then 
         Message.Title = "Care Providers"
         Message.Info("Missing care provider information, please check the providers grid. Due to a programming problem you must click on the cell and explicity hit the <enter> key  until I sort out why this is necessary.")
         Return   
      End If   
      Inc tablerow   
   Next
   Return True
   
End

Public Sub EditArea_TxtBox_KeyRelease()
   
   If bExit Then Return
   
   Select Case Last.tag
      Case "find provider"
         Person_Get
      Case "problem"
         
      Case "coded term"
         '------------------------------------------
         'on every key-release, start the timer
         'and search for term like txtCodedTerm.text
         '------------------------------------------
         Form_Terms.Set_SearchText(Trim(Last.text))
   End Select
   
End

Public Sub EditArea_TxtBox_Change()
   
   If bExit Then
      Return
   End If
   
   Select Case Last.tag
      Case "find provider"
         If Trim(Last.text) = "" Then
            columnview1.Visible = False   
            tvProvidersOfCare.Visible = True
         Endif
      Case "problem"
         teForSpelling.Text = Last.text
      Case "coded term"
         If Trim(Last.text) = "" Then
            Form_Terms.Visible = False
            'fixme ?nullify the codes
         End If
      Case "historical summary"
         teForSpelling.Text = Last.text
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtAim.SetFocus()
         End If
      Case "aim of plan"
         teForSpelling.Text = Last.text
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtPlanContributionGP.SetFocus()
         End If
      Case "age onset"
         '----------------------------------------
         'Sets or removes currentproblem!age_onset
         'SEE ALSO: EditArea_AgeOnset_CheckValid()
         '----------------------------------------
         If Len(Trim(txtAgeOnset.text)) = 0 Then
            txtYearOnset.text = ""
         End If
      Case "year onset"
         If Len(Trim(txtYearOnset.text)) = 0 Then
            txtAgeOnset.text = ""
         End If
      Case "contribution cp", "contribution patient"
         teForSpelling.Text = Last.text
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
         End If
   End Select
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   
   If flag = True Then
      vbox_EditingArea.Padding = 1
   Else
      vbox_EditingArea.Padding = 0
   Endif
   
End

Public Sub EditArea_ChkBoxes_Click()
   '---------------------------------------------------------------------------------------------
   'comment on top two lines of this routine
   'this qt bug may have been fixed in recent releases
   'This is in here because in QT, if a textbox loses focus and the next control clicked on is
   'not a list/textbox/editor, then the lost focus event is not triggered
   'we need the lost focus event because user could have tabbed off a control, hence the keypress
   'event may not have validated the data in the textbox
   'Note on intended checkbox usage:
   '  chkMajor  = if checked then major problem and needs to be in a care plan
   '  chkActive = if checked then a significant problem
   '  Neither of these = problem is a past history item most likely dealt with
   '---------------------------------------------------------------------------------------------
   
   If bexit Then Return
   Mini_Help_Show(Last.tag)
   EditArea_AgeOnset_CheckValid()
   '-----------------------------------------------
   'Deals with all the check boxes in the edit area
   '-----------------------------------------------
   If bExit Then Return
   EditArea_Notify_DataChange(True)  'give visual message to user data has changed
   Mini_Help_Show(Last.tag)
   
End

Public Function EditArea_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   '----------------------------------------------------------
   'PURPOSE       Restrict key presses for validation purposes
   'HOW IT WORKS  see routines names
   'FIXME         Ian would do this much simpler I'm sure
   '-----------------------------------------------------------
   
   Select Case Tag
      Case "problem", "coded term", "historical summary", "contribution gp", "contribution patient", "responsibility", "aim of plan", "find provider", "health need"
         bKeyValid = True
      Case "age onset"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "year onset"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TxtBox_KeyPress()
   
   Dim X As Integer
   '----------------------------------------------------
   'Each line may have a different set of key exclusions
   'so only keep valid keypresses
   '----------------------------------------------------
   bkeyvalid = EditArea_ExcludeKeys(key.code, Last.tag)
   
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case key.Code
      Case key.return, key.Tab
         Select Case Last.tag
            Case "problem"
               'user could have hit <enter> with listview1.popped up full of terms
               'and because they can see the term in the list assume that this
               'is beign chosen, so iterate through and see if can find a match
               '-----------------------------------------
               'the text could match the popped up list
               'without the user having scrolled on to it
               '-----------------------------------------
               If listview1.Visible Then
                  listview1.MoveFirst
                  For x = 0 To listview1.count - 1
                     If LCase(listview1.Item.text) = LCase(Trim(txtCondition.text)) Then
                        currentPastHistory!fk_reason = listview1.Item.Key
                        currentPastHistory!description = listview1.Item.Text
                        txtCondition.text = listview1.Item.Text
                        HBox_Problem.Padding = 0
                        txtHistoricalSummary.setfocus
                        Break
                     End If
                     listview1.MoveNext
                  Next
               End If
               listview1.Visible = False
               txtCodedTerm.SetFocus()
            Case "coded term"
               If fk_code <> "" Then
                  txtAgeOnset.SetFocus()
               End If
            Case "age onset"
               If Trim(Last.text) <> "" Then
                  If Not EditArea_AgeOnset_CheckValid() Then
                     txtAgeOnset.SetFocus()
                  End If
               Else
                  txtYearOnset.SetFocus()
               End If
            Case "year onset"
               EditArea_YearOnset_CheckValid()
               txtHistoricalSummary.SetFocus
            Case "historical summary"
               txtAim.SetFocus
            Case "health need", "aim of plan"
               txtPlanContributionGP.SetFocus
            Case "contribution gp"
               If Trim(txtPlanContributionGP.text) = "" Then
                  txtPlanContributionGP.text = ""
                  Last.pos = 0
               Endif
               Last.text = Replace(Last.text, "\n\n", "\n")
               txtPlanContributionPatient.SetFocus 
            Case "contribution patient"
               If Trim(txtPlanContributionPatient.text) = "" Then
                  txtPlanContributionGP.text = ""
                  Last.pos = 0
               Endif
               Last.text = Replace(Last.text, "\n\n", "\n")
               txtProvidersOfCare.SetFocus
         End Select
      Case Key.Down
         If listview1.Visible Then
            listview1.SetFocus
            listview1.MoveFirst
            listview1.Item.Selected = True
            Return
         End If
         If Form_Terms.visible Then
            With Form_Terms.ColumnView1
               .SetFocus
               .MoveFirst
               .Item.selected = True
            End With
            Return
         End If
         If listview2.Visible Then
            listview2.SetFocus
            listview2.MoveFirst
            listview2.Item.Selected = True
            Return
         End If
         If columnview1.Visible Then
            With columnview1
               .SetFocus
               .MoveFirst
               .Item.Selected = True   
            End With
         Endif
   End Select
Catch
   Return
   
End

Public Sub EditArea_ChkBoxes_KeyPress()
   'FIXME - THE TABBING TO EXCLUDE STUFF
   
   Select Case Key.Code
      Case key.Return
         Select Case Last.tag
            Case "year onset uncertain" 'this checkbox excluded from <keyenter> order
               chkOperation.SetFocus
            Case "operation"
               rbConfidentialNo.SetFocus
            Case "major"
               txtAgeOnset.SetFocus()
         End Select
         
   End Select
   
End

Public Sub cvwTerms_KeyPress()
   '------------------------------------------------------------------
   'Act only on the <ENTER> key display what is in list in the textbox
   'This event occurs of Form_Terms and is over-ridden by this observer
   '------------------------------------------------------------------
   
   If Key.code = Key.Return Then
      ' Stop Event                    'stop event on Form_Terms
      cvwTerms_DblClick()
   End If
   
End

Public Sub cvwTerms_DblClick()
   '-----------------------------------------------------------------
   'This is an observer event on  Form_Terms.ColumnView1 - see Init()
   '----------------------------------------------------------------
   
   Stop Event
   
   Coded_Term_Select()
   If Care_Plan_Stuff_Exists() = False Then 
      Auto_Fill_Care_Plan_Fields(modPastHistoryDBI.health_care_template_Get(modDBConnect.currentUser!fk_staff, fk_code))
   Endif
   Form_Terms.Visible = False
   rbMajor.SetFocus()
   
End

Public Sub Auto_Fill_Care_Plan_Fields(health_Issue_template As Collection)
   '----------------------------------------------------------------------
   ' Create table clin_history.health_issue_templates
   ' (pk serial primary key,
   '  fk_staff integer not null,
   '  shared boolean default false,   
   '  keywords text not null,
   '  fk_code text not null,
   '   deleted boolean DEFAULT false,
   '   risk_factor boolean DEFAULT false,
   '   aim_of_plan text,
   '   plan_contribution_gp text,
   '   plan_contribution_patient text,
   '  CONSTRAINT health_issue_templates_fk_staff_fkey FOREIGN KEY(fk_staff)
   '    REFERENCES admin.staff (pk)    MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION
   '   --CONSTRAINT health_issue_templates_fk_code_exists FOREIGN KEY (fk_code)
   '   --CHECK(fk_code = coding.generic_terms.code)
   '   
   ' );
   ' ---------------------------------------------------------------------------
   
   health_Issue_template = modPastHistoryDBI.health_care_template_Get(modDBConnect.currentUser!fk_staff, fk_code)
   If Not IsNull(health_Issue_template) Then
      txtAim.text = health_Issue_template!aim_of_plan
      txtPlanContributionGP.text = health_Issue_template!plan_contribution_gp
      txtPlanContributionPatient.text = health_Issue_template!plan_contribution_patient
   Endif
   
End

Public Function Care_Plan_Stuff_Exists() As Boolean
   '------------------------------------------------------------------------
   'if nothing in any care planning texboxes, auto-populate from the backend
   '------------------------------------------------------------------------
   
   If Trim(txtAim.text) <> "" Then Return True
   If Trim(txtPlanContributionGP.text) <> "" Then Return True
   If Trim(txtPlanContributionPatient.text) <> "" Then Return True   
   Return False
   
End

Public Sub Settings_Save()
   
   If bEmbedded Then
      Settings["FPastHistory_Embedded_" & embedded_in_form & "/VSplit_PastHistory"] = VSplit_PastHistory.Layout
   Else
      Settings["FPastHistory/VSplit_PastHistory"] = VSplit_PastHistory.Layout
   End If
   ProblemLists.Settings_Save()
   
End

Private Sub Settings_Load()
   
   If bEmbedded Then
      VSplit_PastHistory.Layout = Settings["FPastHistory_Embedded_" & embedded_in_form & "/VSplit_PastHistory", modUtilGUI.VSplit([299, 548])]
   Else
      VSplit_PastHistory.Layout = Settings["FPastHistory/VSplit_PastHistory", modUtilGUI.VSplit([299, 548])]
   End If
   
End

Public Sub Coded_Term_Select()
   '-------------------------------------------
   'User has chosen a term from popup listview1
   'Display this in the txtCodedTerm Textbox
   'Set currentProblem!fk_code to the pk_term
   '-------------------------------------------
   
   CurrentTerm = Form_Terms.Get_Term()
   '-----------------------------------------------------------------------
   'We allow free text in the health issue = past history problem
   'so, if user has typed something in there like ** very bad diabetes**
   '(bad example I know), then we keep this as the health issue but it
   'will be coded back to the appropriate icpc2+ term
   'However if they havn't typed anything in here, put the natural language
   'term in the txtConditon text box and the coded term in the coded textbox
   'e.g Diabetes;Type1 (T89002) or something similar
   '------------------------------------------------------------------------
   If txtCondition.text = "" Then
      txtCondition.text = CurrentTerm!term
   End If
   txtCodedTerm.text = CurrentTerm!term & " (" & CurrentTerm!code & ")"
   fk_code = CurrentTerm!code
   fk_coding_system = CurrentTerm!fk_coding_system
   
End

Public Sub Terms_Get()
   '-------------------------------------------------------------------------------------
   'Gets list of diagnostic terms
   'Cannot set default if count is one because must  be able to add new occupations
   'can't remove the label because it needs to occupy space to keep textbox correct width
   '-------------------------------------------------------------------------------------
   
   If Trim(txtCodedTerm.text) = "" Then
      currentTerm!code = ""
      Return
   End If
   Form_Terms.Get_Terms()
   
End

Public Sub rbLaterality_Click()
   
   EditArea_Notify_DataChange(True)
   fk_laterality = Last.tag
   Mini_Help_Show(Last.tag)
   
End

Public Sub EditArea_RadioButtons_Click()
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub rbRisk_Click()
   
   EditArea_Notify_DataChange(True)
   Mini_Help_Show(Last.tag)
   
End

Public Sub rbConfidential_Click()
   
   EditArea_Notify_DataChange(True)
   Mini_Help_Show(Last.tag)
   
End

Public Sub rbSignificance_Click()
   
   fk_significance = Last.tag
   EditArea_Notify_DataChange(True)
   Mini_Help_Show(Last.tag)
   
End

Public Sub Spelling_Check()
   '--------------------------------------------------------------------------------------------------
   'Check the letters spelling
   'called by EditorButtons_Click() and Save()
   'bHaveSpellChecked is set so as not to bug a user who has already spell checked when they save
   'This is not perfect but pragmatic, i.e they could have introduced errors after their initial check
   'but then hey, that's their problem
   '--------------------------------------------------------------------------------------------------
   
   SpellChecker.init()
   SpellChecker.StartSpelling()
   ' bHaveSpellChecked = True
   
End

Public Sub VSplit_PastHistory_Resize()
   
   If Form_Terms.Visible Then
      Form_Terms.top = ReferenceHboxForPopupControls.Top + ReferenceHboxForPopupControls.Height
   Endif
   textedit1.Visible = False
   
End

Public Sub Form_KeyPress()
   
   If Key.code = Key.Esc Then
      If Form_Terms.Visible Then
         Form_Terms.Visible = False
      Endif
   Endif
   
End

Public Sub VBox_GridView_Leave()
   
   ColumnView1.Visible = False
   tvProvidersOfCare.Visible = True  
   
End

Public Function Strip_Last_Period(txt As String) As String
   'strip a fullstop off the end of a sentance   
   
   txt = Trim(txt)
   If Right(txt, 1) = "." Then
      txt = Left(txt, Len(txt) - 1)
   Endif
   Return txt 
   
End

Public Sub tvProvidersOfCare_Menu()
   
   Print tvProvidersOfCare.Row
   tvProvidersOfCare_Row = tvProvidersOfCare.Row
   If Vbox_EditingArea.Enabled Then    
      If tvProvidersOfCare.Rows.count Then
         mnuProviders.Popup
      Endif
   End If   
   
End

Public Sub mnuProviders_Click()
   '  ProvidersOfCare
   
   Select Case Last.tag
      Case "delete"
         ProviderOfCare_Delete   
      Case "font"
         modUtilGUI.Columnview_SetFont(tvProvidersOfCare, "FPastHistory")
      Case "help"
         modUtilGUI.NotImplemented("Help for this section", "EasyGP")    
   End Select
   
End

Public Sub ProviderOfCare_Delete()
   '------------------------------------------------------------------------- 
   'Allow deletion of provider. If a previous GPMP printed then their details
   'will always be retained in the copy of the plan in documents
   're-order the provider of care collection 0-n
   're-display members in the tableview
   '------------------------------------------------------------------------- 
   
   Dim sMsg As String
   
   Print tvProvidersOfCare_Row
   Print providersofcare[tvProvidersOfCare_Row]
   Print tvProvidersOfCare.Row, '  FGPMPTCA.team_care_member_remove(me.Tag!fk_provider " is the row"
   Message.Title = "Delete Care Provider"
   sMsg = "You have decided to delete the following care provider\n\n"
   sMsg &= providersofcare[tvProvidersOfCare.Row]!wholename & " (" & providersofcare[tvProvidersOfCare.Row]!occupation & ")"
   sMsg &= "\n\nDo you wish to continue?"
   If Message.Question(sMsg, "Yes - Delete Provider", "No") = 2 Then Return    
   If Not IsNull(providersofcare[tvProvidersOfCare_Row]!pk) Then                                                'the row in the grid has not yet been deleted
      If modPastHistoryDBI.ProviderOfCare_Delete(providersofcare[tvProvidersOfCare_Row]!pk) Then
         modDBConnect.CommitTrans()   
         '---------------------------------------------------------------------------                                               
         'if this provider was in a team care arrangement being worked on remove them
         'and optionally - the true flag, remove their tab if they in fact have one
         'Next updates TCM's list of problems they are associated with  ?fixme ?still need   
         '----------------------------------------------------------------------------
         '   Try FGPMPTCA.Team_Care_Member_Remove(providersofcare[tvProvidersOfCare.Row]!wholename, True)  
         Try FGPMPTCA.Team_Care_Member_Remove(providersofcare[tvProvidersOfCare.Row]!fk_provider_of_care, True)  
         Try FGPMPTCA.TCM_Providers_Update_Problems_Static()                                                              
      End If   
   End If   
   providersofcare.Remove(tvProvidersOfCare_Row)                      'remove collection member
   ProvidersOfCare = modUtil.Copy_Collection_Keyed_Sequentially(ProvidersOfCare)  'resequence rows 0-n
   tvProvidersOfCare_Reload()                                         'reload the grid
   
End

Public Sub ProvidersOfCare_Refresh_Collection()
   
   ' Refreshes the provider of care collection
   Dim POC As Collection
   
   ProvidersOfCare = modUtil.Copy_Collection_Keyed_Sequentially(POC)
   
End

Public Sub EditArea_Buttons_Click()
   
   Dim FHIT As New FHealthIssueTemplate
   Dim data As New Collection
   Dim sMsg As String
   Dim sMsg1 As String
   Dim existing_template As Collection
   
   Dim health_Issue_template As Collection
   
   Select Case Last.tag 
      Case "save"
         Save
      Case "new"
         New_Entry
      Case "load health issue template"
         health_Issue_template = modPastHistoryDBI.health_care_template_Get(modDBConnect.currentUser!fk_staff, fk_code)
         If Care_Plan_Stuff_Exists() = False Then 
            Auto_Fill_Care_Plan_Fields(health_Issue_template)
         Else
            If Not IsNull(health_Issue_template) Then 
               Message.Title = "Data Exists"
               sMsg = "You already have some data in the fields used in GP Management Plan or Team Care Arrangement prepartion.\n\n"
               "If you continue this will be over-written.\n\nDo you want to continue?"
               If Message.Question(sMSg, "Yes", "No") = 2 Then Return
               Auto_Fill_Care_Plan_Fields(health_Issue_template)
            End If   
         Endif
      Case "save health issue template"
         If Trim(txtCondition.text) = "" Then
            sMsg = "<LI>The name of the health issue"
         Endif
         If Not fk_code Then
            sMsg &= "<LI>The coded term"
         Endif
         If Trim(txtAim.text) = "" Then
            sMsg &= "<LI>The management goals or aims care"
         Endif
         If Trim(txtPlanContributionGP.text) = "" Then
            sMsg &= "<LI>The GP's contribution to the management plan"
         Endif
         If Trim(txtPlanContributionPatient.text) = "" Then
            sMsg &= "<LI>The patient's contribution to the management plan"
         Endif
         If Len(sMsg) Then
            Message.title = "Creating Health Issue Templates"
            sMsg1 = "<P>Health issue templates are used to auto-fill in a patient's record to save you time when you are entering new health issues.<P>"
            sMsg1 &= "<P>It is important they are accurate and that the information in each fields is generic enough to be re-used for the same  or similar health issue condition or code.<P>"
            sMsg1 &= "<P>When re-loading a template you will probably modify the fields to fine tune the information for your patient.</P>"
            sMsg1 &= "<P>You cannot save a template without filling in the appropriate fields - some data is missing:</P><UL>" & sMsg & "</UL>"
            Message.Info(sMsg1)
            Return
         Endif
         'next check a template doesn't already exist
         existing_template = modPastHistoryDBI.health_care_template_Get(modDBConnect.currentUser!fk_staff, fk_code)
         If Not IsNull(existing_template) Then
            Message.title = "WARNING"
            If Message.Warning("There is an existing template for this health issue linked to your name.", "Overwrite", "Cancel") = 2 Then Return  
         Endif
         data!aim_of_plan = txtAim.text 
         data!keywords = txtCondition.text
         data!plan_contribution_gp = txtPlanContributionGP.text
         data!plan_contribution_patient = txtPlanContributionPatient.text
         data!risk_factor = CBool(chkRiskFactor.value)
         data!code = fk_code
         data!term_and_code = txtCodedTerm.Text
         FHIT.Init(data)
         FHIT.ShowModal()
   End Select 
   
End

Public Sub TextEdit1_LostFocus()
   
   If bUserWantsSpellCheck Then
      teForSpelling.text = TextEdit1.text
      SpellChecker.init()
      SpellChecker.StartSpelling()
      TextEdit1.text = teForSpelling.Text
      tvProvidersOfCare[tvProvidersOfCare.Row, tvProvidersOfCare.Column].text = teForSpelling.Text
   Endif
   
End

Public Sub TextEdit1_Change()
   
   If tvProvidersOfCare.row = -1 Then Return
   Try ProvidersOfCare[tvProvidersOfCare.row]!contribution_to_plan = Trim(textedit1.text)
   
End

Public Sub TextEdit1_gotFocus()
   
   textedit1.Tag = tvProvidersOfCare.Row
   
End   
