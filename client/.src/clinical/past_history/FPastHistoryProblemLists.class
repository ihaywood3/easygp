' Gambas class file

' Copyright (C) 2008-2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

'Public currentPatient As cPatient
Public currentconsult As CConsult

Public Sub Init(cons As Cconsult)
  
  currentconsult = cons
  Refresh()
End


Public Sub Refresh()
   '-------------------------------
   'Refreshes the past history lists
   'temp  - just trying something different
   '--------------------------------
   '--------------------------------------------------------------------
   'refreshes the cvwProblemsActive an cvwProblemsInActive lists
   'the collection members are referenced by the pk_past history
   'which is kept as the key of the list
   'If any of the items in a particular list have their data changed
   'then padding around this list will be set to 1 (red outline of list)
   'otherwise the outline will be removed (may or may not be present)
   'i.e visual notification to the user of saved/unsaved status
   '--------------------------------------------------------------------
   Dim health_issue As Collection 
   Dim bDataChanged As Boolean
   Dim bMajorProblemChanged As Boolean
   Dim bSignificantProblemChanged As Boolean
   Dim bInactiveProblemChanged As Boolean
   
    '-------------------------------------------------------------------------
   'clear the lists, loop through all members, add to active or inactive list
   '-------------------------------------------------------------------------
   cvwProblemsActive.Clear()
   cvwProblemsInActive.Clear()
   cvwProblemsMajor.Clear()
   
   cvwProblemsActive.Columns.count = 3
   cvwProblemsActive.Columns[0].width = 45
   cvwProblemsActive.Columns[1].width = 10
   cvwProblemsActive.Columns[2].width = 300
   cvwProblemsInActive.Columns.count = 3
   cvwProblemsInActive.Columns[0].width = 45
   cvwProblemsInActive.Columns[1].width = 10
   cvwProblemsInActive.Columns[2].width = 300
   cvwProblemsMajor.Columns.count = 3
   cvwProblemsMajor.Columns[0].width = 45
   cvwProblemsMajor.Columns[1].width = 10
   cvwProblemsMajor.Columns[2].width = 300
   For Each health_issue In currentconsult!past_history
          If health_issue!data_changed Then 
              bDataChanged = True
          End If   
          If health_issue!major = True     
               cvwProblemsMajor.Add(Str$(health_issue!pk_pasthistory), 0)     'add new row, key = row count fixme to pk?
               cvwProblemsMajor[Str$(health_issue!pk_pasthistory)][0] = health_issue!year_onset
               cvwProblemsMajor[Str$(health_issue!pk_pasthistory)][2] = health_issue!description
               If health_issue!data_changed = True Then
                  bMajorProblemChanged = True
               End If
               
         Else
            If health_issue!active = True     
               cvwProblemsActive.Add(Str$(health_issue!pk_pasthistory), 0)     'add new row, key = row count fixme to pk?
               cvwProblemsActive[Str$(health_issue!pk_pasthistory)][0] = health_issue!year_onset
               cvwProblemsActive[Str$(health_issue!pk_pasthistory)][2] = health_issue!description
               If health_issue!data_changed = True Then
                  bSignificantProblemChanged = True
               End If
            Else 
               cvwProblemsInActive.Add(Str$(health_issue!pk_pasthistory), 0)     'add new row, key = row count fixme to pk?
               cvwProblemsInActive[Str$(health_issue!pk_pasthistory)][0] = health_issue!year_onset
               cvwProblemsInActive[Str$(health_issue!pk_pasthistory)][2] = health_issue!description
               If health_issue!data_changed = True Then
                  bInactiveProblemChanged = True
               End If
            Endif
      Endif
   Next 
 
   
   If bDataChanged Then 
          'frmClinical.tbSave.Picture = Picture.Load("icons/20/save_2020_changed.png")
   Else 
         'FClinical.tbSave.Picture = Picture.Load("icons/20/save_2020.png")
   End If   

  
  
End

Public Sub ProblemLists_Click()
   'This is over-ridden by the parent form
  Last.movecurrent
  ' modglobal.globalKeyedItem = New cKeyedItem
  ' modglobal.globalKeyedItem.pk = currentPatient.past_history[Last.item.Key].pk_pasthistory
  ' modglobal.globalKeyedItem.description = currentPatient.past_history[Last.item.Key].health_issue

End
