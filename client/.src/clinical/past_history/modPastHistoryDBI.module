' Gambas module file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' ---------------------------------------------------------------------
Private iAuditAction As Integer

Public Function PastHistory_Get(pk_patient As Integer) As Collection
   '--------------------------------------------------------------
   'gets a list of the patients active/inactive past history items
   '--------------------------------------------------------------
   
   Dim sql As String
   
   sql = "select * from clin_history.vwHealthIssues WHERE fk_patient = "
   sql &= pk_patient 
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function CarePlanComponent_Get_pk(cpc As String) As Integer
   
   Dim $Result As Result
   Dim careplancomponent As New Collection 
   
   $Result = modDBConnect.exec_query("Select * from clin_history.lu_careplan_components where component ILIKE $$" & cpc & "$$")
   If $Result.count Then Return $Result!pk
   '---------------------
   'Dosn't exist > insert
   '---------------------
   careplancomponent!component = cpc
   Return modDBConnect.insert("clin_history.lu_careplan_components", careplancomponent)
   
End

Public Sub Save_CarePlanComponents(old_data As Collection, careplancomponents As Collection, fk_pasthistory As Integer)
   '--------------------------------------------------
   'Saves the care plan components which will fall due
   'this could be an entirely empty collection
   '--------------------------------------------------
   
   Dim cpc As Collection 
    
   For Each cpc In careplancomponents
      If IsNull(cpc!pk_careplan_components) Then
         '----------------------------------------------------------------------------
         'If the component does not exist in clin_history.care_plan_components, add it
         '----------------------------------------------------------------------------
         cpc!fk_pasthistory = fk_pasthistory
         cpc!fk_care_plan_components = modDBConnect.insert("clin_history.care_plan_components", cpc)
         
      Else
         '-----------------------------
         'Else is an existing component
         '-----------------------------
         modDBConnect.update("clin_history.care_plan_components", old_data[cpc!pk_careplan_components], cpc, "pk_careplan_components")
      End If   
   Next  
   
End

Public Function CarePlan_Component_Names_Get(name As String) As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clin_history.lu_careplan_components where component ILIKE $$%" & name & "%$$ ORDER BY component")
   
End

Public Function Get_CarePlan_Components(fk_pasthistory As Integer) As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clin_history.vwCarePlanComponents where fk_pasthistory =" & fk_pasthistory) 
   
End

Public Function Save_TeamCareMembers(old_data As Collection, TeamCareMembers As Collection, pk_pasthistory As Integer)
   '----------------------------------
   'Saves the team care members (keys) 
   '----------------------------------
   
   Dim tcm As Collection 
   
   For Each tcm In TeamCareMembers
      '-------------------------------
      'Save or edit team care members
      '-------------------------------
      If IsNull(tcm!pk) Then
         Try tcm.Remove("summary")
         Try tcm.Remove("wholename")
         tcm!fk_pasthistory = pk_pasthistory
         modDBConnect.insert("clin_history.team_care_members", tcm)
      Else
         '--------------------------------------
         'Update existing team care arrangements
         '--------------------------------------
         Try tcm.Remove("wholename")
         Try tcm.Remove("summary")
         modDBConnect.update("clin_history.team_care_members", old_data[tcm!pk], tcm, "pk")
      End If 
   Next
   
End

Public Function TeamCareMembers_UnDelete(pk As Integer)
   
   modDBConnect.exec_query("UPDATE clin_history.team_care_members SET deleted = False  WHERE pk = " & pk)
   
End

Public Function TeamCareMembers_Delete(pk As Integer)
   
   modDBConnect.exec_query("UPDATE clin_history.team_care_members SET deleted = True  WHERE pk = " & pk)
   
End

Public Function pasthistory_MakeAuditText(pasthistory As Collection) As String
   
   Dim sMsg As String
    
   sMsg = "<B>" & pasthistory!description & "</B>"
   If pasthistory!fk_laterality Then
      sMsg &= " [" & const.LateralityText[pasthistory!fk_laterality] & "]"
   End If   
   sMsg &= " This is "
   If pasthistory!major Then
      smsg &= "a major " 
   Else If pasthistory!active Then
      sMsg &= "a significant "
   Else
      sMsg &= "an inactive "
   End If
   sMsg &= "problem" 
   sMsg &= " - onset at age " & pasthistory!age_onset & const.UnitsText[pasthistory!age_onset_units] & "s. "
   If Not IsNull(pasthistory!condition_summary) Then
      sMsg &= pasthistory!condition_summary & ". " 
   End If
   If Not IsNull(pasthistory!management_summary) Then 
      sMsg &= "The management plan is " & pasthistory!management_summary & ". "
   End If
   If Not IsNull(pasthistory!aim_of_plan) Then
      smsg &= "The aim of looking after this condition is " & pasthistory!aim_of_plan
   End If
   
   Return smsg
   
End

Public Sub Link_To_ProgressNote(pk_pasthistory As Integer, fk_progressnote As Integer)
   'a patch to link a past history item to a progress note
   
   Dim $Result As Result
   Dim sql As String 
   
   sql = "Update clin_history.past_history set fk_progressnote = " & fk_progressnote & " WHERE pk =" & pk_pasthistory
   $Result = modDBConnect.exec_query(sql)
   
End

Public Function Save(currentconsult As CConsult, fk_pasthistory As Integer, pasthistory As Collection) As Integer
   '---------------------------------------------------------------
   'Saves the current past history collection from the editing area
   '---------------------------------------------------------------
   
   Dim audit As New Collection
   
   audit!data_summary = PastHistory_MakeAuditText(pasthistory)
   If fk_pasthistory = 0 Then 
      fk_pasthistory = modDBConnect.insert("clin_history.past_history", pasthistory)
      audit!action = "insert"
   Else
      '-------------------------------------------------------------------------------------------------------------
      'Existing record, update, if false flag returned - ie no data modified - then no audit so data_summary removed
      '-------------------------------------------------------------------------------------------------------------
      If modDBConnect.update("clin_history.past_history", currentconsult!past_history[fk_pasthistory], pasthistory, "pk_pasthistory") Then 
         If pasthistory!deleted = True Then
            audit!fk_action = const.cAuditAction_Delete
            audit!action = "mark deleted"
         Else   
            audit!action = "edit"
         End If
      Else
         'no changes made
         audit.Remove("data_summary")
         Return fk_pasthistory
      End If
   End If
   '----------------------------
   'Finally save the audit trailcause_of_death
   '----------------------------
   modAudit.MakeAudit(currentconsult, audit!action, "clin_history.past_history", fk_pasthistory, const.cSection_PastHistory, audit!data_summary)
   Return fk_pasthistory
   
End

' Public Function PastHistory_Condition_Summary(condition As cPastHistory, bNew As Boolean) As String
'    '--------------------------------------------------------------------------
'    ' This could be wrong/temporary, just experimenting FIXME PUT IN LATERALITY
'    '
'    ' Creates a string looking something like this eg for Hypertension could be:
'    '   Hypertension (new major problem was registered)
'    '   "<B>Historical Summary</B><BR>First noted at age 50 yrs"
'    '   "BP levels up to 190/100 on multiple occasions, started on ACE"
'    '   "levels well controlled <BR>
'    '   "<B>Management Plan</B><BR>6 monthly BP checks, medication as charted<BR>"
'    'FIX ME CHANGE NAME OF PN AS NO LONGER MEANS PROGRESS NOTE
'    '------------------------------------------------------------------------------
'      Dim pn As String
'      pn = "<B>" & condition.health_issue & "</B> "
'      If condition.fk_laterality Then
'               Select Case condition.fk_laterality
'               Case const.LateralityBothcause_of_death
'                      pn &= " (bilateral) "
'               Case const.LateralityLeft
'                     pn &= " (Left) "
'               Case const.LateralityRight
'                  pn &= " (right) "  
'               End Select
'      End If
'    '  pn &= "<small><small>"
'      ' If Not InStr(Str(condition.pk_pasthistory), ".") Then
'      '      pn &= "[DETAILS CHANGED]"
'      ' Else
'      '    pn &= "[NEW PROBLEM]"
'      ' End If
'      If bNew Then
'          pn &= "[NEW PROBLEM]"
'      Else
'          pn &= "[DETAILS CHANGED]"
'      End If
'  cause_of_deathcause_of_death
'      If condition.major = True Then
'          pn &= "[MAJOR]"
'      Else
'         If condition.active Then
'            pn &= "[SIGNIFICANT]"
'         Else
'             pn &= "[INACTIVE]"
'         End If
'      End If
'       If condition.confidential Then
'         pn &= " [CONFIDENTIAL]"
'      End If
'        If condition.cause_of_death Then
'        pn &= "[CAUSED DEATH]"
'      End If
'     ' pn &= "</small></small><BR>"cause_of_deathcause_of_death
'     pn &= "<BR>"
'      pn &= "- " 
'      If Not IsNull(condition.age_onset) Then
'         pn &= "first noted at " & condition.age_onset & " yrs "  'FIXME COULD BE MONTHS"
'      Endif
'      pn &= "in " & condition.year_onset 
'      pn &= "<BR>"
'    '  pn &= "<B><small><small> Historical Summary</B><BR>"
'      pn &= "<B>Historical Summary</B><BR>"
'      pn &= condition.historical_summary & "<BR>"
'      pn &= "<B>Management Plan</B><BR>"
'     ' pn &= condition.management_summary & "</small></small><BR>"
'      pn &= condition.management_summary & "<BR>"
'      Return pn
'   
' End

Public Sub Condition_Get(txtCondition As TextBox, listview1 As ListView, lblNewCondition As Label)
   '-------------------------------------------------------------------
   'Condition unlike say countries does not default to auto-completion 
   'with a recordset of 1 because must allow entry of new terms
   'unless the user hits enter whilst listview1 has contents
   'in which case will search the list for match and use that
   'FIX ME - as this routine is used all over the place put it in a global
   'mod and just pass it the parameters
   '-------------------------------------------------------------------
   
   Dim $Result As Result

   If Trim(txtCondition.text) = "" Then
      listview1.Visible = False
      lblNewCondition.Visible = False
      Return
   End If
   $Result = modcodingDBI.Condition_Get(Trim(txtcondition.text))
   If $Result.count Then 
      listview1.Clear
      lblNewCondition.Visible = False
      For Each $Result 
         listview1.Add(Str$($Result!pk), $Result!description)
         $Result.MoveNext
      Next 
      listview1.tag = txtCondition
      listview1.Raise
      listview1.Visible = True
   Else 
      'empty recordset
      listview1.Visible = False
      lblNewCondition.visible = True
   End If  
   
End

Public Sub HealthIssue_Delete(currentconsult As Cconsult, pk_pasthistory As Integer, currentPastHistory As Collection) 
   '--------------------------------------------------------------------
   'PURPOSE  :   Deletes a health issue
   '             Keeps an audit trail
   'CALLED BY:   Various popup menus in FClinical and FPasthistory
   '             First check there are no associated progress notes
   '             if so, cannot delete, but change the html to make the
   '             text strike through, and add to the audit table
   '------------------------------------------------------------------
   
   Dim bNotesExist As Boolean
   ' Dim audit As New Collection
   Dim sAuditAnnotation As String 'audit annotation to insert into progress notes
   Dim sToday As String 'todays date as a string
   Dim progressnote As Collection
   Dim fk_reason As Integer
   Dim reason As String
   
   sToday = Format(Now, "dd/mm/yyyy")
   ' ----------------------------------------------------------------------------------------------------
   ' If the consult this past history item was created = today, we can just reverse it no questions asked
   ' otherwise popup up an audit trail dialog
   ' ----------------------------------------------------------------------------------------------------
   If currentPastHistory!fk_consult <> currentconsult.GetPK() Then            'if not the same consult - get reason for audit-trail
      FAudit.Init("Delete Past History Item", "clin_history.past_history", currentPastHistory!description)
      fk_reason = FAudit.ShowModal() 
      modDBConnect.CommitTrans()                                              'otherwise if a new reason it won't have been comitted
      reason = modAudit.Get_Reason_Using_pk(fk_reason)
   End If
   '---------------------------------------------------------------------------------------
   'Now if progress notes existed for this problem then update the database to reflect this
   '---------------------------------------------------------------------------------------
   For Each progressnote In currentconsult!progress_notes
      If progressnote!fk_problem = pk_pasthistory And progressnote!fk_section = const.cSection_PastHistory Then 
         '-------------------------------------------------------------------
         'Mark each problem and associated progress note with strike through
         '-------------------------------------------------------------------
         sAuditAnnotation = "<STRIKE><P><FONT COLOR='#b3b3b3'>" & progressnote!notes & "</STRIKE><p>"
         sAuditAnnotation &= "<P ALIGN=CENTER><I><B>Audit trail</B> : notes deleted by " & modDBConnect.currentUser!wholename & " on "
         sAuditAnnotation &= sToday & " the reason given was: " & Lower(reason) & "</P></I></FONT><p>"
         modDBConnect.update("clin_consult.progressnotes", Null, ["pk": progressnote!pk_progressnote, "notes": sAuditAnnotation])
      End If
   Next 
   modDBConnect.update("clin_history.past_history", Null, ["pk": pk_pasthistory, "deleted": True])
   modDBConnect.CommitTrans()
   FClinical.Refresh_AllPreviousNotes() 

End

Public Function TeamCareMembers_Get(fk_pasthistory As Integer) As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clin_history.vwTeamCareMembers where fk_pasthistory = " & fk_pasthistory)
   
End

Public Sub Popup_Menu_Process(currentconsult As Cconsult, tag As String, PH As Collection, pk_pasthistory As Integer)
   '  pk_pastHistory = modPastHistoryDBI.Save(currentconsult, pk_pasthistory, currentPastHistory) 
   '      fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, sProgressNotes, const.cSection_PastHistory, fk_progressnote, "Past History", pk_pasthistory, False)
   
   Select Case tag
      Case "mark major"
         '  currentconsult!past_history[pk_pasthistory]!major = True
         ' chkMajor.Value = True
         ' modConsultDBI.ProgressNote_Save(currentconsult, sProgressNotes, const.cSection_PastHistory, fk_progressnote, "Past History", pk_pasthistory, False)
         modDBConnect.BeginTrans
         PH!major = True
         modPastHistoryDBI.Save(currentconsult, pk_pasthistory, PH) 
         
         ' Case "mark major explain"
         ' '  
         ' Case "mark significant"
         '     chkActive.Value = True
         '  '  pk_pastHistory = modPastHistoryDBI.Save(currentconsult, pk_pasthistory, currentPastHistory) 
         '  '  fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, sProgressNotes, const.cSection_PastHistory, fk_progressnote, "Past History", pk_pasthistory, False)
         '     
         '     Save()
         ' Case "mark significant explain"
         ' 
         ' Case "mark inactive"
         '     chkInactive.Value = True
         '     Save() 
         ' Case "mark inactive explain"
         ' 
         ' Case "view historical trail"  
         ' Case "delete"
         '      HealthIssue_Delete()
         ' Case "undo delete"
         ' Case "help"
         ' Case "exit"
         ' Case "view all notes"
         ' Case "decision support"
   End Select
   '------------------------------------------------------------------
   'Process the popup menu options over any health issues/problem list
   'CALLED BY  FClinical
   '           FAnteNatal
   '           FPastHistory etc
   
   '------------------------------------------
   ' Dim iAuditAction As Integer
   ' Dim bDeleted As Boolean
   ' Dim bIncludeSummaryInProgressNotes As Boolean = True 
   ' Dim audit As New collection
   ' audit!fk_row = ScratchPadItem!pk_scratchpad
   ' audit!fk_consult = currentconsult.GetPK()
   ' audit!fk_section = const.cSection_ScratchPad
   ' audit!data_summary = ScratchPadItem!note   ' & " logged on " & Format(ScratchPadItem!consult_date, "dd/mm/yyyy")
   ' 
   ' Select Case tag
   ' Case "delete"
   ' 
   '       '--------------------------------------------------------------------
   '       'scratch pad could be deleted either during consulation (ie mistake)
   '       'in which case don't need FAudit to popup and get the reason
   '       'as we are allowed to change out mind within the consultation.
   '       'or at a later date
   '       '--------------------------------------------------------------------
   '       iAuditAction = const.cAuditAction_MarkDeleted
   '       If ScratchPadItem!fk_consult <> currentconsult.GetPK() Then
   '          FAudit.Init(ScratchPadItem, Const.cSection_ScratchPad, iAuditAction, currentconsult)
   '          If Not FAudit.ShowModal() Then Return 
   '              audit!reason = Last.tag & ":<BR> - " & Lower(const.globalstring)
   '          If iAuditAction = const.cAuditAction_Delete Then bDeleted = True   
   '       Else
   '           audit!reason = const.sAuditAction[const.cAuditAction_Reversal]
   '       End If
   '       bDeleted = True
   ' Case "complete"
   '  
   '    iAuditAction = const.cAuditAction_Completed
   '    audit!reason = const.sAuditAction[const.cAuditAction_Completed]
   '  
   ' Case "complete with explanation"
   '    iAuditAction = const.cAuditAction_CompletedWithExplanation
   '    FAudit.Init(ScratchPadItem, Const.cSection_ScratchPad, iAuditAction, currentconsult)
   '    If Not FAudit.ShowModal() Then Return 
   '    audit!reason = Last.tag & ":<BR> - " & Lower(const.globalstring)
   ' End Select
   ' ScratchPadItem!fk_status = iAuditAction
   ' audit!fk_action = iAuditAction
   ' '------------------------------------------------------
   ' 'Ok, now action the menu item and create an audit trail
   ' '------------------------------------------------------
   ' modScratchPadDBI.Mark_DealtWith(ScratchPadItem!pk_scratchpad, iAuditAction, bDeleted) 
   ' modConsultDBI.Make_Audit(audit, "clin_consult", "scratchpad")
   ' modDBConnect.CommitTrans()
End
