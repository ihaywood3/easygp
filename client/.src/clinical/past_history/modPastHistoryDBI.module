' Gambas module file

' Copyright (C) 2008-2015 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' ---------------------------------------------------------------------

Public Function health_care_template_Get(fk_staff As Integer, fk_code As String) As Collection
   
   Return modDBConnect.exec_query_first("Select * from clin_history.health_issue_templates where fk_staff = " & fk_staff & "AND fk_code=$$" & fk_code & "$$")
   
End

Public Function Allied_Health_types_Get() As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clin_history.lu_allied_health_care_types") 
   
End

Public Function First_Run_Message() As String
   
  Dim sMsg As String
  
  sMsg = "<P>Please read this carefully before you attempt to prepare a GPMP or TCA.</P>"
  "<P><B><I>Except for choosing your Team Care Members, you cannot enter data in this module.</I></B></P>"
  "<P>It is purely and simple a mechanism to create the documents from existing data.</P>"
  "<P>If you want to prepare and claim at GPMP and or a TCA, your medical record must be up to date in all the relevant sections <B><I><U>before<U></I></B>"
  " you even think about preparing the documents, i.e:<P>"
  "<UL>"
  "<LI>Allergies"
  "<LI>Occupational History"
  "<LI>Social History"
  "<LI>Family History"
  "<LI>Risk Factors"
  "<LI>Immunizations"
  "<LI>Recalls"
  "<P>and most importantly</P>"
  "<LI>Health Issues"
  "</UL>"
  "<P>Also, all the names, addresses, phone fax numbers etc of any specialist or allied health person involved with the patient's care must be "
  "in the contacts database."
  "<P><B>A note about the Health Issues or Past History Section</P>"
  "<P>This is the central area where you enter the data which will end up in your GPMP or TCA, and if you maintain this section during your day-to-day "
  "work, generating a GPMP or TCA will be effortless and take just a few seconds.</P>"
  "<P>It is in this section you enter the data about the history of the health condition, the aims or goals of care, who will do what, and which "
  "providers are involved in the care of your patient. Here also, should you be intending to to a TCA you must enter the 'need' for the team care member "
  "to be part of the Team Care Arrangement.</P>"
  "<P>Progress notes reflecting what has been done during the preparation of a GPMP/TCA will be automatically generated.</P>"
  Return sMsg 
   
End

Public Function GPMP_TCA_Documents_Get(fk_patient As Integer) As Collection
   '--------------------------------------------------------------------------------------------- 
   'returns a combined collection  of all documents tagged with
   'const.Document_Display_As_GP_Management_Plan, const.Document_Display_As_Team_Care_Arrangement
   'This can include returned or faxed back documents where staff use the popup menu to change
   'a document type or scanning allocate the type on document allocation
   '---------------------------------------------------------------------------------------------
   
   Dim sql As String
   
   sql = "Select * from documents.Documents where fk_patient = " & fk_patient
   sql &= " AND (fk_lu_display_as = " & const.Document_Display_As_GP_Management_Plan 
   sql &= " OR fk_lu_display_as = " & const.Document_Display_As_Team_Care_Arrangement 
   sql &= ") AND deleted = false " 
   sql &= "ORDER BY date_created "
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function PastHistory_Get(pk_patient As Integer) As Collection
   '--------------------------------------------------------------
   'gets a list of the patients active/inactive past history items
   '--------------------------------------------------------------
   
   Dim sql As String
   Dim PHistory As Collection
   Dim PHItem As Collection
   Dim All_PH_TCMembers As Collection   
   Dim POC As Collection 
   Dim last_fk_pasthistory As Collection
   Dim POC_Members_For_PH_Item As Collection 
   Dim POC_Member_For_PH_Item As Collection
   
   sql = "select * from clin_history.vwHealthIssues WHERE fk_patient = "
   sql &= pk_patient 
   sql &= " ORDER BY age_onset"
   PHistory = modDBConnect.exec_query_collection(sql)                                     'get all the patient's past history
   sql = "Select * from clin_history.vwProvidersOfCare where fk_patient=" & pk_patient    'anyone providing care/service, not necessary a 'team care member' as used in item numbers 
   sql &= " AND provider_deleted is not true ORDER BY fk_pasthistory"
   All_PH_TCMembers = modDBConnect.exec_query_collection(sql)                                    'get all the patients team care members
   For Each PHItem In PHistory
      If Not IsNull(PHItem!plan_contribution_others) Then                                'if there are team care members
         POC_Members_For_PH_Item = New Collection                                          'will be a collection of team care members for a particular PH item
         For Each POC In All_PH_TCMembers                                                       'loop through all the patients team care members
            If PHItem!pk_pasthistory = POC!fk_pasthistory                                 'if there is a team member for this past history item
               POC_Members_For_PH_Item.Add(POC, POC_Members_For_PH_Item.count)
            End If  
         Next
         PHItem!providersofcare = POC_Members_For_PH_Item
      End If  
   Next
   Return PHistory
   
End

Public Function pasthistory_MakeAuditText(pasthistory As Collection) As String
   
   Dim sMsg As String
   
   sMsg = "<B>" & pasthistory!description & "</B>"
   If pasthistory!fk_laterality Then
      sMsg &= " [" & const.LateralityText[pasthistory!fk_laterality] & "]"
   End If   
   sMsg &= " This is "
   If pasthistory!major Then
      smsg &= "a major " 
   Else If pasthistory!active Then
      sMsg &= "a significant "
   Else
      sMsg &= "an inactive "
   End If
   sMsg &= "problem" 
   sMsg &= " - onset at age " & pasthistory!age_onset & const.UnitsText[pasthistory!age_onset_units] & "s. "
   If Not IsNull(pasthistory!condition_summary) Then
      sMsg &= pasthistory!condition_summary & ". " 
   End If
   If Not IsNull(pasthistory!management_summary) Then 
      sMsg &= "The management plan is " & pasthistory!management_summary & ". "
   End If
   If Not IsNull(pasthistory!aim_of_plan) Then
      smsg &= "The aim of looking after this condition is " & pasthistory!aim_of_plan
   End If
   
   Return smsg
   
End

Public Sub Link_To_ProgressNote(pk_pasthistory As Integer, fk_progressnote As Integer)
   'a patch to link a past history item to a progress note
   
   Dim $Result As Result
   Dim sql As String 
   
   sql = "Update clin_history.past_history set fk_progressnote = " & fk_progressnote & " WHERE pk =" & pk_pasthistory
   $Result = modDBConnect.exec_query(sql)
   
End

Public Function Save(currentconsult As CConsult, fk_pasthistory As Integer, pasthistory As Collection) As Integer
   '---------------------------------------------------------------
   'Saves the current past history collection from the editing area
   '---------------------------------------------------------------
   
   Dim audit As New Collection
   
   audit!data_summary = PastHistory_MakeAuditText(pasthistory)
   If fk_pasthistory = 0 Then 
      fk_pasthistory = modDBConnect.insert("clin_history.past_history", pasthistory)
      audit!action = "insert"
   Else
      '-------------------------------------------------------------------------------------------------------------
      'Existing record, update, if false flag returned - ie no data modified - then no audit so data_summary removed
      '-------------------------------------------------------------------------------------------------------------
      If modDBConnect.update("clin_history.past_history", currentconsult!past_history[fk_pasthistory], pasthistory, "pk_pasthistory") Then 
         If pasthistory!deleted = True Then
            audit!fk_action = const.cAuditAction_Delete
            audit!action = "mark deleted"
         Else   
            audit!action = "edit"
         End If
      Else
         'no changes made
         audit.Remove("data_summary")
         Return fk_pasthistory
      End If
   End If
   '----------------------------
   'Finally save the audit trail
   '----------------------------
   modAudit.MakeAudit(currentconsult, audit!action, "clin_history.past_history", fk_pasthistory, const.cSection_PastHistory, audit!data_summary)
   Return fk_pasthistory
   
End

' Public Function PastHistory_Condition_Summary(condition As cPastHistory, bNew As Boolean) As String
'    '--------------------------------------------------------------------------
'    ' This could be wrong/temporary, just experimenting FIXME PUT IN LATERALITY
'    '
'    ' Creates a string looking something like this eg for Hypertension could be:
'    '   Hypertension (new major problem was registered)
'    '   "<B>Historical Summary</B><BR>First noted at age 50 yrs"
'    '   "BP levels up to 190/100 on multiple occasions, started on ACE"
'    '   "levels well controlled <BR>
'    '   "<B>Management Plan</B><BR>6 monthly BP checks, medication as charted<BR>"
'    'FIX ME CHANGE NAME OF PN AS NO LONGER MEANS PROGRESS NOTE
'    '------------------------------------------------------------------------------
'      Dim pn As String
'      pn = "<B>" & condition.health_issue & "</B> "
'      If condition.fk_laterality Then
'               Select Case condition.fk_laterality
'               Case const.LateralityBothcause_of_death
'                      pn &= " (bilateral) "
'               Case const.LateralityLeft
'                     pn &= " (Left) "
'               Case const.LateralityRight
'                  pn &= " (right) "  
'               End Select
'      End If
'    '  pn &= "<small><small>"
'      ' If Not InStr(Str(condition.pk_pasthistory), ".") Then
'      '      pn &= "[DETAILS CHANGED]"
'      ' Else
'      '    pn &= "[NEW PROBLEM]"
'      ' End If
'      If bNew Then
'          pn &= "[NEW PROBLEM]"
'      Else
'          pn &= "[DETAILS CHANGED]"
'      End If
'  cause_of_deathcause_of_death
'      If condition.major = True Then
'          pn &= "[MAJOR]"
'      Else
'         If condition.active Then
'            pn &= "[SIGNIFICANT]"
'         Else
'             pn &= "[INACTIVE]"
'         End If
'      End If
'       If condition.confidential Then
'         pn &= " [CONFIDENTIAL]"
'      End If
'        If condition.cause_of_death Then
'        pn &= "[CAUSED DEATH]"
'      End If
'     ' pn &= "</small></small><BR>"cause_of_deathcause_of_death
'     pn &= "<BR>"
'      pn &= "- " 
'      If Not IsNull(condition.age_onset) Then
'         pn &= "first noted at " & condition.age_onset & " yrs "  'FIXME COULD BE MONTHS"
'      Endif
'      pn &= "in " & condition.year_onset 
'      pn &= "<BR>"
'    '  pn &= "<B><small><small> Historical Summary</B><BR>"
'      pn &= "<B>Historical Summary</B><BR>"
'      pn &= condition.historical_summary & "<BR>"
'      pn &= "<B>Management Plan</B><BR>"
'     ' pn &= condition.management_summary & "</small></small><BR>"
'      pn &= condition.management_summary & "<BR>"
'      Return pn
'   
' End

Public Sub Condition_Get(txtCondition As TextBox, listview1 As ListView, lblNewCondition As Label)
   '-------------------------------------------------------------------
   'Condition unlike say countries does not default to auto-completion 
   'with a recordset of 1 because must allow entry of new terms
   'unless the user hits enter whilst listview1 has contents
   'in which case will search the list for match and use that
   'FIX ME - as this routine is used all over the place put it in a global
   'mod and just pass it the parameters
   '-------------------------------------------------------------------
   
   Dim $Result As Result
   
   If Trim(txtCondition.text) = "" Then
      listview1.Visible = False
      lblNewCondition.Visible = False
      Return
   End If
   $Result = modcodingDBI.Condition_Get(Trim(txtcondition.text))
   If $Result.count Then 
      listview1.Clear
      lblNewCondition.Visible = False
      For Each $Result 
         listview1.Add(Str$($Result!pk), $Result!description)
         $Result.MoveNext
      Next 
      listview1.tag = txtCondition
      listview1.Raise
      listview1.Visible = True
   Else 
      'empty recordset
      listview1.Visible = False
      lblNewCondition.visible = True
   End If  
   
End

Public Sub HealthIssue_Delete(currentconsult As Cconsult, pk_pasthistory As Integer, currentPastHistory As Collection) 
   '--------------------------------------------------------------------
   'PURPOSE  :   Deletes a health issue
   '             Keeps an audit trail
   '             currentconsult so named for historical reasons 
   'CALLED BY:   Various popup menus in FClinical and FPasthistory
   '             First check there are no associated progress notes
   '             if so, cannot delete, but change the html to make the
   '             text strike through, and add to the audit table
   '------------------------------------------------------------------
   
   Dim sAuditAnnotation As String 'audit annotation to insert into progress notes
   Dim progressnote As Collection
   
  ' If modUtil.IsSameDay(Now(), currentPastHistory!date_noted) Then                       ' If the consult this past history item was created = today, we can just reverse it
   If modUtil.IsSameDay(currentconsult.GetConsultDate(), currentPastHistory!date_noted) Then                       ' If the consult this past history item was created = today, we can just reverse it
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": currentPastHistory!fk_progressnote, "deleted": True])
      modDBConnect.update("clin_history.past_history", Null, ["pk": pk_pasthistory, "deleted": True])
      modDBConnect.CommitTrans
   Else                                   'Now if progress notes existed for this problem then update the database to reflect this
      For Each progressnote In currentconsult!progress_notes
         If progressnote!fk_problem = pk_pasthistory And progressnote!fk_section = const.cSection_PastHistory Then 
            '-------------------------------------------------------------------
            'Mark each problem and associated progress note with strike through
            '-------------------------------------------------------------------
            sAuditAnnotation = "<STRIKE><P><FONT COLOR='#b3b3b3'>" & progressnote!notes & "</STRIKE><p>"
            sAuditAnnotation &= "<P ALIGN=CENTER><I><B>Audit trail</B> : notes deleted by " & modDBConnect.currentUser!wholename & " on "
          '  sAuditAnnotation &= Format(Now(), "dd/mm/yyyy") & "/See the audit notes on that date for the reason</P></I></FONT><p>"
               sAuditAnnotation &= Format(currentconsult.GetConsultDate(), "dd/mm/yyyy") & "/See the audit notes on that date for the reason</P></I></FONT><p>"
            modDBConnect.update("clin_consult.progressnotes", Null, ["pk": progressnote!pk_progressnote, "notes": sAuditAnnotation])
         End If
      Next 
      modDBConnect.update("clin_history.past_history", Null, ["pk": pk_pasthistory, "deleted": True])
      If modAudit.MakeAudit(currentconsult, "mark deleted", "clin_history.past_history", pk_pasthistory, const.cSection_PastHistory, currentPastHistory!description) Then
         modDBConnect.CommitTrans()
      Else
         modDBConnect.RollBack
      End If   
   End If   
   If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then   'health issues also shown in the inbox
      Try FClinical.Refresh_AllPreviousNotes() 
   End If 
   
End

Public Sub Team_Care_Members_Cleanup(TCA As Collection) As Boolean
   '-----------------------------------------------------------------------------------------------
   'cleanup the team care arrangements table after a save
   'The user could have on the same day printed a TCA, then gone back and deleted team care members
   'so, anyone not in the current team, mark them deleted from the table, and mark deleted from the
   'documents
   'delete the documents from the filesysytem
   'returns true if success
   '------------------------------------------------------------------------------------------------
   
   Dim TCM As Collection
   Dim sql As String
   Dim All_TCM As Collection
   Dim source_file As String
   Dim R As Result
   
   All_TCM = modDBConnect.exec_query_collection("Select * from clin_history.team_care_members where fk_team_care_arrangement = " & TCA!fk_team_care_arrangement)
   For Each TCM In All_TCM
      If Not TCA!team_care_members.Exist(TCM!fk_provider_of_care) Then
         modDBConnect.update("documents.documents", Null, ["pk": TCM!fk_document_tca, "deleted": True])
         If Not IsNull(TCM!fk_document_allied_health_form) Then    
            R = modDBConnect.exec_query("Select source_file from documents.documents where pk=" & TCM!fk_document_allied_health_form & " AND deleted is false")
            If R.count Then
               Try Kill modAdminDBI.Config_Get("document_archiving_directory", "", Null, modDBConnect.currentUser!fk_clinic) &/ R!source_file
               If Error Then
                  Message.info("error trying to remove left over team care member file, the operation will be aborted")
                  Return False  
               Endif
            End If   
            modDBConnect.update("documents.documents", Null, ["pk": TCM!fk_document_allied_health_form, "deleted": True])
         End If 
         modDBConnect.update("clin_history.team_care_members", Null, ["pk": TCM!pk, "deleted": True])
      Endif
   Next
   For Each TCM In TCA!team_care_members
      Print TCM!fk_provider_of_care
   Next
   Return True
Catch
   Message.Info("An error occured whilst trying to cleanup the team care members documents")
End

Public Function TCA_Get(fk_patient As Integer) As Collection
   '--------------------------------------------------------
   'get the last Team Care Arrangement
   'the collection looks like this
   'TCA!team_care_members
   'each team_care_member in TCA!team_care_members has
   '                                 health_issue_keys
   '                                 family_history_keys etc
   '--------------------------------------------------------
   
   Dim TCA As New Collection
   Dim sql As String
   Dim team_care_member As Collection
   Dim team_care_members As Collection  
   Dim R As Result
   
   sql = "Select * from clin_history.vwTeamCareArrangements where fk_patient = " & fk_patient & " order by date_claimed DESC limit 1"           'get lastest TCA
   TCA = modDBConnect.exec_query_first(sql) 
   If IsNull(TCA) Then Return 
   If TCA.count Then
      sql = " SELECT  DISTINCT vwprovidersofcare.wholename, vwprovidersofcare.pk as pk_link_pasthistory_providers,  "                          
      " team_care_members.fk_team_care_arrangement, vwprovidersofcare.fk_provider_of_care, "
      " team_care_members.fk_person, team_care_members.fk_branch, team_care_members.fk_employee "
      " FROM   clin_history.team_care_members, "
      "   clin_history.vwprovidersofcare "
      "   WHERE   team_care_members.fk_provider_of_care = vwprovidersofcare.fk_provider_of_care   "
      sql &= " AND fk_team_care_arrangement = " & TCA!fk_team_care_arrangement
      TCA!team_care_members = modDBConnect.exec_query_collection(sql)
      For Each team_care_member In TCA!team_care_members
         sql = "Select * from clin_history.vwTeamCareMembers where fk_provider_of_care = " & team_care_member!fk_provider_of_care 
         R = modDBConnect.exec_query(sql)
         If R.count Then
            team_care_member!fk_team_care_member = R!fk_team_care_member   
            If Not IsNull(R!health_issue_keys) Then
               team_care_member!health_issue_keys = R!health_issue_keys
            End If
            If Not IsNull(R!family_history_keys) Then
               team_care_member!family_history_keys = R!family_history_keys
            End If  
            If Not IsNull(R!fk_lu_allied_health_care_type) Then
               team_care_member!fk_lu_allied_health_care_type = R!fk_lu_allied_health_care_type
            Endif
            If Not IsNull(R!allied_health_care_type) Then
               team_care_member!allied_health_care_type = R!allied_health_care_type
            Endif
            If Not IsNull(R!fk_document_tca) Then
               team_care_member!fk_document_tca = R!fk_document_tca
            Endif
            If Not IsNull(R!fk_document_allied_health_form) Then
               team_care_member!fk_document_allied_health_form = R!fk_document_allied_health_form
            Endif
            If Not IsNull(R!filename) Then
               team_care_member!filename = R!filename
            Endif
            If Not IsNull(R!num_epc_sessions) Then
               team_care_member!num_epc_sessions = R!num_epc_sessions
            Endif
            If Not IsNull(R!special_note) Then
               team_care_member!special_note = R!special_note
            Endif
            If Not IsNull(R!progress_towards_goals) Then
               team_care_member!progress_towards_goals = R!progress_towards_goals
            Endif
            If Not IsNull(R!fk_document_gp_management_plan) Then
               team_care_member!fk_document_gp_management_plan = R!fk_document_gp_management_plan
            Endif
         End If   
      Next
   Endif
   Return TCA
   
End


Public Function GP_Management_Plans_Get(fk_patient As Integer, Optional bLatest As Boolean = False) As Collection 
   '---------------------------------------------------------------------------
   'Gets all a patient's GP Management Plans, or Latest Plan if bLatest is true
   'Called by  FGPMP.Reload()
   '---------------------------------------------------------------------------
   
   Dim sql As String
   
   sql = "Select * from clin_history.vwGPManagementPlans where fk_patient = " & fk_patient & " and deleted is not true ORDER BY date_claimed DESC"
   If bLatest Then 
      sql &= " LIMIT 1"
      Return modDBConnect.exec_query_first(sql)
   Else
      Return modDBConnect.exec_query_collection(sql)
   End If 
   
End

Public Function ProvidersOfCare_Get(fk_pasthistory As Integer) As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clin_history.vwProvidersOfCare where fk_pasthistory = " & fk_pasthistory & " AND provider_deleted is not true")
   
End

Public Function ProviderOfCare_Delete(fk_provider_of_care As Integer) As Boolean
   '------------------------------------------------------------------------------------
   ' Mark a provider of care deleted
   ' -----------------------------------------------------------------------------------
   ' Create TABLE clin_history.link_pasthistory_providers
   ' (
   '   pk serial Not Null,
   '   fk_pasthistory integer Not Null,
   '   fk_branch integer,
   '   fk_employee integer,
   '   fk_person integer,
   '   deleted boolean Default False,
   '   contribution_to_plan text,
   '   CONSTRAINT link_pasthistory_providers_pkey PRIMARY KEY(pk),
   '   CONSTRAINT link_pasthistory_providers_fk_branch_fkey FOREIGN KEY(fk_branch)
   '       REFERENCES contacts.data_branches(pk) Match SIMPLE
   '       On UPDATE NO ACTION On DELETE NO ACTION,
   '   CONSTRAINT link_pasthistory_providers_fk_employee_fkey FOREIGN KEY(fk_employee)
   '       REFERENCES contacts.data_employees(pk) Match SIMPLE
   '       On UPDATE NO ACTION On DELETE NO ACTION,
   '   CONSTRAINT link_pasthistory_providers_fk_pasthistory_fkey FOREIGN KEY(fk_pasthistory)
   '       REFERENCES clin_history.past_history(pk) Match SIMPLE
   '       On UPDATE NO ACTION On DELETE NO ACTION,
   '   CONSTRAINT link_pasthistory_providers_fk_person_fkey FOREIGN KEY(fk_person)
   '       REFERENCES contacts.data_persons(pk) Match SIMPLE
   '       On UPDATE NO ACTION On DELETE NO ACTION
   ' )
   ' With (
   '   OIDS = False
   ' );
   '----------------------------------------------------------------------------------------------
   
   If modDBConnect.update("clin_history.link_pasthistory_providers", Null, ["pk": fk_provider_of_care, "deleted": True]) Then
      Return True
   Endif
   
End
