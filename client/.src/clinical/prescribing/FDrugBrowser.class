' Gambas class file

' Copyright (C) 2008-2012 Dr. Richard Terry, Dr. Ian Haywood

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

' ------------------------------------------------------------------------------
' A module to allow viewing of a drugs Product Information, or to add a new drug
'------------------------------------------------------------------------------
'
'Anatomical Therapeutic Chemical Classification System:
'See:http://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System
' First level
' 
' The first level of the code indicates the anatomical main group and consists of one letter. There are 14 main groups:[3]
' Code    Contents
' A    Alimentary tract and metabolism
' B    Blood and blood forming organs
' C    Cardiovascular system
' D    Dermatologicals
' G    Genito-urinary system and sex hormones
' H    Systemic hormonal preparations, excluding sex hormones and insulins
' J    Antiinfectives for systemic use
' L    Antineoplastic and immunomodulating agents
' M    Musculo-skeletal system
' N    Nervous system
' P    Antiparasitic products, insecticides and repellents
' R    Respiratory system
' S    Sensory organs
' V    VariousPrivate pic_printed As Picture = Picture["icons/12/green_dot.png"]
'
' Second level
' 
' The second level of the code indicates the therapeutic main group and consists of two digits.
' 
' Example: C03 Diuretics
' Third level
' cvwDrugs[brand!pk_view][1]
' The third level of the code indicates the therapeutic/pharmacological subgroup and consists of one letter.
' 
' Example: C03C High-ceiling diuretics
' Fourth level
' 
' The fourth level of the code indicates the chemical/therapeutic/pharmacological subgroup and consists of one letter.
'   Select Case ActiveWindow_Get_Name() 
' Example: C03CA Sulfonamides
' Fifth level
' 
' The fifth level of the code indicates the chemical substance and consists of two digits.
' cvwDrugs[brand!pk_view][1]
' Example: C03CA01 Furosemide
' 
' FIXME: implement schedule/poison in save + edit_area_key_validate for eg numbers for packs
'        check if can put numbers/decimal validation on txtvolume if if ever need et 1mg/100ml
' BUGS : Save() will crash if an generic exists
'      : Gridview1_Load() iWidestGenericName not setting the column 0 to correct width
'----------------------------------------------------------------------------------------------------------------------
Private pic_pdf As Picture = Picture["icons/20/pdf2020.png"]
Private empty_2020png As Picture = Picture["icons/20/empty2020.png"]
Private Product_Information_Dir As String
Private $hEditor As Object
Private iTop As Integer
Private form_help As FHtmlViewer
Private Default_Zoom_Help As Integer
Private Default_Zoom_PI As Integer
Private Help_Dir As String
Private fk_brand As String
Private fk_product As String
Private fk_company As Variant
Private fk_form As Integer
Private fk_schedule As Integer
Private atccode As String
Private drugs As Collection
Private schedules As Collection
Private pregnancy_categories As Collection
Private bExit As Boolean
Private Form_PDF As FPdf
Private generics As Collection
Private onrow As Integer
Private Clone As Collection 

Public Sub Form_Open()
   
   Init() 
   
End

Public Sub Settings_Save()
   
   Settings["Drugs/VSplit_DataEntry.Layout"] = VSplit_DataEntry.Layout
   Settings["Drugs/HSplit_DataEntry.Layout"] = HSplit_DataEntry.Layout
   Settings["Drugs/Form_PDF.Zoom"] = Form_PDF.CurrentZoom
   
End

Private Sub Settings_Load()
   
   Try HSplit_DataEntry.Layout = Settings["Drugs/HSplit_DataEntry.Layout", "2,1"]
   Try VSplit_DataEntry.Layout = Settings["Drugs/VSplit_DataEntry.Layout", "2,1"]
   
   Try Form_PDF.CurrentZoom = Settings["Drugs/Form_PDF.Zoom"]
   
End

Public Sub Init()
   
   lblMeasure.text = "   Volume (Liquids only)   "
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Inner, lblMeasure)
   form_help = New FHtmlViewer(Vbox_Help)
   modEditAreaHelpers.Help_Show("using-the-drug-browser.html", form_help)
   cmbUnits.Add("grams")
   cmbUnits.Add("mls")
   
   With cvwDrugs
      .Columns.count = 2
      .Columns[0].text = "Brand Name"
      .Columns[1].text = "Generic Name"
      
   End With
   With Form_PDF = New (FPDF, VBox_PDF)
      .btZoomIn.Visible = True
      .btZoomOut.Visible = True
      .BtPrint.Visible = True  
   End With
   With gridview1
      .Columns.Count = 4
      .Columns[0].width = (gridview1.width - 78) / 2
      .Columns[2].width = (gridview1.width - 78) / 2
      .Columns[3].width = 78
      .Rows.count = 1
   End With
   schedules = modPrescribingDBI.Schedules_Get()
   modUtil.LoadCombo(cmbSchedules, Schedules, "schedule")
   
   If Not modDBConnect.IsAdmin Then 
      Product_Information_Dir = modAdminDBI.Config_Get("product_information_directory", "", Null, modDBConnect.currentUser!fk_clinic)
   Endif
   txtEditGrid.Height = txtBrand.Height
   bExit = True   
   Settings_Load() 'prevent the Hsplit1_resize event
   bExit = False  
   Reload()
   
End Sub

Public Sub Reload()
   
   Inc Application.Busy
   If Trim(txtSearch.text) <> "" Then
      drugs = modPrescribingDBI.Brands_Get(Trim(txtSearch.text)) 'FIXME RENAME
      Drugs_Fill_List(drugs)
   End If    
   Dec Application.Busy
   
End

Public Sub ACT_Codes_Get()
   '---------------------------------------------------------------------------------------
   'find an Anatomic Therapeutic Chemical(ATC)code, see the header of this file for details
   '---------------------------------------------------------------------------------------
   
   Dim i As Collection
   
   listview2.Clear
   For Each i In modPrescribingDBI.ACT_Codes_Get(Trim(txtACTName.text))
      listview2.add(i!pk, i!atcname)
   Next
   If listview2.Count Then
      With listview2
         .Visible = True
         .Raise
         .tag = txtACTName
      End With
   Endif
   
End

Public Sub ACT_Code_Select()
   
   listview2.MoveCurrent
   txtACTName.text = listview2.Item.Text
   atccode = listview2.Item.Key
   txtForm.SetFocus()
   
End

Public Sub Company_Get()
   '---------------------------------------------
   'Gets a collection of pharmaceutical companies
   '---------------------------------------------  
   
   Dim companies As Collection
   Dim company As Collection
   
   Companies = modPrescribingDBI.Companies_Get(Trim(txtCompany.text))
   ListView2.Clear()
   For Each company In companies
      listview2.Add(company!code, company!company) 
   Next
   If listview2.count Then
      With listview2 
         .Visible = True   
         .tag = txtCompany 
      End With
   Endif
   
End

Public Sub Company_Select()
   '--------------------------------------------------------
   'User is selecting  a pharmaceutical company for the drug
   '--------------------------------------------------------   
   
   listview2.MoveCurrent
   txtCompany.text = listview2.Item.Text
   fk_company = listview2.Item.Key
   txtFindGenericComponent.SetFocus()
   
End

Public Sub Gridview1_Scroll()
   
   If gridview1.row = -1 Then Return 
   Try Move_EditingTextBox
   
End

Public Sub GridRows_Init()
   '-----------------------------------------------
   'fills the gridrows collection if generic exists
   '------------------------------------------------ 
   
End

Public Sub Gridview_Unload(ByRef generics As String, ByRef strengths As String)
   ' Refresh generics and strengths from the grid
   
   Dim i As Integer
   
   generics = ""
   strengths = ""
   For i = 0 To gridview1.Rows.Max
      If i <> 0 Then
         generics &= ";"
         strengths &= "-"
      Endif
      generics &= gridview1[i, 0].Text
      strengths &= gridview1[i, 1].Text
   Next
   
End

Public Sub Gridview1_Load(generics As String, strengths As String)
   '-----------------------------------------------
   'Refresh the grid showing the generic components from the respective database strings
   '-----------------------------------------------   
   
   Dim gridrow As Integer
   Dim generic_components As String[]
   Dim generic_strengths As String[]
   Dim iWidestGenericName As Integer
   
   gridview1.Columns.Count = 2
   If IsNull(generics) Then Return
   If generics = "" Then Return
   generic_components = Split(generics, ";")
   generic_strengths = Split(strengths, "-")
   gridview1.rows.Count = generic_components.Count 
   For gridrow = 0 To generic_components.Max
      gridview1[gridrow, 0].Text = generic_components[gridrow]
      Try gridview1[gridrow, 1].Text = generic_strengths[gridrow] 'there may be no strengths
      lblMeasure.text = gridview1[gridrow, 0].text
      iWidestGenericName = Max(lblMeasure.width, iWidestGenericName)    
   Next
   gridview1.Columns[0].width = iWidestGenericName
   HBox_GenericsGrid.height = gridview1.rows.Count * txtEditGrid.height + 5
   
End

Public Sub Gridview1_DblClick()
   '-----------------------------------------------------
   'User has double clicked on a cell in the grid to edit
   '-------------------------------------------------------------------
   
   Show_EditingTextBox()
   
End

Public Sub Show_EditingTextBox()
   '--------------------------------------------------------------------------------------------
   'Displays the editing textbox
   'Copied some of this code from the gambas IDE so can't remmber reason for use of the hEditor   
   '--------------------------------------------------------------------------------------------
   
   Dim sAppointment As String  'the contents of the grid column with patients 
   Dim hEditor As Object 
   Dim gridcol As Integer
   Dim gridrow As Integer
   
   gridcol = gridview1.Column
   gridrow = gridview1.Row
   Print "on column" & gridcol
   txtEditGrid.Width = gridview1.Columns[gridcol].width
   itop = gridview1.top + (Gridview1.Rows[0].height * gridrow)
   hEditor = txtEditGrid
   $hEditor = hEditor
   Try Move_EditingTextBox
   $hEditor.Show
   
   txtEditGrid.Visible = True 
   $hEditor.SetFocus
   $hEditor = txtEditGrid   
   txtEditGrid.SelectAll
   
   ' If Not IsNull(gridrows[gridrow]!generic) Then
   txtEditGrid.text = Gridview1[gridrow, gridcol].Text
   ' Else
   '    txtEditGrid.pos = Len(txtEditGrid.text) 
   ' End If   
   txtEditGrid.SetFocus()
Catch
   Return 
   
End

Public Sub Move_EditingTextBox()
   '---------------------------------------------------------------------------------
   'Sub Move ( X As Integer, Y As Integer [ , Width As Integer, Height As Integer ] )
   'here, height = ((iLastRow - iFirstRow) + 1) * irowheight + 5)
   'If single slot selected and being edited then this could be equivalent of
   '1 row = normal apptor multiple rows, so use the actual grid cell  height,
   'otherwise calculate the textbox height on basis of selected rows.
   '---------------------------------------------------------------------------------
   
   Dim iW As Integer
   Dim iheight As Integer
   Dim left_header_width As Integer 
   Dim colpos As Integer
   Dim gridcol As Integer
   Dim gridrow As Integer
   
   gridcol = gridview1.Column
   gridrow = gridview1.Row
   colpos = gridview1.Columns[gridcol].Left
   If IsNull($hEditor) Or gridview1.Row = -1 Then Return 'FIXME BAD BAD BUGFIX ?WHY GOING -1
   
   iheight = Gridview1.Rows[gridrow].height + 5
   With gridview1[gridview1.Row, 1]
      '  txtEditGrid.Move(gridview1.X + (gridview1.width - gridview1.Columns[0].width - gridview1.Columns[1].width - 3) - gridview1.ScrollX, gridview1.Y + itop + 1 - gridview1.ScrollY, .Width + 5, iheight)
      txtEditGrid.Move(gridview1.X + colpos - gridview1.ScrollX, gridview1.Y + itop + 1 - gridview1.ScrollY, txtEditGrid.width + 5, iheight)
      
   End With
   
End

Public Sub Generic_Names_Get()
   '---------------------------------------------------------------------
   'Searches the existing generics in the database, presents list to user
   '---------------------------------------------------------------------  
   
   Dim generic As Collection
   
   If Trim(txtFindGenericComponent.text) = "" Then Return 
   generics = modPrescribingDBI.Generic_Names_Get(Trim(txtFindGenericComponent.text))
   ListView2.Clear
   For Each generic In generics  
      ListView2.Add(generic!pk, generic!generic & " " & generic!strength)
   Next
   If ListView2.count Then 
      With ListView2
         .Visible = True
         .tag = txtFindGenericComponent
      End With
   Else
      listview2.Visible = False  
   End If   
   
End

Public Sub Generic_Names_Select()
   '---------------------------------------------------------------------------------------------
   'User is selecting an existing generic, this may be compound e.g paracetamol;codeine phosphate
   'Check through existing generics in the grid and don't insert a duplicated name
   'otherwise, increment the grid rowcount, insert the new generic and/or strength
   'set the generic name column to the widest generic name in the grid
   '---------------------------------------------------------------------------------------------
   
   Dim irow As Integer
   Dim generic As String
   Dim generic_components As New String[]
   Dim strength As String
   Dim strengths As New String[]
   ' Dim iExitingGenericsCount As Integer
   Dim iWidestGenericName As Integer
   
   listview2.MoveCurrent()
   bExit = True  
   txtFindGenericComponent.text = ""
   bExit = False 
   If gridview1.Rows.count Then                                                           'existing rows in grid?
      For irow = 0 To gridview1.rows.count - 1                                            'check not duplicate
         If gridview1[irow, 0].text = Trim(txtFindGenericComponent.text) Then Return
         '  Inc iExitingGenericsCount
         lblMeasure.text = gridview1[irow, 0].text                                        'start measuring the generic's width when displayed
         iWidestGenericName = Max(lblMeasure.width, iWidestGenericName)
      Next
   End If
   generic_components = Split(generics[ListView2.Item.key]!generic, ";")                  'split new components
   strengths = Split(generics[ListView2.Item.key]!strength, "-")                          'and strengths
   For irow = 0 To generic_components.count - 1                                           'for all the new generics
      Inc gridview1.Rows.count
      gridview1[gridview1.Rows.count - 1, 0].text = generic_components[irow]
      lblMeasure.text = gridview1[irow, 0].text
      iWidestGenericName = Max(lblMeasure.width, iWidestGenericName)
      If strengths.Count Then gridview1[gridview1.Rows.count - 1, 1].text = strengths[irow]
      HBox_GenericsGrid.Height = (txtEditGrid.height + 1) * gridview1.Rows.count
   Next
   Gridview1.columns[0].width = iWidestGenericName
   txtFindGenericComponent.SetFocus()
   
End

Public Sub Generic_Delete()
   '----------------------------------------------------------
   'Deletes one of the generic components of a user-added drug
   '----------------------------------------------------------   
   
   gridview1.Rows.Remove(onrow)
   
End

Public Sub Product_Information_Select()
   
   txtPIFile.text = ListView2.Item.text
   
   If Hbox_AddGeneric.Visible Then txtCompany.SetFocus()
   
End

Public Sub Product_Information_Filename_Get()
   
   Dim sfile As String
   Dim brand As String
   ' /home/richard/ubuntu-server/product_information
   If Product_Information_Dir = "" Then
      Message.Info("The product information directory could not be found.\n\nPlease check with your system adminstrator.")
   Endif
   Print product_Information_Dir
   brand = Trim(Lower(txtBrand.Text))
   If InStr(brand, " ") Then
      brand = Left(brand, InStr(brand, " ") - 1)
   Endif
   If InStr(txtBrand.text, "-") Then
      brand = Left(brand, InStr(brand, "-") - 1)
   Endif
   Print "looking for :" & brand
   listview2.Clear()
   If Right(Trim(txtPIFile.text), 4) <> ".pdf" Then                          'if don't have an existing pdf
      For Each sFile In Dir(Product_Information_Dir, "*.*")                  'list all files in PI directory like the brandname
         If InStr(Lower(sFile), brand) Then
            Print sFile
            listview2.Add(ListView2.count, sFile)
         Endif
      Next
      With listview2
         If .count Then
            .Visible = True
            .tag = txtPIFile
            .Raise
         End If 
      End With
      Wait
   End If   

End

Public Sub Drugs_Fill_List(drugs As Collection)
   
   Dim x As Integer
   Dim brand As Collection
   Dim iDrugcount As Integer
   
   cvwDrugs.Clear()
   For Each brand In drugs
      
      If chkNOPDF.value = True Then 
         If IsNull(brand!product_information_filename) Then
            cvwDrugs.Add(brand!pk_view, 0, empty_2020png)
            cvwDrugs[brand!pk_view][0] = brand!brand & " (" & brand!form & " - " & brand!strength & ")"
            cvwDrugs[brand!pk_view][1] = brand!generic
            cvwDrugs[brand!pk_view][2] = brand!strength & " " & brand!form
            Inc iDrugcount
         End If  
      Else
         If Not IsNull(brand!product_information_filename) Then 
            cvwDrugs.Add(brand!pk_view, 0, pic_pdf)
         Else
            cvwDrugs.Add(brand!pk_view, 0, empty_2020png)
         End If   
         cvwDrugs[brand!pk_view][0] = brand!brand & " (" & brand!form & " - " & brand!strength & ")"
         cvwDrugs[brand!pk_view][1] = brand!generic
         cvwDrugs[brand!pk_view][2] = brand!strength & " " & brand!form
         Inc iDrugcount
      End If   
   Next
   cvwDRugs.Columns[0].Width = cvwDrugs.width / 2
   lblDrugCount.text = Str(iDrugcount) & " drugs found for current search criteria"

End

Public Sub cvwDrugs_Select()
   
   Drug_Show() 
   
End

Public Sub cvwDrugs_Click()
   '
   '  Drug_Show()
   
End

Public Sub Drug_Show()
   
   Dim unit As Integer
   Dim drug As Collection
   
   Form_PDF.PBox.Visible = False 
   Vbox_EditArea_Outer.Enabled = False 
   bExit = True
   EditArea_Clear()
   EditArea_TextBoxes_SetReadOnly_Status(True)
   HBox_AddGeneric.Visible = False
   Gridview1.Mode = Select.None
   cvwDrugs.MoveCurrent
   drug = drugs[cvwDrugs.Item.key]
   txtBrand.text = drug!brand
   txtACTName.text = drug!atcname  
   Gridview1_Load(drug!generic, drug!strength)
   txtForm.text = drug!form
   Try txtCompany.text = drug!company
   If Not IsNull(drug!product_information_filename) Then
      Form_PDF.PBox.Visible = True  
      Product_Information_Show(drug!product_information_filename)
      txtPIFile.text = drug!product_information_filename
   Endif
   Try txtVolume.text = drug!amount
   If Not IsNull(drug!amount_unit) Then
      Select Case drug!amount_unit
         Case const.Units_gram
            cmbUnits.index = 0
         Case const.Units_millilitre
            cmbUnits.Index = 1
      End Select
   Endif
   If Not IsNull(drug!pack_size) Then
      txtPackSize.Text = drug!pack_size 
   Endif
   If drug!shared = True Then
      chkShareDrug.Value = True
   Else
      chkShareDrug.value = False 
   Endif
   If drug!fk_schedule <> 0 Then 
      cmbSchedules.Index = drug!fk_schedule
   Else
      cmbSchedules.Index = -1
   End If   
   txtComment.text = drug!free_comment
   fk_product = drug!fk_product
   fk_brand = drug!fk_brand
   atccode = drug!atccode
   fk_company = drug!fk_company
   fk_form = drug!fk_form
   fk_schedule = drug!fk_schedule
   EditArea_Notify_Data_Change(False)
   bExit = False
   
End

Public Sub Product_Information_Show(pdf_filename As String)
   '------------------------------------------
   'Attempt to show a product information PDF
   '-----------------------------------------   
   
   Try Form_PDF.Load_PDF(Product_Information_Dir &/ pdf_filename)
   If Error Then
      Message.Error("The requested product information could not be found")
   Else
      TabStrip1.index = 1
   Endif
   
End

Public Sub EditArea_Notify_Data_Change(flag As Boolean)
   
   If flag Then
      Vbox_EditArea_Outer.Padding = 1
      Vbox_EditArea_Outer.Background = Color.red
   Else
      Vbox_EditArea_Outer.Padding = 0
      Vbox_EditArea_Outer.Background = Color.white
   End If
   
End

Public Sub EditArea_Clear()
   
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Inner)   
   EditArea_Notify_Data_Change(False)
   
   gridview1.Clear()
   cmbUnits.index = -1
   cmbUnits.Enabled = False 'only enabled if text in txtVolume
   cmbSchedules.index = -1
   cmbSchedules.enabled = False
   With lblBrand
      .foreground = Color.Black
      .text = "Brand"
   End With
   listview2.Visible = False  
   Form_PDF.PBox.Visible = False 
   
End

Public Sub Drug_Clone()
   '-----------------------------------------------------------
   'Clones an existing drug to make entering a new brand easier
   '----------------------------------------------------------- 
   
   cvwDRugs.MoveCurrent()
   Clone = drugs[cvwDrugs.Item.key]
   fk_brand = Null
   Drug_New()
   
End

Public Sub Drug_New()
   
   modEditAreaHelpers.Help_Show("adding-a-new-drug.html", form_help)
   If IsNull(Clone) Then  
      EditArea_Clear()
      fk_company = Null
      fk_brand = Null
      atccode = Null
      fk_product = Null
      fk_form = 0          'an integer can't be null
      fk_schedule = 0
      gridview1.Rows.count = 0
      gridview1.Columns.count = 2
      HBox_GenericsGrid.Height = txtBrand.Height
      lblDrugCount.text = ""
   End If   
   EditArea_TextBoxes_SetReadOnly_Status(False)
   cvwDrugs.Clear()
   Hbox_AddGeneric.Visible = True  
   Gridview1.Mode = Select.Single
   cmbSchedules.enabled = True
   With lblBrand
      .foreground = Color.Red
      .text = "Add Brand"
   End With
   
   txtBrand.SetFocus()
   VBox_EditArea_Inner.Enabled = True
   Vbox_EditArea_Outer.Enabled = True
   
   Wait
   
End

Public Sub EditArea_TextBoxes_SetReadOnly_Status(bflag As Boolean)
   
   txtBrand.ReadOnly = bflag
   txtForm.ReadOnly = bflag
   txtPackSize.ReadOnly = bflag  
   txtComment.ReadOnly = bflag
   txtACTName.ReadOnly = bflag
   txtVolume.ReadOnly = bflag
   
End

Public Sub Drug_Edit()
   
   Vbox_EditArea_Outer.Enabled = True  
   EditArea_TextBoxes_SetReadOnly_Status(False)
   HBox_AddGeneric.Visible = True
   gridview1.Mode = Select.Single
   cmbSchedules.Enabled = True
   cmbPregnancyCategory.Enabled = True
   
End

Public Sub Drug_Form_Select()
   
   txtForm.text = listview2.Item.Text
   fk_form = listview2.Item.key 
   If txtForm.text = "injection" Then
      txtVolume.SetFocus()
   Else
      txtPackSize.SetFocus()
   Endif
   ' If drug_forms[listview2.Item.key]!volume_amount_required Then
   '    HBox_Volume.Enabled = True   
   '    txtVolume.SetFocus()
   ' Else
   '    HBox_Volume.Enabled = False  
   '    txtPackSize.SetFocus()
   ' End If   
   
End

Public Sub Drug_Forms_Get()
   
   Dim drug_form As Collection
   Dim drug_forms As Collection
   
   listview2.Clear()
   drug_forms = modPrescribingDBI.Formulations_Get(Trim(txtForm.text))  
   For Each drug_form In drug_forms
      listview2.Add(drug_form!pk, drug_form!form)
   Next
   If listview2.count Then
      With listview2
         .Visible = True
         .tag = txtForm
      End With
   End If   
   
End

Public Sub Save()
   '-----------------------------
   'Save a new user defined drug
   ' CREATE TABLE drugs.brand
   ' (
   '   fk_product uuid NOT NULL,
   '   fk_company character varying(3) NOT NULL,
   '   brand character varying(100) NOT NULL,
   '   price money, -- dispensed price for PBS drugs.
   '   from_pbs boolean NOT NULL DEFAULT false, -- true if the brand comes from the PBS database, allows the list to be easily reloaded...
   '   original_tga_text text, -- drugs imported from TGA database, the original label therein
   '   original_tga_code character varying(12), -- drugs imported from TGA database, their TGA code
   '   pk uuid NOT NULL DEFAULT uuid_generate_v4(),
   '   product_information_filename text,
   '   CONSTRAINT brand_pkey PRIMARY KEY (pk ),
   '  'brand!product_information_filename =    CONSTRAINT brand_fk_company_fkey FOREIGN KEY (fk_company)
   '       REFERENCES drugs.company (code) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT brand_fk_product_fkey FOREIGN KEY (fk_product)
   '       REFERENCES drugs.product(pk)MATCH SIMPLE
   '       
   ' CREATE TABLE drugs.pack
   ' (
   '   fk_product uuid,pk_viewpk_view
   '   amount double precision, -- the amount of drugs that have a fluid form
   '   amount_unit integer,
   '   pack_size integer DEFAULT 1, -- the number of identical units (bottles, vials, tablets, etc) within a pack
   '   CONSTRAINT pack_fk_product_fkey FOREIGN KEY (fk_product)
   '       REFERENCES drugs.product (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   'pk_viewpk_view
   '    Create TABLE drugs.product
   ' (
   '   pk uuid Not Null Default uuid_generate_v4(),
   '   atccode character varying(8) Not Null,
   '   generic text Not Null, - - full generic name In Lower - case.For compounds names separated by ";"
   '   salt text, - - If Not normally part Of generic name, the adjuvant salt
   '   fk_form integer Not Null, - - the form Of the drug
   '   strength text, - - the strength As A number followed by a unit.For compounds...
   '   salt_strength text, - - where a weight Of the full salt Is Listed(being heavier than the weight...
   '   original_pbs_name text, - - For a drug imported From the PBS Yellow Book database, the original...
   '   original_pbs_fs text, - - For a drug imported From the PBS Yellow Book database, the original...
   '   free_comment text, - - a FreIf Not Drug_Valid() Then Return  e - text comment on properties Of the product.For example For complex packages...
   '   updated_at timestamp without Time zone Default Now(),
   '   fk_schedule integer,pk_view
   '   shared boolean Default True, - - If True Then the user / surgery wants To share this drug With easygp - central
   '   poison smallint Default 4,
   ' 
   '-------------drug----------------  
   
   Dim generics_list As String
   Dim strengths_list As String 
   Dim fk_existing_product_key As String
   Dim fk_existing_brand_key As String
   Dim product As CRow
   Dim brand As CRow
   Dim brandname As String
   Dim pack As Collection
   '--------------------------------------------------------------------------------------------------
   'First save the product to product table
   'Saving a new drug has multiple nuances around the generic composition
   'We must make the user choose from existing generics, sometimes, to get the composition of the drug
   'the user could have taken two generics from the popup list and deleted one, then selected another
   'from the popup list to make the compound generic in this new drug
   'This compound generic may exist in the database linked to a particular form, so must test for this
   '--------------------------------------------------------------------------------------------------
   If Vbox_EditArea_Outer.Padding = 0 Then Return
   Gridview_Unload(ByRef generics_list, ByRef strengths_list)
   If Trim(txtBrand.Text) = "" Then 
      txtBrand.SetFocus()
      Return
   End If  
   If fk_company = "" Then     'some of our own 'recipies', won't have a company
      If Message.Question("Continue to save without allocating a company for this drug?", "Yes", "No") = 2 Then 
         txtCompany.SetFocus()
         Return 
      Endif
   End If   
   If atccode = "" Then
      txtACTName.SetFocus()
      Return
   End If   
   If Replace(generics_list, ";", "") = "" Then
      txtFindGenericComponent.SetFocus
      Return
   End If   
   
   If fk_form = 0 Then
      txtForm.SetFocus()
      Return 
   End If         
   If Trim(txtPackSize.text) = "" Then
      txtPackSize.SetFocus()
      Return
   Endif
   
   product = New CRow
   '------------------------------------------------------------------------------------------------------------
   'Current logic flaw here.
   'User may have saved a product with certain generics > realised they made a mistake and go back to correct it
   '------------------------------------------------------------------------------------------------------------
   fk_existing_product_key = modPrescribingDBI.Product_Check_Exists(atccode, generics_list, strengths_list, fk_form)
   If Not IsNull(fk_existing_product_key) Then
      product.put_unchanged(fk_existing_product_key, "fk_product")
   Endif
   If chkShareDrug.value = True Then
      product!shared = True
      '   modDBConnect.startStoring()
   Else
      product!shared = False  
   Endif
   If fk_schedule <> 0 Then product!fk_schedule = fk_schedule
   product!generic = generics_list                                                  'will always have a generic name
   If strengths_list <> "" Then product!strength = strengths_list                        'may not have a strength
   product!fk_form = fk_form   
   product!atccode = atccode 
   If Trim(txtComment.text) <> "" Then product!free_comment = Trim(txtComment.Text)
   product.Save("drugs.product", "fk_product")
   fk_existing_product_key = product!fk_product   
   'fixme put in schedule and poison
   
   brand = New CRow 
   brandname = Trim$(Upper$(txtBrand.Text))
   If IsNull(fk_brand) Then
      fk_existing_brand_key = modPrescribingDBI.Brand_Check_Exists(fk_existing_product_key, brandname)
   Else
      Print fk_brand 
      fk_existing_brand_key = fk_brand
   Endif
   brand!brand = brandname
   If IsNull(fk_existing_brand_key) Then
    
      brand!fk_product = fk_existing_product_key
   Else
      brand.put_unchanged(fk_existing_brand_key, "fk_brand")
      brand!fk_product = fk_existing_product_key
   Endif
   If fk_company <> "" Then brand!fk_company = fk_company                           'may not have a company                                               'must always have a brand or 'our brand'
   If Trim(txtPIFile.text) <> "" Then brand!product_information_filename = Trim(txtPIFile.text) 'may not have PI
   brand.Save("drugs.brand", "fk_brand")
   
   pack = New Collection 
   pack!fk_product = fk_existing_product_key                                             'must always have an fk_product
   If Trim(txtVolume.text) <> "" Then pack!amount = Trim(txtVolume.text)            'often dosen't have an amount
   If cmbUnits.Index <> -1 Then
      Select Case cmbUnits.Index
         Case 0        
            pack!amount_unit = const.Units_gram
         Case 1
            pack!amount_unit = const.Units_millilitre
      End Select
   Endif
   pack!pack_size = Val(txtPackSize.text)                                           'must have a pack sizze
   modPrescribingDBI.Save_Pack(pack)
   If chkShareDrug.Value Then
      modUtil.SendMailToDeveloper("new drug", modDBConnect.stopStoring())
   Endif
   modDBConnect.CommitTrans()
   EditArea_TextBoxes_SetReadOnly_Status(False)
   EditArea_Notify_Data_Change(False)
   Reload()
   txtSearch.SetFocus
   
End

Public Function Drug_Valid() As Boolean
   '------------------------------------------
   'Returns true if adequate drug information
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "new"
         Clone = Null
         Drug_New()
      Case "save"
         Save()
      Case "refresh"
         Reload()
   End Select
   
End

Public Sub EditArea_TextBox_Change()
   
   If bExit Then Return 
   If Trim(Last.text) = "" Then listview2.Visible = False 
   Select Case Last.tag
      Case "amount"
         If Trim(Last.text) <> "" Then 
            cmbUnits.index = -1
            cmbUnits.Enabled = True   
         Else
            cmbUnits.Enabled = False
         Endif
         
      Case "brand"
         bExit = True
         Last.text = UCase(Last.text)
         ' Try txtPIFile.text = Lower(Left(Replace(Last.text, "-", ""), Min(Len(Last.text), 4)))
         bExit = False  
      Case "find generic component"
         If Len(Last.text) = "" Then
            listview2.Visible = False  
         End If  
   End Select
   EditArea_Notify_Data_Change(True)
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)   
   ListView2.Visible = False  
   Select Case Last.tag                         
      Case "form", "atc", "company", "find generic component", "product information"
         With listview2                        
            .top = Last.Parent.Parent.top + Last.Parent.height 
            .Left = Last.Parent.Left + VBox_EditArea_Inner.padding
            .width = Last.width   
            .Visible = False         
            .height = VBox_EditArea_Inner.height - Last.Parent.Parent.top - Last.height            
            .Raise                             
         End With  
   End Select                                   
   If Last.tag = "product information" Then
      Try Product_Information_Filename_Get()
   Endif
   
End  

Public Sub EditArea_TextBox_LostFocus()
   
   Last.Background = Color.White
   If Last.tag = "atc" Or Last.tag = "form" Or Last.tag = "product information" Or Last.tag = "company" Or Last.tag = "find generic component" Then Return 
   ListView2.Visible = False  
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   If bexit Then Return 
   If Not EditAreaTextbox_ExcludeKeys(key.code, Last.tag) Then    'validate key input first
      Stop Event                                                  'no good? don't show key output
      Return
   End If
   Select Case Key.Code
      Case key.Down
         If listview2.Visible Then
            listview2.MoveFirst
            listview2.Item.Selected = True
            listview2.SetFocus()            
         End If 
      Case key.Return, key.Tab
         
         Select Case Last.tag
            Case "brand"
               If Hbox_AddGeneric.Visible Then
                  txtPIFile.SetFocus()
               Endif
            Case "edit grid"
               txtFindGenericComponent.Clear()
               txtFindGenericComponent.SetFocus()
               gridview1[gridview1.row, gridview1.Column].text = txtEditGrid.Text
               Last.Visible = False 
            Case "product information"
               If Hbox_AddGeneric.Visible Then
                  txtCompany.SetFocus()
               Endif
            Case "company"
               If Hbox_AddGeneric.Visible Then
                  txtFindGenericComponent.SetFocus()
               Endif
            Case "find generic component"
               txtACTName.SetFocus()
            Case "strength"
               txtForm.SetFocus()
            Case "amount"
               cmbUnits.SetFocus()
            Case "form"
               If Last.text = "injection" Then
                  txtVolume.SetFocus()
               Else
                  txtPackSize.SetFocus()
               Endif
               
            Case "pack size"
               txtComment.SetFocus()
            Case "comment"
               tbSave.SetFocus()  
            Case "atc"
               txtPackSize.SetFocus() 
            Case "strength add"
               cmbUnits.SetFocus()
         End Select
         
   End Select
   
End Sub

Public Sub EditArea_TextBox_KeyRelease()
   
   Select Case Last.tag
      Case "find generic component"
         Generic_Names_Get()
      Case "form"
         Drug_Forms_Get()    
      Case "product information"
         Try Product_Information_Filename_Get()
      Case "company"
         Company_Get()
      Case "atc"
         ACT_Codes_Get()
   End Select
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Dim bKeyValid As Boolean
   
   Select Case tag
      Case "pack size", "strength new"
         bKeyValid = modUtil.AllowKeys(Const.AllowKeys_NumbersOnly, keycode)
      Case Else  
         bKeyValid = True  
   End Select  
   Return bKeyValid
   
End

Public Sub listview2_KeyPress()
   
   If key.code = key.return Then
      listview2_DblClick
   Endif
   
End Sub

Public Sub Listview2_Select()
   
   '-------------------------------------------------
   'User has clicked on one row of the listview2 popup
   'contains eg list of product information files
   '--------------------------------------------------
   Select Case Last.tag.tag
      Case "product information"
         Try Product_Information_Show(listview2.Item.Text)
   End Select
   
End

Public Sub listview2_DblClick()
   
   ListView2.MoveCurrent
   
   Select Case Last.tag.tag
      Case "form"
         Drug_Form_Select()
      Case "company"
         Company_Select()
      Case "find generic component"
         Generic_Names_Select()
      Case "product information"
         Product_Information_Select()
      Case "atc"
         ACT_Code_Select()
   End Select
   listview2.Visible = False  
   
End

Public Sub ListView1_Menu()    
   
   If Last.count Then mnuGenerics.Popup()
   
End

Public Sub mnuGenerics_Click()
   
   Select Case Last.tag
      Case "edit"
         modUtil.NotImplemented("Editing a generic component")
      Case "delete"
         Generic_Delete()         
   End Select
   
End

Public Sub tbAddGeneric_KeyPress()
   
   If key.code = key.return Then
      tbAddGeneric_Click()
   End If  
   
End

Public Sub tbAddGeneric_Click()
   '---------------------------------------------------
   'User is creating a new generic, not in the database
   '---------------------------------------------------
   
   If Trim(txtFindGenericComponent.text) = "" Then Return 
   Inc Gridview1.Rows.Count
   gridview1[Gridview1.Rows.Count - 1, 0].Text = Trim(txtFindGenericComponent.text)
   HBox_GenericsGrid.Height = (txtEditGrid.height + 1) * gridview1.Rows.count
   Gridview1.row = gridview1.Rows.count - 1
   Gridview1.column = 1
   Gridview1_DblClick()
   
End

Public Sub txtSearch_KeyPress()
   '---------------------------------------------------------------------------
   'User searching for existing drugs ?wants to scroll down onto the drugs list
   '---------------------------------------------------------------------------
   
   If key.code = key.down Then
      If cvwDrugs.count Then
         cvwDrugs.MoveFirst
         cvwdrugs.SetFocus
         
      Endif
   Endif
   
End

Public Sub txtSearch_KeyRelease()
   '-----------------------------------------------
   'Show all existing drugs for the txtSearch text
   '-----------------------------------------------  
   
   Reload()
   
End

Public Sub txtSearch_GotFocus()
   '------------------------------------------------------------------------------------------
   'User has clicked on the textbox to search for drug to view its details, i.e existing drugs
   '------------------------------------------------------------------------------------------   
   ' EditArea_Clear()
   ' EditArea_TextBoxes_SetReadOnly_Status(True)
   
   With lblBrand
      .foreground = Color.Black
      .text = "Brand"
   End With
   
End

Public Sub EditArea_Combo_KeyPress()
   
   Select Case Last.tag
      Case "units"
         If key.code = key.return Then
            txtPackSize.SetFocus()
         End If   
   End Select
   
End

Public Sub HSplit_DataEntry_Resize()
   
   If bExit Then Return 
   listview2.width = txtFindGenericComponent.Width
   
End

Public Sub EditArea_Combo_Click()
   
   If bexit = True Or Last.index = -1 Then Return 
   Select Case Last.tag
      Case "units"
      Case "pregnancy category"
      Case "schedule'"
         fk_schedule = schedules[Last.Item.key]
   End Select
   If Last.tag = "units" Then
      txtPackSize.SetFocus()
   Endif
   EditArea_Notify_Data_Change(True)
   
End

Public Sub EditArea_CheckBox_Click()
   
   Select Case Last.tag
      Case "permitted in sport"
      Case "share drug"  
      Case "makes drowsy"
   End Select
   EditArea_Notify_Data_Change(True)
   
End

Public Sub cvwDrugs_Menu()
   
   If Last.count Then mnuDrugs.Popup()
   
End

Public Sub mnuDrugs_Click()
   
   Select Case Last.tag
      Case "edit"
         Drug_Edit()
      Case "delete"
         modUtil.NotImplemented("Deleting a drug")
      Case "change fonts"
         modUtil.Columnview_SetFont(cvwDrugs, "Drugs")
      Case "clone"
         Drug_Clone()
   End Select
   
End

Public Sub Gridview1_Select()
   
   onrow = gridview1.row
   
End

Public Sub VSplit_DataEntry_Resize()
   
   Dim i As Integer
   
   txtEditGrid.Height = txtBrand.Height
   For i = 0 To gridview1.Rows.Count - 1
      gridview1.Rows[i].height = txtEditGrid.Height
   Next
   HBox_GenericsGrid.Height = 5 + gridview1.Rows.count * txtEditGrid.Height
   
End

Public Sub chkNOPDF_Click()

   If Trim(txtSearch.text) = "" Then
      txtSearch.text = "%"
   Endif
   
   Reload()
   
End
