' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry, Dr. Ian Haywood

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

' ------------------------------------------------------------------------------
' A module to allow viewing of a drugs Product Information, or to add a new drug
'------------------------------------------------------------------------------
'
'Anatomical Therapeutic Chemical Classification System:
'See:http://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System
' First level
'
' The first level of the code indicates the anatomical main group and consists of one letter. There are 14 main groups:[3]
' Code    Contents
' A    Alimentary tract and metabolism
' B    Blood and blood forming organs
' C    Cardiovascular system
' D    Dermatologicals
' G    Genito-urinary system and sex hormones
' H    Systemic hormonal preparations, excluding sex hormones and insulins
' J    Antiinfectives for systemic use
' L    Antineoplastic and immunomodulating agents
' M    Musculo-skeletal system
' N    Nervous system
' P    Antiparasitic products, insecticides and repellents
' R    Respiratory system
' S    Sensory organs
' V    VariousPrivate pic_printed As Picture = Picture["icons/12/green_dot.png"]
'
' Second level
'
' The second level of the code indicates the therapeutic main group and consists of two digits.
'
' Example: C03 Diuretics
' Third level
' cvwDrugs[brand!pk_view][1]
' The third level of the code indicates the therapeutic/pharmacological subgroup and consists of one letter.
'
' Example: C03C High-ceiling diuretics
' Fourth level
'           Patients_Get()
' The fourth level of the code indicates the chemical/therapeutic/pharmacological subgroup and consists of one letter.
'   Select Case ActiveWindow_Get_Name()
' Example: C03CA Sulfonamides
' Fifth level
'
' The fifth level of the code indicates the chemical substance and consists of two digits.
' cvwDrugs[brand!pk_view][1]
' Example: C03CA01 Furosemide
'
' FIXME: implement schedule/poison in save + edit_area_key_validate for eg numbers for packs
'        check if can put numbers/decimal validation on txtvolume if if ever need et 1mg/100ml
' BUGS : Save() will crash if an generic exists
'      : Gridview1_Load() iWidestGenericName not setting the column 0 to correct width
'----------------------------------------------------------------------------------------------------------------------
Private pic_pdf As Picture = Picture["icons/20/pdf2020.png"]
Private empty_2020png As Picture = Picture["icons/20/empty2020.png"]
Private Product_Information_Dir As String
Private $hEditor As Object
Private timer_Count As Integer
Private iTop As Integer
Private form_help As FHtmlViewer
Private Default_Zoom_Help As Integer
Private Default_Zoom_PI As Integer
Private Help_Dir As String
Private fk_brand As Variant
Private fk_product As Variant
Private fk_company As Variant
Private fk_form As Variant
Private fk_schedule As Variant
Private atccode As String
Private drugs As Collection
Private schedules As Collection
Private pregnancy_categories As Collection
Private bExit As Boolean
Private Form_PDF As FPdf
Private generics As Collection
Private onrow As Integer
Private Clone As Collection
Private CopyPDFName As String     'buffer to hold a copied pi file name see mnuDRugs_Click
Private bLinkPDF_Drug As Boolean  'if true user is linking an existing drug to a pdf
Private BrandsHavePDF As Collection
Private PI_Filenames As Collection
Private iSearchMode As Integer
Private Const cSearchMode_Generic As Integer = 1
Private Const cSearchMode_ATC As Integer = 2
Private Const cSearchMode_None As Integer = 0
Private Const cSearchMode_Existing As Integer = 3
Private itimer_Count As Integer

Public Sub Form_Open()

   Init()

End

Public Sub Form_KeyPress()

   Dim CtrlDown As Boolean
   Dim FnDown As Boolean
   Dim ShiftDown As Boolean
   Dim AltDown As Boolean

   If key.code = Key.f12 Then
      Save()
   Endif

   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
         Case Asc("=")
            If TabStrip1.index = 0 Then
               Try form_help.Zoom_In()
            Else
               Try Form_PDF.Zoom_In()
            Endif

         Case Asc("-")
            If TabStrip1.index = 0 Then
               Try form_help.Zoom_Out
            Else
               Try Form_PDF.Zoom_Out()
            Endif

      End Select
   End If

End

Public Sub Settings_Save()

   If VSplit_DataEntry.Layout[1] <> 0 Then 'only one control in the split
      Settings["FDrugMaintenance/VSplit_DataEntry.Layout"] = VSplit_DataEntry.Layout
   End If
   Settings["FDrugMaintenance/HSplit_DataEntry.Layout"] = HSplit_DataEntry.Layout
   Settings["FDrugMaintenance/Form_PDF.Zoom"] = Form_PDF.CurrentZoom

End

Private Sub Settings_Load()

   HSplit_DataEntry.Layout = Settings["FDrugMaintenance/HSplit_DataEntry.Layout", modUtilGUI.HSplit([803, 884])]
   VSplit_DataEntry.Layout = Settings["FDrugMaintenance/VSplit_DataEntry.Layout", modUtilGUI.VSplit([626, 313])]
   cvwDrugs.Font = Font[Settings["FDrugMaintenance/cvwDrugs.font"], "DejaVu Sans,9"]
   Form_PDF.CurrentZoom = Settings["FDrugMaintenance/Form_PDF.Zoom"]

End

Public Sub Init()

   EditArea_TextBoxes_SetReadOnly_Status(False)
   lblMeasure.text = "   Volume (Liquids only)   "
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Inner, lblMeasure)
   With form_help = New FHtmlViewer(Vbox_Help)
      .tbWebBrowserZoomIn.Visible = True
      .tbWebBrowserZoomOut.Visible = True
      .Parent_Form_Set("Drugs")
   End With
   form_help.Help_Show("adding-a-new-drug.html")
   cmbUnits.Add("grams")
   cmbUnits.Add("mls")
   With cvwDrugs
      .Columns.count = 2
      .Columns[0].text = "Brand Name"
      .Columns[1].text = "Generic Name"
   End With
   With Form_PDF = New (FPDF, VBox_PDF)
      .btZoomIn.Visible = True
      .btZoomOut.Visible = True
      .BtPrint.Visible = True
      .Init_Drugs_Browser()
   End With
   With gvwGenerics
      .Columns.Count = 4
      .Columns[0].width = (gvwGenerics.width - 78) / 2
      .Columns[2].width = (gvwGenerics.width - 78) / 2
      .Columns[3].width = 78
      .columns[0].text = "Generic Name"
      .Columns[1].text = "Strength"
      .Rows.count = 1
   End With
   '  HBox_GenericsGrid.Height = HBox_AddGeneric.Height 'the former is not expandable so set its base height
   cmbUnits.width = lblNumberOfPacks.width
   PI_Filenames = modPrescribingDBI.Product_Information_files_Get()
   schedules = modPrescribingDBI.Schedules_Get()
   schedules = modUtil.Copy_Collection_Keyed_Sequentially(schedules)
   modUtilGUI.LoadCombo(cmbSchedules, Schedules, "schedule")
   lblMeasure.text = "Prescription Only Medicine OR Prescription Animal Remedy (S4)   "
   cmbSchedules.width = lblMeasure.Width
   Product_Information_Dir = modAdminDBI.Config_Get("product_information_directory", "", Null, modDBConnect.currentUser!fk_clinic)
   txtEditGrid.Height = txtBrand.Height
   bExit = True
   Try Settings_Load() 'prevent the Hsplit1_resize event
   Brands_With_Filenames_Refresh()
   bExit = False
   Reload()

End Sub

Public Sub PDFs_Without_Brand_Display()

   Dim sFile As String
   Dim x As Integer

   With cvwUnallocatedPDFs
      .clear
      .Columns.count = 1
   End With
   VBox_UnallocatedPDFs.Visible = True

   If IsDir(Product_Information_Dir) Then
      For Each sFile In Dir(Product_Information_Dir, "*.pdf")
         If Not BrandsHavePDF.Exist(sfile) Then
            If txtFilterFilename.text <> "" Then
               If InStr(sFile, Trim(txtFilterFilename.text)) Then
                  cvwUnallocatedPDFs.Add(x, 0)
                  cvwUnallocatedPDFs[x][0] = sfile
               Endif
            Else
               cvwUnallocatedPDFs.Add(x, 0)
               cvwUnallocatedPDFs[x][0] = sfile
            End If
            Inc x
         Endif
      Next
      lblDrugCount.text = Str(BrandsHavePDF.COUNT) & " pdf's unallocate"
   Else
      Message.Info("Sorry, could not find the product information directory")
   End If

End

Public Sub Reload()

   Inc Application.Busy
   Timer1.Stop
   lblDrugCount.text = ""
   cvwDrugs.Clear()
   EditArea_Clear()
   Wait                       'force this label to clear
   If Trim(txtSearch.text) <> "" Then
      drugs = modPrescribingDBI.Brands_Get(Trim(modUtil.StripExtraBlanks(txtSearch.text)), Null, 100) 'FIXME RENAME
      If VBox_UnallocatedPDFs.Visible Then
         If drugs.count = 0 Then
            drugs = modPrescribingDBI.Brands_Get(Trim(modUtil.StripExtraBlanks(Left(cvwUnallocatedPDFs.Item.text, 3))), Null, 100)
         Endif
      Endif
      Drugs_Fill_List(drugs)
   End If
   Dec Application.Busy

End

Public Sub ACT_Codes_Get()
   '---------------------------------------------------------------------------------------
   'find an Anatomic Therapeutic Chemical(ATC)code, see the header of this file for details
   '---------------------------------------------------------------------------------------

   Dim i As Collection

   listview2.Clear
   For Each i In modPrescribingDBI.ACT_Codes_Get(Trim(txtACTName.text))
      listview2.add(i!pk, i!atcname)
   Next
   If listview2.Count Then
      With listview2
         .Visible = True
         .Raise
         .tag = txtACTName
      End With
   Endif

End

Public Sub ACT_Code_Select()

   listview2.MoveCurrent
   txtACTName.text = listview2.Item.Text
   atccode = listview2.Item.Key
   txtForm.SetFocus()
Catch
   Return

End

Public Sub Company_Get()
   '---------------------------------------------
   'Gets a collection of pharmaceutical companies
   '---------------------------------------------

   Dim companies As Collection
   Dim company As Collection

   Companies = modPrescribingDBI.Companies_Get(Trim(txtCompany.text))
   ListView2.Clear()
   For Each company In companies
      listview2.Add(company!code, company!company)
   Next
   If listview2.count Then
      With listview2
         .Visible = True
         .tag = txtCompany
      End With
   Endif

End

Public Sub Company_Select()
   '--------------------------------------------------------
   'User is selecting  a pharmaceutical company for the drug
   '--------------------------------------------------------

   listview2.MoveCurrent
   txtCompany.text = listview2.Item.Text
   fk_company = listview2.Item.Key
   txtFindGenericComponent.SetFocus()
Catch
   Return

End

Public Sub gvwGenerics_Scroll()

   If gvwGenerics.row = -1 Then Return
   Try Move_EditingTextBox

End

Public Sub GridRows_Init()
   '-----------------------------------------------
   'fills the gridrows collection if generic exists
   '------------------------------------------------

End

Public Sub Gridview_Unload(ByRef generics As String, ByRef strengths As String)
   ' Refresh generics and strengths from the grid

   Dim i As Integer

   generics = ""
   strengths = ""
   For i = 0 To gvwGenerics.Rows.Max
      If i <> 0 Then
         generics &= ";"
         strengths &= "-"
      Endif
      generics &= gvwGenerics[i, 0].Text
      strengths &= gvwGenerics[i, 1].Text
   Next

End

Public Sub gvwGenerics_Load(generics As String, strengths As String)
   '-----------------------------------------------
   'Refresh the grid showing the generic components from the respective database strings
   '-----------------------------------------------

   Dim gridrow As Integer
   Dim generic_components As String[]
   Dim generic_strengths As String[]
   Dim iWidestGenericName As Integer
   Dim iWidestStrength As Integer

   gvwGenerics.Columns.Count = 2
   If IsNull(generics) Then Return
   If generics = "" Then Return
   generic_components = Split(generics, ";")
   generic_strengths = Split(strengths, "-")
   gvwGenerics.rows.Count = generic_components.Count
   For gridrow = 0 To generic_components.Max
      gvwGenerics[gridrow, 0].Text = generic_components[gridrow]
      Try gvwGenerics[gridrow, 1].Text = generic_strengths[gridrow] 'there may be no strengths
      lblMeasure.text = generic_components[gridrow]
      Wait                                                  'no wait = no gui update, sorry....... the grid col widths won't change
      Try iWidestGenericName = Max(lblMeasure.width, iWidestGenericName)
   Next
   gvwGenerics.Columns[0].width = iWidestGenericName
   Wait                                             'no wait = no gui update, sorry....... the grid col widths won't change
   ' HBox_GenericsGrid.height = gvwGenerics.rows.Count * txtEditGrid.height + 5

End

Public Sub gvwGenerics_DblClick()
   '-----------------------------------------------------
   'User has double clicked on a cell in the grid to edit
   '-------------------------------------------------------------------

   Show_EditingTextBox()

End

Public Sub Show_EditingTextBox()
   '--------------------------------------------------------------------------------------------
   'Displays the editing textbox
   'Copied some of this code from the gambas IDE so can't remmber reason for use of the hEditor
   '--------------------------------------------------------------------------------------------

   Dim sAppointment As String  'the contents of the grid column with patients
   Dim hEditor As Object
   Dim gridcol As Integer
   Dim gridrow As Integer

   gridcol = gvwGenerics.Column
   gridrow = gvwGenerics.Row
   Print gvwGenerics.Width
   txtEditGrid.Width = gvwGenerics.Columns[1].width
   itop = gvwGenerics.top + (gvwGenerics.Rows[0].height * (gridrow + 1))
   ' itop = gvwGenerics.top + (gvwGenerics.Rows[0].height * +1)
   hEditor = txtEditGrid
   $hEditor = hEditor
   Try Move_EditingTextBox
   $hEditor.Show
   txtEditGrid.Visible = True
   $hEditor.SetFocus
   $hEditor = txtEditGrid
   txtEditGrid.SelectAll
   txtEditGrid.text = gvwGenerics[gridrow, gridcol].Text
   HSplit_DataEntry_Resize() 'snaps the editor textbox to proper width, don't know why but setting this in code doesn't work
   txtEditGrid.SetFocus()
Catch
   Return

End

Public Sub Move_EditingTextBox()
   '---------------------------------------------------------------------------------
   'Sub Move ( X As Integer, Y As Integer [ , Width As Integer, Height As Integer ] )
   'here, height = ((iLastRow - iFirstRow) + 1) * irowheight + 5)
   'If single slot selected and being edited then this could be equivalent of
   '1 row = normal apptor multiple rows, so use the actual grid cell  height,
   'otherwise calculate the textbox height on basis of selected rows.
   '---------------------------------------------------------------------------------

   Dim iW As Integer
   Dim iheight As Integer
   Dim left_header_width As Integer
   Dim colpos As Integer
   Dim gridcol As Integer
   Dim gridrow As Integer

   gridcol = gvwGenerics.Column
   gridrow = gvwGenerics.Row
   colpos = gvwGenerics.Columns[gridcol].Left
   If IsNull($hEditor) Or gvwGenerics.Row = -1 Then Return 'FIXME BAD BAD BUGFIX ?WHY GOING -1

   iheight = gvwGenerics.Rows[gridrow].height ' + 5
   With gvwGenerics[gvwGenerics.Row, 1]
      '  txtEditGrid.Move(gridview1.X + (gridview1.width - gridview1.Columns[0].width - gridview1.Columns[1].width - 3) - gridview1.ScrollX, gridview1.Y + itop + 1 - gridview1.ScrollY, .Width + 5, iheight)
      txtEditGrid.Move(gvwGenerics.X + colpos - gvwGenerics.ScrollX, gvwGenerics.Y + itop + 1 - gvwGenerics.ScrollY, txtEditGrid.width + 5, iheight)

   End With

End

Public Sub Generic_Names_Get()
   '---------------------------------------------------------------------
   'Searches the existing generics in the database, presents list to user
   '---------------------------------------------------------------------

   Dim generic As Collection

   If Trim(txtFindGenericComponent.text) = "" Then Return
   generics = modPrescribingDBI.Generic_Names_Get(Trim(txtFindGenericComponent.text))
   ListView2.Clear
   For Each generic In generics
      ListView2.Add(generic!pk, generic!generic & " " & generic!strength)
   Next
   If ListView2.count Then
      With ListView2
         .Visible = True
         .tag = txtFindGenericComponent
      End With
   Else
      listview2.Visible = False
   End If

End

Public Sub Generic_Names_Select()
   '---------------------------------------------------------------------------------------------
   'User is selecting an existing generic, this may be compound e.g paracetamol;codeine phosphate
   'Check through existing generics in the grid and don't insert a duplicated name
   'otherwise, increment the grid rowcount, insert the new generic and/or strength
   'set the generic name column to the widest generic name in the grid
   '---------------------------------------------------------------------------------------------

   Dim irow As Integer
   Dim generic As String
   Dim bits As New String[]
   Dim generic_components As New Collection
   Dim generic_component As Collection
   Dim strength As String
   Dim strengths As New String[]
   Dim iWidestGenericName As Integer
   Dim bGenericExists As Boolean
   Dim x As Integer

   listview2.MoveCurrent()
   bExit = True
   txtFindGenericComponent.text = ""
   bExit = False
   bits = Split(generics[ListView2.Item.key]!generic, ";")                  'split new components
   strengths = Split(generics[ListView2.Item.key]!strength, "-")
   For x = 0 To bits.Count - 1
      generic_component = New Collection
      generic_component!generic = bits[x]
      Try generic_component!strength = strengths[x]
      generic_components.Add(generic_component, x)
   Next

   'first see if the generic already exists in a row of the grid
   For Each generic_component In generic_components
      For irow = 0 To gvwGenerics.rows.count - 1
         If Lower(gvwGenerics[irow, 0].text) = Lower(Trim(generic_component!generic)) Then
            generic_component!exists = True
         Endif
         lblMeasure.text = gvwGenerics[irow, 0].text
         iWidestGenericName = Max(lblMeasure.width, iWidestGenericName)
      Next
      'generic doesn't exist in the grid, add a row
      If Not generic_component!exists Then
         Inc gvwGenerics.Rows.count
         gvwGenerics[gvwGenerics.Rows.count - 1, 0].text = generic_component!generic
         lblMeasure.text = gvwGenerics[gvwGenerics.Rows.count - 1, 0].text
         iWidestGenericName = Max(lblMeasure.width, iWidestGenericName)
         Try gvwGenerics[gvwGenerics.Rows.count - 1, 1].text = generic_component!strength            'some multiple generics in the db eg 4 generics, there is not the corresponding number of strengths.
      End If
   Next
   gvwGenerics.columns[0].width = iWidestGenericName
   txtFindGenericComponent.SetFocus()

End

Public Sub Generic_Delete()
   '----------------------------------------------------------
   'Deletes one of the generic components of a user-added drug
   '----------------------------------------------------------

   If gvwGenerics.row = -1 Then Return
   gvwGenerics.Rows.Remove(onrow)

End

Public Sub Product_Information_Select()

   txtPIFile.text = ListView2.Item.text

   If Hbox_AddGeneric.Visible Then txtCompany.SetFocus()

End

Public Sub Product_Information_Filename_Get()
   '----------------------------------------------------
   'Attempts to find a matching product information file
   '----------------------------------------------------

   Dim sfile As String
   Dim brand As String

   If Product_Information_Dir = "" Then
      Message.Info("The product information directory could not be found.\n\nPlease check with your system adminstrator.")
   Endif

   If Trim(txtPIFile.text) = "" Then
      brand = Trim(Lower(txtBrand.Text))
      '--------------------------------------------------------
      'first try for a direct match e.g q-vax becomes q-vax.pdf
      '--------------------------------------------------------
      For Each sFile In Dir(Product_Information_Dir, "*.*")
         If Lower(sFile) = Lower(brand) & ".pdf" Then
            Product_Information_Show(sfile)
            txtPIFile.text = sFile
            txtCompany.SetFocus()
            Return
         Endif
      Next
      '-----------------------------------------------
      'ok, failed, try stripping out blanks and dashes
      '-----------------------------------------------
      If InStr(brand, " ") Then
         brand = Left(brand, InStr(brand, " ") - 1)
      Endif
      If InStr(txtBrand.text, "-") Then
         brand = Left(brand, InStr(brand, "-") - 1)
      Endif
      listview2.Clear()
      If Right(Trim(txtPIFile.text), 4) <> ".pdf" Then                          'if don't have an existing pdf
         For Each sFile In Dir(Product_Information_Dir, "*.*")                  'list all files in PI directory like the brandname
            If InStr(Lower(sFile), brand) Then
               Print sFile
               listview2.Add(ListView2.count, sFile)
            Endif
         Next
         With listview2
            If .count Then
               .Visible = True
               .tag = txtPIFile
               .Raise
            End If
         End With
         Wait
      End If
   Else

      Try Form_PDF.Load_PDF(Product_Information_Dir &/ Trim(txtPIFile.text), True) 'suppress any error popup dialog
   End If

End

Public Sub Drugs_Fill_List(drugs As Collection)

   Dim brand As Collection
   Dim iDrugcount As Integer

   If drugs.count = 0 Then Return
   cvwDrugs.Clear()
   For Each brand In drugs
      If rbDrugsNoPI.value = True Then
         If IsNull(brand!product_information_filename) Then
            cvwDrugs.Add(brand!pk_view, 0, empty_2020png)
            cvwDrugs_Showbrand_details(brand)
            cvwDrugs[brand!pk_view][1] = brand!generic
            cvwDrugs[brand!pk_view][2] = brand!strength & " " & brand!form
            Inc iDrugcount
         End If
      Else
         If Not IsNull(brand!product_information_filename) Then
            cvwDrugs.Add(brand!pk_view, 0, pic_pdf)
         Else
            cvwDrugs.Add(brand!pk_view, 0, empty_2020png)
         End If
         cvwDrugs_Showbrand_details(brand)
         cvwDrugs[brand!pk_view][1] = brand!generic
         cvwDrugs[brand!pk_view][2] = brand!strength & " " & brand!form
         Inc iDrugcount
      End If
   Next
   cvwDRugs.Columns[0].Width = cvwDrugs.width / 2  'FIXME dosn't work ?why
   lblDrugCount.text = Str(iDrugcount) & " drugs found for current search criteria"

End

Public Sub cvwDrugs_Showbrand_details(brand As Collection)

   cvwDrugs[brand!pk_view][0] = brand!brand
   If brand!form <> "other" Then
      cvwDrugs[brand!pk_view][0] &= " (" & brand!form
      '  Endif
      If Not IsNull(brand!strength) Then
         cvwDrugs[brand!pk_view][0] &= " - " & brand!strength & ")"
      Else
         cvwDrugs[brand!pk_view][0] &= ")"
      End If
   End If

End

Public Sub cvwDrugs_Click()

   If cvwDRugs.count = 0 Then Return
   Drug_Show()

End

Public Sub Drug_Show()

   Dim drug As Collection
   Dim sProductInformationFilename As String

   If VBox_UnallocatedPDFs.Visible = True Then Return
   Form_PDF.PBox.Visible = False
   Vbox_EditArea_Outer.Enabled = False
   bExit = True
   EditArea_Clear()
   EditArea_TextBoxes_SetReadOnly_Status(True)
   HBox_AddGeneric.Visible = False
   gvwGenerics.Mode = Select.None
   cvwDrugs.MoveCurrent
   drug = drugs[cvwDrugs.Item.key]
   txtBrand.text = drug!brand
   txtACTName.text = drug!atcname
   gvwGenerics_Load(drug!generic, drug!strength)
   txtForm.text = drug!form
   Try txtCompany.text = drug!company
   If Not IsNull(drug!product_information_filename) Then
      sProductInformationFilename = drug!product_information_filename
   Else If Not IsNull(drug!product_information_filename_user) Then
      sProductInformationFilename = drug!product_information_filename_user
   End If
   If sProductInformationFilename <> "" Then
      Form_PDF.PBox.Visible = True
      Product_Information_Show(sProductInformationFilename)
      txtPIFile.text = sProductInformationFilename
   Endif
   Try txtVolume.text = drug!amount
   If Not IsNull(drug!amount_unit) Then
      Select Case drug!amount_unit
         Case const.Units_gram
            cmbUnits.index = 0
         Case const.Units_millilitre
            cmbUnits.Index = 1
      End Select
   Endif
   Select Case drug!units_per_pack
      Case 1
         txtUnits_per_pack.text = drug!quantity
         txtNoOfPacks.text = drug!units_per_pack
      Case Else
         txtUnits_per_pack.text = drug!units_per_pack
         txtNoOfPacks.text = drug!quantity
   End Select
   If txtForm.text = "injection" Or InStr(txtForm.text, "liquid") Or InStr(txtForm.text, "drops") Or InStr(txtForm.text, "spray") Then
      lblUnitsPerPack.text = "Units Per Pack"
   Else
      lblUnitsPerPack.text = modUtil.Ucase_Word_First_Letter(txtForm.text & "s per pack")
   End If
   Try txtRepeats.text = drug!max_rpt
   ' If Not IsNull(drug!pack_size) Then
   '    txtPackSize.Text = drug!pack_size
   ' End If
   ' If Not IsNull(drug!quantity) Then
   '    txtPackSize.text = drug!quantity
   ' Endif
   If drug!shared = True Then
      chkShareDrug.Value = True
   Else
      chkShareDrug.value = False
   Endif
   If Not IsNull(drug!fk_schedule) Then
      cmbSchedules.Index = cmbSchedules.Find(drug!schedule)
      fk_schedule = drug!fk_schedule
   Else
      cmbSchedules.Index = -1
   End If
   txtComment.text = drug!free_comment
   fk_product = drug!fk_product
   fk_brand = drug!fk_brand
   atccode = drug!atccode
   fk_company = drug!fk_company
   fk_form = drug!fk_form
   EditArea_Notify_Data_Change(False)
   bExit = False

End

Public Sub Product_Information_Show(pdf_filename As String)
   '------------------------------------------
   'Attempt to show a product information PDF
   '-----------------------------------------

   Try Form_PDF.Load_PDF(Product_Information_Dir &/ pdf_filename)
   If Error Then
      Message.Error("The requested product information could not be found")
   Else
      TabStrip1.index = 1
   Endif

End

Public Sub EditArea_Notify_Data_Change(flag As Boolean)

   If flag Then
      Vbox_EditArea_Outer.Padding = 1
      Vbox_EditArea_Outer.Background = Color.red
   Else
      Vbox_EditArea_Outer.Padding = 0
      Vbox_EditArea_Outer.Background = Color.white
   End If

End

Public Sub EditArea_Clear()

   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Inner)
   EditArea_Notify_Data_Change(False)
   With gvwGenerics
      .Clear()
      .Enabled = False
   End With
   cmbUnits.index = -1
   cmbUnits.Enabled = False 'only enabled if text in txtVolume
   cmbSchedules.index = -1
   cmbSchedules.enabled = False
   With lblBrand
      .foreground = Color.Black
      .text = "Brand"
   End With
   listview2.Visible = False
   If VBox_UnallocatedPDFs.Visible = False Then
      Form_PDF.PBox.Visible = False
      bLinkPDF_Drug = False
   End If

End

Public Sub Drug_Clone()
   '-----------------------------------------------------------
   'Clones an existing drug to make entering a new brand easier
   '-----------------------------------------------------------

   cvwDRugs.MoveCurrent()
   Clone = drugs[cvwDrugs.Item.key]
   fk_brand = Null
   Drug_New()

End

Public Sub Drug_New()
   '---------------------------------
   'user wishes to create a new drug"
   '---------------------------------

   form_help.Help_Show("adding-a-new-drug.html")             'show help how to add drug
   If IsNull(Clone) Then                                     'if not cloning existing drug
      EditArea_Clear()                                       'clear the editing area
      fk_company = Null
      fk_brand = Null
      atccode = Null
      fk_product = Null
      fk_form = Null
      fk_schedule = Null
      With gvwGenerics                                        'init grid to empty
         .Rows.count = 0
         .Columns.count = 2
      End With
      lblDrugCount.text = ""
   End If

   EditArea_TextBoxes_SetReadOnly_Status(False)                'enable editing of textboxes
   cvwDrugs.Clear()                                            'clear existing drugs from display
   Hbox_AddGeneric.Visible = True                              'show the hbox containing the search for generic
   With gvwGenerics
      .Mode = Select.Single
      .Enabled = True                                          'with cloning can still change the generic strengths
   End With
   cmbSchedules.enabled = True
   With lblBrand
      .foreground = Color.Red
      .text = "Add Brand"
   End With
   VBox_EditArea_Inner.Enabled = True
   Vbox_EditArea_Outer.Enabled = True
   txtBrand.SetFocus()

End

Public Sub EditArea_TextBoxes_SetReadOnly_Status(bflag As Boolean)

   txtBrand.ReadOnly = bflag
   txtForm.ReadOnly = bflag
   txtNoOfPacks.ReadOnly = bflag
   txtComment.ReadOnly = bflag
   txtACTName.ReadOnly = bflag
   txtVolume.ReadOnly = bflag
   txtUnits_per_pack.ReadOnly = bflag

End

Public Sub Drug_Edit()

   Vbox_EditArea_Outer.Enabled = True
   VBox_EditArea_Inner.Enabled = True
   EditArea_TextBoxes_SetReadOnly_Status(False)
   HBox_AddGeneric.Visible = True
   ' gvwGenerics.Mode = Select.Single
   gvwGenerics.Enabled = True
   Hbox12.Enabled = True
   cmbSchedules.Enabled = True

End

Public Sub Drug_Form_Select()

   txtForm.text = listview2.Item.Text
   fk_form = listview2.Item.key
   If txtForm.text = "injection" Or InStr(txtForm.text, "liquid") Or InStr(txtForm.text, "drops") Or InStr(txtForm.text, "spray") Then
      txtVolume.SetFocus()
      lblUnitsPerPack.text = "Units Per Pack"
   Else
      txtNoOfPacks.SetFocus()  'misnomer due to ian's backend names
      lblUnitsPerPack.text = modUtil.Ucase_Word_First_Letter(txtForm.text & "s per pack")
   Endif
Catch
   Return

End

Public Sub Drug_Forms_Get()

   Dim drug_form As Collection
   Dim drug_forms As Collection

   With listview2
      .Clear()
      .Visible = False
   End With
   fk_form = Null
   drug_forms = modPrescribingDBI.Formulations_Get(Trim(txtForm.text))
   For Each drug_form In drug_forms
      listview2.Add(drug_form!pk, drug_form!form)
   Next
   If listview2.count Then
      With listview2
         .Visible = True
         .tag = txtForm
      End With
   End If

End

Public Sub Save()
   '-----------------------------
   'Save a new user defined drug
   '-----------------------------
   ' CREATE TABLE drugs.brand
   ' (
   '   fk_product uuid NOT NULL,
   '   fk_company character varying(3) DEFAULT NULL::character varying, -- may be null as we can put in our own drug preparations, creams etc
   '   brand character varying(100) NOT NULL,
   '   price money, -- dispensed price for PBS drugs.
   '   from_pbs boolean NOT NULL DEFAULT false, -- true if the brand comes from the PBS database, allows the list to be easily reloaded...
   '   original_tga_text text, -- drugs imported from TGA database, the original label therein
   '   original_tga_code character varying(12), -- drugs imported from TGA database, their TGA code
   '   pk uuid NOT NULL DEFAULT uuid_generate_v4(),
   '   product_information_filename text,
   '   product_information_filename_user text, -- If the user downloads a product information file for their own use it then the filename ...
   '   sct text,
   '   current boolean NOT NULL DEFAULT true,
   '   CONSTRAINT brand_pkey PRIMARY KEY (pk),
   '   CONSTRAINT brand_fk_company_fkey FOREIGN KEY (fk_company)
   '       REFERENCES drugs.company (code) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT brand_fk_product_fkey FOREIGN KEY (fk_product)
   '       REFERENCES drugs.product (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT sct_is_numeric CHECK (sct ~ '^[0-9]+$'::text)
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );

   ' --------------------------------------------------------------------------------------------
   ' CREATE TABLE drugs.pack
   ' (
   '   fk_product uuid,pk_viewpk_view
   '   amount double precision, -- the amount of drugs that have a fluid form
   '   amount_unit integer,
   '   pack_size integer DEFAULT 1, -- the number of identical units (bottles, vials, tablets, etc) within a pack
   '   CONSTRAINT pack_fk_product_fkey FOREIGN KEY (fk_product)
   '       REFERENCES drugs.product (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '--------------------------------------------------------------------------------------------
   ' CREATE TABLE drugs.product
   ' (
   '   pk uuid NOT NULL DEFAULT uuid_generate_v4(),
   '   atccode character varying(8) NOT NULL,
   '   generic text NOT NULL, -- full generic name in lower-case. For compounds names separated by ";"
   '   salt text, -- if not normally part of generic name, the adjuvant salt
   '   fk_form integer NOT NULL, -- the form of the drug
   '   strength text, -- the strength as a number followed by a unit. For compounds...
   '   salt_strength text, -- where a weight of the full salt is listed (being heavier than the weight ...
   '   original_pbs_name text, -- for a drug imported from the PBS Yellow Book database, the original ...
   '   original_pbs_fs text, -- for a drug imported from the PBS Yellow Book database, the original ...
   '   free_comment text, -- a free-text comment on properties of the product. For example for complex packages...
   '   updated_at timestamp without time zone DEFAULT now(),
   '   fk_schedule integer,
   '   shared boolean DEFAULT true, -- if true then the user/surgery wants to share this drug with easygp-central
   '   pack_size integer DEFAULT 1,
   '   amount double precision,
   '   amount_unit integer,
   '   units_per_pack integer DEFAULT 1,
   '   old_original_pbs_name text,
   '   sct text,
   '   extempore boolean NOT NULL DEFAULT false,
   '   CONSTRAINT product_pkey PRIMARY KEY (pk),
   '   CONSTRAINT product_fk_form_fkey FOREIGN KEY (fk_form)
   '       REFERENCES drugs.form (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT product_fk_schedule_fkey FOREIGN KEY (fk_schedule)
   '       REFERENCES drugs.schedules (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT sct_is_numeric CHECK (sct ~ '^[0-9]+$'::text)
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '----------------------------

   Dim sMsg As String
   Dim generics_list As String
   Dim strengths_list As String
   Dim fk_existing_product_key As Variant
   Dim fk_existing_brand_key As Variant
   Dim product As CRow
   Dim brand As CRow
   Dim brandname As String
   Dim bUserPIFile As Boolean                         'if true the product information file is not ours (not from the guild)
   '--------------------------------------------------------------------------------------------------
   'First save the product to product table
   'Saving a new drug has multiple nuances around the generic composition
   'We must make the user choose from existing generics, sometimes, to get the composition of the drug
   'the user could have taken two generics from the popup list and deleted one, then selected another
   'from the popup list to make the compound generic in this new drug
   'This compound generic may exist in the database linked to a particular form, so must test for this
   '--------------------------------------------------------------------------------------------------
   If Vbox_EditArea_Outer.Padding = 0 Then Return
   Gridview_Unload(ByRef generics_list, ByRef strengths_list)
   If Not Drug_Valid(generics_list) Then Return
   EditArea_TextBoxes_SetReadOnly_Status(False)
   EditArea_Notify_Data_Change(False)
   Wait           'update the gui
   Inc Application.Busy
   product = New CRow
   '------------------------------------------------------------------------------------------------------------
   'Current logic flaw here.
   'User may have saved a product with certain generics > realised they made a mistake and go back to correct it
   '------------------------------------------------------------------------------------------------------------
   fk_existing_product_key = modPrescribingDBI.Product_Check_Exists(atccode, generics_list, strengths_list, fk_form)
   If Not IsNull(fk_existing_product_key) Then
      product.put_unchanged(fk_existing_product_key, "fk_product")
   Endif
   If chkShareDrug.value = False Then
      If Message.Question("Do you want to share this drug definition with the central database?", "Yes", "No") = 1 Then
         chkShareDrug.Value = True
      End If
   Endif
   If chkShareDrug.value = True Then
      product!shared = True
   Else
      product!shared = False
   Endif
   product!fk_schedule = schedules[cmbSchedules.index]!pk
   product!generic = generics_list                                                 'will always have a generic name
   If strengths_list <> "" Then product!strength = strengths_list                        'may not have a strength
   product!fk_form = fk_form
   product!atccode = atccode
   If Trim(txtComment.text) <> "" Then product!free_comment = Trim(txtComment.Text)
   If Trim(txtVolume.text) <> "" Then product!amount = Trim(txtVolume.text)            'often dosen't have an amount
   If cmbUnits.Index <> -1 Then
      Select Case cmbUnits.Index
         Case 0
            product!amount_unit = const.Units_gram
         Case 1
            product!amount_unit = const.Units_millilitre
      End Select
   Endif
   product!units_per_pack = Val(txtNoOfPacks.text)        'wacky eh! but that's how ian named it
   product!pack_size = Val(txtUnits_per_pack.text)
   product.Save("drugs.product", "fk_product")
   fk_existing_product_key = product!fk_product
   'fixme put in schedule and poison
   brand = New CRow
   brandname = Trim$(Upper$(txtBrand.Text))
   If IsNull(fk_brand) Then
      fk_existing_brand_key = modPrescribingDBI.Brand_Check_Exists(fk_existing_product_key, brandname)
   Else
      fk_existing_brand_key = fk_brand
   Endif
   brand!brand = brandname
   If IsNull(fk_existing_brand_key) Then
      brand!fk_product = fk_existing_product_key
   Else
      brand.put_unchanged(fk_existing_brand_key, "fk_brand")
      brand!fk_product = fk_existing_product_key
   Endif
   If Not IsNull(fk_company) Then brand!fk_company = fk_company                           'may not have a company                                               'must always have a brand or 'our brand'"
   If Trim(txtPIFile.text) <> "" Then                                               'we have a pi-filename
      If PI_Filenames.Exist(Trim(txtPIFile.text)) Then                              'does it come from the guild?
         brand!product_information_filename = Trim(txtPIFile.text)                  'yes, its is one of ours
      Else
         bUserPIFile = True                                                         'no - the user has downloaded one
      End If
   End If
   '----------------------------------------
   'Create the html for the popup dialog box
   '----------------------------------------
   sMsg = "<B>Drug:</B>" & txtBrand.text & "\n"
   sMsg &= "<B>PI File:</B>"
   If Trim(txtPIFile.text) = "" Then
      sMsg &= "No Product Information PDF found\n"
   Else
      smsg &= txtPIFile.text & "\n"
   Endif
   sMsg &= "<B>Generic:</B>" & generics_list & "\n"
   sMsg &= "<B>Strength:</B>" & strengths_list & "\n"
   sMsg &= "<B>ATC Name:</B>" & txtACTName.text & "\n"
   sMsg &= "<B>Form:</B>" & txtForm.text & "\n"
   If Trim(txtVolume.text) Then
      sMsg &= "<B>Amount:</B>" & txtVolume.text & cmbUnits.Text & "\n"
   Endif
   If txtForm.text = "injection" Or InStr(txtForm.text, "liquid") Or InStr(txtForm.text, "drops") Or InStr(txtForm.text, "spray") Or txtForm.text = "" Then
      sMsg &= "<B>Units Per Pack:</B>"
   Else
      sMsg &= "<B>" & modUtil.Ucase_Word_First_Letter(txtForm.text) & "s per pack</B>"
   End If
   smsg &= txtUnits_per_pack.text
   sMsg &= "\n"
   sMsg &= "<B>Pack Size:</B>" & txtNoOfPacks.text
   If Message.Question(sMsg & "\n\nAre you sure this is accurate?", "Yes", "Cancel") = 2 Then Return
   brand.Save("drugs.brand", "fk_brand")
   sMsg = "insert into drugs.product (pk,generic,strength,"
   sMsg &= "fk_form,atccode,free_comment,fk_schedule,pack_size,units_per_pack,"
   sMsg &= "amount_unit,amount,updated_at) values ("
   sMsg &= Subst$("'&1',", fk_existing_product_key)
   sMsg &= Subst$("$$&1$$,", generics_list)
   sMsg &= Subst$("$$&1$$,", strengths_list)
   sMsg &= Subst$("&1,", fk_form)
   sMsg &= Subst$("'&1',", atccode)
   If Trim(txtComment.Text) <> "" Then
      sMsg &= Subst$("$$&1$$,", Trim(txtComment.Text))
   Else
      sMsg &= "NULL,"
   Endif
   sMsg &= product!fk_schedule & ","
   sMsg &= txtNoOfPacks.Text & ","
   sMsg &= txtUnits_per_pack.Text & ","
   If cmbUnits.Index <> -1 Then
      sMsg &= Subst$("&1,&2,", product!amount_unit, product!amount)
   Else
      sMsg &= "NULL,NULL,"
   Endif
   sMsg &= "'" & Now() & "'::timestamp);\n"
   sMsg &= "insert into drugs.brand (pk,fk_product,fk_company,brand,product_information_filename) values ("
   sMsg &= Subst$("'&1','&2','&3',$$&4$$,", brand!fk_brand, fk_existing_product_key, fk_company, brandname)
   If brand.Exist("product_information_filename") Then
      sMsg &= "'" & brand!product_information_filename & "'"
   Else
      sMsg &= "NULL"
   Endif
   sMsg &= ");\n"
   Print sMsg
   If bUserPIFile Then
      modDBConnect.update("drugs.brand", Null, ["pk": brand!fk_brand, "product_information_filename_user": Trim(txtPIFile.text)])
   Endif
   modDBConnect.CommitTrans()

   If chkShareDrug.Value Then
      Try modUtil.SendMailToDeveloper("drug contribution", sMsg)  'bug here if sending fails > crashes program without the try
   End If

   Dec Application.Busy
   Reload()
   txtSearch.SetFocus

End

Public Sub Link_PI_Brand(bEmailDevelopers As Boolean)
   '---------------------------------------------------------------------------------
   'Links the selected pdf's to the select brand(s)
   'Checks first if it is own of 'our' pdfs - i.e those from the guild as per licence
   'If not, then the filename is saved, but only to the local database
   '----------------------------------------------------------------------------------

   Dim brand As CRow
   Dim x As Integer
   Dim sfk_last_brand As String                                'string current brand e.g
   Dim sMsg As String
   Dim sPIfilename As String                                   'the current product information filename showing
   Dim bNotOurs As Boolean                                     'true if the pdf being viewed dosn't comes from the guild
   Dim bHaveDrug As Boolean
   Dim bHavepdf As Boolean

   cvwDrugs.MoveFirst
   For x = 0 To cvwDRugs.count - 1
      If cvwDRugs.Item.Selected = True Then
         bHaveDrug = True
         Break
      Endif
      cvwdrugs.MoveNext()
   Next
   cvwUnallocatedPDFs.MoveFirst()
   For x = 0 To cvwUnallocatedPDFs.count - 1
      If cvwUnallocatedPDFs.Item.Selected = True Then
         bHavePDF = True
         Break
      Endif
      cvwUnallocatedPDFs.MoveNext()
   Next
   If cvwdrugs.count = 0 Or bHaveDrug = False Or bHavepdf = False Then
      Goto HavingTrouble
   End If

   cvwUnallocatedPDFs.MoveCurrent()                            'set internal cursor otherwise lose the proper text
   sPIfilename = cvwUnallocatedPDFs.Item.Text                  'get the pdf filename
   smsg = "Are you sure you want to link these drugs to the product information file showing?\n\n"
   "If you continue, this data will be sent to the developers who will check its validity and "
   "provide update queries.\n\n"
   "Please note that your machine must have a working internet connection, and the process could be "
   "quite slow. The progam may seem to 'hang' for quite a long time due to the slowness of the underlying connection. "
   "Please don't touch the keyboard until this is finished."
   If Message.Question(sMsg, "Yes - Create Link", "Cancel") = 2 Then Return  'give user chance to back out
   Inc Application.Busy
   If Not PI_Filenames.Exist(sPIfilename) Then                  'Firstly is this pdf one or our own?
      bNotOurs = True                                           'not ours, keep flag
   Endif
   cvwDrugs.MoveFirst
   For x = 0 To cvwDRugs.count - 1
      If cvwDRugs.Item.Selected = True Then                     'check which of the drug brands the user has selected
         modDBConnect.startStoring                              'store the text of the query for later emailing to Ian
         brand = New CRow
         If sfk_last_brand <> drugs[cvwDrugs.Item.key]!fk_brand Then
            brand.put_unchanged(drugs[cvwDrugs.Item.key]!fk_brand, "fk_brand")
            brand!product_information_filename = sPIfilename
            brand.Save("drugs.brand", "fk_brand")
            sfk_last_brand = drugs[cvwDrugs.Item.key]!fk_brand
            Print modDBConnect.stopStoring()
            modDBConnect.exec_query(modDBConnect.stopStoring())
            If bEmailDevelopers And bNotOurs = False Then
               modUtil.SendContribution("pdf-link", modDBConnect.stopStoring())
            End If
         End If
      Endif
      cvwdrugs.MoveNext
   Next
   modDBConnect.CommitTrans()
   cvwDrugs.UnselectAll()
   Reload()
   Brands_With_Filenames_Refresh()
   PDFs_Without_Brand_Display()
   If cvwUnallocatedPDFs.count Then
      With cvwUnallocatedPDFs
         .MoveFirst()
         .SetFocus()
         .Item.Selected = True
      End With
      cvwUnallocatedPDFs_Click()
   Endif
   Dec Application.Busy
   Return
HavingTrouble:
   Message.Title = "Allocating a PDF to a Drug"
   sMsg = "You seem to be having trouble figuring out how to allocate a pdf name to a drug.\n\n"
   "Please read the help file on the Help tab and try again."
   Message.Info(sMsg)

End

Public Sub Brands_With_Filenames_Refresh()

   BrandsHavePDF = modPrescribingDBI.Brands_With_PDF_Get()

End

Public Function Drug_Valid(generics_list As String) As Boolean
   '------------------------------------------
   'Returns true if adequate drug information
   '------------------------------------------

   If Trim(txtBrand.Text) = "" Then
      txtBrand.SetFocus()
      Return
   End If
   If atccode = "" Then
      txtACTName.SetFocus()
      Return
   End If
   If Replace(generics_list, ";", "") = "" Then
      txtFindGenericComponent.SetFocus
      Return
   End If
   If IsNull(fk_form) Then
      txtForm.SetFocus()
      Return
   End If
   If Trim(txtNoOfPacks.text) = "" Then
      txtNoOfPacks.SetFocus()
      Return
   Endif
   If Trim(txtUnits_per_pack.text) = "" Then
      txtUnits_per_pack.SetFocus()
      Return
   Endif
   If cmbSchedules.index = -1 Then
      Message.Warning("Please select a schedule for this drug", "Ok")
      Return
   Endif
   If IsNull(fk_company) Then     'some of our own 'recipies', won't have a company
      If Message.Question("Continue to save without allocating a company for this drug?", "Yes", "No") = 2 Then
         txtCompany.SetFocus()
         Return
      Endif
   End If
   Return True

End

Public Sub EditArea_Buttons_Click()

   Select Case Last.tag
      Case "new"
         Clone = Null
         Drug_New()
      Case "save"
         Save()
      Case "refresh"
         Reload()
      Case "link pdf email developers"
         Link_PI_Brand(True)
      Case "link pdf local database"
         Link_PI_Brand(False)
      Case "allocate unlinked pdfs"
         form_help.Help_Show("linking-product-information-pdf-to-drugs.html")
         If IsDir(Product_Information_Dir) Then
            ShowUnlinkedPDFs(VBox_UnallocatedPDFs.Visible)
         Else
            Message.Info("Sorry, could not find the product information directory.\n\nIf you are on a network you may need to mount the directory.")
         End If
   End Select

End

Public Sub EditArea_TextBox_Change()

   If bExit Then
      Return
   End If
   If Trim(Last.text) = "" Then listview2.Visible = False
   Select Case Last.tag
      Case "volume"
         If Trim(txtVolume.text) <> "" Then
            cmbUnits.index = -1
            cmbUnits.Enabled = True
         Else
            cmbUnits.Enabled = False
         Endif
      Case "brand"
         bExit = True
         txtBrand.text = UCase(txtBrand.text)
         bExit = False
      Case "find generic component"
         If Len(txtFindGenericComponent.text) = "" Then
            listview2.Visible = False
         End If
      Case "form"
         If Trim(txtForm.text) = "" Then fk_form = Null
      Case "edit grid"
         gvwGenerics[gvwGenerics.row, gvwGenerics.Column].text = txtEditGrid.Text
         lblMeasure.text = Last.text & "  "
         txtEditGrid.Width = lblMeasure.Width
   End Select
   EditArea_Notify_Data_Change(True)

End

Public Sub EditArea_TextBox_Activate()
   '------------------------------
   'The enter key has been pressed
   '------------------------------

   Select Case Last.tag
      Case "brand"
         If Hbox_AddGeneric.Visible Then
            txtPIFile.SetFocus()
         Endif

      Case "edit grid"
         txtFindGenericComponent.Clear()
         txtFindGenericComponent.SetFocus()
         gvwGenerics[gvwGenerics.row, gvwGenerics.Column].text = txtEditGrid.Text
         Last.Visible = False
      Case "product information"
         If Hbox_AddGeneric.Visible Then
            txtCompany.SetFocus()
         Endif
      Case "company"
         If Hbox_AddGeneric.Visible Then
            txtFindGenericComponent.SetFocus()
         Endif
      Case "find generic component"
         If Last.text = "" Then
            txtACTName.SetFocus()
         End If
      Case "strength"
         txtForm.SetFocus()
      Case "volume"
         cmbUnits.SetFocus()
      Case "form"
         If txtForm.text = "injection" Or InStr(txtForm.text, "liquid") Or InStr(txtForm.text, "drops") Or InStr(txtForm.text, "spray") Then
            txtVolume.SetFocus()
         Else
            txtNoOfPacks.SetFocus()
         Endif
      Case "pack size"
         cmbSchedules.SetFocus()
      Case "comment"
         tbSave.SetFocus()
      Case "atc"
         txtForm.SetFocus()
      Case "strength add"
         cmbUnits.SetFocus()
   End Select

End

Public Sub EditArea_TextBox_GotFocus()

   Last.BackGround = Color.rgb(95, 255, 175)
   ListView2.Visible = False
   iSearchMode = cSearchMode_None
   itimer_Count = 0
   Timer1.stop
   Select Case Last.tag
      Case "form", "atc", "company", "find generic component", "product information"
         itimer_Count = 0
         Timer1.stop
         With listview2
            .top = Last.Parent.Parent.top + Last.Parent.height
            .Left = Last.Parent.Left + VBox_EditArea_Inner.padding
            .width = txtBrand.Width
            .Visible = False
            .Height = 200
            .Raise
         End With
         If Last.tag = "find generic component" Then iSearchMode = cSearchMode_Generic
         If Last.tag = "atc" Then iSearchMode = cSearchMode_ATC
   End Select
   If Last.tag = "product information" Then
      Try Product_Information_Filename_Get()
   Endif

End

Public Sub EditArea_TextBox_LostFocus()

   Last.Background = Color.White
   If Last.tag = "atc" Or Last.tag = "form" Or Last.tag = "product information" Or Last.tag = "company" Or Last.tag = "find generic component" Then Return
   ListView2.Visible = False
   If Last.tag = "edit grid" Then Last.Visible = False

End

Public Sub EditArea_TextBox_KeyPress()

   If bexit Then Return
   If Not EditAreaTextbox_ExcludeKeys(key.code, Last.tag) Then    'validate key input first
      Stop Event                                                  'no good? don't show key output
      Return
   End If
   Select Case Key.Code
      Case key.Down
         If listview2.Visible And listview2.count Then
            listview2.MoveFirst
            listview2.Item.Selected = True
            listview2.SetFocus()
         End If
   End Select

End Sub

Public Sub EditArea_TextBox_KeyRelease()

   Select Case Last.tag
      Case "find generic component", "atc"
         itimer_count = 0
         Timer1.start()
      Case "form"
         Drug_Forms_Get()
      Case "product information"
         Try Product_Information_Filename_Get()
      Case "company"
         Company_Get()
         ' Case "atc"
         '    ACT_Codes_Get()
   End Select

End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean

   Dim bKeyValid As Boolean

   Select Case tag
      Case "pack size", "strength new"
         bKeyValid = modUtilGUI.AllowKeys(Const.AllowKeys_NumbersOnly, keycode)
      Case "volume"
         bKeyvalid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersDecimal, keycode)
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid

End

Public Sub listview2_KeyPress()

   If key.code = key.return Then
      listview2_DblClick
   Endif

End Sub

Public Sub Listview2_Select()

   '-------------------------------------------------
   'User has clicked on one row of the listview2 popup
   'contains eg list of product information files
   '--------------------------------------------------
   Select Case Last.tag.tag
      Case "product information"
         Try Product_Information_Show(listview2.Item.Text)
   End Select

End

Public Sub listview2_DblClick()

   ListView2.MoveCurrent

   Select Case Last.tag.tag
      Case "form"
         Drug_Form_Select()
      Case "company"
         Company_Select()
      Case "find generic component"
         Generic_Names_Select()
      Case "product information"
         Product_Information_Select()
      Case "atc"
         ACT_Code_Select()
   End Select
   listview2.Visible = False

End

Public Sub mnuGenerics_Click()

   Select Case Last.tag
      Case "edit"
         If gvwGenerics.row = -1 Then Return
         modUtilGUI.NotImplemented("Editing a generic component")
      Case "delete"
         Generic_Delete()
   End Select
Catch
   Return

End

Public Sub tbAddGeneric_KeyPress()

   If key.code = key.return Then
      tbAddGeneric_Click()
   End If

End

Public Sub tbAddGeneric_Click()
   '-----------------------------------------------------------------------------
   'User has clicked on the button to add a generic for the new drug
   'This generic text may have been searched for by typing
   'or may be typed in by the user 'praise the lord for accuracy we live in hope
   '-----------------------------------------------------------------------------

   Dim iWidestGenericName As Integer
   Dim gridrow As Integer
   Dim x As Integer

   If Trim(txtFindGenericComponent.text) = "" Then Return                                 'no generic, don't add
   'first check no duplication
   For x = 0 To gvwGenerics.Rows.Count - 1
      If gvwGenerics[x, 0].text = Trim(txtFindGenericComponent.text) Then Return
   Next
   Inc gvwGenerics.Rows.Count                                                             'ensure is a row in grid
   gridrow = gvwGenerics.Rows.count - 1
   With gvwGenerics[gridrow, 0]
      .text = Trim(txtFindGenericComponent.text)
   End With
   For gridrow = 0 To gvwGenerics.rows.Count - 1
      lblMeasure.text = gvwGenerics[gridrow, 0].richtext
      Wait
      iWidestGenericName = Max(lblMeasure.width, iWidestGenericName)
   Next
   gvwGenerics.Columns[0].width = iWidestGenericName
   Wait
   gvwGenerics.row = gvwGenerics.Rows.count - 1
   gvwGenerics.column = 1

End

Public Sub txtSearch_KeyPress()
   '---------------------------------------------------------------------------
   'User searching for existing drugs ?wants to scroll down onto the drugs list
   '---------------------------------------------------------------------------

   If key.code = key.down Then
      If cvwDrugs.count Then
         cvwDrugs.MoveFirst
         cvwdrugs.SetFocus

      Endif
   Endif

End

Public Sub txtSearch_KeyRelease()
   '-----------------------------------------------
   'Show all existing drugs for the txtSearch text
   '-----------------------------------------------

   Timer1.Enabled = True
   timer_count = 0

End

Public Sub txtSearch_GotFocus()
   '------------------------------------------------------------------------------------------
   'User has clicked on the textbox to search for drug to view its details, i.e existing drugs
   '------------------------------------------------------------------------------------------

   EditArea_Clear()
   VBox_EditArea_Inner.Enabled = False
   With lblBrand
      .foreground = Color.Black
      .text = "Brand"
   End With
   iSearchmode = cSearchMode_Existing

End

Public Sub HSplit_DataEntry_Resize()
   'occurs if  user resizes the vertical splitter handle

   If bExit Then Return
   listview2.width = txtFindGenericComponent.Width
   If txtEditGrid.Visible Then txtEditGrid.width = gvwGenerics.Columns[1].width

End

Public Sub EditArea_Combo_KeyPress()

   If key.code = key.return Then
      Select Case Last.tag
         Case "units"
            txtNoOfPacks.SetFocus()
      End Select
   End If

End

Public Sub EditArea_Combo_Click()

   If bexit = True Or Last.index = -1 Then Return
   Select Case Last.tag
      Case "units"
      Case "pregnancy category"
      Case "schedule'"
         fk_schedule = schedules[Last.Item.key]
         chkShareDrug.SetFocus()
   End Select
   If Last.tag = "units" Then
      txtNoOfPacks.SetFocus()
   Endif
   EditArea_Notify_Data_Change(True)

End

Public Sub cvwDrugs_Menu()

   If Last.count And VBox_UnallocatedPDFs.Visible = False Then
      If CopyPDFName <> "" Then
         mnuDrugs_Allocatepdfname.enabled = True
         mnuDrugs_Allocatepdfname.text = "Copy pdf filename:" & CopyPDFName & " to selected drugs"
      Else
         mnuDrugs_Allocatepdfname.text = "Copy pdf filename"
         mnuDrugs_Allocatepdfname.Enabled = False
      Endif
      mnuDrugs.Popup()
   End If

End

Public Sub mnuDrugs_Click()

   Dim x As Integer

   Select Case Last.tag
      Case "edit"
         Drug_Edit()
      Case "delete"
         modUtilGUI.NotImplemented("Deleting a drug")
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwDrugs, "FDrugMaintenance")

      Case "clone"
         Drug_Clone()
      Case "copy pdf name"
         CopyPDFName = txtPIFile.Text
      Case "link pdf"
         '  Link_PI_Brand()
      Case "allocate pdf name"
         If Message.Question("Are you sure you want to allocate the product information file '" & CopyPDFName & "' to all the selected brands?", "Yes", "No") = 2 Then Return
         cvwDRugs.MoveFirst()
         For x = 1 To cvwDRugs.count
            If cvwDRugs.Item.Selected = True Then
               modDBConnect.exec_query("update drugs.brand set product_information_filename =$$" & CopyPDFName & "$$ WHERE pk=$$" & drugs[cvwDRugs.Item.key]!fk_brand & "$$")
               '  modDBConnect.update("drugs.brand", Null, ["pk": drugs[cvwDRugs.Item.key]!fk_brand, "product_information_filename": CopyPDFName])
            Endif
            cvwDrugs.MoveNext()
         Next
         modDBConnect.CommitTrans()
         Reload
   End Select
Catch
   Return

End

Public Sub gvwGenerics_Select()

   txtEditGrid.Visible = False
   onrow = gvwGenerics.row

End

Public Sub VSplit_DataEntry_Resize()

   Dim i As Integer

   Return
   txtEditGrid.Height = txtBrand.Height
   For i = 0 To gvwGenerics.Rows.Count - 1
      gvwGenerics.Rows[i].height = txtEditGrid.Height
   Next

   '  HBox_GenericsGrid.Height = 5 + gvwGenerics.Rows.count * txtEditGrid.Height

End

Public Sub txtSearch_Change()

   bExit = True
   If Trim(Last.text) = "" Then
      cvwDrugs.Clear
      EditArea_Clear()
   End If
   bexit = False

End

Public Sub timer1_Timer()
   '------------------------------------------------------------------------------
   'If the timer is running, user is typing in either the brand or generic textbox
   '------------------------------------------------------------------------------

   Inc itimer_Count
   If itimer_count > 3 Then
      timer1.stop
      Select Case iSearchMode
         Case cSearchMode_Generic
            Generic_Names_Get
         Case cSearchMode_ATC
            ACT_Codes_Get
         Case cSearchMode_Existing 'search for existing drugs
            Reload
      End Select
   End If

End

Public Sub cvwUnallocatedPDFs_Click()

   Dim company As String

   TabStrip1.Index = 1
   cvwUnallocatedPDFs.MoveCurrent()
   Try Form_PDF.Load_PDF(Product_Information_Dir &/ cvwUnallocatedPDFs.Item.text)
   Select Case Left(cvwUnallocatedPDFs.Item.text, 3)
      Case "gxp"
         company = "genrx "
      Case "twp"
         company = "terry white chemists "
      Case "chp"
         company = "chem mart "
      Case "txp"
         company = "apo-"
   End Select
   txtSearch.text = company & Mid$(cvwUnallocatedPDFs.Item.Text, 4, 3)
   Reload()

End

Public Sub ShowUnlinkedPDFs(bFlag As Boolean)

   If Bflag Then

      tbUnlinkedPDF.text = "Allocate PDFs"
      HSplit1.settings = [1, 0]
      VBox_EditArea.Visible = True
      tbLinkPDFEmailDevelopers.Enabled = False
      tbAddDrug.enabled = True
      tbSave.Enabled = True
      bExit = True

      rbAllDrugs.value = True
      bexit = False
      lblDisplaytype.text = "Drugs"
      VBox_UnallocatedPDFs.Visible = False
   Else
      tbUnlinkedPDF.text = "Show Normal View"
      HSplit1.Settings = [1, 1]
      VBox_EditArea.Visible = False
      tbLinkPDFEmailDevelopers.Enabled = True
      tbAddDrug.enabled = False
      tbSave.Enabled = False
      bexit = True
      rbDrugsNoPI.value = True
      bExit = False
      PDFs_Without_Brand_Display()
      Form_PDF.Init_Drugs_Browser()
      lblDisplaytype.text = "PDF Files which are not allocated to existing drugs"
   Endif

End

Public Sub btnLinkToPDF_Click()

   Select Case Last.tag
      Case "link local"
         Link_PI_Brand(False)
      Case "link and email"
         Link_PI_Brand(True)
   End Select

End

Public Sub txtFilterFilename_KeyRelease()

   PDFs_Without_Brand_Display()

End

Public Sub editArea_RadioButtons_Click()

   If bexit Then Return
   Select Case Last.tag
      Case "all drugs"
         If VBox_UnallocatedPDFs.Visible = True Then
            ShowUnlinkedPDFs(VBox_UnallocatedPDFs.Visible) 'toggle off
         Endif

   End Select
   If Trim(txtSearch.text) = "" Then
      txtSearch.text = "%"
   Endif

   Reload()

End

Public Sub btnDisclaimer_Click()

   If Message.Warning("Are you absolutely sure?\n\n Remember that you can potentially damage your database, put in incorrect information and prescribe wrongly entered medications, or worse cause others to do this, "
      "and have a real medico-legal problem on your hands.\n\nWe strongly advise against you using this module.", "Yes - Ignore the warnings", "No - Get me out of here") = 2 Then Return
      VBox_HideTheForm.Visible = False

End

Public Sub Form_Leave()

   ' VBox_HideTheForm.Visible = True

End

Public Sub HBox_GenericsGrid_Leave()

   txtEditGrid.Visible = False

End

Public Sub gvwGenerics_Click()

   Print "clicked on row "; gvwGenerics.Row

End
