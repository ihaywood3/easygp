' Gambas class file

' Copyright (C)2008-2016 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
' This program is distributed in the hope that it will be useful
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
'TODO    prescribed! = concession_details: these three Not yet implemented
'         prescribed! = brand_substitution: Do Not remove this code
'        prescribed! = fk_progress_note
'        Put rpbs into clerical to differential if patient is repat
'        implement repat in tDim unique_drugs As New Collection     his module
'        put the suppress reaDim unique_drucgs As New Collectdayion     son checkbox in the gui
'        implement brand substitution not permitted
'        implement keep record of writing scripts in the progress note
'        lu_pbs_script_type FIXME RENAME IN BACK END TO lu_script_type and adjust queries accordingly
'        fix the problem of 'mixture' of printed (hence saved) and not printed (hence unsaved) scripts
'        under the edit area and what happens with Reload()
'        Do the code to edit a script item.
'        Plus lots more I can't even think aboutc
'        Check/double check that the drug validation before save workstown
'        fix the formatting on the medicare number in the latex preparation, dosn't work
'        Implement duplication checking before landing something on the script pad
'        Implmenet undelete (infinate) on drugs written this consult
'        fix formatting on the ordinary script
'        implement medicare/repat in clerical gui of contacts.patients.
'        fix the inconsistnat nameing eg drug_add between authority wording, authority reason, and authority indication
'        check if delete from today's that it only removes the med from patients med list if first time ever prescribed.
'        todo: active the save item no print button
'BUGS    After ipbs_script_type is set by the generic, finding the
'        brands for the brand list is over-riding this ?does it matter
'        ie are all the brands for this product the same ipbs_script_type
'        probably yes but check.
'        If prescribe generically but also select brand the correct brand is shown in the edit area
'        but the incorrect brand ends up on the scripts list.
'        if do a delete or deleteall then the drug_delete dosn't work
'        Spell checking on txtInstruction does not work.
'--------------------------------------------------------------------
Private currentconsult As CConsult
Private SpellChecker As ClskSpell
Private embedded_in_form As String  
Private temp_drugs As Collection
Public bUserWantsSpellCheck As Boolean
Private unique_drugs As Collection
Private pic_saved As Picture = Picture["icons/12/green_dot.png"]
Private pic_not_saved As Picture = Picture["icons/12/red_dot.png"]
Private generic_brands_split_layout As String[]
Public bExit As Boolean                   'accessed from Fclinical Editor_SetPage must be public
Private bAuthority As Boolean             'If True the script item needs an authority.
Private bKeyValid As Boolean
Private bInteractionsExist As Boolean      'if True interactions exist for current drug being prescribed.
Private bGenericSearch As Boolean
Private fk_item_prescribed As Variant
Private pk_view As Variant
Private fk_company As Variant
Private fk_instruction As Variant
Private iCurrentScriptKey As Variant
Private fk_generic_product As Variant
Private fk_prescribed_for As Variant
Private fk_brand As Variant
Private fk_medication As Variant
Private fk_increased_quantity_authority_reason As Variant      'if not 0 then key to clin_prescribing.increased_quantity_authority_reasons
Private pbscode As String
Private script_types As Collection
Private Drug_Interactions_For_Drug_Prescribed As Collection
Private Drug_Interactions_For_Drugs_Prescribed As Collection
Private Food_Interactions_For_Drug_Prescribed As Collection
Private Food_Interactions As Collection
Private cProgressNote_Section As Integer
Private iPBS_Script_Type As Integer                            'e.g print as PBS, rpbs, PBS AUTHORITY etc, see Const
Private restriction_code As String                             ' pbs restriction.code  eg for authorities
Private restriction As String
Private drugs As Collection
Private drug As Collection
Private timer_count As Integer
Private Drug_Restrictions As Collection
Private Interactions As Collection
Private Print_Status As String
Private brands As Collection
Private brand As Collection
Private gridrow As Integer 'current row the grid is on

Public script_items As Collection
Private script_item As Collection
Public Drug_Search_Scope As String[]   'must be public
Private Instruction_Habits As Collection
Private Prescribed_For_Habits As Collection
Private habit As Collection
Private Authority_Increased_Quantity_Reasons As Collection

Public sDefault_Prescribing_Mode As String   'accessed from FStaffPreferencesPrescribing via static form
Private sPBS_RPBS As String
Private iAuthority_Type As Integer
Private iIncreased_quantity_type As Integer
Private ReferenceHboxForTopColumnview As HBox               'Allows us to move the grids/columnview up as the form or split resizes

Static Public form_prescriptions As FPrescriptions

Public Sub _new()
   
   Try sDefault_Prescribing_Mode = modAdminDBI.Config_Get_Staff_Member("user_prescribing_mode", "brand", Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff)
   bUserWantsSpellCheck = modAdminDBI.Config_Get_Staff_Member("spelling-prescriptions", False, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff)
   Search_Scope_Set() 'Has user set their scope? if not put in defaults
   form_prescriptions = Me                                              'allow access of this instance from FClinical
   lblMeasure.text = " Authority Approval No.  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Inner, lblMeasure)
   modEditAreaHelpers.Resize_label(lblPrescribeFor, lblMeasure)
   modEditAreaHelpers.Resize_label(label29, lblMeasure)
   lblMeasure.text = "  Quantity  "
   modEditAreaHelpers.Resize_label(lblRepeats, lblMeasure)
   modEditAreaHelpers.Resize_label(lblLockDate, lblMeasure)
   modEditAreaHelpers.Resize_label(lblRegular, lblMeasure)
   modEditAreaHelpers.Resize_label(lblQuantity, lblMeasure)
   modEditAreaHelpers.Resize_label(lblPrintReason, lblMeasure)
   modEditAreaHelpers.Resize_label(lblReg24, lblMeasure)  
   modEditAreaHelpers.Resize_label(lblPostAuthority, lblMeasure)
   With cvwPrescriptions
      .Columns.count = 11
      .Columns[1].text = "Script Date"
      .Columns[2].text = "Brand"
      .Columns[3].text = "Generic"
      .Columns[4].text = ""
      .Columns[5].text = ""
      .Columns[6].text = "Qty"
      .Columns[7].text = "Rpt"
      .Columns[8].text = "PBS status"
      .Columns[9].text = "Directions"
      .Columns[10].text = "Prescribed For"
   End With
   Drug_Interactions_For_Drug_Prescribed = New Collection
   With gvRestrictions
      .Columns.count = 2
      .Columns[0].width = gvRestrictions.Width
      .Columns[1].width = 0
   End With
   lblMeasure.text = "RPBS AUTHORITY INCREASED QUANTITY    "
   cmbScriptTypes.width = lblMeasure.Width
   cmbScriptTypes_Load()
   '-------------------------------------------------------------------------------
   'The spell checker works on a text editor, so in the change event for txtReason
   'i.e EditArea_txtBox_Change() its text is set
   '-------------------------------------------------------------------------------
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teForSpelling
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"  'FIXME
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   script_items = New Collection 'all those prescribed this consultation
   Try Settings_Load()
   lblPBSRelease.text = "PBS drug data for " & modPrescribingDBI.PBSRelease()
   
End

Static Public Sub Script_Item_Re_Prescribe(item As Collection)
   '-------------------------------------------------
   'Called from Fclinical.mnuMedications_Click()
   'which puts a previously prescribed script item
   'into the scripts prescribed this consulation list
   '-------------------------------------------------
   
   form_prescriptions.Script_items_Update(item)
   
End

Static Public Sub Search_Scope_Update(scope As String[])
   '-------------------------------------------------------------
   'called if user updates the search scope in  Staff Preferences
   'or from the popup FPrescribingScope
   '-------------------------------------------------------------
   
   form_prescriptions.drug_search_scope = scope
   
End

Static Public Sub Prescribing_Mode_Set(s As String)
   
   form_prescriptions.sDefault_Prescribing_Mode = s
   
End

Static Public Sub Allergies_For_Inbox_Refresh()
   'Called from Inbox, the same patient has been in FClinical
   'so update allergies in this instance of the prescription writer
   'the class codes were updated in currentconsult from the inbox
   
   form_prescriptions.Inbox_Allergy_Display_Refresh

End

Public Sub Inbox_Allergy_Display_Refresh()
   
   modAllergyDBI.Allergies_Sensitivities_Refresh(currentconsult, gvAllergies)
   
End

Static Public Sub Prescriptions_Written_Today_Reload()
   '-----------------------------------------------------
   'called from FClinical when doing a delete or undelete
   '-----------------------------------------------------
   
   form_prescriptions.Reload()
   
End

Public Sub Init(cons As CConsult)
   
   currentconsult = cons
   If IsNull(currentconsult!patient!fk_lu_veteran_card_type) Then
      sPBS_RPBS = "PBS"
      iAuthority_Type = const.pbs_script_type_pbs_authority
      iIncreased_quantity_type = const.pbs_script_type_pbs_authority_increased_quantity
   Else
      sPBS_RPBS = "RPBS"
      iAuthority_Type = const.pbs_script_type_rpbs_authority
      iIncreased_quantity_type = const.pbs_script_type_rpbs_authority_increased_quantity
   Endif
   currentconsult.Refresh("Allergies")
   If embedded_in_form = "FInbox" Then 
      modAllergyDBI.Allergies_Sensitivities_Refresh(currentconsult, gvAllergies)
      gvAllergies.Visible = True 
      HBox_Print.Visible = True    'exposes the Print button
   End If   
   Reload()
   
End

Public Sub Allergies_Sensitivities_Refresh()
   '---------------------------------------------------------------
   'Fetch the patients allergies and sensitivities from the backend
   'If the allergy is non-drug show the allergen
   'If the allergy is generic specific show the generic
   'If no allergy and no 'no allergies known'
   'then prompt user with prominant comment 'PATIENT NOT ASKED'
   'If any sensitivites exist then by definition the module has been
   'accessed and allergies will have been queried, user will be
   'informed sensitivities exist they will not be listed.
   '---------------------------------------------------------------
   
   Dim allergy As Collection
   Dim allergies As Collection
   Dim med As Collection
   Dim allergy_class_code As Collection 
   Dim sMsg As String
   
   With gvAllergies
      .Clear()
      .Rows.count = 0
      .Rows.Height = -1
      .Columns.count = 2
      .columns[0].width = 20
   End With
   currentconsult.Refresh("allergies")
   allergies = Modutil.Copy_Collection_Keyed_Sequentially(currentconsult!allergies)
   If allergies.count Then                              'have either allergies or sensitivities
      For Each allergy In currentconsult!allergies    
         If allergy!nil_allergies_sensitivities Then           'First acertain if has ever been asked 
            Inc gvAllergies.Rows.Count
            With gvAllergies[gvAllergies.Rows.Count - 1, 1]
               .Text = "Asked - No Known Allergies"
               .Foreground = Color.Red
               .Alignment = Align.Center
            End With
            Return 
         Endif
         Inc gvAllergies.Rows.Count 
         If allergy!fk_lu_reaction_type = const.ReactionType_Allergy Then  'exists ?is an allergy
            With gvAllergies[gvAllergies.Rows.Count - 1, 0]
               .text = "A"
               .Foreground = Color.red
               .Alignment = Align.TopLeft
            End With 
         Else
            With gvAllergies[gvAllergies.Rows.Count - 1, 0]
               .text = "S"
               .Foreground = Color.Black
               .Alignment = Align.TopLeft
            End With 
         End If   
         With gvAllergies[gvAllergies.Rows.Count - 1, 1]
            If allergy!specificity = "g" Then
               .text = allergy!generic
            Else If allergy!specificity = "b" Then 
               .text = allergy!brand
            Else
               .Text = Trim(allergy!class_name & " " & allergy!allergen) 'only one will appear
            End If   
            .Alignment = Align.TopLeft
            If allergy!fk_lu_reaction_type = const.ReactionType_Allergy Then
               .Foreground = Color.Red
            Else
               .Foreground = Color.Black
            End If 
            .WordWrap = True
         End With
         gvAllergies.Rows[gvAllergies.Rows.Count - 1].height = -1
      Next
   End If  
   If gvAllergies.Rows.count = 0 Then   
      Inc gvAllergies.Rows.Count
      With gvAllergies[gvAllergies.Rows.Count - 1, 1]
         .WordWrap = True
         .RICHText = "No record of patient being asked about allergies"
         .Foreground = Color.Red
         .Alignment = Align.Center
      End With
      gvAllergies.rows[0].Height = -1
   End If
   
   '------------------------------------------------------------------------------------------------------------------
   'Check that nothing has been prescribed today (and saved) to which we are allergic, warn user, lay down audit trail
   '------------------------------------------------------------------------------------------------------------------
   For Each med In currentconsult!prescriptions_written  '= prescriptions written today
      For Each allergy_class_code In currentconsult!allergy_class_codes
         If allergy_class_code!class_code = Left(med!atccode, Len(allergy_class_code!class_code)) Then
            sMsg = modAllergyDBI.Allergy_Warning(currentconsult, med, allergy_class_code!class_code)
            sMsg &= "\n\nIt seems this drug has already been prescribed today.\n\nYou should check the prescription is not a mistake."
            Message.Warning(sMsg, "Ok")
            sMsg = "The user was presented with a warning message about danger with a currently prescribed medication and viewed and clicked OK in the popup dialog box.<BR><BR>" & sMsg 
            If modAudit.MakeAudit(currentconsult, "warning to user", "clin_prescribing.prescribed", med!prescribed!pk, const.cSection_Prescriptions, sMsg) Then
               modDBConnect.CommitTrans()
            Endif
            Break
         End If  
      Next
   Next
   '-------------------------------------------------------------------
   'Now check that nothing has been prescribed but not printed or saved
   '-------------------------------------------------------------------
   ' If Not IsNull(PrescriptionPage) Then  'fixme invalid object
   '    If Not IsNull(PrescriptionPage.script_items) Then  
   '       For Each med In PrescriptionPage.script_items
   '          If med!prescribed.Exist("pk") = False Then   'on list but not yet saved or printed
   '             For Each allergy_class_code In currentconsult!allergy_class_codes
   '                If allergy_class_code!class_code = Left(med!atccode, Len(allergy_class_code!class_code)) Then
   '                   sMsg = modAllergyDBI.Allergy_Warning(currentconsult, med, allergy_class_code!class_code)
   '                   sMsg &= "\n\nIt seems this drug has already been prescribed today but not printed.\n\nYou should check the prescription is not a mistake."
   '                   Message.Warning(sMsg, "Ok")
   '                   sMsg = "The user was presented with a warning message about danger with a currently prescribed medication which has not yet been printed, and viewed and clicked OK in the popup dialog box.<BR><BR>" & sMsg 
   '                   If modAudit.MakeAudit(currentconsult, "warning to user", Null, 0, const.cSection_Prescriptions, sMsg) Then
   '                      modDBConnect.CommitTrans()
   '                   Endif
   '                   Break
   '                End If  
   '             Next
   '          End If  
   '       Next
   '    End If   
   ' End If   
   
   ' Catch 
   '   Return
   
End
' Public Sub Allergies_Show()
'    '----------------------------------------------------------------------------------------
'    'if the prescription writer is embedded in the inbox - show the allergies above edit area
'    'Construct a table of known allergies, possibilities are
'    'Unknown
'    'Nil allergies or sensitivities
'    'A heading of the table (class etc) + row(s) of allergy/sensitivity data
'    'fixme this code is duplicated modprogressnotes.Health_Summary_Construct_Latex (merge this)
'    '----------------------------------------------------------------------------------------  
'    
'    Dim templ As CTemplate
'    Dim sstring As String
'    Dim item As Collection
'    Dim x As Integer
'    Dim tempstring As String = Replace(Space$(40), " ", "z")  'fixme remove once Ian fixes cTemplate
'    
'    tlAllergies.Visible = True  
'    Separator3.Visible = True  
'    sString = "<P><B>Allergies</B></P>" & tempstring & "%allergies"
'    templ = New CTemplate(sstring)
'    If Not currentconsult!allergies.count Then  
'       templ.Row("Unknown", "", "", "")
'    End If   
'    x = 0  'counter
'    For Each Item In currentconsult!allergies
'       If IsNull(item!nil_allergies_sensitivities) And x = 0 Then
'          If IsNull(item!allergen) Then  
'             templ.Row("Class", "Generic", "Reaction Type", "Details")
'             Inc x
'          End If 
'       Endif
'       ' class_name, generic, details, reaction_type
'       If item!nil_allergies_sensitivities = True Then
'          templ.Row("No known allergies or sensitivites")
'       Else
'          If Not IsNull(Item!allergen) Then 'non drug allergy
'             templ.Row("Non Drug Allergy:", item!allergen, "", "")
'          Else
'             templ.Row(Item!class_name, item!generic, item!reaction_type, item!details)
'          End If   
'       End If   
'    Next
'    templ.Table("allergies") 
'    sstring = "<table>" & templ.GetData() & "</table>"
'    sstring = Replace(sstring, tempstring, "")
'    tlAllergies.text = sstring
'    
' End

Public Sub cmbScriptTypes_Load()
   
   script_types = modUtilGUI.LoadCombo(cmbScriptTypes, modPrescribingDBI.Script_Types_Get(), "type")
   
End

Public Function Search_Scope_Set()
   '-------------------------------------------------------------------------------------------------------------
   ' Gets the search scope for the pbs drugs - not FStaffPreferencesPrescribing sets these on per-user basis
   ' PBS chapters
   ' "CS";"Section 100 (Chemotherapy Special Benefit)"
   ' "CT";"Section 100 (Chemotherapy Scheme)"
   ' "DB";"Doctor's Bag"
   ' "DS";"Dental (Special Pharmaceutical Benefits)"
   ' "DT";"Dental"
   ' "GE";"General"
   ' "GH";"Section 100 (Growth hormone)" Chapters_Create_Gui()
   ' "HB";"Section 100 (Highly Specialised Drugs) - Public Hospitals"
   ' "HS";"Section 100 (Highly specialised drugs)"
   ' "IF";"Section 100 (IVF/GIFT Treatment)"
   ' "MD";"Section 100 (Opiate Addiction Treatment)"
   ' "MF";"Section 100 (Botulinum Toxin Program)"False
   ' "OT";"Optometrist"
   ' "PL";"Palliative care"
   ' "PQ";"Paraplegic/Quadriplegic"
   ' "R1";"Repatriation"
   ' "SB";"Special Pharmaceutical Benefits"
   ' "SY";"Section 100 (Special Authority Item  Chapters = modPrescribingDBI.Chapters_Get()s) - Private Hospitals"
   ' "SZ";"Section 100 (Special Authority Items) - Public Hospitals"
   ' --------------------------------------------------------------------------------------------------------------
   
   drug_search_scope = New String[]
   drug_search_scope.add("GE")           'allow general  was 3,4,5
   drug_search_scope.add("R1")           'repatriation
   drug_search_scope.add("PL")           'palliative care
   drug_search_scope.add("SB")           'special benefits
   drug_search_scope.add("SZ") 
   drug_search_scope.add("HB") 
   ' Chapters = modPrescribingDBI.Chapters_Get()
   ' For Each chapter In chapters
   '    If modAdminDBI.Config_Get(chapter!chapter, False, False, modDBConnect.currentUser!fk_clinic) Then
   '       drug_search_scope.Add(chapter!chapter, drug_search_scope.count)
   '    Endif
   ' Next
   
End

Public Sub Script_items_Update(item As Collection)
   '------------------------------------------------------------
   'Adds as previously prescribed script item to today's scripts
   'and updates the list visually
   'The True flag tells the interaction checker to ignore
   'checking this re-prescribed medication against the patient's
   'existing medications
   '------------------------------------------------------------
   
   script_Items.add(item, script_items.Count)
   '  Interactions_Drug_Display(item, True)
   cvwPrescriptions_Refresh(script_items)
   Interactions_Refresh
   
End

Public Sub set_embedded(F As String)
   '----------------------------------------------------------
   'If this form is embeded from another form set flag
   'embeddedinform = either "Fclinical", "FInbox" or "FTasks"
   '---------------------------------------------------------
   
   embedded_in_form = F
   
End

Public Sub Reload()
   '---------------------------------------------------------------
   'Display scripts written this consultation, am assuming
   'that if saved to backend they have been printed, however
   'could have been saved 'no print', so perhaps change this flag
   'FIXME THIS WON'T ALWAYS WORK - IT SETS AN UNPRINTED TO A PRINTED
   'Reload the interactions noted for meds prescribed today
   '----------------------------------------------------------------
   
   currentconsult.Refresh("prescriptions_written")
   script_items = modUtil.Copy_Collection_Keyed_Sequentially(currentconsult!prescriptions_written)
   For Each script_item In script_items
      script_item!printed = True   'may not be true
   Next
   cvwPrescriptions_Refresh(script_items)            'show all meds prescribed today
   Interactions_Refresh()                           'aand summmary of interactions (if any)
   
   Drug_New()
   
End

Public Sub Settings_Save()
   
   Settings["FPrescriptions_" & Embedded_In_Form & "/HSplit_EditArea_Inner.Layout"] = HSplit_EditArea_Inner.Layout
   Settings["FPrescriptions_" & embedded_in_form & "/HSplit_DrugDisplay.Layout"] = HSplit_DrugDisplay.Layout
   Settings["FPrescriptions_" & embedded_in_form & "/HSplit_Interactions.Layout"] = HSplit_Interactions.Layout
   Settings["FPrescriptions_" & Embedded_In_Form & "/Vsplit_Script.Layout"] = Vsplit_Script.Layout
   
End

Public Sub Settings_Load()
   
   HSplit_DrugDisplay.Layout = Settings["FPrescriptions_" & embedded_in_form & "/HSplit_DrugDisplay.Layout", modUtilGUI.HSplit([1, 0])]
   Vsplit_Script.Layout = Settings["FPrescriptions_" & embedded_in_form & "/Vsplit_Script.Layout", modUtilGUI.VSplit([306, 258, 283])]
   HSplit_EditArea_Inner.Layout = Settings["FPrescriptions_" & Embedded_In_Form & "/HSplit_EditArea_Inner.Layout", modUtilGUI.HSplit([886, 287])]
   cvwPrescriptions.Font = Font[Settings["FPrescriptions_" & Embedded_In_Form & "/cvwPrescriptions.font", "DejaVu Sans,9"]]
   Generic_brands_split_layout = HSplit_DrugDisplay.Layout
   ' HSplit_Interactions.Layout = Settings["FPrescriptions_" & embedded_in_form & "/HSplit_Interactions.Layout", modUtilGUI.HSplit([1, 2])]
   
End

Public Sub Drug_Delete()
   '----------------------------------------------------------------------------------------------------------------
   'User has decided to delete something they have prescribed during the current consultation
   'If already saved > mark deleted in the back end (can un-delete these) and delete from scripts_written collection
   'If not saved just remove from the scripts_written collection
   'Then the lists in FClinical are updated.
   'As a drug already saved will have updated clin_prescribing.medications.last_date must roll back to the last
   'known date.
   '----------------------------------------------------------------------------------------------------------------
   
   Dim x As Integer
   Dim penultimate_date As Date
   Dim fk_prescribed As Variant
   Dim fk_medication As Variant
   
   cvwPrescriptions.MoveFirst
   For x = 1 To cvwPrescriptions.Count
      If cvwPrescriptions.Item.Selected = True Then
         'if ..... actually printed or ...... was saved no-print
         If script_items[cvwPrescriptions.Item.key]!prescribed.Exist("printed") Or script_items[cvwPrescriptions.Item.key].exist("printed") Then
            If script_items[cvwPrescriptions.Item.key]!prescribed.Exist("fk_prescribed") Then
               fk_prescribed = script_items[cvwPrescriptions.Item.key]!prescribed!fk_prescribed
               fk_medication = script_items[cvwPrescriptions.Item.key]!med!fk_medication
               modDBConnect.update("clin_prescribing.prescribed", Null, ["pk": script_items[cvwPrescriptions.Item.key]!prescribed!fk_prescribed, "deleted": True])
            End If
            If script_items[cvwPrescriptions.Item.key]!prescribed.Exist("pk") Then
               fk_prescribed = script_items[cvwPrescriptions.Item.key]!prescribed!pk
               fk_medication = script_items[cvwPrescriptions.Item.key]!med!pk
               modDBConnect.update("clin_prescribing.prescribed", Null, ["pk": script_items[cvwPrescriptions.Item.key]!prescribed!pk, "deleted": True])
            End If
            penultimate_date = modPrescribingDBI.Product_Get_Last_Prescribed(script_items[cvwPrescriptions.Item.key]!med!fk_generic_product, currentconsult!patient!fk_patient)
            If Not IsNull(penultimate_date)
               modDBConnect.update("clin_prescribing.medications", Null, ["pk": fk_medication, "last_date": penultimate_date])
            Else
               modDBConnect.update("clin_prescribing.medications", Null, ["pk": fk_medication, "deleted": True])
            End If
            modDBConnect.CommitTrans()
         End If
         script_items.Remove(x - 1)
      Endif
      cvwPrescriptions.MoveNext
   Next
   Print
   cvwPrescriptions.UnselectAll()
   cvwPrescriptions_Refresh(script_items)
   Medications_Add_Progress_Notes_Update_Prescribed_Today_list
   FClinical_Refresh()
   If embedded_in_form = "FInbox" Then
      Try FInbox.Medications_Refresh
   Endif
   
End

Public Sub Delete_Undo()
   '-------------------------------------------------------------
   'Undo's any delete done during the current consultation
   'FIXME when you do this add to Drug_Delete the ability to add
   'a not saved but deleted drug to the undo delete collection
   '-------------------------------------------------------------
   
End

Public Sub timer1_Timer()
   '------------------------------------------------------------------------------
   'If the timer is running, user is typing in either the brand or generic textbox
   '------------------------------------------------------------------------------
   
   If timer_count > 3 Then
      If bGenericSearch Then
         Generics_Get()
      Else
         Brands_Get()
      End If
   Endif
   
End

Public Sub Edit()
   '----------------------------
   'Edit a script written today
   'Fixme - wont work for an unsaved item
   '---------------------------
   
   Message.Info("Sorry, at the moment you can't edit a script item")
   Return
   
   cvwPrescriptions.MoveCurrent
   fk_item_prescribed = currentconsult!prescriptions_written[iCurrentScriptKey]!fk_item_prescribed
   fk_medication = currentconsult!prescriptions_written[iCurrentScriptKey]!fk_medication
   txtdate.text = currentconsult!prescriptions_written[iCurrentScriptKey]!date_on_script
   txtClass.text = currentconsult!prescriptions_written[iCurrentScriptKey]!class
   txtGeneric.text = currentconsult!prescriptions_written[iCurrentScriptKey]!generic
   txtBrand.text = currentconsult!prescriptions_written[iCurrentScriptKey]!brand
   txtStrength.text = currentconsult!prescriptions_written[iCurrentScriptKey]!strength
   txtInstructions.text = currentconsult!prescriptions_written[iCurrentScriptKey]!instruction
   TxtReason.text = currentconsult!prescriptions_written[iCurrentScriptKey]!prescribed_for
   txtQuantity.text = currentconsult!prescriptions_written[iCurrentScriptKey]!quantity
   txtRepeats.text = currentconsult!prescriptions_written[iCurrentScriptKey]!repeats
   lblRestrictions.text = currentconsult!prescriptions_written[iCurrentScriptKey]!restriction
   chkActive.Value = currentconsult!prescriptions_written[iCurrentScriptKey]!active
   chkPrintReason.value = currentconsult!prescriptions_written[iCurrentScriptKey]!prescribed!print_reason
   chkPostAuthority.value = chkPostAuthority!authority_post_to_patient
   chkReg24.value = currentconsult!prescriptions_written[iCurrentScriptKey]!reg24
   
End

Public Sub EditArea_TxtBox_KeyRelease()
   
   Select Case Last.tag
      Case "brand"
         Timer1.Enabled = True
         Inc timer_count
         bGenericSearch = False
      Case "generic"
         bGenericSearch = True
         Timer1.Enabled = True
         Inc timer_count
      Case "authority wording"
         If Not IsNull(drug!quantity) And txtRepeats.text <> "" Then
            If drug!restrictionflag <> "A" And drug!quantity < Val(txtRepeats.text) Then
               Authority_Increased_Quantity_Reason_Get()
            End If
         End If
   End Select
   
End

Public Sub Reset_Flags()
   
   fk_item_prescribed = Null
   pk_view = Null
   fk_company = Null          'fk_company + fk_generic_product is really equivalent to the non existant fk_brand
   fk_generic_product = Null
   pbscode = ""
   fk_prescribed_for = Null
   fk_instruction = Null
   fk_medication = Null
   fk_increased_quantity_authority_reason = Null
   print_status = ""
   restriction_code = ""
   restriction = ""
   bAuthority = False
   
End

Public Sub EditArea_Clear()
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_Inner)
   cProgressNote_Section = const.cSection_GeneralNotes
   cmbScriptTypes_Load
   With tlBrandsLike
      .text = ""
      .Visible = False
   End With
   With gvRestrictions
      .Rows.count = 0
      .Clear()
   End With
   tbFullPi.Enabled = False
   pnlcolumnview.Visible = False
   columnview1.Visible = False
   lblSearchResults.text = ""
   listview1.Visible = False
   chkReg24.value = False
   lblRestrictions.text = ""
   lblDrug.text = "Brand"
   txtdate.text = Format(currentconsult.GetConsultDate(), "dd/mm/yyyy")
   chkPrintReason.value = True
   cmbScriptTypes.index = -1
   bExit = False
   
End

Public Sub EditArea_Buttons_KeyPress()
   
   If key.code = key.return Then
      Select Case Last.tag
         Case "ok"
            tbOk.Enabled = False
            If Drug_Add() Then
               Drug_New() 'valid drug added to list
            End If
            tbOk.Enabled = True
         Case "save no print"
            Drug_Save_No_Print()
      End Select
   End If
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case tag
      Case "date"
         bKeyValid = modUtilGUI.AllowKeys(Const.AllowKeys_DateFormat, keycode)
      Case "repeats", "quantity"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "instructions"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_Letters_Numbers_slash_dash_period, keycode)
      Case "reason"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_Letters_Numbers_slash_apostrophe_dash, keycode)
      Case "approval number"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_Letters_Numbers, keycode)
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid
   
End

Public Sub Editarea_txtBox_KeyPress()
   '--------------------------------------------------------------
   'Validate the keypress according to the row on in the edit area
   'If down key was pressed and the drugs columnview (containing
   'either list of generics or brands is visible, then move the
   'focus down to the first member of this list
   '--------------------------------------------------------------
   
   If Not EditAreaTextbox_ExcludeKeys(key.code, Last.tag) Then    'validate key input first
      Stop Event                                                  'no good? don't show key output
      Return
   End If
   Select Case Key.Code
      Case Key.Down
         If HSplit_DrugDisplay.Visible = False Then
            If columnview1.count <> 0 Then
               pnlcolumnview.Visible = True
               With columnview1
                  .Visible = True
                  .MoveFirst()                                       'move to first drug
                  .SetFocus()                                        'make marquee visible
                  Try .Item.Selected = True                          'select it > this loads the brands
               End With
               Return
            End If
         End If
         Wait
         '-------------------------------------------
         'This will be when user searching for a drug
         '-------------------------------------------
         If pnlcolumnview.Visible And pnlDrugsGrid.Visible Then
            With Gridview1
               .row = 0
               .SetFocus()
            End With
         Endif
   End Select
   
End

Public Sub EditArea_Notify_Data_Change(flag As Boolean)
   '----------------------------------------------------
   'Hide or show the red outline around the editing area
   'red = there is data to be saved
   '----------------------------------------------------
   
   If flag Then
      Vbox_EditArea.Padding = 1
      Vbox_EditArea.Background = Color.red
      tbOk.Foreground = Color.Red
   Else
      Vbox_EditArea.Padding = 0
      Vbox_EditArea.Background = Color.white
      tbOk.Foreground = Color.black
   End If
   
End

Public Sub EditArea_TxtBox_LostFocus()
   
   If bexit Then Return
   Last.BackGround = Color.white
   Select Case Last.tag
      Case "date"
         If txtdate.text <> "" Then
            If Not modEditAreaHelpers.Valid_Date(txtDate) Then
               bExit = True
               txtdate.text &= " **INVALID DATE**"
               txtdate.SetFocus()
               bExit = False
            End If
         End If
      Case "brand"
         Timer1.stop()
      Case "reason"
         'note this needs to be both in here and EditArea_TxtBox_Activate
         If bUserWantsSpellCheck Then  
            bExit = True
            SpellChecker.init(TxtReason) 'can't use last because invoking spell checker > recursive lost_focus()
            SpellChecker.StartSpelling()
            bExit = False
         End If   
         If iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity Or drug!restrictionflag = "A" And Trim(txtAuthorityWording.text) = "" Then
            If Trim(txtAuthorityWording.text) = "" Then
               txtAuthorityWording.SetFocus()
            Else
               If Trim(txtApprovalNumber.text) <> "" Then
                  tbOk.SetFocus()
               Else
                  txtApprovalNumber.SetFocus()
               Endif
            Endif
         Else
            tbOk.SetFocus()
         End If
      Case "instructions" 'fixme bug, lost focus not tiggering for this.
         If bUserWantsSpellCheck Then  
            bexit = True
            SpellChecker.init(txtInstructions)
            SpellChecker.StartSpelling()
            bExit = False
         End If   
   End Select
   
   Last.pos = 0
   
End

Public Sub Spelling_DoCheck(tb As Textbox, tbForFocus As Textbox)
   'Bug here this is not triggering.
   'this routine currently not used
   
   SpellChecker.init(tb)
   SpellChecker.StartSpelling()
   tbForFocus.SetFocus()
   
End

Public Sub EditArea_TxtBox_Change()
   '--------------------------------------------------------------------
   'I've removed all the Last's - dangerous when the program uses timers
   '--------------------------------------------------------------------
   
   If bexit Then Return
   If Len(Last.text) = 0 Then pnlColumnView.Visible = False
   Select Case Last.tag
      Case "brand"
         If Trim(txtBrand.text) = "" Then
            Drug_New()
         Endif
      Case "approval number"
         '------------------------------------------------------
         'Drug should be already showing in the edit area
         'If user typing in an approval number, this should be
         'hence an increased quantity
         'fix me take into account patients pbs/rpbs status
         'If this drug is not listed as a PBS or rpbs authority
         'the of quantity is over that usually prescibed
         'tag this as an increased quantity authority
         'If user fails to do this, Drug_Valid() will pick it up
         'and throw them back to the quantity box
         '------------------------------------------------------
         If Not drug.count Then Return
         bexit = True
         txtApprovalNumber.text = UCase(txtApprovalNumber.text)
         bexit = False
         If iPBS_Script_Type <> const.pbs_script_type_pbs_authority Or iPBS_Script_Type <> const.pbs_script_type_rpbs_authority Then
            If Val(txtRepeats.text) > drug!quantity Then
               iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity
            Endif
         End If
      Case "quantity"
         'User is changing the quantity, is this increased quantity or PBS item
         If Not IsNull(drug!quantity) Then
            '---------------------------------------------------------------------------------
            'If not already an authority item and is on the pbs/rpbs restricted or unrestricted
            '----------------------------------------------------------------------------------
            If drug!restrictionflag = "A" Or drug!restrictionflag = "U" Or drug!restrictionflag = "R" Then             'not a pbs authority
               If Trim(txtQuantity.text) <> "" Then
                  If Val(txtQuantity.text) > drug!quantity Then
                     iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity
                     bExit = True
                     txtApprovalNumber.text = ""
                     cmbScriptTypes.Index = cmbScriptTypes.Find(sPBS_RPBS & " AUTHORITY INCREASED QUANTITY")
                     If txtAuthorityScriptNumber.text = "" Then
                        txtAuthorityScriptNumber.text = modPrescribingDBI.Authority_Number_Get_Next(modDBConnect.currentUser!fk_staff)
                     End If
                     bExit = False
                  Else
                     If drug!restrictionflag = "A" Then 'switch it back, user could have typed eg 60 > made back to 30
                        
                     Endif
                  End If
               End If
            End If
         End If
      Case "instructions"
         If Trim(txtInstructions.text) <> "" Then 
            Instructions_Expand_Text(txtInstructions)
         Else
            Instruction_Habits_Display
         End If   
      Case "authority wording"
         If Trim(txtAuthorityWording.text) = "" Then
            pnlcolumnview.Visible = False
         Endif
      Case "reason"
         teForSpelling.Text = txtReason.text
   End Select
   EditArea_Notify_Data_Change(True)
   
End

Public Sub Restrictions_Show()
   '--------------------------------------------------------------------------
   'As user clicks on a columnview row, show all restrictions for that pbscode
   'Show a drugs restriction details, these can be just restrictions of use
   'or authority indications, uses the pbscode (restriction.pbscode)
   '--------------------------------------------------------------------------
   
   Dim row As Integer = 0
   Dim pbscode As String
   Dim D As Collection
   
   Drug_Restrictions = New Collection
   textlabel1.text = ""
   pbscode = drug!pbscode
   With gvRestrictions
      .Clear()
      .Columns[0].width = .Width
      .Columns.count = 2
      .Columns[1].width = 0
      .Rows.count = 0
   End With
   textlabel1.width = gvRestrictions.Width
   For Each D In drugs                             'All drugs in the collectioni
      If Not IsNull(D!restriction) Then            'If drug has a restrciotn
         If D!pbscode = pbscode Then                'if the pbscode = same as that we are showing
            If Not Drug_Restrictions.Exist(D!restriction) Then  'if not already in the collection
               textlabel1.text = D!restriction
               textlabel1.text = Replace(textlabel1.text, "<p>", "")
               textlabel1.text = Replace(textlabel1.text, "</p>", "")
               gvRestrictions.Rows.Count = row + 1
               gvRestrictions.Rows[row].Height = textlabel1.Height
               gvRestrictions[row, 0].RichText = textlabel1.text
               gvRestrictions[row, 0].WordWrap = True
               gvRestrictions[row, 1].text = D!restriction_code
               Drug_Restrictions.Add(D!restriction, D!restriction)
               Inc row
            Endif
         End If
      End If
   Next
   
End

Public Sub Instructions_Expand_Text(txt As Textbox)
   '-----------------------------------------------------------
   'Expand common abbreviations, taking into account that
   'some of these could be part of an actual word eg ac or stat
   'user could have typed eg 1bd or 1 bd so string blanks.
   '-----------------------------------------------------------
   
   bexit = True
   If InStr(txt.text, "bd") Then
      txt.text = Replace(txt.text, "bd", "twice daily")
      If drug!restrictionflag = "A" Or drug!restrictionflag = "U" Or drug!restrictionflag = "R" Then
         If (Val(txtQuantity.Text) / 2 <= 15 And Val(txtQuantity.Text) > 4) And drug!quantity > 20 Then
            bExit = False  'this will cause EditArea_txtBox Change to figure out the script type and change flags
            txtQuantity.text = Str(Val(txtQuantity.Text) * 2)
            bExit = True
         Endif
      Endif
   End If
   txt.text = Replace(txt.text, "tds", "three times daily")
   txt.text = Replace(txt.text, "nocte", "at night")
   txt.text = Replace(txt.text, "qid", "four times daily")
   If InStr(txt.text, " ac ") Then
      txt.text = Replace(txt.text, "ac", "before meals")
   End If
   txt.text = Replace(txt.text, "prn", "as needed")
   If InStr(txt.text, " stat ") Then
      txt.text = Replace(txt.text, "stat", "immediately")
   End If
   modUtil.StripExtraBlanks(txt.text)                     ' eg 1<space><space>bd > 1<space>bd
   bexit = False
   
End

Public Sub EditArea_TxtBox_Activate()
   
   pnlcolumnview.Visible = False
   Select Case Last.tag
      Case "date"
         txtBrand.SetFocus()
      Case "class"
         txtBrand.SetFocus()
      Case "brand"
         If txtGeneric.Text <> "" Then
            txtInstructions.SetFocus()
         Else
            txtGeneric.SetFocus()
         End If
      Case "generic"
         txtInstructions.SetFocus()
      Case "instructions"
         txtReason.SetFocus()
         '  Spelling_DoCheck(txtInstructions, txtReason) 'bug this is not working.
      Case "reason"
         bExit = True
         SpellChecker.init(TxtReason) 'can't use last because invoking spell checker > recursive lost_focus()
         SpellChecker.StartSpelling()
         bExit = False
         If iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity Or drug!restrictionflag = "A" And Trim(txtAuthorityWording.text) = "" Then
            If Trim(txtAuthorityWording.text) = "" Then
               txtAuthorityWording.SetFocus()
            Else
               If Trim(txtApprovalNumber.text) <> "" Then
                  tbOk.SetFocus()
               Else
                  txtApprovalNumber.SetFocus()
               Endif
            Endif
         Else
            tbOk.SetFocus()
         End If
         
      Case "approval number"
         If lblRestrictions.text = "PBS AUTHORITY (Inc Qty)" Or lblRestrictions.text = "rpbs AUTHORITY (Inc Qty)" Then
            If Not (Val(txtRepeats.text) > drug!quantity) Then
               txtRepeats.SetFocus()
            End If
         Endif
      Case "quantity"
         txtRepeats.SetFocus()
      Case "repeats"
         If Not IsNull(drug!quantity) Then
            If (Val(txtQuantity.text) > drug!quantity) Then
               If Trim(txtReason.text) = "" Then
                  txtReason.SetFocus()
               Else
                  If iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity Or drug!restrictionflag = "A" And Trim(txtAuthorityWording.text) = "" Then
                     If Trim(txtAuthorityWording.text) = "" Then
                        txtAuthorityWording.SetFocus()
                     Else
                        If Trim(txtApprovalNumber.text) <> "" Then
                           tbOk.SetFocus()
                        Else
                           txtApprovalNumber.SetFocus()
                        Endif
                     Endif
                  End If
               End If
            Endif
         Else
            If Last.text <> "" Then
               If txtRepeats.text <> "" Then
                  tbOk.SetFocus()
               Endif
            Endif
         End If
      Case "authority wording"
         If Trim(txtApprovalNumber.text) = "" Then
            txtApprovalNumber.SetFocus()
         Endif
   End Select
   
End

Public Sub EditArea_TxtBox_GotFocus()
   
   Dim bExists As Boolean
   
   ReferenceHboxForTopColumnview = Last.parent.parent
   If Last.tag <> "restriction" Then Last.BackGround = Color.rgb(95, 255, 175)
   pnlcolumnview.Visible = False                           'user could have clicked on textbox whilst this list was showing
   With columnview1
      .Clear()
      .Visible = False
   End With
   Select Case Last.tag
      Case "instructions"
         HSplit_DrugDisplay.Visible = False
         lblSearchResults.Visible = False
         With pnlcolumnview
            .top = Vbox_EditArea_Inner.top + Last.parent.parent.top + Last.parent.height
            .left = Last.parent.Left + Vbox_EditArea_Inner.Padding
            .width = txtAuthorityWording.width
            .Visible = False
            .Raise
         End With
         
      Case "reason"
         HSplit_DrugDisplay.Visible = False
         With pnlcolumnview
            .top = Vbox_EditArea_Inner.top + Last.parent.parent.top + Last.parent.height
            .left = Last.parent.Left + Vbox_EditArea_Inner.Padding
            .width = txtAuthorityWording.width
            .Visible = False
            .Raise
         End With
         If Trim(TxtReason.text) = "" Then
            Try PrescribedFor_Habits_Get() 'bombs if drug null
         Else
            If Prescribed_For_Habits.count Then
               With columnview1
                  .clear
                  .Columns.count = 1
                  .tag = txtReason
               End With
               For Each habit In Prescribed_For_Habits
                  columnview1.Add(habit!pk_prescibed_for_habit, 0)
                  columnview1[habit!pk_prescibed_for_habit][0] = habit!prescribed_for
                  If Lower(Trim(TxtReason.text)) = Lower(habit!prescribed_for) Then
                     bexists = True
                  Endif
               Next
               If Not bexists Then
                  pnlcolumnview.Visible = True
                  columnview1.Visible = True
               End If
            End If
         Endif
         teForSpelling.text = txtReason.Text
      Case "generic"
         With pnlcolumnview
            .top = Vbox_EditArea_Inner.top + Last.parent.parent.top + Last.parent.height
            .left = Last.parent.Left + Vbox_EditArea_Inner.Padding
            .width = txtAuthorityWording.width
            .Visible = False
            .Height = Last.height * 8
            .Raise
         End With
         HSplit_DrugDisplay.Visible = True
      Case "brand"
         ' With pnlcolumnview
         '    .top = Vbox_EditArea_Inner.top + txtbrand.parent.parent.top + txtbrand.parent.height
         '    .left = txtbrand.parent.Left + Vbox_EditArea_Inner.Padding
         '    .width = txtAuthorityWording.width
         '    .Visible = False
         '    .Height = txtbrand.height * 8
         '    .Raise
         ' End With
         '     HSplit_DrugDisplay.Visible = True
         pnlColumnView_SetPosition_brand
   End Select
   
End

Public Sub pnlColumnView_SetPosition_brand()
   'used twice. When prescribing used in inbox for some reason the set focus not working    
   
   With pnlcolumnview
      .top = Vbox_EditArea_Inner.top + txtbrand.parent.parent.top + txtbrand.parent.height
      .left = txtbrand.parent.Left + Vbox_EditArea_Inner.Padding
      .width = txtAuthorityWording.width
      .Visible = False
      .Height = txtbrand.height * 8
      .Raise
   End With 
   HSplit_DrugDisplay.Visible = True
   
End

Public Sub Instruction_Habits_Display()
   '---------------------------------- 
   'Popup a list of instruction habits
   '---------------------------------- 
   
   Dim bexists As Boolean
   
   If Instruction_Habits.count Then
      With columnview1
         .clear
         .Columns.count = 1
         .tag = txtInstructions
      End With
      '-----------------------------------------------------------------------------
      'load the columnview with existing instructions for this drug
      'but only pop it up if what is in the txtInstruction dosn't match one of these
      '-----------------------------------------------------------------------------
      For Each habit In Instruction_Habits
         columnview1.Add(habit!pk_instruction_habit, 0)
         columnview1[habit!pk_instruction_habit][0] = habit!instruction
         If Lower(Trim(txtInstructions.text)) = Lower(habit!instruction) Then
            bexists = True
         Endif
      Next
      If Not bExists Then
         pnlcolumnview.Visible = True
         columnview1.Visible = True
      Else
         pnlcolumnview.Visible = False
         columnview1.Visible = False
      End If
   Endif
   
End

Public Sub Instruction_Habits_Show_Commonest()
   '---------------------------------------------------------------------
   'Show the commonest way the user has prescribed this drug and use that
   '---------------------------------------------------------------------  
   
   If IsNull(drug!fk_product) Then Return
   Instruction_Habits_Get
   For Each Habit In Instruction_Habits
      bExit = True
      txtInstructions.text = Habit!instruction
      bExit = False
      TxtReason.SetFocus()
      Break
   Next  
   
End

Public Sub Instruction_Habits_Get()
   '------------------------------------------------------------------------
   'Gets a collection of the users instructions for this drug
   'this is returned sorted descending, i.e the most common direction on top
   '------------------------------------------------------------------------
   
   If IsNull(drug!fk_product) Then Return
   Instruction_Habits = modPrescribingDBI.Instruction_Habits_Get(drug!fk_product)
   
End

Public Sub Instruction_Habits_Select()
   '----------------------------------------------------------------------------------------
   'User is selecting a reason for the prescription form the Prescribed_For_Habits collection
   '----------------------------------------------------------------------------------------
   
   columnview1.MoveCurrent
   txtInstructions.text = InStruction_Habits[columnview1.Item.key]!instruction
   tbOk.SetFocus()
   pnlcolumnview.Visible = False
   
End

Public Sub PrescribedFor_Habits_Get()
   '------------------------------------------------------------------------------------
   'Gets a collection of the way this drug was prescribed
   'this is returned sorted descending, i.e the most common way it was prescribed on top
   'so just auto insert this highest ranking one into the textbox
   '------------------------------------------------------------------------------------
   
   Prescribed_For_Habits = modPrescribingDBI.PrescribedFor_Habits_Get(drug!medication!fk_generic_product)
   
   For Each habit In Prescribed_For_Habits
      bExit = True
      TxtReason.text = habit!prescribed_for
      bExit = False
      tbOk.SetFocus()
      Break
   Next
   
End

Public Sub Prescribed_For_Habits_Select()
   '----------------------------------------------------------------------------------------
   'User is selecting a reason for the prescription form the Prescribed_For_Habits collection
   '----------------------------------------------------------------------------------------
   
   columnview1.MoveCurrent
   txtReason.text = Prescribed_For_Habits[columnview1.Item.key]!prescribed_for
   tbOk.SetFocus()
   pnlcolumnview.Visible = False
   
End

Public Sub gvRestrictions_DblClick()
   
   If drug!restrictionflag <> "A" Then
      If Not InStr(cmbScriptTypes.Text, "AUTHORITY") Then
         Return
      End If
   End If
   gvRestrictions_Click()
   If pnlcolumnview.Visible Then gridview1_DblClick()
   
End

Public Sub gvRestrictions_Click()
   
   If drug!restrictionflag <> "A" Then
      If Not InStr(cmbScriptTypes.Text, "AUTHORITY") Then
         Return
      End If
   End If
   If InStr(cmbScriptTypes.Text, "AUTHORITY") And gvRestrictions.Rows.Count = 0 Then Return
   
   If gvRestrictions.row = -1 Then gvRestrictions.row = 0
   restriction_code = gvRestrictions[gvRestrictions.row, 1].text
   txtAuthorityWording.text = gvRestrictions[gvRestrictions.row, 0].richtext
   txtAuthorityWording.pos = 0
   bexit = True
   If drug!streamlined Then
      txtApprovalNumber.text = restriction_code
   End If
   bExit = False
Catch
   Message.Info("Problem displaying the restriction")
   
End

Public Sub PBS_Show(drug As Collection)
   '-----------------------------------------------------------
   'FIXME can iPbs_Script_type be put as calculated field in the backend.
   'Shows the PBS status of the currently selected drug
   'Not until user selects an authority wording can we show
   'the streamlined, unless we just opt to show the first one?
   'fixme anomoly between const.pbs_script_type
   'these labels should be same as those in const and used from there
   '    see const:
   '    pbs_script_types[pbs_script_type_pbs] = "PBS"
   '    pbs_script_types[pbs_script_type_pbs_authority] = "PBS AUTHORITY"
   '    pbs_script_types[pbs_script_type_pbs_authority_streamlined] = "PBS AUTHORITY STREAMLINED"
   '    pbs_script_types[pbs_script_typFunctione_rpbs] = "rpbs"
   '    pbs_script_types[pbs_script_type_rpbs_authority] = "rpbs AUTHORITY"
   '    pbs_script_types[pbs_script_type_rpbs_authority_streamlined] = "rpbs AUTHORITY STREAMLINED"
   '    pbs_script_types[pbs_script_type_private] = "PRIVATE"
   '    pbs_script_types[pbs_script_type_section100] = "SECTION 100"
   '    pbs_script_types[pbs_script_type_bps_authority_increased_quantity] = "PBS AUTHORITY INCREASED QUANTITY"
   '    pbs_script_types[pbs_script_type_rpbs_authority_increased_quantity] = "rpbs AUTHORITY INCREASED QUANTITY"
   
   '-----------------------------------------------------------
   bexit = True
   Select Case drug!chapter & drug!restrictionflag     ' & drug!restriction_flag = "U", "R" or "A"
      Case "OTU"
         lblRestrictions.text = "PBS OPTOMETRIST"
         iPBS_Script_Type = const.pbs_script_type_pbs
      Case "OTR"
         lblRestrictions.text = "PBS OPTOMETRIST RESTRICTED"
         iPBS_Script_Type = const.pbs_script_type_pbs
      Case "GEU"
         ' lblRestrictions.text = "PBS"
         Select Case sPBS_RPBS
            Case "PBS"
               iPBS_Script_Type = const.pbs_script_type_pbs
            Case "RPBS"
               iPBS_Script_Type = const.pbs_script_type_rpbs
         End Select
         lblRestrictions.text = sPBS_RPBS
         
      Case "GER"
         Select Case sPBS_RPBS
            Case "PBS"
               iPBS_Script_Type = const.pbs_script_type_pbs
            Case "RPBS"
               iPBS_Script_Type = const.pbs_script_type_rpbs
         End Select
         lblRestrictions.text = sPBS_RPBS & " RESTRICTED"
         
      Case "GEA", "PLA"
         If drug!streamlined Then
            Select Case sPBS_RPBS
               Case "PBS"
                  iPBS_Script_Type = const.pbs_script_type_pbs_authority_streamlined
               Case "RPBS"
                  iPBS_Script_Type = const.pbs_script_type_rpbs_authority_streamlined
            End Select
            lblRestrictions.text = sPBS_RPBS & " AUTHORITY STREAMLINED" '[" & drug!restriction_code & "]"
            
            txtApprovalNumber.text = drug!restriction_code
            bAuthority = True
         Else
            Select Case sPBS_RPBS
               Case "PBS"
                  iPBS_Script_Type = const.pbs_script_type_pbs_authority
               Case "RPBS"
                  iPBS_Script_Type = const.pbs_script_type_rpbs_authority
            End Select
            lblRestrictions.text = sPBS_RPBS & " AUTHORITY"
            bAuthority = True
         End If
      Case "R1U"
         lblRestrictions.text = "RPBS"
         iPBS_Script_Type = const.pbs_script_type_rpbs
      Case "R1R"
         lblRestrictions.text = "RPBS RESTRICTED"
         iPBS_Script_Type = const.pbs_script_type_rpbs
      Case "R1A"
         If drug!streamlined Then
            lblRestrictions.text = "RPBS AUTHORITY STREAMLINED" ' [" & drug!restriction_code & "]"
            iPBS_Script_Type = const.pbs_script_type_rpbs_authority_streamlined
            bAuthority = True
         Else
            lblRestrictions.text = "RPBS AUTHORITY"
            iPBS_Script_Type = const.pbs_script_type_rpbs_authority_streamlined
            bAuthority = True
         End If
      Case Else 'fixme (NOT true eg HS =section 100 .... etc etc  FIX ME
         lblRestrictions.text = "PRIVATE"
         iPBS_Script_Type = const.pbs_script_type_private
   End Select
   bExit = True
   cmbScriptTypes.index = iPBS_Script_Type - 1
   cmbScriptTypes.Index = cmbScriptTypes.Find(lblRestrictions.text)
   
   bExit = False
   
End

Public Sub gvRestrictions_Init()
   
   gvRestrictions.Rows.count = 0
   gvRestrictions.Clear()
   
End

Public Sub Gridview1_Keypress()
   
   Select Case key.Code
      Case key.Return
         gridview1_DblClick()
   End Select
   
End

Public Sub Gridview1_Select()
   '-------------------------------------------
   'User has clicked on a row in the drugs list
   'Show any brand associated with this
   'FIXME for ian, put in dont_show_brands_list
   '-------------------------------------------
   
   If gridview1.Column > 0 Then 
      gridview1.column = 0
      Return
   End If
   HSplit_DrugDisplay.Layout = [HSplit_DrugDisplay.width - HSplit_DrugDisplay.width / 5, HSplit_DrugDisplay.width / 5]
   gridrow = gridview1.Row
   drug = unique_drugs[gridrow]
   pk_view = unique_drugs[gridrow]!pk_view
   Select Case Gridview1.tag.tag
      Case "generic", "brand"
         Restrictions_Show()
         If Gridview1.tag.tag = "generic" Then  'bug
            Brands_For_Generic_Show()              'get the brands for this generic, show these
         End If
   End Select
   
End

Public Sub Brands_For_Generic_Show()
   '--------------------------------------------------------------------------------
   'Fetch list of brands corresponding to the generic shown in the popup columnview1
   'from drugs.vwDistinctBrandsForGenericProduct, set marquee to the first one in the
   'list. cvwBrands.item.key = pk_view = drugs.brands.pk
   '--------------------------------------------------------------------------------
   
   tlBrandsLike.text = "<B>Brands Like:</B> "
   Inc Application.Busy
   brands = modPrescribingDBI.Brands_For_Generic_Get(unique_drugs[gridview1.row]!generic, unique_drugs[gridview1.row]!fk_product)
   tlBrandsLike.Visible = True
   For Each brand In brands
      tlBrandsLike.text &= Left(brand!brand) & Lower(Right(brand!brand, Len(brand!brand) - 1)) & ","
      lblMeasure.text = brand!brand
   Next
   If brands.count Then
      tlBrandsLike.text = Left(tlBrandsLike.text, -1)
   Endif
   Dec Application.Busy
   
End

Public Sub Gridview1_DblClick()
   
   '---------------------------------------------------------------------
   'User has double clicked (or pressed enter) on the gridview1
   'According to whether we've searched on a brand or generic, transfer
   'the drug to the editing area, then remove the panel with the gridview
   '------------------------------------------------------------------------
   If Gridview1.row = -1 Then Return
   Select Case Gridview1.tag.tag 'don't make me 'last'
      Case "brand", "generic"
         Drug_Select()
      Case "authority wording"
         Authority_Increased_Quantity_Reasons_Select()
      Case "reason"
         Prescribed_For_Habits_Select()
      Case "instructions"
         Instruction_Habits_Select()
   End Select
   pnlColumnView.visible = False
   
End

Public Sub Generics_Get()
   '-------------------------------------------------------------------
   'User has typed in txtGenerics, i.e wishes to search by generic name
   'Pop up the columnview with generic name + strength + form + repeats
   'at the end of this routine a list of drugs may be showing, but the
   'cursor remains on the txtGeneric textbox unless user then arrows
   'down to this list, or clicks on it.
   '-------------------------------------------------------------------
   
   Dim last_drug As String 'drug+quantity+repeats
   Dim onrow As Integer
   Dim iWidestGenericName As Integer
   Dim iWidestFormName As Integer
   Dim iWidestPBStype As Integer
   Dim generics As String[]
   Dim strengths As String[]
   Dim sString As String
   Dim sFontHeight As Integer = Gridview1.Font.Height
   Dim x As Integer
   
   Timer1.Stop()                                                  'stop searching
   pnlcolumnview.Visible = False                                'holds the drug grid gridview1
   With gridview1                                               'clear the popup columnview
      .Clear()
      .Columns.count = 3
      .Columns[0].Alignment = Align.TopLeft
      .Columns[1].Alignment = Align.TopLeft
      .Columns[2].Alignment = Align.TopLeft
      .Rows.count = 1
   End With
   lblSearchResults.text = ""
   If Len(Trim(txtGeneric.text)) < 3 Then Return
   '-----------------------------------------------------------------------------------------------------------------------------------------------------
   'find the generics, heaps more rows for these than for brands
   ' Drugs_Search_By_Generic(generic As String, Optional chapters As String[], Optional limit As Variant = Null, Optional bInstrSearch As Boolean = True)
   '-----------------------------------------------------------------------------------------------------------------------------------------------------
   Inc Application.Busy
   temp_drugs = modPrescribingDBI.Drugs_Search_By_Generic(Trim(txtGeneric.text), drug_search_scope)  ' limit ok, get all matching generics from vwDrugs
   drugs = modUtil.Copy_Collection_Keyed_Sequentially(temp_drugs)
   unique_drugs = New Collection
   If drugs.count Then                                            'found some?
      For Each drug In drugs                                 'then put into the columnview
         If Not InStr(Lower(drug!restriction), " base-priced") Then
            If drug!max_rpt <> 11 Then
               If last_drug <> drug!generic & drug!form & drug!strength & " " & drug!display_packsize & " " & Str(drug!quantity) & Str(drug!max_rpt) & drug!restrictionflag & CBool(drug!streamlined) Then
                  last_drug = drug!generic & drug!form & drug!strength & " " & drug!display_packsize & " " & Str(drug!quantity) & Str(drug!max_rpt) & drug!restrictionflag & CBool(drug!streamlined)
                  onrow = gridview1.Rows.count - 1
                  unique_drugs.Add(drug, onrow)
                  generics = Split(drug!generic, ";")                'get string array of generics 1>n, we will display these vertically in column 2
                  '-----------------------------------------------------------------------------------------
                  'Keep track of the width of the text we are displaying
                  'later, gridview1 column1 width is set to the wider of the widest brand or the widest form
                  '-----------------------------------------------------------------------------------------
                  iWidestFormName = Max(gridview1.Font.TextWidth(drug!form) + 20, iWidestFormName)    'and the widest of all the forms eg 'tablet'
                  '--------------------------------------------------------------------------------------------------------------
                  'Now for column 2 which will contain one or more generics and/or their strength, stacked vertically for example
                  'codeine phosphate 30mg
                  'paracetamol 500mg
                  'note that there is no one on one match between  generics[] and strengths[] can have generic & no strength
                  'or 3 generics and 1 strength (because we display stuff like test strips etc
                  'Here we also work out which generic is the widest and adjust the whole col 2 to that width
                  'and we roughly work out how high this particular row must be given the generic count
                  'If there is only 1 generic, brand will still need roughly two rows (see above)
                  '--------------------------------------------------------------------------------------------------------------
                  gridview1[onrow, 0].Alignment = Align.TopLeft 'don't know why its needed here, but otherwise dosn't align
                  x = 0
                  gridview1[onrow, 0].WordWrap = True
                  If generics.count = 1 Then
                     gridview1[onrow, 0].richtext &= "<B>" & modStrings.Capitalise_Words_In_String(generics[0]) & "</B>"
                     gridview1[onrow, 0].richtext &= " " & drug!display_strength
                     iWidestGenericName = Max(gridview1.Font.TextWidth(generics[0]) + gridview1.Font.TextWidth(drug!display_strength) + 80, iWidestGenericName)
                  Else
                     Try strengths = Split(drug!display_strength, "-", "", True)           'if strengths exist get string array of those,display in column 2 with the generic
                     For Each sSTring In generics                                               'eg amoxycillin, clavulinate
                        gridview1[onrow, 0].richtext &= "<B>" & modStrings.Capitalise_Words_In_String(sSTring) & "</B>"    'eg amoxycillin
                        If x < strengths.count Then    'if count=1 and x now 2 > will crash
                           gridview1[onrow, 0].richtext &= " " & strengths[x]               'row now amoxycillin 400mg/5ml
                           iWidestGenericName = Max(gridview1.Font.TextWidth(sSTring & " ") + gridview1.Font.TextWidth(strengths[x]) + 80, iWidestGenericName)
                           gridview1[onrow, 0].richtext &= "<BR>"                                 'start new row
                        Else
                           iWidestGenericName = Max(gridview1.Font.TextWidth(sSTring) + 10, iWidestGenericName)
                        End If
                        Inc x
                     Next
                  End If
                  If Right(gridview1[onrow, 0].richtext) = "<BR>" Then
                     gridview1[onrow, 0].richtext = Left(gridview1[onrow, 0].richtext, Len(gridview1[onrow, 0].richtext) - 4)
                  End If
                  'PLEASE DO NOT REMOVE THESE COMMENTED OUT ROWS
                  If generics.Count = 1 Then                                  'generic needs only 1 row height but
                     gridview1.Rows[onrow].Height = sFontHeight * 2.2         'brand = Brand <BR> (form) which needs two with bit of space to spare
                  Else
                     gridview1.Rows[onrow].Height = sFontHeight * (generics.Count + 0.5)   'if > 1 generic, use this height for the entire row
                  Endif
                  '    gridview1.Rows[onrow].Height = -1
                  '--------------------------
                  'Column 1 = strength + quantity and repeats
                  '--------------------------
                  gridview1[onrow, 1].Alignment = Align.TopLeft
                  If Not IsNull(drug!pbscode) Then
                     If Not IsNull(drug!display_packsize) Then
                        gridview1[onrow, 1].text = drug!display_packsize & " x "
                     Endif
                     gridview1[onrow, 1].text &= Str(drug!quantity) & " Rpt:" & drug!max_rpt
                  Else
                     'it is a private drug
                     gridview1[onrow, 1].text = drug!display_packsize & " " & Str(drug!pack_size) & " Rpt:0"
                  End If
                  gridview1[onrow, 2].Alignment = Align.TopLeft
                  gridview1[onrow, 2].Richtext = drug!pbs_type
                  iWidestPBStype = Max(gridview1.Font.TextWidth(drug!pbs_type) + 30, iWidestPBStype)
                  If drug!form <> "other" Then
                     gridview1[onrow, 0].Richtext &= "<BR>(" & drug!form & ")"
                  End If
                  iWidestGenericName = Max(iWidestFormName, iWidestGenericName)
                  Inc gridview1.Rows.Count
               End If
            End If
         End If
      Next
      Dec Gridview1.Rows.Count
      '--------------------------------------------------------------------------------
      'Finally if we have drugs, set the column widths for the grid and make it visible
      '--------------------------------------------------------------------------------
      If gridview1.Rows.Count Then
         pnlcolumnview.Visible = True
         gridview1.Columns[0].width = iWidestGenericName  'the generic name
         gridview1.Columns[1].width = 120                 'quantity and repeats
         gridview1.Columns[2].width = iWidestPBStype      'pbs details
         gridview1.tag = txtGeneric
         lblSearchResults.text = Str(drugs.count) & " drugs were found"
      End If
   Endif
   
   lblSearchResults.text = Str(unique_drugs.count) & " drugs were found" 'ie grid rows
   Dec Application.Busy
Catch
   modUtilGUI.ReportError(Error.text, Error.Backtrace)
   Dec Application.Busy
   
End

Public Sub Brands_Get()
   '--------------------------------------------------------------------------------------------------------
   'get all brands like search text
   'Notes re setting the column sizes
   '  - This seems inordinately complicated so if you have an easier way do it
   '  - column 1 of the grid = Brandname <BR> form - as the form can sometimes be longer than the brand
   '     we keep the max of those two to be width of column 1
   '  - column 2 (generic) = genericname1 <BR> genericname 2 <BR> etc, so we amke col 2 the widest of these
   '
   '-------------------------------------------------------------------------------------------------------
   
   Dim last_drug As String 'drug+quantity+repeats
   Dim onrow As Integer
   Dim iWidestGenericName As Integer
   Dim iWidestBrandName As Integer
   Dim iWidestFormName As Integer
   Dim iWidestPBStype As Integer
   Dim generics As String[]
   Dim strengths As String[]
   Dim sString As String
   Dim sFontHeight As Integer = Gridview1.Font.Height
   Dim x As Integer
   
   lblMeasure.font.Name = gridview1.font.Name
   lblMeasure.Font.Size = gridview1.Font.Size
   Timer1.Stop()   'stop searching              ' If generics.Count = 1 Then                                  'generic needs only 1 row height but
   pnlcolumnview.Visible = False                                'holds the drug grid gridview1
   With gridview1                                               'clear the popup columnview
      .Clear()
      .Columns.count = 4
      .Columns[0].Alignment = Align.TopLeft
      .Columns[1].Alignment = Align.TopLeft
      .Columns[2].Alignment = Align.TopLeft
      .Columns[3].Alignment = Align.TopLeft
      .Rows.count = 1
   End With
   lblSearchResults.text = ""
   'brand search, no need for brands list
   If Trim(txtBrand.text) = "" Then Return
   Inc Application.Busy
   temp_drugs = modPrescribingDBI.Brands_Get(Trim(txtbrand.text), drug_search_scope)
   drugs = modUtil.Copy_Collection_Keyed_Sequentially(modPrescribingDBI.Brands_Get(Trim(txtbrand.text), drug_search_scope))  'ok, get all matching brands from vwDrugs
   unique_drugs = New Collection
   If drugs.count Then
      For Each drug In drugs                                      'then put into the columnview
         If Not InStr(Lower(drug!restriction), " base-priced") Then
            If drug!max_rpt <> 11 Then
               If last_drug <> drug!brand & drug!form & drug!strength & Str(drug!quantity) & Str(drug!max_rpt) & drug!restrictionflag & CBool(drug!streamlined) Then
                  last_drug = drug!brand & drug!form & drug!strength & Str(drug!quantity) & Str(drug!max_rpt) & drug!restrictionflag & CBool(drug!streamlined)
                  onrow = gridview1.Rows.count - 1
                  unique_drugs.Add(drug, onrow)
                  generics = Split(drug!generic, ";")                'get string array of generics 1>n, we will display these vertically in column 2
                  '-----------------------------------------------------------------------------------------
                  'Keep track of the width of the text we are displaying
                  'later, gridview1 column1 width is set to the wider of the widest brand or the widest form
                  '-----------------------------------------------------------------------------------------
                  lblMeasure.text = drug!brand & "       "
                  iWidestBrandName = Max(gridview1.Font.TextWidth(drug!brand) + 20, iWidestBrandName) 'keep the widest of all the brands
                  iWidestBrandName = Max(lblMeasure.Width, iWidestBrandName)
                  
                  iWidestFormName = Max(gridview1.Font.TextWidth(drug!form) + 20, iWidestFormName)    'and the widest of all the forms eg 'tablet'
                  lblMeasure.text = drug!form & "       "
                  iWidestFormName = Max(lblMeasure.Width, iWidestFormName)
                  iWidestBrandName = Max(iWidestBrandName, iWidestFormName)                           'if form width > brand width
                  '----------------------------------------------------
                  'the brand column = column 1 will now look like this:
                  ' Ceclor CD in bold text
                  ' (tablets) in normal text
                  ' ---------------------------------------------------
                  gridview1[onrow, 0].Richtext = "<B>" & modStrings.Capitalise_Words_In_String(drug!brand) & "</B><BR>"
                  gridview1[onrow, 0].Alignment = Align.TopLeft 'otherwise dosn't align
                  '--------------------------------------------------------------------------------------------------------------
                  'Now for column 2 which will contain one or more generics and/or their strength, stacked vertically for example
                  'codeine phosphate 30mg
                  'paracetamol 500mg
                  'note that there is no one on one match between  generics[] and strengths[] can have generic & no strength
                  'or 3 generics and 1 strength (because we display stuff like test strips etc
                  'Here we also work out which generic is the widest and adjust the whole col 2 to that width
                  'and we roughly work out how high this particular row must be given the generic count
                  'If there is only 1 generic, brand will still need roughly two rows (see above)
                  '--------------------------------------------------------------------------------------------------------------
                  gridview1[onrow, 1].Alignment = Align.TopLeft 'don't know why its needed here, but otherwise dosn't align
                  x = 0
                  gridview1[onrow, 1].WordWrap = True
                  If drug!form <> "other" Then
                     gridview1[onrow, 1].Richtext &= "<B>" & drug!form & ""
                  End If
                  
                  If generics.count = 1 Then
                     gridview1[onrow, 1].richtext &= " " & drug!display_strength & "</B><BR>"
                     gridview1[onrow, 1].richtext &= modStrings.Capitalise_Words_In_String(generics[0])
                     If Not (drug!fk_form = 59 Or drug!fk_form = 7) Then
                        gridview1[onrow, 1].richtext &= " " & drug!display_packsize
                     Endif
                     iWidestGenericName = Max(gridview1.Font.TextWidth(generics[0]) + gridview1.Font.TextWidth(drug!display_strength & " " & drug!display_packsize) + 20, iWidestGenericName)
                  Else
                     gridview1[onrow, 1].richtext &= "</B><BR>"
                     Try strengths = Split(drug!display_strength, "-", "", True)                       'if strengths exist get string array of those,display in column 2 with the generic
                     For Each sSTring In generics                                              'eg amoxycillin, clavulinate
                        gridview1[onrow, 1].richtext &= modStrings.Capitalise_Words_In_String(sSTring)     'eg amoxycillin
                        If strengths.count Then
                           If x <= strengths.count - 1                                         'some drugs have multiple generics but 1 strengh for 1 generic
                              If Not IsNull(strengths[x]) Then
                                 gridview1[onrow, 1].richtext &= " " & strengths[x]                'row now amoxycillin 400mg/5ml
                                 iWidestGenericName = Max(gridview1.Font.TextWidth(sSTring & " ") + gridview1.Font.TextWidth(strengths[x]) + 40, iWidestGenericName)
                              End If
                              gridview1[onrow, 1].richtext &= "<BR>"                                 'start new row
                           End If
                        Else
                           iWidestGenericName = Max(gridview1.Font.TextWidth(sSTring) + 10, iWidestGenericName)
                        End If
                        Inc x
                     Next
                  End If
                  If Right(gridview1[onrow, 1].richtext) = "<BR>" Then
                     gridview1[onrow, 1].richtext = Left(gridview1[onrow, 1].richtext, Len(gridview1[onrow, 1].richtext) - 4)
                  End If
                  'PLEASE DO NOT REMOVE THESE COMMENTED OUT ROWS
                  If generics.Count = 1 Then                                  'generic needs only 1 row height but
                     gridview1.Rows[onrow].Height = sFontHeight * 2.2         'brand = Brand <BR> (form) which needs two with bit of space to spare
                  Else
                     gridview1.Rows[onrow].Height = sFontHeight * (generics.Count + 1.5)   'if > 1 generic, use this height for the entire row
                     ' gridview1.Rows[onrow].Height = -1
                  Endif
                  '--------------------------
                  'Column 3 = strength + quantity and repeats
                  '--------------------------
                  gridview1[onrow, 2].Alignment = Align.TopLeft
                  If Not IsNull(drug!pbscode) Then
                     gridview1[onrow, 2].text = Str(drug!quantity) & " Rpt:" & drug!max_rpt
                  Else
                     'it is a private drug
                     gridview1[onrow, 2].text = Str(drug!pack_size) & " Rpt:0"
                  End If
                  gridview1[onrow, 3].Alignment = Align.TopLeft
                  gridview1[onrow, 3].Richtext = drug!pbs_type
                  iWidestPBStype = Max(gridview1.Font.TextWidth(drug!pbs_type) + 20, iWidestPBStype)
                  Inc gridview1.Rows.Count
               End If
            End If
         End If
      Next
      Dec Gridview1.Rows.Count
      '--------------------------------------------------------------------------------
      'Finally if we have drugs, set the column widths for the grid and make it visible
      '--------------------------------------------------------------------------------
      lblSearchResults.text = Str(unique_drugs.count) & " drugs were found" 'ie grid rows
      If gridview1.Rows.Count Then
         pnlcolumnview.Visible = True
         columnview1.Visible = False  'fixme remove me once removed all references to this
         gridview1.Columns[0].width = Min(iWidestBrandName, gridview1.width / 3)    'the brand can be so wide it could take up the whole width
         gridview1.Columns[1].width = Min(iWidestGenericName, 200) ' pnlcolumnview.width - 60 - iWidestPBStype 'generic & strength stuff
         gridview1.Columns[2].width = 60
         gridview1.Columns[3].width = iWidestPBStype      'pbs details
         gridview1.tag = txtBrand
      End If
   Endif
   Dec Application.Busy
Catch
   modUtilGUI.ReportError(Error.text, Error.Backtrace)
   
End

Public Sub Print_Content()
   '------------------------------------------------------------------------------------------
   'This is called from FClinical MainToolbar_Click(). We can't call the print routine Print()
   'as Print Is A gambas keyword The behaviour of this differs from other forms as here,
   'the drugs have to be saved to the backend before printing
   '----------------------------------------------------------------------------------
   
   If drug.count Then                                                       'if drug collectin populated there is drug in edit area
      If Not Drug_Add() Then Return                                         'try and save drug in the edit area
   End If   
   Save()                                                                'Saves the drug to back end then prints
   
End

Public Sub Drug_Print()
   
   Print_Script_Items(script_items)
   
End

Public Sub Drug_Select()
   '----------------------------------------------------------------------
   'User is picking a drug from the popup columnview
   'FIXME REMOVE VARIABLES ONLY LOAD ONES FOR DISPLAY
   'the drug collection consists of this:
   'drugs!med whose data will be saved to clin_prescibing.medications
   'drugs!prescibed whose data will be saved to clin_prescribing.prescibed
   'drugs!fields = all fields for the drug, mainly used for display
   'Fill the edit area with the drugs details, the brand selected (or if
   'none - the first brand on the list
   'try and auto-fill the instruction from the habits table and then put
   'cursor onto the instructions textbox. This will the auto-fill in the
   'instructions for the drug if previously described (or the best guess)
   'fixme triggered by clicking on a brand for a generic, the wrong
   'underlying fk_product will be selected.
   'fixme bug here gridview1.row can be -1
   '-----------------------------------------------------------------------
   
   Dim med As CRow                                     'cRow allows eg Med.Save(..)
   Dim sMsg As String
   Dim allergic_reaction As Collection
   
   gridrow = gridview1.row
   If bGenericSearch = True Then
      drug = unique_drugs[gridrow]
      txtBrand.text = drug!brand
      fk_brand = drug!fk_brand
   Else
      drug = unique_drugs[gridrow]
      txtBrand.text = drug!brand
      fk_brand = drug!fk_brand
   End If
   Interactions_Drug_Display(drug, True)  'True = currently selecting a drug to prescribe
   Interactions_Food_Display(drug, True)  'True = currently selecting a drug to prescribe
   If Not IsNull(drug!product_information_filename) Or Not IsNull(drug!product_information_filename_user) Then
      tbFullPi.Enabled = True
   Else
      tbFullPi.Enabled = False
   End If
   If currentconsult!allergy_class_codes.Exist(drug!class_code) Then                                          'is patient allergic to this drug?
      sMsg = modAllergyDBI.Allergy_Warning(currentconsult, drug) & "\n\nAre you sure you want to continue?"  
      If Message.Warning(sMsg, "Yes", "No") = 2 Then
         Drug_New()
         Return
      End If
   Endif
   med = New CRow                                      'this will be saved in drug_save()
   med!fk_generic_product = drug!fk_product
   drug!medication = med
   bexit = True
   txtGeneric.text = drug!generic                      'e.g atenolol
   txtGeneric.pos = 1                                  'make sure stem of generic showing
   txtBrand.pos = 1                                    'make sure stem of brand showing
   txtClass.text = drug!class                          'fixme
   If drug!form <> "other" Then
      txtStrength.text = Trim(drug!display_strength & " " & drug!display_packsize & " " & drug!form)
   Else
      txtStrength.text = Trim(drug!display_strength & " " & drug!display_packsize)
   End If
   txtStrength.pos = 1
   If Not IsNull(drug!quantity) Then
      txtQuantity.text = drug!quantity
   Else
      Try txtQuantity.text = drug!pack_size 'private drugs
   End If
   If Not IsNull(drug!max_rpt) Then
      txtRepeats.text = drug!max_rpt
   Else
      txtRepeats.text = 0
   End If
   ' ----------------------------------------------------------------------------
   'If an authority drug, show the restrictions
   'when the user clicks on the restrictions list, if it is streamlined, then the
   'authority streamlined number is put into txtApprovalNumber
   '------------------------------------------------------------------------------
   If drug!restrictionflag = "A" Then                    'if an authority drug show restrictions
      gvRestrictions_Click()
      If txtAuthorityScriptNumber.text = "" Then
         txtAuthorityScriptNumber.text = modPrescribingDBI.Authority_Number_Get_Next(modDBConnect.currentUser!fk_staff)
      End If
      cmbScriptTypes.Clear()
      If drug!streamlined Then
         cmbScriptTypes.Add(sPBS_RPBS & " AUTHORITY STREAMLINED", 0)
      Else
         cmbScriptTypes.Add(sPBS_RPBS & " AUTHORITY", 0)
      End If
      cmbScriptTypes.Add(sPBS_RPBS & " AUTHORITY INCREASED QUANTITY", 1)
      cmbScriptTypes.Add("PRIVATE", 2)
   Else
      cmbScriptTypes.Clear()
      If drug!restrictionflag = "R" Then
         
         cmbScriptTypes.Add(sPBS_RPBS & " RESTRICTED", 0)
      Else
         cmbScriptTypes.Add(sPBS_RPBS, 0)
      End If
      cmbScriptTypes.Add(sPBS_RPBS & " AUTHORITY INCREASED QUANTITY", 1)
      cmbScriptTypes.Add("PRIVATE", 2)
   End If
   PBS_Show(drug)
   ' Try Instruction_Habits_Get()                        'get commonest direction, set focus to txtReason
   Try Instruction_Habits_Show_Commonest()                        'get commonest direction, set focus to txtReason
   bexit = False
   If Trim(txtInstructions.text) = "" Then
      txtInstructions.SetFocus()
   Endif
   
End

Public Sub EditArea_Buttons_Click()
   
   Dim sProductInformationFilename As String
   
   Select Case Last.tag
      Case "wipe instruction history"
         If IsNull(drug!fk_product) Then Return
         Message.title = "Deleting auto-instruction history "
         If Message.Warning("If you continue,  you will remove all the history of instructions for this drug. EasyGP will or couse re-learn your habits as  you continue to prescribe.", "Wipe History", "Cancel") = 2 Then Return 
         modPrescribingDBI.Instruction_Habit_Delete(drug!fk_product)
         modDBConnect.CommitTrans
      Case "scope"
         columnview1.Visible = True
         Return
         With FPrescribingScope
            .Init()
            .ShowModal()
         End With
      Case "print in inbox"
         Print_Content()
      Case "new"
         Drug_New()
      Case "ok"
         '----------------------------------------------------------
         'All drugs from the editing area are added to the drug list
         'but not printed until the print button is clicked
         'fixme, perhaps making authorities save and print at the
         'same time would be good, as the doctor may have to ring
         'up for a number and this would be more efficient
         '---------------------------------------------------------
         tbOk.Enabled = False
         If Drug_Add() Then
            Drug_New() 'valid drug added to list
         End If
         tbOk.Enabled = True
      Case "save no print"
         Drug_Save_No_Print()
      Case "product information"
         If drug.count Then
            If Not IsNull(drug!product_information_filename_user) Then
               sProductInformationFilename = drug!product_information_filename_user
            Else
               sProductInformationFilename = drug!product_information_filename
            End If
            If sProductInformationFilename = "" Then
               Message.title = "Drug Product Information"
               Message.Info("This drug currently either has no product information, or it has not been allocated.")
               Return
            Endif
            Product_Information_Full_Show(sProductInformationFilename, drug!brand)
         End If
   End Select
   
End

Public Sub Product_Information_Full_Show(filename As String, drug_name As String)
   
   Try FClinical.Editor_ShowPage_External("drugs browser", drug_name, modAdminDBI.Config_Get("product_information_directory", "", Null, modDBConnect.currentUser!fk_clinic) &/ filename)
   If Error Then
      Message.Info("No product information was found for this drug")
   Endif
   
End

Public Sub Medications_Add_Progress_Notes_Update_Prescribed_Today_list()
   
   modPrescribingDBI.Medication_update_Progress_notes(currentconsult)
   
End

Public Sub Drug_Save_No_Print()
   
   If Not Drug_Add() Then Return
   cvwPrescriptions.MoveLast()
   Drug_Save(script_items[cvwPrescriptions.Item.key])
   script_items[cvwPrescriptions.Item.key]!printed = True
   cvwPrescriptions.UnselectAll()
   cvwPrescriptions_Refresh(script_items)                               'refresh list without reloading
 '  Medications_Add_Progress_Notes_Update_Prescribed_Today_list
   FClinical_Refresh()
   If embedded_in_form = "FInbox" Then
      Try FInbox.Medications_Refresh
   Endif
   Drug_New
   
End

Public Sub Drug_Add(Optional bSaveItemNoPrint As Boolean = False) As Boolean
   '---------------------------------------------------------------------------------------------------------
   'Script items are added to the list under the editing area, and printed en-mass whenever
   'the user elects to do this - 3 items on a script for 'like' items e.g if all pbs, all private
   'Returns true flag if sucessfully added to the list
   '---------------------------------------------------------------------------------------------------------
   ' CREATE TABLE clin_prescribing.prescribed
   ' (
   '   pk serial NOT NULL,
   '   fk_consult integer NOT NULL, -- foreign key to clin_consult.consult table
   '   fk_medication integer NOT NULL,
   '   fk_brand uuid,
   '   date_on_script date NOT NULL, -- The actual date on the script may not be the consulation date, can be back/forwarded dated,...
   '   repeats integer NOT NULL DEFAULT 0, -- The actual number of repeats...
   '   quantity integer NOT NULL, -- The quantity on the script...
   '   fk_instruction integer NOT NULL,
   '   fk_prescribed_for integer,
   '   pbscode text,
   '   restriction_code text,
   '   reg24 boolean DEFAULT false, -- If true reg24 allows us to tell the...
   '   authority_script_number integer, -- the pbs requires a unique script number for an authority item, pretty stupid, but a number that...
   '   authority_approval_number text, -- either the steamlined authority number or the phone approval number obtained from a pbs operator
   '   authority_post_to_patient boolean DEFAULT false,
   '   script_number integer,
   '   concession_details text,
   '   brand_substitution boolean DEFAULT true,
   '   fk_lu_pbs_script_type integer,
   '   fk_progress_note integer,
   '   deleted boolean DEFAULT false,
   '   printed boolean DEFAULT true, -- if the script was actually printed then printed is true, i.e when the menu option saved no print is used field is false
   '   authority_reason text, -- the text of the authority wording
   '   print_reason boolean DEFAULT true, -- if True then the reason the drug was prescribed will be printed on the script
   '   latex text DEFAULT (NOT NULL::boolean),
   '   medisecure_uuid uuid DEFAULT uuid_generate_v4(), -- UUID for each script, for MediSecure's XML
   '   medisecure_barcode character(16), -- the barcode printed on the script
   '   escript_uploaded boolean, -- false=not uploaded yet, true=uploaded, NULL=not an e-script
   '   ctg character(3), -- Closing the Gap...
   '   CONSTRAINT prescribed_pkey PRIMARY KEY (pk),
   '   CONSTRAINT prescribed_fk_brand_fkey FOREIGN KEY (fk_brand)
   '       REFERENCES drugs.brand (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT prescribed_fk_consult_fkey FOREIGN KEY (fk_consult)
   '       REFERENCES clin_consult.consult (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT prescribed_fk_instruction_fkey FOREIGN KEY (fk_instruction)
   '       REFERENCES clin_prescribing.instructions (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT prescribed_fk_lu_pbs_script_type_fkey FOREIGN KEY (fk_lu_pbs_script_type)
   '       REFERENCES clin_prescribing.lu_pbs_script_type (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT prescribed_fk_medication_fkey FOREIGN KEY (fk_medication)
   '       REFERENCES clin_prescribing.medications (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT prescribed_fk_prescribed_for_fkey FOREIGN KEY (fk_prescribed_for)
   '       REFERENCES clin_prescribing.prescribed_for (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT prescribed_fk_progress_note_fkey FOREIGN KEY (fk_progress_note)
   '       REFERENCES clin_consult.progressnotes (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT prescribed_medisecure_barcode_check CHECK (medisecure_barcode ~ '[A-Z]{3}[0-9]{13}'::text)
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '----------------------------------------------------------------------------------------------------------
   '
   ' If interactions exist for the drug, add them to the list under the editing area
   ' bInteractionsExist was set in Interactions_Drug_Display
   '----------------------------------------------------------------------------------------
   'don't allow a 'double hit' on this button.
   
   Dim sMsg As String
   
   If Not Drug_Valid() Then Return
   If Drug_Duplicated() Then Return
   script_item = New Collection
   If Not IsNull(fk_item_prescribed) Then Script_item!fk_item_prescribed = fk_item_prescribed
   If Not IsNull(fk_medication) Then script_item!fk_medication = fk_medication
   script_item!med = drug!medication
   script_item!med!last_date = currentconsult.GetConsultDate()
   script_item!med!start_date = currentconsult.GetConsultDate() 'won't always be true unless this is a new medication
   script_item!prescribed = New CRow
   script_item!prescribed!fk_brand = fk_brand
   script_item!date_script_written = currentconsult.GetConsultDate()
   script_item!prescribed!date_on_script = Val(txtdate.text)
   script_item!prescribed!fk_consult = currentconsult.GetPK()
   script_item!brand = txtBrand.Text ' for display only
   script_item!generic = drug!generic ' for display
   script_item!strength = drug!strength ' for display only
   script_item!atccode = drug!atccode  ' for interaction checking
   script_item!atccode = drug!class_code  ' for interaction checking of prescribed items today ** patient could subsequently be made allergic during consult
   script_item!form = drug!form
   script_item!fk_form = drug!fk_form
   script_item!display_packsize = drug!display_packsize
   script_item!display_strength = drug!display_strength
   script_item!product_information_filename = drug!product_information_filename
   script_item!prescribed!quantity = Val(txtQuantity.text)
   script_item!prescribed!repeats = Val(txtRepeats.text)
   script_item!pbs_script_type = lblRestrictions.Text
   script_item!instruction = modUtil.StripExtraBlanks(Trim(txtInstructions.text))
   script_item!prescribed_for = modUtil.StripExtraBlanks(Trim(txtReason.text))
   script_item!prescribed!print_reason = CBool(chkPrintReason.value)
   script_item!prescribed!fk_instruction = modPrescribingDBI.Instruction_Get_PK(script_item!instruction)
   modPrescribingDBI.Instructions_Save_Habit(script_item) 'save instruction habit and pull back the key fixme this used to pull back 1 if unscessful now null
   modDBConnect.CommitTrans()
   script_item!prescribed!fk_prescribed_for = modPrescribingDBI.PrescribedFor_Get_Pk(script_item!prescribed_for)
   modPrescribingDBI.Prescribed_For_Save_Habit(script_item) ' save the prescribed for habit and pull back the key
   modDBConnect.CommitTrans()
   Script_item!prescribed!restriction_code = restriction_code
   Script_item!prescribed!fk_lu_pbs_script_type = iPBS_Script_Type
   Script_item!prescribed!reg24 = CBool(chkReg24.Value)
   script_item!prescribed!pbscode = drug!pbscode
   script_item!med!active = CBool(chkActive.value)
   '--------------------------
   'Is this an authority item?
   '--------------------------
   If InStr(cmbScriptTypes.text, "AUTHORITY") Then
      Script_item!prescribed!authority_approval_number = Trim(txtApprovalNumber.Text)  'may not exist
      Script_item!prescribed!authority_post_to_patient = CBool(chkPostAuthority.value)
      Script_item!prescribed!authority_script_number = Trim(txtAuthorityScriptNumber.text)
      Script_item!prescribed!authority_reason = Trim(txtAuthorityWording.text)
      Script_item!authority_indication = Trim(txtAuthorityWording.Text) 'could be a PBS description or our own for increased authority
   End If
   ' we used to generate the script number here.
   ' we can't as there may be up to 3 scripts on a page and they all have the same
   ' script number & barcode, but we don't know this yet.
   
   script_items.Add(script_item, script_items.count)
   ' prescribed! = concession_details : these three not yet implemented
   ' prescribed! = brand_substitution : do not remove this code
   ' prescribed! = fk_progress_note
   cvwPrescriptions_Refresh(script_items)
   If Drug_Interactions_For_Drug_Prescribed.count Then
      Drug_Interactions_For_Drugs_Prescribed.add(Drug_Interactions_For_Drug_Prescribed, Drug_Interactions_For_Drugs_Prescribed.count)
      lvwDrugsWithInteractions_ReLoad()
   Endif
   tbOk.Enabled = True  '??whats this
   Return True
   
End

Public Sub Save()
   '-----------------------------------------------------------
   'Saves the drugs in the prescriptions list, then prints them
   '-----------------------------------------------------------
   
   For Each script_item In script_items
      If IsNull(script_item!printed) Then
         Drug_Save(script_item)
         script_item!printed = False
      End If
   Next
   Print_Script_Items(script_items)
   FClinical_Refresh
   If embedded_in_form = "FInbox" Then
      Try FInbox.Medications_Refresh 'may not be opened at all
   Endif
   Reload()
   
End

Public Sub FClinical_Refresh()
   '---------------------------------------------------------
   'FPrescriptions can be embedded in Fclinical of FInbox
   '---------------------------------------------------------
   
   If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then       'either way if in inbox or clinical, update fclinical
      FClinical.Refresh_Section(const.cSection_Prescriptions)
      Medications_Add_Progress_Notes_Update_Prescribed_Today_list
      Try FGPMPTCA.GPMP_Update()
   End If   
   If Embedded_In_Form = "FClinical" Then                                   'if writing script in clinical
      If FInbox.Is_Same_Patient(currentconsult!patient!fk_patient) Then     'and same patient in the inbox
         Try FInbox.Medications_Refresh                                     'try and update the meds list in the inbox
      Endif
   End If  
    
   
End

Public Sub Drug_Save(script_item As Collection)
   '---------------------------------------------------------------------
   'Save a single script item to the backend.
   'Note: When a drug is added from the edit area to the prescriptions list,  in Drug_Add()
   '      it is assumed that it is a new drug (its not yet been printed, and in the event,
   '      could even be deleted before printing at the users whim). As its assumed to be new
   '      script_item!med!start_date = Now() and script_item!med!last_date=now()
   '      Once we go to save the drug here we have to check if this medication aka fk_generic_product
   '      has been previous prescribed i.e already exists in clin_prescribing.medications.
   '      If it does, then we need to overwrite the start date in the script_items!med collection
   '      as script_item!med!start_date <> Now() but whatever the current value of start_date is
   '      in the underlying table. Also, as we are then editing the medication row rather than
   '      creating a new one we do  script_item!med.put_unchanged(R!fk_medication, "fk_medication")
   '      IAN: instead, perhaps the start_date field can be removed??
   '-----------------------------------------------------------------------------------------------
   
   Dim R As Result
   '--------------------------------------------------------------------------------------------------------
   'Has this product been prescribed before?, its possible it was but was deleted eg a mistake at some point
   '--------------------------------------------------------------------------------------------------------
   R = modPrescribingDBI.Medication_Prescribed_Before(currentconsult!patient!fk_patient, script_item!med!fk_generic_product)
   If R.count Then                                                          'yes it has
      script_item!med.put_unchanged(R!fk_medication, "fk_medication")       'ensure an edit not a create new
      script_item!med.Remove("start_date")                                  'don't save the start date: leave it as-is
   Endif
   script_item!deleted = False                                              'could have been prescribed and deleted so reset the flag                                       
   script_item!med.Save("clin_prescribing.medications", "fk_medication")
   script_item!prescribed!fk_medication = script_item!med!fk_medication
   script_item!prescribed!fk_consult = currentconsult.GetPK()
   script_item!prescribed.Save("clin_prescribing.prescribed", "fk_prescribed") 'wrong, fixme if editing.
   modDBConnect.CommitTrans()
   
End

Public Sub columnview1_KeyPress()
   
   If key.Code = key.Return Then columnview1_DblClick()
   
End

Public Sub columnview1_DblClick()
   '------------------------------------------------------------------------
   'User has double clicked (or pressed enter see columnview1_keypress(0
   'According to whether we've searched on a brand or generic, transfer
   'the drug to the editing area, then remove the panel with the columnview
   '------------------------------------------------------------------------
   
   columnview1.MoveCurrent
   Select Case columnview1.tag.tag 'don't make me 'last'
      Case "reason"
         Prescribed_For_Habits_Select()
      Case "instructions"
         Instruction_Habits_Select()
   End Select
   pnlColumnView.visible = False
Catch
   Return
   
End

Public Function cvwPrescriptions_Refresh(Script_Items_Written As Collection)
   '------------------------------------------------------------------------------
   'CALLED BY: Reload()   in which case loads only previously printed
   '           Drug_Add() in which case the collection being added not yet saved
   '           Drug_Delete()
   'Refresh the list of drugs prescribed this consulation
   'script_items is 'mixed' - it will contain all those items prescribed and
   'printed already (ie the script_item collection is a view) plus all thos
   'prescribed via the edit area and not yet printed The collections
   'associated with these will not have a !printed collection member
   '------------------------------------------------------------------------------
   
   Dim x As Integer
   
   cvwPrescriptions.Clear()
   '----------------------------------------------------------------------------------
   'as this routine is called after Drug_Delete() and a deleted drug may not be saved
   're-order the collection to be zero based and sequential as the key for each
   'columnview row is zero based
   '----------------------------------------------------------------------------------
   Script_Items_Written = modUtil.Copy_Collection_Keyed_Sequentially(script_items_written)
   script_items = modUtil.Copy_Collection_Keyed_Sequentially(script_items_written)
   For Each script_item In Script_Items_Written
      x = cvwPrescriptions.Count  '
      If script_item!prescribed.Exist("pk") = False Then
         If script_item!prescribed.Exist("fk_prescribed") = True Then      'no primary key = not saved
            cvwPrescriptions.Add(x, "", pic_saved)
         Else
            cvwPrescriptions.Add(x, "", pic_not_saved)
         End If
      Else
         cvwPrescriptions.Add(x, "", pic_saved)
      Endif
      cvwPrescriptions[x][1] = Format(script_item!prescribed!date_on_script, "dd/mm/yyyy")
      cvwPrescriptions[x][2] = script_item!brand & "  "
      cvwPrescriptions[x][3] = script_item!generic & "  "
      cvwPrescriptions[x][4] = script_item!strength & "  "
      cvwPrescriptions[x][5] = script_item!form & "  "
      cvwPrescriptions[x][6] = "Qty " & script_item!prescribed!quantity & " "
      cvwPrescriptions[x][7] = "Rpt " & script_item!prescribed!repeats & " "
      cvwPrescriptions[x][8] = script_item!pbs_script_type & "  "
      cvwPrescriptions[x][9] = script_item!instruction & "  "
      cvwPrescriptions[x][10] = script_item!prescribed_for
   Next
   If cvwPrescriptions.count Then
      lblScriptItemsPrescribed.text = "Script items prescribed this consultation" & "(" & Str(cvwPrescriptions.count) & ")"
   Else
      lblScriptItemsPrescribed.text = "Script items prescribed this consultation"
   End If
   modUtilGUI.Columnview_Columns_Set_Size(cvwPrescriptions, lblMeasure)
   
End

Public Function Drug_Duplicated() As Boolean
   '--------------------------------------------------------------------------
   'Checks the edit area item against the scripts prescribed this consulation
   'If already prescribed, then warns user and prevents a save
   'Returns True if duplicated
   'checks against:
   '  date of script which allows forward/backdating, illegal in AU
   '  generic via the generic code
   '  FIXME NOT USED YET
   '--------------------------------------------------------------------------
   
   Dim script_written As Collection
   Dim new_item As String
   Dim existing_item As String
   
   Return
   new_item = Format(Val(txtdate.text), "dd/mm/yyyy") & " " & drug!fk_product
   For Each script_written In script_items
      existing_item = Format(script_written!date_on_script, "dd/mm/yyyy") & " "
      existing_item &= Str(script_written!fk_generic_product)
      If new_item = existing_item Then
         Message.Info("This item has already been presecribed this consultation")
         Return True
      Endif
   Next
   Return False
   
End

Public Function Drug_Valid() As Boolean
   '---------------------------------------------------------------------------
   'Does some basic validation that all is well in the state of Denmark
   'however, not 100% foolproof as cannot protect all fools against themselves
   '---------------------------------------------------------------------------
   
   Dim sMsg As String
   
   If Not drug.Count Then Return
   If IsNull(drug!medication) Then Return
   
   If Not IsDate(txtdate.text) Then
      txtdate.SetFocus()
      Return
   Endif
   If IsNull(drug!medication!fk_generic_product) Then
      txtGeneric.SetFocus()
      Return
   Endif
   If txtRepeats.text = "" Then
      txtRepeats.SetFocus()
      Return
   Endif
   If txtQuantity.Text = "" Then
      txtQuantity.SetFocus
      Return
   Endif
   If txtInstructions.text = "" Then
      Try Message.Info("Please add direction how to take this script item before saving.")
      txtInstructions.SetFocus()
      Return
   Endif
   If txtReason.text = "" Then
      If Message.Warning("Do you want to add the reason or condition for which you prescribed this medication?", "Yes", "No") = 1 Then
         txtReason.SetFocus
         Return
      End If
      txtReason.text = "not stated"
   Endif
   '---------------------
   'If an authority drug
   '-----------------------
   Select Case drug!restrictionflag
      Case "A"
         '-----------------------------------------------------------------------------------------------
         'make sure they have selected an indication for authority, unless they are prescribing privately
         '-----------------------------------------------------------------------------------------------
         If iPBS_Script_Type <> const.pbs_script_type_private Then
            If drug!restriction_code = "" Or Trim(txtAuthorityWording.text) = "" Then
               Message.Info("Please select an authority indication for this drug before saving")
               If gvRestrictions.Rows.count Then                     'this is a 'normal authority' ie will be supplied reasons
                  With gvRestrictions
                     .row = 0
                     .SetFocus()
                  End With
               Else
                  txtAuthorityWording.SetFocus()                     'user applying for increased quantity.
               End If
               Return
            Endif
         End If
   End Select
   '-------------------
   'Now authority stuff
   '-------------------
   If iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity Then
      ' If Not (Val(txtQuantity.text) > drug!quantity) Then
      '    sMsg = "You have prescribed a non-authority drug as an authority\n\n"
      '    "It would be usual to increase the supplied quantity and/or repeats for this drug."
      '    Message.Info(smsg)
      '    Return
      ' Endif
      If Trim(txtAuthorityWording.text) = "" Then
         Message.Info("Please select an authority indication for this drug before saving")
         txtAuthorityWording.SetFocus()
         Return
      Endif
   Endif
   '-------------------------------------------------------------------------------------------
   'now, is the instruction correct for authority medications?
   'not done for others eg as some beta-blockers come in 100, and many patients only take 1/day
   '-------------------------------------------------------------------------------------------
   sMsg = "The instruction for this medication would seem to indicate the patient is only taking it once a day "
   "but the quantity would seem to indicate they should be taking it twice a day.\n\n"
   "Do you want to fix this?"
   If Val(txtQuantity.text) > 30 Then
      If iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity Or drug!restrictionflag = "A" Then
         If InStr(txtInstructions.text, "1 daily") Or InStr(txtInstructions.text, "once a day") Then
            If Message.Question(sMsg, "Yes", "No - Leave my instructions") = 1 Then
               txtInstructions.SetFocus
               Return
            Endif
         Endif
      End If
   Endif
   If cmbScriptTypes.Index = -1 Then
      Message.Info("Please select the type of script e.g PBS, Private, Authority")
      cmbScriptTypes.SetFocus
      Return
   Endif
   
   Return True
   
End

Public Sub Print_Script_Items(items As Collection)
   '--------------------------------------------------------------------
   'Prints out any unprinted script items
   'previously printed items or items to re-print have !printed = False
   'fixme - single script only on s8
   '--------------------------------------------------------------------
   
   Dim pbs_scripts As New Collection
   Dim rpbs_scripts As New Collection
   Dim private_scripts As New Collection
   Dim authority_scripts As New Collection 'do not remove this
   
   For Each script_item In items
      If script_item!printed = False Then
         Select Case script_item!prescribed!fk_lu_pbs_script_type
            Case const.pbs_script_type_pbs, const.pbs_script_type_private, const.pbs_script_type_rpbs
               Select Case script_item!prescribed!fk_lu_pbs_script_type
                  Case const.pbs_script_type_pbs
                     If pbs_scripts.count = 3 Then
                        Print_Script(pbs_scripts, const.pbs_script_type_pbs)
                        pbs_scripts = New Collection
                     End If
                     pbs_scripts.Add(script_item, pbs_scripts.count)
                  Case const.pbs_script_type_private
                     If private_scripts.count = 3 Then
                        Print_Script(private_scripts, const.pbs_script_type_private)
                        private_scripts = New Collection
                     Endif
                     private_scripts.Add(script_item, private_scripts.Count)
                  Case const.pbs_script_type_rpbs
                     If rpbs_scripts.count = 3 Then
                        Print_Script(rpbs_scripts, const.pbs_script_type_rpbs)
                        rpbs_scripts = New Collection
                     Endif
                     rpbs_scripts.Add(script_item, rpbs_scripts.count)
               End Select
            Case Else
               
               authority_scripts = New Collection
               authority_scripts.Add(script_item, 0)
               modPrinting.Print_latex(Script_Construct_Authority_LaTeX(authority_scripts).GetData(), const.Paper_Script)
               script_item!prescribed!printed = True
         End Select
         script_item!printed = True
      End If
   Next
   '------------------------------------------------------------------------------
   'Probably bad......... stupid........ way to do this but
   'Any 'left over' after lots of three printed (except if three only), print them
   '------------------------------------------------------------------------------
   If pbs_scripts.count Then Print_Script(pbs_scripts, const.pbs_script_type_pbs)
   If private_scripts.count Then Print_Script(private_scripts, const.pbs_script_type_private)
   If rpbs_scripts.count Then Print_Script(rpbs_scripts, const.pbs_script_type_rpbs)
   
End

Public Sub Print_Script(items As Collection, pbs_script_type As Integer)
   '-----------------------------------------------------------------------
   'Accepts up to 3 drugs of same pbs_script_type and prints them on script
   'applies to non-authority items only
   '-----------------------------------------------------------------------
   
   Dim script_latex As String
   
   script_latex = Script_Construct_LaTex(items, pbs_script_type).GetData()
   modPrinting.Print_latex(script_latex, const.Paper_Script)
   
End

Public Sub Script_Construct_LaTex(items As Collection, pbs_script_type As Integer) As CTemplate
   '------------------------------------------------------------------------------
   'Construct the laTex for a non-authority script, max of three items on a script
   '------------------------------------------------------------------------------
   
   Dim templ As CTemplate
   Dim item As Collection
   Dim script_date As Date
   Dim script_number As Integer
   Dim barcode As String
   Dim medisecure_uuid As String
   
   script_number = modPrescribingDBI.Script_Number_Get_Next()
   barcode = modPrescribingDBI.Script_Barcode(script_number)
   If IsNull(barcode) Then
      templ = New CTemplate("script", "tex")
   Else
      templ = New CTemplate("script-barcode", "tex")
      templ.Subst("barcode", barcode)
   Endif
   For Each item In items
      script_date = item!prescribed!date_on_script
      item!prescribed!script_number = script_number
      item!prescribed!medisecure_barcode = barcode
      If Not IsNull(barcode) Then 
         item!prescribed!escript_uploaded = False
      Else
         item!prescribed!escript_uploaded = Null
      End If   
   Next
   templ.Subst_common(currentconsult)
   templ.Subst("script-date", Format(script_date, "dd/mm/yyyy"))
   templ.Subst("script-number", script_number)
   '-----------------------
   'set PBS RPBS or Private
   '-----------------------
   Select Case pbs_script_type
      Case const.pbs_script_type_pbs
         templ.Subst("pbs-script", "X")
         templ.Subst("rpbs-script", "")
         templ.Subst("wipe-pbs-rpbs", "")
         templ.Subst("veteran_number", "")
         templ.Subst("veteran_heading", "")
      Case const.pbs_script_type_rpbs
         templ.Subst("rpbs-script", "X")
         templ.Subst("pbs-script", "")
         templ.Subst("wipe-pbs-rpbs", "")
         templ.Subst("veteran_heading", "Veteran ")
      Case const.pbs_script_type_private
         templ.Subst("rpbs-script", "")
         templ.Subst("pbs-script", "")
         templ.Subst("wipe-pbs-rpbs", "XXXXXXXXXXXX")
         templ.Subst("veteran_number", "")
         templ.Subst("veteran_heading", "")
   End Select
   templ.Subst_Drugs(items) 'build latex for up to 3 script items
   '-------------------------------------------------------------------------------------
   'The drug has already been saved
   'We couldn't know at the time of saving which particular script page a particular drug
   'was going to end up on, so here we save the latex back to the back-end
   '--------------------------------------------------------------------------------------
   For Each item In items   'same script latex for each individual drug
      item!latex = templ.GetData()
      Latex_Save(item)
   Next
   If Not IsNull(barcode) Then modPrescribingDBI.Notify_Script(script_number)
   modDBConnect.CommitTrans()
   Return templ
   
End

Public Sub Latex_Save(item As Collection)
   '---------------------------------------------------------------------------------------------
   'saves the Latex each time a script is printed - reason being is that (Ian) wanted to keep at
   'latex of the context of each script printed for medico-legal reasons.. great idea  until you
   'try and implement it as user could have printed a script item on single script page, then
   're-printed it together with something else, so won't know prior to the print just what the
   'latex is going to be, and the script item is already saved to the backend.
   '---------------------------------------------------------------------------------------------
   
   Dim pk As Variant
   
   If item!prescribed.Exist("fk_prescribed") Then  'item has been prescribed, but re-loaded from the backend.
      pk = item!prescribed!fk_prescribed
   Else                                           'item not yet reloaded from the backend.
      pk = item!prescribed!pk
   End If
   modDBConnect.update("clin_prescribing.prescribed", Null, ["pk": pk, "latex": item!latex, "script_number": item!prescribed!script_number, "medisecure_barcode": item!prescribed!medisecure_barcode, "escript_uploaded": item!prescribed!escript_uploaded])
   
End

Public Sub Script_Construct_Authority_LaTeX(auth_items As Collection) As CTemplate
   '----------------------------------------------
   'Builds the Latex code for the authority script
   '----------------------------------------------
   
   Dim templ As CTemplate
   Dim auth_item As Collection = auth_items[0]
   Dim heading As String
   Dim script_number As Integer
   Dim barcode As String
   
   script_number = modPrescribingDBI.Script_Number_Get_Next()
   auth_item!prescribed!script_number = script_number
   barcode = modPrescribingDBI.Script_Barcode(script_number)
   If IsNull(barcode) Then
      templ = New CTemplate("authority-script", "tex")
      auth_item!prescribed!medisecure_barcode = Null
      auth_item!prescribed!escript_uploaded = Null
   Else
      templ = New CTemplate("authority-script-barcode", "tex")
      templ.Subst("barcode", barcode)
      auth_item!prescribed!medisecure_barcode = barcode
      auth_item!prescribed!escript_uploaded = False
   Endif
   templ.Subst_common(currentconsult)
   heading = Replace(const.pbs_script_types[auth_item!prescribed!fk_lu_pbs_script_type], "INCREASED QUANTITY", "")
   heading = Replace(heading, "STREAMLINED", "")
   templ.Subst("authority-heading-authority-script-number", heading & " SCRIPT NO. " & Format(auth_item!prescribed!authority_script_number, "00000000"))
   templ.Subst("authority-type", heading)
   templ.Subst("authority-heading-authority-script-number", Replace(const.pbs_script_types[auth_item!prescribed!fk_lu_pbs_script_type], "INCREASED QUANTITY", "") & " SCRIPT NO. " & Format(auth_item!prescribed!authority_script_number, "00000000"))
   templ.Subst("authority-script-number", auth_item!prescribed!authority_script_number)
   templ.Subst("authority-script-number", auth_item!prescribed!authority_script_number)
   templ.Subst("script-date", Format(auth_item!prescribed!date_on_script, "dd/mm/yyyy")) 'strictly speaking illegal
   templ.Subst("script-number", script_number)
   If InStr(auth_item!pbs_script_type, "RPBS") Then   'and check against patients actual rpbs entitlements FIXME SHOULD DO THIS BACK IN PRESRIBING.
      templ.Subst("rpbs-script", "X")
      templ.Checkbox("pbs-script", "")
      templ.Subst("veteran_heading", "Veteran")
   Else
      templ.Subst("rpbs-script", "")
      templ.Subst("pbs-script", "X")
      templ.Subst("veteran_heading", "")
      templ.Subst("veteran_number", "")
   End If
   ' If InStr(auth_item!pbs_script_type, "PBS") Then
   '    templ.Subst("pbs-script", "X")
   ' Else
   '    templ.Checkbox("pbs-script", "")
   ' End If
   templ.Checkbox("previous-authority-yes-checkbox", True)
   templ.Checkbox("previous-authority-no-checkbox", False)
   If auth_item!prescribed!authority_post_to_patient = True Then
      templ.Checkbox("sendtopatient-checkbox", True)
   Else
      templ.Checkbox("sendtopatient-checkbox", False)
   Endif
   templ.Subst("authority-approval-number", Script_Item!prescribed!authority_approval_number)
   If InStr(Lower(Script_item!pbs_script_type), "streamlined") Then
      script_item!restriction = Replace(script_item!prescribed!authority_reason, "<p>", "")
      script_item!restriction = Replace(script_item!prescribed!authority_reason, "</p>", "")
      script_item!restriction = Replace(script_item!prescribed!authority_reason, "<br/>", "")
      templ.Subst("authority-indication", "[" & script_item!restriction_code & "]" & script_item!prescribed!authority_reason)
   Else
      auth_item!restriction = Replace(auth_item!prescribed!authority_reason, "<p>", "")
      auth_item!restriction = Replace(auth_item!prescribed!authority_reason, "</p>", "")
      auth_item!restriction = Replace(auth_item!prescribed!authority_reason, "<br/>", "")
      templ.Subst("authority-indication", auth_item!prescribed!authority_reason)
   End If
   templ.Subst("quantity-repeats", auth_item!strength & " " & auth_item!prescribed!quantity & "'s Rpt " & auth_item!prescribed!repeats)
   templ.Subst_Drugs(auth_items, True)
   auth_item!latex = templ.GetData()
   Latex_Save(auth_item)
   If Not IsNull(barcode) Then modPrescribingDBI.Notify_Script(script_number)
   modDBConnect.CommitTrans()
   Return templ
   
End

Public Sub New_Entry()
   '---------------------------------------------------------------
   'Called from FClinical, called this because can't use New() and
   'all across easyp this is the wording I've chosen
   'see FClinicalToolbar.MainToolbar_Click for details
   '---------------------------------------------------------------   
   
   Drug_New()
   
End

Public Sub Drug_New()
   '----------------------------------------
   'User has decided to prescript a new drug
   '----------------------------------------
   
   Dim hCtrl As Control
   
   EditArea_Clear()                                  'Clear the edit area (the input area)
   Reset_Flags()                                     'Reset all keys and flags
   txtdate.text = Format(currentconsult.GetConsultDate(), "dd/mm/yyyy")          'Default to today's date, this can be over-ridden by user
   chkActive.value = True                            'Assume this will be an active (in current use) medication
   Drug = New Collection                             'reset all the collections
   Drugs = Null
   Prescribed_For_Habits = New Collection
   Instruction_Habits = New Collection
   EditArea_Notify_Data_Change(False)
   If lvwDrugsWithInteractions.count = 0 Then
      tlInteractions.text = ""
      tabstrip1.text = "No Interactions Noted Today"
   Else
      With lvwDrugsWithInteractions
         .MoveFirst
         .Item.Selected = True
      End With
   Endif
   If tabstrip1.count = 2 Then
      tabstrip1.index = 1
      For Each hCtrl In tabstrip1.children
         hCtrl.Delete
         Break
      Next
      tabstrip1.count = 1
      
   Endif
   lblFoodInteractionHeading.text = "Food Interactions"
   lblfoodInteractions.text = ""
   Drug_Interactions_For_Drug_Prescribed = New Collection
   If sDefault_Prescribing_Mode = "brand" Then
      txtBrand.SetFocus()
   Else
      txtGeneric.SetFocus()
   Endif
   
End

Public Sub cvwPrescriptions_Menu()
   '-----------------------------------------------------------------------------
   'User has clicked over the drugs which have been placed on the prescribed list
   'Show the popup menu.
   '-----------------------------------------------------------------------------
   
   If cvwPrescriptions.count Then
      If IsNull(cvwPrescriptions.Item.key) Then
         cvwPrescriptions.SetFocus()
         cvwPrescriptions_Click()
         Return
      End If   'bug somewhere, sometimes the item.key not set
      If IsNull(script_items[cvwPrescriptions.Item.key]!product_information_filename) Then
         mnuPrescriptions_FullPI.Enabled = False
      Else
         mnuPrescriptions_FullPI.Enabled = True
      Endif
      mnuPrescriptions_BriefPI.Enabled = False         'project has none at the moment
      mnuPrescriptions_Interactions.Enabled = False    'project has none at the moment
      mnuPrescriptions.Popup()
   Endif
   
End

Public Sub cvwPrescriptions_Click()
   '------------------------------------------------------------------------------
   'User has clicked on the list of prescribed drugs, set internal cursor to match
   '------------------------------------------------------------------------------
   
   cvwPrescriptions.MoveCurrent
   iCurrentScriptKey = cvwPrescriptions.item.key
   
End

Public Sub mnuPrescriptions_Click()
   
   Dim item As Collection
   Dim x As Integer
   Dim SelectedItems As Collection
   
   cvwPrescriptions.MoveCurrent()
   Select Case Last.tag
      Case "edit"
         Edit()
      Case "delete selected"
         Drug_Delete
      Case "delete all"
         cvwPrescriptions.SelectAll()
         Drug_Delete
      Case "undo delete"
         Delete_Undo()
      Case "print all"
         '---------------------------------------------------
         'Prints all items on the list under the editing area
         'If not yet saved, save first
         'then refresh progress notes and lists in FClinical
         '---------------------------------------------------
         For Each item In script_items
            If item.Exist("pk") = False Then
               Drug_Save(item)           'in the backend the default for prescribed.printed = true
            End If
            item!printed = False         'force printing for all items.
         Next
         Print_Script_Items(script_items)
         FClinical_Refresh()
         If embedded_in_form = "FInbox" Then
            Try FInbox.Medications_Refresh
         Endif
         Reload()
      Case "print selected"
         '------------------------------------------------------------
         'Prints only selected items, as above, saving if not yet done
         'Does not reload all the prescriptions written this consult
         'as there could still be unprinted ones on the list
         '------------------------------------------------------------
         SelectedItems = New Collection
         cvwPrescriptions.MoveFirst
         For x = 0 To cvwPrescriptions.count - 1
            If cvwPrescriptions.Item.Selected = True Then
               If script_items[cvwPrescriptions.Item.key]!prescribed.Exist("pk") = False Then 'not yet saved
                  Drug_Save(script_items[cvwPrescriptions.Item.key])
               Endif
               script_items[cvwPrescriptions.Item.key]!printed = False
               SelectedItems.Add(script_items[cvwPrescriptions.Item.key], SelectedItems.Count)
            Endif
            cvwPrescriptions.MoveNext()
         Next
         Print_Script_Items(SelectedItems)
         cvwPrescriptions.UnselectAll()
         cvwPrescriptions_Refresh(script_items)
         FClinical_Refresh()
         If embedded_in_form = "FInbox" Then
            Try FInbox.Medications_Refresh
         Endif
      Case "save selected no print", "save all no print"
         If Last.tag = "save all no print" Then cvwPrescriptions.SelectAll()
         '---------------------------------------------------------------------
         'Saves the selected drug(s) to backend but does not print it on paper
         '---------------------------------------------------------------------
         cvwPrescriptions.MoveFirst()
         For x = 0 To cvwPrescriptions.count - 1
            If cvwPrescriptions.Item.Selected = True Then
               If Not script_items[cvwPrescriptions.Item.key]!prescribed.Exist("pk") Then 'if pk exists already saved
                  script_items[cvwPrescriptions.Item.key]!prescribed!printed = False
                  Drug_Save(script_items[cvwPrescriptions.Item.key])
                  script_items[cvwPrescriptions.Item.key]!printed = True  'pretend printed
               Endif
            End If
            cvwPrescriptions.MoveNext()
         Next
         cvwPrescriptions.UnselectAll()
         cvwPrescriptions_Refresh(script_items)                               'refresh list without reloading
         Medications_Add_Progress_Notes_Update_Prescribed_Today_list
         FClinical_Refresh()
         If embedded_in_form = "FInbox" Then
            Try FInbox.Medications_Refresh
         Endif
      Case "brief pi"
         modUtilGUI.NotImplemented("Brief product information is not available")
      Case "full pi"
         If cvwPrescriptions.MoveCurrent() Then ' no internal cursor bugs here somewhere
            cvwPrescriptions.SetFocus
            cvwPrescriptions_Click()
            cvwPrescriptions.MoveCurrent()
         End If
         Product_Information_Full_Show(script_items[cvwPrescriptions.Item.key]!product_information_filename, script_items[cvwPrescriptions.Item.key]!brand)
      Case "fonts"
         modUtilGUI.Columnview_SetFont(cvwPrescriptions, "FPrescriptions_" & Embedded_In_Form)
      Case "help"
         modUtilGUI.NotImplemented("Help for the prescription section has not been written")
   End Select
Catch
   Return  
   
End

Public Sub Authority_Increased_Quantity_Reason_Get()
   
   Dim reason As Collection
   
   With columnview1
      .Clear
      .Columns.count = 1
      .Columns[0].width = columnview1.Width
   End With
   If Not Trim(txtAuthorityWording.text) Then Return
   Authority_Increased_Quantity_Reasons = modPrescribingDBI.Authority_Increased_Quantity_Reason_Get(Trim(txtAuthorityWording.text))
   If Authority_Increased_Quantity_Reasons.count > 0 Then
      For Each reason In Authority_Increased_Quantity_Reasons
         columnview1.Add(reason!pk, 0)
         columnview1[reason!pk][0] = reason!reason
      Next
      columnview1.tag = txtAuthorityWording
      pnlcolumnview.Visible = True
   End If
   
End

Public Sub Authority_Increased_Quantity_Reasons_Select()
   '--------------------------------------------------
   'User selecting a previously used authority wording
   '--------------------------------------------------
   
   columnview1.MoveCurrent
   bExit = True
   txtAuthorityWording.text = Authority_Increased_Quantity_Reasons[columnview1.item.key]
   pnlcolumnview.Visible = False
   bexit = False
   tbOk.SetFocus()
Catch
   Return
   
End

Public Sub HSplit_EditArea_Inner_Resize()
   
   If pnlcolumnview.Visible Then
      pnlcolumnview.width = txtAuthorityWording.Width
   Endif
   
End

Public Sub cmbScriptTypes_Click()
   '---------------------------------------------------------------------------
   'User has clicked on the type of script e.g STREAMLINED AUTHORITY or PRIVATE
   '---------------------------------------------------------------------------
   
   If bExit Then Return
   
   Select Case cmbScriptTypes.Text
      Case "PRIVATE"
         '----------------------------
         'Making any drug private?
         'remove any authority details
         '----------------------------
         bexit = True
         With txtAuthorityWording
            .text = ""
            .enabled = False
         End With
         With txtApprovalNumber
            .text = ""
            .enabled = False
         End With
         With txtAuthorityScriptNumber
            .text = ""
            .enabled = False
         End With
         bexit = False
         iPBS_Script_Type = const.pbs_script_type_private
         lblRestrictions.text = "PRIVATE"
         
         gvRestrictions_Init  'clear rows and content
      Case "PBS", "RPBS"
         '------------------------------------------------------------
         'swapping back from something to pbs?, reset repeats/quantity
         '------------------------------------------------------------
         bexit = True
         With txtAuthorityWording
            .text = ""
            .enabled = False
         End With
         With txtApprovalNumber
            .text = ""
            .enabled = False
         End With
         With txtAuthorityScriptNumber
            .text = ""
            .enabled = False
         End With
         bexit = False
         txtQuantity.text = drug!quantity
         txtRepeats.text = drug!max_rpt
         Select Case Last.text
            Case "PBS"
               iPBS_Script_Type = const.pbs_script_type_pbs
               
            Case "RPBS"
               iPBS_Script_Type = const.pbs_script_type_rpbs
         End Select
      Case Else  'it is an authority
         txtAuthorityWording.enabled = False
         If InStr(Lower(txtGeneric.text), "clozapine") Then
              txtApprovalNumber.enabled = True            'changed a Horsts behest for clozapine scripts, so rest of this code now not good
         Else
             txtApprovalNumber.enabled = False 
         Endif
         If txtAuthorityScriptNumber.text = "" Then
            txtAuthorityScriptNumber.text = modPrescribingDBI.Authority_Number_Get_Next(modDBConnect.currentUser!fk_staff)
         End If
         If txtAuthorityWording.text = "" Then
            gvRestrictions_Click()  
         Endif
         Select Case Last.text
            Case "PBS AUTHORITY INCREASED QUANTITY"
               iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity
               txtAuthorityWording.Enabled = True
               With txtApprovalNumber
                  .Enabled = True
                  .text = ""
               End With
            Case "RPBS AUTHORITY INCREASED QUANTITY"
               iPBS_Script_Type = const.pbs_script_type_rpbs_authority_increased_quantity
               txtAuthorityWording.Enabled = True
               With txtApprovalNumber
                  .Enabled = True
                  .text = ""
               End With
         End Select
   End Select
   
End

Public Sub Form_Resize()
   
   HSplit_EditArea_Inner_Resize()
   VSplit_Script_Resize()
   
End

Public Sub VSplit_Script_Resize()
   
   If columnview1.Visible Then
      Try columnview1.top = ReferenceHboxForTopColumnview.top + ReferenceHboxForTopColumnview.Height
      
   Endif
   If pnlcolumnview.Visible Then
      Try pnlcolumnview.top = ReferenceHboxForTopColumnview.top + ReferenceHboxForTopColumnview.Height
      If ReferenceHboxForTopColumnview.Name = "HBox_Drug" Then
         pnlcolumnview.Height = ReferenceHboxForTopColumnview.height * 8
      Else
         pnlcolumnview.Height = ReferenceHboxForTopColumnview.height * 7
      Endif
   Endif
Catch   'ReferenceHboxForTopColumnview may not exist
   Return 
   
End

Public Sub Interactions_Refresh()
   '-----------------------------------------------------------------------------------------
   'Reload interactions for the current drugs for today against both each other and past meds
   'Flags:
   'False = not actually selecting this drug by prescribing in Edit ARea
   'False=not being re-prescribed from the past medications list
   'False=do not popup modal dialog boxes to warn if serious
   'as we've already seen these when we prescribed.
   '-----------------------------------------------------------------------------------------
   
   bInteractionsExist = False
   Drug_Interactions_For_Drugs_Prescribed = New Collection
   For Each script_Item In script_items                         'for each script that has been prescribed today
      Interactions_Drug_Display(script_item, False, False, False)           'check against all others prescribed + past meds
      If Drug_Interactions_For_Drug_Prescribed.count Then
         Drug_Interactions_For_Drugs_Prescribed.add(Drug_Interactions_For_Drug_Prescribed, Drug_Interactions_For_Drugs_Prescribed.count)
      Endif
   Next
   lvwDrugsWithInteractions_ReLoad()                             'reload the interactions list (if any)
   If lvwDrugsWithInteractions.count Then
      With lvwDrugsWithInteractions
         .MoveFirst
         .Item.Selected = True
      End With
   Endif
   
End

Public Sub lvwDrugsWithInteractions_ReLoad()
   
   Dim Interacting_drug As Collection
   
   lvwDrugsWithInteractions.clear()
   For Each Interacting_drug In Drug_Interactions_For_Drugs_Prescribed
      lvwDrugsWithInteractions.Add(lvwDrugsWithInteractions.count, Interacting_drug[0]!generic)
   Next
   
End

Public Sub Interactions_Food_Display(DR As Collection, bSelectingDrug As Boolean)
   'Displays the drugs food interactions
   
   Dim FI As Collection
   
   If InStr(DR!form, "cream") Then Return
   If InStr(DR!form, "ointment") Then Return                                                 'creams
   If InStr(DR!form, "eye drops") Then Return  
   If InStr(DR!form, "eye ointment") Then Return  
   Food_Interactions_For_Drug_Prescribed = New Collection
   Food_Interactions = modPrescribingDBI.Drug_Have_ATC_Code_Get_FoodInteractions(DR!atccode)
   lblfoodInteractions.text = ""
   If Food_Interactions.count Then
      For Each FI In Food_Interactions
         lblfoodInteractions.text &= "<P>" & FI!food_interaction & "</P> "
      Next
      lblfoodInteractionHeading.text = "Food & " & Dr!brand
      
   Endif
   
End

Public Sub Interactions_Drug_Display(DR As Collection, bSelectingDrug As Boolean, Optional bIgnoreActiveMedications As Boolean = False, Optional bWarnIfSerious As Boolean = True)
   'Checks for interactions with current drug being prescribed, places into a collection
   
   Dim med As Collection
   Dim item_prescribed_today As Collection
   Dim fk_generic_product_keys As New Variant[]
   Dim sAllInterationsForDrug As String
   Dim sInteractionText As String
   Dim Drug_With_Interaction As Collection
   Dim tlTab2 As Textlabel
   
   Drug_Interactions_For_Drug_Prescribed = New Collection                                          'the interactions for this drug only
   Interactions = modPrescribingDBI.Drugs_Have_ATC_Code_Get_Interactions(DR!atccode)          'get interactions for this atccode (our atc code)
   If Not bIgnoreActiveMedications Then
      For Each med In currentconsult!medications                                             'check against current med list contains **** all **** medications ever prescribed
         If fk_generic_product_keys.Find(med!prescribed!fk_medication) = True Then           'as multiple prescriptions for same drug true= not found
            If Not InStr(DR!form, "cream") Then  'also need to put in 'eye ointment' 'eye drops'
               If Not InStr(DR!form, "ointment") Then                                                    'creams
                  fk_generic_product_keys.Add(med!prescribed!fk_medication, fk_generic_product_keys.count) 'add this key, don't won't a duplicate message
                  If med!med!active Then                                                            'if it is an active medicaiton, do the checking
                     If Interactions.Exist(med!atccode) Then                                        'the atccode is the key of the drugbank data
                        sInteractionText = "<B>" & UCase(med!generic) & "</B> (" & modUtil.Ucase_Word_First_Letter(med!brand) & ")<BR>"      'create the interaction text"
                        sInteractionText &= Interactions[med!atccode]!description & "<BR>"
                        If Not InStr(sAllInterationsForDrug, sInteractionText) Then                    'check not already there e.g could be on coumadin 1mg, 2mg, 3mg
                           sAllInterationsForDrug &= sInteractionText                                  'and don't want to show this 3 times!
                        End If
                        If bSelectingDrug Then Interactions_Warn_Serious(med)                             'any serious ones, popup a dialog
                     Endif
                  End If
               End If
            End If
         End If
      Next
   End If
   For Each item_prescribed_today In script_items                                         'ditto check against drugs prescribed today.
      If Not InStr(item_prescribed_today!form, "cream") Then
         If Not InStr(item_prescribed_today!form, "ointment") Then
            If Interactions.Exist(item_prescribed_today!atccode) Then
               ' sInteractionText = "<B>" & item_prescribed_today!brand & "(" & item_prescribed_today!generic & ")</B><BR>"      'create the interaction text
               sInteractionText = "<B>" & UCase(item_prescribed_today!generic) & "</B> (" & modUtil.Ucase_Word_First_Letter(item_prescribed_today!brand) & ")<BR>"      'create the interaction text"
               sInteractionText &= Interactions[item_prescribed_today!atccode]!description & "<BR>"
               If Not InStr(sAllInterationsForDrug, sInteractionText) Then                    'check not already there e.g could be on coumadin 1mg, 2mg, 3mg
                  sAllInterationsForDrug &= sInteractionText                                  'and don't want to show this 3 times!
               End If
               If bSelectingDrug Then Interactions_Warn_Serious(item_prescribed_today)
            Endif
         End If
      End If
   Next
   '-----------------------------------------------------------------------------
   'if an interaction exists, add drug to the collection containing
   'all drugs with interactions this consultation
   'once user hits the <ADD> button or <SAVE no PRINT> button
   'this drug will be added to the list showing which drugs this consult interact
   '-----------------------------------------------------------------------------
   If sAllInterationsForDrug <> "" Then
      bInteractionsExist = True        'fixme get rid of flag = need only the Drugs_With_Interactions.count
      Drug_With_Interaction = New Collection
      Drug_With_Interaction!generic = DR!generic
      Drug_With_Interaction!atccode = DR!atccode
      Drug_With_Interaction!interactions = sAllInterationsForDrug
      Drug_Interactions_For_Drug_Prescribed.Add(Drug_With_Interaction, Drug_Interactions_For_Drug_Prescribed.count)
      If bSelectingDrug Then                                                             'if prescribing a new drug
         If lvwDrugsWithInteractions.count Then                                           'previous interactions exist
            With tabstrip1                                                                'add a new tab strip
               .count = 2
               .index = 1
               With tlTab2 = New TextLabel(Tabstrip1)
                  .tag = "second"
                  .text = sAllInterationsForDrug
                  .Background = Color.White
                  .border = False
               End With
               .text = DR!generic
            End With
         Else
            tabstrip1.index = 0
            tlInteractions.text = sAllInterationsForDrug
         Endif
         tabstrip1.text = DR!generic
      Endif
   End If
   
End

Public Sub Interactions_Warn_Serious(existing_med As Collection)
   '-----------------------------------------------------------------------
   'Checks for the type of interactions that must be a popup dialog warning
   'currently based on parsing text from within the interaction message.
   '-----------------------------------------------------------------------
   
   Dim sMsg As String
   
   If InStr(Lower(Interactions[existing_med!atccode]!description), "concomitant therapy should be avoided") Then
      Message.title = "Avoid this combination"
      sMsg = "You should avoid prescribing these two drugs together:\n\n " & Drug!generic & " and " & existing_med!generic & "\n\n"
      sMsg &= Replace(Interactions[existing_med!atccode]!description, "Concomitant therapy should be avoided", "", gb.IgnoreCase)
      If Message.Warning(sMsg, "Ignore Warning and Prescibe", "Cancel") = 2 Then
         Drug_New()
      Endif
   Endif
   If InStr(Lower(Interactions[existing_med!atccode]!description), "consider alternate therapy") Or InStr(Lower(Interactions[existing_med!atccode]!description), "use alternate therapy") Then
      Message.title = "Consider Alternate Therapy"
      sMsg = "You should consider not prescribing these two drugs together:\n\n" & Drug!generic & " and " & existing_med!generic & "\n\n"
      sMsg &= Interactions[existing_med!atccode]!description
      If Message.Warning(sMsg, "Ignore Warning and Prescibe", "Cancel") = 2 Then
         Drug_New()
      Endif
   Endif
   If InStr(Lower(Interactions[existing_med!atccode]!description), "decrease dose of") Then
      Message.Title = "Dose Adjustment Advised"
      sMsg = "A change in dosage of an existing medication - " & existing_med!generic & " is advised.\n\n"
      sMsg &= Interactions[existing_med!atccode]!description
      Message.Warning(sMsg)
   Endif
   If InStr(Lower(Interactions[existing_med!atccode]!description), "increased risk of cardiotoxicity and arrhythmias") Then
      Message.title = "Warning"
      sMsg = Drug!generic & " and " & existing_med!generic & "\n\n"
      sMsg &= Interactions[existing_med!atccode]!description
      Message.Warning(sMsg)
   Endif
   
End

Public Sub lvwDrugsWithInteractions_Click()
   
   lvwDrugsWithInteractions_Select()
   
End

Public Sub lvwDrugsWithInteractions_Select()
   '-------------------------------------------------------------------
   'User has clicked on the interactions noted today during prescribing
   '-------------------------------------------------------------------
   
   Dim DrugsInteractions As Collection
   
   Dim interaction As Collection
   
   lvwDrugsWithInteractions.MoveCurrent
   tabstrip1.index = 0
   tabstrip1.text = lvwDrugsWithInteractions.Item.Text
   DrugsInteractions = Drug_Interactions_For_Drugs_Prescribed[lvwDrugsWithInteractions.Item.Key]
   tlInteractions.text = ""
   For Each interaction In DrugsInteractions
      tlInteractions.text &= interaction!interactions
   Next
   
End
