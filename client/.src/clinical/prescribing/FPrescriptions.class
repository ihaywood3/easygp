' Gambas class file

' Gambas class file
' Copyright (C) 2008,2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
'TODO    functionality for authority with increased quantity.
'---------------------------------------------------------------------

' Whether something is PBS is determined by whether their is a drugs.pbs
' row for that product.
' RPBS have the pbs.chapter set to "R1"
' 
' The full list of chapters is:
' 
' Drug type code
' PBS Section
' 
' CI
' Colostomy and Ileostomy Associations
' Not in PBS schedule
' CS
' Section 100 (Chemotherapy Special Benefits)
' Not in PBS schedule - is a separate publication
' CT
' Section 100 (Chemotherapy Scheme)
' Not in PBS schedule - is a separate publication
' DB
' Emergency Drug (Doctors' Bag) Items
' Section 2 – Emergency Drug Supplies
' DS
' Dental (Special Pharmaceutical Benefits)
' Section 2 – Special Pharmaceutical Benefits
' DT
' Dental
' Section 2 – Pharmaceutical Benefits for Dental Use
' GE = ordinary PBS
' General
' Section 2 – General Pharmaceutical Benefits
' GH
' Section 100 (Growth Hormone)
' Section 2 – Items available under Special Arrangements (section 100)
' HB
' Section 100 (Highly Specialised Drugs) – Public Hospitals
' Items available under Special Arrangements (section 100)
' HS
' Section 100 (Highly Specialised Drugs) –Private Hospitals
' Items available under Special Arrangements (section 100)
' IF
' Section 100 (IVF/GIFT Treatment)
' Section 2 – Items available under Special Arrangements (section 100)
' MD
'palliative
' Section 100 (Opiate Addiction Treatment)
' Section 2 – Items available under Special Arrangements (section 100)
' MF
' Section 100 (Botulinum Toxin Program)
' Section 2 – Items available under Special Arrangements (section 100)
' OT
' Optometrical
' Section 2 – Pharmaceutical Benefits for Optometrical  Use
' PL
' Palliative Care
' Section 2 – Pharmaceutical Benefits for Palliative Care
' PQ
' Paraplegic and Quadriplegic Associations
' Not in PBS schedule - is a separate publication
' R1 = repat
' Repatriation Pharmaceutical Benefits
' Repatriation Pharmaceutical Benefits Section
' SA
' Section 100 (Special Access Scheme)
' Section 2 – Items available under Special Arrangements (section 100)
' SB
' Special Pharmaceutical Benefits
' Section 2 – Special Pharmaceutical Benefits
' SY
' Section 100 (Special Authority Items) – Private Hospitals
' Items available under Special Arrangements (section 100)
' SZ
' Section 100 (Special Authority Items) – Public Hospitals
' Items available under Special Arrangements (section 100)
' Re: Restrictions/generic prescribing
'

Private bExit As Boolean
Private bAuthority As Boolean       'If True the script item needs an authority.
Private bKeyValid As Boolean
Private bGenericSearch As Boolean
Private Script_Items_This_Consultation As Collection
Private Script As Collection
Private fk_pasthistory As Integer
Private fk_item_prescribed As Integer
Private pk_view As Integer
Private fk_company As String 
Private fk_generic_product As Integer
Private fk_prescribed_for As Integer
Private pbscode As String
Private iPrintStatus As Integer              'e.g print as PBS, RPBS, PBS AUTHORITY etc, see Const
Private restriction_code As String   ' pbs restriction.code  eg for authorities
Private restriction As String 
Private fk_prescibed_for As Integer = 0
Private fk_instruction As Integer = 0
Private iCurrentScriptKey As Integer
Private cProgressNote_Section As Integer
Private currentconsult As CConsult
Private bEmbedded As Boolean             'If true the form is embedded in a frmConsultNotes editor
Private embedded_in_form As String          'the form this form is embedded in
Private drugs As Collection
Private drug As Collection
Private Deleted_Scripts As Collection
Private currentDrug As Collection
Private timer_count As Integer
Private Drug_Restrictions As Collection
Private drug_Restriction As Collection 
Private Print_Status As String
Private medications As Collection
Private medication As Collection
Private fk_medication As Integer 
Private script_items As Collection
Private script_item As Collection
Private view_items As Collection       'all the items from the view of script items written this consultation
Private Instruction_Habits As Collection
Private Prescribing_Habits As Collection 
Private habit As Collection 

Public Sub set_embedded(F As String)
   '----------------------------------------------------------
   'If this form is embeded from another form set flag
   'embeddedinform = either "Fclinical", "FInbox" or "FTasks"
   '---------------------------------------------------------
   
   embedded_in_form = F
   
End

Public Sub Reload()
   '-----------------------------------------
   'Display scripts written this consultation
   '-----------------------------------------
   
   currentconsult.Refresh("prescriptions_written")
   ' cvwPrescriptions_Refresh(currentconsult!prescriptions_written)
   script_items = modUtil.Copy_Collection_Keyed_Sequentially(currentconsult!prescriptions_written)
   cvwPrescriptions_Refresh(script_items)
   Drug_New()
   
End

Public Sub Settings_Save()
   
   Settings["Prescriptions_" & Embedded_In_Form & "/HSplit_EditArea_Inner.Layout"] = HSplit_EditArea_Inner.Layout
   ' Settings["Tasks_Embedded_" & Embedded_In_Form & "/HSplit_EditArea_Outer.Layout"] = HSplit_EditArea_Outer.Layout
   ' Settings["Tasks_Embedded_" & Embedded_In_Form & "/Vsplit_Script.Layout"] = Vsplit_Script.Layout
   Settings["Prescriptions_" & Embedded_In_Form & "/Vsplit_Script.Layout"] = Vsplit_Script.Layout
   
End

Public Sub Settings_Load()
   
   Try Vsplit_Script.Layout = Settings["Prescriptions_" & embedded_in_form & "/Vsplit_Script.Layout"]
   Try HSplit_EditArea_Inner.Layout = Settings["Prescriptions_" & Embedded_In_Form & "/HSplit_EditArea_Inner.Layout"]
   
End

Public Sub Form_Open()
   
End

Public Sub Init(cons As CConsult)
   
   currentconsult = cons
   lblMeasure.text = " Reason for use  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Left_Textboxes, lblMeasure)
   modEditAreaHelpers.Resize_label(lblPrescribeFor, lblMeasure)
   modEditAreaHelpers.Resize_label(label29, lblMeasure)
   lblMeasure.text = "  Quantity  "
   modEditAreaHelpers.Resize_label(lblQuantity, lblMeasure)
   modEditAreaHelpers.Resize_label(lblLockDate, lblMeasure)
   modEditAreaHelpers.Resize_label(lblRepeats, lblMeasure)
   modEditAreaHelpers.Resize_label(lblPostAuthority, lblMeasure)
   With cvwPrescriptions
      .Columns.count = 9
      .Columns[0].text = "Date written"
      .Columns[1].text = "Date on Script"
      .Columns[2].text = "Brand"
      .Columns[3].text = "Generic drug"
      .Columns[4].text = "Strength"
      .Columns[5].text = "quantity/Repeats"
      .Columns[6].text = "PBS status"
      .Columns[7].text = "Directions"
      .Columns[8].text = "Prescibed For"
      
   End With
   cvwBrands.Columns.count = 1
   script_items = New Collection 'all those prescribed this consultation
   Settings_Load()
   Reload()
   
End

Public Sub mnuHealthIssues_Click()
   '---------------------------------------------------
   'User wants to link a request form to a health issue
   'The menu tag = the pk_pasthistory
   '---------------------------------------------------
   
   Select Case Last.tag
      Case "general notes", "remove link"
         txtHealthIssue.text = "General Notes"
         cProgressNote_Section = const.cSection_GeneralNotes
         fk_pasthistory = 0
      Case Else
         txtHealthIssue.text = currentconsult!past_history[Last.tag]!description
         fk_pasthistory = Last.tag
         cProgressNote_Section = const.cSection_Referrals
   End Select
   
End

Public Sub Delete(del As String)
   
End

Public Sub Delete_Undo()
   
End

Public Sub timer1_Timer()
   
   If timer_count > 3 Then
      If bGenericSearch Then
         Generics_Get()
      Else
         Brands_Get()
      End If  
   Endif
   
End

Public Sub Edit()
   '----------------------------
   'Edit a script written today
   '---------------------------
   
   Dim script_item As Collection
   
   cvwPrescriptions.MoveCurrent
   fk_item_prescribed = currentconsult!prescriptions_written[iCurrentScriptKey]!fk_item_prescribed   
   fk_medication = currentconsult!prescriptions_written[iCurrentScriptKey]!fk_medication
   txtdate.text = currentconsult!prescriptions_written[iCurrentScriptKey]!date_script_written
   txtClass.text = currentconsult!prescriptions_written[iCurrentScriptKey]!class
   txtGeneric.text = currentconsult!prescriptions_written[iCurrentScriptKey]!generic
   txtDrug.text = currentconsult!prescriptions_written[iCurrentScriptKey]!brand
   txtStrength.text = currentconsult!prescriptions_written[iCurrentScriptKey]!strength
   txtDirections.text = currentconsult!prescriptions_written[iCurrentScriptKey]!instruction
   TxtReason.text = currentconsult!prescriptions_written[iCurrentScriptKey]!prescribed_for
   txtQuantity.text = currentconsult!prescriptions_written[iCurrentScriptKey]!quantity
   txtRepeats.text = currentconsult!prescriptions_written[iCurrentScriptKey]!repeats
   lblRestrictions.text = currentconsult!prescriptions_written[iCurrentScriptKey]!restriction
   chkActive.Value = currentconsult!prescriptions_written[iCurrentScriptKey]!active
   ' chkSupressReason.value =  currentconsult!prescriptions_written[iCurrentScriptKey]!suppress_reason
   chkPostAuthority.value = chkPostAuthority!authority_post_to_patient
   chkReg24.value = currentconsult!prescriptions_written[iCurrentScriptKey]!reg24
   
End

Public Sub EditArea_TxtBox_KeyRelease()
   
   Select Case Last.tag
      Case "drug"
         Timer1.Enabled = True
         Inc timer_count
         bGenericSearch = False  
      Case "generic"
         bGenericSearch = True
         Timer1.Enabled = True
         Inc timer_count
   End Select
   
End

Public Sub Reset_Flags()
   
   fk_item_prescribed = 0
   pk_view = 0
   fk_company = ""          'fk_company + fk_generic_product is really equivalent to the non existant fk_brand
   fk_generic_product = 0
   pbscode = ""
   fk_prescribed_for = 0
   fk_instruction = 0
   fk_medication = 0
   print_status = ""
   restriction_code = ""
   restriction = ""
   bAuthority = False   
   
End

Public Sub EditArea_Clear()
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_Left_Textboxes)
   modEditAreaHelpers.mnuHealthIssues_Refresh(currentconsult, mnuHealthissues)
   teInteractions.Clear()
   lcRestrictions.Clear()
   pnlcolumnview.Visible = False   
   cvwBrands.Clear()
   lblRestrictions.text = ""
   lblDrug.text = "Drug"
   txtdate.text = Format(Now, "dd/mm/yyyy")
   bExit = False  
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case tag
      Case "date"
         bKeyValid = modUtil.AllowKeys(Const.AllowKeys_DateFormat, keycode)
      Case "repeats", "quantity"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case Else  
         bKeyValid = True  'date of injury can be free text e.g 'unkown'
   End Select
   Return bKeyValid
   
End

Public Sub Editarea_txtBox_KeyPress()
   
   If Not EditAreaTextbox_ExcludeKeys(key.code, Last.tag) Then    'validate key input first
      Stop Event                                                  'no good? don't show key output
      Return
   End If
   Select Case Key.Code
         
      Case Key.Down
         If pnlcolumnview.Visible Then
            With columnview1
               .MoveFirst()
               .SetFocus()
               .Item.Selected = True
            End With
            
         Endif
      Case Key.Return, Key.Tab
         
         Select Case Last.tag
            Case "date"
               txtDrug.SetFocus()
            Case "directions"
               TxtReason.SetFocus()
            Case "reason"
               tbOk.SetFocus()
         End Select
   End Select     
   
End

Public Sub EditArea_TxtBox_LostFocus()
   
   Last.BackGround = Color.white
   Select Case Last.tag
      Case "date"
         If Last.text <> "" Then
            If Not modEditAreaHelpers.Valid_Date(Last) Then
               bExit = True
               Last.text &= " **INVALID DATE**"
               Last.SetFocus()
               bExit = False   
            End If
         End If
      Case "drug"
         Timer1.stop()
   End Select
   
   Last.pos = 1
   
End

Public Sub EditArea_TxtBox_Change()
   
   If bexit Then Return 
   Select Case Last.tag
      Case "drug", "generic"
         If Trim(Last.text) = "" Then
            Drug_New()
         Endif
      Case "directions"
         Directions_Expand_Text(Last)
   End Select
   
End

Public Sub Directions_Expand_Text(txt As Textbox)
   
   bexit = True
   txt.text = Replace(txt.text, "bd", " twice daily")
   txt.text = Replace(txt.text, "tds", " three times daily")
   txt.text = Replace(txt.text, "nocte", " at night")
   txt.text = Replace(txt.text, "qid", " four times daily")
   txt.text = Replace(txt.text, "ac", " before meals")
   txt.text = Replace(txt.text, "prn", " as needed")
   txt.text = Replace(txt.text, "stat", " immediately")
   bexit = False
   
End

Public Sub EditArea_TxtBox_GotFocus()
   
   If Last.tag <> "restriction" Then Last.BackGround = Color.rgb(95, 255, 175)
   With pnlcolumnview
      .top = Vbox_EditArea_Left_Textboxes.top + Last.parent.top + Last.parent.height
      .left = Last.Left
      .width = txtClass.width
      .Visible = False
      .Raise
      
   End With
   Select Case Last.tag
      Case "reason"
         If Trim(Last.text) = "" Then
            PrescibedFor_Habits_Get()
         Endif
   End Select
   '  If Last.tag = "drug" Then Timer1.Start()
   
End

Public Sub PrescibedFor_Habits_Get()
   
   Prescribing_Habits = modPrescribingDBI.PrescibedFor_Habits_Get(fk_generic_product)
   For Each habit In Prescribing_Habits
      TxtReason.text = habit!prescribed_for
      tbOk.SetFocus()
      Break
   Next
   
End

Public Sub columnview1_KeyPress()
   
   If Key.code = Key.return Then
      columnview1_DblClick()
   Endif
   
End

Public Sub lcRestrictions_Click()
   
   Restrictions_Click()
   
End

Public Sub Restrictions_Click()
   '-------------------------------------------------------------------------------------
   'User has clicked on one of the textlabel controls embedded in the lcRestrictions list
   'set restriction code and text
   '-------------------------------------------------------------------------------------
   
   restriction_code = Last.children[Last.index].tag
   textEdit1.richtext = Last.children[Last.index].text
   restriction = textEdit1.Text
   bexit = True   
   txtApprovalNumber.text = restriction_code
   bExit = False  
   If pnlcolumnview.Visible Then columnview1_DblClick()
   
End

Public Sub Restrictions_Show()
   '--------------------------------------------------------------------------
   'As user clicks on a columnview row, show all restrictions for that pbscode
   'Show a drugs restriction details, these can be just restrictions of use
   'or authority indications, uses the pbscode (restriction.pbscode)
   '--------------------------------------------------------------------------
   
   Dim row As Integer = 0
   Dim pbscode As String 
   Dim lbl As TextLabel
   Dim sep As Separator
   
   Drug_Restrictions = New Collection
   
   currentDrug = drugs[columnview1.Item.key]         'drug showing in the columview
   pbscode = currentDrug!pbscode 
   lcRestrictions.Clear()
   For Each drug In drugs                           'All drugs in the collectioni
      If Not IsNull(drug!restriction) Then            'If drug has a restrciotn
         If drug!pbscode = pbscode Then                'if the pbscode = same as that we are showing
            If Not Drug_Restrictions.Exist(drug!restriction) Then  'if not already in the collection 
               With lbl = New TextLabel(lcRestrictions) As "Restrictions"  'add it, and to the list container
                  .text = drug!restriction           'This is what will be sent to the printer (minus html tags)
                  .tag = drug!restriction_code       'This will be saved to the database, if the row is selected
                  .Foreground = Color.DarkGray
                  .AutoResize = True
                  .font = Font["Arial,9"]
                  
               End With
               With sep = New Separator(lcRestrictions)
                  .Height = 3
                  .Foreground = Color.Black
               End With
               Drug_Restrictions.Add(drug!restriction, drug!restriction)
               Inc row
            Endif
         End If    
         
      End If 
   Next
   
End

Public Sub PBS_Show(drug As Collection)
   '-----------------------------------------------------------
   'Shows the PBS status of the currently selected drug
   'Not until user selects an authority wording can we show
   'the streamlined, unless we just opt to show the first one?
   '-----------------------------------------------------------
   
   Select Case drug!chapter & drug!restrictionflag     ' & drug!restriction_flag = "U", "R" or "A"
      Case "OTU"
         lblRestrictions.text = "PBS OPTOMETRIST"
         iPrintStatus = const.script_print_type_pbs
      Case "OTR"
         lblRestrictions.text = "PBS OPTOMETRIST RESTRICTED"
         iPrintStatus = const.script_print_type_pbs
         
      Case "GEU"
         lblRestrictions.text = "PBS UNRESTRICTED"
         iPrintStatus = const.script_print_type_pbs
      Case "GER"
         lblRestrictions.text = "PBS RESTRICTED"
         iPrintStatus = const.script_print_type_pbs
      Case "GEA"
         If drug!streamlined Then  
            lblRestrictions.text = "PBS STREAMLINED" '[" & drug!restriction_code & "]"
            iPrintStatus = const.script_print_type_pbs_authority_streamlined
            txtApprovalNumber.text = drug!restriction_code
            bAuthority = True
         Else
            lblRestrictions.text = "PBS AUTHORITY"
            iPrintStatus = const.script_print_type_pbs_authority
            bAuthority = True
         End If
      Case "R1U"
         lblRestrictions.text = "RPBS UNRESTRICTED"
         iPrintStatus = const.script_print_type_rpbs
      Case "R1R"
         lblRestrictions.text = "RPBS RESTRICTED"
         iPrintStatus = const.script_print_type_rpbs
      Case "R1A"
         If drug!streamlined Then 
            lblRestrictions.text = "RPBS STREAMLINED" ' [" & drug!restriction_code & "]"
            iPrintStatus = const.script_print_type_rpbs_authority_streamlined
            txtApprovalNumber.text = drug!restriction_code
            bAuthority = True
         Else
            lblRestrictions.text = "RPBS AUTHORITY"
            iPrintStatus = const.script_print_type_rpbs_authority_streamlined
            bAuthority = True
         End If
      Case Else
         lblRestrictions.text = "PRIVATE SCRIPT"
         iPrintStatus = const.script_print_type_private
   End Select  
   
End

Public Sub columnview1_Select()
   
   columnview1.MoveCurrent()
   Restrictions_Show()         'show which restrictions apply to this drug/generic or brand
   PBS_Show(drugs[columnview1.Item.key])
   Brands_For_Generic_Show() 
   
End

Public Sub Brands_For_Generic_Show()

   Dim brands As Collection
   Dim brand As Collection
   
   brands = modPrescribingDBI.Brands_For_Generic_Get(drugs[columnview1.Item.key]!generic, drugs[columnview1.Item.key]!fk_product)
   cvwBrands.Clear
   For Each brand In brands
      cvwBrands.Add(brand!pk_view, 0)
      cvwBrands[brand!pk_view][0] = Left(brand!brand) & Lower(Right(brand!brand, Len(brand!brand) - 1))
   Next
   Print cvwBrands.count 
   
End

Public Sub columnview1_DblClick()
   
   Select Case columnview1.tag.tag 'don't make me 'last'
      Case "drug"
         Drug_Select()
      Case "generic"
         Generic_Select()
   End Select
   
End

Public Sub Generics_Get()
   
   Dim last_drug As String 'drug+quantity+repeats
   
   Timer1.Stop()
   With columnview1
      .Clear()
      .Columns.count = 5
   End With
   cvwBrands.Clear()
   If Trim(txtGeneric.text) = "" Then Return 
   drugs = modPrescribingDBI.Generics_Get(Trim(txtGeneric.text))
   If drugs.count Then
      For Each drug In drugs
         If last_drug <> drug!generic & drug!pbscode Then 
            last_drug = drug!generic & drug!pbscode
            '  If last_drug <> drug!drug & Str(drug!quantity) & Str(drug!max_rpt) Then 
            '              last_drug = drug!drug & Str(drug!quantity) & Str(drug!max_rpt)
            ' 
            
            ColumnView1.add(drug!pk_view, 0)
            columnview1[drug!pk_view][0] = drug!generic
            If InStr(drug!strength, "ml") Then
               columnview1[drug!pk_view][1] = modPrescribingDBI.ConvertTo5mls(drug!strength)
            Else
               columnview1[drug!pk_view][1] = drug!strength
            End If   
            columnview1[drug!pk_view][2] = drug!form
            columnview1[drug!pk_view][3] = Str(drug!quantity) & " Rpt:" & drug!max_rpt  
         End If   
      Next
      pnlcolumnview.Visible = True  
      cvwBrands.visible = True
      columnview1.tag = txtDrug 
      
   Endif
   
End

Public Sub Generic_Select()
   
   Drug_Select()
   
End

Public Sub Brands_Get()
   ' 
   ' Return 
   ' Timer1.Stop()
   ' With columnview1
   '    .Clear()
   '    .Columns.count = 4
   ' End With
   ' If Trim(txtDrug.text) = "" Then Return 
   ' brands = modPrescribingDBI.Brands_Get(Trim(txtDrug.text))
   ' If brands.count Then
   '    For Each brand In brands
   '       
   '       ColumnView1.add(brand!pk_view, 0)
   '       columnview1[brand!pk_view][0] = brand!brand
   '       columnview1[brand!pk_view][1] = brand!generic
   '       If InStr(brand!strength, "ml") Then
   '          columnview1[brand!pk_view][2] = modPrescribingDBI.ConvertTo5mls(brand!strength)
   '       Else
   '          columnview1[brand!pk_view][2] = brand!strength
   '       End If   
   '       columnview1[brand!pk_view][3] = brand!form
   '    Next
   '    pnlcolumnview.Visible = True  
   '    cvwBrands.Visible = False   
   '    columnview1.tag = txtDrug 
   '    
   ' Endif
   ' 

End

Public Sub Drug_Print()
   
   ' Save()
   Print_Script_Items()

End

Public Sub Drug_Select()
   '-------------------------------------------------
   'User is picking a drug from the popup columnview
   '------------------------------------------------
   
   Dim pbs_script_type As String                   'chapter + restrictionflag - selects how to print script
   
   columnview1.MoveCurrent                         'set the key
   drug = drugs[columnview1.Item.key]            'set drug collection   
   
   fk_company = drug!fk_company                   'if not null points to drug.drug using fk_generic_product
   fk_generic_product = drug!fk_product      'never null eg points to amoxycillin 250mg capsules
   restriction_code = drug!fk_restriction         'may be null, if not = drugs restriction or authority details
   pbscode = drug!pbscode                         'may be null if not pbs
   
   bexit = True
   txtGeneric.text = drug!generic
   txtDrug.text = drug!brand 'won't be showing if user config configuration to hide this is set (not done yet FIXME)
   txtDrug.pos = 1
   txtClass.text = drug!class   'fixme
   If InStr(drug!strength, "ml") Then
      txtStrength.text = modPrescribingDBI.ConvertTo5mls(drug!strength)
   Else
      txtStrength.text = drug!strength & " " & drug!form
   End If
   txtStrength.pos = 1
   txtRepeats.text = drug!max_rpt
   txtQuantity.text = drug!quantity
   
   PBS_Show(drug)
   Instruction_Habits = modPrescribingDBI.Instruction_Habits_Get(fk_generic_product)
   If Instruction_Habits.count Then
      For Each Habit In Instruction_Habits
         txtDirections.text = Habit!instruction
         TxtReason.SetFocus()
         Break
      Next  
   Else 
      txtDirections.SetFocus()
   Endif
   
   bexit = False 
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "new"
         Drug_New()
      Case "ok"
         Add_to_list()
         
         Drug_Print()
      Case "print"
         ' Save()
         Drug_Print()
      Case "brief pi"
         Brief_PI()
      Case "authority"
         Authority()
   End Select
   
End

Public Sub Add_to_list()
   '----------------------------------------------------------------------------------------
   'Script items are added to the list under the editing area, and printed en-mass whenever
   'the user elects to do this - 3 items on a script for 'like' items
   'e.g if all pbs, all private
   '----------------------------------------------------------------------------------------
   
   Dim x As Integer 'for readability
   
   If Not Scipt_Item_Valid() Then Return
   If Script_Item_Duplicate() Then Return 
   
   script_item = New Collection
   If fk_item_prescribed Then Script_item!fk_item_prescribed = fk_item_prescribed
   If fk_medication Then script_item!fk_medication = fk_medication
   script_item!date_on_script = Val(txtdate.text)
   script_item!fk_consult = currentconsult.GetPK()
   script_item!date_script_written = Now()
   script_item!brand = Trim(txtDrug.text)
   script_item!fk_company = fk_company
   script_item!generic = txtGeneric.Text
   script_item!fk_generic_product = fk_generic_product
   script_item!strength = Trim(txtStrength.text)
   script_item!quantity = Val(txtQuantity.text)
   script_item!repeats = Val(txtRepeats.text)
   script_item!pbs_print_status = lblRestrictions.Text
   script_item!instruction = Trim(txtDirections.text) 
   script_item!prescribed_for = Trim(txtReason.text)  
   Script_item!restriction_code = restriction_code
   Script_item!suppress_reason = False   'fixme implement me
   Script_item!pbscode = pbscode
   Script_item!fk_print_status = iPrintStatus
   Script_item!reg24 = CBool(chkReg24.Value)
   Script_item!active = CBool(chkActive.value)
   Script_item!authority_approval_number = Trim(txtApprovalNumber.Text)
   Script_item!authority_post_to_patient = CBool(chkPostAuthority.value)
   If Trim(txtApprovalNumber.Text) <> "" Then
      Script_item!authority_script_number = modPrescribingDBI.Authority_Number_Get_Next()
   End If
   Script_Item!script_number = modPrescribingDBI.Script_Number_Get_Next()
   Script_item!authority_indication = restriction
   script_items.Add(script_item, script_items.count)
   cvwPrescriptions_Refresh(script_items)
   
End

Public Sub Save()
   '-----------------------------------------------------------
   'Saves the drugs in the prescriptions list, then prints them
   'each  script_item in collection is an amalgum off the
   'medication details and the script details, so dis-entangle
   'Ian don't worry about this seeming lack of logic for moment
   'I'm just doing the functionality
   'The nomenclature in this module sucks at the moment, sorry
   '-----------------------------------------------------------
   
   Dim medication As Collection
   Dim prescribed As Collection
   
   modDBConnect.BeginTrans()
   For Each script_item In script_items 
      '------------------------------------------------------------------     
      'The 'core' features of a medication > clin_prescribing.medications
      '------------------------------------------------------------------
      medication = New Collection 
      medication!fk_medication = script_item!fk_medication
      medication!fk_generic_product = script_item!fk_generic_product
      medication!fk_company = script_item!fk_company
      medication!instruction = script_item!instruction 
      medication!prescribed_for = script_item!prescribed_for
      If Not IsNull(script_item!restriction_code) Then 
         medication!restriction_code = script_item!restriction_code
      Endif
      medication!pbscode = script_item!pbscode
      medication!fk_print_status = script_item!fk_print_status
      medication!suppress_reason = False 'fixme put in mechanism for this
      medication!active = script_item!active
      medication!quantity = script_item!quantity
      medication!repeats = script_item!repeats
      '----------------------------------------------------------------------------------------------
      '   Table: clin_prescibring.prescibed
      '
      '   pk serial NOT NULL,
      '   fk_consult integer NOT NULL,
      '   fk_medication integer NOT NULL,
      '   script_date date NOT NULL, -- The actual date on the script may not be the consulation date, can be back/forwarded dated,...
      '   reg24 boolean DEFAULT false, -- If true reg24 allows us to tell the...
      '   authority_script_number integer, -- the pbs requires a unique script number for an authority item, pretty stupid, but a number that...
      '   authority_approval_number text, -- either the steamlined authority number or the phone approval number obtained from a pbs operator
      '   authority_post_to_patient boolean DEFAULT false,
      '   script_number integer,
      '   concession_details text,
      '   brand_substitution boolean DEFAULT true,
      '   fk_progress_note integer,
      '   deleted boolean DEFAULT false,
      '   FIXME FROM IAN- REMOVE FK_CONSULT  AND USE FK_PROGRESS NOTE TO GET IT ??
      ' Build a new collection for each item = could be new or old data
      ' 
      '----------------------------------------------------------------------------------------------
      prescribed = New Collection
      prescribed!fk_item_prescribed = Script_item!fk_item_prescribed
      prescribed!date_on_script = Script_item!date_on_script
      prescribed!fk_consult = Script_item!fk_consult
      prescribed!reg24 = Script_item!reg24 
      prescribed!authority_script_number = Script_item!authority_script_number
      prescribed!authority_approval_number = Script_item!authority_approval_number
      prescribed!authority_post_to_patient = Script_item!authority_post_to_patient
      prescribed!script_number = Script_item!script_number
      ' prescribed! = concession_details : these three not yet implemented
      ' prescribed! = brand_substitution : do not remove this code
      ' prescribed! = fk_progress_note
      
      fk_item_prescribed = modPrescribingDBI.Save(currentconsult!patient!fk_patient, script_item, prescribed, medication)
   Next  
   modDBConnect.CommitTrans()
   Print_Script_Items()
   FClinical.Refresh_Section(const.cSection_Prescriptions)    'refresh lists on main screen FClinical
   FClinical.Refresh_AllPreviousNotes()
   Reload()
   
End

Public Sub Save_not_quite_so_old()
   '-----------------------------------------------------------
   'Saves the drugs in the prescriptions list, then prints them
   'each  script_item in collection is an amalgum off the
   'medication details and the script details, so dis-entangle
   'Ian don't worry about this seeming lack of logic for moment
   'I'm just doing the functionality
   'The nomenclature in this module sucks at the moment, sorry
   '-----------------------------------------------------------
   
   Dim medication As Collection
   Dim Prescibed As Collection
   
   modDBConnect.BeginTrans()
   For Each script_item In script_items 
      '------------------------------------------------------------------     
      'The 'core' features of a medication > clin_prescribing.medications
      '------------------------------------------------------------------
      medication = New Collection 
      medication!fk_medication = script_item!fk_medication
      medication!fk_generic_product = script_item!fk_generic_product
      medication!fk_company = script_item!fk_company
      medication!instruction = script_item!instruction 
      medication!prescribed_for = script_item!prescribed_for
      If Not IsNull(script_item!restriction_code) Then 
         medication!restriction_code = script_item!restriction_code
      Endif
      medication!pbscode = script_item!pbscode
      medication!fk_print_status = script_item!fk_print_status
      medication!suppress_reason = False 'fixme put in mechanism for this
      medication!active = script_item!active
      medication!quantity = script_item!quantity
      medication!repeats = script_item!repeats
      '----------------------------------------------------------------------------------------------
      'Remove re-allocated keys, or text not needed, leaves clin_prescibring.prescribed table content
      '----------------------------------------------------------------------------------------------
      script_item.Remove("fk_generic_product")
      script_item.Remove("fk_medication")
      script_item.Remove("fk_company")
      script_item.Remove("instruction")
      script_item.Remove("prescribed_for")
      script_item.Remove("restriction_code")
      script_item.Remove("pbscode")
      script_item.Remove("fk_print_status")
      script_item.Remove("s8")
      script_item.Remove("active")
      script_item.Remove("suppress_reason")
      script_item.Remove("brand")
      script_item.Remove("generic")
      script_item.Remove("strength")
      script_item.Remove("quantity")
      script_item.Remove("repeats")
      script_item.Remove("pbs_print_status")
      script_item.Remove("date_script_written")
      fk_item_prescribed = modPrescribingDBI.Save(currentconsult!patient!fk_patient, Script_Items_This_Consultation, fk_item_prescribed, script_Item, fk_medication, medication)
   Next  
   modDBConnect.CommitTrans()
   Print_Script_Items()
   FClinical.Refresh_Section(const.cSection_Prescriptions)    'refresh lists on main screen FClinical
   FClinical.Refresh_AllPreviousNotes()
   Reload()
   
End

Public Sub Save_old()
   ' '-----------------------------------------------------------
   ' 'Saves the drugs in the prescriptions list, then prints them
   ' '-----------------------------------------------------------
   ' 
   ' Dim ScriptItem As New Collection
   ' Dim medication As New Collection
   ' 
   ' 'If Vbox_EditArea.padding = 0 then return 
   '  
   ' 
   '    If fk_script_item <> 0 Then
   '       ScriptItem!fk_script_item = fk_script_item  
   '    Else
   '       'fixme this logic is incomplete, eg dr may not have typed in a Zed number obtained by phone.
   '       If Trim(txtApprovalNumber.text) <> "" Then 
   '          ScriptItem!authority_approval_number = Trim(txtApprovalNumber.Text)
   '          ScriptItem!authority_post_to_patient = CBool(chkPostAuthority.value)
   '          ScriptItem!authority_script_number = modPrescribingDBI.Authority_Number_Get_Next()
   '       End If
   '       ScriptItem!script_number = modPrescribingDBI.Script_Number_Get_Next()
   '    Endif
   '    
   '    ScriptItem!fk_consult = currentconsult.GetPK()
   '    ScriptItem!script_date = Val(txtdate.text)
   '    medication!fk_generic_product = fk_generic_product
   '    medication!fk_company = fk_company
   '    medication!instruction = Trim(txtDirections.text)  'this and nex line will be dropped later when key found 
   '    medication!prescribed_for = Trim(txtReason.text)     'can't trust user not to have changed a pre-selected one
   '    If restriction_code <> "" Then 
   '       medication!restriction_code = restriction_code
   '    Endif
   '    medication!pbscode = pbscode
   '    medication!fk_print_status = iPrintStatus 'how it will  usually be printed
   '    medication!suppress_reason = False 'fixme put in mechanism for this
   '    ScriptItem!reg24 = CBool(chkReg24.Value)
   '    'fixme put in s8 to medication
   '    medication!active = CBool(chkActive.value)
   '    medication!quantity = Val(txtQuantity.text)
   '    medication!repeats = Val(txtRepeats.text)
   '    
   '    modDBConnect.BeginTrans()
   '    ' ScriptItem!fk_medication = modPrescribingDBI.Save_Medication(medications, fk_medication, medication)
   '    fk_script_item = modPrescribingDBI.Save(currentconsult!patient!fk_patient, Prescriptions, fk_script_item, scriptItem, fk_medication, medication)
   '    modPrescribingDBI.Script_Number_Save(ScriptItem!script_number)
   '    If Not IsNull(ScriptItem!authority_script_number) Then 
   '       modPrescribingDBI.Authority_Number_Save(ScriptItem!authority_script_number)
   '    Endif
   ' modDBConnect.CommitTrans()
   ' FClinical.Refresh_Section(const.cSection_Prescriptions)    'refresh lists on main screen FClinical
   ' FClinical.Refresh_AllPreviousNotes()
   ' Reload()
   
End

Public Function cvwPrescriptions_Refresh(Script_Items_Written As Collection)
   
   Dim x As Integer
   
   cvwPrescriptions.Clear()
   
   For Each script_item In Script_Items_Written
      
      x = cvwPrescriptions.Count
      cvwPrescriptions.Add(x, 0)
      cvwPrescriptions[x][0] = Format(script_item!date_script_written, "dd/mm/yyyy")
      cvwPrescriptions[x][1] = Format(script_item!date_on_script, "dd/mm/yyyy")
      cvwPrescriptions[x][2] = script_item!brand
      cvwPrescriptions[x][3] = script_item!generic
      cvwPrescriptions[x][4] = script_item!strength   
      cvwPrescriptions[x][5] = script_item!quantity & " Rpt:" & script_item!repeats 
      cvwPrescriptions[x][6] = script_item!pbs_print_status
      cvwPrescriptions[x][7] = script_item!instruction  
      cvwPrescriptions[x][8] = script_item!prescribedfor   
      
   Next
   Print script_items
   
End

Public Function Script_Item_Duplicate() As Boolean
   '--------------------------------------------------------------------------
   'Checks the edit area item against the scripts prescribed this consulation
   'If already prescribed, then warns user and prevents a save
   'Returns True if duplicated
   'checks against:
   '  date of script
   '  generic via the generic code
   '  brand via the company code
   '  instructions and directions
   '  repeats and quantities with a warning
   '  restriction code aka authority code
   '  ignores active/inactive
   '--------------------------------------------------------------------------
   
   Dim script_written As Collection
   Dim new_item As String
   Dim existing_item As String 
   
   new_item = Format(Val(txtdate.text), "dd/mm/yyyy") & " " & Str(fk_generic_product) & " " 
   new_item &= fk_company & " " & Trim(Lower(txtDirections.text)) & " "
   ' new_item &= Trim(Lower(txtReason.text)) & " " & restriction_code
   
   For Each script_written In currentconsult!prescriptions_written
      existing_item = Format(script_written!date_on_script, "dd/mm/yyyy") & " "
      existing_item &= Str(script_written!fk_generic_product) & " "
      If IsNull(script_written!fk_company) Then
         existing_item &= " "
      Else
         existing_item &= script_written!fk_company & " "
      Endif
      '  existing_item &= script_written!instruction & " " 
      '  existing_item &= script_written!prescribed_for & " "
      '  If IsNull(script_written!restriction_code) Then
      '    existing_item &= ""
      ' Else
      '    existing_item &= script_written!restriction_code   
      '  Endif
      If new_item = existing_item Then
         Message.Info("This item has already been presecribed this consultation")
         Return True
      Endif
   Next
   Return False
   
End

Public Function Scipt_Item_Valid() As Boolean
   
   If Not IsDate(txtdate.text) Then
      txtdate.SetFocus()
      Return
   Endif
   If fk_generic_product = 0 Then
      txtGeneric.SetFocus()
      Return
   Endif
   If txtQuantity.text = "" Then
      txtQuantity.SetFocus()
   Endif
   If txtRepeats.Text = "" Then
      txtRepeats.SetFocus
      Return
   Endif
   
   If txtDirections.text = "" Then
      Message.Info("Please add directions for this script item before saving.")
      txtDirections.SetFocus()
      Return
   Endif
   If txtReason.text = "" Then
      If Message.Warning("Do you want to the reason or condition for which you prescribed this medication?", "Yes", "No") = 1 Then Return
   Endif
   If drug!restrictionflag = "A" And restriction_code = "" Then
      Message.Info("Please select an authority indication for this drug before saving")
      lcRestrictions.Children[0].SetFocus()
      Return 
   Endif
   Return True
   
End

Public Sub Authority()
   
End

Public Sub Print_Script_Items()
   
   For Each script_item In script_items 
      modPrinting.Print_latex(Script_LaTex_Construct(script_item).GetData(), const.Paper_Script)
   Next
   
End

Public Sub Script_LaTex_Construct(script_item As Collection) As CTemplate
   
   Dim templ As CTemplate
   
   templ = New CTemplate("authority-script", "tex")
   ScriptForm_Construct(script_item, templ)
   Return templ
   
End

Public Sub ScriptForm_Construct(script_item As Collection, templ As CTemplate)

   Dim Drug As String
   Dim drugs As String 
   templ.Subst_common(currentconsult)
   
   templ.Subst("authority_heading_authority_script_number", script_item!pbs_print_status & " AUTHORITY " & script_item!authority_script_number) 
   templ.Subst("patientaddress", currentconsult!patient!street & " " & currentconsult!patient!town & " " & currentconsult!patient!postcode)
   templ.Subst("medicarenumber", currentconsult!patient!medicare_number)
   templ.Subst("doctorname", modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename)
   templ.Subst("prescribernumber", modDBConnect.currentUser!prescriber_number)
   templ.Subst("patientname", currentconsult!patient!title & " " & currentconsult!patient!firstname & " " & currentconsult!patient!surname)
   templ.Subst("script_date", Format(script_item!date_script_written, "dd/mm/yyyy"))
   templ.Subst("script_number", script_item!script_number)
   If InStr(script_item!pbs_print_status, "PBS") Then  
      templ.Checkbox("pbs_checkbox", True)
   Else
      templ.Checkbox("pbs_checkbox", False)
   End If
   If InStr(script_item!pbs_print_status, "RPBS") Then   'and check against patients actual rpbs entitlements FIXME SHOULD DO THIS BACK IN PRESRIBING.
      templ.Checkbox("rpbs_checkbox", True)
   Else
      templ.Checkbox("rpbs_checkbox", False)
   End If
   templ.Checkbox("previous_authority_yes_checkbox", True)
   templ.Checkbox("previous_authority_no_checkbox", False)
   Print script_item
   If script_item!authority_post_to_patient = True Then
      templ.Checkbox("sendtopatient_checkbox", True)
   Else
      templ.Checkbox("sendtopatient_checkbox", False)
   Endif
   templ.Subst("authority_script_number", Script_Item!authority_script_number)
   templ.Subst("authority_Indication", script_item!authority_indication)
   templ.Subst("authority_approval_number", script_item!authority_approval_number)
   templ.Subst("quantity_repeats", script_item!strength & " " & script_item!quantity & "'s Rpt " & script_item!repeats)
   templ.Subst_Drugs(script_item)

End 

Public Sub Brief_PI()
   
End

Public Sub Drug_New()
   
   EditArea_Clear()
   Reset_Flags()
   'fixme put in option so that focus on either generic or brand
   'txtDrug.SetFocus()
   txtdate.text = Format(Now, "dd/mm/yyyy")
   chkActive.value = True
   txtGeneric.SetFocus()
   
End

Public Sub cvwPrescriptions_Menu()
   
   If Last.count Then
      mnuPrescriptions.Popup()
   Endif
   
End

Public Sub cvwPrescriptions_Click()
   
   cvwPrescriptions.MoveCurrent
   iCurrentScriptKey = Last.item.key
   
End

Public Sub mnuPrescriptions_Click()
   
   Select Case Last.tag
      Case "edit"
         Edit()
      Case "delete"
         Delete("single")
      Case "delete all"
         Delete("all")
      Case "undo delete"
         Delete_Undo()
      Case "print single"
      Case "print all"
      Case "brief pi"
      Case "full pi"
      Case "fonts"
         modUtil.Columnview_SetFont(cvwPrescriptions, "Prescriptions_" & Embedded_In_Form)
      Case "help"   
   End Select
   
End

Public Sub EditArea_Buttons_KeyPress()
   
   If key.code = key.return Then    
      Select Case Last.tag
         Case "ok"
            Add_to_list()
      End Select
   End If   
   
End
