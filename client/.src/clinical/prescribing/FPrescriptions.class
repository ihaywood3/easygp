' Gambas class file

' Gambas class file
' Copyright (C) 2008,2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
'TODO    functionality for authority with increased quantity.
'---------------------------------------------------------------------

' Whether something is PBS is determined by whether their is a drugs.pbs
' row for that product.
' RPBS have the pbs.chapter set to "R1"
' 
' The full list of chapters is:
' 
' Drug type code
' PBS Section
' 
' CI
' Colostomy and Ileostomy Associations
' Not in PBS schedule
' CS
' Section 100 (Chemotherapy Special Benefits)
' Not in PBS schedule - is a separate publication
' CT
' Section 100 (Chemotherapy Scheme)
' Not in PBS schedule - is a separate publication
' DB
' Emergency Drug (Doctors' Bag) Items
' Section 2 – Emergency Drug Supplies
' DS
' Dental (Special Pharmaceutical Benefits)
' Section 2 – Special Pharmaceutical Benefits
' DT
' Dental
' Section 2 – Pharmaceutical Benefits for Dental Use
' GE = ordinary PBS
' General
' Section 2 – General Pharmaceutical Benefits
' GH
' Section 100 (Growth Hormone)
' Section 2 – Items available under Special Arrangements (section 100)
' HB
' Section 100 (Highly Specialised Drugs) – Public Hospitals
' Items available under Special Arrangements (section 100)
' HS
' Section 100 (Highly Specialised Drugs) –Private Hospitals
' Items available under Special Arrangements (section 100)
' IF
' Section 100 (IVF/GIFT Treatment)
' Section 2 – Items available under Special Arrangements (section 100)
' MD
'palliative
' Section 100 (Opiate Addiction Treatment)
' Section 2 – Items available under Special Arrangements (section 100)
' MF
' Section 100 (Botulinum Toxin Program)
' Section 2 – Items available under Special Arrangements (section 100)
' OT
' Optometrical
' Section 2 – Pharmaceutical Benefits for Optometrical  Use
' PL
' Palliative Care
' Section 2 – Pharmaceutical Benefits for Palliative Care
' PQ
' Paraplegic and Quadriplegic Associations
' Not in PBS schedule - is a separate publication
' R1 = repat
' Repatriation Pharmaceutical Benefits
' Repatriation Pharmaceutical Benefits Section
' SA
' Section 100 (Special Access Scheme)
' Section 2 – Items available under Special Arrangements (section 100)
' SB
' Special Pharmaceutical Benefits
' Section 2 – Special Pharmaceutical Benefits
' SY
' Section 100 (Special Authority Items) – Private Hospitals
' Items available under Special Arrangements (section 100)
' SZ
' Section 100 (Special Authority Items) – Public Hospitals
' Items available under Special Arrangements (section 100)
' Re: Restrictions/generic prescribing
' From: 
' Ian Haywood <ihaywood3@gmail.com>
'   To: 
' richard terry <rterry@pacific.net.au>
'   Date: 
' 13/01/11 14:45
' On Thu, Jan 13, 2011 at 2:09 PM, richard terry <rterry@pacific.net.au> wrote:
' 
' > No you won't as there are multiple identical pk's for product.
' Ah, because you are including the pbs and the restrictions in the join
' (as you know there can be multiple pbs items for each drug and
' multiple restrictions
' for each pbs item)
' Hmm, ok, add these into the string, so
' 
' 'B' || brand.pk || pbs.pbscode || restriction.code as pk_view
'    or
' 
' 'G' || product.pk || pbs.pbscode || restriction.code as pk_view
' 
' this will generate a unique but constant PK string (your method is unique but
' not constant, it will also hammer database performance, and eventually
' you will cause
' an integer overflow as it's every row ever returned on every query)
' 
' > Anyway, the streamlining is now the major barrier for me so if you could give
' > priority to sorting that it would be good. In the meantime I'll do as you
' > suggest and just manually put in a few.
' "barrier"? to what? surely there's heaps of work to do before you
' could use this to generate a script on a real patient, at least:
' - storing, maintaining and auditing lists of medications
' - including med lists in care plans and referrals
' 
' plus we are still trying to work out the basic search views!
' 
' if the completeness of my drug DB becomes a bottleneck (and I agree
' it's not complete), my advice would be to work on these things.
' > Another Question which i didn't notice - telling PBS from RPBS, I guess it is
' > there somewhere.
' as I said pbs.chapter = 'R1'
' maybe that mail got dropped: I'll re-send.
' 
' todos: editarea_limit_chars eg numbers for repeats etc, dates etc.

Private bExit As Boolean
Private bAuthority As Boolean       'If True the script item needs an authority.
Private bKeyValid As Boolean
Private bGenericSearch As Boolean
Private Prescriptions As Collection
Private Script As Collection
Private fk_pasthistory As Integer
Private fk_script_item As Integer
Private pk_view As Integer
Private fk_company As String 
Private fk_generic_product As Integer
Private fk_prescribed_for As Integer
Private pbscode As String
Private iPrintStatus As Integer              'e.g print as PBS, RPBS, PBS AUTHORITY etc, see Const
Private restriction_code As String   ' pbs restriction.code  eg for authorities
Private restriction As String 
Private fk_prescibed_for As Integer = 0
Private fk_instruction As Integer = 0
Private iCurrentScriptKey As Integer
Private cProgressNote_Section As Integer
Private currentconsult As CConsult
Private bEmbedded As Boolean             'If true the form is embedded in a frmConsultNotes editor
Private embedded_in_form As String          'the form this form is embedded in
Private Brands As Collection
Private Brand As Collection
Private Deleted_Scripts As Collection
Private currentDrug As Collection
Private timer_count As Integer
Private Drug_Restrictions As Collection
Private drug_Restriction As Collection 
Private Print_Status As String
Private medications As Collection
Private medication As Collection
Private fk_medication As Integer 

Public Sub set_embedded(F As String)
   '----------------------------------------------------------
   'If this form is embeded from another form set flag
   'embeddedinform = either "Fclinical", "FInbox" or "FTasks"
   '---------------------------------------------------------
   
   embedded_in_form = F
   
End

Public Sub Reload()
   '-----------------------------------------
   'Display scripts written this consultation
   '-----------------------------------------
   
   Dim x As Integer 'for readability

   cvwPrescriptions.Clear()
   cvwPrescriptions.Visible = True  
   Drug_New()
   
   currentconsult.Refresh("prescriptions_written")
   For Each script In currentconsult!prescriptions_written
      x = script!pk_view
      cvwPrescriptions.Add(x, 0)
      cvwPrescriptions[x][0] = Format(script!date_script_written, "dd/mm/yyyy")
      cvwPrescriptions[x][1] = Format(script!date_on_script, "dd/mm/yyyy")
      cvwPrescriptions[x][2] = script!brand
      cvwPrescriptions[x][3] = script!generic
      cvwPrescriptions[x][4] = script!strength   
      cvwPrescriptions[x][5] = script!quantity & " Rpt:" & script!repeats 
      cvwPrescriptions[x][6] = script!pbs_print_status
      cvwPrescriptions[x][7] = script!instruction  
      cvwPrescriptions[x][8] = script!prescribed_for   
      
   Next
   
End

Public Sub Settings_Save()
   
   Settings["Prescriptions_" & Embedded_In_Form & "/HSplit_EditArea_Inner.Layout"] = HSplit_EditArea_Inner.Layout
   ' Settings["Tasks_Embedded_" & Embedded_In_Form & "/HSplit_EditArea_Outer.Layout"] = HSplit_EditArea_Outer.Layout
   ' Settings["Tasks_Embedded_" & Embedded_In_Form & "/Vsplit_Script.Layout"] = Vsplit_Script.Layout
   Settings["Prescriptions_" & Embedded_In_Form & "/Vsplit_Script.Layout"] = Vsplit_Script.Layout
   
End

Public Sub Settings_Load()
   
   Try Vsplit_Script.Layout = Settings["Prescriptions_" & embedded_in_form & "/Vsplit_Script.Layout"]
   Try HSplit_EditArea_Inner.Layout = Settings["Prescriptions_" & Embedded_In_Form & "/HSplit_EditArea_Inner.Layout"]
   
End

Public Sub Form_Open()
   
End

Public Sub Init(cons As CConsult)
   
   currentconsult = cons
   lblMeasure.text = " Reason for use  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Left_Textboxes, lblMeasure)
   modEditAreaHelpers.Resize_label(lblPrescribeFor, lblMeasure)
   modEditAreaHelpers.Resize_label(label29, lblMeasure)
   lblMeasure.text = "  Quantity  "
   modEditAreaHelpers.Resize_label(lblQuantity, lblMeasure)
   modEditAreaHelpers.Resize_label(lblLockDate, lblMeasure)
   modEditAreaHelpers.Resize_label(lblRepeats, lblMeasure)
   modEditAreaHelpers.Resize_label(lblPostAuthority, lblMeasure)
   With cvwPrescriptions
      .Columns.count = 9
      .Columns[0].text = "Date written"
      .Columns[1].text = "Date on Script"
      .Columns[2].text = "Brand"
      .Columns[3].text = "Generic drug"
      .Columns[4].text = "Strength"
      .Columns[5].text = "quantity/Repeats"
      .Columns[6].text = "PBS status"
      .Columns[7].text = "Directions"
      .Columns[8].text = "Prescibed For"
      
   End With
   Settings_Load()
   Reload()
   
End

Public Sub mnuHealthIssues_Click()
   '---------------------------------------------------
   'User wants to link a request form to a health issue
   'The menu tag = the pk_pasthistory
   '---------------------------------------------------
   
   Select Case Last.tag
      Case "general notes", "remove link"
         txtHealthIssue.text = "General Notes"
         cProgressNote_Section = const.cSection_GeneralNotes
         fk_pasthistory = 0
      Case Else
         txtHealthIssue.text = currentconsult!past_history[Last.tag]!description
         fk_pasthistory = Last.tag
         cProgressNote_Section = const.cSection_Referrals
   End Select
   
End

Public Sub Delete(del As String)
   
End

Public Sub Delete_Undo()
   
End

Public Sub timer1_Timer()
   
   If timer_count > 3 Then
      If bGenericSearch Then
         Generics_Get()
      Else
         Brands_Get()
      End If  
   Endif
   
End

Public Sub Edit()
   '----------------------------
   'Edit a script written today
   '---------------------------
   
   cvwPrescriptions.MoveCurrent
   fk_script_item = Prescriptions[iCurrentScriptKey]!fk_script_item   
   'etc
   
End

Public Sub EditArea_TxtBox_KeyRelease()
   
   Select Case Last.tag
      Case "drug"
         Timer1.Enabled = True
         Inc timer_count
         bGenericSearch = False  
      Case "generic"
         bGenericSearch = True
         Timer1.Enabled = True
         Inc timer_count
   End Select
   
End

Public Sub Reset_Flags()
   
   fk_script_item = 0
   pk_view = 0
   fk_company = ""          'fk_company + fk_generic_product is really equivalent to the non existant fk_brand
   fk_generic_product = 0
   pbscode = ""
   fk_prescribed_for = 0
   fk_instruction = 0
   print_status = ""
   restriction_code = ""
   restriction = ""
   bAuthority = False   
   
End

Public Sub EditArea_Clear()
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_Left_Textboxes)
   modEditAreaHelpers.mnuHealthIssues_Refresh(currentconsult, mnuHealthissues)
   teInteractions.Clear()
   lcRestrictions.Clear()
   columnview1.Visible = False   
   lblRestrictions.text = ""
   lblDrug.text = "Drug"
   txtdate.text = Format(Now, "dd/mm/yyyy")
   bExit = False  
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case tag
      Case "date"
         bKeyValid = modUtil.AllowKeys(Const.AllowKeys_DateFormat, keycode)
      Case "repeats", "quantity"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case Else  
         bKeyValid = True  'date of injury can be free text e.g 'unkown'
   End Select
   Return bKeyValid
   
End

Public Sub Editarea_txtBox_KeyPress()
   
   If Not EditAreaTextbox_ExcludeKeys(key.code, Last.tag) Then    'validate key input first
      Stop Event                                                  'no good? don't show key output
      Return
   End If
   Select Case Key.Code
         
      Case Key.Down
         If columnview1.Visible Then
            With columnview1
               .MoveFirst()
               .SetFocus()
               .Item.Selected = True
            End With
            
         Endif
      Case Key.Return, Key.Tab
         
         Select Case Last.tag
            Case "date"
               txtDrug.SetFocus()
            Case "directions"
               TxtReason.SetFocus()
            Case "reason"
               tbSave.SetFocus()
         End Select
   End Select     
   
End

Public Sub EditArea_TxtBox_LostFocus()
   
   Last.BackGround = Color.white
   Select Case Last.tag
      Case "date"
         If Last.text <> "" Then
            If Not modEditAreaHelpers.Valid_Date(Last) Then
               bExit = True
               Last.text &= " **INVALID DATE**"
               Last.SetFocus()
               bExit = False   
            End If
         End If
      Case "drug"
         Timer1.stop()
   End Select
   
   Last.pos = 1
   
End

Public Sub EditArea_TxtBox_Change()
   
   If bexit Then Return 
   Select Case Last.tag
      Case "drug", "generic"
         If Trim(Last.text) = "" Then
            Drug_New()
         Endif
      Case "directions"
         Directions_Expand_Text(Last)
   End Select
   
End

Public Sub Directions_Expand_Text(txt As Textbox)
   
   bexit = True
   txt.text = Replace(txt.text, "bd", " twice daily")
   txt.text = Replace(txt.text, "tds", " three times daily")
   txt.text = Replace(txt.text, "nocte", " at night")
   txt.text = Replace(txt.text, "qid", " four times daily")
   txt.text = Replace(txt.text, "ac", " before meals")
   bexit = False
   
End

Public Sub EditArea_TxtBox_GotFocus()
   
   If Last.tag <> "restriction" Then Last.BackGround = Color.rgb(95, 255, 175)
   With columnview1
      .top = Vbox_EditArea_Left_Textboxes.top + Last.parent.top + Last.parent.height
      .left = Last.Left
      .width = txtClass.width
      .Visible = False
      .Raise
      
   End With
   '  If Last.tag = "drug" Then Timer1.Start()
   
End

Public Sub columnview1_KeyPress()
   
   If Key.code = Key.return Then
      columnview1_DblClick()
   Endif
   
End

Public Sub lcRestrictions_Click()
   
   Restrictions_Click()
   
End

Public Sub Restrictions_Click()
   '-------------------------------------------------------------------------------------
   'User has clicked on one of the textlabel controls embedded in the lcRestrictions list
   'set restriction code and text
   '-------------------------------------------------------------------------------------
   
   restriction_code = Last.children[Last.index].tag
   restriction = Last.children[Last.index].text
   bexit = True   
   txtApprovalNumber.text = restriction_code
   bExit = False  
   If columnview1.Visible Then columnview1_DblClick()
   
End

Public Sub Restrictions_Show()
   '--------------------------------------------------------------------------
   'As user clicks on a columnview row, show all restrictions for that pbscode
   'Show a drugs restriction details, these can be just restrictions of use
   'or authority indications, uses the pbscode (restriction.pbscode)
   '--------------------------------------------------------------------------
   
   Dim row As Integer = 0
   Dim pbscode As String 
   Dim lbl As TextLabel
   Dim sep As Separator
   
   Drug_Restrictions = New Collection
   
   currentDrug = brands[columnview1.Item.key]         'drug showing in the columview
   pbscode = currentDrug!pbscode 
   lcRestrictions.Clear()
   For Each Brand In brands                           'All drugs in the collectioni
      If Not IsNull(brand!restriction) Then            'If drug has a restrciotn
         If brand!pbscode = pbscode Then                'if the pbscode = same as that we are showing
            If Not Drug_Restrictions.Exist(brand!restriction) Then  'if not already in the collection 
               With lbl = New TextLabel(lcRestrictions) As "Restrictions"  'add it, and to the list container
                  .text = brand!restriction           'This is what will be sent to the printer (minus html tags)
                  .tag = brand!restriction_code       'This will be saved to the database, if the row is selected
                  .Foreground = Color.DarkGray
                  .AutoResize = True
                  .font = Font["Arial,9"]
               End With
               With sep = New Separator(lcRestrictions)
                  .Height = 3
                  .Foreground = Color.Black
               End With
               Drug_Restrictions.Add(brand!restriction, brand!restriction)
               Inc row
            Endif
         End If    
         
      End If 
   Next
   
End

Public Sub PBS_Show(brand As Collection)
   '-----------------------------------------------------------
   'Shows the PBS status of the currently selected drug
   'Not until user selects an authority wording can we show
   'the streamlined, unless we just opt to show the first one?
   '-----------------------------------------------------------
   
   Select Case brand!chapter & brand!restrictionflag     ' & brand!restriction_flag = "U", "R" or "A"
      Case "OTU"
         lblRestrictions.text = "PBS OPTOMETRIST"
         iPrintStatus = const.script_print_type_pbs
      Case "OTR"
         lblRestrictions.text = "PBS OPTOMETRIST RESTRICTED"
         iPrintStatus = const.script_print_type_pbs
         
      Case "GEU"
         lblRestrictions.text = "PBS UNRESTRICTED"
         iPrintStatus = const.script_print_type_pbs
      Case "GER"
         lblRestrictions.text = "PBS RESTRICTED"
         iPrintStatus = const.script_print_type_pbs
      Case "GEA"
         If brand!streamlined Then  
            lblRestrictions.text = "PBS STREAMLINED" '[" & brand!restriction_code & "]"
            iPrintStatus = const.script_print_type_pbs_authority_streamlined
            txtApprovalNumber.text = brand!restriction_code
            bAuthority = True
         Else
            lblRestrictions.text = "PBS AUTHORITY"
            iPrintStatus = const.script_print_type_pbs_authority
            bAuthority = True
         End If
      Case "R1U"
         lblRestrictions.text = "RPBS UNRESTRICTED"
         iPrintStatus = const.script_print_type_rpbs
      Case "R1R"
         lblRestrictions.text = "RPBS RESTRICTED"
         iPrintStatus = const.script_print_type_rpbs
      Case "R1A"
         If brand!streamlined Then 
            lblRestrictions.text = "RPBS STREAMLINED" ' [" & brand!restriction_code & "]"
            iPrintStatus = const.script_print_type_rbs_authority_streamlined
            txtApprovalNumber.text = brand!restriction_code
            bAuthority = True
         Else
            lblRestrictions.text = "RPBS AUTHORITY"
            iPrintStatus = const.script_print_type_rbs_authority_streamlined
            bAuthority = True
         End If
      Case Else
         lblRestrictions.text = "PRIVATE SCRIPT"
         iPrintStatus = const.script_print_type_private
   End Select  
   
End

Public Sub columnview1_Select()
   
   columnview1.MoveCurrent()
   ' If brands[columnview1.Item.key]!streamlined Then
   '   lblRestrictions.text = "Authority - Streamlined"
   ' Else
   '   lblRestrictions.text = ""
   ' Endif
   ' Select Case brands[columnview1.Item.key]!restriction_type
   '   Case Null
   '        lblRestrictions.text = "Unrestricted"
   '   Case "1"
   '        lblRestrictions.text = "Auth for increased quantities"
   '   Case "2"
   '      lblRestrictions.text = "Auth for normal amounts"
   '   Case "3"
   '        lblRestrictions.text = "Auth always"
   '     
   ' End Select
   Restrictions_Show()         'show which restrictions apply to this drug/generic or brand
   PBS_Show(brands[columnview1.Item.key])
   Print drug_restrictions.count 
   
End

Public Sub columnview1_DblClick()
   
   Select Case columnview1.tag.tag 'don't make me 'last'
      Case "drug"
         Drug_Select()
      Case "generic"
         Generic_Select()
   End Select
   
End

Public Sub Generics_Get()
   
   Dim last_brand As String 'brand+quantity+repeats
   
   Timer1.Stop()
   With columnview1
      .Clear()
      .Columns.count = 5
   End With
   If Trim(txtGeneric.text) = "" Then Return 
   brands = modPrescribingDBI.Generics_Get(Trim(txtGeneric.text))
   If brands.count Then
      For Each brand In brands
         If last_brand <> brand!generic & brand!pbscode Then 
            last_brand = brand!generic & brand!pbscode
            '  If last_brand <> brand!brand & Str(brand!quantity) & Str(brand!max_rpt) Then 
            '              last_brand = brand!brand & Str(brand!quantity) & Str(brand!max_rpt)
            ' 
            
            ColumnView1.add(brand!pk_view, 0)
            ' columnview1[brand!pk_view][0] = brand!brand
            columnview1[brand!pk_view][0] = brand!generic
            If InStr(brand!strength, "ml") Then
               columnview1[brand!pk_view][1] = modPrescribingDBI.ConvertTo5mls(brand!strength)
            Else
               columnview1[brand!pk_view][1] = brand!strength
            End If   
            columnview1[brand!pk_view][2] = brand!form
            columnview1[brand!pk_view][3] = Str(brand!quantity) & " Rpt:" & brand!max_rpt  
         End If   
      Next
      columnview1.Visible = True  
      columnview1.tag = txtDrug 
      
   Endif
   
End

Public Sub Generic_Select()
   
   Drug_Select()
   
End

Public Sub Brands_Get()
   
   Return 
   Timer1.Stop()
   With columnview1
      .Clear()
      .Columns.count = 4
   End With
   If Trim(txtDrug.text) = "" Then Return 
   brands = modPrescribingDBI.Brands_Get(Trim(txtDrug.text))
   If brands.count Then
      For Each brand In brands
         
         ColumnView1.add(brand!pk_view, 0)
         columnview1[brand!pk_view][0] = brand!brand
         columnview1[brand!pk_view][1] = brand!generic
         If InStr(brand!strength, "ml") Then
            columnview1[brand!pk_view][2] = modPrescribingDBI.ConvertTo5mls(brand!strength)
         Else
            columnview1[brand!pk_view][2] = brand!strength
         End If   
         columnview1[brand!pk_view][3] = brand!form
      Next
      columnview1.Visible = True  
      columnview1.tag = txtDrug 
      
   Endif
   
End

Public Sub Drug_Select()
   '-------------------------------------------------
   'User is picking a drug from the popup columnview
   '------------------------------------------------
   
   Dim pbs_script_type As String                   'chapter + restrictionflag - selects how to print script
   
   columnview1.MoveCurrent                         'set the key
   brand = brands[columnview1.Item.key]            'set brand collection   
   
   fk_company = brand!fk_company                   'if not null points to brand.brand using fk_generic_product
   fk_generic_product = brand!fk_product      'never null eg points to amoxycillin 250mg capsules
   restriction_code = brand!fk_restriction         'may be null, if not = drugs restriction or authority details
   pbscode = brand!pbscode                         'may be null if not pbs
   
   bexit = True
   txtGeneric.text = brand!generic
   txtDrug.text = brand!brand
   txtDrug.pos = 1
   txtClass.text = brand!class   'fixme
   If InStr(brand!strength, "ml") Then
      txtStrength.text = modPrescribingDBI.ConvertTo5mls(brand!strength)
   Else
      txtStrength.text = brand!strength & " " & brand!form
   End If
   txtStrength.pos = 1
   txtRepeats.text = brand!max_rpt
   txtQuantity.text = brand!quantity
   
   PBS_Show(brand)
   txtDirections.SetFocus()
   bexit = False 
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "new"
         Drug_New()
      Case "save"
         Save()
      Case "brief pi"
         Brief_PI()
      Case "authority"
         Authority()
   End Select
   
End

Public Sub Save()
   'Don't even bother to unravel this I'm working on it
   
   Dim ScriptItem As New Collection
   Dim medication As New Collection
   
   'If Vbox_EditArea.padding = 0 then return 
   If Not Scipt_Item_Valid() Then Return
   If Script_Item_Duplicate() Then Return 
   
   If fk_script_item <> 0 Then
      ScriptItem!fk_script_item = fk_script_item  
   Else
      'fixme this logic is incomplete, eg dr may not have typed in a Zed number obtained by phone.
      If Trim(txtApprovalNumber.text) <> "" Then 
         ScriptItem!authority_approval_number = Trim(txtApprovalNumber.Text)
         ScriptItem!authority_post_to_patient = CBool(chkPostAuthority.value)
         ScriptItem!authority_script_number = modPrescribingDBI.Authority_Number_Get_Next()
      End If
      ScriptItem!script_number = modPrescribingDBI.Script_Number_Get_Next()
   Endif
   
   ScriptItem!fk_consult = currentconsult.GetPK()
   ScriptItem!script_date = Val(txtdate.text)
   medication!fk_generic_product = fk_generic_product
   medication!fk_company = fk_company
   medication!instruction = Trim(txtDirections.text)  'this and nex line will be dropped later when key found 
   medication!prescribed_for = Trim(txtReason.text)     'can't trust user not to have changed a pre-selected one
   If restriction_code <> "" Then 
      medication!restriction_code = restriction_code
   Endif
   medication!pbscode = pbscode
   medication!fk_print_status = iPrintStatus 'how it will  usually be printed
   medication!suppress_reason = False 'fixme put in mechanism for this
   ScriptItem!reg24 = CBool(chkReg24.Value)
   'fixme put in s8 to medication
   medication!active = CBool(chkActive.value)
   medication!quantity = Val(txtQuantity.text)
   medication!repeats = Val(txtRepeats.text)
   
   modDBConnect.BeginTrans()
   ' ScriptItem!fk_medication = modPrescribingDBI.Save_Medication(medications, fk_medication, medication)
   fk_script_item = modPrescribingDBI.Save(currentconsult!patient!fk_patient, Prescriptions, fk_script_item, scriptItem, fk_medication, medication)
   modPrescribingDBI.Script_Number_Save(ScriptItem!script_number)
   If Not IsNull(ScriptItem!authority_script_number) Then 
      modPrescribingDBI.Authority_Number_Save(ScriptItem!authority_script_number)
   Endif
   
   modDBConnect.CommitTrans()
   FClinical.Refresh_Section(const.cSection_Prescriptions)    'refresh lists on main screen FClinical
   FClinical.Refresh_AllPreviousNotes()
   Reload()
   
End

Public Function Script_Item_Duplicate() As Boolean
   '--------------------------------------------------------------------------
   'Checks the edit area item against the scripts prescribed this consulation
   'If already prescribed, then warns user and prevents a save
   'Returns True if duplicated
   'checks against:
   '  date of script
   '  generic via the generic code
   '  brand via the company code
   '  instructions and directions
   '  repeats and quantities with a warning
   '  restriction code aka authority code
   '  ignores active/inactive
   '--------------------------------------------------------------------------

   Dim script_written As Collection
   Dim new_item As String
   Dim existing_item As String 
   
   new_item = Format(Val(txtdate.text), "dd/mm/yyyy") & " " & Str(fk_generic_product) & " " 
   new_item &= fk_company & " " & Trim(Lower(txtDirections.text)) & " "
  ' new_item &= Trim(Lower(txtReason.text)) & " " & restriction_code
   
   For Each script_written In currentconsult!prescriptions_written
      existing_item = Format(script_written!date_on_script, "dd/mm/yyyy") & " "
      existing_item &= Str(script_written!fk_generic_product) & " "
      If IsNull(script_written!fk_company) Then
         existing_item &= " "
      Else
         existing_item &= script_written!fk_company & " "
      Endif
    '  existing_item &= script_written!instruction & " " 
    '  existing_item &= script_written!prescribed_for & " "
    '  If IsNull(script_written!restriction_code) Then
     '    existing_item &= ""
     ' Else
     '    existing_item &= script_written!restriction_code   
    '  Endif
      If new_item = existing_item Then
         Message.Info("This item has already been presecribed this consultation")
         Return True
      Endif
   Next
   Return False

End

Public Function Scipt_Item_Valid() As Boolean
   
   If Not IsDate(txtdate.text) Then
      txtdate.SetFocus()
      Return
   Endif
   If fk_generic_product = 0 Then
      txtGeneric.SetFocus()
      Return
   Endif
   If txtQuantity.text = "" Then
      txtQuantity.SetFocus()
   Endif
   If txtRepeats.Text = "" Then
      txtRepeats.SetFocus
      Return
   Endif
   
   If txtDirections.text = "" Then
      Message.Info("Please add directions for this script item before saving.")
      txtDirections.SetFocus()
      Return
   Endif
   If txtReason.text = "" Then
      If Message.Warning("Do you want to the reason or condition for which you prescribed this medication?", "Yes", "No") = 1 Then Return
   Endif
   If brand!restrictionflag = "A" And restriction_code = "" Then
      Message.Info("Please select an authority indication for this drug before saving")
      lcRestrictions.Children[0].SetFocus()
      Return 
   Endif
   Return True
   
End

Public Sub Authority()
   
End

Public Sub Print_Script()
   
End

Public Sub Brief_PI()
   
End

Public Sub Drug_New()
   
   EditArea_Clear()
   Reset_Flags()
   'fixme put in option so that focus on either generic or brand
   'txtDrug.SetFocus()
   txtdate.text = Format(Now, "dd/mm/yyyy")
   chkActive.value = True
   txtGeneric.SetFocus()
   
End

Public Sub cvwPrescriptions_Menu()
   
   If Last.count Then
      mnuPrescriptions.Popup()
   Endif
   
End

Public Sub cvwPrescriptions_Click()
   
   cvwPrescriptions.MoveCurrent
   iCurrentScriptKey = Last.item.key
   
End

Public Sub mnuPrescriptions_Click()
   
   Select Case Last.tag
      Case "edit"
         Edit()
      Case "delete"
         Delete("single")
      Case "delete all"
         Delete("all")
      Case "undo delete"
         Delete_Undo()
      Case "print single"
      Case "print all"
      Case "brief pi"
      Case "full pi"
      Case "fonts"
         modUtil.Columnview_SetFont(cvwPrescriptions, "Prescriptions_" & Embedded_In_Form)
      Case "help"   
   End Select
   
End

Public Sub EditArea_Buttons_KeyPress()
   
   If key.code = key.return Then    
      Select Case Last.tag
         Case "save"
            Save()
      End Select
   End If   
   
End
' --
' -- PostgreSQL database dump
' --
' 
' -- Started on 2011-01-16 12:58:57 EST
' 
' SET statement_timeout = 0;
' SET client_encoding = 'UTF8';
' SET standard_conforming_strings = off;
' SET check_function_bodies = false;
' SET client_min_messages = warning;
' SET escape_string_warning = off;
' 
' --
' -- TOC entry 22 (class 2615 OID 415063)
' -- Name: clin_prescribing; Type: SCHEMA; Schema: -; Owner: richard
' --
' 
' CREATE SCHEMA clin_prescribing;
' 
' 
' ALTER SCHEMA clin_prescribing OWNER TO richard;
' 
' SET search_path = clin_prescribing, pg_catalog;
' 
' SET default_tablespace = '';
' 
' SET default_with_oids = false;
' 
' --
' -- TOC entry 3234 (class 1259 OID 420549)
' -- Dependencies: 22
' -- Name: instruction_habits; Type: TABLE; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' CREATE TABLE instruction_habits (
'     pk integer NOT NULL,
'     fk_instruction integer NOT NULL,
'     fk_company character varying(3),
'     fk_generic_product integer NOT NULL,
'     fk_staff integer NOT NULL,
'     weighting integer NOT NULL
' );
' 
' 
' ALTER TABLE clin_prescribing.instruction_habits OWNER TO easygp;
' 
' --
' -- TOC entry 3645 (class 0 OID 0)
' -- Dependencies: 3234
' -- Name: TABLE instruction_habits; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON TABLE instruction_habits IS 'allow auto-completion of a script for the commonest instruction
'  a particular staff member uses for a particular drug. 
' 	-If fk_company and fk_generic product are not null,
' 	then this points  to a brand name in drugs.brand
' 	-If fk_company is null, then this is a generically prescribed drug';
' 
' 
' --
' -- TOC entry 3233 (class 1259 OID 420547)
' -- Dependencies: 3234 22
' -- Name: instruction_habits_pk_seq; Type: SEQUENCE; Schema: clin_prescribing; Owner: easygp
' --
' 
' CREATE SEQUENCE instruction_habits_pk_seq
'     START WITH 1
'     INCREMENT BY 1
'     NO MAXVALUE
'     NO MINVALUE
'     CACHE 1;
' 
' 
' ALTER TABLE clin_prescribing.instruction_habits_pk_seq OWNER TO easygp;
' 
' --
' -- TOC entry 3647 (class 0 OID 0)
' -- Dependencies: 3233
' -- Name: instruction_habits_pk_seq; Type: SEQUENCE OWNED BY; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER SEQUENCE instruction_habits_pk_seq OWNED BY instruction_habits.pk;
' 
' 
' --
' -- TOC entry 3229 (class 1259 OID 420462)
' -- Dependencies: 22
' -- Name: instructions; Type: TABLE; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' CREATE TABLE instructions (
'     pk integer NOT NULL,
'     instruction text,
'     fk_lu_units integer,
'     am integer,
'     lunch integer,
'     pm integer,
'     bed integer,
'     prn integer
' );
' 
' 
' ALTER TABLE clin_prescribing.instructions OWNER TO easygp;
' 
' --
' -- TOC entry 3648 (class 0 OID 0)
' -- Dependencies: 3229
' -- Name: TABLE instructions; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON TABLE instructions IS 'A lookup table for instructions and hopefully with a bit of intelligence
'  allow printing out of medications charts';
' 
' 
' --
' -- TOC entry 3649 (class 0 OID 0)
' -- Dependencies: 3229
' -- Name: COLUMN instructions.fk_lu_units; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON COLUMN instructions.fk_lu_units IS 'key to common.lu_units = day, month, week or year = frequency of the medication';
' 
' 
' --
' -- TOC entry 3228 (class 1259 OID 420460)
' -- Dependencies: 3229 22
' -- Name: instructions_pk_seq; Type: SEQUENCE; Schema: clin_prescribing; Owner: easygp
' --
' 
' CREATE SEQUENCE instructions_pk_seq
'     START WITH 1
'     INCREMENT BY 1
'     NO MAXVALUE
'     NO MINVALUE
'     CACHE 1;
' 
' 
' ALTER TABLE clin_prescribing.instructions_pk_seq OWNER TO easygp;
' 
' --
' -- TOC entry 3651 (class 0 OID 0)
' -- Dependencies: 3228
' -- Name: instructions_pk_seq; Type: SEQUENCE OWNED BY; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER SEQUENCE instructions_pk_seq OWNED BY instructions.pk;
' 
' 
' --
' -- TOC entry 2877 (class 1259 OID 416106)
' -- Dependencies: 22
' -- Name: item_start_last_dates; Type: TABLE; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' CREATE TABLE item_start_last_dates (
'     pk integer NOT NULL,
'     start_date date,
'     last_date date
' );
' 
' 
' ALTER TABLE clin_prescribing.item_start_last_dates OWNER TO easygp;
' 
' --
' -- TOC entry 3652 (class 0 OID 0)
' -- Dependencies: 2877
' -- Name: TABLE item_start_last_dates; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON TABLE item_start_last_dates IS 'Quickly look up when the drug was started
' and the last date it was prescribed';
' 
' 
' --
' -- TOC entry 3242 (class 1259 OID 420810)
' -- Dependencies: 3612 3613 3614 3615 22
' -- Name: medications; Type: TABLE; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' CREATE TABLE medications (
'     pk integer NOT NULL,
'     fk_generic_product integer NOT NULL,
'     fk_company character varying(3) DEFAULT NULL::character varying,
'     repeats integer NOT NULL,
'     quantity integer NOT NULL,
'     fk_instruction integer NOT NULL,
'     fk_prescribed_for integer,
'     fk_script_dates integer NOT NULL,
'     pbscode text NOT NULL,
'     fk_print_status integer NOT NULL,
'     restriction_code text,
'     s8 boolean DEFAULT false,
'     active boolean DEFAULT false,
'     deleted boolean DEFAULT false,
'     suppress_reason boolean
' );
' 
' 
' ALTER TABLE clin_prescribing.medications OWNER TO easygp;
' 
' --
' -- TOC entry 3654 (class 0 OID 0)
' -- Dependencies: 3242
' -- Name: TABLE medications; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON TABLE medications IS 'A list of a patients unique medications and whether active or not
'  e.g fk_company gives the brand eg amoxil
'      fk_generic_product gives the strengh and mg and generic
'      Plus saves quantity/repeats and how to print it out';
' 
' 
' --
' -- TOC entry 3655 (class 0 OID 0)
' -- Dependencies: 3242
' -- Name: COLUMN medications.fk_generic_product; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON COLUMN medications.fk_generic_product IS 'fk to drugs.products gives generic name, atc, strengh and formulation';
' 
' 
' --
' -- TOC entry 3656 (class 0 OID 0)
' -- Dependencies: 3242
' -- Name: COLUMN medications.fk_company; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON COLUMN medications.fk_company IS 'if not null, then this drug is a brand, ie 
' it is a generic made by a company with their own trade name';
' 
' 
' --
' -- TOC entry 3657 (class 0 OID 0)
' -- Dependencies: 3242
' -- Name: COLUMN medications.repeats; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON COLUMN medications.repeats IS '
' The actual number of repeats
' may not be the max repeats allowed
' by the pbs accessed by fk_pbs';
' 
' 
' --
' -- TOC entry 3658 (class 0 OID 0)
' -- Dependencies: 3242
' -- Name: COLUMN medications.quantity; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON COLUMN medications.quantity IS '
' The quantity on the script
' May not be the actual quanitity allowed on the pbs
' e.g sometimes we may prescribe diazepam in small quantities';
' 
' 
' --
' -- TOC entry 3659 (class 0 OID 0)
' -- Dependencies: 3242
' -- Name: COLUMN medications.active; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON COLUMN medications.active IS '
' If true, the medication is on the patients
' active medication list';
' 
' 
' --
' -- TOC entry 3241 (class 1259 OID 420808)
' -- Dependencies: 3242 22
' -- Name: medications_pk_seq; Type: SEQUENCE; Schema: clin_prescribing; Owner: easygp
' --
' 
' CREATE SEQUENCE medications_pk_seq
'     START WITH 1
'     INCREMENT BY 1
'     NO MAXVALUE
'     NO MINVALUE
'     CACHE 1;
' 
' 
' ALTER TABLE clin_prescribing.medications_pk_seq OWNER TO easygp;
' 
' --
' -- TOC entry 3661 (class 0 OID 0)
' -- Dependencies: 3241
' -- Name: medications_pk_seq; Type: SEQUENCE OWNED BY; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER SEQUENCE medications_pk_seq OWNED BY medications.pk;
' 
' 
' --
' -- TOC entry 3244 (class 1259 OID 420826)
' -- Dependencies: 3617 3618 3619 3620 22
' -- Name: prescribed; Type: TABLE; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' CREATE TABLE prescribed (
'     pk integer NOT NULL,
'     fk_consult integer NOT NULL,
'     fk_medication integer NOT NULL,
'     script_date date NOT NULL,
'     reg24 boolean DEFAULT false,
'     authority_script_number integer,
'     authority_approval_number text,
'     authority_post_to_patient boolean DEFAULT false,
'     script_number integer,
'     concession_details text,
'     brand_substitution boolean DEFAULT true,
'     fk_progress_note integer,
'     deleted boolean DEFAULT false
' );
' 
' 
' ALTER TABLE clin_prescribing.prescribed OWNER TO easygp;
' 
' --
' -- TOC entry 3662 (class 0 OID 0)
' -- Dependencies: 3244
' -- Name: TABLE prescribed; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON TABLE prescribed IS 'Every single item prescribed has an entry here
' 	this table gives us
' 	- the doctor who prescribed
' 	- the date prescription was issued consult.date
' 	- the actual date on the script (script_date)
' 	  which could be foreward or back dated
' 	- the medication details (fk_medication > who
' 	  first prescribed it, date first started, active
' 	- stuff which could be unique for this prescription
' 	  such as pbs details, quantity, repeats, reg 25, s8
' 	- print_status is pbs or rpbs or priv
' 	- the pack details for this drug on this occasion.';
' 
' 
' --
' -- TOC entry 3663 (class 0 OID 0)
' -- Dependencies: 3244
' -- Name: COLUMN prescribed.script_date; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON COLUMN prescribed.script_date IS '
' The actual date on the script may not be the consulation date, can be back/forwarded dated,
' without this ability GP''s may as well pack up and go
' home though illegal in theory';
' 
' 
' --
' -- TOC entry 3664 (class 0 OID 0)
' -- Dependencies: 3244
' -- Name: COLUMN prescribed.reg24; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON COLUMN prescribed.reg24 IS '
' If true reg24 allows us to tell the
' pharmacist to dispense the script and all 
' its repeats at once';
' 
' 
' --
' -- TOC entry 3665 (class 0 OID 0)
' -- Dependencies: 3244
' -- Name: COLUMN prescribed.authority_script_number; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON COLUMN prescribed.authority_script_number IS 'the pbs requires a unique script number for an authority item, pretty stupid, but a number that
'  increments by 11. This is distinct from the streamlined approval number or phone approval number';
' 
' 
' --
' -- TOC entry 3666 (class 0 OID 0)
' -- Dependencies: 3244
' -- Name: COLUMN prescribed.authority_approval_number; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON COLUMN prescribed.authority_approval_number IS 'either the steamlined authority number or the phone approval number obtained from a pbs operator';
' 
' 
' --
' -- TOC entry 3231 (class 1259 OID 420481)
' -- Dependencies: 22
' -- Name: prescribed_for; Type: TABLE; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' CREATE TABLE prescribed_for (
'     pk integer NOT NULL,
'     prescribed_for text NOT NULL,
'     fk_code text
' );
' 
' 
' ALTER TABLE clin_prescribing.prescribed_for OWNER TO easygp;
' 
' --
' -- TOC entry 3668 (class 0 OID 0)
' -- Dependencies: 3231
' -- Name: TABLE prescribed_for; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON TABLE prescribed_for IS 'keeps list of things prescribed for
'   If fk_code is not null it has been coded
'   referenced by items_prescibed.fk_prescibed_for';
' 
' 
' --
' -- TOC entry 3236 (class 1259 OID 420563)
' -- Dependencies: 22
' -- Name: prescribed_for_habits; Type: TABLE; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' CREATE TABLE prescribed_for_habits (
'     pk integer NOT NULL,
'     fk_prescribed_for integer NOT NULL,
'     fk_company character varying(3),
'     fk_generic_product integer NOT NULL,
'     fk_staff integer NOT NULL,
'     weighting integer NOT NULL
' );
' 
' 
' ALTER TABLE clin_prescribing.prescribed_for_habits OWNER TO easygp;
' 
' --
' -- TOC entry 3670 (class 0 OID 0)
' -- Dependencies: 3236
' -- Name: TABLE prescribed_for_habits; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON TABLE prescribed_for_habits IS 'used to auto-complete a script on a per-staff member, to
'  display the commonest reason a particular generic +/- brand
'  was prescribed for';
' 
' 
' --
' -- TOC entry 3235 (class 1259 OID 420561)
' -- Dependencies: 3236 22
' -- Name: prescribed_for_habits_pk_seq; Type: SEQUENCE; Schema: clin_prescribing; Owner: easygp
' --
' 
' CREATE SEQUENCE prescribed_for_habits_pk_seq
'     START WITH 1
'     INCREMENT BY 1
'     NO MAXVALUE
'     NO MINVALUE
'     CACHE 1;
' 
' 
' ALTER TABLE clin_prescribing.prescribed_for_habits_pk_seq OWNER TO easygp;
' 
' --
' -- TOC entry 3672 (class 0 OID 0)
' -- Dependencies: 3235
' -- Name: prescribed_for_habits_pk_seq; Type: SEQUENCE OWNED BY; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER SEQUENCE prescribed_for_habits_pk_seq OWNED BY prescribed_for_habits.pk;
' 
' 
' --
' -- TOC entry 3230 (class 1259 OID 420479)
' -- Dependencies: 3231 22
' -- Name: prescribed_for_pk_seq; Type: SEQUENCE; Schema: clin_prescribing; Owner: easygp
' --
' 
' CREATE SEQUENCE prescribed_for_pk_seq
'     START WITH 1
'     INCREMENT BY 1
'     NO MAXVALUE
'     NO MINVALUE
'     CACHE 1;
' 
' 
' ALTER TABLE clin_prescribing.prescribed_for_pk_seq OWNER TO easygp;
' 
' --
' -- TOC entry 3673 (class 0 OID 0)
' -- Dependencies: 3230
' -- Name: prescribed_for_pk_seq; Type: SEQUENCE OWNED BY; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER SEQUENCE prescribed_for_pk_seq OWNED BY prescribed_for.pk;
' 
' 
' --
' -- TOC entry 3243 (class 1259 OID 420824)
' -- Dependencies: 3244 22
' -- Name: prescribed_pk_seq; Type: SEQUENCE; Schema: clin_prescribing; Owner: easygp
' --
' 
' CREATE SEQUENCE prescribed_pk_seq
'     START WITH 1
'     INCREMENT BY 1
'     NO MAXVALUE
'     NO MINVALUE
'     CACHE 1;
' 
' 
' ALTER TABLE clin_prescribing.prescribed_pk_seq OWNER TO easygp;
' 
' --
' -- TOC entry 3674 (class 0 OID 0)
' -- Dependencies: 3243
' -- Name: prescribed_pk_seq; Type: SEQUENCE OWNED BY; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER SEQUENCE prescribed_pk_seq OWNED BY prescribed.pk;
' 
' 
' --
' -- TOC entry 3238 (class 1259 OID 420633)
' -- Dependencies: 22
' -- Name: print_status; Type: TABLE; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' CREATE TABLE print_status (
'     pk integer NOT NULL,
'     status text NOT NULL
' );
' 
' 
' ALTER TABLE clin_prescribing.print_status OWNER TO easygp;
' 
' --
' -- TOC entry 3675 (class 0 OID 0)
' -- Dependencies: 3238
' -- Name: TABLE print_status; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON TABLE print_status IS 'The various ways a script can be printed as for example:
' 	- PBS AUTHORITY, RPBS AUTHORITY, PBS STREAMLINED AUTHORITY
' 	  PBS, RPBS PRIVATE';
' 
' 
' --
' -- TOC entry 3237 (class 1259 OID 420631)
' -- Dependencies: 3238 22
' -- Name: print_status_pk_seq; Type: SEQUENCE; Schema: clin_prescribing; Owner: easygp
' --
' 
' CREATE SEQUENCE print_status_pk_seq
'     START WITH 1
'     INCREMENT BY 1
'     NO MAXVALUE
'     NO MINVALUE
'     CACHE 1;
' 
' 
' ALTER TABLE clin_prescribing.print_status_pk_seq OWNER TO easygp;
' 
' --
' -- TOC entry 3677 (class 0 OID 0)
' -- Dependencies: 3237
' -- Name: print_status_pk_seq; Type: SEQUENCE OWNED BY; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER SEQUENCE print_status_pk_seq OWNED BY print_status.pk;
' 
' 
' --
' -- TOC entry 2878 (class 1259 OID 416109)
' -- Dependencies: 2877 22
' -- Name: script_dates_pk_seq; Type: SEQUENCE; Schema: clin_prescribing; Owner: easygp
' --
' 
' CREATE SEQUENCE script_dates_pk_seq
'     START WITH 1
'     INCREMENT BY 1
'     NO MAXVALUE
'     NO MINVALUE
'     CACHE 1;
' 
' 
' ALTER TABLE clin_prescribing.script_dates_pk_seq OWNER TO easygp;
' 
' --
' -- TOC entry 3678 (class 0 OID 0)
' -- Dependencies: 2878
' -- Name: script_dates_pk_seq; Type: SEQUENCE OWNED BY; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER SEQUENCE script_dates_pk_seq OWNED BY item_start_last_dates.pk;
' 
' 
' --
' -- TOC entry 3240 (class 1259 OID 420665)
' -- Dependencies: 22
' -- Name: script_numbers; Type: TABLE; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' CREATE TABLE script_numbers (
'     pk integer NOT NULL,
'     authority_number integer,
'     script_number integer
' );
' 
' 
' ALTER TABLE clin_prescribing.script_numbers OWNER TO easygp;
' 
' --
' -- TOC entry 3680 (class 0 OID 0)
' -- Dependencies: 3240
' -- Name: TABLE script_numbers; Type: COMMENT; Schema: clin_prescribing; Owner: easygp
' --
' 
' COMMENT ON TABLE script_numbers IS 'the number on an authority script this goes up by 11 each time.
'  the next script number as distinct from this';
' 
' 
' --
' -- TOC entry 3239 (class 1259 OID 420663)
' -- Dependencies: 3240 22
' -- Name: script_numbers_pk_seq; Type: SEQUENCE; Schema: clin_prescribing; Owner: easygp
' --
' 
' CREATE SEQUENCE script_numbers_pk_seq
'     START WITH 1
'     INCREMENT BY 1
'     NO MAXVALUE
'     NO MINVALUE
'     CACHE 1;
' 
' 
' ALTER TABLE clin_prescribing.script_numbers_pk_seq OWNER TO easygp;
' 
' --
' -- TOC entry 3682 (class 0 OID 0)
' -- Dependencies: 3239
' -- Name: script_numbers_pk_seq; Type: SEQUENCE OWNED BY; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER SEQUENCE script_numbers_pk_seq OWNED BY script_numbers.pk;
' 
' 
' --
' -- TOC entry 3246 (class 1259 OID 420860)
' -- Dependencies: 3412 22
' -- Name: vwmedications; Type: VIEW; Schema: clin_prescribing; Owner: easygp
' --
' 
' CREATE VIEW vwmedications AS
'     SELECT medications.pk AS pk_view, consult.consult_date AS date_script_written, consult.fk_patient, product.generic, brand.brand, product.strength, form.form, medications.repeats, medications.quantity, prescribed_for.prescribed_for, instructions.instruction, item_start_last_dates.start_date, item_start_last_dates.last_date, vwstaff.wholename AS staff_prescribed_wholename, vwstaff.title AS staff_prescribed_title, vwstaff.provider_number, product.atccode, product.salt, product.fk_form, product.salt_strength, medications.fk_generic_product, medications.fk_company, medications.fk_instruction, medications.fk_prescribed_for, medications.pbscode, medications.fk_print_status, medications.s8, medications.active, medications.deleted AS medication_deleted, medications.suppress_reason, medications.fk_script_dates, medications.restriction_code, print_status.status AS pbs_print_status, restriction.streamlined, restriction.restriction, restriction.restriction_type, prescribed.fk_medication FROM (((((((((((clin_consult.
' 
' 
' ALTER TABLE clin_prescribing.vwmedications OWNER TO easygp;
' 
' --
' -- TOC entry 3245 (class 1259 OID 420849)
' -- Dependencies: 3411 22
' -- Name: vwprescribeditems; Type: VIEW; Schema: clin_prescribing; Owner: postgres
' --
' 
' CREATE VIEW vwprescribeditems AS
'     SELECT prescribed.pk AS pk_view, consult.consult_date AS date_script_written, prescribed.script_date AS date_on_script, consult.fk_patient, product.generic, brand.brand, product.strength, form.form, medications.repeats, medications.quantity, prescribed_for.prescribed_for, instructions.instruction, item_start_last_dates.start_date, item_start_last_dates.last_date, brand.price, vwstaff.wholename AS staff_prescribed_wholename, vwstaff.title AS staff_prescribed_title, vwstaff.provider_number, product.atccode, product.salt, product.fk_form, product.salt_strength, prescribed.pk AS fk_item_prescibed, prescribed.fk_consult, prescribed.fk_medication, prescribed.reg24, prescribed.authority_script_number, prescribed.authority_approval_number, prescribed.authority_post_to_patient, prescribed.script_number, prescribed.concession_details, prescribed.brand_substitution, prescribed.fk_progress_note, prescribed.deleted AS prescribed_item_deleted, medications.fk_generic_product, medications.fk_company, medications.fk_ins
' 
' 
' ALTER TABLE clin_prescribing.vwprescribeditems OWNER TO postgres;
' 
' --
' -- TOC entry 3607 (class 2604 OID 420552)
' -- Dependencies: 3233 3234 3234
' -- Name: pk; Type: DEFAULT; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER TABLE instruction_habits ALTER COLUMN pk SET DEFAULT nextval('instruction_habits_pk_seq'::regclass);
' 
' 
' --
' -- TOC entry 3605 (class 2604 OID 420465)
' -- Dependencies: 3228 3229 3229
' -- Name: pk; Type: DEFAULT; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER TABLE instructions ALTER COLUMN pk SET DEFAULT nextval('instructions_pk_seq'::regclass);
' 
' 
' --
' -- TOC entry 3604 (class 2604 OID 417530)
' -- Dependencies: 2878 2877
' -- Name: pk; Type: DEFAULT; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER TABLE item_start_last_dates ALTER COLUMN pk SET DEFAULT nextval('script_dates_pk_seq'::regclass);
' 
' 
' --
' -- TOC entry 3611 (class 2604 OID 420813)
' -- Dependencies: 3241 3242 3242
' -- Name: pk; Type: DEFAULT; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER TABLE medications ALTER COLUMN pk SET DEFAULT nextval('medications_pk_seq'::regclass);
' 
' 
' --
' -- TOC entry 3616 (class 2604 OID 420829)
' -- Dependencies: 3243 3244 3244
' -- Name: pk; Type: DEFAULT; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER TABLE prescribed ALTER COLUMN pk SET DEFAULT nextval('prescribed_pk_seq'::regclass);
' 
' 
' --
' -- TOC entry 3606 (class 2604 OID 420484)
' -- Dependencies: 3230 3231 3231
' -- Name: pk; Type: DEFAULT; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER TABLE prescribed_for ALTER COLUMN pk SET DEFAULT nextval('prescribed_for_pk_seq'::regclass);
' 
' 
' --
' -- TOC entry 3608 (class 2604 OID 420566)
' -- Dependencies: 3235 3236 3236
' -- Name: pk; Type: DEFAULT; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER TABLE prescribed_for_habits ALTER COLUMN pk SET DEFAULT nextval('prescribed_for_habits_pk_seq'::regclass);
' 
' 
' --
' -- TOC entry 3609 (class 2604 OID 420636)
' -- Dependencies: 3237 3238 3238
' -- Name: pk; Type: DEFAULT; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER TABLE print_status ALTER COLUMN pk SET DEFAULT nextval('print_status_pk_seq'::regclass);
' 
' 
' --
' -- TOC entry 3610 (class 2604 OID 420668)
' -- Dependencies: 3239 3240 3240
' -- Name: pk; Type: DEFAULT; Schema: clin_prescribing; Owner: easygp
' --
' 
' ALTER TABLE script_numbers ALTER COLUMN pk SET DEFAULT nextval('script_numbers_pk_seq'::regclass);
' 
' 
' --
' -- TOC entry 3630 (class 2606 OID 420554)
' -- Dependencies: 3234 3234
' -- Name: instruction_habits_pkey; Type: CONSTRAINT; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' ALTER TABLE ONLY instruction_habits
'     ADD CONSTRAINT instruction_habits_pkey PRIMARY KEY (pk);
' 
' 
' --
' -- TOC entry 3625 (class 2606 OID 420470)
' -- Dependencies: 3229 3229
' -- Name: instructions_pkey; Type: CONSTRAINT; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' ALTER TABLE ONLY instructions
'     ADD CONSTRAINT instructions_pkey PRIMARY KEY (pk);
' 
' 
' --
' -- TOC entry 3639 (class 2606 OID 420822)
' -- Dependencies: 3242 3242
' -- Name: medications_pkey; Type: CONSTRAINT; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' ALTER TABLE ONLY medications
'     ADD CONSTRAINT medications_pkey PRIMARY KEY (pk);
' 
' 
' --
' -- TOC entry 3632 (class 2606 OID 420568)
' -- Dependencies: 3236 3236
' -- Name: prescribed_for_habits_pkey; Type: CONSTRAINT; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' ALTER TABLE ONLY prescribed_for_habits
'     ADD CONSTRAINT prescribed_for_habits_pkey PRIMARY KEY (pk);
' 
' 
' --
' -- TOC entry 3628 (class 2606 OID 420489)
' -- Dependencies: 3231 3231
' -- Name: prescribed_for_pkey; Type: CONSTRAINT; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' ALTER TABLE ONLY prescribed_for
'     ADD CONSTRAINT prescribed_for_pkey PRIMARY KEY (pk);
' 
' 
' --
' -- TOC entry 3641 (class 2606 OID 420838)
' -- Dependencies: 3244 3244
' -- Name: prescribed_pkey; Type: CONSTRAINT; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' ALTER TABLE ONLY prescribed
'     ADD CONSTRAINT prescribed_pkey PRIMARY KEY (pk);
' 
' 
' --
' -- TOC entry 3634 (class 2606 OID 420641)
' -- Dependencies: 3238 3238
' -- Name: print_status_pkey; Type: CONSTRAINT; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' ALTER TABLE ONLY print_status
'     ADD CONSTRAINT print_status_pkey PRIMARY KEY (pk);
' 
' 
' --
' -- TOC entry 3622 (class 2606 OID 418800)
' -- Dependencies: 2877 2877
' -- Name: script_dates_pkey; Type: CONSTRAINT; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' ALTER TABLE ONLY item_start_last_dates
'     ADD CONSTRAINT script_dates_pkey PRIMARY KEY (pk);
' 
' 
' --
' -- TOC entry 3636 (class 2606 OID 420670)
' -- Dependencies: 3240 3240
' -- Name: script_numbers_pkey; Type: CONSTRAINT; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' ALTER TABLE ONLY script_numbers
'     ADD CONSTRAINT script_numbers_pkey PRIMARY KEY (pk);
' 
' 
' --
' -- TOC entry 3623 (class 1259 OID 420756)
' -- Dependencies: 3229
' -- Name: instructions_idx; Type: INDEX; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' CREATE INDEX instructions_idx ON instructions USING btree (instruction);
' 
' 
' --
' -- TOC entry 3637 (class 1259 OID 420823)
' -- Dependencies: 3242
' -- Name: medications_active_idx; Type: INDEX; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' CREATE INDEX medications_active_idx ON medications USING btree (active);
' 
' 
' --
' -- TOC entry 3626 (class 1259 OID 420757)
' -- Dependencies: 3231
' -- Name: prescribed_for_idx; Type: INDEX; Schema: clin_prescribing; Owner: easygp; Tablespace: 
' --
' 
' CREATE INDEX prescribed_for_idx ON prescribed_for USING btree (prescribed_for);
' 
' 
' --
' -- TOC entry 3644 (class 0 OID 0)
' -- Dependencies: 22
' -- Name: clin_prescribing; Type: ACL; Schema: -; Owner: richard
' --
' 
' REVOKE ALL ON SCHEMA clin_prescribing FROM PUBLIC;
' REVOKE ALL ON SCHEMA clin_prescribing FROM richard;
' GRANT ALL ON SCHEMA clin_prescribing TO richard;
' GRANT ALL ON SCHEMA clin_prescribing TO easygp;
' GRANT USAGE ON SCHEMA clin_prescribing TO staff;
' 
' 
' --
' -- TOC entry 3646 (class 0 OID 0)
' -- Dependencies: 3234
' -- Name: instruction_habits; Type: ACL; Schema: clin_prescribing; Owner: easygp
' --
' 
' REVOKE ALL ON TABLE instruction_habits FROM PUBLIC;
' REVOKE ALL ON TABLE instruction_habits FROM easygp;
' GRANT ALL ON TABLE instruction_habits TO easygp;
' GRANT SELECT,INSERT ON TABLE instruction_habits TO staff;
' 
' 
' --
' -- TOC entry 3650 (class 0 OID 0)
' -- Dependencies: 3229
' -- Name: instructions; Type: ACL; Schema: clin_prescribing; Owner: easygp
' --
' 
' REVOKE ALL ON TABLE instructions FROM PUBLIC;
' REVOKE ALL ON TABLE instructions FROM easygp;
' GRANT ALL ON TABLE instructions TO easygp;
' GRANT SELECT,INSERT ON TABLE instructions TO staff;
' 
' 
' --
' -- TOC entry 3653 (class 0 OID 0)
' -- Dependencies: 2877
' -- Name: item_start_last_dates; Type: ACL; Schema: clin_prescribing; Owner: easygp
' --
' 
' REVOKE ALL ON TABLE item_start_last_dates FROM PUBLIC;
' REVOKE ALL ON TABLE item_start_last_dates FROM easygp;
' GRANT ALL ON TABLE item_start_last_dates TO easygp;
' GRANT ALL ON TABLE item_start_last_dates TO staff;
' 
' 
' --
' -- TOC entry 3660 (class 0 OID 0)
' -- Dependencies: 3242
' -- Name: medications; Type: ACL; Schema: clin_prescribing; Owner: easygp
' --
' 
' REVOKE ALL ON TABLE medications FROM PUBLIC;
' REVOKE ALL ON TABLE medications FROM easygp;
' GRANT ALL ON TABLE medications TO easygp;
' GRANT ALL ON TABLE medications TO staff;
' 
' 
' --
' -- TOC entry 3667 (class 0 OID 0)
' -- Dependencies: 3244
' -- Name: prescribed; Type: ACL; Schema: clin_prescribing; Owner: easygp
' --
' 
' REVOKE ALL ON TABLE prescribed FROM PUBLIC;
' REVOKE ALL ON TABLE prescribed FROM easygp;
' GRANT ALL ON TABLE prescribed TO easygp;
' GRANT ALL ON TABLE prescribed TO staff;
' 
' 
' --
' -- TOC entry 3669 (class 0 OID 0)
' -- Dependencies: 3231
' -- Name: prescribed_for; Type: ACL; Schema: clin_prescribing; Owner: easygp
' --
' 
' REVOKE ALL ON TABLE prescribed_for FROM PUBLIC;
' REVOKE ALL ON TABLE prescribed_for FROM easygp;
' GRANT ALL ON TABLE prescribed_for TO easygp;
' GRANT SELECT,INSERT ON TABLE prescribed_for TO staff;
' 
' 
' --
' -- TOC entry 3671 (class 0 OID 0)
' -- Dependencies: 3236
' -- Name: prescribed_for_habits; Type: ACL; Schema: clin_prescribing; Owner: easygp
' --
' 
' REVOKE ALL ON TABLE prescribed_for_habits FROM PUBLIC;
' REVOKE ALL ON TABLE prescribed_for_habits FROM easygp;
' GRANT ALL ON TABLE prescribed_for_habits TO easygp;
' GRANT SELECT,INSERT ON TABLE prescribed_for_habits TO staff;
' 
' 
' --
' -- TOC entry 3676 (class 0 OID 0)
' -- Dependencies: 3238
' -- Name: print_status; Type: ACL; Schema: clin_prescribing; Owner: easygp
' --
' 
' REVOKE ALL ON TABLE print_status FROM PUBLIC;
' REVOKE ALL ON TABLE print_status FROM easygp;
' GRANT ALL ON TABLE print_status TO easygp;
' GRANT ALL ON TABLE print_status TO staff;
' 
' 
' --
' -- TOC entry 3679 (class 0 OID 0)
' -- Dependencies: 2878
' -- Name: script_dates_pk_seq; Type: ACL; Schema: clin_prescribing; Owner: easygp
' --
' 
' REVOKE ALL ON SEQUENCE script_dates_pk_seq FROM PUBLIC;
' REVOKE ALL ON SEQUENCE script_dates_pk_seq FROM easygp;
' GRANT ALL ON SEQUENCE script_dates_pk_seq TO easygp;
' GRANT USAGE ON SEQUENCE script_dates_pk_seq TO staff;
' 
' 
' --
' -- TOC entry 3681 (class 0 OID 0)
' -- Dependencies: 3240
' -- Name: script_numbers; Type: ACL; Schema: clin_prescribing; Owner: easygp
' --
' 
' REVOKE ALL ON TABLE script_numbers FROM PUBLIC;
' REVOKE ALL ON TABLE script_numbers FROM easygp;
' GRANT ALL ON TABLE script_numbers TO easygp;
' GRANT SELECT,INSERT ON TABLE script_numbers TO staff;
' 
' 
' --
' -- TOC entry 3683 (class 0 OID 0)
' -- Dependencies: 3246
' -- Name: vwmedications; Type: ACL; Schema: clin_prescribing; Owner: easygp
' --
' 
' REVOKE ALL ON TABLE vwmedications FROM PUBLIC;
' REVOKE ALL ON TABLE vwmedications FROM easygp;
' GRANT ALL ON TABLE vwmedications TO easygp;
' GRANT ALL ON TABLE vwmedications TO staff;
' 
' 
' -- Completed on 2011-01-16 12:58:57 EST
' 
' --
' -- PostgreSQL database dump complete
' --
' 
' 

' 
' CREATE OR REPLACE VIEW drugs.vwdrugs AS 
'  SELECT nextval('drugs.vwdrugs_pk_seq'::regclass) AS pk_view, brand.fk_product, brand.fk_company, brand.brand, brand.price, brand.from_pbs, product.atccode, product.generic, product.salt, product.fk_form, product.strength, product.salt_strength, product.original_pbs_name, product.original_pbs_fs, product.free_comment, product.updated_at, form.form, atc.atcname, pbs.quantity, pbs.max_rpt, pbs.pbscode, pbs.chapter, pbs.restrictionflag, restriction.restriction, restriction.restriction_type, restriction.code AS restriction_code, restriction.streamlined
'    FROM drugs.brand brand
'    JOIN drugs.product ON brand.fk_product = product.pk
'    JOIN drugs.form ON product.fk_form = form.pk
'    LEFT JOIN drugs.atc ON product.atccode::text = atc.atccode
'    LEFT JOIN drugs.pbs ON brand.fk_product = pbs.fk_product
'    LEFT JOIN drugs.restriction ON pbs.pbscode::text = restriction.pbscode::text
'   ORDER BY brand.brand, form.form, product.strength;
' 
' ALTER TABLE drugs.vwdrugs OWNER TO easygp;
' GRANT ALL ON TABLE drugs.vwdrugs TO easygp;
' GRANT ALL ON TABLE drugs.vwdrugs TO staff;
' 
' 

' CREATE OR REPLACE VIEW clin_prescribing.vwprescribeditems AS 
'  SELECT prescribed.pk AS pk_view, consult.consult_date AS date_script_written, prescribed.script_date AS date_on_script, consult.fk_patient, product.generic, brand.brand, product.strength, form.form, medications.repeats, medications.quantity, prescribed_for.prescribed_for, instructions.instruction, item_start_last_dates.start_date, item_start_last_dates.last_date, brand.price, vwstaff.wholename AS staff_prescribed_wholename, vwstaff.title AS staff_prescribed_title, vwstaff.provider_number, product.atccode, product.salt, product.fk_form, product.salt_strength, prescribed.pk AS fk_item_prescibed, prescribed.fk_consult, prescribed.fk_medication, prescribed.reg24, prescribed.authority_script_number, prescribed.authority_approval_number, prescribed.authority_post_to_patient, prescribed.script_number, prescribed.concession_details, prescribed.brand_substitution, prescribed.fk_progress_note, prescribed.deleted AS prescribed_item_deleted, medications.fk_generic_product, medications.fk_company, medications.fk_instru
'    FROM clin_consult.consult
'    JOIN admin.vwstaff ON consult.fk_staff = vwstaff.fk_staff
'    JOIN clin_prescribing.prescribed ON consult.pk = prescribed.fk_consult
'    JOIN clin_prescribing.medications medications ON prescribed.fk_medication = medications.pk
'    JOIN clin_prescribing.prescribed_for ON medications.fk_prescribed_for = prescribed_for.pk
'    JOIN clin_prescribing.instructions ON medications.fk_instruction = instructions.pk
'    JOIN clin_prescribing.item_start_last_dates ON medications.fk_script_dates = item_start_last_dates.pk
'    JOIN clin_prescribing.print_status ON medications.fk_print_status = print_status.pk
'    LEFT JOIN drugs.restriction ON medications.pbscode = restriction.pbscode::text AND medications.restriction_code = restriction.code::text
'    LEFT JOIN drugs.brand ON medications.fk_generic_product = brand.fk_product AND medications.fk_company::text = brand.fk_company::text
'    JOIN drugs.product ON medications.fk_generic_product = product.pk
'    JOIN drugs.form ON product.fk_form = form.pk
'   ORDER BY consult.fk_patient, product.generic, medications.active;
' 
' ALTER TABLE clin_prescribing.vwprescribeditems OWNER TO postgres;

' CREATE OR REPLACE VIEW clin_prescribing.vwmedications AS 
'  SELECT medications.pk AS pk_view, consult.consult_date AS date_script_written, consult.fk_patient, product.generic, brand.brand, product.strength, form.form, medications.repeats, medications.quantity, prescribed_for.prescribed_for, instructions.instruction, item_start_last_dates.start_date, item_start_last_dates.last_date, vwstaff.wholename AS staff_prescribed_wholename, vwstaff.title AS staff_prescribed_title, vwstaff.provider_number, product.atccode, product.salt, product.fk_form, product.salt_strength, medications.fk_generic_product, medications.fk_company, medications.fk_instruction, medications.fk_prescribed_for, medications.pbscode, medications.fk_print_status, medications.s8, medications.active, medications.deleted AS medication_deleted, medications.suppress_reason, medications.fk_script_dates, medications.restriction_code, print_status.status AS pbs_print_status, restriction.streamlined, restriction.restriction, restriction.restriction_type, prescribed.fk_medication
'    FROM clin_consult.consult
'    JOIN admin.vwstaff ON consult.fk_staff = vwstaff.fk_staff
'    JOIN clin_prescribing.prescribed ON consult.pk = prescribed.fk_consult
'    JOIN clin_prescribing.medications medications ON prescribed.fk_medication = medications.pk
'    JOIN clin_prescribing.prescribed_for ON medications.fk_prescribed_for = prescribed_for.pk
'    JOIN clin_prescribing.instructions ON medications.fk_instruction = instructions.pk
'    JOIN clin_prescribing.item_start_last_dates ON medications.fk_script_dates = item_start_last_dates.pk
'    JOIN clin_prescribing.print_status ON medications.fk_print_status = print_status.pk
'    LEFT JOIN drugs.restriction ON medications.pbscode = restriction.pbscode::text AND medications.restriction_code = restriction.code::text
'    LEFT JOIN drugs.brand ON medications.fk_generic_product = brand.fk_product AND medications.fk_company::text = brand.fk_company::text
'    JOIN drugs.product ON medications.fk_generic_product = product.pk
'    JOIN drugs.form ON product.fk_form = form.pk
'   ORDER BY consult.fk_patient, product.generic, medications.active;
' 
' ALTER TABLE clin_prescribing.vwmedications OWNER TO easygp;
' GRANT ALL ON TABLE clin_prescribing.vwmedications TO easygp;
' GRANT ALL ON TABLE clin_prescribing.vwmedications TO staff;
' 

' 
