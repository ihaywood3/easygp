' Gambas class file

' Gambas class file
' Copyright (C) 2008,2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
'TODO    functionality for authority with increased quantity.
'         prescribed! = concession_details: these three Not yet implemented
'         prescribed! = brand_substitution: Do Not remove this code
'        prescribed! = fk_progress_note
'        lu_pbs_script_type FIXME RENAME IN BACK END TO lu_script_type and adjust queries accordingly 
'BUGS    After ipbs_script_type is set by the generic, finding the 
'        brands for the brand list is over-riding this ?does it matter
'        ie are all the brands for this product the same ipbs_script_type
'        probably yes but check.
'--------------------------------------------------------------------
Private pic_printed As Picture = Picture["icons/12/green_dot.png"]
Private pic_not_printed As Picture = Picture["icons/12/red_dot.png"]
Private pic_pdf As Picture = Picture["icons/20/pdf2020.png"]
Private empty_2020png As Picture = Picture["icons/20/empty2020.png"]
Public bExit As Boolean 'accessed from Fclinical Editor_SetPage
Private bAuthority As Boolean       'If True the script item needs an authority.
Private bKeyValid As Boolean
Private bGenericSearch As Boolean
Private Script_Items_This_Consultation As Collection
Private Script As Collection
Private fk_pasthistory As Integer
Private fk_item_prescribed As Integer
Private pk_view As String
Private script_types As Collection
Private fk_company As String 
Private fk_generic_product As String
Private fk_prescribed_for As Integer
Private fk_increased_quantity_authority_reason As Integer      'if not 0 then key to clin_prescribing.increased_quantity_authority_reasons
Private pbscode As String
Private iPBS_Script_Type As Integer              'e.g print as PBS, rpbs, PBS AUTHORITY etc, see Const
Private restriction_code As String   ' pbs restriction.code  eg for authorities
Private restriction As String 
Private fk_prescibed_for As Integer = 0
Private fk_instruction As Integer = 0
Private iCurrentScriptKey As Integer
Private cProgressNote_Section As Integer
Private currentconsult As CConsult
Private bEmbedded As Boolean             'If true the form is embedded in a frmConsultNotes editor
Private embedded_in_form As String          'the form this form is embedded in
Private drugs As Collection
Private drug As Collection 
Private Deleted_Scripts As Collection
Private timer_count As Integer
Private Drug_Restrictions As Collection
Private drug_Restriction As Collection 
Private Print_Status As String
Private medications As Collection
Private medication As Collection
Private brands As Collection
Private brand As Collection 
Private fk_brand As String 
Private fk_medication As Integer 
Private script_items As Collection
Private script_item As Collection
Private view_items As Collection       'all the items from the view of script items written this consultation
Private Instruction_Habits As Collection
Private Prescibed_For_Habits As Collection 
Private habit As Collection 
Private Authority_Increased_Quantity_Reasons As Collection
Private SpellChecker As ClskSpell

Public Sub set_embedded(F As String)
   '----------------------------------------------------------
   'If this form is embeded from another form set flag
   'embeddedinform = either "Fclinical", "FInbox" or "FTasks"
   '---------------------------------------------------------
   
   embedded_in_form = F
   
End

Public Sub Reload()
   '--------------------------------------------------------------
   'Display scripts written this consultation, am assuming
   'that if saved to backend they have been printed, however
   'could have been saved 'no print', so perhaps change this flag
   'FIXME
   '-------------------------------------------------------------
   
   currentconsult.Refresh("prescriptions_written")
   ' script_items = modUtil.Copy_Collection_Keyed_Sequentially(currentconsult!prescriptions_written)
   ' For Each script_item In script_items
   '    script_item!printed = True   
   ' Next
   cvwPrescriptions_Refresh(script_items)
   Drug_New()
   
End

Public Sub Settings_Save()
   
   Settings["Prescriptions_" & Embedded_In_Form & "/HSplit_EditArea_Inner.Layout"] = HSplit_EditArea_Inner.Layout
   ' Settings["Tasks_Embedded_" & Embedded_In_Form & "/HSplit_EditArea_Outer.Layout"] = HSplit_EditArea_Outer.Layout
   ' Settings["Tasks_Embedded_" & Embedded_In_Form & "/Vsplit_Script.Layout"] = Vsplit_Script.Layout
   Settings["Prescriptions_" & Embedded_In_Form & "/Vsplit_Script.Layout"] = Vsplit_Script.Layout
   
End

Public Sub Settings_Load()
   
   Try Vsplit_Script.Layout = Settings["Prescriptions_" & embedded_in_form & "/Vsplit_Script.Layout"]
   Try HSplit_EditArea_Inner.Layout = Settings["Prescriptions_" & Embedded_In_Form & "/HSplit_EditArea_Inner.Layout"]
   Try cvwPrescriptions.Font = Font[Settings["Prescriptions_" & Embedded_In_Form & "/cvwPrescriptions.font"]]
   
End

Public Sub Init(cons As CConsult)
   
   currentconsult = cons
   lblMeasure.text = " Authority Wording  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Inner, lblMeasure)
   modEditAreaHelpers.Resize_label(lblPrescribeFor, lblMeasure)
   modEditAreaHelpers.Resize_label(label29, lblMeasure)
   lblMeasure.text = "  Quantity  "
   modEditAreaHelpers.Resize_label(lblQuantity, lblMeasure)
   modEditAreaHelpers.Resize_label(lblLockDate, lblMeasure)
   modEditAreaHelpers.Resize_label(lblRepeats, lblMeasure)
   modEditAreaHelpers.Resize_label(lblPostAuthority, lblMeasure)
   With cvwPrescriptions
      .Columns.count = 12
      .Columns[1].text = "Date Written"
      .Columns[2].text = "Date on Script"
      .Columns[3].text = "Brand"
      .Columns[4].text = "Generic drug"
      .Columns[5].text = "Strength"
      .Columns[6].text = "Form"
      .Columns[7].text = "Qty"
      .Columns[8].text = "Rpt"
      .Columns[9].text = "PBS status"
      .Columns[10].text = "Directions"
      .Columns[11].text = "Prescibed For"
   End With
   lblMeasure.text = "RPBS AUTHORITY INCREASED QUANTITY    "
   cmbScriptTypes.width = lblMeasure.Width
   script_types = modUtil.LoadCombo(cmbScriptTypes, modPrescribingDBI.Script_Types_Get(), "type")
   '-------------------------------------------------------------------------------
   'The spell checker works on a text editor, so in the change event for txtReason
   'i.e EditArea_txtBox_Change() its text is set
   '-------------------------------------------------------------------------------
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teForSpelling
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   cvwBrands.Columns.count = 1
   script_items = New Collection 'all those prescribed this consultation
   Settings_Load()
   MenuButton1.menu = "mnuHealthIssues"
   
   Reload()
   
End

Public Sub mnuHealthIssues_Click()
   '---------------------------------------------------
   'User wants to link a request form to a health issue
   'The menu tag = the pk_pasthistory
   '---------------------------------------------------
   
   Select Case Last.tag
      Case "general notes", "remove link"
         txtHealthIssue.text = "General Notes"
         cProgressNote_Section = const.cSection_GeneralNotes
         fk_pasthistory = 0
      Case Else
         txtHealthIssue.text = currentconsult!past_history[Last.tag]!description
         fk_pasthistory = Last.tag
         cProgressNote_Section = const.cSection_Referrals
   End Select
   EditArea_Notify_Data_Change(True)
   
End

Public Sub Delete_script()

   Dim x As Integer
   
   cvwPrescriptions.MoveFirst
   
   For x = 1 To cvwPrescriptions.Count
      If cvwPrescriptions.Item.Selected = True Then
         modDBConnect.update("clin_prescribing.prescribed", Null, ["pk": script_items[cvwPrescriptions.Item.key]!prescribed!pk, "deleted": True])
      Endif
      cvwPrescriptions.MoveNext
      modDBConnect.CommitTrans()
   Next
   FClinical_Refresh()
   Reload()

End

Public Sub Delete_Undo()
   
End

Public Sub timer1_Timer()
   '------------------------------------------------------------------------------
   'If the timer is running, user is typing in either the brand or generic textbox
   '------------------------------------------------------------------------------   
   
   If timer_count > 3 Then
      If bGenericSearch Then
         Generics_Get()
      Else
         Brands_Get()
      End If  
   Endif
   
End

Public Sub Edit()
   '----------------------------
   'Edit a script written today
   'Fixme - wont work for an unsaved item
   '---------------------------
   
   Dim script_item As Collection
   
   cvwPrescriptions.MoveCurrent
   fk_item_prescribed = currentconsult!prescriptions_written[iCurrentScriptKey]!fk_item_prescribed   
   fk_medication = currentconsult!prescriptions_written[iCurrentScriptKey]!fk_medication
   txtdate.text = currentconsult!prescriptions_written[iCurrentScriptKey]!date_script_written
   txtClass.text = currentconsult!prescriptions_written[iCurrentScriptKey]!class
   txtGeneric.text = currentconsult!prescriptions_written[iCurrentScriptKey]!generic
   txtBrand.text = currentconsult!prescriptions_written[iCurrentScriptKey]!brand
   txtStrength.text = currentconsult!prescriptions_written[iCurrentScriptKey]!strength
   txtInstructions.text = currentconsult!prescriptions_written[iCurrentScriptKey]!instruction
   TxtReason.text = currentconsult!prescriptions_written[iCurrentScriptKey]!prescribed_for
   txtQuantity.text = currentconsult!prescriptions_written[iCurrentScriptKey]!quantity
   txtRepeats.text = currentconsult!prescriptions_written[iCurrentScriptKey]!repeats
   lblRestrictions.text = currentconsult!prescriptions_written[iCurrentScriptKey]!restriction
   chkActive.Value = currentconsult!prescriptions_written[iCurrentScriptKey]!active
   ' chkSupressReason.value =  currentconsult!prescriptions_written[iCurrentScriptKey]!suppress_reason
   chkPostAuthority.value = chkPostAuthority!authority_post_to_patient
   chkReg24.value = currentconsult!prescriptions_written[iCurrentScriptKey]!reg24
   
End

Public Sub EditArea_TxtBox_KeyRelease()
   
   Select Case Last.tag
      Case "brand"
         Timer1.Enabled = True
         Inc timer_count
         bGenericSearch = False  
      Case "generic"
         bGenericSearch = True
         Timer1.Enabled = True
         Inc timer_count
      Case "authority wording"
         If Not IsNull(drug!quantity) And txtRepeats.text <> "" Then 
            If drug!restrictionflag <> "A" And drug!quantity < Val(txtRepeats.text) Then
               Authority_Increased_Quantity_Reason_Get()
            End If   
         End If   
   End Select
   
End

Public Sub Reset_Flags()
   
   fk_item_prescribed = 0
   pk_view = 0
   fk_company = ""          'fk_company + fk_generic_product is really equivalent to the non existant fk_brand
   fk_generic_product = 0
   pbscode = ""
   fk_prescribed_for = 0
   fk_instruction = 0
   fk_medication = 0
   fk_increased_quantity_authority_reason = 0
   print_status = ""
   restriction_code = ""
   restriction = ""
   bAuthority = False   
   
End

Public Sub EditArea_Clear()
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_Inner)
   modEditAreaHelpers.mnuHealthIssues_Refresh(currentconsult, mnuHealthIssues, Me) 'create the popup health issues menu but default to general notes
   fk_pasthistory = 0
   cProgressNote_Section = const.cSection_GeneralNotes
   txtHealthIssue.text = "general notes"
   
   teInteractions.Clear()
   lcRestrictions.Clear()
   pnlcolumnview.Visible = False 
   listview1.Visible = False    
   cvwBrands.Clear()
   lblRestrictions.text = ""
   lblDrug.text = "Brand"
   txtdate.text = Format(Now, "dd/mm/yyyy")
   cmbScriptTypes.index = -1
   
   bExit = False  
   
End

Public Sub EditArea_Buttons_KeyPress()
   
   If key.code = key.return Then    
      Select Case Last.tag
         Case "ok"
            tbOk.Enabled = False 
            If Drug_Add() Then 
               Drug_New() 'valid drug added to list
            End If  
            tbOk.Enabled = True  
      End Select
   End If   
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case tag
      Case "date"
         bKeyValid = modUtil.AllowKeys(Const.AllowKeys_DateFormat, keycode)
      Case "repeats", "quantity"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case Else  
         bKeyValid = True  
         
   End Select  
   Return bKeyValid
   
End

Public Sub Editarea_txtBox_KeyPress()
   '--------------------------------------------------------------
   'Validate the keypress according to the row on in the edit area
   'If down key was pressed and the drugs columnview (containing
   'either list of generics or brands is visible, then move the
   'focus down to the first member of this list
   '--------------------------------------------------------------   
   
   If Not EditAreaTextbox_ExcludeKeys(key.code, Last.tag) Then    'validate key input first
      Stop Event                                                  'no good? don't show key output
      Return
   End If
   Select Case Key.Code
      Case Key.Down
         If pnlcolumnview.Visible Then
            With columnview1
               .MoveFirst()                                       'move to first drug
               .SetFocus()                                        'make marquee visible
               Try .Item.Selected = True                          'select it > this loads the brands
            End With
         Endif
      Case Key.Return, Key.Tab
         Select Case Last.tag
            Case "date"
               txtBrand.SetFocus()
            Case "instructions"
               TxtReason.SetFocus()
            Case "reason"
               If iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity Or drug!restrictionflag = "A" And Trim(txtAuthorityWording.text) = "" Then
                  If Trim(txtAuthorityWording.text) = "" Then
                     txtAuthorityWording.SetFocus()
                  Else
                     If Trim(txtApprovalNumber.text) <> "" Then
                        tbOk.SetFocus()
                     Else
                        txtApprovalNumber.SetFocus()
                     Endif
                  Endif
               Else
                  tbOk.SetFocus()
               End If   
            Case "approval number"
               If lblRestrictions.text = "PBS AUTHORITY (Inc Qty)" Or lblRestrictions.text = "rpbs AUTHORITY (Inc Qty)" Then
                  If Not (Val(txtRepeats.text) > drug!quantity) Then
                     txtRepeats.SetFocus()
                  End If   
               Endif
            Case "quantity"
               txtRepeats.SetFocus()
            Case "repeats"
               If Not IsNull(drug!quantity) Then  
                  If (Val(txtRepeats.text) > drug!quantity) Then
                     If Trim(txtReason.text) = "" Then
                        txtReason.SetFocus()
                     Else
                        If iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity Or drug!restrictionflag = "A" And Trim(txtAuthorityWording.text) = "" Then
                           If Trim(txtAuthorityWording.text) = "" Then
                              txtAuthorityWording.SetFocus()
                           Else
                              If Trim(txtApprovalNumber.text) <> "" Then
                                 tbOk.SetFocus()
                              Else
                                 txtApprovalNumber.SetFocus()
                              Endif
                           Endif
                        End If 
                     End If   
                  Endif
               Else
                  If Last.text <> "" Then
                     If txtRepeats.text <> "" Then
                        tbOk.SetFocus()
                     Endif
                  Endif
               End If   
            Case "authority wording"
               If Trim(txtApprovalNumber.text) = "" Then
                  txtApprovalNumber.SetFocus()
               Endif
         End Select
   End Select     
   
End

Public Sub EditArea_Notify_Data_Change(flag As Boolean)
   
   If flag Then
      Vbox_EditArea.Padding = 1
      Vbox_EditArea.Background = Color.red
      tbOk.Foreground = Color.Red
      
   Else
      Vbox_EditArea.Padding = 0
      Vbox_EditArea.Background = Color.white
      tbOk.Foreground = Color.black
   End If
   
End

Public Sub EditArea_TxtBox_LostFocus()
   
   Last.BackGround = Color.white
   Select Case Last.tag
      Case "date"
         If Last.text <> "" Then
            If Not modEditAreaHelpers.Valid_Date(Last) Then
               bExit = True
               Last.text &= " **INVALID DATE**"
               Last.SetFocus()
               bExit = False   
            End If
         End If
      Case "brand"
         Timer1.stop()
      Case "reason"
         SpellChecker.init(txtReason)
         SpellChecker.StartSpelling()
   End Select
   
   Last.pos = 0
   
End

Public Sub EditArea_TxtBox_Change()
   
   If bexit Then Return 
   If Len(Last.text) = 0 Then pnlColumnView.Visible = False
   Select Case Last.tag
      Case "brand", "generic"
         If Trim(Last.text) = "" Then
            Drug_New()
         Endif
      Case "approval number"
         ' chkAuthority.value = True
         '------------------------------------------------------
         'Drug should be already showing in the edit area
         'If user typing in an approval number, this should be
         'hence an increased quantity
         'fix me take into account patients pbs/rpbs status
         'If this drug is not listed as a PBS or rpbs authority
         'the of quantity is over that usually prescibed
         'tag this as an increased quantity authority
         'If user fails to do this, Drug_Valid() will pick it up
         'and throw them back to the quantity box
         '------------------------------------------------------
         If Not drug.count Then Return   
         bexit = True
         Last.text = UCase(Last.text)
         bexit = False
         If iPBS_Script_Type <> const.pbs_script_type_pbs_authority Or iPBS_Script_Type <> const.pbs_script_type_rpbs_authority Then
            
            Drug_Show_Restriction()
            If Val(txtRepeats.text) > drug!quantity Then
               iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity
            Endif
         End If  
      Case "quantity"
         'User is changing the quantity, is this increased quantity or PBS item
         If Not IsNull(drug!quantity) Then         
            '   If Val(txtRepeats.text) > drug!quantity Then
            '---------------------------------------------------------------------------------
            'If not already an authority item and is on the pbs/rpbs restricted or unrestricted
            '----------------------------------------------------------------------------------
            If drug!restrictionflag <> "A" And (drug!restrictionflag = "U" Or drug!restrictionflag = "R") Then             'not a pbs authority
               If Trim(Last.text) <> "" Then 
                  If Val(Last.text) > drug!quantity Then 
                     iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity
                     bExit = True   
                     cmbScriptTypes.index = iPBS_Script_Type - 1
                     bExit = False  
                     Drug_Show_Restriction()
                  End If   
               End If
            End If
            '  Endif
         End If
      Case "instructions"
         Instructions_Expand_Text(Last)
         
      Case "authority wording"
         If Trim(Last.text) = "" Then
            pnlcolumnview.Visible = False 
         Endif
      Case "reason"
         teForSpelling.Text = txtReason.text
   End Select
   EditArea_Notify_Data_Change(True)
   
End

Public Sub Drug_Show_Restriction() 
   'fixme bring me into line with const......
   
   Select Case drug!chapter
      Case "GE"
         lblRestrictions.text = "PBS AUTHORITY (Inc Qty)"
      Case "R1"
         lblRestrictions.text = "RPBS AUTHORITY (Inc Qty)"
   End Select
   
End

Public Sub Instructions_Expand_Text(txt As Textbox)
   '-----------------------------------------------------------
   'Expand common abbreviations, taking into account that
   'some of these could be part of an actual word eg ac or stat
   '----------------------------------------------------------- 
   
   bexit = True
   txt.text = Replace(txt.text, "bd", " twice daily")
   txt.text = Replace(txt.text, "tds", " three times daily")
   txt.text = Replace(txt.text, "nocte", " at night")
   txt.text = Replace(txt.text, "qid", " four times daily")
   If InStr(txt.text, " ac ") Then   
      txt.text = Replace(txt.text, "ac", " before meals")
   End If   
   txt.text = Replace(txt.text, "prn", " as needed")
   If InStr(txt.text, " stat ") Then 
      txt.text = Replace(txt.text, "stat", " immediately")
   End If   
   bexit = False
   
End

Public Sub EditArea_TxtBox_GotFocus()
   
   If Last.tag <> "restriction" Then Last.BackGround = Color.rgb(95, 255, 175)
   pnlcolumnview.Visible = False                           'user could have clicked on textbox whilst this list was showing
   columnview1.clear
   
   Select Case Last.tag
         
      Case "instructions"
         cvwBrands.Visible = False 
         With pnlcolumnview
            .top = Vbox_EditArea_Inner.top + Last.parent.parent.top + Last.parent.height
            .left = Last.parent.Left
            .width = txtAuthorityWording.width
            .Visible = False
            .Raise
         End With
         
         If Trim(txtInstructions.text) = "" Then
            Try Instruction_Habits_Get() 'bombs if drug null
            If Error Then txtInstructions.SetFocus()
         Else
            If Instruction_Habits.count Then
               With columnview1
                  .clear
                  .Columns.count = 1
                  .tag = txtInstructions
               End With  
               For Each habit In Instruction_Habits
                  columnview1.Add(habit!pk_instruction_habit, 0)
                  columnview1[habit!pk_instruction_habit][0] = habit!instruction
               Next
               pnlcolumnview.Visible = True
            Endif
         End If  
      Case "reason"
         cvwBrands.Visible = False 
         With pnlcolumnview
            .top = Vbox_EditArea_Inner.top + Last.parent.parent.top + Last.parent.height
            .left = Last.parent.Left
            .width = txtAuthorityWording.width
            .Visible = False
            .Raise
         End With
         
         If Trim(TxtReason.text) = "" Then
            Try PrescribedFor_Habits_Get() 'bombs if drug null
         Else
            If Prescibed_For_Habits.count Then   
               With columnview1
                  .clear
                  .Columns.count = 1
                  .tag = txtReason
               End With
               For Each habit In Prescibed_For_Habits
                  columnview1.Add(habit!pk_prescibed_for_habit, 0)
                  columnview1[habit!pk_prescibed_for_habit][0] = habit!prescribed_for
               Next
               pnlcolumnview.Visible = True
            End If  
         Endif
         teForSpelling.text = txtReason.Text
      Case "generic"
         With pnlcolumnview
            .top = Vbox_EditArea_Inner.top + Last.parent.parent.top + Last.parent.height
            .left = Last.parent.Left
            .width = txtAuthorityWording.width
            .Visible = False
            .Raise
         End With
         With cvwBrands
            Try .Reparent(HSplit_DrugDisplay)
            .width = 180 'FIXME
            .Visible = True
         End With
         Wait
      Case "brand"
         With pnlcolumnview
            .top = Vbox_EditArea_Inner.top + Last.parent.parent.top + Last.parent.height
            .left = Last.parent.Left
            .width = txtAuthorityWording.width
            .Visible = False
            .Raise
         End With   
         If Last.text <> "" Then
            With cvwBrands
               .Reparent(Vbox_EditArea_Inner)
               If .count Then .Visible = True
               .top = pnlcolumnview.Top
               .Visible = True
               .left = pnlcolumnview.Left
               .width = txtAuthorityWording.Width
               .Raise
            End With
            
         Endif
   End Select
   
End

Public Sub Instruction_Habits_Get()
   '------------------------------------------------------------------------
   'Gets a collection of the users instructions for this drug
   'this is returned sorted descending, i.e the most common direction on top
   'so just auto insert this highest ranking one into the textbox   
   '------------------------------------------------------------------------
   
   If IsNull(drug!fk_product) Then Return 
   Instruction_Habits = modPrescribingDBI.Instruction_Habits_Get(drug!fk_product)
   For Each Habit In Instruction_Habits
      bExit = True
      txtInstructions.text = Habit!instruction
      bExit = False  
      TxtReason.SetFocus()
      Break
   Next  
   
End

Public Sub Instruction_Habits_Select()
   '----------------------------------------------------------------------------------------
   'User is selecting a reason for the prescription form the Prescibed_For_Habits collection
   '---------------------------------------------------------------------------------------- 
   
   columnview1.MoveCurrent
   txtInstructions.text = InStruction_Habits[columnview1.Item.key]!instruction
   tbOk.SetFocus()   
   pnlcolumnview.Visible = False
   
End

Public Sub PrescribedFor_Habits_Get()
   '------------------------------------------------------------------------------------
   'Gets a collection of the way this drug was prescribed
   'this is returned sorted descending, i.e the most common way it was prescribed on top
   'so just auto insert this highest ranking one into the textbox   
   '------------------------------------------------------------------------------------
   
   Prescibed_For_Habits = modPrescribingDBI.PrescribedFor_Habits_Get(drug!medication!fk_generic_product)
   
   For Each habit In Prescibed_For_Habits
      bExit = True
      TxtReason.text = habit!prescribed_for
      bExit = False  
      tbOk.SetFocus()
      Break
   Next
   
End

Public Sub Prescribed_For_Habits_Select()
   '----------------------------------------------------------------------------------------
   'User is selecting a reason for the prescription form the Prescibed_For_Habits collection
   '---------------------------------------------------------------------------------------- 
   
   columnview1.MoveCurrent
   txtReason.text = Prescibed_For_Habits[columnview1.Item.key]!prescribed_for
   tbOk.SetFocus()   
   pnlcolumnview.Visible = False
   
End

Public Sub lcRestrictions_Click()
   '-----------------------------------------------------------------------------------------------
   'Not sure why, but clicking on the textlabel in the lcREstrictions dosn't detect its click event
   'ie resctrictions_Click
   '-----------------------------------------------------------------------------------------------   
   
   If drug!restrictionflag <> "A" And Not InStr(cmbScriptTypes.Text, "AUTHORITY") Then Return 
   If InStr(cmbScriptTypes.Text, "AUTHORITY") And lcRestrictions.Count = 0 Then Return 
   Restrictions_Click()
   
End

Public Sub lcRestrictions_Keypress()
   '-------------------------------------------------------------------------------------
   'If user hits the <enter> key whilst the restrictions list has focus, then select this
   'restriction and the highlighted drug
   '-------------------------------------------------------------------------------------
   
   If drug!restrictionflag <> "A" Then Return 
   If key.code = key.return Then 
      Restrictions_dblclick()
   End If
   
End 

Public Sub Restrictions_dblclick()
   '----------------------------------------------------------------------------
   'User has double clicked on one of the text labels in the lcRestrictions list
   '----------------------------------------------------------------------------  
   
   If drug!restrictionflag <> "A" Then Return  
   Restrictions_Click()
   If pnlcolumnview.Visible Then columnview1_DblClick()
   
End

Public Sub Restrictions_Click()
   '-------------------------------------------------------------------------------------
   'User has clicked on one of the textlabel controls embedded in the lcRestrictions list
   'display the restriction text and restriction code if streamlined authority 
   '-------------------------------------------------------------------------------------
   
   Dim tec As TextLabel
   
   tec = lcRestrictions.children[lcRestrictions.index]
   restriction_code = lcRestrictions.children[lcRestrictions.index].tag     
   textEdit1.richtext = tec.Text
   restriction = textEdit1.Text
   txtAuthorityWording.text = textEdit1.Text
   txtAuthorityWording.pos = 0
   bexit = True   
   If drug!streamlined Then   
      txtApprovalNumber.text = restriction_code
   End If   
   bExit = False  
   
End

Public Sub Restrictions_Show()
   '--------------------------------------------------------------------------
   'As user clicks on a columnview row, show all restrictions for that pbscode
   'Show a drugs restriction details, these can be just restrictions of use
   'or authority indications, uses the pbscode (restriction.pbscode)
   '--------------------------------------------------------------------------
   
   Dim row As Integer = 0
   Dim pbscode As String 
   Dim lbl As TextLabel
   Dim sep As Separator
   
   Drug_Restrictions = New Collection
   Print drugs
   drug = drugs[columnview1.Item.key]                  'set drug collection   
   pbscode = drug!pbscode 
   lcRestrictions.Clear()
   For Each drug In drugs                             'All drugs in the collectioni
      If Not IsNull(drug!restriction) Then            'If drug has a restrciotn
         If drug!pbscode = pbscode Then                'if the pbscode = same as that we are showing
            If Not Drug_Restrictions.Exist(drug!restriction) Then  'if not already in the collection 
               With lbl = New TextLabel(lcRestrictions) As "Restrictions"  'add it, and to the list container
                  .text = drug!restriction           'This is what will be sent to the printer (minus html tags)
                  .tag = drug!restriction_code       'This will be saved to the database, if the row is selected
                  .Foreground = Color.DarkGray
                  .AutoResize = True
                  .font = Font["Arial," & Str(slAuthorityFontsize.value)]
               End With
               With sep = New Separator(lcRestrictions)
                  .Height = 3
                  .Foreground = Color.Black
               End With
               Drug_Restrictions.Add(drug!restriction, drug!restriction)
               Inc row
            Endif
         End If    
         
      End If 
   Next
   
End

Public Function PBS_Show(drug As Collection) As String 
   '-----------------------------------------------------------
   'Shows the PBS status of the currently selected drug
   'Not until user selects an authority wording can we show
   'the streamlined, unless we just opt to show the first one?
   'fixme anomoly between const.pbs_script_type
   'these labels should be same as those in const and used from there
   '    see const:
   '    pbs_script_types[pbs_script_type_pbs] = "PBS"
   '    pbs_script_types[pbs_script_type_pbs_authority] = "PBS AUTHORITY"
   '    pbs_script_types[pbs_script_type_pbs_authority_streamlined] = "PBS AUTHORITY STREAMLINED"
   '    pbs_script_types[pbs_script_type_rpbs] = "rpbs"
   '    pbs_script_types[pbs_script_type_rpbs_authority] = "rpbs AUTHORITY"
   '    pbs_script_types[pbs_script_type_rpbs_authority_streamlined] = "rpbs AUTHORITY STREAMLINED"
   '    pbs_script_types[pbs_script_type_private] = "PRIVATE"
   '    pbs_script_types[pbs_script_type_section100] = "SECTION 100"
   '    pbs_script_types[pbs_script_type_bps_authority_increased_quantity] = "PBS AUTHORITY INCREASED QUANTITY"
   '    pbs_script_types[pbs_script_type_rpbs_authority_increased_quantity] = "rpbs AUTHORITY INCREASED QUANTITY"
   
   '-----------------------------------------------------------
   bexit = True
   txtApprovalNumber.text = ""
   Select Case drug!chapter & drug!restrictionflag     ' & drug!restriction_flag = "U", "R" or "A"
      Case "OTU"
         lblRestrictions.text = "PBS OPTOMETRIST"
         iPBS_Script_Type = const.pbs_script_type_pbs
      Case "OTR"
         lblRestrictions.text = "PBS OPTOMETRIST RESTRICTED"
         iPBS_Script_Type = const.pbs_script_type_pbs
      Case "GEU"
         lblRestrictions.text = "PBS UNRESTRICTED"
         iPBS_Script_Type = const.pbs_script_type_pbs
      Case "GER"
         lblRestrictions.text = "PBS RESTRICTED"
         iPBS_Script_Type = const.pbs_script_type_pbs
      Case "GEA"
         If drug!streamlined Then  
            lblRestrictions.text = "PBS STREAMLINED" '[" & drug!restriction_code & "]"
            iPBS_Script_Type = const.pbs_script_type_pbs_authority_streamlined
            txtApprovalNumber.text = drug!restriction_code
            bAuthority = True
         Else
            lblRestrictions.text = "PBS AUTHORITY"
            iPBS_Script_Type = const.pbs_script_type_pbs_authority
            bAuthority = True
         End If
      Case "R1U"
         lblRestrictions.text = "rpbs UNRESTRICTED"
         iPBS_Script_Type = const.pbs_script_type_rpbs
      Case "R1R"
         lblRestrictions.text = "rpbs RESTRICTED"
         iPBS_Script_Type = const.pbs_script_type_rpbs
      Case "R1A"
         If drug!streamlined Then 
            lblRestrictions.text = "rpbs STREAMLINED" ' [" & drug!restriction_code & "]"
            iPBS_Script_Type = const.pbs_script_type_rpbs_authority_streamlined
            txtApprovalNumber.text = drug!restriction_code
            bAuthority = True
         Else
            lblRestrictions.text = "rpbs AUTHORITY"
            iPBS_Script_Type = const.pbs_script_type_rpbs_authority_streamlined
            bAuthority = True
         End If
      Case Else 'fixme (NOT true eg HS =section 100 .... etc etc  FIX ME
         lblRestrictions.text = "PRIVATE SCRIPT"
         iPBS_Script_Type = const.pbs_script_type_private
   End Select  
   
   cmbScriptTypes.index = iPBS_Script_Type - 1
   bExit = False  
   Return lblRestrictions.Text
   
End

Public Sub columnview1_KeyPress()
   
   Select Case key.Code
      Case key.Right
         If cvwBrands.count And cvwBrands.visible Then
            cvwBrands.SetFocus()
         End If   
      Case key.Return
         columnview1_DblClick()
   End Select 
   
End

Public Sub columnview1_Select()
   '------------------------------------------------------------------------
   'Either set in code by EditArea_txtBox_Keypress, the user having hit
   'the down arrow key and scrolled onto the list, or by the user clicking
   'directly on the columnview. If restrictions or authority wording applies
   'then show appropriate text
   '------------------------------------------------------------------------
   
   columnview1.MoveCurrent()              'move internal cursor
   pk_view = columnview1.Item.key       
   Select Case Last.tag.tag
      Case "generic", "brand"
         Restrictions_Show()                    'show which restrictions apply to this drug/generic or brand
         PBS_Show(drugs[columnview1.Item.key])  'shown PBS type eg PBS STREAMLINED
         Brands_For_Generic_Show()              'get the brands for this generic, show these
   End Select
   
End

Public Sub Brands_For_Generic_Show()
   '--------------------------------------------------------------------------------
   'Fetch list of brands corresponding to the generic shown in the popup columnview1
   'from drugs.vwDistinctBrandsForGenericProduct, set marquee to the first one in the
   'list. cvwBrands.item.key = pk_view = drugs.brands.pk
   '--------------------------------------------------------------------------------   
   
   brands = modPrescribingDBI.Brands_For_Generic_Get(drugs[columnview1.Item.key]!generic, drugs[columnview1.Item.key]!fk_product)
   cvwBrands.Clear
   For Each brand In brands
      cvwBrands.Add(brand!pk_view, 0)
      cvwBrands[brand!pk_view][0] = Left(brand!brand) & Lower(Right(brand!brand, Len(brand!brand) - 1))
   Next
   If brands.count Then
      With cvwBrands
         .MoveFirst()
         .Item.Selected = True
      End With
   Endif
   
End

Public Sub columnview1_DblClick()
   '------------------------------------------------------------------------
   'User has double clicked (or pressed enter see columnview1_keypress(0
   'According to whether we've searched on a brand or generic, transfer
   'the drug to the editing area, then remove the panel with the columnview
   '------------------------------------------------------------------------   
   
   Select Case columnview1.tag.tag 'don't make me 'last'
      Case "brand", "generic"
         Drug_Select()
      Case "authority wording"
         Authority_Increased_Quantity_Reasons_Select()
      Case "reason"
         Prescribed_For_Habits_Select()
      Case "instructions"
         Instruction_Habits_Select()
   End Select
   pnlColumnView.visible = False 
   
End

Public Sub Generics_Get()
   '-------------------------------------------------------------------
   'User has typed in txtGenerics, i.e wishes to search by generic name
   'Pop up the columnview with generic name + strength + form + repeats
   'at the end of this routine a list of drugs may be showing, but the
   'cursor remains on the txtGeneric textbox unless user then arrows
   'down to this list, or clicks on it.
   '-------------------------------------------------------------------  
   
   Dim last_drug As String 'drug+quantity+repeats
   
   Timer1.Stop()                                                  'stop searching
   With columnview1                                               'clear the popup columnview
      .Clear()
      .Columns.count = 5
   End With
   cvwBrands.Clear()                                              'clear the brands for generic
   If Trim(txtGeneric.text) = "" Then Return 
   drugs = modPrescribingDBI.Drugs_Search_By_Generic(Trim(txtGeneric.text))  'ok, get all matching generics from vwDrugs
   If drugs.count Then                                            'found some?
      For Each drug In drugs                                      'then put into the columnview
         If last_drug <> drug!generic & drug!pbscode Then 
            last_drug = drug!generic & drug!pbscode
            If drug!chapter = "GE" Or Drug!chapter = "R1" Then 
               ColumnView1.add(drug!pk_view, 0)                       'pk_view = string(brand.pk + pbs_code + restriction_code)
               columnview1[drug!pk_view][0] = drug!generic            'show the generic name in the columnview
               If InStr(drug!strength, "ml") Then                     'is a liquid? then make up to per 5mls strength
                  columnview1[drug!pk_view][1] = modPrescribingDBI.ConvertTo5mls(drug!strength)
               Else
                  columnview1[drug!pk_view][1] = drug!strength
               End If   
               columnview1[drug!pk_view][2] = drug!form          
               columnview1[drug!pk_view][3] = Str(drug!quantity) & " Rpt:" & drug!max_rpt 
               columnview1[drug!pk_view][4] = PBS_Show(drug)
            End If   
         End If   
      Next
      pnlcolumnview.Visible = True                                'Now show the list of generics 
      cvwBrands.visible = True                                    'show the brands list (still empty)
      columnview1.tag = txtBrand 
      Wait
   Endif
   
End

Public Sub Brands_Get()
   '-------------------------------
   'get all brands like search text
   '-------------------------------   
   
   Dim last_drug As String 'drug+quantity+repeats
   
   Timer1.Stop()                                                  'stop searching
   With columnview1                                               'clear the popup columnview
      .Clear()
      .Columns.count = 6
      .Columns[0].width = 100
   End With
   cvwBrands.Visible = False                                          'clear the brands for generic
   If Trim(txtBrand.text) = "" Then Return 
   drugs = modPrescribingDBI.Brands_Get_RT(Trim(txtbrand.text))  'ok, get all matching generics from vwDrugs
   If drugs.count Then                                            'found some?
      For Each drug In drugs                                      'then put into the columnview
         '  If last_drug <> drug!generic & drug!pbscode Then 
         '   last_drug = drug!generic & drug!pbscode
         If drug!chapter = "GE" Or Drug!chapter = "R1" Or IsNull(Drug!chapter) Then 
            ColumnView1.add(drug!pk_view, 0)                       'pk_view = string(brand.pk + pbs_code + restriction_code)
            columnview1[drug!pk_view][0] = drug!brand  
            columnview1[drug!pk_view][1] = drug!generic            'show the generic name in the columnview
            If InStr(drug!strength, "ml") Then                    'is a liquid? then make up to per 5mls strength
               If Not IsNull(drug!amount) Then    
                  Select Case drug!amount
                     Case 5
                        columnview1[drug!pk_view][2] = modPrescribingDBI.ConvertTo5mls(drug!strength) 'FIXME - NOT ALL COMES IN 5 MLS
                     Case 1
                        columnview1[drug!pk_view][2] = drug!strength
                     Case Else
                        columnview1[drug!pk_view][2] = modPrescribingDBI.ConvertTomls(drug!strength, drug!amount)
                  End Select
               End If  
            Else
               columnview1[drug!pk_view][2] = drug!strength
            End If   
            columnview1[drug!pk_view][3] = drug!form    
            If Not IsNull(drug!pbscode) Then       
               columnview1[drug!pk_view][4] = Str(drug!quantity) & " Rpt:" & drug!max_rpt 
            Else
               'it is a private drug
               columnview1[drug!pk_view][4] = Str(drug!pack_size) & " Rpt:0" 
            End If   
            columnview1[drug!pk_view][5] = PBS_Show(drug)
         End If   
         'End If   
      Next
      columnview1.Columns[0].width = 100
      pnlcolumnview.Visible = True                                'Now show the list of generics 
      columnview1.tag = txtBrand 
      
   Endif  
   
End

Public Sub Print_Content()
   '----------------------------------------------------------------------------------
   'Differs from other forms in that scripts are not saved to back-end before printing
   '----------------------------------------------------------------------------------   
   
   Save()
   
End

Public Sub Drug_Print()
   
   Print_Script_Items(script_items)
   
End

Public Sub Drug_Select()
   '----------------------------------------------------------------------
   'User is picking a drug from the popup columnview
   'FIXME REMOVE VARIABLES ONLY LOAD ONES FOR DISPLAY
   'the drug collection consists of this:
   'drugs!med whose data will be saved to clin_prescibing.medications
   'drugs!prescibed whose data will be saved to clin_prescribing.prescibed
   'drugs!fields = all fields for the drug, mainly used for display
   'Fill the edit area with the drugs details, the brand selected (or if 
   'none - the first brand on the list
   'try and auto-fill the instruction from the habits table and then put
   'cursor onto the instructions textbox. This will the auto-fill in the
   'instructions for the drug if previously described (or the best guess)
   '-----------------------------------------------------------------------
   
   Dim pbs_script_type As String                       'chapter + restrictionflag - selects how to print script
   Dim med As CRow                                     'cRow allows eg Med.Save(..)
   
   drug = drugs[pk_view]                               'set drug collection pk_view set by columnview1_select()  
   med = New CRow                                      'this will be saved in drug_save()
   med!fk_generic_product = drug!fk_product
   ' med!pbscode = drug!pbscode '
   
   drug!medication = med    
   bexit = True
   txtGeneric.text = drug!generic                      'e.g atenolol
   txtGeneric.pos = 1                                  'make sure stem of generic showing
   If cvwBrands.Visible Then 
      txtBrand.text = brands[cvwBrands.Item.key]!brand    'e.g tenormin
      ' med!fk_brand = cvwBrands.Item.key                   'match the brand key to the cvwBrands list
      fk_brand = cvwBrands.Item.key 
      
   Else
      txtBrand.text = drug!brand
      fk_brand = drug!fk_brand    
      '  med!fk_brand = drug!fk_brand                   'match the brand key to the cvwBrands list
   End If   
   txtBrand.pos = 1                                    'make sure stem of brand showing
   txtClass.text = drug!class                          'fixme
   If InStr(drug!strength, "ml") Then                  'if liquid, then show per 5ml volume
      If drug!amount = 5 Then 
         txtStrength.text = modPrescribingDBI.ConvertTo5mls(drug!strength)
      Else
         txtStrength.text = drug!strength
      End If   
   Else
      txtStrength.text = drug!strength & " " & drug!form 'show the formulation e.g tablet
   End If
   txtStrength.pos = 1
   If Not IsNull(drug!quantity) Then
      txtQuantity.text = drug!quantity
   Else
      Try txtQuantity.text = drug!pack_size 'private drugs
   End If   
   If Not IsNull(drug!max_rpt) Then
      txtRepeats.text = drug!max_rpt
   Else
      txtRepeats.text = 0
   End If   
   
   PBS_Show(drug)                                      'e.g PBS STREAMLINED or PRIVATE
   If drug!restrictionflag = "A" Then
      lcRestrictions.index = 0
      Restrictions_Click()
   End If   
   Try Instruction_Habits_Get()                        'get commonest direction, set focus to txtReason
   If Trim(txtInstructions.text) = "" Then
      txtInstructions.SetFocus()
   Endif
   
End

Public Sub Drug_Select_old()
   '----------------------------------------------------------------------
   'User is picking a drug from the popup columnview
   'FIXME REMOVE VARIABLES ONLY LOAD ONES FOR DISPLAY
   'the drug collection consists of this:
   'drugs!med whose data will be saved to clin_prescibing.medications
   'drugs!prescibed whose data will be saved to clin_prescribing.prescibed
   'drugs!fields = all fields for the drug, mainly used for display
   'Fill the edit area with the drugs details, the brand selected (or if 
   'none - the first brand on the list
   'try and auto-fill the instruction from the habits table and then put
   'cursor onto the instructions textbox. This will the auto-fill in the
   'instructions for the drug if previously described (or the best guess)
   '-----------------------------------------------------------------------
   
   Dim pbs_script_type As String                       'chapter + restrictionflag - selects how to print script
   Dim med As CRow                                     'cRow allows eg Med.Save(..)
   
   drug = drugs[pk_view]                               'set drug collection pk_view set by columnview1_select()  
   med = New CRow                                      'this will be saved in drug_save()
   med!fk_generic_product = drug!fk_product
   med!pbscode = drug!pbscode '
   
   drug!medication = med    
   bexit = True
   txtGeneric.text = drug!generic                      'e.g atenolol
   txtGeneric.pos = 1                                  'make sure stem of generic showing
   If cvwBrands.Visible Then 
      txtBrand.text = brands[cvwBrands.Item.key]!brand    'e.g tenormin
      med!fk_brand = cvwBrands.Item.key                   'match the brand key to the cvwBrands list
   Else
      txtBrand.text = drug!brand
      med!fk_brand = drug!fk_brand                   'match the brand key to the cvwBrands list
   End If   
   txtBrand.pos = 1                                    'make sure stem of brand showing
   txtClass.text = drug!class                          'fixme
   If InStr(drug!strength, "ml") Then                  'if liquid, then show per 5ml volume
      If drug!amount = 5 Then 
         txtStrength.text = modPrescribingDBI.ConvertTo5mls(drug!strength)
      Else
         txtStrength.text = drug!strength
      End If   
   Else
      txtStrength.text = drug!strength & " " & drug!form 'show the formulation e.g tablet
   End If
   txtStrength.pos = 1
   If Not IsNull(drug!quantity) Then
      txtQuantity.text = drug!quantity
   Else
      Try txtQuantity.text = drug!pack_size 'private drugs
   End If   
   If Not IsNull(drug!max_rpt) Then
      txtRepeats.text = drug!max_rpt
   Else
      txtRepeats.text = 0
   End If   
   
   PBS_Show(drug)                                      'e.g PBS STREAMLINED or PRIVATE
   If drug!restrictionflag = "A" Then
      lcRestrictions.index = 0
      Restrictions_Click()
   End If   
   Try Instruction_Habits_Get()                        'get commonest direction, set focus to txtReason
   If Trim(txtInstructions.text) = "" Then
      txtInstructions.SetFocus()
   Endif
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "new"
         Drug_New()
      Case "ok"
         '----------------------------------------------------------
         'All drugs from the editing area are added to the drug list
         'but not printed until the print button is clicked
         'fixme, perhaps making authorities save and print at the 
         'same time would be good, as the doctor may have to ring
         'up for a number and this would be more efficient   
         '---------------------------------------------------------
         tbOk.Enabled = False 
         If Drug_Add() Then 
            Drug_New() 'valid drug added to list
         End If  
         tbOk.Enabled = True  
         
      Case "print"
         Save()
         
      Case "product information"
         If drug.count Then Product_Information_Full_Show(drug!product_information_filename, drug!brand)
   End Select
   
End

Public Sub Product_Information_Full_Show(filename As String, drug_name As String)
   
   Try FClinical.Editor_ShowPage_External("pdf file", drug_name, modAdminDBI.Config_Get("product_information_directory", "", Null, modDBConnect.currentUser!fk_clinic) &/ filename)
   If Error Then
      Message.Info("No product information was found for this drug")
   Endif
   
End

Public Sub Drug_Add() As Boolean
   '----------------------------------------------------------------------------------------
   'Script items are added to the list under the editing area, and printed en-mass whenever
   'the user elects to do this - 3 items on a script for 'like' items
   'e.g if all pbs, all private
   'Returns true flag if sucessfully added to the list
   ' CREATE TABLE clin_prescribing.prescribed_rt
   ' (
   '   pk serial NOT NULL,
   ' x  fk_consult integer NOT NULL,
   '   fk_medication integer NOT NULL,
   ' x  fk_brand uuid,
   ' x  date_on_script date NOT NULL, -- The actual date on the script may not be the consulation date, can be back/forwarded dated,...
   ' x  repeats integer NOT NULL DEFAULT 0, -- The actual number of repeats...
   ' x  quantity integer NOT NULL, -- The quantity on the script...
   ' x  fk_instruction integer NOT NULL,
   ' x  fk_prescribed_for integer,
   '  not yet implemented  pbscode text,
   ' x  restriction_code text,
   ' x  reg24 boolean DEFAULT false, -- If true reg24 allows us to tell the...
   ' x  authority_script_number integer, -- the pbs requires a unique script number for an authority item, pretty stupid, but a number that...
   ' x  authority_approval_number text, -- either the steamlined authority number or the phone approval number obtained from a pbs operator
   ' x  authority_post_to_patient boolean DEFAULT false,
   ' x  script_number integer,
   ' not yet implemented  fk_code text, -- foreign key to references coding.generic_terms, if not null then the reason for using script...
   ' not yet implemented  suppress_reason boolean,
   ' not yet implemented  concession_details text,
   ' not yet implemented  brand_substitution boolean DEFAULT true,
   ' not yet implemented  fk_increased_quantity_authority_reason integer,
   ' x  fk_lu_pbs_script_type integer,
   ' not yet implemented  fk_progress_note integer,
   ' x  deleted boolean DEFAULT false, 'the default
   
   '----------------------------------------------------------------------------------------
   
   Dim x As Integer 'for readability
   'don't allow a 'double hit' on this button.
   If Not Drug_Valid() Then Return
   ' If Drug_Duplicated() Then Return 
   
   script_item = New Collection
   If fk_item_prescribed Then Script_item!fk_item_prescribed = fk_item_prescribed
   If fk_medication Then script_item!fk_medication = fk_medication
   '  If fk_increased_quantity_authority_reason Then script_item!fk_increased_quantity_authority_reason
   script_item!med = drug!medication
   script_item!med!Last_date = Now()
   script_item!med!start_date = Now()
   script_item!prescribed = New CRow
   script_item!prescribed!fk_brand = drug!fk_brand
   script_item!date_script_written = Now()
   script_item!prescribed!date_on_script = Val(txtdate.text)
   script_item!prescribed!fk_consult = currentconsult.GetPK()
   script_item!date_script_written = Now()
   script_item!brand = drug!brand ' for display only
   script_item!generic = drug!generic ' for display
   script_item!strength = drug!strength ' for display only
   script_item!form = drug!form
   script_item!product_information_filename = drug!product_information_filename
   script_item!prescribed!quantity = Val(txtQuantity.text)
   script_item!prescribed!repeats = Val(txtRepeats.text)
   script_item!pbs_script_type = lblRestrictions.Text
   script_item!instruction = Trim(txtInstructions.text) ' FIXME: convert to the PK here??
   script_item!prescribed_for = Trim(txtReason.text)  ' FIXME: convert to the PK here ??
   script_item!prescribed!fk_instruction = modPrescribingDBI.Instruction_Get_PK(script_item!instruction)
   'now, save any habits
   
   modPrescribingDBI.Instructions_Save_Habit(script_item)
   modDBConnect.CommitTrans()
   
   script_item!prescribed!fk_prescribed_for = modPrescribingDBI.PrescribedFor_Get_Pk(script_item!prescribed_for)
   
   modPrescribingDBI.Prescribed_For_Save_Habit(script_item)
   modDBConnect.CommitTrans()
   
   Script_item!prescribed!restriction_code = restriction_code
   script_item!prescribed!suppress_reason = False   'fixme implement me
   Script_item!prescribed!fk_lu_pbs_script_type = iPBS_Script_Type
   Script_item!prescribed!reg24 = CBool(chkReg24.Value)
   script_item!med!active = CBool(chkActive.value)
   Script_item!prescribed!authority_approval_number = Trim(txtApprovalNumber.Text)
   Script_item!prescribed!authority_post_to_patient = CBool(chkPostAuthority.value)
   If Trim(txtApprovalNumber.Text) <> "" Then
      Script_item!prescribed!authority_script_number = modPrescribingDBI.Authority_Number_Get_Next()
   End If
   Script_Item!prescribed!script_number = modPrescribingDBI.Script_Number_Get_Next()
   Script_item!authority_indication = Trim(txtAuthorityWording.Text) 'could be a PBS description or our own for increased authority
   script_items.Add(script_item, script_items.count)
   ' prescribed! = concession_details : these three not yet implemented
   ' prescribed! = brand_substitution : do not remove this code
   ' prescribed! = fk_progress_note
   cvwPrescriptions_Refresh(script_items)
   tbOk.Enabled = True  
   Return True 
   
End

Public Sub Drug_Add_IANs_Schema() As Boolean
   '----------------------------------------------------------------------------------------
   'Script items are added to the list under the editing area, and printed en-mass whenever
   'the user elects to do this - 3 items on a script for 'like' items
   'e.g if all pbs, all private
   'Returns true flag if sucessfully added to the list
   '----------------------------------------------------------------------------------------
   
   Dim x As Integer 'for readability
   'don't allow a 'double hit' on this button.
   If Not Drug_Valid() Then Return
   ' If Drug_Duplicated() Then Return 
   
   script_item = New Collection
   If fk_item_prescribed Then Script_item!fk_item_prescribed = fk_item_prescribed
   If fk_medication Then script_item!fk_medication = fk_medication
   '  If fk_increased_quantity_authority_reason Then script_item!fk_increased_quantity_authority_reason
   script_item!med = drug!medication
   script_item!med!fk_brand = drug!fk_brand
   script_item!prescribed = New CRow
   script_item!date_script_written = Now()
   script_item!prescribed!date_on_script = Val(txtdate.text)
   script_item!prescribed!fk_consult = currentconsult.GetPK()
   script_item!date_script_written = Now()
   script_item!brand = drug!brand ' for display only
   script_item!generic = drug!generic ' for display
   script_item!strength = drug!strength ' for display only
   script_item!form = drug!form
   script_item!product_information_filename = drug!product_information_filename
   script_item!med!quantity = Val(txtQuantity.text)
   script_item!med!repeats = Val(txtRepeats.text)
   script_item!pbs_script_type = lblRestrictions.Text
   script_item!instruction = Trim(txtInstructions.text) ' FIXME: convert to the PK here??
   script_item!prescribed_for = Trim(txtReason.text)  ' FIXME: convert to the PK here ??
   script_item!med!fk_instruction = modPrescribingDBI.Instruction_Get_PK(script_item!instruction)
   'now, save any habits
   
   modPrescribingDBI.Instructions_Save_Habit(script_item)
   modDBConnect.CommitTrans()
   
   script_item!med!fk_prescribed_for = modPrescribingDBI.PrescribedFor_Get_Pk(script_item!prescribed_for)
   
   modPrescribingDBI.Prescribed_For_Save_Habit(script_item)
   modDBConnect.CommitTrans()
   
   Script_item!med!restriction_code = restriction_code
   script_item!med!suppress_reason = False   'fixme implement me
   Script_item!med!fk_lu_pbs_script_type = iPBS_Script_Type
   Script_item!prescribed!reg24 = CBool(chkReg24.Value)
   script_item!med!active = CBool(chkActive.value)
   Script_item!prescribed!authority_approval_number = Trim(txtApprovalNumber.Text)
   Script_item!prescribed!authority_post_to_patient = CBool(chkPostAuthority.value)
   If Trim(txtApprovalNumber.Text) <> "" Then
      Script_item!prescribed!authority_script_number = modPrescribingDBI.Authority_Number_Get_Next()
   End If
   Script_Item!prescribed!script_number = modPrescribingDBI.Script_Number_Get_Next()
   Script_item!authority_indication = Trim(txtAuthorityWording.Text) 'could be a PBS description or our own for increased authority
   script_items.Add(script_item, script_items.count)
   ' prescribed! = concession_details : these three not yet implemented
   ' prescribed! = brand_substitution : do not remove this code
   ' prescribed! = fk_progress_note
   cvwPrescriptions_Refresh(script_items)
   tbOk.Enabled = True  
   Return True 
   
End

Public Sub Save()
   '-----------------------------------------------------------
   'Saves the drugs in the prescriptions list, then prints them
   'each  script_item in collection is an amalgum off the
   'medication details and the script details, so dis-entangle
   'Ian don't worry about this seeming lack of logic for moment
   'I'm just doing the functionality
   'The nomenclature in this module sucks at the moment, sorry
   '-----------------------------------------------------------
   
   For Each script_item In script_items 
      If IsNull(script_item!printed) Then 
         Drug_Save(script_item)
         script_item!printed = False 
      End If  
   Next
   
   Print_Script_Items(script_items)
   FClinical_Refresh()
   Reload()
   
End

Public Sub FClinical_Refresh()
   
   FClinical.Refresh_Section(const.cSection_Prescriptions)    'refresh lists on main screen FClinical
   FClinical.Refresh_AllPreviousNotes()
   
End

Public Sub Drug_Save(script_item As Collection) As Integer
   '------------------------------------------------------------------  
   'Save a single script item to the backend.
   'The 'core' features of a medication > clin_prescribing.medications
   '------------------------------------------------------------------
   
   Dim prescribed As CRow
   Dim R As Result
   'save
   '----------------------------------------
   'Has this product been prescribed before?
   '----------------------------------------
   R = modPrescribingDBI.Medication_Prescribed_Before(currentconsult!patient!fk_patient, script_item!med!fk_generic_product)
   If R.count Then
      script_item!med.put_unchanged(R!fk_medication, "fk_medication")
      script_item!med!start_date = R!start_date   'IAN FIX THIS ?CAN JUST DELETE THE KEY SOMEHOW
   Endif
   script_item!med.Save("clin_prescribing.medications_rt", "fk_medication")
   script_item!prescribed!fk_medication = script_item!med!fk_medication
   script_item!prescribed.Save("clin_prescribing.prescribed_rt", "fk_item_prescribed")
   modDBConnect.CommitTrans()
   Return fk_item_prescribed  'fix  me wrong not needed
   
End

Public Function cvwPrescriptions_Refresh_old(Script_Items_Written As Collection)
   '------------------------------------------------------------------------------
   'CALLED BY: Reload()   in which case loads only previously printed
   '           Drug_Add() in which case the collection being added not yet saved
   'Refresh the list of drugs prescribed this consulation
   'script_items is 'mixed' - it will contain all those items prescribed and
   'printed already (ie the script_item collection is a view) plus all thos
   'prescribed via the edit area and not yet printed The collections
   'associated with these will not have a !printed collection member
   '------------------------------------------------------------------------------
   
   Dim x As Integer
   
   cvwPrescriptions.Clear()
   
   For Each script_item In Script_Items_Written
      
      x = cvwPrescriptions.Count
      ' cvwPrescriptions.Add(x, 0)
      If IsNull(script_item!printed) Then
         cvwPrescriptions.Add(x, "", pic_not_printed)
      Else 
         cvwPrescriptions.Add(x, "", pic_printed)
      Endif
      If Not IsNull(script_item!date_script_written) Then
         cvwPrescriptions[x][1] = Format(script_item!date_script_written, "dd/mm/yyyy")
      Else
         cvwPrescriptions[x][1] = ""
      Endif
      cvwPrescriptions[x][2] = Format(script_item!prescribed!date_on_script, "dd/mm/yyyy")
      cvwPrescriptions[x][3] = script_item!brand
      cvwPrescriptions[x][4] = script_item!generic
      cvwPrescriptions[x][5] = script_item!strength
      cvwPrescriptions[x][6] = script_item!form
      cvwPrescriptions[x][7] = script_item!med!quantity
      cvwPrescriptions[x][8] = script_item!med!repeats 
      cvwPrescriptions[x][9] = script_item!pbs_script_type
      cvwPrescriptions[x][10] = script_item!instruction  
      cvwPrescriptions[x][11] = script_item!prescribed_for 
      
   Next
   
End

Public Function cvwPrescriptions_Refresh(Script_Items_Written As Collection)
   '------------------------------------------------------------------------------
   'CALLED BY: Reload()   in which case loads only previously printed
   '           Drug_Add() in which case the collection being added not yet saved
   'Refresh the list of drugs prescribed this consulation
   'script_items is 'mixed' - it will contain all those items prescribed and
   'printed already (ie the script_item collection is a view) plus all thos
   'prescribed via the edit area and not yet printed The collections
   'associated with these will not have a !printed collection member
   '------------------------------------------------------------------------------
   
   Dim x As Integer
   
   cvwPrescriptions.Clear()
   
   For Each script_item In Script_Items_Written
      
      x = cvwPrescriptions.Count
      ' cvwPrescriptions.Add(x, 0)
      If IsNull(script_item!printed) Then
         cvwPrescriptions.Add(x, "", pic_not_printed)
      Else 
         cvwPrescriptions.Add(x, "", pic_printed)
      Endif
      If Not IsNull(script_item!date_script_written) Then
         cvwPrescriptions[x][1] = Format(script_item!date_script_written, "dd/mm/yyyy")
      Else
         cvwPrescriptions[x][1] = ""
      Endif
      cvwPrescriptions[x][2] = Format(script_item!prescribed!date_on_script, "dd/mm/yyyy")
      cvwPrescriptions[x][3] = script_item!brand
      cvwPrescriptions[x][4] = script_item!generic
      cvwPrescriptions[x][5] = script_item!strength
      cvwPrescriptions[x][6] = script_item!form
      cvwPrescriptions[x][7] = script_item!prescribed!quantity
      cvwPrescriptions[x][8] = script_item!prescribed!repeats 
      cvwPrescriptions[x][9] = script_item!pbs_script_type
      cvwPrescriptions[x][10] = script_item!instruction  
      cvwPrescriptions[x][11] = script_item!prescribed_for 
      
   Next
   
End

Public Function Drug_Duplicated() As Boolean
   '--------------------------------------------------------------------------
   'Checks the edit area item against the scripts prescribed this consulation
   'If already prescribed, then warns user and prevents a save
   'Returns True if duplicated
   'checks against:
   '  date of script which allows forward/backdating, illegal in AU
   '  generic via the generic code
   '--------------------------------------------------------------------------
   
   Dim script_written As Collection
   Dim new_item As String
   Dim existing_item As String 
   
   new_item = Format(Val(txtdate.text), "dd/mm/yyyy") & " " & Str(fk_generic_product)
   For Each script_written In script_items
      existing_item = Format(script_written!date_on_script, "dd/mm/yyyy") & " "
      existing_item &= Str(script_written!fk_generic_product)
      If new_item = existing_item Then
         Message.Info("This item has already been presecribed this consultation")
         Return True
      Endif
   Next
   Return False
   
End

Public Function Drug_Valid() As Boolean
   '---------------------------------------------------------------------------
   'Does some basic validation that all is well in the state of Denmark
   'however, not 100% foolproof as cannot protect all fools against themselves
   '---------------------------------------------------------------------------
   
   Dim sMsg As String 
   
   If Not drug.Count Then Return
   If IsNull(drug!medication) Then Return  
   
   If Not IsDate(txtdate.text) Then
      txtdate.SetFocus()
      Return
   Endif
   If drug!medication!fk_generic_product = 0 Then
      txtGeneric.SetFocus()
      Return
   Endif
   If txtRepeats.text = "" Then
      txtRepeats.SetFocus()
      Return 
   Endif
   If txtQuantity.Text = "" Then
      txtQuantity.SetFocus
      Return
   Endif
   
   If txtInstructions.text = "" Then
      Message.Info("Please add direction how to take this script item before saving.")
      txtInstructions.SetFocus()
      Return
   Endif
   If txtReason.text = "" Then
      If Message.Warning("Do you want to the reason or condition for which you prescribed this medication?", "Yes", "No") = 1 Then 
         txtReason.SetFocus
         Return
      End If   
      txtReason.text = "not stated"
   Endif
   '---------------------
   'If an authority drug 
   '-----------------------
   Select Case drug!restrictionflag
      Case "A"
         '-----------------------------------------------------------------------------------------------
         'make sure they have selected an indication for authority, unless they are prescribing privately
         '-----------------------------------------------------------------------------------------------
         If iPBS_Script_Type <> const.pbs_script_type_private Then
            If drug!restriction_code = "" Or Trim(txtAuthorityWording.text) = "" Then 
               Message.Info("Please select an authority indication for this drug before saving")
               lcRestrictions.Children[0].SetFocus()
               Return  
            Endif
         End If   
   End Select
   '-------------------
   'Now authority stuff
   '-------------------
   ' If Trim(txtAuthorityWording.text) = "" And Trim(txtApprovalNumber.text) <> "" Then
   '    Message.Info("Please enter an authority wording for this drug\n\nand adjust the quantity being prescribed.")
   '    Return
   '    
   ' Endif
   If iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity Then
      If Not (Val(txtRepeats.text) > drug!quantity) Then
         sMsg = "You have prescibed a non-authority drug as an authority\n\n"
         "It would be usual to increase the supplied quantity and/or repeats for this drug."
         Message.Info(smsg)
         Return 
      Endif
   Endif
   Return True
   
End

Public Sub Print_Script_Items(items As Collection)
   '--------------------------------------------------------------------
   'Prints out any unprinted script items
   'previously printed items or items to re-print have !printed = False
   'fixme - single script only on s8
   '--------------------------------------------------------------------
   
   Dim pbs_scripts As New Collection
   Dim rpbs_scripts As New Collection
   Dim private_scripts As New Collection
   Dim s8_scripts As New Collection
   Dim authority_scripts As New Collection
   Dim templ As CTemplate
   
   For Each script_item In items 
      If script_item!printed = False Then 
         Select Case script_item!med!fk_lu_pbs_script_type
            Case const.pbs_script_type_pbs, const.pbs_script_type_private, const.pbs_script_type_rpbs
               Select Case script_item!med!fk_lu_pbs_script_type
                  Case const.pbs_script_type_pbs
                     If pbs_scripts.count = 3 Then 
                        Print_Script(pbs_scripts, const.pbs_script_type_pbs)
                        pbs_scripts = New Collection
                     End If   
                     pbs_scripts.Add(script_item, pbs_scripts.count) 
                  Case const.pbs_script_type_private
                     If private_scripts.count = 3 Then
                        Print_Script(private_scripts, const.pbs_script_type_private)
                        private_scripts = New Collection
                     Endif
                     private_scripts.Add(script_item, private_scripts.Count)  
                  Case const.pbs_script_type_rpbs  
                     If rpbs_scripts.count = 3 Then 
                        Print_Script(rpbs_scripts, const.pbs_script_type_rpbs)
                        rpbs_scripts = New Collection
                     Endif
                     rpbs_scripts.Add(script_item, rpbs_scripts.count)
               End Select
            Case Else
               templ = New CTemplate("authority-script", "tex")
               authority_scripts = New Collection 
               authority_scripts.Add(script_item, 0)
               modPrinting.Print_latex(Script_Construct_Authority_LaTeX(authority_scripts, templ).GetData(), const.Paper_Script)
               script_item!printed = True
         End Select
         script_item!printed = True
      End If 
   Next
   '------------------------------------------------------------------------------
   'Probably bad......... stupid........ way to do this but
   'Any 'left over' after lots of three printed (except if three only), print them
   '------------------------------------------------------------------------------
   If pbs_scripts.count Then Print_Script(pbs_scripts, const.pbs_script_type_pbs)
   If private_scripts.count Then Print_Script(private_scripts, const.pbs_script_type_private)
   If rpbs_scripts.count Then Print_Script(rpbs_scripts, const.pbs_script_type_rpbs)  
   
End

Public Sub Print_Script(items As Collection, pbs_script_type As Integer)
   '-----------------------------------------------------------------------
   'Accepts up to 3 drugs of same pbs_script_type and prints them on script
   'applies to non-authority items only
   '-----------------------------------------------------------------------
   
   Dim templ As New CTemplate("script", "tex")
   
   modPrinting.Print_latex(Script_Construct_LaTex(items, templ, pbs_script_type).GetData(), const.Paper_Script)
   
End     

Public Sub Script_Construct_LaTex(items As Collection, templ As CTemplate, pbs_script_type As Integer) As CTemplate
   '------------------------------------------------------------------------------
   'Construct the laTex for a non-authority script, max of three items on a script
   '------------------------------------------------------------------------------    
   
   templ.Subst_common(currentconsult)
   templ.Subst("patientaddress", Trim(currentconsult!patient!street1 & " " & currentconsult!patient!street2) & " " & currentconsult!patient!town & " " & currentconsult!patient!postcode)
   templ.Subst("medicarenumber", modUtil.Medicare_Number_Format(currentconsult!patient!medicare_number))
   templ.Subst("doctorname", modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename)
   templ.Subst("prescribernumber", modDBConnect.currentUser!prescriber_number)
   templ.Subst("patientname", currentconsult!patient!title & " " & currentconsult!patient!firstname & " " & currentconsult!patient!surname)
   templ.Subst("script-date", Format(script_item!date_script_written, "dd/mm/yyyy"))
   templ.Subst("script-number", script_item!prescribed!script_number)
   '-----------------------
   'set PBS RPBS or Private
   '-----------------------
   Select Case pbs_script_type
      Case const.pbs_script_type_pbs
         templ.Subst("pbs-script", "X")
         templ.Subst("rpbs-script", "")
         templ.Subst("wipe-pbs-rpbs", "")
      Case const.pbs_script_type_rpbs
         templ.Subst("rpbs-script", "X")
         templ.Subst("pbs-script", "")
         templ.Subst("wipe-pbs-rpbs", "")
      Case const.pbs_script_type_private
         templ.Subst("rpbs-script", "")
         templ.Subst("pbs-script", "")
         templ.Subst("wipe-pbs-rpbs", "XXXXXXXXXXXXXXX")
   End Select
   templ.Subst_Drugs(items) 'build latex for up to 3 script items
   Return templ 
   
End

Public Sub Script_Construct_Authority_LaTeX(auth_item As Collection, templ As CTemplate) As CTemplate
   
   Dim Drug As String
   Dim drugs As String 
   Dim script_item As Collection = Auth_item[0]
   
   templ.Subst_common(currentconsult)
   
   templ.Subst("authority-heading-authority-script-number", const.pbs_script_types[script_item!med!fk_lu_pbs_script_type] & " SCRIPT NO. " & script_item!prescribed!authority_script_number) 
   Print modUtil.Medicare_Number_Format(currentconsult!patient!medicare_number)
   templ.Subst("patientaddress", Trim(currentconsult!patient!street1 & " " & currentconsult!patient!street2) & " " & currentconsult!patient!town & " " & currentconsult!patient!postcode)
   templ.Subst("medicarenumber", currentconsult!patient!medicare_number)
   templ.Subst("doctorname", modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename)
   templ.Subst("patientname", currentconsult!patient!title & " " & currentconsult!patient!firstname & " " & currentconsult!patient!surname)
   templ.Subst("script-date", Format(script_item!prescribed!date_on_script, "dd/mm/yyyy")) 'strictly speaking illegal
   templ.Subst("script-number", script_item!prescribed!script_number)
   If InStr(script_item!pbs_script_type, "PBS") Then  
      templ.Subst("pbs-script", "X")
   Else
      templ.Checkbox("pbs-script", "")
   End If
   If InStr(script_item!pbs_script_type, "rpbs") Then   'and check against patients actual rpbs entitlements FIXME SHOULD DO THIS BACK IN PRESRIBING.
      templ.Subst("rpbs-script", "X")
   Else
      templ.Subst("rpbs-script", "")
   End If
   templ.Checkbox("previous-authority-yes-checkbox", True)
   templ.Checkbox("previous-authority-no-checkbox", False)
   If script_item!prescribed!authority_post_to_patient = True Then
      templ.Checkbox("sendtopatient-checkbox", True)
   Else
      templ.Checkbox("sendtopatient-checkbox", False)
   Endif
   templ.Subst("authority-approval-number", Script_Item!prescribed!authority_approval_number)
   If InStr(Lower(Script_item!pbs_script_type), "streamlined") Then 
      script_item!authority_indication = Replace(script_item!authority_indication, "<p>", "")
      script_item!authority_indication = Replace(script_item!authority_indication, "</p>", "")
      script_item!authority_indication = Replace(script_item!authority_indication, "<br/>", "")
      templ.Subst("authority-indication", "[" & script_item!restriction_code & "]" & script_item!authority_indication)   
      
   Else
      script_item!restriction = Replace(script_item!restriction, "<p>", "")
      script_item!restriction = Replace(script_item!restriction, "</p>", "")
      script_item!restriction = Replace(script_item!restriction, "<br/>", "")
      templ.Subst("authority-indication", script_item!restriction)         
   End If   
   templ.Subst("quantity-repeats", script_item!strength & " " & script_item!med!quantity & "'s Rpt " & script_item!med!repeats)
   templ.Subst_Drugs(auth_item, True) 
   Return templ
   
End 

Public Sub New_Entry()
   '------------------------------------------------------------------------------------------------------
   'This is called from the main toolbar in FClinical and here for consistant nomenclature between modules
   '------------------------------------------------------------------------------------------------------   
   
   Drug_New() 
   
End

Public Sub Drug_New()
   '----------------------------------------
   'User has decided to prescript a new drug
   '----------------------------------------   
   
   EditArea_Clear()                                  'Clear the edit area (the input area)
   Reset_Flags()                                     'Reset all keys and flags
   txtdate.text = Format(Now, "dd/mm/yyyy")          'Default to today's date, this can be over-ridden by user
   chkActive.value = True                            'Assume this will be an active (in current use) medication
   Drug = New Collection                             'reset all the collections
   Drugs = Null
   Prescibed_For_Habits = New Collection
   Instruction_Habits = New Collection
   EditArea_Notify_Data_Change(False)
   If rbBrandPrescribing.value = True Then           'set to users default (or current default) prescibring mode
      txtBrand.SetFocus()
   Else
      txtGeneric.SetFocus()
   Endif
   
End

Public Sub cvwPrescriptions_Menu()
   '-----------------------------------------------------------------------------
   'User has clicked over the drugs which have been placed on the prescribed list
   'Show the popup menu
   '-----------------------------------------------------------------------------   
   
   If Last.count Then
      mnuPrescriptions.Popup()
   Endif
   
End

Public Sub cvwPrescriptions_Click()
   '------------------------------------------------------------------------------
   'User has clicked on the list of prescribed drugs, set internal cursor to match
   '------------------------------------------------------------------------------   
   
   cvwPrescriptions.MoveCurrent
   iCurrentScriptKey = Last.item.key
   
End

Public Sub mnuPrescriptions_Click()
   
   Dim fk_script_item As Integer 
   Dim item As Collection 
   Dim x As Integer
   
   cvwPrescriptions.MoveCurrent()
   Select Case Last.tag
      Case "edit"
         Edit()
      Case "delete single", "delete all"
         Delete_Script
      Case "undo delete"
         Delete_Undo()
      Case "print single" 
         '----------------------------------------------------------------
         'print (and or save) the highlighted item
         'as the entire list hasn't been printed, the resultant collection
         'must be slotted back into the script_items collection
         '-----------------------------------------------------------------
         ' If IsNull(script_items[cvwPrescriptions.Item.key]!fk_script_item) Then 
         '     script_items[cvwPrescriptions.Item.key]!fk_item_prescribed = Drug_Save(script_items[cvwPrescriptions.Item.key]) 'saves to backend and commits
         ' 'script_items.Remove(cvwPrescriptions.Item.key)
         ' script_items[cvwPrescriptions.Item.key] = modPrescribingDBI.Prescription_Written(script_items[cvwPrescriptions.Item.key]!fk_script_item)
         ' 'script_items.Add(modPrescribingDBI.Prescription_Written(fk_script_item), cvwPrescriptions.Item.Key)
         ' script_items[cvwPrescriptions.Item.key]!printed = False  
         ' Drug_Print_Single(cvwPrescriptions.Item.key)       'prints a single script
         ' ' cvwPrescriptions[cvwPrescriptions.Item.key].Picture = pic_printed
      Case "print all"
         For Each item In script_items
            item!printed = False
         Next
         Print_Script_Items(script_items)
      Case "print selected"
         
      Case "save single no print"
         
         If IsNull(script_items[cvwPrescriptions.Item.key]!printed) Then
            script_items[cvwPrescriptions.Item.key]!fk_item_prescribed = Drug_Save(script_items[cvwPrescriptions.Item.key])
            script_items[cvwPrescriptions.Item.key]!printed = True
         Endif
         cvwPrescriptions.UnselectAll()
         FClinical_Refresh()
      Case "save selected no print"
         cvwPrescriptions.MoveFirst
         For x = 0 To cvwPrescriptions.count - 1
            If cvwPrescriptions.Item.Selected = True Then
               If IsNull(script_items[cvwPrescriptions.Item.key]!printed) Then
                  Drug_Save(script_items[cvwPrescriptions.Item.key])
                  script_items[cvwPrescriptions.Item.key]!printed = True
                  '   cvwPrescriptions.
               Endif
            Endif
            cvwPrescriptions.MoveNext()
         Next
         cvwPrescriptions.UnselectAll()
         FClinical_Refresh()
         
      Case "brief pi"
      Case "full pi"
         Product_Information_Full_Show(script_items[cvwPrescriptions.Item.key]!product_information_filename, script_items[cvwPrescriptions.Item.key]!brand)
      Case "fonts"
         modUtil.Columnview_SetFont(cvwPrescriptions, "Prescriptions_" & Embedded_In_Form)
      Case "help"   
   End Select
   
End

Public Sub Drug_Print_Single(key As Integer)
   
   Dim items As New Collection
   
   items.Add(script_items[key], 0)
   Print_Script_Items(items)
   script_items[key]!printed = True 
   
End

Public Sub Authority_Increased_Quantity_Reason_Get()
   
   Dim reason As Collection
   
   With columnview1
      .Clear
      .Columns.count = 1
      .Columns[0].width = columnview1.Width
   End With
   If Not Trim(txtAuthorityWording.text) Then Return    
   Authority_Increased_Quantity_Reasons = modPrescribingDBI.Authority_Increased_Quantity_Reason_Get(Trim(txtAuthorityWording.text))
   If Authority_Increased_Quantity_Reasons.count > 0 Then 
      For Each reason In Authority_Increased_Quantity_Reasons
         columnview1.Add(reason!pk, 0)  
         columnview1[reason!pk][0] = reason!reason
      Next
      columnview1.tag = txtAuthorityWording
      pnlcolumnview.Visible = True 
   End If   
   
End

Public Sub Authority_Increased_Quantity_Reasons_Select()
   '--------------------------------------------------
   'User selecting a previously used authority wording
   '--------------------------------------------------
   
   columnview1.MoveCurrent
   bExit = True   
   txtAuthorityWording.text = Authority_Increased_Quantity_Reasons[columnview1.item.key]  
   pnlcolumnview.Visible = False 
   bexit = False  
   tbOk.SetFocus()
   
End

Public Sub HSplit_EditArea_Inner_Resize()
   
   If pnlcolumnview.Visible Then
      pnlcolumnview.width = txtAuthorityWording.Width
   Endif
   
End

Public Sub cvwBrands_KeyPress()
   '----------------------------------------------------------------------------
   'the brands for generic list is visible
   'if user hits the left arrow key, just move focus back to the generics list
   'if user hits the enter key then trigger selection of the selected generic
   '----------------------------------------------------------------------------
   
   Select Case key.Code
      Case key.Left
         If pnlcolumnview.Visible And columnview1.count Then
            columnview1.SetFocus()
         Endif
      Case key.Return
         cvwBrands_DblClick()
   End Select
   
End

Public Sub cvwBrands_DblClick()
   '---------------------------------------------------------------------------   
   'the brands for generic list is visible
   'set internal cvwbrands cursor to reflect the
   'underlying brands collection, then trigger selection of the selected generic
   '----------------------------------------------------------------------------
   
   cvwBrands.MoveCurrent()          
   columnview1_DblClick()
   cvwBrands.Visible = False  
   
End

Public Sub EditArea_RadioButtons_Click()
   
   If Bexit Then Return 
   Drug_New()
   
End

Public Sub slAuthorityFontsize_Change()
   
   Dim lbl As TextLabel
   Dim ctrl As Control
   
   For Each ctrl In lcRestrictions.Children
      If ctrl Is TextLabel Then
         lbl = ctrl
         lbl.Font.Size = Last.value
      Endif
   Next
   
End

Public Sub cmbScriptTypes_Click()
   
   Select Case cmbScriptTypes.Index + 1
      Case const.pbs_script_type_private
         bexit = True
         txtAuthorityWording.text = ""
         txtApprovalNumber.text = ""
         bexit = False   
         iPBS_Script_Type = const.pbs_script_type_private
   End Select
   
End
