' Gambas class file

' Gambas class file
' Copyright (C) 2008,2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
'TODO    functionality for authority with increased quantity.
'         prescribed! = concession_details: these three Not yet implemented
'         prescribed! = brand_substitution: Do Not remove this code
'        prescribed! = fk_progress_note
'BUGS    After ipbs_script_type is set by the generic, finding the 
'        brands for the brand list is over-riding this ?does it matter
'        ie are all the brands for this product the same ipbs_script_type
'        probably yes but check.
'--------------------------------------------------------------------
Private pic_printed As Picture = Picture["icons/12/green_dot.png"]
Private pic_not_printed As Picture = Picture["icons/12/red_dot.png"]

Private bExit As Boolean
Private bAuthority As Boolean       'If True the script item needs an authority.
Private bKeyValid As Boolean
Private bGenericSearch As Boolean
Private Script_Items_This_Consultation As Collection
Private Script As Collection
Private fk_pasthistory As Integer
Private fk_item_prescribed As Integer
Private pk_view As Integer
Private fk_company As String 
Private fk_generic_product As Integer
Private fk_prescribed_for As Integer
Private fk_increased_quantity_authority_reason As Integer      'if not 0 then key to clin_prescribing.increased_quantity_authority_reasons
Private pbscode As String
Private iPBS_Script_Type As Integer              'e.g print as PBS, rpbs, PBS AUTHORITY etc, see Const
Private restriction_code As String   ' pbs restriction.code  eg for authorities
Private restriction As String 
Private fk_prescibed_for As Integer = 0
Private fk_instruction As Integer = 0
Private iCurrentScriptKey As Integer
Private cProgressNote_Section As Integer
Private currentconsult As CConsult
Private bEmbedded As Boolean             'If true the form is embedded in a frmConsultNotes editor
Private embedded_in_form As String          'the form this form is embedded in
Private drugs As Collection
Private drug As Collection
Private Deleted_Scripts As Collection
Private currentDrug As Collection
Private timer_count As Integer
Private Drug_Restrictions As Collection
Private drug_Restriction As Collection 
Private Print_Status As String
Private medications As Collection
Private medication As Collection
Private fk_medication As Integer 
Private script_items As Collection
Private script_item As Collection
Private view_items As Collection       'all the items from the view of script items written this consultation
Private Instruction_Habits As Collection
Private Prescribing_Habits As Collection 
Private habit As Collection 
Private Authority_Increased_Quantity_Reasons As Collection

Public Sub set_embedded(F As String)
   '----------------------------------------------------------
   'If this form is embeded from another form set flag
   'embeddedinform = either "Fclinical", "FInbox" or "FTasks"
   '---------------------------------------------------------
   
   embedded_in_form = F
   
End

Public Sub Reload()
   '--------------------------------------------------------------
   'Display scripts written this consultation, am assuming
   'that if saved to backend they have been printed, however
   'could have been saved 'no print', so perhaps change this flag
   'FIXME
   '-------------------------------------------------------------
   
   currentconsult.Refresh("prescriptions_written")
   script_items = modUtil.Copy_Collection_Keyed_Sequentially(currentconsult!prescriptions_written)
   For Each script_item In script_items
      script_item!printed = True   
   Next
   cvwPrescriptions_Refresh(script_items)
   Drug_New()
   
End

Public Sub Settings_Save()
   
   Settings["Prescriptions_" & Embedded_In_Form & "/HSplit_EditArea_Inner.Layout"] = HSplit_EditArea_Inner.Layout
   ' Settings["Tasks_Embedded_" & Embedded_In_Form & "/HSplit_EditArea_Outer.Layout"] = HSplit_EditArea_Outer.Layout
   ' Settings["Tasks_Embedded_" & Embedded_In_Form & "/Vsplit_Script.Layout"] = Vsplit_Script.Layout
   Settings["Prescriptions_" & Embedded_In_Form & "/Vsplit_Script.Layout"] = Vsplit_Script.Layout
   
End

Public Sub Settings_Load()
   
   Try Vsplit_Script.Layout = Settings["Prescriptions_" & embedded_in_form & "/Vsplit_Script.Layout"]
   Try HSplit_EditArea_Inner.Layout = Settings["Prescriptions_" & Embedded_In_Form & "/HSplit_EditArea_Inner.Layout"]
   Try cvwPrescriptions.Font = Font[Settings["Prescriptions_" & Embedded_In_Form & "/cvwPrescriptions.font"]]
   
End

Public Sub Init(cons As CConsult)
   
   currentconsult = cons
   lblMeasure.text = " Authority Wording  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Inner, lblMeasure)
   modEditAreaHelpers.Resize_label(lblPrescribeFor, lblMeasure)
   modEditAreaHelpers.Resize_label(label29, lblMeasure)
   lblMeasure.text = "  Quantity  "
   modEditAreaHelpers.Resize_label(lblQuantity, lblMeasure)
   modEditAreaHelpers.Resize_label(lblLockDate, lblMeasure)
   modEditAreaHelpers.Resize_label(lblRepeats, lblMeasure)
   modEditAreaHelpers.Resize_label(lblPostAuthority, lblMeasure)
   With cvwPrescriptions
      .Columns.count = 12
      .Columns[1].text = "Date Written"
      .Columns[2].text = "Date on Script"
      .Columns[3].text = "Brand"
      .Columns[4].text = "Generic drug"
      .Columns[5].text = "Strength"
      .Columns[6].text = "Form"
      .Columns[7].text = "Qty"
      .Columns[8].text = "Rpt"
      .Columns[9].text = "PBS status"
      .Columns[10].text = "Directions"
      .Columns[11].text = "Prescibed For"
      
   End With
   cvwBrands.Columns.count = 1
   script_items = New Collection 'all those prescribed this consultation
   Settings_Load()
   MenuButton1.menu = "mnuHealthIssues"
   Reload()
   
End

Public Sub mnuHealthIssues_Click()
   '---------------------------------------------------
   'User wants to link a request form to a health issue
   'The menu tag = the pk_pasthistory
   '---------------------------------------------------
   
   Select Case Last.tag
      Case "general notes", "remove link"
         txtHealthIssue.text = "General Notes"
         cProgressNote_Section = const.cSection_GeneralNotes
         fk_pasthistory = 0
      Case Else
         txtHealthIssue.text = currentconsult!past_history[Last.tag]!description
         fk_pasthistory = Last.tag
         cProgressNote_Section = const.cSection_Referrals
   End Select
   EditArea_Notify_Data_Change(True)

End

Public Sub Delete(del As String)
   
End

Public Sub Delete_Undo()
   
End

Public Sub timer1_Timer()
   
   If timer_count > 3 Then
      If bGenericSearch Then
         Generics_Get()
      Else
         Brands_Get()
      End If  
   Endif
   
End

Public Sub Edit()
   '----------------------------
   'Edit a script written today
   'Fixme - wont work for an unsaved item
   '---------------------------
   
   Dim script_item As Collection
   
   cvwPrescriptions.MoveCurrent
   fk_item_prescribed = currentconsult!prescriptions_written[iCurrentScriptKey]!fk_item_prescribed   
   fk_medication = currentconsult!prescriptions_written[iCurrentScriptKey]!fk_medication
   txtdate.text = currentconsult!prescriptions_written[iCurrentScriptKey]!date_script_written
   txtClass.text = currentconsult!prescriptions_written[iCurrentScriptKey]!class
   txtGeneric.text = currentconsult!prescriptions_written[iCurrentScriptKey]!generic
   txtDrug.text = currentconsult!prescriptions_written[iCurrentScriptKey]!brand
   txtStrength.text = currentconsult!prescriptions_written[iCurrentScriptKey]!strength
   txtDirections.text = currentconsult!prescriptions_written[iCurrentScriptKey]!instruction
   TxtReason.text = currentconsult!prescriptions_written[iCurrentScriptKey]!prescribed_for
   txtQuantity.text = currentconsult!prescriptions_written[iCurrentScriptKey]!quantity
   txtRepeats.text = currentconsult!prescriptions_written[iCurrentScriptKey]!repeats
   lblRestrictions.text = currentconsult!prescriptions_written[iCurrentScriptKey]!restriction
   chkActive.Value = currentconsult!prescriptions_written[iCurrentScriptKey]!active
   ' chkSupressReason.value =  currentconsult!prescriptions_written[iCurrentScriptKey]!suppress_reason
   chkPostAuthority.value = chkPostAuthority!authority_post_to_patient
   chkReg24.value = currentconsult!prescriptions_written[iCurrentScriptKey]!reg24
   
End

Public Sub EditArea_TxtBox_KeyRelease()
   
   Select Case Last.tag
      Case "drug"
         Timer1.Enabled = True
         Inc timer_count
         bGenericSearch = False  
      Case "generic"
         bGenericSearch = True
         Timer1.Enabled = True
         Inc timer_count
      Case "authority wording"
         If Not IsNull(drug!quantity) And txtQuantity.text <> "" Then 
            If drug!restrictionflag <> "A" And drug!quantity < Val(txtQuantity.text) Then
               Authority_Increased_Quantity_Reason_Get()
            End If   
         End If   
   End Select
   
End

Public Sub Reset_Flags()
   
   fk_item_prescribed = 0
   pk_view = 0
   fk_company = ""          'fk_company + fk_generic_product is really equivalent to the non existant fk_brand
   fk_generic_product = 0
   pbscode = ""
   fk_prescribed_for = 0
   fk_instruction = 0
   fk_medication = 0
   fk_increased_quantity_authority_reason = 0
   print_status = ""
   restriction_code = ""
   restriction = ""
   bAuthority = False   
   
End

Public Sub EditArea_Clear()
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_Inner)
   modEditAreaHelpers.mnuHealthIssues_Refresh(currentconsult, mnuHealthIssues, Me) 'create the popup health issues menu but default to general notes
   fk_pasthistory = 0
   cProgressNote_Section = const.cSection_GeneralNotes
   txtHealthIssue.text = "general notes"
   
   teInteractions.Clear()
   lcRestrictions.Clear()
   pnlcolumnview.Visible = False   
   cvwBrands.Clear()
   lblRestrictions.text = ""
   lblDrug.text = "Drug"
   txtdate.text = Format(Now, "dd/mm/yyyy")
   bExit = False  

End

Public Sub EditArea_Buttons_KeyPress()
   
   If key.code = key.return Then    
      Select Case Last.tag
         Case "ok"
            tbOk.Enabled = False 
            If Drug_Add() Then 
               Drug_New() 'valid drug added to list
            End If  
            tbOk.Enabled = True  
      End Select
   End If   
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case tag
      Case "date"
         bKeyValid = modUtil.AllowKeys(Const.AllowKeys_DateFormat, keycode)
      Case "repeats", "quantity"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case Else  
         bKeyValid = True  
         
   End Select  
   Return bKeyValid
   
End

Public Sub Editarea_txtBox_KeyPress()
   
   If Not EditAreaTextbox_ExcludeKeys(key.code, Last.tag) Then    'validate key input first
      Stop Event                                                  'no good? don't show key output
      Return
   End If
   Select Case Key.Code
         
      Case Key.Down
         'fixme there is a bug in here - somehow it is possible to have this visible without anything in the box
         If pnlcolumnview.Visible Then
            With columnview1
               .MoveFirst()
               .SetFocus()
               Try .Item.Selected = True
            End With
            
         Endif
      Case Key.Return, Key.Tab
         
         Select Case Last.tag
            Case "date"
               txtDrug.SetFocus()
            Case "directions"
               TxtReason.SetFocus()
            Case "reason"
               If iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity Or drug!restrictionflag = "A" And Trim(txtAuthorityWording.text) = "" Then
                  If Trim(txtAuthorityWording.text) = "" Then
                     txtAuthorityWording.SetFocus()
                  Else
                     If Trim(txtApprovalNumber.text) <> "" Then
                        tbOk.SetFocus()
                     Else
                        txtApprovalNumber.SetFocus()
                     Endif
                  Endif
                  
               Else
                  tbOk.SetFocus()
               End If   
            Case "approval number"
               If lblRestrictions.text = "PBS AUTHORITY (Inc Qty)" Or lblRestrictions.text = "rpbs AUTHORITY (Inc Qty)" Then
                  If Not (Val(txtQuantity.text) > drug!quantity) Then
                     txtQuantity.SetFocus()
                  End If   
               Endif
            Case "quantity"
               txtRepeats.SetFocus()
            Case "repeats"
               If Not IsNull(drug!quantity) Then  
                  If (Val(txtQuantity.text) > drug!quantity) Then
                     If Trim(txtReason.text) = "" Then
                        txtReason.SetFocus()
                     Else
                        If iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity Or drug!restrictionflag = "A" And Trim(txtAuthorityWording.text) = "" Then
                           If Trim(txtAuthorityWording.text) = "" Then
                              txtAuthorityWording.SetFocus()
                           Else
                              If Trim(txtApprovalNumber.text) <> "" Then
                                 tbOk.SetFocus()
                              Else
                                 txtApprovalNumber.SetFocus()
                              Endif
                           Endif
                        End If 
                     End If   
                  Endif
               Else
                  If Last.text <> "" Then
                     If txtQuantity.text <> "" Then
                        tbOk.SetFocus()
                     Endif
                  Endif
               End If   
            Case "authority wording"
               If Trim(txtApprovalNumber.text) = "" Then
                  txtApprovalNumber.SetFocus()
               Endif
         End Select
   End Select     
   
End

Public Sub EditArea_Notify_Data_Change(flag As Boolean)
   
   If flag Then
      Vbox_EditArea.Padding = 1
      Vbox_EditArea.Background = Color.red
      tbOk.Foreground = Color.Red
      
   Else
      Vbox_EditArea.Padding = 0
      Vbox_EditArea.Background = Color.white
      tbOk.Foreground = Color.black
   End If
   
End

Public Sub EditArea_TxtBox_LostFocus()
   
   Last.BackGround = Color.white
   Select Case Last.tag
      Case "date"
         If Last.text <> "" Then
            If Not modEditAreaHelpers.Valid_Date(Last) Then
               bExit = True
               Last.text &= " **INVALID DATE**"
               Last.SetFocus()
               bExit = False   
            End If
         End If
      Case "drug"
         Timer1.stop()
   End Select
   
   Last.pos = 0
   
End

Public Sub EditArea_TxtBox_Change()
   
   If bexit Then Return 
   Select Case Last.tag
      Case "drug", "generic"
         If Trim(Last.text) = "" Then
            Drug_New()
         Endif
      Case "approval number"
         chkAuthority.value = True
         '------------------------------------------------------
         'Drug should be already showing in the edit area
         'If user typing in an approval number, this should be
         'hence an increased quantity
         'fix me take into account patients pbs/rpbs status
         'If this drug is not listed as a PBS or rpbs authority
         'the of quantity is over that usually prescibed
         'tag this as an increased quantity authority
         'If user fails to do this, Drug_Valid() will pick it up
         'and throw them back to the quantity box
         '------------------------------------------------------
         bexit = True
         Last.text = UCase(Last.text)
         bexit = False
         If iPBS_Script_Type <> const.pbs_script_type_pbs_authority Or iPBS_Script_Type <> const.pbs_script_type_rpbs_authority Then
            
            Drug_Show_Restriction()
            If Val(txtQuantity.text) > drug!quantity Then
               iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity
            Endif
         End If  
      Case "quantity"
         'User is changing the quantity, is this increased quantity or PBS item
         If Not IsNull(drug!quantity) And txtQuantity.text <> "" Then         'private drugs seem to have no quantity
            If Val(txtQuantity.text) > drug!quantity Then
               If drug!restrictionflag <> "A" And (drug!restrictionflag = "U" Or drug!restrictionflag = "R") Then             'not a pbs authority
                  iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity
                  Drug_Show_Restriction()
               Else
                  
               End If
            Endif
         End If
      Case "directions"
         Directions_Expand_Text(Last)
      Case "authority wording"
         If Trim(Last.text) = "" Then
            pnlcolumnview.Visible = False 
            
         Endif
   End Select
   EditArea_Notify_Data_Change(True)

End

Public Sub Drug_Show_Restriction() 
   'fixme bring me into line with const......
   
   Select Case drug!chapter
      Case "GE"
         lblRestrictions.text = "PBS AUTHORITY (Inc Qty)"
      Case "R1"
         lblRestrictions.text = "RPBS AUTHORITY (Inc Qty)"
   End Select
   
End

Public Sub Directions_Expand_Text(txt As Textbox)
   '-----------------------------------------------------------
   'Expand common abbreviations, taking into account that
   'some of these could be part of an actual word eg ac or stat
   '----------------------------------------------------------- 
   
   bexit = True
   txt.text = Replace(txt.text, "bd", " twice daily")
   txt.text = Replace(txt.text, "tds", " three times daily")
   txt.text = Replace(txt.text, "nocte", " at night")
   txt.text = Replace(txt.text, "qid", " four times daily")
   If InStr(txt.text, " ac ") Then   
      txt.text = Replace(txt.text, "ac", " before meals")
   End If   
   txt.text = Replace(txt.text, "prn", " as needed")
   If InStr(txt.text, " stat ") Then 
      txt.text = Replace(txt.text, "stat", " immediately")
   End If   
   bexit = False
   
End

Public Sub EditArea_TxtBox_GotFocus()
   
   If Last.tag <> "restriction" Then Last.BackGround = Color.rgb(95, 255, 175)
   columnview1.clear
   Select Case Last.tag
         
      Case "reason"
         cvwBrands.Visible = False 
         With pnlcolumnview
            .top = Vbox_EditArea_Inner.top + Last.parent.top + Last.parent.height
            .left = Last.Left
            .width = txtAuthorityWording.width
            .Visible = False
            .Raise
         End With
         If Trim(Last.text) = "" Then
            PrescibedFor_Habits_Get()
         Endif
      Case "generic"
         With pnlcolumnview
            .top = Vbox_EditArea_Inner.top + Last.parent.top + Last.parent.height
            .left = Last.Left
            .width = txtAuthorityWording.width
            .Visible = False
            .Raise
         End With
         cvwBrands.Visible = True   
   End Select
   
End

Public Sub PrescibedFor_Habits_Get()
   
   Prescribing_Habits = modPrescribingDBI.PrescibedFor_Habits_Get(fk_generic_product)
   For Each habit In Prescribing_Habits
      TxtReason.text = habit!prescribed_for
      tbOk.SetFocus()
      Break
   Next
   
End

Public Sub columnview1_KeyPress()
   
   If Key.code = Key.return Then
      columnview1_DblClick()
   Endif
   
End

Public Sub lcRestrictions_Click()
   
   Restrictions_Click()
   
End

Public Sub Restrictions_Click()
   '-------------------------------------------------------------------------------------
   'User has clicked on one of the textlabel controls embedded in the lcRestrictions list
   'set restriction code and text
   '-------------------------------------------------------------------------------------
   
   restriction_code = Last.children[Last.index].tag     
   textEdit1.richtext = Last.children[Last.index].text
   restriction = textEdit1.Text
   txtAuthorityWording.text = textEdit1.Text
   txtAuthorityWording.pos = 0
   bexit = True   
   txtApprovalNumber.text = restriction_code
   bExit = False  
   If pnlcolumnview.Visible Then columnview1_DblClick()
   
End

Public Sub Restrictions_Show()
   '--------------------------------------------------------------------------
   'As user clicks on a columnview row, show all restrictions for that pbscode
   'Show a drugs restriction details, these can be just restrictions of use
   'or authority indications, uses the pbscode (restriction.pbscode)
   '--------------------------------------------------------------------------
   
   Dim row As Integer = 0
   Dim pbscode As String 
   Dim lbl As TextLabel
   Dim sep As Separator
   
   Drug_Restrictions = New Collection
   
   currentDrug = drugs[columnview1.Item.key]         'drug showing in the columview
   pbscode = currentDrug!pbscode 
   lcRestrictions.Clear()
   For Each drug In drugs                           'All drugs in the collectioni
      If Not IsNull(drug!restriction) Then            'If drug has a restrciotn
         If drug!pbscode = pbscode Then                'if the pbscode = same as that we are showing
            If Not Drug_Restrictions.Exist(drug!restriction) Then  'if not already in the collection 
               With lbl = New TextLabel(lcRestrictions) As "Restrictions"  'add it, and to the list container
                  .text = drug!restriction           'This is what will be sent to the printer (minus html tags)
                  .tag = drug!restriction_code       'This will be saved to the database, if the row is selected
                  .Foreground = Color.DarkGray
                  .AutoResize = True
                  .font = Font["Arial,9"]
                  
               End With
               With sep = New Separator(lcRestrictions)
                  .Height = 3
                  .Foreground = Color.Black
               End With
               Drug_Restrictions.Add(drug!restriction, drug!restriction)
               Inc row
            Endif
         End If    
         
      End If 
   Next
   
End

Public Sub PBS_Show(drug As Collection)
   '-----------------------------------------------------------
   'Shows the PBS status of the currently selected drug
   'Not until user selects an authority wording can we show
   'the streamlined, unless we just opt to show the first one?
   'fixme anomoly between const.pbs_script_type
   'these labels should be same as those in const and used from there
   '    see const:
   '    pbs_script_types[pbs_script_type_pbs] = "PBS"
   '    pbs_script_types[pbs_script_type_pbs_authority] = "PBS AUTHORITY"
   '    pbs_script_types[pbs_script_type_pbs_authority_streamlined] = "PBS AUTHORITY STREAMLINED"
   '    pbs_script_types[pbs_script_type_rpbs] = "rpbs"
   '    pbs_script_types[pbs_script_type_rpbs_authority] = "rpbs AUTHORITY"
   '    pbs_script_types[pbs_script_type_rpbs_authority_streamlined] = "rpbs AUTHORITY STREAMLINED"
   '    pbs_script_types[pbs_script_type_private] = "PRIVATE"
   '    pbs_script_types[pbs_script_type_section100] = "SECTION 100"
   '    pbs_script_types[pbs_script_type_bps_authority_increased_quantity] = "PBS AUTHORITY INCREASED QUANTITY"
   '    pbs_script_types[pbs_script_type_rpbs_authority_increased_quantity] = "rpbs AUTHORITY INCREASED QUANTITY"
   
   '-----------------------------------------------------------
   bexit = True
   Select Case drug!chapter & drug!restrictionflag     ' & drug!restriction_flag = "U", "R" or "A"
      Case "OTU"
         lblRestrictions.text = "PBS OPTOMETRIST"
         iPBS_Script_Type = const.pbs_script_type_pbs
      Case "OTR"
         lblRestrictions.text = "PBS OPTOMETRIST RESTRICTED"
         iPBS_Script_Type = const.pbs_script_type_pbs
         
      Case "GEU"
         lblRestrictions.text = "PBS UNRESTRICTED"
         iPBS_Script_Type = const.pbs_script_type_pbs
      Case "GER"
         lblRestrictions.text = "PBS RESTRICTED"
         iPBS_Script_Type = const.pbs_script_type_pbs
      Case "GEA"
         If drug!streamlined Then  
            lblRestrictions.text = "PBS STREAMLINED" '[" & drug!restriction_code & "]"
            iPBS_Script_Type = const.pbs_script_type_pbs_authority_streamlined
            txtApprovalNumber.text = drug!restriction_code
            bAuthority = True
         Else
            lblRestrictions.text = "PBS AUTHORITY"
            iPBS_Script_Type = const.pbs_script_type_pbs_authority
            bAuthority = True
         End If
      Case "R1U"
         lblRestrictions.text = "rpbs UNRESTRICTED"
         iPBS_Script_Type = const.pbs_script_type_rpbs
      Case "R1R"
         lblRestrictions.text = "rpbs RESTRICTED"
         iPBS_Script_Type = const.pbs_script_type_rpbs
      Case "R1A"
         If drug!streamlined Then 
            lblRestrictions.text = "rpbs STREAMLINED" ' [" & drug!restriction_code & "]"
            iPBS_Script_Type = const.pbs_script_type_rpbs_authority_streamlined
            txtApprovalNumber.text = drug!restriction_code
            bAuthority = True
         Else
            lblRestrictions.text = "rpbs AUTHORITY"
            iPBS_Script_Type = const.pbs_script_type_rpbs_authority_streamlined
            bAuthority = True
         End If
      Case Else
         lblRestrictions.text = "PRIVATE SCRIPT"
         iPBS_Script_Type = const.pbs_script_type_private
   End Select  
   bExit = False  
   
End

Public Sub columnview1_Select()
   
   columnview1.MoveCurrent()
   Restrictions_Show()         'show which restrictions apply to this drug/generic or brand
   PBS_Show(drugs[columnview1.Item.key])
   Brands_For_Generic_Show() 
   
End

Public Sub Brands_For_Generic_Show()
   
   Dim brands As Collection
   Dim brand As Collection
   
   brands = modPrescribingDBI.Brands_For_Generic_Get(drugs[columnview1.Item.key]!generic, drugs[columnview1.Item.key]!fk_product)
   cvwBrands.Clear
   For Each brand In brands
      cvwBrands.Add(brand!pk_view, 0)
      cvwBrands[brand!pk_view][0] = Left(brand!brand) & Lower(Right(brand!brand, Len(brand!brand) - 1))
   Next
   Print cvwBrands.count 
   
End

Public Sub columnview1_DblClick()
   
   Select Case columnview1.tag.tag 'don't make me 'last'
      Case "drug"
         Drug_Select()
      Case "generic"
         Generic_Select()
      Case "authority wording"
         Authority_Increased_Quantity_Reasons_Select()
   End Select
   
End

Public Sub Generics_Get()
   
   Dim last_drug As String 'drug+quantity+repeats
   
   Timer1.Stop()
   With columnview1
      .Clear()
      .Columns.count = 5
   End With
   cvwBrands.Clear()
   If Trim(txtGeneric.text) = "" Then Return 
   drugs = modPrescribingDBI.Generics_Get(Trim(txtGeneric.text))
   If drugs.count Then
      For Each drug In drugs
         If last_drug <> drug!generic & drug!pbscode Then 
            last_drug = drug!generic & drug!pbscode
            '  If last_drug <> drug!drug & Str(drug!quantity) & Str(drug!max_rpt) Then 
            '              last_drug = drug!drug & Str(drug!quantity) & Str(drug!max_rpt)
            ' 
            
            ColumnView1.add(drug!pk_view, 0)
            columnview1[drug!pk_view][0] = drug!generic
            If InStr(drug!strength, "ml") Then
               columnview1[drug!pk_view][1] = modPrescribingDBI.ConvertTo5mls(drug!strength)
            Else
               columnview1[drug!pk_view][1] = drug!strength
            End If   
            columnview1[drug!pk_view][2] = drug!form
            columnview1[drug!pk_view][3] = Str(drug!quantity) & " Rpt:" & drug!max_rpt  
         End If   
      Next
      pnlcolumnview.Visible = True  
      cvwBrands.visible = True
      columnview1.tag = txtDrug 
      
   Endif
   
End

Public Sub Generic_Select()
   
   Drug_Select()
   
End

Public Sub Brands_Get()
   ' 
   ' Return 
   ' Timer1.Stop()
   ' With columnview1
   '    .Clear()
   '    .Columns.count = 4
   ' End With
   ' If Trim(txtDrug.text) = "" Then Return 
   ' brands = modPrescribingDBI.Brands_Get(Trim(txtDrug.text))
   ' If brands.count Then
   '    For Each brand In brands
   '       
   '       ColumnView1.add(brand!pk_view, 0)
   '       columnview1[brand!pk_view][0] = brand!brand
   '       columnview1[brand!pk_view][1] = brand!generic
   '       If InStr(brand!strength, "ml") Then
   '          columnview1[brand!pk_view][2] = modPrescribingDBI.ConvertTo5mls(brand!strength)
   '       Else
   '          columnview1[brand!pk_view][2] = brand!strength
   '       End If   
   '       columnview1[brand!pk_view][3] = brand!form
   '    Next
   '    pnlcolumnview.Visible = True  
   '    cvwBrands.Visible = False   
   '    columnview1.tag = txtDrug 
   '    
   ' Endif
   ' 
   
End

Public Sub DP(c As Collection)
   
End

Public Sub Drug_Print()
   
   Print_Script_Items()
   
End

Public Sub Drug_Select()
   '-------------------------------------------------
   'User is picking a drug from the popup columnview
   '------------------------------------------------
   
   Dim pbs_script_type As String                   'chapter + restrictionflag - selects how to print script
   
   columnview1.MoveCurrent                         'set the key
   drug = drugs[columnview1.Item.key]            'set drug collection   
   
   fk_company = drug!fk_company                   'if not null points to drug.drug using fk_generic_product
   fk_generic_product = drug!fk_product      'never null eg points to amoxycillin 250mg capsules
   restriction_code = drug!fk_restriction         'may be null, if not = drugs restriction or authority details
   pbscode = drug!pbscode                         'may be null if not pbs
   
   bexit = True
   txtGeneric.text = drug!generic
   txtDrug.text = drug!brand 'won't be showing if user config configuration to hide this is set (not done yet FIXME)
   txtDrug.pos = 1
   txtClass.text = drug!class   'fixme
   If InStr(drug!strength, "ml") Then
      txtStrength.text = modPrescribingDBI.ConvertTo5mls(drug!strength)
   Else
      txtStrength.text = drug!strength & " " & drug!form
   End If
   txtStrength.pos = 1
   Try txtRepeats.text = drug!max_rpt
   Try txtQuantity.text = drug!quantity
   
   PBS_Show(drug)
   Instruction_Habits = modPrescribingDBI.Instruction_Habits_Get(fk_generic_product)
   If Instruction_Habits.count Then
      For Each Habit In Instruction_Habits
         txtDirections.text = Habit!instruction
         TxtReason.SetFocus()
         Break
      Next  
   Else 
      txtDirections.SetFocus()
   Endif
   bexit = False 
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "new"
         Drug_New()
      Case "ok"
         '----------------------------------------------------------
         'All drugs from the editing area are added to the drug list
         'but not printed until the print button is clicked
         'fixme, perhaps making authorities save and print at the 
         'same time would be good, as the doctor may have to ring
         'up for a number and this would be more efficient   
         '---------------------------------------------------------
         tbOk.Enabled = False 
         If Drug_Add() Then 
            Drug_New() 'valid drug added to list
         End If  
         tbOk.Enabled = True  
         
      Case "print"
         Save()
         ' Drug_Print()
      Case "pi"
         
   End Select
   
End

Public Sub Drug_Add() As Boolean
   '----------------------------------------------------------------------------------------
   'Script items are added to the list under the editing area, and printed en-mass whenever
   'the user elects to do this - 3 items on a script for 'like' items
   'e.g if all pbs, all private
   'Returns true flag if sucessfully added to the list
   '----------------------------------------------------------------------------------------
   
   Dim x As Integer 'for readability
   
   'don't allow a 'double hit' on this button.
   If Not Drug_Valid() Then Return
   If Drug_Duplicated() Then Return 
   
   script_item = New Collection
   If fk_item_prescribed Then Script_item!fk_item_prescribed = fk_item_prescribed
   If fk_medication Then script_item!fk_medication = fk_medication
   '  If fk_increased_quantity_authority_reason Then script_item!fk_increased_quantity_authority_reason
   script_item!date_on_script = Val(txtdate.text)
   script_item!fk_consult = currentconsult.GetPK()
   script_item!date_script_written = Now()
   script_item!brand = Trim(txtDrug.text)
   script_item!fk_company = fk_company
   script_item!generic = txtGeneric.Text
   script_item!fk_generic_product = fk_generic_product
   script_item!strength = drug!strength ' Trim(txtStrength.text)
   script_item!form = drug!form
   script_item!quantity = Val(txtQuantity.text)
   script_item!repeats = Val(txtRepeats.text)
   script_item!pbs_print_status = lblRestrictions.Text
   script_item!instruction = Trim(txtDirections.text) 
   script_item!prescribed_for = Trim(txtReason.text)  
   Script_item!restriction_code = restriction_code
   Script_item!suppress_reason = False   'fixme implement me
   Script_item!pbscode = pbscode
   Script_item!fk_pbs_script_type = iPBS_Script_Type
   Script_item!reg24 = CBool(chkReg24.Value)
   Script_item!active = CBool(chkActive.value)
   Script_item!authority_approval_number = Trim(txtApprovalNumber.Text)
   Script_item!authority_post_to_patient = CBool(chkPostAuthority.value)
   If Trim(txtApprovalNumber.Text) <> "" Then
      Script_item!authority_script_number = modPrescribingDBI.Authority_Number_Get_Next()
   End If
   Script_Item!script_number = modPrescribingDBI.Script_Number_Get_Next()
   Script_item!authority_indication = Trim(txtAuthorityWording.Text) 'could be a PBS description or our own for increased authority
   
   script_items.Add(script_item, script_items.count)
   cvwPrescriptions_Refresh(script_items)
   tbOk.Enabled = True  
   Return True 
   
End

Public Sub Save()
   '-----------------------------------------------------------
   'Saves the drugs in the prescriptions list, then prints them
   'each  script_item in collection is an amalgum off the
   'medication details and the script details, so dis-entangle
   'Ian don't worry about this seeming lack of logic for moment
   'I'm just doing the functionality
   'The nomenclature in this module sucks at the moment, sorry
   '-----------------------------------------------------------
   
   For Each script_item In script_items 
      Drug_Save(script_item)
      If IsNull(script_item!printed) Then script_item!printed = False 
   Next
   
   Print_Script_Items(script_items)
   FClinical.Refresh_Section(const.cSection_Prescriptions)    'refresh lists on main screen FClinical
   FClinical.Refresh_AllPreviousNotes()
   Reload()
   
End

Public Sub Drug_Save(script_item As Collection) As Integer
   '------------------------------------------------------------------  
   'Save a single script item to the backend.
   'The 'core' features of a medication > clin_prescribing.medications
   '------------------------------------------------------------------
   
   Dim medication As Collection
   Dim prescribed As Collection
   
   modDBConnect.BeginTrans()
   medication = New Collection 
   medication!fk_medication = script_item!fk_medication
   medication!fk_generic_product = script_item!fk_generic_product
   medication!fk_company = script_item!fk_company
   medication!instruction = script_item!instruction 
   medication!prescribed_for = script_item!prescribed_for
   If Not IsNull(script_item!restriction_code) Then 
      medication!restriction_code = script_item!restriction_code
   Endif
   medication!pbscode = script_item!pbscode
   medication!fk_pbs_script_type = script_item!fk_pbs_script_type
   medication!suppress_reason = False 'fixme put in mechanism for this
   medication!active = script_item!active
   medication!quantity = script_item!quantity
   medication!repeats = script_item!repeats
   medication!authority_indication = script_item!authority_indication 'will be dropped
   '----------------------------------------------------------------------------------------------
   '   Table: clin_prescibring.prescibed
   '   pk serial NOT NULL,
   '   fk_consult integer NOT NULL,
   '   fk_medication integer NOT NULL,
   '   date_on_script date NOT NULL, -- The actual date on the script may not be the consulation date, can be back/forwarded dated,...
   '   reg24 boolean DEFAULT false, -- If true reg24 allows us to tell the...
   '   authority_script_number integer, -- the pbs requires a unique script number for an authority item, pretty stupid, but a number that...
   '   authority_approval_number text, -- either the steamlined authority number or the phone approval number obtained from a pbs operator
   '   authority_post_to_patient boolean DEFAULT false,
   '   script_number integer,
   '   concession_details text,
   '   brand_substitution boolean DEFAULT true,
   '   fk_progress_note integer,
   '   deleted boolean DEFAULT false,
   '----------------------------------------------------------------------------------------------
   prescribed = New Collection
   prescribed!fk_item_prescribed = Script_item!fk_item_prescribed
   prescribed!date_on_script = Script_item!date_on_script
   prescribed!fk_consult = Script_item!fk_consult
   prescribed!reg24 = Script_item!reg24 
   prescribed!authority_script_number = Script_item!authority_script_number
   prescribed!authority_approval_number = Script_item!authority_approval_number
   prescribed!authority_post_to_patient = Script_item!authority_post_to_patient
   prescribed!script_number = Script_item!script_number
   ' prescribed! = concession_details : these three not yet implemented
   ' prescribed! = brand_substitution : do not remove this code
   ' prescribed! = fk_progress_note
   
   fk_item_prescribed = modPrescribingDBI.Save(currentconsult!patient!fk_patient, script_item, prescribed, medication)
   
   modDBConnect.CommitTrans()
   Return fk_item_prescribed
   
End

Public Function cvwPrescriptions_Refresh(Script_Items_Written As Collection)
   '------------------------------------------------------------------------------
   'CALLED BY: Reload()   in which case loads only previously printed
   '           Drug_Add() in which case the collection being added not yet saved
   'Refresh the list of drugs prescribed this consulation
   'script_items is 'mixed' - it will contain all those items prescribed and
   'printed already (ie the script_item collection is a view) plus all thos
   'prescribed via the edit area and not yet printed The collections
   'associated with these will not have a !printed collection member
   '------------------------------------------------------------------------------
   
   Dim x As Integer
   
   cvwPrescriptions.Clear()
   
   For Each script_item In Script_Items_Written
      
      x = cvwPrescriptions.Count
      ' cvwPrescriptions.Add(x, 0)
      If IsNull(script_item!printed) Then
         cvwPrescriptions.Add(x, "", pic_not_printed)
      Else 
         cvwPrescriptions.Add(x, "", pic_printed)
      Endif
      
      cvwPrescriptions[x][1] = Format(script_item!date_script_written, "dd/mm/yyyy")
      cvwPrescriptions[x][2] = Format(script_item!date_on_script, "dd/mm/yyyy")
      cvwPrescriptions[x][3] = script_item!brand
      cvwPrescriptions[x][4] = script_item!generic
      cvwPrescriptions[x][5] = script_item!strength
      cvwPrescriptions[x][6] = script_item!form
      cvwPrescriptions[x][7] = script_item!quantity
      cvwPrescriptions[x][8] = script_item!repeats 
      cvwPrescriptions[x][9] = script_item!pbs_print_status
      cvwPrescriptions[x][10] = script_item!instruction  
      cvwPrescriptions[x][11] = script_item!prescribedfor   
      
   Next
   
End

Public Function Drug_Duplicated() As Boolean
   '--------------------------------------------------------------------------
   'Checks the edit area item against the scripts prescribed this consulation
   'If already prescribed, then warns user and prevents a save
   'Returns True if duplicated
   'checks against:
   '  date of script which allows forward/backdating, illegal in AU
   '  generic via the generic code
   '--------------------------------------------------------------------------
   
   Dim script_written As Collection
   Dim new_item As String
   Dim existing_item As String 
   
   new_item = Format(Val(txtdate.text), "dd/mm/yyyy") & " " & Str(fk_generic_product)
   For Each script_written In script_items
      existing_item = Format(script_written!date_on_script, "dd/mm/yyyy") & " "
      existing_item &= Str(script_written!fk_generic_product)
      If new_item = existing_item Then
         Message.Info("This item has already been presecribed this consultation")
         Return True
      Endif
   Next
   Return False
   
End

Public Function Drug_Valid() As Boolean
   '---------------------------------------------------------------------------
   'Does some basic validation that all is well in the state of Denmark
   'however, not 100% foolproof as cannot protect all fools against themselves
   '---------------------------------------------------------------------------
   
   Dim sMsg As String 
   
   If Not IsDate(txtdate.text) Then
      txtdate.SetFocus()
      Return
   Endif
   If fk_generic_product = 0 Then
      txtGeneric.SetFocus()
      Return
   Endif
   If txtQuantity.text = "" Then
      txtQuantity.SetFocus()
      Return 
   Endif
   If txtRepeats.Text = "" Then
      txtRepeats.SetFocus
      Return
   Endif
   
   If txtDirections.text = "" Then
      Message.Info("Please add directions for this script item before saving.")
      txtDirections.SetFocus()
      Return
   Endif
   If txtReason.text = "" Then
      If Message.Warning("Do you want to the reason or condition for which you prescribed this medication?", "Yes", "No") = 1 Then Return
   Endif
   If drug!restrictionflag = "A" And restriction_code = "" Then
      Message.Info("Please select an authority indication for this drug before saving")
      lcRestrictions.Children[0].SetFocus()
      Return 
   Endif
   '-------------------
   'Now authority stuff
   '-------------------
   If Trim(txtAuthorityWording.text) = "" And Trim(txtApprovalNumber.text) <> "" Then
      Message.Info("Please enter an authority wording for this drug\n\nand adjust the quantity being prescribed.")
      Return
      
   Endif
   If iPBS_Script_Type = const.pbs_script_type_pbs_authority_increased_quantity Then
      If Not (Val(txtQuantity.text) > drug!quantity) Then
         sMsg = "You have prescibed a non-authority drug as an authority\n\n"
         "It would be usual to increase the supplied quantity and/or repeats for this drug."
         Message.Info(smsg)
         Return 
      Endif
   Endif
   Return True
   
End

Public Sub Print_Script_Items(items As Collection)
   '--------------------------------------------------------------------
   'Prints out any unprinted script items
   'previously printed items or items to re-print have !printed = False
   'fixme - single script only on s8
   '--------------------------------------------------------------------
   
   Dim pbs_scripts As New Collection
   Dim rpbs_scripts As New Collection
   Dim private_scripts As New Collection
   Dim s8_scripts As New Collection
   
   Dim templ As CTemplate
   
   For Each script_item In items 
      If script_item!printed = False Then 
         If script_item!fk_pbs_script_type < const.pbs_script_type_pbs Then 
            templ = New CTemplate("authority-script", "tex")
            '   modPrinting.Print_latex(ScriptForm_Construct_Authority(script_item, templ).GetData(), const.Paper_Script)
            script_item!printed = True
         Else
            Select script_item!fk_pbs_script_type
               Case const.pbs_script_type_pbs
                  If pbs_scripts.count = 3 Then 
                     '     Print_Script(pbs_scripts, const.pbs_script_type_pbs)
                     pbs_scripts = New Collection
                  End If   
                  pbs_scripts.Add(script_item, pbs_scripts.count) 
                  
               Case const.pbs_script_type_private
                  If private_scripts.count = 3 Then
                     '   Print_Script(private_scripts, const.pbs_script_type_private)
                     private_scripts = New Collection
                  Endif
                  private_scripts.Add(script_item, private_scripts.Count)  
               Case const.pbs_script_type_rpbs  
                  If rpbs_scripts.count = 3 Then 
                     '   Print_Script(rpbs_scripts, const.pbs_script_type_rpbs)
                     rpbs_scripts = New Collection
                  Endif
                  rpbs_scripts.Add(script_item, rpbs_scripts.count)
            End Select
            script_item!printed = True
         End If
      End If 
   Next
   '------------------------------------------------------------------------------
   'Probably bad......... stupid........ way to do this but
   'Any 'left over' after lots of three printed (except if three only), print them
   '------------------------------------------------------------------------------
   '  If pbs_scripts.count Then Print_Script(pbs_scripts, const.pbs_script_type_pbs)
   '  If private_scripts.count Then Print_Script(private_scripts, const.pbs_script_type_private)
   ' If rpbs_scripts.count Then Print_Script(rpbs_scripts, const.pbs_script_type_rpbs)  
   
End

Public Sub Print_Script(items As Collection, pbs_script_type As Integer)
   '-----------------------------------------------------------------------
   'Accepts up to 3 drugs of same pbs_script_type and prints them on script
   'applies to non-authority items only
   '-----------------------------------------------------------------------
   
   Dim templ As New CTemplate("script", "tex")
   
   modPrinting.Print_latex(Script_Construct_LaTex(items, templ, pbs_script_type).GetData(), const.Paper_Script)
   
End     

Public Sub Script_Construct_LaTex(items As Collection, templ As CTemplate, pbs_script_type As Integer) As CTemplate
   '------------------------------------------------------------------------------
   'Construct the laTex for a non-authority script, max of three items on a script
   '------------------------------------------------------------------------------    
   
   templ.Subst_common(currentconsult)
   templ.Subst("patientaddress", Trim(currentconsult!patient!street1 & " " & currentconsult!patient!street2) & " " & currentconsult!patient!town & " " & currentconsult!patient!postcode)
   templ.Subst("medicarenumber", currentconsult!patient!medicare_number)
   templ.Subst("doctorname", modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename)
   templ.Subst("prescribernumber", modDBConnect.currentUser!prescriber_number)
   templ.Subst("patientname", currentconsult!patient!title & " " & currentconsult!patient!firstname & " " & currentconsult!patient!surname)
   templ.Subst("script_date", Format(script_item!date_script_written, "dd/mm/yyyy"))
   templ.Subst("script_number", script_item!script_number)
   '-----------------------
   'set PBS RPBS or Private
   '-----------------------
   Select Case pbs_script_type
      Case const.pbs_script_type_pbs
         templ.Subst("pbs_script", "X")
         templ.Subst("rpbs_script", "")
         templ.Subst("wipe_pbs_rpbs", "")
      Case const.pbs_script_type_rpbs
         templ.Subst("rpbs_script", "X")
         templ.Subst("pbs_script", "")
         templ.Subst("wipe_pbs_rpbs", "")
      Case const.pbs_script_type_private
         templ.Subst("rpbs_script", "")
         templ.Subst("pbs_script", "")
         templ.Subst("wipe_pbs_rpbs", "XXXXXXXXXXXXXXX")
   End Select
   templ.Subst_Drugs1(items) 'build latex for up to 3 script items
   
   Print templ
   Return templ 
   
End

Public Sub ScriptForm_Construct_Authority(script_item As Collection, templ As CTemplate) As CTemplate
   
   Dim Drug As String
   Dim drugs As String 
   
   templ.Subst_common(currentconsult)
   
   templ.Subst("authority_heading_authority_script_number", const.pbs_script_types[script_item!fk_pbs_script_type] & " SCRIPT NO. " & script_item!authority_script_number) 
   templ.Subst("patientaddress", Trim(currentconsult!patient!street1 & " " & currentconsult!patient!street2) & " " & currentconsult!patient!town & " " & currentconsult!patient!postcode)
   templ.Subst("medicarenumber", currentconsult!patient!medicare_number)
   templ.Subst("doctorname", modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename)
   templ.Subst("prescribernumber", modDBConnect.currentUser!prescriber_number)
   templ.Subst("patientname", currentconsult!patient!title & " " & currentconsult!patient!firstname & " " & currentconsult!patient!surname)
   templ.Subst("script_date", Format(script_item!date_script_written, "dd/mm/yyyy"))
   templ.Subst("script_number", script_item!script_number)
   If InStr(script_item!pbs_print_status, "PBS") Then  
      templ.Subst("pbs_script", "X")
   Else
      templ.Checkbox("pbs_script", "")
   End If
   If InStr(script_item!pbs_print_status, "rpbs") Then   'and check against patients actual rpbs entitlements FIXME SHOULD DO THIS BACK IN PRESRIBING.
      templ.Subst("rpbs_script", "X")
   Else
      templ.Subst("rpbs_script", "")
   End If
   templ.Checkbox("previous_authority_yes_checkbox", True)
   templ.Checkbox("previous_authority_no_checkbox", False)
   Print script_item
   If script_item!authority_post_to_patient = True Then
      templ.Checkbox("sendtopatient_checkbox", True)
   Else
      templ.Checkbox("sendtopatient_checkbox", False)
   Endif
   templ.Subst("authority_script_number", Script_Item!authority_script_number)
   templ.Subst("authority_Indication", script_item!authority_indication)
   templ.Subst("authority_approval_number", script_item!authority_approval_number)
   templ.Subst("quantity_repeats", script_item!strength & " " & script_item!quantity & "'s Rpt " & script_item!repeats)
   templ.Subst_Drugs(script_item)
   Return templ
   
End 

Public Sub Drug_New()
   
   EditArea_Clear()
   Reset_Flags()
   'fixme put in option so that focus on either generic or brand
   'txtDrug.SetFocus()
   txtdate.text = Format(Now, "dd/mm/yyyy")
   chkActive.value = True
   Drug = New Collection
   EditArea_Notify_Data_Change(False)
   txtGeneric.SetFocus()
   
End

Public Sub cvwPrescriptions_Menu()
   
   If Last.count Then
      mnuPrescriptions.Popup()
   Endif
   
End

Public Sub cvwPrescriptions_Click()
   
   cvwPrescriptions.MoveCurrent
   iCurrentScriptKey = Last.item.key
   Try Print "Printed? " & script_items[Last.item.key]!printed
   
End

Public Sub mnuPrescriptions_Click()
   
   Dim fk_script_item As Integer 
   
   cvwPrescriptions.MoveCurrent()
   Select Case Last.tag
      Case "edit"
         Edit()
      Case "delete"
         Delete("single")
      Case "delete all"
         Delete("all")
      Case "undo delete"
         Delete_Undo()
      Case "print single" 
         '----------------------------------------------------------------
         'print (and or save) the highlighted item
         'as the entire list hasn't been printed, the resultant collection
         'must be slotted back into the script_items collection
         '-----------------------------------------------------------------
         fk_script_item = Drug_Save(script_items[cvwPrescriptions.Item.key]) 'saves to backend and commits
         'script_items.Remove(cvwPrescriptions.Item.key)
         script_items[cvwPrescriptions.Item.key] = modPrescribingDBI.Prescription_Written(fk_script_item)
         'script_items.Add(modPrescribingDBI.Prescription_Written(fk_script_item), cvwPrescriptions.Item.Key)
         script_items[cvwPrescriptions.Item.key]!printed = False  
         Drug_Print_Single(cvwPrescriptions.Item.key)       'prints a single script
         ' cvwPrescriptions[cvwPrescriptions.Item.key].Picture = pic_printed
      Case "print all"
      Case "brief pi"
      Case "full pi"
      Case "fonts"
         modUtil.Columnview_SetFont(cvwPrescriptions, "Prescriptions_" & Embedded_In_Form)
      Case "help"   
   End Select
   
End

Public Sub Drug_Print_Single(key As Integer)
   
   Dim items As New Collection
   
   items.Add(script_items[key], 0)
   Print_Script_Items(items)
   script_items[key]!printed = True 
   
End

Public Sub Authority_Increased_Quantity_Reason_Get()
   
   Dim reason As Collection
   
   With columnview1
      .Clear
      .Columns.count = 1
      .Columns[0].width = columnview1.Width
   End With
   If Not Trim(txtAuthorityWording.text) Then Return    
   Authority_Increased_Quantity_Reasons = modPrescribingDBI.Authority_Increased_Quantity_Reason_Get(Trim(txtAuthorityWording.text))
   If Authority_Increased_Quantity_Reasons.count > 0 Then 
      For Each reason In Authority_Increased_Quantity_Reasons
         columnview1.Add(reason!pk, 0)  
         columnview1[reason!pk][0] = reason!reason
      Next
      columnview1.tag = txtAuthorityWording
      pnlcolumnview.Visible = True 
   End If   
   
End

Public Sub Authority_Increased_Quantity_Reasons_Select()
   '--------------------------------------------------
   'User selecting a previously used authority wording
   '--------------------------------------------------
   
   columnview1.MoveCurrent
   bExit = True   
   txtAuthorityWording.text = Authority_Increased_Quantity_Reasons[columnview1.item.key]  
   pnlcolumnview.Visible = False 
   bexit = False  
   tbOk.SetFocus()
   
End

Public Sub HSplit_EditArea_Inner_Resize()
   
   If pnlcolumnview.Visible Then
      pnlcolumnview.width = txtAuthorityWording.Width
   Endif
   
End
