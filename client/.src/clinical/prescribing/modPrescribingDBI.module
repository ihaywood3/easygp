' Gambas module file
' Gambas class file
' Copyright (C) 2008,2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------

Public Function Brands_Get(brand As String) As Collection 
   
   Return modDBConnect.exec_query_collection("Select * from drugs.vwBrands where brand ILIKE $$%" & brand & "%$$  ORDER by brand, form, strength")
   
End

Public Function Generics_Get(generic As String) As Collection 
   
   Return modDBConnect.exec_query_collection("Select * from drugs.vwDrugs where generic ILIKE $$%" & generic & "%$$ ORDER by pbscode")
   
End

Public Function Save_Drug_Pattern(Pattern As Collection) As Integer
   
   Return modDBConnect.insert("clin_prescribing.rxDetails", Pattern)
   
End

Public Function Instruction_Get_PK(instruction As String) As Integer
   '--------------------------------------------------------------------
   'Returns primary key for an instruction, creating new if dosn't exist
   '--------------------------------------------------------------------  
   
   Dim r As Result
   
   r = modDBConnect.exec_query("Select * from clin_prescribing.instructions where instruction ILIKE $$" & instruction & "$$")
   If r.count Then Return r!pk
   Return modDBConnect.insert("clin_prescribing.instructions", ["instruction": instruction])    
   
End

Public Function PrescribedFor_Get_PK(prescribed_for As String) As Integer
   '--------------------------------------------------------------------
   'Returns primary key for an instruction, creating new if dosn't exist
   '--------------------------------------------------------------------      
   
   Dim r As Result
   
   r = modDBConnect.exec_query("Select * from clin_prescribing.prescribed_for where prescribed_for ILIKE $$" & prescribed_for & "$$")
   If r.count Then Return r!pk
   Return modDBConnect.insert("clin_prescribing.prescribed_for", ["prescribed_for": prescribed_for])    
   
End

Public Function Instructions_Save_Habit(new_data As Collection)
   '-------------------------------------
   'Save the habits for this staff member
   '-------------------------------------
   
   Dim habit As New Collection 
   Dim r As Result
   Dim sql As String = "Select weighting from clin_prescribing.instruction_habits"
   
   sql &= " WHERE fk_staff = " & modDBConnect.currentUser!fk_staff 
   sql &= " AND fk_generic_product = " & new_data!fk_generic_product
   If new_data!fk_company Then
      sql &= " AND fk_company = $$" & new_data!fk_company & "$$"
   Endif
   sql &= " AND fk_instruction =" & new_data!fk_instruction
   r = modDBConnect.exec_query(sql)
   If r.count Then
      '  modDBConnect.update("clin_prescribing.instruction_habits", ["pk": r!pk, "weighting": r!weighting + 1])
   Else
      habit!fk_instruction = new_data!fk_instruction
      habit!fk_company = new_data!fk_company
      habit!fk_generic_product = new_data!fk_generic_product
      habit!fk_staff = modDBConnect.currentUser!fk_staff  
      habit!weighting = 1
      modDBConnect.insert("clin_prescribing.instruction_habits", habit)
   Endif
   Return 
   
End 

Public Function Prescribed_For_Save_Habit(new_data As Collection)
   '-------------------------------------
   'Save the habits for this staff member
   '-------------------------------------
   
   Dim habit As New Collection 
   Dim r As Result
   Dim sql As String = "Select weighting from clin_prescribing.prescribed_for_habits"
   
   sql &= " WHERE fk_staff = " & modDBConnect.currentUser!fk_staff 
   sql &= " AND fk_generic_product = " & new_data!fk_generic_product
   If new_data!fk_company Then
      sql &= " AND fk_company = $$" & new_data!fk_company & "$$"
   Endif
   sql &= " AND fk_prescribed_for =" & new_data!fk_prescribed_for
   r = modDBConnect.exec_query(sql)
   If r.count Then
      '  modDBConnect.update("clin_prescribing.prescribed_for_habits", ["pk": r!pk, "weighting": r!weighting + 1])
   Else
      habit!fk_prescribed_for = new_data!fk_prescribed_for
      habit!fk_company = new_data!fk_company
      habit!fk_generic_product = new_data!fk_generic_product
      habit!fk_staff = modDBConnect.currentUser!fk_staff  
      habit!weighting = 1
      modDBConnect.insert("clin_prescribing.prescribed_for_habits", habit)
   Endif
   Return 
   
End 

Public Function Script_Number_Get_Next() As Integer
   
   Return modDBConnect.exec_query("select script_number from clin_prescribing.script_numbers")!script_number + 1
   
End

Public Function Script_Number_Save(script_number As Integer)
   
   modDBConnect.update("clin_prescribing.script_numbers", ["pk": 1, "script_number": script_number - 1], ["pk": 1, "script_number": script_number])
   
End

Public Function Authority_Number_Get_Next() As Integer
   
   Return modDBConnect.exec_query("select authority_number from clin_prescribing.script_numbers")!authority_number + 11
   
End

Public Function Authority_Number_Save(authority_number As Integer)
   
   modDBConnect.update("clin_prescribing.script_numbers", ["pk": 1, "authority_number": authority_number - 11], ["pk": 1, "authority_number": authority_number])
   
End

Public Function Save(old_data As Collection, fk_script_item As Integer, script_item As Collection, fk_medication As Integer, medication As Collection) As Boolean
   'Ian to parse the instructions to create rest of fields for instructions table
   
   Dim script_dates As New Collection
   Dim R As Recordset
   '------------------------------------------------------------------------------------------------------ 
   'Add new instruction or what prescibed for doesn't exist insert, otherwise get the pk
   'FIXME: try and find way to auto-code prescibed for
   '------------------------------------------------------------------------------------------------------
   medication!fk_instruction = Instruction_Get_PK(medication!instruction)
   medication!fk_prescribed_for = PrescribedFor_Get_Pk(medication!prescribed_for)
   medication.Remove("instruction")
   medication.Remove("prescribed_for")
   
   Instructions_Save_Habit(medication)
   Prescribed_For_Save_Habit(medication)
   '------------------------------------------------
   'First save or update the core medication details
   '------------------------------------------------
   If fk_medication = 0 Then
      
      '------------------------------------------------------------- 
      'Has this medication been prescribed before? in this exact way
      '-------------------------------------------------------------
      If Previously_Prescribed(medication)!count Then  'returns recordset of an existing medication
         '---------------------------------------------- 
         'New medication, has no start/end dates, so add
         '----------------------------------------------
         medication!fk_script_dates = R!fk_script_dates
         script_dates!last_date = script_item!script_date
      Else
         script_dates!start_date = script_item!script_date
         script_dates!last_date = script_item!script_date
         medication!fk_script_dates = modDBConnect.insert("clin_prescribing.item_start_last_dates", script_dates)
         script_item!fk_medication = modDBConnect.insert("clin_prescribing.medications", medication)
      End If
   Else
      
   Endif
   If fk_script_item = 0 Then
      
      script_item!fk_script_item = modDBConnect.insert("clin_prescribing.prescribed", script_item)
   Else
      modDBConnect.update("clin_prescribing.prescribed", old_data[fk_script_item], script_item, "fk_script_item")
   Endif
   Return script_item!fk_script_item 
   
End

Public Function Medications_Get(fk_patient As Integer) As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clin_prescribing.vwMedications WHERE fk_patient=" & fk_patient & " AND medication_deleted = False")
   
End

Public Function Prescriptions_Written_This_Consult(fk_consult As Integer) As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clin_prescribing.vwPrescribedItems where fk_consult = " & fk_consult & " AND prescribed_item_deleted = FALSE and medication_deleted = False")
   
End

Public Function Previously_Prescibed(m) As Integer
   '--------------------------------------------------------------------
   'Checks for an **exact** pattern match with current active medication 
   'or past inactive medications, and returns fk_medication if exists
   '
   '   fk_generic_product integer NOT NULL, -- fk to drugs.products gives generic name, atc, strengh and formulation
   '   fk_company integer not null   '    character varying(3) DEFAULT NULL::character varying, -- if not null, then this drug is a brand, ie ...
   '   repeats integer NOT NULL, -- The actual number of repeats...
   '   quantity integer NOT NULL, -- The quantity on the script...
   '   fk_instruction integer NOT NULL,
   '   fk_prescribed_for integer,
   '   fk_script_dates integer NOT NULL,
   '   pbscode text NOT NULL,
   '   fk_print_status integer NOT NULL,
   '   restriction_code text,
   '   s8 boolean DEFAULT false,
   '   active boolean DEFAULT false, -- If true, the medication is on the patients...
   '   deleted boolean DEFAULT false,
   '   suppress_reason boolean,
   
   '-------------------------------------------------------------
   Dim sql As String
   Dim existing_med As Collection
   'fixme also  Return fk_script_dates
   sql = "Select * from " & currentconsult!patient!fk_patient & " AND " 
   sql &= "fk_generic_product = " & m!fk_generic_product 
   sql &= " AND  fk_company= " & m!fk_company 
   sql &= " AND  repeats= " & m!repeats
   sql &= " AND  quantity=" & m!quantity
   sql &= " AND  fk_instruction =" & m! 
   sql &= " AND  fk_prescribed_for = " & m!fk_prescribed_for 
   sql &= " AND  pbscode= " & m!pbscode
   sql &= " AND  fk_print_status = " & m!fk_print_status
   sql &= " AND  restriction_code= " & m!restriction_code 
   'FIXME PUT IN S8 WHEN SORT OUT WHERE TO FIND THIS
   sql &= " AND  = delete = False" 
   existing_med = modDBConnect.exec_query_collection(sql)
   Return existing_med   
End

Public Function ConvertTo5mls(strength As String) As String
   ' converts a strength expression into "per 5 mls" For user convience
   ' for example 0.4mg/ml becomes 2mg/5ml
   ' other forms don't change
   
   Dim array1 As String[]
   Dim array2 As New String[]
   Dim i As String
   Dim a As Float
   Dim re As New Regexp
   
   re.Compile("^([0-9.]+)([a-z]+)/ml$")
   array1 = Split(strength, "-") ' split into compound strengths
   For Each i In array1
      re.Exec(i)
      If re.Offset <> -1 Then
         If IsFloat(re.SubMatches[1].Text) Then
            a = CFloat(re.SubMatches[1].Text) ' extract float amount
            a *= 5 ' multiply by 5
            i = a & re.SubMatches[2].Text & "/5ml"
         Endif
      Endif
      array2.Add(i)
   Next
   Return array2.Join("-") ' reconstruct the compound strength
   
End
