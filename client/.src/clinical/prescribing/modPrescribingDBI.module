' Gambas module file
' Gambas class file
' Copyright (C) 2008,2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------

Public Function Brands_Get(brand As String) As Collection 
  
  Return modDBConnect.exec_query_collection("Select * from drugs.vwBrands where brand ILIKE $$%" & brand & "%$$  ORDER by brand, form, strength")
  
End

Public Function Generics_Get(generic As String) As Collection 
  
  Return modDBConnect.exec_query_collection("Select * from drugs.vwDrugs where generic ILIKE $$%" & generic & "%$$ ORDER by pbscode")
  
End

Public Function Save_Drug_Pattern(Pattern As Collection) As Integer
   Return modDBConnect.insert("clin_prescribing.rxDetails", Pattern)
  
  
End

Public Function Instruction_Get_PK(instruction As String) As Integer
   '--------------------------------------------------------------------
   'Returns primary key for an instruction, creating new if dosn't exist
   '--------------------------------------------------------------------  
   Dim r As Result
   
   r = modDBConnect.exec_query("Select * from clin_prescribing.instructions where instruction ILIKE $$" & instruction & "$$")
   If r.count Then Return r!pk
   Return modDBConnect.insert("clin_prescribing.instructions", ["instruction": instruction])    
End

Public Function PrescribedFor_Get_PK(prescribed_for As String) As Integer
   '--------------------------------------------------------------------
   'Returns primary key for an instruction, creating new if dosn't exist
   '--------------------------------------------------------------------      
   Dim r As Result
   
   r = modDBConnect.exec_query("Select * from clin_prescribing.prescribed_for where prescribed_for ILIKE $$" & prescribed_for & "$$")
   If r.count Then Return r!pk
   Return modDBConnect.insert("clin_prescribing.prescribed_for", ["prescribed_for": prescribed_for])    
End

Public Function Instructions_Save_Habit(new_data As Collection)
  '-------------------------------------
  'Save the habits for this staff member
  '-------------------------------------

  Dim habit As New Collection 
  Dim r As Result
  Dim sql As String = "Select weighting from clin_prescribing.instruction_habits"
  
  sql &= " WHERE fk_staff = " & modDBConnect.currentUser!fk_staff 
  sql &= " AND fk_generic_product = " & new_data!fk_generic_product
  If new_data!fk_company Then
    sql &= " AND fk_company = $$" & new_data!fk_company & "$$"
  Endif
  sql &= " AND fk_instruction =" & new_data!fk_instruction
  r = modDBConnect.exec_query(sql)
  If r.count Then
     '  modDBConnect.update("clin_prescribing.instruction_habits", ["pk": r!pk, "weighting": r!weighting + 1])
  Else
      habit!fk_instruction = new_data!fk_instruction
      habit!fk_company = new_data!fk_company
      habit!fk_generic_product = new_data!fk_generic_product
      habit!fk_staff = modDBConnect.currentUser!fk_staff  
      habit!weighting = 1
      modDBConnect.insert("clin_prescribing.instruction_habits", habit)
  Endif
  Return 
End 

Public Function Prescribed_For_Save_Habit(new_data As Collection)
  '-------------------------------------
  'Save the habits for this staff member
  '-------------------------------------

  Dim habit As New Collection 
  Dim r As Result
  Dim sql As String = "Select weighting from clin_prescribing.prescribed_for_habits"
  
  sql &= " WHERE fk_staff = " & modDBConnect.currentUser!fk_staff 
  sql &= " AND fk_generic_product = " & new_data!fk_generic_product
  If new_data!fk_company Then
    sql &= " AND fk_company = $$" & new_data!fk_company & "$$"
  Endif
  sql &= " AND fk_prescribed_for =" & new_data!fk_prescribed_for
  r = modDBConnect.exec_query(sql)
  If r.count Then
     '  modDBConnect.update("clin_prescribing.prescribed_for_habits", ["pk": r!pk, "weighting": r!weighting + 1])
  Else
      habit!fk_prescribed_for = new_data!fk_prescribed_for
      habit!fk_company = new_data!fk_company
      habit!fk_generic_product = new_data!fk_generic_product
      habit!fk_staff = modDBConnect.currentUser!fk_staff  
      habit!weighting = 1
      modDBConnect.insert("clin_prescribing.prescribed_for_habits", habit)
  Endif
  Return 
End 

Public Function Script_Number_Get_Next() As Integer
  
   
   Return modDBConnect.exec_query("select script_number from clin_prescribing.script_numbers")!script_number + 1
  
End

Public Function Script_Number_Save(script_number As Integer)
  
    modDBConnect.update("clin_prescribing.script_numbers", ["pk": 1, "script_number": script_number - 1], ["pk": 1, "script_number": script_number])
    
  
End

Public Function Authority_Number_Get_Next() As Integer
  
   
   Return modDBConnect.exec_query("select authority_number from clin_prescribing.script_numbers")!authority_number + 11
  
End

Public Function Authority_Number_Save(authority_number As Integer)
  
    modDBConnect.update("clin_prescribing.script_numbers", ["pk": 1, "authority_number": authority_number - 11], ["pk": 1, "authority_number": authority_number])
    
  
End

Public Function Save(old_data As Collection, fk_script_item As Integer, new_data As Collection) As Boolean
   'Ian to parse the instructions to create rest of fields for instructions table
   Dim script_dates As New Collection
  '------------------------------------------------------------------------------------------------------ 
  'Add new instruction or what prescibed for doesn't exist insert, otherwise get the pk
  'FIXME: try and find way to auto-code prescibed for
  '------------------------------------------------------------------------------------------------------
  new_data!fk_instruction = Instruction_Get_PK(new_data!instruction)
  new_data!fk_prescribed_for = PrescribedFor_Get_Pk(new_data!prescribed_for)
  new_data.Remove("instruction")
  new_data.Remove("prescribed_for")

  Instructions_Save_Habit(new_data)
  Prescribed_For_Save_Habit(new_data)
  If fk_script_item = 0 Then
     script_dates!start_date = new_data!script_date
     script_dates!last_date = new_data!script_date
     new_data!fk_script_dates = modDBConnect.insert("clin_prescribing.item_start_last_dates", script_dates)
     
     new_data!fk_script_item = modDBConnect.insert("clin_prescribing.items_prescribed", new_data)
  Else
      modDBConnect.update("clin_prescribing.items_prescribed", old_data[fk_script_item], new_data, "fk_script_item")
  Endif
  Return new_data!fk_script_item 
End

Public Function Medications_Get(fk_patient As Integer) As Collection

   Return modDBConnect.exec_query_collection("Select * from clin_prescribing.vwMedications WHERE fk_patient=" & fk_patient & " AND deleted = False")

  
End

Public Function Prescriptions_Written_This_Consult(fk_consult As Integer) As Collection
  
   Return modDBConnect.exec_query_collection("Select * from clin_prescribing.vwMedications where fk_consult = " & fk_consult)
  
End

Public Function ConvertTo5mls(strength As String) As String
   ' converts a strength expression into "per 5 mls" For user convience
   ' for example 0.4mg/ml becomes 2mg/5ml
   ' other forms don't change
  Dim array1 As String[]
  Dim array2 As New String[]
  Dim i As String
  Dim a As Float
  Dim re As New Regexp
  
  re.Compile("^([0-9.]+)([a-z]+)/ml$")
  array1 = Split(strength, "-") ' split into compound strengths
  For Each i In array1
    re.Exec(i)
    If re.Offset <> -1 Then
      If IsFloat(re.SubMatches[1].Text) Then
        a = CFloat(re.SubMatches[1].Text) ' extract float amount
        a *= 5 ' multiply by 5
        i = a & re.SubMatches[2].Text & "/5ml"
      Endif
    Endif
    array2.Add(i)
  Next
  Return array2.Join("-") ' reconstruct the compound strength
End


