' Gambas module file

' Gambas class file
' Copyright (C) 2008,2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
Public Function Formulations_Get(formulation As String) As Collection
   
  Return modDBConnect.exec_query_collection("Select * from drugs.form WHERE form ILIKE $$%" & formulation & "%$$ ORDER BY form") 
   
End

Public Function Brands_Get_RT(brand As String) As Collection
   
     Dim sql As String
     
     sql = "Select * from drugs.vwDrugs where brand ILIKE $$%" & brand & "%$$ AND chapter = 'GE' or   brand ILIKE $$%" & brand & "%$$ AND chapter = 'R1'  ORDER BY brand"
     Return modDBConnect.exec_query_collection(sql)
  
   
End

Public Function Brands_Get(brand As String) As Collection
   
    Return modDBConnect.exec_query_collection("Select * from drugs.vwDistinctBrandsForGenericProduct where brand ILIKE $$%" & brand & "%$$ ORDER by brand")
    
End


Public Function Generics_Get(generic As String) As Collection 
   
   Return modDBConnect.exec_query_collection("Select * from drugs.vwDrugs where generic ILIKE $$%" & generic & "%$$ ORDER by pbscode")
   
End

Public Function Instruction_Get_PK(instruction As String) As Integer
   '--------------------------------------------------------------------
   'Returns primary key for an instruction, creating new if dosn't exist
   '-------------------------------------------------------------------- CRow 
   
   Dim r As Result
   
   r = modDBConnect.exec_query("Select pk from clin_prescribing.instructions where instruction ILIKE $$" & instruction & "$$")
   If r.count Then Return r!pk
   Return modDBConnect.insert("clin_prescribing.instructions", ["instruction": Lower(instruction)])    
   
End

Public Function PrescribedFor_Get_PK(prescribed_for As String) As Integer
   '--------------------------------------------------------------------
   'Returns primary key for an instruction, creating new if dosn't exist
   '--------------------------------------------------------------------      
   
   Dim r As Result
   
   r = modDBConnect.exec_query("Select pk from clin_prescribing.prescribed_for where prescribed_for ILIKE $$" & prescribed_for & "$$")
   If r.count Then Return r!pk
   Return modDBConnect.insert("clin_prescribing.prescribed_for", ["prescribed_for": Lower(prescribed_for)])    
   
End

Public Function Instructions_Save_Habit(new_data As Collection) As Integer
   '-------------------------------------
   'Save the habits for this staff member
   '-------------------------------------
   
   Dim habit As New Collection 
   Dim r As Result
   Dim sql As String = "Select pk, weighting from clin_prescribing.instruction_habits"
   
   sql &= " WHERE fk_staff = " & modDBConnect.currentUser!fk_staff 
   sql &= " AND fk_generic_product =$$" & new_data!med!fk_generic_product & "$$"
  ' If new_data!fk_company Then
  '    sql &= " AND fk_company = $$" & new_data!fk_company & "$$"
 '  Endif
   sql &= " AND fk_instruction =" & new_data!med!fk_instruction
   r = modDBConnect.exec_query(sql)
   If r.count Then
      modDBConnect.update("clin_prescribing.instruction_habits", Null, ["pk": r!pk, "weighting": r!weighting + 1])
   Else
      habit!fk_instruction = new_data!med!fk_instruction
     ' habit!fk_company = new_data!fk_company
      habit!fk_generic_product = new_data!med!fk_generic_product
      habit!fk_staff = modDBConnect.currentUser!fk_staff  
      habit!weighting = 1
      habit!pk = modDBConnect.insert("clin_prescribing.instruction_habits", habit)
   Endif
   Try Return habit!pk
   If Error Then Return 1
   
End 

Public Function Prescribed_For_Save_Habit(new_data As Collection) As Integer
   '-------------------------------------
   'Save the habits for this staff member
   '-------------------------------------
   
   Dim habit As New Collection 
   Dim r As Result
   Dim sql As String = "Select pk, weighting from clin_prescribing.prescribed_for_habits"
   
   sql &= " WHERE fk_staff = " & modDBConnect.currentUser!fk_staff 
   sql &= " AND fk_generic_product = $$" & new_data!med!fk_generic_product & "$$"
 '  If new_data!fk_company Then
  '    sql &= " AND fk_company = $$" & new_data!fk_company & "$$"
  ' Endif
   sql &= " AND fk_prescribed_for =" & new_data!med!fk_prescribed_for
   r = modDBConnect.exec_query(sql)
   If r.count Then
      modDBConnect.update("clin_prescribing.prescribed_for_habits", Null, ["pk": r!pk, "weighting": r!weighting + 1])
   Else
      habit!fk_prescribed_for = new_data!med!fk_prescribed_for
     ' habit!fk_company = new_data!fk_company
      habit!fk_generic_product = new_data!med!fk_generic_product
      habit!fk_staff = modDBConnect.currentUser!fk_staff  
      habit!weighting = 1
      habit!pk = modDBConnect.insert("clin_prescribing.prescribed_for_habits", habit)
   Endif
   Try Return habit!pk
   If Error Then Return 1
   
End 

Public Function Script_Number_Get_Next() As Integer
   
   Return modDBConnect.exec_query("Select nextval('clin_prescribing.script_number')")!nextval
   
End

Public Function Authority_Number_Get_Next() As Integer
   
   Return modDBConnect.exec_query("Select nextval('clin_prescribing.authority_number')")!nextval

End

Public Function Authority_Increased_Quantity_Reason_Get(reason As String) As Collection
   '--------------------------------------------------------------------------------------------------
   'Returns a collection of wording e.g 'chronic disabling pain not responding to non-narcotics < 12M'
   '--------------------------------------------------------------------------------------------------

   Return modDBConnect.exec_query_collection("select * from clin_prescribing.increased_quantity_authority_reasons where reason ILIKE $$%" & reason & "%$$ ORDER BY reason")
   
End

Public Sub Authority_Increased_Qantity_Get_PK(reason As String) As Integer
   '--------------------------------------------------------------------------------------
   'Returns primary key for an reason for increased quantity authority, creating new if dosn't exist
   '---------------------------------------------------------------------------------------  
   
   Dim r As Result
   
   r = modDBConnect.exec_query("Select pk from clin_prescribing.increased_quantity_authority_reasons where reason ILIKE $$" & reason & "$$")
   If r.count Then Return r!pk
   Return modDBConnect.insert("clin_prescribing.increased_quantity_authority_reasons", ["reason": Lower(reason)])    
   
End

Public Function Save(fk_patient As Integer, old_data As Collection, script_item As Collection, medication As Collection) As Integer
   'Ian to parse the instructions to create rest of fields for instructions table
   
   Dim script_dates As New Collection
   Dim script_dates_old As New Collection
   
   Dim R As Result
   '------------------------------------------------------------------------------------------------------ 
   'Add new instruction or what prescibed for if it  doesn't exist insert, otherwise get the pk
   'Not despite the fact we could have got the pk from the backend, in fact usually will have for these
   'fields, after these have been chosen, the user could have edited the line, so it is safest and quickest
   'to just check if the text exists in the backend and get the key or create a new one. The alternate
   'would have been to keep a track of this in the editing area and prompt the user, however this would
   'often cause modal interuption which is a pain.
   '------------------------------------------------------------------------------------------------------
   medication!fk_instruction = Instruction_Get_PK(medication!instruction)
   medication!fk_prescribed_for = PrescribedFor_Get_Pk(medication!prescribed_for)
   medication.Remove("instruction")
   medication.Remove("prescribed_for")
   Instructions_Save_Habit(medication)
   Prescribed_For_Save_Habit(medication)
   '-----------------------------------------------------------------------------------------------
   'Next, for increased quantities for authority - ditto as above, save or get key for same reasons
   '-----------------------------------------------------------------------------------------------
   If medication!fk_pbs_script_type = const.pbs_script_type_pbs_authority_increased_quantity Then
      medication!fk_increased_quantity_authority_reason = Authority_Increased_Qantity_Get_PK(medication!authority_indication)
   Endif
   Try medication.Remove("authority_indication")
   '------------------------------------------------
   'First save or update the core medication details
   '------------------------------------------------
   If IsNull(medication!fk_medication) Then
      '--------------------------------------------------------------------------- 
      'Has this medication been prescribed before? in this exact way
      'For example user could have just re-prescibed de-novo from the editing area
      '---------------------------------------------------------------------------
      R = Previously_Prescribed(fk_patient, medication)   'returns recordset of an existing medication
      If R.count Then  
         '------------------------------------------------------------------------------- 
         'yes, it exists, so don't need to create a new record, just update its last date
         '-------------------------------------------------------------------------------
         medication!fk_script_dates = R!fk_script_dates
         script_dates_old!pk = r!fk_script_dates
         script_dates_old!last_date = r!last_date
         script_dates!last_date = script_item!script_date
         modDBConnect.update("clin_prescribing.item_start_last_dates", script_dates_old, script_dates)
         script_item!fk_medication = R!fk_medication              'link current script to existing medication key
      Else
         '----------------------------------------------------
         'New medication, has no start/end date record, so add
         '----------------------------------------------------
         script_dates!start_date = script_item!date_on_script
         script_dates!last_date = script_item!date_on_script
         medication!fk_script_dates = modDBConnect.insert("clin_prescribing.item_start_last_dates", script_dates)
         script_item!fk_medication = modDBConnect.insert("clin_prescribing.medications", medication)
      End If
   Else
      '-----------------------------------------------------------------
      'prescribing from the medications list? or editing and re-printing
      '-----------------------------------------------------------------
      modDBConnect.update("clin_prescribing.medications", old_data, medication, "fk_medication")   
   Endif
   
   If IsNull(script_item!fk_item_prescribed) Then
      script_item!fk_item_prescribed = modDBConnect.insert("clin_prescribing.prescribed", script_item)
   Else
      modDBConnect.update("clin_prescribing.prescribed", old_data, script_item, "fk_item_prescribed")
   Endif
   Return script_item!fk_item_prescribed 
   
End

Public Function Medication_Delete(currentconsult As CConsult, medications As Collection, fk_medication As Integer, fk_section As Integer, audit_action As String, audit_notes As String) As Boolean
   '--------------------------------------------------------------------------------------  
   'Marks as deleted a current medication laying down audit trail, returns true if succeeds
   '--------------------------------------------------------------------------------------
   
   modDBConnect.exec_query("Update clin_prescribing.medications set deleted = True where pk = " & fk_medication)
   If modAudit.MakeAudit(currentconsult, audit_action, "clin_prescribing.medications", fk_medication, fk_section, audit_notes) Then 
      Return True
   End If   
   Return False
   
End

Public Function Medications_Get(fk_patient As Integer) As Collection
   
   Return modDBConnect.exec_query_row("Select * from clin_prescribing.vwMedications WHERE fk_patient=" & fk_patient)
   
End

Public Function Prescription_Written(fk_item_prescribed As Integer) As Collection
   '-------------------------------------------------
   'Returns a collection for a single drug prescribed 
   '-------------------------------------------------

   Return modDBConnect.exec_query_first("Select * from clin_prescribing.vwPrescribedItems where fk_item_prescribed = " & fk_item_prescribed)
   
End

Public Function Prescriptions_Written_This_Consult(fk_consult As Integer) As Collection
   '-----------------------------------------------------------------------------
   'Returns collection of all the drugs prescribed during the current consulation
   '-----------------------------------------------------------------------------
   
   Dim prescribeds As Collection
   Dim result As New Collection
   Dim i As CRow
   Dim c As Collection
   
   prescribeds = modDBConnect.exec_query_row("Select * from clin_prescribing.prescribed where fk_consult = &1 AND not deleted", [fk_consult])
   For Each i In prescribeds
     c = New Collection
     c!prescribed = i
     c!med = New CRow(modDBConnect.exec_query_first("select * from clin_prescribing.vwmedications where pk_view = " & i!fk_medication))
     c!pbs_script_type = c!med!pbs_script_type
     c!date_script_written = c!med!date_script_written
     c!generic = c!med!generic
     c!strength = c!med!strength
     c!product_information_filename = c!med!product_information_filename
     c!form = c!med!form
     c!brand = c!med!brand
     c!instruction = c!med!instruction
     c!prescribed_for = c!med!prescribed_for
     result.Add(c, i!pk) 
      
   Next
   Return result
End

Public Function Previously_Prescribed(fk_patient As Integer, M As Collection) As Result
   '--------------------------------------------------------------------
   'Checks for an **exact** pattern match with current active medication 
   'or past inactive medications, and returns fk_medication if exists
   '
   '   fk_generic_product integer NOT NULL, -- fk to drugs.products gives generic name, atc, strengh and formulation
   '   fk_company integer not null   '    character varying(3) DEFAULT NULL::character varying, -- if not null, then this drug is a brand, ie ...
   '   repeats integer NOT NULL, -- The actual number of repeats...
   '   quantity integer NOT NULL, -- The quantity on the script...
   '   fk_instruction integer NOT NULL,
   '   fk_prescribed_for integer,
   '   fk_script_dates integer NOT NULL,
   '   pbscode text NOT NULL,
   '   fk_print_status integer NOT NULL,
   '   restriction_code text,
   '   s8 boolean DEFAULT false,
   '   active boolean DEFAULT false, -- If true, the medication is on the patients...
   '   deleted boolean DEFAULT false,Integer
   '   suppress_reason boolean,
   
   '-------------------------------------------------------------
   Dim sql As String
   Dim R As Result 
   'fixme also  Return fk_script_dates
   sql = "Select * from clin_prescribing.vwMedications Where fk_patient = " & fk_patient & " AND " 
   sql &= "fk_generic_product = " & m!fk_generic_product 
   sql &= " AND  fk_company= $$" & m!fk_company & "$$"
   sql &= " AND  repeats= " & m!repeats
   sql &= " AND  quantity=" & m!quantity
   sql &= " AND  fk_instruction =" & m!fk_instruction
   sql &= " AND  fk_prescribed_for = " & m!fk_prescribed_for 
   sql &= " AND  pbscode= $$" & m!pbscode & "$$"
   sql &= " AND  fk_pbs_script_type = " & m!fk_pbs_script_type
   sql &= " AND  restriction_code= $$" & m!restriction_code & "$$" 
   sql &= " AND medication_deleted = False   "
   R = modDBConnect.exec_query(sql)
   Return R
   
End

Public Function Brands_For_Generic_Get(generic As String, fk_product As String) As Collection 
   'FIX THIS IAN SAYS IF SEARCH ON FK_PRODUCT DON'T NEED TO SEARHC ON GENERIC.
   Return modDBConnect.exec_query_collection("Select * from drugs.vwDistinctBrandsForGenericProduct where generic = $$" & generic & "$$ AND fk_product =$$" & fk_product & "$$ order by brand")
   
End

Public Function Instruction_Habits_Get(fk_generic_product As String) As Collection 
   
   Return modDBConnect.exec_query_collection("Select * from clin_prescribing.vwInstructionHabits where fk_generic_product = $$" & fk_generic_product & "$$ And fk_staff = " & modDbconnect.currentuser!fk_staff)
   
End

Public Function PrescribedFor_Habits_Get(fk_generic_product As String) As Collection 
   
   Return modDBConnect.exec_query_collection("Select * from clin_prescribing.vwPrescribedForHabits where fk_generic_product = $$" & fk_generic_product & "$$ And fk_staff = " & modDbconnect.currentuser!fk_staff)
   
End

Public Function prescribed_for(txt As String) As Collection
   '---------------------------------------------------------------------
   'provides contents for popup list of what was prescribed for this drug
   '---------------------------------------------------------------------

   Return modDBConnect.exec_query_collection("Select * from clin_prescribing.prescribed_for where prescibed_for ILIKE $$%" & txt & "%$$ order by prescribed_for")
   
End

Public Function ConvertTo5mls(strength As String) As String
   ' converts a strength expression into "per 5 mls" For user convience
   ' for example 0.4mg/ml becomes 2mg/5ml
   ' other forms don't change
   
   Dim array1 As String[]
   Dim array2 As New String[]
   Dim i As String
   Dim a As Float
   Dim re As New Regexp
   
   re.Compile("^([0-9.]+)([a-z]+)/ml$")
   array1 = Split(strength, "-") ' split into compound strengths
   For Each i In array1
      re.Exec(i)
      If re.Offset <> -1 Then
         If IsFloat(re.SubMatches[1].Text) Then
            a = CFloat(re.SubMatches[1].Text) ' extract float amount
            a *= 5 ' multiply by 5
            i = a & re.SubMatches[2].Text & "/5ml"
         Endif
      Endif
      array2.Add(i)
   Next
   Return array2.Join("-") ' reconstruct the compound strength
   
End

Public Function Paeds_Calc(product As Collection, weight As Float) As String
   
   ' product: Collection that is a row from a query on the drug.product table
   ' weight: the child's weight, in kilograms
   ' returns: the computed paediatric dose
   ' for compounds based on the first strength in the compound
   
   Dim array1 As String[]
   Dim re As Regexp
   Dim strength, amount_unit As String
   Dim dose, num_strength As Float
   
   array1 = Split(product!strength, "-")
   strength = array1[0]
   dose = weight * product!paed_dose
   If dose > product!paed_max Then
      dose = product!paed_max
   Endif
   re = New Regexp(strength, "^([0-9.]+)[a-z]+/([a-z]+)$")
   If re.Offset = 0 Then
      ' we matched
      num_strength = CFloat(re.SubMatches[1].Text)
      amount_unit = re.SubMatches[2].Text
      dose /= num_strength
      If dose < 2 Then
         dose = Round(dose / num_strength, -1)
      Else
         dose = Round(dose)
      Endif
      Return dose & " " & amount_unit
   Else
      ' didn't match: not fluid
      re = New Regexp(strength, "^([0-9.]+)([a-z]+)")
      num_strength = CFloat(re.SubMatches[1].Text)
      amount_unit = re.SubMatches[2].Text
      If product!fk_form = 22 Then ' an injection: use raw units
         Return Round(dose) & amount_unit
      Else
         ' not injection: round to half a "thing"
         Return Round(dose * 2 / num_strength) / 2.0
      Endif
   Endif 

End
