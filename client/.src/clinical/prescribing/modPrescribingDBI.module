' Gambas module file

' Gambas class file
' Copyright (C)2008-2012 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------

Public Function Product_Check_Exists(atccode As String, generics As String, strength As String, fk_form As Integer) As String
   '--------------------------------------------------------------------------------------------------
   'Note that the term product in EasyGP is not that usually used - ie. a brand name of a drug
   'We use the term to mean a dispensable form of a generic drug including strength, package size etc'
   'This routine checks if this combination exists and returns the key to the product table if it does
   '--------------------------------------------------------------------------------------------------
   
   Dim sql As String
   Dim R As Result
   
   sql = "Select pk From drugs.product WHERE atccode = $$" & atccode & "$$ "
   sql &= "AND generic = $$" & generics & "$$ "
   sql &= " AND strength = $$" & strength & "$$ "
   sql &= " AND fk_form = " & fk_form
   R = modDBConnect.exec_query(sql)
   If R.count Then
      Return R!pk
   Else
      Return Null
   Endif
   
End

Public Function Product_Information_files_Get() As Collection
   
   Return modDBConnect.exec_query_collection("Select distinct filename as pk_view from drugs.product_information_files") 
   
End

Public Function Brand_Check_Exists(fk_product As String, brand As String) As String
   '--------------------------------------------------------------------------------------------------
   ' checks if a brand already exists.
   '--------------------------------------------------------------------------------------------------
   
   Dim sql As String
   Dim R As Result
   
   sql = "Select pk From drugs.brand WHERE fk_product = &1 and brand = &2"
   R = modDBConnect.exec_query(sql, [fk_product, brand])
   If R.count Then
      Return R!pk
   Else
      Return Null
   Endif
   
End

Public Sub Save_Pack(pack As Collection)
   
   ' FIXME: this solution assumes one and only ever one packsize for a product, obviously neds to be fixed
   modDBConnect.exec_query("delete from drugs.pack where fk_product = &1", [pack!fk_product])
   modDBConnect.exec_query("insert into drugs.pack (fk_product, amount, amount_unit, pack_size) values (&1, &2, &3, &4)", [pack!fk_product, pack!amount, pack!amount_unit, pack!pack_size])
   
End

Public Function Formulations_Get(formulation As String) As Collection
   
   Return modDBConnect.exec_query_collection("Select * from drugs.form WHERE form ILIKE $$%" & formulation & "%$$ ORDER BY form") 
   
End

Public Sub Brands_Get_For_Drug_Browser(brand As String) As Collection 
   
   Dim sql As String 
   
   sql = "Select distinct pk_view, fk_product, fk_company, brand, fk_brand, atccode, generic, fk_form, form, strength, amount, amount_unit, product_information_filename, "
   sql &= "atcname, quantity, max_rpt, fk_schedule "
   sql &= "From drugs.vwdrugs2 where brand ILIKE $$" & brand & "%$$  ORDER BY brand, generic, fk_form, strength ,max_rpt LIMIT 100" 
   
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Sub Brands_With_PDF_Get() As Collection
   '----------------------------------------------------------
   'Retrieves a collection of all brands with an allocated PDF
   '---------------------------------------------------------- 
   
   Return modDBConnect.exec_query_collection("Select distinct product_information_filename as pk_view from drugs.brand where product_information_filename is not null")
   
End

Public Function Brands_Get(brand As String, Optional chapters As String[], Optional limit As Variant = Null, Optional bInstrSearch As Boolean = False) As Collection
   '-------------------------------------------------------
   'Called by FDrugBrowser in which case chapters is null
   'or FPrescribing where it is never null
   'if bInstrSearch as true then an instring search is done
   '-----------------------------------------------------   
   
   Dim sql As String
   Dim first_chapter As Boolean = True
   Dim chapter As String
   
   sql = "Select * from drugs.vwDrugs WHERE brand ilike &1 "
   If bInstrSearch Then brand = "%" & brand
   brand &= "%"
   If Not IsNull(chapters) Then
      sql &= " and ("
      For Each chapter In chapters
         If first_chapter Then
            first_chapter = False
         Else
            sql &= " or "
         Endif
         sql &= "chapter = $$" & chapter & "$$ " 
      Next
      sql &= ")"
   Endif
   sql &= " OR brand ILIKE $$" & brand & "%$$ AND chapter is null " 'temporary fix to include drugs ian has sent without a chapter. 
   sql &= " ORDER BY brand, generic, fk_form, strength ,max_rpt"
   If Not IsNull(limit) Then sql &= " LIMIT " & limit
   Return modDBConnect.exec_query_collection(sql, [brand])
   
End

Public Function Brands_Get_Basic(brand As String) As Result
   
   Dim sql As String
   
   brand &= "%" 
   sql = "select distinct b.brand, p.atccode, p.generic from drugs.brand b, drugs.product p where "
   sql &= "b.fk_product = p.pk and b.brand ilike &1"
   Return modDBConnect.exec_query(sql, [brand])
   
End

Public Function Generics_Get_Basic(generic As String) As Result
   
   Dim sql As String
   
   generic &= "%" 
   sql = "select distinct atccode, generic from drugs.product where "
   sql &= "generic ilike &1"
   Return modDBConnect.exec_query(sql, [generic])
   
End

Public Function Chapters_Get() As Collection 
   '------------------------------------------------------------------
   'Used to allow users to set which drugs are exposed
   'Gets the pbs chapters used in FStaffPreferencesPrescribing
   ' "CS";"Section 100 (Chemotherapy Special Benefit)"
   ' "CT";"Section 100 (Chemotherapy Scheme)"
   ' "DB";"Doctor's Bag"
   ' "DS";"Dental (Special Pharmaceutical Benefits)"
   ' "DT";"Dental"
   ' "GE";"General"
   ' "GH";"Section 100 (Growth hormone)"
   ' "HB";"Section 100 (Highly Specialised Drugs) - Public Hospitals"
   ' "HS";"Section 100 (Highly specialised drugs)"
   ' "IF";"Section 100 (IVF/GIFT Treatment)"
   ' "MD";"Section 100 (Opiate Addiction Treatment)"
   ' "MF";"Section 100 (Botulinum Toxin Program)"
   ' "OT";"Optometrist"
   ' "PL";"Palliative care"
   ' "PQ";"Paraplegic/Quadriplegic"
   ' "R1";"Repatriation"
   ' "SB";"Special Pharmaceutical Benefits"
   ' "SY";"Section 100 (Special Authority Items) - Private Hospitals"
   ' "SZ";"Section 100 (Special Authority Items) - Public Hospitals"
   ' As of May 2012
   '------------------------------------------------------------------- 
   
   Return modDBConnect.exec_query_collection("Select chapter as pk, * from drugs.chapters order by chapter_name") 
   
End

Public Function ACT_Codes_Get(actname As String) As Collection
   
   Return modDBConnect.exec_query_collection("Select atccode as pk, * from drugs.atc where atcname ILIKE $$%" & actname & "%$$ order by atcname")
   
End

Public Function Schedules_Get() As Collection
   
   Return modDBConnect.exec_query_collection("Select * from  drugs.schedules") 'ORDER BY schedule") 
   
End

Public Function Drugs_Search_By_Generic(generic As String, Optional chapters As String[], Optional limit As Variant = Null, Optional bInstrSearch As Boolean = True) As Collection
   '------------------------------------------------------------------------------------
   'Returns a list of drugs and and all associated data by searching on the generic name
   'Generics defaults to an instring search, so many compound drugs.
   '------------------------------------------------------------------------------------   
   
   Dim sql As String
   Dim x As Integer
   Dim chapter As String
   
   sql = "Select * from drugs.vwDrugs " 
   If Not IsNull(chapters) Then
      SQL &= "WHERE "
      For Each chapter In chapters
         If x = 0 Then
            SQL &= " generic ILIKE $$"
            If bInstrSearch Then sql &= "%"
            sql &= generic & "%$$  AND chapter =$$" & chapter & "$$ " 
         Else
            sql &= "Or generic ILIKE $$"
            If bInstrSearch Then sql &= "%"
            sql &= generic & "%$$ And chapter  =$$" & chapter & "$$ " 
         End If
         
         Inc x
      Next
   Endif
   sql &= "Or generic ILIKE $$"             'always search for non pbs drugs
   If bInstrSearch Then sql &= "%"
   sql &= generic & "%$$ And chapter is NULL "
   sql &= " ORDER BY  generic ASC, fk_form, strength DESC,max_rpt"
   If Not IsNull(limit) Then sql &= " LIMIT " & limit
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Sub Generic_Names_Get(generic As String) As Collection
   '--------------------------------------------------------------------------------
   'Returns a list of generic names of drugs from the product table, not the vwDrugs
   '--------------------------------------------------------------------------------
   
   Return modDbconnect.exec_query_collection("Select * from drugs.product where generic ILIKE $$%" & Trim(generic) & "%$$ ORDER BY generic")
   
End

Public Function Instruction_Get_PK(instruction As String) As Integer
   '--------------------------------------------------------------------
   'Returns primary key for an instruction, creating new if dosn't exist
   '-------------------------------------------------------------------- CRow 
   
   Dim r As Result
   
   r = modDBConnect.exec_query("Select pk from clin_prescribing.instructions where instruction ILIKE $$" & instruction & "$$")
   If r.count Then Return r!pk
   Return modDBConnect.insert("clin_prescribing.instructions", ["instruction": Lower(instruction)])    
   
End

Public Function PrescribedFor_Get_PK(prescribed_for As String) As Integer
   '--------------------------------------------------------------------
   'Returns primary key for an instruction, creating new if dosn't exist
   '--------------------------------------------------------------------      
   
   Dim r As Result
   
   r = modDBConnect.exec_query("Select pk from clin_prescribing.prescribed_for where prescribed_for ILIKE $$" & prescribed_for & "$$")
   If r.count Then Return r!pk
   Return modDBConnect.insert("clin_prescribing.prescribed_for", ["prescribed_for": Lower(prescribed_for)])    
   
End

Public Function Instructions_Save_Habit(new_data As Collection) As Integer
   '-------------------------------------
   'Save the habits for this staff member
   '-------------------------------------
   
   Dim habit As New Collection 
   Dim r As Result
   Dim sql As String = "Select pk, weighting from clin_prescribing.instruction_habits"
   
   sql &= " WHERE fk_staff = " & modDBConnect.currentUser!fk_staff 
   sql &= " AND fk_generic_product =$$" & new_data!med!fk_generic_product & "$$"
   ' If new_data!fk_company Then
   '    sql &= " AND fk_company = $$" & new_data!fk_company & "$$"
   '  Endif
   sql &= " AND fk_instruction =" & new_data!prescribed!fk_instruction
   r = modDBConnect.exec_query(sql)
   If r.count Then
      modDBConnect.update("clin_prescribing.instruction_habits", Null, ["pk": r!pk, "weighting": r!weighting + 1])
   Else
      habit!fk_instruction = new_data!prescribed!fk_instruction
      ' habit!fk_company = new_data!fk_company
      habit!fk_generic_product = new_data!med!fk_generic_product
      habit!fk_staff = modDBConnect.currentUser!fk_staff  
      habit!weighting = 1
      habit!pk = modDBConnect.insert("clin_prescribing.instruction_habits", habit)
   Endif
   Try Return habit!pk
   If Error Then Return 1
   
End 

Public Function Instructions_Save_Habit_old(new_data As Collection) As Integer
   '-------------------------------------
   'Save the habits for this staff member
   '-------------------------------------
   
   Dim habit As New Collection 
   Dim r As Result
   Dim sql As String = "Select pk, weighting from clin_prescribing.instruction_habits"
   
   sql &= " WHERE fk_staff = " & modDBConnect.currentUser!fk_staff 
   sql &= " AND fk_generic_product =$$" & new_data!med!fk_generic_product & "$$"
   ' If new_data!fk_company Then
   '    sql &= " AND fk_company = $$" & new_data!fk_company & "$$"
   '  Endif
   sql &= " AND fk_instruction =" & new_data!med!fk_instruction
   r = modDBConnect.exec_query(sql)
   If r.count Then
      modDBConnect.update("clin_prescribing.instruction_habits", Null, ["pk": r!pk, "weighting": r!weighting + 1])
   Else
      habit!fk_instruction = new_data!med!fk_instruction
      ' habit!fk_company = new_data!fk_company
      habit!fk_generic_product = new_data!med!fk_generic_product
      habit!fk_staff = modDBConnect.currentUser!fk_staff  
      habit!weighting = 1
      habit!pk = modDBConnect.insert("clin_prescribing.instruction_habits", habit)
   Endif
   Try Return habit!pk
   If Error Then Return 1
   
End 

Public Function Prescribed_For_Save_Habit(new_data As Collection) As Integer
   '-------------------------------------
   'Save the habits for this staff member
   '-------------------------------------
   
   Dim habit As New Collection 
   Dim r As Result
   Dim sql As String = "Select pk, weighting from clin_prescribing.prescribed_for_habits"
   
   sql &= " WHERE   fk_staff = " & modDBConnect.currentUser!fk_staff
   sql &= " AND fk_generic_product = $$" & new_data!med!fk_generic_product & "$$"
   '  If new_data!fk_company Then
   '    sql &= " AND fk_company = $$" & new_data!fk_company & "$$"
   ' Endif
   sql &= " AND fk_prescribed_for =" & new_data!prescribed!fk_prescribed_for
   r = modDBConnect.exec_query(sql)
   If r.count Then
      modDBConnect.update("clin_prescribing.prescribed_for_habits", Null, ["pk": r!pk, "weighting": r!weighting + 1])
   Else
      habit!fk_prescribed_for = new_data!prescribed!fk_prescribed_for
      ' habit!fk_company = new_data!fk_company
      habit!fk_generic_product = new_data!med!fk_generic_product
      habit!fk_staff = modDBConnect.currentUser!fk_staff  
      habit!weighting = 1
      habit!pk = modDBConnect.insert("clin_prescribing.prescribed_for_habits", habit)
   Endif
   Try Return habit!pk
   If Error Then Return 1
   
End 

Public Function Script_Types_Get(Optional iUpperType As Integer = const.pbs_script_type_section100) As Collection
   '-------------------------------------------------------------------------
   'someone think of a better name than iUpperType - this is temporary anyway
   'load all script types < section 100
   'obviously if ever used in hospitals/dentists/optomotrists need to fix this
   'plus some GP's prescribe section 100 drugs
   '--------------------------------------------------------------------------
   
   Return modDBConnect.exec_query_collection("Select * from clin_prescribing.lu_pbs_script_type WHERE pk <" & iUpperType) 'FIXME RENAME IN BACK END TO lu_script_type and adjust queries accordingly 
   
End

Public Function Script_Number_Get_Next() As Integer
   
   Return modDBConnect.exec_query("Select nextval('clin_prescribing.script_number')")!nextval
   
End

Public Function Authority_Number_Get_Next(fk_staff As Integer) As Integer
   'Gets the next authority number as per pbs formula 
   Dim R As Result

   R = modDBConnect.exec_query("select clin_prescribing.make_auth_number(" & fk_staff & ") as next_authority_Number")
   
   Return R!next_authority_Number
   
End

Public Function Authority_Increased_Quantity_Reason_Get(reason As String) As Collection
   '--------------------------------------------------------------------------------------------------
   'Returns a collection of wording e.g 'chronic disabling pain not responding to non-narcotics < 12M'
   '--------------------------------------------------------------------------------------------------
   
   Return modDBConnect.exec_query_collection("select * from clin_prescribing.increased_quantity_authority_reasons where reason ILIKE $$%" & reason & "%$$ ORDER BY reason")
   
End

Public Sub Authority_Increased_Qantity_Get_PK(reason As String) As Integer
   '--------------------------------------------------------------------------------------
   'Returns primary key for an reason for increased quantity authority, creating new if dosn't exist
   '---------------------------------------------------------------------------------------  
   
   Dim r As Result
   
   r = modDBConnect.exec_query("Select pk from clin_prescribing.increased_quantity_authority_reasons where reason ILIKE $$" & reason & "$$")
   If r.count Then Return r!pk
   Return modDBConnect.insert("clin_prescribing.increased_quantity_authority_reasons", ["reason": Lower(reason)])    
   
End

' Public Function Save(fk_patient As Integer, old_data As Collection, script_item As Collection, medication As Collection) As Integer
'    'Ian to parse the instructions to create rest of fields for instructions table
'    
'    Dim script_dates As New Collection
'    Dim script_dates_old As New Collection
'    
'    Dim R As Result
'    '------------------------------------------------------------------------------------------------------ 
'    'Add new instruction or what prescibed for if it  doesn't exist insert, otherwise get the pk
'    'Not despite the fact we could have got the pk from the backend, in fact usually will have for these
'    'fields, after these have been chosen, the user could have edited the line, so it is safest and quickest
'    'to just check if the text exists in the backend and get the key or create a new one. The alternate
'    'would have been to keep a track of this in the editing area and prompt the user, however this would
'    'often cause modal interuption which is a pain.
'    '------------------------------------------------------------------------------------------------------
'    medication!fk_instruction = Instruction_Get_PK(medication!instruction)
'    medication!fk_prescribed_for = PrescribedFor_Get_Pk(medication!prescribed_for)
'    medication.Remove("instruction")
'    medication.Remove("prescribed_for")
'    Instructions_Save_Habit(medication)
'    Prescribed_For_Save_Habit(medication)
'    '-----------------------------------------------------------------------------------------------
'    'Next, for increased quantities for authority - ditto as above, save or get key for same reasons
'    '-----------------------------------------------------------------------------------------------
'    If medication!fk_pbs_script_type = const.pbs_script_type_pbs_authority_increased_quantity Then
'       medication!fk_increased_quantity_authority_reason = Authority_Increased_Qantity_Get_PK(medication!authority_indication)
'    Endif
'    Try medication.Remove("authority_indication")
'    '------------------------------------------------
'    'First save or update the core medication details
'    '------------------------------------------------
'    If IsNull(medication!fk_medication) Then
'       '--------------------------------------------------------------------------- 
'       'Has this medication been prescribed before? in this exact way
'       'For example user could have just re-prescibed de-novo from the editing area
'       '---------------------------------------------------------------------------
'       R = Previously_Prescribed(fk_patient, medication)   'returns recordset of an existing medication
'       If R.count Then  
'          '------------------------------------------------------------------------------- 
'          'yes, it exists, so don't need to create a new record, just update its last date
'          '-------------------------------------------------------------------------------
'          medication!fk_script_dates = R!fk_script_dates
'          script_dates_old!pk = r!fk_script_dates
'          script_dates_old!last_date = r!last_date
'          script_dates!last_date = script_item!script_date
'          modDBConnect.update("clin_prescribing.item_start_last_dates", script_dates_old, script_dates)
'          script_item!fk_medication = R!fk_medication              'link current script to existing medication key
'       Else
'          '----------------------------------------------------
'          'New medication, has no start/end date record, so add
'          '----------------------------------------------------
'          script_dates!start_date = script_item!date_on_script
'          script_dates!last_date = script_item!date_on_script
'          medication!fk_script_dates = modDBConnect.insert("clin_prescribing.item_start_last_dates", script_dates)
'          script_item!fk_medication = modDBConnect.insert("clin_prescribing.medications", medication)
'       End If
'    Else
'       '-----------------------------------------------------------------
'       'prescribing from the medications list? or editing and re-printing
'       '-----------------------------------------------------------------
'       modDBConnect.update("clin_prescribing.medications", old_data, medication, "fk_medication")   
'    Endif
'    
'    If IsNull(script_item!fk_item_prescribed) Then
'       script_item!fk_item_prescribed = modDBConnect.insert("clin_prescribing.prescribed", script_item)
'    Else
'       modDBConnect.update("clin_prescribing.prescribed", old_data, script_item, "fk_item_prescribed")
'    Endif
'    Return script_item!fk_item_prescribed 
'    
' End

Public Function Medication_Delete(currentconsult As CConsult, medications As Collection, fk_medication As Integer, fk_section As Integer, audit_action As String, audit_notes As String) As Boolean
   '--------------------------------------------------------------------------------------  
   'Marks as deleted a current medication laying down audit trail, returns true if succeeds
   '--------------------------------------------------------------------------------------
   
   modDBConnect.exec_query("Update clin_prescribing.medications set deleted = True where pk = " & fk_medication)
   If modAudit.MakeAudit(currentconsult, audit_action, "clin_prescribing.medications", fk_medication, fk_section, audit_notes) Then 
      Return True
   End If   
   Return False
   
End

Public Function Medication_Prescribed_Before(fk_patient As Integer, fk_generic_product As String) As Result 
   '-----------------------------------------------------------------------------
   'Checks if this generic medication has been prescribed before for this patient
   '-----------------------------------------------------------------------------
   
   Dim sql As String
   
   sql = "Select fk_medication, start_date from clin_prescribing.vwprescribeditems "
   sql &= "WHERE fk_generic_product = $$" & fk_generic_product & "$$ And fk_patient = " & fk_patient & " LIMIT 1 "
   Return modDBConnect.exec_query(sql)
   
End

Public Function Medications_History_Construct_HTML(items_prescribed As Collection) As String
   
   Dim medication As Collection 
   Dim sHtml As String  
   Dim sRow_Generic_Details As String  'a single row col1= generic name, col2= all the history of this drug
   Dim sRow_Prescription_Details As String ' a single row for one prescription for this drug
   Dim iLastMedication_key As Integer
   Dim sLastGeneric As String 
   Dim iRowcount As Integer
   Dim sPresciption_items As String
   
   sRow_Generic_Details = ""
   "<TR VALIGN=TOP>"
   "<TD WIDTH=20%"
   "<P><B>%generic%</B></P>"
   "</TD>"
   "<TD WIDTH=80%>"
   "<P><B>Started</B>&nbsp;"
   "%first_prescribed%<B>&nbsp;Last Prescribed</B>&nbsp;%last_prescribed%</P>"
   
   sRow_Prescription_Details = ""
   "<TABLE WIDTH=100% BORDER=0 CELLPADDING=2 CELLSPACING=2>"
   "<COL WIDTH=10%>"
   "<COL WIDTH=20%>"
   "<COL WIDTH=10%>"
   "<COL WIDTH=18%>"
   "<COL WIDTH=10%>"
   "<COL WIDTH=2%>"
   "<COL WIDTH=2%>"
   "<COL WIDTH=10%>"
   "<COL WIDTH=18%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=10%>"
   "<P>%date_on_script%</P>"
   "</TD>"
   "<TD WIDTH=20%>"
   "<P>%brand%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P>%strength%</P>"
   "</TD>"
   "<TD WIDTH=18%>"
   "<P>%instruction%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P>%prescribed_for%</P>"
   "</TD>"
   "<TD WIDTH=2%>"                              
   "<P>%quantity%</P>"
   "</TD>"
   "<TD WIDTH=2%>"
   "<P>%repeats%</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P>%pbs_script_type%</P>"
   "</TD>"
   "<TD WIDTH=18%>"
   "<P>%staff_prescribed_wholename%</P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   
   sHtml = "<HTML><BODY><TABLE  WIDTH=100% BORDER=1 CELLPADDING=2 CELLSPACING=0>"                                             'start html page and main table
   For Each medication In items_prescribed
      If iLastMedication_key <> medication!prescribed!fk_medication Then                'for each new medication add new row to main table
         iLastMedication_key = medication!prescribed!fk_medication 
         If iRowcount Then shtml &= "</TR>"                                  'if at the end of the first medication row, terminate the row
         sHtml &= sRow_Generic_Details                                       'first col generic  second col = table of details
         sHtml = Replace(sHtml, "%generic%", medication!generic)             'first col now e.g atenolol
         sHtml = Replace(sHtml, "%first_prescribed%", Format(medication!med!start_date, "dd/mm/yyyy")) 'First Prescibed = 01/01/2012
         sHtml = Replace(sHtml, "%last_prescribed%", Format(medication!med!last_date, "dd/mm/yyyy"))   'Last Prescibed  = 30/03/2012
         sHtml &= sRow_Prescription_Details                                  'at a table with 9 columns 
         'sLastGeneric = medication!generic
         sHtml = Replace(sHtml, "%date_on_script%", Format(medication!prescribed!date_on_script, "dd/mm/yyyy"))
         sHtml = Replace(sHtml, "%brand%", medication!brand)
         sHtml = Replace(sHtml, "%strength%", medication!strength) 
         sHtml = Replace(sHtml, "%instruction%", medication!instruction)
         sHtml = Replace(sHtml, "%prescribed_for%", medication!prescribed_for)
         sHtml = Replace(sHtml, "%quantity%", Str(medication!quantity)) 
         sHtml = Replace(sHtml, "%repeats%", Str(medication!repeats))
         sHtml = Replace(sHtml, "%pbs_script_type%", medication!pbs_script_type)
         sHtml = Replace(sHtml, "%staff_prescribed_wholename%", medication!staff_prescribed_wholename)
      Else
         '----------------------------------------------  
         'its still the same drug, just add another line 
         '----------------------------------------------
         sHtml &= sRow_Prescription_Details
         'sLastGeneric = medication!generic
         sHtml = Replace(sHtml, "%date_on_script%", Format(medication!prescribed!date_on_script, "dd/mm/yyyy"))
         sHtml = Replace(sHtml, "%brand%", medication!brand)
         sHtml = Replace(sHtml, "%strength%", medication!strength) 
         sHtml = Replace(sHtml, "%instruction%", medication!instruction)
         sHtml = Replace(sHtml, "%prescribed_for%", medication!prescribed_for)
         sHtml = Replace(sHtml, "%quantity%", Str(medication!quantity)) 
         sHtml = Replace(sHtml, "%repeats%", Str(medication!repeats))
         sHtml = Replace(sHtml, "%pbs_script_type%", medication!pbs_script_type)
         sHtml = Replace(sHtml, "%staff_prescribed_wholename%", medication!staff_prescribed_wholename)
      Endif
      Inc iRowcount
   Next
   sHtml &= "</TABLE></BODY></HTML>" 'finalise the main outer table
   Print shtml
   Return sHtml
   
End

Public Function Prescription_Written(fk_item_prescribed As Integer) As Collection
   '-------------------------------------------------
   'Returns a collection for a single drug prescribed 
   '-------------------------------------------------
   
   Return modDBConnect.exec_query_first("Select * from clin_prescribing.vwPrescribedItems where fk_item_prescribed = " & fk_item_prescribed)
   
End

Public Sub Medication_MakeActiveOrInactive(fk_medication As Integer, flag As Boolean)
   
   modDBConnect.update("clin_prescribing.medications", Null, ["pk": fk_medication, "active": flag]) 
   modDbconnect.CommitTrans()
   
End

Public Sub Prescriptions_Fill_Columnview(cvw As Columnview, medications As Collection, medication_sort_order As String, bActive As Boolean)
   '-------------------------------------------------------------------------------------------
   'Refreshes the medications list
   'the medications collection = collection of **ALL** drugs ever prescribed
   'ordered by the last_date - ie most recent on the top
   'hence the brand displayed in the medication list will be the last brand prescribed
   'The medication list is looped through, the first occurrance of a generic medication is
   'used, all subsequent ones ignored
   'Note: Display via generic names and display by brand differ
   '      - with generic could just check if last fk_medication was the same and skip the drug
   '        as with ordered generic names all the fk_medication keys will be sequential
   '      - when sorted by brands, the fk_medication keys are all over the place, so the 
   '        solution I've used is to keep the keys in a string[] and use the .Find function
   '        to make sure the brand for this fk_medication not already displayed.
   '------------------------------------------------------------------------------------------   
   
   Dim col_med As Integer = 0
   Dim col_strength As Integer = 1
   Dim col_instructions As Integer = 2
   Dim col_prescribedFor As Integer = 3
   Dim col_quantity As Integer = 4
   Dim col_repeats As Integer = 5
   Dim col_start_date As Integer = 6 
   
   Dim Col_last_date As Integer = 7
   Dim col_pbs As Integer = 8
   Dim col_prescribedBy As Integer = 9
   Dim medication As Collection
   Dim fk_generic_product_keys As New String[]
   Dim x As String
   Dim active_medications As Collection
   
   cvw.Clear()
   cvw.Columns.count = 10
   cvw.Columns[col_med].width = 124
   cvw.Columns[col_strength].width = 45
   cvw.Columns[col_quantity].width = 29
   cvw.Columns[col_repeats].width = 23
   cvw.Columns[col_pbs].width = 72
   cvw.Columns[col_start_date].width = 69
   cvw.Columns[Col_last_date].width = 69
   cvw.Columns[col_prescribedFor].width = 100
   cvw.Columns[col_prescribedBy].width = 100
   cvw.columns[0].text = "Drug"
   cvw.columns[1].text = "Dose"
   cvw.columns[2].text = "" 'instructions
   cvw.columns[3].text = "For"
   cvw.columns[4].text = "Qty"
   cvw.columns[5].text = "Rpt"
   cvw.columns[6].text = "Started"
   cvw.columns[7].text = "Last date"
   cvw.columns[8].text = "PBS"
   cvw.columns[9].text = "Prescribed by"
   
   active_medications = New Collection
   
   For Each medication In medications
      If fk_generic_product_keys.Find(medication!prescribed!fk_medication) = True Then 'true= not found
         fk_generic_product_keys.Add(medication!prescribed!fk_medication, fk_generic_product_keys.count)
         If medication!med!active = bActive Then
            active_medications.Add(medication, medication!pk_view)
            x = medication!pk_view
            cvw.Add(x, 0)
            If medication_sort_order = "brand" Then 
               cvw[x][col_med] = modUtil.Ucase_Word_First_Letter(medication!brand)
            Else  
               cvw[x][col_med] = medication!generic
            End If   
            cvw[x][col_strength] = medication!strength
            cvw[x][col_instructions] = medication!instruction
            cvw[x][col_quantity] = medication!prescribed!quantity 
            cvw[x][col_repeats] = medication!prescribed!repeats
            cvw[x][col_start_date] = Format(medication!med!start_date, "dd/mm/yyyy")
            cvw[x][col_last_date] = Format(medication!med!last_date, "dd/mm/yyyy")
            cvw[x][col_pbs] = medication!pbs_script_type
            cvw[x][col_prescribedFor] = medication!prescribed_for      
            cvw[x][col_prescribedBy] = medication!staff_prescribed_title & " " & medication!staff_prescribed_wholename
         Endif
      End If   
   Next
   
End

Public Function Prescriptions_Written(fk_patient As Integer) As Collection
   '--------------------------------------------------------------
   'Returns collection of all the evey drug item ever prescribed for the patient
   'ordered by most recently written, i.e 
   'This and the next routine should be merged FIXME
   '--------------------------------------------------------------
   
   Dim prescribeds As Collection
   Dim items_prescribed As New Collection
   Dim i As Collection
   Dim c As Collection
   Dim sql As String
   
   sql = "Select * from clin_prescribing.vwprescribeditems where fk_patient =" & fk_patient
   sql &= " AND not prescribed_deleted ORDER BY " & FClinical.get_Medication_Sort_Order() & " ASC, last_date DESC "
   prescribeds = modDBConnect.exec_query_collection(sql)
   For Each i In prescribeds
      c = New Collection
      c!prescribed = New CRow(modDBConnect.exec_query_first("Select * from clin_prescribing.prescribed where pk=" & i!fk_prescribed))
      c!med = New CRow(modDBConnect.exec_query_first("select * from clin_prescribing.medications where pk =  " & i!fk_medication))
      c!pbs_script_type = i!pbs_script_type
      c!date_script_written = i!date_script_written
      c!generic = i!generic
      c!strength = i!strength
      c!product_information_filename = i!product_information_filename
      c!form = i!form
      c!fk_form = i!fk_form
      c!display_strength = i!display_strength
      c!display_packsize = i!display_packsize
      c!brand = i!brand
      c!instruction = i!instruction
      c!prescribed_for = i!prescribed_for
      c!staff_prescribed_wholename = i!staff_prescribed_wholename
      c!staff_prescribed_title = i!staff_prescribed_title   
      c!pk_view = i!pk_view   
      items_prescribed.Add(c, i!pk_view) 
   Next
   Return items_prescribed
   
End

Public Function Prescriptions_Written_This_Consult(fk_consult As Integer) As Collection
   '-----------------------------------------------------------------------------
   'Returns collection of all the drugs prescribed during the current consulation
   '-----------------------------------------------------------------------------
   
   Dim prescribeds As Collection
   Dim prescriptions As New Collection
   Dim i As Collection 
   Dim c As Collection
   Dim sql As String
   
   sql = "Select * from clin_prescribing.vwprescribeditems where fk_consult = " & fk_consult 
   sql &= " AND NOT prescribed_deleted "
   
   prescribeds = modDBConnect.exec_query_collection(sql)
   For Each i In prescribeds
      c = New Collection
      c!prescribed = New CRow(modDBConnect.exec_query_first("Select * from clin_prescribing.prescribed where pk=" & i!fk_prescribed & " AND fk_consult = " & fk_consult & " AND not deleted"))
      c!med = New CRow(modDBConnect.exec_query_first("select * from clin_prescribing.medications where pk =  " & i!fk_medication))
      c!pbs_script_type = i!pbs_script_type
      c!date_script_written = i!date_script_written
      c!generic = i!generic
      c!strength = i!strength
      c!product_information_filename = i!product_information_filename
      c!form = i!form
      c!fk_form = i!fk_form
      c!display_strength = i!display_strength
      c!display_packsize = i!display_packsize
      c!brand = i!brand
      c!instruction = i!instruction
      c!prescribed_for = i!prescribed_for
      c!printed = i!printed   
      c!staff_prescribed_wholename = i!staff_prescribed_wholename
      c!staff_prescribed_title = i!staff_prescribed_title   
      c!pk_view = i!pk_view
      prescriptions.Add(c, i!pk_view) 
      
   Next
   Return prescriptions
   
End

' Public Function Prescriptions_Written_This_Consult_old(fk_consult As Integer) As Collection
'    '-----------------------------------------------------------------------------
'    'Returns collection of all the drugs prescribed during the current consulation
'    '-----------------------------------------------------------------------------
'    
'    Dim prescribeds As Collection
'    Dim result As New Collection
'    Dim i As CRow
'    Dim c As Collection
'    
'    prescribeds = modDBConnect.exec_query_row("Select * from clin_prescribing.prescribed where fk_consult = &1 AND not deleted", [fk_consult])
'    For Each i In prescribeds
'       c = New Collection
'       c!prescribed = i
'       c!med = New CRow(modDBConnect.exec_query_first("select * from clin_prescribing.vwmedications where pk_view = " & i!fk_medication))
'       c!pbs_script_type = c!med!pbs_script_type
'       c!date_script_written = c!med!date_script_written
'       c!generic = c!med!generic
'       c!strength = c!med!strength
'       c!product_information_filename = c!med!product_information_filename
'       c!form = c!med!form
'       c!brand = c!med!brand
'       c!instruction = c!med!instruction
'       c!prescribed_for = c!med!prescribed_for
'       result.Add(c, i!pk) 
'       
'    Next
'    Return result
'    
' End

' Public Function Previously_Prescribed(fk_patient As Integer, M As Collection) As Result
'    '--------------------------------------------------------------------
'    'Checks for an **exact** pattern match with current active medication 
'    'or past inactive medications, and returns fk_medication if exists
'    '
'    '   fk_generic_product integer NOT NULL, -- fk to drugs.products gives generic name, atc, strengh and formulation
'    '   fk_company integer not null   '    character varying(3) DEFAULT NULL::character varying, -- if not null, then this drug is a brand, ie ...
'    '   repeats integer NOT NULL, -- The actual number of repeats...
'    '   quantity integer NOT NULL, -- The quantity on the script...
'    '   fk_instruction integer NOT NULL,
'    '   fk_prescribed_for integer,
'    '   fk_script_dates integer NOT NULL,
'    '   pbscode text NOT NULL,
'    '   fk_print_status integer NOT NULL,
'    '   restriction_code text,
'    '   s8 boolean DEFAULT false,
'    '   active boolean DEFAULT false, -- If true, the medication is on the patients...
'    '   deleted boolean DEFAULT false,Integer
'    '   suppress_reason boolean,
'    
'    '-------------------------------------------------------------
'    Dim sql As String
'    Dim R As Result 
'    'fixme also  Return fk_script_dates
'    sql = "Select * from clin_prescribing.vwMedications Where fk_patient = " & fk_patient & " AND " 
'    sql &= "fk_generic_product = " & m!fk_generic_product 
'    sql &= " AND  fk_company= $$" & m!fk_company & "$$"
'    sql &= " AND  repeats= " & m!repeats
'    sql &= " AND  quantity=" & m!quantity
'    sql &= " AND  fk_instruction =" & m!fk_instruction
'    sql &= " AND  fk_prescribed_for = " & m!fk_prescribed_for 
'    sql &= " AND  pbscode= $$" & m!pbscode & "$$"
'    sql &= " AND  fk_pbs_script_type = " & m!fk_pbs_script_type
'    sql &= " AND  restriction_code= $$" & m!restriction_code & "$$" 
'    sql &= " AND medication_deleted = False   "
'    R = modDBConnect.exec_query(sql)
'    Return R
'    
' End

Public Function Brands_For_Generic_Get(generic As String, fk_product As String) As Collection 
   'FIX THIS IAN SAYS IF SEARCH ON FK_PRODUCT DON'T NEED TO SEARHC ON GENERIC.
   
   Return modDBConnect.exec_query_collection("Select * from drugs.vwDistinctBrandsForGenericProduct where generic = $$" & generic & "$$ AND fk_product =$$" & fk_product & "$$ order by brand")
   
End

Public Function Instruction_Habits_Get(fk_generic_product As String) As Collection 
   
   Return modDBConnect.exec_query_collection("Select * from clin_prescribing.vwInstructionHabits where fk_generic_product = $$" & fk_generic_product & "$$ And fk_staff = " & modDbconnect.currentuser!fk_staff)
   
End

Public Function PrescribedFor_Habits_Get(fk_generic_product As String) As Collection 
   '-----------------------------------------------------------------------------------------
   'Returns collection  of the what this drug was prescibed for sorted by weighting descended
   'i.e the most common way prescribed is on the top of the list
   '------------------------------------------------------------------------------------------   
   
   Dim sql As String
   
   sql = "Select * from clin_prescribing.vwPrescribedForHabits where fk_generic_product = $$" & fk_generic_product & "$$ "
   sql &= "AND fk_staff = " & modDbconnect.currentuser!fk_staff & " ORDER BY weighting DESC"
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function prescribed_for(txt As String) As Collection
   '---------------------------------------------------------------------
   'provides contents for popup list of what was prescribed for this drug
   '---------------------------------------------------------------------
   
   Return modDBConnect.exec_query_collection("Select * from clin_prescribing.prescribed_for where prescibed_for ILIKE $$%" & txt & "%$$ order by prescribed_for")
   
End

Public Function ConvertTomls(strength As String, volume As Float) As String
   'IAN - This won't work FIXME OR I MEAN DISCUSS WITH ME.
   'e.g vaccines engerix b is 20ug/ml, engeric b paed is 0.5mls or 20ug/ml
   ' converts a strength expression into "per 5 mls" For user convience
   ' for example 0.4mg/ml becomes 2mg/5ml
   ' other forms don't change
   
   Dim array1 As String[]
   Dim array2 As New String[]
   Dim i As String
   Dim a As Float
   Dim re As New Regexp
   
   re.Compile("^([0-9.]+)([a-z]+)/ml$")
   array1 = Split(strength, "-") ' split into compound strengths
   For Each i In array1
      re.Exec(i)
      If re.Offset <> -1 Then
         If IsFloat(re.SubMatches[1].Text) Then
            a = CFloat(re.SubMatches[1].Text) ' extract float amount
            a *= volume ' multiply by 5
            i = a & re.SubMatches[2].Text & "/" & Str(volume) & "ml"
         Endif
      Endif
      array2.Add(i)
   Next
   Return array2.Join("-") ' reconstruct the compound strength
   
End

Public Function ConvertTo5mls(strength As String, Optional drug As Collection) As String 'drug is temporary whilst I find crash
   'IAN - This won't work FIXME OR I MEAN DISCUSS WITH ME.
   'e.g vaccines engerix b is 20ug/ml, engeric b paed is 0.5mls or 20ug/ml
   ' converts a strength expression into "per 5 mls" For user convience
   ' for example 0.4mg/ml becomes 2mg/5ml
   ' other forms don't change
   
   Dim array1 As String[]
   Dim array2 As New String[]
   Dim i As String
   Dim a As Float
   Dim re As New Regexp
   
   ' If InStr(strength, "-") Then
   '    strength = Replace(strength, "-", "/ml-")
   ' Endif
   re.Compile("^([0-9.]+)([a-z]+)/ml$")
   array1 = Split(strength, "-") ' split into compound strengths
   For Each i In array1
      re.Exec(i)
      If re.Offset <> -1 Then
         If IsFloat(re.SubMatches[1].Text) Then
            a = CFloat(re.SubMatches[1].Text) ' extract float amount
            a *= 5 ' multiply by 5
            i = a & re.SubMatches[2].Text & "/5ml"
         Endif
      Endif
      array2.Add(i)
   Next
   Return array2.Join("-") ' reconstruct the compound strength
   
End

Public Function Check_Auth_Code(authcode As String) As Boolean
   
   Dim re As Regexp
   
   re = New Regexp(authcode, "^[0-9]{4,5}$")
   If re.Offset <> -1 Then Return True
   re = New Regexp(authcode, "^Z[0-9]{4}[A-Z][A-Z]$", Regexp.Caseless)
   If re.Offset <> -1 Then Return True
   Return False
   
End


Public Function Paeds_Calc(product As Collection, weight As Float) As String
   
   ' product: Collection that is a row from a query on the drug.product table
   ' weight: the child's weight, in kilograms
   ' returns: the computed paediatric dose
   ' for compounds based on the first strength in the compound
   
   Dim array1 As String[]
   Dim re As Regexp
   Dim strength, amount_unit As String
   Dim dose, num_strength As Float
   
   array1 = Split(product!strength, "-")
   strength = array1[0]
   dose = weight * product!paed_dose
   If dose > product!paed_max Then
      dose = product!paed_max
   Endif
   re = New Regexp(strength, "^([0-9.]+)[a-z]+/([a-z]+)$")
   If re.Offset = 0 Then
      ' we matched
      num_strength = CFloat(re.SubMatches[1].Text)
      amount_unit = re.SubMatches[2].Text
      dose /= num_strength
      If dose < 2 Then
         dose = Round(dose / num_strength, -1)
      Else
         dose = Round(dose)
      Endif
      Return dose & " " & amount_unit
   Else
      ' didn't match: not fluid
      re = New Regexp(strength, "^([0-9.]+)([a-z]+)")
      num_strength = CFloat(re.SubMatches[1].Text)
      amount_unit = re.SubMatches[2].Text
      If product!fk_form = 22 Then ' an injection: use raw units
         Return Round(dose) & amount_unit
      Else
         ' not injection: round to half a "thing"
         Return Round(dose * 2 / num_strength) / 2.0
      Endif
   Endif 
   
End

Public Sub Companies_Get(company As String) As Collection
   '-------------------------------------------------------
   'User is adding a new drug and wants a list of companies
   'note the pk of companies is the field 'code'
   '------------------------------------------------------- 
   
   Return modDBConnect.exec_query_collection("Select company.code as pk, * from drugs.company where company ILIKE $$%" & company & "%$$ order by company")
   
End

Public Function Prescription_History_HTML_Row() As String
   'A temporary template for my use  
   
   Return ""
   
   "<TR VALIGN=TOP>"
   "<TD WIDTH=10%>"
   "<P ALIGN=LEFT>%generic%"
   "</P>"
   "</TD>"
   "<TD WIDTH=10%>"
   "<P ALIGN=LEFT>%brand%"
   "</P>"
   "</TD>"
   "<TD WIDTH=9%>"
   "<P ALIGN=LEFT>%strength%"
   "</P>"
   "</TD>"
   "<TD WIDTH=16%>"
   "<P ALIGN=LEFT>%instruction%"
   "</P>"
   "</TD>"
   "<TD WIDTH=14%>"
   "<P ALIGN=LEFT>%prescribed_for%"
   "</P>"
   "</TD>"
   "<TD WIDTH=3%>"
   "<P ALIGN=LEFT>%quantity%"
   "</P>"
   "</TD>"
   "<TD WIDTH=2%>"
   "<P ALIGN=LEFT>%repeats%"
   "</P>"
   "</TD>"
   "<TD WIDTH=4%>"
   "<P ALIGN=LEFT>%start_date%"
   "</P>"
   "</TD>"
   "<TD WIDTH=4%>"
   "<P ALIGN=LEFT>%last_date%"
   "</P>"
   "</TD>"
   "<TD WIDTH=13%>"
   "<P ALIGN=LEFT>%pbs_script_type%"
   "</P>"
   "</TD>"
   "<TD WIDTH=13%>"
   "<P ALIGN=LEFT>%staff_prescribed_wholename%"
   "</P>"
   "</TD>"
   "</TR>"
   
End

Public Sub New_html() As String
   
   Return ""
   "<HTML>"
   "<BODY>"
   "<TABLE WIDTH=100% BORDER=1 CELLPADDING=0 CELLSPACING=0 >"
   "<COL WIDTH=20%>"
   "<COL WIDTH=80%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=20%"
   "<P>%Generic%</P>"
   "</TD>"
   "<TD WIDTH=80%>"
   "<P><B>First Prescribed</B><SPAN STYLE=\"font-weight: normal\">"
   "%first_prescribed% </SPAN><B>Last Prescribed </B><SPAN STYLE=\"font-weight: normal\">%last_prescribed%</SPAN></P>"
   "<P><B>Prescription History</B></P>"
   "<TABLE WIDTH=899 BORDER=1 CELLPADDING=4 CELLSPACING=3>"
   "<COL WIDTH=103>"
   "<COL WIDTH=74>"
   "<COL WIDTH=89>"
   "<COL WIDTH=89>"
   "<COL WIDTH=89>"
   "<COL WIDTH=89>"
   "<COL WIDTH=89>"
   "<COL WIDTH=89>"
   "<COL WIDTH=85>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=103>"
   "<P>%prescribed_on%</P>"
   "</TD>"
   "<TD WIDTH=74>"
   "<P>%brand%</P>"
   "</TD>"
   "<TD WIDTH=89>"
   "<P>%strength%</P>"
   "</TD>"
   "<TD WIDTH=89>"
   "<P>%instructions%</P>"
   "</TD>"
   "<TD WIDTH=89>"
   "<P>%for%</P>"
   "</TD>"
   "<TD WIDTH=89>"
   "<P>%quantity%</P>"
   "</TD>"
   "<TD WIDTH=89>"
   "<P>%repeats%</P>"
   "</TD>"
   "<TD WIDTH=89>"
   "<P>%pbs%</P>"
   "</TD>"
   "<TD WIDTH=85>"
   "<P>%prescribed_by%</P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   "</BODY>"
   "</HTML>" 
   
End
