' Gambas class file
' Copyright (C) 2008,2009 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
Private skin_preparations As Collection 
Private repair_types As Collection
Private skin_suture_types As Collection
Private Subcut_suture_types As Collection
Private anaesthesia_types As Collection
Private complications As Collection 
Private complication As Collection 

Private bEmbedded As Boolean
Private fk_progressnote_user As Integer 'points to  notes for a progress note page
Private fk_progressnote_auto As Integer 'points to auto-generated summary of procedure

Private cProgressNote_Section As Integer
Private fk_pasthistory As Integer
Private bStopMouseOver As Boolean
Private bexit As Boolean
Private bKeyValid As Integer
Public FDraw As FDrawEditor
'Private ProgressNotesPage As FProgressNoteEditor
Private ProgressNotesPage As FProgressNotePage
Private currentconsult As CConsult
Private pk_view As String
Private fk_lu_site As Integer
Private fk_lu_skin_preparation As Integer
Private fk_lu_anaesthetic_agent As Integer
Private fk_lu_procedure_type As Integer
Private fk_lu_repair_type As Integer
Private fk_subcutaneous_suture As Integer
Private fk_skin_suture As Integer
Private fk_procedure As Integer '
Private fk_branch As Integer
Private pk_surgical_pack As Integer
Private surgical_pack As Collection 
Private fk_user_provider_defaults As Integer
Public fk_provisional_diagnosis As String 
Public fk_actual_diagnosis As String
'Private current_exicision_defaults As collection 
Private Existing_Excision_Defaults As Collection 
Public procedures As Collection 
Public proc As Collection 
Private procedure_notes As Collection
Private dermoscopy_notes As Collection
Private pictures As Collection 
Private collection_Members As Collection
Private Collection_Member As Collection 
Private Procedure_types As Collection 

Private currentcomplication As Collection
Private default_provider As Collection
Private CurrentPicture As Collection
Private currentthumb As Collection 
Private hObs As Observer
Private Laterality As String
Private anterior_posterior As String 
Private FTerms As FCodedTermSelector

Static Private form_procedures As FProcedures


Static Public Sub Term_code_Save(tag As String, term As Collection)
 'fixme, when i started experimenting with this I hard coded Fterms to link
 'back to FProceedures, whearas it needs to be more generic.
   Select Case tag
   
   Case "provisional diagnosis"
       form_procedures.txtProvisionalDiagnosis.text = term!term & " (" & term!code & ")"
       form_procedures.fk_provisional_diagnosis = term!code
   Case "actual diagnosis"
     form_procedures.txtActualDiagnosis.text = term!term & " (" & Term!code & ")"
     form_procedures.fk_actual_diagnosis = term!code
   End Select
   
End
Public Sub Form_KeyPress()
  
    picturebox_magnified.Visible = False  
  
End
Public Sub Extract_Collection(keyed_collection As Collection) As Collection
  'for a single collection like collection[key]
  'return just the collection unkeyed
  Dim C As Collection
  For Each C In keyed_collection
  Next
  Return C
   
  
End

Public Sub Form_Close()
  Settings_Save()
End

Public Sub Save()
   '-----------------------------
   'Saves new or edited procedure
   '------------------------------
   Dim sProgressNotes As String 
   Dim new_excision_defaults As New Collection 
   Dim new_surgical_pack As New Collection 
   Dim bits As String[]
   Dim sString As String 
   '-------------------------------------------------------------
   'ensure at least date, site and minimal medico-legal stuff
   'this also makes sure that fk_lu_site, fk_lu_procedure_type are
   'set to valid pk's
   '-------------------------------------------------------------
   If Not Procedure_Valid() Then Return 
   '-----------------------
   'FIXME  UPDATE THIS
   '   ok, fill the collection  ok=checked
   '   pk                         created later
   '   fk_consult                 created later
   '   date                       allow this to be <> consult date
   '                              as user could have delayed entry
   '   explained_procedure      ok
   '   obtained_consent          ok
   '   detailed_complications    ok
   '   fk_lu_site                ok
   '   lesion_notes              ok
   '   dermoscopy_notes          ok
   '   fk_lu_lateralisation      ok
   '   localisation              ok
   '   fk_lu_surgical_pack       not ok ?keep/need  not yet implemented
   '   surgical_pack_identifier  ok      used alone at moment
   '   fk_lu_skin_preparation    ok
   '   fk_lu_anaesthetic_agent         ok
   '   fk_lu_procedure_type        ok
   '   fk_lu_repair_type         ok
   '   fk_subcutaneous_suture ok
   '   fk_skin_suture         ok
   '   average_diameter_cm       ok
   '   fk_provisional_diagnosis  n/a at the moment
   '   provisional_diagnosis     ok
   '   fk_actual_diagnosis       n/a at the moment
   '   actual_diagnosis          ok
   '   fk_organisation           ok
   '   fk_result               once result comes back
   '   complications   ok
   '   referral             sPicPath     ok
   '   review_months             ok
   'Progress notes end up looking like this
   '  Excision Temple (left anterior)
   '     -the procedure was explained to the patient, consent obtained, side effect etc
   
   '------------------------------------------------------------------------------------
   
   sProgressNotes = "<HR><small><B>Excision Details</B><BR> "
   sProgressNotes &= "Site:" & Trim(txtSite.text) & " "
   proc!localisation = Trim(txtLocalisation.text)
   If Trim(txtLocalisation.text) <> "" Then
       sProgressNotes &= Trim(txtLocalisation.text)
   End If
   If rbLateralisationLeft.value = True Then proc!fk_lu_lateralisation = Const.LateralityLeft
   If rbLateralisationRight.value = True Then proc!fk_lu_lateralisation = Const.LateralityRight
   If rbLateralisationMidline.value = True Then proc!fk_lu_lateralisation = Const.LateralityMidline
   If rbAnterior.value Then proc!fk_lu_anterior_posterior = Const.AnatomicalLocation_Anterior
   If rbPosterior.value Then proc!fk_lu_anterior_posterior = Const.AnatomicalLocation_Posterior
   If Laterality Or anterior_posterior Then
      sProgressNotes &= " ["
      If Laterality Then sProgressNotes &= Laterality & " "
      If anterior_posterior Then sProgressNotes &= anterior_posterior
       sProgressNotes &= "]" 
   End If
   sProgressNotes &= "<BR>"
   'At this point, I've elected to only insert 1 picture - the largest one in Picturebox1  
   'fixme - remove the html of a previously saved but now deleted image
   If Pictures.count Then 
      '-----------------------------------------------------------------------------------
      'If the picture has a tag = key to Pictures collection, must have been saved already
      '-----------------------------------------------------------------------------------
      sProgressNotes &= Picture_Insert_In_ProgressNotes()
   End If
   If Trim(txtNotes.text) Then sProgressNotes &= "Clinical notes: " & Trim(txtNotes.text) & "<BR>"
   If Trim(txtDermoscopy.text) Then sProgressNotes &= "Dermoscopy: " & Trim(txtDermoscopy.text) & "<BR>"
   If Trim(txtProvisionalDiagnosis.text) Then
       sProgressNotes &= "Provisional Dx:" & Trim(txtProvisionalDiagnosis.text) & "<BR>"
   End If
   If Trim(txtActualDiagnosis.text) Then
       sProgressNotes &= "Actual Dx:" & Trim(txtActualDiagnosis.text)
       If proc!fk_progressnote_auto Then
           sProgressNotes = modEditAreaHelpers.Progressnote_Annotate_As_Edited(sProgressNotes)
       End If
       sProgressNotes &= "<BR>"
   Else
       sProgressNotes &= "Actual Dx:Pending" & "<BR>"
   End If
   sProgressNotes &= "<small>"
    proc!date = Val(txtDate.text)
   If chkProcedureExplained.value = True Then 
      proc!explained_procedure = True
       sProgressNotes &= "- the procedure was explained to the patient, "
   End If
   If chkConsentObtained.value = True Then
      proc!obtained_consent = True
       sProgressNotes &= " consent was obtained, "
   End If
   If chkSideEffectsExplained.value = True Then
      proc!detailed_complications = True
       sProgressNotes &= " and side effects and complications were explained. "
   End If
   sProgressNotes &= "<BR>"
   proc!surgical_pack_identifier = Trim(txtSurgicalPack.text)
   sProgressNotes &= "- surgical pack id: " & Trim(txtSurgicalPack.text) & "<BR>"
   proc!fk_lu_site = fk_lu_site
   proc!lesion_notes = Trim(txtNotes.text)
   proc!dermoscopy_notes = Trim(txtDermoscopy.text)
   sProgressNotes &= "- skin prep: " & cmbSkinPreparations.text & "<BR>"
   sProgressNotes &= "- anesthesia: " & cmbAnaesthesia.text & "<BR>"
   sProgressNotes &= "- type of procedure: " & cmbExcisionTypes.text
   sProgressNotes &= "- type of repair: " & cmbRepairType.text & "<BR>"
   sProgressNotes &= "- subcutaneous suture: " & cmbSubcutaneousSuture.text & "<BR>"
   sProgressNotes &= "- skin suture: " & cmbcutaneousSuture.text & "<BR>"
   If Trim(txtDiameter.text) Then sProgressNotes &= "- average diameter of the lesion is " & Trim(txtDiameter.text) & " cm<BR>"
   sProgressNotes &= "</small></small>"
   If txtComplications.text Then
       sProgressNotes &= "<P><small>Complications: " & Trim(txtComplications.text)
      If proc!fk_progressnote_auto Then
           sProgressNotes = modEditAreaHelpers.Progressnote_Annotate_As_Edited(sProgressNotes)
       End If
    End If
    sProgressNotes &= "<P><small><B>Histology:</B>"
    sProgressNotes &= "<A HREF='pending'>pending</A></small>"
    sProgressNotes &= "<HR>"
    'now most of the keys, if 0 then don't keep
    proc!fk_lu_skin_preparation = skin_preparations[cmbSkinPreparations.index]!pk
    proc!fk_lu_anaesthetic_agent = anaesthesia_types[cmbAnaesthesia.index]!pk
    proc!fk_lu_procedure_type = Procedure_types[cmbExcisionTypes.index]!pk
    proc!fk_subcutaneous_suture = Subcut_suture_types[cmbSubcutaneousSuture.index]!pk
    proc!fk_skin_suture = skin_suture_types[cmbcutaneousSuture.index]!pk
    proc!fk_lu_repair_type = repair_types[cmbRepairType.index]!pk
   Try proc!average_diameter_cm = txtDiameter.text
   proc!complications = Trim(txtComplications.text)
   proc!fk_pasthistory = fk_pasthistory
   If fk_provisional_diagnosis <> 0 Then proc!fk_provisional_diagnosis = fk_provisional_diagnosis
   proc!fk_branch = fk_branch
   If chkReferral.Value = True Then 
         proc!referred = True
   Else
      proc!referred = False
   End If
      
   If Trim(txtReviewMonths.text) <> "" Then 
      Try proc!review_months = Val(txtReviewMonths.text) 
      'FIXME put in automatic recall.
   End If
    If fk_actual_diagnosis <> 0 Then proc!fk_actual_diagnosis = fk_actual_diagnosis
   '-------------------------------------------------------------------------------------------------------------
   'Now if desired, save the current excision as a template for all others
   'FIXME make me smart - user editable combo and save the pattern to a
   'procedure type because we use different combinations for different types
   'of procedures
   '------------------------------------------------------------------------------------------------------------
   '   clin_procedures.staff_skin_procedure_defaults
   '   pk serial NOT NULL,
   '   fk_staff integer,
   '   fk_lu_skin_preparation integer,
   '   fk_lu_anaesthetic_agent integer,
   '   fk_lu_procedure_type integer,
   '   fk_lu_repair_type integer,
   '   fk_subcutaneous_suture integer,
   '   fk_skin_suture integer,
   '   fk_user_provider_defaults integer points to default pathology provider for this dr
   '------------------------------------------------------------------------------------------------------------
 
   modDBConnect.BeginTrans()
   '----------------------------------------------------------------------------------------
   'If users wants to save the current pattern of procedure type, type of suture
   'anaesthetic etc, than either update the clin_procedures.staff_skin_procedure_defaults
   'table or create a new entry
   'For Each Of the keys which don 't exist, if text exists probably new, so save them
   'FIXME - leave me in for the moment.
   'perhaps make combo not read only, then save any new combo contents
   '----------------------------------------------------------------------------------------
    If chkDefaults.value Then
         ' If fk_lu_skin_preparation = 0 Then 
         '    If Trim(txtSkinPreparation.text) Then
         '       fk_lu_skin_preparation = modProceduresDBI.Skin_Preparation_Save(Trim(txtSkinPreparation.text))
         '    End If
         ' End If
         ' If fk_lu_anaesthetic_agent = 0 Then
         '    If Trim(txtAnaesthesia.text) Then
         '       fk_lu_anaesthetic_agent = modProceduresDBI.Anaesthetic_Save(Trim(txtAnaesthesia.text))
         '    End If
         ' End If
         ' If fk_subcutaneous_suture = 0 Then
         '    If Trim(txtSubCutaneousSuture.text) Then
         '       fk_subcutaneous_suture = modProceduresDBI.Suture_Save(Trim(txtSubCutaneousSuture.text), const.Suturesite_SubCutaneous)
         '    End If
         ' End If
         ' 
         ' If fk_skin_suture = 0 Then
         '    If Trim(txtSkinSuture.text) Then
         '          fk_skin_suture = modProceduresDBI.Suture_Save(Trim(txtSkinSuture).text, const.SutureSite_Skin)
         '    End If
         ' End If   
         ' 
         ' If fk_lu_repair_type = 0 Then
         '       If Trim(txtRepairType.text) Then
         '          fk_lu_repair_type = modProceduresDBI.RepairType_Save(Trim(txtRepairType.text))
         '       End If
         ' End If       
         new_excision_defaults!pk_default = Existing_Excision_Defaults!pk_default
         new_excision_defaults!fk_staff = modConsultDBI.Staff_member_Get()!fk_staff
         new_excision_defaults!fk_lu_skin_preparation = fk_lu_skin_preparation
         new_excision_defaults!fk_lu_anaesthetic_agent = fk_lu_anaesthetic_agent
         new_excision_defaults!fk_lu_procedure_type = fk_lu_procedure_type
         new_excision_defaults!fk_lu_repair_type = fk_lu_repair_type
         new_excision_defaults!fk_subcutaneous_suture = fk_subcutaneous_suture
         new_excision_defaults!fk_skin_suture = fk_skin_suture
         new_excision_defaults!fk_user_provider_defaults = fk_user_provider_defaults
         
         modProceduresDBI.staff_skin_procedure_defaults_save(Existing_Excision_Defaults, new_excision_defaults)
   End If
   '--------------------------------------------------------------
   'Save the last used surgical pack number
   'Limited at the moment - in our surgery we just do runs by date
   'so pack identifier is the date FIXME
   '--------------------------------------------------------------
   If Trim(txtSurgicalPack.text) Then
      If pk_surgical_pack Then
         New_surgical_pack!pk = pk_surgical_pack
      End If
      new_surgical_pack!identifier = Trim(txtSurgicalPack.text)
      new_surgical_pack!fk_clinic = modDBConnect.currentUser!fk_clinic
      modProceduresDBI.surgical_pack_get_save_last(surgical_pack, new_surgical_pack)
   End If  
   '------------------------------------------------------------------------------
   'There are two components to the progress notes:
   '1) The ones the staff member writes on the embedded FProgressNotes Page
   '   this will be saved first, so as to appear above the computer generated
   '   notes from the proceedures editing area
   '2) The computer generated summary from the data the user entered in edit area
   '   If a new procedure, then the note is created, othewise it is edited back
   '   on the day of its creation, but annotated as such FIXME DO THIS
   '-----------------------------------------------------------------------------
   ProgressNotesPage.Save()          'but no commitTrans is allowed in that form
   proc!fk_progressnote_user = ProgressNotesPage.Get_pk_progressNote()
   proc!fk_progressnote_auto = modConsultDBI.ProgressNote_Save(currentconsult, sProgressNotes, const.cSection_Excisions, fk_progressnote_auto, "Skin Excisions", fk_pasthistory, False)
   Complications = New Collection
   bits = Split(txtComplications.text, ";", "", True)
   For Each sstring In bits
       Complication = New Collection
       complication!complication = sString 
       complications.Add(Complication, complications.count)
   Next
   modProceduresDBI.Save(currentconsult, pk_view, proc, pictures, complications)
 
   modDBConnect.CommitTrans()
   ProgressNotesPage.Notes_Editor.DataChange_Update_Indicators(False)
   ProgressNotesPage.Notes_Editor.Set_Copy_of_Editor_text(ProgressNotesPage.Notes_Editor.teNotes.text) 
   SkinProcedures_Refresh()
   FClinical.Refresh_AllPreviousNotes()
   Procedure_New()
End


Public Sub mnuHealthIssues_Refresh()
   '--------------------------------------------------------
   'Puts all the current health issues onto a drop down menu
   '--------------------------------------------------------
   Dim mnu As Menu
   Dim PastHistoryCondition As Collection
   
   If Not currentconsult Then Return
   '---------------------------
   'Everyone gets general notes
   '---------------------------
   mnuHealthIssues.Children.Clear()
   mnu = New Menu(mnuHealthIssues) As "mnuHealthIssues"
   mnu.name = "General Notes"
   mnu.caption = "General Notes"
   mnu.tag = "general notes"
   '--------------------------
   'Add any past history items
   '--------------------------
   If currentconsult!past_history.count = 0 Then Return 
   currentconsult.Refresh("past_history") 
   mnu = New Menu(mnuHealthIssues)
   mnu.name = "separator_1"
   mnu.caption = ""
   currentconsult.Refresh("past_history") 
   For Each PastHistoryCondition In currentconsult!past_history
    If PastHistoryCondition!major Then
      mnu = New Menu(mnuHealthIssues) As "mnuHealthIssues"
      mnu.name = PastHistoryCondition!description
      mnu.caption = PastHistoryCondition!description
      mnu.tag = PastHistoryCondition!pk_pasthistory
    End If
   
   Next
     mnu = New Menu(mnuHealthIssues)
     mnu.name = "separator_2"
     mnu.caption = ""
   For Each PastHistoryCondition In currentconsult!past_history
    If PastHistoryCondition!active = True Then
      mnu = New Menu(mnuHealthIssues) As "mnuHealthIssues"
      mnu.name = PastHistoryCondition!description
      mnu.caption = PastHistoryCondition!description
      mnu.tag = PastHistoryCondition!pk_pasthistory
    End If
   Next 
     mnu = New Menu(mnuHealthIssues)
     mnu.name = "separator_3"
     mnu.caption = ""
    For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!active = False And PastHistoryCondition!major = False
        mnu = New Menu(mnuHealthIssues) As "mnuHealthIssues"
        mnu.name = PastHistoryCondition!description
        mnu.caption = PastHistoryCondition!description
        mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
    Next
    
End


' Public Sub mnuHealthIssues_Refresh()
'    '------------------------------------------------------------------
'    'Refreshes the progress notes menu on the main toolbar
'    'Clears all existing entries as user could have added new problems
'    'rebuilds the menu with menu's for
'    '*show all notes
'    '*general notes
'    '*major problems as submenu
'    '*significant active problems as submenu
'    '*inactive problems as submenu
'    '-------------------------------------------------------------------   
'    Dim mnu As menu
'    Dim mnu_major As menu
'    Dim mnu_active As Menu
'    Dim mnu_inactive As menu
'    Dim PastHistoryCondition As Collection
'    Dim bNeedSeparator As Boolean = True
'    Dim bNoMainMenu As Boolean = True
'    
'    If Not currentconsult Then Return
'    '----------------------------------------------------------------
'    'Clear menu, even if exit this sub, don't want the last patient's
'    'menu items on the list
'    '----------------------------------------------------------------
'    mnuHealthIssues.Children.Clear()  
'    mnu = New Menu(mnuHealthIssues) As "mnuHealthIssues"
'    mnu.name = "General Notes"
'    mnu.caption = "General Notes"
'    mnu.tag = "general notes"  
'    If currentconsult!past_history.count = 0 Then Return 
'    currentconsult.Refresh("past_history")  
'    '---------------------------------------------------------
'    'Next add all the major conditions followed by a separator
'    '---------------------------------------------------------
'    For Each PastHistoryCondition In currentconsult!past_history
'     If PastHistoryCondition!major Then
'         If bNeedSeparator Then
'             mnu = New Menu(mnuHealthIssues)
'             mnu.name = "separator_1"
'             mnu.caption = ""
'             bNeedSeparator = False  
'          End If
'          If bNoMainMenu Then
'             mnu_major = New Menu(mnuHealthIssues) As "mnuHealthIssues"
'             mnu_major.name = "mnuHealthIssues_Major"
'             mnu_major.caption = "Major Health Issues"
'             mnu_major.tag = "major"
'             bNoMainMenu = False  
'          End If
'         
'          mnu = New Menu(mnu_major) As "mnuHealthIssues"
'          mnu.name = PastHistoryCondition!description
'          mnu.caption = PastHistoryCondition!description
'          mnu.tag = PastHistoryCondition!pk_pasthistory
'      End If
'    Next
'   
'    bNeedSeparator = True   
'    bNoMainMenu = True
'    '---------------------------------------------------------------
'    'Next add all the significant conditions followed by a separator
'    '---------------------------------------------------------------
'    For Each PastHistoryCondition In currentconsult!past_history
'     If PastHistoryCondition!active = True Then
'          If bNeedSeparator Then
'            mnu = New Menu(mnuHealthIssues)
'            mnu.name = "separator_2"
'            mnu.caption = ""
'            bNeedSeparator = False  
'          End If  
'          If bNoMainMenu Then
'             mnu_active = New Menu(mnuHealthIssues) As "mnuHealthIssues"
'             mnu_active.name = "mnuHealthIssues_Significant"
'             mnu_active.caption = "Significant Issues"
'             mnu_active.tag = "significant"
'             bNoMainMenu = False  
'          End If         
'          mnu = New Menu(mnu_active) As "mnuHealthIssues"
'          mnu.name = PastHistoryCondition!description
'          mnu.caption = PastHistoryCondition!description
'          mnu.tag = PastHistoryCondition!pk_pasthistory
'     End If
'    Next 
'    bNeedSeparator = True   
'    bNoMainMenu = True
'    '--------------------------------------------------------------
'    'Lastly add all the inactive conditions followed by a separator
'    '--------------------------------------------------------------
'     For Each PastHistoryCondition In currentconsult!past_history
'       If PastHistoryCondition!active = False And PastHistoryCondition!major = False
'          If bNeedSeparator Then
'            mnu = New Menu(mnuHealthIssues)
'            mnu.name = "separator_3"
'            mnu.caption = ""
'            bNeedSeparator = False  
'          End If  
'          If bNoMainMenu Then
'             mnu_inactive = New Menu(mnuHealthIssues) As "mnuHealthIssues"
'             mnu_inactive.name = "mnuHealthIssues_Significant"
'             mnu_inactive.caption = "Inactive Issues"
'             mnu_inactive.tag = "inactive"
'             bNoMainMenu = False  
'          End If         
' 
'          mnu = New Menu(mnu_inactive) As "mnuHealthIssues"
'          mnu.name = PastHistoryCondition!description
'          mnu.caption = PastHistoryCondition!description
'          mnu.tag = PastHistoryCondition!pk_pasthistory
'       End If
'     Next
' End


Public Sub mnuHealthIssues_Show()
  
  mnuHealthIssues_Refresh()
  
End

Public Sub mnuHealthIssues_Click()
   '---------------------------------------------------
   'User wants to link a request form to a health issue
   'The menu tag = the pk_pasthistory
   '---------------------------------------------------
  Select Case Last.tag
  Case "general notes", "remove link"
    txtHealthIssue.text = "General Notes"
    fk_pasthistory = 0
    cProgressNote_Section = const.cSection_GeneralNotes
  Case Else
    txtHealthIssue.text = currentconsult!past_history[Last.tag]!description
    txtHealthIssue.pos = 1 'text could be > length of the textbox
    fk_pasthistory = Last.tag
    cProgressNote_Section = const.cSection_Excisions 'FIXME TO PROCEEDURES  
  End Select
  
  
  
End


Public Sub Settings_Save()


      Settings["Excisions/HSplit_Excisions"] = HSplit_Excisions.Layout 
      Settings["Excisions/VSplit_Left"] = VSplit_Left.Layout 
      Settings["Excisions/VSplit_Right"] = VSplit_Right.Layout 
     ' Settings["Excisions/HSplit_Images"] = HSplit_Images.Layout
     ' Settings["Excisions/default_zoom"] = Histology_Viewer.Webview1.Zoom

  

End

Private Sub Settings_Load()


      Try HSplit_Excisions.Layout = Settings["Excisions/HSplit_Excisions"]
      Try VSplit_Left.Layout = Settings["Excisions/VSplit_Left"] 
      Try VSplit_Right.Layout = Settings["Excisions/VSplit_Right"]
 
End



Public Sub Init(cons As CConsult)
   '---------------------------------------------------------------------------
   'Load settings, do a little gui-homework
   'Fetch all current Excisions claims
   '--------------------------------------------------------------------------
   Dim pic1 As Picture
   Dim key As Integer
   form_procedures = Me
   currentconsult = cons
   '--------------------------------------------------------------------
   'Create instance Of drawing editor, overide the save and hide buttons
   '--------------------------------------------------------------------
   FDraw = New FDrawEditor(Vbox_DrawEditor) 
   FDraw_Create_Observer                    
   FDraw.tbHideForm.Visible = True   
   FTerms = New FCodedTermSelector(Me)         'icpc2+ or icd10 terms selector
   EditArea_Resize_Labels()                    
   Procedure_types = modUtil.LoadCombo(cmbExcisionTypes, modProceduresDBI.Procedures_Get_types(), "type")
   skin_preparations = modUtil.LoadCombo(cmbSkinPreparations, modProceduresDBI.Skin_Preparation_Get(), "preparation")
   anaesthesia_types = modUtil.LoadCombo(cmbAnaesthesia, modProceduresDBI.Anaesthetic_Get(), "agent")
   Subcut_suture_types = modUtil.LoadCombo(cmbSubcutaneousSuture, modProceduresDBI.Suture_Get(Const.Suturesite_SubCutaneous), "brand")
   repair_types = modUtil.LoadCombo(cmbRepairType, modProceduresDBI.RepairType_Get(), "type")
   skin_suture_types = modUtil.LoadCombo(cmbcutaneousSuture, modProceduresDBI.Suture_Get(Const.SutureSite_Skin), "brand")
   ProgressNotesPage = New FProgressNotePage(VBox_ExcisionNotes)
   With ProgressNotesPage
      .Vbox_PreviousNotes.Visible = False
      .HBox_HealthIssue.Visible = False
      .Set_fk_section(const.cSection_Excisions)
      .Init(currentconsult)
      .Set_ExternalTransaction() 'don't allow a commitTrans in progress notes. this module will save them
   End With
   With cvwSkinProcedures 
      .Columns.count = 3
      .Columns[0].width = 100
   End With
  Try Settings_Load()
  default_provider_Get()         'get default pathology provider for user
  
 ' Existing_Excision_Defaults_Get()
  SkinProcedures_Refresh()
  Procedure_New()       'default to editing mode for new excision
End

Public Sub Existing_Excision_Defaults_Get()
   '---------------------------------------------------------------------
   'Gets the defaults for what staff member usually uses for the excision
   'There is only one default in the collection, retreived 'keyed', so 
   'the For Next loop will remove the key to make it a plain collection
   'This is the 'old_data' used later during save to compare to any 
   'changes the user may make if chooses to re-save defaults which will 
   'be re-collected in current_exicision_defaults during the save()
   '---------------------------------------------------------------------
  For Each Existing_Excision_Defaults In modProceduresDBI.staff_skin_excision_defaults_get(modDBConnect.currentUser!fk_staff)
  Next
 ' current_exicision_defaults = modUtil.Copy_Collection(Staff_Members_Excision_Defaults)
  
End

Public Sub SkinProcedures_Refresh()
   '------------------------------------------------------------------
   'PURPOSE    :Refresh the list of procedures
   'NOTES      :Because we an have 0-9 images per excision there is a
   '            one to many relationship between
   '            clin_procedures.skin_procedures and
   '            clin_procedures.link_images_procedures
   '            the images will be fetched 'on the fly'
   '------------------------------------------------------------------
   Dim proc As Collection 
   currentconsult.Refresh("skin_procedures")
   procedures = currentconsult!skin_procedures
   cvwSkinProcedures.Clear()           'clear the list    
   For Each proc In procedures
            cvwSkinProcedures.Add(proc!pk_view, 0)
            cvwSkinProcedures[proc!pk_view][0] = Format(proc!date, "dd/mm/yyyy")
            If proc!actual_diagnosis <> "" Then 
                  cvwSkinProcedures[proc!pk_view][2] = proc!actual_diagnosis
            Else
            
             cvwSkinProcedures[proc!pk_view][1] = "*"
                  cvwSkinProcedures[proc!pk_view][2] = proc!provisional_diagnosis
            End If
   Next
   DataChange_Update_Indicators(False) 
End

Public Sub DataChange_Update_Indicators(flag As Boolean)
   '--------------------------------------------------
   'Adds or removes padding around edit area and lists
   'to indicate if data is changed and unsaved
   '--------------------------------------------------
  If flag Then
      Vbox_EditArea.Padding = 1
   Else
      Vbox_EditArea.Padding = 0
    End If

End

Public Sub default_provider_Get()
  
   collection_members = modRequestsDBI.Provider_Get_Default_For_Request_type(const.Request_Type_Pathology)
   If collection_Members.count Then 
   For Each collection_member In collection_members
       default_provider = collection_member
       fk_user_provider_defaults = default_provider!pk_default
       lblOrganisation.text = "(" & default_provider!organisation & ")" 
       fk_branch = default_provider!fk_default_branch
   Next
   End If
  
End

Public Sub Reset_Fonts()
   '-----------------------------------------------------------------------------
   'PURPOSE     :If application.fonts has been changed, then the labels could
   '            no longer be wide enough so the display would look funny
   '           
   'HOW IT WORKS:loop through all the labels on the form and make sure they
   '             are correct size.LblMeasure is a hidden control.
   'NB:         :Resize those labels in the gui with autoresize = false
   '             I have set ones I don't want to be resized manually by this
   '             routine too auto-resize = True - ie they will do it themselves
   '-----------------------------------------------------------------------------
   Dim hCtrl As Control
   Dim ABox As HBox
   Dim lbl As Label
  
   For Each Hctrl In VBox_EditArea.Children
    If hctrl Is Hbox Then
       Abox = hctrl
       For Each hctrl In Abox.Children
          If hctrl Is Label Then
             lbl = hctrl
              If lbl.AutoResize = False Then
                lbl.width = lblmeasure.Width 
             End If   
             Break
          End If
       Next
    End If
   Next
End


Public Sub Diagnosis_Get()
   ' Dim $Result As Result 
   ' 'have a look at all these routines and find a way to make them all the 
   ' 'same code
   ' If Len(Last.text) = 0 Then 
   '    listview1.Visible = False
   '    Return 
   ' End If
   ' 
   ' $Result = modCodingDBI.Get_Terms(Trim(txtProvisionalDiagnosis.text))
   '    ' Print "got them'"
   '    If $Result.count Then 
   '      listview1.Clear
   '       For Each $Result 
   '                  'strResult = $Result!description
   '                  If $Result.count = 1 Then 
   '                   txtProvisionalDiagnosis.text = $Result!description
   '                   listview1.Visible = False
   '                   'rblateralisationleft.SetFocus
   '                   Return
   '                   End If
   '                   
   '                  Print $Result!description
   '                  listview1.Add(Str$($Result!description), $Result!description)
   '                  $Result.MoveNext
   '              
   '                
   '         Next 
   '         listview1.Raise
   '       listview1.Visible = True
   '    Else 
   '        'empty recordset
   '       listview1.Visible = False
   '        
   '    End If     
   ' 

End Sub 

' Public Sub Procedure_Selection(action As String, Optional calling_control As String)
'    Dim x As Integer
'    Select Case action
'    Case "get"
'          '-----------------------------------------
'          'Gets a list of sites for the excision
'          '-----------------------------------------
'          Listview1.Clear()
'          If Trim(txtProcedureType.text) = "" Then Return 
'          collection_Members = modProceduresDBI.Procedures_Get_Type(Trim(txtProcedureType.text))
'        
'          '-----------------------------------------------------------------
'          'Ifcollection_Member  exist to match the text, auto-select or show a list
'          '-----------------------------------------------------------------
'          If collection_Members.count Then 
'          '   x = 0
'             For Each Collection_Member In collection_Members
'                ' lblmeasure.text = Collection_Member!type
'                 
'               '  If lblmeasure.width > x Then
'                '    x = lblmeasure.width
'               '  Endif
'                    listview1.Add(Collection_Member!pk, Collection_Member!type)
'             Next 
'             ' If collection_Members.count = 1 Then 
'             '    site_Selection("accept")
'             '  End If
'             Listview1.Visible = True
'           '  listview1.width = lblmeasure.Width
'             Listview1.Raise
'             Listview1.tag = txtProcedureType
'             Return 
'          Else
'             '---------------------------------------------------------------------
'             'The text user has typed in dosn't exist yet in common.lu_occupations
'             'i.e this is a new occupation, will handle that later
'             '---------------------------------------------------------------------
'          listview1.Visible = False  
'          End If
'         
'    Case "accept"
'       '----------------------------------------------------------------------
'       'CALLED BY: 'user hitting < enter > In txtProcedure ie editarea_keypress
'       '            user hitting < enter > on the popup list Of names
'       '            user double clicking on the popup list Of names
'       '----------------------------------------------------------------------
'       bExit = True
'       Select Case calling_control
'       Case "textbox"
'          '-----------------------------------------------------------------
'          'User could have either: typed in a new occupation or
'          '                        fully typed in an existing occupation but 
'          '                        not scrolled on to the list
'          '-----------------------------------------------------------------
'          If listview1.Visible Then
'             listview1.MoveFirst
'             For x = 0 To listview1.count - 1
'                If Lower(Trim(txtProcedureType.text)) = Lower(listview1.item.text) Then
'                  Site_Selection("accept", "list")
'                   Return
'                End If
'                listview1.MoveNext()
'             Next
'              'mm......body part not found, 
'              fk_lu_procedure_type = 0
'                            
'          Else
'             '------------------------------------------------------------
'             'User has hit <enter> in the textbox, the list is not visible
'             'so this must be a new occupation
'             '------------------------------------------------------------
'              fk_lu_procedure_type = 0
'           End If
'           'If get to here then this is a new occupation and will be saved later
'      Case "list"
'          '-----------------------------------------------------------
'          'Routine called by user clicking on list or pressing <enter>
'          '-----------------------------------------------------------
'          bExit = False
'          Listview1.MoveCurrent   'set internal cursor to match marquee
'          txtProcedureType.text = collection_Members[Listview1.Item.key]!type
'          fk_lu_procedure_type = collection_Members[Listview1.Item.key]!pk
'          listview1.Visible = False
'   
'       End Select
'       txtRepairType.SetFocus()
'     End Select
' End

Public Sub Skin_Suture_Selection(action As String, Optional calling_control As String)
   ' Dim x As Integer
   ' Select Case action
   ' Case "get"
   '       '-----------------------------------------
   '       'Gets a list of sites for the excision
   '       '-----------------------------------------
   '       Listview1.Clear()
   '       If Trim(txtSkinSuture.text) = "" Then Return 
   '       collection_Members = modProceduresDBI.Suture_Get(Trim(txtSkinSuture.text), Const.SutureSite_Skin)
   '     
   '       '-----------------------------------------------------------------
   '       'Ifcollection_Member  exist to match the text, auto-select or show a list
   '       '-----------------------------------------------------------------
   '       If collection_Members.count Then 
   '       '   x = 0
   '          For Each Collection_Member In collection_Members
   '             ' lblmeasure.text = Collection_Member!brand
   '              
   '            '  If lblmeasure.width > x Then
   '             '    x = lblmeasure.width
   '            '  Endif
   '                 listview1.Add(Collection_Member!pk, Collection_Member!brand)
   '          Next 
   '          ' If collection_Members.count = 1 Then 
   '          '    site_Selection("accept")
   '          '  End If
   '          Listview1.Visible = True
   '        '  listview1.width = lblmeasure.Width
   '          Listview1.Raise
   '          Listview1.tag = txtSkinSuture
   '          Return 
   '       Else
   '          '---------------------------------------------------------------------
   '          'The text user has typed in dosn't exist yet in common.lu_occupations
   '          'i.e this is a new occupation, will handle that later
   '          '---------------------------------------------------------------------
   '       listview1.Visible = False  
   '       End If
   '      
   ' Case "accept"
   '    '----------------------------------------------------------------------
   '    'CALLED BY: 'user hitting < enter > In txtSkinSuture ie editarea_keypress
   '    '            user hitting < enter > on the popup list Of names
   '    '            user double clicking on the popup list Of names
   '    '----------------------------------------------------------------------
   '    bExit = True
   '    Select Case calling_control
   '    Case "textbox"
   '       '-----------------------------------------------------------------
   '       'User could have either: typed in a new occupation or
   '       '                        fully typed in an existing occupation but 
   '       '                        not scrolled on to the list
   '       '-----------------------------------------------------------------
   '       If listview1.Visible Then
   '          listview1.MoveFirst
   '          For x = 0 To listview1.count - 1
   '             If Lower(Trim(txtSkinSuture.text)) = Lower(listview1.item.text) Then
   '               Site_Selection("accept", "list")
   '                Return
   '             End If
   '             listview1.MoveNext()
   '          Next
   '           'mm......body part not found, 
   '           fk_skin_suture = 0
   '                         
   '       Else
   '          '------------------------------------------------------------
   '          'User has hit <enter> in the textbox, the list is not visible
   '          'so this must be a new occupation
   '          '------------------------------------------------------------
   '           fk_skin_suture = 0
   '        End If
   '        'If get to here then this is a new occupation and will be saved later
   '   Case "list"
   '       '-----------------------------------------------------------
   '       'Routine called by user clicking on list or pressing <enter>
   '       '-----------------------------------------------------------
   '       bExit = False
   '       Listview1.MoveCurrent   'set internal cursor to match marquee
   '       txtSkinSuture.text = collection_Members[Listview1.Item.key]!brand
   '       fk_skin_suture = collection_Members[Listview1.Item.key]!pk
   '       listview1.Visible = False
   ' 
   '    End Select
   '    txtDiameter.SetFocus()
   '  End Select
End

Public Sub Subcutaneous_Suture_Selection(action As String, Optional calling_control As String)
   ' Dim x As Integer
   ' Select Case action
   ' Case "get"
   '       '-----------------------------------------
   '       'Gets a list of sites for the excision
   '       '-----------------------------------------
   '       Listview1.Clear()
   '       If Trim(txtSubCutaneousSuture.text) = "" Then Return 
   '       collection_Members = modProceduresDBI.Suture_Get(Trim(txtSubCutaneousSuture.text), Const.Suturesite_SubCutaneous)
   '     
   '       '-----------------------------------------------------------------
   '       'Ifcollection_Member  exist to match the text, auto-select or show a list
   '       '-----------------------------------------------------------------
   '       If collection_Members.count Then 
   '       '   x = 0
   '          For Each Collection_Member In collection_Members
   '             ' lblmeasure.text = Collection_Member!type
   '              
   '            '  If lblmeasure.width > x Then
   '             '    x = lblmeasure.width
   '            '  Endif
   '                 listview1.Add(Collection_Member!pk, Collection_Member!brand)
   '          Next 
   '          ' If collection_Members.count = 1 Then 
   '          '    site_Selection("accept")
   '          '  End If
   '          Listview1.Visible = True
   '        '  listview1.width = lblmeasure.Width
   '          Listview1.Raise
   '          Listview1.tag = txtSubCutaneousSuture
   '          Return 
   '       Else
   '          '---------------------------------------------------------------------
   '          'The text user has typed in dosn't exist yet in common.lu_occupations
   '          'i.e this is a new occupation, will handle that later
   '          '---------------------------------------------------------------------
   '       listview1.Visible = False  
   '       End If
   '      
   ' Case "accept"
   '    '----------------------------------------------------------------------
   '    'CALLED BY: 'user hitting < enter > In txtSubCutaneousSuture ie editarea_keypress
   '    '            user hitting < enter > on the popup list Of names
   '    '            user double clicking on the popup list Of names
   '    '----------------------------------------------------------------------
   '    bExit = True
   '    Select Case calling_control
   '    Case "textbox"
   '       '-----------------------------------------------------------------
   '       'User could have either: typed in a new occupation or
   '       '                        fully typed in an existing occupation but 
   '       '                        not scrolled on to the list
   '       '-----------------------------------------------------------------
   '       If listview1.Visible Then
   '          listview1.MoveFirst
   '          For x = 0 To listview1.count - 1
   '             If Lower(Trim(txtSubCutaneousSuture.text)) = Lower(listview1.item.text) Then
   '               Site_Selection("accept", "list")
   '                Return
   '             End If
   '             listview1.MoveNext()
   '          Next
   '           'mm......body part not found, 
   '           fk_subcutaneous_suture = 0
   '                         
   '       Else
   '          '------------------------------------------------------------
   '          'User has hit <enter> in the textbox, the list is not visible
   '          'so this must be a new occupation
   '          '------------------------------------------------------------
   '           fk_subcutaneous_suture = 0
   '        End If
   '        'If get to here then this is a new occupation and will be saved later
   '   Case "list"
   '       '-----------------------------------------------------------
   '       'Routine called by user clicking on list or pressing <enter>
   '       '-----------------------------------------------------------
   '       bExit = False
   '       Listview1.MoveCurrent   'set internal cursor to match marquee
   '       txtSubCutaneousSuture.text = collection_Members[Listview1.Item.key]!brand
   '      fk_subcutaneous_suture = collection_Members[Listview1.Item.key]!pk
   '       listview1.Visible = False
   ' 
   '    End Select
   '    txtSkinSuture.SetFocus()
   '  End Select
End


Public Sub Site_Selection(action As String, Optional calling_control As String)
   Dim x As Integer
   Select Case action
   Case "get"
         '-----------------------------------------
         'Gets a list of sites for the excision
         '-----------------------------------------
         Listview1.Clear()
         If Trim(txtSite.text) = "" Then Return 
         collection_Members = modProceduresDBI.excisions_get_site(Trim(txtSite.text))
       
         '-----------------------------------------------------------------
         'Ifcollection_Member  exist to match the text, auto-select or show a list
         '-----------------------------------------------------------------
         If collection_Members.count Then 
         '   x = 0
            For Each Collection_Member In collection_Members
               ' lblmeasure.text = Collection_Member!site
                
              '  If lblmeasure.width > x Then
               '    x = lblmeasure.width
              '  Endif
                   listview1.Add(Collection_Member!pk, Collection_Member!site)
            Next 
            ' If collection_Members.count = 1 Then 
            '    site_Selection("accept")
            '  End If
            Listview1.Visible = True
          '  listview1.width = lblmeasure.Width
            Listview1.Raise
            Listview1.tag = txtSite
            Return 
         Else
            '---------------------------------------------------------------------
            'The text user has typed in dosn't exist yet in common.lu_occupations
            'i.e this is a new occupation, will handle that later
            '---------------------------------------------------------------------
         listview1.Visible = False  
         End If
        
   Case "accept"
      '----------------------------------------------------------------------
      'CALLED BY: 'user hitting < enter > In txtSite ie editarea_keypress
      '            user hitting < enter > on the popup list Of names
      '            user double clicking on the popup list Of names
      '----------------------------------------------------------------------
      bExit = True
      Select Case calling_control
      Case "textbox"
         '-----------------------------------------------------------------
         'User could have either: typed in a new occupation or
         '                        fully typed in an existing occupation but 
         '                        not scrolled on to the list
         '-----------------------------------------------------------------
         If listview1.Visible Then
            listview1.MoveFirst
            For x = 0 To listview1.count - 1
               If Lower(Trim(txtSite.text)) = Lower(listview1.item.text) Then
                 Site_Selection("accept", "list")
                 bexit = False
                  Return
               End If
               listview1.MoveNext()
            Next
             'mm......body part not found, 
             fk_lu_site = 0
                           
         Else
            '------------------------------------------------------------
            'User has hit <enter> in the textbox, the list is not visible
            'so this must be a new occupation
            '------------------------------------------------------------
             fk_lu_site = 0
          End If
          'If get to here then this is a new occupation and will be saved later
     Case "list"
         '-----------------------------------------------------------
         'Routine called by user clicking on list or pressing <enter>
         '-----------------------------------------------------------
         bExit = False
         Listview1.MoveCurrent   'set internal cursor to match marquee
         txtSite.text = collection_Members[Listview1.Item.key]!site
         fk_lu_site = collection_Members[Listview1.Item.key]!pk
         listview1.Visible = False
  
      End Select
      txtLocalisation.SetFocus()
    End Select
End

Public Sub Complications_Selection(action As String, Optional calling_control As String)
   '--------------------------------------------------------------------------------------
   'Get list of complications user can select from, or accept a term from the list showing
   'complications will be  a string list delimited by ';' eg infection;dehiscence;
   '--------------------------------------------------------------------------------------
   Dim x As Integer
   Dim searchtext As String 
   Dim existingtext As String = Trim(txtComplications.text) 
   Dim current_complications As String[]
   Select Case action
   Case "get"
         Listview1.Clear()
         '----------------------------------------------------------------------------
         'eg if text = infection;dehiscence; then leaves routine
         '   if text = infection;dehiscence;b (user just starting to type say bleeding
         '   then searchs of 'b'
         '----------------------------------------------------------------------------
         If existingtext = "" Or Right(existingtext) = ";" Then Return  
         current_complications = Split(existingtext, ";", "", True)
         If current_complications[current_complications.count - 1] = "" Then
            listview1.Visible = False  
            Return 
         End If  
         collection_Members = modProceduresDBI.complications_Get(current_complications[current_complications.count - 1])
         If collection_Members.count Then 
            For Each Collection_Member In collection_Members
                    listview1.Add(Collection_Member!pk, Collection_Member!complication)
            Next 
            Listview1.Visible = True
            Listview1.Raise
            Listview1.tag = txtComplications
            Print txtComplications.Text
            Return 
         Else
            listview1.Visible = False  
         End If
        
   Case "accept"
      '----------------------------------------------------------------------
      'CALLED BY: 'user hitting < enter > In txtComplications ie editarea_keypress
      '            user hitting < enter > on the popup list Of names
      '            user double clicking on the popup list Of names
      '----------------------------------------------------------------------
      bExit = True
      Print txtComplications.Text
      Select Case calling_control
      Case "textbox"
         '-----------------------------------------------------------------
         'User could have either: typed in a new occupation or
         '                        fully typed in an existing occupation but 
         '                        not scrolled on to the list
         '-----------------------------------------------------------------
         If listview1.Visible Then
            listview1.MoveFirst
            For x = 0 To listview1.count - 1
               If Lower(Trim(txtComplications.text)) = Lower(listview1.item.text) Then
                 complications_Selection("accept", "list")
                 bexit = False
                  Return
               End If
               listview1.MoveNext()
            Next
         End If
          'If get to here then this is a new occupation and will be saved later
     Case "list"
         '-----------------------------------------------------------
         'Routine called by user clicking on list or pressing <enter>
         '-----------------------------------------------------------
         bExit = True
         Listview1.MoveCurrent   'set internal cursor to match marqueetxtComplications.text
         If Right(Trim(txtComplications.text)) <> ";" And Len(Trim(txtComplications.text)) <> 0 Then
           ' txtComplications.text = collection_Members[Listview1.Item.key]!complication & ";"
             bExit = True
             'cat;rat;n
             txtComplications.text = Trim_right(txtComplications.text, ";") & collection_Members[Listview1.Item.key]!complication & ";"
             txtComplications.pos = Len(Trim(txtComplications.text))
             txtComplications.SetFocus()
         End If
         listview1.Clear
         listview1.Visible = False  
      End Select
      bExit = False  
    End Select
End

Public Function Trim_Right(sometext As String, delimiter As String) As String 
   Dim bits As String[]
   Dim x As Integer
   Dim newstring As String
   
   bits = Split(sometext, delimiter)
   For x = 0 To bits.count - 2
     newstring &= bits[x] & delimiter
   Next
   Return newstring  
End

Public Sub RepairType_Selection(action As String, Optional calling_control As String)
   ' Dim x As Integer
   ' Select Case action
   ' Case "get"
   '       '-----------------------------------------
   '       'Gets a list of sites for the excision
   '       '-----------------------------------------
   '       Listview1.Clear()
   '       If Trim(txtRepairType.text) = "" Then Return 
   '       collection_Members = modProceduresDBI.RepairType_Get(Trim(txtRepairType.text))
   '     
   '       '-----------------------------------------------------------------
   '       'Ifcollection_Member  exist to match the text, auto-select or show a list
   '       '-----------------------------------------------------------------
   '       If collection_Members.count Then 
   '       '   x = 0
   '          For Each Collection_Member In collection_Members
   '             ' lblmeasure.text = Collection_Member!type
   '              
   '            '  If lblmeasure.width > x Then
   '             '    x = lblmeasure.width
   '            '  Endif
   '                 listview1.Add(Collection_Member!pk, Collection_Member!type)
   '          Next 
   '          ' If collection_Members.count = 1 Then 
   '          '    site_Selection("accept")
   '          '  End If
   '          Listview1.Visible = True
   '        '  listview1.width = lblmeasure.Width
   '          Listview1.Raise
   '          Listview1.tag = txtRepairType
   '          Return 
   '       Else
   '          '---------------------------------------------------------------------
   '          'The text user has typed in dosn't exist yet in common.lu_occupations
   '          'i.e this is a new occupation, will handle that later
   '          '---------------------------------------------------------------------
   '       listview1.Visible = False  
   '       End If
   '      
   ' Case "accept"
   '    '----------------------------------------------------------------------
   '    'CALLED BY: 'user hitting < enter > In txtRepairType ie editarea_keypress
   '    '            user hitting < enter > on the popup list Of names
   '    '            user double clicking on the popup list Of names
   '    '----------------------------------------------------------------------
   '    bExit = True
   '    Select Case calling_control
   '    Case "textbox"
   '       '-----------------------------------------------------------------
   '       'User could have either: typed in a new occupation or
   '       '                        fully typed in an existing occupation but 
   '       '                        not scrolled on to the list
   '       '-----------------------------------------------------------------
   '       If listview1.Visible Then
   '          listview1.MoveFirst
   '          For x = 0 To listview1.count - 1
   '             If Lower(Trim(txtRepairType.text)) = Lower(listview1.item.text) Then
   '               Site_Selection("accept", "list")
   '                Return
   '             End If
   '             listview1.MoveNext()
   '          Next
   '           'mm......body part not found, 
   '           fk_lu_repair_type = 0
   '                         
   '       Else
   '          '------------------------------------------------------------
   '          'User has hit <enter> in the textbox, the list is not visible
   '          'so this must be a new occupation
   '          '------------------------------------------------------------
   '           fk_lu_repair_type = 0
   '        End If
   '        'If get to here then this is a new occupation and will be saved later
   '   Case "list"
   '       '-----------------------------------------------------------
   '       'Routine called by user clicking on list or pressing <enter>
   '       '-----------------------------------------------------------
   '       bExit = False
   '       Listview1.MoveCurrent   'set internal cursor to match marquee
   '       txtRepairType.text = collection_Members[Listview1.Item.key]!type
   '       fk_lu_repair_type = collection_Members[Listview1.Item.key]!pk
   '       listview1.Visible = False
   '    End Select
   '    txtSubCutaneousSuture.SetFocus()
   '  End Select
End

Public Sub Skin_Preparation_Selection(action As String, Optional calling_control As String)
   ' Dim x As Integer
   ' Select Case action
   ' Case "get"
   '       '-----------------------------------------
   '       'Gets a list of preparations for the excision
   '       '-----------------------------------------
   '       Listview1.Clear()
   '       If Trim(txtSkinPreparation.text) = "" Then Return 
   '       collection_Members = modProceduresDBI.Skin_Preparation_Get(Trim(txtSkinPreparation.text))
   '     
   '       '-----------------------------------------------------------------
   '       'Ifcollection_Member  exist to match the text, auto-select or show a list
   '       '-----------------------------------------------------------------
   '       If collection_Members.count Then 
   '          For Each Collection_Member In collection_Members
   '             lblmeasure.text = Collection_Member!preparation
   '              If lblmeasure.width > x Then
   '                 x = lblmeasure.width
   '              Endif
   '            
   '               listview1.Add(Collection_Member!pk, Collection_Member!preparation)
   '          Next 
   '          ' If collection_Members.count = 1 Then 
   '          '    preparation_Selection("accept")
   '          '  End If
   '          Listview1.Visible = True
   '          Listview1.Raise
   '          listview1.width = lblmeasure.Width + 20 'width about of scrollbar
   '          Listview1.tag = txtSkinPreparation
   '          Return 
   '       Else
   '          '---------------------------------------------------------------------
   '          'The text user has typed in dosn't exist yet in common.lu_occupations
   '          'i.e this is a new occupation, will handle that later
   '          '---------------------------------------------------------------------
   '       listview1.Visible = False  
   '       End If
   '      
   ' Case "accept"
   '    '----------------------------------------------------------------------
   '    'CALLED BY: 'user hitting < enter > In txtSkinPreparation ie editarea_keypress
   '    '            user hitting < enter > on the popup list Of names
   '    '            user double clicking on the popup list Of names
   '    '----------------------------------------------------------------------
   '    bExit = True
   '    Select Case calling_control
   '    Case "textbox"
   '       '-----------------------------------------------------------------
   '       'User could have either: typed in a new occupation or
   '       '                        fully typed in an existing occupation but 
   '       '                        not scrolled on to the list
   '       '-----------------------------------------------------------------
   '       If listview1.Visible Then
   '          listview1.MoveFirst
   '          For x = 0 To listview1.count - 1
   '             If Lower(Trim(txtSkinPreparation.text)) = Lower(listview1.item.text) Then
   '               Skin_Preparation_Selection("accept", "list")
   '                Return
   '             End If
   '             listview1.MoveNext()
   '          Next
   '           'mm......body part not found, 
   '           fk_lu_skin_preparation = 0
   '                         
   '       Else
   '          '------------------------------------------------------------
   '          'User has hit <enter> in the textbox, the list is not visible
   '          'so this must be a new occupation
   '          '------------------------------------------------------------
   '           fk_lu_skin_preparation = 0
   '        End If
   '        'If get to here then this is a new occupation and will be saved later
   '   Case "list"
   '       '-----------------------------------------------------------
   '       'Routine called by user clicking on list or pressing <enter>
   '       '-----------------------------------------------------------
   '       bExit = False
   '       Listview1.MoveCurrent   'set internal cursor to match marquee
   '       txtSkinPreparation.text = collection_Members[Listview1.Item.key]!preparation
   '       fk_lu_skin_preparation = collection_Members[Listview1.Item.key]!pk
   '       listview1.Visible = False
   ' 
   '    End Select
   '   txtAnaesthesia.SetFocus()
   '  End Select
End

Public Sub Anaesthetic_Selection(action As String, Optional calling_control As String)
   ' Dim x As Integer
   ' Dim name_width As Integer
   ' Select Case action
   ' Case "get"
   '       '-----------------------------------------
   '       'Gets a list of preparations for the excision
   '       '-----------------------------------------
   '       Listview1.Clear()
   '       If Trim(txtAnaesthesia.text) = "" Then Return 
   '       collection_Members = modProceduresDBI.Anaesthetic_Get(Trim(txtAnaesthesia.text))
   '     
   '       '-----------------------------------------------------------------
   '       'Ifcollection_Member  exist to match the text, auto-select or show a list
   '       '-----------------------------------------------------------------
   '       If collection_Members.count Then 
   '          For Each Collection_Member In collection_Members
   '              lblmeasure.text = Collection_Member!agent
   '              If lblmeasure.width > x Then
   '                 x = lblmeasure.width
   '              Endif
   '              listview1.Add(Collection_Member!pk, Collection_Member!agent)
   '          Next 
   '          ' If collection_Members.count = 1 Then 
   '          '    preparation_Selection("accept")
   '          '  End If
   '          Listview1.Visible = True
   '          listview1.width = lblmeasure.Width + 20 
   '          Listview1.Raise
   '          Listview1.tag = txtAnaesthesia
   '          Return 
   '       Else
   '          '---------------------------------------------------------------------
   '          'The text user has typed in dosn't exist yet in common.lu_occupations
   '          'i.e this is a new occupation, will handle that later
   '          '---------------------------------------------------------------------
   '       listview1.Visible = False  
   '       End If
   '      
   ' Case "accept"
   '    '----------------------------------------------------------------------
   '    'CALLED BY: 'user hitting < enter > In txtAnaesthesia ie editarea_keypress
   '    '            user hitting < enter > on the popup list Of names
   '    '            user double clicking on the popup list Of names
   '    '----------------------------------------------------------------------
   '    bExit = True
   '    Select Case calling_control
   '    Case "textbox"
   '       '-----------------------------------------------------------------
   '       'User could have either: typed in a new occupation or
   '       '                        fully typed in an existing occupation but 
   '       '                        not scrolled on to the list
   '       '-----------------------------------------------------------------
   '       If listview1.Visible Then
   '          listview1.MoveFirst
   '          For x = 0 To listview1.count - 1
   '             If Lower(Trim(txtAnaesthesia.text)) = Lower(listview1.item.text) Then
   '               Skin_Preparation_Selection("accept", "list")
   '                Return
   '             End If
   '             listview1.MoveNext()
   '          Next
   '           'mm......body part not found, 
   '           fk_lu_anaesthetic_agent = 0
   '                         
   '       Else
   '          '------------------------------------------------------------
   '          'User has hit <enter> in the textbox, the list is not visible
   '          'so this must be a new occupation
   '          '------------------------------------------------------------
   '           fk_lu_anaesthetic_agent = 0
   '        End If
   '        'If get to here then this is a new occupation and will be saved later
   '   Case "list"
   '       '-----------------------------------------------------------
   '       'Routine called by user clicking on list or pressing <enter>
   '       '-----------------------------------------------------------
   '       bExit = False
   '       Listview1.MoveCurrent   'set internal cursor to match marquee
   '       txtAnaesthesia.text = collection_Members[Listview1.Item.key]!agent
   '       fk_lu_anaesthetic_agent = collection_Members[Listview1.Item.key]!pk
   '       listview1.Visible = False
   ' 
   '    End Select
   '   txtRepairType.SetFocus()
   '   
   '  End Select
End



Public Sub ListView1_KeyPress()
  If Key.code = Key.Return Then 
     ListView1_DblClick
     End If 
 
End

Public Sub Thumb_Create(picfile As String, pb As Picturebox)
  'Dim img As Image
  Dim newPicture As Result
  Dim pictureData As String
  Dim scale As Float
  Dim eTime As Float
  Dim img As Image
  Dim thumbSize As Integer = pb.width 
  Dim tempfile As String = Temp() & ".png"
  img = Image.Load(picfile)
  img.Save(tempFile)
  If img.Width > thumbSize Or img.Height > thumbSize Then 
    ' Calc factor to scale isotropic
    scale = Min(ThumbSize / img.Width, ThumbSize / img.Height)
    img = img.Stretch(img.Width * scale, img.Height * scale)
    img.Save(tempFile)
  End If
  pb.Picture = picture.Load(tempfile)
End

Public Sub Thumb_Delete()
   '---------------------------------------
   'Removes a thumb from the thumb palette
   'and hence also from Picturebox1 and the
   'pictures collection 
   '---------------------------------------
   pictures.Remove(currentthumb!picturebox.tag)
   currentthumb!picturebox.picture = Null    'remove the picture
   currentthumb!picturebox.tag = ""          'and the tag
   PictureBox1.picture = Null                'and the main picture                
   PictureBox1.tag = ""                      'and its tag
   currentthumb!picturebox.Refresh()         'remove picture but
   Wait                                      'force visual update
 
  
End



Public Sub ListView1_DblClick()

   listview1.MoveCurrent
  ' Last.tag.text = listview1.Item.Text
   Select Case ListView1.tag.tag
   Case "site"
      site_Selection("accept", "list")
   Case "provisional diagnosis"
          txtSurgicalPack.SetFocus
   Case "skin preparation"
     Skin_Preparation_Selection("accept", "list")
   ' Case "procedure type"
   '    Procedure_Selection("accept", "list")
   Case "repair type"
      RepairType_Selection("accept", "list")
   Case "anaesthesia"
      Anaesthetic_Selection("accept", "list")
   Case "subcutaneous suture"
        Subcutaneous_Suture_Selection("accept", "list")
   Case "skin suture"
       Skin_Suture_Selection("accept", "list")
   Case "complications"
       Complications_Selection("accept", "list")
  End Select
   
   listview1.Visible = False  

End

Public Sub rbLateralisation_Click()
   If bexit = True Then Return 
 
   Select Case Last.tag
  Case "not applicable"
   End Select

End

Public Sub EditArea_TextBox_GotFocus()
   Last.BackGround = Color.rgb(95, 255, 175)
   With listview1 
     .top = Last.Parent.top + Last.Parent.height
     .left = Last.left + VBox_EditArea.Padding
     .visible = False
     .clear
   End With
   Select Case Last.tag
   Case "provisional diagnosis", "actual diagnosis"
      With FTerms
            .top = Last.Parent.top + Vbox_EditArea.padding + Hbox_Form_Heading.height + Last.height
            .width = Last.width
            .left = Last.left
            .height = Vbox_EditArea.height - Last.Parent.top
            .raise
            .Visible = False  
            .tag = Last
            .NextControl = MenuButton1
       End With
   End Select
 
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   'Note - date of injury = string because could be e.g January 2009 
   Select Case tag
      Case "date"
          bKeyValid = modUtil.AllowKeys(Const.AllowKeys_Date_DWMY, keycode)
      Case "site", "surgical pack", "skin preparation", "anaesthesia", "subcutaneous suture", "skin suture"
          bKeyValid = True
      Case "notes", " review in months", "dermoscopy", "provisional diagnosis", "localisation", "complications", "actual diagnosis"
           bKeyValid = True
      Case "review in months"
          bKeyValid = modUtil.AllowKeys(Const.AllowKeys_Date_DWMY, keycode)
      Case "diameter" 
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersDecimal, keycode)
   End Select
   Return bKeyValid
End

Public Sub EditArea_Clear()
 Dim hCtrl As Control
  Dim hb As HBox
    Dim VB As VBox
     Dim PB As PictureBox
  bexit = True
  modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
  '--------------------
  'Now clear the thumbs
  '--------------------
   For Each hCtrl In Vbox_Thumbs.children
       If hctrl Is Hbox Then
          HB = hctrl
          For Each hctrl In HB.Children
             If hCtrl Is VBox Then
               VB = hctrl
               VB.Padding = 0
               For Each hctrl In VB.Children
                   If hctrl Is PictureBox Then
                      PB = hctrl
                      With PB
                        .picture = Null
                        .tag = "" 
                        .Refresh
                      End With
                    End If
                Next
             End If
          Next
       End If
   Next
   Wait  'Finally wait until screen the thumbs are refreshed
   '--------------------------
   'Now clear the main picture
   '--------------------------
   Picture_Clear()
   If Vbox_DrawEditor.Visible Then
       FDraw_Show(False)
   End If   
   bexit = False
End 


Public Function Procedure_Valid() As Boolean
   '-------------------------------------------------
   'Do some sort of validation, but more towards the 
   'medico-legal and at least a site
   '------------------------------------------------  
  If Not IsDate(txtDate.text) Then
      txtDate.SetFocus()
      Return False
  End If 

  If fk_lu_procedure_type < 0 Then
    Message.Info("Please select a valid type of procedure")
    cmbExcisionTypes.SetFocus()
    Return False
  End If 
  If Not txtSite.text Then
    txtSite.SetFocus()
    Return False
  Else
     If fk_lu_site = 0 Then
        Message.Info("Please select a valid site for the procedure")
        Return False
     End If
  End If 
  If Trim(txtProvisionalDiagnosis.text) = "" Then
     txtProvisionalDiagnosis.SetFocus()
     Return False
  End If
  '-------------------------------------------
  'Linkages are all important, so enforce this
  '-------------------------------------------
   If Trim(txtHealthIssue.text) = "" Then
      Message.Info("Please select a health issue to link to this request\nor link to 'General Notes'")
      MenuButton1.SetFocus()
      Return False
   End If
  Return True
  
End

Public Sub Procedure_New()
  
   EditArea_Clear()    'clear edit area
   bExit = True
   mnuHealthIssues_Refresh() 'refresh the popup health issues menu
   proc = New Collection
   procedure_notes = New Collection
   dermoscopy_notes = New Collection
   pictures = New Collection 
   complications = New Collection 
   CurrentPicture = New Collection 
   txtPerformedBy.text = modDBConnect.currentUser!title & " " & modDBConnect.currentuser!wholename
  
   fk_lu_site = 0
   fk_progressnote_user = -1
   fk_progressnote_auto = -1
   pk_view = -1
   fk_actual_diagnosis = 0
   fk_provisional_diagnosis = 0
   fk_pasthistory = 0 ' general notes linkage
   txtHealthIssue.text = "General Notes"
   Existing_Excision_Defaults = New Collection 
   cmbExcisionTypes.index = cmbExcisionTypes.Find("excision")
  
   If Existing_Excision_Defaults.count Then
      fk_lu_skin_preparation = Existing_Excision_Defaults!fk_lu_skin_preparation
      fk_lu_anaesthetic_agent = Existing_Excision_Defaults!fk_lu_anaesthetic_agent
      fk_lu_procedure_type = Existing_Excision_Defaults!fk_lu_procedure_type
      fk_lu_repair_type = Existing_Excision_Defaults!fk_lu_repair_type
      fk_subcutaneous_suture = Existing_Excision_Defaults!fk_subcutaneous_suture
      fk_skin_suture = Existing_Excision_Defaults!fk_skin_suture
   Else
      fk_lu_skin_preparation = 0
      fk_lu_anaesthetic_agent = 0
      fk_lu_procedure_type = 0
      fk_lu_repair_type = 0
      fk_subcutaneous_suture = 0
      fk_skin_suture = 0
   End If
   surgical_pack = Extract_Collection(modProceduresDBI.surgical_pack_get_last())
   Try txtSurgicalPack.text = surgical_pack!identifier
   If Error Then
      pk_surgical_pack = 0
   Else
      pk_surgical_pack = surgical_pack!pk
   End If
   txtDate.text = Format(Now, "dd/mm/yyyy")
   Laterality = ""
   anterior_posterior = ""
   listview1.Visible = False
  ' modHTML.Clear_HTML(Histology_Viewer.Webview1)
   chkProcedureExplained.SetFocus()
   chkInsertInNotes.value = True 'default to insert the pictures
   Vbox_Outline.padding = 0
   bExit = False
   txtSite.SetFocus()
End

Public Sub EditArea_Resize_Labels()
   '-------------------------------------------------------------------
   'Adjust all lables as per current system font to make sure text fits
   '-------------------------------------------------------------------
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblmeasure)
End

Public Sub EditAreaButtons_Click()
   Select Case Last.tag
    Case "diagram"
         Picture_New()  'allows user to insert a body part diagram
    Case "new excision"
         Procedure_New()
    Case "accept"
         Save()
    Case "import a picture"
         Picture_Import()
    Case "print image"
    
    Case "edit image"
         Picture_Edit()    'edits an existing photograph
    End Select

End

Public Sub Picture_New() 
   '-------------------------------------------------------------------
   'Allow user to choose a body part diagram to show location of lesion
   'i.e no picture is passed, just show the editor
   '-------------------------------------------------------------------
   If Vbox_DrawEditor.Visible = False Then 
      CurrentPicture = New Collection
      FDraw_Show(True)
   End If
End


Public Function Picture_Insert_In_ProgressNotes() As String
   '---------------------------------------------------------------
   'Grabs a picture of all the thumbs in one, saves to a temp file
   'returns some html for the notes
   'FIXME USE UTIL.SCREENSHOT_GRAB(....)
   'use imagemagik to join 1-n piccies together and frame or
   'use imagemagick to frame the single main picture
   '---------------------------------------------------------------
   Dim tempfile As String 
   Dim I As New Image
   Dim P As New Picture
   Dim sPicPath As String 
   Dim H As Integer
   Dim W As Integer
   
   sPicPath = "<TABLE WIDTH=100%><TR><TD WIDTH=100%><P><IMG "
   If PictureBox1.tag <> "" Then
     sPicPath &= "pk_image=" & Pictures[PictureBox1.tag]!fk_image & " "
     H = PictureBox1.Picture.H
     W = PictureBox1.Picture.W
   Else
      Tempfile = Temp() & ".png" 
      P = HBox_MainPicture.Screenshot()
      P.Save(Tempfile) 
      sPicPath &= "src=\"" & tempfile & "\" "  
      H = P.h
      w = P.w
   End If
   sPicPath &= " NAME=\"graphics\" ALIGN=\"LEFT\" WIDTH=\"" & Str(W) & "\" HEIGHT=\"" & Str(H) & "\" BORDER=\"0\"></TR></TD></TABLE><BR><BR>" 
   Return sPicPath
' 
End

Public Sub thumbs_Menu()

  If Last.tag <> "" Then
     
      mnuThumbs.popup
  End If
End

Public Sub mnuThumbs_click()
  
  Select Case Last.tag
  Case "edit"
  Case "delete"
      Thumb_Delete()
  Case "help"
  End Select
  
End

Public Sub Picture_Edit()
   '--------------------------------------------------
   'Places the currentPicture into the drawing editor
   'which allows user to draw on the actual photograph
   '--------------------------------------------------
    If PictureBox1.tag = "" Then Return 
     FDraw_Show(True)
     FDraw_Edit_Picture()
End
Public Sub FDraw_Create_Observer()
   '-----------------------------------
   'Overide the btn_save event of Fdraw
   '-----------------------------------
   Dim hCtrl As Control
   Dim hToolButton As ToolButton
   hToolbutton = Fdraw.btnSave
   hObs = New Observer(hToolbutton) As "FDraw_ToolButtons"
   hToolbutton = Fdraw.tbHideForm
   hObs = New Observer(hToolbutton) As "FDraw_ToolButtons"
End

Public Sub FDraw_ToolButtons_Click()
   '------------------------------------------------------------
   'this event receives the save button event from the embedded
   'drawing editor
   '------------------------------------------------------------
     Stop Event
     Select Case Last.tag
     Case "hide form"
        ' Print "you clicked the hid form button"
          FDraw_Show(False)
     Case "insert picture"
           Picture_Retrieve()
     End Select
End
Public Sub Picture_Retrieve()
   '-------------------------------------------------
   'Retreives a modified picture from the draw editor
   'FIXME MAKE ME SMARTER E.G if no changes were made
   'to a picture then don't save
   '-------------------------------------------------
   Dim tempfile As String 
   If Not IsNull(Fdraw.$hImage) Then 
     tempFile = Temp() & ".png"
     Fdraw.$hImage.Save(Tempfile)
     PictureBox1.picture = Picture.Load(Tempfile)
     PictureBox1.tag = Tempfile
     CurrentPicture!path = tempfile
     CurrentPicture!picture = PictureBox1.picture
     CurrentPicture!fk_image = 0
     Thumb_Add(tempfile)
     pictures.Add(CurrentPicture, CurrentPicture!path)
   End If
   FDraw_Show(False)
  
End
Public Sub FDraw_Show(flag As Boolean)
   '---------------------  
   'Hides the draw editor
   '---------------------
 '  Object.Lock(VSplit_Right)
   Vbox_ExcisionNotes.Visible = Not flag 
   Vbox_DrawEditor.Visible = flag
  ' Try HSplit_Images.Layout = Settings["Excisions/HSplit_Images"]
   Try VSplit_Right.Layout = Settings["Excisions/VSplit_Right"]
  ' Object.Unlock(VSplit_Right)
  
End
Public Sub Picture_Clear()
   '---------------------------------------------
   ' Clears the picture from the main picture box
   '---------------------------------------------
   With PictureBox1
      .Picture = Null
      .tag = ""
      .Refresh()
   End With
   Wait        'otherwise, visually, picture won't disappear
  
  
End

Public Sub Picture_Import()
   '------------------------------------------------------------------------------------------
   'Allow user to import a picture(s), up to 9
   'Though all displayed and saved, only the one in the large picture box is placed into notes
   '------------------------------------------------------------------------------------------
   Dim filepath As String 
   Dim sMsg As String 
   Dim H As Integer
   Dim W As Integer
   Dim x As Integer 
   
   Dialog.Title = "Select Image File"
   Dialog.Filter = ["Pictures (*.png;*.jpg;*.jpeg)", "All files (*.*)"]
   If Dialog.OpenFile(True) Then Return
   If Dialog.Paths.count > 9 Then
     If Message.Warning("You have selected more than 9 pictures.\n\nThe first 9 will be kept and the rest discarded.", "Ok", "Cancel") = 2 Then Return 
   End If
  '-----------------------------------------------------------------------------------------------------------
   'Ok, Now try and load each image progressbar1.value = x / Pictures.countge as thumbnail, discard non-images
   '----------------------------------------------------------------------------------------------------------
   Inc Application.Busy
   With progressbar1
      .Visible = True
      .value = 0
   End With

   For Each FilePath In Dialog.Paths
      progressbar1.value = x / Dialog.Paths.count
      Try PictureBox1.picture = Picture.Load(FilePath) 
      If Error Then
        sMsg = "An error occurred, a file couldn't be loaded so it will be skipped.\n\n"
        sMsg &= "Filename:" & filepath & "\n\n"
        sMsg &= "Perhaps it was not a valid picture file?"
        Message.Info(sMsg)
        Picture_Clear()
      Else
         'Try PictureBox1.tag = Dialog.Path
         Thumb_Add(Filepath)
         Wait
         CurrentPicture = New Collection
         CurrentPicture!path = Filepath
         CurrentPicture!picture = Picturebox1.picture
         CurrentPicture!fk_image = 0
         Pictures.Add(CurrentPicture, filepath)
         Inc x
      End If
   Next 
   Goto Finished
Finished:
   Dec Application.Busy
   progressbar1.Visible = False
   Hbox_PictureOptions.Visible = True 
  
End

Public Sub Picture_Import_2June10()
   '---------------------------------
   'Allow user to import a picture(s)
   '---------------------------------  
   Dim filepath As String 
   Dim sMsg As String 
   Dim H As Integer
   Dim W As Integer
   Dim x As Integer 
   
   Dialog.Title = "Select Image File"
 '  Dialog.Filter = ["*.png", "Image Files", "*", "All files"]
 Dialog.Filter = ["Pictures (*.png;*.jpg;*.jpeg)", "All files (*.*)"]
   If Dialog.OpenFile(True) Then Return
   '--------------------------------------------------------
   'Warn if over the 9 permissable images have been selected
   '--------------------------------------------------------
   If Dialog.Paths.count > 9 Then
      Select Message.Warning("You have selected more than 9 pictures.\n\nThe first 9 will be kept and the rest discarded.", "Ok", "Cancel")
      Case 1
         Print "one"
      Case 2
         Print "two"
      End Select
   End If
   Wait
  
 '  Object.Lock(HSplit_Images)
   '----------------------------------------------------------------
   'Ok, Now try and load each ima progressbar1.value = x / Pictures.countge as thumbnail, discard non-images
   '----------------------------------------------------------------
   Inc Application.Busy
   With progressbar1
      .Visible = True
      .value = 0
   End With

   For Each FilePath In Dialog.Paths
     progressbar1.value = x / Dialog.Paths.count
      Try PictureBox1.picture = Picture.Load(FilePath) 
      If Error Then
        sMsg = "An error occurred, a file couldn't be loaded so it will be skipped.\n\n"
        sMsg &= "Filename:" & filepath & "\n\n"
        sMsg &= "Perhaps it was not a valid picture file?"
        Message.Info(sMsg)
        Picture_Clear()
        Goto Finished
      End If 
  
      Try PictureBox1.tag = Dialog.Path
      Thumb_Add(Filepath)
      Wait
      CurrentPicture = New Collection
      CurrentPicture!path = Filepath
      CurrentPicture!picture = Picturebox1.picture
      CurrentPicture!fk_image = 0
      Pictures.Add(CurrentPicture, filepath)
      Inc x
   Next 
   Goto Finished
Finished:
   Dec Application.Busy
   progressbar1.Visible = False
   Hbox_PictureOptions.Visible = True 
  
End
Public Sub Thumb_Add(sPath As String, Optional key As Integer = 0)
   '-----------------------------------
   'Adds a thumbnail of current picture
   '-----------------------------------
   Dim PB As PictureBox
   Dim hCtrl As Control
   Dim HB As HBox
   Dim VB As VBox
   '-----------------------------------------
   'Find the next available empty picture box
   '-----------------------------------------
   For Each hCtrl In Vbox_Thumbs.children
      If hctrl Is Hbox Then
         HB = hctrl
         For Each hctrl In HB.Children
            If hCtrl Is VBox Then
              VB = hctrl
               For Each hctrl In VB.Children
                  If hctrl Is PictureBox Then
                     PB = hctrl
                     If PB.tag = "" Then  'found an empty box
                        If key = 0 Then   'an as yet unsaved image
                           pb.tag = spath
                        Else
                           pb.tag = key   'key to Pictures collection if saved
                        End If
                        VB.padding = 1
                        Thumb_Create(spath, PB)
                        Return
                     Else
                        VB.Padding = 0
                     End If
                  End If
               Next
            End If
         Next
      End If
   Next
End 


Public Sub Thumb_Add_2June10(sPath As String)
   '-----------------------------------
   'Adds a thumbnail of current picture
   '-----------------------------------
   Dim PB As PictureBox
   Dim hCtrl As Control
   Dim HB As HBox
   Dim VB As VBox
   '-----------------------------------------
   'Find the next available empty picture box
   '-----------------------------------------
   For Each hCtrl In Vbox_Thumbs.children
      If hctrl Is Hbox Then
         HB = hctrl
         For Each hctrl In HB.Children
            If hCtrl Is VBox Then
              VB = hctrl
               For Each hctrl In VB.Children
                  If hctrl Is PictureBox Then
                     PB = hctrl
                     If PB.tag = "" Then  
                        pb.tag = sPath
                        VB.padding = 1
                        'found an empty picture box
                        Thumb_Create(spath, PB)
                      '  pictures.Add(sPath, sPath)
                        
                        Return
                     Else
                        VB.Padding = 0
                     End If
                  End If
               Next
            End If
         Next
      End If
   Next
End 
Public Sub Thumbs_Borders_Off()
   '-----------------------------------
   'Adds a thumbnail of current picture
   '-----------------------------------
   Dim PB As PictureBox
   Dim hCtrl As Control
   Dim HB As HBox
   Dim VB As VBox
   '-----------------------------------------
   'Find the next available empty picture box
   '-----------------------------------------
   For Each hCtrl In Vbox_Thumbs.children
      If hctrl Is Hbox Then
         HB = hctrl
         For Each hctrl In HB.Children
            If hCtrl Is VBox Then
              VB = hctrl
              VB.Padding = 0
            End If
         Next
      End If
   Next

End

Public Sub EditArea_TextBox_KeyPress()
 If bExit Then Return 
  '---------------------------------------------------------------
  'Validate key entry on a per-textbox basis, reject unwanted keys
  '---------------------------------------------------------------
  If Not EditAreaTextbox_ExcludeKeys(key.code, Last.tag) Then 
     Stop Event
     Return
  End If
  Select Case Key.Code
  Case key.Down
      If listview1.Visible Then
         listview1.MoveFirst
         listview1.SetFocus()
      End If
      If FTerms.Visible Then
         With FTerms.columnview1
               .MoveFirst
               .Item.Selected = True
               .SetFocus()
         End With
      End If
  Case Key.Return, Key.Tab
      Select Case Last.tag
      Case "date"
        chkProcedureExplained.SetFocus()
      Case "site"
         site_selection("accept", "textbox")
         txtLocalisation.SetFocus()
      Case "localisation"
         txtSurgicalPack.SetFocus()
      Case "surgical pack"
         txtDiameter.SetFocus()
      Case "diameter"
          txtDermoscopy.SetFocus()
      Case "dermoscopy"
           If InStr(Last.text, "\n") Then
             bExit = True
             Last.text = Replace(Last.text, "\n", "")
             Last.pos = 0
             bexit = False 
           End If
           txtNotes.SetFocus()
      Case "notes on lesion"
         txtProvisionalDiagnosis.SetFocus()
      Case "review in months"
      tbAccept.SetFocus()
      Case "provisional diagnosis"
           If Last.text = "" Then
             Last.SetFocus()
           Else
                tbAccept.SetFocus()
           End If
      End Select
  End Select
  

End

Public Sub EditArea_CheckBox_KeyPress()

  Select Case Key.Code
  Case Key.Return, Key.Tab
   Select Case Last.tag
   Case "procedure explained"
      chkConsentObtained.SetFocus()
   Case "consent obtained"
      chkSideEffectsExplained.SetFocus()
   Case "side effects explained"
         txtSite.SetFocus()
   Case "auto pathology"
   Case "referral"
  ' Case "dehiscence"
   '   chkInfection.SetFocus()
  ' Case "infection"
      ' chkBleeding.SetFocus()
  ' Case "bleeding"
      txtReviewMonths.Setfocus
   End Select
 End Select
End

Public Sub EditAreaButtons_KeyPress()
  EditAreaButtons_Click()
End

Public Sub EditArea_RadioButtons_KeyPress()

  Select Case Key.Code
  Case Key.Return, Key.Tab
   Select Case Last.tag
    Case "left"
       rbLateralisationRight.SetFocus()
    Case "right"
       rbLateralisationMidline.SetFocus()
    Case "midline"
      rbAnterior.SetFocus()
    Case "anterior"
       rbPosterior.SetFocus()
    Case "posterior"
        txtLocalisation.SetFocus()
    Case "localisation"
       txtSurgicalPack.SetFocus()
    Case "single layer"
    Case "two layer"
    Case "flap"
    Case "not applicable"
    Case "electronic"
    Case "paper"
   End Select
  End Select

End



Public Sub EditArea_TextBox_LostFocus()
 Last.BackGround = Color.rgb(255, 255, 255)
  Select Case Last.tag
  Case "date"
   If Not IsDate(Last.text) Then txtDate.text = ""
  End Select
  Last.pos = 0
End

Public Sub EditArea_TextBox_Change()
  If bexit Then Return 
  Vbox_Outline.padding = 1
  Select Case Last.tag
  Case ""
  End Select

End

Public Sub EditArea_TextBox_KeyRelease()
  Select Case Last.tag
  Case "site"
      Site_Selection("get")
  Case "skin preparation"
      Skin_Preparation_Selection("get")
  ' Case "procedure type"
  '    Procedure_Selection("get")
  Case "repair type"
      RepairType_Selection("get")
  Case "anaesthesia"
      Anaesthetic_Selection("get")
  Case "subcutaneous suture"
      Subcutaneous_Suture_Selection("get")
  Case "skin suture"
      Skin_Suture_Selection("get")
  Case "provisional diagnosis", "actual diagnosis"
      provisional_diagnosis_get(Last)
  Case "dermoscopy"
    If InStr(Last.text, "\n\n") Then
         Last.text = Replace(Last.text, "\n\n", "")
         txtNotes.SetFocus()
    End If
  Case "complications"
         Complications_Selection("get")
  Case "notes on lesion"
    If InStr(Last.text, "\n\n") Then
         Last.text = Replace(Last.text, "\n\n", "")
         txtProvisionalDiagnosis.SetFocus()
    End If
  End Select
End

Public Sub provisional_diagnosis_get(tb As Textbox)
  
   If Trim(tb.text) = "" Then
     FTerms.Hide()
     Return
  End If 
  FTerms.sSearchText = Trim(tb.text)
  FTerms.Terms_Get()
  
End



Public Sub mnuSkinProcedures_Click()
   Select Case Last.tag
   Case "edit"
      Procedure_Edit()
   Case "delete"
      Delete()
   Case "help"
   
   Case "preview request form"
   End Select
End

Public Sub Procedure_Edit()
   '-------------------------------------------------------------------------------
   'User is editing a procedure Set the view key, and load data into the textboxes
   '-------------------------------------------------------------------------------  
   Dim tempFile As String
   Dim tempPicture As Variant
   Dim Pic As Collection  
   Dim x As Integer
   bexit = True
   Procedure_new()
   Proc = New Collection
   cvwSkinProcedures.MoveCurrent 
   '------------------------------------------------------------------------------
   'Keep the keys for an existing procedure. Any key's set by the combo boxes
   'are re-read on saving the changes to an existing proceeding in Save()
   '  proc!fk_progressnote_auto = the computer generated note
   '  proc!fk_progressnote_user = notes the user entered on the progress note page
   '  if procedured edited the same day, then allow editing of progress notes
   '------------------------------------------------------------------------------
   
   pk_view = cvwSkinProcedures.item.key
   proc!fk_skin_procedure = currentconsult!skin_procedures[pk_view]!fk_skin_procedure
   proc!fk_consult = currentconsult!skin_procedures[pk_view]!fk_consult
   proc!fk_progressnote_auto = currentconsult!skin_procedures[pk_view]!fk_progressnote_auto
   proc!fk_progressnote_user = currentconsult!skin_procedures[pk_view]!fk_progressnote_user
   Try fk_progressnote_auto = proc!fk_progressnote_auto
   Try fk_progressnote_user = proc!fk_progressnote_user
   Try fk_lu_site = currentconsult!skin_procedures[pk_view]!fk_lu_site
   Try fk_actual_diagnosis = currentconsult!skin_procedures[pk_view]!fk_actual_diagnosis 
   Try fk_provisional_diagnosis = currentconsult!skin_procedures[pk_view]!fk_provisional_diagnosis
   Try proc!fk_document = currentconsult!skin_procedures[pk_view]!fk_document
   Try fk_pasthistory = currentconsult!skin_procedures[pk_view]!fk_pasthistory
   txtDate.text = Format(currentconsult!skin_procedures[pk_view]!date, "dd/mm/yyyy")
   txtPerformedBy.text = currentconsult!skin_procedures[pk_view]!title & " " & currentconsult!skin_procedures[pk_view]!wholename
   '-----------------------------------------------------------------------------------
   'If this excision is being edited within the scope of the current consultation
   'retrieve its associated progress note key for this consultation and allow editing
   '-----------------------------------------------------------------------------------
   If Not IsNull(currentconsult!skin_procedures[pk_view]!fk_progressnote_user) Then
      If Format(currentconsult!skin_procedures[pk_view]!date, "dd/mm/yyyy") <> Format(Now, "dd/mm/yyyy") Then 
     ' If currentconsult!skin_procedures[pk_view]!fk_consult <> currentconsult.GetPK() Then
         fk_progressnote_user = -1
         tePreviousNotes.RichText = currentconsult!skin_procedures[pk_view]!progressnote_user
      Else
         fk_progressnote_user = currentconsult!skin_procedures[pk_view]!fk_progressnote_user
         ProgressNotesPage.Notes_Editor.teNotes.RichText = currentconsult!skin_procedures[pk_view]!progressnote_user   
         ProgressNotesPage.SetPK(fk_progressnote_user)
        ' ProgressNotesPage.
      End If
   End If
   
   If currentconsult!skin_procedures[pk_view]!explained_procedure Then
      chkProcedureExplained.value = True
   End If
   If currentconsult!skin_procedures[pk_view]!obtained_consent Then
      chkConsentObtained.value = True
   End If
   If currentconsult!skin_procedures[pk_view]!detailed_complications Then
      chkSideEffectsExplained.Value = True
   End If
   txtSite.text = currentconsult!skin_procedures[pk_view]!site
   
   If currentconsult!skin_procedures[pk_view]!lesion_notes Then
      txtNotes.text = currentconsult!skin_procedures[pk_view]!lesion_notes
   End If
   If currentconsult!skin_procedures[pk_view]!dermoscopy_notes Then
      txtDermoscopy.text = currentconsult!skin_procedures[pk_view]!dermoscopy_notes
   End If
   If Not IsNull(currentconsult!skin_procedures[pk_view]!fk_lu_lateralisation) Then
      Select Case currentconsult!skin_procedures[pk_view]!fk_lu_lateralisation
      Case Const.LateralityLeft
          rbLateralisationLeft.value = True  
      Case Const.LateralityRight
         rbLateralisationRight.Value = True
      Case Const.LateralityMidline
         rbLateralisationMidline.value = True
      End Select
   End If
   If currentconsult!skin_procedures[pk_view]!localisation Then
      txtLocalisation.Text = currentconsult!skin_procedures[pk_view]!localisation
   End If
   txtSurgicalPack.text = currentconsult!skin_procedures[pk_view]!surgical_pack_identifier
   '---------------------------------------------------------------------------------------------------
   'FIXME: major flaw here - if you set combo on text and someone has changed the spelling, you lose it
   '----------------------------------------------------------------------------------------------------
   cmbSkinPreparations.index = cmbSkinPreparations.Find(currentconsult!skin_procedures[pk_view]!preparation)
   cmbAnaesthesia.index = cmbAnaesthesia.Find(currentconsult!skin_procedures[pk_view]!agent)
   cmbRepairType.index = cmbRepairType.Find(currentconsult!skin_procedures[pk_view]!repair_type)
   cmbExcisionTypes.index = cmbExcisionTypes.Find(currentconsult!skin_procedures[pk_view]!procedure_type)
   cmbSubcutaneousSuture.index = cmbSubcutaneousSuture.Find(currentconsult!skin_procedures[pk_view]!subcutaneous_suture)
   cmbcutaneousSuture.index = cmbcutaneousSuture.Find(currentconsult!skin_procedures[pk_view]!skin_suture)
   txtDiameter.text = currentconsult!skin_procedures[pk_view]!average_diameter_cm
   lblOrganisation.text = currentconsult!skin_procedures[pk_view]!organisation
   If Not IsNull(currentconsult!skin_procedures[pk_view]!actual_diagnosis) Then
      txtActualDiagnosis.text = currentconsult!skin_procedures[pk_view]!actual_diagnosis & " (" & currentconsult!skin_procedures[pk_view]!fk_actual_diagnosis & ")"
   End If
   If Not IsNull(currentconsult!skin_procedures[pk_view]!provisional_diagnosis) Then
         txtProvisionalDiagnosis.text = currentconsult!skin_procedures[pk_view]!provisional_diagnosis & " (" & currentconsult!skin_procedures[pk_view]!fk_provisional_diagnosis & ")"
   End If
   txtComplications.text = currentconsult!skin_procedures[pk_view]!complications
   If currentconsult!skin_procedures[pk_view]!fk_consult <> currentconsult.GetPK() Then
    ' txtProvisionalDiagnosis.Enabled = False 
     'FIXME this for all other fields except allowable ones
     'ie for medico-legal reasons cannot change old notes?
     'what to do about this, or allow it with audit?
   End If
   If currentconsult!skin_procedures[pk_view]!review_months Then
       txtReviewMonths.text = currentconsult!skin_procedures[pk_view]!review_months
   Endif
   If currentconsult!skin_procedures[pk_view]!referred Then
      chkReferral.value = True
   End If
   
     If currentconsult!skin_procedures[pk_view]!fk_pasthistory = 0 Then
       txtHealthIssue.text = "General Notes"
       fk_pasthistory = 0
    Else
       txtHealthIssue.text = currentconsult!past_history[fk_pasthistory]!description
    End If   
   
   '--------------------------------------------------------------------------
   'finally, show any picture(s), but as can be 0-9 the are fetched on the fly
   '--------------------------------------------------------------------------
  
   Inc Application.Busy
   Hbox_PictureOptions.Visible = False
   With progressbar1
      .Visible = True
      .value = 0
   End With
   Wait 'update the gui
   Try Pictures = modProceduresDBI.Images_Get(currentconsult!skin_procedures[pk_view]!fk_skin_procedure)
   If Not Error Then 
      For Each Pic In Pictures
         progressbar1.value = x / Pictures.count
         tempFile = Temp() & ".png"
         tempPicture = pic!image
         File.Save(tempFile, tempPicture.data)
         PictureBox1.Picture = Picture.Load(Tempfile)
         PictureBox1.tag = Pic!pk_link_images_procedures
         '  Thumb_Add(Tempfile)
         Thumb_Add(Tempfile, Pic!pk_link_images_procedures)
         Pic!path = tempFile
         Inc x
      Next
    End If
    progressbar1.Visible = False
    Hbox_PictureOptions.Visible = True 
   bexit = False
   Dec Application.Busy
  
End

Public Sub Delete()
  
  
  
End
Public Sub Preview_Request_Form()
  
  
  
End

Public Sub cvwSkinProcedures_Menu()
  
   If Last.count Then
      mnuSkinProcedures.popup()
   End If
  
End

Public Sub cvwSkinProcedures_Click()
   proc = New Collection
   proc = procedures[pk_view]
   
  
End

Public Sub cvwSkinProcedures_Select()
   '--------------------------------------------------
   'User selects an existing procedure from the list
   'clear edit area in preparation for displaying this
   '--------------------------------------------------
   EditArea_Clear()
   cvwSkinProcedures.MoveCurrent
   pk_view = cvwSkinProcedures.item.key
  
End


Public Sub FDraw_Edit_Picture()
   '-----------------------------------------------
   'Edits the current picture user can draw on this
   '-----------------------------------------------
     FDraw.sPicturePath = CurrentPicture!path
     FDraw.Picture_Load(CurrentPicture!path)
End 

Public Sub Thumbs_Enter()
   '--------------------------------------------------
   'The user mouses over the thumbnails
   'If there is actually a picture there - display it
   'in the main picture box
   '--------------------------------------------------
   If bStopMouseOver Then Return 
   Thumbs_Borders_Off()
  If Last.tag <> "" Then 
    Last.Parent.padding = 1 
   ' PictureBox1.picture = picture.Load(Last.tag)
    Try PictureBox1.picture = picture.Load(Pictures[Last.tag]!path)
   ' CurrentPicture!path = Last.tag
    If Error Then
      PictureBox1.picture = picture.Load(Last.tag)
       currentthumb!path = Last.tag
    Else
      CurrentPicture!path = Pictures[Last.tag]!path
    End If
    CurrentPicture!picture = PictureBox1.picture
    currentthumb = New Collection
    currentthumb!picture = Last.picture
   ' currentthumb!path = Last.tag
    currentthumb!path = Pictures[Last.tag]!path
    currentthumb!picturebox = Last
    If Vbox_DrawEditor.Visible Then
      FDraw_Edit_Picture()
    End If
  End If
End
Public Sub Thumbs_Enter_2June10()
   '--------------------------------------------------
   'The user mouses over the thumbnails
   'If there is actually a picture there - display it
   'in the main picture box
   '--------------------------------------------------
   If bStopMouseOver Then Return 
   Thumbs_Borders_Off()
  If Last.tag <> "" Then 
    Last.Parent.padding = 1 
    PictureBox1.picture = picture.Load(Last.tag)
    
    CurrentPicture!path = Last.tag
    CurrentPicture!picture = PictureBox1.picture
    currentthumb = New Collection
    currentthumb!picture = Last
    currentthumb!path = Last.tag
    currentthumb!picturebox = Last
    If Vbox_DrawEditor.Visible Then
      FDraw_Edit_Picture()
    End If
  End If
End


Public Sub Insert_Picture1(sSource As String)
   '--------------------------------------------------
   'Inserts a picture into the form. This can come
   'from either a cut/paste/import or from the
   'draw 
   'Creates an event observer.
   'this will bug out if user clicks save in  Fdraw 
   'without selecting image
   '--------------------------------------------------
  Dim s As String
  Dim par As Integer = 2
  Dim pos As Integer = 2
  Dim temp As String
  Dim count As Integer
  Dim flag As Boolean = True
  Dim lastpos As Integer
  Dim parmarkpos As Integer
 
   Dim curpos As Integer
   Dim PicBox As PictureBox
   Dim NewImage As Image
   Dim Picture1 As New Picture 
   Dim pic As Picture
   Dim sPicPath As String
   Dim tempfile As String
   Dim hObs As Observer
   Dim h As Integer
   Dim w As Integer
   Dim tempstring As String
  'ProgressNotesPage.Notes_Editor.teNotes.Paste()
'   Print ProgressNotesPage.teNotes.ToIndex( ProgressNotesPage.Notes_Editor.teNotepos)
 '  Print ProgressNotesPage.teNotes.ToParagraph( ProgressNotesPage.Notes_Editor.teNotepos)
   Print ProgressNotesPage.Notes_Editor.tePreviousNotes
   tempFile = Temp() & ".png"  
   Select Case sSource
   Case "editor"
        ' '------------------------------------------------
        ' 'Picture is being inserted from the draw editor
        ' 'It is either a new picture, or one being edited
        ' '------------------------------------------------
        ' If Fdraw.bediting = True Then
        '    '-------------------------------------------------
        '    'If editing get the handle of the picture box with
        '    'the temp file, and update that picture
        '    'Hbox_pictures = the container of any pictures
        '    'in the editing area
        '    '-------------------------------------------------
        '    Print "Editing existing picture", Fdraw.bEditing
        '    For Each PicBox In Hbox_pictures.Children
        '         Print "Fdraw.sPicturePath", Fdraw.sPicturePath
        '         Print "PicBox.tag", PicBox.tag
        '        If PicBox.tag = Fdraw.sPicturePath Then
        '           Fdraw.$hImage.Save(Picbox.Tag)
        '           Picbox.Picture = Picture1.Load(Picbox.Tag)
        '          
        '           EmbeddedForm_Close()
        '           Return
        '        End If
        '     Next
        '  Else
        '      '-----------------------------------------------------
        '      'Not editing, so is a new picture being returned
        '      'from the draw editor
        '      'Add a new picture box and observer for events
        '      'Use the Save routine from FDraw to create a png
        '      'file with this image (TempFile)
        '      '-----------------------------------------------------
        '      Print "no, we are not editing"
        '      PicBox = New PictureBox(Hbox_pictures)
        '      PicBox.Border = Border.Plain
        '      hObs = New Observer(Picbox) As "RequestPictures"
        '      Print "made a new box"
        '      Print "ah, returning from the draw editor"
        '      Fdraw.$hImage.Save(Tempfile)
        '      EmbeddedForm_Close()
        '  End If
   Case "clipboard"
        '----------------------------------------------------------
        'If source of paste is a clipboard, validate it it an image
        '----------------------------------------------------------
       If Clipboard.type = Clipboard.Image Then
          ' PicBox = New PictureBox(Hbox_pictures)
           'PicBox.Border = Border.Plain
          '' hObs = New Observer(Picbox) As "RequestPictures"
           Print "made a new box"
          ' Print "was an image on the clipboards"
           NewImage = Clipboard.Paste()
           NewImage.Save(Tempfile)
           pic = Picture[tempfile]
           Print "dimensions were", pic.Height, pic.Width
            h = Abs(pic.Height * 2 / 3)
            w = Abs(pic.width * 2 / 3)
            h = pic.Height
            w = pic.width
  
          Print h, w
          sPicPath = "<TABLE WIDTH=100%><TR><TD WIDTH=100%><P><IMG SRC='" & TempFile & "'  " 
          sPicPath &= " NAME='graphics' ALIGN=LEFT WIDTH=" & Str(w) & " HEIGHT=" & Str(h) & " BORDER=0></TR></TD></TABLE><BR><BR>"  '<BR CLEAR=Left>
          ProgressNotesPage.Notes_Editor.tePreviousNotes.richtext = Replace$(ProgressNotesPage.Notes_Editor.richtext, ".pic", sPicPath)
               s = ProgressNotesPage.Notes_Editor.tePreviousNotes.RichText
             ' 
             ' Do Until count = Paragraph_At + 1
             '    Print "the count is", count
             '    parmarkpos = InStr(s, "<p>", lastpos)
             '    Print "<P> pos is", parmarkpos
             '    ' If count = par + 1 Then
             '    '    Print "matched count and par"
             '    '    s = Left(s, lastpos)
             '    '    Print "string is now", s
             '    '    Break
             '    ' End If
             '    lastpos = parmarkpos + 1
             '    Inc count
             ' Loop
             ' 'now are at start of paragraph the cursor is on
             ' Print Left( ProgressNotesPage.Notes_Editor.teNoteRichText, lastpos + pos + 2)
             tempstring = Left(ProgressNotesPage.Notes_Editor.teNote.RichText, lastpos + pos + 2)
             Print "tempstring:", tempstring
             Print "picpath:"
             Print spicpath
             Print Right(ProgressNotesPage.Notes_Editor.teNoteRichText, Len(ProgressNotesPage.Notes_Editor.teNoteRichText) - lastpos + pos + 3)
             tempstring &= sPicPath & Right(ProgressNotesPage.Notes_Editor.teNoteRichText, Len(ProgressNotesPage.Notes_Editor.teNoteRichText) - lastpos - pos - 2)
            ProgressNotesPage.Notes_Editor.tePreviousNotes.RichText = tempstring   
       Else
            '-------------------------------------------
           'Not an image, nothing to paste leave routine
           '--------------------------------------------
           Print "no, it wasn't an image"
           Return
       End If
    End Select
     ' '-----------------------
     ' 'Now deal with the image whatever the source
     ' '-----------------------
     ' RP.temppath = tempFile
     ' With PicBox
     '    .Expand = False
     '    .stretch = True
     '    .picture = Picture1.Load(Tempfile)
     '    .tag = Tempfile
     ' End With
     ' currentRequestForm.pictures.Add(RP, currentRequestForm.pictures.count)
     '  
     ' 
   
    
End
Public Function ProgressNotes_Summary() As String
 '----------------------------------------
 'Prepare a summary for the progress notes
 '----------------------------------------
  Dim sHtml As String
  sHtml = "<B>Excision performed</B>"
  
  Return sHtml
  
End



Public Sub thumbs_MouseUp()

  bStopMouseOver = True 
  PictureBox1.SetFocus()
End


Public Sub Vbox_Thumbs_Leave()

  bStopMouseOver = False   


End



Public Sub EditArea_RadioButtons_Click()
  Select Case Last.tag
  Case "anterior", "posterior"
      anterior_posterior = Last.tag
  Case "left", "right", "midline"
    Laterality = Last.tag
  End Select
End

Public Sub MenuButton1_Click()

  mnuHealthIssues.Popup()

End


Public Sub cmbEditArea_Click()
   Select Case Last.tag
   Case "type of procedure"
   
      fk_lu_procedure_type = Procedure_types[Last.index]!pk
      Select Case Last.text
      Case "biopsy - punch"
          cmbRepairType.index = cmbRepairType.Find("single layer")
          cmbSubcutaneousSuture.index = cmbSubcutaneousSuture.Find("N/A")
      Case "excision", "excision biopsy", "flap"
            cmbRepairType.index = cmbRepairType.Find("two layer")
            cmbSubcutaneousSuture.index = cmbSubcutaneousSuture.Find("PDS")
      End Select
     For Each Existing_Excision_Defaults In modProceduresDBI.staff_skin_excision_defaults_get(modDBConnect.currentUser!fk_staff, fk_lu_procedure_type)
     Next
     Print Existing_Excision_Defaults
  End Select

End

