' Gambas module file

' Copyright (C) 2008-2016 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

'Save user defaults for excision things and auto-fill the form, eg send electronicaly or print
'---------------------------------------------------------------------------------------------
Public Function Images_Get(fk_skin_procedure As Variant) As Collection
   
   Return modDBConnect.exec_query_collection("select * from clin_procedures.vwImages   WHERE fk_procedure = " & fk_skin_procedure)
   
End

Public Function Complications_Get(complication As String) As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clin_procedures.lu_complications WHERE complication ILIKE $$%" & complication & "%$$")
   
End

Public Function SkinProcedures_Get(fk_patient As Variant) As Collection
   
   Return modDBConnect.exec_query_collection("select * from clin_procedures.vwSkinProcedures where fk_patient =" & fk_patient)
   
End

Public Function excisions_get_site(site As String) As Collection
   '---------------------------------------------
   'Gets a list of possible sites for an excision
   '---------------------------------------------

   Return modDBConnect.exec_query_collection("SELECT * FROM common.lu_anatomical_site where site ILIKE $$%" & site & "%$$ ORDER BY SITE")

End

Public Function Procedures_Get_types() As Collection
   'Gets all the different types of procedures eg 'excision'

   Return modDBConnect.exec_query_collection("Select * from clin_procedures.lu_procedure_type")
   
End

Public Function Procedures_Get_Type(proc As String) As Collection
   '-------------------------------------------------------
   'Gets a list of possible types of procedure eg excision
   '-------------------------------------------------------

   Return modDBConnect.exec_query_collection("SELECT * FROM clin_procedures.lu_procedure_type where type ILIKE $$%" & proc & "%$$ ORDER BY type")

End

Public Function excisions_get_type(type As String) As Result

   Dim sql As String
   Dim $Result As Result

   sql = "SELECT * FROM clin_procedures.lu_excision_type where excision_type LIKE $$%"
   sql &= type & "%$$ ORDER BY excision_type;"
   $Result = modDBConnect.exec_query(sql)
   Return $Result
   
End

Public Function surgical_pack_get_last() As Collection

   Return modDBConnect.exec_query_collection("SELECT * FROM clin_procedures.lu_last_surgical_pack where fk_clinic = " & modDBConnect.currentUser!fk_clinic)

End

Public Function surgical_pack_get_save_last(old_data As Collection, surgical_pack As Collection) As Variant
   'Saves the identifier of the last surgical pack used for a particular clinic
   'pretty crude at the moment

   If Not surgical_pack!pk Then
      surgical_pack!pk = modDBConnect.insert("clin_procedures.lu_last_surgical_pack", surgical_pack)
   Else
      modDBConnect.update("clin_procedures.lu_last_surgical_pack", old_data, surgical_pack, "pk")
   End If
   Return surgical_pack!pk

End

Public Function Save(currentconsult As Cconsult, pk_view As Variant, proc As Collection, pictures As Collection, complications As Collection)
   '-----------------------------------------------------
   'Saves a single procedure and any associated pictures
   '-----------------------------------------------------

   Dim complication As Collection 
   Dim pic As Collection 
   Dim recall As Collection 
   Dim recallReason As Collection 
   Message.info("This is a really old module, never used needs code update")
   Return
   '-------------------------------------------------------------
   'First save any new complications - used to save user typing
   'I found it too complicated to keep track of keys at the time
   'of data input - eg they could delete bits of the textbox text
   'so just check them each time.
   '-----------------------------------------------------------
   For Each complication In complications
      If Complications_Get(Trim(complication!complication)).count = 0 Then
         '   If IsNull(complication!pk) Then
         complication!pk_complication = modDBConnect.insert("clin_procedures.lu_complications", complication)
      End If
   Next
   If proc!review_months Then
      'fixme needs to be able to be updated
      recall = New Collection 
      recall!fk_urgency = const.UrgencyLevelRoutine
      recall!reason = "Follow up of removal of skin lesion"
      recallReason = modRecallsDBI.Get_Reasons(recall!reason)
      If recallreason.count = 0 Then
         recall!fk_reason = modRecallsDBI.Reason_Save(recall!reason)
      Else
         recall!fk_reason = recallReason!pk
      End If   
      
      recall!default_interval = 6
      recall!fk_default_interval_unit = const.Units_month
      recall!fk_interval_unit = const.Units_month
      recall!interval = 6
      recall!due = DateAdd(Now, gb.Month, proc!review_months)
      recall!fk_contact_method = const.ContactMethodLetter 'fixme use default for patient
      recall!fk_appointment_length = const.AppointmentLengthStandard
      recall!fk_status = Const.RecallNotDue
      recall!fk_staff = modDBConnect.currentUser!fk_staff 
      
      recall!pk_recall = modRecallsDBI.Save(currentconsult, -1, recall)
      
   End If   
   '------------------------------------------
   'Now if a new skin lesion, save its details
   '------------------------------------------
   If IsNull(pk_view) Then 
      proc!fk_consult = currentconsult.GetPK()
      proc!fk_skin_procedure = modDBConnect.insert("clin_procedures.skin_procedures", proc)
      '--------------------------------------------------
      'If user wants a recall or review, auto-insert this
      '--------------------------------------------------
      If Not IsNull(recall) Then 
         proc!fk_recall = modDBConnect.insert("clin_recalls.recalls", recall)
      End If
      
   Else
      '----------------------------------------------------------------------------------
      'This is an existing record, ' save to backend and update the collection in RAM too
      '----------------------------------------------------------------------------------
      If modDBConnect.update("clin_procedures.skin_procedures", currentconsult!skin_procedures[pk_view], proc, "pk_view") Then 
         '------------------------------------------------------------------------
         'If successful save, write the audit trail
         'what was changed, for auditing purposes this will be hidden
         '------------------------------------------------------------------------
        End If
      
   End If
   '-------------------
   'now save any images
   '-------------------
   For Each pic In pictures
      'FIXME: RE-SAVE CHANGED (EG COULD BE WRITTEN ON) IMAGES
      ' If IsNull(pic!fk_image) Then
      If IsNull(pic!fk_image) Then 
         pic.Remove("picture")
         pic.Remove("fk_image")
         pic!fk_image = modConsultDBI.Image_Save(pic!path)
         pic!fk_procedure = proc!fk_skin_procedure
         pic.Remove("path")
         pic!fk_link_picture_procedure = modDBConnect.insert("clin_procedures.link_images_procedures", pic)
      End If   
   Next

End

Public Function Anaesthetic_Save(agent As String) As Variant
   
End

Public Function Anaesthetic_Get(Optional agent As String = "") As Collection
   
   Return modDBConnect.exec_query_collection("SELECT * FROM clin_procedures.lu_anaesthetic_agent where agent ILIKE $$%" & agent & "%$$ order by agent")
   
End

Public Function Suture_Get(fk_lu_type As Variant, Optional brand As String = "") As Collection 

   Dim sql As String

   sql = "SELECT * FROM clin_procedures.vwSutures WHERE brand ILIKE $$%" & brand & "%$$"
   sql &= " AND fk_lu_site = " & fk_lu_type
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function RepairType_Get(Optional type As String = "") As Collection
   '-----------------------------------------------------
   'Get types of preparation prior to surgery eg betadine
   '-----------------------------------------------------

   Return modDBConnect.exec_query_collection("SELECT * FROM clin_procedures.lu_repair_type where type ILIKE $$%" & type & "%$$ order by type")

End

Public Function RepairType_Save(type As String) As Variant
   
End

Public Function Skin_Preparation_Save(preparation As String) As Variant
   
End

Public Function Skin_Preparation_Get(Optional preparation As String = "") As Collection
   '-----------------------------------------------------
   'Get types of preparation prior to surgery eg betadine
   '-----------------------------------------------------

   Return modDBConnect.exec_query_collection("SELECT * FROM clin_procedures.lu_skin_preparation where preparation ILIKE $$%" & preparation & "%$$ order by preparation")

End

Public Function staff_skin_excision_defaults_get(fk_staff As Variant, fk_lu_procceedure_type As Variant) As Collection
   
   Return modDBConnect.exec_query_collection("Select * from clin_procedures.vwstaffskinproceduredefaults where fk_staff = " & fk_staff & " AND fk_lu_procedure_type =" & fk_lu_procceedure_type)
   
End

Public Function staff_skin_procedure_defaults_save(old_data As Collection, defaults As Collection) As Variant
   '--------------------------------------------------------------------------
   'Save or modify the defaults for a staff member for doing a skin procedure
   'e.g the type of suture for subcutaneous, cutaneous etc, to save typing
   '--------------------------------------------------------------------------
   
   If Not defaults!pk_default Then
      defaults!pk_default = modDBConnect.insert("clin_procedures.staff_skin_procedure_defaults", defaults)
      
   Else
      defaults!pk_default = modDBConnect.update("clin_procedures.staff_skin_procedure_defaults", old_data, defaults, "pk_default")
   End If
   
   Return defaults!pk_default

End
