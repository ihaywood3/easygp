' Gambas class file

' Copyright (C)2008-2016 Dr. Richard Terry
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' PURPOSE      A module to log recalls and reminders needed in patient care
'              See also Clerical/recall_management/FRecallManagment
'              which is used to send out referral letters
' TODOS        Implement Accompanying Forms, implement templates
'
' BUGS         email rterry@internode.on.net
' 
' LAST CHANGES - 10Nov15 - converted to cRow in save
'-----------------------------------------------------------------------------

Private ReferenceHboxForTopColumnview As Hbox               'used if split moves to reposition columnview
Private bEmbedded As Boolean                                'If true this form is embedded elsewhere than as a main tab
Public Embedded_form As String                              'Name of the form or place it is embedded eg Inbox
Public AccompanyingForms As Collection
Public RecallReasons As Collection
Public RecallsThisConsult As Collection                     'Set by embedding form
Private ExistingRecall As Collection                        'Not used in FClinical, only to action recalls in FInbox
Private bExit As Boolean
Private bEditing As Boolean
Private currentconsult As CConsult
Private Const cTabInboxDocuments As Integer = 0
Private fk_recall As Variant
Private fk_urgency As Variant
Private fk_reason As Variant
Private interval As Integer
Private fk_template As Variant
Private fk_progressNote As Variant
Private fk_interval_unit As Variant
Private fk_default_interval_unit As Variant
Private fk_table_row As Variant        
Private default_interval As Integer
Private cvwRecallsThisConsult_Key As Variant
Private templates As Collection                              '0 indexed to match the combo
Private schema As String
Private table As String

Public Sub set_embedded(flag As Boolean, embeddedinform As String)
   '--------------------------------------------------
   'If this form is embeded from another form set flag
   'embeddedinform = either "notes" or "documents"
   '--------------------------------------------------
   
   bEmbedded = flag
   Embedded_form = embeddedinform
   
End

Public Sub Set_Audit_Schema_Table_SourceRowKey(k As Variant, s As String, t As String)
   '-----------------------------------------------------
   'if the recall  is embedded in another form which
   'wants to keep track of this recall pad item, then
   'this collection is set by the calling form
   '------------------------------------------------------
   
   fk_table_row = k
   table = t
   schema = s
   
End

Public Sub ReLoad()
   '------------------------------------------------------------------------
   'Reload recalls created this consult
   'If embedded in the Inbox then show the list of all the patients recalls
   'but within the edit area. Note in Fclinical an idential list lives on
   'the main tabbed lists, but it won't fix into the gui design of the Inbox     
   '------------------------------------------------------------------------
   
   Recalls_This_Consult_Show()               'show recalls ordered this consult
   If Embedded_form <> "FClinical" And Embedded_Form <> "" Then 
      Recalls_Outstanding_Show()   
   End If   
   New_Entry()    'default to putting in a new recall
   
End

Public Sub EditArea_Clear()
   'Clear all the input area, resset all the keys, combo's
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea)   'clear textboxes/combo's
   cmbSeeAnyone.Enabled = False
   lblRecallForInvalid.Visible = False
   lblStaffMissing.Visible = False
   Vbox_EditArea.BackGround = Color.White              'remove red outline around edit area  ?remove colour leave red
   Vbox_EditArea.Padding = 0
   listview1.Visible = False                           'remove popup list if showing
   cmbContactMethod.Index = const.CommModalityLetter   'default = contact by letter
   cmbAppointmentLength.index = const.AppointmentLengthStandard
   rbUrgencyRoutine.Value = True
   cmbTemplates.Index = -1
   fk_reason = Null
   fk_reason = Null
   fk_template = Null
   fk_progressNote = Null
   teTemplates.Clear()
   With lblRecallFor
      .Foreground = Color.Black
      .Text = "Recall For"
   End With
   bExit = False
   Vbox_EditArea_Outer.Enabled = False 
   
End

Public Sub Init(cons As CConsult)
   '---------------------------------------------------------
   'Do all the form initialisation stuff like adding stuff to
   'combo's, setting numbers of columns in lists, displaying
   'the patients contact details
   '---------------------------------------------------------
   
   currentconsult = Cons         'set current consult
   Layout_Controls()
   Settings_Load()         'load settings for this form
   ReLoad()
   
End

Public Function Consult_Exists() As Boolean
   '-----------------------------------------------------
   'If the consult as been passed to the form return true
   '-----------------------------------------------------
   
   If IsNull(currentconsult) Then Return False
   Return True
   
End

Public Function Consult_Set_Null()
   '-----------------------------------------------------
   'If the consult as been passed to the form return true
   '-----------------------------------------------------
   
   currentconsult = Null
   
End

Public Function Save() As Boolean 'the flag is used in the inbox only
   '--------------------------------------------------------------
   'Save the current edit area recall and updates the recalls list
   'x = checked this field
   
   ' CREATE TABLE clin_recalls.recalls
   ' (
   '   pk serial NOT NULL,
   ' x  fk_consult integer NOT NULL, -- key to clin_consult.consult table hence gives staff member, patient and date consult
   ' x  due date NOT NULL, -- date recall falls due
   ' x  fk_reason integer NOT NULL, -- key to clin_recalls.lu.reasons tablet
   ' x  fk_contact_method integer NOT NULL, -- key to contacts.lu_contact_method table
   ' x  fk_urgency integer NOT NULL, -- key to common.lu_urgency table eg 1 = routine...
   ' x  fk_appointment_length integer NOT NULL, -- key to common.lu_appointment_length
   ' x  fk_staff integer NOT NULL, -- key to clerical.staff table
   ' x fk_status integer NOT NULL DEFAULT 1, -- key to lu_status table, ie things like not due, finalised, refused...
   ' x  additional_text text, -- Any additional text to accompany the letter...
   ' x  deleted boolean DEFAULT false,
   ' x  "interval" integer,
   ' x  fk_interval_unit integer,
   '   fk_progressnote integer, -- the foreign key to clin_consult.progressnotes, kept so that if the recall is...
   '   active boolean DEFAULT true, -- Whether the recall is active or not
   '   fk_template integer, -- If not null, then the template text will be included in the patients recalls
   '   fk_sent integer, -- key to clin_recalls.sent table - gives info about when the last reminder was sent, who sent it...
   '   num_reminders integer DEFAULT 0, -- the number of times the practice has attempted to deal with this reminder
   '   );
   '
   '   for table clin_recalls.lu_recall_intervals
   '     fk_reason
   '     fk_default_interval
   '     fk_default_interval_unit
   '--------------------------------------------------------------
   
   Dim recall As New CRow
   Dim bNewRecall As Boolean 
   Dim audit_notes As String
   Dim audit_action As String
   Dim link_reason_interval As CRow 
   
   If Vbox_EditArea_Outer.Padding = 0 Then Return   
   If Not Valid_Recall() Then Return
   
   If IsNull(fk_reason) Then                                               'Save any new reasons   
      Message.Title = "New Recall Reason"
      If Message.Question("Do you wish to save this text:\n\n" & Trim(txtRecallFor.text) & "\n\nas a new reason for recalls?", "Yes", "No") = 2 Then Return 
      fk_reason = modRecallsDBI.Reason_Save(Trim(txtRecallFor.text))
      '---------------------------------------------------------------------------------------
      ' CREATE TABLE clin_recalls.lu_recall_intervals
      ' (
      '   pk serial NOT NULL,
      '   fk_reason integer NOT NULL,
      '   fk_staff integer NOT NULL, -- key to admin.staff table
      '   "interval" integer NOT NULL, -- the time interval for the recall ...
      '   fk_interval_unit integer NOT NULL, -- key to common.lu_units table...
      '   CONSTRAINT lu_recall_intervals_pkey PRIMARY KEY (pk),
      '   CONSTRAINT lu_recall_intervals_fk_interval_unit_fkey FOREIGN KEY (fk_interval_unit)
      '       REFERENCES common.lu_units (pk) MATCH SIMPLE
      '       ON UPDATE NO ACTION ON DELETE NO ACTION,
      '   CONSTRAINT lu_recall_intervals_fk_reason_fkey FOREIGN KEY (fk_reason)
      '       REFERENCES clin_recalls.lu_reasons (pk) MATCH SIMPLE
      '       ON UPDATE NO ACTION ON DELETE NO ACTION,
      '   CONSTRAINT lu_recall_intervals_fk_staff_fkey FOREIGN KEY (fk_staff)
      '       REFERENCES admin.staff (pk) MATCH SIMPLE
      '       ON UPDATE NO ACTION ON DELETE NO ACTION
      ' )
      ' WITH (
      '   OIDS=FALSE
      '--------------------------------------------------------------------------------------
      link_reason_interval = New CRow                                          'then link a default interval to that reason
      link_reason_interval!fk_reason = fk_reason
      link_reason_interval!fk_staff = modDBConnect.currentUser!fk_staff  
      link_reason_interval!interval = interval
      link_reason_interval!fk_interval_unit = fk_interval_unit
      link_reason_interval.Save("clin_recalls.lu_recall_intervals", "fk_lu_recall_intervals")
   Endif
   Inc Application.Busy
   Recall = New CRow 
   If Not IsNull(fk_recall) Then
      Recall.put_unchanged(fk_recall, "fk_recall")
   Endif
   recall!due = Val(txtdate.text)
   recall!fk_reason = fk_reason 
   recall!fk_consult = currentconsult.GetPK()
   recall!fk_contact_method = cmbContactMethod.Index
   recall!fk_urgency = fk_urgency
   recall!fk_appointment_length = cmbAppointmentLength.Index
   recall!fk_staff = modDBConnect.currentUser!fk_staff
   recall!fk_status = const.RecallNotDue
   recall!additional_text = Trim(txtRecallNotes.Text)
   recall!interval = interval
   recall!fk_interval_unit = fk_interval_unit
   recall!active = True
   recall!fk_template = fk_template
   recall!fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, Progress_Notes_Create(), const.cSection_Recalls, fk_progressnote, "Recalls")
   recall.Save("clin_recalls.recalls", "fk_recall")
   If Not IsNull(fk_table_row) Then 'if Embedded from the inbox, link this recall back to the document in an audit trail
      modInboxDBI.Link_Document_Action(Schema, table, fk_recall, fk_table_row)
   Endif
   audit_action = "recall logged"           'create the audit trail
   audit_notes = txtRecallFor.text & " due on " & txtDate.Text
   If Not modAudit.MakeAudit(currentconsult, audit_action, "clin_recalls.recalls", recall!fk_recall, const.cSection_Recalls, audit_notes) Then
      modDBConnect.RollBack
      Goto Finished
      Return
   Endif
   modDBConnect.CommitTrans()
   If FClinicalToolbar.IsSamePatient(currentconsult!patient!fk_patient) Then
      FClinicalToolbar.Recalls_On_Toolbar_Update
      FClinical.Refresh_Section(const.cSection_Recalls) 'retrieve the data from the backend again.
      Try FClinical.Refresh_Section(const.cSection_HealthSummary) 
      Try FGPMPTCA.GPMP_Update
   End If
   If Embedded_form = "FInbox" Then
      FInbox.Previous_Notes_Refresh          'refresh the 'Context' tab in the inbox
      FInbox.Switch_tab(cTabInboxDocuments)  'switch back to the main documents list
   End If
   Goto Finished
   
Finished:
   Application.Busy = 0
   ReLoad()                    'update the list under edit area to show recalls this consult, default to new edit
   Return True 
Catch 
   Goto Finished   
   
End

Public Sub SetFocus()
   
   txtRecallFor.SetFocus()
   
End

Public Sub Settings_Save()
   
   If bEmbedded Then
      '-----------------------------------------------------------------
      'The string value of Embedded_form is set by the calling form
      'currently Inbox or Consult form so appropriate split values saved
      '-----------------------------------------------------------------
      Settings["FRecalls_Embedded_" & Embedded_form & "/HSplit_EditArea"] = HSplit_EditArea.Layout
      Settings["FRecalls_Embedded_" & Embedded_form & "/VSplit_Recalls"] = VSplit_Recalls.Layout
   Else
      Settings["FRecalls/HSplit_EditArea"] = HSplit_EditArea.Layout
      Settings["FRecalls/VSplit_Recalls"] = VSplit_Recalls.Layout
   End If
   
End

Private Sub Settings_Load()
   
   If bEmbedded Then
      HSplit_EditArea.Layout = Settings["FRecalls_Embedded_" & Embedded_form & "/HSplit_EditArea", modUtilGUI.HSplit([3, 1])]
      VSplit_Recalls.layout = Settings["FRecalls_Embedded_" & Embedded_form & "/VSplit_Recalls", modUtilGUI.VSplit([1, 2])]
      cvwRecallsThisConsult.Font = Font[Settings["FRecalls/cvwRecallsLoggedThisConsult.font", "DejaVu Sans,9"]]
      cvwRecalls.Font = Font[Settings["FRecalls_Embedded_" & Embedded_form & "/cvwRecalls.font", "DejaVu Sans,9"]]
   Else
      HSplit_EditArea.Layout = Settings["FRecalls/HSplit_EditArea", modUtilGUI.HSplit([1, 0])] 'have hidden the template stuff at the moment.
      VSplit_Recalls.layout = Settings["FRecalls/Vsplit_Recalls", modUtilGUI.VSplit([244, 371])]
      cvwRecallsThisConsult.Font = Font[Settings["FRecalls/cvwRecallsLoggedThisConsult.font", "DejaVu Sans,9"]]
   End If
   
End

Public Sub New_Entry() 
   '---------------------------------------------------------------
   'Called from FClinical, called this because can't use New() and
   'all across easyp this is the wording I've chosen
   'see FClinicalToolbar.MainToolbar_Click for details
   '---------------------------------------------------------------   
   
   EditArea_Clear()
   bExit = True                                      'stop re-entrance into change routines
   AccompanyingForms = New Collection                'any forms to be sent with recall NOT IMPLEMENTED
   RecallReasons = New Collection
   '--------------------------------------------------------------------
   'NB:this is important to understand:
   'fk_staff  = key to admin.staff table =  staff to see when comes back
   'this defaults to the person entering the data but can be changed
   '--------------------------------------------------------------------
   txtSeeSpecificPerson.text = modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename
   bEditing = False                'not in edit mode
   bExit = False
   fk_urgency = const.UrgencyLevelRoutine 'default
   With lblRecallFor
      .Foreground = Color.Red
      .Text = "New Recall For"
   End With
   Vbox_EditArea_Outer.Enabled = True
   txtRecallFor.SetFocus()
   
End

Public Sub Layout_Controls()
   '----------------------------------------------------
   'Needs as better name, in here just to some gui stuff
   '----------------------------------------------------
   
   cvwRecallsThisConsult.Columns.count = 6 'recall for|due date|contact method|Person to see|additional notes
   cmbSeeAnyone.Add("", 0) 'fixme unhard code me
   cmbSeeAnyone.Add("General Practitioner", 1) 'fixme unhard code me
   cmbSeeAnyone.Add("Nurse", 2)
   cmbContactMethod.Clear()
   cmbContactMethod.Add("Home", const.CommModalityHome)
   cmbContactMethod.Add("Work", const.CommModalityWork)
   cmbContactMethod.Add("Fax", const.CommModalityFax)
   cmbContactMethod.Add("Email", const.CommModalityEmail)
   cmbContactMethod.Add("Mobile", const.CommModalityMobile)
   cmbContactMethod.Add("VOIP", const.CommModalityVOIP)
   cmbContactMethod.Add("Web URL ", const.CommModalityWeb)
   cmbContactMethod.Add("Phone unspecified", const.CommModalityPhone)
   cmbContactMethod.Add("Toll Free", const.CommModalityTollFree)
   cmbContactMethod.Add("Letter", const.CommModalityLetter)
   cmbAppointmentLength.Add("Brief", const.AppointmentLengthBrief)
   cmbAppointmentLength.Add("Standard", const.AppointmentLengthStandard)
   cmbAppointmentLength.Add("Long", const.AppointmentLengthLong)
   cmbAppointmentLength.Add("Prolonged", const.AppointmentLengthProlonged)
   lblmeasure.text = " Authority Approval No.  "  'to keep all edit area's left width the same
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblmeasure)
   templates = modUtilGUI.LoadCombo(cmbTemplates, modRecallsDBI.Templates_Get(), "name")  'Get any existing templates load to combo
   
End

Public Sub EditArea_KeyRelease()
   
   Select Case Last.tag
      Case "recall for"
         '---------------------------------------------------------
         'User is typing in what they want the patient recalled for
         '---------------------------------------------------------
         If Len(Trim(txtRecallFor.Text)) Then
            lblRecallForInvalid.Visible = False
         End If
         Get_Reasons()
      Case "see specific person"
         modRecallsDBI.Staff_Get_Clinical(txtSeeSpecificPerson, listview1, lblStaffMissing)
         
   End Select
   
End

Public Sub Get_Reasons()
   '----------------------------------------------------
   'Gets a list of reasons for recall as a collection
   'loads these into listview1
   'Clears the popup list, attempts to get a collection
   'matching an instring search of what user is typing
   'if the collection has contents display in popup list
   '----------------------------------------------------
   
   Dim reason As Collection
   
   With listview1
      .Clear()
      .Visible = False  
   End With
   If Trim(txtRecallFor.text) <> "" Then
      RecallReasons = modRecallsDBI.Get_Reasons(Trim(txtRecallFor.Text))
      If RecallReasons.count = 0 Then
         listview1.Visible = False
         Return
      End If
      For Each reason In RecallReasons
         '--------------------------------------------------------------------------
         'Note gambas accepts pk_reason though an integer automatically as a string
         'so when one reads it back from the key, must convert to a number if using
         'it to save
         '--------------------------------------------------------------------------
         listview1.Add(reason!pk_reason, reason!reason)
      Next
      listview1.tag = txtRecallFor
      listview1.Raise
      listview1.Visible = True
   Else
      listview1.Visible = False
   End If
   
End

Public Sub EditArea_Change()
   
   If bExit Then Return
   Select Case Last.tag
      Case "recall for"
         If Len(Trim(txtRecallFor.Text)) Then
            lblRecallForInvalid.Visible = False
         Else
            fk_reason = Null
         End If
      Case "default interval"
         If txtDefaultInterval.text = "" Then
            txtDate.text = ""
         End If
      Case "interval"
         If Trim(txtInterval.text) <> "" Then
            Calculate_Recall_Date(txtInterval)
         End If
      Case "see specific person"
         If Trim(txtSeeSpecificPerson.text) <> "" Then
            cmbSeeAnyone.index = 0
            cmbSeeAnyone.enabled = False
         End If
         
   End Select
   EditArea_Notify_DataChange(True) '
   
End

Public Sub EditArea_GotFocus()
   '--------------------------------------------------
   'Give the focussed control a nice background color
   'FIXME: Make this globally configureable.
   '--------------------------------------------------
   
   ReferenceHboxForTopColumnview = Last.Parent.Parent  'if user resizes edit area need this
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
      Case "recall for"
         With listview1
            .top = ReferenceHboxForTopColumnview.top + ReferenceHboxForTopColumnview.Height
            .left = Last.Parent.Left + VBox_EditArea.Padding
            If Embedded_form = "FInbox" Then
               .width = txtRecallFor.Width
            Else
               .width = txtRecallFor.Width / 2
            Endif
         End With
      Case "see specific person"
         With listview1
            .top = ReferenceHboxForTopColumnview.top + ReferenceHboxForTopColumnview.Height
            .left = Last.Parent.Left + VBox_EditArea.Padding
            .width = txtSeeSpecificPerson.Width / 2
         End With
   End Select
   
End

Public Sub EditArea_LostFocus()
   '-----------------------------------------------------------------
   'Make sure that the whole line is showing be resetting cursor pos
   'before losing focus, and set background back to white
   '-----------------------------------------------------------------
   
   Last.BackGround = Color.white
   Select Case Last.tag
      Case "interval"
         
      Case "default interval"
         Calculate_Recall_Date(Last)
   End Select
   
End

Public Function EditArea_TxtBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Dim bKeyValid As Boolean
   
   Select Case tag
      Case "recall for", "see specific person", "additional notes", "forms"
         bKeyValid = True
      Case "default interval", "interval"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_Date_DWMY, keycode)
      Case "date"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_KeyPress()
   '-------------------------------------------------------------
   'first make sure only valid keys for each text box are entered
   'here effectively this means only the date
   'FIXME  - put in commentry here to show how only numbers/mMyYdD allowed in date
   '--------------------------------------------------------------
   
   Dim x As Integer
   Dim bKeyValid As Boolean
   
   bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code, Last.tag)
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case Key.Code
      Case Key.Down
         Select Case Last.tag
            Case "recall for", "see specific person"
               If listview1.visible Then
                  listview1.MoveFirst
                  listview1.SetFocus()
                  listview1.Item.Selected = True
               End If
               
         End Select
      Case Key.Return, Key.tab
         '--------------------------------------------------------------
         'Enter or tab was pressed, ie user wants the term they've typed
         'but may have not selected if from the list
         '--------------------------------------------------------------
         Select Case Last.tag
            Case "recall for"
               '-----------------------------------------------------------
               'User could have pressed return when they saw that the term
               'they wanted was in the list, so if so, get the key
               '----------------------------------------------------------
               If listview1.Visible Then
                  listview1.MoveFirst
                  For x = 0 To listview1.count - 1
                     If LCase(listview1.Item.text) = LCase(Trim(txtRecallFor.text)) Then
                        listview1.MoveCurrent
                        listview1_DblClick()
                        Break
                     End If
                     listview1.MoveNext
                  Next
                  listview1.Visible = False
                  txtDate.SetFocus()
               Else
                  '------------------------------------------------
                  'must be a new term set fk_reason for 0 so that
                  'when recall is saved this new term will be saved
                  'on a per-user basis
                  'Next get the Default interval
                  '------------------------------------------------
                  lblDefaultInterval.Visible = True
                  txtDefaultInterval.SetFocus()
                  
               End If
            Case "default interval"
               '---------------------------------------------------------
               'If at this point, either the user is putting in a decault
               'for the first time, or changing an existingone
               'if no date present, insert the date from calculating
               'time from now  + the default time
               '----------------------------------------------------------
               If Not txtDate.text Then
                  Calculate_Recall_Date(txtDefaultInterval)
               Else
                  If Not txtInterval.text Then
                     txtInterval.SetFocus
                  End If
               End If
            Case "interval"
               Calculate_Recall_Date(txtInterval)
            Case "date"
               If Not IsDate(txtDate.text) Then
                  txtDate.text = ""
                  txtDate.SetFocus()
               End If
            Case "contact details"
               txtSeeSpecificPerson.SetFocus()
            Case "see specific person"
               If Trim(txtSeeSpecificPerson.text) = "" Then
                  cmbSeeAnyone.Enabled = True
                  cmbSeeAnyone.index = 1
                  cmbSeeAnyone.SetFocus
               End If
         End Select
   End Select
Catch
   Return
   
End

Public Sub cmbEditArea_KeyPress()
   
   Select Case Key.Code
      Case Key.Return
         Select Case Last.tag
            Case "contact method"
               txtContactDetails.SetFocus()
            Case "appointment length"
               txtSeeSpecificPerson.SetFocus()
         End Select
   End Select
   
End

Public Sub Listview1_DblClick()
   '----------------------------------------------------
   'CALLED BY  :user directly clicks on list or
   '           : listview1_keyPress where key =enter
   '
   'listview1 used to display multiple choice of items
   'when user as initiated  search eg for recall reasons
   '----------------------------------------------------
   
   Dim SelectedReason As New Collection       'for readability
   
   If IsNull(recallreasons) Then Return
   '-----------------------------------------------------------
   'Note this gambas quirk: the key is a string value, but when
   'the list was loaded gambas auto-converts any key, numeric
   'or otherwise to a string, so if you don't convert it back
   'implicitly as an integer, it will remain in your collection
   'as a string
   '-----------------------------------------------------------
   listview1.MoveCurrent                  'set this for the key
   SelectedReason = recallreasons[listview1.Item.key]   'null object bug here no content recall-reasons
   Select Case listview1.Tag.tag
      Case "recall for"
         '-------------------------------------------
         'User has been searching for a recall reason
         '-------------------------------------------
         txtRecallFor.text = listview1.Item.Text
         fk_reason = listview1.Item.Key
         lblRecallForInvalid.Visible = False
         listview1.Visible = False
         '----------------------------------------------------------
         'When first selected set actual interval = default interval
         '----------------------------------------------------------
         txtDefaultInterval.text = SelectedReason!interval & SelectedReason!abbrev_text
         txtInterval.text = txtDefaultInterval.text
         '--------------------------------------------------------------
         'Set variables,  Calculate_Recall_Date() sets fk_interval_units
         'if interval is changed  by user
         '--------------------------------------------------------------
         interval = SelectedReason!interval
         fk_interval_unit = SelectedReason!fk_interval_unit
         default_interval = SelectedReason!interval
         fk_default_interval_unit = SelectedReason!fk_interval_unit
         '------------------------------------------------------------------
         'AT SOME STAGE RE-THINK THIS.
         'THE INTENTION WAS THAT FOR EXAMPLE HBA1C HAS BEEN GIVEN A DEFAULT
         'INTERVAL OF 6 AND THE UNIT (WHATEVER IT IS FOR MONTHS)
         'THEN THE USER IN THIS PATIENT CAN CHANGE THIS TO 3M, this seems to
         'be why in the mists of time I set fk_default_interval_unit to be
         'the same as fk_interval unit
         '??FIXME ?BUG HERE or is this simply the same or can it be different
         'maybe should enforce it to be the same. 
         '--------------------------------------------------------------------
         Calculate_Recall_Date(txtDefaultInterval)
         chkPatientDefaultInterval.value = True
         '----------------------------------------------------
         'Lastly, check if any template exists for this reason
         'if reason = matched to a combo item, auto-show
         'Can't use  cmbTemplates.Find(Trim(txtRecallFor.text))
         'because this is case sensitive
         '----------------------------------------------------
         ' If cmbTemplates.Find(Trim(txtRecallFor.text)) <> -1 Then
         '    cmbTemplates.index = cmbTemplates.Find(Trim(txtRecallFor.text))
         ' End If
         ' For Each Template In templates
         '    If Trim(Lower(txtRecallFor.text)) = Lower(template!name) Then
         '       cmbTemplates.index = templates.Key
         '       cmbTemplates_click()
         '       Break
         '    End If
         ' Next
         '  btnForFocus.SetFocus()
         '---------------------------------------------------------
         'At this point, the user either accepts all these defaults
         'or goes back and changes them.
         '---------------------------------------------------------
         lblRecallFor.SetFocus()
      Case "see specific person"
         txtSeeSpecificPerson.text = listview1.Item.Text
         lblStaffMissing.Visible = False
         listview1.Visible = False
   End Select
Catch
   Return
   
End

Public Sub Recall_This_Consult_Edit()
   
   Vbox_EditArea_Outer.Enabled = True  
   
End

Public Function Progress_Notes_Create() As String
   
   Dim sProgressNote As String
   
   sProgressNote = "<B> Recall logged:</B> for " & txtRecallFor.Text & " due on " 
   sProgressNote &= Format(Val(txtdate.text), "dd/mm/yyyy")
   Return sProgressNote
   
End

Public Sub Recall_This_Consult_Display()
   
   Dim recall_this_consult As Collection
   Dim sString As String
   
   EditArea_Clear()
   
   recall_this_consult = currentconsult!recalls_this_consult[cvwRecallsThisConsult_Key] 'set when the row in columnview selected
   fk_recall = recall_this_consult!pk_recall
   fk_progressnote = recall_this_consult!fk_progressnote
   bExit = True                                                                         'stop re-entry into other routines
   'If Not IsNull(recall_this_consult!fk_progressnote) Then                              'Allow editing Or progress note when recall changed In same day
   '    If Format(currentconsult.GetConsultDate(), "dd/mm/yyyy") = Format(recall_this_consult!consult_date, "dd/mm/yyyy") Then
   '       fk_progressnote = recall_this_consult!fk_progressnote
   '    End If
   ' End If
   txtRecallFor.Text = recall_this_consult!reason
   txtRecallNotes.text = recall_this_consult!additional_text
   txtInterval.text = recall_this_consult!interval & recall_this_consult!abbrev_text
   txtdate.text = Format(recall_this_consult!due, "dd/mm/yyyy")
   cmbAppointmentLength.index = recall_this_consult!fk_appointment_length
   cmbContactMethod.index = recall_this_consult!fk_contact_method
   Select Case recall_this_consult!urgency
      Case const.UrgencyLevelRoutine
         rbUrgencyRoutine.value = True
      Case const.UrgencyLevelModerate
         rbUrgencymoderate = True
      Case const.UrgencyLevelUrgent
         rbUrgencyUrgent = True
   End Select
   fk_template = recall_this_consult!fk_template 
   fk_urgency = recall_this_consult!fk_urgency
   fk_reason = recall_this_consult!fk_reason
   fk_default_interval_unit = recall_this_consult!fk_default_interval_unit
   default_interval = recall_this_consult!default_interval
   sSTring = recall_this_consult!default_interval
   Select Case fk_default_interval_unit
      Case const.Units_month
         sString &= "M"
      Case const.Units_year
         sString &= "Y"
   End Select
   Try cmbTemplates.index = cmbTemplates.Find(recall_this_consult!template_name)
   txtDefaultInterval.text = sString
   txtSeeSpecificPerson.text = recall_this_consult!title & " " & recall_this_consult!wholename
   bExit = False
   
End

Public Sub Recall_This_Consult_Delete()
   '-----------------------------------------------------------
   ' PURPOSE:   Deletes the current recall keeping audit trail
   ' The menu tag is const.cAuditAction_Delete
   '-----------------------------------------------------------
   
   modRecallsMenu.Process(RecallsThisConsult[cvwRecallsThisConsult_key], Last.tag, currentconsult)
   ReLoad()
   
End

Public Function Valid_Recall() As Boolean
   '------------------------------------------------------------
   'PURPOSE  : Checks recall is valid in content prior to save
   'RETURNS  : true flag if valid
   'CALLED BY: Save()
   'Reason for the recall:
   'This may/may not be a coded reason, could be a free sentance
   'e.g Third hepatitis B injection and fk_reason could be 0
   '------------------------------------------------------------
   
   If txtRecallFor.Text = "" Then
      TxtRecallFor.SetFocus()
      Return
   End If
   If txtDefaultInterval.Text = "" Then
      txtDefaultInterval.SetFocus()
      Return
   End If
   If txtInterval.Text = "" Then
      txtInterval.SetFocus()
      Return
   End If
   '--------------------------------------------------
   'Check once again the date is present and validated
   '--------------------------------------------------
   If Not IsDate(txtDate.text) Then
      txtDate.SetFocus()
      Return
   End If
   If txtSeeSpecificPerson.Text = "" Then
      txtSeeSpecificPerson.SetFocus()
      Return
   End If
   Return True
   
End

Public Sub Recalls_This_Consult_Show()
   '-------------------------------------------------------
   'Updates the display in the recalls list and re-orders
   'the collection of recalls. Puts red line around the
   'list if unsaved data
   '-----------------------------------------------------
   
   Dim recall As Collection
   Dim x As Integer
   Dim sPerson As String
   Dim col_widths As Integer[]
   
   col_widths = New Integer[5]
   lblMeasure.font = cvwRecalls.font
   currentconsult.Refresh("recalls_this_consult")
   RecallsThisconsult = currentconsult!recalls_this_consult
   With cvwRecallsThisConsult
      .Clear()           'clear the list
      .Columns.Count = 4
   End With
   For Each recall In RecallsThisconsult
      x = recall!pk_recall
      sPerson = recall!title & " "
      sPerson &= recall!wholename
      cvwRecallsThisConsult.Add(x, 0)
      cvwRecallsThisConsult[x][0] = Format(Recall!due, "dd/mm/yyyy")
      lblmeasure.text = " " & cvwRecallsThisConsult[x][0] & " "
      col_widths[0] = lblmeasure.Width
      cvwRecallsThisConsult[x][1] = Recall!reason
      lblmeasure.text = " " & Recall!reason & " "
      col_widths[1] = Max(lblmeasure.Width, col_widths[1])
      cvwRecallsThisConsult[x][2] = "Contact method: " & Recall!contact_by
      lblmeasure.text = " " & "Contact method: " & Recall!contact_by & "     "
      col_widths[2] = Max(lblmeasure.Width, col_widths[2])
      cvwRecallsThisConsult[x][3] = "To see: " & sPerson
      Inc x
   Next
   For x = 0 To 2
      Try cvwRecallsThisConsult.Columns[x].width = col_widths[x]
   Next
   EditArea_Notify_DataChange(False)
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   '--------------------------------------------------
   'Adds or removes padding around edit area and lists
   'to indicate if data is changed and unsaved
   '--------------------------------------------------
   
   If flag Then
      Vbox_EditArea_Outer.Padding = 1
   Else
      Vbox_EditArea_Outer.Padding = 0
   End If
   
End

Public Sub ListView1_KeyPress()
   
   If Key.code = Key.Return Then
      listview1_DblClick()
   End If
   
End

Public Sub cmbEditArea_LostFocus()
   
   Select Case Last.tag
      Case "contact method"
         If cmbContactMethod.index = const.ContactMethodLetter Then
            txtSeeSpecificPerson.SetFocus
         End If
         
   End Select
   
End

Public Sub cmbEditArea_MouseDown()
   
   If Last.tag = "see anyone" And Trim(txtSeeSpecificPerson.text) = "" Then
      cmbSeeAnyone.Enabled = True
      cmbSeeAnyone.index = 1  'default to GP
   End If
   
End

Public Sub Calculate_Recall_Date(txt As Textbox)
   '--------------------------------------------
   'Works out a date from e.g 18M or 2Y
   'FIXME put in weeks and days
   '--------------------------------------------
   
   Dim iNumberOfMonths As Integer      'do not need both these declared, but do for readability
   Dim iNumberOfYears As Integer
   Dim iNumberOfDays As Integer
   Dim iNumberOfWeeks As Integer
   
   bExit = True 'stop change event of edit area triggering
   If UCase(Right(Trim(txt.text), 1)) = "M" Then
      '---------------------------------------------------------------------------
      'Try and convert the rest of the string (ie left part which should be number
      'to a number, if error, pop up invalid date and return
      'Remember that  bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code) has
      'only allowed numbers or mM or Yy for this textbox, but some idiot could
      'have tried out patience by typing in e.g 10m10M or something
      '---------------------------------------------------------------------------
      Try iNumberOfMonths = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txtDate.text = ""
         Return
      End If
      If txt.tag = "interval" Then
         fk_interval_unit = const.Units_month
         interval = iNumberOfMonths
      Else
         fk_default_interval_unit = const.Units_month
         default_interval = iNumberOfMonths
         If Trim(txtInterval.text) = "" Then
            fk_interval_unit = const.Units_month
            interval = iNumberOfMonths
            txtInterval.text = txtDefaultInterval.Text
         End If
      Endif
      txtDate.text = Format(DateAdd(currentconsult.GetConsultDate(), gb.Month, iNumberOfMonths), "dd/mm/yyyy") '31july14 due to ability to edit old consults
      ' txtDate.text = Format(DateAdd(Now, gb.Month, iNumberOfMonths), "dd/mm/yyyy")
   Else If UCase(Right(Trim(txt.text), 1)) = "Y" Then
      '---------------------------------------------------------------------------
      'Try and convert the rest of the string (ie left part which should be number
      'to a number, if error, pop up invalid date and return
      'Remember that  bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code) has
      'only allowed numbers or mM or Yy for this textbox, but some idiot could
      'have tried out patience by typing in e.g 10m10M or something
      '---------------------------------------------------------------------------
      Try iNumberOfYears = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txtDate.text = ""
         Return
      End If
      txtDate.text = Format(DateAdd(currentconsult.GetConsultDate(), gb.Year, iNumberOfYears), "dd/mm/yyyy")
      If txt.tag = "interval" Then
         fk_interval_unit = const.Units_year
         interval = iNumberOfYears
      Else
         fk_default_interval_unit = const.Units_year
         default_interval = iNumberOfYears
         If Trim(txtInterval.text) = "" Then
            fk_interval_unit = const.Units_year
            interval = iNumberOfYears
            txtInterval.text = txtDefaultInterval.Text
         End If
      End If
   Else If UCase(Right(Trim(txt.text), 1)) = "W" Then
      Try iNumberOfWeeks = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txtdate.text = ""
         Return
      End If
      If txt.tag = "interval" Then
         fk_interval_unit = const.Units_week
         interval = iNumberOfWeeks
      Else
         fk_default_interval_unit = const.Units_week
         default_interval = iNumberOfWeeks
         If Trim(txtInterval.text) = "" Then
            fk_interval_unit = const.Units_week
            interval = iNumberOfWeeks
            txtInterval.text = txtDefaultInterval.Text
         End If
      Endif
      txtDate.text = Format(DateAdd(currentconsult.GetConsultDate(), gb.Week, iNumberOfWeeks), "dd/mm/yyyy")
   Else If UCase(Right(Trim(txt.text), 1)) = "D" Then
      Try iNumberOfdays = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txtdate.text = ""
         Return
      End If
      If txt.tag = "interval" Then
         fk_interval_unit = const.Units_day
         interval = iNumberOfdays
      Else
         fk_default_interval_unit = const.Units_day
         default_interval = iNumberOfdays
         If Trim(txtInterval.text) = "" Then
            fk_interval_unit = const.Units_day
            interval = iNumberOfdays
            txtInterval.text = txtDefaultInterval.Text
         End If
      Endif
      txtDate.text = Format(DateAdd(currentconsult.GetConsultDate(), gb.Day, iNumberOfdays), "dd/mm/yyyy") 
   Else
    '  Message.Info("Please either enter a default interval in the the format 12M or 12W or 12D")
   End If
   bExit = False
   
End

Public Sub EditArea_RadioButtons_Click()
   
   If bexit Then Return
   Select Case Last.tag
      Case "routine"
         fk_urgency = const.UrgencyLevelRoutine
      Case "moderate"
         fk_urgency = const.UrgencyLevelModerate
      Case "urgent"
         fk_urgency = const.UrgencyLevelUrgent
   End Select
   EditArea_Notify_DataChange(True)
   
End

Public Sub cvwRecallsThisConsult_Select()
   
   cvwRecallsThisConsult.MoveCurrent()
   cvwRecallsThisConsult_Key = cvwRecallsThisConsult.Item.key
   Recall_This_Consult_Display
   
End

Public Sub mnuRecallsThisConsult_Click()
   '--------------------------------------------------
   'user has clicked on a menu option in the popupmenu
   'over columnview recalls
   '--------------------------------------------------
   
   Select Case Last.tag
      Case "edit"
         Recall_This_Consult_Edit
      Case Const.cAuditAction_Delete
         Recall_This_Consult_Delete
       Case "help"
         modUtilGUI.NotImplemented("Help for this section")
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwRecallsThisConsult, "FRecalls")
   End Select
Catch
   Return  
   
End

Public Sub cvwRecallsThisConsult_Menu()
   '---------------------------------------------------
   'If recalls exist for current consultation, show the
   'popup menu to allow delete or edit
   '---------------------------------------------------
   
   If cvwRecallsThisConsult.count Then
      mnuRecallsThisconsult.Popup()
   End If
   
End

Public Sub Recalls_Outstanding_Show()
   '------------------------------------------------------------
   'This routine is only used when FClinical is not the parent
   'eg. FRecalls embeddedd in the FInbox
   '------------------------------------------------------------
   
   modRecallsDBI.cvwRecalls_Refresh(cvwRecalls, currentconsult)
   
End

Public Sub mnuRecallsInbox_click()
   '-----------------------------------------------------------------
   'User has clicked on the recalls list, execute the various options
   'e.g delete the recall, mark it completed, reschedule etc
   'FIXME rename me and in the form menu - the night I did this
   'the videocard on machine using wasn't working to update screen
   'in some weird way
   '-----------------------------------------------------------------
   
   Select Case Last.tag
      Case "print"
         modUtilGUI.NotImplemented("Print the recall")
      Case "email"
         modUtilGUI.NotImplemented("Email the recall")
      Case "notify front desk"
         modUtilGUI.NotImplemented("Notify front desk about the recall")
      Case "view recall history", "view audit trail"
         '  Recalls_Audit_Trail(Last.tag)
      Case "adjust column widths"
         ' modUtilGUI.NotImplemented("Adjust the column widths")
         ' cvwrecalls.Header = True
         ' cvwRecalls.Resizable = True
      Case "fonts"
         modUtilGUI.Columnview_SetFont(cvwRecalls, "FRecalls_Embedded_" & Embedded_form)
      Case Else
         modRecallsMenu.Process(ExistingRecall, Last.tag, currentconsult)
         Recalls_Outstanding_Show()
         Recalls_This_Consult_Show
   End Select
Catch
   Return 
   
End

Public Sub cvwRecalls_Menu()
   '-------------------------------------------------------
   'This columnview not visible in FClinical
   'Visible in forms like FInbox when this form is embedded
   '-------------------------------------------------------
   
   If cvwRecalls.count Then
      mnuRecallsInbox_ViewRecallHistory.enabled = False
      mnuRecallsInbox_viewAuditTrail.enabled = False
      mnuRecallsInbox_Completed.caption = "Mark Completed Repeat in " & ExistingRecall!interval & ExistingRecall!abbrev_text
      mnuRecallsInbox.Popup()
   Endif
   
End

Public Sub cvwRecalls_Select()
   '-------------------------------------------------------
   'This columnview not visible in FClinical
   'Visible in forms like FInbox when this form is embedded
   '-------------------------------------------------------
   
   If Not cvwRecalls.count Then Return
   cvwRecalls.MoveCurrent()
   ExistingRecall = currentconsult!recalls_logged[cvwRecalls.Item.key]
   
End

Public Sub Form_Resize()
   
   VSplit_Recalls_Resize()
   HSplit_EditArea_Resize()
   
End

Public Sub HSplit_EditArea_Resize()
   
   If Listview1.Visible Then
      Listview1.width = txtRecallFor.Width / 2
   Endif
   If Vbox_OutstandingRecalls.visible Then
      Settings["FRecalls_Embedded_" & Embedded_form & "/HSplit_EditArea"] = HSplit_EditArea.Layout
   End If
   
End

Public Sub VSplit_Recalls_Resize()
   
   If Listview1.Visible Then
      Listview1.top = ReferenceHboxForTopColumnview.top + ReferenceHboxForTopColumnview.Height
   End If
   If Vbox_OutstandingRecalls.visible Then
      Settings["FRecalls_Embedded_" & Embedded_form & "/VSplit_Recalls"] = VSplit_Recalls.Layout
   Endif
   
End

Public Sub EditAreaButtons_Click()
   'Do remove this, it is used in FInbox
   
   Select Case Last.tag
      Case "save"
         Save()
      Case "new recall"
         New_Entry()
      Case "help"
         FClinical.Help_Show("recalls.html", "Help:Recalls", True)
   End Select
   
End

Public Sub Form_Close()
   
   Settings_Save()
   
End

Public Sub Form_Open()
   
End
