' Gambas class file
' Copyright (C) 2008,2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' Delete from clin_recalls.recalls;
' Delete from clin_recalls.lu_reasons;
' ALTER SEQUENCE clin_recalls.recalls_pk_seq
'      INCREMENT 1 MINVALUE 1 
'     MAXVALUE 9223372036854775807 RESTART 1 ;
'     
' ALTER SEQUENCE clin_recalls.lu_reasons_pk_seq
'      INCREMENT 1 MINVALUE 1 
'     MAXVALUE 9223372036854775807 RESTART 1 
'     CACHE 1 NO CYCLE ;
'     
' PURPOSE      A module to log recalls and reminders needed in patient care
'              See also Clerical/recall_management/FRecallManagment
'              which is used to send out referral letters
' BUGS         email rterry@internode.on.net or rterry@pacific.net.au
' ----------------------------------------------------------------------

Private bEmbedded As Boolean               'If true this form is embedded elsewhere than as a main tab
Public Embedded_form As String            'Name of the form or place it is embedded eg Inbox
Public Recalls As Collection              'Set by embedding form
Public AccompanyingForms As Collection
Public RecallReasons As Collection
Private currentrecall As Collection 
Public currentReason As Collection
Private bExit As Boolean
Private bEditing As Boolean
Private bKeyValid As Boolean
Private sTempDate As Date
Private currentconsult As CConsult  
Private pk_recall As Integer
Private fk_urgency As Integer
Private fk_reason As Integer
Private interval As Integer
Private fk_interval_unit As Integer
Private default_interval As Integer
Private fk_default_interval_unit As Integer
Public FAdditionalNotesEditor As FEditor
Private cmbTemplates As ComboBox
Private template As Collection
Private templates As Collection '0 indexed to match the combo
Private fk_progressNote As Integer
Private cProgressNote_Section As Integer
Private fk_pasthistory As Integer
Private fk_table_row As Integer        'fixme fim my name = e.g fk_document
Private schema As String
Private table As String 

Public Sub set_embedded(flag As Boolean, embeddedinform As String)
   '--------------------------------------------------
   'If this form is embeded from another form set flag
   'embeddedinform = either "notes" or "documents"
   '--------------------------------------------------
   
   bEmbedded = flag
   Embedded_form = embeddedinform
   
End

Public Sub Set_Audit_Schema_Table_SourceRowKey(k As Integer, s As String, t As String)       
   '-----------------------------------------------------
   'if the recall  is embedded in another form which
   'wants to keep track of this recall pad item, then
   'this collection is set by the calling form
   '------------------------------------------------------
   
   fk_table_row = k
   table = t
   schema = s
   
End

Public Sub Form_KeyPress()
   
   Dim CtrlDown As Boolean
   Dim FnDown As Boolean
   
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
         Case Asc("N")
            EditArea_Clear()
            
         Case Asc("S")
            Save()
      End Select
   End If
   
End

Public Sub Form_Close()
   '------------------
   'Save splits layout
   '------------------
   
   Settings_Save()
   
End

Public Sub ReLoad()
   
   Recalls_This_Consult_Show()   'show recalls ordered this consult
   EditArea_Clear()              'clear the editing area and set focus to txtRecallFor
   
End

Public Sub Init(cons As CConsult)
   '---------------------------------------------------------
   'Do all the form initialisation stuff like adding stuff to 
   'combo's, setting numbers of columns in lists, displaying
   'the patients contact details
   '---------------------------------------------------------
   
   currentconsult = Cons         'set current consult
   Layout_Controls()
   Try Settings_Load()         'load settings for this form
   cProgressNote_Section = const.cSection_GeneralNotes
   mnuHealthIssues_Refresh()
   Patient_ShowContactDetails()  'show ways patient can be contacted
   ReLoad()
   
End

Public Function Consult_Exists() As Boolean
   '-----------------------------------------------------
   'If the consult as been passed to the form return true
   '-----------------------------------------------------  
   
   If IsNull(currentconsult) Then Return False
   Return True
   
End

Public Function Consult_Set_Null() 
   '-----------------------------------------------------
   'If the consult as been passed to the form return true
   '-----------------------------------------------------  
   
   currentconsult = Null
   
End

Public Sub Save()
   '--------------------------------------------------------------
   'Save the current edit area recall and updates the recalls list
   'Need this amount of info to save
   'For table clin_recalls.recalls
   '     due date 
   '     fk_reason           
   '     fk_contact_method   
   '     fk_urgency          
   '     fk_appointment_length  
   '     fk_staff          'NB: THIS MAY NOT BE current staff member
   '                            but current code dosn't implement this
   '     fk_lu_audit_action            
   '     additional_text             
   '     deleted boolean,            
   '     "interval" ,
   '   fk_interval_unit ,
   '
   '   for table clin_recalls.lu_recall_intervals
   '     fk_reason
   '     fk_default_interval             
   '     fk_default_interval_unit
   '--------------------------------------------------------------
   
   Dim recall As New Collection
   Dim sPerson As String            'person who the recalled patient will see
   Dim sProgressNote As String 
   
   If Vbox_EditArea.Padding = 0 Then Return ' no changes, nothing to save
   If Not Valid_Recall() Then Return
   ' -----------------------------------------------------------
   ' Now load a fresh collection with data from the widgets
   ' RICHARD: please add missing fields
   ' -----------------------------------------------------------
   recall!fk_urgency = fk_urgency
   recall!fk_reason = fk_reason
   recall!reason = txtRecallFor.Text
   recall!default_interval = default_interval
   recall!fk_default_interval_unit = fk_default_interval_unit
   recall!fk_interval_unit = fk_interval_unit
   recall!interval = interval 
   recall!due = Val(txtdate.text)
   recall!fk_contact_method = cmbContactMethod.Index
   recall!fk_appointment_length = cmbAppointmentLength.Index
   recall!active = True
   recall!additional_text = FAdditionalNotesEditor.Get_Copy_of_Editor_text()
   recall!fk_staff = modDBConnect.currentUser!fk_staff 
   If fk_pasthistory <> 0 Then
      recall!fk_pasthistory = fk_pasthistory
   End If
   ' txtAdditionalNotes.Text
   'Temporarily put in current user as person to undertake recall but this
   'may not be the case and code will be inserted to fix this
   'FIXME RICHARDs
   ' If IsNull(recall!fk_progressnote) Then
   '    fk_progressnote = -1
   ' Else
   '    fk_progressnote = recall!fk_progressnote
   ' End If
   '--------------------------------------------------------------------------------------
   'If progress notes exist, then they will be edited if this save is occurring during the
   'same consultation it was created
   '--------------------------------------------------------------------------------------
   sProgressNote = "<B> Recall logged:</B> for " & txtRecallFor.Text & " due on " & Format(Val(txtdate.text), "dd/mm/yyyy")
   modDBConnect.BeginTrans()
   recall!fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, sProgressNote, cProgressNote_Section, fk_progressNote, txtHealthIssue.text, fk_pasthistory, False)
   pk_recall = modRecallsDBI.Save(currentconsult, pk_recall, recall)
   'if Embedded from the inbox, link this recall back to the document in an audit trail
   If fk_table_row Then
      modInboxDBI.Link_Document_Action(Schema, table, pk_recall, fk_table_row)
   Endif
   '  modAudit.MakeAudit(currentconsult, "viewed and filed document", "documents.documents", SelectedDocument!pk_document, const.cSection_Documents, "")
   
   modDBConnect.CommitTrans()
   ReLoad()                    'update the list under edit area to show recalls this consult, default to new edit
   
   If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then
      FClinical.Refresh_Section(const.cSection_Recalls) 'retrieve the data from the backend again.
      FClinical.Refresh_AllPreviousNotes()
   End If   
   
End

Public Sub Refresh_Lists()
   '-------------------------------------
   'Updates the lists the user is viewing
   '-------------------------------------
   'user ian's u as collection fixthis
   ' sPerson = gvar.staff_member!Title & " " & gvar.staff_member!wholename
   ' cvwRecalls.Add(pk_recall, 0)
   ' cvwRecalls[pk_recall][0] = Format(currentRecall!due, "dd/mm/yyyy")
   ' cvwRecalls[pk_recall][1] = currentRecall!reason
   ' cvwRecalls[pk_recall][2] = "Contact method: " & currentRecall!contact_method
   ' cvwRecalls[pk_recall][3] = "To see: " & sPerson
   ' 
   
End

Public Sub mnuHealthIssues_Click()
   '---------------------------------------------------
   'User wants to link a request form to a health issue
   'The menu tag = the pk_pasthistory
   '---------------------------------------------------
   
   Select Case Last.tag
      Case "general notes", "remove link"
         txtHealthIssue.text = "General Notes"
         cProgressNote_Section = const.cSection_GeneralNotes
         fk_pasthistory = 0
      Case Else
         txtHealthIssue.text = currentconsult!past_history[Last.tag]!description
         fk_pasthistory = Last.tag
         cProgressNote_Section = const.cSection_recalls
   End Select
   
End

Public Sub mnuHealthIssues_Refresh()
   '------------------------------------------------------------------
   'Refreshes the progress notes menu on the main toolbar
   'Clears all existing entries as user could have added new problems
   'rebuilds the menu with menu's for
   '*show all notes
   '*general notes
   '*major problems as submenu
   '*significant active problems as submenu
   '*inactive problems as submenu
   '-------------------------------------------------------------------   
   
   Dim mnu As Menu
   Dim mnu_major As Menu
   Dim mnu_active As Menu
   Dim mnu_inactive As Menu
   
   Dim PastHistoryCondition As Collection
   Dim bNeedSeparator As Boolean = True
   Dim bNoMainMenu As Boolean = True
   
   If Not currentconsult Then Return
   '----------------------------------------------------------------
   'Clear menu, even if exit this sub, don't want the last patient's
   'menu items on the list
   '----------------------------------------------------------------
   mnuHealthIssues.Children.Clear()  
   mnu = New Menu(mnuHealthIssues) As "mnuHealthIssues"
   mnu.name = "General Notes"
   mnu.caption = "General Notes"
   mnu.tag = "general notes"  
   If currentconsult!past_history.count = 0 Then Return 
   currentconsult.Refresh("past_history")  
   '---------------------------------------------------------
   'Next add all the major conditions followed by a separator
   '---------------------------------------------------------
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!major Then
         If bNeedSeparator Then
            mnu = New Menu(mnuHealthIssues)
            mnu.name = "separator_1"
            mnu.caption = ""
            bNeedSeparator = False  
         End If
         If bNoMainMenu Then
            mnu_major = New Menu(mnuHealthIssues)
            mnu_major.name = "mnuHealthIssues_Major"
            mnu_major.caption = "Major Health Issues"
            mnu_major.tag = "major"
            bNoMainMenu = False  
         End If
         
         mnu = New Menu(mnu_major) As "mnuHealthIssues"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next
   
   bNeedSeparator = True   
   bNoMainMenu = True
   '---------------------------------------------------------------
   'Next add all the significant conditions followed by a separator
   '---------------------------------------------------------------
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!active = True Then
         If bNeedSeparator Then
            mnu = New Menu(mnuHealthIssues)
            mnu.name = "separator_2"
            mnu.caption = ""
            bNeedSeparator = False  
         End If  
         If bNoMainMenu Then
            mnu_active = New Menu(mnuHealthIssues)
            mnu_active.name = "mnuHealthIssues_Significant"
            mnu_active.caption = "Significant Issues"
            mnu_active.tag = "significant"
            bNoMainMenu = False  
         End If         
         mnu = New Menu(mnu_active) As "mnuHealthIssues"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next 
   bNeedSeparator = True   
   bNoMainMenu = True
   '--------------------------------------------------------------
   'Lastly add all the inactive conditions followed by a separator
   '--------------------------------------------------------------
   For Each PastHistoryCondition In currentconsult!past_history
      If PastHistoryCondition!active = False And PastHistoryCondition!major = False
         If bNeedSeparator Then
            mnu = New Menu(mnuHealthIssues)
            mnu.name = "separator_3"
            mnu.caption = ""
            bNeedSeparator = False  
         End If  
         If bNoMainMenu Then
            mnu_inactive = New Menu(mnuHealthIssues)
            mnu_inactive.name = "mnuHealthIssues_Significant"
            mnu_inactive.caption = "Inactive Issues"
            mnu_inactive.tag = "inactive"
            bNoMainMenu = False  
         End If         
         
         mnu = New Menu(mnu_inactive) As "mnuHealthIssues"
         mnu.name = PastHistoryCondition!description
         mnu.caption = PastHistoryCondition!description
         mnu.tag = PastHistoryCondition!pk_pasthistory
      End If
   Next
   
End

Public Sub Settings_Save()
   
   If bEmbedded Then
      '-----------------------------------------------------------------
      'The string value of Embedded_form is set by the calling form
      'currently Inbox or Consult form so appropriate split values saved
      '-----------------------------------------------------------------
      Settings["Recalls_Embedded_" & Embedded_form & "/VSplit_Recalls"] = VSplit_Recalls.layout
      Settings["Recalls_Embedded_" & Embedded_form & "/HSplit_EditArea"] = HSplit_EditArea.Layout
      Settings["Recalls_Embedded_" & Embedded_form & "/HSplit_AdditionalNotes"] = HSplit_AdditionalNotes.Layout
   Else
      Settings["Recalls/VSplit_Recalls"] = VSplit_Recalls.layout
      Settings["Recalls/HSplit_EditArea"] = HSplit_EditArea.Layout
      Settings["Recalls/HSplit_AdditionalNotes"] = HSplit_AdditionalNotes.Layout
      
   End If
   
End

Private Sub Settings_Load()
   
   If bEmbedded Then
      Try VSplit_Recalls.layout = Settings["Recalls_Embedded_" & Embedded_form & "/VSplit_Recalls"]
      Try HSplit_EditArea.Layout = Settings["Recalls_Embedded_" & Embedded_form & "/HSplit_EditArea"]
      Try HSplit_AdditionalNotes.Layout = Settings["Recalls_Embedded_" & Embedded_form & "/HSplit_AdditionalNotes"]
   Else
      Try VSplit_Recalls.layout = Settings["Recalls/VSplit_Recalls"]
      Try HSplit_EditArea.Layout = Settings["Recalls/HSplit_EditArea"]
      Try HSplit_AdditionalNotes.Layout = Settings["Recalls/HSplit_AdditionalNotes"]
   End If
   
End

Public Sub EditArea_Clear()
   'Clear the editing area, re-set current recall
   
   Dim u As Collection
   
   u = modDBConnect.currentUser
   bExit = True                                      'stop re-entrance into change routines
   Vbox_EditArea.BackGround = Color.White             'remove red outline around edit area  ?remove colour leave red
   Vbox_EditArea.Padding = 0                         
   listview1.Visible = False                         'remove popup list if showing
   txtRecallFor.text = ""                            'clear the text boxes
   txtDefaultInterval.text = ""
   txtInterval.text = "" 
   txtDate.text = ""
   cmbSeeAnyone.index = 0                            'FIXME UNHARD CODE ME
   cmbSeeAnyone.Enabled = False
   lblRecallForInvalid.Visible = False
   lblStaffMissing.Visible = False
   txtSeeSpecificPerson.text = ""
   '------------------------------------------------------------------
   'clear editor and any red notification around it
   'note that the editor_clear() dosn't remove the red box, becuase in 
   'some situations (not in this form) the cleared editor could be the
   'actual change as it could have contained text
   '------------------------------------------------------------------
   FAdditionalNotesEditor.Editor_Clear()
   FAdditionalNotesEditor.Vbox_ConsultNotes.Background = Color.gray 
   '-----------------------------------------------------------------------
   'Create new recall colection and fill with default values where possible
   'note that not all of these are saved, but are needed for display
   '-----------------------------------------------------------------------
   AccompanyingForms = New Collection             'any forms to be sent with recall NOT IMPLEMENTED
   RecallReasons = New Collection
   '--------------------------------------------------------------------
   'NB:this is important to understand:
   'fk_staff  = key to admin.staff table =  staff to see when comes back
   'this defaults to the person entering the data but can be changed
   '-------------------------------------------------------------------- 
   txtSeeSpecificPerson.text = u!title & " " & u!wholename 
   cmbContactMethod.Index = const.CommModalityLetter          'default = contact by letter 
   txtContactDetails.text = ""
   cmbAppointmentLength.index = const.AppointmentLengthStandard
   rbUrgencyRoutine.Value = True
   bEditing = False                'not in edit mode
   fk_pasthistory = 0
   txtHealthIssue.text = "General Notes"   'fk_pasthistory is the default of 0
   cProgressNote_Section = const.cSection_GeneralNotes
   txtRecallFor.SetFocus()
   bExit = False
   fk_reason = 0  'default
   fk_progressNote = -1
   fk_urgency = const.UrgencyLevelRoutine 'default
   pk_recall = -1
   
End

Public Sub Layout_Controls()
   '----------------------------------------------------
   'Needs as better name, in here just to some gui stuff
   '----------------------------------------------------
   ' bExit = True
   
   Dim lbl As Label
   
   cvwRecalls.Columns.count = 6 'recall for|due date|contact method|Person to see|additional notes
   cmbSeeAnyone.Add("", 0) 'fixme unhard code me
   cmbSeeAnyone.Add("General Practitioner", 1) 'fixme unhard code me
   cmbSeeAnyone.Add("Nurse", 2)
   cmbContactMethod.Clear()
   cmbContactMethod.Add("Home", const.CommModalityHome)
   cmbContactMethod.Add("Work", const.CommModalityWork)
   cmbContactMethod.Add("Fax", const.CommModalityFax)
   cmbContactMethod.Add("Email", const.CommModalityEmail)
   cmbContactMethod.Add("Mobile", const.CommModalityMobile)
   cmbContactMethod.Add("VOIP", const.CommModalityVOIP)
   cmbContactMethod.Add("Web URL ", const.CommModalityWeb)
   cmbContactMethod.Add("Phone unspecified", const.CommModalityPhone)
   cmbContactMethod.Add("Toll Free", const.CommModalityTollFree)
   cmbContactMethod.Add("Letter", const.CommModalityLetter)
   'cmbContactMethod.Index = const.CommModalityLetter
   cmbAppointmentLength.Add("Brief", const.AppointmentLengthBrief)
   cmbAppointmentLength.Add("Standard", const.AppointmentLengthStandard)
   cmbAppointmentLength.Add("Long", const.AppointmentLengthLong)
   cmbAppointmentLength.Add("Prolonged", const.AppointmentLengthProlonged)
   'fixme this code is fucked
   If IsNull(FAdditionalNotesEditor) Then
      FAdditionalNotesEditor = New FEditor(Vbox_AdditionalNotes)
      FAdditionalNotesEditor.bExit = True
      FAdditionalNotesEditor.lblHeading.text = "Additional notes for recall letter"
      lbl = New Label(FAdditionalNotesEditor.HBox_Editor)
      With lbl 
         .AutoResize = True
         .Text = " Templates "
         .expand = False
      End With
      cmbTemplates = New ComboBox(FAdditionalNotesEditor.HBox_Editor) As "cmbTemplates"
      cmbTemplates.Expand = True
   End If
   EditArea_Resize_Labels()
   
   '----------------------------------------
   'Get any existing templates load to combo
   '---------------------------------------- 
   templates = modUtil.LoadCombo(cmbTemplates, modRecallsDBI.Templates_Get(), "name")
   
End

Public Sub cmbTemplates_click()
   
   FAdditionalNotesEditor.teNotes.RichText = templates[cmbTemplates.index]!template
   
End

Public Sub EditArea_KeyRelease()
   
   Select Case Last.tag
      Case "recall for"
         '---------------------------------------------------------
         'User is typing in what they want the patient recalled for
         '---------------------------------------------------------
         If Len(Trim(txtRecallFor.Text)) Then  
            lblRecallForInvalid.Visible = False
         End If
         Get_Reasons()
      Case "see specific person"
         modRecallsDBI.Staff_Get_Clinical(txtSeeSpecificPerson, listview1, lblStaffMissing)
         
   End Select 
   
End

Public Sub Get_Reasons()
   '----------------------------------------------------
   'Gets a list of reasons for recall as a collection 
   'loads these into listview1
   'Clears the popup list, attempts to get a collection
   'matching an instring search of what user is typing
   'if the collection has contents display in popup list
   '----------------------------------------------------
   
   Dim reason As Collection 
   
   listview1.Clear()
   If Trim(txtRecallFor.text) <> "" Then 
      RecallReasons = modRecallsDBI.Get_Reasons(Trim(txtRecallFor.Text))  
      If RecallReasons.count = 0 Then 
         listview1.Visible = False
         Return 
      End If      
      For Each reason In RecallReasons
         '--------------------------------------------------------------------------
         'Note gambas accepts pk_reason though an integer automatically as a string
         'so when one reads it back from the key, must convert to a number if using
         'it to save
         '--------------------------------------------------------------------------
         listview1.Add(reason!pk_reason, reason!reason)
      Next 
      listview1.tag = txtRecallFor
      listview1.Raise
      listview1.Visible = True
   Else
      listview1.Visible = False
   End If   
   
End

Public Sub EditArea_Change()
   
   If bExit Then Return
   Select Case Last.tag
      Case "recall for"
         'If no reason in the textbox, create or reset
         If Len(Trim(txtRecallFor.Text)) Then  
            lblRecallForInvalid.Visible = False
         Else
            fk_reason = 0
         End If
      Case "default interval"
         If txtDefaultInterval.text = "" Then 
            txtDate.text = ""
         End If
      Case "interval"
         If Trim(txtInterval.text) <> "" Then 
            Calculate_Recall_Date(txtInterval)
         End If
         
      Case "see specific person"
         If Trim(txtSeeSpecificPerson.text) <> "" Then
            cmbSeeAnyone.index = 0
            cmbSeeAnyone.enabled = False
         End If
         
   End Select  
   'Vbox_EditArea.BackGround = Color.Red
   '  Vbox_EditArea.Padding = 1  
   EditArea_Notify_DataChange(True) '
   
End

Public Sub EditArea_GotFocus()
   '--------------------------------------------------
   'Give the focussed control a nice background color
   'FIXME: Make this globally configureable.
   '--------------------------------------------------
   
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
         
      Case "recall for"
         With listview1
            .top = Vsplit_Recalls.top + HBox_RecallFor.Height
            .left = txtRecallFor.Left + Vbox_Recalls.padding
            '   .Left = Vbox_EditArea.left + txtRecallFor.Left
            .width = txtRecallFor.Width
         End With
         
      Case "see specific person"
         With listview1
            .top = Hbox_Heading.Height + Vbox_Recalls.padding + Vbox_EditArea.padding + Hbox_SeeSpecificPerson.Top + txtSeeSpecificPerson.Height
            .left = txtSeeSpecificPerson.Left + Vbox_Recalls.padding
            .width = txtSeeSpecificPerson.Width
         End With
   End Select
   
End

Public Sub EditArea_LostFocus()
   '-----------------------------------------------------------------
   'Make sure that the whole line is showing be resetting cursor pos
   'before losing focus, and set background back to white
   '-----------------------------------------------------------------
   
   FAdditionalNotesEditor.teNotes.pos = 1
   ' txtAdditionalNotes.pos = 1 
   Last.BackGround = Color.white
   Select Case Last.tag
      Case "recall for"
         ' If txtRecallFor.Text = "" Then
         '      Outline_Hbox(Hbox_RecallFor, True)
         
         ' End If
      Case "default interval"     
         Calculate_Recall_Date(Last)
      Case "date"
         ' probably duplicated - is in the change event
         ' If Not IsDate(Val(Trim(txtdate.text))) Then 
         '  Outline_Hbox(Hbox_Date, True)
         
         ' Else
         '   Outline_Hbox(Hbox_Date, False)
         ' End If
   End Select
   
End

Public Sub EditArea_Resize_Labels()
   '-------------------------------------------------------------------
   'Adjust all lables as per current system font to make sure text fits
   '-------------------------------------------------------------------
   
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblmeasure)
   
End

Public Sub EditAreaButtons_Click()
   
   Select Case Last.tag
      Case "save"
         Save()
      Case "new recall"
         EditArea_Clear()
      Case "preview"
      Case "help"
         FClinical.Help_Show(Application.Path &/ "help/recalls.html", "Help:Recalls", True)
   End Select
   
End 

Public Function EditArea_TxtBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean  
   
   Select Case tag
      Case "recall for", "see specific person", "additional notes", "forms"
         bKeyValid = True
      Case "default interval", "interval"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_Date_DWMY, keycode)
      Case "date"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_KeyPress()
   '-------------------------------------------------------------
   'first make sure only valid keys for each text box are entered
   'here effectively this means only the date
   'FIXME  - put in commentry here to show how only numbers/mMyYdD allowed in date
   '--------------------------------------------------------------
   
   Dim x As Integer
   
   bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code, Last.tag)
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case Key.Code
      Case Key.Down
         Select Case Last.tag
            Case "recall for", "see specific person"
               If listview1.visible Then
                  listview1.MoveCurrent
                  listview1.Item.Selected = True
                  listview1.SetFocus
               End If
               
         End Select
      Case Key.Return, Key.tab
         '--------------------------------------------------------------
         'Enter or tab was pressed, ie user wants the term they've typed
         'but may have not selected if from the list
         '--------------------------------------------------------------
         Select Case Last.tag
            Case "recall for"
               '-----------------------------------------------------------
               'User could have pressed return when they saw that the term
               'they wanted was in the list, so if so, get the key
               '----------------------------------------------------------  
               If listview1.Visible Then
                  listview1.MoveFirst
                  For x = 0 To listview1.count - 1
                     If LCase(listview1.Item.text) = LCase(Trim(txtRecallFor.text)) Then
                        listview1.MoveCurrent
                        listview1_DblClick()
                        Break
                     End If
                     listview1.MoveNext
                  Next
                  listview1.Visible = False
                  txtDate.SetFocus()
               Else
                  '------------------------------------------------
                  'must be a new term set fk_reason for 0 so that
                  'when recall is saved this new term will be saved
                  'on a per-user basis
                  'Next get the Default interval
                  '------------------------------------------------
                  lblDefaultInterval.Visible = True
                  txtDefaultInterval.SetFocus()
                  
               End If
            Case "default interval"  
               '---------------------------------------------------------
               'If at this point, either the user is putting in a decault
               'for the first time, or changing an existingone
               'if no date present, insert the date from calculating
               'time from now  + the default time
               '----------------------------------------------------------
               If Not txtDate.text Then
                  Calculate_Recall_Date(txtDefaultInterval)
                  If txtDate.text Then
                     ' txtInterval.text = txtDefaultInterval.Text
                     tbSave.SetFocus()
                  End If
               Else
                  If Not txtInterval.text Then
                     txtInterval.SetFocus
                  Else
                     tbSave.SetFocus()
                  End If
               End If
            Case "interval"  
               Calculate_Recall_Date(txtInterval)
               If txtDate.text Then
                  
                  tbSave.SetFocus()
               End If
            Case "date"
               If IsDate(txtDate.text) Then
                  tbSave.SetFocus()
               Else
                  txtDate.text = ""
                  txtDate.SetFocus()
               End If
               
            Case "contact details"
               txtSeeSpecificPerson.SetFocus()
            Case "see specific person"
               If Trim(txtSeeSpecificPerson.text) = "" Then
                  cmbSeeAnyone.Enabled = True
                  cmbSeeAnyone.index = 1
                  cmbSeeAnyone.SetFocus
               Else
                  '  txtAdditionalNotes.SetFocus()
                  FAdditionalNotesEditor.teNotes.SetFocus()
               End If
            Case "see anyone"
               '  txtAdditionalNotes.SetFocus()
               FAdditionalNotesEditor.teNotes.SetFocus()
         End Select
   End Select
   
End

Public Sub cmbEditArea_KeyPress()
   
   Select Case Key.Code
      Case Key.Return
         Select Case Last.tag
            Case "contact method"
               txtContactDetails.SetFocus()
            Case "appointment length"
               txtSeeSpecificPerson.SetFocus()
            Case "see anyone"
               '  txtAdditionalNotes.SetFocus()
               FAdditionalNotesEditor.teNotes.SetFocus()
         End Select
   End Select
   
End

Public Sub Listview1_DblClick() 
   '----------------------------------------------------
   'CALLED BY  :user directly clicks on list or
   '           : listview1_keyPress where key =enter
   '
   'listview1 used to display multiple choice of items
   'when user as initiated  search eg for recall reasons
   '----------------------------------------------------
   
   Dim SelectedReason As New Collection       'for readability
   
   '-----------------------------------------------------------
   'Note this gambas quirk: the key is a string value, but when
   'the list was loaded gambas auto-converts any key, numeric
   'or otherwise to a string, so if you don't convert it back
   'implicitly as an integer, it will remain in your collection
   'as a string 
   '-----------------------------------------------------------
   listview1.MoveCurrent                  'set this for the key       
   SelectedReason = recallreasons[listview1.Item.key]
   Select Case listview1.Tag.tag
      Case "recall for"
         '-------------------------------------------
         'User has been searching for a recall reason
         '-------------------------------------------    
         txtRecallFor.text = listview1.Item.Text
         fk_reason = listview1.Item.Key 
         lblRecallForInvalid.Visible = False
         listview1.Visible = False
         '----------------------------------------------------------
         'When first selected set actual interval = default interval
         '----------------------------------------------------------
         txtDefaultInterval.text = SelectedReason!interval & SelectedReason!abbrev_text 
         txtInterval.text = txtDefaultInterval.text 
         '--------------------------------------------------------------
         'Set variables,  Calculate_Recall_Date() sets fk_interval_units
         'if interval is changed  by user
         '--------------------------------------------------------------
         interval = SelectedReason!interval
         fk_interval_unit = SelectedReason!fk_interval_unit
         
         default_interval = SelectedReason!interval
         fk_default_interval_unit = SelectedReason!fk_interval_unit
         
         Calculate_Recall_Date(txtDefaultInterval)
         chkPatientDefaultInterval.value = True
         '----------------------------------------------------
         'Lastly, check if any template exists for this reason
         'if reason = matched to a combo item, auto-show
         'Can't use  cmbTemplates.Find(Trim(txtRecallFor.text))
         'because this is case sensitive
         '----------------------------------------------------
         ' If cmbTemplates.Find(Trim(txtRecallFor.text)) <> -1 Then
         '    cmbTemplates.index = cmbTemplates.Find(Trim(txtRecallFor.text))
         '    cmbTemplates_click()
         ' End If   
         ' For Each Template In templates
         '    If Trim(Lower(txtRecallFor.text)) = Lower(template!name) Then
         '       cmbTemplates.index = templates.Key
         '       cmbTemplates_click()
         '       Break
         '    End If
         ' Next
         tbSave.SetFocus()
         '---------------------------------------------------------
         'At this point, the user either accepts all these defaults
         'or goes back and changes them.
         '---------------------------------------------------------
      Case "see specific person"
         'bugger - fix me need a column view here"
         txtSeeSpecificPerson.text = listview1.Item.Text
         lblStaffMissing.Visible = False
         listview1.Visible = False
         '   txtAdditionalNotes.SetFocus()
         FAdditionalNotesEditor.teNotes.SetFocus()
   End Select
   
End 

Public Sub Edit()
   
   Dim recall As Collection
   Dim sString As String
   
   cvwRecalls.MoveCurrent   
   pk_recall = cvwRecalls.Item.Key
   recall = currentconsult!recalls_this_consultation[pk_recall]
   bExit = True  
   fk_progressnote = -1 'default to new progressnote
   '--------------------------------------------------------------------------------------------
   'Allow editing or progress note when recall changed in same day FIX ME NOT IF STAFF DIFFERENT
   'otherwise  default to new progressnote (-1)
   '---------------------------------------------------------------------------------------------
   If Not IsNull(recall!fk_progressnote) Then
      If Format(Now, "dd/mm/yyyy") = Format(recall!consult_date, "dd/mm/yyyy") Then 
         fk_progressnote = recall!fk_progressnote
      End If
   End If 
   If IsNull(recall!fk_pasthistory) Then
      txtHealthIssue.text = "General Notes"
      fk_pasthistory = 0
   Else
      Try fk_pasthistory = recall!fk_pasthistory
      txtHealthIssue.text = currentconsult!past_history[fk_pasthistory]!description
   End If   
   txtRecallFor.Text = recall!reason
   txtInterval.text = recall!interval & recall!abbrev_text
   txtdate.text = Format(recall!due, "dd/mm/yyyy")
   cmbAppointmentLength.index = recall!fk_appointment_length
   cmbContactMethod.index = recall!fk_contact_method
   Select Case recall!urgency
      Case const.UrgencyLevelRoutine
         rbUrgencyRoutine.value = True
      Case const.UrgencyLevelModerate
         rbUrgencymoderate = True
      Case const.UrgencyLevelUrgent
         rbUrgencyUrgent = True
   End Select
   fk_urgency = recall!fk_urgency
   fk_reason = recall!fk_reason
   fk_default_interval_unit = recall!fk_default_interval_unit
   default_interval = recall!default_interval
   sSTring = recall!default_interval
   Select Case fk_default_interval_unit
      Case const.Units_month
         sString &= "M"
      Case const.Units_year
         sString &= "Y"
   End Select
   txtDefaultInterval.text = sString
   ' txtAdditionalNotes.text = recall!additional_text
   FAdditionalNotesEditor.teNotes.text = recall!additional_text
   
   bExit = False 
   
End

Public Sub Delete()
   '-----------------------------------------------------------
   ' PURPOSE:   Deletes the current recall keeping audit trail
   ' The menu tag is const.cAuditAction_Delete
   '-----------------------------------------------------------
   
   cvwRecalls.MoveCurrent
   currentrecall = Recalls[cvwRecalls.Item.key]
   modRecallsMenu.Process(currentrecall, Last.tag, currentconsult)
   ReLoad()
   
End

Public Function Valid_Recall() As Boolean
   '------------------------------------------------------------
   'PURPOSE  : Checks recall is valid in content prior to save
   'RETURNS  : true flag if valid
   'CALLED BY: Save()
   '
   'Reason for the recall
   'This may/may not be a coded reason, could be a free sentance
   'e.g Third hepatitis B injection and fk_reason could be 0
   '------------------------------------------------------------
   
   If txtRecallFor.Text = "" Then 
      ' Outline_Hbox(Hbox_RecallFor, True)
      TxtRecallFor.SetFocus()
      Return False
   End If
   If txtDefaultInterval.Text = "" Then
      '  Outline_Hbox(HBox_DefaultInterval, True)
      txtDefaultInterval.SetFocus()
      Return False   
   End If   
   If txtInterval.Text = "" Then
      txtInterval.SetFocus()
      Return False   
   End If   
   '--------------------------------------------------
   'Check once again the date is present and validated
   '--------------------------------------------------
   ' txtDate.text = "2009/09/09"
   If Not IsDate(txtDate.text) Then
      '  Outline_Hbox(Hbox_Date, True)
      txtDate.SetFocus()
      Return False
   End If
   If txtSeeSpecificPerson.Text = "" Then
      txtSeeSpecificPerson.SetFocus()
      Return False
   End If
   '--------------------------------------
   'linkages are important so enforce this
   '--------------------------------------
   If Trim(txtHealthIssue.text) = "" Then
      Message.Info("Please select a health issue to link to this request\nor link to 'General Notes'")
      MenuButton1.SetFocus()
      Return False
   End If
   
   Return True
   
End

Public Sub Recalls_This_Consult_Show()
   '-------------------------------------------------------
   'Updates the display in the recalls list and re-orders
   'the collection of recalls. Puts red line around the
   'list if unsaved data
   '-----------------------------------------------------
   
   Dim recall As Collection
   Dim x As Integer
   Dim bDataChanged As Boolean
   Dim sPerson As String
   
   currentconsult.Refresh("recalls_this_consultation")
   Recalls = currentconsult!recalls_this_consultation
   cvwRecalls.Clear()           'clear the list    
   cvwRecalls.Columns.Count = 5
   For Each recall In recalls 
      x = recall!pk_recall
      sPerson = recall!title & " "
      sPerson &= recall!wholename
      
      cvwRecalls.Add(x, 0)
      cvwRecalls[x][0] = Format(Recall!due, "dd/mm/yyyy")
      ' cvwRecalls[x][1] = Recall.reason
      cvwRecalls[x][1] = Recall!reason
      cvwRecalls[x][2] = "Contact method: " & Recall!contact_by
      cvwRecalls[x][3] = "To see: " & sPerson
      
      Inc x
   Next
   '------------------------------------------------------
   'If no items (eg could have been, but last one deleted
   'remove the padding (and the red colour)
   'otherwise, show outstanding data to be saved
   '------------------------------------------------------
   If cvwRecalls.count = 0 Then
      VBox_EditArea.Padding = 0
   Else
      EditArea_Notify_DataChange(bDataChanged)
      
   End If  
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   '--------------------------------------------------
   'Adds or removes padding around edit area and lists
   'to indicate if data is changed and unsaved
   '--------------------------------------------------
   
   If flag Then
      Vbox_EditArea.Padding = 1
      Vbox_EditArea.Background = Color.red
      VBox_RecallsList.Background = Color.red
      VBox_RecallsList.Padding = 1 
      tbSave.foreground = Color.red
      
   Else
      Vbox_EditArea.Padding = 0
      Vbox_EditArea.Background = Color.white
      VBox_RecallsList.Background = Color.White
      VBox_RecallsList.Padding = 0
      tbSave.foreground = Color.Black
   End If
   
End  

Public Sub ListView1_KeyPress()
   
   If Key.code = Key.Return Then
      listview1_DblClick()
   End If
   
End

Public Sub cmbEditArea_LostFocus()
   
   Select Case Last.tag
      Case "contact method"
         If cmbContactMethod.index = const.ContactMethodLetter Then
            txtSeeSpecificPerson.SetFocus
         End If
         
   End Select
   
End

Public Sub cmbEditArea_MouseDown()
   
   If Last.tag = "see anyone" And Trim(txtSeeSpecificPerson.text) = "" Then
      cmbSeeAnyone.Enabled = True
      cmbSeeAnyone.index = 1  'default to GP
      
   End If
   
End

Public Sub Calculate_Recall_Date(txt As Textbox)
   '--------------------------------------------
   'Works out a date from e.g 18M or 2Y
   'FIXME put in weeks and days
   '--------------------------------------------
   
   Dim sIntervalUnits As String 'eg if txtdate contains 3M then units interval is 3
   Dim iNumberOfMonths As Integer      'do not need both these declared, but do for readability
   Dim iNumberOfYears As Integer 
   Dim iNumberOfDays As Integer
   Dim iNumberOfWeeks As Integer
   Dim vPossibleDate As Variant
   Dim aDate As Date
   Dim x As Integer
   
   bExit = True 'stop change event of edit area triggering
   If UCase(Right(Trim(txt.text), 1)) = "M" Then
      '---------------------------------------------------------------------------
      'Try and convert the rest of the string (ie left part which should be number
      'to a number, if error, pop up invalid date and return
      'Remember that  bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code) has
      'only allowed numbers or mM or Yy for this textbox, but some idiot could
      'have tried out patience by typing in e.g 10m10M or something
      '---------------------------------------------------------------------------
      Try iNumberOfMonths = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txtDate.text = "" 
         Return
      End If
      If txt.tag = "interval" Then
         fk_interval_unit = const.Units_month
         interval = iNumberOfMonths
      Else
         fk_default_interval_unit = const.Units_month
         default_interval = iNumberOfMonths
         If Trim(txtInterval.text) = "" Then 
            fk_interval_unit = const.Units_month
            interval = iNumberOfMonths
            txtInterval.text = txtDefaultInterval.Text
         End If
      Endif
      txtDate.text = Format(DateAdd(Now, gb.Month, iNumberOfMonths), "dd/mm/yyyy")
      
   Else If UCase(Right(Trim(txt.text), 1)) = "Y" Then
      '---------------------------------------------------------------------------
      'Try and convert the rest of the string (ie left part which should be number
      'to a number, if error, pop up invalid date and return
      'Remember that  bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code) has
      'only allowed numbers or mM or Yy for this textbox, but some idiot could
      'have tried out patience by typing in e.g 10m10M or something
      '---------------------------------------------------------------------------
      Try iNumberOfYears = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txtDate.text = "" 
         Return
      End If
      
      txtDate.text = Format(DateAdd(Now, gb.Year, iNumberOfYears), "dd/mm/yyyy")
      If txt.tag = "interval" Then
         fk_interval_unit = const.Units_year
         interval = iNumberOfYears
      Else
         fk_default_interval_unit = const.Units_year
         default_interval = iNumberOfYears
         If Trim(txtInterval.text) = "" Then 
            fk_interval_unit = const.Units_year
            interval = iNumberOfYears
            txtInterval.text = txtDefaultInterval.Text
         End If
         
      End If
      
   Else If UCase(Right(Trim(txt.text), 1)) = "W" Then
      Try iNumberOfWeeks = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
      If Error Then
         txtdate.text = "" 
         Return
      End If
      
      If txt.tag = "interval" Then
         fk_interval_unit = const.Units_week
         interval = iNumberOfWeeks
      Else
         fk_default_interval_unit = const.Units_week
         default_interval = iNumberOfWeeks
         If Trim(txtInterval.text) = "" Then 
            fk_interval_unit = const.iNumberOfWeeks
            interval = iNumberOfWeeks
            txtInterval.text = txtDefaultInterval.Text
         End If
         
      Endif
      txtDate.text = Format(DateAdd(Now, gb.Week, iNumberOfWeeks), "dd/mm/yyyy")
      
   Else
      
      If UCase(Right(Trim(txt.text), 1)) = "D" Then
         Try iNumberOfdays = Val(Left(txt.text, Len(Trim(txt.text)) - 1))
         If Error Then
            txtdate.text = "" 
            Return
         End If
         If txt.tag = "interval" Then
            fk_interval_unit = const.Units_day
            interval = iNumberOfdays
         Else
            fk_default_interval_unit = const.Units_day
            default_interval = iNumberOfdays
            If Trim(txtInterval.text) = "" Then 
               fk_interval_unit = const.Units_day
               interval = iNumberOfdays
               txtInterval.text = txtDefaultInterval.Text
            End If
         Endif
      End If
      txtDate.text = Format(DateAdd(Now, gb.Day, iNumberOfdays), "dd/mm/yyyy")
   End If
   bExit = False 
   
End

Public Sub EditArea_RadioButtons_Click()
   
   If bexit Then Return 
   Select Case Last.tag
      Case "routine"
         fk_urgency = const.UrgencyLevelRoutine
         
      Case "moderate"
         fk_urgency = const.UrgencyLevelModerate
         
      Case "urgent"
         fk_urgency = const.UrgencyLevelUrgent
         
   End Select  
   
End

Public Sub txtAdditionalNotes_KeyPress()
   
   If Key.code = Key.tab Then
      tbSave.SetFocus()
   End If
   
End

Public Sub cvwRecalls_Select()
   
   EditArea_Clear()
   
End

Public Sub Patient_ShowContactDetails()
   '----------------------------------------------------------------
   'Displays a list of means to contact the patient with full prefix
   'e.g home:02 59 292929 or Toll Free 1800 999 999
   'If embedded from INBOX no comms FIXME PUT IN COMMS IN INBOX CODE
   '----------------------------------------------------------------
   
   cvwContacts.Clear()
   Try modEditAreaHelpers.Patient_Comms_Display(currentconsult!comms, cvwContacts, True)
   
End

Public Sub mnuRecalls_Click()
   '--------------------------------------------------
   'user has clicked on a menu option in the popupmenu
   'over columnview recalls
   '--------------------------------------------------  
   
   Select Case Last.tag
      Case "edit"
         Edit()
      Case Const.cAuditAction_Delete
         Delete()
   End Select
   
End

Public Sub cvwRecalls_Menu()
   '---------------------------------------------------
   'If recalls exist for current consultation, show the
   'popup menu to allow delete or edit
   '---------------------------------------------------
   
   If cvwRecalls.count Then
      mnuRecalls.Popup()
   End If 
   
End

Public Sub EditAreaButtons_KeyPress()
   
   If key.code = key.Return Then
      Save()
   End If   
   
End

Public Sub cmbEditArea_Click()
   
   Select Case Last.tag
      Case "contact method"
         
      Case "appointment length"
         
   End Select
   
End
