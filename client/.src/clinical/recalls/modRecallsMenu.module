' Gambas module file

' Copyright (C)2008-2015 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-------------------------------------------------------------------------------------
' PURPOSE            Action menu options over lists of recalls
' HOW THIS WORKS     Currently only integer tags of a menu item are handled
'                    Each of these corresponds to clin_consult.lu_audit_actions keys
'                    If we need for example new intervals for a recall, appropriate
'                    modal dialogs are popped up.
'                    At the end of the day, the recall is saved and an audit trail
'                    is created, if necessary modAudit.MakeAudit will popup a modal
'                    dialog box to enforce a reason for the action eg a deletion
' SPECIAL NOTES      Note that recalls are 're-used' or 'rolled on'. For example
'                    if a hba1c is re-scheduled, then the original clin_recalls.recalls
'                    entry is used, but an entire audit trail is kept in the table
'                    clin_consult.progressnotes (as are all audits)
' BUGS               Email rterry@internode.on.net, rterry@internode.on.net
' -------------------------------------------------------------------------------------
Private currentconsult As Cconsult
Private currentrecall As Collection
Private NewRecall As Collection 

Public Sub Process(recall As Collection, tag As String, cons As Cconsult)
   '----------------------------------------------------------------------------------
   'Process the recall as per the menu's tag
   'CALLED BY        Fclinical.mnuTabbedListRecalls_click()
   'WHAT THIS DOES   Completes the menu action eg 'Recall completed' and
   '                 updates clin_recalls.recalls to reflect this
   '                 Keeps complete audit-trail in progress notes with display = False
   '                 After all the saves/commit > refreshes the general notes tab
   '                 if that tab is visible in FClinical gui
   '----------------------------------------------------------------------------------
   
   Dim FNewInterval As FRecallAdjustInterval 'popup to get new interval and re-log recall
   Dim bDeleted As Boolean                   'hence default = False =don't delete completed recall
   Dim bActive As Boolean                    'If true the recall is still active, default to false
   Dim iAuditAction As Integer
   Dim audit_reason As String 
   Dim Recall_Form As FRecalls
   
   Inc Application.Busy
   currentconsult = cons                     'used in other subroutines in this module
   currentrecall = recall                    'used in other subroutines in this module
   '------------------------------------------------------------------------------------------------------
   'the Fclinical.mnuTabbedListRecalls menu tag's can be an integer e.g const.cAuditAction_RecallCompleted
   'where some auditable action like completion or deletion is desired
   'or the tag can be a string e.g 'Print', 'email'
   '------------------------------------------------------------------------------------------------------
   If IsNumber(tag) Then
      '------------------------------------------------------------------------------------------------
      'Numerical tag = some sort of audit action, some will need popup audit form to get an explanation
      '------------------------------------------------------------------------------------------------
      iAuditAction = Val(Tag)
      audit_reason = currentrecall!reason & " due on " & Format(currentrecall!due, "dd/mm/yyyy")
      Select Case iAuditAction
         Case const.cAuditAction_Completed                                       'user marking this as complete, giving no explanation
            'this has a prompt because really easy to slip on the mouse and accidently mark something off without realising it
            Application.Busy = 0
            If Message.Question("Are you sure you want to mark this recall completed?", "Yes", "No") = 2 Then
             Return
            End If
            Inc Application.Busy   
            audit_reason &= " was flagged as completed without reason being given"
         Case const.cAuditAction_Refused                                         'user marking this as refused, giving no explanation
            audit_reason &= " was flagged as refused without reason being given"
         Case const.cAuditAction_CompletedRepeatSameInterval, const.cAuditAction_CompletedRepeatNewInterval, const.cAuditAction_ReScheduled
            'NewRecall = modUtil.Copy_Collection(currentrecall) 'FIXME - once Ian fixes copy collection to retain null fields.
            bActive = True                                                          'want this to remain an active recall
            newrecall = Recall_CreateCopy()                                         'copy essential fields to new collection
            '---------------------------------------------------------------------------
            'Need a new interval or re-scheduling to different date, need a popup dialog
            '---------------------------------------------------------------------------
            If iAuditAction = const.cAuditAction_CompletedRepeatNewInterval Or iAuditAction = const.cAuditAction_ReScheduled Then
               With FNewInterval = New FRecallAdjustInterval
                  .title = "Adjust Recall Interval"
                  If iAuditAction = const.cAuditAction_ReScheduled Then
                     FNewInterval.txtInterval.Enabled = False 
                  Endif
                  .Init(NewRecall)                                               'show recall reason/dates in the dialog box
               End With
               Dec Application.Busy
               If Not FNewInterval.ShowModal() Then
                  ' Dec Application.Busy
                  Return                          'user has cancelled the operation
               End If
               Inc Application.busy
            Else
               newrecall!due = Calc_Date_Due(newrecall!fk_interval_unit, newrecall!interval)         'repeating same interval - work out the due date from interval and units
            End If   
            Select Case iAuditAction                                                'construct the audit reason
               Case const.cAuditAction_CompletedRepeatSameInterval
                  audit_reason &= "- recall re-logged at same interval of "
               Case const.cAuditAction_CompletedRepeatNewInterval
                  audit_reason &= " - recall re-logged at interval of "
               Case const.cAuditAction_ReScheduled
                  audit_reason &= " - recall re-scheduled at new interval of "
            End Select
            audit_reason = audit_reason & NewRecall!interval & " " & const.Units_text[NewRecall!fk_interval_unit]!full_text 
            If NewRecall!interval > 1 Then
               audit_reason = audit_reason & "s"
            End If
            audit_reason = audit_reason & " now due on " & Format(NewRecall!due, "dd/mm/yyyy")
            '--------------------------------------------
            ' Save the modified recall with the new dates
            '--------------------------------------------
            If Not modDBConnect.update("clin_recalls.recalls", currentrecall, NewRecall, "pk_recall") Then 
               Message.Info("Failed to save the recall")
               modDBConnect.RollBack()
               Dec Application.Busy
               Return 
            End If
         Case const.cAuditAction_MarkDeleted, const.cAuditAction_CompletedWithExplanation, const.cAuditAction_RefusedWithExplanation
            bDeleted = True   'audit_reason will be enforced by the auditing process with popup FAudit for user to enter reason later
         Case const.cAuditAction_Delete
            bDeleted = True   'audit_reason will be enforced by the auditing process with popup FAudit for user to enter reason later
            If recall!fk_consult = currentconsult.GetPK() Then
               '------------------------------------------------------------------ 
               'we are reversing a progress note from within the same consultation
               '------------------------------------------------------------------
               modDBConnect.update("clin_consult.progressnotes", Null, ["pk": recall!fk_progressnote, "deleted": True])
            Endif
            ' FRecalls.ReLoad()
      End Select
      '--------------------------------------------------------------------
      'Mark off the recall in clin_recalls, or mark deleted if so indicated
      'put audit trail in clin_consult.progress notes
      'refresh the lists in the gui
      '--------------------------------------------------------------------
      If Not bactive Then
         modRecallsDBI.Mark_Completed(currentrecall!pk_recall, bActive, bDeleted)
      End If    
      Dec Application.Busy
      If modAudit.MakeAudit(currentconsult, const.sAuditAction[iAuditAction], "clin_recalls.recalls", recall!pk_recall, const.cSection_Recalls, audit_reason) Then 
         '-----------------------------------------------------------------
         'if recall was logged this consult - must remove the progress note
         '-----------------------------------------------------------------
         If currentconsult.GetPK() = recall!fk_consult Then
            modDBConnect.update("clin_consult.progressnotes", Null, ["pk": recall!fk_progressnote, "deleted": True])
         Endif
         Inc Application.Busy
         modDBConnect.CommitTrans()
         If FClinical.IsSamePatient(currentconsult!patient!fk_patient) Then   
            currentconsult.Refresh("recalls_logged")               'refresh the recalls collection for the patient
            FClinical.Refresh_Section(const.cSection_Recalls)      'refresh the recalls list showing in FClinical
            currentconsult.Refresh("progress_notes")               'refresh the progress notes collection
            FClinical.Refresh_Section(const.cSection_GeneralNotes) 'refresh the general notes section
            FClinical.Refresh_AllPreviousNotes                     'refresh all previous notes
            Try FGPMPTCA.GPMP_Update()                        'if user doing GP  management plans, update the latex
            Recall_Form = FClinical.EditorPage_Get("Recalls")
            Try Recall_Form.ReLoad()                                   ' If the recalls panel loaded in FClinical, refresh its list
         End If   
         Dec Application.busy 
      Else
         modDBConnect.RollBack()  
      End If   
   End If 
   
End 

Public Function Recall_CreateCopy() As Collection 
   '--------------------------------------------
   'Makes a copy (sort of) of the current recall
   'at least, of all the fields we need
   '--------------------------------------------
   
   Dim NewRecall As New Collection 
   
   NewRecall!pk_recall = currentrecall!pk_recall
   NewRecall!fk_consult = currentconsult.GetPK()
   NewRecall!fk_urgency = currentrecall!fk_urgency
   NewRecall!fk_reason = currentrecall!fk_reason
   newrecall!reason = currentrecall!reason
   NewRecall!fk_interval_unit = currentrecall!fk_interval_unit
   NewRecall!interval = currentrecall!interval
   NewRecall!due = currentrecall!due
   NewRecall!fk_contact_method = currentrecall!fk_contact_method
   NewRecall!fk_appointment_length = currentrecall!fk_appointment_length
   NewRecall!active = True
   NewRecall!fk_staff = modDBConnect.currentUser!fk_staff
   Return NewRecall
   
End

Public Function Calc_Date_Due(fk_interval_unit As Integer, interval As Integer) As Date
   '--------------------------------------------------------------
   'Calculates the date due from Now() given the unit and interval
   '--------------------------------------------------------------
   
   Dim Due As Date
   
   Select Case fk_interval_unit
      Case const.Units_day
         due = DateAdd(currentconsult.getConsultDate(), gb.Day, interval)
      Case const.Units_week
         due = DateAdd(currentconsult.getConsultDate(), gb.Week, interval)
      Case const.Units_month
         due = DateAdd(currentconsult.getConsultDate(), gb.Month, interval)
      Case const.Units_year
         due = DateAdd(currentconsult.getConsultDate(), gb.Year, interval)
   End Select
   Return due
   
End
