' Gambas class file

' Gambas class files

' Copyright (C) 2008-2013 Dr. Richard Terry
' Gui screen designs in IDE and at runtime Copyright (C) 2008-2013 Dr. Richard Terry
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/liPath to library filescenses/>.
'----------------------------------------------------------------------
' PURPOSE         The EasyGP letter writer
' HOW THIS WORKS  You can search for persons or organisations via several methods
'                 Category       e.g surgeons
'                 Occupation     e.g surgeon
'                 Name           e.g Smith,p
'                 Organisation   e.g Newcastle cardiac services
'                 Branch         e.g ofProcessProcess an organisation
'                 Typing in the appropriate textbox will popup pick lists in columnview1
' BACKEND TABLES  See schema clin_referrals
'                 Each letter must have a 'tag' which is what is displayed in the
'                 referrals list, for example referral to a cardiologist the tag
'                 might be 'Review of Aortic Stenosis' or 'Investigation of chest pain'
' NOTE            Contact data must be present in the Contacts database
'                 and cannot be entered via this screen
' TODO            Decide if using LaTex rather than html - both are implemented now
'                 Fix Referral_LetterHTML_Construct() to use cTemplate
'                 Think about and implement user defined shortcuts in teLetter
'                 Allow drag n drop of graph/images into the letter
'                 Implement putting dragged graph into pdf and printing.
'                 Implement putting photographs/line diagrams into notes.
'                 type in postcode > provider specialist of type near postcode
'                 Add audit trail to referrals/deletion of referral etc.
' KOWN BUGS       Please report to rterry@internode.on.net or rterry@pacific.net.au
'                 occupation of employee not showing up in the view.
'----------------------------------------------------------------------------------
Private Dictaphone As FDictaphone
Private bEmbedded As Boolean                                'True if this form is embedded e.g in the inbox
Private bEditing As Boolean                                 'True if editing an existing referral written this consultation
Private bExit As Boolean                                    'Used to prevent re-entry into subroutines
Private bKeyValid As Boolean                                'Used in EditAreaTextBox routines to ensure valid data entry
Private PersonWritingTo As Collection                       'Person for whom the letter is intended
Private persons As Collection
Private person As Collection
Private Branches As Collection
Private branch As Collection
Private stored_state As String
Private Comms As Collection
Private comm As Collection
Private Inclusions_EditArea As Collection                    'Documents/graphs etc, whatever is included in letter in edit area
Private Inclusions_Referrals_This_Consult As Collection      'Inclusions collection for those saved/printed
Private Inclusions_Referral_This_Consult As Collection      'The inclusions for a single referral written this consult
Private currentconsult As CConsult                          'set by calling form e.g Fclinical or FActionDocument
Private referral_types As Collection                        'eg Management, indefinate etc,
Private cvwLetters_key As Integer                           'key = cvwLetters.item.key when selected
Private fk_person As Integer                                'key for person the referral letter is to see Contacts.data_persons
Private fk_employee As Integer                              'key to contacts.data_employees
Private fk_type As Integer                                  'key for the type of referral letter      see clin_referral.lu_type
Private fk_branch As Integer                                'can be null or 0, but if not key to          Contacts.data_branches
Private fk_organisation As Integer                          'can be null or 0, nut if not key to          Contacts.data_organisations
Private fk_address As Integer                               'key to contacts.data_addresses
Private fk_pasthistory As Integer                           'past history item the letter is linked to if 0 = general notes
Private cProgressNote_Section As Integer                    'either past history or general at moment
Private fk_progressnote As Integer                          'the progress note linked to this referral
Private pk_referral As Integer                              'key to clin_referrals.referrals
Private Addresses As Collection
Private address As Collection
Private pk_deleted_referral As Integer
Private pk_deleted_progressnote As Integer                     'if not 0 then it is the last referral written which was deleted
Private Form_Copy_To As FCopyTo
Private referrals_written_this_consult As Collection
Private SpellChecker As ClskSpell
Private bHaveSpellChecked As Boolean                        'if true have at least attempted to spell check once (see Save())
Public Paragraph_At As Integer
Public character_at As Integer
Private priority_types As Collection                        'degree of priority or urgency
Private ReferenceHboxForTopColumnview As Hbox               'used if split moves to reposition columnview
Static Private form_referral As FReferrals


Static Public Sub Refresh_Referrals_Written_Today()
   
   form_referral.Reload()
   
End

Public Sub Init(cons As CConsult, Optional bEmbedded_Param As Boolean = False)
   '---------------------------------------------------------
   'Do all the form initialisation stuff like adding stuff to
   'combo's, setting numbers of columns in lists
   '---------------------------------------------------------
   
   form_referral = Me
   currentconsult = Cons                       'set current consult
   cvwLetters.Columns.Count = 7                '7 = finalised or not
   cvwLetters.Columns[0].width = 80            'date
   cvwLetters.Columns[1].width = 120           'Who to
   cvwLetters.Columns[2].width = 150           'type of referral
   cvwLetters.Columns[3].width = 200           'referral tag
   cvwLetters.Columns[4].width = 80            'if include_careplan is true = 'Care Plan'
   cvwLetters.Columns[5].width = 100            'if include_summary  is true = 'Health Summary'
   '   txtReferralDate.Text = Format$(Now, "dd/mm/yyyy")
   ' referral_types = modUtil.LoadCombo(cmbReferralTypes, modReferralsDBI.Referral_Get_Types(), "type")
   referral_types = modUtil.LoadCombo(cmbReferralTypes, modUtil.Copy_Collection_Keyed_Sequentially(modReferralsDBI.Referral_Get_Types()), "type")
   priority_types = modUtil.LoadCombo(cmbPriorityTypes, modReferralsDBI.Priority_Get(), "urgency")
   lblmeasure.text = " Authority Approval No.  "  'to keep all edit area's left width the same
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblmeasure)
   lblSpacerLeftOfButtons.width = lblmeasure.width
   cvwPersonContacts.Columns.count = 2
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teLetter
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   Settings_Load()                          'load settings for this form
   With Form_Copy_To = New FCopyTo(Vbox_CopyToList)
      .Init(Me)
      .lblCopyTo.width = lblmeasure.Width
   End With
   modEditAreaHelpers.Resize_labels(Form_Copy_To.Vbox_CopyToList, lblmeasure)
   MenuButton1.menu = "mnuHealthIssues"
   bEmbedded = bEmbedded_Param
   If Not bEmbedded Then
      Dictaphone = New FDictaphone(Hbox_Dictaphone)
      Dictaphone.Visible = True
      Dictaphone.Expand = True
   Else
      ' we are embedded, so turn off inclusions and don't load the Dictaphone
      Hbox_Dictaphone.Visible = False
      lvwInclusions_EditArea.Visible = False
      lvwInclusions_Saved.Visible = False
      lblDocuments.Visible = False
      lblDocumentsPrinted.Visible = False
      Vbox_Referrals_This_Consult.visible = False
   Endif
   lblReferralsThisConsultation.Width = HSplit_Letter_Include.children[0].width
   lblDocumentsPrinted.width = HSplit_Letter_Include.children[1].width
   EditArea_Notify_DataChange(False)
   Reload()
   
End

Public Sub Set_Consult(new_cc As CConsult)
   
   currentconsult = new_cc
   
End

Public Sub mnuHealthIssues_Click()
   '---------------------------------------------------
   'User wants to link a request form to a health issue
   'The menu tag = the pk_pasthistory
   '---------------------------------------------------
   
   Select Case Last.tag
      Case "general notes", "remove link"
         txtHealthIssue.text = "General Notes"
         cProgressNote_Section = const.cSection_GeneralNotes
         fk_pasthistory = 0
      Case Else
         txtHealthIssue.text = currentconsult!past_history[Last.tag]!description
         fk_pasthistory = Last.tag
         cProgressNote_Section = const.cSection_Referrals
   End Select
   EditArea_Notify_DataChange(True)
   
End

' Public Sub tbPreview_Close_Click()
'    '-------------------------------------------------------------------------------
'    'this observer overides the click event on the close button on the embedded form
'    'Hide the preview form and re-show the referral letter gui
'    '-------------------------------------------------------------------------------
'
'    Stop Event
'    Vbox_Preview.Visible = False
'    VSplit_Main.Visible = True
'
' End

Public Sub Save(Optional bFinalised As Boolean = False, bSuppressSpellCheck As Boolean = False)
   '--------------------------------------------------------------
   'Save the current edit area recall and updates the recalls list
   'Need this amount of info to save
   'For table clin_referrals.referrals
   '   pk serial NOT NULL,
   '   fk_consult integer NOT NULL,        -- key to the main clin_consult.consult table which is the master table of the database
   '   fk_person integer,                  -- if not null key to contacts.data_persons table ie person referred to
   '   fk_referral_recipient integer,      -- key to clin_referrals.referral_recipients table
   '   fk_type integer,                    -- key to lu_referral_type table ie type of referral e.g opinion or management
   '   letter_html text NOT NULL,          -- html which is the letter itself
   '   tag text,                           -- A description of the letter eg 'heart failure'
   '   deleted boolean DEFAULT false,
   '   body_html text,                     -- Contains the html of the body of the letter
   '   fk_pasthistory integer DEFAULT 0,   -- if not 0 = general notes, then is the key to clin_history.past_history table
   '   fk_progressnote integer,            -- key to clin_consult.progress notes table - points to the progress note of a letter during the...
   '   include_careplan boolean DEFAULT false,
   '   include_healthsummary boolean DEFAULT false,
   '   fk_branch integer DEFAULT null,
   '   fk_employee integer default null,
   '   fk_address integer default null,
   '-------------------------Priority e.g 'Urgent'Priority e.g 'Urgent'-------------------------------------
   
   Dim referral As New Collection
   Dim sProgressNote_Html As String
   Dim bDoNotPrintInclusionsForCCD As Boolean
   Dim dictation_fname As String
   
   If Not bEmbedded And If Dictaphone.Has_Dictated() Then
      bFinalised = False ' dictations are never finalised
      dictation_fname = Dictaphone.Get_File()
      If IsNull(dictation_fname) Then Error.Raise("null dictation")
   Endif
   If VBox_Letters.Padding = 0 And If Not bFinalised Then Return  'no padding, nothing to save
   If Not bHaveSpellChecked And If Not bSuppressSpellCheck Then
      Spelling_Check()
   Endif
   
   If Not Valid_Referral() Then Return
   ' -----------------------------------------------------------
   ' Now load a fresh collection with data from the widgets
   ' -----------------------------------------------------------
   If pk_referral <> -1 Then
      referral!pk_referral = pk_referral
   End If
   If fk_person <> 0 Then referral!fk_person = fk_person
   If fk_employee <> 0 Then referral!fk_employee = fk_employee
   If fk_branch <> 0 Then referral!fk_branch = fk_branch
   If fk_address <> 0 Then referral!fk_address = fk_address
   referral!date_referral = txtReferralDate.text
   referral!tag = Trim(txtTag.text)
   If chkIncludeCarePlan.value = True Then
      referral!include_careplan = True
   Else
      referral!include_careplan = False
   End If
   If chkIncludehealthSummary.value = True Then
      referral!include_healthsummary = True
   Else
      referral!include_healthsummary = False
   End If
   referral!fk_lu_urgency = priority_types[cmbPriorityTypes.index]!pk
   referral!copyto = Form_Copy_To.Get_CopyTo_Data()!copyto 'FIXME, I'VE LEFT it as collection till I sort using this in FRequests
   referral!body_html = Referral_BodyHTML_Construct()
   referral!fk_type = referral_types[cmbReferralTypes.index]!pk  'e.g opinion and management
   referral!finalised = bFinalised
   If bFinalised Then
      If modAdminDBI.Config_Get("referral_engine", "h") = "h" Then
         referral!letter_html = Referral_LetterHTML_Construct(referral!copyto)
      Else
         ' do LaTeX letters
         referral!letter_html = Referral_LetterLaTeX_Construct(referral!copyto)
      Endif
      '-------------------------------------------------
      'Construct the text to embed in the progress notes
      '-------------------------------------------------
      sProgressNote_Html = Referral_ProgressNoteHTML_Construct(referral)
   Endif
   '-------------------------------------------------
   'Ok, save the referral
   'Inclusions are saved to clin_referrals.inclusions
   '-------------------------------------------------
   modDBConnect.BeginTrans()
   If bFinalised Then
      referral!fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, sProgressNote_Html, cProgressNote_Section, fk_progressnote, txtHealthIssue.text, fk_pasthistory, False)
      If chkSendAsHL7.Value = chkSendAsHL7.True Then
         referral!letter_hl7 = SendAsHL7()
      Endif
   Endif
   pk_referral = modReferralsDBI.Save(currentconsult, pk_referral, referral, Inclusions_EditArea)   'Save the referral letter
   If Not bEmbedded And If Dictaphone.Has_Dictated() Then
      dictation_fname = modDictationsDBI.Submit_Dictation(currentconsult, pk_referral, dictation_fname)
      dictation_fname = Subst$("<p>Dictation pending: &1</p>", dictation_fname)
      If Not IsNull(referral!body_html) Then
         referral!body_html = referral!body_html & dictation_fname
      Else
         referral!body_html = dictation_fname
      Endif
      modDBConnect.exec_query("update clin_referrals.referrals set body_html=&1 where pk=&2", [referral!body_html, pk_referral])
   Endif
   modDBConnect.CommitTrans()
   '---------------------------------------------------------------------------------------------------------------
   'Now, if have been editing a referral and there are no additional inclusions to print, don't reprint inclusions
   'if user dosn't want inclusions printed for anyone cc'd then don't print inclusions either
   '--------------------------------------------------------------------------------------------------------------
   If bFinalised Then
      If chkDontPrintCCd.value = True Then
         bDoNotPrintInclusionsForCCD = True
      Endif
      If chkReprintInclusions.Value = False Then
         modReferralsDBI.Referral_Print(currentconsult, referral, True, bDoNotPrintInclusionsForCCD, Inclusions_EditArea) '
      Else
         modReferralsDBI.Referral_Print(currentconsult, referral, True, bDoNotPrintInclusionsForCCD) 'Print letter copy for copyto's but not the inclusions
      End If
      
   Endif
   
   FClinical.Refresh_AllPreviousNotes()
   FClinical.Refresh_Section(const.cSection_Referrals)
   EditArea_Notify_DataChange(False)
   
   Reload()                                                  'Default to a new letter, reload controls
   
End

Public Sub Reload()
   '-----------------------------------------------------------------------------------------------------------
   'Reload any letters written this consultation
   'Reload all inclusions for the patients only this consult, this is the True flag in the Inclusions_Get below
   '-----------------------------------------------------------------------------------------------------------
   
   If Not IsNull(currentconsult) Then
      currentconsult.Refresh("referrals_written_this_consult")                  'Delete key = force a refresh
      If Not bEmbedded Then
         Inclusions_Referrals_This_Consult = modReferralsDBI.Inclusions_Get(currentconsult!patient!fk_patient, False, True) 'fk_patient, deleted, only this consult
         Referrals_This_consult_Show()                                          'Update list under edit area
      Endif
   Endif
   Referral_New()                                                         'clear for next condition
   '  txtName.SetFocus()
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   '--------------------------------------------------
   'Adds or removes padding around edit area and lists
   'to indicate if data is changed and unsaved
   '--------------------------------------------------
   
   If Bexit Then Return
   If flag Then
      VBox_Letters.Padding = 1
      VBox_Letters.Background = Color.red
      tbSave.Foreground = Color.red
      tbSave.enabled = True
      tbPreview.Enabled = True
   Else
      VBox_Letters.Padding = 0
      VBox_Letters.Background = Color.white
      tbSave.Foreground = Color.Black
      tbSave.Enabled = False
      tbPreview.Enabled = False
   End If
   
End

Public Sub Editor_Maximize_Minimize()
   '---------------------------------------------------------------
   'Either expands to full size, or minimizes the text editing area
   '---------------------------------------------------------------
   
   If HSplitEditArea_Communications.Visible Then
      HSplitEditArea_Communications.Visible = False
      Vbox_CopyToList.Visible = False
      tbMaximizeMinimize.Tooltip = "Minimize the text editor"
   Else
      HSplitEditArea_Communications.Visible = True
      Vbox_CopyToList.Visible = True
      Try HSplitEditArea_Communications.Layout = Settings["Referrals/EditArea_Communications"]
      tbMaximizeMinimize.Tooltip = "Maximize the text editor"
   End If
   
End

Public Sub LetterWriter_Click()
   '---------------------------------------------
   'User has clicked on one of the editor buttons
   '---------------------------------------------
   
   Select Case Last.tag
      Case "maximize"
         Editor_Maximize_Minimize()
      Case "erase"
         Message.title = "Erase Letter"
         If Message.Question("Are you sure you want to erase the letter?", "Yes", "No") = 2 Then Return
         teLetter.Clear()
      Case "bold"
         teLetter.Format.Font.Bold = Last.Value
      Case "italic"
         teLetter.Format.Font.Italic = Last.Value
      Case "underline"
         teLetter.Format.Font.Underline = Last.Value
      Case "strikeout"
         teLetter.Format.Font.StrikeOut = Last.Value
      Case "align left"
         teLetter.Format.Alignment = Align.Left
      Case "align centre"
         teLetter.Format.Alignment = Align.Center
      Case "align right"
         teLetter.Format.Alignment = Align.Right
      Case "clear font attributes"
         ' Editor_Fonts_Reset()
      Case "dot point"
         
   End Select
   
End

Public Sub Editor_Fonts_Reset()
   '------------------------------------------------------------
   'Clears any font attributes ie saves clicking muliple buttons
   '------------------------------------------------------------
   
   Object.Lock(btnBold)
   Object.Lock(btnItalic)
   Object.Lock(btnUnderline)
   Object.Lock(btnAlignLeft)
   Object.Lock(btnAlignCenter)
   Object.Lock(btnAlignRight)
   Object.Lock(btnAlignJustify)
   Object.Lock(SpinBox1)
   Object.Lock(btnColour)
   btnBold.Value = False
   btnItalic.Value = False
   btnUnderline.Value = False
   btnAlignLeft.value = False
   btnAlignCenter.value = False
   btnAlignJustify.Value = False
   btnAlignRight.value = False
   'FIXME put in the default font
   'put in black as default colour
   teLetter.Format.Font.Bold = False
   teLetter.Format.Font.Italic = False
   teLetter.Format.Font.Underline = False
   teLetter.Format.Font.StrikeOut = False
   teLetter.Format.Alignment = Align.Left
   btnColour.Color = Color.Black
   teLetter.Format.Color = Color.Black
   Object.UnLock(btnBold)
   Object.UnLock(btnItalic)
   Object.UnLock(btnUnderline)
   Object.UnLock(btnAlignLeft)
   Object.UnLock(btnAlignCenter)
   Object.UnLock(btnAlignRight)
   Object.UnLock(btnAlignJustify)
   Object.UnLock(SpinBox1)
   Object.UnLock(btnColour)
   
End

Public Sub btnColour_Change()
   
   teLetter.Format.Color = btnColour.Color
   
End

Public Sub SpinBox1_Change()
   
   teLetter.Format.Font.Size = Last.Value
   teLetter.SetFocus
   
End

Public Function Copyto_Construct(Optional copyto As String = "", templ As String, sSep As String) As String
   
   Dim ret As String
   '-------------------------------------------------------------------------------------------------------------------
   'If there are one or more cc's then replace the table html with the appropriate data, otherwise wipe the copyto html
   '-------------------------------------------------------------------------------------------------------------------
   If copyto <> "" Then
      ret = Replace(copyto, "|", sSep)
      ret = Replace(templ, "%copyto%", ret)
   Else
      ret = ""
   End If
   Return ret
   
End

Public Function Referral_ProgressNoteHTML_Construct(referral As Collection) As String
   '---------------------------------------------------------------------
   'The HTML for the progress note is <> the letter
   'it is an abbridged form, with just who it is for + body letter + cc's
   '---------------------------------------------------------------------
   
   Dim sHtml As String
   Dim sHtml2 As String
   
   sHtml &= "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>"
   "<COL WIDTH=80%>"
   "<COL WIDTH=20%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=80%>"
   "<HR><small>Letter %letter_type% to "
   If txtName.text <> "" Then
      sHtml &= Trim(txtName.text)
   Else
      sHtml &= Trim(txtOrganisation.text)
   End If
   
   sHtml &= " Re: " & txtTag.text & ":"
   "<HR><P><FONT FACE='Times New Roman, serif'>%letterbody%%cc%%inclusions%"
   "</small></P><HR>"
   "</TD>"
   "<TD WIDTH=20%>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   shtml = Replace(shtml, "%letter_type%", Lower(referral_types[cmbReferralTypes.index]!type))
   '  shtml = Replace(shtml, "%letter_type%", Lower(referral_types[referral!fk_type - 1]!type))
   shtml = Replace$(shtml, "%letterbody%", referral!body_html)
   sHtml2 = ""
   "<TABLE WIDTH=100%>"
   "<COL WIDTH=10%>"
   "<COL WIDTH=90%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=10%>"
   "<P>cc</P>"
   "</TD>"
   "<TD WIDTH=90%>"
   "<P>%copyto%</P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   shtml = Replace$(shtml, "%cc%", Copyto_Construct(referral!copyto, sHtml2, "<BR>"))
   sHtml2 = ""
   "<TABLE WIDTH=100%>"
   "<COL WIDTH= 10%>"
   "<COL WIDTH=90%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=6%>"
   "<P>Inclusions</P>"
   "</TD>"
   "<TD WIDTH=90%>"
   "<P>%inclusions%</P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   shtml = Replace$(shtml, "%inclusions%", Inclusions_Construct(Inclusions_EditArea, sHtml2, "<BR>"))
   
   Return sHTml
   
End

Private Function Referral_Letter_Construct_Common(textin As String, sSep As String) As String
   
   Dim ntext As String
   Dim sPatient As String = currentconsult!patient!firstname & " " & currentconsult!patient!surname & " " & Trim(currentconsult!patient!street1 & " " & currentconsult!patient!street2)
   Dim sPatient_Comms As String 'phone, etc for the patient
   Dim com As Collection
   Dim s As String
   
   ntext = textin
   
   spatient &= " " & currentconsult!patient!town & " " & currentconsult!patient!postcode & " DOB:" & Format(currentconsult!patient!birthdate, "dd/mm/yyyy")
   If currentconsult!patient!age_numeric < 18 Then
      sPatient &= " Aged: " & currentconsult!patient!age_display
   Else
      sPatient &= " Aged: " & Str(currentconsult!patient!age_numeric)
   End If
   ntext = Replace(ntext, "%date%", txtReferralDate.text)
   ntext = Replace(ntext, "%practitioner-name%", modDBConnect.currentUser!title & " " & modDBConnect.currentuser!wholename)
   ntext = Replace(ntext, "%provider-no", modDBConnect.currentUser!provider_number)
   ntext = Replace(ntext, "%clinic.name", modDBConnect.currentUser!organisation)
   ntext = Replace(ntext, "%clinic.branch", modDBConnect.currentUser!branch) '%clinic.branch won't exist for head office
   For Each comm In modDBConnect.currentUser!comms
      If comm!fk_type = const.CommModalityPhone Then
         ntext = Replace(ntext, "%clinic.phone", comm!value)
      Endif
      If comm!fk_type = const.CommModalityFax Then
         ntext = Replace(ntext, "%clinic.fax", comm!value)
      Endif
   Next
   ntext = Replace(ntext, "%clinic.phone", "")
   ntext = Replace(ntext, "%clinic.fax", "")
   If Not IsNull(modDBConnect.currentUser!street2) Then
      ntext = Replace(ntext, "%clinic.street", modDBConnect.currentUser!street1 & sSep & modDBConnect.currentUser!street2)
   Else
      ntext = Replace(ntext, "%clinic.street", modDBConnect.currentUser!street1)
   Endif
   ntext = Replace(ntext, "%clinic.suburb", modDBConnect.currentUser!town & " " & modDBConnect.currentuser!postcode)
   If txtName.Text <> "" Then
      ntext = Replace$(ntext, "%referred-to%", txtName.text & sSep)
   Else
      ntext = Replace$(ntext, "%referred-to%", "")
   Endif
   
   If txtOrganisation.text <> "" Then
      ntext = Replace$(ntext, "%organisation%", txtOrganisation.text & sSep)
   Else
      ntext = Replace$(ntext, "%organisation%", "")
   End If
   If Not IsNull(modDBConnect.currentUser!occupation) Then
      ntext = Replace$(ntext, "%occupation%", modUtil.Ucase_Word_First_Letter(modDBConnect.currentUser!occupation))
   Else
      ntext = Replace$(ntext, "%occupation%", "")
   Endif
   If Not IsNull(modDBConnect.currentUser!qualifications) Then
      ntext = Replace$(ntext, "%qualifications%", modDBConnect.currentUser!qualifications)
   Else
      ntext = Replace$(ntext, "%qualifications%", "")
   Endif
   If txtBranch.text <> "" And Lower(txtBranch.text) <> "head office" Then
      ntext = Replace$(ntext, "%branch%", txtBranch.text & sSep)
   Else
      ntext = Replace$(ntext, "%branch%", "")
   End If
   s = Trim(txtStreet1.text & " " & txtStreet2.text)
   If s <> "" Then
      ntext = Replace$(ntext, "%address%", s & sSep)
   Else
      ntext = Replace$(ntext, "%address%", "")
   Endif
   s = Trim$(txtSuburb.text & " " & txtPostcode.text)
   If s <> "" Then
      ntext = Replace$(ntext, "%suburb%", s & sSep)
   Else
      ntext = Replace$(ntext, "%suburb%", "")
   Endif
   If Not IsNull(PersonWritingTo) And If Not IsNull(PersonWritingTo!firstname) Then
      ntext = Replace$(ntext, "%firstname%", PersonWritingTo!firstname)
   Else
      ntext = Replace$(ntext, "%firstname%", "Sir/Madam")
      ntext = Replace$(ntext, "Yours sincerely,", "Yours faithfully,")
   End If
   
   ntext = Replace$(ntext, "%patient%", spatient)
   'now the comms
   If Not IsNull(comms) Then
      For Each com In comms
         If com!fk_type = const.CommModalityPhone Then
            ntext = Replace$(ntext, "%recipient-phone%", "Phone:" & com!value & sSep)
         Endif
         If com!fk_type = const.CommModalityFax Then
            ntext = Replace$(ntext, "%recipient-fax%", "Fax:" & com!value & sSep)
         Endif
         If com!fk_type = const.CommModalityTollFree Then
            ntext = Replace$(ntext, "%tollfree%", "Toll Free:" & com!value & sSep)
         Endif
      Next
   Endif
   For Each com In currentconsult!comms
      sPatient_Comms &= const.CommModalityTextFull[com!fk_type] & ":" & currentconsult!comms[currentconsult!comms.key]!value & sSep
   Next
   ntext = Replace$(ntext, "%comms%", sPatient_Comms)
   For Each com In modDBConnect.currentUser!comms
      If com!fk_type = 7 Then
         ntext = Replace$(ntext, "%practitioner-telephone%", com!value)
      Endif
      If com!fk_type = 2 Then
         ntext = Replace$(ntext, "%practitioner-fax%", com!value)
      Endif
   Next
   ntext = Replace$(ntext, "%practitioner-telephone%", "")
   ntext = Replace$(ntext, "%practitioner-fax%", "")
   ntext = Replace$(ntext, "%recipient-phone%", "")
   ntext = Replace(ntext, "%recipient-fax%", "")
   Return ntext
   
End

Public Function Referral_LetterHTML_Construct(Optional CopyTos As String) As String
   '-----------------------------------------------------------
   'Construct Html of the referral letter, FIX ME USE cTemplate
   '-----------------------------------------------------------
   
   Dim sLetterHtml As String
   Dim sHtml As String
   Dim sCSS As String
   Dim sHeader As String
   '----------------------------------------------
   'Replace the rest, patient name, who its to etc
   '----------------------------------------------
   sLetterHtml = "<html><head><meta name='qrichtext' content='1' />"
   "%css"
   "</head><body>"
   "%header"
   "<hr>"
   "<P>%referred-to%<BR>"
   "%organisation%"
   "%branch%"
   "%address%"
   "%suburb%"
   "%recipient-phone%"
   "%recipient-fax%</P>"
   "<p>Dear %firstname%,</p>"
   "<BR>"
   "<TABLE WIDTH=100%>"
   "<COL WIDTH=8%>"
   "<COL WIDTH=92%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=8%>"
   "<P>Re:</P>"
   "</TD>"
   "<TD WIDTH=92%>"
   "<P>%patient%</P>"
   "</TD>"
   "</TR>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=8%>"
   "<P></P>"
   "</TD>"
   "<TD WIDTH=92%>"
   "<P>%comms%</P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   "%type%"
   "%body%"
   "<p>Yours sincerely</p>"
   "<p><BR><BR></p>"
   "<p>%practitioner-name% %qualifications%</p>"
   "%inclusions%"
   "%cc%"
   "</body></html>"
   sCSS = ""
   If modAdminDBI.Config_Get_Staff_Member("text_print_style", "standard") = "large" Then
      sCSS = "<style type=\"text/css\">"
      "body { font-size: 14pt;}"
      "td {font-size: 14pt;}"
      "span.occupation {font-size: 17pt;}"
      "</style>"
      sHeader = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=4 CELLSPACING=3 >"
      "<COL WIDTH=128*>"
      "<COL WIDTH=128*>"
      "<COL WIDTH=128*>"
      "<TR VALIGN=TOP>"
      "<TD WIDTH=30%>"
      "<P>%clinic.street<BR>"
      "%clinic.suburb<BR>"
      "%provider-no<BR>"
      "%date%"
      "</TD>"
      "<TD WIDTH=45% ALIGN=CENTER>"
      "<P ALIGN=CENTER>%practitioner-name% <BR>"
      "<SPAN CLASS=occupation>%occupation%</SPAN></P>"
      "<TD WIDTH=25% ALIGN=RIGHT>"
      "<P ALIGN=RIGHT>"
      "Tel. %practitioner-telephone%<BR>"
      "Fax. %practitioner-fax%<BR>"
      "</P>"
      "</TD>"
      "</TR>"
      "</TABLE>"
   Else
      sHeader = "<TABLE WIDTH=100% BORDER=0 CELLPADDING=4 CELLSPACING=3 >"
      "<COL WIDTH=128*>"
      "<COL WIDTH=128*>"
      "<TR VALIGN=TOP>"
      "<TD WIDTH=50%>"
      "<P>%practitioner-name%<BR>"
      "%occupation%<BR>"
      "%provider-no<BR>"
      "%date%"
      "</TD>"
      "<TD WIDTH=50%>"
      "<P ALIGN=RIGHT>%clinic.name<BR>"
      If Lower(modDBConnect.currentUser!branch) <> "head office" Then 
         sHeader &= "%clinic.branch<BR>"
      Endif
      sHeader &= ""
      "%clinic.street<BR>"
      "%clinic.suburb<BR>"
      "%clinic.phone<BR>"
      "%clinic.fax<BR></P>"
      "</TD>"
      "</TR>"
      "</TABLE>"
   Endif
   sLetterHtml = Replace$(sLetterHtml, "%header", sHeader)
   sLetterHtml = Replace$(sLetterHtml, "%css", sCSS)
   sHtml = ""
   "<TABLE WIDTH=100%>"
   "<COL WIDTH= 6%>"
   "<COL WIDTH=94%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=6%>"
   "<P><small><small>Inclusions</small></small></P>"
   "</TD>"
   "<TD WIDTH=94%>"
   "<P><small><small>%inclusions%</small></small></P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   sLetterHtml = Replace(sLetterHtml, "%inclusions%", Inclusions_Construct(Inclusions_EditArea, sHtml, "<BR>"))
   sHtml = ""
   "<TABLE WIDTH=100%>"
   "<COL WIDTH=6%>"
   "<COL WIDTH=94%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=6%>"
   "<P><small><small>cc</small></small></P>"
   "</TD>"
   "<TD WIDTH=94%>"
   "<P><small><small>%copyto%</small></small></P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   sLetterHtml = Replace(sLetterHtml, "%cc%", CopyTo_Construct(CopyTos, sHtml, "<BR>"))
   
   If cmbReferralTypes.text <> "Non Medicare" Then
      sLetterHtml = Replace$(sLetterHtml, "%type%", "<p>TYPE OF REFERRAL: " & cmbReferralTypes.Text & "</P>")
   Else
      sLetterHtml = Replace$(sLetterHtml, "%type%", "")
   End If
   sLetterHtml = Replace$(sLetterHtml, "%body%", Referral_BodyHTML_Construct())
   sLetterHtml = Referral_Letter_Construct_Common(sLetterHtml, "<BR>")
   'Get rid of potentially empty strings
   sLetterHtml = Replace$(sLetterHtml, "%address%", "")
   sLetterHtml = Replace$(sLetterHtml, "%suburb%", "")
   Return sLetterHtml
   
End

Public Function Referral_LetterLaTeX_Construct(CopyTos As String) As String
   
   Dim sLetterTeX As String
   Dim sTeX As String
   
   sLetterTeX = modUtil.Find_File("templates/referral.tex")
   sLetterTeX = File.Load(sLetterTeX)
   sLetterTeX = Replace$(sLetterTeX, "!", "%")
   If cmbReferralTypes.text <> "Non Medicare Related" Then
      sLetterTeX = Replace$(sLetterTeX, "%type%", "\\noindent Type Of Referral: " & cmbReferralTypes.Text & "\n\n")
   Else
      sLetterTeX = Replace$(sLetterTeX, "%type%", "")
   End If
   sLetterTeX = Replace$(sLetterTeX, "%body%", HTML_To_LaTeX(Referral_BodyHTML_Construct()))
   sLetterTeX = Referral_Letter_Construct_Common(sLetterTeX, "\\\\ ")
   sTeX = "\\noindent \\parbox[t]{10mm}{CC:} \\parbox[t]{140mm}{%copyto%}"
   sLetterTeX = Replace(sLetterTeX, "%cc%", CopyTo_Construct(CopyTos, sTeX, "\\\\ "))
   sTeX = "\\noindent \\parbox[t]{10mm}{Incl:} \\parbox[t]{140mm}{%inclusions%}"
   sLetterTeX = Replace(sLetterTeX, "%inclusions%", Inclusions_Construct(Inclusions_EditArea, sTeX, "\\\\ "))
   'Get rid of potentially empty strings
   sLetterTeX = Replace$(sLetterTeX, "%address%", "")
   sLetterTeX = Replace$(sLetterTeX, "%suburb%", "")
   Return sLetterTeX
   
End

Public Function Referral_BodyHTML_Construct() As String
   '-------------------------------------------------------------------------------------------
   'extracts just the html for the body of the letter
   ' converts the widget's quite odd HTML to something a bit more standard
   '--------------------------------------------------------------------------------------------
   
   Dim sBodyHTML As String
   Dim charpos As Integer
   
   charpos = InStr(Lower(teLetter.RichText), "<p")
   sBodyHTML = Right(teLetter.RichText, Len(teLetter.RichText) - charpos + 1)
   charpos = InStr(sBodyHTML, "</body>")
   sBodyHTML = Left(sBodyHTML, charpos - 1)
   Debug sBodyHTML
   sBodyHTML = Fix_HTML(sBodyHTML, [])
   Debug sBodyHTML
   Return Trim(sBodyHTML)
   
End

Private Function Fix_HTML(s As String, lastspan As String[]) As String
   
   Dim r As Regexp
   Dim newtag As String
   
   If s = "" Then Return s
   r = New Regexp(s, "<([^>]+)>")
   If r.Offset = -1 Then
      Return s
   Else
      newtag = Make_New_Tag(LCase$(r.SubMatches[1].Text), ByRef lastspan)
      If IsNull(newtag) Or If newtag = "" Then
         Return Left$(s, r.Offset) & Fix_HTML(Right$(s, - (r.Offset + Len(r.Text))), lastspan)
      Else
         Return Left$(s, r.Offset) & "<" & newtag & ">" & Fix_HTML(Right$(s, - (r.Offset + Len(r.Text))), lastspan)
      Endif
   Endif
   
End

Private Function Make_New_Tag(tag As String, ByRef lastspan As String[]) As String
   
   Dim r As Regexp
   Dim tokens As New String[]
   Dim tokens_close As New String[]
   
   If IsNull(lastspan) Then lastspan = New String[]
   r = New Regexp(tag, "^span.*")
   If r.Offset = 0 Then
      If InStr(tag, "font-weight:600") Then
         tokens.Add("b")
         tokens_close.Add("/b")
      Endif
      If InStr(tag, "font-style:italic") Then
         tokens.Add("i")
         tokens_close.Add("/i")
      Endif
      If InStr(tag, "text-decoration: underline") Then
         tokens.Add("u")
         tokens_close.Add("/u")
      Endif
      If Not IsNull(tokens) And If Not IsNull(tokens_close) And If tokens.Length > 0 And If tokens_close.Length > 0 Then
         lastspan.Push(tokens_close.Join("><"))  ' calling code adds the final outer < >
         Return tokens.Join("><")
      Else  ' we didn't recognise anything in the span, so add nothing to the translated HTML stream
         lastspan.Add("")
         Return Null
      Endif
   Endif
   If tag = "/span" Then
      If lastspan.Length > 0 Then
         Return lastspan.Pop()
      Else
         Return Null
      Endif
   Endif
   r = New Regexp(tag, "^p.*")
   If r.Offset = 0 Then
      Return "p"
   Endif
   If tag = "/p" Then
      Return "/p"
   Endif
   Return Null
   
End

Private Function HTML_To_LaTeX(s As String) As String
   
   ' turns HTML into TeX
   Dim r As CRegex
   Dim flag As Boolean
   
   s = Replace$(s, "<b>", "\\textbf{", gb.IgnoreCase)
   s = Replace$(s, "</b>", "}", gb.IgnoreCase)
   s = Replace$(s, "<i>", "\\emph{", gb.IgnoreCase)
   s = Replace$(s, "</i>", "}", gb.IgnoreCase)
   s = Replace$(s, "<u>", "\\ {", gb.IgnoreCase)
   s = Replace$(s, "</u>", "}", gb.IgnoreCase)
   s = Replace$(s, "<p>", "\n\n", gb.IgnoreCase)
   s = Replace$(s, "<p/>", "\n\n", gb.IgnoreCase)
   s = Replace$(s, "</p>", "\n\n", gb.IgnoreCase)
   s = Replace$(s, "<br>", "\\\\ ", gb.IgnoreCase)
   s = Replace$(s, "<h1>", "\\section{", gb.IgnoreCase)
   s = Replace$(s, "</h1>", "}", gb.IgnoreCase)
   s = Replace$(s, "<h2>", "\\subsection{", gb.IgnoreCase)
   s = Replace$(s, "</h2>", "}", gb.IgnoreCase)
   s = Replace$(s, "$", "\\$")
   s = Replace$(s, "&gt;", "$>$", gb.IgnoreCase)
   s = Replace$(s, "&lt;", "$<$", gb.IgnoreCase)
   s = Replace$(s, "&amp;", "\\&", gb.IgnoreCase)
   r = New CRegex("&quot;", s, Regexp.Caseless)
   flag = False
   For Each r
      If flag Then
         flag = False
         r.Set("''") ' close quotes in LaTeX
      Else
         flag = True
         r.Set("``") ' open quotes
      Endif
   Next
   s = r.Subject
   s = Replace$(s, "%", "\\%")
   Return Trim$(s)
   
End

Public Sub Referral_Preview()
   '--------------------------------------------------------------------
   'Previews a referral letter if content is valid. If pk_referral = -1
   'then this preview is of a referral not yet saved, in the edit area
   'otherwise, the pk_referral was set when user clicked on a row of the
   'letters written this consult list.
   '--------------------------------------------------------------------
   
   FClinical.Editor_ShowPage_External("browser", "Referral Preview", Referral_LetterHTML_Construct(Form_Copy_To.Get_CopyTo_Data()!copyto))
   
End

Public Function Valid_Referral() As Boolean
   '-------------------------------------------------------------
   'PURPOSE    :Checks that there is adequate content in a letter
   'RETUNRS    :False if inadequate, true if adequate
   '           :Minimum = fk_person and or fk_branch
   '                      fk_type
   '                      tag = description of letter
   '                      text of letter
   '-------------------------------------------------------------
   
   Dim sMsg As String
   
   If Not IsDate(txtReferralDate.text) Then
      Message.Info("The referral date is invalid")
      txtReferralDate.SetFocus()
      Return
   Endif
   '-------------------------------------------
   'Firstly, does letter have valid recipient?
   '-------------------------------------------
   If fk_person = 0 Then
      If fk_branch = 0 Then
         If Trim(txtName.text) <> "" Then
            sMsg = "The person you have addressed the letter to '" & Trim(txtName.text) & "' is not "
            sMsg &= "in the contacts database.\n\nCurrently you may not enter new contacts details in this "
            sMsg &= "screen, though this may change in future releases.\n\nPlease enter this persons details "
            sMsg &= "either as an employee of a company, or as a person in their own right, in the contacts section of the program "
            sMsg &= "and try again, selecting their name from the popup list."
            Message.Info(sMsg)
            txtName.SetFocus()
         Else
            If Trim(txtOrganisation.text) <> "" Then
               sMsg = "The organisation or branch you have typed in does not exist in the contacts database.\n\n"
               sMsg &= "Currently you may not enter new contacts details in this "
               sMsg &= "screen, though this may change in future releases.\n\nPlease enter this companies details via the contacts "
               sMsg &= "section of the program and try again."
               Message.Info(sMsg)
               txtOrganisation.SetFocus()
            Endif
         End If
         Return False
      End If
   End If
   If fk_branch = 0 Then
      If fk_person = 0 Then
         If Message.Question("Are you sure you don't want to send this letter to someone, besides an organisation?", "Yes", "No") = 2 Then Return
      Endif
   Endif
   If fk_type = 0 Then
      cmbReferralTypes.SetFocus
   End If
   
   If Trim(txtTag.text) = "" Then
      If HSplitEditArea_Communications.Visible = False Then
         Editor_Maximize_Minimize()                                'if maximized text editor shrink it
      End If
      txtTag.SetFocus
      Return False
   End If
   
   If Trim(teLetter.text) = "" Then
      If bEmbedded Or If Not Dictaphone.Has_Dictated() Then
         teLetter.SetFocus
         Return False
      Endif
   End If
   'If Trim(txtHealthIssue.text) = "" Then
   '   Message.Info("Please select a health issue to link to this request\nor link to 'General Notes'")
   '   MenuButton1.SetFocus()
   '   Return False
   'End If
   Return True
   
End

Public Sub teLetter_Change()
   'FIXME - PUT IN SOME USER-DEFINED TEXT SHORTCUTS
   
   Dim sTExt As String
   
   If bExit Then Return
   If Len(teLetter.text) Then
      vbox_LetterText.Padding = 0
      vbox_LetterText.BackGround = Color.Default
   End If
   Object.Lock(teLetter)
   sText = teLetter.RichText
   If InStr(sText, ".ss") Then
      sText = Replace$(sText, ".ss", "I enclose the patients summary sheet.")
      teLetter.RichText = sTExt
   End If
   
   Object.Unlock(teLetter)
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditAreaTextBox_Change()
   
   If bExit Then Return
   Select Case Last.tag
         
      Case "organisation"
         If Trim(Last.text) = "" Then
            bexit = True
            fk_organisation = 0
            fk_branch = 0
            txtOrganisation.text = ""
            txtBranch.Text = ""
            txtStreet1.Text = ""
            txtStreet2.Text = ""
            txtSuburb.text = ""
            txtPostcode.text = ""
            lvworgcontacts.Clear()
            cvwPersonContacts.Clear()
            bexit = False
         Endif
      Case "name"
         '-----------------------------------------------------
         'User deletes the name, visciously reset the edit area
         'Why, we must enforce keys for saving ie fk_person etc
         'must exist
         '------------------------------------------------------
         If Trim(txtName.text) = "" Then
            lvworgcontacts.Clear()
            cvwPersonContacts.Clear()
            bExit = True
            fk_organisation = 0
            fk_branch = 0
            fk_employee = 0
            fk_person = 0
            txtOccupation.text = ""
            txtOrganisation.text = ""
            txtBranch.Text = ""
            txtStreet1.Text = ""
            txtStreet2.Text = ""
            txtSuburb.text = ""
            txtPostcode.text = ""
            bExit = False
         End If
      Case "referral for"
         If Trim(cmbReferralTypes.text) = "" Then
            '   lblReferralType_Missing.Visible = True
            cmbReferralTypes.SetFocus
         End If
      Case "tag"
         If Trim(txtTag.text) = "" Then
            txtTag.SetFocus
         End If
   End Select
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditAreaTextBox_KeyRelease()
   '----------------------------------------------------------------------------
   'Search for appropriate collections of information on each key-release stroke
   '-----------------------------------------------------------------------------
   
   If bExit Then Return
   
   Select Case Last.tag
      Case "category"
         Organisation_By_Category_Get()   'only organisation, search on occupation for person
      Case "occupation"
         Person_By_Occupation_Get()       'gets persons as employees or sole traders
      Case "name"
         Person_Get()
      Case "organisation"
         Organisation_Get()
   End Select
   
End

Public Sub EditArea_Clear()
   '-----------------------------------------
   'Clears the textboxes etc in the edit area
   'needs cleverer code
   '-----------------------------------------
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   teLetter.text = ""
   lvworgcontacts.Clear()
   cvwPersonContacts.Clear()
   lvwInclusions_EditArea.Clear()
   columnview1.Visible = False
   txtHealthIssue.text = "General Notes"          'otherwise users will really get the shits
   txtReferralDate.Text = Format$(Now, "dd/mm/yy")
   cProgressNote_Section = const.cSection_GeneralNotes
   fk_pasthistory = 0
   chkReprintInclusions.value = False
   EditArea_Notify_DataChange(False)
   '----------------------------------------------------------------
   'create the popup health issues menu but default to general notes
   '----------------------------------------------------------------
   modEditAreaHelpers.mnuHealthIssues_Refresh(currentconsult, mnuHealthIssues, Me)
   fk_pasthistory = 0
   lblDocuments.text = "Included Documents"
   cProgressNote_Section = const.cSection_GeneralNotes
   txtHealthIssue.text = "general notes"
   chkDontPrintCCd.value = True
   bHaveSpellChecked = False
   bExit = False
   Form_Copy_To.Reset() 'clears the copyto lists.
   If HSplitEditArea_Communications.Visible = False Then
      Editor_Maximize_Minimize()                                'if maximized text editor shrink it
   End If
   
End

Public Sub EditAreaTextBox_GotFocus()
   
   If Bexit Then Return
   columnview1.Visible = False
   Last.BackGround = Color.rgb(95, 255, 175)
   
   ReferenceHboxForTopColumnview = Last.parent.Parent
   Select Case Last.tag
      Case "category"
         With columnview1
            .top = Last.parent.parent.top + Last.Height
            .width = txtCategory.Width - 5
            .left = Last.parent.Left + Vbox_EditArea.Padding
            .height = 150  'FIXME Make me smarter eg height  = that of # of items.
            .columns.count = 3
         End With
      Case "occupation"
         With columnview1
            .top = Last.parent.parent.top + Last.Height
            .width = txtOccupation.Width - 5
            .left = Last.parent.Left + Vbox_EditArea.Padding
            .height = 150  'FIXME Make me smarter eg height  = that of # of items.
            .columns.count = 4 '0=occupation 1= name 2= organisation/branch 3=address
         End With
      Case "name"
         With columnview1
            .top = Last.parent.parent.top + txtName.Height
            .width = txtOrganisation.Width - 5
            .height = 150
            .left = Last.parent.Left + Vbox_EditArea.Padding
            .columns.count = 4 '0=name,surname 1= occupation 2= organisation/branch 3=address
         End With
      Case "organisation"
         With columnview1
            .top = Last.parent.parent.top + Last.Height
            .width = txtOrganisation.Width - 5
            .left = Last.parent.Left + Vbox_EditArea.Padding
            .height = 150
            .columns.count = 4 'branch, street, suburb
         End With
         ' person_AddressGet()
      Case "branch"
         With columnview1
            .top = Last.parent.parent.top + Last.Height
            .width = txtBranch.Width - 5
            .left = Last.parent.Left + Vbox_EditArea.Padding
            .height = 150
            .columns.count = 2
         End With
         If fk_branch Then
            Branches_Get_For_Organisation()
         Endif
         
      Case "street1"
         With columnview1
            .top = Last.parent.parent.top + Last.Height
            .width = txtstreet1.Width - 5
            .left = Last.Left + Vbox_EditArea.Padding
            .height = 150
            .columns.count = 2
         End With
         Person_Addresses_Get()
      Case "suburb"
         txtPostcode.BackGround = Color.rgb(95, 255, 175)
      Case "postcode"  'fixme search by postcode?
   End Select
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case tag
      Case "date"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid
   
End

Public Sub EditAreaTextBox_LostFocus()
   
   Last.BackGround = Color.White
   If Last.tag = "suburb" Then txtPostcode.BackGround = Color.white
   If Last.tag = "date" Then
      If Not (IsDate(Last.text)) Then
         bExit = True
         Last.text = ""
         bExit = False
      Endif
   Endif
   
End

Public Sub EditAreaTextBox_KeyPress()
   '-------------------------------------------------------------------------------
   ' exclude keys on basis of the textbox tag, otherwise if the down key is pressed
   ' move onto a list if visible
   ' -------------------------------------------------------------------------------
   
   If bExit Then Return
   If Not EditAreaTextbox_ExcludeKeys(key.code, Last.tag) Then
      Stop Event
      Return
   End If
   Select Case Key.Code
      Case Key.Down
         Select Case Last.tag
            Case "category", "organisation", "street1", "Suburb", "linkto", "name", "occupation"
               If columnview1.Visible Then
                  columnview1.MoveFirst()
                  columnview1.SetFocus()
                  columnview1.Item.Selected = True
               End If
         End Select
      Case Key.Return, Key.Tab
         Select Case Last.tag
            Case "category"
               txtOccupation.SetFocus()
            Case "occupation"
               txtName.SetFocus()
            Case "name"
               txtOrganisation.SetFocus()
            Case "tag"
               teLetter.SetFocus()
         End Select
   End Select
   
End

Public Sub Referrals_This_Consult_Show()
   '-----------------------------------------------------------------
   'Show the referrals written this consultation
   'The collection referrals_written_this_consult is re-keyed 0 based
   'to match the columnview 0>n index
   '-----------------------------------------------------------------
   
   Dim referral As Collection
   Dim x As Integer
   
   cvwLetters.Clear()
   referrals_written_this_consult = modUtil.Copy_Collection_Keyed_Sequentially(currentconsult!referrals_written_this_consult)
   For Each referral In currentconsult!referrals_written_this_consult
      cvwLetters.Add(x, 0)
      cvwletters[x][0] = Format(referral!date_referral, "dd/mm/yyyy") & "  "
      If Not IsNull(referral!surname) Then
         cvwletters[x][1] = referral!wholename & "  "
      Else
         If Not IsNull(referral!organisation) Then
            cvwletters[x][1] = referral!organisation & " " & referral!branch & "  "
         Endif
      Endif
      cvwletters[x][2] = referral!type & "  "
      cvwletters[x][3] = referral!tag & "  "
      If referral!finalised Then
         cvwletters[x][4] = "Printed"
      Else
         cvwletters[x][4] = "Not Finalised"
      Endif
      Inc x
   Next
   lblMeasure.font = cvwLetters.Font
   modUtil.Columnview_Columns_Set_Size(cvwLetters, lblMeasure)
   
End

Public Sub Print_Content()
   '---------------------------------------------------------------------------
   'Called from FClinical
   '---------------------------------------------------------------------------
   
   Save(True)
   
End

Public Sub New_Entry()
   '----------------------------------------------------------------------
   'Called from FClinical where the button tag is a generic 'New Entry'
   'I've left the orginal nomenclature here for easier reading of the code
   '----------------------------------------------------------------------
   
   Referral_New()
   
End

Public Sub Referral_New()
   '------------------------------------------------------
   'User has clicked on 'New Referral button
   'First check they have saved/printed any valid referral
   '------------------------------------------------------
   
   Dim sMsg As String
   
   If VBox_Letters.Padding = 1 Then
      If Valid_Referral() Then
         If bEditing = True Then
            sMsg = "The referral you are editing  has not been saved.\n\nIf  you continue you will lose "
            sMsg &= "any changes you have made to this letter.\n\n"
         Else
            sMsg = "The current referral you have completed has not been saved.\n\n"
            smsg &= "If  you continue you will lose all the data you have entered.\n\n"
         Endif
         sMsg &= "Are you sure you want to continue?"
      Else
         sMsg = "Wipe current referral?\n\n"
      Endif
      If Message.Question(sMsg, "Yes", "No") = 2 Then Return
   Endif
   EditArea_Clear()                          'clear input area and zero all keys
   modEditAreaHelpers.mnuHealthIssues_Refresh(currentconsult, mnuHealthIssues, Me) 'create the popup health issues menu but default to general notes
   chkIncludeCarePlan.value = False          'Don't include care plan
   chkIncludehealthSummary.Value = False     'Don't include summary
   lvwInclusions_EditArea.Clear()                     'clear inclusions list
   Inclusions_EditArea = New Collection
   PersonWritingTo = New Collection
   '----------------------------------------
   'Finally set focus to allow input of name
   'user can of course swap to category
   'fix me the index of combo - 0 to n
   'the database table is 1-n
   '----------------------------------------
   pk_referral = -1
   fk_organisation = 0    'used if letter to an organisation
   fk_branch = 0          'in which case it will have a branch even if head office
   fk_person = 0
   fk_employee = 0
   cmbReferralTypes.index = const.ReferralType_OpinionAndManagement - 1
   fk_type = const.ReferralType_OpinionAndManagement
   fk_progressnote = -1
   fk_pasthistory = 0                        'default to general notes
   VBox_Letters.Enabled = True
   bExit = True
   txtReferralDate.text = Format(Now, "dd/mm/yyyy")
   bExit = False
   bEditing = False
   comms = Null
   txtName.SetFocus()
   If Not IsNull(Dictaphone) Then Dictaphone.Reset()
   Print VBox_Letters.Padding = 1
   EditArea_Notify_DataChange(False)
   
End

Public Sub EditAreaButtons_Click()
   
   Select Case Last.tag
      Case "help"
         FClinical.Help_Show("referrals.html", "Help:Referrals", True)
      Case "insert"
         teLetter.Clear()
      Case "save"
         Save()
      Case "new referral"
         Referral_New()
      Case "preview"
         Referral_Preview()
   End Select
   
End

Public Sub Preview()
   
   Referral_Preview()
   
End

Public Sub Settings_Save()
   
   If bEmbedded Then
      Settings["Referrals_Embedded/VSplit_Main.Layout"] = VSplit_Main.Layout
      Settings["Referrals_Embedded/VSplit_Referrals.Layout"] = VSplit_Referrals.Layout
      Settings["Referrals_Embedded/EditArea_Communications"] = HSplitEditArea_Communications.Layout
      Settings["Referrals_Embedded/Letters_Include"] = HSplit_Letter_Include.Layout
      Settings["Referrals_Embedded/HSplit_Referrals_This_Consult.Layout"] = HSplit_Referrals_This_Consult.Layout
   Else
      Settings["Referrals/VSplit_Main.Layout"] = VSplit_Main.Layout
      Settings["Referrals/VSplit_Referrals.Layout"] = VSplit_Referrals.Layout
      Settings["Referrals/EditArea_Communications"] = HSplitEditArea_Communications.Layout
      Settings["Referrals/Letters_Include"] = HSplit_Letter_Include.Layout
      Settings["Referrals/HSplit_Referrals_This_Consult.Layout"] = HSplit_Referrals_This_Consult.Layout
   End If
   
End

Public Sub Settings_Load()
   
   If bEmbedded Then
      Try VSplit_Main.Layout = Settings["Referrals_Embedded/VSplit_Main.Layout"]
      Try VSplit_Referrals.Layout = Settings["Referrals_Embedded/VSplit_Referrals.Layout"]
      Try HSplitEditArea_Communications.Layout = Settings["Referrals_Embedded/EditArea_Communications"]
      Try HSplit_Letter_Include.Layout = Settings["Referrals_Embedded/Letters_Include"]
      cvwLetters.font = Font[Settings["Referrals/cvwLetters.font", "DejaVu Sans,9"]]
      Try HSplit_Referrals_This_Consult.Layout = Settings["Referrals_Embedded/HSplit_Referrals_This_Consult.Layout"]
   Else
      VSplit_Main.Layout = Settings["Referrals/VSplit_Main.Layout", modUtil.VSplit([759, 85])]
      VSplit_Referrals.Layout = Settings["Referrals/VSplit_Referrals.Layout", modUtil.VSplit([315, 65, 343])]
      HSplitEditArea_Communications.Layout = Settings["Referrals/EditArea_Communications", modUtil.HSplit([866, 333])]
      HSplit_Letter_Include.Layout = Settings["Referrals/Letters_Include", modUtil.HSplit([866, 333])]
      HSplit_Referrals_This_Consult.Layout = Settings["Referrals/HSplit_Referrals_This_Consult.Layout", modUtil.HSplit([866, 333])]
      cvwLetters.font = Font[Settings["Referrals/cvwLetters.font", "DejaVu Sans,9"]]
   End If
   
End

Public Sub Address_Select(address As Collection)
   '-------------------------------------------------------------------------------
   'There is a complicated problem with this, because of the very freedom we allow
   'in the editing area, namely that a person could have been selected with an
   'attatched private address, but they could also be 'employed' in an organisation
   'and hence have a fk_employee [maybe fundamentally bad contacts design]
   'So, if the user first selects  the first scenario, then prints the letter, and
   'then re-edits, there is no fk_employee for the address, or visa-versa if they
   'choose to send to a person at an address where they are not an employee, then
   'fk_employee no longer exists
   '--------------------------------------------------------------------------------
   
   Try txtOrganisation.text = Address!organisation
   Try txtBranch.text = Address!branch
   Try txtStreet1.text = Address!street1
   Try txtStreet2.text = Address!street2
   Try txtSuburb.text = Address!town
   Try txtPostcode.text = Address!postcode
   Try fk_organisation = Address!fk_organisation
   Try fk_branch = Address!fk_branch
   Try stored_state = address!state
   If Error Then
      fk_employee = 0
   Endif
   '-----------------------------------------------------------------------------------
   'if the letter is being edited, then the original letter could have been just to the
   'person at a non-company address, so get the fk_employee
   '-----------------------------------------------------------------------------------
   If bEditing Then
      If fk_branch And fk_person <> 0 Then
         If fk_employee = 0 Then
            '--------------------------------------------------
            ' get the fk_employee the the person at this branch
            '--------------------------------------------------
            fk_employee = modContactsDBI.Employee_Get_By_Fk_branch_fk_person(fk_person, fk_branch)
         Endif
      Endif
   End If
   txtTag.SetFocus()
   
End

Public Sub ColumnView1_KeyPress()
   
   If Key.Code = Key.RETURN Then
      ColumnView1_DblClick()
   End If
   
End

Public Sub ColumnView1_DblClick()
   '-----------------------------------------------------------
   'The columnview tag is always a control, usually a textbox
   'here we read the textbox tag to determine which textbox
   'poppuped up the columnview
   '---------------------------------------------------------
   
   columnview1.MoveCurrent()
   Print columnview1.Item.key
   Select Case Last.Tag.tag
      Case "category", "branch", "organisation"
         branch_select(branches[columnview1.Item.key])
      Case "occupation", "name"
         Person_Select(persons[columnview1.Item.key])
         txtTag.SetFocus()
      Case "street1"
         Address_Select(Addresses[columnview1.Item.key])
   End Select
   columnview1.Visible = False
Catch
   Return
   
End

Public Sub mnuReferralsThisconsult_Click()
   
   Select Case Last.tag
      Case "font"
         modUtil.Columnview_SetFont(cvwLetters, "Referrals")        'allow use to change the font, save to settings"
      Case "help"
         ReferralsList_Help()          'fixme not implemented
      Case "delete"
         ReferralsList_Delete()
      Case "undo delete"
         ReferralsList_DeleteUndo()
      Case "edit"
         Referral_Edit()               'edit the current referral
      Case "preview"
         Referral_Edit()
         Referral_Preview()
      Case "re-print no inclusions", "re-print all", "re-print with inclusions", "re-print all with inclusions"
         ReferralsList_Print(Last.tag) 'fixme not implemented
   End Select
   
End

Public Sub ReferralsList_Help()
   
   modUtil.NotImplemented("Showing help for Referrals")
   
End

Public Sub ReferralsList_Delete()
   '-------------------------------------------------------------------------
   'Deletes the current referral
   'Without audit trail if written this consultation, which is always if from
   'the cvwLetters list
   'However keep the keys, so that can undelete (single level) this referral
   'and its associated progress note
   '-------------------------------------------------------------------------
   
   Dim referral As New Collection
   Dim inclusion As Collection
   
   If Message.Question("Are you sure you want to delete this referral?", "Yes", "No") = 2 Then Return
   referral = referrals_written_this_consult[cvwLetters_key]
   referral!deleted = True
   For Each inclusion In Inclusions_Referral_This_consult  'these are the inclusions just for one referral
      
      inclusion!deleted = True
   Next
   modDBConnect.BeginTrans()
   If referral!finalised = True Then 'unfinalised letters have no progress note.
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": referral!fk_progressnote, "deleted": True])
      pk_deleted_progressnote = referral!fk_progressnote
   End If
   pk_deleted_referral = modReferralsDBI.Save(currentconsult, pk_referral, referral, Inclusions_Referral_This_consult)
   modDBConnect.CommitTrans()
   Reload()                                                  'Default to a new letter
   FClinical.Refresh_Section(const.cSection_Referrals)
   FClinical.Refresh_AllPreviousNotes()
   
End

Public Sub ReferralsList_DeleteUndo()
   '-----------------------------------------------------
   'Un-deletes a referral - one level only.
   'Can't use save(...) as not in the collection anymore
   'Ian will probably change this though..
   '----------------------------------------------------
   
   If pk_deleted_referral Then
      modDBConnect.BeginTrans()
      If pk_deleted_progressnote Then
         modDBConnect.update("clin_consult.progressnotes", Null, ["pk": pk_deleted_progressnote, "deleted": False])
      Endif
      modReferralsDBI.UnDelete(pk_deleted_referral)
      pk_deleted_referral = 0
      pk_deleted_progressnote = 0
      modDBConnect.CommitTrans()
      Reload()
      FClinical.Refresh_Section(const.cSection_Referrals)
      FClinical.Refresh_AllPreviousNotes()
   Endif
   
End

Public Sub ReferralsList_Print(print_type As String)
   
   Dim x As Integer
   
   Select Case print_type
      Case "re-print no inclusions"   're-prints including inclusions
         modReferralsDBI.Referral_Print_Only(currentconsult, currentconsult!referrals_written_this_consult[pk_referral], False, False)
         'FIXME change me back to referral_print once latex template ok
      Case "re-print with inclusions"
         modReferralsDBI.Referral_Print_Only(currentconsult, currentconsult!referrals_written_this_consult[pk_referral], False, True, Inclusions_Referral_This_Consult)
      Case "re-print all with inclusions" '  're-prints all with the inclusions
         cvwLetters.MoveFirst
         For x = 0 To cvwLetters.count - 1
            modReferralsDBI.Referral_Print_Only(currentconsult, currentconsult!referrals_written_this_consult[pk_referral], False, True, Inclusions_Referral_This_Consult)
            'FIXME change me back to referral_print once latex template ok
            cvwLetters.MoveNext()
         Next
         cvwLetters.MoveFirst()
         cvwLetters.Item.Selected = True
         
      Case "re-print all"  're-prints all letters but not the inclusions
         cvwLetters.MoveFirst
         For x = 0 To cvwLetters.count - 1
            modReferralsDBI.Referral_Print_Only(currentconsult, currentconsult!referrals_written_this_consult[pk_referral], False, False)
            'FIXME change me back to referral_print once latex template ok
            cvwLetters.MoveNext()
         Next
         cvwLetters.MoveFirst()
         cvwLetters.Item.Selected = True
   End Select
   cvwletters.UnselectAll()
   
End

Public Sub Referral_Edit(Optional new_referral As Collection)
   '---------------------------------------------------------------
   'Edits either an letter just written (saved or not this consult)
   'or an old referral that has been re-loaded for re-printing
   'or editing
   'Note:if re-edited from an old one,must ensure referral.pk set to 0
   '------------------------------------------------------------------
   
   Dim Letter_from_View As Collection ' to make typing easier
   Dim PH As Collection
   
   bEditing = True
   EditArea_Clear()
   Inclusions_EditArea = New Collection
   PersonWritingTo = New Collection
   comms = Null
   bExit = True
   If IsNull(new_referral) Then
      cvwLetters.MoveCurrent
      Letter_from_View = referrals_written_this_consult[cvwLetters.Item.key]
      pk_referral = Letter_from_View!pk_referral
   Else
      Letter_from_View = new_referral
      Try pk_referral = new_referral!fk_referral
   Endif
   Try fk_branch = Letter_from_View!fk_branch
   If Not Error Then
      Branch_Comms_Get()
   Endif
   Try fk_person = Letter_from_View!fk_person
   If Not Error Then
      If IsNull(comms) Then
         person_comms_get()
      Endif
   Endif
   Try fk_employee = Letter_from_View!fk_employee
   Try fk_address = Letter_from_View!fk_address
   If Not IsNull(fk_address) Then
      If Not Letter_from_View.Exist("state") Then
         stored_state = modContactsDBI.Towns_Get(Letter_from_View!postcode)!state
      Else
         stored_state = Letter_from_View!state
      Endif
   Endif
   Try fk_progressnote = Letter_from_View!fk_progressnote
   PersonWritingTo!firstname = Letter_from_View!firstname
   PersonWritingTo!surname = Letter_from_View!surname
   PersonWritingTo!title = Letter_from_View!title
   If Not IsNull(fk_employee) And fk_employee <> 0 Then
      If Letter_from_View.Exist("provider_number") Then
         PersonWritingTo!provider_number = Letter_from_View!provider_number
      Else
         PersonWritingTo!provider_number = modContactsDBI.Organisations_Employees_Get_By_Keys(0, 0, fk_employee)!provider_number
      Endif
   Endif
   txtReferralDate.text = Format(Letter_from_View!date_referral, "dd/mm/yyyy")
   txtName.text = Letter_from_View!wholename
   txtCategory.text = Letter_from_View!category
   txtOccupation.text = Letter_from_View!occupation
   txtOrganisation.text = Letter_from_View!organisation
   txtBranch.text = Letter_from_View!branch
   txtStreet1.text = Letter_from_View!street1
   txtStreet2.Text = Letter_from_View!street2
   txtSuburb.text = Letter_from_View!town
   txtPostcode.text = Letter_from_View!postcode
   '-----------------------------------------------------------------------------
   'Now, use the fk_pasthistory (default = 0) to set the linked past history item
   '-----------------------------------------------------------------------------
   If Not Letter_from_View.Exist("fk_pasthistory") Or If Letter_from_View!fk_pasthistory = 0 Then
      txtHealthIssue.text = "General Notes"
      fk_pasthistory = 0
   Else
      For Each PH In currentconsult!past_history
         If Letter_from_View!fk_pasthistory = PH!pk_pasthistory Then
            txtHealthIssue.text = PH!description
            fk_pasthistory = PH!pk_pasthistory
            Break
         End If
      Next
   End If
   If Letter_from_View!include_careplan = True Then
      chkIncludeCarePlan.value = True
   Else
      chkIncludeCarePlan.value = False
   End If
   If Letter_from_View!include_healthsummary = True Then
      chkIncludehealthSummary.value = True
   End If
   If Not IsNull(Letter_from_View!fk_progressnote) Then
      fk_progressnote = Letter_from_View!fk_progressnote
   Else
      fk_progressnote = -1
   Endif
   txtTag.text = Letter_from_View!tag
   teLetter.richtext = Letter_from_View!body_html
   VBox_Letters.Enabled = True
   tbSave.Enabled = False
   teLetter.SetFocus()
   Form_Copy_To.CopyTos_Reload(modUtil.SplitStrings_into_collection(Letter_from_View!copyto, "|"))
   If Not IsNull(Inclusions_Referral_This_Consult) Then
      Inclusions_EditArea = modUtil.Copy_Collection(Inclusions_Referral_This_Consult)
      lvwInclusions_EditArea_Refresh(Inclusions_EditArea)
   Endif
   bExit = False
   cmbReferralTypes.index = cmbReferralTypes.Find(Letter_from_View!type) 'leave outside of Bexit to use the click event
   EditArea_Notify_DataChange(False)
   tbPreview.Enabled = True
   
End

Public Sub cvwLetters_Menu()
   '------------------------------------------------------------------------------------
   'Popup menu of letters written this consult, enabling, disabling items as appropriate
   '------------------------------------------------------------------------------------
   
   If pk_deleted_referral Then
      mnuReferralsThisconsult_DeleteUndo.enabled = True
   Else
      mnuReferralsThisconsult_DeleteUndo.Enabled = False
   End If
   
   ' If cvwLetters.count = 0 Then
   '    mnuReferralsThisconsult_Edit.Enabled = False
   '    mnuReferralsThisconsult_Preview.Enabled = False
   '    mnuReferralsThisconsult_RePrint.Enabled = False
   '    mnuReferralsThisconsult_RePrintAll.Enabled = False
   '    mnuReferralsThisconsult_Delete.Enabled = False
   '  Else
   '    mnuReferralsThisconsult_Edit.Enabled = True
   '    mnuReferralsThisconsult_Preview.Enabled = True
   '    mnuReferralsThisconsult_RePrint.Enabled = True
   '    mnuReferralsThisconsult_RePrintAll.Enabled = True
   '    mnuReferralsThisconsult_Delete.Enabled = True
   ' Endif
   mnuReferralsThisconsult_Edit.Enabled = cvwLetters.count
   mnuReferralsThisconsult_Preview.Enabled = cvwLetters.count
   mnuReferralsThisconsult_RePrint.Enabled = cvwLetters.count
   mnuReferralsThisconsult_RePrintAll.Enabled = cvwLetters.count
   mnuReferralsThisconsult_Delete.Enabled = cvwLetters.count
   
   mnuReferralsThisconsult.popup()
   
End

Public Sub lvwInclusions_Saved_Refresh()
   '--------------------------------------------------------------------------------
   'Bug!! if you delete a document (e.g tranfer back to refile a misfiled document
   'after you have printed, then re-edit this will crash as it no longer exists
   'Shows what documents are included for the currently highlighted referral written
   '--------------------------------------------------------------------------------
   
   Dim inclusion As Collection
   Dim sString As String
   Dim document As Collection
   
   Inclusions_Referral_This_Consult = New Collection ' note this is singular Inclusions_Referral not Inclusions_Referrals
   lvwInclusions_Saved.Clear()
   For Each Inclusion In Inclusions_Referrals_This_Consult
      If inclusion!fk_referral = pk_referral Then
         Try Document = currentconsult!results_received[inclusion!fk_document]         '? a result??
         If IsNull(document) Then                                                      'it wasn't a result
            Try Document = currentconsult!letters_received[inclusion!fk_document]      '? a letter ??
         End If
         '--------------------------------------------------------------------------
         'At this point in theory the previously saved inclusion has been found
         'and so it's details can be re-loaded into the edit area,however there is
         'a catch: If, after printing the letter, the user (or someone else) has
         'deleted the document (and this happened to me - hence this annotation
         'and changes to the code) then it will no longer exist in the patient's
         'document list. In my case I'd included a document and then realised it had
         'been mis-filed and belonged to another patient - so I deleted it from the
         'documents list, then re-edited intending to remove it from the cc's in the
         'letter > crash!!!!1
         '--------------------------------------------------------------------------
         If Not IsNull(document) Then
            sString = Format(Document!date_created, "dd/mm/yyyy") & " " & Document!tag_user
            lvwInclusions_Saved.add(lvwInclusions_Saved.count, sSTring)
            Inclusions_Referral_This_Consult.Add(Inclusion, Inclusion!pk_inclusion)
         Else
            '-------------------------------------------------------------------------
            'we have a problem - the progress notes which contain the previously saved
            'letter refer to an inclusion that no longer exists
            '-------------------------------------------------------------------------
            ' Referral_ProgressNoteHTML_Construct(
            Print currentconsult!referrals_written_this_consult[pk_referral]
         End If
      End If
   Next
   
End

Public Sub cvwLetters_Select()
   '-----------------------------------------------------------------
   'User has clicked on an existing letter for today's consulatation
   '-----------------------------------------------------------------
   
   EditArea_Clear()
   cvwLetters.MoveCurrent
   cvwLetters_key = cvwLetters.Item.key
   pk_referral = referrals_written_this_consult[cvwLetters.Item.key]!pk_referral
   vbox_Letters.Enabled = False
   tbSave.Enabled = False
   tbPreview.enabled = False
   lvwInclusions_Saved_Refresh()
   
End

Public Sub lvwOrgContacts_Menu()
   '-------------------------------
   'Selectively show the menu items
   '-------------------------------
   
   If lvworgcontacts.Count Then
      mnuReferrals_Communications_Email.Enabled = False
      mnuReferrals_Communications_web.Enabled = False
      mnuReferrals_Communications_fax.Enabled = False
      For Each comm In comms
         Select Case comm!fk_type
            Case const.CommModalityEmail
               mnuReferrals_Communications_Email.Enabled = True
            Case const.CommModalityWeb
               mnuReferrals_Communications_web.Enabled = True
            Case const.CommModalityFax
               mnuReferrals_Communications_fax.Enabled = True
         End Select
      Next
      mnuReferrals_Communications.popup
   End If
   
End

Public Sub mnuReferrals_Communications_Click()
   
   Select Case Last.tag
      Case "message front desk"
         modUtil.NotImplemented("messaging front desk")
      Case "email"
         modUtil.NotImplemented("emailing provider")
      Case "web"
         Try WebPage_Show()
      Case "software phone"
         modUtil.NotImplemented("phone e.g using skype")
   End Select
   
End

Public Sub WebPage_Show()
   '----------------------------------------------------
   'Attempt to show web page for person/organisation etc
   '----------------------------------------------------
   
   Dim comm As Collection
   
   If comms.count = 0 Then Return 'should never happen
   For Each comm In comms
      If comm!fk_type = const.CommModalityWeb Then
         'fixme need better way than this wish some error checking
         FClinical.txtURL.text = comm!value
         FClinical.Editor_ShowPage_External("webpage", "", comm!value)
         Break
      Endif
      
   Next
   
End

Public Sub Person_Addresses_Get()
   '----------------------------------------------------------------------
   'Get all addresses this person works, private rooms or in organisations
   '----------------------------------------------------------------------
   
   Dim x As Integer
   
   columnview1.Clear
   columnview1.Columns.count = 2
   Addresses = modUtil.Copy_Collection_Keyed_Sequentially(modReferralsDBI.Persons_Addresses_Get(fk_person))
   For Each address In Addresses
      ColumnView1.add(x, 0)
      If address!organisation <> Null Then
         ColumnView1[x][0] = address!organisation & " " & address!branch
      Else
         ColumnView1[x][0] = "Private rooms"
      End If
      ColumnView1[x][1] = address!street1 & " " & address!street2 & " " & address!town
      Inc x
   Next
   If Addresses.count = 1 Then
      Address_Select(address)
   Else
      modUtil.Columnview_Columns_Set_Size(columnview1, lblmeasure)
      With columnview1
         .Raise
         .Visible = True
         .tag = txtStreet1
      End With
   Endif
   
End

Public Sub Person_Get()
   '-------------------------------------------------------------
   'Gets a list of persons who could be sole traders or employees
   '-------------------------------------------------------------
   
   Dim address As String
   Dim x As Integer
   Dim person As Collection
   
   With columnview1
      .Visible = False
      .Clear
   End With
   If Trim(txtName.text) = "" Then Return
   lblMeasure.font = columnview1.Font
   If chkSearchPatient.value = chkSearchPatient.True Then
      persons = modContactsDBI.patients_get_firstname_surname(Trim(txtName.text))
      persons.Remove("sql_in_english")
      persons = modUtil.Copy_Collection_Keyed_Sequentially(persons)
   Else
      persons = modUtil.Copy_Collection_Keyed_Sequentially(modReferralsDBI.Person_Get_By_Surname(Trim(txtName.text)))
   Endif
   If persons.count <> 0 Then
      For Each person In persons
         columnview1.Add(x, 0)
         columnview1[x][0] = person!wholename
         columnview1[x][1] = "(" & person!occupation & ") "
         If Not IsNull(person!organisation) Then
            columnview1[x][2] = person!organisation & " " & person!branch
         Else
            columnview1[x][2] = ""
         Endif
         Try address = Trim(person!street1 & " " & person!street2)
         Try address &= person!town & " " & person!postcode
         columnview1[x][3] = address
         Inc x
      Next
      If persons.count = 1 Then                              'auto-select single person
         Person_Select(person)
      Else                                                  'otherwise show a list with resized column widths
         modUtil.Columnview_Columns_Set_Size(columnview1, lblmeasure)
         With columnview1
            .tag = txtName
            .Visible = True
            .Raise
         End With
      End If
   End If
   
End

Public Sub Person_Comms_Get()
   '--------------------------------------------------------
   'Get all the persons contacts, e.g phone, fax, mobile etc
   '--------------------------------------------------------
   
   Dim comm As Collection
   Dim x As Integer
   
   comms = modContactsDBI.person_comms_get(fk_person)
   cvwPersonContacts.Clear()
   For Each Comm In comms
      x = Comm!pk
      cvwPersonContacts.Add(x, 0)
      cvwPersonContacts[x][0] = comm!type
      cvwPersonContacts[x][1] = comm!value
   Next
   
End

Public Sub Organisation_By_Category_Get()
   '---------------------------------------------------------------
   'Allows user to select a recipient by category
   'applies only to organisation, for persons, search on occupation
   '---------------------------------------------------------------
   
   Dim x As Integer
   
   With columnview1
      .Visible = False
      .Clear
   End With
   If Trim(txtCategory.text) = "" Then Return
   branches = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Organisations_Get_By_Category(Trim(txtCategory.text)))
   If Not branches.count Then Return
   For Each branch In branches
      columnview1.Add(x, 0)
      columnview1[x][0] = branch!category
      columnview1[x][1] = branch!organisation
      columnview1[x][2] = branch!branch
      Inc x
   Next
   If branches.count = 1 Then
      Branch_Select(branch) 'display branch and comms
   Else
      modUtil.Columnview_Columns_Set_Size(columnview1, lblmeasure)
      With columnview1
         .tag = txtCategory
         .Raise()
         .Visible = True
      End With
   End If
   
End

Public Sub Branch_Comms_Get()
   '----------------------------------------------------
   'Gets the communications for a branch using fk_branch
   'global fk_branch is set in the calling routine
   '-----------------------------------------------------
   
   comms = modContactsDBI.Branch_Comms_Get(fk_branch)
   lvworgcontacts.Clear()
   cvwPersonContacts.Clear()
   For Each comm In comms
      lvworgcontacts.Add(comm!pk, comm!type & " " & comm!value)
   Next
   
End

Public Sub Branch_Select(branch As Collection)
   '--------------------
   ' Displays the branch
   '--------------------
   
   bexit = True
   txtOrganisation.text = branch!organisation
   txtBranch.text = branch!branch
   txtstreet1.text = branch!street1
   txtstreet2.text = branch!street2
   txtSuburb.text = branch!town
   txtPostcode.text = branch!postcode
   txtCategory.text = branch!category
   fk_branch = branch!fk_branch
   stored_state = branch!state
   fk_organisation = branch!fk_organisation
   Branch_Comms_Get()
   bexit = False
   txtTag.SetFocus()
   
End

Public Sub Branches_Get_For_Organisation()
   '--------------------------------
   'Get branches for an organisation
   '--------------------------------
   
   Dim x As Integer
   
   With columnview1
      .Clear
      .Visible = False
   End With
   Branches = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Branches_Get_For_Organisation(fk_organisation))
   If Branches.count Then
      For Each branch In branches
         columnview1.Add(x, 0)
         columnview1[x][0] = branch!branch
         columnview1[x][1] = Trim(branch!street1 & " " & branch!street2) & " " & branch!town & " " & branch!postcode
         Inc x
      Next
      modUtil.Columnview_Columns_Set_Size(columnview1, lblmeasure)
      With columnview1
         .Visible = True
         .Tag = txtBranch
      End With
   Endif
   
End

Public Function Employee_Workplace_Get()
   '-----------------------------------------------------------------------------
   'Given an fk_person, get where they could work (may not however be an employee
   'If a single place of employ - auto accept and put in the details
   '-----------------------------------------------------------------------------
   
   Dim x As Integer
   
   With columnview1
      .Visible = False
      .Clear
   End With
   If Trim(txtName.text) = "" Then Return
   fk_organisation = 0
   fk_branch = 0
   branches = modUtil.Copy_Collection_Keyed_Sequentially(modReferralsDBI.Organisations_Get_For_Employee(fk_person))
   If Not branches.count Then Return
   '-----------------------------------------------------------------------------------
   'If branches of an organisation  exist to match the text, auto-select or show a list
   '-----------------------------------------------------------------------------------
   For Each branch In branches
      Columnview1.Add(x, 0)
      Columnview1[x][0] = Branch!organisation
      Columnview1[x][1] = Branch!branch
      Columnview1[x][2] = Trim(Branch!street1 & " " & Branch!street2)
      Columnview1[x][3] = Branch!town & " " & Branch!postcode
      Inc x
   Next
   If branches.count = 1 Then
      Employee_Workplace_Select(branch) 'FIXME I THINK THIS IS A DUPLICATE SUB OF ANOTHER NAME
      Return
   End If
   modUtil.Columnview_Columns_Set_Size(columnview1, lblmeasure)
   With columnview1
      .Visible = True
      .Raise
      .tag = txtOrganisation
   End With
   
End

Public Function Employee_Workplace_Select(branch As Collection)
   
   bExit = True
   
   fk_organisation = Branch!fk_organisation
   fk_branch = Branch!fk_branch
   txtOrganisation.text = Branch!organisation
   txtBranch.text = Branch!branch
   '-----------------
   'These can be null
   '-----------------
   Try txtStreet1.text = Branch!street1
   Try txtStreet2.text = Branch!street2
   Try txtSuburb.text = Branch!town
   Try txtPostcode.text = Branch!postcode
   Try stored_state = branch!state
   txtTag.SetFocus
   '------------------------------------------
   'Get the comms for this organisation/branch
   '------------------------------------------
   lvworgcontacts.Clear()
   cvwPersonContacts.Clear()
   Branch_Comms_Get()
   bExit = False
   
End

Public Sub EditAreaCombo_Click()
   
   If bExit Then Return
   fk_type = Last.index + 1
   EditArea_Notify_DataChange(True)
   
End

Public Sub cvwLetters_LostFocus()
   
   If Last.Header = True Then
      Last.header = False
   End If
   
End

Public Sub Person_Select(person As Collection)
   '-----------------------------------------------------------------------------------------
   'User selects person to send letter to from popup list
   'Remembering that the view contains person with addresses in organisations or sole traders
   'Hence all the Try's. Also, an organisation or person can be in the database 'name only'
   'without associated address. Bumma eh!
   '------------------------------------------------------------------------------------------
   
   PersonWritingTo = New Collection
   bExit = True
   txtName.Text = person!wholename
   txtOccupation.text = person!occupation
   fk_person = person!fk_person
   Try fk_employee = person!fk_employee
   Try fk_organisation = person!fk_organisation
   Try fk_address = person!fk_address
   Try fk_branch = person!fk_branch
   PersonWritingTo!firstname = person!firstname
   PersonWritingTo!surname = person!surname
   PersonWritingTo!title = person!title
   PersonWritingTo!provider_number = person!provider_number
   Try stored_state = person!state
   Try txtOrganisation.text = person!organisation
   Try txtBranch.text = person!branch
   Try txtStreet1.text = person!street1
   Try txtStreet2.text = person!street2
   Try txtSuburb.text = person!town
   Try txtPostcode.text = person!postcode
   'this is a bit arbitrary fixme test me
   If fk_branch Then Branch_Comms_Get()
   '  If IsNull(comms) Then
   If fk_person Then Person_Comms_Get()
   ' End If
   bExit = False
   
End

Public Sub Person_By_Occupation_Get()
   '----------------------------------------------------------------------------------
   ' Gets a list of categories of persons by occupation, presented in a list like this
   ' category .... persons name i.e
   ' cardiologist      Dr Big heart
   ' If > one found popup a list, otherwise auto-accept the single one
   ' of course they may be simple old people not persons FIXME
   '-----------------------------------------------------------------------------------
   
   Dim address As String
   Dim x As Integer
   
   With columnview1
      .Visible = False
      .Clear
   End With
   If Trim(txtOccupation.text) = "" Then Return
   txtOccupation.ReadOnly = True                                                          'prevent further typing
   persons = modutil.Copy_Collection_Keyed_Sequentially(modReferralsDBI.Persons_Get_By_Occupation(Trim(txtOccupation.text)))      'get list of persons/persons
   If persons.count <> 0 Then                                                         'if have one or more load to columnvie
      For Each person In persons
         columnview1.Add(x, 0)
         columnview1[x][0] = person!occupation
         columnview1[x][1] = person!wholename
         If Not IsNull(person!organisation) Then
            columnview1[x][2] = person!organisation & " " & person!branch
         Else
            columnview1[x][2] = ""
         Endif
         Try address = Trim(person!street1 & " " & person!street2)
         Try address &= person!town & " " & person!postcode
         columnview1[x][3] = address
         Inc x
      Next
      If persons.count = 1 Then                                                      'only one?, just display this instance
         Person_Select(person)
         Goto Unlock_Textbox
      Else
         modUtil.Columnview_Columns_Set_Size(columnview1, lblmeasure) 'otherwise popup the columnview.
         With columnview1
            .Visible = True
            .Raise
            .tag = txtOccupation
         End With
      End If
   End If
   Goto Unlock_Textbox
   
Unlock_Textbox:
   txtOccupation.ReadOnly = False
   
End

Public Sub Organisation_Get()
   '-----------------------------------------------------------------------------------
   'Gets list of all organisations (an organisation is a branch just HEAD OFFICE)
   'If branches of an organisation  exist to match the text, auto-select or show a list
   '-----------------------------------------------------------------------------------
   
   Dim x As Integer
   
   With columnview1
      .Visible = False
      .Clear
   End With
   If Trim(txtOrganisation.text) = "" Then Return
   fk_organisation = 0
   fk_branch = 0
   branches = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Organisations_Get(Trim(txtOrganisation.text)))
   If Not branches.count Then Return
   '-----------------------------------------------------------------------------------
   For Each branch In branches
      Columnview1.Add(x, 0)
      Columnview1[x][0] = Branch!organisation
      Columnview1[x][1] = Branch!branch
      Columnview1[x][2] = Trim(Branch!street1 & " " & Branch!street2)
      Columnview1[x][3] = Branch!suburb & " " & Branch!postcode
      Inc x
   Next
   
   If branches.count = 1 Then
      Branch_Select(branch)
   Else
      modUtil.Columnview_Columns_Set_Size(columnview1, lblmeasure)
      columnview1.Visible = True
      columnview1.Raise
      columnview1.tag = txtOrganisation
   End If
   
End

Public Sub lvwInclusions_EditArea_Refresh(Inclusions As Collection)
   '---------------------------------------------------------------------
   'Refresh the inclusions list for the current document in the edit area
   'ie. this is the list next to the letter text, not the one
   'underneath which is for thos letters already printed
   'Called by  lvwInclusions_EditArea_Drop: Inclusions_EditArea collection
   '           Referral_Edit:Inclusions_Referral_This_Consult collection
   '---------------------------------------------------------------------
   
   Dim inclusion As Collection
   Dim sString As String
   Dim document As Collection
   
   lvwInclusions_EditArea.Clear()
   For Each Inclusion In Inclusions
      Try Document = currentconsult!results_received[inclusion!fk_document]         '? a result??
      If IsNull(document) Then                                                      'it wasn't a result
         Try Document = currentconsult!letters_received[inclusion!fk_document]      '? a letter ??
      End If
      sString = Format(Document!date_created, "dd/mm/yyyy") & " " & Document!tag_user
      lvwInclusions_EditArea.add(lvwInclusions_EditArea.count, sSTring)
   Next
   lblDocuments.text = "Included Documents (" & Str(lvwInclusions_EditArea.Count) & ")"
   
End

Public Sub lvwInclusions_EditArea_Drop()
   '---------------------------------------------------------------------
   'Something is being dropped on the inclusions list in the edit area
   'We will (at some stage) accept stuff which is a document or a graph
   'at moment I'm only allowing a document from documents (ie path or
   'letter/scanned document
   'Drag.source = the control this is coming from, but
   'is a 'control', not for example a columnview  so
   'have to test it as below
   '---------------------------------------------------------------------
   
   Dim cv As ColumnView                'the 'source' control if columnview
   Dim Inclusion As Collection
   Dim select_mode As Integer
   Dim x As Integer
   
   'if selection mode = 1  = single document is highlighted
   If Drag.Source Is Columnview Then   'a result or letter ie document
      cv = Drag.Source
      cv.MoveCurrent()
      Select_mode = cv.mode
      If cv.mode = 1 Then
         inclusion = New Collection
         Inclusion!fk_document = Drag.data
         If Not Inclusion_In_List(Inclusion) Then
            Inclusions_EditArea.Add(Inclusion, lvwInclusions_EditArea.count)
         End If
      Else
         cv.MoveFirst()
         For x = 0 To cv.count - 1
            If cv.Item.Selected = True Then
               inclusion = New Collection
               Inclusion!fk_document = cv.Item.Key 'the key of the document
               If Not Inclusion_In_List(Inclusion) Then
                  Inclusions_EditArea.Add(Inclusion, Inclusions_EditArea.count)
               End If
            Endif
            cv.MoveNext()
         Next
      End If
      cv.UnselectAll()
   Else
      '---------------------------------
      'Must be a graph which was dropped
      '---------------------------------
      '  Inclusions_EditArea!type = "graph"
      '  Inclusions_EditArea!filename = Drag.Source.Tag!fname
      '  sString = "graph of something"
      ' lvwInclusions_EditAreas.add(lvwInclusions_EditAreas.count, sSTring)
   End If
   lvwInclusions_EditArea_Refresh(Inclusions_EditArea)
   EditArea_Notify_DataChange(True)
   
End

Public Sub Inclusion_In_List(inclusion As Collection) As Boolean
   '-------------------------------------------------------------------
   'Checks if an included document is in the list returns true if it is
   'Inclusions_EditArea is count 0 based
   'May at later date not just include documents.
   '-------------------------------------------------------------------
   
   Dim I As Collection
   
   If Inclusions_EditArea.count = 0 Then Return False
   For Each I In Inclusions_EditArea
      If I!fk_document = Inclusion!fk_document Then
         Return True
      End If
   Next
   Return False
   
End

Public Function Inclusions_Construct(Inclusions As Collection, templ As String, sSep As String) As String
   '--------------------------------------------
   'Construct a string describing the inclusions
   '--------------------------------------------
   
   Dim ret As String
   Dim sInclusions As String
   Dim inclusion As Collection
   Dim document As Collection
   
   If Inclusions.count = 0 Then Return ""
   
   For Each inclusion In Inclusions
      Try Document = currentconsult!results_received[inclusion!fk_document]         '? a result??
      If IsNull(document) Then                                                      'it wasn't a result
         Try Document = currentconsult!letters_received[inclusion!fk_document]      '? a letter ??
      End If
      '---------------------------------------------------------------------------
      'If it was a valid document, print - at moment we only handle pdf's and html
      'but hey, that's our perogative
      '---------------------------------------------------------------------------
      If Not IsNull(Document) Then
         sInclusions &= Format(document!date_created, "dd/mm/yyyy") & " " & UCase(Left(document!style)) & Right(document!style, Len(document!style) - 1) & " "
         If document!msh_sending_entity = "" Then
            sInclusions &= "" & document!originator
         Else
            sInclusions &= "" & document!msh_sending_entity
         Endif
         sInclusions &= " - " & document!tag_user
         sInclusions &= sSep
      Endif
   Next
   ret = Replace(templ, "%inclusions%", sInclusions)
   Return ret
   
End

Public Sub HSplit_Letter_Include_Resize()
   
   lblDocuments.width = HSplit_Letter_Include.children[1].width
   
End

Public Sub EditAreaCheckBox_Click()
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditorButtons_Click()
   
   Select Case Last.tag
      Case "spell"
         Spelling_Check()
   End Select
   
End

Public Sub Spelling_Check()
   '--------------------------------------------------------------------------------------------------
   'Check the letters spelling
   'called by EditorButtons_Click() and Save()
   'bHaveSpellChecked is set so as not to bug a user who has already spell checked when they save
   'This is not perfect but pragmatic, i.e they could have introduced errors after their initial check
   'but then hey, that's their problem
   '--------------------------------------------------------------------------------------------------
   
   SpellChecker.init()
   SpellChecker.StartSpelling()
   bHaveSpellChecked = True
   
End

Public Sub lvwInclusions_EditArea_Menu()
   
   If Last.count Then
      mnuInclusions.Popup()
   Endif
   
End

Public Sub teLetter_Menu()
   
   Paragraph_At = teLetter.ToParagraph(teLetter.pos)
   character_at = teLetter.ToIndex(teLetter.pos)
   If Clipboard.type = Clipboard.Image Then
      mnuLetter_PasteImage.Enabled = True
      mnuLetter_Paste.Enabled = False
   Else
      mnuLetter_PasteImage.Enabled = False
      mnuLetter_Paste.Enabled = True
   Endif
   mnuLetter.Popup()
   
End

Public Sub mnuLetter_Click()
   
   Select Case Last.tag
      Case "paste image"
         Insert_Picture("clipboard")
      Case "paste"
         If Clipboard.type = Clipboard.Text Then
            teLetter.Insert(Clipboard.Text)
         End If
   End Select
   
End

Public Sub Insert_Picture(sSource As String)
   '--------------------------------------------------
   'Inserts a picture into the form. This can come
   'from either a cut/paste/import or from the
   'draw
   'Creates an event observer.
   
   'this will bug out if user clicks save in  Fdraw
   'without selecting image
   '--------------------------------------------------
   Dim NewImage As Image
   Dim pic As Picture
   Dim sPicPath As String
   Dim tempfile As String
   Dim h As Integer
   Dim w As Integer

   tempFile = Temp() & ".png"
   Select Case sSource
      Case "clipboard"
         '----------------------------------------------------------
         'If source of paste is a clipboard, validate it it an image
         '----------------------------------------------------------
         If Clipboard.type = Clipboard.Image Then
            If Not InStr(teLetter.richtext, ".pic") Then
               teLetter.Insert(".pic")
            End If
            NewImage = Clipboard.Paste()
            NewImage.Save(Tempfile)
            Shell "convert " & Tempfile & " -bordercolor White -border 5x5 " & Tempfile Wait
            pic = Picture[Tempfile]
            w = Abs(pic.width * 2 / 3)
            h = pic.Height
            w = pic.width
            sPicPath = "<TABLE WIDTH=100% CELLPADDING=4 CELLSPACING=3 ><TR><TD WIDTH=100%><P><IMG "
            sPicPath &= "src=\"" & Tempfile & "\" "
            sPicPath &= " NAME=\"graphics\" ALIGN=\"LEFT\" WIDTH=\"" & Str(W) & "\" HEIGHT=\"" & Str(H) & "\" BORDER=\"0\"></TR></TD></TABLE><BR><BR>"
            teLetter.richtext = Replace$(teLetter.richtext, ".pic", sPicPath)
            Print teLetter.RichText
         End If
   End Select
   
End

Public Sub mnuInclusions_Click()
   '------------------------------------------------------------------
   'User has Selected an option from the menu over the inclusions list
   '------------------------------------------------------------------
   
   lvwInclusions_EditArea.MoveCurrent()
   Select Case Last.tag
      Case "remove inclusion"
         Inclusions_EditArea.Remove(lvwInclusions_EditArea.Item.key)
         lvwInclusions_EditArea_Refresh(Inclusions_EditArea)
      Case "remove all"
         Inclusions_EditArea = New Collection
         lvwInclusions_EditArea.Clear()
   End Select
   
End

Public Sub teLetter_Drop()
   '-----------------------------------------------------------
   'Accept drop only at moment from known image source
   'Inserts this picture at the current cursor position
   ' FIXME fixing eg use mime type To know data - type
   'and insert appropriately eg   "text/x-moz-url"
   '----------------------------------------------------------
   
   Dim pic As New Picture
   
   Return      'DO NOT REMOVE THIS - THERE IS NO CODE TO SAVE THE IMAGES IN THE LETTERS
   Try pic = pic.Load(Drag.Source.Tag!fname)
   If Error Then
      message.info("Sorry mime type" & Drag.format & " not implemented.\n\nYou could speak to the developer's if this is important to you.")
      Return
   Endif
   Clipboard.Copy(pic.image)
   If Not InStr(teLetter.richtext, ".pic") Then teLetter.Insert(".pic") 'inserts pic at current cursor position
   Insert_Picture("clipboard")
   
End

Public Function SendAsHL7() As String
   '--------------------------------------------------------------
   
   Dim hl7 As New CHL7Message_REF_I12
   Dim ReceivingFacility As New CHL7Datatype_HD
   Dim ConsultingProvider As Collection
   Dim ReferredtoProvider As New Collection
   Dim PrimaryCareProvider As Collection
   Dim ReferralLetterText As String
   Dim TempFile As File 'just for testing
   Dim AttachmentsArray As New String[]
   Dim ReferralStatus As String
   Dim ReferralPriority As String
   Dim ReferralType As String
   Dim ReferralDisposition As String
   Dim ReferralReason As String
   Dim s As String
   
   Select Case cmbPriorityTypes.Current.Text
      Case "Routine"
         ReferralPriority = "R" 'With highest priority = 'S' As soon as possible = 'A' Urgent = 'U' Early = 'E' Routine = 'R'
      Case "Semi-Urgent"
         ReferralPriority = "E" 'With highest priority = 'S' As soon as possible = 'A' Urgent = 'U' Early = 'E' Routine = 'R'
      Case "Urgent"
         ReferralPriority = "A" 'With highest priority = 'S' As soon as possible = 'A' Urgent = 'U' Early = 'E' Routine = 'R'
   End Select
   
   Select Case cmbReferralTypes.Current.Text
      Case "opinion"
         ReferralReason = "S" 'Second opinion = ‘S’ Patient preference = ‘P’ Provider ordered = ‘O’ Work load = ‘W’
         ReferralType = "GRF" 'General referral = ‘GRF’Discharge referral = ‘DRF’Shared care update = ‘SCU’Notification = ‘NOT’Shared EHR update = ‘SEU’Decision support system update =‘DSU’
         
         ReferralStatus = "P" 'Accepted = 'A' Pending = 'P' Rejected = 'R' Expired = 'E'
         ReferralDisposition = "SO" 'Send written report = ‘WR’ Return patient after evaluation =‘RP’Assume management = ‘AM’Second opinion = ‘SO’ NOTE: ‘SO’ = Provide second, third Or other opinion. Additional Australian table values: Discharge summary = ‘DS’ Update care plan = ‘UCP’ Update health record = ‘UHR’ Case conference = ‘CC’ Notification – no further action =‘FI
         
      Case "Opinion and Management"
         ReferralReason = "S" 'Second opinion = ‘S’ Patient preference = ‘P’ Provider ordered = ‘O’ Work load = ‘W’
         ReferralType = "GRF" 'General referral = ‘GRF’Discharge referral = ‘DRF’Shared care update = ‘SCU’Notification = ‘NOT’Shared EHR update = ‘SEU’Decision support system update =‘DSU’
         
         ReferralStatus = "P" 'Accepted = 'A' Pending = 'P' Rejected = 'R' Expired = 'E'
         ReferralDisposition = "AM" 'Send written report = ‘WR’ Return patient after evaluation =‘RP’Assume management = ‘AM’Second opinion = ‘SO’ NOTE: ‘SO’ = Provide second, third Or other opinion. Additional Australian table values: Discharge summary = ‘DS’ Update care plan = ‘UCP’ Update health record = ‘UHR’ Case conference = ‘CC’ Notification – no further action =‘FI
         
      Case "Indefinate Referral"
         
         ReferralReason = "S"
         ReferralType = "GRF" 'General referral = ‘GRF’Discharge referral = ‘DRF’Shared care update = ‘SCU’Notification = ‘NOT’Shared EHR update = ‘SEU’Decision support system update =‘DSU’
         
         ReferralStatus = "P" 'Accepted = 'A' Pending = 'P' Rejected = 'R' Expired = 'E'
         ReferralDisposition = "AM" 'Send written report = ‘WR’ Return patient after evaluation =‘RP’Assume management = ‘AM’Second opinion = ‘SO’ NOTE: ‘SO’ = Provide second, third Or other opinion. Additional Australian table values: Discharge summary = ‘DS’ Update care plan = ‘UCP’ Update health record = ‘UHR’ Case conference = ‘CC’ Notification – no further action =‘FI
         
      Case "Imediate Treatment"
         ReferralReason = "S"
         ReferralType = "GRF" 'General referral = ‘GRF’Discharge referral = ‘DRF’Shared care update = ‘SCU’Notification = ‘NOT’Shared EHR update = ‘SEU’Decision support system update =‘DSU’
         ReferralStatus = "P" 'Accepted = 'A' Pending = 'P' Rejected = 'R' Expired = 'E'
         ReferralDisposition = "AM" 'Send written report = ‘WR’ Return patient after evaluation =‘RP’Assume management = ‘AM’Second opinion = ‘SO’ NOTE: ‘SO’ = Provide second, third Or other opinion. Additional Australian table values: Discharge summary = ‘DS’ Update care plan = ‘UCP’ Update health record = ‘UHR’ Case conference = ‘CC’ Notification – no further action =‘FI
         
      Case "Admission"
         
         ReferralReason = "S"
         ReferralType = "GRF" 'General referral = ‘GRF’Discharge referral = ‘DRF’Shared care update = ‘SCU’Notification = ‘NOT’Shared EHR update = ‘SEU’Decision support system update =‘DSU’
         ReferralStatus = "P" 'Accepted = 'A' Pending = 'P' Rejected = 'R' Expired = 'E'
         ReferralDisposition = "AM" 'Send written report = ‘WR’ Return patient after evaluation =‘RP’Assume management = ‘AM’Second opinion = ‘SO’ NOTE: ‘SO’ = Provide second, third Or other opinion. Additional Australian table values: Discharge summary = ‘DS’ Update care plan = ‘UCP’ Update health record = ‘UHR’ Case conference = ‘CC’ Notification – no further action =‘FI
         
      Case "Request for investigation"
         
         ReferralReason = "O"
         ReferralType = "GRF" 'General referral = ‘GRF’Discharge referral = ‘DRF’Shared care update = ‘SCU’Notification = ‘NOT’Shared EHR update = ‘SEU’Decision support system update =‘DSU’
         ReferralStatus = "P" 'Accepted = 'A' Pending = 'P' Rejected = 'R' Expired = 'E'
         ReferralDisposition = "WR" 'Send written report = ‘WR’ Return patient after evaluation =‘RP’Assume management = ‘AM’Second opinion = ‘SO’ NOTE: ‘SO’ = Provide second, third Or other opinion. Additional Australian table values: Discharge summary = ‘DS’ Update care plan = ‘UCP’ Update health record = ‘UHR’ Case conference = ‘CC’ Notification – no further action =‘FI
         
      Case "Management"
         
         ReferralType = "GRF" 'General referral = ‘GRF’Discharge referral = ‘DRF’Shared care update = ‘SCU’Notification = ‘NOT’Shared EHR update = ‘SEU’Decision support system update =‘DSU’
         ReferralStatus = "P" 'Accepted = 'A' Pending = 'P' Rejected = 'R' Expired = 'E'
         ReferralDisposition = "AM" 'Send written report = ‘WR’ Return patient after evaluation =‘RP’Assume management = ‘AM’Second opinion = ‘SO’ NOTE: ‘SO’ = Provide second, third Or other opinion. Additional Australian table values: Discharge summary = ‘DS’ Update care plan = ‘UCP’ Update health record = ‘UHR’ Case conference = ‘CC’ Notification – no further action =‘FI
         
      Case "Feedback"
         
         'ObservationResultStatus = "F"
         ReferralStatus = "A" 'Accepted = 'A' Pending = 'P' Rejected = 'R' Expired = 'E'
         ReferralDisposition = "UCP" 'Send written report = ‘WR’ Return patient after evaluation =‘RP’Assume management = ‘AM’Second opinion = ‘SO’ NOTE: ‘SO’ = Provide second, third Or other opinion. Additional Australian table values: Discharge summary = ‘DS’ Update care plan = ‘UCP’ Update health record = ‘UHR’ Case conference = ‘CC’ Notification – no further action =‘FI
         
      Case Else
         Error.Raise(cmbReferralTypes.Current.Text & " is not supported")
         
   End Select
   
   ReferredtoProvider = New Collection
   ReferredtoProvider!name = txtName.Text
   ReferredtoProvider!organisation = txtOrganisation.Text
   ReferredtoProvider!branch = txtBranch.Text
   ReferredtoProvider!street1 = txtStreet1.Text
   ReferredtoProvider!street2 = txtStreet2.Text
   ReferredtoProvider!town = txtSuburb.Text
   ReferredtoProvider!postcode = txtPostcode.Text
   ReferredtoProvider!fk_person = fk_person
   ReferredtoProvider!comms = comms
   ReferredtoProvider!state = stored_state
   If Not IsNull(PersonWritingTo) Then
      ReferredtoProvider!provider_number = PersonWritingTo!provider_number
      ReferredtoProvider!firstname = PersonWritingTo!firstname
      ReferredtoProvider!surname = PersonWritingTo!surname
      ReferredtoProvider!title = PersonWritingTo!title
   Endif
   AttachmentsArray.Add(GetLetterText(ReferredtoProvider))
   hl7.createHL7Message_REF_I12(ReferredtoProvider, currentconsult!patient, currentconsult!comms, AttachmentsArray, ReferralDisposition, ReferralReason, ReferralPriority, ReferralType, ReferralStatus)
   Log.DataMsg("HL7 generated in " & hl7.fpath)
   s = File.Load(hl7.fpath)
   modFiles.Put("hl7_outgoing_directory", hl7.fname, hl7.fpath)
   Kill hl7.fpath
   Return s
   
End

Private Function GetLetterText(ReferredtoProvider As Collection) As String
   
   Dim ProviderInformation As Collection
   Dim TempLetter As String
   Dim StreetAddress As String
   
   ProviderInformation = modDBConnect.currentUser ' reads the information of the current user out of the DB
   If ProviderInformation["street2"] <> "" Then
      StreetAddress = ProviderInformation["street1"] & "\n" & ProviderInformation["street2"]
   Else
      StreetAddress = ProviderInformation["street1"]
   Endif
   ' Adressblock of the sending provider
   TempLetter = ProviderInformation["surname"] & ProviderInformation["firstname"] & ProviderInformation["title"] & "\n" &
      StreetAddress & "\n" & ProviderInformation["town"] & ProviderInformation["postcode"] & "\n" &
      ProviderInformation["state"] & "\n\n" &
      "__________________________________________________________________________________" & "\n\n" &
      txtReferralDate.text & "\n\n" &
      "Dear " & ReferredtoProvider["title"] & " " & ReferredtoProvider["surname"] & "\n\n" &
      teLetter.Text & "\n\n" & "Kind Regards " & ProviderInformation["surname"] & ProviderInformation["firstname"]
   
   Return TempLetter
   
End

Public Sub HSplitEditArea_Communications_Resize()
   
   If columnview1.Visible Then
      columnview1.width = txtCategory.Width - 5
   Endif
   Form_Copy_To.txtCopyTo.width = HBox_ReferralDate.width - lblReferralDate.Width
   
End

Public Sub Vsplit_Referrals_Resize()
   
   If columnview1.Visible Then
      columnview1.top = ReferenceHboxForTopColumnview.top + ReferenceHboxForTopColumnview.Height
   End If
   
End

Public Sub Form_Resize()
   'move the columnview to the appropriate position
   
   Vsplit_Referrals_Resize()
   HSplitEditArea_Communications_Resize()
   HSplit_Referrals_This_Consult_Resize()
   
End

Public Sub HSplit_Referrals_This_Consult_Resize()
   
   lblReferralsThisConsultation.Width = HSplit_Letter_Include.children[0].width
   lblDocumentsPrinted.width = HSplit_Letter_Include.children[1].width
   
End

Static Public Sub UnitTest(form_main As FMain)
   
   Dim form_referrals As FReferrals
   Dim fake_referral As New Collection
   
   form_main.btnSection_Clinical_Click()
   form_main.pnlClinical.Patients_Find(2)
   form_referrals = form_main.pnlClinical.Editor_ShowPage("Referrals", "Referral")
   fake_referral!date_referral = Val("12/5/2013")
   fake_referral!firstname = "Bruce"
   fake_referral!surname = "Bonebreaker"
   fake_referral!wholename = "Mr. Bruce Bonebreaker"
   fake_referral!occupation = "orthopaedic surgeon"
   fake_referral!tag = "test letter"
   fake_referral!title = "Mr"
   fake_referral!fk_employee = 2
   fake_referral!fk_person = 4
   fake_referral!branch = "HEAD OFFICE"
   fake_referral!fk_branch = 2
   fake_referral!organisation = "Meataxe Surgical Services"
   fake_referral!fk_organisation = 2
   fake_referral!fk_address = 4
   fake_referral!street1 = "1 Blood Way"
   fake_referral!fk_town = 3535
   fake_referral!town = "SEDDON"
   fake_referral!postcode = "3011"
   fake_referral!state = "VIC"
   fake_referral!provider_number = "246564AK"
   fake_referral!body_html = "<p>This is a test referral for HL7 generation.</p>"
   fake_referral!include_careplan = False
   fake_referral!include_healthsummary = False
   fake_referral!type = "Opinion and Management"
   form_referrals.Referral_Edit(fake_referral)
   form_referrals.chkSendAsHL7.Value = form_referrals.chkSendAsHL7.True
   form_referrals.Save(True, True)
   
End
