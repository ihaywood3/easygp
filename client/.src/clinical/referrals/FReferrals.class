' Gambas class file
' Copyright (C) 2008-2010 Dr. Richard Terry
' Gui screen designs in IDE and at runtime Copyright (C) 2008-2010 Dr. Richard Terry
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
' PURPOSE         The EasyGP letter writer
' HOW THIS WORKS  You can search for persons or organisations via several methods
'                 Category       e.g surgeons
'                 Occupation     e.g surgeon
'                 Name           e.g Smith,p
'                 Organisation   e.g Newcastle cardiac services
'                 Branch         e.g of an organisation
'                 Typing in the appropriate textbox will popup pick lists in columnview1
' BACKEND TABLES  See schema clin_referrals
'                 Each letter must have a 'tag' which is what is displayed in the
'                 referrals list, for example referral to a cardiologist the tag
'                 might be 'Review of Aortic Stenosis' or 'Investigation of chest pain'
' NOTE            Contact data must be present in the Contacts database
'                 and cannot be entered via this screen
' TODO            Decide if using LaTex rather than html
'                 Fix Referral_LetterHTML_Construct() to use cTemplate
'                 Think about and implement user defined shortcuts in teLetter
'                 Allow drag n drop of graph/images into the letter
'                 Fix EditAreaTextBox_GotFocus() code
'                 Implement putting dragged graph into pdf and printing.
'                 type in postcode > provider specialist of type near postcode
'                 Save record of inclusions, put back inclusions when editing
'                 Add audit trail to referrals/deletion of referral etc.
' KOWN BUGS       Please report to rterry@internode.on.net or rterry@pacific.net.au
'                 occupation of employee not showing up in the view.
'----------------------------------------------------------------------------------

Private bEmbedded As Boolean                                'True if this form is embedded e.g in the inbox
Private bEditing As Boolean                                 'True if editing an existing referral written this consultation
Private bExit As Boolean                                    'Used to prevent re-entry into subroutines
Private PersonWritingTo As Collection                       'Person for whom the letter is intended
Private specialists As Collection
Private specialist As Collection 
Private Branches As Collection
Private branch As Collection 
Private Comms As Collection
Private comm As Collection 
Private Inclusions As Collection                            'Documents/graphs etc, whatever is included in letter
Private currentconsult As CConsult                          'set by calling form e.g Fclinical or FActionDocument
Private referral_types As Collection                        'eg Management, indefinate etc, 
Private referral_type As Collection 
Private fk_person As Integer                                'key for person the referral letter is to see Contacts.data_persons
Private fk_type As Integer                                  'key for the type of referral letter      see clin_referral.lu_type
Private fk_branch As Integer                                'can be null or 0, but if not key to          Contacts.data_branches
Private fk_organisation As Integer                          'can be null or 0, nut if not key to          Contacts.data_organisations
Private fk_pasthistory As Integer                           'past history item the letter is linked to if 0 = general notes
Private cProgressNote_Section As Integer                    'either past history or general at moment
Private fk_progressnote As Integer                          'the progress note linked to this referral
Private pk_referral As Integer                              'key to clin_referrals.referrals
Private Addresses As Collection
Private address As Collection 
Private FHtml_Viewer As FHtmlViewer
Private obs As Observer
Private pk_deleted_referral As Integer                      'if not 0 then it is the last referral written which was deleted

Public Sub set_embedded(flag As Boolean)
   '--------------------------------------------------
   'If this form is embeded from another form set flag
   '--------------------------------------------------
   
   bEmbedded = flag
   
End

Public Sub Init(cons As CConsult)
   '---------------------------------------------------------
   'Do all the form initialisation stuff like adding stuff to 
   'combo's, setting numbers of columns in lists
   '---------------------------------------------------------

   currentconsult = Cons                       'set current consult
   cvwLetters.Clear()                          'clear the list of letters this consult
   cvwLetters.Columns.Count = 4                
   cvwLetters.Columns[0].width = 80            'date
   cvwLetters.Columns[1].width = 120           'Who to
   cvwLetters.Columns[2].width = 150           'type of referral
   cvwLetters.Columns[3].width = 200           'referral tag
   referral_types = modReferralsDBI.Referral_Get_Types()
   modUtil.LoadCombo(cmbReferralTypes, referral_types, "type")
   lblmeasure.text = " Provider Category "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblmeasure)
   lblSpacerLeftOfButtons.width = lblmeasure.width
   cvwPersonContacts.Columns.count = 2
   Try Settings_Load()                          'load settings for this form
   FHtml_Viewer = New FHtmlViewer(VBox_Preview) 'to preview the letter
   With FHtml_Viewer
      .tbWebBrowserBack.Visible = False   
      .tbWebBrowserPrint.Visible = False         'don't allow printing before save
   End With
   Obs = New Observer(FHtml_Viewer.tbWebBrowserClose) As "tbPreview_Close"
   Reload()
   
End


Public Sub mnuHealthIssues_Click()
   '---------------------------------------------------
   'User wants to link a request form to a health issue
   'The menu tag = the pk_pasthistory
   '---------------------------------------------------
   
   Select Case Last.tag
      Case "general notes", "remove link"
         txtHealthIssue.text = "General Notes"
         cProgressNote_Section = const.cSection_GeneralNotes
         fk_pasthistory = 0
      Case Else
         txtHealthIssue.text = currentconsult!past_history[Last.tag]!description
         fk_pasthistory = Last.tag
         cProgressNote_Section = const.cSection_Referrals
   End Select
   
End

Public Sub tbPreview_Close_Click()
   '-------------------------------------------------------------------------------
   'this observer overides the click event on the close button on the embedded form
   'Hide the preview form and re-show the referral letter gui
   '-------------------------------------------------------------------------------  
   
   Stop Event
   Vbox_Preview.Visible = False  
   VSplit_Main.Visible = True
   
End

Public Sub Save()
   '--------------------------------------------------------------
   'Save the current edit area recall and updates the recalls list
   'Need this amount of info to save
   'For table clin_referrals.referrals
   '  pk 
   '  fk_consult        Not Null key To the main clin_consult.consult table
   '  fk_person         If Not Null key To contacts.data_persons table ie person referred To
   '  fk_organisation   If Not Null key To contacts.data_organisations table ie org anisation referred To
   '  fk_branch         key To contacts.data_branches table ie branch Of organisation
   '  fk_type           key To lu_referral_type table ie type Of referral e.g opinion Or management
   '  letter_html       Not Null Html which Is the letter itself
   '  tag text          A description Of the letter eg 'heart failure'
   '  deleted           Default False,
   '  body_html         body of the letter = text minus headings etc
   '--------------------------------------------------------------
   
   Dim referral As New Collection
   Dim sHtml As String
   
   If Not Valid_Referral() Then Return
   ' -----------------------------------------------------------
   ' Now load a fresh collection with data from the widgets
   ' -----------------------------------------------------------
   If pk_referral <> -1 Then
      referral!pk_referral = pk_referral
   End If
   referral!fk_person = fk_person
   referral!tag = Trim(txtTag.text)
   If fk_branch <> 0 Then
      referral!fk_branch = fk_branch
   End If
   If fk_organisation <> 0 Then
      referral!fk_branch = fk_branch
   End If
   If chkIncludeCarePlan.value = True Then
      referral!include_careplan = True
   Else
      referral!include_careplan = False   
   End If  
   If chkIncludehealthSummary.value = True Then
      referral!include_healthsummary = True
   Else
      referral!include_healthsummary = False 
   End If  
   
   referral!body_html = Referral_BodyHTML_Construct()
   referral!letter_html = Referral_LetterHTML_Construct()
   referral!fk_type = referral_types[cmbReferralTypes.index + 1]!pk
   referral!fk_type = fk_type                                             'e.g opinion and management
   ' referral!fk_pasthistory = fk_pasthistory '0 = general notes > 0 = key to clin_history.past_history table
   '-------------------------------------------------
   'Construct the text to embed in the progress notes
   '-------------------------------------------------
   sHtml = "Referral Letter to " & txtName.text 
   sHtml &= " Re: " & txtTag.text & ":"
   sHtml &= "<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>"
   
   "<COL WIDTH=80%>"
   "<COL WIDTH=20%>"
   "<TR VALIGN=TOP>"
   
   "<TD WIDTH=80%>"
   "<HR><P><small><FONT FACE='Times New Roman, serif'>%letterbody%"
   "</small></P><HR>"
   "</TD>"
   "<TD WIDTH=20%>"
   "<P><BR>"
   "</P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   shtml = Replace$(shtml, "%letterbody%", referral!body_html)
   modDBConnect.BeginTrans()
      referral!fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, shtml, cProgressNote_Section, fk_progressnote, txtHealthIssue.text, fk_pasthistory, False)
      pk_referral = modReferralsDBI.Save(currentconsult, pk_referral, referral)   'Save the referral letter
   modDBConnect.CommitTrans()
   If chkDoNotPrint.value = False Then
      Referral_Print(referral)
   End If
   
   Reload()                                                  'Default to a new letter
   FClinical.Refresh_AllPreviousNotes()
   
End

Public Sub Referral_Print(referral As Collection)
   '-----------------------------------------------
   'temporary work-around, convert to pdf and print
   '-----------------------------------------------
   
   Dim inclusion As Collection
   
   modPrinting.PrintHtml(referral!letter_html, const.Paper_Plain)
   If chkIncludehealthSummary.value = True Then
      modPrinting.PrintHtml(modProgressNotes.Health_Summary_Construct_html(currentconsult), const.Paper_Plain)
   End If
   If chkIncludeCarePlan.value = True Then
      modPrinting.PrintHtml(modProgressNotes.Care_Plan_Construct_html(currentconsult), const.Paper_Plain)
   End If  
   '------------------------------------------------------------------------------------
   'Now print any included documents which were dragged'n dropped to the inclusions list
   'FIXME: just first go, need to take into account document type in more thorough way
   '------------------------------------------------------------------------------------
   For Each inclusion In Inclusions
      If Not IsNull(inclusion!document!html) Then
         modPrinting.PrintHtml(inclusion!document!html, const.Paper_Plain)
      Endif
      If Right(Lower(inclusion!document!source_file), 3) = "pdf" Then
         modPrinting.Print_PDF(modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/documents/") &/ inclusion!document!source_file)
      Endif
   Next
   
End

Public Sub Reload()
   
   currentconsult.Refresh("referrals_written")                            'Delete key = force a refresh
   FClinical.Refresh_Section(const.cSection_Referrals)                    'Refresh lists on main screen FClinical
   Referrals_This_consult_Show()                                          'Update list under edit area
   Referral_New()                                                         'clear for next condition
   txtName.SetFocus()
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   '--------------------------------------------------
   'Adds or removes padding around edit area and lists
   'to indicate if data is changed and unsaved
   '--------------------------------------------------
   
   If flag Then
      VBox_Letters.Padding = 1
      VBox_Letters.Background = Color.red
      tbSave.Foreground = Color.red
      tbSave.enabled = True 
      tbPreview.Enabled = True   
   Else
      VBox_Letters.Padding = 0
      VBox_Letters.Background = Color.white
      tbSave.Foreground = Color.Black
      tbSave.Enabled = False  
      tbPreview.Enabled = False  
   End If
   
End

Public Sub LetterWriter_Click()
   '---------------------------------------------
   'User has clicked on one of the editor buttons
   '---------------------------------------------
   
   Select Case Last.tag
      Case "erase"
         teLetter.Clear()
      Case "bold"
         teLetter.Format.Font.Bold = Last.Value
      Case "italic"
         teLetter.Format.Font.Italic = Last.Value
      Case "underline"
         teLetter.Format.Font.Underline = Last.Value
      Case "strikeout"
         teLetter.Format.Font.StrikeOut = Last.Value
      Case "align left"
         teLetter.Format.Alignment = Align.Left
      Case "align centre"
         teLetter.Format.Alignment = Align.Center
      Case "align right"
         teLetter.Format.Alignment = Align.Right
      Case "clear font attributes"
         ' Editor_Fonts_Reset()
      Case "dot point"
         
   End Select
   
End

Public Sub Editor_Fonts_Reset()
   '------------------------------------------------------------
   'Clears any font attributes ie saves clicking muliple buttons
   '------------------------------------------------------------
   
   Object.Lock(btnBold)
   Object.Lock(btnItalic)
   Object.Lock(btnUnderline)
   Object.Lock(btnAlignLeft)
   Object.Lock(btnAlignCenter)
   Object.Lock(btnAlignRight)
   Object.Lock(btnAlignJustify)
   Object.Lock(SpinBox1)
   Object.Lock(btnColour)
   btnBold.Value = False
   btnItalic.Value = False
   btnUnderline.Value = False
   btnAlignLeft.value = False
   btnAlignCenter.value = False
   btnAlignJustify.Value = False 
   btnAlignRight.value = False
   'FIXME put in the default font
   'put in black as default colour
   teLetter.Format.Font.Bold = False
   teLetter.Format.Font.Italic = False
   teLetter.Format.Font.Underline = False
   teLetter.Format.Font.StrikeOut = False
   teLetter.Format.Alignment = Align.Left
   btnColour.Color = Color.Black
   teLetter.Format.Color = Color.Black
   Object.UnLock(btnBold)
   Object.UnLock(btnItalic)
   Object.UnLock(btnUnderline)
   Object.UnLock(btnAlignLeft)
   Object.UnLock(btnAlignCenter)
   Object.UnLock(btnAlignRight)
   Object.UnLock(btnAlignJustify)
   Object.UnLock(SpinBox1)
   Object.UnLock(btnColour)
   
End

Public Sub btnColour_Change()
   
   teLetter.Format.Color = btnColour.Color
   
End

Public Sub SpinBox1_Change()
   
   teLetter.Format.Font.Size = Last.Value
   teLetter.SetFocus
   
End

Public Function Referral_LetterHTML_Construct() As String
   '-----------------------------------------------------------
   'Construct Html of the referral letter, FIX ME USE cTemplate
   '-----------------------------------------------------------  

   Dim sType As String
   Dim sLetterHtml As String
   Dim charpos As Integer
   Dim sPatient As String = currentconsult!patient!firstname & " " & currentconsult!patient!surname & " " & currentconsult!patient!street 
   
   spatient &= " " & currentconsult!patient!suburb & currentconsult!patient!postcode & "DOB:" & Format(currentconsult!patient!birthdate, "dd/mm/yyyy")
   sPatient &= " Aged: " & currentconsult!patient!age 
   sLetterHtml = "<html><head><meta name='qrichtext' content='1' /></head><body>"
   "<TABLE WIDTH=100% BORDER=0 CELLPADDING=4 CELLSPACING=3 >"
   "<COL WIDTH=128*>"
   "<COL WIDTH=128*>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=50%>"
   "<P>%practitioner_name<BR>"
   "%provider_no</P>"
   "</TD>"
   "<TD WIDTH=50%>"
   "<P ALIGN=RIGHT>%clinic.name<BR>"
   "%clinic.branch<BR>"
   "%clinic.street<BR>"
   "%clinic.suburb<BR></P>"
   "</TD>"
   "</TR>"
   "</TABLE>"
   "<hr style = 'width: 100%; height: 2px;' >"
   "<P>%referred_to%<BR>" 
   "%organisation%"
   "%branch%"
   "%address%"
   "%suburb%"
   "%phone%"
   "%fax%</P>"
   "<p>Dear %firstname%,</p>"
   "<p></p>"
   "<p>Re:  %patient%</p>"
   "<p></p>"
   "<p>TYPE OF REFERRAL: %type%</p>"
   "<p></p>"
   "<p>%body%</p>"
   "<p><BR></p>"
   "<p>Yours Sincerely</p>"
   "<p><BR><BR></p>"
   "<p>%user%</p>"
   
   "</body></html>"
   
   sLetterHtml = Replace(sLetterHtml, "%practitioner_name", modDBConnect.currentUser!title & " " & modDBConnect.currentuser!wholename)
   sLetterHtml = Replace(sLetterHtml, "%provider_no", modDBConnect.currentUser!provider_number)
   sLetterHtml = Replace(sLetterHtml, "%clinic.name", modDBConnect.currentUser!organisation) 
   sLetterHtml = Replace(sLetterHtml, "%clinic.name", modDBConnect.currentUser!organisation) 
   sLetterHtml = Replace(sLetterHtml, "%clinic.branch", modDBConnect.currentUser!branch) 
   sLetterHtml = Replace(sLetterHtml, "%clinic.street", modDBConnect.currentUser!street) 
   sLetterHtml = Replace(sLetterHtml, "%clinic.suburb", modDBConnect.currentUser!town & " " & modDBConnect.currentuser!postcode)
   
   sLetterHtml = Replace$(sLetterHtml, "%referred_to%", txtName.text)
   If txtOrganisation.text <> "" Then 
      sLetterHtml = Replace$(sLetterHtml, "%organisation%", txtOrganisation.text & "<BR>")
   Else
      sLetterHtml = Replace$(sLetterHtml, "%organisation%", "")
   End If
   If txtBranch.text <> "" Then
      sLetterHtml = Replace$(sLetterHtml, "%branch%", txtBranch.text & "<BR>")
   Else
      sLetterHtml = Replace$(sLetterHtml, "%branch%", "")
   End If
   sLetterHtml = Replace$(sLetterHtml, "%address%", txtStreet1.text & "<BR>")
   sLetterHtml = Replace$(sLetterHtml, "%suburb%", txtSuburb.text & " " & txtPostcode.text & "<BR>")
   
   If Not IsNull(PersonWritingTo) Then
      sLetterHtml = Replace$(sLetterHtml, "%firstname%", PersonWritingTo!firstname)
   End If   
   If cvwPersonContacts.count Then
      For Each comm In comms
         If comm!fk_type = const.CommModalityPhone Then
            sLetterHtml = Replace$(sLetterHtml, "%phone%", comm!value)
         Endif
         If comm!fk_type = const.CommModalityFax Then
            sLetterHtml = Replace$(sLetterHtml, "%fax%", comm!value)
         Endif
      Next
   Endif
   sLetterHtml = Replace$(sLetterHtml, "%phone%", "")
   sLetterHtml = Replace$(sLetterHtml, "%fax%", "")
   sLetterHtml = Replace$(sLetterHtml, "%patient%", spatient)
   sLetterHtml = Replace$(sLetterHtml, "%type%", cmbReferralTypes.Text)
   sLetterHtml = Replace$(sLetterHtml, "%body%", Referral_BodyHTML_Construct())
   sLetterHtml = Replace$(sLetterHtml, "%user%", modDBConnect.currentUser!wholename)
   'Get rid of potentially empty strings
   sLetterHtml = Replace$(sLetterHtml, "%address%", "")
   sLetterHtml = Replace$(sLetterHtml, "%suburb%", "")
   Return sLetterHtml

End

Public Function Referral_BodyHTML_Construct() As String
   '-------------------------------------------------------------------------------------------
   'extracts just the html for the body of the  letter
   'IAN; the qt control has changed alot in how it handles html since I first implemented this
   'this routine needs fixing. Its originally intent was to chop of everything bar the text
   'of the letter. for some reason all blank lines in between paragraphs not being kept.
   '--------------------------------------------------------------------------------------------
   
   Dim sBodyHTML As String
   Dim charpos As Integer
   
   charpos = InStr(Lower(teLetter.RichText), "<p")
   sBodyHTML = Right(teLetter.RichText, Len(teLetter.RichText) - charpos + 1)
   charpos = InStr(sBodyHTML, "</body>")
   sBodyHTML = Left(sBodyHTML, charpos - 1)
   sBodyHTML = Replace(sBodyHTML, "</p>", "</p><BR>")
   Return Trim(sBodyHTML)
   
End

Public Sub Referral_Preview()
   '--------------------------------------------------------------------
   'Previews a referral letter if content is valid. If pk_referral = -1
   'then this preview is of a referral not yet saved, in the edit area
   'otherwise, the pk_referral was set when user clicked on a row of the
   'letters written this consult list.
   '--------------------------------------------------------------------
   
   Dim sLetterHtml As String
   Dim bValidContent As Boolean
   Dim filename As String
   
   If VBox_Letters.Enabled = True Then           'this will be with new referral or editing a referral
      If Not Valid_Referral() Then Return
      FHtml_Viewer.WebView1.html = Referral_LetterHTML_Construct()
   Else                                           'otherwise previewing one written during consultation
     FHtml_Viewer.WebView1.html = currentconsult!referrals_written[pk_referral]!letter_html
   End If 
   VSplit_Main.Visible = False
   Vbox_Preview.Visible = True
   
   'FHtml_Viewer.SetHtmlFileName(filename)
   
End

Public Function Valid_Referral() As Boolean
   '-------------------------------------------------------------
   'PURPOSE    :Checks that there is adequate content in a letter
   'RETUNRS    :False if inadequate, true if adequate
   '           :Minimum = fk_person and or fk_branch
   '                      fk_type
   '                      tag = description of letter
   '                      text of letter
   '-------------------------------------------------------------
   
   Dim sMsg As String 
   '-------------------------------------------
   'Firstly, does letter have valid recipient?
   '-------------------------------------------
   If fk_person = 0 Then 
      If fk_branch = 0 Then 
         If Trim(txtName.text) <> "" Then
            sMsg = "The person you have addressed the letter to '" & Trim(txtName.text) & "' is not "
            sMsg &= "in the contacts database.\n\nCurrently you may not enter new contacts details in this "
            sMsg &= "screen, though this may change in future releases.\n\nPlease enter this persons details "
            sMsg &= "either as an employee of a company, or as a person in their own right, in the contacts section of the program "
            sMsg &= "and try again, selecting their name from the popup list."
            Message.Info(sMsg)
            txtName.SetFocus()
         Else
            If Trim(txtOrganisation.text) <> "" Then
               sMsg = "The organisation or branch you have typed in does not exist in the contacts database.\n\n"
               sMsg &= "Currently you may not enter new contacts details in this "
               sMsg &= "screen, though this may change in future releases.\n\nPlease enter this companies details via the contacts "
               sMsg &= "section of the program and try again."
               Message.Info(sMsg) 
               txtOrganisation.SetFocus() 
            Endif
         End If
         Return False
      End If
   End If
   If fk_branch = 0 Then
      If fk_person = 0 Then
         If Message.Question("Are you sure you don't want to send this letter to someone, besides an organisation?", "Yes", "No") = 2 Then Return
      Endif
   Endif
   If fk_type = 0 Then
      cmbReferralTypes.SetFocus
   End If  
   
   If Trim(txtTag.text) = "" Then
      txtTag.SetFocus
      Return False
   End If
   
   If Trim(teLetter.text) = "" Then
      teLetter.SetFocus
      Return False
   End If
   If Trim(txtHealthIssue.text) = "" Then
      Message.Info("Please select a health issue to link to this request\nor link to 'General Notes'")
      MenuButton1.SetFocus()
      Return False
   End If
   Return True
   
End  

Public Sub teLetter_Change()
   'FIXME - PUT IN SOME USER-DEFINED TEXT SHORTCUTS
   
   Dim sTExt As String
   
   If bExit Then Return
   If Len(teLetter.text) Then
      vbox_LetterText.Padding = 0
      vbox_LetterText.BackGround = Color.Default
   End If
   Object.Lock(teLetter)
   sText = teLetter.RichText  
   If InStr(sText, ".ss") Then
      sText = Replace$(sText, ".ss", "I enclose the patients summary sheet.")
      teLetter.RichText = sTExt
   End If
   
   Object.Unlock(teLetter)
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditAreaTextBox_Change()
   
   If bExit Then Return
   Select Case Last.tag
         
      Case "organisation"
         If Trim(Last.text) = "" Then
            bexit = True
            fk_organisation = 0
            fk_branch = 0
            txtOrganisation.text = ""
            txtBranch.Text = ""
            txtStreet1.Text = ""
            txtStreet2.Text = ""
            txtSuburb.text = ""
            txtPostcode.text = ""
            lvworgcontacts.Clear()
            bexit = False
         Endif
      Case "name"
         '-----------------------------------------------------
         'User deletes the name, visciously reset the edit area
         'Why, we must enforce keys for saving ie fk_person etc
         'must exist
         '------------------------------------------------------
         If Trim(txtName.text) = "" Then
            EditArea_Clear()
         End If
      Case "referral for"
         If Trim(cmbReferralTypes.text) = "" Then
            lblReferralType_Missing.Visible = True
            cmbReferralTypes.SetFocus
         End If
      Case "tag"
         If Trim(txtTag.text) = "" Then
            txtTag.SetFocus
         End If
   End Select
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditAreaTextBox_KeyRelease()
   '----------------------------------------------------------------------------
   'Search for appropriate collections of information on each key-release stroke
   '-----------------------------------------------------------------------------
   
   If bExit Then Return
   
   Select Case Last.tag
      Case "category" 
         Organisation_By_Category_Get()   'only organisation, search on occupation for person
      Case "occupation"
         Person_By_Occupation_Get
      Case "name"
         Person_Get()
      Case "organisation"
         Organisation_Get()  
   End Select
   
End

Public Sub EditArea_Clear()
   '-----------------------------------------
   'Clears the textboxes etc in the edit area
   'needs cleverer code
   '-----------------------------------------
   
   bExit = True
   '---------------
   'Clear textboxes
   '---------------
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea)
   teLetter.text = "" 
   '------------------------------------
   'Remove labels which could be showing
   '------------------------------------
   lblReferralType_Missing.Visible = False
   lblLetter_Missing.Visible = False
   '-----------
   'Clear lists
   '-----------
   lvworgcontacts.Clear()
   cvwPersonContacts.Clear()
   columnview1.Visible = False
   txtHealthIssue.text = "General Notes"          'otherwise users will really get the shits
   cProgressNote_Section = const.cSection_GeneralNotes
   fk_pasthistory = 0
   EditArea_Notify_DataChange(False)
   bExit = False
   modEditAreaHelpers.mnuHealthIssues_Refresh(currentconsult, mnuHealthissues)
End

Public Sub EditAreaTextBox_GotFocus()
   
   If Bexit Then Return 
   columnview1.Visible = False 
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
         
      Case "category"
         With columnview1
            .top = Last.parent.top + Last.Height + hBox_heading.height + 5
            .width = HSplitEditArea_Communications.width - lblmeasure.width 
            .left = Last.Left 
            .height = 120  'FIXME Make me smarter eg height  = that of # of items.
            .columns.count = 3
         End With 
      Case "occupation"
         With columnview1
            .top = Last.parent.top + Last.Height + hBox_heading.height + 5
            .width = txtOccupation.Width
            .left = Last.Left 
            .height = 120  'FIXME Make me smarter eg height  = that of # of items.
            .columns.count = 2
         End With 
         
      Case "name"
         With columnview1
            .top = Hbox_Provider.top + txtName.Height + hBox_heading.height + 5
         '   .width = HSplitEditArea_Communications.width - lblmeasure.width 
            .width = txtOrganisation.Width
            .height = 120
            .left = txtName.Left
         End With  
         
      Case "organisation"
         With columnview1
            .top = Last.parent.top + Last.Height + hBox_heading.height + 5
            .width = txtOrganisation.Width - 10
            .left = txtOrganisation.Left
            .height = 120
            .columns.count = 4 'branch, street, suburb
         End With  
         ' person_AddressGet()
      Case "branch"
         With columnview1
            .top = Last.parent.top + Last.Height + hBox_heading.height + 5
            .width = HSplitEditArea_Communications.width - lblmeasure.width
            .left = Last.Left
            .height = 120
            .columns.count = 2
         End With  
         If fk_branch Then
            Branch_Get()
         Endif
         
      Case "street1"
         With columnview1
            .top = Last.parent.top + Last.Height + hBox_heading.height + 5
            .width = HSplitEditArea_Communications.width - lblmeasure.width ' txtCategory.Width
            .left = Last.Left
            .height = 120
            .columns.count = 2
         End With  
         Person_Addresses_Get()
      Case "street2"
      Case "suburb"
         txtPostcode.BackGround = Color.rgb(95, 255, 175)
      Case "postcode"
   End Select
   
End

Public Sub EditAreaTextBox_LostFocus()
   
   Last.BackGround = Color.White
   If Last.tag = "suburb" Then txtPostcode.BackGround = Color.white
   
End

Public Sub EditAreaTextBox_KeyPress()
   
   If bExit Then Return
   Select Case Key.Code
      Case Key.F1
         Select Case Last.tag
            Case "tag"
         End Select
      Case Key.Down
         Select Case Last.tag
            Case "category", "organisation", "street1", "Suburb", "linkto", "name", "occupation"
               If columnview1.Visible Then
                  columnview1.MoveCurrent
                  columnview1.Item.Selected = True
                  columnview1.SetFocus()
               End If
         End Select
         
      Case Key.Return, Key.Tab
         Select Case Last.tag
               
            Case "category"
               txtOccupation.SetFocus()
            Case "occupation"
               txtName.SetFocus()
            Case "name"
               
            Case "tag"
               teLetter.SetFocus()
         End Select
         
   End Select
   
End

Public Sub Referrals_This_Consult_Show()
   '--------------------------------------
   'Updates the display in the visits list
   '--------------------------------------
   
   Dim referral As Collection 
   Dim bDataChanged As Boolean
   Dim x As Integer
   
   cvwLetters.Clear()
   For Each referral In currentconsult!referrals_written
      '-----------------------------------------------------------
      'check all the referrals
      'if this consult pk is same as any of the existing referrals
      'then they were written this consultation, add to list
      '-----------------------------------------------------------
      If currentconsult.GetPK() = referral!fk_consult Then
         x = referral!pk_referral
         cvwLetters.Add(x, 0)
         cvwletters[x][0] = Format(referral!date, "dd/mm/yyyy")
         cvwletters[x][1] = referral!provider_title & " " & referral!provider_firstname & " " & referral!provider_surname
         cvwletters[x][2] = referral!type
         cvwletters[x][3] = referral!tag
      End If
   Next
   
End

Public Sub Referral_New()
   '----------------------------------------
   'User has clicked on 'New Referral button
   '----------------------------------------
   
   EditArea_Clear()                          'clear input area and zero all keys
   chkIncludeCarePlan.value = False          'Don't include care plan
   chkIncludehealthSummary.Value = False     'Don't include summary
   lvwInclusions.Clear()                     'clear inclusions list
   Inclusions = New Collection
   PersonWritingTo = New Collection 
   '----------------------------------------
   'Finally set focus to allow input of name
   'user can of course swap to category
   'fix me the index of combo - 0 to n
   'the database table is 1-n 
   '----------------------------------------
   pk_referral = -1
   fk_organisation = 0    'used if letter to an organisation
   fk_branch = 0          'in which case it will have a branch
   fk_person = 0          'always will be used
   cmbReferralTypes.index = const.ReferralType_OpinionAndManagement - 1
   fk_type = const.ReferralType_OpinionAndManagement
   fk_progressnote = -1
   fk_pasthistory = 0                        'default to general notes
   VBox_Letters.Enabled = True   
   bEditing = False  
   txtName.SetFocus()
End

Public Sub EditAreaButtons_Click()
   
   Select Case Last.tag
      Case "help"
         FClinical.Help_Show(Application.Path &/ "help/referrals.html", "Help:Referrals", True)
      Case "insert"
         teLetter.Clear()
      Case "save"
         Save()
      Case "new referral"
         Referral_New()
      Case "preview"
         Referral_Preview()
   End Select
   
End

Public Sub Settings_Save()
   
   If bEmbedded Then
      Settings["Referrals_Embedded/VSplit_Main.Layout"] = VSplit_Main.Layout
      Settings["Referrals_Embedded/VSplit_Referrals.Layout"] = VSplit_Referrals.Layout
      Settings["Referrals_Embedded/EditArea_Communications"] = HSplitEditArea_Communications.Layout
      Settings["Referrals_Embedded/Letters_Include"] = HSplit_Letter_Include.Layout
      Settings["Referrals_Embedded/Letters_Preview_Zoom"] = FHtml_Viewer.WebView1.Zoom
   Else
      Settings["Referrals/VSplit_Main.Layout"] = VSplit_Main.Layout
      Settings["Referrals/VSplit_Referrals.Layout"] = VSplit_Referrals.Layout
      Settings["Referrals/EditArea_Communications"] = HSplitEditArea_Communications.Layout
      Settings["Referrals/Letters_Include"] = HSplit_Letter_Include.Layout
      Settings["Referrals/Letters_Preview_Zoom"] = FHtml_Viewer.WebView1.Zoom
   End If
   
End

Private Sub Settings_Load()
   
   If bEmbedded Then
      Try VSplit_Main.Layout = Settings["Referrals_Embedded/VSplit_Main.Layout"]
      Try VSplit_Referrals.Layout = Settings["Referrals_Embedded/VSplit_Referrals.Layout"]
      Try HSplitEditArea_Communications.Layout = Settings["Referrals_Embedded/EditArea_Communications"]
      Try HSplit_Letter_Include.Layout = Settings["Referrals_Embedded/Letters_Include"]
      Try FHtml_Viewer.WebView1.Zoom = Settings["Referrals_Embedded/Letters_Preview_Zoom"]
      Try cvwLetters.font = Font[Settings["Referrals/cvwLetters.font"]]
   Else
      Try VSplit_Main.Layout = Settings["Referrals/VSplit_Main.Layout"]
      Try VSplit_Referrals.Layout = Settings["Referrals/VSplit_Referrals.Layout"]
      Try HSplitEditArea_Communications.Layout = Settings["Referrals/EditArea_Communications"]
      Try HSplit_Letter_Include.Layout = Settings["Referrals/Letters_Include"]
      Try FHtml_Viewer.WebView1.Zoom = Settings["Referrals/Letters_Preview_Zoom"]
      Try cvwLetters.font = Font[Settings["Referrals/cvwLetters.font"]]
   End If
   
End

Public Sub ColumnView1_KeyPress()
   
   If Key.Code = Key.RETURN Then 
      ColumnView1_DblClick() 
   End If
   
End

Public Sub Address_Select()
   
   columnview1.MoveCurrent
   Try txtOrganisation.text = Addresses[columnview1.Item.key]!organisation
   Try txtBranch.text = Addresses[columnview1.Item.key]!branch
   Try txtStreet1.text = Addresses[columnview1.Item.key]!street
   Try txtSuburb.text = Addresses[columnview1.Item.key]!town
   Try txtPostcode.text = Addresses[columnview1.Item.key]!postcode
   Try fk_organisation = Addresses[columnview1.Item.key]!fk_organisation
   Try fk_branch = Addresses[columnview1.Item.key]!fk_branch
   txtTag.SetFocus()
   
End

Public Sub ColumnView1_DblClick()
   '-----------------------------------------------------------
   'The columnview tag is always a control, usually a textbox
   'here we read the textbox tag to determine which textbox
   'poppuped up the columnview
   '---------------------------------------------------------
   
   Select Case Last.Tag.tag
      Case "category"
         Organisation_By_Category_Select()
      Case "occupation"
         Person_By_Occupation_Select()
      Case "branch"
         Branch_Select()
      Case "street1"
         Address_Select()
      Case "name" 
         Person_Select()
      Case "organisation"
         Organisation_Select()
   End Select
   columnview1.Visible = False  
   
End

Public Sub mnuReferralsThisconsult_Click()
   
   Select Case Last.tag
      Case "font"
         modUtil.Columnview_SetFont(cvwLetters, "Referrals")        'allow use to change the font, save to settings"
      Case "help"
         ReferralsList_Help()          'fixme not implemented
      Case "delete"
         ReferralsList_Delete()        'fixme not implemented
      Case "undo delete"
        ReferralsList_DeleteUndo()
      Case "edit"
         Referral_Edit()               'edit the current referral
      Case "preview"
         Referral_Preview()
      Case "re-print", "re-print all"
         ReferralsList_Print(Last.tag) 'fixme not implemented
   End Select
   
End

Public Sub ReferralsList_Help()
   
End

Public Sub ReferralsList_Delete()
   '-------------------------------------------------------------------------
   'Deletes the current referral
   'Without audit trail if written this consultation, which is always if from
   'the cvwLetterse list
   '-------------------------------------------------------------------------
   Dim referral As New Collection
   
   If Message.Question("Are you sure you want to delete this referral?", "Yes", "No") = 2 Then Return 
   referral!pk_referral = pk_referral
   referral!deleted = True
   modDBConnect.BeginTrans()
       pk_deleted_referral = modReferralsDBI.Save(currentconsult, pk_referral, referral)
   modDBConnect.CommitTrans()
   Reload()                                                  'Default to a new letter
   FClinical.Refresh_AllPreviousNotes()
End

Public Sub ReferralsList_DeleteUndo()
   '-----------------------------------------------------
   'Un-deletes a referral - one level only.
   'Can't use save(...) as not in the collection anymore
   'Ian will probably change this though..
   '----------------------------------------------------
   
   If pk_deleted_referral Then
      modDBConnect.BeginTrans()
         modReferralsDBI.UnDelete(pk_deleted_referral)
         pk_deleted_referral = 0
     modDBConnect.CommitTrans()
     Reload()
     FClinical.Refresh_AllPreviousNotes()
   Endif
End



Public Sub ReferralsList_Print(print_type As String)
   Dim x As Integer
   
   Select Case print_type
      Case "re-print"
          modPrinting.PrintHtml(currentconsult!referrals_written[pk_referral]!letter_html)
      Case "re-print all"
           cvwLetters.MoveFirst
           For x = 0 To cvwLetters.count - 1
                modPrinting.PrintHtml(currentconsult!referrals_written[cvwLetters.Item.Key]!letter_html)
                cvwLetters.MoveNext()
           Next
           cvwLetters.MoveFirst()
           cvwLetters.Item.Selected = True
   End Select
   
End

Public Sub Referral_Edit()
   '---------------------------------------------------------------   
   'Edits either an letter just written (saved or not this consult)
   'or an old referral that has been re-loaded for re-printing
   'or editing
   'Note:if re-edited from an old one,must ensure referral.pk set to 0
   '------------------------------------------------------------------
   
   Dim Letter_from_View As Collection ' to make typing easier
   Dim PH As Collection 
   bEditing = True
   EditArea_Clear()
   Inclusions = New Collection
   PersonWritingTo = New Collection 
   bExit = True
   cvwLetters.MoveCurrent
   pk_referral = cvwLetters.Item.key
   Letter_from_View = currentconsult!referrals_written[pk_referral]
   Try fk_branch = Letter_from_View!fk_branch
   Try fk_person = Letter_from_View!fk_person
   Try fk_organisation = Letter_from_View!fk_organisation
   PersonWritingTo!firstname = Letter_from_View!provider_firstname
   PersonWritingTo!surname = Letter_from_View!provider_surname
   PersonWritingTo!title = Letter_from_View!title
   txtName.text = Letter_from_View!provider_title & " " & Letter_from_View!provider_firstname & " " & Letter_from_View!provider_surname 
   txtCategory.text = Letter_from_View!category
   txtOccupation.text = Letter_from_View!occupation
   txtOrganisation.text = Letter_from_View!organisation
   txtBranch.text = Letter_from_View!branch
   txtStreet1.text = Letter_from_View!street
   txtStreet2.Text = ""
   txtSuburb.text = Letter_from_View!town
   txtPostcode.text = Letter_from_View!postcode
   '-----------------------------------------------------------------------------
   'Now, use the fk_pasthistory (default = 0) to set the linked past history item
   '-----------------------------------------------------------------------------
   If Letter_from_View!fk_pasthistory = 0 Then
      txtHealthIssue.text = "General Notes"
      fk_pasthistory = 0 
   Else
      For Each PH In currentconsult!past_history
         If Letter_from_View!fk_pasthistory = PH!pk_pasthistory Then
            txtHealthIssue.text = PH!description
            fk_pasthistory = PH!pk_pasthistory
            Break
         End If
      Next
   End If
   If Letter_from_View!include_careplan = True Then
      chkIncludeCarePlan.value = True
   Else
      chkIncludeCarePlan.value = False
   End If
   If Letter_from_View!include_healthsummary = True Then
      chkIncludehealthSummary.value = True
   End If
   
   ' cmbReferralTypes.index = Letter_from_View!fk_type
   cmbReferralTypes.index = cmbReferralTypes.Find(Letter_from_View!type)
   fk_progressnote = Letter_from_View!fk_progressnote
   txtTag.text = Letter_from_View!tag
   teLetter.richtext = Letter_from_View!body_html  
   VBox_Letters.Enabled = True
   tbSave.Enabled = False  
   teLetter.SetFocus()
   bExit = False  
   
End

Public Sub cvwLetters_Menu()
   '------------------------------------------------------------------------------------
   'Popup menu of letters written this consult, enabling, disabling items as appropriate
   '------------------------------------------------------------------------------------
   If pk_deleted_referral Then
         mnuReferralsThisconsult_DeleteUndo.enabled = True
   Else
        mnuReferralsThisconsult_DeleteUndo.Enabled = False   
   End If

   ' If cvwLetters.count = 0 Then
   '    mnuReferralsThisconsult_Edit.Enabled = False   
   '    mnuReferralsThisconsult_Preview.Enabled = False
   '    mnuReferralsThisconsult_RePrint.Enabled = False
   '    mnuReferralsThisconsult_RePrintAll.Enabled = False 
   '    mnuReferralsThisconsult_Delete.Enabled = False  
   '  Else
   '    mnuReferralsThisconsult_Edit.Enabled = True   
   '    mnuReferralsThisconsult_Preview.Enabled = True
   '    mnuReferralsThisconsult_RePrint.Enabled = True
   '    mnuReferralsThisconsult_RePrintAll.Enabled = True 
   '    mnuReferralsThisconsult_Delete.Enabled = True
   ' Endif
      mnuReferralsThisconsult_Edit.Enabled = cvwLetters.count  
      mnuReferralsThisconsult_Preview.Enabled = cvwLetters.count
      mnuReferralsThisconsult_RePrint.Enabled = cvwLetters.count
      mnuReferralsThisconsult_RePrintAll.Enabled = cvwLetters.count
      mnuReferralsThisconsult_Delete.Enabled = cvwLetters.count

   mnuReferralsThisconsult.popup()
   
End

Public Sub cvwLetters_Click()
  
  cvwLetters_Select()
  
End

Public Sub cvwLetters_Select()
   '-----------------------------------------------------------------
   'User has clicked on an existing letter for today's consulatation
   '-----------------------------------------------------------------
   EditArea_Clear()
   cvwLetters.MoveCurrent
   cvwLetters.Item.Selected = True
   pk_referral = cvwLetters.Item.key
  
   vbox_Letters.Enabled = False
   tbSave.Enabled = False 
   tbPreview.enabled = False 
End

Public Sub lvwOrgContacts_Menu()
   
   If lvworgcontacts.Count Then
      mnuReferrals_Communications.popup 
   End If
   
End

Public Sub Person_Addresses_Get()
   '----------------------------------------------------------------------
   'Get all addresses this person works, private rooms or in organisations
   '----------------------------------------------------------------------
   
   Dim x As Integer
   
   columnview1.Clear
   columnview1.Columns.count = 2
   Addresses = modReferralsDBI.Persons_Addresses_Get(fk_person)
   For Each address In Addresses
      ColumnView1.add(address!pk_view, 0)
      If address!organisation <> Null Then 
         ColumnView1[address!pk_view][0] = address!organisation & " " & address!branch
      Else
         ColumnView1[address!pk_view][0] = "Private rooms"
      End If   
      ColumnView1[address!pk_view][1] = address!street & " " & address!town
   Next
   If Addresses.count > 1 Then 
      columnview1.Raise
      columnview1.Visible = True
      columnview1.tag = txtStreet1
   Else
      If Addresses.Count = 1 Then Address_Select()
   Endif
   
End

Public Sub Person_Get()
   '-------------------------------------------------------------
   'Gets a list of persons who could be sole traders or employees
   '-------------------------------------------------------------
   
   columnview1.Visible = False 
   If Trim(txtName.text) = "" Then Return 
   specialists = modReferralsDBI.Person_Get_By_Surname(Trim(txtName.text))
   columnview1.Clear()
   columnview1.Columns.count = 2
   ' '-----------------------------------------------------------------
   ' 'If categories exist to match the text, auto-select or show a list
   ' '-----------------------------------------------------------------
   If specialists.count Then 
      For Each Specialist In specialists
         columnview1.Add(Specialist!pk_view, 0)
         columnview1[Specialist!pk_view][0] = Specialist!wholename
         columnview1[Specialist!pk_view][1] = "(" & Specialist!occupation & ")"
      Next
      columnview1.tag = txtName 
      columnview1.Visible = True
      columnview1.Raise
      Return 
   Else
      columnview1.Visible = False   
   End If
   
End

Public Sub Person_Select()
   '-----------------------------------------------------------
   'There is a list of persons showing, user is selecting one
   'Routine called by user clicking on list or pressing <enter>
   '-----------------------------------------------------------
   
   bExit = True
   If columnview1.Visible Then
      columnview1.MoveCurrent   'set internal cursor to match marquee
      txtOccupation.text = specialists[columnview1.Item.key]!occupation
      txtName.Text = specialists[columnview1.Item.key]!wholename
      fk_person = specialists[columnview1.Item.key]!fk_person
      PersonWritingTo!firstname = specialists[columnview1.Item.key]!firstname
      PersonWritingTo!surname = specialists[columnview1.Item.key]!surname
      PersonWritingTo!title = specialists[columnview1.Item.key]!title
   End If
   bExit = False   
   '-------------------------------------------------------------
   'Now, this person could have multiple entries in contacts, eg
   'We could be referring to an orthopaedic surgeon in say
   'John Hunter outpatients, or
   'Belmont Hospital Outpatients or
   'His private rooms in Newcastle or
   'His private rooms in Maitland
   'So need to present all the possible addresses
   '------------------------------------------------------------
   txtStreet1.SetFocus()      'triggers Person_Addresses_Get(), sets columnview1
   
End

Public Sub Person_Comms_Get()
   '--------------------------------------------------------
   'Get all the persons contacts, e.g phone, fax, mobile etc
   '--------------------------------------------------------   

   Dim comm As Collection
   Dim x As Integer
   
   comms = modContactsDBI.person_comms_get(fk_person)
   cvwPersonContacts.Clear()
   For Each Comm In comms
      x = Comm!pk
      cvwPersonContacts.Add(x, 0)
      cvwPersonContacts[x][0] = comm!type
      cvwPersonContacts[x][1] = comm!value 
   Next
   
End

Public Sub Organisation_By_Category_Get()
   '---------------------------------------------------------------  
   'Allows user to select a recipient by category
   'applies only to organisation, for persons, search on occupation
   '---------------------------------------------------------------
   
   columnview1.Visible = False
   If Trim(txtCategory.text) = "" Then Return 
   branches = modContactsDBI.Organisations_Get_By_Category(Trim(txtCategory.text))
   If Not branches.count Then Return
   columnview1.Clear()
   For Each branch In branches
      columnview1.Add(branch!pk_view, 0)
      columnview1[branch!pk_view][0] = branch!category
      columnview1[branch!pk_view][1] = branch!organisation
      columnview1[branch!pk_view][2] = branch!branch
   Next
   
   With columnview1
      .tag = txtCategory
      .Raise()
      .Visible = True
   End With 
   
End

Public Sub Organisation_By_Category_Select()
   '--------------------------------------------------------------
   'User has been trying to find organisation by typing a category
   '--------------------------------------------------------------
   
   Branch_Select()
   
   '------------------------------------------
   'Get the comms for this organisation/branch
   '------------------------------------------
   lvworgcontacts.Clear() 
   cvwPersonContacts.Clear()
   comms = modContactsDBI.Branch_Comms_Get(fk_branch)
   For Each comm In comms
      lvworgcontacts.Add(comm!pk, comm!type & " " & comm!value)
      
   Next
   
End


Public Sub Branch_Select()
   '-------------------------------------
   'Selects a branch from the columnview1
   '-------------------------------------   
   bexit = True
   columnview1.MoveCurrent()
   txtOrganisation.text = branches[columnview1.Item.key]!organisation
   txtBranch.text = branches[columnview1.Item.key]!branch
   txtstreet1.text = branches[columnview1.Item.key]!street
   txtSuburb.text = branches[columnview1.Item.key]!town
   txtPostcode.text = branches[columnview1.Item.key]!postcode
   txtCategory.text = branches[columnview1.Item.key]!category
   columnview1.Visible = False   
   fk_branch = branches[columnview1.Item.key]!fk_branch
   fk_organisation = branches[columnview1.Item.key]!fk_organisation
   bexit = False
   txtTag.SetFocus()
   
End

Public Sub Branch_Get()
   '--------------------------------
   'Get branches for an organisation
   '--------------------------------
   
   Branches = modContactsDBI.Branches_Get_For_Organisation(fk_organisation)
   If Branches.count Then
      columnview1.Clear
      For Each branch In branches
         columnview1.Add(branch!pk_view, 0)
         columnview1[branch!pk_view][0] = branch!branch
         columnview1[branch!pk_view][1] = branch!street & " " & branch!town & " " & branch!postcode
      Next
      columnview1.Visible = True
      columnview1.Tag = txtBranch
   Endif
   
End

Public Function Employee_Workplace_Get()  
   '-----------------------------------------------------------------------------
   'Given an fk_person, get where they could work (may not however be an employee
   'If a single place of employ - auto accept and put in the details
   '-----------------------------------------------------------------------------
   
   columnview1.Visible = False 
   If Trim(txtName.text) = "" Then Return 
   fk_organisation = 0
   fk_branch = 0
   branches = modReferralsDBI.Organisations_Get_For_Employee(fk_person)
   If Not branches.count Then Return 
   columnview1.Clear()
   '-----------------------------------------------------------------------------------
   'If branches of an organisation  exist to match the text, auto-select or show a list
   '-----------------------------------------------------------------------------------
   For Each branch In branches
      Columnview1.Add(branch!pk_view, 0)
      Columnview1[branch!pk_view][0] = Branch!organisation
      Columnview1[branch!pk_view][1] = Branch!branch
      Columnview1[branch!pk_view][2] = Branch!street 
      Columnview1[branch!pk_view][3] = Branch!town & " " & Branch!postcode
   Next 
   
   If branches.count = 1 Then 
      Employee_Workplace_Select()
      Return  
   End If
   columnview1.Visible = True
   columnview1.Raise
   columnview1.tag = txtOrganisation
   
   Return   
   
End

Public Function Employee_Workplace_Select()  
   
   bExit = True
   columnview1.MoveCurrent 
   fk_organisation = branches[columnview1.Item.key]!fk_organisation
   fk_branch = branches[columnview1.Item.key]!fk_branch
   txtOrganisation.text = branches[columnview1.Item.key]!organisation
   txtBranch.text = branches[columnview1.Item.key]!branch
   '-----------------
   'These can be null
   '-----------------
   Try txtStreet1.text = branches[columnview1.Item.key]!street
   Try txtSuburb.text = branches[columnview1.Item.key]!town
   Try txtPostcode.text = branches[columnview1.Item.key]!postcode
   txtTag.SetFocus   
   '------------------------------------------
   'Get the comms for this organisation/branch
   '------------------------------------------
   lvworgcontacts.Clear() 
   cvwPersonContacts.Clear()
   comms = modContactsDBI.Branch_Comms_Get(fk_branch)
   
   For Each comm In comms
      lvworgcontacts.Add(comm!pk, comm!type & " " & comm!value)
      
   Next
   bExit = False  
   columnview1.Visible = False     
   
End

Public Sub EditAreaCombo_Click()
   
   If bExit Then Return 
   fk_type = Last.index + 1
   
End

Public Sub cvwLetters_LostFocus()
   
   If Last.Header = True Then
      Last.header = False
   End If
   
End

Public Sub Person_By_Occupation_Select()
   '-----------------------------------------------------
   'User selects person to send letter to from popup list
   '-----------------------------------------------------
   
   bExit = True
   If columnview1.Visible Then
      columnview1.MoveCurrent   'set internal cursor to match marquee
      txtName.Text = specialists[columnview1.Item.key]!wholename
      txtOccupation.text = specialists[columnview1.Item.key]!occupation
      fk_person = specialists[columnview1.Item.key]!fk_person
      PersonWritingTo!firstname = specialists[columnview1.Item.key]!firstname
      PersonWritingTo!surname = specialists[columnview1.Item.key]!surname
      PersonWritingTo!title = specialists[columnview1.Item.key]!title
   End If
   txtOrganisation.SetFocus
   bExit = False  
   
End

Public Sub Person_By_Occupation_Get()
   '-----------------------------------------------------------------------
   'Gets a list of categories of occupations, presented in a list like this
   ' category .... persons name i.e
   ' cardiologist      Dr Big heart
   '-----------------------------------------------------------------------
   
   columnview1.Visible = False   
   If Trim(txtOccupation.text) = "" Then Return 
   '  specialists = modReferralsDBI.Employee_Occupations_Category_Get(Trim(txtOccupation.text))
   specialists = modReferralsDBI.Persons_Get_By_Occupation(Trim(txtOccupation.text))
   columnview1.Clear()
   ' '-----------------------------------------------------------------
   ' 'If categories exist to match the text, auto-select or show a list
   ' '-----------------------------------------------------------------
   If specialists.count > 1 Then 
      For Each Specialist In specialists
         columnview1.Add(Specialist!pk_view, 0)
         columnview1[Specialist!pk_view][0] = Specialist!occupation
         columnview1[Specialist!pk_view][1] = Specialist!wholename
      Next 
      columnview1.Visible = True
      columnview1.Raise
      columnview1.tag = txtOccupation
      Return 
   Else
      Address_Select() 
      columnview1.Visible = False    
   End If
   
End

Public Sub Organisation_Select()
   
   Branch_Select()
   
End

Public Sub Organisation_Get()
   
   '------------------------------
   'Gets list of all organisations
   '------------------------------
   columnview1.Visible = False 
   If Trim(txtOrganisation.text) = "" Then Return 
   fk_organisation = 0
   fk_branch = 0
   branches = modContactsDBI.Organisations_Get(Trim(txtOrganisation.text))
   If Not branches.count Then Return 
   columnview1.Clear()
   '-----------------------------------------------------------------------------------
   'If branches of an organisation  exist to match the text, auto-select or show a list
   '-----------------------------------------------------------------------------------
   For Each branch In branches
      Columnview1.Add(branch!pk_view, 0)
      Columnview1[branch!pk_view][0] = Branch!organisation
      Columnview1[branch!pk_view][1] = Branch!branch
      Columnview1[branch!pk_view][2] = Branch!street 
      Columnview1[branch!pk_view][3] = Branch!suburb & " " & Branch!postcode
   Next 
   
   If branches.count = 1 Then 
      Organisation_Select
      Return  
   End If
   columnview1.Visible = True
   columnview1.Raise
   columnview1.tag = txtOrganisation   
   
End

Public Sub lvwInclusions_Drop()
   '---------------------------------------------------
   'Something is being dropped on the inclusions list
   'We will accept stuff which is a document or a graph
   'Drag.source = the control this is coming from, but
   'is a 'control', not for example a columnview  so 
   'have to test it as below
   '---------------------------------------------------
   
   Dim cv As ColumnView                'the 'source' control if columnview
   Dim sString As String               'summary eg 01/01/2010 CXR
   Dim Document As Collection          'the document we want to include
   Dim documents As Collection
   Dim c As Control
   Dim Inclusion As New Collection
   Dim pic As New Picture
   Dim select_mode As Integer 
   Dim x As Integer
   
   If Drag.Source Is Columnview Then   'a result or letter ie document
      cv = Drag.Source
      cv.MoveCurrent()
      Select_mode = cv.mode
      Select Case cv.Tag             
         Case "results"
            Documents = currentconsult!results_received
         Case "letters received" 
            Documents = currentconsult!letters_received
         Case "referrals"
            Documents = currentconsult!referrals_written
      End Select
      If cv.mode = 1 Then
         Document = Documents[Drag.data]
         sString = Document!date_created & " " & Document!tag_user
         Inclusion!document = Document
         Inclusion!type = "document"
         Inclusions.Add(Inclusion, lvwInclusions.count)
         lvwInclusions.add(lvwInclusions.count, sSTring)
      Else
         cv.MoveFirst()
         For x = 0 To cv.count - 1
            If cv.Item.Selected = True Then
               Document = Documents[cv.Item.key]
               sString = Document!date_created & " " & Document!tag_user
               Inclusion!document = Document
               Inclusion!type = "document"
               Inclusions.Add(Inclusion, lvwInclusions.count)
               lvwInclusions.add(lvwInclusions.count, sSTring)
            Endif
            cv.MoveNext()
         Next
      End If  
   Else
      '---------------------------------
      'Must be a graph which was dropped
      '---------------------------------  
      Inclusion!type = "graph"
      Inclusion!filename = Drag.Source.Tag!fname
      sString = "graph of something"
      lvwInclusions.add(lvwInclusions.count, sSTring)
   End If
   lblDocuments.text = "Documents (" & Str(lvwInclusions.Count) & ")"
   
End
