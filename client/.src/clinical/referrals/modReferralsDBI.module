' Gambas module file
' Copyright (C) 2008,2009 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'FIX ME - WORK OUT HOW TO CALL MODCONTACTS.COMMS GET FROM THIS MODULE
Private $hConn As Connection
Private $Result As Result
Private sql As String
Private aCollection As Collection
Private x As Integer

Public Function Letters_Received_Get(fk_patient As Integer) As Collection ', Optional user_tag As String = "", Optional originator As String = "", Optional fk_sending_entity As Integer = 0)
   '------------------------------------------------------------------------------------------------------
   'Return a collection of all documents received for this patient 
   'which are not a result, order newest to oldest, whether filed or not
   'orginator = the sender eg Dr Joe Blogs
   'tag_user = the users document tag e.g 'Assessment of IHD i.e that entered when the document was filed
   '-----------------------------------------------------------------------------------------------------
   Dim sql As String
   sql = "Select * from documents.vwDocuments where fk_patient = " & fk_patient
   sql &= " AND fk_lu_display_as = " & const.Document_Display_As_Letter & " AND deleted = false" 
   sql &= " ORDER BY date_created desc"
   Return modDBConnect.exec_query_collection(sql)
End
' Public Function Referral_Delete(cons As cConsult, ref As cReferral, audit As cAudit) As Boolean
'  '------------------------------------------------------------------------
'  'Deletes a referral, keeps the referral_pk on the referral_undelete stack
'  'TODO THIS FIX ME   
'  '------------------------------------------------------------------------
'    
'    If ref.fk_consult = cons.pk_consult Then
'       modDBConnect.BeginTrans()
'       sql = "Update  clin_referrals.referrals "
'       sql &= "SET deleted = 't' WHERE pk = "
'       sql &= ref.pk
'       'Print sql
'       modDBConnect.exec_query(sql)
'       modConsultDBI.Audit_Save(audit)
'    Else
'    
'    End If
'    
'    Return modDBConnect.CommitTrans()
'  
' End



Public Function Referrals_written_get(fk_patient As Integer) As Collection
    '-------------------------------------------------------------------
   'PURPOSE: Gets all referral  letters or other outgoing letters
   '         but not recall letters for the patient
   'EXPECTS: key to consult.patients table
   'RETURNS: A collection of referrals written in newest to oldest order
   '
   '--------------------------------------------------------------------
   Dim sql As String
   sql = "Select * from clin_referrals.vwReferrals where fk_patient = " & fk_patient
   sql &= " AND fk_type <>" & const.ReferralType_Recall
   sql &= " AND fk_type <>" & const.ReferralType_ImportedRecall
   sql &= " AND deleted = False"
   sql &= " ORDER BY date DESC"
   Return modDBConnect.exec_query_collection(sql)
End



Public Function Referral_Get_Types() As Collection 
   '-------------------------------------------------------------
   'Gets a list of types of referrals e.g 'Opinion', 'Management'
   'Do not want these ordered alphabetically
   'I've put the most commonly used types in order
   '-------------------------------------------------------------
   Return modDBConnect.exec_query_collection("Select * From clin_referrals.lu_type")
   
End

Public Function UnDelete(pk_referral As Integer)
   '--------------------------------------------------
   'Marks as not deleted a previously deleted referral
   'Quicker than using Save()
   '-------------------------------------------------- 
  modDBConnect.exec_query("Update clin_referrals.referrals set deleted = False where pk = " & pk_referral)
  
End

Public Function Save(currentconsult As CConsult, old_pk As Integer, referral As Collection) As Integer 
   '----------------------
   'Saves a referral letter
   'FIXME - USE REFERRAL-SAVE_OLD TO WRITE INTO PROGRESS NOTE
   '-----------------------
   If old_pk < 0 Then
      referral!fk_consult = currentconsult.GetPK()
      referral!pk_referral = modDBConnect.insert("clin_referrals.referrals", referral)
   Else
        ' modDBConnect.update("clin_history.past_history", currentconsult!past_history[old_pk], pasthistory, "pk_pasthistory") 

      modDBConnect.update("clin_referrals.referrals", currentconsult!referrals_written[old_pk], referral, "pk_referral")
   End If
 
  Return referral!pk_referral
End




Public Function Organisations_Get_For_Employee(fk_person As Integer) As Collection
  '--------------------------------------------------------------------------------------
  'Gets a list of all organsisations the chosen person is in in vwOrganisationsEmployees
  'note we use the fk_person, not the fk_employee as fk_person is unique, but
  'same person could be employed in multiple places, and have multiple fk_employee's
  '-------------------------------------------------------------------------------------
  ' Dim $CommsResult As result
  ' Dim comm As cComm
  Return modDBConnect.exec_query_collection("Select * from contacts.vwOrganisationsEmployees WHERE fk_person = " & fk_person)
 
End

Public Function Person_Get_Distinct(txtName As String, Optional bPatient As Boolean = False) As Collection
   '------------------------------
   'return a collection of persons
   '------------------------------
   Dim bits As New String[]
   Dim sql As String    
   
   bits = Split(txtName, ",")
   sql = "Select * from contacts.vwPersonsOrEmployees_By_Occupation WHERE  " 
   If bits.count = 2 Then
      sql &= "surname ILIKE $$%" & bits[0] & "%$$ AND firstname ILIKE $$%" & bits[1] & "%$$ " 
   Else
      sql &= " surname  ILIKE $$%" & txtName & "%$$ "
   Endif
     sql &= " LIMIT 20"
   Return modDBConnect.exec_query_collection(sql)
End

Public Function Persons_Addresses_Get(fk_person As Integer) As Collection
  '---------------------------------------------------------------------
  'Get collection of addresses for person either when the contacts entry
  'is as an employee of organisation, or as a person at an address which
  'does not belong to a company
  '----------------------------------------------------------------------
  Dim sql As String
  sql = "Select * from contacts.vwPersonsAndEmployeesAddresses where fk_person = " & fk_person
  Return modDBConnect.exec_query_collection(sql)
  
End

Public Function Person_Get_By_Surname(txtName As String) As Collection
   '-------------------------------------------------------------------------
   'return a collection of persons by surname, either employee or sole trader
   '-------------------------------------------------------------------------
   Dim bits As New String[]
   Dim sql As String    
   
   bits = Split(txtName, ",")
   sql = "Select * from contacts.vwPersonsOrEmployees_By_Occupation WHERE  " 
   If bits.count = 2 Then
      sql &= "surname ILIKE $$%" & bits[0] & "%$$ AND firstname ILIKE $$%" & bits[1] & "%$$ " 
   Else
      sql &= " surname  ILIKE $$%" & txtName & "%$$ "
   Endif
     sql &= " LIMIT 20"
   Return modDBConnect.exec_query_collection(sql)
End
Public Function Persons_Get_By_Occupation(occupation As String) As Collection
  '--------------------------------------------------------
  'Gets a list of people by occupation either employee or person
  '---------------------------------------------------------

   sql = "Select * from contacts.vwPersonsOrEmployees_By_Occupation where occupation ILIKE $$%" 
   sql &= occupation & "%$$ LIMIT 30"
   Return modDBConnect.exec_query_collection(sql)
  
End

Public Function Employee_Comms_Get(fk_employee As Integer) As Result
'FIX ME USE THE ONE ON CONTACTSDBI AND REMOVE THIS
  Dim sql As String
  Dim $Result As Result
   sql = "Select " 
   " COMMS.pk,"
   " COMMS.value,"
   " COMMS.note,"
   " COMMS.preferred_method,"
   " COMMS.confidential,"
   " COMMS.deleted,"
   " COMMS.fk_type, "
   " TYPES.type"
 " From "
   " contacts.data_communications COMMS "
   " INNER JOIN contacts.links_employees_comms ON(COMMS.pk = contacts.links_employees_comms.fk_comm) "
  "  INNER JOIN contacts.lu_contact_type TYPES ON(COMMS.fk_type = TYPES.pk) "
   "WHERE "
   sql = sql & "contacts.links_employees_comms.fk_employee = " & fk_employee
      
  ' 'Print  sql
   $Result = modDBConnect.exec_query(sql)
            
   Return $Result
 
End
