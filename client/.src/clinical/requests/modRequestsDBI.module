' Gambas module file

' Copyright (C) 2008-2012 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'--------------------------------------------------------------------------------------------
'EasyGP    : An  Open source medical record project for Australian GP's
'
'AUTHOR    : Dr Richard Terry
'          : rterry@pacific.net.au
'PURPOSE   : Database routines for requesting tests from other providers
'REFERENCES: Schema clin_requests
'---------------------------------------------------------------------------------------------

Private $Result As Result
Private sql As String

Public Function RequestTypes_Get() As Collection
   
   Return modCache.Get("clin_requests.lu_request_type")
   
End

Public Function Provider_Type_Get(fk_type As Integer) As String
   
  Return modCache.Get("clin_requests.lu_request_type", fk_type, "pk")
   
End

Public Function Request_GetPk(request As String) As Integer
   
   Return modDBConnect.exec_query("Select pk from clin_requests.lu_requests where item ILIKE $$" & request & "$$")!pk
   
End

Public Sub Request_Delete(fk_request As Integer)
   '---------------------------------------------------------------------------------------
   'Marks as deleted a request in clin_requests.lu_requests, does not remove from the table
   '---------------------------------------------------------------------------------------
   
   sql = "Update clin_requests.lu_requests set deleted = true where pk = " & fk_request
   modDBConnect.exec_query(sql)
   
End

Public Function Request_Save(old_data As Collection, pk_view As Integer, term As Collection) As Integer
   
   If IsNull(term!pk) Then
      Return modDBConnect.insert("clin_requests.lu_requests", term)
   Else
      modDBConnect.update("clin_requests.lu_requests", old_data[pk_view], term) 
   End If 
   
End

Public Sub Request_Save_loinc(item As String)
   'FIXME - put type of test into loinc, and fix the fk_section to reflect this eg serum, bacto etc
   'temporary
   
   Dim c As New Collection
   
   c!fk_lu_request_type = 1
   c!item = item
   c!fk_laterality = 0
   c!fk_decision_support = 0
   c!fk_instruction = 0
   modDBConnect.insert("clin_requests.lu_requests", c)
   
End

Public Function Employee_Get(employee As String) As Collection 
   
   sql = " Select * From contacts.vwOrganisationsEmployees where surname ILIKE $$"
   sql = sql & employee & "%$$ ORDER BY surname, firstname, category"  
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function User_Get_Default_Type() As Collection 
   '-----------------------------------------------------------------
   'Return a collection representing a staff members defaults for use
   'in the requests section , e.g default to always boot to pathology
   '-----------------------------------------------------------------
   
   Return modDBConnect.exec_query_collection(" Select * From clin_requests.vwStaffPreferences WHERE fk_staff = " & modDBConnect.currentUser!fk_staff)
   
End

Public Function User_Save_Default_Type(old_data As Collection, user_default_type As Collection) As Integer
   
   If IsNull(user_default_type!fk_user_default_type) Then
      user_default_type!fk_staff = modDBConnect.currentUser!fk_staff
      user_default_type!fk_default_type = modDBConnect.insert("clin_requests.user_default_type", user_default_type)
   Else
      modDBConnect.update("", old_data, user_default_type, "fk_user_default_type")
   End If
   Return user_default_type!fk_default_type
   
End

Public Function Providers_GetBy_RequestType(fk_lu_request_type As Integer) As Collection
   '---------------------------------------------------------------
   'Gets a list of distinct organisations for a particular category
   'e.g all the Pathology Providers
   '---------------------------------------------------------------
   
   Dim sql As String
   
   sql = "Select * from clin_requests.vwrequestproviders  "
   sql &= "WHERE  fk_lu_request_type = " & fk_lu_request_type
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Provider_Branches_Get(fk_organisation As Integer, Optional fk_category As Integer = 0) As Collection
   '---------------------------------------------------------------------------------------
   'Gets branches for an organisation as a collection including comms using fk_organisation
   '---------------------------------------------------------------------------------------
   
   Dim sql As String
   Dim branches As Collection 
   Dim branch As Collection 
   Dim comms As Collection 
   
   sql = " Select * From contacts.vwOrganisationsEmployees where fk_organisation =" & fk_organisation & " AND branch_deleted = false"
   sql &= " AND fk_employee = 0  order by branch" 
   branches = modDBConnect.exec_query_collection(sql)
   For Each branch In branches
      sql = "Select * from contacts.vwBranchesComms WHERE fk_branch = " & branch!fk_branch 
      comms = modDBConnect.exec_query_collection(sql)
      branch!comms = comms
   Next
   Return branches    
   
End

Public Function Provider_Get_Default_For_Request_type(fk_lu_request_type As Integer) As Collection 
   '------------------------------------------------------------------------------------------------
   'CALLED BY  FRequests.Get_Default_Provider()
   'RETURNS    collection (as a result) with head office and default branch for the type of provider
   '           on a per-user basis
   '-------------------------------------------------------------------------------------------------
   
   Dim sql As String
   
   sql = "Select * from clin_requests.vwUserProviderDefaults WHERE fk_staff = " & modDBConnect.currentUser!fk_staff
   sql &= " AND deleted = False  AND fk_lu_request_type = " & fk_lu_request_type
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Organisation_Branches_Get_Like_Text(sSearchtext As String) As Collection 
   '------------------------------------------------------------------------------------
   'CALLED BY: Frequests.copyto_selection("get") when rbCopyTo_Organisation.value = true
   'PURPOSE  : Find all branches or organisations sSearchText
   '------------------------------------------------------------------------------------
   
   sSearchtext = modDBConnect.Esc_Like(sSearchtext)
   sql = " Select * From contacts.vwOrganisationsEmployees where organisation ILIKE $$%"
   sql = sql & sSearchtext & "%$$ AND fk_employee = 0 ORDER BY organisation, branch"
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Requests_Get_Notes(sSearchtext As String, fk_lu_type As Integer) As Collection 
   '-------------------------------------------------------------------------
   'Gets a collection of notes user has previously written for their requests
   'on a per type (clin_requests.lu_type) and per user basis
   '-------------------------------------------------------------------------
   
   Dim sql As String
   
   sSearchtext = modDBConnect.Esc_Like(sSearchtext)
   sql = "Select * from clin_requests.notes WHERE note ILIKE $rgn$%" & sSearchtext & "%$rgn$"
   sql &= " AND fk_lu_type = " & fk_lu_type & " AND fk_staff = " & modDBConnect.currentUser!fk_staff
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Request_Item_?exists(item As String, Optional fk_lu_request_type As Integer = 0) As Boolean
   '--------------------------------------------------------------------------------
   'Tries to get exact match for an item, returns true if does
   'Used by inbox, when looks up a loinc code
   '--------------------------------------------------------------------------------
   
   Dim R As Result
   
   sql = "Select * from clin_requests.vwRequestNames where item ILIKE $$" & item & "$$"
   If fk_lu_request_type Then 
      sql &= " AND fk_lu_request_type = " & fk_lu_request_type
   End If
   sql &= " AND deleted = false"
   R = modDBConnect.exec_query(sql)
   Return r.count 
   
End

Public Function requests_get_items(sSearchText As String, fk_lu_request_type As Integer) As Collection
   '---------------------------------------------------------------------------------------------------------
   'Fetch all requests like searchtext, if already have a fixed type e.g pathology, search with that criteria
   'Note this is with laterality taken into account  .FIXME bring category names into line with
   'lu_request_type table
   '---------------------------------------------------------------------------------------------------------
   
   sql = "Select * from clin_requests.vwRequestNames where lower(item) ILIKE $$%" & sSearchText & "%$$" 
   If fk_lu_request_type Then sql &= " AND fk_lu_request_type = " & fk_lu_request_type
   sql = sql & " AND deleted = false ORDER BY type LIMIT 20 "
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Requests_Get_By_Request_Type(fk_lu_request_type As Integer, Optional request_name As String = "") As Collection
   '------------------------------------------------------------------------------------------   
   'return a collection of all requests of particular type filtered by request_name if present
   'unless fk_lu_request_type is 0, then entire table is searched.
   '------------------------------------------------------------------------------------------
   
   Dim sql As String 
   
   sql = "Select * from clin_requests.lu_requests WHERE "
   If fk_lu_request_type Then 
      sql &= "fk_lu_request_type = " & fk_lu_request_type & " AND "
   End If
   sql &= " item ILIKE $$%" & request_name & "%$$"
   sql &= " AND deleted = false  ORDER BY item"
   Return modDBConnect.exec_query_collection(sql)
   
End 

Public Function RequestForm_ResultsShow(fk_form As Integer, fk_lu_request_item As Integer) As String
   '-----------------------------------------------------------------------
   'embryonic
   'display the result of a test temporarily hard coded during development
   'for proof of concept
   '----------------------------------------------------------------------
   
   sql = "Select * from clin_requests.vwRequestResults where fk_form =" & fk_form
   sql &= " AND fk_lu_request_item = 617" ' a FBC
   $Result = modDBConnect.BeginTrans()
   $Result = modDBConnect.exec_query(sql)
   If $Result.count Then
      Return $Result!HTML
   End If
   $Result = modDBConnect.CommitTrans()
   
End

Public Function Results_Get(fk_patient As Integer) As Collection
   '----------------------------------------------------------------------------
   'Get all documents that could be considered a result - may not be 'numerical'
   'e.g could be a scanned in old Xray or path, ecg etc
   'Note these could as yet be 'unfiled' - ie not marked off by the doctor
   'intended to receive these, but they will still be displayed in the patients
   'records annotated as such
   'FIXME: consider this: scanned documents have no date-requested
   'maybe union the query, make the date requested = date created
   '----------------------------------------------------------------------------
   
   Dim sql As String
   
   sql = "Select * from documents.vwDocuments where fk_patient = " & fk_patient
   sql &= " AND fk_lu_display_as = " & const.Document_Display_As_Result
   sql &= " AND deleted = false  ORDER BY date_created desc"
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function RequestForms_Get(fk_patient As Integer, Optional Order_by As String = "consult_date", Optional Asc_Desc As String = "DESC") As Collection 
   '----------------------------------------------------------------------------------------------------
   'Retrieve all request forms for patient, optionally ordered by a field in ascending/descending order
   'Default = order by consult_date in descending (latest to oldest) order
   'fixme I've renamed the view so go back and rename this as RequestsOrdered_Get()
   '----------------------------------------------------------------------------------------------------
   
   Dim sql As String
   
   sql = "Select * From clin_requests.vwRequestForms WHERE fk_patient = " & fk_patient & " AND deleted = false"
   sql &= " Order by " & Order_by & " " & Asc_Desc
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Sub RequestForm_Preview(RequestForm As Collection)
   '-------------------------------------------------
   'Load the LaTex of the request form onto a new tab
   '-------------------------------------------------   
   
   If Not IsNull(RequestForm!latex) Then 
      Try FClinical.Editor_ShowPage_External("pdf file", "Request Form " & Format(RequestForm!date, "dd/mm/yyyy"), modPrinting.Latex_To_PDF(RequestForm!latex))
      If Error Then
         Message.info("An error occurred whilst attempting to show the request form.") 
      Endif
   Else
      Message.Info("No LaTex template was found for this file.")
   End If    
   
End


Public Sub RequestForm_Delete(currentconsult As Cconsult, requestform As Collection)
   '-----------------------------------------------------------------------------------
   'Delete's the current request form
   'If it was ordered this consult - just deletes it but creates a reversal audit trail
   'If ordered a previous consult strike-through the text in the notes and add text
   'to the progress notes showing who deleted it and why and put in an audit trail 
   '-----------------------------------------------------------------------------------
   
   Dim fk_progressnote As Integer
   Dim fk_form As Integer
   Dim pn As Collection
   Dim fk_reason As Integer
   Dim reason As String
   
   If Format(RequestForm!consult_date, "dd/mm/yyyy") <> Format(Now(), "dd/mm/yyyy") Then 
      '------------------------------------------------------------------- 
      'This request has been written  before today, so need an audit trail
      '------------------------------------------------------------------- 
      If Message.Warning("Are you sure you wish to delete this request for:\n\n" & RequestForm!requests_summary & "\n\nAn audit trail will be created if you proceed.", "Yes", "No") = 2 Then Return 
      fk_progressnote = RequestForm!fk_progressnote
      fk_form = RequestForm!fk_form
      For Each PN In currentconsult!progress_notes
         If PN!pk_progressnote = fk_progressnote Then
            pn!notes = "<strike>" & pn!notes & "</strike><BR>"
            Faudit.Init(": Delete Request Form", "clin_consult.progressnotes/clin_requests.forms", "Requests summary:" & RequestForm!requests_summary)
            fk_reason = FAudit.ShowModal() 
            modDBConnect.CommitTrans()  'otherwise if a new reason it won't have been comitted
            reason = modAudit.Get_Reason_Using_pk(fk_reason)
            pn!notes &= "<small><B><I>Audit note:</B> this request form was deleted by " & modDBConnect.currentUser!wholename & " on " & Format(Now, "dd/mm/yyyy") & " who gave this explanation: '" & reason & "'</I></small>"
            modDBConnect.update("clin_consult.progressnotes", Null, ["pk": fk_progressnote, "notes": pn!notes])
            modAudit.MakeAudit(currentconsult, "mark deleted", "clin_consult.progressnotes", RequestForm!fk_form, const.cSection_Requests, pn!notes)
            Break
         Endif
      Next
   Else
      '------------------------------------------------------------------------------- 
      'This request has been written today, so just reverse it and audit as a reversal
      'and mark this progress note as deleted
      '------------------------------------------------------------------------------- 
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": RequestForm!fk_progressnote, "deleted": True])
      modAudit.MakeAudit(currentconsult, "reversal", "clin_consult.progressnotes", RequestForm!fk_form, const.cSection_Requests, RequestForm!requests_summary)
   End If
   
   modDBConnect.update("clin_requests.forms", Null, ["pk": RequestForm!fk_form, "deleted": True])
   modDBConnect.exec_query("Update clin_requests.forms_requests set deleted = True where fk_form = " & RequestForm!fk_form)
   modDBConnect.CommitTrans() 
   FClinical.Refresh_AllPreviousNotes() 
   FClinical.Refresh_Section(const.cSection_Requests)
   
End

Public Function RequestForm_UnDelete(currentconsult As CConsult, RequestForm As Collection)
   '-----------------------------------------------------------------------------
   'Un-Deletes a request form provided from the calling forms deleted collection
   'FIXME: check what happens to the audit trail created for this
   '----------------------------------------------------------------------------
   If Format(RequestForm!consult_date, "dd/mm/yyyy") <> Format(Now(), "dd/mm/yyyy") Then 
  'FIXME; will have to reverse the strike-through
   End If   
   modDBConnect.update("clin_requests.forms", Null, ["pk": RequestForm!fk_form, "deleted": False])
   modDBConnect.update("clin_consult.progressnotes", Null, ["pk": RequestForm!fk_progressnote, "deleted": False])
   modDBConnect.exec_query("update clin_requests.forms_requests set deleted = False where fk_form = " & RequestForm!fk_form)
   modDBConnect.CommitTrans()
   
End

Public Function Request_Picture_icon(type As String, item As String, HasResult As Boolean) As Picture
   
   Dim picname As String
   
   Select Case Lower(type)
      Case "pathology provider"
         Select Case LCase(item)
            Case "pap"
               
            Case "msu"
               picname = "icons/12/msu1212.png"
            Case "histopathology"
               picname = "icons/12/histology1212.png"
            Case Else
               If Hasresult Then
                  picname = "icons/12/bloodtube1212_greendot.png"
               Else
                  picname = "icons/12/bloodtube1212.png"
               End If
         End Select
      Case "radiology provider"
         picname = "icons/12/xray1212.png"
      Case "cardiovascular provider"
         picname = "icons/12/heart1212.png"
   End Select
   Return Picture[picname]
   
End

Public Sub RequestForm_Note_Save(Note As CRequestNote)
   '---------------------------------------------------
   'Saves a note for the request form on a per category
   'basis for future use to save typing
   '----------------------------------------------------
   
   sql = "insert into clin_requests.notes (fk_type,notes) "
   sql &= "VALUES ("
   sql &= note.fk_type & ",$$" & note.note & "$$)"
   $Result = modDBConnect.exec_query(sql)
   
End

Public Function RequestForm_Save(currentconsult As Cconsult, old_pk As String, RequestForm As Collection, Old_FormsRequests As Collection, formsRequests As Collection, Pictures As Collection) As Integer   
   '--------------------------------------------
   'PURPOSE    :Saves a request form
   'EXPECTS    :
   'RETURNS    :
   '
   'First, check if all the notes have keys
   '--------------------------------------------
   
   Dim notes As String[]
   Dim note As String 
   Dim fk_note As Integer
   Dim fk_form As Integer
   Dim newnote As Collection 
   Dim RQ As Collection 
   '--------------------------------------------------------------------
   'Keep the current users notes on the request
   'Why, makes typing easier every time they enter notes for a request
   'I think its going to be really hard to keep track of keys as this
   'data is delivered into the FRequests editnig area, so I won't bother
   'just check if the notes exist already and save if they don't
   '--------------------------------------------------------------------
   If RequestForm!notes_summary Then
      notes = Split(RequestForm!notes_summary, ";", "", True)
      For Each note In notes
         sql = "Select * from clin_requests.notes where upper(note) = upper($note$" & Trim(note) & "$note$)"
         If Not modDBConnect.exec_query(sql).count Then
            newnote = New Collection 
            newnote!note = note       
            newnote!fk_staff = modDBConnect.currentUser!fk_staff
            newnote!fk_lu_type = RequestForm!fk_lu_type
            fk_note = modDBConnect.insert("clin_requests.notes", newnote)
         End If
      Next
   End If
   '-------------------------------------------------------------------
   'Next, save the actual request form, these should mostly be there
   'currently only allowing 1 image per form, if we need two, should we
   'just join these into 1 eg diagram/photo stitched into 1 png?
   '-------------------------------------------------------------------
   '  fk_consult
   '  date     'may <> consult!date
   '  fk_branch 
   '  fk_lu_type - key to clin_requests.lu_type table e.g 1 = pathology 
   '  requests_summary
   '  notes_summary
   '  medications_summary
   '  form_html 
   '  copyto
   '  copyto_patient
   '  urgent
   '  bulk_bill 
   '  fasting
   '  phone
   '  fax
   '  include_medications
   '  fk_image                   
   '  forms_results_html 
   '
   '  A Forms requests are saved in clin_requests.forms_requests
   '  
   '   fk_form                   key to clin_requests.forms table
   '   fk_lu_request             key to clin-requests.lu_requests table
   '--------------------------------------------------------------------
   'If a new request form, get its pk
   '---------------------------------
   If IsNull(RequestForm!fk_form) Then
      RequestForm!fk_consult = currentconsult.GetPK()
      RequestForm!fk_form = modDBConnect.insert("clin_requests.forms", RequestForm)
   Else
      modDBConnect.update("clin_requests.forms", currentconsult!requests_ordered_this_consult[old_pk], RequestForm, "fk_form")
   End If
   '-------------------------------------------------------------------------
   'Now, as this form could be being edited could have deleted or added items
   'either update or insert the item.
   '-------------------------------------------------------------------------
   For Each RQ In FormsRequests
      '  fix me using this is not correct
      RQ!fk_form = RequestForm!fk_form
      If IsNull(RQ!fk_lu_request) Then
         RQ!fk_lu_request = RQ!pk  'was the pk of lu_requests table.
      End If   
      Try RQ.Remove("pk_view")
      Try RQ.Remove("type")
      Try RQ.remove("item")
      Try RQ.Remove("fk_lu_request_type")
      Try RQ.Remove("fk_laterality")
      Try RQ.Remove("instruction")
      Try RQ.Remove("fk_decision_support")
      Try RQ.Remove("fk_instruction")
      If Not IsNull(RQ!fk_forms_requests) Then
         
         modDBConnect.update("clin_requests.forms_requests", Old_FormsRequests[RQ!fk_forms_requests], RQ, "fk_forms_requests")
      Else
         RQ.Remove("pk")
         RQ!forms_requests_pk = modDBConnect.insert("clin_requests.forms_requests", RQ)
      End If
   Next
   
   Return RequestForm!fk_form
   
End

Public Function Notes_Parse_For_Images(Notes As String) As String
   '--------------------------------------------------------------
   'Expects string representing the html of clinical notes
   'which could contain images, line drawings/photos eg of a skin
   'lesion, and parses out the temporary file references to these
   'e.g src=/tmp/gambas.1000/3562/2.tmp.png
   'and substitutes the clin_consult.images.pk value after src=
   'when the clinical notes are re-loaded, then another temporary
   'file will be created and its path re-inserted into the notes
   '
   '------------------------------------------------------------
   
   Dim charpos As Integer = -1
   Dim afile As String
   Dim someFiles As String[]
   Dim x As Integer
   Dim sHtml As String
   Dim image_pk As Integer
   Dim acopy As String
   
   acopy = notes
   sHtml = Notes   
   someFiles = New String[]
   Do Until charpos = 0
      charpos = InStr(shtml, "src=/")
      If charpos Then
         shtml = Right(shtml, Len(shtml) - charpos - 3)
         charpos = InStr(shtml, ".png")
         someFiles.Add(Left(shtml, charpos + 3))
         sHtml = Right(shtml, Len(shtml) - charpos - 3)
      End If
   Loop 
   For Each afile In someFiles
      image_pk = modConsultDBI.Image_Save(afile)
      Notes = Replace$(Notes, "src=" & afile, "pk_image=" & Str$(image_pk))
   Next
   Wait
   Return Notes
   
End

Public Function Inbox_Get_Person(F As FInbox) As Integer 
   '-------------------------------------------------
   'Attempts to get a person as the sender of the hl7
   '------------------------------------------------- 
   
   With F
      .txtOrganisation!text = ""
      .txtSendingentity.Background = Color.White
      .txtBranch.text = ""
      .txtSuburb.text = ""
      .txtStreet1.text = ""  
      .txtState.text = ""
      .txtPostcode.text = ""
      .txtCategory.text = ""
      .chkHeadOffice.value = False
   End With
   
End

Public Function Request_Provider_Get(pk_request_provider As Integer) As Collection
   'Returns a collection representing a specific request provider   
   
   Return modDBConnect.exec_query_first("Select * from clin_requests.vwRequestProviders where pk_request_provider = " & pk_request_provider)
   
End

Public Sub Request_Providers_Get(fk_lu_request_type As Integer) As Collection
   'Collection is keyed to pk of clin_requests.request_provider as pk_request_provider
   
   Return modDBConnect.exec_query_collection("Select * from clin_requests.vwRequestProviders where fk_lu_request_type = " & fk_lu_request_type)
   
End

Public Sub Request_Providers_Save(old_data As Collection, pk_view As Integer, request_provider As Collection) 
   '---------------------------------------------------------------------------------------
   'Saves or modifies info about those who can be sent requests by the practice, eg for FBC
   '---------------------------------------------------------------------------------------
   
   If IsNull(request_provider!pk_request_provider) Then
      request_provider!fk_request_Provider = modDBConnect.insert("clin_requests.request_providers", request_provider)
   Else
      modDBConnect.update("clin_requests.request_providers", old_data[pk_view], request_provider, "pk_request_provider")
   Endif
   
End
