' Gambas class file

' Copyright (C) 2008-2013 Dr Richard TERRY
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
' NOTE: 01Aug11: IAN README.
'        This module is a total mess as I'm changing it from being a
'        simple scratch pad and integrating it with the task manager
'        to enable users to complete allocated tasks
'        so ... just wait.................. it will crash
'------------------------------------------------------------------------
Private bExit As Boolean
Private pk_scratchpad As Integer           '  mnuScratchPad_HistoryEntire
'  mnuScratchPad_HistoryEntire
Private iCurrentKey As Integer
Private currentconsult As CConsult
Private ScratchPadItem As Collection
Private bEditing As Boolean
Private iUserFilter As Integer  'const.cScopeCurrentUser or const.cScopeAllUsers
Private iAuditFilter As Integer 'all items or current item.
Private fk_progressnote As Integer
Private fk_table_row As Integer        'fixme fim my name = e.g fk_document
Private schema As String
Private table As String
Private tasks As Collection
Private task As Collection

Public Sub Set_Audit_Schema_Table_SourceRowKey(k As Integer, s As String, t As String)
   '-----------------------------------------------------
   'if the scratch pad  is embedded in another form which
   'wants to keep track of this scratch pad item, then
   'this collection is set by the calling form
   '------------------------------------------------------

   fk_table_row = k
   table = t
   schema = s

End

Public Sub mnuScratchPad_Click()
   '-----------------------------------------------------------
   'The popup menu has been activated, user has selected one of
   'the options, each of which as a tag in the IDE gui code
   '-----------------------------------------------------------

   If gvTasks.row = -1 Then Return
   Select Case Last.tag
      Case "filter current user"
         iUserFilter = Const.cScopeCurrentUser
         Reload()
      Case "filter all users"
         iUserFilter = Const.cScopeAllUsers
         Reload()
      Case "font"
         modUtil.Columnview_SetFont(gvTasks, "FScratchPad")
      Case "help"
         modUtil.NotImplemented("Help for Tasks")
      Case "view in context"
         modUtil.NotImplemented("Viewing in context")
      Case "task audit trail"          'show the document's audit trail
         Try Document_AuditTrail_Show(tasks[gvTasks.row]!fk_row)
      Case "complete"
         If Not IsNull(tasks[gvTasks.row]!fk_row) Then  ' attatched to a document
            StaffTask_Finalise_For_Document(tasks[gvTasks.row]!fk_row)
         Else
            StaffTask_Finalise_Non_Document_Task(tasks[gvTasks.row])
         End If
      Case "complete with explanation"
         If Not IsNull(tasks[gvTasks.row]!fk_row) Then  ' attatched to a document
            StaffTask_Finalise_For_Document(tasks[gvTasks.row]!fk_row, True)
         Else
            StaffTask_Finalise_Non_Document_Task(tasks[gvTasks.row], True) ''BUG HERE
         End If

      Case Else
         '  modScratchPadMenu.Process(currentconsult!scratchpad[pk_scratchpad], Last.tag, currentconsult)
         ' Reload()

   End Select

End

Public Sub Document_AuditTrail_Show(fk_document As Integer)
   '---------------------------------------------------------
   'Display html of the audit trail of a document
   'At the moment - only displaying staff tasks if they exist
   '---------------------------------------------------------

   Dim sHtml As String

   sHtml = modArchiveDocumentsDBI.Staff_Tasks_Document_Audit_Trail(fk_document)
   shtml &= "<HTML><BODY><TABLE><BR><B>Document Actioning</B><BR>" & modHTML.HTML_Template_Audit_Row_Heading()
   shtml &= modAudit.MakeTrail("documents.documents", fk_document)
   shtml &= "</TABLE>"
   shtml &= "</BODY></HTML>"
   FClinical.Editor_ShowPage_External("browser", "Audit Trail", sHtml)

End

Public Sub StaffTask_Finalise_Non_Document_Task(task As Collection)
   '---------------------------------------------------------
   'Finalise a staff task which was not related to a document
   '---------------------------------------------------------
   'fixme allow finalisation by a role
   '-----------------------------------------------------------------------------------------

   Dim theTask As Collection = tasks[gvTasks.Row]
   Dim StaffTask As New Collection
   Dim audit As New Collection

   ' audit!fk_row = fk_document
   '-----------------------------------------------------------
   'first check if this person is allowed to finalise the task
   'FIXME REMOVE Or IsNull(theTask!fk_staff_must_finalise), had to put this in due to developmental database changes
   ' till I cleared all tasks where this was a factor.
   '-----------------------------------------------------------
   If theTask!fk_staff_must_finalise = modDBConnect.currentUser!fk_staff Or IsNull(theTask!fk_staff_must_finalise) Then
      modDBConnect.BeginTrans
      modAudit.MakeAudit(currentconsult, "staff task finalised", "clerical.tasks", tasks[gvTasks.Row]!fk_task, const.cSection_StaffTasks, " by " & modDBConnect.currentUser_FullName())
      StaffTask!pk = theTask!fk_task
      StaffTask!fk_staff_finalised_task = modDBConnect.currentUser!fk_staff
      StaffTask!date_finalised = Now
      If modDBConnect.update("clerical.tasks", Null, staffTask) Then
         modDBConnect.CommitTrans
         FClinical.Notifications_Refresh_External()
         Reload()
      Else
         modDBConnect.RollBack()
      Endif

   Else
      Message.title = "Tasks Finalisation"
      Message.Info("Sorry, you do not have permission to finalise this task")
   End If

End

Public Sub StaffTask_Finalise_For_Document(fk_document As Integer, Optional bIncludeExplanation As Boolean = False)
   '-----------------------------------------------------------------------------------------
   'Flag the task attatched to a document as complete FIXME integrate with simple scratch pad
   'fixme allow finalisation by a role
   '-----------------------------------------------------------------------------------------

   Dim theTask As Collection = tasks[gvTasks.Row]
   Dim StaffTask As New Collection
   Dim reason As String
   Dim fk_reason As Integer

   '-----------------------------------------------------------
   'first check if this person is allowed to finalise the task
   'FIXME REMOVE Or IsNull(theTask!fk_staff_must_finalise), had to put this in due to developmental database changes
   ' till I cleared all tasks where this was a factor.
   '-----------------------------------------------------------
   If theTask!fk_staff_must_finalise = modDBConnect.currentUser!fk_staff Or IsNull(theTask!fk_staff_must_finalise) Then
      If bIncludeExplanation Then
         Faudit.Init(": Add explanation", "Clerical.tasks", tasks[gvTasks.Row]!task & " " & tasks[gvTasks.Row]!details)
         fk_reason = FAudit.ShowModal()
         modDBConnect.CommitTrans()  'otherwise if a new reason it won't have been comitted
         reason = modAudit.Get_Reason_Using_pk(fk_reason)
      End If
      modDBConnect.BeginTrans

      modAudit.MakeAudit(currentconsult, "staff task finalised", "documents.documents", fk_document, const.cSection_StaffTasks, reason) '" by " & modDBConnect.currentUser_FullName())

      StaffTask!pk = theTask!fk_task
      StaffTask!fk_staff_finalised_task = modDBConnect.currentUser!fk_staff
      StaffTask!date_finalised = Now
      If modDBConnect.update("clerical.tasks", Null, staffTask) Then
         modDBConnect.CommitTrans
         FClinical.Notifications_Refresh_External()
         Reload()
      Else
         modDBConnect.RollBack()
      Endif

   Else
      Message.title = "Tasks Finalisation"
      Message.Info("Sorry, you do not have permission to finalise this task")
   End If

End

Public Sub Delete()
   '-----------------------------------------------
   'Delete current scratch pad item enforcing audit
   '-----------------------------------------------

End

Public Sub Mark_Completed()
   '---------------------------------------------------------------------
   'Mark the highlighted scratchpad item as completed with no explanation
   '---------------------------------------------------------------------

End

Public Sub Mark_Completed_With_Explanation()
   '---------------------------------------------------------------------
   'Mark the highlighted scratchpad item as completed with  explanation
   '---------------------------------------------------------------------

End

Public Function Consult_Exists() As Boolean
   '-----------------------------------------------------
   'If the consult as been passed to the form return true
   '-----------------------------------------------------

   If IsNull(currentconsult) Then Return False
   Return True

End

Private Sub Settings_Load()

   gvTasks.Font = Font[Settings["FScratchpad/gvTasks.font", "DejaVu Sans,7"]]

End

Public Sub Reload()
   '-----------------------------------------------------------------------
   'Temporary as I'm going to merge scratch pad and tasks
   '-----------------------------------------------------------------------

   Dim task As Collection
   Dim x As Integer

   If Not currentconsult Then Return
   currentconsult.Refresh("staff_tasks")
   gvTasks.Clear()
   tasks = modUtil.Copy_Collection_Keyed_Sequentially(currentconsult!staff_tasks)
   For Each task In tasks
      Inc gvTasks.Rows.Count
      With gvTasks[x, 0]
         .text = Format(Task!date_component_logged, "dd/mm/yyyy") & "  "
         .Alignment = Align.Top
      End With
      gvTasks.Rows[x].Height = 30
      With gvTasks[x, 1]
         .WordWrap = True
         .RichText = "<B>" & Task!related_to & "</B><BR>" & Task!details
         .Alignment = Align.Left
      End With
      Inc x
   Next
   lblmeasure.font = gvTasks.Font
   modUtil.Gridview_Columns_Set_Size(gvTasks, lblmeasure)

End

Public Function Consult_Set_Null()
   '-----------------------------------------------------
   'If the consult as been passed to the form return true
   '-----------------------------------------------------

   currentconsult = Null

End

Public Sub Init(cons As CConsult)
   '-------------------------------------------------------------
   'set current consult and scratch pad columns, refresh the list
   '-------------------------------------------------------------

   currentconsult = Cons
   With gvTasks
      .Columns.count = 2
      .Columns[0].Text = "Date"
      .Columns[0].Alignment = Align.Top
      .Columns[1].Text = "Related to"
      .Columns[1].Alignment = Align.Top
   End With
   Settings_Load()
   iUserFilter = Const.cScopeAllUsers
   iAuditFilter = Const.cDisplay_All
   Reload()

End

Public Sub gvTasks_Menu()

   '----------------------------------------------------------
   ' Popup a menu on the scratch pad with the following items
   ' If a consult is in existance, and there are scratch pad
   ' items visible to the user
   '    delete
   '    complete
   '    complete with explanation
   '    filter current user
   '    filter all users
   '  mnuScratchPad_HistoryEntire
   '    font
   '    help
   '    show history
   '    view in context
   '---------------------------------------------------------

   Dim menuitem As Menu
   Dim x As Integer

   If Not currentconsult Then Return
   If gvTasks.Rows.count = 0 Then
      '-------------------------------------------------------------
      'allow the menu, but only couple of things
      '  mnuScratchPad_HistoryEntirew entire pad history or above
      '-------------------------------------------------------------
      For Each menuitem In mnuScratchPad.Children
         Select Case menuitem.Tag
            Case "audit trail all", "help", "exit"
               menuitem.Enabled = True
            Case Else
               menuitem.Enabled = False
         End Select
      Next
   Else
      '-------------------------------------
      'Turn them back on it already disabled
      '-------------------------------------
      For Each menuitem In mnuScratchPad.Children
         menuitem.Enabled = True
      Next
   End If
   '  cvwTasks_Select()       'set the key again
   mnuScratchPad.Popup()

End
