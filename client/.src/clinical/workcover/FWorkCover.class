' Gambas class file
' Copyright (C) 2008,2009 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

' NOTES ABOUT THIS FORM AND CLIN_WORKCOVER TABLES
'
' clin_workcover.claims = core unchangable data for the claims
' clin_workcover.visits = everything that can or does change including the diagnosis
' date_injury is not a mandatory date field as it could be vague eg Mid janury 2009
' If changing this code be very very careful about capitalisation as the database
' fields are case-sensitive and hence any accident may cause 'disappearance' of data
'-----------------------------------------------------------------------------------
Private bEmbedded As Boolean
Private bDateInvalid As Boolean
Private bkeyvalid As Boolean
Private bexit As Boolean
Private bEditing As Boolean
Private claim As Collection 
Private claims As Collection
Private icurrentClaim As Integer
Private bNewClaim As Boolean
Private visit As Collection 
Private visits As Collection  'all the visits in a claim
Private ivisit As Integer '0 - n visit
Private branch As Collection 
Private branches As Collection
Private occupation As Collection
Private occupations As Collection 
Private Claims_Forms As Collection 'of forms for a claim
Private iCurrentClaimform As Integer 
Private iCurrentKey As Integer
Private FPreview As FHtmlViewer
Private currentconsult As CConsult
Private bClaimLoaded As Integer
Private bVisitLoaded As Integer
Private fk_claim As Integer
Private fk_visit As Integer
Private fk_occupation As Integer 'key to common.lu_occupations = workers occupation
Private fk_branch As Integer
Private fk_person As Integer
Private fk_town As Integer
Private fk_organisation As Integer
Private pk_view_claim As Integer
Private pk_view_visits As Integer
Private fk_code As String  'see coding.generic_terms table
Private fk_coding_system As Integer 'e.g 1 = icpc2Plus 2 = icd10
Private FLastWorkCoverForm As FPDF
Private ProgressNotesPage As FProgressNotePage
Private cSection_LastForm As Integer = 0
Private cSection_Claims As Integer = 1
Private cSection_ProgressNotes As Integer = 2
Private fk_pasthistory As Integer
Private cProgressNote_Section As Integer
Private NextTextBox As Textbox
Private fk_progressnote As Integer
Private hObs As Observer
Private terms As Collection 
Private comms As Collection                                             'of comms for the branch
Private pdfForm As Fpdf
Private printer_name As String 
'TODOS:
'        implement look up previous claim numbers

Public Sub set_embedded(flag As Boolean)
   '--------------------------------------------------
   'If this form is embeded from another form set flag
   '--------------------------------------------------
   bEmbedded = flag
End

Public Sub Form_Close()
  Settings_Save()
End

Public Sub Init(cons As CConsult)
   '---------------------------------------------------------------------------
   'Load settings, do a little gui-homework
   'Fetch all current workcover claims
   'Highlight the last claim in the list and its last visit, FIXME DO THIS
   'and assume a new visit for this claim ie - place user in partial edit mode
   'of the existing claim tbWebBrowserBack
   '--------------------------------------------------------------------------
   currentconsult = cons
   DateChooser1.Value = Now()
   With pdfForm = New FPdf(Me)                                             'pdf's of workcover forms shown here in preview
        .Visible = False  
   End With
   hObs = New Observer(pdfForm.tbClose) As "pdfForm_Close"
   FPreview = New FHtmlViewer(Me)
   
   With FPreview
      .tbWebBrowserBack.visible = False   
  '   .tbWebBrowserForeward.visible = False  
   '   .lblWebBrowserNotes.text = ""
   End With
 
   FPreview.visible = False
   FLastWorkCoverForm = New FPdf(Vbox_LastForm)
   Settings_Load()              'load split sizes and browser zoom for this form"
   With ProgressNotesPage = New FProgressNotePage(VBox_ProgressNotes)
      .set_fk_section(const.cSection_Workcover)
      .lblNotesFor.text = "Workcover Notes"
      .Init(currentconsult)
   End With
   cvwVisits.Columns.Count = 4
   cvwVisits.Columns[0].width = 60  'date
   cvwVisits.Columns[1].width = 80  'TYPE
   cvwVisits.Columns[2].width = 150  'diagnosis
   cvwVisits.Columns[3].width = 150  'management
   ColumnView2.Columns.count = 4
   columnview1.Columns.count = 2       
   bexit = True
   modEditAreaHelpers.Set_ICD10(chkicd10, lblCodingSystem)
   bexit = False
   Reload()
End

Public Sub LastForm_Display(sHtml As String)
   Dim Filename As String
   
   filename = modPrinting.Latex_To_PDF(WorkcoverForm_LaTeX_Construct().GetData())
    FLastWorkCoverForm.Load_PDF(Filename)
  ' FLastWorkCoverForm.lblWebBrowserNotes.text = "Forms for claim:" & claim!identifier
 '  modHTML.Display_HTML(shtml, FLastWorkCoverForm.WebView1, "last_workcover_form")
   ' FLastWorkCoverForm.WebView1.HTML = shtml
End


Public Sub Save()
   '-------------------------------------------------------
   ' Save The work cover consult and its current visit
   ' validate data especially dates and integers eg hours
   ' sets focus back to appropriate text box if invalid
   '------------------------------------------------------
   Dim sProgressNotes As String

   If VBox_EditAArea_Outer.padding = False Or Not EditArea_Contents_Valid() Then Return 
   If cmbPrinters.Index = -1 Then
      If Message.Warning("You are not selected a printer for this document, are you sure you want to continue?", "Yes", "No") = 2 Then Return 
   Endif
   '-------------------------------------------------
   'Note: the branch or person must exist in contacts
   'without one of the other cannot save
   '-------------------------------------------------
   If Not fk_branch Then
      If Not fk_person Then
            Missing_Employer_Hint()
            Return
      End If
   End If 
   '--------------------------------------------------
   'Get all the data for the claim or update if exists
   'clin_workcover.claims table
   '    pk serial NOT NULL,           -- created during save if new
   '    fk_consult integer NOT NULL,  -  inserted during save
   '    claim_number text,            -- claim number for this workcover claim
   '    fk_occupation integer,        -- foreign key to common.lu_occupations table = occupation of employee in this employ
   '    fk_branch integer,            -- foreign key to contacts.data.organisations table or 
   '    fk_person integer             --foreign key to contacts.data_persons table where the employer is a person and not a company
   '    hours_week_worked integer,  
   '    mechanism_of_injury text,
   '    date_injury text NOT NULL, -- if known, the date of injury ?how to handle vague dates here, so have made this text for now
   '    contact_person text,
   '    memo text,
   '    accepted as boolean
   '    identifier text NOT NULL,   -- e.g left shoulder injury
   '--------------------------------------------------
  
   claim!claim_number = Trim(txtClaim.text)
   claim!fk_occupation = fk_occupation
   If fk_occupation = 0 Then
      '----------------------------------
      'new occupation needing to be saved
      '----------------------------------
       claim!occupation = Trim(txtOccupation.text) 'will be dropped later
   Else
       Try claim.Remove("occupation")
   End If
   claim!fk_branch = fk_branch
   If fk_person <> 0 Then claim!fk_person = fk_person
   Try claim!hours_week_worked = Val(txtHoursWorked.text)
   claim!mechanism_of_injury = Trim(txtMechanismInjury.text)
   claim!date_injury = Trim(txtDateInjury.text)
   claim!contact_person = Trim(txtContactPerson.text)
   claim!memo = Trim(txtMemo.text)
   claim!identifier = Trim(txtIdentifier.text)
   claim!accepted = CBool(chkClaimAccepted.value)
   '--------------------------------------
   'Now the visit for today for this claim
   ' Clin_workcovers.visits table
   '   pk serial NOT NULL,             -- created druging save
   '   fk_claim integer NOT NULL,       -- foreign key linking to clin_workcover.claims.
   '   fk_lu_visit_type integer NOT NULL, -- key to lu_visit_type table 
   '                                   -- set in editarea_clear or user clicking on option buttons
   '   diagnosis text NOT NULL, -- free hand text of diagnosis
   '   diagnosis_code text, -- key to snomed codes or icpc, probably not text, but fix this later
   '   management_plan text, -- description of the managment plan
   '   review_date date, -- Date the treatment plan will be reviewed
   '   assessworkplace boolean NOT NULL DEFAULT false, -- set by clicking gui
   '   hours_capable integer, -- number of hours in the day capable
   '   days_capable integer, -- number of days in a week capable of working
   '   restrictions text, -- restrictions
   '   capabilities text, 
   '   fk_caused_by_employment integer NOT NULL,
   '   doctor_consented boolean DEFAULT true, -- if true doctor consented. set in EditArea_visit_clear
   '   worker_consented boolean DEFAULT true, -- if true worker consented. set in EditArea_visit_clear
   '   fitness_preinjury_from date,
   '   fitness_suitable_from date,
   '   fitness_suitable_to date,
   '   fitness_unfit_from date,
   '   fitness_unfit_to date,
   '   fitness_perm_mod_duties_from date,
   '   fk_consult integer,
   '   form_html text,
   '
   '  Now add the comparable fields from the gui
   '  Note that those missing where set when option button or
   '  checkbox clicked or set in the gui ie, type of consult.
   '  fk_lu_visit_type
   '  assessworkplace
   '  fk_caused_by_employment
   '  doctor_consented
   '  worker_consented
   '--------------------------------------
   If fk_claim Then
      visit!fk_claim = fk_claim
   Endif
   visit!diagnosis = Trim(txtDiagnosis.text)
   visit!fk_code = fk_code  'fk_code is string, if "" will set this to null
   If fk_coding_system <> 0 Then visit!fk_coding_system = fk_coding_system
   visit!management_plan = Trim(txtManagementPlan.text)
   Try visit!review_date = Trim(txtReviewDate.text)
   Try visit!hours_capable = Val(txtCanWork_HrsPerDay.text)
   Try visit!days_capable = Val(txtCanWork_DaysPerWeek.Text)
   visit!restrictions = Trim(txtRestrictions.text)
   visit!capabilities = Trim(txtCapabilities.text)
   Try visit!fitness_preinjury_from = Val(txtPreInjury_From.text)
   Try visit!fitness_suitable_from = Val(txtSuitable_From.text)
   Try visit!fitness_suitable_to = Val(txtSuitable_To.text)
   Try visit!fitness_unfit_from = Val(txtUnfit_From.text)
   Try visit!fitness_unfit_to = Val(txtUnfit_To.text)
   Try visit!fitness_perm_mod_duties_from = Val(txtPermModDuties_From.text)
  
   If rbAssessWorkplaceYes.value = True Then
      visit!assessworkplace = True
   Else
      visit!assessworkplace = False 
   End If   
   visit!doctor_consented = CBool(chkAgreeToTreat_Doctor.value)
   visit!worker_consented = CBool(chkAgreeToTreat_Worker.value)
   sProgressNotes = Claim_Construct_ProgressNotes_structured_HTML().GetData()
   'only save keys
   visit.remove("visit_type")
   visit.remove("visit_date")
   visit.remove("caused_by_employment")
   visit.remove("worker_consented_text")
   visit.remove("doctor_consented_text")
   visit.remove("coded_term")
   visit.remove("coding_system")
   '-------------------------------
   'Ok, data is valid, start saving
   '-------------------------------
   modDBConnect.BeginTrans()
      visit!fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, sProgressNotes, const.cSection_Workcover, fk_progressnote, "workcover", 0, False)
      fk_claim = modWorkCoverDBI.Save(currentconsult, pk_view_claim, claim, visit) 
   modDBConnect.CommitTrans()
   '------------------
   'print in duplicate
   '------------------
  ' Visit_Print()
   Reload()
  '  FClinical.Refresh_AllPreviousNotes()
End

Public Sub Reload()
   '-------------------------------------------------------
   'refresh the claims
   'If an existing claim then refresh everything and
   'set gui to display the last claim form, and within
   'the editing area highlight the Last claim And visit
   'assume add a new visit to this existing claim
   '-------------------------------------------------------
   Claims_Refresh()                  'refresh currentconsult!workcover_claims collection
   If lvwClaims.count Then           'and show in the list
      lvwClaims.MoveLast()           'move to the latest claim
      lvwClaims.Item.Selected = True 'highlight that row with marquee
      Visits_Refresh()               'now show all visits for that claim
      cvwVisits.MoveLast()           'move to last visit in the list
      cvwVisits.Item.Selected = True 'highlight with  marquee 
      lvwClaims_Select()             'setspkviewclaim, load claim collection
   '   Claim_Display()                'display claim only details at top edit area
      '----------------------------------------------------------
      'Display the last form in the series - this will be the one
      'on the view row of the last row in cvwVisits, the internal
      'cursor is already sitting on that row
      '----------------------------------------------------------
      iCurrentClaimform = Claims_Forms.Count
      LastForm_Display(Claims_Forms[Claims_Forms.count])
      tabstrip1.index = 0           'Show the last form
      HBox_WorkcoverHeading.Visible = False
      'temporary I'm trying to see if we can use this
      'field in clin_consult.progress notes to display all 
      'notes for a particular claim.
 '     ProgressNotesPage.Set_pk_pastHistory(fk_claim)
  '    ProgressNotesPage.Set_fk_section(const.cSection_Workcover)
   '   ProgressNotesPage.Init(currentconsult)
     Else
      '--------------------------------------------------
      'no claims yet exist > straight to create a new one
      '--------------------------------------------------
      Claim_New() 
      tabstrip1.index = 1
      HBox_WorkcoverHeading.Visible = True
    End If           
 
  
End

Public Function EditArea_Contents_Valid() As Boolean
   '----------------------------------------------------
   'Validates data returns True if ok
   'Start with some sort of minimal data set
   '----------------------------------------------------
   Dim date_exists As Boolean
      '------------------------------------------------------------------------------------
   'If patient totally unfit, then don't need hours of work or restrictions
   '------------------------------------------------------------------------------------

  If Trim(txtIdentifier.text) = "" Then
     txtIdentifier.SetFocus()
     Return False
   End If 
   If fk_branch = 0 Then 
       Missing_Employer_Hint()
      txtemployer.SetFocus()
      Return False
   End If
   If txtDateInjury.text = "" Then 
      txtDateInjury.SetFocus()
      Return False
   End If
   If txtMechanismInjury.text = "" Then
      txtMechanismInjury.SetFocus()
      Return False
   End If

   If txtDiagnosis.text = "" Then
      txtDiagnosis.SetFocus()
     Return False
   End If
   If txtManagementPlan.text = "" Then
      txtManagementPlan.SetFocus()
      Return False
   End If
   'Don't need a review date if is PMD or Pre-Injury
   If txtReviewDate.text = "" And Not IsDate(Val(txtPreInjury_From.text)) Then
     If txtReviewDate.text = "" And Not IsDate(Val(txtPermModDuties_From.text)) Then
        txtReviewDate.SetFocus()
        Return False
     End If
   End If
      
         ' 
         ' If Not IsDate(Val(txtReviewDate.text)) Then 
         '     txtReviewDate.SetFocus()
         '     Return False
         ' End If
         ' 
   
   '----------------------------------------------------------------------------------------------------------------------------
   'Now it gets complicated - how much to validate date  - first make sure paired dates are matched
   '----------------------------------------------------------------------------------------------------------------------------
    If Not IsDate(Val(txtPreInjury_From.text)) And Trim(txtPreInjury_From.text) <> "" Then 
         txtPreInjury_From.SetFocus()
         Return False
   End If
   '----------------------------------------------
   'enforce paired dates for unfit form-unfit to
   '----------------------------------------------   
   If Trim(txtUnfit_From.text) <> "" Then                       'if have suitable from date
       If Not IsDate(Val(txtUnfit_From.text)) Then              'is it valid ?No
         txtUnfit_From.SetFocus()                               'try again
         Return
       End If
       If Not IsDate(Val(txtUnfit_To.text)) Then                'must have valid suitable to
          txtUnfit_To.SetFocus()
         Return False
       End If
   End If
   '----------------------------------------------
   'ditto for suitable, if have from, must have to
   '----------------------------------------------
   If Trim(txtSuitable_From.text) <> "" Then                       'if have suitable from date
       If Not IsDate(Val(txtSuitable_From.text)) Then              'is it valid ?No
         txtSuitable_From.SetFocus()                               'try again
         Return
       End If
       If Not IsDate(Val(txtSuitable_To.text)) Then                'must have valid suitable to
         txtSuitable_To.SetFocus()
         Return False
      End If
   End If
   If Not IsDate(Val(txtPermModDuties_From.text)) And Trim(txtPermModDuties_From.text) <> "" Then
      txtPermModDuties_From.SetFocus()
      Return False
   End If
   '-------------------------------------------------------------------------
  'At this point, still could have no dates, so put up a prompt
  '--------------------------------------------------------------------------
  If Trim(txtPreInjury_From.text) = "" And Trim(txtUnfit_From.text) = "" And Trim(txtSuitable_From.text) = "" And Trim(txtPermModDuties_From.text) = "" Then
      Message.info("You must record some sort of information about dates of unfitness work")
      Return False
   End If
   '------------------------------------------------------------------------------------
   'If patient totally unfit, then don't need hours of work or restrictions
   '------------------------------------------------------------------------------------
   If Trim(txtUnfit_From.text) <> "" And Trim(txtPreInjury_From.text) <> "" Then 
       If txtCanWork_HrsPerDay.text = "" Then
          txtCanWork_HrsPerDay.SetFocus()
          Return False
       End If
       If txtCanWork_DaysPerWeek.text = "" Then
          txtCanWork_DaysPerWeek.SetFocus()
         Return False
       End If
       If txtRestrictions.text = "" Then
          txtRestrictions.SetFocus()
          Return False
      End If   
  End If
   '----------------
   'Ah, success
   '----------------
   Return True
End

Private Sub Settings_Save()


     If bEmbedded Then
       Try Settings["Workcover_Embedded/VSplit_workcoverform"] = VSplit_WorkcoverForm.Layout 
       Try Settings["Workcover_Embedded/HSplit_WorkcoverClaims"] = HSplit_WorkcoverClaims.Layout
       Try Settings["Workcover_Embedded/default_zoom"] = FLastWorkCoverForm.WebBrowser1.Zoom
       Try Settings["Workcover_Embedded/default_zoom_preview"] = FPreview.WebBrowser1.Zoom
   Else
      Try Settings["Workcover/VSplit_workcoverform"] = VSplit_WorkcoverForm.Layout 
      Try Settings["Workcover/HSplit_WorkcoverClaims"] = HSplit_WorkcoverClaims.Layout
      Try Settings["Workcover/default_zoom"] = FLastWorkCoverForm.WebBrowser1.Zoom
      Try Settings["Workcover/default_zoom_preview"] = FPreview.WebBrowser1.Zoom
   End If
  

End

Private Sub Settings_Load()


     If bEmbedded Then
       Try VSplit_WorkcoverForm.Layout = Settings["Workcover_Embedded/VSplit_workcoverform"]
      Try HSplit_WorkcoverClaims.Layout = Settings["Workcover_Embedded/HSplit_WorkcoverClaims"]
      'Try FLastWorkCoverForm.WebBrowser1.iZoom = Settings["Workcover_Embedded/default_zoom", 1]
      Try FLastWorkCoverForm.WebBrowser1.Zoom = Settings["Workcover_Embedded/default_zoom", const.zoom[1]]
      Try FPreview.WebBrowser1.Zoom = Settings["Workcover_Embedded/default_zoom_preview", const.zoom[1]]

   Else
     'VSplit_WorkcoverForm.Layout = Settings["Workcover/VSplit_workcoverform"]
      Try HSplit_WorkcoverClaims.Layout = Settings["Workcover/HSplit_WorkcoverClaims"]
      Try FLastWorkCoverForm.WebBrowser1.Zoom = Settings["Workcover/default_zoom", const.zoom[1]]
      Try Fpreview.WebBrowser1.Zoom = Settings["Workcover/default_zoom_preview", const.zoom[1]]
   End If
  

End




Public Sub AssessWorkplace_Click()
   If bExit Then Return
   Select Case Last.tag
   Case "yes"
      visit!assessworkplace = True
   Case "no"
      visit!assessworkplace = False
   End Select
   EditArea_Notify_Datachanged(True)
End

Public Sub rbWorkcoverConsultType_Keypress()
  
  If key.code = key.return Then
   txtEmployer.SetFocus()
  End If
   EditArea_Notify_Datachanged(True)
End

Public Sub Claim_Forms_Show_click()
  ' Stop Event  
  ' Select Case Last.tag
  ' Case "back"
  '       Dec iCurrentClaimform
  '       iCurrentClaimform = Max(iCurrentClaimform, 0)
  ' Case "foreward"
  '       Inc iCurrentClaimform
  '       iCurrentClaimform = Min(iCurrentClaimform, Claims_Forms.count)
  ' End Select
  ' LastForm_Display(Claims_Forms[iCurrentClaimform])
End


Public Sub rbDueEmployment_Click()
      Select Case Last.tag
      Case "yes"
          visit!fk_caused_by_employment = const.Workcover_CausedByEmployment_Yes
      Case "no"
          visit!fk_caused_by_employment = const.Workcover_CausedByEmployment_No
      Case "uncertain"
          visit!fk_caused_by_employment = const.Workcover_CausedByEmployment_Uncertain
      End Select
      visit!caused_by_employment = Last.tag
      EditArea_Notify_Datachanged(True)
End


Public Sub Visit_New()
      '------------------------------------------------------------------------------------
      'If first visit for a claim clear all the fields, but if a subsequent visit, keep
      'some core stuff  like diagnosis, management plan and restrictions, just clear dates
      'the diagnosis can change obviously but unlikely so they are kept intact.
      'the certainly that it is due to work can change
      'the doctor can at any point dip out (refuse to continue with the patient)
      'the worker at any time can refuse to continue with the doctor
      'having said that, they are left with defaults, but belong logically to the visit
      'not the claim.
      'Note the textboxes for restrictions are not changed as these often stay the same
      '------------------------------------------------------------------------------------
      Dim lastvisit As New Collection 
    
      lastvisit!pk_visit = visit!pk_visit
      lastvisit!visit_date = visit!visit_date
      lastvisit!fk_claim = visit!fk_claim
      lastvisit!fk_claim = visit!fk_claim
      lastvisit!fk_code = visit!fk_code
      lastvisit!fk_coding_system = visit!fk_coding_system
      lastvisit!fk_lu_visit_type = visit!fk_lu_visit_type
      lastvisit!visit_type = visit!visit_type
      lastvisit!diagnosis = visit!diagnosis
      lastvisit!diagnosis_code = visit!diagnosis_code
      lastvisit!management_plan = visit!management_plan
      lastvisit!review_date = visit!review_date
      lastvisit!assessworkplace = visit!assessworkplace
      lastvisit!hours_capable = visit!hours_capable
      lastvisit!days_capable = visit!days_capable
      lastvisit!restrictions = visit!restrictions
      lastvisit!fk_caused_by_employment = visit!fk_caused_by_employment
      lastvisit!doctor_consented = visit!doctor_consented
      lastvisit!worker_consented = visit!worker_consented
      lastvisit!fitness_preinjury_from = visit!fitness_preinjury_from
      lastvisit!fitness_suitable_from = visit!fitness_suitable_from
      lastvisit!fitness_suitable_to = visit!fifk_lu_visit_typetness_suitable_to
      lastvisit!fitness_unfit_from = visit!fitness_unfit_from
      lastvisit!fitness_unfit_to = visit!fitness_unfit_to
      lastvisit!fitness_perm_mod_duties = visit!fitness_perm_mod_duties_from
      lastvisit!form_html = visit!form_html
      '-------------------------------------------------------
      'Clear the visit input area, EditArea_Visit_Clear also
      'sets visit = new collection, hence we kept a copy of 
      'the old visit 
      '-------------------------------------------------------
      EditArea_Visit_Clear()                    'Clear all the input area for a visit
      visit = New Collection 
      fk_progressnote = -1
      If cvwVisits.count <> 0 Then
          '------------------------------------------------------------------------
          'if there is at least 1 visit, keep some of the basic info to save typing
          'create a new currentvisit object, assume this is a progress visit
          '------------------------------------------------------------------------
          bExit = True  
          visit!diagnosis = lastvisit!diagnosis                         'assume diagnosis stays the same
          txtDiagnosis.text = lastvisit!diagnosis           
          visit!fk_lu_visit_type = const.Workcover_VisitType_Progress   'asssume progress visit
          txtManagementPlan.text = lastvisit!management_plan            'assume management plan same
          txtRestrictions.text = lastvisit!restrictions                 'assume restrictions same
          rbWorkcoverConsultTypeProgress.value = True                   'etc     
          visit!assessworkplace = lastvisit!assessworkplace            
          visit!fk_caused_by_employment = lastvisit!fk_caused_by_employment 
          visit!worker_consented = lastvisit!worker_consented 
          visit!doctor_consented = lastvisit!doctor_consented
          fk_claim = lastvisit!fk_claim
          fk_coding_system = lastvisit!fk_coding_system
          fk_code = lastvisit!fk_code   
          bexit = False
      Else 
          '----------------------------------------------
          'No visits yet exist, so set up for first visit
          '----------------------------------------------
          visit!fk_lu_visit_type = const.Workcover_VisitType_Initial
          rbWorkcoverConsultTypeInitial.Value = True
          visit!fk_caused_by_employment = const.Workcover_CausedByEmployment_Yes
          visit!assessworkplace = False
          visit!worker_consented = True
          visit!doctor_consented = True
          fk_claim = 0
          fk_code = 0
          fk_coding_system = 0
      End If
      lblWorkcover.text = "NEW VISIT " & UCase(Trim(txtIdentifier.text))
      bexit = False   
      bNewClaim = False 
      VBox_EditArea.Enabled = True
      txtReviewDate.SetFocus()
End

Public Sub Visit_RePrint()
    'If bClaimLoaded = False Then 
      
   ' Endif
   If cmbPrinters.Index = -1 Then
      If Message.Warning("You are not selected a printer for this document, are you sure you want to continue?", "Yes", "No") = 2 Then Return 
   Endif

    lvwClaims_Select 'load stuff into claim
    Visit_Print()
End

Public Sub Visit_Print()
   '----------------------------------------
   'Send 2 copies of the form to the printer  
   '----------------------------------------  
    modPrinting.Print_latex(WorkcoverForm_LaTeX_Construct().GetData(), const.Paper_Plain, 2)
End

Public Sub Claims_Refresh()
   '-------------------------
   'Refreshes the claims list
   '-------------------------
   Dim iLastClaim As Integer
   currentconsult.Refresh("workcover_claims")     'reload all the history
   lvwClaims.Clear()
   For Each claim In currentconsult!workcover_claims
      If iLastclaim <> claim!fk_claim Then
         lvwClaims.Add(claim!fk_visit, claim!identifier)
         iLastClaim = claim!fk_claim
      End If
   Next
End
Public Sub pdfForm_Close_Click()
  
  Stop Event
  pdfForm.Visible = False  
  VBox_WorkCover.Visible = True  
  
End

Public Sub Claim_Preview()
   '--------------------------------
   'Previews the claim form as a pdf
   '--------------------------------
   Dim Filename As String
   Claim_Collect_Data()
   filename = modPrinting.Latex_To_PDF(WorkcoverForm_LaTeX_Construct().GetData())
   pdfForm.Load_PDF(filename)
   VBox_WorkCover.Visible = False  
   pdfForm.Visible = True   
End
Public Sub Claim_Collect_Data()
  
   claim = New Collection
   claim!claim_number = Trim(txtClaim.text)
   claim!fk_occupation = fk_occupation
   claim!occupation = Trim(txtOccupation.text) 'will be dropped later
   claim!fk_branch = fk_branch
   If fk_person <> 0 Then claim!fk_person = fk_person
   Try claim!hours_week_worked = Val(txtHoursWorked.text)
   claim!mechanism_of_injury = Trim(txtMechanismInjury.text)
   claim!date_injury = Trim(txtDateInjury.text)
   claim!contact_person = Trim(txtContactPerson.text)
   claim!memo = Trim(txtMemo.text)
   claim!identifier = Trim(txtIdentifier.text)
   claim!accepted = CBool(chkClaimAccepted.value)  
  
End

Public Function WorkcoverForm_LaTeX_Construct() As CTemplate
   '-------------------------------------------
   'constructs the html for the workcover form
   'FIXME worker consented seems to be missing
   
   '-------------------------------------------
   Dim sEmployer As String
   Dim sAssess_Workplace As String = "   No"
   Dim sName As String
   Dim sAddress As String
   Dim sString As String
   Dim sCausedBy As String = ""
   Dim comm As Collection 
   Dim templ As New CTemplate("workcover-nsw", "tex")
    
   Select Case visit!fk_lu_visit_type              'Can't selectively do one
     Case Const.Workcover_VisitType_Initial        'once replaced, their 'gone'
       templ.Checkbox("visit_type_initial", True)
       templ.Checkbox("visit_type_progress", False)
       templ.Checkbox("visit_type_final", False)
     Case Const.Workcover_VisitType_Progress
       templ.Checkbox("visit_type_initial", False)
       templ.Checkbox("visit_type_progress", True)
       templ.Checkbox("visit_type_final", False)
     Case Const.Workcover_VisitType_Final
       templ.Checkbox("visit_type_initial", False)
       templ.Checkbox("visit_type_progress", False)
       templ.Checkbox("visit_type_final", True)
     Case Const.Workcover_VisitType_InitialAndFinal
       templ.Checkbox("visit_type_initial", True)
       templ.Checkbox("visit_type_progress", False)
       templ.Checkbox("visit_type_final", True)
      
   End Select
   If visit!assessworkplace = True Then
      sAssess_Workplace = "   Yes"
      templ.Checkbox("assessment_checkbox", True)
   Else
      templ.Checkbox("assessment_checkbox", False)
   End If
  
   Select Case visit!fk_caused_by_employment 
   Case Const.Workcover_CausedByEmployment_Yes
      sCausedBy = "yes"
      templ.Checkbox("caused_certain", True)
      templ.Checkbox("caused_no", False)
      templ.Checkbox("caused_uncertain", False)
   Case Const.Workcover_CausedByEmployment_No
      sCausedBy = "no"
      templ.Checkbox("caused_certain", False)
      templ.Checkbox("caused_no", True)
      templ.Checkbox("caused_uncertain", False)
   Case Const.Workcover_CausedByEmployment_Uncertain
      sCausedBy = "uncertain"
      templ.Checkbox("caused_certain", False)
      templ.Checkbox("caused_no", False)
      templ.Checkbox("caused_uncertain", True)
   End Select
     
   sEmployer = txtEmployer.text 
   templ.Subst_common(currentconsult)
   templ.Subst("claim", Trim(txtClaim.text))
   templ.Subst("employername", sEmployer)
   templ.Subst("employeraddress", txtStreet.text & " " & txtSuburb.text & " " & txtPostcode.text)
   templ.Subst("occupation", txtOccupation.Text)
   templ.Subst("hoursworked", txtHoursWorked.Text)
   templ.Subst("mechanismofinjury", txtMechanismInjury.text)
   templ.Subst("dateofinjury", txtDateInjury.text)
   templ.Subst("diagnosis", txtDiagnosis.text)
   templ.Subst("caused_by_employment", sCausedBy)
   templ.Subst("managementplan", txtManagementPlan.text)
   templ.Subst("assess_workplace", sAssess_Workplace)
   templ.Subst("reviewdate", txtReviewDate.text)
   templ.Subst("preinjuryfrom", txtPreInjury_From.text)
   templ.Subst("unfitfrom", txtunfit_From.text)
   templ.Subst("unfitto", txtUnfit_To.text)
   templ.Subst("suitablefrom", txtSuitable_From.text)
   templ.Subst("suitableto", txtSuitable_To.text)
   templ.Subst("permmodifiedfrom", txtPermModDuties_From.text)
   templ.Subst("hoursperday", txtCanWork_HrsPerDay.text)
   templ.Subst("daysperweek", txtCanWork_DaysPerWeek.text)
   templ.Subst("work.restrictions", txtRestrictions.text)
   templ.Subst("work.capabilities", txtCapabilities.text) 
   '----------------------
   'Now set the checkboxes
   '----------------------
  ' If txtunfit_From.text <> "" Then
  '       templ.Checkbox("Is Unfit for work from", "1") 'IAN - ALSO TRIED JUST A TRUE FLAG HERE
  ' Endif
  If visit!fitness_perm_mod_duties_from = True Then 
      templ.Checkbox("permanent_checkbox", True)
  Else
     templ.Checkbox("permanent_checkbox", False)
  End If
   If txtUnfit_From.text <> "" Then
        templ.Checkbox("unfit_checkbox", True)
   Else
       templ.Checkbox("unfit_checkbox", False)
   Endif
   If txtSuitable_From.text <> "" Then
       templ.Checkbox("fit_suitable_checkbox", True)
   Else
      templ.Checkbox("fit_suitable_checkbox", False)
   Endif
   If txtPermModDuties_From.text <> "" Then
       templ.Checkbox("permanent_checkbox", True)
   Else
      templ.Checkbox("permanent_checkbox", False)
   Endif
   If txtPreInjury_From.text <> "" Then
       templ.Checkbox("pre_injury_checkbox", True)
   Else
      templ.Checkbox("pre_injury_checkbox", False)
   Endif
  
   templ.Subst("contacts_person", txtContactPerson.text & " " & txtMemo.text)
   If visit!doctor_consented = True Then 
       templ.Checkbox("treating_doctor_yes_checkbox", True)
       templ.Checkbox("treating_doctor_no_checkbox", False)
   Else
      templ.Checkbox("treating_doctor_no_checkbox", True) 'fixme make me reflect true status of these boxes
      templ.Checkbox("treating_doctor_yes_checkbox", False) 
   End If
   '-------------------------------------------------------------
   'Get the comms for the employing organisation
   '-------------------------------------------------------------
   If Not IsNull(Comms) Then 
       sSTring = ""
        For Each Comm In comms
           If comm!value Then
              sString &= comm!type & ":" & comm!value & "<BR>"
           End If 
       Next
       If Right(sString, 3) = "<BR>" Then
         sString = Left(sSTring, Len(sSTring) - 3)
       End If
       templ.Subst("comms", sString)
   Else
      templ.Subst("comms", "")
   End If 

   If visit!doctor_consented Then
     sString = "yes"
   Else
    sString = "No"
   End If
   templ.Subst("doctor_consented", sString)
   If visit!worker_consented Then
      sSTring = "yes"
   Else
      sstring = "no"
   End If
   templ.Subst("worker_consented", sString)
   templ.Subst("date", Format(Now, "dd/mm/yyyy"))
   Return templ
 End

 
 
Public Function Claim_Construct_ProgressNotes_Unstructured_HTML() As CTemplate
'---------------------------------------------------------------------------
'Second version of progress notes for workcover, this one as sentances
'---------------------------------------------------------------------------
 Dim templ As CTemplate
   Dim sEmployer As String
   Dim sAssess_Workplace As String = "No"
   Dim sName As String
   Dim sAddress As String
   Dim sString As String
   Dim sCausedBy As String = ""
   
   If visit!assessworkplace = True Then
      sAssess_Workplace = "   Yes"
   End If
   Select Case visit!fk_caused_by_employment 
   Case Const.Workcover_CausedByEmployment_Yes
      sCausedBy = "yes"
   Case Const.Workcover_CausedByEmployment_No
      sCausedBy = "no"
   Case Const.Workcover_CausedByEmployment_Uncertain
      sCausedBy = "uncertain"
   End Select
     
   sEmployer = txtEmployer.text & "<BR>" & txtStreet.text & " " & txtSuburb.text & " " & txtPostcode.text
   templ = New CTemplate(modHTML.workcover_progressnotes_unstructured_html) 
   templ.Subst_common(currentconsult)
   templ.Subst("visit_type", UCase(visit!visit_type))
   templ.Subst("claim", Trim(txtClaim.text))
   templ.Subst("employer", sEmployer)
   templ.Subst("contact_person", Trim(txtContactPerson.text) & " " & Trim(txtMemo.text))
   templ.Subst("occupation", txtOccupation.Text)
   templ.Subst("hours_worked", txtHoursWorked.Text)
   templ.Subst("injury_how_occurred", txtMechanismInjury.text)
   templ.Subst("injury_date", txtDateInjury.text)
   templ.Subst("diagnosis", txtDiagnosis.text)
   templ.Subst("caused_by_employment", sCausedBy)
   templ.Subst("management_plan", txtManagementPlan.text)
   templ.Subst("assess_workplace", sAssess_Workplace)
   templ.Subst("reviewdate", txtReviewDate.text)
   Print templ
   Return Templ
   
End
Public Function Claim_Construct_Progressnotes_Structured_HTML() As CTemplate
  '-------------------------------------------------------------------
  ' constructs the html for the workcover form
  '
  ' Progress note summary:
  '            Workcover claim (bolded)  *(INITIAL ETC)
  '            Claim identifier - ** Claim Number **
  '            Attending Doctor       :
  '            Employer details:
  '            Contact person and memo:
  '            Worker occupation:
  '            Hours worked          :
  '            Date of injury         :
  '            Mechanism of Injury    :
  '            Due to employement     :
  '            Diagnosis              :
  '            Management              :
  '            Assess workplace       :
  '            Fitness: (summary)    :
  '            Hours capable  /day days/week
  '            Restrictions   (summary)
  '            Worker and Dr consented:Yes
  ' 
  '            Will be reivewed on
  '-------------------------------------------------------------------  
   Dim templ As CTemplate
   Dim sEmployer As String
   Dim sAssess_Workplace As String = "No"
   Dim sName As String
   Dim sAddress As String
   Dim sString As String
   Dim sCausedBy As String = ""
   
   If visit!assessworkplace = True Then
      sAssess_Workplace = "   Yes"
   End If
   Select Case visit!fk_caused_by_employment 
   Case Const.Workcover_CausedByEmployment_Yes
      sCausedBy = "yes"
   Case Const.Workcover_CausedByEmployment_No
      sCausedBy = "no"
   Case Const.Workcover_CausedByEmployment_Uncertain
      sCausedBy = "uncertain"
   End Select
     
   sEmployer = txtEmployer.text & "<BR>" & txtStreet.text & " " & txtSuburb.text & " " & txtPostcode.text
   templ = New CTemplate(modHTML.workcover_progressnotes_structured_html) 
   templ.Subst_common(currentconsult)
   templ.Subst("visit_type", UCase(visit!visit_type))
   templ.Subst("claim", Trim(txtClaim.text))
   templ.Subst("employer", sEmployer)
   templ.Subst("contact_person", Trim(txtContactPerson.text) & " " & Trim(txtMemo.text))
   templ.Subst("occupation", txtOccupation.Text)
   templ.Subst("hours_worked", txtHoursWorked.Text)
   templ.Subst("injury_how_occurred", txtMechanismInjury.text)
   templ.Subst("injury_date", txtDateInjury.text)
   templ.Subst("diagnosis", txtDiagnosis.text)
   templ.Subst("caused_by_employment", sCausedBy)
   templ.Subst("management_plan", txtManagementPlan.text)
   templ.Subst("assess_workplace", sAssess_Workplace)
   templ.Subst("reviewdate", txtReviewDate.text)
   '--------------------------------------------------------------------------------------------
   'make summary now of the fitness dates. there will be one or more lines
   '--------------------------------------------------------------------------------------------
   ' <TABLE WIDTH=150%>
   ' 	<COL WIDTH=45%>
   ' 	<COL WIDTH=45%>
   ' 	<COL WIDTH=10%>
   ' 	<COL WIDTH=45%>
   ' 	<TR VALIGN=TOP>
   ' 		<TD WIDTH=45%>
   ' 			<P>Unfit From</P>
   ' 		</TD>
   ' 		<TD WIDTH=45%>
   ' 			<P>from_date</P>
   ' 		</TD>
   ' 		<TD WIDTH=10%>
   ' 			<P ALIGN=CENTER>To</P>
   ' 		</TD>
   ' 		<TD WIDTH=45%>
   ' 			<P>To Date</P>
   ' 		</TD>
   ' 	</TR>
   ' </TABLE>
   
   sString = ""
  " <TABLE WIDTH=100%>"
  "    <COL WIDTH=45%>"
  "    <COL WIDTH=15%>"
  "    <COL WIDTH=10%>"
  "    <COL WIDTH=30%>"
  '---------------------
  'Pre-injury duties
  '---------------------
   If Trim(txtPreInjury_From.text) <> "" Then
            sstring &= ""  
                         " <TR VALIGN=TOP>"
                        "<TD WIDTH=45%>"
                          "<P><FONT SIZE=2>Pre-injury duties from</FONT></P>"
                          "</TD>"
                          "<TD WIDTH=15%><P ALIGN=LEFT><FONT SIZE=2>"
                           "<P>%from_date</FONT></P>"
            sstring = Replace(sSTring, "%from_date", Format(Val(txtPreInjury_From.text), " dd/mm/yyyy ")) 
            sstring &= "</TD>"
                        "<TD WIDTH=10%>"
                        "<P></P>"
                        "</TD>"
                        "<TD WIDTH=30%>"
                        "<P></P>"
                        "</TD>"
                        "</TR>"
   End If
  '--------------------------
  'Unfit for any duties
  '--------------------------
   If Trim(txtunfit_From.text) Then
              sstring &= ""  
                          " <TR VALIGN=TOP>"
                        "<TD WIDTH=45%>"
                          "<P><FONT SIZE=2>Unfit From</FONT></P>"
                          "</TD>"
                          "<TD WIDTH=15%><FONT SIZE=2>"
                           "<P>%from_date</FONT></P>"
            sstring = Replace(sSTring, "%from_date", Format(Val(txtunfit_From.text), " dd/mm/yyyy ")) 
            sstring &= "</TD>"
                        "<TD WIDTH=10%>"
                        "<P ALIGN=CENTER><FONT SIZE=2>To</FONT></P>"
                        "</TD>"
                        "<TD WIDTH=30%><FONT SIZE=2>"
                        "<P>%to_date</FONT></P>"
                        "</TD>"
          sstring = Replace(sSTring, "%to_date", Format(Val(txtUnfit_To.text), "dd/mm/yyyy")) 
          sstring &= "</TR>"
   End If
  '-------------------
  'Suitable duties
  '-------------------
  If Trim(txtSuitable_From.text) Then
          sstring &= ""  
                          " <TR VALIGN=TOP>"
                        "<TD WIDTH=45%>"
                          "<P><FONT SIZE=2>Suitable duties from</FONT></P>"
                          "</TD>"
                          "<TD WIDTH=15%>" ""
                           "<P>%from_date</FONT></P>"
            sstring = Replace(sSTring, "%from_date", Format(Val(txtSuitable_From.text), "dd/mm/yyyy"))
            sstring &= "</TD>"
                        "<TD WIDTH=10%>"
                        "<P ALIGN=CENTER><FONT SIZE=2>To</FONT></P>"
                        "</TD>"
                        "<TD WIDTH=30%>"
                        "<P>%to_date</FONT></P>"
                        "</TD>"
          sstring = Replace(sSTring, "%to_date", Format(Val(txtSuitable_To.text), "dd/mm/yyyy")) 
          sstring &= "</TR>"
    End If
   '---------------------------------------------
   ' Permanantly modified duties from 
  '----------------------------------------------
   If Trim(txtPermModDuties_From.text) <> "" Then
            sstring &= ""  
                         " <TR VALIGN=TOP>"
                        "<TD WIDTH=45%>"
                          "<P>><FONT SIZE=2>Permanantly modified duties from</FONT></P>"
                          "</TD>"
                          "<TD WIDTH=15%><FONT SIZE=2>" 
                           "<P>%from_date</FONT></P>"
            sstring = Replace(sSTring, "%from_date", Format(Val(txtPermModDuties_From.text), " dd/mm/yyyy ")) 
            sstring &= "</TD>"
                        "<TD WIDTH=10%>"
                        "<P></P>"
                        "</TD>"
                        "<TD WIDTH=30%>"
                        "<P></P>"
                        "</TD>"
                        "</TR>"
   End If
    sSTring &= "</TABLE>"
   
  If sSTring <> "" Then
     templ.Subst("fitness", sString)
   Else
      templ.Subst("fitness", "")
   End If
   '-------------------------------------------------------------------------
   'Work out some sort of hrs per day, days per week string
   '-------------------------------------------------------------------------
   sString = ""
   If Trim(txtCanWork_HrsPerDay.text) <> "" Then
    sString = Trim(txtCanWork_HrsPerDay.text) & " per day, "
   End If
  
   If Trim(txtCanWork_DaysPerWeek.text) Then 
     sstring &= Trim(txtCanWork_DaysPerWeek.text) & " per week"
   Else
      sSTring = Left(sSTring, Len(sSTring) - 1) 'chop off the  ','
   End If
      
   If sString <> "" Then
        templ.Subst("hours_capable", sString)
   Else
      templ.Subst("hours_capable", "")
   End If
   
   If Trim(txtRestrictions.text) <> "" Then
         templ.Subst("restrictions", txtRestrictions.text)
   Else
       templ.Subst("restrictions", "")
   End If
   ' 
   If visit!doctor_consented Then
     sString = "yes"
   Else
    sString = "No"
   End If
   templ.Subst("doctor_consented", sString)
   If visit!worker_consented Then
      sSTring = "yes"
   Else
      sstring = "no"
   End If
   templ.Subst("worker_consented", sString)
   Return templ
End

Public Sub Claim_New()
   Editarea_Claim_Clear()
   EditArea_Visit_Clear()
   bNewclaim = True
   bEditing = False
   bClaimLoaded = False 
   bVisitLoaded = False
   bExit = True
   claim = New Collection
   visit = New Collection
   branch = New Collection
   pk_view_claim = -1
   fk_occupation = 0
   fk_person = 0
   fk_branch = 0
   fk_claim = 0
   fk_visit = 0
  fk_progressnote = -1
   rbWorkcoverConsultTypeInitial.value = True  
   visit!fk_lu_visit_type = const.Workcover_VisitType_Initial   
   visit!visit_type = "Initial"
   lblWorkcover.text = "New Workcover Claim"
   rbDueEmploymentYes.Value = True
   visit!fk_caused_by_employment = Const.Workcover_CausedByEmployment_Yes
   chkAgreeToTreat_Doctor.value = True
   chkAgreeToTreat_Worker.value = True 
   visit!doctor_consented = True
   visit!worker_consented = True    
   chkClaimAccepted.value = False   
   rbAssessWorkplaceNo.value = True
   visit!assessworkplace = False
   bExit = False  
   txtIdentifier.SetFocus()
   EditArea_Notify_Datachanged(False)
End

Public Sub lvwClaims_Select()
   '------------------------------------------------------
   'CALLED BY  :User clicking on a row in the claims list
   '           :Program setting a row in the claims list
   'TODO       : richard check out the view def and see
   'where Doctor_firstname surname, title come From 
   'are they for first visit only
   '------------------------------------------------------  
  lvwClaims.MoveCurrent
  pk_view_claim = lvwClaims.Item.Key
 
  claim = New Collection
  claim!fk_consult = currentconsult!workcover_claims[pk_view_claim]!fk_consult_claim
  claim!fk_claim = currentconsult!workcover_claims[pk_view_claim]!fk_claim
  fk_claim = claim!fk_claim
 ' ProgressNotesPage.Set_pk_pastHistory(fk_claim)
  claim!identifier = currentconsult!workcover_claims[pk_view_claim]!identifier
  claim!claim_number = currentconsult!workcover_claims[pk_view_claim]!claim_number
  claim!date_injury = currentconsult!workcover_claims[pk_view_claim]!date_injury
  claim!mechanism_of_injury = currentconsult!workcover_claims[pk_view_claim]!mechanism_of_injury
  claim!fk_occupation = currentconsult!workcover_claims[pk_view_claim]!fk_occupation
  claim!occupation = currentconsult!workcover_claims[pk_view_claim]!occupation
  claim!hours_week_worked = currentconsult!workcover_claims[pk_view_claim]!hours_week_worked
  claim!fk_branch = currentconsult!workcover_claims[pk_view_claim]!fk_branch
  claim!fk_person = currentconsult!workcover_claims[pk_view_claim]!fk_person
  Try fk_person = currentconsult!workcover_claims[pk_view_claim]!fk_person
  claim!contact_person = currentconsult!workcover_claims[pk_view_claim]!contact_person
  Claim!memo = currentconsult!workcover_claims[pk_view_claim]!memo
  claim!accepted = currentconsult!workcover_claims[pk_view_claim]!accepted
  claim!start_date = currentconsult!workcover_claims[pk_view_claim]!start_date
  branch = New Collection 
  Try fk_branch = currentconsult!workcover_claims[pk_view_claim]!fk_branch
  Try fk_organisation = currentconsult!workcover_claims[pk_view_claim]!fk_organisation '?needed
  branch!fk_branch = fk_branch
  branch!organisation = currentconsult!workcover_claims[pk_view_claim]!organisation
  branch!branch = currentconsult!workcover_claims[pk_view_claim]!branch
  branch!street = currentconsult!workcover_claims[pk_view_claim]!street
  branch!town = currentconsult!workcover_claims[pk_view_claim]!town
  branch!postcode = currentconsult!workcover_claims[pk_view_claim]!postcode
End

Public Sub Timer1_Timer()
   '------------------------------------------------------------
   'The timer is re-started with each key-release and switched
   'off whilst the terms are being retreived by Terms_Get()
   '------------------------------------------------------------
   Coded_Term_Get()
 
End

Public Sub lvwClaims_Click()
   '-----------------------------------------
   'user has clicked on a claim  in the list
   '-----------------------------------------
   lvwClaims_Select()
   Claim_Display()                'display the core claim details
   Visits_Refresh()               'get the visits for that claim
   cvwVisits.MoveFirst()          'Show the first visit in the list
   cvwVisits.Item.Selected = True 'highlight the marquee 
   Visit_Display()
 
End




Public Sub cvwVisits_Click()
   If bClaimLoaded = False Then
     lvwClaims_Select()
     Claim_Display()
  End If
   cvwVisits_Select()
   Visit_Display()
   EditArea_Notify_Datachanged(False)
End

Public Sub cvwVisits_Select()
   '------------------------------------------------------------------
   'CALLED BY  :User clicking on a row in the visits list
   '           :Program setting a row in the visits list
   '           :pk-view-visit ie the key to which row of the view visit is on
   '            was  list is clicked and may <>pk_view_visits
   'SEE:       :lvwClaims_Select()
   '-----------------------------------------------------------------
   pk_view_visits = cvwVisits.Item.key
   cvwVisits.MoveCurrent()
   visit = New Collection 
   visit!fk_visit = currentconsult!workcover_claims[pk_view_visits]!fk_visit
   visit!visit_date = currentconsult!workcover_claims[pk_view_visits]!visit_date
   visit!fk_claim = currentconsult!workcover_claims[pk_view_visits]!fk_claim 
   visit!fk_lu_visit_type = currentconsult!workcover_claims[pk_view_visits]!fk_lu_visit_type
   visit!visit_type = currentconsult!workcover_claims[pk_view_visits]!visit_type
   visit!diagnosis = currentconsult!workcover_claims[pk_view_visits]!diagnosis
   Try visit!fk_code = currentconsult!workcover_claims[pk_view_visits]!fk_code
   Try visit!coded_term = currentconsult!workcover_claims[pk_view_visits]!coded_term
   Try visit!fk_coding_system = currentconsult!workcover_claims[pk_view_visits]!fk_coding_system
   Try visit!coding_system = currentconsult!workcover_claims[pk_view_visits]!coding_system
   visit!management_plan = currentconsult!workcover_claims[pk_view_visits]!management_plan
   visit!review_date = currentconsult!workcover_claims[pk_view_visits]!review_date
   visit!assessworkplace = currentconsult!workcover_claims[pk_view_visits]!assessworkplace
   visit!hours_capable = currentconsult!workcover_claims[pk_view_visits]!hours_capable
   visit!days_capable = currentconsult!workcover_claims[pk_view_visits]!days_capable
   visit!restrictions = currentconsult!workcover_claims[pk_view_visits]!restrictions
   visit!capabilities = currentconsult!workcover_claims[pk_view_visits]!capabilities
   visit!fk_caused_by_employment = currentconsult!workcover_claims[pk_view_visits]!fk_caused_by_employment
   visit!doctor_consented = currentconsult!workcover_claims[pk_view_visits]!doctor_consented
   visit!worker_consented = currentconsult!workcover_claims[pk_view_visits]!worker_consented
   visit!fitness_preinjury_from = currentconsult!workcover_claims[pk_view_visits]!fitness_preinjury_from
   visit!fitness_suitable_from = currentconsult!workcover_claims[pk_view_visits]!fitness_suitable_from
   visit!fitness_suitable_to = currentconsult!workcover_claims[pk_view_visits]!fitness_suitable_to
   visit!fitness_unfit_from = currentconsult!workcover_claims[pk_view_visits]!fitness_unfit_from
   visit!fitness_unfit_to = currentconsult!workcover_claims[pk_view_visits]!fitness_unfit_to
   visit!fitness_perm_mod_duties_from = currentconsult!workcover_claims[pk_view_visits]!fitness_perm_mod_duties_from
   visit!form_html = currentconsult!workcover_claims[pk_view_visits]!form_html
   '--------------------------------------------------------------------------------------------------
   'If editing a  claim on the same day, consider this part of same consultation, keep fk_progressnote
   '--------------------------------------------------------------------------------------------------
   fk_progressnote = -1  'new unless editing a visit
    If Not IsNull(currentconsult!workcover_claims[pk_view_visits]!fk_progressnote) Then
        If Format(Now, "dd/mm/yyyy") = Format(currentconsult!workcover_claims[pk_view_visits]!visit_date, "dd/mm/yyyy") Then 
            fk_progressnote = currentconsult!workcover_claims[pk_view_visits]!fk_progressnote
        End If
   End If 

End


Public Sub Claim_Display()
  '------------------------------------------------------------------
  'PURPOSE  :Displays claim details on top half of form
  'CALLED BY:
  'COMMENT  :Note data_injury is deliberately a string and not a date
  '          to allow for e.g Mid-January or other vague dates
  '------------------------------------------------------------------
  EditArea_Claim_Clear()
  bExit = True
  lblWorkcover.Text = "Existing Workcover Claim for " & claim!identifier
  txtClaim.text = claim!claim_number
  txtIdentifier.text = claim!identifier
  txtemployer.text = branch!organisation
  txtStreet.text = branch!street 
  txtSuburb.text = branch!town
  txtPostcode.text = branch!postcode
  txtDateInjury.text = claim!date_injury
  txtMechanismInjury.text = claim!mechanism_of_injury
  txtOccupation.text = claim!occupation
  fk_occupation = claim!fk_occupation 
  txtHoursWorked.text = claim!hours_week_worked
  txtContactPerson.text = claim!contact_person
  txtMemo.text = claim!memo
  chkClaimAccepted.value = claim!accepted
  bClaimLoaded = True   
  bExit = False
 End

Public Sub EditAreaButtons_Click()
  Dim hCtrl As Control
  Dim hTextbox As Textbox
  Select Case Last.tag
  Case "help"
      FClinical.Help_Show(Application.Path &/ "help/workcover.html", "Help:Workcover", True)
  Case "new claim"
      Claim_New()
  Case "pick date"
       If HBox_Calander.Visible Then 
            HBox_Calander.Visible = False
       Else
        For Each hctrl In Last.parent.children
            If hctrl Is TextBox Then
               hTextbox = hctrl
               DateChooser1.tag = hTextbox
               Break
            End If
        Next
         With HBox_Calander
               .top = Last.Parent.Parent.top + Last.Parent.Height
              .left = Last.Parent.left
              .Raise()
         End With     
         DateChooser1.Parent.Visible = True 
         DateChooser1.Parent.Raise 
       End If
  Case "new visit"
      Visit_New()
  Case "preview"
     Claim_Preview()
  Case "save"
       Save()
  Case "restrictions"
        txtRestrictions.Clear()
  End Select

End
Public Sub Visit_Edit()
   If bClaimLoaded = False Then
       lvwClaims_Select()
       Claim_Display()
   End If  
   Visit_Display()
   lblWorkcover.text = "Edit Exiting Visit"
   VBox_EditArea.Enabled = True
  
End

Public Sub Visit_Display()
   '-------------------------------------------------
   'Displays the visit in the cvwWorkCoverVists list
   'in the editing area
   '-------------------------------------------------
   EditArea_Visit_Clear()        'just clear textboxes etc, dosn't affect the keys
   bExit = True
   Select Case visit!fk_lu_visit_type
   Case Const.Workcover_VisitType_Initial
         rbWorkcoverConsultTypeInitial.value = True
   Case Const.Workcover_VisitType_Progress
         rbWorkcoverConsultTypeProgress.value = True  
   Case Const.Workcover_VisitType_Final
         rbWorkcoverConsultTypeFinal.value = True
   Case Const.Workcover_VisitType_InitialAndFinal
         rbWorkcoverConsultType_InitialFinal.value = True
   End Select
   txtDiagnosis.text = visit!diagnosis
   Try txtCodedDiagnosis.text = visit!coded_term & "(" & visit!fk_code & ")"
   txtManagementPlan.text = visit!management_plan
   If Not IsNull(visit!review_date) Then txtReviewDate.text = modUtil.Format_Date(visit!review_date) 
   If Not IsNull(visit!fitness_preinjury_from) Then txtPreInjury_From.text = modUtil.Format_Date(visit!fitness_preinjury_from)
   If Not IsNull(visit!fitness_suitable_from) Then txtSuitable_From.text = modUtil.Format_Date(visit!fitness_suitable_from)
   If Not IsNull(visit!fitness_suitable_to) Then txtSuitable_To.text = modUtil.Format_Date(visit!fitness_suitable_to)
    If Not IsNull(visit!fitness_perm_mod_duties_from) Then txtPermModDuties_From.Text = modUtil.Format_Date(visit!fitness_perm_mod_duties_from)
    If Not IsNull(visit!fitness_unfit_from) Then txtunfit_From.text = modUtil.Format_Date(visit!fitness_unfit_from)
    If Not IsNull(visit!fitness_unfit_to) Then txtUnfit_To.text = modUtil.Format_Date(visit!fitness_unfit_to)

   txtCanWork_HrsPerDay.text = visit!hours_capable
   txtCanWork_DaysPerWeek.text = visit!days_capable
   txtRestrictions.text = visit!restrictions
   txtCapabilities.text = visit!capabilities
   chkAgreeToTreat_Doctor.Value = visit!doctor_consented
   chkAgreeToTreat_Worker.value = visit!worker_consented
   Select Case visit!fk_caused_by_employment
   Case const.Workcover_CausedByEmployment_No
         rbDueEmploymentNo.value = True
   Case const.Workcover_CausedByEmployment_Yes
         rbDueEmploymentYes.value = True     
   Case const.Workcover_CausedByEmployment_Uncertain
         rbDueEmploymentUncertain.value = True
   End Select
   If visit!assessworkplace = True Then
     rbAssessWorkplaceYes.value = True
   Else
     rbAssessWorkplaceNo.Value = True  
   Endif
   bVisitLoaded = True
   bExit = False
End

Public Sub Visits_Refresh()
  '--------------------------------------------------------------
  'Updates the display in the visits list
  'pk_view_claims for claims row was set in lvwClaims_Select
  'The view rows for vists look like this:
  'row1 claim# visit details#1 key=pk_view_claim = lvwclaims.item.key
  'row2 claim# visit details#2 key = cvwVisits.item.key
  '-------------------------------------------------------------
  'check this row should already have been set
   fk_claim = currentconsult!workcover_claims[pk_view_claim]!fk_claim
   cvwVisits.Clear()           'clear the list  
  
   Claims_Forms = New Collection 
   For Each visit In currentconsult!workcover_claims
      If visit!fk_claim = fk_claim Then
        cvwVisits.Add(visit!fk_visit, 0)
        cvwVisits[visit!fk_visit][0] = Format(visit!visit_date, "dd/mm/yyyy")
        cvwVisits[visit!fk_visit][1] = visit!visit_type
        cvwVisits[visit!fk_visit][2] = visit!diagnosis
        cvwVisits[visit!fk_visit][3] = visit!management_plan
        Claims_Forms.Add(visit!form_html, cvwVisits.count)
        
      End If
   Next
  ' 
  
End



Public Sub EditArea_Claim_Clear()
   '------------------------------------------------------
   'Clears the input area of anything to do with the claim
   'but not the visit
   '------------------------------------------------------
   bExit = True
   txtClaim.text = ""
   txtIdentifier.text = ""
   chkClaimAccepted.Value = False
   txtEmployer.text = ""
   txtStreet.text = ""
   txtSuburb.text = ""
   txtPostcode.text = ""
   txtMemo.text = ""
   txtContactPerson.text = ""
   txtOccupation.text = ""
   txtHoursWorked.text = ""
   txtDateInjury.text = ""
   txtMechanismInjury.text = ""
   bClaimLoaded = False 
   bExit = False
End


Public Sub EditArea_Visit_Clear()
   '------------------------------------------------------------------------------------
   'Clears input textboxes for just the visit excepting those applicable to
   'restrictions (to save re-typing). These can be changed by clicking then
   'clear restrictions button. Res-sets to most likely defaults
   'leave management plan as this often dosn't change
   '------------------------------------------------------------------------------------
   bExit = True
   txtDiagnosis.text = ""
   txtManagementPlan.text = ""
   txtReviewDate.text = ""
   txtPreInjury_From.text = ""
   txtSuitable_From.text = ""
   txtSuitable_To.text = ""
   txtUnfit_From.text = ""
   txtUnfit_To.text = ""
   txtRestrictions.text = ""
   txtPermModDuties_From.text = ""
   txtCanWork_HrsPerDay.text = ""
   txtCanWork_DaysPerWeek.text = ""
   chkFitness_PermModDuties.value = False
   chkFitness_Unfit.value = False
   chkFitness_Suitable.value = False
   chkFitness_PreInjury.value = False
   rbAssessWorkplaceYes.value = False
   chkAgreeToTreat_Doctor.value = True
   chkAgreeToTreat_Worker.value = True
   bVisitLoaded = False 
   bExit = False
End
Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   'Note - date of injury = string because could be e.g January 2009 
   Select Case tag
      Case "review date"
          bKeyValid = modUtil.AllowKeys(Const.AllowKeys_Date_DWMY, keycode)
      Case "identifier", "claim", "employer", "street", "suburb", "contact person", "memo", "occupation", "date of injury" 
             bKeyValid = True  'date of injury can be free text e.g 'unkown'
      Case "diagnosis", "coded diagnosis", "work restrictions", "mechanism of injury", "management plan"
            bKeyValid = True
      Case "hours worked", "hours per day", "days per week"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "pre-injury from", "unfit from", "unfit to", "restriction review date"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case "suitable duties from", "suitable duties to", "permantly modified duties"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
   End Select
   Return bKeyValid
End

Public Sub Missing_Employer_Hint()
   Dim smsg As String
     sMsg = "The employing entity, be they company or sole trader must exist\n" 
               "in the contacts database before you can continue.\n\n"
               "You may not enter 'free text' here, so if the workers company or sole trader cannot " 
               " be found, either check the spelling or enter them in the contacts manager before proceeding\n\n."
               "Would you like to see the contacts help?"
          If Message.warning(sMsg, "Yes", "No") = 1 Then
             FClinical.Help_Show(Application.Path &/ "help/contacts-manager.html", "Help:Contacts Manager", True)          
          End If
    
  
End

Public Sub rbDueEmployment_KeyPress()
   If Key.code = Key.return Then
       txtUnfit_From.SetFocus() 'most likely
   End If

End

Public Sub chkFitness_Click()
'Print Last.tag, Last.value
Select Case Last.tag
Case "pre-injury"
   If Last.value = False Then
      
     ' txtPreInjury_From.Enabled = False
      txtPreInjury_From.text = "" 
      visit!fitness_preinjury_from = Null
   Else
   '    txtPreInjury_From.Enabled = True
   '    txtPreInjury_From.text = "" 
   '    chkFitness_Unfit.value = False
   '    chkFitness_Suitable.Value = False
   '    chkFitness_PermModDuties.Value = False
   ' End If
     
   End If
Case "unfit"
   If Last.value = False Then
      ' txtunfit_From.Enabled = False
       txtunfit_From.text = "" 
       visit!fitness_unfit_from = Null
       visit!fitness_unfit_to = Null
      ' txtUnfit_To.Enabled = False
      ' txtUnfit_To.text = ""
   Else
        
      ' txtunfit_From.Enabled = True
      ' txtunfit_From.text = "" 
      ' txtUnfit_To.Enabled = True
      ' txtUnfit_To.text = "" 
      ' 
      ' chkFitness_PreInjury.value = False
      ' chkFitness_Suitable.Value = False
      ' chkFitness_PermModDuties.Value = False
   Endif
Case "suitable"

Case "permanantly modified"
End Select
  
End

Public Sub schkFitness_Click()
     ' 'These not in a group so have to set by hand!
     ' Select Case Last.tag
     ' Case "pre-injury"
     '     chkFitness_Suitable.value = False
     '     chkFitness_Unfit.Value = False
     '     chkFitness_PermModDuties.Value = False
     ' Case "unfit"
     ' chkFitness_PreInjury.value = False
     ' chkFitness_Suitable.Value = False
     ' chkFitness_PermModDuties.Value = False
     ' Case "suitable"
     '     chkFitness_PreInjury.Value = False
     '     chkFitness_Unfit.Value = False
     '     chkFitness_PermModDuties.Value = False
     ' Case "permanantly modified"
     '       txtPermModDuties_From.Enabled = True
     '       txtPermModDuties_From.text = "" 
     '       chkFitness_PreInjury.value = False 
     '       chkFitness_Suitable.Value = False
     '       chkFitness_Unfit.Value = False
     '       txtPreInjury_From.text = ""
     '       txtUnfit_From.text = ""
     '       txtUnfit_From.Enabled = False
     '       txtUnfit_To.Text = ""
     '       txtUnfit_To.Enabled = False
     '       txtSuitable_From.Text = ""
     '       txtSuitable_From.Enabled = False
     '       txtSuitable_To.Text = ""
     '       txtSuitable_To.Enabled = False
     '       
     ' End Select
  

End

Public Sub chkFitness_KeyPress()
   Select Case Key.Code
      Case Key.Return
         Select Case Last.tag
         Case "pre-injury"
            txtPreInjury_From.SetFocus()
         Case "suitable"
            txtSuitable_From.SetFocus()
         Case "unfit"
            txtUnfit_From.SetFocus()
         Case "permanantly modified"
            txtPermModDuties_From.SetFocus()
      End Select
   End Select
End


Public Sub ColumnView2_Select()
  
 iCurrentKey = ColumnView2.Item.Key 
  
End

Public Sub ColumnView2_DblClick()

    Select Case Last.tag.tag
    Case "employer"
         Organisation_Selection("accept", "list")
    Case "suburb"
    '  Suburb_Select()
   End Select
End

Public Sub ListView1_DblClick()
  listview1.MoveCurrent
  Select Case listview1.Tag.tag
  Case "occupation"
      occupation_Selection("accept", "list")
  End Select
  

End
Public Sub Organisation_Comms_Get()
  
  Comms = modContactsDBI.Branch_Comms_Get(fk_branch)
  
End

Public Sub Organisation_Selection(action As String, Optional calling_control As String)
   Select Case action
   Case "get"
         '--------------------------------------------------------------------
         'Gets a list of organisations for the person selected
         ' category ....     persons name i.e
         ' cardiologist      Dr Big heart
         'Note: the columnview1.count is set in the editareatextbox_gotFocus()
         '--------------------------------------------------------------------
         If Trim(txtEmployer.text) = "" Then Return 
         branches = modContactsDBI.Organisations_Get(Trim(txtEmployer.text))
         If Not branches.count Then Return 
         ColumnView2.Clear()
         '-----------------------------------------------------------------------------------
         'If branches of an organisation  exist to match the text, auto-select or show a list
         '-----------------------------------------------------------------------------------
         For Each branch In branches
               ColumnView2.Add(branch!pk_view, 0)
               ColumnView2[branch!pk_view][0] = Branch!organisation
               ColumnView2[branch!pk_view][1] = Branch!branch
               ColumnView2[branch!pk_view][2] = Branch!street 
               ColumnView2[branch!pk_view][3] = Branch!suburb & " " & Branch!postcode
         Next 

         If branches.count = 1 Then 
            Organisation_Selection("accept")
            Return  
         End If
         ColumnView2.Visible = True
         ColumnView2.Raise
         ColumnView2.tag = txtEmployer
         Return 

   Case "accept"
      '-------------------------------------------------------------------------
      'CALLED BY  : user hitting <enter> in txtOrganisation ie editarea_keypress
      '             user hitting <enter> on the popup list of names
      '             user double clicking on the popup list of names
      '-------------------------------------------------------------------------
        bExit = True
      
        ColumnView2.MoveCurrent 
        fk_organisation = branches[ColumnView2.Item.key]!fk_organisation
        fk_branch = branches[ColumnView2.Item.key]!fk_branch
        txtEmployer.text = branches[ColumnView2.Item.key]!organisation
        '------------------
        'these can be null
        '-------------------
        Try txtStreet.text = branches[ColumnView2.Item.key]!street
        Try txtSuburb.text = branches[ColumnView2.Item.key]!town
        Try txtPostcode.text = branches[ColumnView2.Item.key]!postcode
        Try fk_town = branches[ColumnView2.Item.key]!fk_town
        '------------------------------------------
        'Get the comms for this organisation/branch
        '------------------------------------------
       ' lvworgcontacts.Clear() 
       ' lvwPersonContacts.Clear()
        
        comms = modContactsDBI.Branch_Comms_Get(fk_branch)
       
        ' For Each comm In comms
        '    lvworgcontacts.Add(comm!pk, comm!type & " " & comm!value)
       
       ' Next
        ' For Each comm In aBranch.employee.Comms
        '     lvwPersoncontacts.Add(Str(comm.pk), comm.comm_type & " " & comm.comm_value)
        ' 'Print comm.pk, comm.comm_type, comm.comm_value
        '     Next
        ' 
        '  End If
      'End If  
      txtContactPerson.SetFocus()
      bExit = False  
      ColumnView2.Visible = False   
   End Select
End

Public Sub occupation_Selection(action As String, Optional calling_control As String)
   Select Case action
   Case "get"
         '-----------------------------------------
         'Gets a list of occupations for the worker
         '-----------------------------------------
         If Trim(txtoccupation.text) = "" Then Return 
         occupations = modCommonDBI.occupations_get(Trim(txtoccupation.text))
         Listview1.Clear()
         '-----------------------------------------------------------------
         'If occupations  exist to match the text, auto-select or show a list
         '-----------------------------------------------------------------
         If occupations.count Then 
            For Each occupation In occupations
                 listview1.Add(occupation!pk, occupation!occupation)
            Next 
            If occupations.count = 1 Then 
               occupation_Selection("accept")
             End If
            Listview1.Visible = True
            Listview1.Raise
            Listview1.tag = txtOccupation
            Return 
         Else
            '---------------------------------------------------------------------
            'The text user has typed in dosn't exist yet in common.lu_occupations
            'i.e this is a new occupation, will handle that later
            '---------------------------------------------------------------------
         listview1.Visible = False  
         End If
        
   Case "accept"
      '----------------------------------------------------------------------
      'CALLED BY: 'user hitting < enter > In txtOccupation ie editarea_keypress
      '            user hitting < enter > on the popup list Of names
      '            user double clicking on the popup list Of names
      '----------------------------------------------------------------------
      
      Select Case calling_control
      Case "textbox"
         '-----------------------------------------------------------------
         'User could have either: typed in a new occupation or
         '                        fully typed in an existing occupation but 
         '                        not scrolled on to the list
         '-----------------------------------------------------------------
         If listview1.Visible Then
            listview1.MoveFirst
            Do Until listview1.MoveNext()
               If Lower(Trim(txtoccupation.text)) = Lower(listview1.item.text) Then
                  Occupation_Selection("accept", "list")
                 
                  Return
               End If
             Loop
                           
         Else
            '------------------------------------------------------------
            'User has hit <enter> in the textbox, the list is not visible
            'so this must be a new occupation
            '------------------------------------------------------------
             fk_occupation = 0
        End If
          'If get to here then this is a new occupation and will be saved later
     Case "list"
         '-----------------------------------------------------------
         'Routine called by user clicking on list or pressing <enter>
         '-----------------------------------------------------------
         bExit = True
         Listview1.MoveCurrent   'set internal cursor to match marquee
         txtoccupation.text = occupations[Listview1.Item.key]!occupation 
         fk_occupation = occupations[Listview1.Item.key]!pk
         listview1.Visible = False
         bExit = False
      End Select
     txtHoursWorked.SetFocus()
    End Select
End

Public Sub ListView1_KeyPress()
   '--------------------------------------------------------------
   'User has scrolled or clicked on the popup list, then hit enter
   '--------------------------------------------------------------
   If Key.code = Key.Return Then
       listview1_dblClick()
   End If
End

Public Sub ColumnView2_KeyPress()
   '--------------------------------------------------------------
   'User has scrolled or clicked on the popup list, then hit enter
   '--------------------------------------------------------------
   If key.code = key.return Then
       ColumnView2_DblClick()
   End If
End

Public Sub EditAreaTextBox_KeyRelease()
   '----------------------------------------------------------------------
   'Search for appropriate information as per tag on the edit area textbox
   '----------------------------------------------------------------------
   Select Case Last.tag
   Case "employer"
         Organisation_Selection("get")
   Case "occupation"
         occupation_Selection("get")
   Case "coded diagnosis"
            Timer1.Start()       'see timer1_timer which gets the terms
      
   End Select
End

Public Sub EditAreaTextBox_GotFocus()
   '------------------------------------------------------------
   'Change the background color to FIXME user defined color when
   'the user is typing in this textbox, currently a greeny color
   'Set lists to approppriate co-ordinates under the list box
   '------------------------------------------------------------
   Dim hCtrl As Control
   Dim Tbtn As ToolButton
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
   Case "employer"
        With ColumnView2
         .top = VBox_EditArea.top + HBox_Employer.Top + txtEmployer.Height
         .left = txtEmployer.Left
         .width = txtEmployer.Width
         .height = 150 'fixme fit me to number in the list
         .Visible = False
        End With
       
   Case "occupation"
         With listview1
           .top = HBox_Occupation.top + txtOccupation.Height
           .left = txtOccupation.Left
           .width = 200 'fixme unhardcode me to something rational
           .height = 100 'fixme, calculate me from contents
         End With
   Case "review date", "date of injury", "pre-injury from", "suitable duties to", "suitable duties from", "unfit from", "unfit to", "permanantly modified duties"
        For Each Hctrl In Last.parent.children
         If hctrl Is ToolButton Then
            Tbtn = hctrl
            Tbtn.Visible = True
         End If
        Next
        DateChooser1.tag = Last
     Case "coded diagnosis"
      With VBox_ColumnView
            .top = Last.parent.top + Last.parent.height
            .left = Last.Left
            .width = Last.width
            .Raise
      End With
   Case "suburb"
         With ColumnView2
         .top = HBox_Suburb.Top + txtSuburb.Height
         .left = txtSuburb.Left
         .width = txtSuburb.Width
         .Visible = False
        End With
   ' Case "pre-injury from", "suitable duties from", "unfit from"
         '----------------------------------
         'Just a guess to make typing easier
         '----------------------------------
         ' If Trim(Last.text) = "" Then
         '    Last.text = Format(Now, "dd/mm/yyyy")
         ' End If
   End Select
End


Public Sub EditAreaTextBox_Change()
     If bExit Then Return
      If bDateInvalid Then
         bExit = True
         Last.text = ""
         bDateInvalid = False 
         bExit = False
      End If       
     
   Select Case Last.tag
   Case "employer"
             If Len(Last.text) = 0 Then
               fk_organisation = 0
               fk_branch = 0
               bexit = True
               txtStreet.text = ""
               txtSuburb.text = ""
               txtPostcode.text = ""
               bexit = False
             End If
    Case "occupation"
         If Len(Last.text) = 0 Then
            fk_occupation = 0
         End If   
'
     Case "management plan"
          If InStr(Last.text, "\n\n") Then
                Last.text = Replace(Last.text, "\n\n", "")
                 txtReviewDate.SetFocus()
          End If    
      Case "coded diagnosis"
             If Len(Trim(Last.text)) = 0 Then
                  fk_code = ""
                  fk_coding_system = 0    
             End If
     Case "pre-injury from"
     
     '     Try visit!fitness_preinjury_from = Val(Last.text)
          If Len(Last.text) Then chkFitness_PreInjury.Value = True   
      Case "unfit from"
          If Len(Last.text) Then chkFitness_Unfit.Value = True
   
    '     Try visit!fitness_unfit_from = Val(Last.text)
     Case "unfit to"
          If Len(Last.text) Then chkFitness_Unfit.value = True
        '  Try visit!fitness_unfit_to = Val(Last.text)
          
      Case "suitable duties from"
       If Len(Last.text) Then chkFitness_Suitable.Value = True
    '      Try visit!fitness_suitable_from = Val(Last.text)
     Case "suitable duties to"
      If Len(Last.text) Then chkFitness_Suitable.Value = True
      End Select
   EditArea_Notify_Datachanged(True)
  
End

Public Sub EditArea_Notify_Datachanged(flag As Boolean)
   '--------------------------------------------------
   'Adds or removes padding around edit area 
   'to indicate if data is changed and unsaved
   '--------------------------------------------------
   If flag Then
      VBox_EditAArea_Outer.Padding = 1
      VBox_EditAArea_Outer.Background = Color.red
     tbSave.Foreground = color.red 
      
  Else
     VBox_EditAArea_Outer.Padding = 0
     VBox_EditAArea_Outer.Background = Color.white
     tbSave.Foreground = color.black
  End If
End 

Public Sub EditAreaTextBox_LostFocus()
   Dim Hctrl As Control
   Dim tbtn As ToolButton
   Dim Hastext As Boolean
   Last.BackGround = Color.rgb(255, 255, 255)
   Select Case Last.tag
   Case "coded diagnosis"
          Timer1.Stop() '
    Case "permanantly modified duties", "suitable duties to", "review date", "pre-injury from", "suitable duties from", "unfit from", "unfit to"
       ' For Each Hctrl In Last.parent.children
       '   If hctrl Is ToolButton Then
       '      Tbtn = hctrl
       '      Tbtn.Visible = False
       '   End If
         If Last.text <> "" Then
             hasText = True
             If Not modEditAreaHelpers.Valid_Date(Last) Then
                 If Not hastext Then Return
                 bDateInvalid = True 
                 bExit = True
                  Last.text &= " **INVALID DATE**"
                 Last.SetFocus()
                 bExit = False   
              End If
          End If
       'Next

   End Select
   '---------------------------------------------------------
   'Some text in textboxes is longer than their width, ensure
   'that the start of the sentance is showing
   '---------------------------------------------------------
   Last.pos = 0
End
 
Public Sub EditAreaTextBox_KeyPress()
           
  If bExit Then Return 
  '---------------------------------------------------------------
  'Validate key entry on a per-textbox basis, reject unwanted keys
  '---------------------------------------------------------------
  If Not EditAreaTextbox_ExcludeKeys(key.code, Last.tag) Then 
     Stop Event
     Return
  End If
  Select Case Key.Code
  Case key.Esc
      HBox_Calander.visible = False
  Case Key.Return, key.tab
        Select Case Last.tag
           Case "identifier"
              txtClaim.SetFocus()
           Case "claim"
              txtEmployer.SetFocus()
           Case "employer"
              txtStreet.SetFocus()
           Case "street"
              txtSuburb.SetFocus
           Case "contact person"
              txtMemo.SetFocus()
           Case "memo"
              txtOccupation.SetFocus()
           Case "date of injury"   
              txtMechanismInjury.SetFocus() 
           Case "occupation"
               occupation_Selection("accept", "textbox")
           Case "hours worked"
              txtDateInjury.SetFocus()
           Case "mechanism of injury"
              txtDiagnosis.SetFocus()
           Case "diagnosis"
             txtCodedDiagnosis.SetFocus()
           Case "coded diagnosis"
              txtManagementPlan.SetFocus()
           Case "management plan"
               'First make sure user not hitting <enter> in middleof a word
               If Last.pos <> Len(Last.text) + 1 Then
                  Stop Event
               End If
              txtReviewDate.SetFocus()
           Case "review date"
                modEditAreaHelpers.Calculate_Date_From_Interval(txtReviewDate)
             ' Calculate_Review_Date()
              rbDueEmploymentYes.SetFocus()
           Case "pre-injury from"
               
               txtUnfit_From.SetFocus()
           Case "unfit from"
               txtUnfit_To.SetFocus()
           Case "unfit to"
               txtSuitable_From.SetFocus()
           Case "suitable duties from"
               txtSuitable_To.SetFocus()
           Case "suitable duties to"
               txtPermModDuties_From.SetFocus()
           Case "permantly modified duties"
               txtCanWork_HrsPerDay.SetFocus()
           Case "hours per day"
               txtCanWork_DaysPerWeek.SetFocus()
           Case "days per week"
                txtRestrictions.SetFocus()
        End Select
   Case key.Down
      Select Case Last.tag
        Case "coded diagnosis"
          If VBox_ColumnView.Visible Then
             If columnview1.count Then
                ColumnView1.MoveFirst()
                 ColumnView1.Item.Selected = True
                 ColumnView1.SetFocus()
             End If
          End If
          Case "employer"
             If ColumnView2.Visible Then
                 ColumnView2.MoveFirst()
                 ColumnView2.Item.Selected = True
                 ColumnView2.SetFocus()
             End If
          Case "occupation", "claim"
             If listview1.Visible Then
               listview1.MoveFirst()
               listview1.Item.Selected = True
               listview1.SetFocus()
              End If
        End Select
   End Select
End



Public Sub rbWorkCoverConsultType_Click()
   '------------------------------------------------
   'These have to be set here because otherwise one
   'has to read each invidual one in Save()
   '------------------------------------------------
   If bExit Then Return 
   Select Case Last.tag
   Case "initial"
         visit!fk_lu_visit_type = Const.Workcover_VisitType_Initial
   Case "progress"
         visit!fk_lu_visit_type = Const.Workcover_VisitType_Progress
   Case "final"
         visit!fk_lu_visit_type = Const.Workcover_VisitType_Final
   Case "initial and final"
         visit!fk_lu_visit_type = Const.Workcover_VisitType_InitialAndFinal
    End Select
  visit!visit_type = Last.text
End


Public Sub Calculate_Review_Date()
   '--------------------------------------------
   'Works out a date from e.g 18M or 2Y
   'FIXME put in weeks and days
   '--------------------------------------------
   Dim sIntervalUnits As String 'eg if txtdate contains 3M then units interval is 3
   Dim iNumberOfMonths As Integer      'do not need both these declared, but do for readability
   Dim iNumberOfYears As Integer 
   Dim iNumberOfDays As Integer
   Dim iNumberOfWeeks As Integer
   Dim vPossibleDate As Variant
   Dim aDate As Date
   Dim x As Integer
   bExit = True 'stop change event of edit area triggering
  
   If UCase(Right(Trim(txtReviewDate.text), 1)) = "M" Then
          '---------------------------------------------------------------------------
          'Try and convert the rest of the string (ie left part which should be number
          'to a number, if error, pop up invalid date and return
          'Remember that  bkeyvalid = EditArea_TxtBox_ExcludeKeys(key.code) has
          'only allowed numbers or mM or Yy for this textbox, but some idiot could
          'have tried out patience by typing in e.g 10m10M or something
          'fixme old comment from somewhere else
          '---------------------------------------------------------------------------
          Try iNumberOfMonths = Val(Left(txtReviewDate.text, Len(Trim(txtReviewDate.text)) - 1))
          If Error Then
            txtReviewDate.text = ""
          End If  
          txtreviewDate.text = Format(DateAdd(Now, gb.Month, iNumberOfMonths), "dd/mm/yyyy")
    Else 
         If UCase(Right(Trim(txtReviewDate.text), 1)) = "D" Then
             Try iNumberOfDays = Val(Left(txtReviewDate.text, Len(Trim(txtReviewDate.text)) - 1))
             If Error Then 
               txtReviewDate.text = ""
             End If   
             txtReviewDate.text = Format(DateAdd(Now, gb.day, iNumberOfDays), "dd/mm/yyyy")
        Else
            If UCase(Right(Trim(txtReviewDate.text), 1)) = "W" Then
             Try iNumberOfWeeks = Val(Left(txtReviewDate.text, Len(Trim(txtReviewDate.text)) - 1))
             If Error Then 
               txtReviewDate.text = ""
             End If   
             txtReviewDate.text = Format(DateAdd(Now, gb.Week, iNumberOfweeks), "dd/mm/yyyy")
             End If
        End If
    End If  
    bExit = False 
End


Public Sub TabStrip1_Click()

  Select Case TabStrip1.index
  Case cSection_LastForm
      HBox_WorkcoverHeading.Visible = False  
      LastForm_Display(Claims_Forms[iCurrentClaimform])
  Case cSection_ProgressNotes
      HBox_WorkcoverHeading.Visible = False 
      ProgressNotesPage.ReLoad() 
      ProgressNotesPage.lblNotesFor.text = claim!identifier
  Case cSection_Claims
      HBox_WorkcoverHeading.Visible = True  
  End Select

End


Public Sub DateChooser1_Activate()
     Last.tag.text = Format(Last.value, "dd/mm/yyyy")
     HBox_Calander.Visible = False  
End

Public Sub DateChooser1_LostFocus()
   DateChooser1.visible = False  
End

Public Sub Button1_Click()
  Print ProgressNotesPage.Notes_Editor
  ProgressNotesPage.Save()

End

Public Sub EditAreaCheckBox_Click()
      If bExit Then Return 
      Select Case Last.tag
      Case "doctor agrees"
           
           Try visit!doctor_consented = Last.value
      Case "worker agrees"
            Try visit!worker_consented = Last.value
      Case "permanantly modified"
         If Last.value = False Then
            txtPermModDuties_From.text = ""
         End If
      Case "pre-injury"
         If Last.value = False Then
           txtPreInjury_From.text = ""
         End If
      Case "suitable"
         If Last.value = False Then
            txtSuitable_To.text = ""
            txtSuitable_From.text = ""
         End If
      Case "unfit"
         If Last.value = False Then
            txtUnfit_From.text = ""
            txtUnfit_To.Text = ""
         End If
      End Select
End

Public Sub dummyData()
  
  visit!assessworkplace = "Yes"
  visit!fk_caused_by_employment = const.Workcover_CausedByEmployment_Yes
  txtEmployer.text = "The Pendelberry clinic"
  txtStreet.text = "12 Cardiff Rd"
  txtSuburb.text = "CARDIFF"
  txtPostcode.TEXT = "2290"
  visit!visit_type = "INITIAL"
  txtClaim.text = "1234"
  txtContactPerson.text = "A contact person"
  txtMemo.text = "A memo"
  txtOccupation.text = "Carpenter"
  txtHoursWorked.text = "10"
  txtMechanismInjury.text = "using a saw"
  txtDiagnosis.text = "Laceration"
  txtDateInjury.text = "01/02/2010"
  txtManagementPlan.text = "suture and analgesics"
  txtReviewDate.text = "10/02/2010"
  txtUnfit_From.text = "01/02/2010"
  txtUnfit_To.text = "10/02/2010"
  txtCanWork_HrsPerDay.text = "8"
  txtCanWork_DaysPerWeek.text = "5"
  txtRestrictions.text = "none, cause is off work"
  visit!doctor_consented = True
  visit!worker_consented = True
End

Public Sub Coded_Term_Get()
   '-------------------------------------------------------------------------------------
   'Gets list of diagnostic terms
   'Cannot set default if count is one because must  be able to add new occupations
   'can't remove the label because it needs to occupy space to keep textbox correct width
   '-------------------------------------------------------------------------------------
   Dim term As Collection 
   Dim key As String
   If Trim(txtCodedDiagnosis.text) = "" Then
        fk_code = "" 'clin_coding.generic_terms key is  a string
        fk_coding_system = 0
        VBox_ColumnView.Visible = False   
        Return
   End If
   Timer1.Stop()
   Terms = modCodingDBI.Get_Terms(Trim(txtCodedDiagnosis.text), chkLimit.value, chkicd10.value, SpinBoxTermLimits.value)
   With columnview1
         .Clear()
         .Columns[0].Width = txtCodedDiagnosis.width - 100
         .Columns[1].width = 100
   End With
   If Terms.count Then
      For Each term In Terms
         key = term!code
         columnview1.Add(key, 0)
         columnview1[key][0] = term!term
         columnview1[key][1] = term!system
      Next 
      lblTermCount.text = Str$(terms.count) & " terms retreived"
      columnview1.tag = txtCodedDiagnosis
      columnview1.Raise
      columnview1.Visible = True
     VBox_ColumnView.Visible = True 
   Else 
      VBox_ColumnView.Visible = False 'empty recordset
   End If  
End

Public Sub Columnview1_KeyPress()
   If key.code = key.return Then Columnview1_DblClick()
End

Public Sub Coded_Term_Select()
   '---------------------------------------------
   'User has chosen a term from popup columnview1
   'Display this in the txtCodedTerm Textbox
   '---------------------------------------------
    columnview1.MoveCurrent()   'match internal cursor to visible row
    fk_code = Terms[columnview1.Item.key]!code
    fk_coding_system = Terms[columnview1.Item.key]!fk_coding_system
    If txtDiagnosis.text = "" Then
       txtDiagnosis.text = columnview1.Item.Text
    End If   
    txtCodedDiagnosis.text = Terms[columnview1.Item.key]!term & " (" & Terms[columnview1.Item.key]!code & ")"
    txtCodedDiagnosis.pos = 0 'if case term too long for textbox
    txtManagementPlan.SetFocus()
End

Public Sub Columnview1_DblClick()
   Coded_Term_Select() 
   Columnview1.Visible = False 
    VBox_ColumnView.Visible = False   
End

Public Sub tbDummyData_Click()
 Dim PN As String
  Claim_New()
  dummyData()

  
End

Public Sub mnuVisits_Click()
  
  Select Case Last.tag
    Case "edit"
         Visit_Edit()
    Case "delete"
    Case "help"
    Case "reprint"
         Visit_RePrint()
  End Select
  
End


Public Sub cvwVisits_Menu()

  If Not cvwVisits.count Then Return 
  mnuVisits.Popup()
End
