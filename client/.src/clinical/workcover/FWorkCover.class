' Gambas class file

' Copyright (C) 2008-2012 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-------------------------------------------------------------------------------------
' PURPOSE      Workcover form data entry
' CAVEAT       Currently only setup for NSW workcover template  in the tex templates
' NOTES        The code  HBox_Calander.Visible = False scattered apparently at random
'              all over the place is necessary, because the lost focus event of the 
'              calender dosn't trigger reliably, leaving it poppup up at inopportune
'              times.
'              fk_code is a string because the database field in coding is a string
'KNOWN BUGS     nil
'
' TODO'S       Implement delete of visit/claim with audit trail
'              Look at implications if you allow the user to change an existing diagnosis wording
'              this should be allowable eg (could have made a spelling mistake etc, but need
'              to ripple this change through to other sections sharing the previous spelling
'-----------------------------------------------------------------------------------

Private bEmbedded As Boolean
Private bDateInvalid As Boolean
Private bInsistCoding As Boolean
Private bNewVisit As Boolean
Private bkeyvalid As Boolean
Private bexit As Boolean
Private Default_Zoom As Integer
Private claim As Collection 
Private claims As Collection
Private icurrentClaim As Integer
Private bNewClaim As Boolean
Private visit As Collection 
Private visits As Collection  'all the visits in a claim
Private branch As Collection 
Private branches As Collection
Private occupation As Collection
Private occupations As Collection 
Private Claims_Forms As Collection 'of forms for a claim
Private iCurrentKey As Integer
Private currentconsult As CConsult
Private bClaimLoaded As Integer
Private bVisitLoaded As Integer
Private fk_claim As Integer
Private fk_visit As Integer
Private fk_occupation As Integer 'key to common.lu_occupations = workers occupation
Private fk_branch As Integer
Private fk_person As Integer
Private fk_town As Integer
Private fk_organisation As Integer
Private pk_view_claim As Integer
Private pk_view_visits As Integer
Private fk_code As String  'see coding.generic_terms table
Private fk_coding_system As Integer 'e.g 1 = icpc2Plus 2 = icd10
Private Contact_Type As Integer
Private fk_pasthistory As Integer
Private fk_progressnote As Integer
Private hObs As Observer
Private terms As Collection 
Private comms As Collection                                             'of comms for the branch
Private printer_name As String 
Private Sole_Traders As Collection
Private Sole_Trader As Collection

Public Sub set_embedded(flag As Boolean)
   
   bEmbedded = flag
   
End

Public Sub Set_Insist_Coding(f As Boolean)
   '------------------------------------------------------------------------
   'Will be for global option where admin wants all workcover consults coded
   'currently not used
   '------------------------------------------------------------------------   
   
   bInsistCoding = f   
   
End

Public Sub Form_Close()
   
   Settings_Save()
   
End

Public Sub Init(cons As CConsult)
   
   currentconsult = cons                                                   'Set consult from FClinical
   Set_Insist_Coding(True) 'remove me only for testing
   DateChooser1.Value = Now()
   Try Settings_Load()                                                         'load split sizes and browser zoom for this form"
   cvwVisits.Columns.Count = 4
   cvwVisits.Columns[0].width = 60  'date
   cvwVisits.Columns[1].width = 80  'TYPE
   cvwVisits.Columns[2].width = 150  'diagnosis
   cvwVisits.Columns[3].width = 150  'management
   ColumnView2.Columns.count = 4
   columnview1.Columns.count = 2       
   bexit = True
   modEditAreaHelpers.Set_ICD10(chkicd10, lblCodingSystem)
   bexit = False
   Reload()                                                                'Refresh claims list and visits list
   
End

Public Sub Save()
   '----------------------------------
   'Save the workcover claim and visit
   '----------------------------------   
   
   Dim sProgressNotes As String
   '---------------------------------------------
   'Do some validation/prompt for missing printer
   '---------------------------------------------
   If VBox_EditArea_Outer.padding = 0 Then Return
   If Not EditArea_Contents_Valid() Then Return 
   claim!claim_number = Trim(txtClaim.text)
   claim!fk_occupation = fk_occupation
   If fk_occupation = 0 Then
      claim!occupation = Trim(txtOccupation.text) 'will be dropped later
   Else
      Try claim.Remove("occupation")
   End If
   claim!fk_branch = fk_branch
   If fk_person <> 0 Then claim!fk_person = fk_person
   Try claim!hours_week_worked = Val(txtHoursWorked.text)
   claim!mechanism_of_injury = Trim(txtMechanismInjury.text)
   claim!date_injury = Trim(txtDateInjury.text)
   claim!contact_person = Trim(txtContactPerson.text)
   claim!memo = Trim(txtMemo.text)
   claim!identifier = Trim(txtIdentifier.text)
   claim!accepted = CBool(chkClaimAccepted.value)
   
   If fk_claim Then
      visit!fk_claim = fk_claim
   Endif
   visit!diagnosis = Trim(txtDiagnosis.text)
   visit!fk_code = fk_code  'fk_code is string, if "" will set this to null
   If fk_coding_system <> 0 Then visit!fk_coding_system = fk_coding_system
   visit!management_plan = Trim(txtManagementPlan.text)
   Try visit!review_date = Trim(txtReviewDate.text)
   Try visit!hours_capable = Val(txtCanWork_HrsPerDay.text)
   Try visit!days_capable = Val(txtCanWork_DaysPerWeek.Text)
   visit!restrictions = Trim(txtRestrictions.text)
   visit!capabilities = Trim(txtCapabilities.text)
   Try visit!certificate_date = Val(txtCertificateDate.text)
   Try visit!fitness_preinjury_from = Val(txtPreInjury_From.text)
   Try visit!fitness_suitable_from = Val(txtSuitable_From.text)
   Try visit!fitness_suitable_to = Val(txtSuitable_To.text)
   Try visit!fitness_unfit_from = Val(txtUnfit_From.text)
   Try visit!fitness_unfit_to = Val(txtUnfit_To.text)
   Try visit!fitness_perm_mod_duties_from = Val(txtPermModDuties_From.text)
   
   If rbAssessWorkplaceYes.value = True Then
      visit!assessworkplace = True
   Else
      visit!assessworkplace = False 
   End If   
   visit!doctor_consented = CBool(chkAgreeToTreat_Doctor.value)
   visit!worker_consented = CBool(chkAgreeToTreat_Worker.value)
   sProgressNotes = Claim_Construct_ProgressNotes_structured_HTML().GetData()
   visit!latex = WorkcoverForm_LaTeX_Construct().GetData()
   visit.remove("visit_type")
   visit.remove("visit_date")
   visit.remove("caused_by_employment")
   visit.remove("worker_consented_text")
   visit.remove("doctor_consented_text")
   visit.remove("coded_term")
   visit.remove("coding_system")
   modDBConnect.BeginTrans()
   visit!fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, sProgressNotes, const.cSection_Workcover, fk_progressnote, "workcover", 0, False)
   fk_claim = modWorkCoverDBI.Save(currentconsult, pk_view_visits, claim, visit) 
   modDBConnect.CommitTrans()
   
   EditArea_Notify_Datachanged(False)
   Visit_Print()
   FClinical.Refresh_AllPreviousNotes()
   FClinical.Refresh_Section(const.cSection_Workcover)
   Reload()
   
End

Public Sub New_Entry()
   '--------------------------------------
   'Called from the main Fclinical Toolbar
   '--------------------------------------  

   Claim_New() 
   
End

Public Sub Reload()
   
   Claims_Refresh()                  'refresh currentconsult!workcover_claims collection
   If lvwClaims.count Then           'and show in the list
      lvwClaims.MoveLast()           'move to the latest claim
      lvwClaims.Item.Selected = True 'highlight that row with marquee
      Claim_Display()                'show (disabled) the details of last claim
      Visits_Refresh()               'now show all visits for that claim
      cvwVisits.MoveFirst()           'move to last first visit = the most recent
      cvwVisits.Item.Selected = True 'highlight with  marquee 
      lvwClaims_Select()             'setspkviewclaim, load claim collection
      Visit_Display()                'show (disabled) details of last visit)             
   End If           
   VBox_EditArea.Enabled = False 
   HBox_Visit_Type.Enabled = False  
   
End

Public Function EditArea_Contents_Valid() As Boolean
   '-------------------------------------------
   'Validate adequate data exists before a save
   '-------------------------------------------   
   
   Dim date_exists As Boolean
   Dim sMsg As String 
   
   If Trim(txtIdentifier.text) = "" Then
      txtIdentifier.SetFocus()
      Return False
   End If 
   If Not IsDate(txtCertificateDate.text) Then
      txtCertificateDate.SetFocus()
      Return False   
   Endif
   If fk_branch = 0 And fk_person = 0 Then  'no branch or person
      Missing_Employer_Hint()
      txtemployer.SetFocus()
      Return False
   Else
      If fk_person = 0 And fk_branch = 0 Then
         Missing_Employer_Hint()
         txtemployer.SetFocus()
         Return False
      Endif
   End If
   
   If txtDateInjury.text = "" Then 
      txtDateInjury.SetFocus()
      Return False
   End If
   If txtMechanismInjury.text = "" Then
      txtMechanismInjury.SetFocus()
      Return False
   End If
   
   If txtDiagnosis.text = "" Then
      txtDiagnosis.SetFocus()
      Return False
   End If
   If bInsistCoding = True Then  'code keys are strings
      If fk_code = "" Or fk_coding_system = 0 Then
         Message.Title = "Coding Workcover Consultations"
         sMsg = "Please enter a coded diagnosis.\n\n"
         "Your SysAdmin has determined that all workcover certificates must also be coded."
         Message.Info(sMsg)
         txtCodedDiagnosis.SetFocus()
         Return False   
      Endif
   Endif
   If txtManagementPlan.text = "" Then
      If rbWorkcoverConsultTypeInitial.value = True Or rbWorkcoverConsultTypeProgress.value = True Then 
         txtManagementPlan.SetFocus()
         Return False
      End If
   End If
   '----------------------
   'Missing a review date?
   '----------------------
   If txtReviewDate.text = "" Then
      '------------------------------------------------------------------------------------------------------------
      'If suitable duties scenarios are complicated, for example in practice one could fill in different
      'sets of dates on the same for - a period of unfitness, a period of suitable and a fit for normal duties from.
      '1) This is a final certficate, so don't need a review date, if so, should have perm mod duties
      '2) This is on same certificate as a fit for pre-injury duties
      '------------------------------------------------------------------------------------------------------------
      If chkFitness_Suitable.value = True Then                                               'suitable duties
         Select Case visit!fk_lu_visit_type
            Case Const.Workcover_VisitType_Final, Const.Workcover_VisitType_InitialAndFinal
               If chkFitness_PreInjury.Value = False Then                                     
                  If Not IsDate(txtPermModDuties_From.text) Then
                     txtReviewDate.SetFocus() 
                     Return False
                  Endif
               End If
            Case Else
               '----------------------- 
               'not a final certificate
               '-----------------------
               txtReviewDate.SetFocus
               Return False
         End Select
      End If
   End If
   
   If Not IsDate(txtPreInjury_From.text) And Trim(txtPreInjury_From.text) <> "" Then 
      txtPreInjury_From.SetFocus()
      Return False
   End If
   
   If Trim(txtUnfit_From.text) <> "" Then                       'if have suitable from date
      If Not IsDate(txtUnfit_From.text) Then              'is it valid ?No
         txtUnfit_From.SetFocus()                               'try again
         Return
      End If
      If Not IsDate(txtUnfit_To.text) Then                'must have valid suitable to
         txtUnfit_To.SetFocus()
         Return False
      End If
   End If
   
   If Trim(txtSuitable_From.text) <> "" Then                       'if have suitable from date
      If Not IsDate(txtSuitable_From.text) Then              'is it valid ?No
         txtSuitable_From.SetFocus()                               'try again
         Return
      End If
      If Not IsDate(txtSuitable_To.text) Then                'must have valid suitable to
         txtSuitable_To.SetFocus()
         Return False
      End If
   End If
   If Not IsDate(txtPermModDuties_From.text) And Trim(txtPermModDuties_From.text) <> "" Then
      txtPermModDuties_From.SetFocus()
      Return False
   End If
   
   If Trim(txtPreInjury_From.text) = "" And Trim(txtUnfit_From.text) = "" And Trim(txtSuitable_From.text) = "" And Trim(txtPermModDuties_From.text) = "" Then
      Message.info("You must record some sort of information about dates and level of fitness work")
      Return False
   End If
   
   If Trim(txtUnfit_From.text) <> "" And Trim(txtPreInjury_From.text) <> "" Then 
      If txtCanWork_HrsPerDay.text = "" Then
         txtCanWork_HrsPerDay.SetFocus()
         Return False
      End If
      If txtCanWork_DaysPerWeek.text = "" Then
         txtCanWork_DaysPerWeek.SetFocus()
         Return False
      End If
      If txtRestrictions.text = "" Then
         txtRestrictions.SetFocus()
         Return False
      End If   
   End If
   
   Return True
   
End

Public Sub Settings_Save()
   
   If bEmbedded Then
      Try Settings["Workcover_Embedded/VSplit_workcoverform"] = VSplit_WorkcoverForm.Layout 
      Try Settings["Workcover_Embedded/HSplit_WorkcoverClaims"] = HSplit_WorkcoverClaims.Layout
   Else
      Try Settings["Workcover/VSplit_workcoverform"] = VSplit_WorkcoverForm.Layout 
      Try Settings["Workcover/HSplit_WorkcoverClaims"] = HSplit_WorkcoverClaims.Layout
   End If
   
End

Private Sub Settings_Load()
   
   If bEmbedded Then
      Try VSplit_WorkcoverForm.Layout = Settings["Workcover_Embedded/VSplit_workcoverform" "90,10"]
      Try HSplit_WorkcoverClaims.Layout = Settings["Workcover_Embedded/HSplit_WorkcoverClaims", "30,70"]
   Else
      Try VSplit_WorkcoverForm.Layout = Settings["Workcover/VSplit_workcoverform", "90,10"]
      Try HSplit_WorkcoverClaims.Layout = Settings["Workcover/HSplit_WorkcoverClaims", "30,70"]
   End If
   
End

Public Sub AssessWorkplace_Click()
   
   HBox_Calander.Visible = False  
   If bExit Then Return
   Select Case Last.tag
      Case "yes"
         visit!assessworkplace = True
      Case "no"
         visit!assessworkplace = False
   End Select
   EditArea_Notify_Datachanged(True)
   
End

Public Sub rbWorkcoverConsultType_Keypress()
   
   If key.code = key.return Then
      txtEmployer.SetFocus()
   End If
   EditArea_Notify_Datachanged(True)
   
End

Public Sub rbDueEmployment_Click()
   
   HBox_Calander.Visible = False  
   Select Case Last.tag
      Case "yes"
         visit!fk_caused_by_employment = const.Workcover_CausedByEmployment_Yes
      Case "no"
         visit!fk_caused_by_employment = const.Workcover_CausedByEmployment_No
      Case "uncertain"
         visit!fk_caused_by_employment = const.Workcover_CausedByEmployment_Uncertain
   End Select
   visit!caused_by_employment = Last.tag
   EditArea_Notify_Datachanged(True)
   
End

Public Sub Visit_New()
   
   Dim lastvisit As New Collection 
   
  
   lastvisit!pk_visit = visit!pk_visit
   lastvisit!visit_date = visit!visit_date
   lastvisit!fk_claim = visit!fk_claim
   lastvisit!fk_claim = visit!fk_claim
   lastvisit!fk_code = visit!fk_code  'could be empty string
   Try lastvisit!fk_coding_system = visit!fk_coding_system 'could be null
   lastvisit!fk_lu_visit_type = visit!fk_lu_visit_type
   lastvisit!visit_type = visit!visit_type
   lastvisit!diagnosis = visit!diagnosis
   lastvisit!diagnosis_code = visit!diagnosis_code
   lastvisit!management_plan = visit!management_plan
   lastvisit!review_date = visit!review_date
   lastvisit!assessworkplace = visit!assessworkplace
   lastvisit!hours_capable = visit!hours_capable
   lastvisit!days_capable = visit!days_capable
   lastvisit!restrictions = visit!restrictions
   lastvisit!fk_caused_by_employment = visit!fk_caused_by_employment
   lastvisit!doctor_consented = visit!doctor_consented
   lastvisit!worker_consented = visit!worker_consented
   lastvisit!fitness_preinjury_from = visit!fitness_preinjury_from
   lastvisit!fitness_suitable_from = visit!fitness_suitable_from
   lastvisit!fitness_suitable_to = visit!fifk_lu_visit_typetness_suitable_to
   lastvisit!fitness_unfit_from = visit!fitness_unfit_from
   lastvisit!fitness_unfit_to = visit!fitness_unfit_to
   lastvisit!fitness_perm_mod_duties = visit!fitness_perm_mod_duties_from
   lastvisit!form_html = visit!form_html
   
   EditArea_Visit_Clear()                    'Clear all the input area for a visit
   bNewVisit = True  
   visit = New Collection 
   fk_progressnote = -1
   If cvwVisits.count <> 0 Then
      bExit = True  
      visit!diagnosis = lastvisit!diagnosis                         'assume diagnosis stays the same
      txtDiagnosis.text = lastvisit!diagnosis           
      visit!fk_lu_visit_type = const.Workcover_VisitType_Progress   'asssume progress visit
      txtManagementPlan.text = lastvisit!management_plan            'assume management plan same
      txtRestrictions.text = lastvisit!restrictions                 'assume restrictions same
      rbWorkcoverConsultTypeProgress.value = True                   'etc     
      visit!assessworkplace = lastvisit!assessworkplace            
      visit!fk_caused_by_employment = lastvisit!fk_caused_by_employment 
      visit!worker_consented = lastvisit!worker_consented 
      visit!doctor_consented = lastvisit!doctor_consented
      fk_claim = lastvisit!fk_claim  'FIXME BUG HERE.
      fk_coding_system = lastvisit!fk_coding_system
      fk_code = lastvisit!fk_code   
      txtCertificateDate.text = Format(Now, "dd/mm/yyyy")
      visit!certificate_date = Format(Now, "dd/mm/yyyy")
      bexit = False
   Else 
      
      visit!fk_lu_visit_type = const.Workcover_VisitType_Initial
      rbWorkcoverConsultTypeInitial.Value = True
      visit!fk_caused_by_employment = const.Workcover_CausedByEmployment_Yes
      visit!assessworkplace = False
      visit!worker_consented = True
      visit!doctor_consented = True
      fk_claim = 0
      fk_code = ""
      fk_coding_system = 0
   End If
   lblWorkcover.text = "NEW VISIT " & UCase(Trim(txtIdentifier.text))
   bexit = False   
   bNewClaim = False 
   VBox_EditArea.Enabled = True
   HBox_Visit_Type.Enabled = True   
   txtReviewDate.SetFocus()
   
End

Public Sub Visit_RePrint()
   '----------------------------------------------------------------------------
   'User has clicked on a visit from visits list, and wants to re-print the form
   'the act of doing this has loaded all the data into Visit and the gui
   'so now, load all the stuff into Claim
   '----------------------------------------------------------------------------   

   lvwClaims_Select 'load stuff into claim
   Visit_Print_New() 'temporary whilst I make changes - swap back to visit_print()
   
End

Public Sub Visit_Print()
   
   modPrinting.Print_latex(WorkcoverForm_LaTeX_Construct().GetData(), const.Paper_Plain, 2)
   
End

Public Sub Visit_Print_New()
   
   modPrinting.Print_latex(WorkcoverForm_LaTeX_Construct_New().GetData(), const.Paper_Plain, 2)
   
End

Public Sub Claims_Refresh()
   '---------------------------------------
   'Refreshes all existing workcover claims
   '---------------------------------------   

   Dim iLastClaim As Integer
   
   currentconsult.Refresh("workcover_claims")     'reload all the history
   lvwClaims.Clear()
   For Each claim In currentconsult!workcover_claims
      If iLastclaim <> claim!fk_claim Then
         lvwClaims.Add(claim!fk_visit, claim!identifier)
         iLastClaim = claim!fk_claim
      End If
   Next
   
End


Public Sub Preview()
   '-----------------------------
   'Called from FClinical toolbar
   '-----------------------------
   
   Claim_Preview() 
   
End

Public Sub Claim_Preview()
   '------------------------------------------------
   'Previews a claim but on another tab in FClinical
   '------------------------------------------------   

   Dim Filename As String
   
   If bNewVisit Then Return 'currently can't preview a new form
    Claim_Collect_Data()
   filename = modPrinting.Latex_To_PDF(modWorkCoverDBI.WorkcoverForm_LaTeX_Construct(currentconsult, currentconsult!workcover_claims[pk_view_visits]).GetData())
   FClinical.Editor_ShowPage_External("pdf file", "Workcover Form " & Format(currentconsult!workcover_claims[pk_view_visits]!certificate_date, "dd/mm/yyyy"), filename)

End

Public Sub Claim_Collect_Data()
   
   claim = New Collection
   claim!claim_number = Trim(txtClaim.text)
   claim!fk_occupation = fk_occupation
   claim!occupation = Trim(txtOccupation.text) 'will be dropped later
   claim!fk_branch = fk_branch
   If fk_person <> 0 Then claim!fk_person = fk_person
   Try claim!hours_week_worked = Val(txtHoursWorked.text)
   claim!mechanism_of_injury = Trim(txtMechanismInjury.text)
   claim!date_injury = Trim(txtDateInjury.text)
   claim!contact_person = Trim(txtContactPerson.text)
   claim!memo = Trim(txtMemo.text)
   claim!identifier = Trim(txtIdentifier.text)
   claim!accepted = CBool(chkClaimAccepted.value)  
   
End

Public Function WorkcoverForm_LaTeX_Construct() As CTemplate
   
   Dim sEmployer As String
   Dim sAssess_Workplace As String = "   No"
   Dim sName As String
   Dim sAddress As String
   Dim sString As String
   Dim sCausedBy As String = ""
   Dim comm As Collection 
   Dim templ As New CTemplate("workcover-nsw", "tex")
   
   Select Case visit!fk_lu_visit_type              'Can't selectively do one
      Case Const.Workcover_VisitType_Initial        'once replaced, their 'gone'
         templ.Checkbox("visit_type_initial", True)
         templ.Checkbox("visit_type_progress", False)
         templ.Checkbox("visit_type_final", False)
      Case Const.Workcover_VisitType_Progress
         templ.Checkbox("visit_type_initial", False)
         templ.Checkbox("visit_type_progress", True)
         templ.Checkbox("visit_type_final", False)
      Case Const.Workcover_VisitType_Final
         templ.Checkbox("visit_type_initial", False)
         templ.Checkbox("visit_type_progress", False)
         templ.Checkbox("visit_type_final", True)
      Case Const.Workcover_VisitType_InitialAndFinal
         templ.Checkbox("visit_type_initial", True)
         templ.Checkbox("visit_type_progress", False)
         templ.Checkbox("visit_type_final", True)
         
   End Select
   If visit!assessworkplace = True Then
      sAssess_Workplace = "   Yes"
      templ.Checkbox("assessment_checkbox", True)
   Else
      templ.Checkbox("assessment_checkbox", False)
   End If
   
   Select Case visit!fk_caused_by_employment 
      Case Const.Workcover_CausedByEmployment_Yes
         sCausedBy = "yes"
         templ.Checkbox("caused_certain", True)
         templ.Checkbox("caused_no", False)
         templ.Checkbox("caused_uncertain", False)
      Case Const.Workcover_CausedByEmployment_No
         sCausedBy = "no"
         templ.Checkbox("caused_certain", False)
         templ.Checkbox("caused_no", True)
         templ.Checkbox("caused_uncertain", False)
      Case Const.Workcover_CausedByEmployment_Uncertain
         sCausedBy = "uncertain"
         templ.Checkbox("caused_certain", False)
         templ.Checkbox("caused_no", False)
         templ.Checkbox("caused_uncertain", True)
   End Select
   
   sEmployer = txtEmployer.text 
   templ.Subst_common(currentconsult)
   templ.Subst("claim", Trim(txtClaim.text))
   templ.Subst("employername", sEmployer)
   templ.Subst("employeraddress", txtAddress.text)
   templ.Subst("employername", sEmployer)
   templ.Subst("occupation", txtOccupation.Text)
   templ.Subst("hoursworked", txtHoursWorked.Text)
   templ.Subst("mechanismofinjury", txtMechanismInjury.text)
   templ.Subst("dateofinjury", txtDateInjury.text)
   templ.Subst("diagnosis", txtDiagnosis.text)
   templ.Subst("caused_by_employment", sCausedBy)
   templ.Subst("managementplan", txtManagementPlan.text)
   templ.Subst("assess_workplace", sAssess_Workplace)
   templ.Subst("reviewdate", txtReviewDate.text)
   templ.Subst("preinjuryfrom", txtPreInjury_From.text)
   templ.Subst("unfitfrom", txtunfit_From.text)
   templ.Subst("unfitto", txtUnfit_To.text)
   templ.Subst("suitablefrom", txtSuitable_From.text)
   templ.Subst("suitableto", txtSuitable_To.text)
   templ.Subst("permmodifiedfrom", txtPermModDuties_From.text)
   templ.Subst("hoursperday", txtCanWork_HrsPerDay.text)
   templ.Subst("daysperweek", txtCanWork_DaysPerWeek.text)
   templ.Subst("work.restrictions", txtRestrictions.text)
   templ.Subst("work.capabilities", txtCapabilities.text) 
   
   If Not IsNull(visit!fitness_perm_mod_duties_from) Then 
      templ.Checkbox("permanent_checkbox", True)
   Else
      templ.Checkbox("permanent_checkbox", False)
   End If
   If txtUnfit_From.text <> "" Then
      templ.Checkbox("unfit_checkbox", True)
   Else
      templ.Checkbox("unfit_checkbox", False)
   Endif
   If txtSuitable_From.text <> "" Then
      templ.Checkbox("fit_suitable_checkbox", True)
   Else
      templ.Checkbox("fit_suitable_checkbox", False)
   Endif
   If txtPermModDuties_From.text <> "" Then
      templ.Checkbox("permanent_checkbox", True)
   Else
      templ.Checkbox("permanent_checkbox", False)
   Endif
   If txtPreInjury_From.text <> "" Then
      templ.Checkbox("pre_injury_checkbox", True)
   Else
      templ.Checkbox("pre_injury_checkbox", False)
   Endif
   
   templ.Subst("contacts_person", txtContactPerson.text & " " & txtMemo.text)
   If visit!doctor_consented = True Then 
      templ.Checkbox("treating_doctor_yes_checkbox", True)
      templ.Checkbox("treating_doctor_no_checkbox", False)
   Else
      templ.Checkbox("treating_doctor_no_checkbox", True) 'fixme make me reflect true status of these boxes
      templ.Checkbox("treating_doctor_yes_checkbox", False) 
   End If
   
   If Not IsNull(Comms) Then 
      sSTring = ""
      For Each Comm In comms
         If comm!value Then
            sString &= comm!type & ":" & comm!value & "<BR>"
         End If 
      Next
      If Right(sString, 3) = "<BR>" Then
         sString = Left(sSTring, Len(sSTring) - 3)
      End If
      templ.Subst("comms", sString)
   Else
      templ.Subst("comms", "")
   End If 
   
   If visit!doctor_consented Then
      sString = "yes"
   Else
      sString = "No"
   End If
   templ.Subst("doctor_consented", sString)
   If visit!worker_consented Then
      sSTring = "yes"
   Else
      sstring = "no"
   End If
   templ.Subst("worker_consented", sString)
   templ.Subst("date", Format(visit!certificate_date, "dd/mm/yyyy"))
   Return templ
   
End

Public Function WorkcoverForm_LaTeX_Construct_New() As CTemplate
   
   Dim sEmployer As String
   Dim sAssess_Workplace As String = "   No"
   Dim sName As String
   Dim sAddress As String
   Dim sString As String
   Dim sContactPerson As String
   Dim sMemo As String  
   Dim sCausedBy As String = ""
   Dim comm As Collection 
   Dim templ As New CTemplate("workcover-nsw", "tex")
   Dim claim_visit As Collection = currentconsult!workcover_claims[pk_view_visits]

   Select Case claim_visit!fk_lu_visit_type              'Can't selectively do one
      Case Const.Workcover_VisitType_Initial        'once replaced, their 'gone'
         templ.Checkbox("visit_type_initial", True)
         templ.Checkbox("visit_type_progress", False)
         templ.Checkbox("visit_type_final", False)
      Case Const.Workcover_VisitType_Progress
         templ.Checkbox("visit_type_initial", False)
         templ.Checkbox("visit_type_progress", True)
         templ.Checkbox("visit_type_final", False)
      Case Const.Workcover_VisitType_Final
         templ.Checkbox("visit_type_initial", False)
         templ.Checkbox("visit_type_progress", False)
         templ.Checkbox("visit_type_final", True)
      Case Const.Workcover_VisitType_InitialAndFinal
         templ.Checkbox("visit_type_initial", True)
         templ.Checkbox("visit_type_progress", False)
         templ.Checkbox("visit_type_final", True)
         
   End Select
   If claim_visit!assessworkplace = True Then
      sAssess_Workplace = "   Yes"
      templ.Checkbox("assessment_checkbox", True)
   Else
      templ.Checkbox("assessment_checkbox", False)
   End If
   
   Select Case claim_visit!fk_caused_by_employment 
      Case Const.Workcover_CausedByEmployment_Yes
         sCausedBy = "yes"
         templ.Checkbox("caused_certain", True)
         templ.Checkbox("caused_no", False)
         templ.Checkbox("caused_uncertain", False)
      Case Const.Workcover_CausedByEmployment_No
         sCausedBy = "no"
         templ.Checkbox("caused_certain", False)
         templ.Checkbox("caused_no", True)
         templ.Checkbox("caused_uncertain", False)
      Case Const.Workcover_CausedByEmployment_Uncertain
         sCausedBy = "uncertain"
         templ.Checkbox("caused_certain", False)
         templ.Checkbox("caused_no", False)
         templ.Checkbox("caused_uncertain", True)
   End Select
   
   If claim_visit!fk_person Then    'sole trader
      sEmployer = claim_visit!soletrader_wholename
      sAddress = Trim(claim_visit!soletrader_street1 & "" & claim_visit!soletrader_street2) & " " 
      sAddress &= claim_visit!soletrader_town & " " & claim_visit!soletrader_postcode
   Else
      sEmployer = claim_visit!organisation & " " & claim_visit!branch
      saddress = Trim(claim_visit!branch_street1 & " " & claim_visit!branch_street2) & " "
      saddress &= claim_visit!branch_town & " " & claim_visit!branch_postcode
   End If    
   
   templ.Subst_common(currentconsult)
   Try templ.Subst("claim", Trim(claim_visit!claim_number))
   If Error Then templ.Subst("claim", "")
   templ.Subst("employername", sEmployer)
   templ.Subst("employeraddress", sAddress)
   templ.Subst("occupation", claim_visit!occupation)
   templ.Subst("hoursworked", claim_visit!hours_week_worked)
   templ.Subst("mechanismofinjury", claim_visit!mechanism_of_injury)
   templ.Subst("dateofinjury", claim_visit!date_injury)  'text field not date field
   templ.Subst("diagnosis", claim_visit!diagnosis)
   templ.Subst("caused_by_employment", sCausedBy)
   templ.Subst("managementplan", claim_visit!management_plan)
   templ.Subst("assess_workplace", sAssess_Workplace)
   templ.Subst("reviewdate", Format(claim_visit!review_date, "dd/mm/yyyy"))
   Try templ.Subst("preinjuryfrom", Format(claim_visit!fitness_preinjury_from, "dd/mm/yyyy"))
   If Error Then templ.Subst("preinjuryfrom", "")
   Try templ.Subst("unfitfrom", Format(claim_visit!fitness_unfit_from, "dd/mm/yyyy"))
   If Error Then templ.Subst("unfitfrom", "")
   Try templ.Subst("unfitto", Format(claim_visit!fitness_unfit_to, "dd/mm/yyyy"))
   If Error Then templ.Subst("unfitto", "")
   Try templ.Subst("suitablefrom", Format(claim_visit!fitness_suitable_from, "dd/mm/yyyy"))
   If Error Then templ.Subst("suitablefrom", "")
   Try templ.Subst("suitableto", Format(claim_visit!fitness_suitable_to, "dd/mm/yyyy"))
   If Error Then templ.Subst("suitableto", "")
   Try templ.Subst("permmodifiedfrom", Format(claim_visit!fitness_perm_mod_duties_from, "dd/mm/yyyy"))
   If Error Then templ.Subst("permmodifiedfrom", "")
   templ.Subst("hoursperday", claim_visit!hours_capable)
   templ.Subst("daysperweek", claim_visit!days_capable)
   templ.Subst("work.restrictions", claim_visit!restrictions)
   templ.Subst("work.capabilities", claim_visit!capabilities) 
   
   If Not IsNull(claim_visit!fitness_perm_mod_duties_from) Then 
      templ.Checkbox("permanent_checkbox", True)
   Else
      templ.Checkbox("permanent_checkbox", False)
   End If
   If Not IsNull(claim_visit!fitness_unfit_from) Then
      templ.Checkbox("unfit_checkbox", True)
   Else
      templ.Checkbox("unfit_checkbox", False)
   Endif
   If Not IsNull(claim_visit!fitness_suitable_from) Then
      templ.Checkbox("fit_suitable_checkbox", True)
   Else
      templ.Checkbox("fit_suitable_checkbox", False)
   Endif
   If Not IsNull(claim_visit!fitness_perm_mod_duties_from) Then
      templ.Checkbox("permanent_checkbox", True)
   Else
      templ.Checkbox("permanent_checkbox", False)
   Endif
   If Not IsNull(claim_visit!fitness_preinjury_from) Then
      templ.Checkbox("pre_injury_checkbox", True)
   Else
      templ.Checkbox("pre_injury_checkbox", False)
   Endif
   If Not IsNull(claim_visit!contact_person) Then sContactPerson = claim_visit!contact_person
   If Not IsNull(claim_visit!memo) Then sMemo = claim_visit!memo
   templ.Subst("contacts_person", sContactPerson & " " & txtMemo.text)
   If claim_visit!doctor_consented = True Then 
      templ.Checkbox("treating_doctor_yes_checkbox", True)
      templ.Checkbox("treating_doctor_no_checkbox", False)
   Else
      templ.Checkbox("treating_doctor_no_checkbox", True) 'fixme make me reflect true status of these boxes
      templ.Checkbox("treating_doctor_yes_checkbox", False) 
   End If
   If Not IsNull(claim_visit!fk_branch) Then   
      comms = modContactsDBI.Branch_Comms_Get(claim_visit!fk_branch)
   End If   
   If Not IsNull(Comms) Then 
      sSTring = ""
      For Each Comm In comms
         If comm!value Then
            sString &= comm!type & ":" & comm!value & "<BR>"
         End If 
      Next
      If Right(sString, 3) = "<BR>" Then
         sString = Left(sSTring, Len(sSTring) - 3)
      End If
      templ.Subst("comms", sString)
   Else
      templ.Subst("comms", "")
   End If 
   
   If claim_visit!doctor_consented Then
      sString = "yes"
   Else
      sString = "No"
   End If
   templ.Subst("doctor_consented", sString)
   If claim_visit!worker_consented Then
      sSTring = "yes"
   Else
      sstring = "no"
   End If
   templ.Subst("worker_consented", sString)
   templ.Subst("date", Format(claim_visit!certificate_date, "dd/mm/yyyy"))
   Return templ
   
End

Public Function Claim_Construct_Progressnotes_Structured_HTML() As CTemplate
   '-------------------------------
   'HTML to put into progress notes
   '-------------------------------   
   
   Dim templ As CTemplate
   Dim sAssess_Workplace As String = "No"
   Dim sName As String
   Dim sAddress As String
   Dim sString As String
   Dim sCausedBy As String = ""
   
   If visit!assessworkplace = True Then
      sAssess_Workplace = "   Yes"
   End If
   Select Case visit!fk_caused_by_employment 
      Case Const.Workcover_CausedByEmployment_Yes
         sCausedBy = "yes"
      Case Const.Workcover_CausedByEmployment_No
         sCausedBy = "no"
      Case Const.Workcover_CausedByEmployment_Uncertain
         sCausedBy = "uncertain"
   End Select
   templ = New CTemplate(modHTML.workcover_progressnotes_structured_html) 
   templ.Subst_common(currentconsult)
   templ.Subst("visit_type", UCase(visit!visit_type))
   templ.Subst("claim", Trim(txtClaim.text))
   templ.Subst("employer", Trim(txtEmployer.text))
   templ.Subst("workaddress", Trim(txtAddress.text))
   templ.Subst("contact_person", Trim(txtContactPerson.text) & " " & Trim(txtMemo.text))
   templ.Subst("occupation", txtOccupation.Text)
   templ.Subst("hours_worked", txtHoursWorked.Text)
   templ.Subst("injury_how_occurred", txtMechanismInjury.text)
   templ.Subst("injury_date", txtDateInjury.text)
   templ.Subst("diagnosis", txtDiagnosis.text)
   templ.Subst("caused_by_employment", sCausedBy)
   templ.Subst("management_plan", txtManagementPlan.text)
   templ.Subst("assess_workplace", sAssess_Workplace)
   templ.Subst("reviewdate", txtReviewDate.text)
   
   sString = ""
   " <TABLE WIDTH=100%>"
   "    <COL WIDTH=45%>"
   "    <COL WIDTH=15%>"
   "    <COL WIDTH=10%>"
   "    <COL WIDTH=30%>"
   
   If Trim(txtPreInjury_From.text) <> "" Then
      sstring &= ""  
      " <TR VALIGN=TOP>"
      "<TD WIDTH=45%>"
      "<P><FONT SIZE=2>Pre-injury duties from</FONT></P>"
      "</TD>"
      "<TD WIDTH=15%><P ALIGN=LEFT><FONT SIZE=2>"
      "<P>%from_date</FONT></P>"
      sstring = Replace(sSTring, "%from_date", Format(Val(txtPreInjury_From.text), " dd/mm/yyyy ")) 
      sstring &= "</TD>"
      "<TD WIDTH=10%>"
      "<P></P>"
      "</TD>"
      "<TD WIDTH=30%>"
      "<P></P>"
      "</TD>"
      "</TR>"
   End If
   
   If Trim(txtunfit_From.text) Then
      sstring &= ""  
      " <TR VALIGN=TOP>"
      "<TD WIDTH=45%>"
      "<P><FONT SIZE=2>Unfit From</FONT></P>"
      "</TD>"
      "<TD WIDTH=15%><FONT SIZE=2>"
      "<P>%from_date</FONT></P>"
      sstring = Replace(sSTring, "%from_date", Format(Val(txtunfit_From.text), " dd/mm/yyyy ")) 
      sstring &= "</TD>"
      "<TD WIDTH=10%>"
      "<P ALIGN=CENTER><FONT SIZE=2>To</FONT></P>"
      "</TD>"
      "<TD WIDTH=30%><FONT SIZE=2>"
      "<P><FONT SIZE=2>%to_date</FONT></P>"
      "</TD>"
      sstring = Replace(sSTring, "%to_date", Format(Val(txtUnfit_To.text), "dd/mm/yyyy")) 
      sstring &= "</TR>"
   End If
   
   If Trim(txtSuitable_From.text) Then
      sstring &= ""  
      " <TR VALIGN=TOP>"
      "<TD WIDTH=45%>"
      "<P><FONT SIZE=2>Suitable duties from</FONT></P>"
      "</TD>"
      "<TD WIDTH=15%>" ""
      "<P><FONT SIZE=2>%from_date</FONT></P>"
      sstring = Replace(sSTring, "%from_date", Format(Val(txtSuitable_From.text), "dd/mm/yyyy"))
      sstring &= "</TD>"
      "<TD WIDTH=10%>"
      "<P ALIGN=CENTER><FONT SIZE=2>To</FONT></P>"
      "</TD>"
      "<TD WIDTH=30%>"
      "<P<FONT SIZE=2>%to_date</FONT></P>"
      "</TD>"
      sstring = Replace(sSTring, "%to_date", Format(Val(txtSuitable_To.text), "dd/mm/yyyy")) 
      sstring &= "</TR>"
   End If
   
   If Trim(txtPermModDuties_From.text) <> "" Then
      sstring &= ""  
      " <TR VALIGN=TOP>"
      "<TD WIDTH=45%>"
      "<P><FONT SIZE=2>Permanantly modified duties from</FONT></P>"
      "</TD>"
      "<TD WIDTH=15%><FONT SIZE=2>" 
      "<P>%from_date</FONT></P>"
      sstring = Replace(sSTring, "%from_date", Format(Val(txtPermModDuties_From.text), " dd/mm/yyyy ")) 
      sstring &= "</TD>"
      "<TD WIDTH=10%>"
      "<P></P>"
      "</TD>"
      "<TD WIDTH=30%>"
      "<P></P>"
      "</TD>"
      "</TR>"
   End If
   sSTring &= "</TABLE>"
   
   If sSTring <> "" Then
      templ.subst_html("fitness", sString)
   Else
      templ.Subst("fitness", "")
   End If
   
   sString = ""
   If Trim(txtCanWork_HrsPerDay.text) <> "" Then
      sString = Trim(txtCanWork_HrsPerDay.text) & " hours per day, "
   End If
   
   If Trim(txtCanWork_DaysPerWeek.text) Then 
      sstring &= Trim(txtCanWork_DaysPerWeek.text) & " days per week"
   Else
      sSTring = Left(sSTring, Len(sSTring) - 1) 'chop off the  ','
   End If
   
   If sString <> "" Then
      templ.Subst("hours_capable", sString)
   Else
      templ.Subst("hours_capable", "")
   End If
   
   If Trim(txtRestrictions.text) <> "" Then
      templ.Subst("restrictions", txtRestrictions.text)
   Else
      templ.Subst("restrictions", "")
   End If
   If Trim(txtCapabilities.text) <> "" Then
      templ.Subst("capabilities", txtCapabilities.text)
   Else
      templ.Subst("capabilities", "")
   End If
   
   If visit!doctor_consented Then
      sString = "yes"
   Else
      sString = "No"
   End If
   templ.Subst("doctor_consented", sString)
   If visit!worker_consented Then
      sSTring = "yes"
   Else
      sstring = "no"
   End If
   templ.Subst("worker_consented", sString)
   Return templ
   
End

Public Sub Claim_New()
   
   Editarea_Claim_Clear()
   EditArea_Visit_Clear()
   Try lvwClaims.UnselectAll()
   Try cvwVisits.UnselectAll()
   bNewclaim = True
   bClaimLoaded = False 
   bVisitLoaded = False
   bExit = True
   claim = New Collection
   visit = New Collection
   branch = New Collection
   pk_view_claim = -1
   fk_occupation = 0
   fk_person = 0
   fk_branch = 0
   fk_claim = 0
   fk_visit = 0
   pk_view_visits = -1
   fk_progressnote = -1
   rbWorkcoverConsultTypeInitial.value = True  
   visit!fk_lu_visit_type = const.Workcover_VisitType_Initial   
   visit!visit_type = "Initial"
   lblWorkcover.text = "New Workcover Claim"
   rbDueEmploymentYes.Value = True
   visit!fk_caused_by_employment = Const.Workcover_CausedByEmployment_Yes
   chkAgreeToTreat_Doctor.value = True
   chkAgreeToTreat_Worker.value = True 
   visit!doctor_consented = True
   visit!worker_consented = True    
   chkClaimAccepted.value = False   
   rbAssessWorkplaceNo.value = True
   visit!assessworkplace = False
   bExit = False  
   tbNewVisit.Enabled = False 
   rbOrganisation.value = True
   Contact_Type = const.contacttype_organisation
   EditArea_Notify_Datachanged(False)
   HBox_Visit_Type.Enabled = True   
   VBox_EditArea.Enabled = True 
   tbPreview.Enabled = True
   txtCertificateDate.text = Format(Now, "dd/mm/yyyy")
   txtIdentifier.SetFocus()
   
End

Public Sub lvwClaims_Select()
   
   lvwClaims.MoveCurrent
   fk_person = 0
   fk_branch = 0
   fk_organisation = 0
   pk_view_claim = lvwClaims.Item.Key
   
   claim = New Collection
   claim!fk_consult = currentconsult!workcover_claims[pk_view_claim]!fk_consult_claim
   claim!fk_claim = currentconsult!workcover_claims[pk_view_claim]!fk_claim
   fk_claim = claim!fk_claim
   
   claim!identifier = currentconsult!workcover_claims[pk_view_claim]!identifier
   claim!claim_number = currentconsult!workcover_claims[pk_view_claim]!claim_number
   claim!date_injury = currentconsult!workcover_claims[pk_view_claim]!date_injury
   claim!mechanism_of_injury = currentconsult!workcover_claims[pk_view_claim]!mechanism_of_injury
   claim!fk_occupation = currentconsult!workcover_claims[pk_view_claim]!fk_occupation
   claim!occupation = currentconsult!workcover_claims[pk_view_claim]!occupation
   claim!hours_week_worked = currentconsult!workcover_claims[pk_view_claim]!hours_week_worked
   claim!fk_branch = currentconsult!workcover_claims[pk_view_claim]!fk_branch
   claim!contact_person = currentconsult!workcover_claims[pk_view_claim]!contact_person
   Claim!memo = currentconsult!workcover_claims[pk_view_claim]!memo
   claim!accepted = currentconsult!workcover_claims[pk_view_claim]!accepted
   claim!start_date = currentconsult!workcover_claims[pk_view_claim]!start_date
   branch = New Collection 
   Try fk_branch = currentconsult!workcover_claims[pk_view_claim]!fk_branch
   Try fk_organisation = currentconsult!workcover_claims[pk_view_claim]!fk_organisation '?needed
   branch!fk_branch = fk_branch
   branch!organisation = currentconsult!workcover_claims[pk_view_claim]!organisation
   branch!branch = currentconsult!workcover_claims[pk_view_claim]!branch
   branch!street1 = currentconsult!workcover_claims[pk_view_claim]!branch_street1
   branch!street2 = currentconsult!workcover_claims[pk_view_claim]!branch_street2
   branch!town = currentconsult!workcover_claims[pk_view_claim]!branch_town
   branch!postcode = currentconsult!workcover_claims[pk_view_claim]!branch_postcode
   Sole_Trader = New Collection
   claim!fk_person = currentconsult!workcover_claims[pk_view_claim]!fk_person
   Try fk_person = currentconsult!workcover_claims[pk_view_claim]!fk_person
   Sole_Trader!fk_person = currentconsult!workcover_claims[pk_view_claim]!fk_person
   Sole_Trader!firstname = currentconsult!workcover_claims[pk_view_claim]!soletrader_firstname
   Sole_Trader!surname = currentconsult!workcover_claims[pk_view_claim]!soletrader_surname
   Sole_Trader!wholename = currentconsult!workcover_claims[pk_view_claim]!soletrader_wholename
   Sole_Trader!title = currentconsult!workcover_claims[pk_view_claim]!soletrader_title
   Sole_Trader!street1 = currentconsult!workcover_claims[pk_view_claim]!soletrader_street1
   Sole_Trader!street2 = currentconsult!workcover_claims[pk_view_claim]!soletrader_street2
   Sole_Trader!town = currentconsult!workcover_claims[pk_view_claim]!soletrader_town
   Sole_Trader!postcode = currentconsult!workcover_claims[pk_view_claim]!soletrader_postcode
   
End

Public Sub Timer1_Timer()
   
   Coded_Term_Get()
   
End

Public Sub lvwClaims_Click()
   
   lvwClaims_Select()
   Claim_Display()                'display the core claim details
   Visits_Refresh()               'get the visits for that claim
   cvwVisits.MoveFirst()          'Show the first visit in the list
   cvwVisits.Item.Selected = True 'highlight the marquee 
   Visit_Display()
   
End

Public Sub cvwVisits_Click()
   
   If bClaimLoaded = False Then
      lvwClaims_Select()
      Claim_Display()
   End If
   cvwVisits_Select()
   Visit_Display()
   EditArea_Notify_Datachanged(False)
   VBox_EditArea.Enabled = False
   HBox_Visit_Type.Enabled = False  
   
End

Public Sub cvwVisits_Select()
   
   pk_view_visits = cvwVisits.Item.key
   cvwVisits.MoveCurrent()
   visit = New Collection 
   visit!fk_visit = currentconsult!workcover_claims[pk_view_visits]!fk_visit
   visit!visit_date = currentconsult!workcover_claims[pk_view_visits]!visit_date
   visit!certificate_date = currentconsult!workcover_claims[pk_view_visits]!certificate_date
   visit!fk_claim = currentconsult!workcover_claims[pk_view_visits]!fk_claim 
   visit!fk_lu_visit_type = currentconsult!workcover_claims[pk_view_visits]!fk_lu_visit_type
   visit!visit_type = currentconsult!workcover_claims[pk_view_visits]!visit_type
   visit!diagnosis = currentconsult!workcover_claims[pk_view_visits]!diagnosis
   Try visit!fk_code = currentconsult!workcover_claims[pk_view_visits]!fk_code
   Try visit!coded_term = currentconsult!workcover_claims[pk_view_visits]!coded_term
   Try visit!fk_coding_system = currentconsult!workcover_claims[pk_view_visits]!fk_coding_system
   Try visit!coding_system = currentconsult!workcover_claims[pk_view_visits]!coding_system
   visit!management_plan = currentconsult!workcover_claims[pk_view_visits]!management_plan
   visit!review_date = currentconsult!workcover_claims[pk_view_visits]!review_date
   visit!assessworkplace = currentconsult!workcover_claims[pk_view_visits]!assessworkplace
   visit!hours_capable = currentconsult!workcover_claims[pk_view_visits]!hours_capable
   visit!days_capable = currentconsult!workcover_claims[pk_view_visits]!days_capable
   visit!restrictions = currentconsult!workcover_claims[pk_view_visits]!restrictions
   visit!capabilities = currentconsult!workcover_claims[pk_view_visits]!capabilities
   visit!fk_caused_by_employment = currentconsult!workcover_claims[pk_view_visits]!fk_caused_by_employment
   visit!doctor_consented = currentconsult!workcover_claims[pk_view_visits]!doctor_consented
   visit!worker_consented = currentconsult!workcover_claims[pk_view_visits]!worker_consented
   visit!fitness_preinjury_from = currentconsult!workcover_claims[pk_view_visits]!fitness_preinjury_from
   visit!fitness_suitable_from = currentconsult!workcover_claims[pk_view_visits]!fitness_suitable_from
   visit!fitness_suitable_to = currentconsult!workcover_claims[pk_view_visits]!fitness_suitable_to
   visit!fitness_unfit_from = currentconsult!workcover_claims[pk_view_visits]!fitness_unfit_from
   visit!fitness_unfit_to = currentconsult!workcover_claims[pk_view_visits]!fitness_unfit_to
   visit!fitness_perm_mod_duties_from = currentconsult!workcover_claims[pk_view_visits]!fitness_perm_mod_duties_from
   visit!form_html = currentconsult!workcover_claims[pk_view_visits]!form_html
   
   'Editing a pre-existing claim - really need to allow editing of th progress note
   ' but later FIXME put in an audit-trail to show what was changed
   fk_progressnote = -1  'new unless editing a visit
   If Not IsNull(currentconsult!workcover_claims[pk_view_visits]!fk_progressnote) Then
      fk_progressnote = currentconsult!workcover_claims[pk_view_visits]!fk_progressnote
   End If 
   
End

Public Sub Claim_Display()
   '------------------------------------
   'Display the 'core' claim details
   'Note the injury date is a text field
   '------------------------------------   

   EditArea_Claim_Clear()
   bExit = True
   lblWorkcover.Text = "Existing Claim for " & claim!identifier
   txtClaim.text = claim!claim_number
   txtIdentifier.text = claim!identifier
   If fk_person Then
      rbSoleTrader.value = True
      txtemployer.text = Sole_Trader!wholename
      txtAddress.text = Trim(Sole_Trader!street1 & " " & Sole_Trader!street2) & " " & Sole_Trader!town & " " & Sole_Trader!postcode  
      Contact_Type = const.contacttype_person    
   Else
      rbOrganisation.value = True 
      Contact_Type = const.contacttype_organisation
      txtAddress.text = Trim(branch!street1 & " " & branch!street2) & " " & branch!town & " " & branch!postcode  
      txtemployer.text = branch!organisation        '" " & branch!town & " " & branch!postcode
   End If
   txtDateInjury.text = claim!date_injury  'text field not a date field to allow free text
   txtMechanismInjury.text = claim!mechanism_of_injury
   txtOccupation.text = claim!occupation
   fk_occupation = claim!fk_occupation 
   txtHoursWorked.text = claim!hours_week_worked
   txtContactPerson.text = claim!contact_person
   txtMemo.text = claim!memo
   chkClaimAccepted.value = claim!accepted
   bClaimLoaded = True   
   tbNewVisit.Enabled = True  
   bExit = False
   
End

Public Sub EditAreaButtons_Click()
   
   Dim hCtrl As Control
   Dim hTextbox As Textbox
   
   HBox_Calander.Visible = False  
   Select Case Last.tag
      Case "help"
         FClinical.Help_Show(Application.Path &/ "help/workcover.html", "Help:Workcover", True)
      Case "new claim"
         Claim_New()
      Case "pick date"
         If HBox_Calander.Visible Then 
            HBox_Calander.Visible = False
         Else
            For Each hctrl In Last.parent.children
               If hctrl Is TextBox Then
                  hTextbox = hctrl
                  DateChooser1.tag = hTextbox
                  Break
               End If
            Next
            With HBox_Calander
               .top = Last.Parent.Parent.top + Last.Parent.Height + HBox_WorkcoverHeading.top + HBox_WorkcoverHeading.height
               .left = Last.Parent.left
               .width = 170
               .height = 170
               .Raise()
            End With     
            DateChooser1.Parent.Visible = True 
            DateChooser1.Parent.Raise 
         End If
      Case "new visit"
         Visit_New()
      Case "preview"
         Claim_Preview()
      Case "save"
         Save()
      Case "restrictions"
         txtRestrictions.Clear()
   End Select
   
End

Public Sub Visit_Edit()
   
   If bClaimLoaded = False Then
      lvwClaims_Select()
      Claim_Display()
   End If  
   Visit_Display()
   lblWorkcover.text = "Edit Exiting Visit"
   VBox_EditArea.Enabled = True
   HBox_Visit_Type.Enabled = True   
   
End

Public Sub Visit_Display()
   '----------------------------------------
   'Display the details of the current visit
   '----------------------------------------   

   EditArea_Visit_Clear()        'just clear textboxes etc, dosn't affect the keys
   bExit = True
   Select Case visit!fk_lu_visit_type
      Case Const.Workcover_VisitType_Initial
         rbWorkcoverConsultTypeInitial.value = True
      Case Const.Workcover_VisitType_Progress
         rbWorkcoverConsultTypeProgress.value = True  
      Case Const.Workcover_VisitType_Final
         rbWorkcoverConsultTypeFinal.value = True
      Case Const.Workcover_VisitType_InitialAndFinal
         rbWorkcoverConsultType_InitialFinal.value = True
   End Select
   Try txtCertificateDate.text = Format(visit!certificate_date, "dd/mm/yyyy")
   txtDiagnosis.text = visit!diagnosis
   If Not IsNull(visit!fk_code) Then 
      txtCodedDiagnosis.text = visit!coded_term & "(" & visit!fk_code & ")"
      fk_code = visit!fk_code
      fk_coding_system = visit!fk_coding_system
   End If    
   txtManagementPlan.text = visit!management_plan
   If Not IsNull(visit!review_date) Then txtReviewDate.text = modUtil.Format_Date(visit!review_date) 
   If Not IsNull(visit!fitness_preinjury_from) Then 
      txtPreInjury_From.text = modUtil.Format_Date(visit!fitness_preinjury_from)
      chkFitness_PreInjury.value = True
   End If
   If Not IsNull(visit!fitness_suitable_from) Then
      txtSuitable_From.text = modUtil.Format_Date(visit!fitness_suitable_from)
      chkFitness_Suitable.Value = True
   End If   
   If Not IsNull(visit!fitness_suitable_to) Then txtSuitable_To.text = modUtil.Format_Date(visit!fitness_suitable_to)
   If Not IsNull(visit!fitness_perm_mod_duties_from) Then
      txtPermModDuties_From.Text = modUtil.Format_Date(visit!fitness_perm_mod_duties_from)
      chkFitness_PermModDuties.Value = True
   End If   
   If Not IsNull(visit!fitness_unfit_from) Then 
      txtunfit_From.text = modUtil.Format_Date(visit!fitness_unfit_from)
      chkFitness_Unfit.Value = True 
   End If   
   If Not IsNull(visit!fitness_unfit_to) Then txtUnfit_To.text = modUtil.Format_Date(visit!fitness_unfit_to)
   
   txtCanWork_HrsPerDay.text = visit!hours_capable
   txtCanWork_DaysPerWeek.text = visit!days_capable
   txtRestrictions.text = visit!restrictions
   txtCapabilities.text = visit!capabilities
   chkAgreeToTreat_Doctor.Value = visit!doctor_consented
   chkAgreeToTreat_Worker.value = visit!worker_consented
   Select Case visit!fk_caused_by_employment
      Case const.Workcover_CausedByEmployment_No
         rbDueEmploymentNo.value = True
      Case const.Workcover_CausedByEmployment_Yes
         rbDueEmploymentYes.value = True     
      Case const.Workcover_CausedByEmployment_Uncertain
         rbDueEmploymentUncertain.value = True
   End Select
   If visit!assessworkplace = True Then
      rbAssessWorkplaceYes.value = True
   Else
      rbAssessWorkplaceNo.Value = True  
   Endif
   bVisitLoaded = True
   bExit = False
   
End

Public Sub Visits_Refresh()
   
   fk_claim = currentconsult!workcover_claims[pk_view_claim]!fk_claim
   cvwVisits.Clear()           'clear the list  
   Claims_Forms = New Collection 
   For Each visit In currentconsult!workcover_claims
      If visit!fk_claim = fk_claim Then
         cvwVisits.Add(visit!fk_visit, 0)
         cvwVisits[visit!fk_visit][0] = Format(visit!certificate_date, "dd/mm/yyyy")
         cvwVisits[visit!fk_visit][1] = visit!visit_type
         cvwVisits[visit!fk_visit][2] = visit!diagnosis
         cvwVisits[visit!fk_visit][3] = visit!management_plan
         Claims_Forms.Add(visit!form_html, cvwVisits.count)
      End If
   Next
   
End

Public Sub EditArea_Claim_Clear()
   
   bExit = True
   txtClaim.text = ""
   txtIdentifier.text = ""
   chkClaimAccepted.Value = False
   txtEmployer.text = ""
   txtAddress.Text = ""
   txtMemo.text = ""
   txtContactPerson.text = ""
   txtOccupation.text = ""
   txtHoursWorked.text = ""
   txtDateInjury.text = ""
   txtMechanismInjury.text = ""
   txtCodedDiagnosis.text = ""
   bClaimLoaded = False 
   Contact_Type = const.contacttype_organisation 'default
   bExit = False
   
End

Public Sub reset_keys()
   
   fk_organisation = 0
   fk_branch = 0
   fk_person = 0 
   
End

Public Sub EditArea_Visit_Clear()
   
   bExit = True
   txtDiagnosis.text = ""
   txtManagementPlan.text = ""
   txtCapabilities.text = ""
   txtRestrictions.text = ""
   txtReviewDate.text = ""
   txtPreInjury_From.text = ""
   txtSuitable_From.text = ""
   txtSuitable_To.text = ""
   txtUnfit_From.text = ""
   txtUnfit_To.text = ""
   txtRestrictions.text = ""
   txtPermModDuties_From.text = ""
   txtCanWork_HrsPerDay.text = ""
   txtCanWork_DaysPerWeek.text = ""
   chkFitness_PermModDuties.value = False
   chkFitness_Unfit.value = False
   chkFitness_Suitable.value = False
   chkFitness_PreInjury.value = False
   rbAssessWorkplaceYes.value = False
   chkAgreeToTreat_Doctor.value = True
   chkAgreeToTreat_Worker.value = True
   bVisitLoaded = False 
   bExit = False
   bNewVisit = False 
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case tag
      Case "review date"
         bKeyValid = modUtil.AllowKeys(Const.AllowKeys_Date_DWMY, keycode)
      Case "identifier", "claim", "employer", "address", "suburb", "contact person", "memo", "occupation", "date of injury" 
         bKeyValid = True  'date of injury can be free text e.g 'unkown'
      Case "diagnosis", "coded diagnosis", "work restrictions", "mechanism of injury", "management plan", "work capabilities"
         bKeyValid = True
      Case "hours worked", "hours per day", "days per week"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "certificate date", "pre-injury from", "unfit from", "unfit to", "restriction review date"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case "suitable duties from", "suitable duties to", "permanantly modified duties"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub Missing_Employer_Hint()
   
   Dim smsg As String
   
   sMsg = "The employing entity, be they company or sole trader must exist\n" 
   "in the contacts database before you can continue.\n\n"
   "You may not enter 'free text' here, so if the workers company or sole trader cannot " 
   " be found, either check the spelling or enter them in the contacts manager before proceeding\n\n."
   "Would you like to see the contacts help?"
   If Message.warning(sMsg, "Yes", "No") = 1 Then
      FClinical.Help_Show(Application.Path &/ "help/contacts-manager.html", "Help:Contacts Manager", True)          
   End If
   
End

Public Sub rbDueEmployment_KeyPress()
   
   If Key.code = Key.return Then
      txtUnfit_From.SetFocus() 'most likely
   End If
   
End

Public Sub chkFitness_Click()
   
   Select Case Last.tag
      Case "pre-injury"
         If Last.value = False Then
            
            txtPreInjury_From.text = "" 
            visit!fitness_preinjury_from = Null
         End If
      Case "unfit"
         If Last.value = False Then
            
            txtunfit_From.text = "" 
            visit!fitness_unfit_from = Null
            visit!fitness_unfit_to = Null
         Endif
   End Select
   
End

Public Sub schkFitness_Click()
   
End

Public Sub chkFitness_KeyPress()
   
   Select Case Key.Code
      Case Key.Return
         Select Case Last.tag
            Case "pre-injury"
               txtPreInjury_From.SetFocus()
            Case "suitable"
               txtSuitable_From.SetFocus()
            Case "unfit"
               txtUnfit_From.SetFocus()
            Case "permanantly modified"
               txtPermModDuties_From.SetFocus()
         End Select
   End Select
   
End

Public Sub ColumnView2_Select()
   
   iCurrentKey = ColumnView2.Item.Key 
   
End

Public Sub ColumnView2_DblClick()
   
   Select Case Last.tag.tag
      Case "employer"
         Organisation_Selection("accept", "list")
         txtContactPerson.SetFocus()
   End Select
   
End

Public Sub ListView1_DblClick()
   
   listview1.MoveCurrent
   Select Case listview1.Tag.tag
      Case "occupation"
         occupation_Selection("accept", "list")
      Case "employer"
         SoleTrader_Select()
   End Select
   listview1.Visible = False 
   
End

Public Sub Organisation_Comms_Get()
   
   Comms = modContactsDBI.Branch_Comms_Get(fk_branch)
   
End

Public Sub Employer_Find()
   '-------------------------------------------------------------   
   'Get from contacts either organisation or sole trader = person
   '-------------------------------------------------------------
   
   Select Case Contact_Type
      Case const.contacttype_organisation
         Organisation_Selection("get")
      Case const.contacttype_person
         SoleTrader_Get()
   End Select
   
End

Public Sub Organisation_Selection(action As String, Optional calling_control As String)
   
   Select Case action
      Case "get"
         
         If Trim(txtEmployer.text) = "" Then Return 
         branches = modContactsDBI.Organisations_Get(Trim(txtEmployer.text))
         If Not branches.count Then Return 
         ColumnView2.Clear()
         
         For Each branch In branches
            ColumnView2.Add(branch!pk_view, 0)
            ColumnView2[branch!pk_view][0] = Branch!organisation
            ColumnView2[branch!pk_view][1] = Branch!branch
            ColumnView2[branch!pk_view][2] = Trim(Branch!street1 & " " & Branch!street2)
            ColumnView2[branch!pk_view][3] = Branch!suburb & " " & Branch!postcode
         Next 
         
         If branches.count = 1 Then 
            Organisation_Selection("accept")
            Return  
         End If
         ColumnView2.Visible = True
         ColumnView2.Raise
         ColumnView2.tag = txtEmployer
         Return 
         
      Case "accept"
         
         bExit = True
         
         ColumnView2.MoveCurrent 
         fk_organisation = branches[ColumnView2.Item.key]!fk_organisation
         fk_branch = branches[ColumnView2.Item.key]!fk_branch
         txtEmployer.text = branches[ColumnView2.Item.key]!organisation
         Try txtAddress.text = Trim(branches[ColumnView2.Item.key]!street1 & " " & branches[ColumnView2.Item.key]!street2) & " " & branches[ColumnView2.Item.key]!town & " " & branches[ColumnView2.Item.key]!postcode
         Try fk_town = branches[ColumnView2.Item.key]!fk_town
         
         comms = modContactsDBI.Branch_Comms_Get(fk_branch)
         
         txtContactPerson.SetFocus()
         bExit = False  
         ColumnView2.Visible = False   
   End Select
   
End

Public Sub SoleTrader_Get()
   '-----------------------------------------------------------------
   'Pops up a list or either patients or persons who are not patients
   '-----------------------------------------------------------------  
   
   Sole_Traders = modMetaData.Persons_Fill_Popup_List(Listview1, txtEmployer, Contact_Type)
  
End 

Public Sub SoleTrader_Select()
   '--------------------------------------------------------
   'User has clicked on a list of either patients or persons
   'display the details
   '--------------------------------------------------------
   
   Sole_Trader = Sole_Traders[Listview1.Item.key]
   SoleTrader_Display()
   comms = modContactsDBI.person_comms_get(Sole_Trader!fk_person)
   txtContactPerson.SetFocus()
   
End

Public Sub SoleTrader_Display()
   
   Dim sMsg As String
   
   fk_person = Sole_Trader!fk_person
   txtEmployer.text = Sole_Trader!wholename 
   Try txtAddress.text = Trim(Sole_Trader!street1 & " " & Sole_Trader!street2) & " " & Sole_Trader!town & " " & Sole_Trader!postcode
   
End

Public Sub occupation_Selection(action As String, Optional calling_control As String)
   
   Select Case action
      Case "get"
         
         If Trim(txtoccupation.text) = "" Then Return 
         occupations = modCommonDBI.occupations_get(Trim(txtoccupation.text))
         Listview1.Clear()
         
         If occupations.count Then 
            For Each occupation In occupations
               listview1.Add(occupation!pk, occupation!occupation)
            Next 
            
            Listview1.Visible = True
            Listview1.Raise
            Listview1.tag = txtOccupation
            Return 
         Else
            
            listview1.Visible = False  
         End If
         
      Case "accept"
         
         Select Case calling_control
            Case "textbox"
               
               If listview1.Visible Then
                  listview1.MoveFirst
                  Do Until listview1.MoveNext()
                     If Lower(Trim(txtoccupation.text)) = Lower(listview1.item.text) Then
                        Occupation_Selection("accept", "list")
                        
                        Return
                     End If
                  Loop
                  
               Else
                  
                  fk_occupation = 0
               End If
               
            Case "list"
               
               bExit = True
               Listview1.MoveCurrent   'set internal cursor to match marquee
               txtoccupation.text = occupations[Listview1.Item.key]!occupation 
               fk_occupation = occupations[Listview1.Item.key]!pk
               listview1.Visible = False
               bExit = False
         End Select
         txtHoursWorked.SetFocus()
   End Select
   
End

Public Sub ListView1_KeyPress()
   
   If Key.code = Key.Return Then
      listview1_dblClick()
   End If
   
End

Public Sub ColumnView2_KeyPress()
   
   If key.code = key.return Then
      ColumnView2_DblClick()
   End If
   
End

Public Sub EditAreaTextBox_KeyRelease()
   
   Select Case Last.tag
      Case "employer"
         Employer_Find()
      Case "occupation"
         occupation_Selection("get")
      Case "coded diagnosis"
         Timer1.Start()       'see timer1_timer which gets the terms
         
   End Select
   
End

Public Sub EditAreaTextBox_GotFocus()
   
   Dim hCtrl As Control
   Dim Tbtn As ToolButton
   
   'must do this as user could be selecting dose, then move off this control
   'sometimes the DateChooser1.lostfocus event dosn't trigger to remove itself
   HBox_Calander.Visible = False         
   VBox_ColumnView.Visible = False   
   listview1.Visible = False   'needed, don't remove                   
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
      Case "employer"
         With ColumnView2
            .top = VBox_EditArea.top + Last.parent.parent.Top + txtEmployer.Height
            .left = Last.Parent.Left
            .width = txtAddress.width * 2 / 3
            .height = 150 'fixme fit me to number in the list
            .Visible = False
         End With
         With Listview1
            .top = VBox_EditArea.top + Last.parent.Parent.top + txtEmployer.Height
            .left = Last.parent.left
            .width = txtEmployer.Width
            .height = 150 'fixme fit me to number in the list
            .Visible = False
         End With
      Case "occupation"
         With listview1
            .top = Last.Parent.Parent.top + Last.Height
            .left = Last.Parent.Left
            .width = Last.width - 20 
            .height = 100 'fixme, calculate me from contents
            .Raise
         End With
      Case "review date", "date of injury", "pre-injury from", "suitable duties to", "suitable duties from", "unfit from", "unfit to", "permanantly modified duties"
         For Each Hctrl In Last.parent.children
            If hctrl Is ToolButton Then
               Tbtn = hctrl
               Tbtn.Visible = True
            End If
         Next
         DateChooser1.tag = Last
      Case "coded diagnosis"
         With VBox_ColumnView
            .top = Last.parent.parent.top + Last.parent.height
            .left = Last.parent.Left
            .width = Last.width
            .Raise
         End With
   End Select
   
End

Public Sub EditAreaTextBox_Change()
   
   If bExit Then Return
   If bDateInvalid Then
      bExit = True
      Last.text = ""
      bDateInvalid = False 
      bExit = False
   End If       
   
   Select Case Last.tag
      Case "employer"
         If Len(Last.text) = 0 Then
            reset_keys()
            bexit = True
            txtAddress.text = ""
            columnview2.Visible = False   
            listview1.Visible = False  
            bexit = False
         End If
      Case "occupation"
         If Len(Last.text) = 0 Then
            fk_occupation = 0
         End If   
         
      Case "management plan"
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtReviewDate.SetFocus()
         End If    
      Case "coded diagnosis"
         If Trim(Last.text) = "" Then
            fk_code = ""
            fk_coding_system = 0    
         End If
      Case "pre-injury from"
         If Len(Last.text) Then chkFitness_PreInjury.Value = True   
      Case "unfit from"
         If Len(Last.text) Then chkFitness_Unfit.Value = True
      Case "unfit to"
         If Len(Last.text) Then chkFitness_Unfit.value = True
      Case "suitable duties from"
         If Len(Last.text) Then chkFitness_Suitable.Value = True
      Case "suitable duties to"
         If Len(Last.text) Then chkFitness_Suitable.Value = True
      Case "work restrictions"
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            tbSave.SetFocus()
         End If
      Case "work capabilities"
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtRestrictions.SetFocus()
         End If 
      Case "hours per day"
         If IsInteger(Last.text) Then 
            If Val(Last.text) < 1 Or Val(Last.text) > 24 Then
               Last.text = ""
            End If
         End If   
      Case "days per week"
         If IsInteger(Last.text) Then  
            If Val(Last.text) < 1 Or Val(Last.text) > 7 Then
               Last.text = ""
            End If    
         End If
         
   End Select
   EditArea_Notify_Datachanged(True)
   
End

Public Sub EditArea_Notify_Datachanged(flag As Boolean)
   
   If flag Then
      VBox_EditArea_Outer.Padding = 1
      VBox_EditArea_Outer.Background = Color.red
      tbSave.Foreground = color.red 
      tbSave.Enabled = True
   Else
      VBox_EditArea_Outer.Padding = 0
      VBox_EditArea_Outer.Background = Color.white
      tbSave.Foreground = color.black
      tbSave.Enabled = False   
   End If
   
End 

Public Sub EditAreaTextBox_LostFocus()
   
   Dim Hctrl As Control
   Dim tbtn As ToolButton
   Dim Hastext As Boolean
   
   Last.BackGround = Color.rgb(255, 255, 255)
   Select Case Last.tag
      Case "coded diagnosis"
         Timer1.Stop() '
      Case "certificate date", "permanantly modified duties", "suitable duties to", "review date", "pre-injury from", "suitable duties from", "unfit from", "unfit to"
         
         If Last.text <> "" Then
            hasText = True
            If Not modEditAreaHelpers.Valid_Date(Last) Then
               If Not hastext Then Return
               bDateInvalid = True 
               bExit = True
               Last.text &= " **INVALID DATE**"
               Last.SetFocus()
               bExit = False   
            End If
         End If
         
   End Select
   
   Last.pos = 0
   
End

Public Sub EditAreaTextBox_KeyPress()
   
   If bExit Then Return 
   
   If Not EditAreaTextbox_ExcludeKeys(key.code, Last.tag) Then 
      Stop Event
      Return
   End If
   Select Case Key.Code
      Case key.Esc
         HBox_Calander.visible = False
      Case Key.Return, key.tab
         Select Case Last.tag
            Case "identifier"
               txtClaim.SetFocus()
            Case "claim"
               txtEmployer.SetFocus()
            Case "employer"
               txtContactPerson.SetFocus()
            Case "contact person"
               txtMemo.SetFocus()
            Case "memo"
               txtOccupation.SetFocus()
            Case "date of injury"   
               txtMechanismInjury.SetFocus() 
            Case "occupation"
               occupation_Selection("accept", "textbox")
            Case "hours worked"
               txtDateInjury.SetFocus()
            Case "mechanism of injury"
               txtDiagnosis.SetFocus()
            Case "diagnosis"
               txtCodedDiagnosis.SetFocus()
            Case "coded diagnosis"
               txtManagementPlan.SetFocus()
            Case "management plan"
               
               If Last.pos <> Len(Last.text) + 1 Then
                  Stop Event
               End If
               txtReviewDate.SetFocus()
            Case "review date"
               modEditAreaHelpers.Calculate_Date_From_Interval(txtReviewDate)
               
               rbDueEmploymentYes.SetFocus()
            Case "pre-injury from"
               
               txtUnfit_From.SetFocus()
            Case "unfit from"
               txtUnfit_To.SetFocus()
            Case "unfit to"
               txtSuitable_From.SetFocus()
            Case "suitable duties from"
               txtSuitable_To.SetFocus()
            Case "suitable duties to"
               txtPermModDuties_From.SetFocus()
            Case "permanantly modified duties"
               txtCanWork_HrsPerDay.SetFocus()
            Case "hours per day"
               txtCanWork_DaysPerWeek.SetFocus()
            Case "days per week"
               txtCapabilities.SetFocus()
            Case "work capabilities"
               txtRestrictions.SetFocus()
               
         End Select
      Case key.Down
         Select Case Last.tag
            Case "coded diagnosis"
               If VBox_ColumnView.Visible Then
                  If columnview1.count Then
                     ColumnView1.MoveFirst()
                     ColumnView1.Item.Selected = True
                     ColumnView1.SetFocus()
                  End If
               End If
            Case "employer"
               If ColumnView2.Visible Then
                  ColumnView2.MoveFirst()
                  ColumnView2.Item.Selected = True
                  ColumnView2.SetFocus()
               End If
               If Listview1.Visible Then
                  Listview1.MoveFirst()
                  Listview1.Item.Selected = True
                  Listview1.SetFocus()
               Endif
            Case "occupation", "claim"
               If listview1.Visible Then
                  listview1.MoveFirst()
                  listview1.Item.Selected = True
                  listview1.SetFocus()
               End If
         End Select
   End Select
   
End

Public Sub rbWorkCoverConsultType_Click()
   
   HBox_Calander.Visible = False  
   If bExit Then Return 
   Select Case Last.tag
      Case "initial"
         visit!fk_lu_visit_type = Const.Workcover_VisitType_Initial
      Case "progress"
         visit!fk_lu_visit_type = Const.Workcover_VisitType_Progress
      Case "final"
         visit!fk_lu_visit_type = Const.Workcover_VisitType_Final
      Case "initial and final"
         visit!fk_lu_visit_type = Const.Workcover_VisitType_InitialAndFinal
   End Select
   visit!visit_type = Last.text
   EditArea_Notify_Datachanged(True)
   
End

Public Sub Calculate_Review_Date()
   
   Dim sIntervalUnits As String 'eg if txtdate contains 3M then units interval is 3
   Dim iNumberOfMonths As Integer      'do not need both these declared, but do for readability
   Dim iNumberOfYears As Integer 
   Dim iNumberOfDays As Integer
   Dim iNumberOfWeeks As Integer
   Dim vPossibleDate As Variant
   Dim aDate As Date
   Dim x As Integer
   
   bExit = True 'stop change event of edit area triggering
   
   If UCase(Right(Trim(txtReviewDate.text), 1)) = "M" Then
      
      Try iNumberOfMonths = Val(Left(txtReviewDate.text, Len(Trim(txtReviewDate.text)) - 1))
      If Error Then
         txtReviewDate.text = ""
      End If  
      txtreviewDate.text = Format(DateAdd(Now, gb.Month, iNumberOfMonths), "dd/mm/yyyy")
   Else 
      If UCase(Right(Trim(txtReviewDate.text), 1)) = "D" Then
         Try iNumberOfDays = Val(Left(txtReviewDate.text, Len(Trim(txtReviewDate.text)) - 1))
         If Error Then 
            txtReviewDate.text = ""
         End If   
         txtReviewDate.text = Format(DateAdd(Now, gb.day, iNumberOfDays), "dd/mm/yyyy")
      Else
         If UCase(Right(Trim(txtReviewDate.text), 1)) = "W" Then
            Try iNumberOfWeeks = Val(Left(txtReviewDate.text, Len(Trim(txtReviewDate.text)) - 1))
            If Error Then 
               txtReviewDate.text = ""
            End If   
            txtReviewDate.text = Format(DateAdd(Now, gb.Week, iNumberOfweeks), "dd/mm/yyyy")
         End If
      End If
   End If  
   bExit = False 
   
End

Public Sub DateChooser1_Activate()
   
   Last.tag.text = Format(Last.value, "dd/mm/yyyy")
   HBox_Calander.Visible = False  
   DateChooser1.tag.SetFocus()
   
End

Public Sub DateChooser1_LostFocus()
   
   HBox_Calander.Visible = False  
   
End

Public Sub EditAreaCheckBox_Click()
   
   HBox_Calander.Visible = False  
   If bExit Then Return 
   Select Case Last.tag
      Case "doctor agrees"
         Try visit!doctor_consented = Last.value
      Case "worker agrees"
         Try visit!worker_consented = Last.value
      Case "permanantly modified"
         If Last.value = False Then
            txtPermModDuties_From.text = ""
         End If
      Case "pre-injury"
         If Last.value = False Then
            txtPreInjury_From.text = ""
         Else
            rbAssessWorkplaceNo.value = True
            txtCapabilities.text = ""
            txtRestrictions.text = ""
         End If
         
      Case "suitable"
         If Last.value = False Then
            txtSuitable_To.text = ""
            txtSuitable_From.text = ""
         End If
      Case "unfit"
         If Last.value = False Then
            txtUnfit_From.text = ""
            txtUnfit_To.Text = ""
         End If
   End Select
   
End

Public Sub Coded_Term_Get()
   
   Dim term As Collection 
   Dim key As String
   
   If Trim(txtCodedDiagnosis.text) = "" Then
      fk_code = "" 'clin_coding.generic_terms key is  a string
      fk_coding_system = 0
      VBox_ColumnView.Visible = False   
      Return
   End If
   Timer1.Stop()
   Terms = modCodingDBI.Get_Terms(Trim(txtCodedDiagnosis.text), chkLimit.value, chkicd10.value, SpinBoxTermLimits.value)
   With columnview1
      .Clear()
      .Columns[0].Width = txtCodedDiagnosis.width - 100
      .Columns[1].width = 100
   End With
   If Terms.count Then
      For Each term In Terms
         key = term!code
         columnview1.Add(key, 0)
         columnview1[key][0] = term!term
         columnview1[key][1] = term!system
      Next 
      lblTermCount.text = Str$(terms.count) & " terms retreived"
      columnview1.tag = txtCodedDiagnosis
      VBox_ColumnView.Visible = True 
   Else 
      VBox_ColumnView.Visible = False 'empty recordset
   End If  
   
End

Public Sub Columnview1_KeyPress()
   
   If key.code = key.return Then Columnview1_DblClick()
   
End

Public Sub Coded_Term_Select()
   
   columnview1.MoveCurrent()                     'match internal cursor to visible row
   fk_code = Terms[columnview1.Item.key]!code
   fk_coding_system = Terms[columnview1.Item.key]!fk_coding_system
   If txtDiagnosis.text = "" Then
      txtDiagnosis.text = columnview1.Item.Text
   End If   
   txtCodedDiagnosis.text = Terms[columnview1.Item.key]!term & " (" & Terms[columnview1.Item.key]!code & ")"
   txtCodedDiagnosis.pos = 0 'if case term too long for textbox
   txtManagementPlan.SetFocus()
   
End

Public Sub Columnview1_DblClick()
   
   Coded_Term_Select() 
   VBox_ColumnView.Visible = False   
   
End

Public Sub mnuVisits_Click()
   
   Select Case Last.tag
      Case "edit"
         Visit_Edit()
      Case "delete"
      Case "help"
      Case "preview"
         Preview() 
      Case "reprint"
         Visit_RePrint()
   End Select
   
End

Public Sub cvwVisits_Menu()
   
   If Not cvwVisits.count Then Return 
   mnuVisits.Popup()
   
End

Public Sub EditAreaButtons_KeyPress()
   
   If key.code = key.enter Then 
      Save()
   Endif
   
End

Public Sub rbTypeEmployer_Click()
   
   If bExit Then Return 
   columnview2.Visible = False 
   Listview1.Visible = False  
   txtAddress.text = ""
   
   If Last.tag = "organisation" Then 
      Contact_Type = const.contacttype_organisation
   Else
      Contact_Type = const.contacttype_person
   End If 
   Employer_Find()
   
End
