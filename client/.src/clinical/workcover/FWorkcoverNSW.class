' Gambas class file

' Copyright (C) 2008-2014 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-------------------------------------------------------------------------------------
' PURPOSE      Workcover form data entry
' CAVEAT       Currently only setup for NSW workcover template  in the tex templates
' NOTES        The code  HBox_Calander.Visible = False scattered apparently at random
'              all over the place is necessary, because the lost focus event of the
'              calender dosn't triggPhoner reliably, leaving it poppup up at inopportune
'              times.
'              fk_code is a string because the database field in coding is a string
'KNOWN BUGS    one known not quantified see this code:
'  If IsNull(visit!fk_claim) Then
'          Message.Info("Richard the fk_claim Null bug...the gui will Stop at the Next Line , please check the collection contents ")
'          Error.Raise("an error")
'       Endif

' TODO'S       Implement delete of visit/claim with audit trail
'              Look at implications if you allow the user to change an existing diagnosis wording
'              this should be allowable eg (could have made a spelling mistake etc, but need
'              to ripple this change through to other sections sharing the previous spelling
'-----------------------------------------------------------------------------------
Private ReferenceHBoxForColumnview As Hbox   'used to reset columnview position when form resizing
Private bEmbedded As Boolean
Private bDateInvalid As Boolean
Private bInsistCoding As Boolean
Private bNewVisit As Boolean
Private bkeyvalid As Boolean
Private cvwVisits_key As Integer
Private bexit As Boolean
Private claim As Collection
Private claims As Collection
Private claims_visits As Collection
Private bNewClaim As Boolean
Private visit As Collection
Private visits As Collection  'all the visits in a claim
Private branch As Collection
Private branches As Collection
Private occupations As Collection
Private currentconsult As CConsult
Private bClaimLoaded As Integer
Private bVisitLoaded As Integer
Private fk_claim As Integer
Private fk_caused_by_employment As Integer
Private fk_lu_visit_type As Integer
Private fk_consult_claim As Integer
Private fk_consult_visit As Integer
Private fk_visit As Integer
Private fk_occupation As Integer 'key to common.lu_occupations = workers occupation
Private fk_branch As Integer
Private fk_person As Integer
Private fk_town As Integer
Private fk_organisation As Integer
Private SpellChecker As ClskSpell
Private visit_types As String[]
Private fk_code As String  'see coding.generic_terms table
Private fk_coding_system As Integer 'e.g 1 = icpc2Plus 2 = icd10
Private Contact_Type As Integer
Private fk_progressnote As Integer
Private terms As Collection
Private comms As Collection                                             'of comms for the branch
Private Sole_Traders As Collection
Private Sole_Trader As Collection
Private Deleted_WorkcoverVisit As Collection
Private Deleted_Workcoverclaim As Collection

Public Sub set_embedded(flag As Boolean)
   
   bEmbedded = flag
   
End

Public Sub Set_Insist_Coding(f As Boolean)
   '------------------------------------------------------------------------
   'Will be for global option where admin wants all workcover consults coded
   'currently not used
   '------------------------------------------------------------------------
   
   bInsistCoding = f
   
End

Public Sub Form_Close()
   
   Settings_Save()
   
End

'Public Sub Init(cons As CConsult, ac As CConsult)

Public Sub Init(cons As CConsult)  
   
   currentconsult = cons                                                   'Set consult from FClinical
   Set_Insist_Coding(True) 'remove me only for testing
   DateChooser1.Value = Now()
   Settings_Load()                                                         'load split sizes and browser zoom for this form"
   cvwVisits.Columns.Count = 4
   cvwVisits.Columns[0].width = 60  'date
   cvwVisits.Columns[1].width = 80  'TYPE
   cvwVisits.Columns[2].width = 150  'diagnosis
   cvwVisits.Columns[3].width = 150  'management
   ColumnView2.Columns.count = 4
   columnview1.Columns.count = 2
   visit_types = New String[5]
   visit_types[1] = "Initial"
   visit_types[2] = "Progress"
   visit_types[3] = "Final"
   visit_types[4] = "Initial and Final"
   ReferenceHBoxForColumnview = New HBox(VBox_EditArea)
   bexit = True
   modEditAreaHelpers.Set_ICD10(chkicd10, lblCodingSystem)
   bexit = False
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teForSpelling
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"  'FIXME
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   Reload()                                                                'Refresh claims list and visits list
   
End

Public Sub Print_Content()
   
   Save() 
   
End

Public Sub Save()
   '----------------------------------
   'Save the workcover claim and visit
   'Note those idiots at NSW workcover changed the whole damn form oct 2011
   'and enforced not accepting them end of march!!!!!!
   'i.e all the old forms may/may not save with this new routine
   'may have to work out save on basis of date later
   '  claim
   '  pk serial NOT NULL,
   ' x  fk_consult integer NOT NULL, -- fk to clin_consult.consult, gives date the claim was first logged. Note the first visit.fk_consult will be same as this, but no subsequent ones will. Last visit.fk_consult = day claim was finalised
   ' x  claim_number text, -- claim number for this workcover claim
   ' x  fk_occupation integer, -- foreign key to common.lu_occupations table...
   ' x  fk_branch integer, -- foreign key to contacts.data.organisations table or contacts.data_persons table where the employer is a person and not a company
   ' x  hours_week_worked integer,
   ' x  mechanism_of_injury text,
   ' x  date_injury text NOT NULL, -- if known, the date of injury ?how to handle vague dates here, so have made this text for now
   ' x  contact_person text, -- A contact person for this claim...
   ' x  memo text,
   ' x  identifier text NOT NULL,
   ' x  fk_person integer, -- key to contacts.data_persons table where employer is a person and not an organisation
   ' x  accepted boolean, -- If True then the work cover claim as been accepted by the insurer
   ' x  deleted boolean DEFAULT false, -- if true the claim is marked as deleted
   ' x  date_first_seen date, -- the day on which the patient was first seen for this workcover injury
   ' x  preexisting_factors text, -- any  pre-existing factors relevant to this workcover injury
   '   consistant_with_cause text DEFAULT 'yes' or 'no' or 'uncertain',
   '   VISIT
   ' x  pk serial Not Null,
   ' x  fk_claim integer NOT NULL, -- foreign key linking to claims table
   ' x  fk_lu_visit_type integer NOT NULL, -- key to lu_visit_type table
   ' x  diagnosis text NOT NULL, -- the diagnosis may be free text but could be coded
   ' x  fk_code text, -- key to coding.generic_terms table
   ' x  management_plan text, -- description of the managment plan
   ' x  review_date date, -- Date the treatment plan will be reviewed
   ' x  assessworkplace boolean NOT NULL DEFAULT false,
   ' x  hours_capable integer, -- number of hours in the day capable
   ' x  days_capable integer, -- number of days in a week capable of working
   ' x  restrictions text,  'used up to end of 30/03/2013
   ' x  fk_caused_by_employment integer NOT NULL,
   ' x doctor_consented boolean DEFAULT true, -- if true doctor consented. Note this is not in the ...
   ' x  worker_consented boolean DEFAULT true, -- if true worker consented. Note this is not in the ...
   ' x  fitness_preinjury_from date,
   ' x  fitness_suitable_from date,
   ' x  fitness_suitable_to date,
   ' x  fitness_unfit_from date,
   ' x fitness_unfit_to date,
   ' x  fitness_perm_mod_duties_from date, ?still used after 30/03/2013
   ' x  fk_consult integer,
   ' x  fk_progressnote integer, -- key to clin_consult.progressnotes points to last progress note associated with this visit
   ' x  fk_coding_system integer, -- if not null this is the coding system used for the coded diagnosis
   ' x capabilities text, 'used up to 30/03/2013
   ' x certificate_date date, -- The certificate date, usually now() but sometimes needs to be backdated, for example if...
   ' x latex text, -- the LaTex definition of the workcover form
   ' x deleted boolean DEFAULT false, -- if true the visit is marked as deleted
   ' x time_return_any_duties text,
   ' x  factors_delaying_return text,
   '  copy_of_duties boolean DEFAULT false,
   '   refer_rehab_provider boolean Default False, - - If True Then the patient on this visit needs referral To a rehabilitation provider
   ' x  referrals_other_providers text, -- details of referrals to other health providers including...
   ' x  capacity_lifting_carrying text,
   '  x capacity_sitting_tolerance text,
   ' x  capacity_standing_tolerance text,
   ' x  capacity_pushing_pulling text,
   ' x  capacity_bend_twist_squat text,
   ' x  capacity_driving text,
   ' x  capacity_other text,
   
   '----------------------------------
   Dim claim As CRow
   Dim visit As CRow
   Dim ProgressNote As CRow
   '---------------------------------------------
   'Do some validation/prompt for missing printer
   '---------------------------------------------
   If VBox_EditArea_Outer.padding = 0 Then Return
   If Not Valid_WorkCover_Form() Then Return
   '-----------------------------
   ' first the visit
   ' pk serial Not Null,
   ' fk_consult integer Not Null,
   ' claim_number text,
   ' fk_occupation integer,
   ' fk_branch integer,
   ' hours_week_worked integer,
   ' mechanism_of_injury text,
   ' date_injury text Not Null,
   ' contact_person text,
   ' memo text,
   ' identifier text Not Null,
   ' fk_person integer,
   ' accepted boolean,
   ' deleted boolean Default False
   '---------------
   claim = New CRow
   If fk_claim Then
      claim.put_unchanged(fk_claim, "fk_claim")
   Else
      claim!fk_consult = currentconsult.GetPK()
   Endif
   claim!claim_number = Trim(txtClaim.text)
   If fk_occupation <> 0 Then                              'have insisted on occupation, this should never be zero
      claim!fk_occupation = fk_occupation
   End If
   claim!fk_branch = fk_branch
   If fk_person <> 0 Then claim!fk_person = fk_person
   claim!hours_week_worked = Null
   If Trim(txtHoursWorked.text) <> "" Then
      Try claim!hours_week_worked = Val(txtHoursWorked.text)
   Endif
   claim!mechanism_of_injury = Trim(txtMechanismInjury.text)
   claim!date_injury = Trim(txtDateInjury.text)
   claim!date_first_seen = Trim(txtDateFirstSeen.text)
   claim!contact_person = Trim(txtContactPerson.text)
   claim!preexisting_factors = Trim(txtPreExistingFactors.text)
   claim!memo = Trim(txtMemo.text)
   claim!identifier = Trim(txtIdentifier.text)
   claim!accepted = CBool(chkClaimAccepted.value)
   If rbInjuryConsistantWithHistoryYes.value = True Then
      claim!consistant_with_cause = 0
   End If
   If rbInjuryConsistantWithHistoryNo.value = True Then
      claim!consistant_with_cause = 1
   End If
   If rbInjuryConsistantWithHistoryuncertain.value = True Then
      claim!consistant_with_cause = 2
   End If
   claim.Save("clin_workcover.claims", "fk_claim")
   '--------------
   'next the visit
   '--------------
   Visit = New CRow
   If fk_visit <> 0 Then
      visit.put_unchanged(fk_visit, "fk_visit")
   Endif
   If fk_consult_visit <> 0 Then
      visit!fk_consult = fk_consult_visit
   Else
      visit!fk_consult = currentconsult.GetPK()
   Endif
   visit!fk_lu_visit_type = fk_lu_visit_type
   visit!fk_claim = claim!fk_claim
   visit!diagnosis = Trim(txtDiagnosis.text)
   visit!fk_code = fk_code  'fk_code is string, if "" will set this to null
   If fk_coding_system <> 0 Then visit!fk_coding_system = fk_coding_system
   visit!management_plan = Trim(txtManagementPlan.text)
   Try visit!review_date = Trim(txtReviewDate.text)
   Try visit!hours_capable = Val(txtCanWork_HrsPerDay.text)
   Try visit!days_capable = Val(txtCanWork_DaysPerWeek.Text)
   visit!restrictions = Trim(txtRestrictions.text)
   visit!capabilities = Trim(txtCapabilities.text)
   Try visit!certificate_date = Val(txtCertificateDate.text)
   Try visit!fitness_preinjury_from = Val(txtPreInjury_From.text)
   Try visit!fitness_suitable_from = Val(txtSuitable_From.text)
   Try visit!fitness_suitable_to = Val(txtSuitable_To.text)
   Try visit!fitness_unfit_from = Val(txtUnfit_From.text)
   Try visit!fitness_unfit_to = Val(txtUnfit_To.text)
   Try visit!fitness_perm_mod_duties_from = Val(txtPermModDuties_From.text)
   If rbAssessWorkplaceYes.value = True Then
      visit!assessworkplace = True
   Else
      visit!assessworkplace = False
   End If
   If rbCopyOfDutiesYes.value = True Then
      visit!copy_of_duties = True
   Else
      visit!copy_of_duties = False
   End If
   If rbRehabProviderYes.value = True Then
      visit!refer_rehab_provider = True
   Else
      visit!refer_rehab_provider = False
   Endif
   visit!fk_caused_by_employment = fk_caused_by_employment
   visit!doctor_consented = CBool(chkAgreeToTreat_Doctor.value)
   visit!worker_consented = CBool(chkAgreeToTreat_Worker.value)
   visit!time_return_any_duties = Trim(txtEstimatedTimeForAnyDuties.text)
   visit!factors_delaying_return = Trim(txtDelayingFactors.text)
   visit!referrals_other_providers = Trim(TxtReferrals.text)
   visit!capacity_lifting_carrying = Trim(txtLifting.text)
   visit!capacity_sitting_tolerance = Trim(txtSitting.text)
   visit!capacity_standing_tolerance = Trim(txtStanding.text)
   visit!capacity_pushing_pulling = Trim(txtPushing.text)
   visit!capacity_bend_twist_squat = Trim(txtBendTwistSquat.text)
   visit!capacity_driving = Trim(txtDriving.text)
   visit!capacity_other = Trim(txtOtherCapability.text)
   visit!review_comments = Trim(txtReviewComments.text)
   '-------------------------------------
   'add or edit an existing progress note
   '--------------------------------------
   ProgressNote = New CRow
   ' sProgressNotes = Claim_Construct_ProgressNotes_structured_HTML().GetData()
   ProgressNote!notes = Claim_Construct_ProgressNotes_structured_HTML(visit).GetData()
   If fk_progressnote Then
      ProgressNote.put_unchanged(fk_progressnote, "fk_progressnote")            'am editing todays progress note
   End If
   ProgressNote!fk_audit_action = const.cAuditAction_Insert                  'is an insert
   ProgressNote!fk_consult = visit!fk_consult
   ProgressNote!fk_section = const.cSection_Workcover
   ProgressNote!problem = "Workcover"
   ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
   visit!fk_progressnote = progressnote!fk_progressnote
   'this code needs fixing
   'with the LaTex overpic command I found I needed to use pdflatex
   If DateDiff(Val("31/03/2013"), Val(txtCertificateDate.text), gb.day) > 0 Then 'all dates later than 31/03/2013
      visit!latex = WorkcoverForm_LaTeX_Construct(visit).GetData()
      modPrinting.Print_latex_PDF(visit!latex)  'IAN TO FIX THIS uses overpic
   Else
      visit!latex = WorkcoverForm_LaTeX_Construct_To_31March2013(visit).GetData()
      modPrinting.Print_latex(visit!latex, const.Paper_Plain)  'IAN COMPARE TO THIS
   End If
   visit.Save("clin_workcover.visits", "fk_visit")
   modDBConnect.CommitTrans()
   EditArea_Notify_Datachanged(False)
   FClinical.Refresh_AllPreviousNotes()
   FClinical.Refresh_Section(const.cSection_Workcover)
   Reload()
   
End

Public Sub New_Entry()
   '--------------------------------------
   'Called from the main Fclinical Toolbar
   '--------------------------------------
   
   Claim_New()
   
End

Public Sub Reset_Keys()
   
   fk_occupation = 0
   fk_person = 0
   fk_branch = 0
   fk_claim = 0
   fk_visit = 0
   fk_lu_visit_type = 0
   fk_code = ""
   fk_coding_system = 0
   fk_consult_visit = 0
   fk_consult_claim = 0
   fk_caused_by_employment = const.Workcover_CausedByEmployment_Yes
   
End

Public Sub Reload()
   '-------------------------------------
   'Reloads all current claims and visits
   '-------------------------------------
   
   Claims_Refresh()                  'refresh workcover_claims collection, fill the claims list
   If lvwClaims.count Then           'and show in the list
      lvwClaims.MoveLast()           'move to the latest claim
      lvwClaims.Item.Selected = True 'highlight that row with marquee, this loads the visits
   End If
   VBox_EditArea.Enabled = False
   HBox_Visit_Type.Enabled = False
   EditArea_Notify_Datachanged(False)
   
End

Public Function Valid_WorkCover_Form() As Boolean
   '--------------------------------------------------------------------
   'Validate adequate data exists before a save
   'mmm.................. fuckwit beaurocrats changing forms mid stream
   'means having to date-test the editing area contents
   '--------------------------------------------------------------------
   
   Dim sMsg As String
   
   Message.Title = "Missing Workcover Form Information"
   If Trim(txtIdentifier.text) = "" Then
      sMsg = "Please enter an identifier for this claim e.g 'Right Wrist Injury'."
      Message.Info(sMsg)
      txtIdentifier.SetFocus()
      Return False
   End If
   If fk_branch = 0 And fk_person = 0 Then  'no branch or person
      Missing_Employer_Hint()
      txtemployer.SetFocus()
      Return False
   Else
      If fk_person = 0 And fk_branch = 0 Then
         Missing_Employer_Hint()
         txtemployer.SetFocus()
         Return False
      Endif
   End If
   If Trim(txtOccupation.text) = "" Then
      sMsg = "Please enter an occupation for this worker"
      Message.Info(sMsg)
      txtOccupation.SetFocus
      Return
   Endif
   '------------------------------------------------------------------------------------------ 
   'Must check occupation every time, e.g an fk_occupation could exist, even if the
   'user altered an occupation e.g
   'existing occupation could be cardiologist, they then realised the person was 
   'cardiologist - interventional, simply added the second bit on, the fk_occupation is
   'then invalid fixme - remove fk-occupation through entire easygp data entry and always check
   '-------------------------------------------------------------------------------------------
   SpellCheck_TextBox(txtoccupation)
   fk_occupation = modCommonDBI.Occupation_Check_Valid(txtOccupation)
   If fk_occupation = -1 Then Return
   If Not IsDate(txtCertificateDate.text) Then
      sMsg = "Please enter the certificate date."
      Message.Info(sMsg)
      txtCertificateDate.SetFocus()
      Return False
   Endif
   
   If txtDateInjury.text = "" Then
      sMsg = "Please enter the date of injury."
      Message.Info(sMsg)
      txtDateInjury.SetFocus()
      Return False
   End If
   If Not IsDate(txtDateFirstSeen.text) Then
      If DateDiff(Val("31/03/2013"), Val(txtCertificateDate.text), gb.day) > 0 Then
         sMsg = "Please enter a valid date when the patient was first seen."
         Message.Info(sMsg)
         With txtDateFirstSeen
            .Background = Color.rgb(95, 255, 175)
            .SetFocus()
            Return False
         End With
      End If
   End If
   
   If txtMechanismInjury.text = "" Then
      smsg = "Please enter the mechanism of the injury"
      Message.Info(sMsg)
      txtMechanismInjury.SetFocus()
      Return False
   End If
   
   If txtDiagnosis.text = "" Then
      sMsg = "Please enter the diagnosis."
      Message.Info(sMsg)
      txtDiagnosis.SetFocus()
      Return False
   End If
   If bInsistCoding = True Then  'code keys are strings
      If fk_code = "" Or fk_coding_system = 0 Then
         Message.Title = "Coding Workcover Consultations"
         sMsg = "Please enter a coded diagnosis.\n\n"
         "Your SysAdmin has determined that all workcover certificates must also be coded."
         Message.Info(sMsg)
         txtCodedDiagnosis.SetFocus()
         Return False
      Endif
   Endif
   If txtManagementPlan.text = "" Then
      If rbWorkcoverConsultTypeInitial.value = True Or rbWorkcoverConsultTypeProgress.value = True Then
         sMsg = "Please enter the management plan."
         Message.Info(sMsg)
         txtManagementPlan.SetFocus()
         Return False
      End If
   End If
   '----------------------
   'Missing a review date?
   '----------------------
   If txtReviewDate.text = "" Then
      '------------------------------------------------------------------------------------------------------------
      'If suitable duties scenarios are complicated, for example in practice one could fill in different
      'sets of dates on the same for - a period of unfitness, a period of suitable and a fit for normal duties from.
      '1) This is a final certficate, so don't need a review date, if so, should have perm mod duties
      '2) This is on same certificate as a fit for pre-injury duties
      '------------------------------------------------------------------------------------------------------------
      If chkFitness_Suitable.value = True Then                                               'suitable duties
         Select Case visit!fk_lu_visit_type
            Case Const.Workcover_VisitType_Final, Const.Workcover_VisitType_InitialAndFinal
               If chkFitness_PreInjury.Value = False Then
                  If Not IsDate(txtPermModDuties_From.text) Then
                     sMsg = "Please enter the date for review."
                     Message.Info(sMsg)
                     txtReviewDate.SetFocus()
                     Return False
                  Endif
               End If
            Case Else
               '-----------------------
               'not a final certificate
               '-----------------------
               sMsg = "Please enter the date for review."
               Message.Info(sMsg)
               txtReviewDate.SetFocus
               Return False
         End Select
      End If
   Else
      If DateDiff(Now, Val(txtReviewDate.text), gb.Day) > 28 Then
         If Trim(txtReviewComments.text) = "" Then
            sMsg = "Please add comments as to why the review date is longer than one month."
            Message.Info(sMsg)
            With txtReviewComments
               .Background = Color.rgb(95, 255, 175)
               .SetFocus
            End With
            Return
         Endif
      Endif
   End If
   
   If Not IsDate(txtPreInjury_From.text) And Trim(txtPreInjury_From.text) <> "" Then
      sMsg = " Please enter a valid Date For the pre - injury duties."
      Message.Info(sMsg)
      txtPreInjury_From.SetFocus()
      Return False
   End If
   
   If Trim(txtUnfit_From.text) <> "" Then                       'if have suitable from date
      If Not IsDate(txtUnfit_From.text) Then              'is it valid ?No
         txtUnfit_From.SetFocus()                               'try again
         Return
      End If
      If Not IsDate(txtUnfit_To.text) Then                'must have valid suitable to
         txtUnfit_To.SetFocus()
         Return False
      End If
      'the NSW workcover form insists on this field dates > 30/04/2013
      If Trim(txtEstimatedTimeForAnyDuties.text) = "" And DateDiff(Val("31/03/2013"), Val(txtCertificateDate.text), gb.day) > 0 Then
         sMsg = "Please enter the time to resume any duties."
         Message.Info(sMsg)
         With txtEstimatedTimeForAnyDuties
            .Background = Color.rgb(95, 255, 175)
            .SetFocus()
         End With
         Return
      End If
   End If
   
   If Trim(txtSuitable_From.text) <> "" Then                       'if have suitable from date
      If Not IsDate(txtSuitable_From.text) Then              'is it valid ?No
         sMsg = "Please enter a valid date from the suitable duties from date."
         Message.Info(smsg)
         txtSuitable_From.SetFocus()                               'try again
         Return
      End If
      If Not IsDate(txtSuitable_To.text) Then                'must have valid suitable to
         sMsg = "Please enter a valid date from the suitable duties to date."
         Message.Info(smsg)
         txtSuitable_To.SetFocus()
         Return False
      End If
      If Trim(txtCanWork_DaysPerWeek.text) = "" Then
         sMsg = "Please enter the number of days per week the patient can work."
         Message.Info(smsg)
         With txtCanWork_DaysPerWeek
            .Background = Color.rgb(95, 255, 175)
            .SetFocus()
         End With
         Return
      Endif
      If Trim(txtCanWork_HrsPerDay.text) = "" Then
         sMsg = "Please enter the number of hourse per day the patient can work."
         Message.Info(smsg)
         With txtCanWork_HrsPerDay
            .Background = Color.rgb(95, 255, 175)
            .SetFocus()
         End With
         Return
      Endif
   End If
   If Not IsDate(txtPermModDuties_From.text) And Trim(txtPermModDuties_From.text) <> "" Then
      txtPermModDuties_From.SetFocus()
      Return False
   End If
   
   If Trim(txtPreInjury_From.text) = "" And Trim(txtUnfit_From.text) = "" And Trim(txtSuitable_From.text) = "" And Trim(txtPermModDuties_From.text) = "" Then
      Message.info("You must record some sort of information about dates and level of fitness work")
      Return False
   End If
   
   If Trim(txtUnfit_From.text) <> "" And Trim(txtPreInjury_From.text) <> "" Then
      If txtCanWork_HrsPerDay.text = "" Then
         sMsg = "Please enter the number of hourse per day the patient can work."
         Message.Info(smsg)
         txtCanWork_HrsPerDay.SetFocus()
         Return False
      End If
      If txtCanWork_DaysPerWeek.text = "" Then
         sMsg = "Please enter the number of days per week the patient can work."
         Message.Info(smsg)
         txtCanWork_DaysPerWeek.SetFocus()
         Return False
      End If
      If txtRestrictions.text = "" Then
         ' txtRestrictions.SetFocus()
         ' Return False
      End If
   End If
   
   Return True
   
End

Public Sub SpellCheck_TextBox(tb As TextBox)
   
   bexit = True
   teForSpelling.text = tb.text
   bexit = False
   
   SpellChecker.init(tb)
   SpellChecker.StartSpelling()
   
End

Public Sub Settings_Save()
   
   Settings["FWorkcover/VSplit_workcoverform"] = VSplit_WorkcoverForm.Layout
   Settings["FWorkcover/HSplit_WorkcoverClaims"] = HSplit_WorkcoverClaims.Layout
   
End

Private Sub Settings_Load()
   
   VSplit_WorkcoverForm.Layout = Settings["FWorkCover/VSplit_workcoverform", modUtil.VSplit([647, 169])]
   HSplit_WorkcoverClaims.Layout = Settings["FWorkCover/HSplit_WorkcoverClaims", modUtil.HSplit([350, 815])]
   cvwVisits.font = Font[Settings["FWorkcover/cvwVisits.font", "DejaVu Sans,9"]]
   
End

Public Sub AssessWorkplace_Click()
   
   HBox_Calander.Visible = False
   If bExit Then Return
   EditArea_Notify_Datachanged(True)
   
End

Public Sub rbWorkcoverConsultType_Keypress()
   
   If key.code = key.return Then
      txtEmployer.SetFocus()
   End If
   EditArea_Notify_Datachanged(True)
   
End

Public Sub rbDueEmployment_Click()
   
   HBox_Calander.Visible = False
   Select Case Last.tag
      Case "yes"
         fk_caused_by_employment = const.Workcover_CausedByEmployment_Yes
      Case "no"
         fk_caused_by_employment = const.Workcover_CausedByEmployment_No
      Case "uncertain"
         fk_caused_by_employment = const.Workcover_CausedByEmployment_Uncertain
   End Select
   fk_caused_by_employment = Last.tag
   EditArea_Notify_Datachanged(True)
   
End

Public Sub Visit_New()
   
   Dim sMsg As String
   
   fk_visit = 0
   fk_consult_visit = 0
   fk_progressnote = 0
   If visit!fitness_preinjury_from <> Null Then
      sMsg = "Pre-injury from:" & Format(visit!fitness_preinjury_from, "dd/mm/yyyy") & " "
   Endif
   If visit!fitness_suitable_from <> Null Then
      sMsg &= "Suitable Duties from " & Format(visit!fitness_suitable_from, "dd/mm/yyyy") & " to " & Format(visit!fitness_suitable_to, "dd/mm/yyyy") & " "
   Endif
   If visit!fitness_unfit_from <> Null Then
      sMsg &= "Suitable Duties from " & Format(visit!fitness_unfit_from, "dd/mm/yyyy") & " to " & Format(visit!fitness_unfit_to, "dd/mm/yyyy") & " "
   Endif
   If visit!fitness_perm_mod_duties_from <> Null Then
      smsg &= "Permanantly modified Duties from " & Format(visit!fitness_perm_mod_duties_from, "dd/mm/yyyy")
   Endif
   If visit!hours_capable <> Null Then
      sMsg &= Str(visit!hours_capable) & "hours/day"
      If visit!days_capable <> Null Then
         smsg &= " " & Str(visit!days_capable) & " per week"
      Endif
   Endif
   EditArea_Visit_Clear()                    'Clear all the input area for a visit
   Capability_Gui_Show("post 31/03/2013")
   lblLastCertificateDetails.text = "DATES ON LAST CERTIFICATE:" & smsg
   bNewVisit = True
   If cvwVisits.count <> 0 Then
      '--------------------------------------------------------------------------------
      'if visits already exist for this claim add some basic data likely to be the same
      '--------------------------------------------------------------------------------
      bExit = True
      txtDiagnosis.text = visit!diagnosis
      fk_lu_visit_type = const.Workcover_VisitType_Progress     'asssume progress visit
      txtManagementPlan.text = visit!management_plan            'assume management plan same
      txtRestrictions.text = visit!restrictions                 'assume restrictions same
      rbWorkcoverConsultTypeProgress.value = True
      If visit!assessworkplace Then
         rbAssessWorkplaceYes.value = True
      Else
         rbAssessWorkplaceNo.Value = False
      End If
      If IsNull(visit!fk_claim) Then
         Message.Info("Richard the fk_claim Null bug...the gui will Stop at the Next Line , please check the collection contents ")
         Error.Raise("an error")
      Endif
      fk_claim = visit!fk_claim  'FIXME BUG HERE.
      fk_coding_system = visit!fk_coding_system
      fk_code = visit!fk_code
      txtCertificateDate.text = Format(Now, "dd/mm/yyyy")
      visit!certificate_date = Format(Now, "dd/mm/yyyy")
      bexit = False
   Else
      '--------------------------------------
      'this is the first visit for this claim
      '--------------------------------------
      visit!fk_lu_visit_type = const.Workcover_VisitType_Initial
      rbWorkcoverConsultTypeInitial.Value = True
      fk_caused_by_employment = const.Workcover_CausedByEmployment_Yes
      fk_code = ""
      fk_coding_system = 0
   End If
   lblWorkcover.text = "NEW VISIT " & UCase(Trim(txtIdentifier.text))
   bexit = False
   VBox_EditArea.Enabled = True
   HBox_Visit_Type.Enabled = True
   txtReviewDate.SetFocus()
   
End

Public Sub Visit_RePrint()
   '----------------------------------------------------------------------------
   'User has clicked on a visit from visits list, and wants to re-print the form
   'the act of doing this has loaded all the data into Visit and the gui
   'so now, load all the stuff into Claim
   '----------------------------------------------------------------------------
   
   lvwClaims_Select 'load stuff into claim ?need anymore fixme
   modPrinting.Print_latex(visit!latex, const.Paper_Plain)
   
End

Public Sub Claims_Refresh()
   '-------------------------------------------
   'Refreshes all existing workcover claims
   'The view is essential a view of all visits
   '------------------------------------------
   
   Dim iLastClaim As Integer
   
   claims = New Collection
   
   currentconsult.Refresh("workcover_claims")
   visits = modUtil.Copy_Collection_Keyed_Sequentially(currentconsult!workcover_claims)    'reload all the history
   lvwClaims.Clear()
   For Each claim In visits
      If iLastclaim <> claim!fk_claim Then
         claims.Add(claim, lvwClaims.count)
         lvwClaims.Add(lvwClaims.count, claim!identifier)
         iLastClaim = claim!fk_claim
      End If
   Next
   'the last claim is now in the collection claim
   
End

Public Sub Preview()
   '-----------------------------
   'Called from FClinical toolbar
   '-----------------------------
   
   Claim_Preview()
   
End

Public Sub Claim_Preview()
   '------------------------------------------------
   'Previews a claim but on another tab in FClinical
   'FIXME, once I've run the workcover latex fix on my db can modify this code to 2 lines
   '------------------------------------------------
   
   Dim Filename As String
   
   If bNewVisit Then Return 'currently can't preview a new form
   cvwVisits.MoveCurrent()
   filename = modPrinting.Latex_To_PDF(currentconsult!workcover_claims[fk_visit]!latex)
   FClinical.Editor_ShowPage_External("pdf file", "Workcover Form " & Format(currentconsult!workcover_claims[fk_visit]!certificate_date, "dd/mm/yyyy"), filename)
   
End

Public Sub Claim_Collect_Data()
   
   claim = New Collection
   claim!claim_number = Trim(txtClaim.text)
   claim!fk_occupation = fk_occupation
   claim!occupation = Trim(txtOccupation.text) 'will be dropped later
   claim!fk_branch = fk_branch
   If fk_person <> 0 Then claim!fk_person = fk_person
   Try claim!hours_week_worked = Val(txtHoursWorked.text)
   claim!mechanism_of_injury = Trim(txtMechanismInjury.text)
   claim!date_injury = Trim(txtDateInjury.text)
   claim!contact_person = Trim(txtContactPerson.text)
   claim!memo = Trim(txtMemo.text)
   claim!identifier = Trim(txtIdentifier.text)
   claim!accepted = CBool(chkClaimAccepted.value)
   
End

Public Function WorkcoverForm_LaTeX_Construct(visit As CRow) As CTemplate
   '-----------------------------------------------------------------------------------------------
   'This form is really really f****d - illogical, badly disigned, duplicate information many pages
   'What else would you expect from idiotic beaurocrats
   'only pages 1-2 are filled in by the computer, typically fuckwits, despite the computer
   'generation we would have to scan the whole frigging thing because the patient has to fill in
   'the third page.
   '-----------------------------------------------------------------------------------------------
   
   Dim comm As Collection
   Dim templ As New CTemplate("nswworkcover-30313", "tex")
   ' nswworkcoverform-30march13
   Dim birthdate As String
   Dim printed_date As String = Format(Now, "dd/mm/yyyy")
   Dim x As Integer
   Dim sPhone As String
   Dim sFax As String
   
   templ.Subst("pdf_path_page1", modUtil.Find_File("templates" &/ "nsw-workcover-certificate-of-capacity-page1.pdf"))
   templ.Subst("pdf_path_page2", modUtil.Find_File("templates" &/ "nsw-workcover-certificate-of-capacity-page2.pdf"))
   templ.Subst("pdf_path_page3", modUtil.Find_File("templates" &/ "nsw-workcover-certificate-of-capacity-page3.pdf"))
   templ.Subst("pdf_path_page4", modUtil.Find_File("templates" &/ "nsw-workcover-certificate-of-capacity-page4.pdf"))
   templ.Subst_common(currentconsult)
   If IsNull(currentconsult!patient!medicare_number) Then
      currentconsult!patient!medicare_number = "0000000000" 'FIXME PUT THIS IN UNTIL REPAT STUFF SORTED
   End If
   If IsNull(currentconsult!patient!birthdate) Then
      currentconsult!patient!birthdate = "00/00/0000"
   Endif
   birthdate = Format(currentconsult!patient!birthdate, "dd/mm/yyyy")
   templ.Subst("DOB1", Mid$(birthdate, 1, 1))
   templ.Subst("DOB2", Mid$(birthdate, 2, 1))
   templ.Subst("DOB3", Mid$(birthdate, 4, 1))
   templ.Subst("DOB4", Mid$(birthdate, 5, 1))
   templ.Subst("DOB5", Mid$(birthdate, 7, 1))
   templ.Subst("DOB6", Mid$(birthdate, 8, 1))
   templ.Subst("DOB7", Mid$(birthdate, 9, 1))
   templ.Subst("DOB8", Mid$(birthdate, 10, 1))
   For x = 1 To 25         '25 spaces on the form, maybe in some crazy company there are 25 character claim numbers
      If x < 10 Then
         templ.Subst("CLAIMNUMBER0" & Str(x), Mid$(txtClaim.text, x, 1))
      Else
         templ.Subst("CLAIMNUMBER" & Str(x), Mid$(txtClaim.text, x, 1))
      End If
   Next
   For x = 1 To 25
      If x < 10 Then
         templ.Subst("CLAIMNUMBER0" & Str(x), "")
      Else
         templ.Subst("CLAIMNUMBER" & Str(x), "")
      End If
   Next
   templ.Subst("MA1", Mid$(currentconsult!patient!medicare_number, 1, 1))
   templ.Subst("MA2", Mid$(currentconsult!patient!medicare_number, 2, 1))
   templ.Subst("MA3", Mid$(currentconsult!patient!medicare_number, 3, 1))
   templ.Subst("MA4", Mid$(currentconsult!patient!medicare_number, 4, 1))
   templ.Subst("MA5", Mid$(currentconsult!patient!medicare_number, 5, 1))
   templ.Subst("MA6", Mid$(currentconsult!patient!medicare_number, 6, 1))
   templ.Subst("MA7", Mid$(currentconsult!patient!medicare_number, 7, 1))
   templ.Subst("MA8", Mid$(currentconsult!patient!medicare_number, 8, 1))
   templ.Subst("MA9", Mid$(currentconsult!patient!medicare_number, 9, 1))
   templ.Subst("MA0", Mid$(currentconsult!patient!medicare_number, 10, 1))
   'if has no medicare number
   templ.Subst("MA1", "")
   templ.Subst("MA2", "")
   templ.Subst("MA3", "")
   templ.Subst("MA4", "")
   templ.Subst("MA5", "")
   templ.Subst("MA6", "")
   templ.Subst("MA7", "")
   templ.Subst("MA8", "")
   templ.Subst("MA9", "")
   templ.Subst("MA0", "")
   
   templ.Subst("employerdetails", Trim(txtemployer.text) & " " & Trim(txtAddress.Text))
   templ.Subst("occupation", Trim(txtoccupation.text))
   templ.Subst("dateprinted1", Mid$(printed_date, 1, 1))
   templ.Subst("dateprinted2", Mid$(printed_date, 2, 1))
   templ.Subst("dateprinted3", Mid$(printed_date, 4, 1))
   templ.Subst("dateprinted4", Mid$(printed_date, 5, 1))
   templ.Subst("dateprinted5", Mid$(printed_date, 7, 1))
   templ.Subst("dateprinted6", Mid$(printed_date, 8, 1))
   templ.Subst("dateprinted7", Mid$(printed_date, 9, 1))
   templ.Subst("dateprinted8", Mid$(printed_date, 10, 1))
   
   templ.Subst("dateofinjury1", Mid$(txtDateInjury.text, 1, 1))
   templ.Subst("dateofinjury2", Mid$(txtDateInjury.text, 2, 1))
   templ.Subst("dateofinjury3", Mid$(txtDateInjury.text, 4, 1))
   templ.Subst("dateofinjury4", Mid$(txtDateInjury.text, 5, 1))
   templ.Subst("dateofinjury5", Mid$(txtDateInjury.text, 7, 1))
   templ.Subst("dateofinjury6", Mid$(txtDateInjury.text, 8, 1))
   templ.Subst("dateofinjury7", Mid$(txtDateInjury.text, 9, 1))
   templ.Subst("dateofinjury8", Mid$(txtDateInjury.text, 10, 1))
   
   templ.Subst("datefirstseen1", Mid$(txtDateFirstSeen.text, 1, 1))
   templ.Subst("datefirstseen2", Mid$(txtDateFirstSeen.text, 2, 1))
   templ.Subst("datefirstseen3", Mid$(txtDateFirstSeen.text, 4, 1))
   templ.Subst("datefirstseen4", Mid$(txtDateFirstSeen.text, 5, 1))
   templ.Subst("datefirstseen5", Mid$(txtDateFirstSeen.text, 7, 1))
   templ.Subst("datefirstseen6", Mid$(txtDateFirstSeen.text, 8, 1))
   templ.Subst("datefirstseen7", Mid$(txtDateFirstSeen.text, 9, 1))
   templ.Subst("datefirstseen8", Mid$(txtDateFirstSeen.text, 10, 1))
   
   templ.Subst("historyofinjury", Trim(txtMechanismInjury.text))
   templ.Subst("preexistantfactors", Trim(txtPreExistingFactors.text))
   templ.Subst("diagnosis", Trim(txtDiagnosis.text))
   
   If rbInjuryConsistantWithHistoryYes.value = True Then
      templ.Subst("consistantwithinjuryyes", "x")
   End If
   If rbInjuryConsistantWithHistoryNo.value = True Then
      templ.Subst("consistantwithinjuryno", "x")
   Endif
   If rbInjuryConsistantWithHistoryUncertain.value = True Then
      templ.Subst("consistantwithinjuryuncertain", "x")
   Endif
   templ.Subst("consistantwithinjuryyes", "")
   templ.Subst("consistantwithinjuryno", "")
   templ.Subst("consistantwithinjuryuncertain", "")
   '------
   'page 2
   '------
   templ.Subst("claimnumber", txtClaim.text)
   templ.Subst("managementplan", txtManagementPlan.text)
   templ.Subst("referralstoproviders", TxtReferrals.text)
   If rbRehabProviderYes.value = True Then
      templ.Subst("obtain-copy-work-duties-yes", "x")
      Templ.Subst("obtain-copy-work-duties-no", "")
   Else
      templ.Subst("obtain-copy-work-duties-yes", "")
      Templ.Subst("obtain-copy-work-duties-no", "x")
   Endif
   If chkFitness_PreInjury.value = True Then
      templ.Subst("fit-pre-injury-duties", "x")
   Else
      templ.Subst("fit-pre-injury-duties", "")
   Endif
   If chkFitness_Suitable.value = True Then
      templ.Subst("fit-suitable-duties", "x")
      templ.Subst("SUITABLEDUTIESFROM1", Mid$(txtSuitable_From.text, 1, 1))
      templ.Subst("SUITABLEDUTIESFROM2", Mid$(txtSuitable_From.text, 2, 1))
      templ.Subst("SUITABLEDUTIESFROM3", Mid$(txtSuitable_From.text, 4, 1))
      templ.Subst("SUITABLEDUTIESFROM4", Mid$(txtSuitable_From.text, 5, 1))
      templ.Subst("SUITABLEDUTIESFROM5", Mid$(txtSuitable_From.text, 7, 1))
      templ.Subst("SUITABLEDUTIESFROM6", Mid$(txtSuitable_From.text, 8, 1))
      templ.Subst("SUITABLEDUTIESFROM7", Mid$(txtSuitable_From.text, 9, 1))
      templ.Subst("SUITABLEDUTIESFROM8", Mid$(txtSuitable_From.text, 10, 1))
      
      templ.Subst("SUITABLEDUTIESTO1", Mid$(txtSuitable_To.text, 1, 1))
      templ.Subst("SUITABLEDUTIESTO2", Mid$(txtSuitable_To.text, 2, 1))
      templ.Subst("SUITABLEDUTIESTO3", Mid$(txtSuitable_To.text, 4, 1))
      templ.Subst("SUITABLEDUTIESTO4", Mid$(txtSuitable_To.text, 5, 1))
      templ.Subst("SUITABLEDUTIESTO5", Mid$(txtSuitable_To.text, 7, 1))
      templ.Subst("SUITABLEDUTIESTO6", Mid$(txtSuitable_To.text, 8, 1))
      templ.Subst("SUITABLEDUTIESTO7", Mid$(txtSuitable_To.text, 9, 1))
      templ.Subst("SUITABLEDUTIESTO8", Mid$(txtSuitable_To.text, 10, 1))
   Else
      templ.Subst("fit-suitable-duties", "")
      templ.Subst("SUITABLEDUTIESFROM1", " ")
      templ.Subst("SUITABLEDUTIESFROM2", " ")
      templ.Subst("SUITABLEDUTIESFROM3", " ")
      templ.Subst("SUITABLEDUTIESFROM4", " ")
      templ.Subst("SUITABLEDUTIESFROM5", " ")
      Templ.Subst("SUITABLEDUTIESFROM6", " ")
      templ.Subst("SUITABLEDUTIESFROM7", " ")
      templ.Subst("SUITABLEDUTIESFROM8", " ")
      templ.Subst("SUITABLEDUTIESTO1", " ")
      templ.Subst("SUITABLEDUTIESTO2", " ")
      templ.Subst("SUITABLEDUTIESTO3", " ")
      templ.Subst("SUITABLEDUTIESTO4", " ")
      templ.Subst("SUITABLEDUTIESTO5", " ")
      templ.Subst("SUITABLEDUTIESTO6", " ")
      templ.Subst("SUITABLEDUTIESTO7", " ")
      templ.Subst("SUITABLEDUTIESTO8", " ")
   End If
   If Trim(txtCanWork_HrsPerDay.text) <> "" Then
      templ.Subst("suitable-duties-hours-per-day", Trim(txtCanWork_HrsPerDay.text))
   Else
      templ.Subst("suitable-duties-hours-per-day", "")
   Endif
   If Trim(txtCanWork_DaysPerWeek.text) <> "" Then
      templ.Subst("suitable-duties-days-per-week", Trim(txtCanWork_DaysPerWeek.text))
   Else
      templ.Subst("suitable-duties-days-per-week", "")
   Endif
   If chkFitness_Unfit.value = True Then
      templ.Subst("unfit-for-work", "x")
      templ.Subst("UNFITFROM1", Mid$(txtUnfit_From.text, 1, 1))
      templ.Subst("UNFITFROM2", Mid$(txtUnfit_From.text, 2, 1))
      templ.Subst("UNFITFROM3", Mid$(txtUnfit_From.text, 4, 1))
      templ.Subst("UNFITFROM4", Mid$(txtUnfit_From.text, 5, 1))
      templ.Subst("UNFITFROM5", Mid$(txtUnfit_From.text, 7, 1))
      templ.Subst("UNFITFROM6", Mid$(txtUnfit_From.text, 8, 1))
      templ.Subst("UNFITFROM7", Mid$(txtUnfit_From.text, 9, 1))
      templ.Subst("UNFITFROM8", Mid$(txtUnfit_From.text, 10, 1))
      templ.Subst("UNFITTO1", Mid$(txtUnfit_To.text, 1, 1))
      templ.Subst("UNFITTO2", Mid$(txtUnfit_To.text, 2, 1))
      templ.Subst("UNFITTO3", Mid$(txtUnfit_To.text, 4, 1))
      templ.Subst("UNFITTO4", Mid$(txtUnfit_To.text, 5, 1))
      templ.Subst("UNFITTO5", Mid$(txtUnfit_To.text, 7, 1))
      templ.Subst("UNFITTO6", Mid$(txtUnfit_To.text, 8, 1))
      templ.Subst("UNFITTO7", Mid$(txtUnfit_To.text, 9, 1))
      templ.Subst("UNFITTO8", Mid$(txtUnfit_To.text, 10, 1))
   Else
      templ.Subst("unfit-for-work", "")
      templ.Subst("UNFITFROM1", "")
      templ.Subst("UNFITFROM2", "")
      templ.Subst("UNFITFROM3", "")
      templ.Subst("UNFITFROM4", "")
      templ.Subst("UNFITFROM5", "")
      templ.Subst("UNFITFROM6", "")
      templ.Subst("UNFITFROM7", "")
      templ.Subst("UNFITFROM8", "")
      templ.Subst("UNFITTO1", "")
      templ.Subst("UNFITTO2", "")
      templ.Subst("UNFITTO3", "")
      templ.Subst("UNFITTO4", "")
      templ.Subst("UNFITTO5", "")
      templ.Subst("UNFITTO6", "")
      templ.Subst("UNFITTO7", "")
      templ.Subst("UNFITTO8", "")
   Endif
   If Trim(txtEstimatedTimeForAnyDuties.text) <> "" Then
      templ.Subst("estimated-time-before-can-work", Trim(txtEstimatedTimeForAnyDuties.text))
   Else
      templ.Subst("estimated-time-before-can-work", "")
   Endif
   If Trim(txtDelayingFactors.text) <> "" Then
      templ.Subst("factors-delaying-recovery", Trim(txtDelayingFactors.text))
   Else
      templ.Subst("factors-delaying-recovery", "" "")
   Endif
   If rbRehabProviderYes.value = True Then
      templ.Subst("refer-to-rehabilitation-provider-yes", "x")
      templ.Subst("refer-to-rehabilitation-provider-no", "")
   Endif
   If rbRehabProviderNo.value = True Then
      templ.Subst("refer-to-rehabilitation-provider-no", "x")
      templ.Subst("refer-to-rehabilitation-provider-yes", "")
   Endif
   If Trim(txtLifting.text) <> "" Then
      templ.Subst("capacity-lifting-carrying", Trim(txtLifting.text))
   Endif
   If Trim(txtSitting.text) <> "" Then
      templ.Subst("capacity-sitting", Trim(txtSitting.Text))
   Endif
   If Trim(txtStanding.text) <> "" Then
      templ.Subst("capacity-standing", Trim(txtStanding.text))
   Endif
   If Trim(txtPushing.text) <> "" Then
      templ.Subst("capacity-pushing-pulling", Trim(txtPushing.text))
   Endif
   If Trim(txtBendTwistSquat.text) <> "" Then
      templ.Subst("capacity-bending-twisting-squatting", Trim(txtBendTwistSquat.text))
   Endif
   If Trim(txtDriving.text) <> "" Then
      templ.Subst("capacity-driving", Trim(txtDriving.text))
   Endif
   If Trim(txtOtherCapability.text) <> "" Then
      templ.Subst("capacity-other", Trim(txtOtherCapability.text))
   Endif
   'now wipe out any that are left
   templ.Subst("capacity-lifting-carrying", "")
   templ.Subst("capacity-sitting", "")
   templ.Subst("capacity-standing", "")
   templ.Subst("capacity-pushing-pulling", "")
   templ.Subst("capacity-bending-twisting-squatting", "")
   templ.Subst("capacity-driving", "")
   templ.Subst("capacity-other", "")
   If Trim(txtReviewComments.text) <> "" Then
      templ.Subst("comments-on-review-date", Trim(txtReviewComments.text))
   Else
      templ.Subst("comments-on-review-date", "")
   Endif
   If Trim(txtReviewDate.text) <> "" Then
      templ.Subst("DATEREVIEW1", Mid$(txtReviewDate.text, 1, 1))
      templ.Subst("DATEREVIEW2", Mid$(txtReviewDate.text, 2, 1))
      templ.Subst("DATEREVIEW3", Mid$(txtReviewDate.text, 4, 1))
      templ.Subst("DATEREVIEW4", Mid$(txtReviewDate.text, 5, 1))
      templ.Subst("DATEREVIEW5", Mid$(txtReviewDate.text, 7, 1))
      templ.Subst("DATEREVIEW6", Mid$(txtReviewDate.text, 8, 1))
      templ.Subst("DATEREVIEW7", Mid$(txtReviewDate.text, 9, 1))
      templ.Subst("DATEREVIEW8", Mid$(txtReviewDate.text, 10, 1))
   Else
      templ.Subst("DATEREVIEW1", "")
      templ.Subst("DATEREVIEW2", "")
      templ.Subst("DATEREVIEW3", "")
      templ.Subst("DATEREVIEW4", "")
      templ.Subst("DATEREVIEW5", "")
      templ.Subst("DATEREVIEW6", "")
      templ.Subst("DATEREVIEW7", "")
      templ.Subst("DATEREVIEW8", "")
   Endif
   templ.Subst("treating-doctor-agrees", "x")
   templ.Subst("nominated-treating-doctor", "x")
   templ.Subst("treating-specialist", "")
   templ.Subst("treating-other", "")
   templ.Subst("dateprinted1", Mid$(printed_date, 1, 1))
   templ.Subst("dateprinted2", Mid$(printed_date, 2, 1))
   templ.Subst("dateprinted3", Mid$(printed_date, 4, 1))
   templ.Subst("dateprinted4", Mid$(printed_date, 5, 1))
   templ.Subst("dateprinted5", Mid$(printed_date, 7, 1))
   templ.Subst("dateprinted6", Mid$(printed_date, 8, 1))
   templ.Subst("dateprinted7", Mid$(printed_date, 9, 1))
   templ.Subst("dateprinted8", Mid$(printed_date, 10, 1))
   templ.Subst("other-specified", "")
   For Each comm In modDBConnect.currentUser!comms
      If comm!fk_type = const.CommModalityPhone Then
         sPhone = Replace(comm!value, " ", "")
         sPhone = Replace(sPhone, "(", "")
         sPhone = Replace(sPhone, ")", "")
         Break
      Endif
   Next
   For x = 1 To Len(sphone)
      If x < 10 Then
         templ.Subst("OFFICEPHONE0" & Str(x), Mid$(sphone, x, 1))
      Else
         templ.Subst("OFFICEPHONE" & Str(x), Mid$(sphone, x, 1))
      End If
   Next
   For x = 1 To Len(sphone)
      If x < 10 Then
         templ.Subst("OFFICEPHONE0" & Str(x), "")
      Else
         templ.Subst("OFFICEPHONE" & Str(x), "")
      End If
   Next
   'the office tax
   For Each comm In modDBConnect.currentUser!comms
      If comm!fk_type = const.CommModalityFax Then
         sFax = Replace(comm!value, " ", "")
         sFax = Replace(sFax, "(", "")
         sFax = Replace(sFax, ")", "")
         Break
      Endif
   Next
   For x = 1 To Len(sFax)
      If x < 10 Then
         templ.Subst("OFFICEFAX0" & Str(x), Mid$(sFax, x, 1))
      Else
         templ.Subst("OFFICEFAX" & Str(x), Mid$(sFax, x, 1))
      End If
   Next
   For x = 1 To Len(sFax)
      If x < 10 Then
         templ.Subst("OFFICEFAX0" & Str(x), "")
      Else
         templ.Subst("OFFICEFAX" & Str(x), "")
      End If
   Next
   'lastly the provider number
   For x = 1 To 22
      If x < 10 Then
         templ.Subst("provider-number0" & Str(x), Mid$(modDBConnect.currentUser!provider_number, x, 1))
      Else
         templ.Subst("provider-number" & Str(x), "")
      Endif
   Next
   For x = 1 To Len(modDBConnect.currentUser!provider_number)
      If x < 10 Then
         templ.Subst("provider-number0" & Str(x), "")
      Else
         templ.Subst("provider-number" & Str(x), "")
      End If
   Next
   
   Print templ.GetData()
   Return templ
   
End

Public Function WorkcoverForm_LaTeX_Construct_To_31March2013(visit As CRow) As CTemplate
   '-------------------------------------------------------------------------------------
   'on 30/03/2013 NSW workcover in their infinitate beurocratic stupidity changed a
   'perfectly good and functional form to a f****d up cretinous 3 page form that
   'only a person with no brains could have figured out (well a committee with no brains
   'this is the latex for that form, still needed for editing purposes
   '------------------------------------------------------------------------------------
   
   Dim sEmployer As String
   Dim sAssess_Workplace As String = "   No"
   Dim sString As String
   Dim sCausedBy As String = ""
   Dim comm As Collection
   Dim templ As New CTemplate("workcover-nsw", "tex")
   
   Select Case visit!fk_lu_visit_type              'Can't selectively do one
      Case Const.Workcover_VisitType_Initial        'once replaced, their 'gone'
         templ.Checkbox("visit_type_initial", True)
         templ.Checkbox("visit_type_progress", False)
         templ.Checkbox("visit_type_final", False)
      Case Const.Workcover_VisitType_Progress
         templ.Checkbox("visit_type_initial", False)
         templ.Checkbox("visit_type_progress", True)
         templ.Checkbox("visit_type_final", False)
      Case Const.Workcover_VisitType_Final
         templ.Checkbox("visit_type_initial", False)
         templ.Checkbox("visit_type_progress", False)
         templ.Checkbox("visit_type_final", True)
      Case Const.Workcover_VisitType_InitialAndFinal
         templ.Checkbox("visit_type_initial", True)
         templ.Checkbox("visit_type_progress", False)
         templ.Checkbox("visit_type_final", True)
         
   End Select
   If visit!assessworkplace = True Then
      sAssess_Workplace = "   Yes"
      templ.Checkbox("assessment_checkbox", True)
   Else
      templ.Checkbox("assessment_checkbox", False)
   End If
   
   Select Case visit!fk_caused_by_employment
      Case Const.Workcover_CausedByEmployment_Yes
         sCausedBy = "yes"
         templ.Checkbox("caused_certain", True)
         templ.Checkbox("caused_no", False)
         templ.Checkbox("caused_uncertain", False)
      Case Const.Workcover_CausedByEmployment_No
         sCausedBy = "no"
         templ.Checkbox("caused_certain", False)
         templ.Checkbox("caused_no", True)
         templ.Checkbox("caused_uncertain", False)
      Case Const.Workcover_CausedByEmployment_Uncertain
         sCausedBy = "uncertain"
         templ.Checkbox("caused_certain", False)
         templ.Checkbox("caused_no", False)
         templ.Checkbox("caused_uncertain", True)
   End Select
   
   sEmployer = txtEmployer.text
   templ.Subst_common(currentconsult)
   templ.Subst("claim", Trim(txtClaim.text))
   templ.Subst("employername", sEmployer)
   templ.Subst("employeraddress", txtAddress.text)
   templ.Subst("employername", sEmployer)
   templ.Subst("occupation", txtOccupation.Text)
   templ.Subst("hoursworked", txtHoursWorked.Text)
   templ.Subst("mechanismofinjury", txtMechanismInjury.text)
   templ.Subst("dateofinjury", txtDateInjury.text)
   templ.Subst("diagnosis", txtDiagnosis.text)
   templ.Subst("caused_by_employment", sCausedBy)
   templ.Subst("managementplan", txtManagementPlan.text)
   templ.Subst("assess_workplace", sAssess_Workplace)
   templ.Subst("reviewdate", txtReviewDate.text)
   templ.Subst("preinjuryfrom", txtPreInjury_From.text)
   templ.Subst("unfitfrom", txtunfit_From.text)
   templ.Subst("unfitto", txtUnfit_To.text)
   templ.Subst("suitablefrom", txtSuitable_From.text)
   templ.Subst("suitableto", txtSuitable_To.text)
   templ.Subst("permmodifiedfrom", txtPermModDuties_From.text)
   templ.Subst("hoursperday", txtCanWork_HrsPerDay.text)
   templ.Subst("daysperweek", txtCanWork_DaysPerWeek.text)
   templ.Subst("work.restrictions", txtRestrictions.text)
   templ.Subst("work.capabilities", txtCapabilities.text)
   
   If Not IsNull(visit!fitness_perm_mod_duties_from) Then
      templ.Checkbox("permanent_checkbox", True)
   Else
      templ.Checkbox("permanent_checkbox", False)
   End If
   If txtUnfit_From.text <> "" Then
      templ.Checkbox("unfit_checkbox", True)
   Else
      templ.Checkbox("unfit_checkbox", False)
   Endif
   If txtSuitable_From.text <> "" Then
      templ.Checkbox("fit_suitable_checkbox", True)
   Else
      templ.Checkbox("fit_suitable_checkbox", False)
   Endif
   If txtPermModDuties_From.text <> "" Then
      templ.Checkbox("permanent_checkbox", True)
   Else
      templ.Checkbox("permanent_checkbox", False)
   Endif
   If txtPreInjury_From.text <> "" Then
      templ.Checkbox("pre_injury_checkbox", True)
   Else
      templ.Checkbox("pre_injury_checkbox", False)
   Endif
   
   templ.Subst("contacts_person", txtContactPerson.text & " " & txtMemo.text)
   If visit!doctor_consented = True Then
      templ.Checkbox("treating_doctor_yes_checkbox", True)
      templ.Checkbox("treating_doctor_no_checkbox", False)
   Else
      templ.Checkbox("treating_doctor_no_checkbox", True) 'fixme make me reflect true status of these boxes
      templ.Checkbox("treating_doctor_yes_checkbox", False)
   End If
   
   If Not IsNull(Comms) Then
      sSTring = ""
      For Each Comm In comms
         If comm!value Then
            sString &= comm!type & ":" & comm!value & "<BR>"
         End If
      Next
      If Right(sString, 3) = "<BR>" Then
         sString = Left(sSTring, Len(sSTring) - 3)
      End If
      templ.Subst("comms", sString)
   Else
      templ.Subst("comms", "")
   End If
   
   If visit!doctor_consented Then
      sString = "yes"
   Else
      sString = "No"
   End If
   templ.Subst("doctor_consented", sString)
   If visit!worker_consented Then
      sSTring = "yes"
   Else
      sstring = "no"
   End If
   templ.Subst("worker_consented", sString)
   templ.Subst("date", Format(visit!certificate_date, "dd/mm/yyyy"))
   
   Return templ
   
End

Public Function Claim_Construct_Progressnotes_Structured_HTML(visit As CRow) As CTemplate
   '-------------------------------
   'HTML to put into progress notes
   '-------------------------------
   
   Dim templ As CTemplate
   Dim sAssess_Workplace As String = "No"
   Dim sString As String
   Dim sCausedBy As String = ""
   
   If visit!assessworkplace = True Then
      sAssess_Workplace = "   Yes"
   End If
   Select Case visit!fk_caused_by_employment
      Case Const.Workcover_CausedByEmployment_Yes
         sCausedBy = "yes"
      Case Const.Workcover_CausedByEmployment_No
         sCausedBy = "no"
      Case Const.Workcover_CausedByEmployment_Uncertain
         sCausedBy = "uncertain"
   End Select
   templ = New CTemplate(modHTML.workcover_progressnotes_structured_html)
   templ.Subst_common(currentconsult)
   templ.Subst("visit_type", UCase(visit_types[visit!fk_lu_visit_type]))
   templ.Subst("claim", Trim(txtClaim.text))
   templ.Subst("employer", Trim(txtEmployer.text))
   templ.Subst("workaddress", Trim(txtAddress.text))
   templ.Subst("contact_person", Trim(txtContactPerson.text) & " " & Trim(txtMemo.text))
   templ.Subst("occupation", txtOccupation.Text)
   templ.Subst("hours_worked", txtHoursWorked.Text)
   templ.Subst("injury_how_occurred", txtMechanismInjury.text)
   templ.Subst("injury_date", txtDateInjury.text)
   templ.Subst("diagnosis", txtDiagnosis.text)
   templ.Subst("caused_by_employment", sCausedBy)
   templ.Subst("management_plan", txtManagementPlan.text)
   templ.Subst("assess_workplace", sAssess_Workplace)
   templ.Subst("reviewdate", txtReviewDate.text)
   
   sString = ""
   " <TABLE WIDTH=100%>"
   "    <COL WIDTH=45%>"
   "    <COL WIDTH=15%>"
   "    <COL WIDTH=10%>"
   "    <COL WIDTH=30%>"
   
   If Trim(txtPreInjury_From.text) <> "" Then
      sstring &= ""
      " <TR VALIGN=TOP>"
      "<TD WIDTH=45%>"
      "<P><FONT SIZE=2>Pre-injury duties from</FONT></P>"
      "</TD>"
      "<TD WIDTH=15%><P ALIGN=LEFT><FONT SIZE=2>"
      "<P>%from_date</FONT></P>"
      sstring = Replace(sSTring, "%from_date", Format(Val(txtPreInjury_From.text), " dd/mm/yyyy "))
      sstring &= "</TD>"
      "<TD WIDTH=10%>"
      "<P></P>"
      "</TD>"
      "<TD WIDTH=30%>"
      "<P></P>"
      "</TD>"
      "</TR>"
   End If
   
   If Trim(txtunfit_From.text) Then
      sstring &= ""
      " <TR VALIGN=TOP>"
      "<TD WIDTH=45%>"
      "<P><FONT SIZE=2>Unfit From</FONT></P>"
      "</TD>"
      "<TD WIDTH=15%><FONT SIZE=2>"
      "<P>%from_date</FONT></P>"
      sstring = Replace(sSTring, "%from_date", Format(Val(txtunfit_From.text), " dd/mm/yyyy "))
      sstring &= "</TD>"
      "<TD WIDTH=10%>"
      "<P ALIGN=CENTER><FONT SIZE=2>To</FONT></P>"
      "</TD>"
      "<TD WIDTH=30%><FONT SIZE=2>"
      "<P><FONT SIZE=2>%to_date</FONT></P>"
      "</TD>"
      sstring = Replace(sSTring, "%to_date", Format(Val(txtUnfit_To.text), "dd/mm/yyyy"))
      sstring &= "</TR>"
   End If
   
   If Trim(txtSuitable_From.text) Then
      sstring &= ""
      " <TR VALIGN=TOP>"
      "<TD WIDTH=45%>"
      "<P><FONT SIZE=2>Suitable duties from</FONT></P>"
      "</TD>"
      "<TD WIDTH=15%>" ""
      "<P><FONT SIZE=2>%from_date</FONT></P>"
      sstring = Replace(sSTring, "%from_date", Format(Val(txtSuitable_From.text), "dd/mm/yyyy"))
      sstring &= "</TD>"
      "<TD WIDTH=10%>"
      "<P ALIGN=CENTER><FONT SIZE=2>To</FONT></P>"
      "</TD>"
      "<TD WIDTH=30%>"
      "<P><FONT SIZE=2>%to_date</FONT></P>"
      "</TD>"
      sstring = Replace(sSTring, "%to_date", Format(Val(txtSuitable_To.text), "dd/mm/yyyy"))
      sstring &= "</TR>"
   End If
   
   If Trim(txtPermModDuties_From.text) <> "" Then
      sstring &= ""
      " <TR VALIGN=TOP>"
      "<TD WIDTH=45%>"
      "<P><FONT SIZE=2>Permanantly modified duties from</FONT></P>"
      "</TD>"
      "<TD WIDTH=15%><FONT SIZE=2>"
      "<P>%from_date</FONT></P>"
      sstring = Replace(sSTring, "%from_date", Format(Val(txtPermModDuties_From.text), " dd/mm/yyyy "))
      sstring &= "</TD>"
      "<TD WIDTH=10%>"
      "<P></P>"
      "</TD>"
      "<TD WIDTH=30%>"
      "<P></P>"
      "</TD>"
      "</TR>"
   End If
   sSTring &= "</TABLE>"
   
   If sSTring <> "" Then
      templ.subst_html("fitness", sString)
   Else
      templ.Subst("fitness", "")
   End If
   
   sString = ""
   If Trim(txtCanWork_HrsPerDay.text) <> "" Then
      sString = Trim(txtCanWork_HrsPerDay.text) & " hours per day, "
   End If
   
   If Trim(txtCanWork_DaysPerWeek.text) Then
      sstring &= Trim(txtCanWork_DaysPerWeek.text) & " days per week"
   Else
      sSTring = Left(sSTring, Len(sSTring) - 1) 'chop off the  ','
   End If
   
   If sString <> "" Then
      templ.Subst("hours_capable", sString)
   Else
      templ.Subst("hours_capable", "")
   End If
   
   If Trim(txtRestrictions.text) <> "" Then
      templ.Subst("restrictions", txtRestrictions.text)
   Else
      templ.Subst("restrictions", "")
   End If
   If Trim(txtCapabilities.text) <> "" Then
      templ.Subst("capabilities", txtCapabilities.text)
   Else
      templ.Subst("capabilities", "")
   End If
   
   If visit!doctor_consented Then
      sString = "yes"
   Else
      sString = "No"
   End If
   templ.Subst("doctor_consented", sString)
   If visit!worker_consented Then
      sSTring = "yes"
   Else
      sstring = "no"
   End If
   templ.Subst("worker_consented", sString)
   Return templ
   
End

Public Sub Claim_New()
   '----------------------------------------------------------
   'User wants to start a new claim
   'Give them chance to re-consider in case this is accidental
   '----------------------------------------------------------
   
   If VBox_EditArea_Outer.padding = 1 Then
      If Valid_WorkCover_Form() Then
         If Message.Question("Wipe current workcover form?", "Yes", "No") = 2 Then Return
      End If
   Endif
   Editarea_Claim_Clear()
   chkWipeREstrictions.value = True 
   EditArea_Visit_Clear()
   chkWipeREstrictions.value = False   
   Capability_Gui_Show("post 31/03/2013")
   bexit = True
   Try lvwClaims.UnselectAll()
   Try cvwVisits.UnselectAll()
   bNewclaim = True
   bClaimLoaded = False
   bVisitLoaded = False
   claim = New Collection
   visit = New Collection
   branch = New Collection
   Reset_Keys()
   fk_progressnote = 0
   rbWorkcoverConsultTypeInitial.value = True
   fk_lu_visit_type = const.Workcover_VisitType_Initial
   fk_lu_visit_type = const.Workcover_VisitType_Initial
   lblWorkcover.text = "New Workcover Claim"
   rbDueEmploymentYes.Value = True
   fk_caused_by_employment = Const.Workcover_CausedByEmployment_Yes
   chkAgreeToTreat_Doctor.value = True
   chkAgreeToTreat_Worker.value = True
   chkClaimAccepted.value = False
   rbAssessWorkplaceNo.value = True
   bExit = False
   tbNewVisit.Enabled = False
   chkWipeREstrictions.Enabled = False 
   rbOrganisation.value = True
   Contact_Type = const.contacttype_organisation
   EditArea_Notify_Datachanged(False)
   HBox_Visit_Type.Enabled = True
   VBox_EditArea.Enabled = True
   tbPreview.Enabled = True
   Try txtoccupation.text = currentconsult!patient!occupation
   txtCertificateDate.text = Format(Now, "dd/mm/yyyy")
   txtIdentifier.SetFocus()
   
End

Public Sub lvwClaims_Select()
   '------------------------------------------------------------------------------
   'Either user has clicked on the claims list or set programmatically in Reload()
   '------------------------------------------------------------------------------
   
   If bexit Then Return
   If Not lvwClaims.count Then Return
   Reset_Keys()
   lvwClaims.MoveCurrent                                             'sets the lvwClaims key
   claim = New Collection    'make it easier to read
   claim = claims[lvwClaims.Item.Key]
   fk_claim = claim!fk_claim
   fk_consult_claim = claim!fk_consult_claim
   branch = New Collection
   Try fk_branch = claim!fk_branch
   Try fk_organisation = claim!fk_organisation '?needed
   branch!fk_branch = fk_branch
   branch!organisation = claim!organisation
   branch!branch = claim!branch
   branch!street1 = claim!branch_street1
   branch!street2 = claim!branch_street2
   branch!town = claim!branch_town
   branch!postcode = claim!branch_postcode
   Sole_Trader = New Collection
   Try fk_person = claim!fk_person
   Sole_Trader!fk_person = claim!fk_person
   Sole_Trader!firstname = claim!soletrader_firstname
   Sole_Trader!surname = claim!soletrader_surname
   Sole_Trader!wholename = claim!soletrader_wholename
   Sole_Trader!title = claim!soletrader_title
   Sole_Trader!street1 = claim!soletrader_street1
   Sole_Trader!street2 = claim!soletrader_street2
   Sole_Trader!town = claim!soletrader_town
   Sole_Trader!postcode = claim!soletrader_postcode
   Claim_Display()                'display the core claim details
   Visits_Refresh()               'get the visits for that claim
   cvwVisits.SetFocus()
   cvwVisits.MoveFirst()          'Show the first visit in the list
   cvwVisits_key = cvwVisits.Item.key
   cvwVisits.Item.Selected = True 'highlight the marquee and shows last vitis
   
End

Public Sub Timer1_Timer()
   
   Coded_Term_Get()
   
End

Public Sub cvwVisits_Click()
   '
   
   If fk_claim = 0 Then
      Message.info("Please select a claim before clicking on a visit")
      Return
      
   Endif
   cvwVisits_key = cvwVisits.Item.Key
   If bClaimLoaded = False Then
      lvwClaims_Select()
      Claim_Display()
   End If
   cvwVisits_Select()
   Visit_Display()
   EditArea_Notify_Datachanged(False)
   VBox_EditArea.Enabled = False
   HBox_Visit_Type.Enabled = False
   
End

Public Sub cvwVisits_Select()
   
   Visit_Display()
   
End

Public Sub Claim_Display()
   '----------------------------------------------------------
   'Display the 'core' claim details
   'Note the injury date is a text field
   'the collection 'claim' is filled in either claims_refresh
   'of by user clicking on the lvClaims list
   '----------------------------------------------------------
   
   EditArea_Claim_Clear()
   bExit = True
   lblWorkcover.Text = "Existing Claim for " & claim!identifier
   txtClaim.text = claim!claim_number
   txtIdentifier.text = claim!identifier
   If claim!fk_person Then
      rbSoleTrader.value = True
      txtemployer.text = Sole_Trader!wholename
      txtAddress.text = Trim(Sole_Trader!street1 & " " & Sole_Trader!street2) & " " & Sole_Trader!town & " " & Sole_Trader!postcode
      Contact_Type = const.contacttype_person
   Else
      rbOrganisation.value = True
      Contact_Type = const.contacttype_organisation
      txtAddress.text = Trim(branch!street1 & " " & branch!street2) & " " & branch!town & " " & branch!postcode
      txtemployer.text = branch!organisation        '" " & branch!town & " " & branch!postcode
   End If
   txtDateInjury.text = claim!date_injury 'text field not a date field to allow free text
   Try txtDateFirstSeen.text = Format(claim!date_first_seen, "dd/mm/yyyy") 'can be null if date <31/03/2013
   txtMechanismInjury.text = claim!mechanism_of_injury
   txtPreExistingFactors.text = claim!preexisting_factors
   txtOccupation.text = claim!occupation
   fk_occupation = claim!fk_occupation
   txtHoursWorked.text = claim!hours_week_worked
   txtContactPerson.text = claim!contact_person
   txtMemo.text = claim!memo
   chkClaimAccepted.value = claim!accepted
   If claim!consistant_with_cause = 0 Then
      rbInjuryConsistantWithHistoryYes.value = True
   Endif
   If claim!consistant_with_cause = 1 Then
      rbInjuryConsistantWithHistoryNo.value = True
   Endif
   If claim!consistant_with_cause = 2 Then
      rbInjuryConsistantWithHistoryuncertain.value = True
   End If
   bClaimLoaded = True
   tbNewVisit.Enabled = True
   chkWipeREstrictions.Enabled = True
   bExit = False
   
End

Public Sub Capability_Gui_Show(sDate As String)
   '------------------------------------------------------------------
   'F this having to show different gui according to different dates
   'if previously viewed certificate was <31/03/2013 the gui will have
   'changed
   '------------------------------------------------------------------
   
   If sDate = "pre 31/03/2013" Then
      Hbox_Capability_lifting.Visible = False
      Hbox_Capability_Bending.Visible = False
      Hbox_Capability_Sitting.visible = False
      Hbox_Capability_Standing.Visible = False
      Hbox_Capability_Pushing.Visible = False
      Hbox_Capability_Other.Visible = False
      Hbox_Capability_dRIVING.Visible = False
      HBox_Capabilities.Visible = True
   Else
      Hbox_Capability_lifting.Visible = True
      Hbox_Capability_Bending.Visible = True
      Hbox_Capability_Sitting.visible = True
      Hbox_Capability_Standing.Visible = True
      Hbox_Capability_Pushing.Visible = True
      Hbox_Capability_Other.Visible = True
      Hbox_Capability_dRIVING.Visible = True
      HBox_Capabilities.Visible = False
   Endif
   
End

Public Sub EditAreaButtons_Click()
   
   Dim hCtrl As Control
   Dim hTextbox As Textbox
   
   HBox_Calander.Visible = False
   Select Case Last.tag
      Case "help"
         FClinical.Help_Show("workcover.html", "Help:Workcover", True)
      Case "new claim"
         Claim_New()
      Case "pick date"
         If HBox_Calander.Visible Then
            HBox_Calander.Visible = False
         Else
            For Each hctrl In Last.parent.children
               If hctrl Is TextBox Then
                  hTextbox = hctrl
                  DateChooser1.tag = hTextbox
                  Break
               End If
            Next
            With HBox_Calander
               .top = Last.Parent.Parent.top + Last.Parent.Height + HBox_WorkcoverHeading.top + HBox_WorkcoverHeading.height + Me.Padding
               .left = Last.Parent.left + VBox_EditArea.Padding + Me.Padding
               .width = 170
               .height = 170
               .Raise()
            End With
            DateChooser1.Parent.Visible = True
            DateChooser1.Parent.Raise
         End If
      Case "new visit"
         Visit_New()
      Case "preview"
         Claim_Preview()
      Case "save"
         Save()
      Case "restrictions"
         txtRestrictions.Clear()
   End Select
   
End

Public Sub Visit_Delete()
   '-------------------------------------------------------------------------
   'Deletes a visit and or claim (if had a single visit or only 1 visit left)
   'if fk_consult = currentconsult.pk then it removed from the backend
   'otherwise it is marked as deleted
   '-------------------------------------------------------------------------
   
   Dim fk_reason As Integer
   Dim PN As Collection
   Dim reason As String
   Dim R As Result
   Dim audit_notes As String
   
   If bClaimLoaded = False Then
      lvwClaims_Select()
      Claim_Display()
   End If
   If Message.Question("Do you really want to delete this workcover form?", "Yes", "No") = 2 Then Return
   For Each PN In currentconsult!progress_notes
      If PN!pk_progressnote = fk_progressnote Then                                                            'when found the associated progress note
         pn!notes = Replace$(pn!notes, "<TABLE", "<TABLE BACKGROUND='/tmp/watermark.png' BGCOLOR='#E7E7E7' ") 'FIXME PUT IN PROPER NOTE background watermark
         audit_notes = pn!notes                                                                         'start audit notes
         R = modDBConnect.exec_query("Select * from clin_workcover.visits where fk_claim= " & visit!fk_claim & " AND deleted = False")  
         If R.count = 1 Then                                                                                 'delete claim if no visits left
            modDBConnect.update("clin_workcover.claims", Null, ["pk": visit!fk_claim, "deleted": True])       
            audit_notes &= "<BR>The claim will also be deleted:" & claim!identifier & " the diagnosis was: " & visit!diagnosis & "<BR>"
         End If
         pn!notes = Replace(pn!notes, "</table><HR>", "</TABLE><small><BR><B><I>Audit note:</B> this workcover form was deleted by " & modDBConnect.currentUser!wholename & " on " & Format(Now, "dd/mm/yyyy") & ". Please refer to the audit trail of " & Format(Now, "dd/mm/yyyy") & " for the explanation</I></small><HR>")
         modDBConnect.update("clin_consult.progressnotes", Null, ["pk": fk_progressnote, "notes": pn!notes])
         modDBConnect.update("clin_workcover.visits", Null, ["pk": visit!fk_visit, "deleted": True])
         R = modDBConnect.exec_query("Select * from clin_workcover.visits where fk_claim= " & visit!fk_claim & " AND deleted = False")
         If modAudit.MakeAudit(currentconsult, "mark deleted", "clin_workcover.visits", visit!fk_visit, const.cSection_Workcover, audit_notes) Then
            modDBConnect.CommitTrans()
            Deleted_WorkcoverVisit = visit
            Deleted_Workcoverclaim = claim
            Try FClinical.Refresh_Section(const.cSection_Workcover) 
            Try FClinical.Refresh_AllPreviousNotes() 'may not be open
            Break
         End If 
      Endif
   Next
   Reload()  
Catch
   'Message.Info("An error occurred whilst trying to delete a workcover visit.\n\nIf this persists please talk to your system administrator.")
   
End

Public Sub Visit_Edit()
   
   lblWorkcover.text = "Edit Exiting Visit"
   VBox_EditArea.Enabled = True
   HBox_Visit_Type.Enabled = True
   
End

Public Sub Visit_Display()
   '----------------------------------------
   'Display the details of the current visit
   '----------------------------------------
   
   If bexit Then Return
   EditArea_Visit_Clear()        'just clear textboxes etc, dosn't affect the keys
   VBox_EditArea.Enabled = False
   HBox_Visit_Type.Enabled = False
   cvwVisits.MoveCurrent()
   fk_visit = claims_visits[cvwVisits_Key]!fk_visit  'primary key of vwWorkcover = cin_workcover.visits.pk
   visit = New Collection
   fk_consult_visit = claims_visits[cvwVisits_Key]!fk_consult
   visit!fk_consult = claims_visits[cvwVisits_Key]!fk_consult
   visit!fk_visit = claims_visits[cvwVisits_Key]!fk_visit
   visit!visit_date = claims_visits[cvwVisits_Key]!visit_date
   visit!certificate_date = claims_visits[cvwVisits_Key]!certificate_date
   visit!fk_claim = claims_visits[cvwVisits_Key]!fk_claim
   visit!fk_lu_visit_type = claims_visits[cvwVisits_Key]!fk_lu_visit_type
   fk_lu_visit_type = claims_visits[cvwVisits_Key]!fk_lu_visit_type
   visit!visit_type = claims_visits[cvwVisits_Key]!visit_type
   visit!diagnosis = claims_visits[cvwVisits_Key]!diagnosis
   Try visit!fk_code = claims_visits[cvwVisits_Key]!fk_code
   Try visit!coded_term = claims_visits[cvwVisits_Key]!coded_term
   Try visit!fk_coding_system = claims_visits[cvwVisits_Key]!fk_coding_system
   Try visit!coding_system = claims_visits[cvwVisits_Key]!coding_system
   visit!management_plan = claims_visits[cvwVisits_Key]!management_plan
   visit!review_date = claims_visits[cvwVisits_Key]!review_date
   visit!assessworkplace = claims_visits[cvwVisits_Key]!assessworkplace
   visit!hours_capable = claims_visits[cvwVisits_Key]!hours_capable
   visit!days_capable = claims_visits[cvwVisits_Key]!days_capable
   visit!restrictions = claims_visits[cvwVisits_Key]!restrictions
   visit!capabilities = claims_visits[cvwVisits_Key]!capabilities
   visit!fk_caused_by_employment = claims_visits[cvwVisits_Key]!fk_caused_by_employment
   visit!doctor_consented = claims_visits[cvwVisits_Key]!doctor_consented
   visit!worker_consented = claims_visits[cvwVisits_Key]!worker_consented
   visit!fitness_preinjury_from = claims_visits[cvwVisits_Key]!fitness_preinjury_from
   visit!fitness_suitable_from = claims_visits[cvwVisits_Key]!fitness_suitable_from
   visit!fitness_suitable_to = claims_visits[cvwVisits_Key]!fitness_suitable_to
   visit!fitness_unfit_from = claims_visits[cvwVisits_Key]!fitness_unfit_from
   visit!fitness_unfit_to = claims_visits[cvwVisits_Key]!fitness_unfit_to
   visit!fitness_perm_mod_duties_from = claims_visits[cvwVisits_Key]!fitness_perm_mod_duties_from
   visit!latex = claims_visits[cvwVisits_Key]!latex
   visit!fk_progressnote = claims_visits[cvwVisits_Key]!fk_progressnote
   visit!copy_of_duties = claims_visits[cvwVisits_Key]!copy_of_duties
   visit!refer_rehab_provider = claims_visits[cvwVisits_Key]!refer_rehab_provider
   visit!time_return_any_duties = claims_visits[cvwVisits_Key]!time_return_any_duties
   visit!factors_delaying_return = claims_visits[cvwVisits_Key]!factors_delaying_return
   visit!referrals_other_providers = claims_visits[cvwVisits_Key]!referrals_other_providers
   visit!capacity_lifting_carrying = claims_visits[cvwVisits_Key]!capacity_lifting_carrying
   visit!capacity_sitting_tolerance = claims_visits[cvwVisits_Key]!capacity_sitting_tolerance
   visit!capacity_standing_tolerance = claims_visits[cvwVisits_Key]!capacity_standing_tolerance
   visit!capacity_pushing_pulling = claims_visits[cvwVisits_Key]!capacity_pushing_pulling
   visit!capacity_bend_twist_squat = claims_visits[cvwVisits_Key]!capacity_bend_twist_squat
   visit!capacity_driving = claims_visits[cvwVisits_Key]!capacity_driving
   visit!capacity_other = claims_visits[cvwVisits_Key]!capacity_other
   visit!review_comments = claims_visits[cvwVisits_Key]!review_comments
   If visit!copy_of_duties = True Then
      rbCopyOfDutiesYes.value = True
   Endif
   If visit!copy_of_duties = False Then
      rbCopyOfDutiesNo.Value = True
   Endif
   If visit!refer_rehab_provider = True Then
      rbRehabProviderYes.value = True
   Endif
   If visit!refer_rehab_provider = False Then
      rbRehabProviderNo.Value = True
   Endif
   txtEstimatedTimeForAnyDuties.text = visit!time_return_any_duties
   txtDelayingFactors.text = visit!factors_delaying_return
   TxtReferrals.text = visit!referrals_other_providers
   txtLifting.text = visit!capacity_lifting_carrying
   txtSitting.text = visit!capacity_sitting_tolerance
   txtStanding.text = visit!capacity_standing_tolerance
   txtPushing.text = visit!capacity_pushing_pulling
   txtBendTwistSquat.text = visit!capacity_bend_twist_squat
   txtDriving.text = visit!capacity_driving
   txtOtherCapability.text = visit!capacity_other
   txtReviewComments.text = visit!review_comments
   
   'Editing a pre-existing claim - really need to allow editing of th progress note
   ' but later FIXME put in an audit-trail to show what was changed
   fk_progressnote = 0  'new unless editing a visit
   If Not IsNull(visits[cvwVisits_Key]!fk_progressnote) Then
      fk_progressnote = claims_visits[cvwVisits_Key]!fk_progressnote
   End If
   bExit = True
   Select Case visit!fk_lu_visit_type
      Case Const.Workcover_VisitType_Initial
         rbWorkcoverConsultTypeInitial.value = True
      Case Const.Workcover_VisitType_Progress
         rbWorkcoverConsultTypeProgress.value = True
      Case Const.Workcover_VisitType_Final
         rbWorkcoverConsultTypeFinal.value = True
      Case Const.Workcover_VisitType_InitialAndFinal
         rbWorkcoverConsultType_InitialFinal.value = True
   End Select
   Try txtCertificateDate.text = Format(visit!certificate_date, "dd/mm/yyyy")
   txtDiagnosis.text = visit!diagnosis
   If Not IsNull(visit!fk_code) Then
      txtCodedDiagnosis.text = visit!coded_term & "(" & visit!fk_code & ")"
      fk_code = visit!fk_code
      fk_coding_system = visit!fk_coding_system
   End If
   txtManagementPlan.text = visit!management_plan
   If Not IsNull(visit!review_date) Then txtReviewDate.text = modUtil.Format_Date(visit!review_date)
   If Not IsNull(visit!fitness_preinjury_from) Then
      txtPreInjury_From.text = modUtil.Format_Date(visit!fitness_preinjury_from)
      chkFitness_PreInjury.value = True
   End If
   If Not IsNull(visit!fitness_suitable_from) Then
      txtSuitable_From.text = modUtil.Format_Date(visit!fitness_suitable_from)
      chkFitness_Suitable.Value = True
   End If
   If Not IsNull(visit!fitness_suitable_to) Then txtSuitable_To.text = modUtil.Format_Date(visit!fitness_suitable_to)
   If Not IsNull(visit!fitness_perm_mod_duties_from) Then
      txtPermModDuties_From.Text = modUtil.Format_Date(visit!fitness_perm_mod_duties_from)
      chkFitness_PermModDuties.Value = True
   End If
   If Not IsNull(visit!fitness_unfit_from) Then
      txtunfit_From.text = modUtil.Format_Date(visit!fitness_unfit_from)
      chkFitness_Unfit.Value = True
   End If
   If Not IsNull(visit!fitness_unfit_to) Then txtUnfit_To.text = modUtil.Format_Date(visit!fitness_unfit_to)
   txtCanWork_HrsPerDay.text = visit!hours_capable
   txtCanWork_DaysPerWeek.text = visit!days_capable
   txtRestrictions.text = visit!restrictions
   txtCapabilities.text = visit!capabilities
   chkAgreeToTreat_Doctor.Value = visit!doctor_consented
   chkAgreeToTreat_Worker.value = visit!worker_consented
   fk_caused_by_employment = visit!fk_caused_by_employment
   Select Case visit!fk_caused_by_employment
      Case const.Workcover_CausedByEmployment_No
         rbDueEmploymentNo.value = True
      Case const.Workcover_CausedByEmployment_Yes
         rbDueEmploymentYes.value = True
      Case const.Workcover_CausedByEmployment_Uncertain
         rbDueEmploymentUncertain.value = True
   End Select
   If visit!assessworkplace = True Then
      rbAssessWorkplaceYes.value = True
   Else
      rbAssessWorkplaceNo.Value = True
   Endif
   '---------------------------------------------
   'What a Fuck up - changed form = changed gui
   'Forms after 30/03/2013 have different fields
   '---------------------------------------------
   If DateDiff(Val("31/03/2013"), visit!certificate_date, gb.day) > 0 Then 'all dates later than 31/03/2013
      Capability_Gui_Show("after 31/03/2013")
   Else
      Capability_Gui_Show("pre 31/03/2013")
   Endif
   bVisitLoaded = True
   bExit = False
   
End

Public Sub Visits_Refresh()
   '------------------------------------------------------------------
   'Refresh the visits for the claim
   'either programatically in Reload() or user clicking on claims list
   '------------------------------------------------------------------
   
   Dim x As Integer
   
   claims_visits = New Collection
   cvwVisits.Clear()           'clear the list
   For Each visit In visits ' currentconsult!workcover_claims
      If visit!fk_claim = fk_claim Then
         cvwVisits.Add(x, 0)
         cvwVisits[x][0] = Format(visit!certificate_date, "dd/mm/yyyy")
         cvwVisits[x][1] = visit!visit_type
         cvwVisits[x][2] = visit!diagnosis
         cvwVisits[x][3] = visit!management_plan
         claims_visits.Add(visit, x)
         Inc x
      End If
   Next
   lblmeasure.font = cvwVisits.Font
   modUtil.Columnview_Columns_Set_Size(cvwVisits, lblmeasure)
   
End

Public Sub EditArea_Claim_Clear()
   
   bExit = True
   txtClaim.text = ""
   txtIdentifier.text = ""
   chkClaimAccepted.Value = False
   txtEmployer.text = ""
   txtAddress.Text = ""
   txtMemo.text = ""
   txtDateFirstSeen.text = ""
   txtContactPerson.text = ""
   txtOccupation.text = ""
   txtHoursWorked.text = ""
   txtDateInjury.text = ""
   txtMechanismInjury.text = ""
   txtCodedDiagnosis.text = ""
   bClaimLoaded = False
   Contact_Type = const.contacttype_organisation 'default
   rbInjuryConsistantWithHistoryYes.value = True
   bExit = False
   
End

Public Sub EditArea_Visit_Clear()
   
   bExit = True
   txtDiagnosis.text = ""
   txtManagementPlan.text = ""
   txtCapabilities.text = ""
   txtRestrictions.text = ""
   txtReviewDate.text = ""
   txtPreInjury_From.text = ""
   txtSuitable_From.text = ""
   txtSuitable_To.text = ""
   txtUnfit_From.text = ""
   txtUnfit_To.text = ""
   txtRestrictions.text = ""
   txtEstimatedTimeForAnyDuties.text = ""
   txtDelayingFactors.text = ""
   txtPermModDuties_From.text = ""
   txtCanWork_HrsPerDay.text = ""
   txtCanWork_DaysPerWeek.text = ""
   If chkWipeREstrictions.value = True Then  
      txtLifting.text = ""
      txtPushing.text = ""
      txtBendTwistSquat.text = ""
      txtOtherCapability.text = ""
      txtSitting.text = ""
      txtStanding.text = ""
      txtDriving.text = ""
   End If   
   chkFitness_PermModDuties.value = False
   chkFitness_Unfit.value = False
   chkFitness_Suitable.value = False
   chkFitness_PreInjury.value = False
   rbAssessWorkplaceYes.value = False
   chkAgreeToTreat_Doctor.value = True
   chkAgreeToTreat_Worker.value = True
   rbRehabProviderNo.Value = True
   rbCopyOfDutiesNo.value = True
   bVisitLoaded = False
   bExit = False
   bNewVisit = False
   lblLastCertificateDetails.text = ""
   
End

Public Function EditAreaTextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case tag
      Case "review date"
         bKeyValid = modUtil.AllowKeys(Const.AllowKeys_Date_DWMY, keycode)
      Case "identifier", "claim", "employer", "address", "suburb", "contact person", "memo", "occupation", "date of injury", "capacity lifting", "capacity siting", "capacity pushing", "capacity standing", "capacity bend twist squat", "capacity driving", "capability other", "referrals", "delaying factors"
         bKeyValid = True  'date of injury can be free text e.g 'unkown'
      Case "diagnosis", "coded diagnosis", "work restrictions", "mechanism of injury", "management plan", "work capabilities"
         bKeyValid = True
      Case "hours worked", "hours per day", "days per week"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case "certificate date", "pre-injury from", "unfit from", "unfit to", "restriction review date"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case "suitable duties from", "suitable duties to", "permanantly modified duties", "date first seen"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub Missing_Employer_Hint()
   
   Dim smsg As String
   
   sMsg = "The employing entity, be they company or sole trader must exist\n"
   "in the contacts database before you can continue.\n\n"
   "You may not enter 'free text' here, so if the workers company or sole trader cannot "
   " be found, either check the spelling or enter them in the contacts manager before proceeding.\n\n"
   "Would you like to see the contacts help?"
   If Message.warning(sMsg, "Yes", "No") = 1 Then
      FClinical.Help_Show("contacts-manager.html", "Help:Contacts Manager", True)
   End If
   
End

Public Sub rbDueEmployment_KeyPress()
   
   If Key.code = Key.return Then
      txtUnfit_From.SetFocus() 'most likely
   End If
   
End

Public Sub chkFitness_Click()
   
   Select Case Last.tag
      Case "pre-injury"
         If Last.value = False Then
            txtPreInjury_From.text = ""
            ' visit!fitness_preinjury_from = Null
         End If
      Case "unfit"
         If Last.value = False Then
            
            txtunfit_From.text = ""
            ' visit!fitness_unfit_from = Null
            '     visit!fitness_unfit_to = Null
         Endif
   End Select
   
End

Public Sub chkFitness_KeyPress()
   
   Select Case Key.Code
      Case Key.Return
         Select Case Last.tag
            Case "pre-injury"
               txtPreInjury_From.SetFocus()
            Case "suitable"
               txtSuitable_From.SetFocus()
            Case "unfit"
               txtUnfit_From.SetFocus()
            Case "permanantly modified"
               txtPermModDuties_From.SetFocus()
         End Select
   End Select
   
End

Public Sub ColumnView2_DblClick()
   
   columnview2.MoveCurrent()
   Select Case Last.tag.tag
      Case "employer"
         branch = branches[columnview2.Item.Key]
         Organisation_Select()
         txtoccupation.SetFocus()
   End Select
   columnview2.Visible = False
Catch
   Return
   
End

Public Sub ListView1_DblClick()
   
   listview1.MoveCurrent
   Select Case listview1.Tag.tag
      Case "occupation"
         occupation_Select(occupations[listview1.Item.key])
      Case "employer"
         Sole_Trader = Sole_Traders[listview1.Item.key]
         SoleTrader_Select()
   End Select
   listview1.Visible = False
Catch
   Return
   
End

Public Sub Occupation_Select(occupation As Collection)
   '----------------------------------------
   'Select an occupation from the popup list
   'called by Listview1_dblclick() 
   '-----------------------------------------   
   
   bexit = True   
   txtOccupation.Text = occupation!occupation
   bexit = False
   fk_occupation = occupation!pk
   txtHoursWorked.SetFocus
Catch
   Return
   
End

Public Sub Organisation_Comms_Get()
   
   Comms = modContactsDBI.Branch_Comms_Get(fk_branch)
   
End

Public Sub Employer_Find()
   '-------------------------------------------------------------
   'Get from contacts either organisation or sole trader = person
   '-------------------------------------------------------------
   
   Select Case Contact_Type
      Case const.contacttype_organisation
         Organisation_Get()
      Case const.contacttype_person
         SoleTrader_Get()
   End Select
   
End

Public Sub Organisation_Get()
   '---------------------------
   'Get a list of organisations
   '---------------------------
   
   Dim x As Integer
   
   With columnview2
      .Visible = False
      .Clear
   End With
   If Trim(txtEmployer.text) = "" Then Return
   branches = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Organisations_Get(Trim(txtEmployer.text)))
   If Not branches.count Then Return
   For Each branch In branches
      ColumnView2.Add(x, 0)
      ColumnView2[x][0] = Branch!organisation
      ColumnView2[x][1] = Branch!branch
      ColumnView2[x][2] = Trim(Branch!street1 & " " & Branch!street2)
      ColumnView2[x][3] = Branch!suburb & " " & Branch!postcode
      Inc x
   Next
   If branches.count = 1 Then
      Organisation_select()
      txtOccupation.SetFocus()
   Else
      lblmeasure.font = columnview2.Font
      modUtil.Columnview_Columns_Set_Size(columnview2, lblmeasure)
      With ColumnView2
         .Visible = True
         .Raise
         .tag = txtEmployer
      End With
   End If
   
End

Public Sub Organisation_select()
   '------------------------------------------
   'Display the organisation selected (branch)
   '------------------------------------------
   
   bExit = True
   fk_organisation = branch!fk_organisation
   fk_branch = branch!fk_branch
   txtEmployer.text = branch!organisation
   Try txtAddress.text = Trim(branch!street1 & " " & branch!street2) & " " & branch!town & " " & branch!postcode
   Try fk_town = branch!fk_town
   comms = modContactsDBI.Branch_Comms_Get(fk_branch)
   bExit = False
   
End

Public Sub SoleTrader_Get()
   '-----------------------------------------------------------------
   'Pops up a list or either patients or persons who are not patients
   '-----------------------------------------------------------------
   
   Dim x As Integer
   
   With listview1
      .Clear
      .Visible = False
   End With
   If Trim(txtemployer.text) = "" Then Return
   Sole_Traders = modContactsDBI.Person_Get(Trim(txtemployer.text), contact_type)
   Sole_Traders.Remove("sql_in_english")
   Sole_Traders = modUtil.Copy_Collection_Keyed_Sequentially(Sole_Traders)
   If Not Sole_Traders.count Then Return
   For Each Sole_Trader In Sole_Traders
      If Not IsNull(Sole_Trader!town) Then   'any without an adress are employees so don't include them
         listview1.Add(x, Sole_Trader!firstname & " " & Sole_Trader!surname & " (" & Sole_Trader!occupation & ") " & Trim(Sole_Trader!street1 & " " & Sole_Trader!street2) & " " & Sole_Trader!town)
      End If
      Inc x
   Next
   If Sole_Traders.count = 1 Then
      SoleTrader_Select()
      txtoccupation.SetFocus()
   Else
      With listview1
         .Visible = True
         .tag = txtEmployer
         .Raise
      End With
   End If
   
End

Public Sub SoleTrader_Select()
   '--------------------------------------------------------
   'User has clicked on a list of either patients or persons
   'display the details
   '--------------------------------------------------------
   
   fk_person = Sole_Trader!fk_person
   txtEmployer.text = Sole_Trader!wholename
   Try txtAddress.text = Trim(Sole_Trader!street1 & " " & Sole_Trader!street2) & " " & Sole_Trader!town & " " & Sole_Trader!postcode
   comms = modContactsDBI.person_comms_get(Sole_Trader!fk_person)
   txtContactPerson.SetFocus()
   
End

Public Sub ListView1_KeyPress()
   
   If Key.code = Key.Return Then
      listview1_dblClick()
   End If
   
End

Public Sub ColumnView2_KeyPress()
   
   If key.code = key.return Then
      ColumnView2_DblClick()
   End If
   
End

Public Sub EditAreaTextBox_KeyRelease()
   
   Select Case Last.tag
      Case "employer"
         Employer_Find()
      Case "occupation"
         occupations = modCommonDBI.Occupations_Get(listview1, txtOccupation)
      Case "coded diagnosis"
         Timer1.Start()       'see timer1_timer which gets the terms
   End Select
   
End

Public Sub EditAreaTextBox_GotFocus()
   
   Dim hCtrl As Control
   Dim Tbtn As ToolButton
   
   'must do this as user could be selecting dose, then move off this control
   'sometimes the DateChooser1.lostfocus event dosn't trigger to remove itself
   Try ReferenceHBoxForColumnview = Last.Parent.Parent 'the parent may not always be a Hbox- but this does not matter as then is not used.
   HBox_Calander.Visible = False
   VBox_ColumnView.Visible = False
   listview1.Visible = False   'needed, don't remove
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
      Case "employer"
         With ColumnView2
            .top = VBox_EditArea.top + Last.parent.parent.Top + txtEmployer.Height
            .left = Last.Parent.Left + VBox_EditArea.Padding
            .width = txtPreExistingFactors.width - 2
            .height = 150 'fixme fit me to number in the list
            .Visible = False
         End With
         With Listview1
            .top = VBox_EditArea.top + Last.parent.Parent.top + txtEmployer.Height
            .left = Last.parent.left
            .width = txtEmployer.Width
            .height = 150 'fixme fit me to number in the list
            .Visible = False
         End With
      Case "occupation"
         With listview1
            .top = Last.Parent.Parent.top + Last.Height
            .left = Last.Parent.Left + VBox_EditArea.Padding
            .width = txtOccupation.width - 2
            .height = 100 'fixme, calculate me from contents
            .Raise
         End With
      Case "review date", "date of injury", "pre-injury from", "suitable duties to", "suitable duties from", "unfit from", "unfit to", "permanantly modified duties"
         For Each Hctrl In Last.parent.children
            If hctrl Is ToolButton Then
               Tbtn = hctrl
               Tbtn.Visible = True
            End If
         Next
         DateChooser1.tag = Last
      Case "coded diagnosis"
         With VBox_ColumnView
            .top = Last.parent.parent.top + Last.parent.height
            .left = Last.parent.Left + VBox_EditArea.Padding
            .width = txtCodedDiagnosis.width - 2
            .Raise
         End With
   End Select
   
End

Public Sub EditAreaTextBox_Change()
   
   If bExit Then Return
   If bDateInvalid Then
      bExit = True
      Last.text = ""
      bDateInvalid = False
      bExit = False
   End If
   
   Select Case Last.tag
      Case "employer"
         If Len(Last.text) = 0 Then
            fk_organisation = 0
            fk_branch = 0
            fk_person = 0
            bexit = True
            txtAddress.text = ""
            columnview2.Visible = False
            listview1.Visible = False
            bexit = False
         End If
      Case "occupation"
         If Len(Last.text) = 0 Then
            fk_occupation = 0
            listview1.Visible = False  
         End If
      Case "management plan"
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtReviewDate.SetFocus()
         End If
      Case "coded diagnosis"
         If Trim(Last.text) = "" Then
            fk_code = ""
            fk_coding_system = 0
         End If
      Case "pre-injury from"
         If Len(Last.text) Then chkFitness_PreInjury.Value = True
      Case "unfit from"
         If Len(Last.text) Then chkFitness_Unfit.Value = True
      Case "unfit to"
         If Len(Last.text) Then chkFitness_Unfit.value = True
      Case "suitable duties from"
         If Len(Last.text) Then chkFitness_Suitable.Value = True
      Case "suitable duties to"
         If Len(Last.text) Then chkFitness_Suitable.Value = True
      Case "work restrictions"
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            tbSave.SetFocus()
         End If
      Case "work capabilities"
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtRestrictions.SetFocus()
         End If
      Case "hours per day"
         If IsInteger(Last.text) Then
            If Val(Last.text) < 1 Or Val(Last.text) > 24 Then
               Last.text = ""
            End If
         End If
      Case "days per week"
         If IsInteger(Last.text) Then
            If Val(Last.text) < 1 Or Val(Last.text) > 7 Then
               Last.text = ""
            End If
         End If
         
   End Select
   EditArea_Notify_Datachanged(True)
   
End

Public Sub EditArea_Notify_Datachanged(flag As Boolean)
   
   If flag Then
      VBox_EditArea_Outer.Padding = 1
      VBox_EditArea_Outer.Background = Color.red
      tbSave.Foreground = color.red
      tbSave.Enabled = True
   Else
      VBox_EditArea_Outer.Padding = 0
      VBox_EditArea_Outer.Background = Color.white
      tbSave.Foreground = color.black
      tbSave.Enabled = False
   End If
   
End

Public Sub EditAreaTextBox_LostFocus()
   
   Dim Hastext As Boolean
   
   Last.BackGround = Color.rgb(255, 255, 255)
   Select Case Last.tag
      Case "coded diagnosis"
         Timer1.Stop() '
      Case "certificate date", "permanantly modified duties", "suitable duties to", "review date", "pre-injury from", "suitable duties from", "unfit from", "unfit to", "date first seen"
         If Last.text <> "" Then
            hasText = True
            If Not modEditAreaHelpers.Valid_Date(Last) Then
               If Not hastext Then Return
               bDateInvalid = True
               bExit = True
               Last.text &= " **INVALID DATE**"
               Last.SetFocus()
               bExit = False
            End If
         End If
         
   End Select
   Last.pos = 0
   
End

Public Sub EditAreaTextBox_KeyPress()
   
   If bExit Then Return
   
   If Not EditAreaTextbox_ExcludeKeys(key.code, Last.tag) Then
      Stop Event
      Return
   End If
   Select Case Key.Code
      Case key.Esc
         HBox_Calander.visible = False
      Case Key.Return, key.tab
         Select Case Last.tag
            Case "date of injury"
               txtDateFirstSeen.SetFocus()
            Case "date first seen"
               txtMechanismInjury.SetFocus()
            Case "identifier"
               txtClaim.SetFocus()
            Case "claim"
               txtEmployer.SetFocus()
            Case "employer"
               txtContactPerson.SetFocus()
            Case "contact person"
               txtMemo.SetFocus()
            Case "memo"
               txtOccupation.SetFocus()
            Case "date of injury"
               txtMechanismInjury.SetFocus()
            Case "hours worked"
               txtDateInjury.SetFocus()
            Case "mechanism of injury"
               txtDiagnosis.SetFocus()
            Case "diagnosis"
               txtCodedDiagnosis.SetFocus()
            Case "coded diagnosis"
               txtManagementPlan.SetFocus()
            Case "management plan"
               If Last.pos <> Len(Last.text) + 1 Then
                  Stop Event
               End If
               txtReviewDate.SetFocus()
            Case "review date"
               modEditAreaHelpers.Calculate_Date_From_Interval(txtReviewDate)
               rbDueEmploymentYes.SetFocus()
            Case "pre-injury from"
               txtUnfit_From.SetFocus()
            Case "unfit from"
               txtUnfit_To.SetFocus()
            Case "unfit to"
               txtSuitable_From.SetFocus()
            Case "suitable duties from"
               txtSuitable_To.SetFocus()
            Case "suitable duties to"
               txtPermModDuties_From.SetFocus()
            Case "permanantly modified duties"
               txtCanWork_HrsPerDay.SetFocus()
            Case "hours per day"
               txtCanWork_DaysPerWeek.SetFocus()
            Case "days per week"
               txtCapabilities.SetFocus()
            Case "capacity lifting"
               txtSitting.SetFocus
            Case "capacity sitting"
               txtPushing.SetFocus
            Case "capacity pushing"
               txtStanding.SetFocus
            Case "capacity standing"
               txtBendTwistSquat.SetFocus
            Case "capacity bend twist squat"
               txtDriving.SetFocus
            Case "capacity driving"
               txtOtherCapability.SetFocus()
            Case "work capabilities"
               txtRestrictions.SetFocus()
         End Select
      Case key.Down
         Select Case Last.tag
            Case "coded diagnosis"
               If VBox_ColumnView.Visible Then
                  If columnview1.count Then
                     ColumnView1.MoveFirst()
                     ColumnView1.Item.Selected = True
                     ColumnView1.SetFocus()
                  End If
               End If
            Case "employer"
               If ColumnView2.Visible Then
                  ColumnView2.MoveFirst()
                  ColumnView2.Item.Selected = True
                  ColumnView2.SetFocus()
               End If
               If Listview1.Visible Then
                  Listview1.MoveFirst()
                  Listview1.Item.Selected = True
                  Listview1.SetFocus()
               Endif
            Case "occupation", "claim"
               If listview1.Visible Then
                  listview1.MoveFirst()
                  listview1.Item.Selected = True
                  listview1.SetFocus()
               End If
         End Select
   End Select
   
End

Public Sub rbWorkCoverConsultType_Click()
   
   HBox_Calander.Visible = False
   If bExit Then Return
   Select Case Last.tag
      Case "initial"
         fk_lu_visit_type = Const.Workcover_VisitType_Initial
      Case "progress"
         fk_lu_visit_type = Const.Workcover_VisitType_Progress
      Case "final"
         fk_lu_visit_type = Const.Workcover_VisitType_Final
      Case "initial and final"
         fk_lu_visit_type = Const.Workcover_VisitType_InitialAndFinal
   End Select
   EditArea_Notify_Datachanged(True)
   
End

Public Sub Calculate_Review_Date()
   
   Dim iNumberOfMonths As Integer      'do not need both these declared, but do for readability
   Dim iNumberOfDays As Integer
   Dim iNumberOfWeeks As Integer
   
   bExit = True 'stop change event of edit area triggering
   
   If UCase(Right(Trim(txtReviewDate.text), 1)) = "M" Then
      
      Try iNumberOfMonths = Val(Left(txtReviewDate.text, Len(Trim(txtReviewDate.text)) - 1))
      If Error Then
         txtReviewDate.text = ""
      End If
      txtreviewDate.text = Format(DateAdd(Now, gb.Month, iNumberOfMonths), "dd/mm/yyyy")
   Else
      If UCase(Right(Trim(txtReviewDate.text), 1)) = "D" Then
         Try iNumberOfDays = Val(Left(txtReviewDate.text, Len(Trim(txtReviewDate.text)) - 1))
         If Error Then
            txtReviewDate.text = ""
         End If
         txtReviewDate.text = Format(DateAdd(Now, gb.day, iNumberOfDays), "dd/mm/yyyy")
      Else
         If UCase(Right(Trim(txtReviewDate.text), 1)) = "W" Then
            Try iNumberOfWeeks = Val(Left(txtReviewDate.text, Len(Trim(txtReviewDate.text)) - 1))
            If Error Then
               txtReviewDate.text = ""
            End If
            txtReviewDate.text = Format(DateAdd(Now, gb.Week, iNumberOfweeks), "dd/mm/yyyy")
         End If
      End If
   End If
   bExit = False
   
End

Public Sub DateChooser1_Activate()
   
   Last.tag.text = Format(Last.value, "dd/mm/yyyy")
   HBox_Calander.Visible = False
   Select Case DateChooser1.Tag.tag
      Case "date of injury"
         txtDateFirstSeen.SetFocus()
      Case "date first seen"
         txtMechanismInjury.SetFocus()
      Case Else
         DateChooser1.tag.SetFocus() 'fixme do the rest
         
   End Select
   
End

Public Sub DateChooser1_LostFocus()
   
   HBox_Calander.Visible = False
   
End

Public Sub EditAreaCheckBox_Click()
   
   HBox_Calander.Visible = False
   If bExit Then Return
   Select Case Last.tag
      Case "wipe restrictions"
         txtLifting.text = ""
         txtPushing.text = ""
         txtBendTwistSquat.text = ""
         txtOtherCapability.text = ""
         txtSitting.text = ""
         txtStanding.text = ""
         txtDriving.text = ""
      Case "doctor agrees"
         Try visit!doctor_consented = Last.value
      Case "worker agrees"
         Try visit!worker_consented = Last.value
      Case "permanantly modified"
         If Last.value = False Then
            txtPermModDuties_From.text = ""
         End If
      Case "pre-injury"
         If Last.value = False Then
            txtPreInjury_From.text = ""
            txtCapabilities.text = ""
            txtRestrictions.text = ""
            txtSitting.text = ""
            txtBendTwistSquat.text = ""
            txtDriving.text = ""
            txtOtherCapability.text = ""
            txtLifting.text = ""
            txtPushing.text = ""
            txtStanding.text = ""
            rbCopyOfDutiesNo.Value = True
         Else
            rbAssessWorkplaceNo.value = True
            txtCapabilities.text = ""
            txtRestrictions.text = ""
         End If
      Case "suitable"
         If Last.value = False Then
            txtSuitable_To.text = ""
            txtSuitable_From.text = ""
         End If
      Case "unfit"
         If Last.value = False Then
            txtUnfit_From.text = ""
            txtUnfit_To.Text = ""
            txtPreInjury_From.text = ""
            txtCapabilities.text = ""
            txtRestrictions.text = ""
            txtSitting.text = ""
            txtBendTwistSquat.text = ""
            txtDriving.text = ""
            txtOtherCapability.text = ""
            txtLifting.text = ""
            txtPushing.text = ""
            txtStanding.text = ""
         End If
   End Select
   
End

Public Sub Coded_Term_Get()
   
   Dim term As Collection
   Dim key As String
   
   If Trim(txtCodedDiagnosis.text) = "" Then
      fk_code = "" 'clin_coding.generic_terms key is  a string
      fk_coding_system = 0
      VBox_ColumnView.Visible = False
      Return
   End If
   Timer1.Stop()
   Terms = modCodingDBI.Get_Terms(Trim(txtCodedDiagnosis.text), chkLimit.value, chkicd10.value, SpinBoxTermLimits.value)
   With columnview1
      .Clear()
      .Columns[0].Width = txtCodedDiagnosis.width - 100
      .Columns[1].width = 100
   End With
   If Terms.count Then
      For Each term In Terms
         key = term!code
         columnview1.Add(key, 0)
         columnview1[key][0] = term!term
         columnview1[key][1] = term!system
      Next
      lblTermCount.text = Str$(terms.count) & " terms retreived"
      columnview1.tag = txtCodedDiagnosis
      VBox_ColumnView.Visible = True
   Else
      VBox_ColumnView.Visible = False 'empty recordset
   End If
   
End

Public Sub Columnview1_KeyPress()
   
   If key.code = key.return Then Columnview1_DblClick()
   
End

Public Sub Coded_Term_Select()
   
   columnview1.MoveCurrent()                     'match internal cursor to visible row
   fk_code = Terms[columnview1.Item.key]!code
   fk_coding_system = Terms[columnview1.Item.key]!fk_coding_system
   If txtDiagnosis.text = "" Then
      txtDiagnosis.text = columnview1.Item.Text
   End If
   txtCodedDiagnosis.text = Terms[columnview1.Item.key]!term & " (" & Terms[columnview1.Item.key]!code & ")"
   txtCodedDiagnosis.pos = 0 'if case term too long for textbox
   txtManagementPlan.SetFocus()
Catch
   Return
   
End

Public Sub Columnview1_DblClick()
   
   columnview1.MoveCurrent
   Coded_Term_Select()
   VBox_ColumnView.Visible = False
Catch
   Return
   
End

Public Sub mnuVisits_Click()
   
   Select Case Last.tag
      Case "edit"
         Visit_Edit()
      Case "delete"
         Visit_Delete()
      Case "help"
         modUtil.NotImplemented("Displaying Help")
      Case "preview"
         Preview()
      Case "reprint"
         Visit_RePrint()
      Case "font"
         modUtil.Columnview_SetFont(cvwVisits, "FWorkcover")
   End Select
   
End

Public Sub cvwVisits_Menu()
   
   If Not cvwVisits.count Then Return
   mnuVisits.Popup()
   
End

Public Sub rbTypeEmployer_Click()
   
   If bExit Then Return
   columnview2.Visible = False
   Listview1.Visible = False
   txtAddress.text = ""
   If Last.tag = "organisation" Then
      Contact_Type = const.contacttype_organisation
   Else
      Contact_Type = const.contacttype_person
   End If
   Employer_Find()
   
End

Public Sub Form_Resize()
   
   If columnview2.Visible Then
      columnview2.width = txtAddress.width
   Endif
   If listview1.visible Then
      
   Endif
   If VBox_ColumnView.Visible Then
      With VBox_ColumnView
         .top = ReferenceHBoxForColumnview.top + ReferenceHBoxForColumnview.height
         .Left = HBox_Diagnosis.width - txtCodedDiagnosis.width
         .width = txtCodedDiagnosis.width - 2
      End With
   End If
   If HBox_Calander.visible Then
      HBox_Calander.top = DateChooser1.Tag.Parent.Parent.top + DateChooser1.Tag.Parent.Parent.height * 2 + Me.padding  'FIXME THIS IS WRONG.
   Endif
   
End

Public Sub VSplit_WorkcoverForm_Resize()
   
   If columnview2.Visible Then
      columnview2.top = ReferenceHBoxForColumnview.top + ReferenceHBoxForColumnview.height
   Endif
   If listview1.visible Then
      listview1.top = ReferenceHBoxForColumnview.top + ReferenceHBoxForColumnview.height
   Endif
   If VBox_ColumnView.Visible Then
      VBox_ColumnView.top = ReferenceHBoxForColumnview.top + ReferenceHBoxForColumnview.height
   Endif
   
End
