' Gambas module file
' Copyright (C) 2008,2009 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
 Public sql As String
 Public $Result As Result
 
 

Public Function Claims_Get(fk_patient As Integer) As Collection 
  '--------------------------------------------------------------------------
  'Gets all the patients workcover claims, and loads the cvwWorkcover control
  'clin_workcover, currently ordered newest to oldest visit for each claim
  '--------------------------------------------------------------------------
  Return modDBConnect.exec_query_collection("Select * from clin_workcover.vwWorkcover  WHERE fk_patient =" & fk_patient & " ORDER BY fk_claim, fk_visit DESC")

End

Public Function Save(currentconsult As Cconsult, view_key As Integer, claim As Collection, visit As Collection) As Integer
    '------------------------------
   'Check if the occupation exists
   '------------------------------
    If claim!fk_occupation = 0 Then  'could be null ? if so will crash
      claim!fk_occupation = modCommonDBI.occupation_save(claim!occupation)
    End If
    Try claim.Remove("occupation")
   
   If view_key = -1 Then 
      '----------------------------------------------------------------------------------------
      'If no view_key this is an entirely new claim, so both claim part and visit part are new
      '----------------------------------------------------------------------------------------    
      claim!fk_consult = currentconsult.GetPK()
      claim!fk_claim = modDBConnect.insert("clin_workcover.claims", claim)
      '----------------------------------------------------
      'if this is a new claim it will always be a new visit
      '----------------------------------------------------
      visit!fk_claim = claim!fk_claim
      visit!fk_consult = claim!fk_consult
      visit!fk_visit = modDBConnect.insert("clin_workcover.visits", visit)
   Else
     '-----------------------------------------------------------------------------------
     'Record exists in the view, so will need to update claim details (if changed) first
     '----------------------------------------------------------------------------------
     If modDBConnect.update("clin_workcover.claims", currentconsult!workcover_claims[view_key], claim, "fk_claim") Then ' save to backend and update the collection in RAM too
       'IAN WHAT DO TO WITH THIS FLAG
     End If
     '------------------------------------------------------------------------------------------
     'Now, there **must be** a new claim, or if this is the same date and visit!pk_visit exists
     'we must have altered the visit on the same day, so allow a change.
     'FIXME DO THIS
     '----------------------------------------------------------------------------------------- 
     If visit!fk_visit Then
         visit.remove("fk_visit")
         modDBConnect.update("clin_workcover.visits", currentconsult!workcover_claims[view_key], visit, "fk_visit")
     
     Else
         visit!fk_claim = claim!fk_claim
         visit!fk_consult = currentconsult.GetPK() 'each visit dated 'today'
         visit!fk_visit = modDBConnect.insert("clin_workcover.visits", visit)
     End If  
   End If
   Return claim!fk_claim
  
  
End

