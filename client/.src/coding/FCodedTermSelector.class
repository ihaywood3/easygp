' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' A form to which is effectively a popup list to retrieve coded terms

Public sSearchText As String
Public Terms As Collection
Public sLastText As String 
Public NextControl As Control 'next control to get focus in calling form
Public CurrentTerm As Collection 
Public term As Collection 
Public key As String

Public Sub Set_SearchText(stxt As String)
   
   ' Terms = New Collection 
   
   sSearchText = stxt
   Timer1.start

End

Public Sub Button1_Click()
   
   Me.Close()
   
End

Public Sub Timer1_Timer()
   '------------------------------------------------------------
   'The timer is activated with each key-release and switched
   'off whilst the terms are being retreived by ICPC_Terms_Get()
   '------------------------------------------------------------
   
   Get_Terms()
   
End

Public Function Get_Term() As Collection 
   
   columnview1.movecurrent()
   Return Terms[columnview1.Item.key]
   ' CurrentTerm = Terms[columnview1.Item.key]
   
End

Public Sub Get_Terms()
   '-----------------------------
   'Gets list of diagnostic terms
   '-----------------------------
   Timer1.Stop()
   If sSearchText = "" Then Return
   sLastText = sSearchText
   Terms = modCodingDBI.Get_Terms(Trim(sSearchText), chkLimit.value, chkicd10.value, SpinBoxTermLimits.value)
   If Not (Terms.count) Then 
      Me.Visible = False
      Return
   End If   
   Me.Visible = True 
   
   With columnview1
      .Clear()
      .Columns.count = 2
      .Columns[0].Width = columnview1.width - 100
      .Columns[1].width = 100
      
   End With
   If Terms.count Then
      For Each term In Terms
         ' listview1.Add(term!code, term!term)
         key = term!code
         columnview1.Add(key, 0)
         columnview1[key][0] = term!term
         columnview1[key][1] = term!system
      Next 
      ' lblTermCount.text = Str$(terms.count) & " terms retreived"
   Else 
      If Trim(sSearchText) <> "" Then
         '  lblNewCondition.Foreground = Color.Red
      Endif 
   End If  

End

Public Sub Coded_Term_Select()
   ' '-------------------------------------------
   ' 'User has chosen a term from popup listview1
   ' 'Display this in the txtCodedTerm Textbox
   ' 'Set currentProblem!fk_code to the pk_term
   ' '-------------------------------------------
   '  columnview1.MoveCurrent()   'match internal cursor to visible row
   '  currentPastHistory!fk_code = Terms[columnview1.Item.key]!code
   '  CurrentTerm = Terms[columnview1.Item.key]
   '  currentPastHistory!fk_coding_system = Terms[columnview1.Item.key]!fk_coding_system
   '  '-----------------------------------------------------------------------
   '  'We allow free text in the health issue = past history problem
   '  'so, if user has typed something in there like ** very bad diabetes**
   '  '(bad example I know), then we keep this as the health issue but it
   '  'will be coded back to the appropriate icpc2+ term
   '  'However if they havn't typed anything in here, put the natural language
   '  'term in the txtConditon text box and the coded term in the coded textbox
   '  'e.g Diabetes;Type1 (T89002) or something similar
   '  '------------------------------------------------------------------------
   '  If txtCondition.text = "" Then
   '     txtCondition.text = columnview1.Item.Text
   '    
   '  End If   
   '  sSearchText = Terms[columnview1.Item.key]!term & "(" & Terms[columnview1.Item.key]!code & ")"
   '  HBox_Problem.Padding = 0 
   '  txtAgeOnset.SetFocus()

End

Public Sub ColumnView1_keypress()
   
   ' If key.code = key.return Then
   '    Term_Select()
   ' End If   
   
End

Public Sub ColumnView1_DblClick()
   
   ' Term_Select()
   
End

Public Sub Term_Select()
   
   ' Me.Hide()
   ' Last.movecurrent()
   ' CurrentTerm = Terms[columnview1.Item.key]
   ' FProcedures.Term_code_Save(Me.Tag.tag, CurrentTerm)
   ' 
   ' NextControl.SetFocus()
   
End

Public Sub EditArea_ChkBoxes_Click()

   Select Case Last.tag
      Case "icd10", "limit"
         Get_Terms()
   End Select

End

Public Sub SpinBoxTermLimits_Change()
   
   Get_Terms()
   
End

Public Sub SpinBoxTermLimits_MouseWheel()
   
   If Mouse.Delta = -1 Then
      SpinBoxTermLimits.Value = Max(SpinBoxTermLimits.Value - 1, 5)
   Else
      SpinBoxTermLimits.Value = Min(SpinBoxTermLimits.Value + 1, 30)
   End If
   Get_Terms()

End
