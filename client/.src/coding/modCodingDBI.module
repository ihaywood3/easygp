' Gambas module file

' Copyright (C) 2008-2014 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See thedbi
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

'PLEASE DON'T DELETE THIS
' delete from coding.generic_terms1;
' insert into coding.generic_terms1 (term,code)
'     select term, icpc_code || term_code
'     
'     from coding.icpc2_terms
'     where natural_language_term <> 'n/a';
'     ;
'     
' update coding .generic_terms1 set body_system = 'A',
' code_role = 2,
'  fk_coding_system = 1,
'  active = TRUE;

Property Read coding_system As Collection
Private all_systems As Collection

Public Function CommonestTermsGet() As Collection 
   
   Dim sql As String = ""
   
   "SELECT "
   "generic_terms.term, "
   "progressnotes_codes.fk_code, progressnotes_codes.fk_code as pk, "
   "count(progressnotes_codes.fk_code) as total "
   "FROM "
   "clin_consult.consult, "
   "clin_consult.progressnotes_codes, "
   "clin_consult.progressnotes, "
   "coding.generic_terms "
   "WHERE "
   "progressnotes_codes.fk_progressnote = progressnotes.pk AND "
   "progressnotes_codes.fk_code = generic_terms.code AND "
   "progressnotes.fk_consult = consult.pk "
   "and fk_staff = "
   sql &= modDBConnect.currentUser!fk_staff  
   sql &= " group by progressnotes_codes.fk_code, generic_terms.term having count(*) > 10 order by  term asc, total desc limit 40" 
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Codes_User_Favourite_Save(fk_staff As Integer, code As Collection)
   '--------------------------------------------------------
   'Saves the code (if doesn't exist to the users favourites
   ' Create table coding.user_favourites
   ' (pk serial primary key,
   '  fk_code text not null,
   '  fk_staff integer not null,
   '  CONSTRAINT user_favourites_fk_staff_fkey FOREIGN KEY  (fk_staff)
   '        REFERENCES admin.staff(pk)  MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION --,
   '   );
   
   '--------------------------------------------------------   
   Dim favourite As New CRow
   
   
   favourite!fk_code = code!fk_code
   favourite!fk_staff = fk_staff
   favourite.Save("coding.user_favourites", "fk_favourite")
   modDBConnect.CommitTrans()
   
End

Public Sub Codes_User_Favourite_Delete(favourite As Collection)
   
 If Message.Question("Are you sure you want to delete this favourite code?:\n\n" & favourite!term, "Yes", "No") = 2 Then Return
 modDBConnect.update("coding.user_favourites", Null, ["pk": favourite!pk, "deleted": True])
 modDBConnect.CommitTrans()
End

Public Function Codes_User_Favourites_Get(fk_staff As Integer) As Collection
   '------------------------------------------------------------------------------------------------------------------------------
   'returns a collection of the users favourite codes to make life easier when searching excluding deleted codes (not in the view)
   '------------------------------------------------------------------------------------------------------------------------------
   
   Return modDBConnect.exec_query_collection("Select * from coding.vwUserFavourites where fk_staff = " & fk_staff & " order by term") 
   
End

Public Function Loinc_Get_component(loinc_num As String) As String
   'there is a bug in here FIXME: possible to get LOINC not in database.
   
   Try Return modDBConnect.exec_query("Select * from coding.lu_loinc_abbrev WHERE loinc_num=$$" & loinc_num & "$$")!component
   If Error Then Return ""
   
End

Public Function Get_Terms(term As String, Optional has_limit As Boolean = False, bIncludeAll As Boolean = False, terms_limit As Integer = -1) As Collection
   '-------------------------------------------------------------------------------------
   ' search the offical coding system
   ' has_limit: true to put a limit on the search results
   ' bIncludeAll: search all coding systems on the system, not just the preferred one
   ' terms_limit: the limt to the results
   '--------------------------------------------------------------------------------------
   
   Dim sql As String
   
   sql = "Select * from coding.vwGenericTerms WHERE term ILIKE $$%" & term & "%$$ "
   If Not bIncludeAll Then
      sql &= "  AND preferred order by term"
   Else
      sql &= " order by preferred desc, term " ' still put default system codes first 
   End If
   If has_limit And If terms_limit > 0 Then
      sql &= " LIMIT " & terms_limit
   End If
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function ICPC2_Get_Term(term As String) As Collection
   
   Dim sql As String 
   
   sql = "  Select distinct pk_term, combined_term_code, natural_language_term "
   sql &= "From coding.vwICPC2terms where  natural_language_term ILIKE $$%" & term & "%$$  and status = 'A' "
   sql &= "order by natural_language_term LIMIT 20 " 
   Return modDBConnect.exec_query_collection(sql)
   
End

Public Function Coding_System_Check_Default_Exists() As Boolean
   
   Get_Systems()
   Return all_systems.Count > 0
   
End

Private Function coding_system_Read() As Collection
   
   Dim c As Collection
   Dim p As Collection
   
   Get_Systems()
   For Each c In all_systems
      If IsNull(p) Then p = c ' if one system only, then by definition its preferred!
      If c!preferred Then p = c 
   Next
   Return p
   
End

Private Sub Get_Systems()
   ' download the systems and cache the result
   
   If IsNull(all_systems) Then all_systems = modCache.Get("coding.lu_systems")
   
End

Public Sub Get_coding_Systems_Available() As Collection 
   '----------------------------------------------
   ' See which potential systems could be installed
   ' ----------------------------------------------
   
   Return modCache.Get("coding.lu_systems")
   
End

Public Function ICPC2_Check_Terms_Installed() As Boolean
   
   'Crudely check if in the generic terms table
   Dim R As Result
   
   R = modDBConnect.exec_query("Select fk_coding_system from coding.generic_terms where fk_coding_system = " & const.coding_icpcPlus & " LIMIT 1")
   If r.count Then Return True
   Return
   
End

Public Function Check_installed(Optional system As String) As Collection 
   '----------------------------
   'Get which ones are installed
   '----------------------------
   
   Dim sql As String 
   
   sql = "SELECT distinct coding.lu_systems.system , coding.generic_terms.fk_coding_system as pk_system " 
   "FROM coding.lu_systems INNER JOIN coding.generic_terms ON (coding.lu_systems.pk = coding.generic_terms.fk_coding_system) "
   " WHERE system LIKE $$%" & system & "$$"
   Return modDBConnect.exec_query_collection(sql)
   
End  
