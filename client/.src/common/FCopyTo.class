' Gambas class file

' Copyright (C) 2008-2014 Dr Richard TERRY

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' PURPOSE      A form to plug-in whenever you need to send copies of
'              something e.g document or letter
'              E.g used by FReferrals and Frequests
'              The CopyTo's are retrieved by the calling form via
'              Get_CopyTo_Data()
'              the CopTo's are re-loaded into the columnview when
'              editing is taking place by Copytos_Reload()
'-------------------------------------------------------------------
Private CopytoCollection As Collection
Private Member As Collection
Private CopyToType As Integer  'e.g const.Request_CopyTo_Person
Private bexit As Boolean
Private Copyto As Collection
Private Copytos As Collection
Private iCurrentKey As Variant 'has to be this because some keys are  string fields.
Private Embedded_In_Form As Form
Private Form_Referrals As FReferrals
Private Form_Requests As FRequests

Public Sub Init(callingform As Form)
   '---------------------------------------------------------------------------------
   'Passed to calling form allows notifying that form of data change in the cvwCopyTo
   '---------------------------------------------------------------------------------
   
   With columnview1
      .Visible = False
      .Columns.count = 4
      .height = .Parent.height - HBox_CopyTo.height
   End With
   Embedded_In_Form = callingform
   Select Case callingform.Tag
      Case "Referrals"
         Form_Referrals = callingform
      Case "Requests"
         Try Form_Requests = callingform
      Case "Requests New"
         
   End Select
   
   Reset()
   
End

Public Sub Form_Close()
   
   Embedded_In_Form = Null
   
End

Public Sub Get_CopyTo_Data() As Collection
   '-------------------------------------------------------------------------------------------
   'Rightly or wrong I've not stored copy to's in the database as keys
   'data!copyto = for example:
   'John Smith 1 Any Rd newtown|A Public Hosppital 100 Lookout Rd New Lambton Heights 2305| etc
   'Returns a collection = the pipe string + some text for progress notes
   '-------------------------------------------------------------------------------------------
   
   Dim data As New Collection
   Dim x As Integer
   
   copytos.Clear()
   For x = 0 To cvwCopyTo.count - 1
      data!progress_note &= " - copy to " & cvwCopyTo[x][0] & "<BR>"
      data!copyto &= cvwCopyTo[x][0] & "|"
      Copytos.Add(cvwCopyTo[x][0], Copytos.count)
      cvwCopyTo.MoveNext
   Next
   data!copyto = Left(data!copyto, Len(data!copyto) - 1)
   Return data
   
End

Public Sub Copytos_Reload(c As Collection)
   '--------------------------------------------------------------------------------------------
   'The calling form may wish to set the copytos collection, e.g when editing an existing record
   '--------------------------------------------------------------------------------------------
   
   copytos = c
   cvwCopyTo_Refresh()
   
End

Public Sub Reset()
   '------------------------------------------------------------------
   'Clears all lists, textboxes etc, sets default search to an person
   'either 'sole trader, other sole  person contact or employee
   '------------------------------------------------------------------
   
   bExit = True
   columnview1.Visible = False
   cvwCopyTo.Visible = True
   cvwCopyTo.Clear
   txtCopyTo.text = ""
   Copytos = New Collection         'also called from the parent form
   rbCopyTo_Person.value = True     'default to searching for person
   CopyToType = const.Request_CopyTo_Person
   bExit = False
   
End

Public Sub rbCopyTo_Click()
   '---------------------------------------------------------------------------------
   'User has changed the type of search, either or organisations, person, or patients
   'so reload the data
   '---------------------------------------------------------------------------------
   
   CopyToType = Last.Tag
   
   If Trim(txtCopyTo.text) <> "" Then
      Copyto_Get()
   End If
   
End

Public Sub Copyto_Get()
   '------------------------------------------------------------
   'Search by either organisation, patient, or person who could
   'be in contacts as sole trader or employee of an organisation
   'Persons no-longer at an address will not be shown
   '------------------------------------------------------------
   
   Dim Address As String
   Dim s As String
   
   If Trim(txtCopyTo.text) = "" Then Return
   columnview1.Clear()
   Select Case CopyToType
      Case const.Request_CopyTo_Person
         If rbCopyTo_Patient.value = True Then
            CopytoCollection = modContactsDBI.patients_get_firstname_surname(Trim(txtCopyTo.text))
            CopytoCollection.Remove("sql_in_english")  'remove unwanted member
         Else
            CopytoCollection = modReferralsDBI.Person_Get_By_Surname(Trim(txtCopyTo.text))
         Endif
         If CopytoCollection.count Then
            For Each Member In CopytoCollection
               columnview1.Add(Member!pk_view, 0)
               columnview1[Member!pk_view][0] = Member!wholename
               columnview1[Member!pk_view][1] = " (" & Member!occupation & ")"
               columnview1.Columns[2].width = 150
               If Not IsNull(Member!organisation) Then
                  s = Member!organisation
                  If Member!branch <> "HEAD OFFICE" Then
                     s &= " " & Member!branch
                  Endif
                  columnview1[Member!pk_view][2] = s
               Else
                  columnview1[Member!pk_view][2] = ""
               Endif
               address = ""
               Try address = Trim(Member!street1 & " " & Member!street2)
               Try address &= Member!town & " " & Member!postcode
               If Not IsNull(Member!fax) Then Try address &= " Fax:" & Member!fax
               columnview1[Member!pk_view][3] = address
            Next
         Else
            columnview1.Visible = False
         End If
      Case const.Request_CopyTo_Organisation
         CopytoCollection = modContactsDBI.Organisations_Get(Trim(txtCopyTo.text))
         For Each Copyto In CopytoCollection
            columnview1.Add(Copyto!pk_view, 0)
            columnview1[Copyto!pk_view][0] = Copyto!organisation
            columnview1[Copyto!pk_view][1] = Copyto!branch
            columnview1[Copyto!pk_view][2] = Trim(Copyto!street1 & " " & Copyto!street2) & " " & Copyto!town & " " & Copyto!postcode
         Next
      Case Const.Request_CopyTo_AnyPatient
         CopytoCollection = modContactsDBI.patients_get_firstname_surname(txtCopyto.text)
         CopytoCollection.Remove("sql_in_english") 'remove unwanted member
         For Each Copyto In CopytoCollection
            columnview1.Add(Copyto!pk_view, 0)
            columnview1[Copyto!pk_view][0] = Copyto!title & " " & Copyto!firstname
            columnview1[Copyto!pk_view][1] = copyto!surname
            columnview1[Copyto!pk_view][2] = Trim(Copyto!street1 & " " & Copyto!street2) & " " & Copyto!town & " " & Copyto!postcode
         Next
   End Select
   If columnview1.count Then
      columnview1.Visible = True
      cvwCopyTo.Visible = False
      columnview1.tag = txtCopyTo
   Else
      columnview1.Visible = False
      cvwCopyTo.Visible = True
   End If
   
End

Public Sub Copyto_Accept()
   '------------------------------------------------------------------------
   'User is selecting some organisation/employee or person to send a copy to
   'by either dbl clicking the columnview1 or <enter> when it has focus
   '------------------------------------------------------------------------
   
   Dim sSTring As String
   
   bExit = True
   txtCopyTo.text = ""
   columnview1.MoveCurrent
   iCurrentKey = columnview1.Item.key
   Sstring = columnview1[iCurrentKey][0] & " " & columnview1[iCurrentKey][1] & " " & columnview1[iCurrentKey][2] & " " & columnview1[iCurrentKey][3]
   Select Case CopyToType
      Case const.Request_CopyTo_Organisation, Const.Request_CopyTo_AnyPatient, const.Request_CopyTo_Person
         If Not Duplicated(sString) Then
            Copytos.Add(columnview1[iCurrentKey][0] & " " & columnview1[iCurrentKey][1] & " " & columnview1[iCurrentKey][2] & " " & columnview1[iCurrentKey][3], cvwCopyTo.count)
            cvwCopyTo.Add(cvwCopyTo.count, sstring)
            CallingForm_EditArea_Notify_DataChange()
         End If
   End Select
   bExit = False
   cvwCopyTo.Visible = True
   txtCopyTo.SetFocus()
Catch
   Return
   
End

Public Sub CallingForm_EditArea_Notify_DataChange()
   '----------------------------------------------------------------------------
   'Updates the visual clue (red border) in the editing area on the calling form
   '-----------------------------------------------------------------------------
   
   Select Case Embedded_In_Form.tag
      Case "Referrals"
         Form_Referrals.EditArea_Notify_DataChange(True)
      Case "Requests"
         Form_Requests.EditArea_Notify_DataChange(True)
   End Select
   
End

Public Sub EditAreaTextBox_KeyRelease()
   '----------------------------------------------------------
   'User is typing to try and find organisation/person/patient
   'display a popup list on each keypress
   '----------------------------------------------------------
   
   Copyto_Get()
   
End

Public Sub EditAreaTextBox_Change()
   
   If Trim(Last.text) = "" Then
      columnview1.Visible = False
   Endif
   
End

Public Sub EditAreaTextBox_KeyPress()
   '--------------------------------------------------------------------------
   'Either user has hit the down key, in which case scroll onto the popup list
   'or the <enter> key = here we allow free text as a copy to
   '--------------------------------------------------------------------------
   
   Select Case key.Code
      Case key.Down
         If columnview1.Visible = True Then
            columnview1.MoveFirst()
            columnview1.SetFocus()
            columnview1.Item.Selected = True
         End If
      Case key.Return
         If Trim(txtCopyTo.text) <> "" Then
            bexit = True
            If Lower(Trim(txtCopyTo.text)) <> "patient" Then
               If Not Duplicated(Trim(txtCopyTo.text)) Then
                  cvwCopyTo.Add(cvwCopyTo.count, Trim(txtCopyTo.text))
               End If
            End If
            txtCopyTo.text = ""
            columnview1.visible = False
            cvwCopyTo.Visible = True
            txtCopyTo.SetFocus()
            bExit = False
         End If
   End Select
   
End

Public Sub Duplicated(sString As String) As Boolean
   '------------------------------------------------
   'Checks if a copy-to in cvwCopy to already exists
   'returns True flag if it is, false if not
   '------------------------------------------------
   
   Dim x As Integer
   
   cvwCopyTo.MoveFirst
   For x = 0 To cvwCopyTo.count - 1
      If cvwCopyTo.Item.text = sString Then
         Return True
      End If
      cvwCopyTo.MoveNext
   Next
   Return False
   
End

Public Sub ColumnView1_DblClick()
   '-----------------------------------------------------------
   'User clicked on the pop-up list of organisations or persons
   '-----------------------------------------------------------
   
   columnview1.MoveCurrent
   copyto_Accept()
   columnview1.Visible = False
Catch
   Return
   
End

Public Sub columnview1_KeyPress()
   
   If key.code = key.return Then
      columnview1_DblClick()
   End If
   
End

Public Sub cvwCopyTo_Refresh()
   
   Dim x As Integer
   Dim Copyto As String
   
   cvwCopyTo.Clear()
   If CopyTos.count > 1 Then
      lblFindRecipient.text = "Copies to"
   Else
      lblFindRecipient.text = "Copy to"
   End If
   
   For Each Copyto In CopyTos
      x = cvwCopyTo.count
      cvwCopyTo.Add(x, 0)
      cvwCopyTo[x][0] = Copyto
   Next
   If copytos.count Then
      CallingForm_EditArea_Notify_DataChange
   Endif
   
End

Public Sub Form_Resize()
   
   With columnview1
      .width = .Parent.Width
      .height = .Parent.Height - HBox_CopyTo.Height
   End With
   
End

Public Sub cvwCopyTo_Menu()
   '----------------------------------------------------
   'user has clicked over the copyto list, show the menu
   '----------------------------------------------------
   
   If cvwCopyTo.count Then
      cvwCopyTo.MoveCurrent()
      Try Debug cvwCopyTo.Item.Key
      mnuCopyTo.Popup()
   End If
   
End

Public Sub mnuCopyTo_Click()
   '-----------------------------------------------------------
   'User has clicked on the menu over the copy to list
   'Only Delete is actioned
   'As the key of teh copyto collection is the collection count
   're-build the collection
   '-----------------------------------------------------------
   
   Select Case Last.tag
      Case "delete"
         Copytos.Remove(cvwCopyTo.Item.key)
         copytos = modUtil.Copy_Collection_Keyed_Sequentially(copytos)
      Case "delete all"
         Copytos.Clear()
   End Select
   cvwCopyTo_Refresh()
Catch
   Return 

End

Public Sub EditAreaTextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub EditAreaTextBox_LostFocus()
   
   Last.BackGround = Color.White
   
End
