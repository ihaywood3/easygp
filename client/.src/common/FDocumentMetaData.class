' Gambas class file

' Copyright (C) 2008-10 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

'------------------------------------------------------------------------------------------
' PURPOSE        : Collect or display the metadata for a document
'                : a document can by anything received eg hl7, letter, email, scan
' CALLED BY      : FArchiveDocuments (i.e scanned documents or imported files on disk)
'                : FClinical to allow staff member to file and 'unfiled' document from
'                  within the patient's notes to save jumping back to inbox
'                : FInbox to file hl7 or documents allocated to a staff member
' BUGS           : Please report bugs
'                : the re-allocation stuff used to work needs checking again
' NOT IMPLEMENTED: Some of the actioning of documents (look at the metadocument tab)
'                : Ian TODO: maybe you could figure out how to detect control keys
'                  to switch between the sender option buttons.
' SPECIAL NOTES  : note the tbClose is only on this form to allow a user in FClinical
'                  to remove the metadata form. Its event is over-ridden by FClinical
'                  and the button will never be visible in Scanning  or Inbox
'------------------------------------------------------------------------------------------
Public Contact_Type As Integer
Private sLastSearchedFor As String           'last text user was looking for
Public iDisplay_As As Integer 
Public sTypeDocument As String               'const.Document_Display_As_Letter * [iDisplay_As]
Public fk_organisation As Integer
Private organisations As Collection 
Public organisation As Collection 'leave public unless write function to get this from inbox see INbox.Sender_ReAllocate()
Private branch As Collection 
Public fk_branch As Integer
Public fk_employee As Integer
Public fk_person As Integer
Private fk_category_organisation As Integer
Private fk_address_organisation As Integer
Private fk_town As Integer
Private fk_town_organisation As Integer
Private fk_town_person As Integer
Private fk_occupation As Integer
'Private fk_category_person As Integer
Private fk_address_person As Integer
Private fk_code As String
Private fk_coding_system As Integer
Public fk_urgency As Integer
Private fk_sending_entity As Integer 
Private bHas_sending_entity_fk_lu_request_type As Boolean  'true if a sending entity has a fk_lu_result_type
Public bExit As Boolean
Private Section As Integer
Private comms As Collection   'If not null these are the patients comms
Private Allpatients As Collection 
Private pk_view As String 'for the patients
Private old_pk As Integer
Private currentpatient As Collection
Private document_types As Collection 
Private document_type As Collection 
Private pk_document As Integer
Private fk_patient As Integer 
Public fk_staff_destination As Integer
Private fk_staff As Integer 'current staff member logged on
Private fk_lu_urgency As Integer
Private fk_lu_archive_site As Integer
Private terms As Collection 
Private fname As String  
Private old_data As Collection 
Private patient As Collection 
Private archive_dir As String 
Private Embedded_in_form_name As String 
Private bDocumentNotLinkedToPatient As Boolean
Private Document As Collection
Private bReAllocating_Patient As Boolean 'if true, user in the indbox is reallocating the existing patient for the document to a new one.
Public bReAllocating_Sender As Boolean 
Private searchtext As String
Private member As Collection 
Private The_Collection As Collection 
Private fk_lu_type As Integer 
Private CurrentRequest As Collection 
Private request_items_text As String 
Private lastpos As Integer
Private sSearchText As String 
Private currentconsult As CConsult
Private cProgressNote_Section As Integer
Private fk_pasthistory As Integer
Private Laterality As Integer 
Private Staff As Collection 
Private Staff_Member As Collection 
Private Documents As Collection 
Private Document_HTML As String
Private Persons As Collection
Public Person As Collection   'do not make this private

Public Sub Form_KeyPress()
   
   Dim CtrlDown As Boolean
   Dim FnDown As Boolean
   'FIXME, i JUST WANT TO DETECT CTL + COMBINATION KEYS
   Select Case Key.Code
      Case key.F12
         Save()
         
   End Select
   
   Try CtrlDown = Key.Control
   
   If Key.Code = Key["R"] And If Key.Control Then
   End If
   
End 

Public Sub Set_Comms(C As Collection)
   
   Comms = C
   
End

Public Sub Document_HTML_Set(s As String)
   '-------------------------------------------------------------
   'Couldn't see any other way to do this, but as Ian is insisting
   'all the document saving code goes into this module, and this
   'is generated by the parent form then this fudge is here
   '---------------------------------------------------------------
   
   Document_HTML = s
   
End

Public Sub Set_Embedded_Form_Name(name As String)
   '-----------------------------------------------------------------
   'Set at instantiaton of the form 'Scanning', 'Clinical' or 'Inbox'
   'indicating roughly which form is using this one
   '-----------------------------------------------------------------   
   
   Embedded_In_Form_Name = name
   
End

Public Sub SetFilename(path As String)
   
   txtFilename.text = path
   
End

Public Sub SetTxtFocus()
   
   If txtRecipient.text <> "" Then
      txtPatient.SetFocus()
   Else
      txtRecipient.SetFocus()
   Endif
   
End

Public Sub Set_Documents_Collection(c As Collection)
   
   Documents = c
   
End

Public Sub Set_CurrentDocument(c As Collection)
   
   document = c
   
End

Public Sub Show_comms()
   '----------------------------------------------------
   'If they exist, show comms for the patient
   'Helps, if user wants to ring them whilst using inbox
   '----------------------------------------------------
   
   Dim comm As Collection  
   
   lblHomePhone.text = ""
   lblmobilephone.text = ""
   For Each comm In comms
      If comm!fk_type = const.CommModalityHome Then
         lblHomePhone.text = comm!value
      Endif
      If comm!fk_type = const.CommModalityMobile Then
         lblMobilePHone.text = comm!value
      Endif
   Next
   
End

Public Function Save() As Boolean
   
   If Embedded_in_form_name = "Scanning" Then
      Return SaveInScanning()
   Else
      Return SaveNotInScanning()
   Endif
   
End

Private Function SaveInScanning() As Boolean
   '------------------------------------------------------------
   'Saves changes to the currently displayed document's metadata
   'Returns true if successful
   'if this save is from an exiting document:
   '   documents = the collection of old documents
   '   pk_document = key to the documents collection
   '   only either new data or changes collected in collection d
   'FIXME: put back in audit trail on document
   'pk_document set here to be read from FArchiveDocuments for auditing
   '------------------------------------------------------------
   
   Dim d As New Collection
   Dim d2 As New Collection
   Dim staff_members As Collection 
   Dim bSuccess As Boolean                'if true the save succeeded
   Dim md5Output As String
   
   If Not Valid_Document() Then Return    'returns False
   
   Inc Application.Busy
   If chkAllStaff.Value = True Then 
      Staff_Members = modContactsDBI.Staff_Get() 'refresh the staff list,could have just employed someone!!!!!
   End If 
   d!fk_staff_filed_document = modDBConnect.currentUser!fk_staff
   d!date_created = Val(txtDocumentDate.text)
   d!fk_patient = fk_patient
   Select Case Contact_Type
      Case const.contacttype_organisation
         d!originator = Organisation!organisation & "." & Organisation!branch
      Case const.contacttype_employee
         d!originator = Organisation!organisation & "." & Organisation!wholename
      Case const.contacttype_person, const.contacttype_patient
         d!originator = Person!firstname & " " & Person!surname
   End Select
   d!fk_sending_entity = modInboxDBI.SendingEntity_GetPK(Get_Document_Type(), Get_Display_Style(), d!originator, fk_branch, fk_employee, fk_person)
   If rbDisplayAsLetter.value = True Then 
      d!tag = d!originator & " - scanned letter"
   Else
      d!tag = d!originator & " - scanned result"
   End If
   d!comment = Trim(txtComment.text)
   d!fk_lu_urgency = fk_urgency
   Shell "md5sum " & txtFilename.text To md5Output   
   d!md5sum = Left(md5Output, InStr(md5Output, " ") - 1)
   d!fk_staff_destination = fk_staff_destination
   d!fk_lu_display_as = Get_Display_Style()
   modDBConnect.BeginTrans()
   
   If modAdminDBI.Config_Get("document_save_to_database", True) Then
      d!data = "BLOB:" & txtFilename.text
      If chkAllStaff.Value = True Then 
         For Each member In Staff_Members
            d!fk_staff_destination = member!fk_staff
            Try modArchiveDocumentsDBI.Save(d) ' BLOB saved the first time, re-uses fk_blob thereafter
            If Error Then 
               Dec Application.Busy
               Return False
            Else
               bSuccess = True
            Endif
            d.Remove("fk_document") 'don't want this key to force new copies
         Next
      Else
         Try pk_document = modArchiveDocumentsDBI.Save(d)
         If Not Error Then bSuccess = True
      Endif
   Else
      If chkAllStaff.Value = True Then
         d!source_file = Document_Filename_Construct_AllStaff(d)
         For Each member In Staff_Members
            d!fk_staff_destination = member!fk_staff
            pk_document = modArchiveDocumentsDBI.Save(d)
            d.Remove("pk_document") 'don't want this key to force new copies
         Next
      Else   
         pk_document = modArchiveDocumentsDBI.Save(d)
         ' chicken-and-egg issue: we need the PK to generate the filename but we need the filename to save the record
         d!source_file = Document_Filename_Construct(d)
         ' now "save twice": triggers a UPDATE carrying the filename
         modArchiveDocumentsDBI.Save(["pk_document": pk_document, "source_file": d!source_file])       
      Endif
      Try Move txtFilename.Text To modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/documents/") &/ d!source_file
      If Not Error Then
         bSuccess = True
      Else
         modUtil.ReportError(Error.Text, Error.Backtrace)
         modDBConnect.RollBack()
         bSuccess = False  
      Endif
   Endif
   Dec Application.Busy
   Return bSuccess
   
End

Private Function SaveNotInScanning() As Boolean
   '------------------------------------------------------------
   'Saves changes to the currently displayed document's metadata
   'documents = the old collection, set by form using this module
   'Documents are never created in this module
   'Returns true if successful
   'if this save is from an exiting document:
   '   documents = the collection of old documents
   '   pk_document = key to the documents collection
   '   only either new data or changes collected in collection d
   'FIXME: put back in audit trail on document
   '------------------------------------------------------------
   
   Dim d As New Collection
   Dim staff_members As Collection 
   Dim bSuccess As Boolean = True               'if true the save succeeded
   
   If Not Valid_Document() Then Return
   Inc Application.Busy
   If chkAllStaff.Value = True Then 
      Staff_Members = modContactsDBI.Staff_Get() 'refresh the staff list,could have just employed someone!!!!!
   End If 
   '-----------------------------------------------------------------------------------------------
   'This document has been previously saved to the backend via the clerical module, or incoming hl7
   'so it is being concluded in some form
   '-----------------------------------------------------------------------------------------------
   d!concluded = True
   d!pk_document = pk_document
   d!fk_lu_display_as = Get_Display_Style()
   d!html = Document_HTML             'not displayed in this form, but by parent see Document_HTML_Set()
   d!tag_user = Trim(txtUserObservationName.text)
   d!date_created = Val(txtDocumentDate.text)
   If get_laterality() > const.LateralityNone Then
      d!tag_user = Replace$(d!tag_user, ";", " (" & UCase(const.LateralityText[get_laterality()]) & ");") 'FIXME, NOT ACCURATE EG FOR xRAY PELVIS + xRAY hIP (RIGHT)
   End If  
   modDBConnect.BeginTrans()
   '-----------------------------------------
   'Is this document being sent to all staff? FIXME THIS SECTION SHOULD BE REMOVED,ONLY NEEDED IN SCANNING
   '-----------------------------------------
   If chkAllStaff.Value = True Then 
      For Each member In Staff_Members
         d!fk_staff_destination = member!fk_staff
         modArchiveDocumentsDBI.Save(d)
         d.Remove("pk_document") 'don't want this key to force new copies
      Next
   Else
      If bHas_sending_entity_fk_lu_request_type = False And rbDisplayAsResult.value = True Then 
         modInboxDBI.SendingEntity_Set_fk_lu_request_type(document_types[cmbDocumentTypes.index]!pk, fk_sending_entity)
      End If   
      Document_SignOff(d)            'see documents.signed_off table > he who signed off this document
      bSuccess = True   
      d!pk_document = modArchiveDocumentsDBI.Save(d, documents[pk_document])
   End If
   Dec Application.Busy
   Return bSuccess
   
End

Public Sub Get_Document_Type() As Integer
   
   Try Return document_types[cmbDocumentTypes.index]!pk
   If Error Then Return 0
   
End

Public Sub Get_laterality() As Integer
   
   Return laterality
   
End

Public Sub Get_fk_Patient() As Integer
   
   Return fk_patient
   
End

Public Sub Get_Display_Style() As Integer
   
   If rbDisplayAsResult.value = True Then Return 2
   Return 1
   
End

Public Sub Set_Consult(cons As Cconsult)
   
   currentconsult = cons

   Try comms = modContactsDBI.person_comms_get(currentconsult!patient!fk_patient)
   
End

Public Function Get_Consult() As CConsult
   'Used by FArchiveDocument to get the currentconsult for a patient  
   
   Return currentconsult
   
End

Public Function Get_fk_Document() As Integer
   'FArchiveDocuments calls this as part of it's auditing

   Return pk_document   
   
End

Public Sub InitGui_Display_As_Result()
   '---------------------------------------------------------------------
   'Sets up the gui interface in assumption the document will be a result
   '---------------------------------------------------------------------
   
   Hbox_Lateralisation.visible = True
   chkCodeDocument.Visible = False
   lblUserTag.text = "User Name"
   txtDocumentDate.ReadOnly = False
   lblDocumentDate.text = "Date Collected"
   HBox_RequestTypes.Enabled = True 
   txtDocumentTag.ReadOnly = True 
   lblDocumentTag.text = "Sender Name"
   iDisplay_As = const.Document_Display_As_Result
   Try Guess_ResultType()
   
End

Public Sub InitGui_Display_As_Letter()
   '---------------------------------------------------------------------
   'Sets up the gui interface in assumption the document will be a letter
   '---------------------------------------------------------------------
   
   If Embedded_in_form_name <> "Scanning" Then
      Hbox_SenderType.Visible = False   
      HBox_SenderFind.Visible = False   
      HBox_SenderDetails.Visible = False   
      Hbox_Lateralisation.visible = False
   End If
   rbLateralityNone.value = True 
   laterality = const.LateralityNone
   chkCodeDocument.Visible = True
   txtDocumentDate.ReadOnly = False    'batched re-sent letters date <> date written.
   lblDocumentDate.text = "Date of Letter"
   lblDocumentTag.text = "Seen By"
   lblUserTag.text = "Letter Summary"
   HBox_RequestTypes.Enabled = False
   cmbDocumentTypes.index = -1
   txtDocumentTag.ReadOnly = False
   iDisplay_As = const.Document_Display_As_Letter
   
End

Public Sub Init(functionality As String)
   '--------------------------------------------------------------------------------------------
   'PURPOSE    : setup 'style' of gui appearance according to  functionality
   '
   '             Allocating Unfiled Document: used for the initial allocation of documents
   '                                          ie anything not sent direct to inbox as hl7
   '                                          could be scanned document, or local file on disk
   '             Filing Allocated Document  : used in Inbox and Fclinical - here the staff member
   '                                          is viewing a document either automatically received
   '                                          as HL7 or allocated to a staff member by one of the
   '                                          clerical staff
   'CALLED BY  : FArchiveDocuments.Init()
   '           : FInbox.Init()
   '           : FClinical.Inbox_showResult()
   '           : FClinical.Letter_Received_Display()
   '
   'NOTES      : This gui-style is 'over-ridden by some internal routines, for example
   '             if user is searching for person/organisation then the input area needs to be
   '             a little different, or if the document is a 'result' or 'letter'
   'RELATED    : InitGui_Display_As_Letter() AND  InitGui_Display_As_Result()
   '----------------------------------------------------------------------------------------------
   
   Select Case functionality
         
      Case "Re_Allocate Sender"
         HBox_Sendingentity.Visible = False   
         Hbox_SenderType.visible = True 
         HBox_SenderFind.Visible = True
         HBox_SenderDetails.Visible = True   
         HBox_UserObservationName.Visible = False  
         HBox_Document_Tag.Visible = False 
         HBox_Comment.Visible = False  
         HBox_Laterality.visible = False
         Hbox_Requested.Visible = False
         HBox_HealthIssue.Visible = False 
         HBox_Filename.Visible = False 
         HBox_DocumentType.Visible = False   
         txtFindSender.Enabled = True
         txtFindSender.ReadOnly = False 
         
      Case "UnAllocated Documents"
         HBox_Sendingentity.Visible = False   
         Hbox_SenderType.visible = True 
         HBox_SenderFind.Visible = True
         HBox_SenderDetails.Visible = True   
         HBox_UserObservationName.Visible = False  
         HBox_Document_Tag.Visible = False 
         HBox_Comment.Visible = False  
         HBox_Laterality.visible = False
         Hbox_Requested.Visible = False
         HBox_HealthIssue.Visible = False 
         HBox_Filename.Visible = False 
         
         txtRecipient.Background = Color.White
         txtRecipient.Enabled = True
         lblMeasure.text = " Document Date "
         HBox_DocumentType.Visible = False  
         modEditAreaHelpers.Resize_labels(VBox_EditArea, lblMeasure)
         lblBirthdate.width = ChkLockStaffMember.width
         txtDocumentTag.ReadOnly = True
         
         EditArea_Clear()      
      Case "Allocated Documents"
         modEditAreaHelpers.EditArea_SetTextBoxes_ReadOnly(VBox_EditArea) 'easier to switch off than on
         Hbox_SenderType.visible = False 
         HBox_SenderFind.Visible = False
         HBox_SenderDetails.Visible = False   
         HBox_UserObservationName.visible = True
         HBox_Filename.Visible = False 
         Hbox_DisplayDocumentAs.Visible = True  
         lblDocumentDate.text = "Date Collected"
         Hbox_Requested.Visible = True
         chkAllStaff.Enabled = False  
         HBox_DocumentType.visible = True  
         txtComment.ReadOnly = True
         lblComment.text = "Notes on Form"
         lblMeasure.text = " Staff Responsible "
         txtUserObservationName.ReadOnly = False  
         HBox_HealthIssue.Visible = True   
         chkAllStaff.Visible = False  
         chkLockStaffMember.Visible = False
         chkLockPatient.Visible = False
         Set_Embedded_Form_Name("Inbox")
         cmbDocumentTypes.index = -1
         lbl200.Visible = True
         lbl201.Visible = True
         lblHomePhone.Visible = True
         lblMobilePhone.visible = True
         If Embedded_in_form_name = "Clinical" Then
            Hbox_Save.Visible = True
         Endif
   End Select
   modEditAreaHelpers.Resize_labels(VBox_EditArea, lblmeasure)     'resize internal labels
   fk_urgency = const.UrgencyLevelRoutine
   
End

Public Sub _new()
   
   document_types = modUtil.LoadCombo(cmbDocumentTypes, modRequestsDBI.RequestTypes_Get(), "type")
   
End

Public Sub EditArea_Clear()
   
   Dim bStaffLocked As Boolean
   Dim bPatientLocked As Boolean
   Dim bSenderLocked As Boolean
   Dim bDisplayAsLocked As Boolean
   Dim iLastDisplayAs As Integer
   Dim iDocumentType As Integer = cmbDocumentTypes.Index 
   Dim bDocumentTypeLocked As Boolean
   Dim AuthorType As Integer = Contact_Type
   
   bReAllocating_Sender = False
   If chkLockDocumentType.value = True Then
      bDocumentTypeLocked = True
   Endif
   If Contact_Type = 0 Then
      Contact_Type = const.contacttype_organisation
   Endif
   If ChkLockStaffMember.value = True Then
      bStaffLocked = True
   End If 
   If chkLockPatient.value = True Then
      bPatientLocked = True
   Endif
   If chkLockSender.value = True Then
      bSenderLocked = True
   Endif
   If chkLockDisplayAs.value = True Then
      iLastDisplayAs = iDisplay_As
      bDisplayAsLocked = True
   End If
   modEditAreaHelpers.EditArea_Clear(VBox_EditARea)
   lblHomePhone.text = ""
   lblMobilePHone.text = ""
   columnview1.Clear
   columnview1.Visible = False 
   listview2.Visible = False  
   bDocumentNotLinkedToPatient = False  
   If Embedded_in_form_name = "Inbox" Then
      If bDocumentTypeLocked = True Then
         cmbDocumentTypes.index = iDocumentType
         chkLockDocumentType.value = True
      Else
         cmbDocumentTypes.index = -1
      End If
   Else
      txtDocumentTag.text = ""
   End If 
   fk_patient = 0
   lblBirthdate.text = ""
   fk_lu_urgency = const.UrgencyLevelRoutine 
   rbUrgencyRoutine.value = True
   rbDisplayAsLetter.value = True
   If Embedded_in_form_name = "Scanning" Then
      Reset_Keys()
   Endif
   
   If bPatientLocked = True Then
      chkLockPatient.value = True
      Patient_Show(currentpatient)
   Else
      fk_patient = 0 
      currentpatient = Null     
   Endif
   
   If bStaffLocked = True Then
      ChkLockStaffMember.value = True
      Staff_Destination_Member_Show(staff_member)
      If txtPatient.text = "" Then 
         txtPatient.SetFocus()
      End If
   Else
      fk_staff_destination = 0  
      staff_member = Null
   Endif
   
   If bSenderLocked = True Then
      chkLockSender.value = True
      Select Case Contact_Type
         Case const.contacttype_organisation, const.contacttype_employee
            Organisation_Display()  'predicated on previous selection having being made ie Organisation collection exists
         Case const.contacttype_patient
         Case const.contacttype_person
            Person_Display()             
      End Select
   Endif
   If bDisplayAsLocked = True Then
      Select Case iLastDisplayAs
         Case const.Document_Display_As_Result
            rbDisplayAsResult.value = True  
         Case const.Document_Display_As_Letter
            rbDisplayAsLetter.Value = True
      End Select
      iDisplay_As = iLastDisplayAs
      chkLockDisplayAs.value = True
   Endif
   If bStaffLocked = True And bPatientLocked = True And bSenderLocked = True Then
      txtDocumentDate.SetFocus()
   Endif
   
End

Public Sub Reallocate()
   
   bReAllocating_Patient = True
   txtPatient.Border = True
   With txtPatient
      .Foreground = Color.Red
      .Font.Bold = True
      .ReadOnly = False  
      .Clear()
      .SetFocus()
   End With
   With lblSearchFor
      .text = "PATIENT ??"   
      .foreground = Color.red  
      .Font.bold = True
   End With  
   lblBirthdate.text = ""
   txtStreet1.text = ""
   txtsuburb.text = ""
   
End

Public Sub Edit(old_documents As Collection, pk_view As Integer)
   
   Dim bits As String[]
   Dim sString As String 
   
   Documents = old_documents
   EditArea_Clear()
   Document_HTML = ""
   CurrentRequest = New Collection 
   bExit = True   
   bReAllocating_Patient = False               
   document = New Collection
   document!pk_document = Documents[pk_view]!pk_document
   pk_document = Documents[pk_view]!pk_document
   document!fk_patient = Documents[pk_view]!fk_patient
   Try fk_patient = Documents[pk_view]!fk_patient 'may not exist
   document!fk_unmatched_patient = Documents[pk_view]!fk_unmatched_patient
   document!fk_staff_filed_document = Documents[pk_view]!fk_staff_filed_document
   document!fk_staff_destination = Documents[pk_view]!fk_staff_destination
   Try fk_staff_destination = Documents[pk_view]!fk_staff_destination
   document!source_file = Documents[pk_view]!source_file
   document!md5sum = Documents[pk_view]!md5sum
   document!imported_time = Documents[pk_view]!imported_time
   document!date_requested = Documents[pk_view]!date_requested
   document!date_created = Documents[pk_view]!date_created
   document!tag = Documents[pk_view]!tag
   document!tag_user = Documents[pk_view]!tag_user 
   document!comment_on_document = Documents[pk_view]!comment_on_document
   document!provider_of_service = Documents[pk_view]!msh_sending_entity
   fk_sending_entity = Documents[pk_view]!fk_sending_entity
   document!patient_access = Documents[pk_view]!patient_access
   document!concluded = Documents[pk_view]!concluded
   document!fk_lu_type = Documents[pk_view]!fk_lu_provider_type
   document!fk_lu_urgency = Documents[pk_view]!fk_lu_urgency 
   document!fk_blob = Documents[pk_view]!fk_blob
   'FIXME IN BACKEND = fk_lu_message_display_style = THE defauilt for sender, not how the final document displays
   ' document!fk_lu_message_display_style = Documents[pk_view]!fk_lu_message_display_style
   document!fk_lu_display_as = Documents[pk_view]!fk_lu_display_as
   document!provider_type = Documents[pk_view]!provider_type
   document!organisation_category = Documents[pk_view]!organisation_category
   document!request_type = Documents[pk_view]!sending_entity_request_type
   If Not IsNull(document!fk_staff_destination)
      With txtRecipient
         .Border = False
         .Foreground = Color.Black
         .Font.Bold = False
         .ReadOnly = True
      End With
      With lblStaffResponsible
         .text = "Staff Responsible"
         .Font.bold = False
         .Foreground = Color.Black
      End With
      txtRecipient.text = Documents[pk_view]!staff_destination_title & " " & Documents[pk_view]!staff_destination_wholename  
      txtRecipient.pos = 0  
   Else
      txtRecipient.Border = True
      With txtRecipient
         .Foreground = Color.Red
         .Font.Bold = True
         .ReadOnly = False  
         .SetFocus()
      End With
      With lblStaffResponsible
         .text = "STAFF ??"   
         .foreground = Color.red  
         .Font.bold = True
      End With
   End If
   If Lower(Documents[pk_view]!patient_title) <> "unknown" Then
     txtPatient.text = Trim(Documents[pk_view]!patient_title & " " & Documents[pk_view]!patient_firstname & " " & Documents[pk_view]!patient_surname)
   Else
      txtPatient.text = Trim(Documents[pk_view]!patient_firstname & " " & Documents[pk_view]!patient_surname)
   Endif
   Try lblBirthdate.text = Format(Documents[pk_view]!patient_birthdate, "dd/mm/yyyy")
   lblBirthdate2.text = lblBirthdate.text 'stupid I know, but acts as an identical spacer
   txtStreet1.text = Trim(Documents[pk_view]!patient_street1 & " " & Documents[pk_view]!patient_street2)
   txtSuburb.text = Documents[pk_view]!patient_town & " " & Documents[pk_view]!patient_postcode
   If fk_patient Then 
      Try Show_comms()
   End If   
   '---------------------------------------------------------------------------------
   'Attempt to match the combo box on basis of the category of organisation or person
   'E.g if it was 'Pathology company' or 'Pathology provider' or 'Pathology'
   'then the document_type 'Pathology' would find a match
   '---------------------------------------------------------------------------------
   cmbDocumentTypes.index = cmbDocumentTypes.Find(Documents[pk_view]!sending_entity_request_type)
   '--------------------------------------------------------------------------------------------
   'Scanned sending entities:
   'These are mostly letters, but sometimes can be requests. Unless Admin has set a default
   'fk_lu_request type in the event that the scanned document is a result, the system can't know
   'so in this case, this flag is set so we can automatically correct this
   '---------------------------------------------------------------------------------------------
   bHas_sending_entity_fk_lu_request_type = False   'default to now knowing how to handle doc if usually a letter but is a request
   If Not IsNull(Documents[pk_view]!sending_entity_fk_lu_request_type) Then
      bHas_sending_entity_fk_lu_request_type = True
   Endif
   txtSender.text = Documents[pk_view]!msh_sending_entity
   txtSender.pos = 0
   Try txtDocumentDate.text = Format(Documents[pk_view]!date_created, "dd/mm/yyyy")
   Try txtDateRequested.text = Format(Documents[pk_view]!date_requested, "dd/mm/yyyy")
   txtDocumentTag.text = document!tag
   txtDocumentTag.pos = 1 'this is often quite long - want the start of word showing
   Try txtUserObservationName.text = document!tag_user
   txtUserObservationName.pos = 0
   txtComment.text = document!comment_on_document
   txtFilename.text = Document!source_file
   
   Select Case document!fk_lu_urgency 
      Case const.UrgencyLevelRoutine
         rbUrgencyRoutine.value = True
      Case const.UrgencyLevelModerate
         rbUrgencyModerate.value = True
      Case const.UrgencyLevelUrgent
         rbUrgencyUrgent.value = True
   End Select
   If Documents[pk_view]!fk_lu_display_as = const.Document_Display_As_Letter Then  'allow editing of tag if it is a letter
      
      rbDisplayAsLetter.value = True
      If txtDocumentTag.text <> "" Then
         txtDocumentTag.text = Replace(txtDocumentTag.text, "result", "letter")
         txtDocumentTag.text = Replace(txtDocumentTag.text, "RESULT", "LETTER")
      Endif
      InitGui_Display_As_Letter()
   Else
      rbDisplayAsResult.value = True
      If txtDocumentTag.text <> "" Then
         txtDocumentTag.text = Replace(txtDocumentTag.text, "letter", "result")
         txtDocumentTag.text = Replace(txtDocumentTag.text, "LETTER", "RESULT")
      Endif
      InitGui_Display_As_Result()
   End If
   If Not IsNull(document!fk_patient)
      With txtPatient
         .Border = False
         .Foreground = Color.Black
         .Font.Bold = False
         .ReadOnly = True
      End With
      With lblSearchFor
         .text = "Patient"
         .Font.bold = False
         .Foreground = Color.Black
      End With
      
   Else
      txtPatient.Border = True
      With txtPatient
         .Foreground = Color.Red
         .Font.Bold = True
         .ReadOnly = False  
         .SetFocus()
      End With
      With lblSearchFor
         .text = "PATIENT ??"   
         .foreground = Color.red  
         .Font.bold = True
      End With
   End If
   
   ' If Documents[pk_view]!fk_patient Then mnuHealthIssues_Show()
   chkAllStaff.Value = False
   bExit = False  
   
End

Public Sub Timer1_Timer()
   
   Patient_Find()
   
End

Public Sub Patient_Clear()
   
   txtPatient.text = ""
   lblBirthdate.text = ""
   txtStreet1.text = ""
   txtsuburb.text = ""
   With columnview1
      .Clear   
      .Visible = False
   End With
   
End  

Public Sub Patient_Find()
   
   Dim iaddress As Collection
   Dim iLastPatient_pk As Integer
   Dim iAddressCount As Integer
   Dim x As Integer 
   
   Timer1.Stop()
   If Trim(txtPatient.text) = "" Then Return 
   Allpatients = modContactsDBI.patients_get_firstname_surname(txtPatient.text)
   Allpatients.Remove("sql_in_english")       'not used in this context
   
   With columnview1
      .Clear
      
      .Columns.count = 6
   End With
   
   iLastPatient_pk = -1
   For Each patient In allpatients   
      If patient!fk_patient <> iLastPatient_pk Then
         iLastPatient_pk = patient!fk_patient
         iAddressCount = 0
         columnview1.Add(patient!pk_view, 0)    
         columnview1[patient!pk_view][0] = patient!surname  
         columnview1[patient!pk_view][1] = patient!firstname
         columnview1[patient!pk_view][2] = patient!sex
         
         columnview1[patient!pk_view][3] = Trim(patient!street1 & " " & patient!street2)
         columnview1[patient!pk_view][4] = Format(patient!birthdate, "dd/mm/yyyy")
         columnview1[patient!pk_view][5] = patient!town & " " & patient!postcode
      Else
         
         columnview1.Add(patient!pk_view, 0)
         columnview1[patient!pk_view][0] = "" 
         columnview1[patient!pk_view][1] = ""
         columnview1[patient!pk_view][2] = ""
         columnview1[patient!pk_view][3] = Trim(patient!street1 & " " & patient!street2)
         columnview1[patient!pk_view][4] = Format(patient!birthdate, "dd/mm/yyyy")
         columnview1[patient!pk_view][5] = patient!town & " " & patient!postcode
      End If
   Next   
   If allpatients.count Then
      Columnview1.Visible = True 
      columnview1.Visible = True
      Columnview1.Raise
      columnview1.tag = txtPatient
      Timer1.Stop()
   Else
      Columnview1.Visible = False  
   End If
   
End

Public Sub Patient_Select()
   
   columnview1.MoveCurrent()
   pk_view = columnview1.Item.Key
   currentpatient = Allpatients[pk_view]
   fk_patient = currentpatient!fk_patient
   Patient_Show(currentPatient)
   columnview1.Visible = False 
   If lblContactDetails.text = "" Then 
      txtFindSender.SetFocus()
   Else
      txtDocumentDate.SetFocus()
   End If   
   
End

Public Sub Patient_Show(currentPatient As Collection)
   
   Try txtPatient.text = currentPatient!firstname & " " & currentPatient!surname
   Try lblBirthdate.text = Format(currentPatient!birthdate, "dd/mm/yyyy")
   lblBirthdate2.text = lblBirthdate.text 'stupid I know, but acts as an identical spacer
   txtStreet1.text = Trim(currentPatient!street1 & currentpatient!street2)
   txtSuburb.text = currentPatient!town & " " & currentPatient!postcode
   fk_patient = currentPatient!fk_patient
   
   columnview1.Visible = False 
   With txtPatient
      .Foreground = Color.Black
      .Border = False  
      .Font.Bold = False  
   End With
   With lblSearchFor
      .text = "Patient"
      .Font.bold = False
      .Foreground = Color.Black
   End With 
   
   If Embedded_in_form_name = "Inbox" Then 
      
      FInbox.reload_patient(bReAllocating_Patient)
   Else
      'is the scanning module, has no cConsult
      currentconsult = New CConsult(currentPatient)                                   'Each patient has a new consult 
      currentconsult.Set(const.ConsultType_AuditNote, "scanned document imported")    'to enable an audit-trail for the scanned document import Fixme check this comment is true
      
   End If  
   Select Case Contact_Type
      Case const.contacttype_organisation
         '         txtOrganisation.SetFocus()
      Case const.contacttype_employee
         
      Case const.contacttype_patient, const.contacttype_person
         '     txtPersonSurname.SetFocus()
   End Select  
   
End

Public Sub Staff_Find()
   
   Dim iaddress As Collection
   Dim iLastStaff_Member_pk As Integer
   Dim iAddressCount As Integer
   Dim x As Integer 
   
   Timer1.Stop()
   If Trim(txtRecipient.text) = "" Then Return 
   
   With columnview1
      .Clear()
      .Columns.count = 3
   End With 
   staff = modContactsDBI.Staff_Get(Trim(txtRecipient.text))
   iLastStaff_Member_pk = -1
   For Each Staff_Member In staff
      columnview1.Add(Staff_Member!pk_view, 0)    
      columnview1[Staff_Member!pk_view][0] = Staff_Member!title & " " & Staff_Member!wholename
      columnview1[Staff_Member!pk_view][1] = Staff_Member!occupation
      columnview1[Staff_Member!pk_view][2] = Staff_Member!branch
   Next   
   If Staff.count Then
      Columnview1.Visible = True 
      columnview1.Visible = True
      Columnview1.Raise
      columnview1.tag = txtRecipient
   Else
      columnview1.Visible = False   
   End If
   
End

Public Sub Staff_Select()
   
   columnview1.MoveCurrent()
   pk_view = columnview1.Item.Key
   Staff_Member = staff[pk_view]
   Staff_Destination_Member_Show(staff_member)
   
   columnview1.Visible = False 
   
End

Public Sub Staff_Destination_Member_Show(staff_member As Collection)
   
   Try txtRecipient.text = staff_member!title & " " & staff_member!wholename
   fk_staff_destination = staff_member!fk_staff
   '-----------------------------------------------------------------------
   'If in the inbox and staff re-allocated, may not belong now to this user
   '-----------------------------------------------------------------------
   If Embedded_in_form_name = "Inbox" Then 
      FInbox.ReAllocate_Staff_Member(fk_staff_destination)
      
   Else
      txtPatient.SetFocus()
   End If   
   
End

Public Sub EditArea_TextBox_KeyRelease()
   
   Select Case Last.tag
         
      Case "find sender"
         Sender_Find()
      Case "staff member"
         Staff_Find()
      Case "user name"
         
         If iDisplay_As = const.Document_Display_As_Result Then 
            RequestItem_Selection("get", Last, "textbox")
         Else
            
            Terms_Get() 
         End If
      Case "patient"
         Timer1.Start() 'find patients triggered when timer > timer.delay 
         
   End Select
   
End

Public Sub RequestItem_Selection(action As String, txtbox As TextBox, Optional calling_control As String)
   
   Dim bDuplicate As Boolean 'if True the request item is duplicated
   Dim sMsg As String
   
   Select Case action
         
      Case "get"
         
         columnview1.Visible = False   
         If InStr(txtbox.text, ";") Then
            
            sSearchText = Trim(Right(txtbox.text, Len(txtbox.text) - lastpos))
         Else
            
            sSearchText = Trim(txtbox.Text)
         End If
         If Trim(sSearchText) = "" Then 
            Return 
         End If
         
         If cmbDocumentTypes.index = -1 Then
            
            sMsg = "Before searching for a request name, you must select the type of request you wish to find.\n\n"
            "For example, if the document you are about to file was a bone density, you would select "
            "the category 'Radiology' from the combo box first, then type in a few letters of what  you want to find.\n\n"
            "If the document was an echocardiograph, you would select 'Cardiolovascular' from the combobox etc."
            
            Message.Title = "Searching for Request Names"
            Message.Info(sMsg)
            Return 
         Endif
         The_Collection = modRequestsDBI.requests_get_items(sSearchText, document_types[cmbDocumentTypes.index]!pk)
         
         With columnview1
            .Clear()
            If fk_lu_type Then
               .Columns.Count = 1
               .Columns[0].width = 400
            Else
               .Columns.Count = 2
               .Columns[0].width = 100
               .Columns[1].width = 400
            End If
         End With
         If The_Collection.count Then
            For Each member In The_Collection
               columnview1.Add(member!pk_view, 0)
               If fk_lu_type Then
                  columnview1[member!pk_view][0] = member!item
               Else
                  columnview1[member!pk_view][0] = member!type
                  columnview1[member!pk_view][1] = member!item
               End If
            Next
            columnview1.Visible = True
            columnview1.Raise
            columnview1.tag = txtbox
         End If   
         
      Case "accept"
         
         columnview1.MoveCurrent()
         CurrentRequest = The_Collection[columnview1.Item.key]
         If InStr(CurrentRequest!item, "(RIGHT)") Then
            rblateralityright.value = True
            CurrentRequest!item = Trim(Replace(CurrentRequest!item, "(RIGHT)", ""))
            laterality = const.LateralityRight
         End If
         If InStr(CurrentRequest!item, "(LEFT)") Then
            rblateralityLeft.value = True
            CurrentRequest!item = Trim(Replace(CurrentRequest!item, "(LEFT)", ""))
            laterality = const.LateralityLeft
         End If
         If InStr(CurrentRequest!item, "(BOTH)") Then
            CurrentRequest!item = Trim(Replace(CurrentRequest!item, "(BOTH)", ""))
            rblateralityBoth.value = True
            laterality = const.LateralityBoth
         End If
         request_items_text = request_items_text & CurrentRequest!item & ";"
         bExit = True
         txtbox.text = request_items_text
         txtbox.pos = Len(request_items_text)
         lastpos = Len(request_items_text)
         columnview1.Visible = False
         txtbox.SetFocus()
         bExit = False  
   End Select
   
End

Public Sub EditArea_TextBox_KeyPress()
  If Not EditArea_Textbox_ExcludeKeys(key.code, Last.tag) Then 
     ' Stop Event
      Return
   End If  
   Select Case Key.Code
      Case key.Down
         If columnview1.Visible Then
            columnview1.MoveFirst()
            columnview1.Item.Selected = True
            columnview1.SetFocus()
         End If
         If VBox_ColumnView.Visible Then
            columnview2.MoveFirst()
            columnview2.Item.Selected = True
            columnview2.SetFocus()
         End If
         If listview2.Visible Then
            listview2.MoveFirst()
            listview2.Item.Selected = True
            listview2.SetFocus()
         Endif
   End Select
  
   
End

Public Sub EditArea_TextBox_Change()
   
   If bexit Then Return
   Select Case Last.tag
         
      Case "find sender"
         If Len(Trim(Last.text)) = 0 Then 
            lblContactDetails.text = ""
         End If   
      Case "document date"
         If IsDate(Last.text) And lblInvalidDate.text <> "" Then
            lblInvalidDate.text = ""
         Endif
      Case "patient"
         If Trim(Last.text) = "" Then
            fk_patient = 0
            txtStreet1.text = ""
            txtSuburb.text = ""
            lblBirthdate.text = ""
            
            columnview1.Visible = False   
         Endif
      Case "user name"
         If Trim(Last.text) = "" Then
            sSearchText = ""
            lastpos = 0
            request_items_text = ""
         End If
         If Embedded_In_Form_Name = "FInbox" Then 
            FInbox.Document_Filed_As_Update(Last.text)
         End If
   End Select
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Dim hctrl As Control
   Dim tb As Textbox
   
   If bexit Then Return 
   If chkLockPatient.value = True Then Return 
   Last.BackGround = Color.rgb(95, 255, 175)  
   Select Case Last.tag
         
      Case "find sender"
         With listview2
            .top = Last.parent.parent.top + Last.height
            .left = Last.left + VBox_EditArea.Padding
            .height = 150
            .width = Last.width
            .raise
            .Tooltip = ""
         End With
      Case "user name", "patient", "staff member"
         With Columnview1
            .top = Last.parent.parent.top + Last.height
            .height = 120
            For Each hctrl In Last.parent.children
               If hctrl Is TextBox Then
                  .left = hctrl.Left + Last.parent.parent.padding
                  
                  .width = lblContactDetails.width 'otherwise not wide enough if use Last.width
                  Break
               End If
            Next
            .Raise
         End With
         With VBox_ColumnView
            .top = Last.parent.parent.top + Last.parent.height
            .left = Last.Left
            .width = lblContactDetails.width
         End With
   End Select
   If Last.tag = "user name" Then
      If Len(Trim(Last.text)) Then
         If Right(Trim(Last.text)) <> ";" Then
            Last.text &= ";"
         End If 
         Last.pos = Len(Last.text)
      End If
   End If
   If Last.tag = "patient" Then
      columnview1.Columns.count = 6   
      columnview1.width = lblContactDetails.width
   Else
      columnview1.Columns.count = 1
   End If
   
End

Public Sub ColumnView1_KeyPress()
   '---------------------------------------------------------
   'Either accept the user selection, or if they have hit the 
   'up arrow, move back into the textbox
   '----------------------------------------------------------   
   
   Select Case key.Code
      Case key.Return
         ColumnView1_DblClick()
      Case key.Up
         '  If Last.MoveFirst() Then
         ' Last.tag.pos = Len(Last.tag.text)
         ' Last.tag.SetFocus()
   End Select
   
End

Public Sub ColumnView1_DblClick()
   
   Select Case Last.tag.tag
      Case "user name"
         RequestItem_Selection("accept", txtUserObservationName)
         If Embedded_In_Form_Name = "FInbox" Then 
            FInbox.Document_Filed_As_Update(txtUserObservationName.text)
         End If   
      Case "patient"
         Patient_Select()
      Case "staff member"
         Staff_Select()
   End Select
   Columnview1.Visible = False 
   
End

Public Sub mnuHealthIssues_Click()
   
   Select Case Last.tag
      Case "general notes", "remove link"
         txtHealthIssue.text = "General Notes"
         cProgressNote_Section = const.cSection_GeneralNotes
         fk_pasthistory = 0
      Case Else
         txtHealthIssue.text = currentconsult!past_history[Last.tag]!description
         fk_pasthistory = Last.tag
         cProgressNote_Section = const.cSection_Referrals
   End Select
   
End

Public Sub Terms_Get()
   
   Dim term As Collection 
   Dim key As String
   
   If Trim(txtUserObservationName.text) = "" Or chkCodeDocument.value = False Then
      fk_code = 0
      fk_coding_system = 0
      VBox_ColumnView.Visible = False   
      Return
   End If
   Terms = modCodingDBI.Get_Terms(Trim(txtUserObservationName.text), chkLimit.value, chkicd10.value, SpinBoxTermLimits.value)
   With columnview2
      .Clear()
      .Columns.count = 2
      .Columns[0].Width = txtUserObservationName.width - 100
      .Columns[1].width = 100
   End With
   If Terms.count Then
      For Each term In Terms
         key = term!code
         columnview2.Add(key, 0)
         columnview2[key][0] = term!term
         columnview2[key][1] = term!system
      Next 
      lblTermCount.text = Str$(terms.count) & " terms retreived"
      columnview2.tag = txtUserObservationName
      columnview2.Raise
      columnview2.Visible = True
      VBox_ColumnView.Visible = True 
   Else 
      VBox_ColumnView.Visible = False 'empty recordset
   End If  
   
End

Public Sub Columnview2_KeyPress()
   
   If key.code = key.return Then Columnview2_DblClick()
   
End

Public Sub Coded_Term_Select()
   
   columnview2.MoveCurrent()   'match internal cursor to visible row
   fk_code = Terms[columnview2.Item.key]!code
   fk_coding_system = Terms[columnview2.Item.key]!fk_coding_system
   
   txtUserObservationName.text = Terms[columnview2.Item.key]!term & " (" & Terms[columnview2.Item.key]!code & ")"
   
End

Public Sub Columnview2_DblClick()
   
   Coded_Term_Select() 
   Columnview2.Visible = False 
   VBox_ColumnView.Visible = False   
   
End

Public Sub rblaterality_Click()
   
   Try laterality = Last.tag 'only works for 1-2-3 (left/right/both)
   If Error Then
      laterality = const.LateralityNone
   End If 
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Dim hasTExt As Boolean
   Dim bDateInvalid As Boolean
   
   Last.background = Color.White
   Last.pos = 0
   Select Case Last.tag
      Case "document date"
         If Last.text <> "" Then
            hasText = True
            If Not modEditAreaHelpers.Valid_Date(Last) Then
               If Not hastext Then Return
               bDateInvalid = True 
               bExit = True
               lblInvalidDate.text = " **INVALID DATE**"
               Last.SetFocus()
               bExit = False   
            End If
         Else
            lblInvalidDate.text = ""
         End If       
   End Select
   
End

Public Sub listview2_KeyPress()
   
   If key.code = key.return Then
      Listview2_DblClick()
   End If
   
End

Public Sub listview2_DblClick()
   
   Listview2.MoveCurrent
   
   Select Case Contact_Type
      Case const.contacttype_organisation, const.contacttype_employee 
         Organisation_Select()
         If Embedded_in_form_name = "Inbox" Then 
            FInbox.ReAllocate_Sender()
            
         Else
            If fk_employee <> 0 Then
               txtDocumentTag.text = Organisation!wholename
            Else
               txtDocumentTag.text = Organisation!organisation
            Endif
            If rbDisplayAsResult.value = True Then
               txtDocumentTag.text &= "- result"
            Else
               txtDocumentTag.text &= " - letter"
            Endif
            txtDocumentDate.SetFocus()
         End If
      Case const.contacttype_patient, const.contacttype_person
         Person_Select()
         If Embedded_in_form_name = "Inbox" Then 
            FInbox.ReAllocate_Sender()
         Else
            HBox_Document_Tag.Visible = True   'fixme from here down to 
            If rbDisplayAsResult.value = True Then
               txtDocumentTag.text &= "- result"
            Else
               txtDocumentTag.text &= " - letter"
            Endif                               'here should not be in here
            bExit = False  
            txtDocumentDate.SetFocus()          'should not be in here.
         End If
   End Select
   listview2.Visible = False 
   
End

Public Sub Persons_Get_List()
   '-----------------------------------------------------------------
   'Pops up a list or either patients or persons who are not patients
   '-----------------------------------------------------------------  
   
   Persons = modMetaData.Persons_Fill_Popup_List(listview2, txtfindSender, Contact_Type)
   
End

Public Sub Person_Select()
   '--------------------------------------------------------
   'User has clicked on a list of either patients or persons
   'display the details
   '--------------------------------------------------------
   
   Person = Persons[listview2.Item.key]
   Person_Display()
   
End

Public Sub Person_Display()
   
   Dim sMsg As String
   
   Try fk_occupation = Person!fk_occupation
   fk_person = Person!fk_person
   ' If Contact_Type = const.contacttype_person Then 
   '    Try fk_category_person = Person!fk_category
   '    If Error Then 
   '       sMsg = "This person is missing a category in contacts.\n\nPerhaps you should be selecting employee, and searching again. "
   '       sMsg &= "If not, then please go back to the contacts database and allocate a category to this person."
   '       Message.info(sMsg)
   '    Endif
   ' Endif
   
   Try fk_address_person = Person!fk_address
   Try fk_town_person = Person!fk_town
   lblContactDetails.text = Person!title & " " & " " & Person!firstname & " " & Person!surname  
   txtDocumentTag.text = lblContactDetails.text  'fixme should not be in here
   
   If Not IsNull(Person!sex) Then
      lblContactDetails.text &= " (" & Person!sex & ")"
   Endif
   lblContactDetails.text &= "\n"
   lblContactDetails.text &= Trim(Person!street1 & " " & Person!street2) & "\n"
   lblContactDetails.text &= Person!town & " " & Person!state & " " & Person!postcode & "\n"
   lblContactDetails.text &= "Occupation: " & Person!occupation & "\n"
   ' If Not IsNull(Person!category) Then
   '    lblContactDetails.text &= "Category: " & Person!category
   ' Endif
   
End

Public Sub Reset_Keys()
   
   fk_organisation = 0
   fk_category_organisation = 0
   fk_town_organisation = 0
   fk_address_organisation = 0
   fk_person = 0
   fk_address_person = 0
   fk_branch = 0
   fk_employee = 0
   
End

Public Sub Type_Sender_Click()
   '------------------------------------------------------------------------------
   'User has clicked on the type of sender
   'either organisation, an employee of an organisation, a person or a patient
   'Use the contents of txtFindSender (if any) to poup a list of possible choices
   '------------------------------------------------------------------------------
   
   Select Case Last.tag
      Case "organisation"
         Contact_Type = const.contacttype_organisation
      Case "patient"
         Contact_Type = const.contacttype_patient
      Case "person"
         Contact_Type = const.contacttype_person
      Case "employee"
         Contact_Type = const.contacttype_employee
   End Select
   txtfindSender.pos = Len(Trim(txtFindSender.text))
   txtfindSender.SetFocus()
   lblContactDetails.text = ""
   Sender_Find()
   
End

Public Sub Employees_Get_List()
   '--------------------------------------------------------------
   'Get list of employees in their organisations
   'Note the collection is somewhat of a misnomer as it can contain
   'just organisations or employees as well
   '--------------------------------------------------------------- 
   
   Organisations = modMetaData.Employee_Fill_Popup_List(listview2, txtfindSender)
   
End

Public Sub Organisations_Get_List()
   '-------------------------
   'Get list of organisations
   '-------------------------  
   
   Organisations = modMetaData.Organisations_Fill_Popup_List(listview2, txtFindSender)
   
End

Public Sub Organisation_Select()
   '------------------------------------------------------------------------------
   'User selects either an organisation or a organisation employee from popup list
   '------------------------------------------------------------------------------   
   
   Organisation = Organisations[listview2.item.key]
   Organisation_Display()
   
End

Public Sub Organisation_Display()
   
   fk_organisation = Organisation!fk_organisation
   fk_employee = Organisation!fk_employee
   fk_branch = Organisation!fk_branch
   lblContactDetails.text = ""
   If fk_employee <> 0 Then
      lblContactDetails.text = Organisation!wholename & "\n"
   Endif
   lblContactDetails.text &= Organisation!organisation & "\n"
   lblContactDetails.text &= Organisation!branch & "\n"
   lblContactDetails.text &= Trim(Organisation!street1 & " " & Organisation!street1) & "\n"
   lblContactDetails.text &= Organisation!town & " " & Organisation!state & " " & Organisation!postcode
   fk_category_organisation = Organisation!fk_category
   
End

Public Sub rbDegreeUrgency_Click()
   
   fk_urgency = Last.tag
   
End

Public Function EditArea_TextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Dim bKeyValid As Boolean   
   
   Select Case tag
      Case "document date"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_CheckBoxes_Click()
   
   Select Case Last.tag
      Case "lock name"
         
      Case "all staff"
         
      Case "lock patient"   
         If Last.value = False Then Patient_Clear()
      Case "lock sender"
         columnview1.Visible = False 'could be clicked whilst this is visible
         If Last.value = False Then
            Reset_Keys() 
         Endif
   End Select
   
End

Public Sub Guess_ResultType()
   '--------------------------------------------------------------------------------------
   'Attempts to guess the type of result it will be, given the category of provider/person
   '--------------------------------------------------------------------------------------
   
   Dim sSTring As String 
   Dim category As String
   
   Try cmbDocumentTypes.index = cmbDocumentTypes.Find(document!request_type)
   If Error Then cmbDocumentTypes.index = -1 'the document may have no designated provider type
   
End

Public Sub rbDisplayAs_Click()
   
   If Bexit Then Return 
   iDisplay_As = Last.tag
   sTypeDocument = const.sDocumentType[iDisplay_As]
   If Last.tag = const.Document_Display_As_Result Then
      InitGui_Display_As_Result()
      If Embedded_in_form_name = "Inbox" Then HBox_DocumentType.Visible = True 
      If txtDocumentTag.text <> "" Then
         txtDocumentTag.text = Replace(txtDocumentTag.text, "letter", "result")
         txtDocumentTag.text = Replace(txtDocumentTag.text, "LETTER", "RESULT")
      Endif
      If txtUserObservationName.text <> "" Then
         txtUserObservationName.text = Replace(txtUserObservationName.text, "letter", "result")
         txtUserObservationName.text = Replace(txtUserObservationName.text, "LETTER", "RESULT")
      Endif
      'Attempt to match the combo
      If Embedded_in_form_name = "Inbox" Then
         Guess_ResultType()
         txtUserObservationName.SetFocus()
      End If   
   Else
      InitGui_Display_As_Letter()
      If txtDocumentTag.text <> "" Then
         txtDocumentTag.text = Replace(txtDocumentTag.text, "result", "letter")
         txtDocumentTag.text = Replace(txtDocumentTag.text, "RESULT", "LETTER")
      Endif
      If txtUserObservationName.text <> "" Then
         txtUserObservationName.text = Replace(txtUserObservationName.text, "result", "letter")
         txtUserObservationName.text = Replace(txtUserObservationName.text, "RESULT", "LETTER")
      End If
   Endif
   
End

Public Sub Sender_Find()
   
   Reset_Keys() 
   Select Case Contact_Type
      Case const.contacttype_organisation
         Organisations_Get_List()
      Case const.contacttype_patient, const.contacttype_person
         Persons_Get_List()
      Case const.contacttype_employee
         Employees_Get_List()
   End Select
   
End

Public Sub Document_SignOff(Doc As Collection)
   '--------------------------------------------------------------------
   'Record who signed off the document, when and with comment (optional)
   'FIXME NEEDS NOW A FDocumentMetadataDBI
   '--------------------------------------------------------------------
   
   Dim signed_off As New Collection 
   
   signed_off!fk_staff = modDBConnect.currentUser!fk_staff
   signed_off!fk_document = Doc!pk_document   
   signed_off!date = Now()
   signed_off!pk = modInboxDBI.Document_SignOff(signed_off)
   
End

Public Function Valid_Document() As Boolean
   '-----------------------------------------------
   'Check document has adequate information to file
   '-----------------------------------------------
   
   Dim sMsg As String 
   
   If txtFilename.text = "" Then
      sMsg = "Please select a document to file"
      Message.Info(sMsg)
      Return False   
   Endif
   If fk_patient = 0 Then 
      If Message.Question("No patient has been selected.\nDo you want to continue?", "Yes", "No") = 2 Then
         txtPatient.SetFocus()
         Return 
      End If
   Endif
   If fk_staff_destination = 0 And chkAllStaff.value = False Then
      txtRecipient.SetFocus()
      Return False   
   Endif
   If Embedded_in_form_name = "Scanning" Then 
      If fk_organisation = 0 Then
         If fk_person = 0 Then
            sMsg = "Each scanned or faxed document will have been sent by someone, be they a person, organisation, or employee of an organisation "
            "or perhaps even a patient.\n\nYou must allocate documents before filing."
            Message.Info(sMsg)
            txtfindSender.SetFocus()
            Return False
         Endif
      Endif
   End If   
   
   If Not IsDate(txtDocumentDate.text) Then 
      sMsg = "Please enter the date the document was written.\n\n"
      "This should be in the format dd/mm/yyyy, e.g 01/10/2010.\n\n"
      "If you are filing this from the Inbox, you will have to return the document to clerical for re-allocation"
      Message.Info(sMsg)
      txtDocumentDate.SetFocus()
      Return False
   Endif  
   If cmbDocumentTypes.index = - 1 And rbDisplayAsResult.value = True And Embedded_in_form_name <> "Scanning" Then
      
      sMsg = "When the clerical staff allocate this document, they considered it to be a 'Result.\n\n"
      "Please select the type of result you wish to file from the drop down list "
      "and then allocate a request name before proceeeding.\n\n"
      "If a mistake has been made and this is meant to be a letter you can "
      "click on the letter option button to change it's designation to that of a letter."
      Message.Title = "Document Filing"
      Message.Info(sMsg)
      cmbDocumentTypes.SetFocus()
      Return False
   Endif
   Return True
   
End

Public Function Document_Filename_Construct(document As Collection) As String 
   
   Dim newfilename As String
   
   If Trim(txtPatient.text) <> "" Then 
      newfilename &= Filename_Protect(Trim(txtPatient.text)) & "." & modutil.DateString_Encode(lblbirthdate.text) & "." & Str(Document!fk_patient) & "."
   End If   
   newfilename &= Filename_Protect(Document!originator) & "." & Str$(document!pk_document) & "."
   newfilename &= File.Ext(txtFilename.text)
   Return Lower(newfilename) 'ensure all in lower case
   
End

Private Function Filename_Protect(fname As String) As String
  
  Dim s As String = ""
  Dim i As Integer
  Dim a As Integer
  
  For i = 0 To Len(fname)
    a = String.Code(fname, i)
    If a = 32 Then s &= "_"
    If a = 38 Then s &= "_and_"
    If a = 45 Then s &= "-"
    If a = 95 Then s &= "_"
    If a = 46 Then s &= "_"
    If a >= 48 And a <= 57 Then s &= Chr$(a) ' numbers
    If a >= 65 And a <= 90 Then s &= Chr$(a + 32) ' letters: to lowercase
    If a >= 97 And a <= 122 Then s &= Chr$(a) ' letters
  Next
  
  Return s
  
End


Private Function Document_Filename_Construct_AllStaff(document As Collection) As String
   
   Dim newfilename As String
   
   newfilename = "memo.allstaff." & Filename_Protect(Trim(txtDocumentTag.text)) & "." & Format$(Now, "yyyymmddhhnnss")
   newfilename &= Filename_Protect(document!originator) & "."
   newfilename &= File.Ext(txtFilename.text)
   Return Lower(newfilename) 'ensure all in lower case
   
End


