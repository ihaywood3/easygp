' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'------------------------------------------------------------------------------------------
' PURPOSE        : Collect or display the metadata for a document
'                : a document can by anything received eg hl7, letter, email, scan
' CALLED BY      : FArchiveDocuments (i.e scanned documents or imported files on disk)
'                : FClinical to allow staff member to file and 'unfiled' document from
'                  within the patient's notes to save jumping back to inbox
'                : FInbox to file hl7 or documents allocated to a staff member
' BUGS           : Please report bugs
'                : Incorrect phone numbers being set for the patients FIXME
'                : the re-allocation stuff used to work needs checking again
' NOT IMPLEMENTED: Some of the actioning of documents (look at the metadocument tab)
'                : Ian TODO: maybe you could figure out how to detect control keys
'                  to switch between the sender option buttons.
' SPECIAL NOTES  : note the tbClose is only on this form to allow a user in FClinical
'                  to remove the metadata form. Its event is over-ridden by FClinical
'                  and the button will never be visible in Scanning  or Inbox
'------------------------------------------------------------------------------------------
Private Document_Display_As_Types As Collection            'eg as result, letter, plan, certificate etc
Private sSearchText As String
Private ReferenceHboxForTopColumnview As Hbox               'used if form resizes to move columnview
Public StaffTypes As Collection              'eg 'medical', 'nursing'
Public Contact_Type As Integer
Public iDisplay_As As Integer
Public sTypeDocument As String               'const.Document_Display_As_Letter * [iDisplay_As]
Private organisations As Collection
Public organisation As Collection 'leave public unless write function to get this from inbox see INbox.Sender_ReAllocate()
Public fk_organisation As Variant
Public fk_branch As Variant
Public fk_employee As Variant
Public fk_person As Variant
Private fk_category_organisation As Variant
Private fk_address_organisation As Variant
Private fk_town_organisation As Variant
Private fk_town_person As Variant
Private fk_occupation As Variant
Private fk_address_person As Variant
Private fk_code As Variant
Private fk_coding_system As Variant
Public fk_urgency As Variant
Private fk_patient As Variant
Public fk_staff_destination As Variant
Private fk_lu_urgency As Variant
Private fk_sending_entity As Variant
Private fk_lu_type As Variant
Private fk_pasthistory As Variant
Private bHas_sending_entity_fk_lu_request_type As Boolean  'true if a sending entity has a fk_lu_result_type
Public bExit As Boolean
Private comms As Collection   'If not null these are the patients comms
Private Allpatients As Collection
Private Request_Types As Collection
Private pk_document As Variant
Private terms As Collection
Private patient As Collection
Private Embedded_in_form_name As String
Private bDocumentNotLinkedToPatient As Boolean
Private D As Collection
Private bReAllocating_Patient As Boolean 'if true, user in the indbox is reallocating the existing patient for the document to a new one.
Public bReAllocating_Sender As Boolean
Private member As Collection
Private The_Collection As Collection
Private CurrentRequest As Collection
Private request_items_text As String
Private lastpos As Integer
Private currentconsult As CConsult
Private cProgressNote_Section As Integer
Private Laterality As Variant  'fixme ?should be fk_laterality??
Private Staff As Collection
Private Staff_Member As Collection
Private Documents As Collection
Private Document_HTML As String
Private Persons As Collection
Public Person As Collection   'do not make this private
Private iTimerCount As Integer
Private PatientAsSender As Collection
Private Document As Collection
Private document_prior_to_edit As String 'the guts of the document details prior to an edit

Public Sub Set_Comms(C As Collection)

   Comms = C

End

Public Function Filed_As() As Variant

   Return Document_Display_As_Types[cmbDocumentDisplayAstypes.index]!pk

End

Public Function Get_Document() As Collection
   'return document to FarchiveDocuments.tbFile_Click()
   'to use in creating the audit trail

   Return d

End

Public Sub Document_HTML_Set(s As String)
   '-------------------------------------------------------------
   'Couldn't see any other way to do this, but as Ian is insisting
   'all the document saving code goes into this module, and this
   'is generated by the parent form then this fudge is here
   '---------------------------------------------------------------

   Document_HTML = s

End

Public Sub Set_Embedded_Form_Name(name As String)
   '-----------------------------------------------------------------
   'Set at instantiaton of the form 'Scanning', 'Clinical' or 'Inbox'
   'indicating roughly which form is using this one
   '-----------------------------------------------------------------

   Embedded_In_Form_Name = name

End

Public Sub SetFilename(path As String)

   txtFilename.text = path

End

' convert a given file to PDF
Private Sub Force_To_PDF(fname As String) As String

   Dim ext As String
   Dim new_fname As String

   ext = Lower$(File.Ext(fname))
   If ext = "pdf" Then Return fname
   If ext = "jpg" Or ext = "png" Or ext = "jpeg" Then new_fname = modPrinting.Join_PDF([fname])
   ' trick of pdfjam: if you 'join' one PNG or JPEG it will auto-convert to PDF for you
   If ext = "tif" Or ext = "tiff" Or ext = "gif" Then
      new_fname = Temp$() & ".pdf"
      Exec ["/usr/bin/convert", fname, new_fname] Wait
   Endif
   If IsNull(new_fname) Then Error.Raise("File type " & ext & " not recognised")
   If Not Access(new_fname, gb.Read) Then Error.Raise("Image file conversion failed")
   Kill fname
   Return new_fname

End

Public Sub SetTxtFocus()

   If txtRecipient.text <> "" Then
      txtPatient.SetFocus()
   Else
      txtRecipient.SetFocus()
   Endif

End

Public Sub Show_comms()
   '----------------------------------------------------
   'If they exist, show comms for the patient
   'Helps, if user wants to ring them whilst using inbox
   '----------------------------------------------------

   Dim comm As Collection

   lblHomePhone.text = ""
   lblmobilephone.text = ""
   For Each comm In comms
      If comm!fk_type = const.CommModalityHome Then
         lblHomePhone.text = comm!value
      Endif
      If comm!fk_type = const.CommModalityMobile Then
         lblMobilePHone.text = comm!value
      Endif
   Next

End

Public Sub Save()

   If Embedded_in_form_name = "Scanning" Then
      SaveInScanning()
   Else
      SaveNotInScanning()  'could be FInbox or FClinical
   Endif

End

Private Sub SaveInScanning()
   '------------------------------------------------------------
   'Saves changes to the currently displayed document's metadata
   'Returns true if successful
   'if this save is from an existing document:
   '   documents = the collection of old documents
   '   pk_document = key to the documents collection
   '   only either new data or changes collected in collection d
   'FIXME: put back in audit trail on document
   'pk_document set here to be read from FArchiveDocuments for auditing
   'FIXMe check the md5sum is actually working on a file, also use the modtutil.md5sum
   '------------------------------------------------------------

   Dim staff_members As Collection
   Dim md5Output As String
   Dim errtxt As String
   Dim errwhere As String
   Dim fname As String
   Dim upload As CUploadFileTask

   Valid_Document()
   D = New Collection

   If cmbStaffType.index <> -1 Then              'If document sent to one or more staff members, get all staff
      Staff_Members = modContactsDBI.Staff_Get() 'refresh the staff list,could have just employed someone!!!!!
   End If
   d!fk_staff_filed_document = modDBConnect.currentUser!fk_staff
   d!date_created = Val(txtDocumentDate.text)
   d!imported_time = Now()                      'inserted 10/2013 to allow better audit trail (the default was Now() in backend so can't do the audit text properly without this now
   d!fk_patient = fk_patient
   Select Case Contact_Type
      Case const.contacttype_organisation
         d!originator = Organisation!organisation & "." & Organisation!branch
      Case const.contacttype_employee
         d!originator = person!organisation & "." & person!wholename
      Case const.contacttype_person
         d!originator = Person!firstname & " " & Person!surname
      Case const.contacttype_patient
         d!originator = PatientAsSender!firstname & " " & PatientAsSender!surname
   End Select
   d!fk_sending_entity = modInboxDBI.SendingEntity_GetPK(Document_Display_As_Types[cmbDocumentDisplayAstypes.index]!pk, d!originator, fk_branch, fk_employee, fk_person)
   d!tag = d!originator & " - " & cmbDocumentDisplayAstypes.Text
   d!comment = Trim(txtComment.text)
   d!fk_lu_urgency = fk_urgency
   Exec ["/usr/bin/md5sum", txtFilename.text] To md5Output
   d!md5sum = Left(md5Output, InStr(md5Output, " ") - 1)
   d!fk_staff_destination = fk_staff_destination
   d!fk_lu_display_as = Document_Display_As_Types[cmbDocumentDisplayAstypes.index]!pk
   If chkReferral.Value = chkReferral.True Then
      d!incoming_referral = True
   Else
      d!incoming_referral = False
   Endif
   modDBConnect.BeginTrans()
   '------------------------------------------------------------------------------
   'Send to any staff whose type eg general practitioner, matches the cmbstafftype
   'If sending to all staff, have to make a copy of the document for all staff
   'otherwise they can't action it e.g move to library etc as all will be
   'operating on the same filename, and the first one who does something with it
   'means its gone!
   '------------------------------------------------------------------------------
   If cmbStaffType.index <> -1 Then
      fname = Force_To_PDF(txtFilename.Text)
      For Each member In Staff_Members
         If member!fk_lu_staff_type = StaffTypes[cmbStaffType.index]!pk Then
            d!source_file = Replace(Document_Filename_Construct_AllStaff(d), "allstaff", member!logon_name)
            d!fk_staff_destination = member!fk_staff
            pk_document = modArchiveDocumentsDBI.Save(d)
            d.Remove("pk_document") 'don't want this key to force new copies
            modFiles.Put("document_archiving_directory", d!source_file, fname)
         End If
      Next
      Try Kill txtFilename.Text
      Kill fname

   Else
      fname = Force_To_PDF(txtFilename.Text)
      pk_document = modArchiveDocumentsDBI.Document_New_Pk()
      d!pk = pk_document
      ' FIXME: check uploading one-page jpegs
      d!source_file = Document_Filename_Construct(d)

      If modFiles.Dir_Status("document_archiving_directory") = modFiles.DirRemote Then
         upload = New CUploadFileTask(d)
         modFiles.Put("document_archiving_directory", d!source_file, fname, upload)
         upload.Send(Subst$("rm -f '&1'", fname))
         upload.Close()
      Else
         modFiles.Put("document_archiving_directory", d!source_file, fname)
         modArchiveDocumentsDBI.Save(d)
         modDBConnect.CommitTrans()
         Kill fname
      Endif
   End If

End

Private Sub SaveNotInScanning()
   '------------------------------------------------------------
   'Saves changes to the currently displayed document's metadata
   'documents = the old collection, set by form using this module
   'Documents are never created in this module
   'Returns true if successful
   'Data in FMetdata can be
   '1) Passed from the FInbox - in which case document is in the backend but not concluded
   '2) Passed from Fclinical - in which case the data is in the backend and can be either
   '                           i) Not filed i.e not concluded
   '                           ii) Filed and being edited
   '-------------------------------------------------------------------------------------

   Dim staff_members As Collection
   Dim sProgressNotes As String                 'audit notes for the progress notes
   Dim D As New Collection

   Valid_Document()
   If cmbStaffType.index <> -1 Then                                    'fixme - remove?
      Message.Info("IF THIS IS SHOWING STOP AND CHECK WITH RICHARD")   'fixme - remove?
      Staff_Members = modContactsDBI.Staff_Get()                       'fixme - remove?'refresh the staff list,could have just employed someone!!!!!
   End If
   modDBConnect.BeginTrans()                                           'a noop to remind us we are starting data saving
   If Embedded_in_form_name = "FClinical"                                        'User has loaded metadata from FClinic
      If Document!concluded = True Then                                          'if editing from users notes, audit what's happening before/after
         If IsNull(Document!date_created) Then Document!date_created = document!imported_time 'bug here somewhere this should never ever happen, if don't fix the audit crashes
         sProgressNotes = modArchiveDocumentsDBI.Audit_Trail_Make_Progress_notes("document metadata edited", document) & "<HR>"
         sProgressNotes &= document_prior_to_edit
         sProgressNotes &= "<HR><B>After being edited</B><BR>"
         sProgressNotes &= "<B>Type:&nbsp;</B>" & txtDocumentTag.text & "<BR>"
         sProgressNotes &= "<B>Tag&nbsp;&nbsp;:&nbsp;</B>" & txtUserObservationName.text & "<BR>"
         sProgressNotes &= "<B>Date:&nbsp;</B>" & txtDocumentDate.text & "<HR>"
         modAudit.MakeAudit(currentconsult, "document metadata edited", "documents.documents", pk_document, const.cSection_Documents, sProgressNotes)
      Else                                                                       'Not an audit - this is the first time filed
         document!tag_user = Trim(txtUserObservationName.text)                   'add the new tag user has added
         If Not IsNull(get_laterality()) Then                         'fix laterality
            D!tag_user = Replace$(D!tag_user, ";", " (" & UCase(const.LateralityText[get_laterality()]) & ");") 'FIXME, NOT ACCURATE EG FOR xRAY PELVIS + xRAY hIP (RIGHT)
         End If
         sProgressNotes = modArchiveDocumentsDBI.Audit_Trail_Make_Progress_notes("file", document)
         modAudit.MakeAudit(currentconsult, "viewed and filed document", "documents.documents", Document!pk_document, const.cSection_Documents, sProgressNotes)
      End If
   End If
   D!pk_document = Document!pk_document
   D!concluded = True
   D!fk_lu_display_as = Document_Display_As_Types[cmbDocumentDisplayAstypes.index]!pk
   D!data = Document_HTML
   D!fk_lu_data_content_Type = const.cData_Type_HTML
   D!tag_user = Trim(txtUserObservationName.text)
   D!date_created = Val(txtDocumentDate.text)
   If chkReferral.Value = chkReferral.True Then
      D!incoming_referral = True
   Else
      D!incoming_referral = False
   Endif
   If Not IsNull(get_laterality()) Then
      D!tag_user = Replace$(D!tag_user, ";", " (" & UCase(const.LateralityText[get_laterality()]) & ");") 'FIXME, NOT ACCURATE EG FOR xRAY PELVIS + xRAY hIP (RIGHT)
   End If
   '-----------------------------------------
   'Is this document being sent to all staff? FIXME THIS SECTION SHOULD BE REMOVED,ONLY NEEDED IN SCANNING
   '-----------------------------------------
   If cmbStaffType.index <> -1 Then
      For Each member In Staff_Members
         If member!fk_lu_staff_type = StaffTypes[cmbStaffType.index]!pk Then
            document!fk_staff_destination = member!fk_staff
            modArchiveDocumentsDBI.Save(document)
            document.Remove("pk_document") 'don't want this key to force new copies
         End If
      Next
   Else
      If bHas_sending_entity_fk_lu_request_type = False And cmbDocumentDisplayAstypes.text = "result" Then
         If IsNull(fk_sending_entity) Then fk_sending_entity = document!fk_sending_entity
         modInboxDBI.SendingEntity_Set_fk_lu_request_type(Request_Types[cmbRequestTypes.index]!pk, fk_sending_entity)
      End If
      Document_SignOff(D)            'see documents.signed_off table > he who signed off this document
      D!pk_document = modArchiveDocumentsDBI.Save(d)
   End If

End

Public Sub Get_Request_Type_PK() As Variant
   'returns key to

   Try Return Request_Types[cmbRequestTypes.index]!pk
   If Error Then Return 0

End

Public Sub Get_laterality() As Variant

   Return laterality

End

Public Sub Get_fk_Patient() As Variant

   Return fk_patient

End

Public Sub Set_Consult(cons As Cconsult)

   currentconsult = cons
   If Embedded_in_form_name <> "FClinical" Then 'not needed, don't waste a call to the database
      Try comms = modContactsDBI.person_comms_get(currentconsult!patient!fk_person)
   End If

End

Public Function Get_Consult() As CConsult
   'Used by FArchiveDocument to get the currentconsult for a patient

   Return currentconsult

End

Public Function Get_fk_Document() As Variant
   'FArchiveDocuments calls this as part of it's auditing

   Return pk_document

End

Public Sub InitGui_Display_As_Result()
   '---------------------------------------------------------------------
   'Sets up the gui interface in assumption the document will be a result
   '---------------------------------------------------------------------

   Hbox_Lateralisation.visible = True
   chkCodeDocument.Visible = False
   lblUserTag.text = "User Name"
   txtDocumentDate.ReadOnly = False
   lblDocumentDate.text = "Date Collected"
   HBox_RequestTypes.Enabled = True
   txtDocumentTag.ReadOnly = True
   lblDocumentTag.text = "Sender Name"
   iDisplay_As = const.Document_Display_As_Result
   ' cmbDocumentTypes.index = -1
   '  Try Guess_ResultType()

End

Public Sub InitGui_Display_As_Letter()
   '---------------------------------------------------------------------
   'Sets up the gui interface in assumption the document will be a letter
   '---------------------------------------------------------------------

   If Embedded_in_form_name <> "Scanning" Then
      Hbox_SenderType.Visible = False
      HBox_SenderFind.Visible = False
      HBox_SenderDetails.Visible = False
      Hbox_Lateralisation.visible = False
   End If
   rbLateralityNone.value = True
   laterality = Null ' const.LateralityNone
   chkCodeDocument.Visible = True
   txtDocumentDate.ReadOnly = False    'batched re-sent letters date <> date written.
   lblDocumentDate.text = "Date of Letter"
   lblDocumentTag.text = "Seen By"
   txtDocumentTag.ReadOnly = True
   lblUserTag.text = "Letter Summary"
   HBox_RequestTypes.Enabled = False
   cmbRequestTypes.index = -1
   txtDocumentTag.ReadOnly = True
   iDisplay_As = const.Document_Display_As_Letter

End

Public Sub Init(functionality As String)
   '--------------------------------------------------------------------------------------------
   'PURPOSE    : setup 'style' of gui appearance according to  functionality
   '
   '             Allocating Unfiled Document: used for the initial allocation of documents
   '                                          ie anything not sent direct to inbox as hl7
   '                                          could be scanned document, or local file on disk
   '             Filing Allocated Document  : used in Inbox and Fclinical - here the staff member
   '                                          is viewing a document either automatically received
   '                                          as HL7 or allocated to a staff member by one of the
   '                                          clerical staff
   'CALLED BY  : FArchiveDocuments.Init()
   '           : FInbox.Init()
   '           : FClinical.Inbox_showResult()
   '           : FClinical.Letter_Received_Display()
   '
   'NOTES      : This gui-style is 'over-ridden by some internal routines, for example
   '             if user is searching for person/organisation then the input area needs to be
   '             a little different, or if the document is a 'result' or 'letter'
   'RELATED    : InitGui_Display_As_Letter() AND  InitGui_Display_As_Result()
   '----------------------------------------------------------------------------------------------

   Select Case functionality

      Case "Re_Allocate Sender"
         HBox_Sendingentity.Visible = False
         Hbox_SenderType.visible = True
         HBox_SenderFind.Visible = True
         HBox_SenderDetails.Visible = True
         HBox_UserObservationName.Visible = False
         HBox_Document_Tag.Visible = False
         HBox_Comment.Visible = False
         HBox_Laterality.visible = False
         Hbox_Requested.Visible = False
         HBox_HealthIssue.Visible = False
         HBox_Filename.Visible = False
         HBox_DocumentType.Visible = False
         txtFindSender.Enabled = True
         txtFindSender.ReadOnly = False

      Case "UnAllocated Documents"
         HBox_Sendingentity.Visible = False
         Hbox_SenderType.visible = True
         HBox_SenderFind.Visible = True
         HBox_SenderDetails.Visible = True
         HBox_UserObservationName.Visible = False
         HBox_Document_Tag.Visible = False
         HBox_Comment.Visible = False
         HBox_Laterality.visible = False
         Hbox_Requested.Visible = False
         HBox_HealthIssue.Visible = False
         HBox_Filename.Visible = False
         Birthdate_label.Visible = False
         txtRecipient.Background = Color.White
         txtRecipient.Enabled = True
         lblMeasure.text = " Document Date "
         HBox_DocumentType.Visible = False
         modEditAreaHelpers.Resize_labels(VBox_EditArea, lblMeasure)
         lblBirthdate.width = ChkLockStaffMember.width
         txtDocumentTag.ReadOnly = True
         lblMeasure.text = " Information Technology   "
         cmbStaffType.Width = lblmeasure.Width
         HBox_AllStaff.Visible = True
         StaffTypes = modutil.Copy_Collection_Keyed_Sequentially(modAdminDBI.Staff_Types_Get())
         modUtilGUI.LoadCombo(cmbStaffType, StaffTypes, "type")
         cmbStaffType.index = -1
         EditArea_Clear()
      Case "Allocated Documents"
         modEditAreaHelpers.EditArea_SetTextBoxes_ReadOnly(VBox_EditArea) 'easier to switch off than on
         Hbox_SenderType.visible = False
         HBox_SenderFind.Visible = False
         HBox_SenderDetails.Visible = False
         If Embedded_in_form_name <> "FInbox" Then
            Hbox_Patient.Visible = False
            Hbox_Street.Visible = False
            HBox_Suburb.Visible = False
         Else
            Hbox_Patient.Visible = True
            Hbox_Street.Visible = True
            HBox_Suburb.Visible = True
         End If
         Hbox_Requested.Visible = False
         HBox_UserObservationName.visible = True
         HBox_Filename.Visible = False
         HBox_AllStaff.Visible = False
         Hbox_DisplayDocumentAs.Visible = True
         lblDocumentDate.text = "Date Collected"
         Hbox_Requested.Visible = True
         HBox_DocumentType.visible = True
         txtComment.ReadOnly = False
         lblComment.text = "Notes on Form"
         lblMeasure.text = " Staff Responsible "
         txtUserObservationName.ReadOnly = False
         cmbStaffType.index = -1
         chkLockStaffMember.Visible = False
         chkLockPatient.Visible = False
         cmbRequestTypes.index = -1
         lbl200.Visible = True
         lbl201.Visible = True
         lblHomePhone.Visible = True
         lblMobilePhone.visible = True
         If Embedded_in_form_name = "Clinical" Then
            Hbox_Save.Visible = True
         Endif
         Birthdate_label.Visible = True
         lblBirthdate.Visible = True
   End Select
   modEditAreaHelpers.Resize_labels(VBox_EditArea, lblmeasure)     'resize internal labels
   fk_urgency = const.UrgencyLevelRoutine

End

Public Sub _new()
   'Get collection of the types of requests e.g pathology, radiology, ophthalmology etc

   Request_Types = modUtilGUI.LoadCombo(cmbRequestTypes, modRequestsDBI.RequestTypes_Get(), "type")
   Document_Display_As_Types = modUtilGui.LoadCombo(cmbDocumentDisplayAstypes, modInboxDBI.Document_Display_As_Types_Get(), "display_as")

End

Public Sub EditArea_Clear()
   '----------------------------
   'Clear the metadata edit area
   '----------------------------

   Dim bStaffLocked As Boolean
   Dim bPatientLocked As Boolean
   Dim bSenderLocked As Boolean
   Dim bDisplayAsLocked As Boolean
   Dim iLastDisplayAs As Integer
   Dim iDocumentType As Integer = cmbRequestTypes.Index
   Dim bDocumentTypeLocked As Boolean

   document_prior_to_edit = ""
   bReAllocating_Sender = False
   If chkLockDocumentType.value = True Then                                   'save the flags of what is locked
      bDocumentTypeLocked = True
   Endif
   If Contact_Type = 0 Then
      Contact_Type = const.contacttype_organisation
   Endif
   If ChkLockStaffMember.value = True Then
      bStaffLocked = True
   End If
   If chkLockPatient.value = True Then
      bPatientLocked = True
   Endif
   If chkLockSender.value = True Then
      bSenderLocked = True
   Endif
   If chkLockDisplayAs.value = True Then
      iLastDisplayAs = iDisplay_As
      bDisplayAsLocked = True
   End If
   modEditAreaHelpers.EditArea_Clear(VBox_EditARea)                        'the clear edit area (will also clear the checkboxes
   lblHomePhone.text = ""
   lblMobilePHone.text = ""
   columnview1.Clear
   columnview1.Visible = False
   bDocumentNotLinkedToPatient = False
   If Embedded_in_form_name = "FInbox" Then
      If bDocumentTypeLocked = True Then
         cmbRequestTypes.index = iDocumentType
         chkLockDocumentType.value = True
      Else
         cmbRequestTypes.index = -1
      End If
   Else
      txtDocumentTag.text = ""
   End If
   fk_patient = Null
   lblBirthdate.text = ""
   chkReferral.Value = chkReferral.False
   fk_lu_urgency = const.UrgencyLevelRoutine
   rbUrgencyRoutine.value = True
   cmbDocumentDisplayAstypes.index = cmbDocumentDisplayAstypes.Find("letter")
   If Embedded_in_form_name = "Scanning" Then
      Reset_Keys()
   Endif
   If bPatientLocked = True Then                                           'now re-set any locked checkboxes
      chkLockPatient.value = True
      Patient_Show(patient)
   Else
      fk_patient = Null
      patient = Null
   Endif

   If bStaffLocked = True Then
      ChkLockStaffMember.value = True
      Staff_Destination_Member_Show()
      If txtPatient.text = "" Then
         txtPatient.SetFocus()
      End If
   Else
      fk_staff_destination = Null
      staff_member = Null
   Endif
   If bSenderLocked = True Then
      chkLockSender.value = True
      Select Case Contact_Type
         Case const.contacttype_organisation, const.contacttype_employee
            Organisation_Display()  'predicated on previous selection having being made ie Organisation collection exists
         Case const.contacttype_patient
         Case const.contacttype_person
            Person_Select()
      End Select
   Endif
   If bDisplayAsLocked = True Then
      Select Case iLastDisplayAs
         Case const.Document_Display_As_Result
            ' rbDisplayAsResult.value = True
            cmbDocumentDisplayAstypes.index = cmbDocumentDisplayAstypes.Find("result")
         Case const.Document_Display_As_Letter
            cmbDocumentDisplayAstypes.index = cmbDocumentDisplayAstypes.Find("letter")
            ' rbDisplayAsLetter.Value = True
      End Select
      iDisplay_As = iLastDisplayAs
      chkLockDisplayAs.value = True
   Endif
   If bStaffLocked = True And bPatientLocked = True And bSenderLocked = True Then
      txtDocumentDate.SetFocus()
   Endif
   cmbStaffType.index = -1

End

Public Sub Reallocate()

   bReAllocating_Patient = True
   txtPatient.Border = True
   With txtPatient
      .Foreground = Color.Red
      .Font.Bold = True
      .ReadOnly = False
      .Clear()
      .SetFocus()
   End With
   With lblSearchFor
      .text = "PATIENT ??"
      .foreground = Color.red
      .Font.bold = True
   End With
   lblBirthdate.text = ""
   txtStreet1.text = ""
   txtsuburb.text = ""

End

Public Sub Edit(d As Collection)
   '--------------------------------------------------------------------------------------------------------
   'This is used by:
   ' 1) FClniical.Document_Edit_Metadata(,,) to allow editing of documents metadata by the users
   ' 2) FInbox to display metadata before filing.
   'Not the document collection (d) passed here from FClinical is from vwDocuments hence has
   'heaps of 'non-savable' fields so when the changed data is saved in SaveNotInScanning
   'a new collection is created for the save, however we need fields from the orginal collection
   'to create a readable audit trail prior to that save
   '--------------------------------------------------------------------------------------------------------

   Document = d
   EditArea_Clear()
   Document_HTML = ""
   CurrentRequest = New Collection
   bExit = True
   bReAllocating_Patient = False
   pk_document = Document!pk_document
   Try fk_patient = Document!fk_patient 'may not exist
   Try fk_staff_destination = Document!fk_staff_destination
   If Not IsNull(document!fk_staff_destination)
      With txtRecipient
         .Border = False
         .Foreground = Color.Black
         .Font.Bold = False
         .ReadOnly = True
      End With
      With lblStaffResponsible
         .text = "Staff Responsible"
         .Font.bold = False
         .Foreground = Color.Black
      End With
      txtRecipient.text = Document!staff_destination_title & " " & Document!staff_destination_wholename
      txtRecipient.pos = 0
   Else
      txtRecipient.Border = True
      With txtRecipient
         .Foreground = Color.Red
         .Font.Bold = True
         .ReadOnly = False
         .SetFocus()
      End With
      With lblStaffResponsible
         .text = "STAFF ??"
         .foreground = Color.red
         .Font.bold = True
      End With
   End If
   If Lower(Document!patient_title) <> "unknown" Then
      txtPatient.text = Trim(document!patient_title & " " & document!patient_firstname & " " & document!patient_surname)
      If Not IsNull(document!patient_age) Then
         txtPatient.text &= " (" & Str(document!patient_age) & "yrs)"
      Endif
   Else
      txtPatient.text = Trim(document!patient_firstname & " " & document!patient_surname)
   Endif
   txtPatient.pos = 0         'make sure
   Try lblBirthdate.text = Format(document!patient_birthdate, "dd/mm/yyyy")
   lblBirthdate2.text = lblBirthdate.text 'stupid I know, but acts as an identical spacer
   txtStreet1.text = Trim(document!patient_street1 & " " & document!patient_street2)
   txtSuburb.text = document!patient_town & " " & document!patient_postcode
   If Not IsNull(fk_patient) Then
      Try Show_comms()
   End If

   '---------------------------------------------------------------------------------
   'Attempt to match the combo box on basis of the category of organisation or person
   'E.g if it was 'Pathology company' or 'Pathology provider' or 'Pathology'
   'then the document_type 'Pathology' would find a match
   '---------------------------------------------------------------------------------
   cmbRequestTypes.index = cmbRequestTypes.Find(document!sending_entity_request_type)
   '--------------------------------------------------------------------------------------------
   'Scanned sending entities:
   'These are mostly letters, but sometimes can be requests. Unless Admin has set a default
   'fk_lu_request type in the event that the scanned document is a result, the system can't know
   'so in this case, this flag is set so we can automatically correct this
   '---------------------------------------------------------------------------------------------
   bHas_sending_entity_fk_lu_request_type = False   'default to now knowing how to handle doc if usually a letter but is a request
   If Not IsNull(document!sending_entity_fk_lu_request_type) Or (Not IsNull(document!sending_entity_fk_lu_request_type)) Then
      bHas_sending_entity_fk_lu_request_type = True
   Endif
   If document!msh_sending_entity <> "" Then
      txtSender.text = document!msh_sending_entity
   Else
      txtSender.text = document!originator
   End If
   txtSender.pos = 0
   Try txtDocumentDate.text = Format(document!date_created, "dd/mm/yyyy")
   Try txtDateRequested.text = Format(document!date_requested, "dd/mm/yyyy")
   txtDocumentTag.text = document!tag
   txtDocumentTag.pos = 1 'this is often quite long - want the start of word showing
   Try txtUserObservationName.text = document!tag_user
   txtUserObservationName.pos = 0
   txtComment.text = document!comment_on_document
   txtFilename.text = Document!source_file
   Select Case document!fk_lu_urgency
      Case const.UrgencyLevelRoutine
         rbUrgencyRoutine.value = True
      Case const.UrgencyLevelModerate
         rbUrgencyModerate.value = True
      Case const.UrgencyLevelUrgent
         rbUrgencyUrgent.value = True
   End Select
   If document!incoming_referral Then
      chkReferral.Value = chkReferral.True
   Else
      chkReferral.Value = chkReferral.False
   Endif
   If document!fk_lu_display_as = const.Document_Display_As_Result
      Set_Display_As_Type("result") 'fixme add the others
      InitGui_Display_As_Result()
      If txtDocumentTag.text <> "" Then
         txtDocumentTag.text = Replace(txtDocumentTag.text, "letter", "result")
         txtDocumentTag.text = Replace(txtDocumentTag.text, "LETTER", "RESULT")
      Endif
   Else
      InitGui_Display_As_Letter()
      Set_Display_As_Type("letter")
   End If
   Select Case document!fk_lu_display_as
      Case const.Document_Display_As_Letter
         If txtDocumentTag.text <> "" Then
            txtDocumentTag.text = Replace(txtDocumentTag.text, "result", "letter")
            txtDocumentTag.text = Replace(txtDocumentTag.text, "RESULT", "LETTER")
         Endif
      Case Const.Document_Display_As_Certificate
         Set_Display_As_Type("certificate")
      Case Const.Document_Display_As_GP_Management_Plan
         Set_Display_As_Type("gp management plan")
      Case const.Document_Display_As_Image
         Set_Display_As_Type("image")
      Case Const.Document_Display_As_Mental_Health_Plan
         Set_Display_As_Type("mental health plan")
      Case const.Document_Display_As_Team_Care_Arrangement
         Set_Display_As_Type("team care arrangement")
   End Select

   If Not IsNull(document!fk_patient)
      With txtPatient
         .Border = False
         .Foreground = Color.Black
         .Font.Bold = False
         .ReadOnly = True
      End With
      With lblSearchFor
         .text = "Patient"
         .Font.bold = False
         .Foreground = Color.Black
      End With
   Else
      txtPatient.Border = True
      With txtPatient
         .Foreground = Color.Red
         .Font.Bold = True
         .ReadOnly = False
         .SetFocus()
      End With
      With lblSearchFor
         .text = "PATIENT ??"
         .foreground = Color.red
         .Font.bold = True
      End With
   End If
   cmbStaffType.index = -1
   bExit = False
   If document!concluded = True Then
      document_prior_to_edit = "<B>Prior to being edited the core data was:</B><BR>"
      document_prior_to_edit &= "<B>Type:&nbsp;</B>" & txtDocumentTag.text & "<BR>"
      document_prior_to_edit &= "<B>Tag&nbsp;&nbsp;:&nbsp;</B>" & txtUserObservationName.text & "<BR>"
      document_prior_to_edit &= "<B>Date:&nbsp;</B>" & txtDocumentDate.text & "<BR>"
   End If

End

Public Sub Timer1_Timer()

   Inc iTimerCount
   If iTimerCount > 3 Then
      Patient_Get()
   End If

End

Public Sub Set_Display_As_Type(t As String)

   cmbDocumentDisplayAstypes.index = cmbDocumentDisplayAstypes.Find(t)

End

Public Sub Patient_Clear()

   txtPatient.text = ""
   lblBirthdate.text = ""
   txtStreet1.text = ""
   txtsuburb.text = ""
   With columnview1
      .Clear
      .Visible = False
   End With

End

Public Sub Patient_Get()

   Dim iLastPatient_pk As Variant
   Dim iAddressCount As Integer
   Dim x As Integer

   Timer1.Stop()
   With columnview1
      .Clear
      .Columns.count = 6
      .Visible = False
   End With
   If Trim(txtPatient.text) = "" Then Return
   Allpatients = modContactsDBI.patients_get_firstname_surname(txtPatient.text, chkIncludeDeceased.value,, chkIncludeInactive.value)
   Allpatients.Remove("sql_in_english")       'not used in this context
   Allpatients = modutil.Copy_Collection_Keyed_Sequentially(Allpatients)
   If allpatients.count = 0 Then Return
   For Each patient In allpatients
      If patient!fk_patient <> iLastPatient_pk Then
         iLastPatient_pk = patient!fk_patient
         iAddressCount = 0
         columnview1.Add(x, 0)
         columnview1[x][0] = patient!surname
         columnview1[x][1] = patient!firstname
         columnview1[x][2] = patient!sex
         columnview1[x][3] = Trim(patient!street1 & " " & patient!street2)
         columnview1[x][4] = Format(patient!birthdate, "dd/mm/yyyy")
         columnview1[x][5] = patient!town & " " & patient!postcode
      Else
         columnview1.Add(x, 0)
         columnview1[x][0] = ""
         columnview1[x][1] = ""
         columnview1[x][2] = ""
         columnview1[x][3] = Trim(patient!street1 & " " & patient!street2)
         columnview1[x][4] = Format(patient!birthdate, "dd/mm/yyyy")
         columnview1[x][5] = patient!town & " " & patient!postcode
      End If
      Inc x
   Next
   If allpatients.count = 1 Then
      Patient_Select()
   Else
      With Columnview1
         .Visible = True
         .Raise
         .tag = txtPatient
      End With
   End If

End

Public Sub Patient_As_Sender_Get()

   Dim iLastPatient_pk As Variant
   Dim iAddressCount As Integer
   Dim x As Integer

   Timer1.Stop()
   With columnview1
      .Clear
      .Columns.count = 6
      .Visible = False
   End With
   If Trim(txtFindSender.text) = "" Then Return
   txtFindSender.tag = "patient as sender"
   Allpatients = modContactsDBI.patients_get_firstname_surname(txtFindSender.text)
   Allpatients.Remove("sql_in_english")       'not used in this context
   Allpatients = modutil.Copy_Collection_Keyed_Sequentially(Allpatients)
   If allpatients.count = 0 Then Return
   For Each PatientAsSender In allpatients
      If PatientAsSender!fk_patient <> iLastPatient_pk Then
         iLastPatient_pk = PatientAsSender!fk_patient
         iAddressCount = 0
         columnview1.Add(x, 0)
         columnview1[x][0] = PatientAsSender!surname
         columnview1[x][1] = PatientAsSender!firstname
         columnview1[x][2] = PatientAsSender!sex
         columnview1[x][3] = Trim(PatientAsSender!street1 & " " & PatientAsSender!street2)
         columnview1[x][4] = Format(PatientAsSender!birthdate, "dd/mm/yyyy")
         columnview1[x][5] = PatientAsSender!town & " " & PatientAsSender!postcode
      Else
         columnview1.Add(x, 0)
         columnview1[x][0] = ""
         columnview1[x][1] = ""
         columnview1[x][2] = ""
         columnview1[x][3] = Trim(PatientAsSender!street1 & " " & PatientAsSender!street2)
         columnview1[x][4] = Format(PatientAsSender!birthdate, "dd/mm/yyyy")
         columnview1[x][5] = PatientAsSender!town & " " & PatientAsSender!postcode
      End If
      Inc x
   Next
   If allpatients.count = 1 Then
      Patient_As_Sender_Select()
   Else
      With Columnview1
         .Visible = True
         .Raise
         .tag = txtFindSender
      End With
   End If

End

Public Sub Patient_Select()
   '--------------------------------------------------------------
   'Select the patient to receive the document from the popup list
   '--------------------------------------------------------------

   fk_patient = patient!fk_patient
   Patient_Show(Patient)
   If lblContactDetails.text = "" Then
      txtFindSender.SetFocus()
   Else
      txtDocumentDate.SetFocus()
   End If

End

Public Sub Patient_Show(currentPatient As Collection)

   Try txtPatient.text = currentPatient!firstname & " " & currentPatient!surname
   Try lblBirthdate.text = Format(currentPatient!birthdate, "dd/mm/yyyy")
   lblBirthdate2.text = lblBirthdate.text 'stupid I know, but acts as an identical spacer
   txtStreet1.text = Trim(currentPatient!street1 & currentpatient!street2)
   txtSuburb.text = currentPatient!town & " " & currentPatient!postcode
   fk_patient = currentPatient!fk_patient

   columnview1.Visible = False
   With txtPatient
      .Foreground = Color.Black
      .Border = False
      .Font.Bold = False
   End With
   With lblSearchFor
      .text = "Patient"
      .Font.bold = False
      .Foreground = Color.Black
   End With

   If Embedded_in_form_name = "FInbox" Then

      FInbox.reload_patient(bReAllocating_Patient)
   Else
      'is the scanning module, has no cConsult
      currentconsult = New CConsult(currentPatient, const.ConsultType_AuditNote)                                   'Each patient has a new consult
      ' currentconsult.Set(const.ConsultType_AuditNote, "scanned document imported")    'to enable an audit-trail for the scanned document import Fixme check this comment is true
      'fix these lines above
   End If
   Select Case Contact_Type
      Case const.contacttype_organisation
         '         txtOrganisation.SetFocus()
      Case const.contacttype_employee

      Case const.contacttype_patient, const.contacttype_person
         '     txtPersonSurname.SetFocus()
   End Select

End

Public Sub Staff_Find()
   'Finds the staff member to allocate document to

   Dim x As Integer

   Timer1.Stop()
   With columnview1
      .Clear()
      .Columns.count = 3
   End With
   If Trim(txtRecipient.text) = "" Then Return
   staff = modutil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Staff_Get(Trim(txtRecipient.text)))
   If Not staff.count Then Return
   For Each Staff_Member In staff
      columnview1.Add(x, 0)
      columnview1[x][0] = Staff_Member!title & " " & Staff_Member!wholename
      columnview1[x][1] = Staff_Member!occupation
      columnview1[x][2] = Staff_Member!branch
      Inc x
   Next
   If Staff.count = 1 Then
      Staff_Select() 'using the current Staff_Member collection
   Else
      With Columnview1
         .Visible = True
         .Raise
         .tag = txtRecipient
      End With
   End If

End

Public Sub Staff_Select()

   Staff_Destination_Member_Show()
   cmbStaffType.index = -1

End

Public Sub Staff_Destination_Member_Show()

   Try txtRecipient.text = staff_member!title & " " & staff_member!wholename
   txtRecipient.pos = 0
   fk_staff_destination = staff_member!fk_staff
   '-----------------------------------------------------------------------
   'If in the inbox and staff re-allocated, may not belong now to this user
   '-----------------------------------------------------------------------
   If Embedded_in_form_name = "FInbox" Then
      FInbox.ReAllocate_Staff_Member(fk_staff_destination)
   Else
      txtPatient.SetFocus()
   End If

End

Public Sub EditArea_TextBox_KeyRelease()

   Select Case Last.tag

      Case "organisation", "find sender", "person", "employee", "patient as sender"
         Sender_Find()
      Case "staff member"
         Staff_Find()
      Case "user name"
         If iDisplay_As = const.Document_Display_As_Result Then
            RequestItem_Selection("get", Last, "textbox")
         Else
            Terms_Get()
         End If
      Case "patient"
         Timer1.Start() 'find patients triggered when timer > timer.delay
         itimercount = 0
   End Select

End

Public Sub RequestItem_Selection(action As String, txtbox As TextBox, Optional calling_control As String)

   Dim sMsg As String

   Select Case action

      Case "get"
         columnview1.Visible = False
         If InStr(txtbox.text, ";") Then
            sSearchText = Trim(Right(txtbox.text, Len(txtbox.text) - lastpos))
         Else
            sSearchText = Trim(txtbox.Text)
         End If
         If Trim(sSearchText) = "" Then
            Return
         End If
         If cmbRequestTypes.index = -1 Then
            sMsg = "Before searching for a request name, you must select the type of request you wish to find.\n\n"
            "For example, if the document you are about to file was a bone density, you would select "
            "the category 'Radiology' from the combo box first, then type in a few letters of what  you want to find.\n\n"
            "If the document was an echocardiograph, you would select 'Cardiolovascular' from the combobox etc."
            Message.Title = "Searching for Request Names"
            Message.Info(sMsg)
            Return
         Endif
         The_Collection = modRequestsDBI.requests_get_items(sSearchText, Request_Types[cmbRequestTypes.index]!pk)
         With columnview1
            .Clear()
            If Not IsNull(fk_lu_type) Then
               .Columns.Count = 1
               .Columns[0].width = 400
            Else
               .Columns.Count = 2
               .Columns[0].width = 100
               .Columns[1].width = 400
            End If
            If chkCodeDocument.Visible = False Then
               .Width = txtUserObservationName.Width
            Endif
         End With
         If The_Collection.count Then
            For Each member In The_Collection
               columnview1.Add(member!pk_view, 0)
               If Not IsNull(fk_lu_type) Then
                  columnview1[member!pk_view][0] = member!item
               Else
                  columnview1[member!pk_view][0] = member!type
                  columnview1[member!pk_view][1] = member!item
               End If
            Next
            columnview1.Visible = True
            columnview1.Raise
            columnview1.tag = txtbox
         End If
      Case "accept"
         columnview1.MoveCurrent()
         CurrentRequest = The_Collection[columnview1.Item.key]
         If InStr(CurrentRequest!item, "(RIGHT)") Then
            rblateralityright.value = True
            CurrentRequest!item = Trim(Replace(CurrentRequest!item, "(RIGHT)", ""))
            laterality = const.LateralityRight
         End If
         If InStr(CurrentRequest!item, "(LEFT)") Then
            rblateralityLeft.value = True
            CurrentRequest!item = Trim(Replace(CurrentRequest!item, "(LEFT)", ""))
            laterality = const.LateralityLeft
         End If
         If InStr(CurrentRequest!item, "(BOTH)") Then
            CurrentRequest!item = Trim(Replace(CurrentRequest!item, "(BOTH)", ""))
            rblateralityBoth.value = True
            laterality = const.LateralityBoth
         End If
         request_items_text = request_items_text & CurrentRequest!item & ";"
         bExit = True
         txtbox.text = request_items_text
         txtbox.pos = Len(request_items_text)
         lastpos = Len(request_items_text)
         columnview1.Visible = False
         txtbox.SetFocus()
         bExit = False
   End Select
Catch
   bExit = False
   Return

End

Public Sub EditArea_TextBox_KeyPress()

   If Not EditArea_Textbox_ExcludeKeys(key.code, Last.tag) Then
      Return
   End If
   Select Case Key.Code
      Case key.Down
         If columnview1.Visible Then
            columnview1.MoveFirst()
            columnview1.Item.Selected = True
            columnview1.SetFocus()
         End If
         If VBox_ColumnView.Visible Then
            columnview2.MoveFirst()
            columnview2.Item.Selected = True
            columnview2.SetFocus()
         End If
   End Select

End

Public Sub EditArea_TextBox_Change()

   If bexit Then Return
   Select Case Last.tag
      Case "organisation", "employee", "person"
         If Trim(txtFindSender.text) = "" Then
            lblContactDetails.text = ""
         End If
      Case "document date"
         If IsDate(Last.text) And lblInvalidDate.text <> "" Then
            lblInvalidDate.text = ""
         Endif
      Case "patient"
         If Trim(Last.text) = "" Then
            fk_patient = Null
            txtStreet1.text = ""
            txtSuburb.text = ""
            lblBirthdate.text = ""
            columnview1.Visible = False
         Endif
      Case "user name"
         If Trim(Last.text) = "" Then
            sSearchText = ""
            lastpos = 0
            request_items_text = ""
         End If
         If Left(Last.text, 3) = "lhr" Or Left(Last.text, 3) = "lhw" Or Left(Last.text, 3) = "lhn" Then
            bexit = True
            Last.text = "Legacy hand written notes "
            bExit = False
         Endif
         If Left(Last.text, 2) = "wc" Then
            bexit = True
            Set_Display_As_Type("certificate")
            bExit = False
         Endif
         If Left(Last.text, 3) = "pem" Then
            bexit = True
            Last.text = "Pre-Employment Medical"
            bExit = False
         Endif
         If Left(Last.text, 3) = "rta" Then
            bexit = True
            Last.text = "Roads & Traffic Medical"
            bExit = False
         Endif
         If Left(Last.text, 3) = "rtw" Then
            bexit = True
            Last.text = "Return To Work Plan"
            bExit = False
         Endif
         If Left(Last.text, 3) = "clc" Then
            bexit = True
            Last.text = "CentreLink Certificate "
            Set_Display_As_Type("certificate")
            bExit = False
         Endif
         If Left(Last.text, 3) = "injurymp" Then
            bexit = True
            Last.text = "Injury Management Plan "
            Set_Display_As_Type("letter")
            bExit = False
         Endif
         If Left(Last.text, 3) = "cfp" Then
            bexit = True
            Last.text = "Consent for procedure "
            Set_Display_As_Type("letter")
            bExit = False
         Endif
         If Left(Last.text, 3) = "rmr" Then
            bexit = True
            Last.text = "Request for medical records transfer "
            Set_Display_As_Type("letter")
            bExit = False
         Endif
         If Left(Last.text, 3) = "anf" Then
            bexit = True
            Last.text = "Accident Notification Form "
            Set_Display_As_Type("letter")
            bExit = False
         Endif
         If Left(Last.text, 4) = "dacc" Then
            bexit = True
            Last.text = "Diabetes Annual Cycle of Care "
            Set_Display_As_Type("letter")
            bExit = False
         Endif
         If Left(Last.text, 3) = "o75" Then
            bexit = True
            Last.text = "Over 75 Health Care Assessment "
            Set_Display_As_Type("letter")
            bExit = False
         Endif
         If Left(Last.text, 3) = "tca" Then
            bexit = True
            Last.text = "Team Care Arrangements "
            Set_Display_As_Type("team care arrangement")
            bExit = False
         Endif
         If Left(Last.text, 3) = "icr" Then
            bexit = True
            Last.text = "Insurance Company Request for Information "
            Set_Display_As_Type("letter")
            bExit = False
         Endif
         If Left(Last.text, 3) = "ips" Or Left(Last.text, 3) = "ipr" Then
            bexit = True
            Last.text = "Imported Patient Summary/Records"
            Set_Display_As_Type("letter")
            bExit = False
         Endif
         If Left(Last.text, 3) = "impl" Then
            bexit = True
            Last.text = "Injury Management Plan"
            Set_Display_As_Type("letter")
            bExit = False
         Endif
         If Left(Last.text, 3) = "aeb" Then
            bexit = True
            Last.text = "Arranged excision BCC"
            Set_Display_As_Type("letter")
            bExit = False
         Endif
         If Left(Last.text, 3) = "aes" Then
            bexit = True
            Last.text = "Arranged excision SCC"
            Set_Display_As_Type("letter")
            bExit = False
         Endif
         If Embedded_In_Form_Name = "FInbox" Then
            FInbox.Document_Filed_As_Update(Last.text)
         End If
   End Select

End

Public Sub EditArea_TextBox_GotFocus()

   Dim hctrl As Control

   ReferenceHboxForTopColumnview = Last.parent.parent
   VBox_ColumnView.Visible = False 'the popup with the coded terms
   columnview1.Visible = False
   If bexit Then Return
   If chkLockPatient.value = True Then Return
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
      Case "user name", "staff member", "patient", "find sender", "person", "employee", "organisation"
         With Columnview1
            .top = Last.parent.parent.top + Last.height
            .height = 120
            For Each hctrl In Last.parent.children
               If hctrl Is TextBox Then
                  .left = hctrl.parent.Left + Vbox_EditArea.Padding 'Last.parent.padding
                  .width = lblContactDetails.width 'otherwise not wide enough if use Last.width
                  Break
               End If
            Next
            .Raise
         End With
         With VBox_ColumnView  'replace the coding with the proper code form fixme
            .top = Last.parent.parent.top + Last.parent.height
            .left = Last.parent.Left + Last.parent.padding
            .width = lblContactDetails.width
            If Last.tag = "user name" Then
               .width = Last.width
               .height = Last.height * 5.5
            Endif
         End With
   End Select
   If Last.tag = "user name" Then
      If Len(Trim(Last.text)) Then
         If Right(Trim(Last.text)) <> ";" Then
            Last.text &= ";"
         End If
         Last.pos = Len(Last.text)
      End If
   End If
   If Last.tag = "patient" Then
      columnview1.Columns.count = 6
      columnview1.width = txtPatient.Width
   Else
      columnview1.Columns.count = 1
   End If

End

Public Sub ColumnView1_KeyPress()
   '---------------------------------------------------------
   'Either accept the user selection, or if they have hit the
   'up arrow, move back into the textbox
   '----------------------------------------------------------

   Select Case key.Code
      Case key.Return
         ColumnView1_DblClick()
   End Select

End

Public Sub ColumnView1_DblClick()

   If columnview1.MoveCurrent() Then Return
   Select Case Last.tag.tag
      Case "organisation"    ', "employee"
         organisation = organisations[columnview1.Item.key]
         Organisation_Select()
      Case "user name"
         RequestItem_Selection("accept", txtUserObservationName)
         If Embedded_In_Form_Name = "FInbox" Then
            FInbox.Document_Filed_As_Update(txtUserObservationName.text)
         End If
      Case "patient"
         patient = Allpatients[columnview1.item.key]
         Patient_Select()
      Case "person"
         person = persons[columnview1.Item.Key]
         Person_Employee_Select() ' Person_Select()
      Case "patient as sender"
         PatientAsSender = Allpatients[columnview1.item.key]
         Patient_as_sender_Select()
      Case "staff member"
         Staff_Member = staff[columnview1.item.key]
         Staff_Select()
   End Select
   Columnview1.Visible = False
   Return

Catch
   Return

End

Public Sub Terms_Get()

   Dim term As Collection
   Dim key As Variant

   If Trim(txtUserObservationName.text) = "" Or chkCodeDocument.value = False Then
      fk_code = Null
      fk_coding_system = Null
      VBox_ColumnView.Visible = False
      Return
   End If
   Terms = modCodingDBI.Get_Terms(Trim(txtUserObservationName.text), chkLimit.value, chkicd10.value, SpinBoxTermLimits.value)
   With columnview2
      .Clear()
      .Columns.count = 2
      .Columns[0].Width = txtUserObservationName.width - 100
      .Columns[1].width = 100
   End With
   If Terms.count Then
      For Each term In Terms
         key = term!code
         columnview2.Add(key, 0)
         columnview2[key][0] = term!term
         columnview2[key][1] = term!system
      Next
      lblTermCount.text = Str$(terms.count) & " terms retreived"
      columnview2.tag = txtUserObservationName
      columnview2.Raise
      columnview2.Visible = True
      VBox_ColumnView.Visible = True
   Else
      VBox_ColumnView.Visible = False 'empty recordset
   End If

End

Public Sub Columnview2_KeyPress()

   If key.code = key.return Then Columnview2_DblClick()

End

Public Sub Coded_Term_Select()

   columnview2.MoveCurrent()   'match internal cursor to visible row
   fk_code = Terms[columnview2.Item.key]!code
   fk_coding_system = Terms[columnview2.Item.key]!fk_coding_system
   txtUserObservationName.text = Terms[columnview2.Item.key]!term & " (" & Terms[columnview2.Item.key]!code & ")"
Catch
   Return

End

Public Sub Columnview2_DblClick()

   Coded_Term_Select()
   Columnview2.Visible = False
   VBox_ColumnView.Visible = False

End

Public Sub rblaterality_Click()

   Try laterality = Last.tag 'only works for 1-2-3 (left/right/both)
   If Error Then
      laterality = Null ' const.LateralityNone
   End If

End

Public Sub EditArea_TextBox_LostFocus()

   Dim hasTExt As Boolean
   Dim bDateInvalid As Boolean

   Last.background = Color.White
   Last.pos = 0
   Select Case Last.tag
      Case "document date"
         If Last.text <> "" Then
            hasText = True
            If Not modEditAreaHelpers.Valid_Date(Last) Then
               If Not hastext Then Return
               bDateInvalid = True
               bExit = True
               lblInvalidDate.text = " **INVALID DATE**"
               Last.SetFocus()
               bExit = False
            End If
         Else
            lblInvalidDate.text = ""
         End If
   End Select

End

Public Sub Person_Employee_Get()
   '--------------------------------------------------------
   'Pops up a list of employee's or persons not patients
   'This simplies the search but then the contact_type
   'has to be set on the basis of the prescence of abscence
   'of an organisation in Person_Employee_Select()
   '-------------------------------------------------------

   Dim x As Integer

   Timer1.Stop()
   With columnview1
      .Clear()
      .Columns.count = 4
      .Visible = False
   End With
   If Trim(txtFindSender.text) = "" Then Return
   txtFindSender.tag = "person"
   Persons = modutil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Person_Get_By_Surname(Trim(txtFindSender.text)))
   If Not persons.count Then Return
   For Each person In persons
      columnview1.Add(x, 0)
      columnview1[x][0] = Person!firstname & " " & Person!surname & " "
      columnview1[x][1] = Person!occupation & " "
      columnview1[x][2] = Trim(" " & Person!organisation)
      columnview1[x][3] = Trim(Person!street1 & " " & Person!street2) & " " & Person!town
      Inc x
   Next
   If person.count = 1 Then
      Person_Employee_Select() 'using the current Staff_Member collection
   Else
      lblmeasure.font = columnview1.Font
      modUtilGUI.Columnview_Columns_Set_Size(columnview1, lblmeasure)
      With Columnview1
         .Visible = True
         .Raise
         .tag = txtFindSender
      End With
   End If

End

Public Sub Person_Get()
   '-----------------------------------------------------------------
   'Pops up a list or either patients or persons who are not patients
   '-----------------------------------------------------------------

   Dim x As Integer

   Timer1.Stop()
   With columnview1
      .Clear()
      .Columns.count = 4
      .Visible = False
   End With
   If Trim(txtFindSender.text) = "" Then Return
   txtFindSender.tag = "person"
   Persons = modContactsDBI.Person_Get(Trim(txtFindSender.text), contact_type)
   ' Persons = modContactsDBI.Person_Get_By_Surname(Trim(txtFindSender.text))
   Persons.Remove("sql_in_english")
   Persons = modutil.Copy_Collection_Keyed_Sequentially(Persons)
   If Not persons.count Then Return
   For Each person In persons
      columnview1.Add(x, 0)
      columnview1[x][0] = Person!firstname & " " & Person!surname & " "
      columnview1[x][1] = Person!occupation & " "
      columnview1[x][2] = Trim(" " & Person!organisation)
      columnview1[x][3] = Trim(Person!street1 & " " & Person!street2) & " " & Person!town
      Inc x
   Next
   If person.count = 1 Then
      Person_Select() 'using the current person collection
   Else
      lblmeasure.font = columnview1.Font
      modUtilGUI.Columnview_Columns_Set_Size(columnview1, lblmeasure)
      With Columnview1
         .Visible = True
         .Raise
         .tag = txtFindSender
      End With
   End If

End

Public Sub Person_Employee_Select()
   '--------------------------------------------------------------------------
   'Selected from the list of persons or employees
   'if organisation is not null the contact_type =  const.contacttype_employee
   'else contact_type = const.contacttype_person
   'this is used by SaveInScanning to set document!originator
   '---------------------------------------------------------------------------

   Try fk_occupation = Person!fk_occupation
   fk_person = Person!fk_person
   fk_branch = person!fk_branch
   Try fk_address_person = Person!fk_address
   Try fk_town_person = Person!fk_town
   If person.Exist("fk_employee") Then
      fk_employee = person!fk_employee
   Else
      fk_employee = Null
   Endif
   lblContactDetails.text = Person!title & " " & " " & Person!firstname & " " & Person!surname
   txtDocumentTag.text = lblContactDetails.text  'fixme should not be in here
   If Not IsNull(Person!sex) Then
      lblContactDetails.text &= " (" & Person!sex & ")"
   Endif
   lblContactDetails.text &= "\n"
   If Not IsNull(person!organisation) Then
      lblContactDetails.text &= person!organisation & "  " & person!branch & "\n"
      Contact_Type = const.contacttype_employee
   Else
      Contact_Type = const.contacttype_person
   Endif
   lblContactDetails.text &= Trim(Person!street1 & " " & Person!street2) & "\n"
   lblContactDetails.text &= Person!town & " " & Person!state & " " & Person!postcode & "\n"
   lblContactDetails.text &= "Occupation: " & Person!occupation & "\n"

End

Public Sub Patient_as_sender_Select()
   '-----------------------------------------------------------------------
   'The document being filed has been sent for a patient by another patient
   '-----------------------------------------------------------------------

   Try fk_occupation = PatientAsSender!fk_occupation
   fk_person = PatientAsSender!fk_person
   Try fk_address_person = PatientAsSender!fk_address
   Try fk_town_person = PatientAsSender!fk_town
   lblContactDetails.text = PatientAsSender!title & " " & " " & PatientAsSender!firstname & " " & PatientAsSender!surname
   txtDocumentTag.text = lblContactDetails.text  'fixme should not be in here
   If Not IsNull(PatientAsSender!sex) Then
      lblContactDetails.text &= " (" & PatientAsSender!sex & ")"
   Endif
   lblContactDetails.text &= "\n"
   lblContactDetails.text &= Trim(PatientAsSender!street1 & " " & PatientAsSender!street2) & "\n"
   lblContactDetails.text &= PatientAsSender!town & " " & PatientAsSender!state & " " & PatientAsSender!postcode & "\n"
   lblContactDetails.text &= "Occupation: " & PatientAsSender!occupation & "\n"

End

Public Sub Person_Select()

   Try fk_occupation = Person!fk_occupation
   fk_person = Person!fk_person
   Try fk_address_person = Person!fk_address
   Try fk_town_person = Person!fk_town
   lblContactDetails.text = Person!title & " " & " " & Person!firstname & " " & Person!surname
   txtDocumentTag.text = lblContactDetails.text  'fixme should not be in here
   If Not IsNull(Person!sex) Then
      lblContactDetails.text &= " (" & Person!sex & ")"
   Endif
   lblContactDetails.text &= "\n"
   lblContactDetails.text &= Trim(Person!street1 & " " & Person!street2) & "\n"
   lblContactDetails.text &= Person!town & " " & Person!state & " " & Person!postcode & "\n"
   lblContactDetails.text &= "Occupation: " & Person!occupation & "\n"

End

Public Sub Reset_Keys()

   fk_organisation = Null
   fk_category_organisation = Null
   fk_town_organisation = Null
   fk_address_organisation = Null
   fk_person = Null
   fk_address_person = Null
   fk_branch = Null
   fk_employee = Null

End

Public Sub Type_Sender_Click()
   '------------------------------------------------------------------------------
   'User has clicked on the type of sender
   'either organisation, an employee of an organisation, a person or a patient
   'Use the contents of txtFindSender (if any) to poup a list of possible choices
   '------------------------------------------------------------------------------

   Select Case Last.tag
      Case "organisation"
         Contact_Type = const.contacttype_organisation
      Case "patient as sender"
         Contact_Type = const.contacttype_patient
      Case "person"
         Contact_Type = const.contacttype_person
      Case "employee"
         Contact_Type = const.contacttype_employee
   End Select
   Sender_Find()

End

Public Sub Employee_Get()
   '--------------------------------------------------------------
   'Get list of employees in their organisations
   'Note the collection is somewhat of a misnomer as it can contain
   'just organisations or employees as well
   '---------------------------------------------------------------

   Dim x As Integer

   With Columnview1
      .Clear
      .visible = False
      .Columns.count = 2
   End With
   If Trim(txtFindSender.text) = "" Then Return
   txtFindSender.tag = "employee"
   Organisations = modContactsDBI.Employees_In_Organisations_Find(Trim(txtFindSender.text))
   If Not Organisations.count Then Return
   For Each organisation In Organisations
      columnview1.Add(x, 0)
      columnview1[x][0] = organisation!wholename & " " & organisation!organisation & " " & organisation!branch 'organisation!wholename = employee wholename
      columnview1[x][1] = Trim(organisation!street1 & " " & organisation!street2) & " " & organisation!town & " " & organisation!postcode
      Inc x
   Next
   If organisations.count = 1
      Organisation_Select()
   Else
      With Columnview1
         .Visible = True
         .Raise
         .tag = txtFindSender
      End With
   End If

End

Public Sub Organisation_Get()
   '--------------------------------------------------------------------------------------------------------
   'Get list of organisations
   'always pop up the columnview, e.g user could have meant to click on another type of search option button
   'so by not auto-selecting a single organisation they can just move to the next option but and the search
   'starts all over again using the text in txtFindSender
   '--------------------------------------------------------------------------------------------------------

   Dim x As Integer

   With Columnview1
      .Clear
      .visible = False
      .Columns.count = 2
   End With
   If Trim(txtFindSender.text) = "" Then Return
   txtFindSender.tag = "organisation"
   Organisations = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Organisations_Get(Trim(txtFindSender.text)))
   If Not organisations.count Then Return
   For Each organisation In organisations
      columnview1.Add(x, 0)
      columnview1[x][0] = organisation!organisation & " " & organisation!branch
      columnview1[x][1] = Trim(organisation!street1 & " " & organisation!street2) & " " & organisation!town & " " & organisation!postcode
      Inc x
   Next
   If organisations.count Then
      With Columnview1
         .Visible = True
         .Raise
         .tag = txtFindSender
      End With
   End If

End

Public Sub Organisation_Select()
   '------------------------------------------------------------------------------
   'User selects either an organisation or a organisation employee from popup list
   '------------------------------------------------------------------------------

   Organisation_Display()

End

Public Sub Organisation_Display()

   If IsNull(organisation) Then Return
   fk_organisation = Organisation!fk_organisation
   Try fk_employee = Organisation!fk_employee
   fk_branch = Organisation!fk_branch
   lblContactDetails.text = ""
   If Not IsNull(fk_employee) Then
      lblContactDetails.text = Organisation!wholename & "\n"
   Endif
   lblContactDetails.text &= Organisation!organisation & "\n"
   lblContactDetails.text &= Organisation!branch & "\n"
   lblContactDetails.text &= Trim(Organisation!street1 & " " & Organisation!street2) & "\n"
   lblContactDetails.text &= Organisation!town & " " & Organisation!state & " " & Organisation!postcode
   fk_category_organisation = Organisation!fk_category
   If Not IsNull(fk_employee) Then
      txtDocumentTag.text = Organisation!wholename
   Else
      txtDocumentTag.text = Organisation!organisation
   Endif
   txtDocumentTag.text &= " - " & cmbDocumentDisplayAstypes.text
   txtDocumentDate.SetFocus()
Catch
   Return

End

Public Sub rbDegreeUrgency_Click()

   fk_urgency = Last.tag

End

Public Function EditArea_TextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean

   Dim bKeyValid As Boolean

   Select Case tag
      Case "document date"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid

End

Public Sub EditArea_CheckBoxes_Click()

   Select Case Last.tag
      Case "lock name"

      Case "all staff"
      Case "include deceased"
         Patient_Get
      Case "include inactive"
         Patient_Get
      Case "lock patient"
         If Last.value = False Then Patient_Clear()
      Case "lock sender"
         columnview1.Visible = False 'could be clicked whilst this is visible
         If Last.value = False Then
            Reset_Keys()
         Endif
   End Select

End

Public Sub Guess_ResultType()
   '--------------------------------------------------------------------------------------
   'Attempts to guess the type of result it will be, given the category of provider/person
   '--------------------------------------------------------------------------------------

   Try cmbRequestTypes.index = cmbRequestTypes.Find(document!request_type)
   If Error Then cmbRequestTypes.index = -1 'the document may have no designated provider type

End

Public Sub rbDisplayAs_Click()

   Message.info("you should not be in rbdisplayas_click")
   If Bexit Then Return
   iDisplay_As = Last.tag
   sTypeDocument = const.sDocumentType[iDisplay_As]
   If Last.tag = const.Document_Display_As_Result Then
      InitGui_Display_As_Result()
      If Embedded_in_form_name = "FInbox" Then HBox_DocumentType.Visible = True
      If txtDocumentTag.text <> "" Then
         txtDocumentTag.text = Replace(txtDocumentTag.text, "letter", "result")
         txtDocumentTag.text = Replace(txtDocumentTag.text, "LETTER", "RESULT")
      Endif
      If txtUserObservationName.text <> "" Then
         txtUserObservationName.text = Replace(txtUserObservationName.text, "letter", "result")
         txtUserObservationName.text = Replace(txtUserObservationName.text, "LETTER", "RESULT")
      Endif
      'Attempt to match the combo
      If Embedded_in_form_name = "FInbox" Then
         Guess_ResultType()
         txtUserObservationName.SetFocus()
      End If
   Else
      InitGui_Display_As_Letter()
      If txtDocumentTag.text <> "" Then
         txtDocumentTag.text = Replace(txtDocumentTag.text, "result", "letter")
         txtDocumentTag.text = Replace(txtDocumentTag.text, "RESULT", "LETTER")
      Endif
      If txtUserObservationName.text <> "" Then
         txtUserObservationName.text = Replace(txtUserObservationName.text, "result", "letter")
         txtUserObservationName.text = Replace(txtUserObservationName.text, "RESULT", "LETTER")
      End If
   Endif

End

Public Sub Sender_Find()

   Reset_Keys()
   lblContactDetails.text = ""
   Select Case Contact_Type
      Case const.contacttype_organisation
         Organisation_Get()
      Case const.contacttype_patient    ', const.contacttype_person
         Patient_As_Sender_Get()
      Case const.contacttype_employee
         Person_Employee_Get()
   End Select

End

Public Sub Document_SignOff(Doc As Collection)
   '--------------------------------------------------------------------
   'Record who signed off the document, when and with comment (optional)
   'FIXME NEEDS NOW A FDocumentMetadataDBI
   '--------------------------------------------------------------------

   Dim signed_off As New Collection

   signed_off!fk_staff = modDBConnect.currentUser!fk_staff
   signed_off!fk_document = Doc!pk_document
   signed_off!date = Now()
   signed_off!pk = modInboxDBI.Document_SignOff(signed_off)

End

Public Sub Valid_Document()
   '-----------------------------------------------
   'Check document has adequate information to file
   '-----------------------------------------------

   Dim sMsg As String

   If txtFilename.text = "" Then Error.Raise("Please select a document to file")
   If IsNull(fk_patient) Then
      txtPatient.SetFocus()
      Error.Raise("No patient selected")
   Endif
   If IsNull(fk_staff_destination) And cmbStaffType.index = -1 Then
      txtRecipient.SetFocus()
   Endif
   If Embedded_in_form_name = "Scanning" Then
      If IsNull(fk_organisation) Then
         If IsNull(fk_person) Then
            txtfindSender.SetFocus()
            sMsg = "Each scanned or faxed document will have been sent by someone, be they a person, organisation, or employee of an organisation "
            "or perhaps even a patient.\n\nYou must allocate documents before filing."
            Error.Raise(sMsg)
         Endif
      Endif
   End If

   If Not IsDate(txtDocumentDate.text) Then
      sMsg = "Please enter the date the document was written.\n\n"
      "This should be in the format dd/mm/yyyy, e.g 01/10/2010.\n\n"
      "If you are filing this from the Inbox, you will have to return the document to clerical for re-allocation"
      txtDocumentDate.SetFocus()
      Error.Raise(sMsg)
   Endif
   ' If cmbDocumentTypes.index = - 1 And rbDisplayAsResult.value = True And Embedded_in_form_name <> "Scanning" Then
   '    sMsg = "When the clerical staff allocate this document, they considered it to be a 'Result.\n\n"
   '    "Please select the type of result you wish to file from the drop down list "
   '    "and then allocate a request name before proceeeding.\n\n"
   '    "If a mistake has been made and this is meant to be a letter you can "
   '    "click on the letter option button to change it's designation to that of a letter."
   '    cmbRequestTypes.SetFocus()
   '    Error.Raise(sMsg)
   ' Endif

End

Public Function Document_Filename_Construct(document As Collection, Optional the_file As String) As String
   'fixme - put in module somewhere this type of routine shared with Fclinical see FClinical.tbJoin_click()

   Dim newfilename As String
   Dim pk As Variant

   If document.Exist("pk_document") Then pk = document!pk_document
   If document.Exist("pk") Then pk = document!pk
   If IsNull(the_file) Then the_file = txtFilename.Text
   If Trim(txtPatient.text) <> "" Then
      newfilename &= modutil.Filename_Protect(Trim(txtPatient.text)) & "." & modutil.DateString_Encode(lblbirthdate.text) & "." & Str(Document!fk_patient) & "."
   End If
   newfilename &= modutil.Filename_Protect(Document!originator) & "." & Str$(pk) & "."
   newfilename &= File.Ext(the_file)
   Return Lower(newfilename) 'ensure all in lower case

End

Private Function Document_Filename_Construct_AllStaff(document As Collection) As String

   Dim newfilename As String

   newfilename = "memo.allstaff." & modutil.Filename_Protect(Trim(txtDocumentTag.text)) & "." & Format$(Now, "yyyymmddhhnnss")
   newfilename &= modUtil.Filename_Protect(document!originator) & "."
   newfilename &= File.Ext(txtFilename.text)
   Return Lower(newfilename) 'ensure all in lower case

End

Public Sub cmbStafftype_Click()

   txtRecipient.text = ""

End

Public Sub chkCodeDocument_Click()

   If chkCodeDocument.value = False Then VBox_ColumnView.Visible = False

End

Public Sub Form_Resize()

   If columnview1.Visible Then
      columnview1.top = ReferenceHboxForTopColumnview.top + ReferenceHboxForTopColumnview.Height
   Endif

End

Public Sub cmbDocumentDisplayAsTypes_Click()

   If Bexit Then Return
   iDisplay_As = Document_Display_As_Types[cmbDocumentDisplayAstypes.index]!pk
   If iDisplay_As = const.Document_Display_As_Result Then
      InitGui_Display_As_Result()
      If Embedded_in_form_name = "FInbox" Then HBox_DocumentType.Visible = True
      If txtDocumentTag.text <> "" Then
         txtDocumentTag.text = Replace(txtDocumentTag.text, "letter", "result")
         txtDocumentTag.text = Replace(txtDocumentTag.text, "LETTER", "RESULT")
      Endif
      If txtUserObservationName.text <> "" Then
         txtUserObservationName.text = Replace(txtUserObservationName.text, "letter", "result")
         txtUserObservationName.text = Replace(txtUserObservationName.text, "LETTER", "RESULT")
      Endif
      'Attempt to match the combo
      If Embedded_in_form_name = "FInbox" Then
         Guess_ResultType()
         txtUserObservationName.SetFocus()
      End If
   Else
      InitGui_Display_As_Letter()
      If txtDocumentTag.text <> "" Then
         txtDocumentTag.text = Replace(txtDocumentTag.text, "result", "letter")
         txtDocumentTag.text = Replace(txtDocumentTag.text, "RESULT", "LETTER")
      Endif
      If txtUserObservationName.text <> "" Then
         txtUserObservationName.text = Replace(txtUserObservationName.text, "result", "letter")
         txtUserObservationName.text = Replace(txtUserObservationName.text, "RESULT", "LETTER")
      End If
   Endif

End
