' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'
' Just an editor and nothing else
'-----------------------------------------------------------------------

Public bBold As Boolean
Public bExit As Boolean
Public editor_contents As String 'fixme make me an array/push/pop
Public CurAt As Integer
Public Paragraph_At As Integer
Public character_at As Integer 
Public iZoom As Integer
Public default_Zoom As Integer
Public check_state As Boolean
Public FDraw As FDrawEditor
Private hObs As Observer
Private Parent_VBox_Edit_ARea As Vbox 'to allow the EditArea change event in the parent form
Public CtrlDown As Boolean
Public FnDown As Boolean
Private copy_of_Editor_text As String
Private data_changed As Boolean 'if true the content of the notes has changed.
Private Parent_Form As String 

Public Sub Set_Copy_of_Editor_text(sText As String)
   
   copy_of_Editor_text = sText  
   
End

Public Function Get_Copy_of_Editor_text() As String
   
   Return copy_of_Editor_text 
   
End

Public Function Get_Copy_of_Editor_RichText() As String
   
   Return teNotes.RichText 
   
End

Public Function get_data_changed() As Boolean
   
   Return data_changed   
   
End

Public Sub DataChange_Update_Indicators(flag As Integer)
   '-----------------------------------------------------------------------------------
   'Removes Or sets the red border To indicate if data is changed or note, resets flags
   'If this editor is embedded in another form's editing area, then that forms
   'static existance is used to set the editing area's datachanged on the calling form
   '-----------------------------------------------------------------------------------
   
   If Parent_Form = "FRecallLetterTemplates" Then
      FRecallLetterTemplates.Data_Changed(True)
      Return 
   Endif
   If flag Then 
      If Parent_Form = "FStaffMessages" Then
         Parent_VBox_Edit_ARea.Padding = 1
      Else
         Vbox_ConsultNotes.BackGround = Color.Red
         Vbox_ConsultNotes.Padding = 1
         data_changed = True  
      Endif
   Else
      If Parent_Form = "FStaffMessages" Then
          Parent_VBox_Edit_ARea.Padding = 0
      Else
         Vbox_ConsultNotes.BackGround = Color.Gray
         Vbox_ConsultNotes.Padding = 1
         tlsuggestions.text = ""
         data_changed = False 
      Endif
   End If
   
End 

Public Sub teNotes_Change()
   
   If bExit Then Return
   '-------------------------------------------------------------
   'DO NOT be smart and make me Last (ie don't use Last.whatever)
   'this change event is called external to this form
   'see FInboxDocumentPage.Editor_Init()
   '-------------------------------------------------------------
   If Trim(teNotes.text) = "" Then
      '--------------------------------------------------------------------
      'If there is not text, this dosn't mean that the data hasn't changed
      'e.g it could have already been saved, and just deleted = changed
      'Each time this parent's form saves the data, it sets:
      'copy_of_Editor_text to the last, saved text
      '--------------------------------------------------------------------
      If copy_of_Editor_text = "" Then
         DataChange_Update_Indicators(False)
      Else
         DataChange_Update_Indicators(True)
      End If
   Else
      DataChange_Update_Indicators(True)
   End If
   
End

Public Sub Form_Load()
   
End

Public Sub Init(PF As String, Optional ParentVboxEditArea As Vbox)
   
   Parent_VBox_Edit_Area = ParentVboxEditArea
   Parent_Form = PF 
   
End

Public Sub Editor_Fonts_Reset()
   '------------------------------------------------------------
   'Clears any font attributes ie saves clicking muliple buttons
   '------------------------------------------------------------
   
   Object.Lock(btnBold)
   Object.Lock(btnItalic)
   Object.Lock(btnUnderline)
   Object.Lock(btnAlignLeft)
   Object.Lock(btnAlignCenter)
   Object.Lock(btnAlignRight)
   Object.Lock(btnAlignJustify)
   ' Object.Lock(cmbFonts)
   Object.Lock(SpinBox1)
   Object.Lock(ColourButton1)
   btnBold.Value = False
   btnItalic.Value = False
   btnUnderline.Value = False
   
   btnAlignLeft.value = False
   btnAlignCenter.value = False
   btnAlignJustify.Value = False 'what is this
   btnAlignRight.value = False
   'FIXME put in the default font
   'put in black as default colour
   teNotes.Format.Font.Bold = False
   teNotes.Format.Font.Italic = False
   teNotes.Format.Font.Underline = False
   teNotes.Format.Font.StrikeOut = False
   teNotes.Format.Alignment = Align.Left
   ColourButton1.Color = Color.Black
   teNotes.Format.Color = Color.Black
   Object.UnLock(btnBold)
   Object.UnLock(btnItalic)
   Object.UnLock(btnUnderline)
   
   Object.UnLock(btnAlignLeft)
   Object.UnLock(btnAlignCenter)
   Object.UnLock(btnAlignRight)
   Object.UnLock(btnAlignJustify)
   ' Object.UnLock(cmbFonts)
   Object.UnLock(SpinBox1)
   Object.UnLock(ColourButton1)
   
End

Public Sub Fonts_Fill_Combo()
   ' Dim sFont As String
   ' For Each sFont In Fonts
   '   cmbFonts.add(sFont)
   ' Next
   
End

Public Sub ColourButton1_Change()
   
   teNotes.Format.Color = ColourButton1.Color
   
End

Public Sub SpinBox1_Change()
   
   teNotes.Format.Font.Size = Last.Value
   teNotes.SetFocus
   
End

Public Sub cmbFonts_Click()
   
   teNotes.Format.Font.Name = Last.text 
   teNotes.SetFocus
   
End

Public Sub tenotes_KeyPress()
   
   Dim CtrlDown As Boolean
   Dim FnDown As Boolean
   ' If Key.code = Key.down And listview2.Visible Then
   '   listview2.MoveFirst
   '   listview2.SetFocus 
   '   listview2.Item.Selected = True
   '   Return 
   ' End If
   'FIXME MERGE ME WITH EDITORbUTTONS_CLICK()
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
            ' Case Asc("B") 'fixme decide on keys for formattiing.
            '   teNotes.Format.Font.Bold = Not (bBold)
         Case Asc("L")
            teNotes.Format.Alignment = Align.Left
         Case Asc("M")
            teNotes.Format.Alignment = Align.Center
         Case Asc("R")
            teNotes.Format.Alignment = Align.Right
         Case Asc("M")
         Case Asc("w") 'WIPE fixme put in docs
            backup()
            teNotes.Clear()
            tlsuggestions.Text = ""
         Case Asc("O") 'OOPS fixme implement me
         Case Asc("Z")
            If teNotes.text = "" Then
               teNotes.RichText = editor_contents.text()
            End If
            
      End Select
   End If
   
End

Public Sub teNotes_KeyRelease()
   
   If bExit Then Return 
   Try CtrlDown = Key.Control
   If CtrlDown Then
      ' Select Case Key.code
      ' Case Asc("F")
      '    mnuForms.Popup()
      '    Return 
      ' End Select
   End If
   
End

Public Sub teNotes_Paste()
   '    Dim spicPath As String 
   '    Stop Event
   '  If Drag.Type = Drag.Image Then
   '       sPicPath = "<TABLE WIDTH=100%><TR><TD WIDTH=100%><P><IMG SRC='" & Drag.Source.tag & "'  " 
   '       sPicPath &= " NAME='graphics' ALIGN=LEFT WIDTH=" & Str(Drag.Data.W) & " HEIGHT=" & Str(Drag.Data.H) & " BORDER=0></TR></TD></TABLE><BR><BR>" '<BR CLEAR=Left>
   '       teNotes.text &= "%image%"
   '       teNotes.richtext = Replace$(teNotes.richtext, "%image%", sPicPath)
   '  End If
   
End 

Public Sub EmbeddedForm_Close()
   '   '--------------------------------------
   '   'Closes any form embedded in the editor
   '   'reloads the main HSplit layout
   '   '--------------------------------------
   '    Dim Charpos As Integer
   '    charpos = InStr(teNotes.text, sShortCutText)
   '    EmbeddedForm.Close()
   ' '   HSplit1.Layout = Settings["Consult Notes/Hsplit"]
   '    teNotes.Richtext = Replace$(teNotes.richtext, sShortCutText, "")
   '    teNotes.pos = charpos - 1
   '    teNotes.Visible = True
   '    teNotes.SetFocus()
   '    'VBox_PastHistory.Visible = True
   ' '   ConsultActionsList_Update()
   ' '   Vbox_Actions.Visible = True
   '    HBox_WordProcessorButtons.Visible = True
   '    lblTodaysNotes.Visible = True
   ' '   Separator1.Visible = True
   '    tbHideForm.Visible = False 'FIXME CHANGE MY NAME
   
End

Public Sub Drawing_Editor_Show()
   ' If FDraw.Visible Then
   '   FDraw.Hide()
   '   FDraw.Ignore = True
   '   teNotes.Visible = True
   '  Else
   '    teNotes.Visible = False
   '    FDraw.Visible = True
   '   ' FDraw_Resize()
   '  End If
   
End

Public Sub teNotes_Drop()
   
   teNotes_Paste
   
End

Public Sub DrawEditor_ToolButtons_Click()
   
   Stop Event
   Select Case Last.tag
      Case "hide form"
         DrawEditor_Hide()
      Case "insert picture"
         Insert_Picture()
   End Select
   
End

Public Sub DrawEditor_Hide()
   '-------------------------------------------------------------
   'Editor being closed without inserting a picture, remove .draw
   '-------------------------------------------------------------
   
   teNotes.RichText = Replace$(teNotes.text, ".draw", "")
   FDraw.Hide()
   teNotes.Show()
   
End

Public Sub Insert_Picture1(sSource As String)
   '--------------------------------------------------
   'Inserts a picture into the form. This can come
   'from either a cut/paste/import or from the
   'draw 
   'Creates an event observer.
   'this will bug out if user clicks save in  Fdraw 
   'without selecting image
   '--------------------------------------------------
   
   Dim s As String
   Dim pos As Integer = 2
   Dim count As Integer
   Dim lastpos As Integer
   Dim parmarkpos As Integer
   Dim NewImage As Image
   Dim pic As Picture
   Dim sPicPath As String
   Dim tempfile As String
   Dim h As Integer
   Dim w As Integer
   Dim tempstring As String
   
   tempFile = Temp() & ".png"  
   Select Case sSource
      Case "editor"
         ' '------------------------------------------------
         ' 'Picture is being inserted from the draw editor
         ' 'It is either a new picture, or one being edited
         ' '------------------------------------------------
         ' If Fdraw.bediting = True Then
         '    '-------------------------------------------------
         '    'If editing get the handle of the picture box with
         '    'the temp file, and update that picture
         '    'Hbox_pictures = the container of any pictures
         '    'in the editing area
         '    '-------------------------------------------------
         '    For Each PicBox In Hbox_pictures.Children
         '        If PicBox.tag = Fdraw.sPicturePath Then
         '           Fdraw.$hImage.Save(Picbox.Tag)
         '           Picbox.Picture = Picture1.Load(Picbox.Tag)
         '          
         '           EmbeddedForm_Close()
         '           Return
         '        End If
         '     Next
         '  Else
         '      '-----------------------------------------------------
         '      'Not editing, so is a new picture being returned
         '      'from the draw editor
         '      'Add a new picture box and observer for events
         '      'Use the Save routine from FDraw to create a png
         '      'file with this image (TempFile)
         '      '-----------------------------------------------------
         '      PicBox = New PictureBox(Hbox_pictures)
         '      PicBox.Border = Border.Plain
         '      hObs = New Observer(Picbox) As "RequestPictures"
         '      Fdraw.$hImage.Save(Tempfile)
         '      EmbeddedForm_Close()
         '  End If
      Case "clipboard"
         '----------------------------------------------------------
         'If source of paste is a clipboard, validate it it an image
         '----------------------------------------------------------
         If Clipboard.type = Clipboard.Image Then
            ' PicBox = New PictureBox(Hbox_pictures)
            'PicBox.Border = Border.Plain
            '' hObs = New Observer(Picbox) As "RequestPictures"
            NewImage = Clipboard.Paste()
            NewImage.Save(Tempfile)
            pic = Picture[tempfile]
            h = Abs(pic.Height * 2 / 3)
            w = Abs(pic.width * 2 / 3)
            h = pic.Height
            w = pic.width
            sPicPath = "<TABLE WIDTH=100%><TR><TD WIDTH=100%><P><IMG SRC='" & TempFile & "'  " 
            sPicPath &= " NAME='graphics' ALIGN=LEFT WIDTH=" & Str(w) & " HEIGHT=" & Str(h) & " BORDER=0></TR></TD></TABLE><BR><BR>"  '<BR CLEAR=Left>
            teNotes.richtext = Replace$(teNotes.richtext, ".pic", sPicPath)
            s = teNotes.RichText
            
            Do Until count = Paragraph_At + 1
               parmarkpos = InStr(s, "<p>", lastpos)
               lastpos = parmarkpos + 1
               Inc count
            Loop
            'now are at start of paragraph the cursor is on
            tempstring = Left(teNotes.RichText, lastpos + pos + 2)
            tempstring &= sPicPath & Right(teNotes.RichText, Len(teNotes.RichText) - lastpos - pos - 2)
            teNotes.RichText = tempstring   
         Else
            '-------------------------------------------
            'Not an image, nothing to paste leave routine
            '--------------------------------------------
            Return
         End If
   End Select
   ' '-----------------------
   ' 'Now deal with the image whatever the source
   ' '-----------------------
   ' RP.temppath = tempFile
   ' With PicBox
   '    .Expand = False
   '    .stretch = True
   '    .picture = Picture1.Load(Tempfile)
   '    .tag = Tempfile
   ' End With
   ' currentRequestForm.pictures.Add(RP, currentRequestForm.pictures.count)
   '  
   ' 
   
End

Public Sub Insert_Picture()
   'FIX ME, PUT IN APPROPRIATE HEIGHT.WIDTH FROM THE DRAW FORM.
   
   Dim pic As Picture
   Dim sPicPath As String
   Dim tempFile As String
   Dim h As Integer
   Dim w As Integer
   
   If Not IsNull(Fdraw.$hImage) Then 
      tempFile = Temp() & ".png"
      Fdraw.$hImage.Save(Tempfile)
      pic = Picture[tempfile]
      h = Abs(pic.Height * 2 / 3)
      w = Abs(pic.width * 2 / 3)
      sPicPath = "<P><IMG SRC='" & TempFile & "'  " 
      sPicPath &= " NAME='graphics' ALIGN=LEFT WIDTH=" & Str(w) & " HEIGHT=" & Str(h) & " BORDER=0><BR CLEAR=Left><BR><BR>" 
      teNotes.richtext = Replace$(teNotes.richtext, ".draw", sPicPath)
   End If
   EmbeddedForm_Close()
   
End

Public Sub mnuNotes_Click()
   
   Select Case Last.tag
      Case "paste"
         Insert_Picture1("clipboard")
   End Select
Catch
   Return 
   
End

Public Sub FDraw_Create_Observer()
   'just a routine to overide the btn_save event of Fdraw
   
   Dim hToolButton As ToolButton
   
   hToolbutton = Fdraw.btnSave
   hObs = New Observer(hToolbutton) As "DrawEditor_ToolButtons"
   ' hToolbutton = Fdraw.tbHideForm
   ' hObs = New Observer(hToolbutton) As "DrawEditor_ToolButtons"
   
   ' hToolButton = FRequests.tbHideForm
   'hObs = New Observer(hToolbutton) As "RequestForm_ToolButtons"
   ' ' Print "in the consult notes form now"
   ' For Each hCtrl In Fdraw.Children
   '   Print hCtrl.Name, "was the control"
   '      ' If hCtrl Is ComboBox Then 
   '      '    hCombo = hCtrl
   '      '    hObs = New Observer(hCombo) As "Editor_ComboCtrl"
   '      ' Else 
   '      '    If hCtrl Is ToolButton Then 
   '      '    hToolbutton = hCtrl
   '      '    hObs = New Observer(hToolbutton) As "Editor_ToolButtons"
   '      '    End If
   'r      ' End If
   '      
   '   Next 
   
End

Public Sub Editor_Clear()
   '-----------------------------------
   'Clears the text editor with warning
   '-----------------------------------
   
   If bExit Then Return 
   '  Select Case message.Warning("Caution:\n\nTo continue will entirely erase your notes.\n\nAre you sure?", "Yes - erase notes", "No")
   ' Case 1
   bExit = True   
   teNotes.Clear()
   tlsuggestions.Text = ""
   bExit = False
   ' End Select
   
End

Public Sub EditorButtons_Click()
   
   Dim curpos As Integer = teNotes.pos
   '---------------------------------------------
   'User has clicked on one of the editor buttons
   '---------------------------------------------
   Select Case Last.tag
      Case "spell"
         'don't uncomment this line, I'm using this button now as spellchecker
         'this works, but sets the Line spacing too wide. 
         ' teNotes.Insert(".!@.")
         ' teNotes.RichText = Replace(teNotes.RichText, ".!@.", "<ul type='disc'><LI> </LI></UL>") 
         
         ' teNotes.Pos = curpos
      Case "about"
         Balloon.Info("A simple TextEditor adapted from an example by\nFabien Bodard (gambix@users.sourceforge.net)\nand Benoît Minisini", Last)
      Case "erase"
         Editor_Clear()
      Case "bold"
         teNotes.Format.Font.Bold = Last.Value
      Case "italic"
         teNotes.Format.Font.Italic = Last.Value
      Case "underline"
         teNotes.Format.Font.Underline = Last.Value
      Case "strikeout"
         teNotes.Format.Font.StrikeOut = Last.Value
      Case "align left"
         teNotes.Format.Alignment = Align.Left
      Case "align centre"
         teNotes.Format.Alignment = Align.Center
      Case "align right"
         teNotes.Format.Alignment = Align.Right
      Case "justify"
         teNotes.Format.Alignment = Align.Justify  
      Case "load file"
         ' Dialog.Title = "Select Image File"
         ' Dialog.Filter = ["*.png", "Image Files", "*", "All files"]
         ' If Dialog.OpenFile() Then Return
         ' Print Dialog.Path 
         ' FImageGet.$hImage = Image.Load(Dialog.Path)
         ' FImageGet.ShowModal()       
         ' Insert_Picture1("clipboard")
      Case "dot point"
      Case "hide form"
         EmbeddedForm_Close()
   End Select
   
End

Public Function backup()
   '-----------------------------------------
   'FIXME BETTER NAME 
   'make me a stack
   'Saves the editor contents before erasing
   'just in case user did it by accident
   '-----------------------------------------
   
   editor_contents = teNotes.RichText()
   
End

Public Sub teNotes_Cursor()
   
   Object.Lock(btnBold)
   Object.Lock(btnItalic)
   Object.Lock(btnUnderline)
   Object.Lock(btnAlignLeft)
   Object.Lock(btnAlignCenter)
   Object.Lock(btnAlignRight)
   Object.Lock(btnAlignJustify)
   Object.Lock(SpinBox1)
   Object.Lock(ColourButton1)
   
   btnBold.Value = teNotes.Format.Font.Bold
   btnItalic.Value = teNotes.Format.Font.Italic
   btnUnderline.Value = teNotes.Format.Font.Underline
   
   Select Case teNotes.Format.Alignment
      Case Align.Left
         btnAlignLeft.Value = True
      Case Align.Right
         btnAlignRight.Value = True
      Case Align.Center
         btnAlignCenter.Value = True
      Case Align.Justify
         btnAlignJustify.Value = True
      Case Align.Normal
         btnAlignLeft.Value = True ' If the displayed langage is left to right written, that's OK. Elsewhere...
   End Select
   
   ColourButton1.Color = teNotes.Format.Color
   ' cmbFonts.Text = teNotes.Format.Font.Name
   SpinBox1.Value = teNotes.Format.Font.Size
   
   Object.UnLock(btnBold)
   Object.UnLock(btnItalic)
   Object.UnLock(btnUnderline)
   Object.UnLock(btnAlignLeft)
   Object.UnLock(btnAlignCenter)
   Object.UnLock(btnAlignRight)
   Object.UnLock(btnAlignJustify)
   'Object.UnLock(cmbFonts)
   Object.UnLock(SpinBox1)
   Object.UnLock(ColourButton1)
   
End

Public Sub tbLoadFile_Click()
   '-----------------------------------------------------------
   'Load a file and insert into the editor either image or text
   'todo -the text
   '-----------------------------------------------------------
   
   Dialog.Title = "Select Image File"
   Dialog.Filter = ["*.png", "Image Files", "*", "All files"]
   If Dialog.OpenFile() Then Return
   '----------------------------------------------------
   'Ok, check this is a valid image (e.g they could have
   'changed the file selector to any file
   '-----------------------------------------------------
   Try FImageGet.$hImage = Image.Load(Dialog.Path)
   If Not Error Then 
      FImageGet.ShowModal()       
      Insert_Picture1("clipboard")
   Else
      Try teNotes.Insert(File.Load(Dialog.Path))
      If Error Then
         Message.Info("An error occurred whilst trying to insert the file.\n")
      End If
   End If
   
End

Public Sub Form_LostFocus()
   
   '  Message.info("Editor lost focus")
   
End

Public Sub ComboBox1_Click()
   
End
