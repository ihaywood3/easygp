' Gambas class file

' Public Sub RenderPage()
'   
'   Dim hPic As Picture 
'   Dim Bc As Integer 
'   
'   hPdf.Zoom = CurrentZoom
'   LblInfo.Text = CurrentPage & " " & ("From") & " " & hPdf.Count  
'   
'   ViewPort.Scroll(0, 0)
'   hPic = hPdf[CurrentPage].Image.Picture
' 
'   If TxtFind.Text <> "" Then 
'   
'     hPdf[CurrentPage].Find(TxtFind.Text)
'     Paint.Begin(hPic)
'     Paint.Brush = Paint.Color(Color.RGB(0, 0, 255, 192))
'     For Bc = 0 To hPdf[CurrentPage].Result.Count - 1
'       Paint.Rectangle(hPdf[CurrentPage].Result[Bc].Left, hPdf[CurrentPage].Result[Bc].Top, hPdf[CurrentPage].Result[Bc].Width, hPdf[CurrentPage].Result[Bc].Height)
'     Next 
'     Paint.Fill
'     Paint.End
'   
'   End If
' 
'   PBox.Picture = hPic 
'   PBox.Resize(hPdf[CurrentPage].Width, hPdf[CurrentPage].Height)
'   Form_Resize()
'   
' Catch
' 
'   Balloon.Error(Error.Text, TxtFind)
'   300
' End

' Gambas class file

'***************************************************************************
'
'  FMain.class
'
'  PdfViewer gb.pdf component example
'
'  (C) 2007 Daniel Campos Fern√°ndez <dcamposf@gmail.com>
'  with minor modifications Dr Richard Terry 2010
'
'  This program is free software; you can redistribute it and/or modify
'  it under the terms of the GNU General Public License as published by
'  the Free Software Foundation; either version 1, or (at your option)
'  any later version.
'
'  This program is free software; you can redistribute it and/or modify
'  it under the terms of the GNU General Public License as published by
'  the Free Software Foundation; either version 1, or (at your option)
'  any later version.
'
'  This program is distributed in the hope that it will be useful,
'  but WITHOUT ANY WARRANTY; without even the implied warranty of
'  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'  GNU General Public License for more details.
'
'  You should have received a copy of the GNU General Public License
'  along with this progRenderPage(FoundText)ram; if not, write to the Free Software
'  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
'
'***************************************************************************
Private timer_count As Integer
Public hPdf As New PdfDocument
Public cIndex As Integer 
Public CurrentPage As Integer 
Public CurrentZoom As Float = 1.0
Private bExit As Boolean
Private pdf_path As String 
Private Embedded_In_Form As String
Private currentconsult As CConsult
Private currentSearchResult As Short = 0 'Contains the information which of the search results on this page is marked
Private NumberOfSearchResults As Integer
Private currentSearchResultSynonyms As Short = 0
Private Product_Information_Dir As String
Private Synonyms As New String[20, 20]

Public Sub Init(Optional cons As CConsult)
   
   currentconsult = cons
   
End

Public Sub Init_Drugs_Browser()
   Dim x As Integer
   Dim sfile As String 
   Dim picTag As Picture
   Dim TextString As String
   Dim TextString2 As String
   Dim count As Integer = 0
   Dim count2 As Integer = 0
   Dim WordGroups As New String[]
   Dim WordsSeperate As New String[]
   
  Hbox_Buttons.Visible = False
  Hbox_DrugsBrowser.Visible = True  
   If Not modDBConnect.IsAdmin Then 
      Product_Information_Dir = modAdminDBI.Config_Get("product_information_directory", "", Null, modDBConnect.currentUser!fk_clinic)
   Endif
   
   WordGroups = Split(Replace(file.load("~/svn/easygp/trunk/client/.src/clinical/prescribing/SynonymList.txt"), "\n", ""), "/")
   For Each TextString In WordGroups
      WordsSeperate = Split(TextString, ",")
      For Each TextString2 In WordsSeperate
         Synonyms[count, count2] = TextString2
         If count2 = 0 Then combobox1.Add(Synonyms[count, 0], count)
         Inc count2
      Next
      Synonyms[count, count2] = "!"
      count2 = 0
      Inc count
   Next
   ComboBox1.Visible = True   
   
End

Public Sub ComboBox1_Click()

   Dim count As Integer = 0

   While ComboBox1.Text <> Synonyms[count, 0] Or count = 19
      Inc count
   Wend
   Wait
   Inc Application.Busy
   If ComboBox1.Text = Synonyms[count, 0] Then
      FindSynonymeFromArray(Synonyms, count)
   Endif
   Dec Application.Busy

End

Public Sub Set_Filename(path As String)
   
   pdf_path = path
   
End

Public Sub Set_Embedded_Form(F As String)
   
   Embedded_In_Form = F  
   
End

Public Sub Render_From_Another_Form()
   ' CurrentZoom = 1
   
   CurrentPage = 1
   RenderPage()
   BtPrev.Enabled = False 
   If hPdf.Count > 1 Then 
      BtNext.Enabled = True 
   Else 
      BtNext.Enabled = False 
   End If
   btZoomIn.Enabled = True 
   btZoomOut.Enabled = True 
   btZoomOut.Enabled = True 
   pBox.Visible = True 
   TxtFind.Enabled = True 
   
   tvIndex.Clear()
   If hPdf.HasIndex Then 
      tvIndex.Visible = True 
      AddIndex(0, "")
   Else 
      tvIndex.Visible = False 
   End If
   
End

Public Sub Load_PDF(sPath As String)
   'fixme, need better logging of bad pdf's for the INBOX/Display
   
   Dim smsg As String
   
   bExit = True 
   pdf_path = spath
   hPdf.Close()
   Try hPdf.Open(sPath)
   If Error Then 
      If Error.text = "File not found" Then
         sMsg = "The file you are trying to view was not found.\n\n"
         "There could be several causes, maybe the documents directory is not correctly mounted to your local machine.\n\n"
         "Please consult with your system administrator for further help."
         Message.Error(sMsg, "Ok") 
         Select Case Embedded_In_Form
            Case "FInbox"
               FInbox.Disable_Filing()
         End Select
         
      Endif
      Return 
   End If
   CurrentPage = 1
   txtGotoPage.text = CurrentPage
   RenderPage()
   bExit = False   
   BtPrev.Enabled = False 
   If hPdf.Count > 1 Then 
      BtNext.Enabled = True 
   Else 
      BtNext.Enabled = False 
   End If
   btZoomIn.Enabled = True 
   btZoomOut.Enabled = True 
   btZoomOut.Enabled = True 
   pBox.Visible = True 
   TxtFind.Enabled = True 
   
   tvIndex.Clear()
   If hPdf.HasIndex Then 
      tvIndex.Visible = True 
      AddIndex(0, "")
   Else 
      tvIndex.Visible = False 
   End If  
   
End

Public Sub Save_PDF()
   '---------------------------------------------------------------------------
   'Save the pdf as a file optionally provider the filename as the patient name
   '---------------------------------------------------------------------------
   
   Dim filename As String
   
   Dialog.Filter = ["*.pdf", "PDF"]
   
   If Not IsNull(currentconsult) Then
      filename = Replace(Trim(currentconsult!patient!wholename), " ", "-") & "_" & Format(currentconsult!patient!birthdate, "dd-mm-yyyy")
      filename &= "_exported_" & Format(Now, "dd-mm-yyyy") ' & ".pdf"
      Dialog.title = "Export PDF for " & currentconsult!patient!wholename
      Dialog.Path = User.home &/ filename 
   Else
      Dialog.title = "Save the PDF"
   Endif
   
   If Dialog.SaveFile() Then Return    'user cancels save
   
   If File.Ext(Dialog.Path) <> "pdf" Then
      Dialog.Path &= ".pdf"
   Endif
   Try Copy pdf_path To Dialog.Path                                                    'try and pdf file to new name
   If Error Then                                                                       'encountered an error, probably file exists
      Try Move pdf_path To Dialog.Path                                                 'Try moving file to the filename
      If Error.code = const.File_ioError_FileExists Then                               'error was file exists
         If Message.Question("Overwrite existing file?", "Yes", "No") = 2 Then Return  'prompt user "Overwrite this?"
         Kill Dialog.Path                                                              'delete previous file of same name
         Try Copy pdf_path To Dialog.Path                                              'Try again, if error > catch and give up
      Endif
   Endif
Catch
   Message.Info(Error.Text)
   
End

Public Sub BtOpen_Click()
   
   If Dialog.OpenFile(False) Then Return 
   Load_PDF(Dialog.path)
   
End

Public Function AddIndex(nItem As Integer, pItem As String) As Integer 
   
   Dim pR As String  
   Dim iPage As Integer
   
   Do
      iPage = 1
      Try iPage = hPdf.Index.Data.Page
      If Error Then Print Error.Text
      pR = nItem & "-" & iPage
      tvIndex.Add(nItem & "-" & iPage, hPdf.Index.Title, Null, pItem)
      Inc nItem
      If hPdf.Index.HasChildren Then 
         hPdf.Index.MoveChild()
         nItem = AddIndex(nItem + 1, pR)
         hPdf.Index.MoveParent()
      End If
   Loop Until hPdf.Index.MoveNext()
   
   Return nItem
   
End

Public Sub tvIndex_Click()
   
   CurrentPage = Mid(tvIndex.Current.Key, InStr(tvIndex.Current.Key, "-") + 1)
   BtPrev.Enabled = True 
   BtNext.Enabled = True 
   If CurrentPage = 1 Then BtPrev.Enabled = False 
   If CurrentPage = hPdf.Count Then BtNext.Enabled = False 
   RenderPage() 
   
End

Public Sub RenderPage(Optional FoundText As String)
   
   Dim hPic As Picture 
   Dim Bc As Integer 
   
   If CurrentZoom > 0.0 Then 
      hPdf.Zoom = CurrentZoom
   Else
      Message.Error("Can't set zoom to " & CurrentZoom, "OK")
      Log.ErrorMsg("Tried to set PDF zoom to " & CurrentZoom)
   Endif
   
   LblInfo.Text = " of" & " " & hPdf.Count  
   txtGotoPage.text = CurrentPage
   If currentSearchResult = 0 And currentSearchResultSynonyms = 0 Then
      ViewPort.Scroll(0, 0)
   Endif
   
   hPic = hPdf[CurrentPage].Image.Picture
   
   If currentSearchResult > 0 And FoundText <> "" Then        ' resets the mark on the current search result
      hPdf[CurrentPage].Find(FoundText)
      Draw.Begin(hPic)
      Draw.FillColor = Color.Red
      Draw.FillStyle = Fill.Dense12
      Draw.Rect(hPdf[CurrentPage].Result[currentSearchResult - 1].Left, hPdf[CurrentPage].Result[currentSearchResult - 1].Top, hPdf[CurrentPage].Result[currentSearchResult - 1].Width, hPdf[CurrentPage].Result[currentSearchResult - 1].Height)
      ViewPort.ScrollY = ViewPort.ScrollHeight * (hPdf[CurrentPage].Result[currentSearchResult - 1].Top / Draw.Height) 
      Draw.End()
      PBox.Picture = hPic 
   Endif
   
   If currentSearchResultSynonyms > 0 And FoundText <> "" Then        ' resets the mark on the current search result for synonyms
      hPdf[CurrentPage].Find(FoundText)
      Draw.Begin(hPic)
      Draw.FillColor = Color.Red
      Draw.FillStyle = Fill.Dense12
      Draw.Rect(hPdf[CurrentPage].Result[currentSearchResultSynonyms - 1].Left, hPdf[CurrentPage].Result[currentSearchResultSynonyms - 1].Top, hPdf[CurrentPage].Result[currentSearchResultSynonyms - 1].Width, hPdf[CurrentPage].Result[currentSearchResultSynonyms - 1].Height)
      ViewPort.ScrollY = ViewPort.ScrollHeight * (hPdf[CurrentPage].Result[currentSearchResultSynonyms - 1].Top / Draw.Height) 
      
      Draw.End()
      PBox.Picture = hPic 
   Endif
   
   PBox.Picture = hPic 
   PBox.Resize(hPdf[CurrentPage].Width, hPdf[CurrentPage].Height)
   Form_Resize()
   
Catch
   Message.Info("An error occurred whilst trying to view the document.\n\nIf this persists please report this problem.")
   
End

Public Sub Form_Resize()
   
   If CurrentPage = 0 Then Return 
   Try pBox.Left = (ViewPort.Width - hPdf[CurrentPage].Width) / 2
   
End

Public Sub HSplit1_Resize()
   
   Form_Resize()  
   
End

Public Sub BtNext_Click()
   
   Inc CurrentPage
   currentSearchResult = 0
   currentSearchResultSynonyms = 0
   If CurrentPage = hPdf.Count Then 
      BtNext.Enabled = False 
      BtPrev.Enabled = True 
      BtPrev.SetFocus 'otherwise focus defaults to something unpredictable eg could close the patients notes if FClinical.cmbSearch is next in line
   End If   
   RenderPage()
   
End

Public Sub BtPrev_Click()
   
   Dec CurrentPage
   currentSearchResult = 0
   currentSearchResultSynonyms = 0
   If CurrentPage = 1 Then BtPrev.Enabled = False 
   BtNext.Enabled = True 
   RenderPage()
   
End

Public Sub btZoomIn_Click()
   
   zoom_in()
   
End

Public Sub zoom_in()
   'this may be called from outside this form so don't put back into btZoomIN_click()
   
   If CurrentZoom < 3 Then CurrentZoom += 0.1
   If CurrentZoom = 3 Then btZoomIn.Enabled = False 
   btZoomOut.Enabled = True 
   
   RenderPage()
   
End

Public Sub btZoomOut_Click()
   
   zoom_out()  
   
End

Public Sub zoom_out()
   'this may be called from outside this form so don't put back into btzoomOut_click()
   
   If CurrentZoom > 0.5 Then CurrentZoom -= 0.1
   If CurrentZoom = 0.5 Then btZoomOut.Enabled = False 
   btZoomIn.Enabled = True 
   
   RenderPage()
   
End

Public Sub Form_Close()
   
   hPdf.Close()
   
End

Public Sub tbClose_Click()
   
End

' Public Sub btZoomOut_Click()
'    
' Select Case hPdf.Orientation
'    Case PdfDocument.Normal
'       hPdf.Orientation = PdfDocument.Sideways
'    Case PdfDocument.Sideways
'       hPdf.Orientation = PdfDocument.Inverted 
'    Case PdfDocument.Inverted
'       hPdf.Orientation = PdfDocument.SidewaysInverted
'    Case PdfDocument.SidewaysInverted
'       hPdf.Orientation = PdfDocument.Normal 
' End Select 
'    
'    RenderPage()
'    
' End
' 
'  Public Sub TxtFind_Change()
'    
'    If Bexit Then Return 
'    RenderPage()
'    
' End

Public Sub txtGotoPage_Change()
   
   If Bexit Or Last.text = "" Then Return
   BtSearchNext.Enabled = False
   BtSearchPrev.Enabled = False
   currentSearchResult = 0
   If Val(Last.text) > hPdf.Count Or Val(Last.text) = hPdf.Count Then 
      bExit = True
      txtGotoPage.text = hPdf.Count
      BtNext.Enabled = False  
      BtPrev.Enabled = True
      bExit = False
   Else
      BtNext.Enabled = True 
      If Val(Last.text) = 0 Then
         bExit = True
         txtGotoPage.text = 1  
         bExit = False
         BtPrev.Enabled = False
      Else  
         BtPrev.Enabled = True   
      End If 
   End If   
   currentPage = Val(Last.text)
   Bexit = False  
   RenderPage()
   
End

Public Sub txtGotoPage_KeyPress()
   
   If modUtil.AllowKeys(const.AllowKeys_NumbersOnly, Key.code) = False Then
      Stop Event
      Return
   End If
   
End

Public Sub Print_Content()
   '---------------------------------------------------------------------------------------
   'Do not change this name. It is called from Fclinical as well via Object.Call(O,"Print_Content")
   'Can't be called Print as gambas craps itself when doing the object call.
   'when the pdf is embedded on a tab
   '---------------------------------------------------------------------------------------     
   '-----------------------------------------------------------------------------
   ' Print document, currently only works For pdf
   '
   'If a default plain paper printer exists and use default is checked > use that
   'otherwise popup printer dialog
   '
   'fix path if contains blanks
   '------------------------------------------------------------------------------
   
   Dim Printername As String 
   
   modPrinting.Print_PDF(pdf_path)
   Return 
   If chkUseDefaultPrinter.value = False Then 
      If printer1.Configure() Then Return 
   Else
      '  Printer1.name = Left(const.PlainPaper_Printer, InStr(const.PlainPaper_Printer, ":") - 1)
      
      printer1.name = FMain.cmbPrinters.Text
      If printer1.name = "Default" Then
         Message.info("Default printer is not set")
         Return
      End If  
      
   End If 
   
   Shell "lp -d " & Printer1.name & " " & Replace(pdf_path, " ", "\\ ") Wait 
   
End

Public Sub BtPrint_Click()
   
   Print_Content()
   
End

Public Sub btRotate_Click()
   
   Select Case hPdf.Orientation
      Case PdfDocument.Normal
         hPdf.Orientation = PdfDocument.Sideways
      Case PdfDocument.Sideways
         hPdf.Orientation = PdfDocument.Inverted 
      Case PdfDocument.Inverted
         hPdf.Orientation = PdfDocument.SidewaysInverted
      Case PdfDocument.SidewaysInverted
         hPdf.Orientation = PdfDocument.Normal 
   End Select 
   
   RenderPage()
   
End

Public Sub Form_KeyPress()
   
   ' Dim CtrlDown As Boolean
   ' Dim FnDown As Boolean
   ' 
   ' Print key.Control
   ' 
   ' Try CtrlDown = Key.Control
   ' If CtrlDown Then
   '    Select Case Key.code
   '       Case Asc("=") 
   '          
   '          zoom_in()
   '       Case Asc("-")
   '          zoom_out()
   '    End Select
   ' End If
   
End

Public Sub tbSave_Click()
   
   Save_PDF()
   
End

Public Sub TxtFind_Activate()
   
   Find_Text()
   
End

Public Sub Find_Text()
   
   ' Timer1.stop
   If Bexit Then Return 
   If TxtFind.Text <> "" Then 
      If currentSearchResult > 0 Then
         If currentSearchResult = NumberOfSearchResults Then      
            If currentpage = hPdf.Count Then
               CurrentPage = 1
            Else
               CurrentPage = CurrentPage + 1
            Endif
            
            FindNext()
         Else
            currentSearchResult = currentSearchResult + 1
            RenderPage(TxtFind.Text)
         Endif
      Else
         FindNext()
      Endif
      
   End If
   
End

Public Function FindSynonymeFromArray(SynonymeArray As String[], Position As Integer) As Boolean
   
   Dim hPic As Picture 
   Dim Bc As Integer 
   Dim currentSearchPage As Short = 1 ' contains the information on which page the search funktion searched the last time
   Dim count2 As Integer = 0
   
   currentSearchResultSynonyms = 0
   currentSearchResult = 0
   BtSearchNext.Enabled = False
   BtSearchPrev.Enabled = False
   
   Repeat
      
      Repeat 
         hPic = hPdf[currentSearchPage].Image.Picture
         hPdf[currentSearchPage].Find(SynonymeArray[Position, count2], True)
         If hPdf[currentSearchPage].Result.Count > 0 Then
            currentSearchResultSynonyms = 1
         Else
            currentSearchPage = currentSearchPage + 1
         Endif
      Until currentSearchResultSynonyms <> 0 Or currentSearchPage = hPdf.count 
      If currentSearchResultSynonyms = 0 Then 
         Inc count2
         currentsearchPage = 1
      Endif
      
   Until currentSearchResultSynonyms = 1 Or SynonymeArray[Position, count2 + 1] = "!" 
   
   If currentSearchResultSynonyms = 0 Then
      count2 = 0
      Repeat
         Repeat 
            hPic = hPdf[currentSearchPage].Image.Picture
            hPdf[currentSearchPage].Find(SynonymeArray[Position, count2], False)
            If hPdf[currentSearchPage].Result.Count > 0 Then
               currentSearchResultSynonyms = 1
            Else
               currentSearchPage = currentSearchPage + 1
            Endif
         Until currentSearchResultSynonyms <> 0 Or currentSearchPage = hPdf.count 
         If currentSearchResultSynonyms = 0 Then 
            Inc count2
            currentsearchPage = 1
         Endif
      Until currentSearchResultSynonyms = 1 Or SynonymeArray[Position, count2 + 1] = "!" 
      
   Endif
   
   If hPdf[currentSearchPage].Result.Count > 0 Then
      
      CurrentPage = currentSearchPage
      txtGotoPage.text = CurrentPage
      currentSearchResultSynonyms = hPdf[currentSearchPage].Result.Count
      RenderPage(SynonymeArray[position, count2])
      Return True
   Else
      Return False
   Endif
   
Catch
   Message.Info("An error occurred whilst trying to view the document.\n\nIf this persists please report this problem.")
   
End

Private Sub FindNext()
   
   Dim hPic As Picture 
   Dim Bc As Integer 
   Dim currentSearchPage As Short = CurrentPage ' contains the information on which page the search funktion searched the last time
   Dim LastPageToSearch As Short                ' contains the information which page is the last page for the find function
   
   If CurrentPage = 1 Then
      LastPageToSearch = 1
   Else
      LastPageToSearch = CurrentPage 
      
   Endif
   currentSearchResultSynonyms = 0
   currentSearchResult = 0
   BtSearchNext.Enabled = False
   BtSearchPrev.Enabled = False
   Repeat 
      hPic = hPdf[currentSearchPage].Image.Picture
      hPdf[currentSearchPage].Find(TxtFind.Text, False)
      
      If hPdf[currentSearchPage].Result.Count > 0 Then
         CurrentPage = currentsearchPage 
         currentSearchResult = 1
      Else
         If currentSearchPage = hPdf.Count Then 
            currentSearchPage = 1
         Else
            currentSearchPage = currentSearchPage + 1
         Endif
      Endif
   Until currentSearchResult <> 0 Or currentSearchPage = LastPageToSearch 
   If hPdf[currentSearchPage].Result.Count > 0 Then
      CurrentPage = currentSearchPage
      
      txtGotoPage.text = CurrentPage
      currentSearchResult = 1
      NumberOfSearchResults = hPdf[currentSearchPage].Result.Count
      BtSearchNext.Enabled = True
      BtSearchPrev.Enabled = True
      
      RenderPage(TxtFind.Text)
      
   Else
      TxtFind.Background = Color.Lighter(16711680)   '16711680 = Red
      RenderPage()  
      
   Endif
   
Catch
   Message.Info("An error occurred whilst trying to view the document.\n\nIf this persists please report this problem.")
   
End

Private Sub FindPrevious()
   
   Dim hPic As Picture 
   Dim Bc As Integer 
   Dim currentSearchPage As Short = CurrentPage ' contains the information on which page the search funktion searched the last time
   Dim LastPageToSearch As Short                ' contains the information which page is the last page for the find function
   
   If CurrentPage = hPdf.Count Then
      LastPageToSearch = 0
   Else
      LastPageToSearch = CurrentPage 
   Endif
   currentSearchResultSynonyms = 0
   currentSearchResult = 0
   BtSearchNext.Enabled = False
   BtSearchPrev.Enabled = False
   
   Repeat 
      hPic = hPdf[currentSearchPage].Image.Picture
      hPdf[currentSearchPage].Find(TxtFind.Text, False)
      If hPdf[currentSearchPage].Result.Count > 0 Then
         CurrentPage = currentsearchPage 
         currentSearchResult = 1
      Else
         If currentSearchPage = 1 Then 
            currentSearchPage = hPdf.Count
         Else
            currentSearchPage = currentSearchPage - 1
         Endif
      Endif
   Until currentSearchResult <> 0 Or currentSearchPage = LastPageToSearch 
   
   If hPdf[currentSearchPage].Result.Count > 0 Then
      CurrentPage = currentSearchPage
      
      txtGotoPage.text = CurrentPage
      currentSearchResult = hPdf[currentSearchPage].Result.Count
      NumberOfSearchResults = hPdf[currentSearchPage].Result.Count
      BtSearchNext.Enabled = True
      BtSearchPrev.Enabled = True
      RenderPage(TxtFind.Text)
   Endif
   
Catch
   Message.Info("An error occurred whilst trying to view the document.\n\nIf this persists please report this problem.")
   
End

Public Sub BtSearchNext_Click()
   
   If currentSearchResult = NumberOfSearchResults Then      
      If currentpage = hPdf.Count Then
         CurrentPage = 1
      Else
         CurrentPage = CurrentPage + 1
      Endif
      FindNext()
   Else
      currentSearchResult = currentSearchResult + 1
      RenderPage(TxtFind.Text)
   Endif
   
End

Public Sub BtSearchPrev_Click()
   
   If currentSearchResult = 1 Then
      If currentpage = 1 Then
         currentpage = hPdf.Count
      Else
         CurrentPage = CurrentPage - 1
      Endif
      FindPrevious()
   Else
      currentSearchResult = currentSearchResult - 1
      RenderPage(TxtFind.Text)
   Endif
   
End

Public Sub TxtFind_Change()
   
   If TxtFind.Background = Color.Lighter(16711680) Then
      TxtFind.Background = Color.White
      
   Endif
   
   currentSearchResult = 0
   currentSearchResultSynonyms = 0
   BtSearchNext.Enabled = False
   BtSearchPrev.Enabled = False
   
   RenderPage()
   
End

Public Sub TxtFind_KeyRelease()
   ' Timer1.Start
   ' timer_count = 0
   
End

Public Sub Timer1_Timer()
   
   ' Inc timer_count
   ' If timer_Count > 3 Then
   '    Find_Text()
   ' End If  
   
End
