' Gambas class file

'***************************************************************************
'
'  FMain.class
'
'  PdfViewer gb.pdf component example
'
'  (C) 2007 Daniel Campos Fern√°ndez <dcamposf@gmail.com>
'  with minor modifications Dr Richard Terry 2010
'
'  This program is free software; you can redistribute it and/or modify
'  it under the terms of the GNU General Public License as published by
'  the Free Software Foundation; either version 1, or (at your option)
'  any later version.
'
'  This program is free software; you can redistribute it and/or modify
'  it under the terms of the GNU General Public License as published by
'  the Free Software Foundation; either version 1, or (at your option)
'  any later version.
'
'  This program is distributed in the hope that it will be useful,
'  but WITHOUT ANY WARRANTY; without even the implied warranty of
'  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'  GNU General Public License for more details.
'
'  You should have received a copy of the GNU General Public License
'  along with this program; if not, write to the Free Software
'  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
'
'***************************************************************************

Public hPdf As New PdfDocument
Public cIndex As Integer 
Public CurrentPage As Integer 
Public CurrentZoom As Float = 1.0
Private bExit As Boolean
Private pdf_path As String 


Public Sub Set_Filename(path As String)
   pdf_path = path
End

Public Sub Render_From_Another_Form()
 ' CurrentZoom = 1
  CurrentPage = 1
  RenderPage()
  BtPrev.Enabled = False 
  If hPdf.Count > 1 Then 
    BtNext.Enabled = True 
  Else 
    BtNext.Enabled = False 
  End If
  btZoomIn.Enabled = True 
  btZoomOut.Enabled = True 
  btRotate.Enabled = True 
  pBox.Visible = True 
  TxtFind.Enabled = True 

'  tvIndex.Clear()
  If hPdf.HasIndex Then 
'    tvIndex.Visible = TRUE 
    AddIndex(0, "")
  Else 
   ' tvIndex.Visible = FALSE 
  End If
  
End

Public Sub Load_PDF(sPath As String)
   'fixme, need better logging of bad pdf's for the INBOX/Display
  bExit = True 
  pdf_path = spath
   hPdf.Close()
  Try hPdf.Open(sPath)
  If Error Then 
    Message.Error(Error.Text)
    Return 
  End If
  CurrentPage = 1
  txtGotoPage.text = CurrentPage
  RenderPage()
  bExit = False   
  BtPrev.Enabled = False 
  If hPdf.Count > 1 Then 
    BtNext.Enabled = True 
  Else 
    BtNext.Enabled = False 
  End If
  btZoomIn.Enabled = True 
  btZoomOut.Enabled = True 
  btRotate.Enabled = True 
  pBox.Visible = True 
  TxtFind.Enabled = True 

  tvIndex.Clear()
  If hPdf.HasIndex Then 
    tvIndex.Visible = True 
    AddIndex(0, "")
  Else 
    tvIndex.Visible = False 
  End If  
End

Public Sub BtOpen_Click()

  If Dialog.OpenFile(False) Then Return 
  Load_PDF(Dialog.path)
 
End



Public Function AddIndex(nItem As Integer, pItem As String) As Integer 
  
  Dim pR As String  
  Dim iPage As Integer
  Return 
  Do
    iPage = 1
    Try iPage = hPdf.Index.Data.Page
    pR = nItem & "-" & iPage
    tvIndex.Add(nItem & "-" & iPage, hPdf.Index.Title, "", pItem)
    Inc nItem
    If hPdf.Index.HasChildren Then 
     hPdf.Index.MoveChild()
     nItem = AddIndex(nItem + 1, pR)
     hPdf.Index.MoveParent()
    End If
  Loop Until hPdf.Index.MoveNext()
  
  Return nItem
  
End

Public Sub tvIndex_Click()

  CurrentPage = Mid(tvIndex.Current.Key, InStr(tvIndex.Current.Key, "-") + 1)
  BtPrev.Enabled = True 
  BtNext.Enabled = True 
  If CurrentPage = 1 Then BtPrev.Enabled = False 
  If CurrentPage = hPdf.Count Then BtNext.Enabled = False 
  RenderPage() 

End

Public Sub RenderPage()
  
  Dim hPic As Picture 
  Dim Bc As Integer 
  
  If CurrentZoom > 0.0 Then 
      hPdf.Zoom = CurrentZoom
  Else
      Message.Error("Can't set zoom to " & CurrentZoom, "OK")
      Log.ErrorMsg("Tried to set PDF zoom to " & CurrentZoom)
  Endif
  LblInfo.Text = " of" & " " & hPdf.Count  
  txtGotoPage.text = CurrentPage
  ViewPort.Scroll(0, 0)
  hPic = hPdf[CurrentPage].Image.Picture

  If TxtFind.Text <> "" Then 
  
    hPdf[CurrentPage].Find(TxtFind.Text)
    Draw.Begin(hPic)
    Draw.FillColor = Color.Red 
    Draw.FillStyle = Fill.Dense50
    For Bc = 0 To hPdf[CurrentPage].Result.Count - 1
      Draw.Rect(hPdf[CurrentPage].Result[Bc].Left, hPdf[CurrentPage].Result[Bc].Top, hPdf[CurrentPage].Result[Bc].Width, hPdf[CurrentPage].Result[Bc].Height)
    Next 
    Draw.End()
  
  End If

  PBox.Picture = hPic 
  PBox.Resize(hPdf[CurrentPage].Width, hPdf[CurrentPage].Height)
  Form_Resize()
  Print BtNext.Enabled 
End

Public Sub Form_Resize()

  If CurrentPage = 0 Then Return 
  Try pBox.Left = (ViewPort.Width - hPdf[CurrentPage].Width) / 2

End


Public Sub HSplit1_Resize()

  Form_Resize()  

End

Public Sub BtNext_Click()

  Inc CurrentPage
  If CurrentPage = hPdf.Count Then BtNext.Enabled = False 
  BtPrev.Enabled = True 
  RenderPage()

End

Public Sub BtPrev_Click()

  Dec CurrentPage
  If CurrentPage = 1 Then BtPrev.Enabled = False 
  BtNext.Enabled = True 
  RenderPage()

End

Public Sub btZoomIn_Click()

  If CurrentZoom < 3 Then CurrentZoom += 0.1
  If CurrentZoom = 3 Then btZoomIn.Enabled = False 
  btZoomOut.Enabled = True 
  RenderPage()

End

Public Sub btZoomOut_Click()

  If CurrentZoom > 0.5 Then CurrentZoom -= 0.1
  If CurrentZoom = 0.5 Then btZoomOut.Enabled = False 
  btZoomIn.Enabled = True 
  RenderPage()

End

Public Sub Form_Close()

  hPdf.Close()

End

Public Sub tbClose_Click()

  Print "closing"

End


Public Sub btRotate_Click()

  Select Case hPdf.Orientation
    Case PdfDocument.Normal
      hPdf.Orientation = PdfDocument.Sideways
    Case PdfDocument.Sideways
      hPdf.Orientation = PdfDocument.Inverted 
    Case PdfDocument.Inverted
      hPdf.Orientation = PdfDocument.SidewaysInverted
    Case PdfDocument.SidewaysInverted
      hPdf.Orientation = PdfDocument.Normal 
  End Select 
  
  RenderPage()
  
End

Public Sub TxtFind_Change()
 If Bexit Then Return 
  RenderPage()

End


Public Sub txtGotoPage_Change()
 
   If Bexit Or Last.text = "" Then Return
   If Val(Last.text) > hPdf.Count Or Val(Last.text) = hPdf.Count Then
         bExit = True
         txtGotoPage.text = hPdf.Count
         BtNext.Enabled = False  
         BtPrev.Enabled = True
         bExit = False
        Return
   Else
     
      BtNext.Enabled = True 
      If Val(Last.text) = 0 Then
         bExit = True
         txtGotoPage.text = 1  
         bExit = False
         BtPrev.Enabled = False
      Else  
         BtPrev.Enabled = True   
      End If 
   End If   
   currentPage = Val(Last.text)
 
   RenderPage()
End

Public Sub txtGotoPage_KeyPress()

  If modUtil.AllowKeys(const.AllowKeys_NumbersOnly, Key.code) = False Then
      Stop Event
      Return
   End If
  
   
End

Public Sub BtPrint_Click()
   '-----------------------------------------------------------------------------
   ' Print document, currently only works For pdf
   '
   'If a default plain paper printer exists and use default is checked > use that
   'otherwise popup printer dialog
   '
   'fix path if contains blanks
   '------------------------------------------------------------------------------
   
   Dim Printername As String 
   If chkUseDefaultPrinter.value = False Then 
        If printer1.Configure() Then Return 
   Else
     '  Printer1.name = Left(const.PlainPaper_Printer, InStr(const.PlainPaper_Printer, ":") - 1)
       printer1.name = FMain.cmbPrinters.Text
       If printer1.name = "Default" Then
          Message.info("Default printer is not set")
          Return
       End If  
       
   End If 
  
   Shell "lp -d " & Printer1.name & " " & Replace(pdf_path, " ", "\\ ") Wait
End

