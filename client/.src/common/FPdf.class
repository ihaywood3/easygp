' Gambas class file

'***************************************************************************
'  PdfViewer gb.pdf component example
'
'  (C) 2007 Daniel Campos Fern√°ndez <dcamposf@gmail.com>
'  with minor modifications Dr Richard Terry 2010 and Berndt Brinkman 2013
'
'  This program is free software; you can redistribute it and/or modify
'  it under the terms of the GNU General Public License as published by
'  the Free Software Foundation; either version 1, or (at your option)
'  any later version.
'
'  This program is free software; you can redistribute it and/or modify
'  it under the terms of the GNU General Public License as published by
'  the Free Software Foundation; either version 1, or (at your option)
'  any later version.
'
'  This program is distributed in the hope that it will be useful,
'  but WITHOUT ANY WARRANTY; without even the implied warranty of
'  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'  GNU General Public License for more details.
'
'  You should have received a copy of the GNU General Public License
'  along with this progRenderPage(FoundText)ram; if not, write to the Free Software
'  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
'
'***************************************************************************
Public hPdf As New PdfDocument
Public cIndex As Integer
Public CurrentPage As Integer
Public CurrentZoom As Float = 1.0
Public bExit As Boolean              'do not make this private accessed from other forms.
Private pdf_path As String
Private Embedded_In_Form As String
Private currentconsult As CConsult
Private currentSearchResult As Short = 0 'Contains the information which of the search results on this page is marked
Private NumberOfSearchResults As Integer
Private currentSearchResultSynonyms As Short = 0
Private Product_Information_Dir As String
Private Synonyms As New String[20, 20]
Private ScrollXPositionBeforeZoom As Float
Private ScrollYPositionBeforeZoom As Float
Private ControllKey As Boolean

Public Sub Init(Optional cons As CConsult)
   
   currentconsult = cons
   
End

Public Sub Set_Filename(path As String)
   
   pdf_path = path
   
End

Public Sub Set_Embedded_Form(F As String)
   
   Embedded_In_Form = F
   
End

Public Sub Render_From_Another_Form()
   ' CurrentZoom = 1
   
   CurrentPage = 1
   RenderPage()
   BtPrev.Enabled = False
   If hPdf.Count > 1 Then
      BtNext.Enabled = True
   Else
      BtNext.Enabled = False
   End If
   btZoomIn.Enabled = True
   btZoomOut.Enabled = True
   btZoomOut.Enabled = True
   pBox.Visible = True
   TxtFind.Enabled = True
   
   tvIndex.Clear()
   If hPdf.HasIndex Then
      tvIndex.Visible = True
      AddIndex(0, "")
   Else
      tvIndex.Visible = False
   End If
   
End

'Public Sub Load_PDF(sPath As String)
'fixme, need better logging of bad pdf's for the INBOX/Display
Public Sub Load_PDF(sPath As String, Optional bDoNotShowErrorMessage As Boolean = False, bDeleteTempFile As Boolean = True)
   
   Dim smsg As String
   
   bExit = True
   hPdf.Close()
   If bDeleteTempFile Then
      modUtil.Kill_If_Temp(pdf_path)  ' don't build up too many temp files
   End If
   pdf_path = spath
   Try hPdf.Open(sPath)
   If Error Then
      If bDoNotShowErrorMessage = False Then
         If Error.text = "File not found" Then
            sMsg = "The file you are trying to view was not found.\n\n"
            "There could be several causes, maybe the documents directory is not correctly mounted to your local machine.\n\n"
            "Please consult with your system administrator for further help."
            Message.Error(sMsg, "Ok")
            Select Case Embedded_In_Form
               Case "FInbox"
                  FInbox.Disable_Filing()
            End Select
         End If
      Endif
      Return
   End If
   CurrentPage = 1
   txtGotoPage.text = CurrentPage
   RenderPage()
   bExit = False
   BtPrev.Enabled = False
   If hPdf.Count > 1 Then
      BtNext.Enabled = True
   Else
      BtNext.Enabled = False
   End If
   btZoomIn.Enabled = True
   btZoomOut.Enabled = True
   btZoomOut.Enabled = True
   pBox.Visible = True
   TxtFind.Enabled = True
   
   tvIndex.Clear()
   If hPdf.HasIndex Then
      tvIndex.Visible = True
      AddIndex(0, "")
   Else
      tvIndex.Visible = False
   End If
   
End

Public Sub Save_PDF()
   '---------------------------------------------------------------------------
   'Save the pdf as a file optionally provider the filename as the patient name
   '---------------------------------------------------------------------------
   
   Dim filename As String
   
   If pBox.Visible = False Then Return
   Dialog.Filter = ["*.pdf", "PDF"]
   
   If Not IsNull(currentconsult) Then
      filename = Replace(Trim(currentconsult!patient!wholename), " ", "-") & "_" & Format(currentconsult!patient!birthdate, "dd-mm-yyyy")
      filename &= "_exported_" & Format(Now, "dd-mm-yyyy") ' & ".pdf"
      Dialog.title = "Export PDF for " & currentconsult!patient!wholename
      Dialog.Path = User.home &/ filename
   Else
      Dialog.title = "Save the PDF"
   Endif
   
   If Dialog.SaveFile() Then Return    'user cancels save
   
   If File.Ext(Dialog.Path) <> "pdf" Then
      Dialog.Path &= ".pdf"
   Endif
   Try Copy pdf_path To Dialog.Path                                                    'try and pdf file to new name
   ' If Error Then                                                                       'encountered an error, probably file exists
   '    Try Move pdf_path To Dialog.Path                                                 'Try moving file to the filename
   '    If Error.code = const.File_ioError_FileExists Then                               'error was file exists
   '       If Message.Question("Overwrite existing file?", "Yes", "No") = 2 Then Return  'prompt user "Overwrite this?"
   '       Kill Dialog.Path                                                              'delete previous file of same name
   '       Try Copy pdf_path To Dialog.Path                                              'Try again, if error > catch and give up
   '    Endif
   ' Endif
Catch
   Message.Info(Error.Text)
   
End

Public Sub Init_Drugs_Browser()
   
   Dim TextString As String
   Dim TextString2 As String
   Dim count As Integer = 0
   Dim count2 As Integer = 0
   Dim WordGroups As New String[]
   Dim WordsSeperate As New String[]
   
   '   Hbox_Buttons.Visible = False
   combobox1.Visible = True
   If Not modDBConnect.IsAdmin Then
      Product_Information_Dir = modAdminDBI.Config_Get("product_information_directory", "", Null, modDBConnect.currentUser!fk_clinic)
   Endif
   WordGroups = Split(Replace(file.load("clinical/prescribing/drugbrowsing_jumpto_synonyms"), "\n", ""), "/")
   For Each TextString In WordGroups
      WordsSeperate = Split(TextString, ",")
      For Each TextString2 In WordsSeperate
         Synonyms[count, count2] = TextString2
         If count2 = 0 Then combobox1.Add(Synonyms[count, 0], count)
         Inc count2
      Next
      Synonyms[count, count2] = "!"
      count2 = 0
      Inc count
   Next
   ComboBox1.Visible = True
   
End

Public Sub BtOpen_Click()
   
   If Dialog.OpenFile(False) Then Return
   Load_PDF(Dialog.path)
   
End

Public Function AddIndex(nItem As Integer, pItem As String) As Integer
   
   Dim pR As String
   Dim iPage As Integer
   
   Do
      iPage = 1
      Try iPage = hPdf.Index.Data.Page
      If Error Then Print Error.Text
      pR = nItem & "-" & iPage
      tvIndex.Add(nItem & "-" & iPage, hPdf.Index.Title, Null, pItem)
      Inc nItem
      If hPdf.Index.HasChildren Then
         hPdf.Index.MoveChild()
         nItem = AddIndex(nItem + 1, pR)
         hPdf.Index.MoveParent()
      End If
   Loop Until hPdf.Index.MoveNext()
   
   Return nItem
   
End

Public Sub tvIndex_Click()
   
   CurrentPage = Mid(tvIndex.Current.Key, InStr(tvIndex.Current.Key, "-") + 1)
   BtPrev.Enabled = True
   BtNext.Enabled = True
   If CurrentPage = 1 Then BtPrev.Enabled = False
   If CurrentPage = hPdf.Count Then BtNext.Enabled = False
   RenderPage()
   
End

Public Sub RenderPage(Optional FoundText As String, Optional Casesensetivity As Boolean)
   '---------------------------------------------------------------------------
   'This function is called everytime something changed
   'for example a new search result has to be displayed or the page has changed
   'the parameters FoundText And Casesensetivity are only Of interest
   'If the function Is Called From a search function
   'Note odd bug of some sort in here for some reason ViewPort.ScrollX and
   'ViewPort.ScrollWidth can both be zero so it bugs
   '--------------------------------------------------------------------------
   
   Dim hPic As Picture
   
   If Not hPdf.count Then Return
   If CurrentZoom > 0.0 Then
      If CurrentZoom <> hPdf.Zoom Then
         Try ScrollXPositionBeforeZoom = ViewPort.ScrollX / ViewPort.ScrollWidth   'division 0/0 = bug
         Try ScrollYPositionBeforeZoom = ViewPort.ScrollY / ViewPort.ScrollHeight  'divison 0/0 = bug
         hPdf.Zoom = CurrentZoom
      Else
         ScrollXPositionBeforeZoom = -1
         ScrollYPositionBeforeZoom = -1
      Endif
   Else
      Message.Error("Can't set zoom to " & CurrentZoom, "OK")
      Log.ErrorMsg("Tried to set PDF zoom to " & CurrentZoom)
   Endif
   LblInfo.Text = " of" & " " & hPdf.Count
   If txtGotoPage.text <> CurrentPage Then txtGotoPage.text = CurrentPage  'if the parameter currentPage is different from the current page the current page gets changed
   If currentSearchResult = 0 And currentSearchResultSynonyms = 0 Then     'if a search result is highlighted the focus will not be changed to the top
      ViewPort.Scroll(0, 0)
   Endif
   hPic = hPdf[CurrentPage].Image.Picture
   'here the search result gets highlighted and the focus is set to the right position again if something has changed for example the zoomfactor
   If currentSearchResult > 0 And FoundText <> "" Then        ' resets the mark on the current search result
      hPdf[CurrentPage].Find(FoundText, Casesensetivity)
      Paint.Begin(hPic)
      Paint.Brush = Paint.Color(Color.RGB(0, 0, 255, 192))
      Paint.Rectangle(hPdf[CurrentPage].Result[currentSearchResult - 1].Left, hPdf[CurrentPage].Result[currentSearchResult - 1].Top, hPdf[CurrentPage].Result[currentSearchResult - 1].Width, hPdf[CurrentPage].Result[currentSearchResult - 1].Height)
      ViewPort.ScrollY = ViewPort.ScrollHeight * (hPdf[CurrentPage].Result[currentSearchResult - 1].Top / Paint.Height)
      Paint.Fill
      Paint.End
      PBox.Picture = hPic
   Endif
   'here the synonym search result gets highlighted and the focus is set to the right position again if something has changed for example the zoomfactor
   If currentSearchResultSynonyms > 0 And FoundText <> "" Then        ' resets the mark on the current search result for synonyms
      hPdf[CurrentPage].Find(FoundText, Casesensetivity)
      Paint.Begin(hPic)
      Paint.Brush = Paint.Color(Color.RGB(0, 0, 255, 192))
      Paint.Rectangle(hPdf[CurrentPage].Result[currentSearchResultSynonyms - 1].Left, hPdf[CurrentPage].Result[currentSearchResultSynonyms - 1].Top, hPdf[CurrentPage].Result[currentSearchResultSynonyms - 1].Width, hPdf[CurrentPage].Result[currentSearchResultSynonyms - 1].Height)
      ViewPort.ScrollY = ViewPort.ScrollHeight * (hPdf[CurrentPage].Result[currentSearchResultSynonyms - 1].Top / Paint.Height)
      Paint.Fill
      Paint.End
      PBox.Picture = hPic
   Endif
   With PBox
      .Picture = hPic
      .Resize(hPdf[CurrentPage].Width, hPdf[CurrentPage].Height)
      .x = 5
      .y = 5
   End With
   Form_Resize()
Catch  'es the divison by zero bug, or used to see up the routine a bit I've put in a try
   Return
   
End

Public Sub Form_Resize()
   
   If CurrentPage = 0 Then Return
   If ScrollXPositionBeforeZoom > 0 And ScrollYPositionBeforeZoom > 0 Then
      ViewPort.ScrollX = ScrollXPositionBeforeZoom * ViewPort.ScrollWidth
      ViewPort.Scrolly = ScrollYPositionBeforeZoom * ViewPort.ScrollHeight
   Endif
   
End

Public Sub HSplit1_Resize()
   
   Form_Resize()
   
End

Public Sub BtNext_Click()
   
   Inc CurrentPage
   currentSearchResult = 0
   currentSearchResultSynonyms = 0
   If CurrentPage = hPdf.Count Then
      BtNext.Enabled = False
   End If
   BtPrev.Enabled = True
   BtPrev.SetFocus
   txtGotoPage.text = CurrentPage   'this automatically calls the function txtGotoPage_Change and changes the page to the new "currentPage"
   
End

Public Sub BtPrev_Click()
   
   Dec CurrentPage
   currentSearchResult = 0
   currentSearchResultSynonyms = 0
   If CurrentPage = 1 Then
      BtPrev.Enabled = False
   End If
   BtNext.Enabled = True
   BtNext.SetFocus
   txtGotoPage.text = CurrentPage     'this automatically calls the function txtGotoPage_Change and changes the page to the new "currentPage"
   
End

Public Sub Set_Zoom(zoom As Float)
   
   CurrentZoom = Zoom 
   
End

Public Sub btZoomIn_Click()
   
   zoom_in()
   
End

Public Sub zoom_in()
   'this may be called from outside this form so don't put back into btZoomIN_click()
   
   If CurrentZoom < 3 Then CurrentZoom += 0.1
   If CurrentZoom = 3 Then btZoomIn.Enabled = False
   btZoomOut.Enabled = True
   RenderPage()
   
End

Public Sub btZoomOut_Click()
   
   zoom_out()
   
End

Public Sub zoom_out()
   'this may be called from outside this form so don't put back into btzoomOut_click()
   
   If CurrentZoom > 0.5 Then CurrentZoom -= 0.1
   If CurrentZoom = 0.5 Then btZoomOut.Enabled = False
   btZoomIn.Enabled = True
   
   RenderPage()
   
End

Public Sub tbClose_Click()
   
End


Public Sub txtGotoPage_Change()
   
   '---------------------------------------------------------------------------
   'This function changes the page to the page number written in the textbox "txtGotoPage"
   'the text in this textbox can be changed by the user for example by klicking on the next button or other funktions such as
   'a search funktion
   '--------------------------------------------------------------------------
   '
   If Bexit Or txtGotoPage.text = "" Then Return
   'the last search results get removed by the next four lines
   BtSearchNext.Enabled = False
   BtSearchPrev.Enabled = False
   currentSearchResult = 0
   currentSearchResultSynonyms = 0
   If Val(txtGotoPage.text) > hPdf.Count Or Val(txtGotoPage.text) = hPdf.Count Then   'hPdf.count contains the length of the pdf document
      bExit = True
      txtGotoPage.text = hPdf.Count
      BtNext.Enabled = False        'because the last page is now displayed the next page button gets disabled
      BtPrev.Enabled = True
      bExit = False
   Else
      BtNext.Enabled = True
      If Val(txtGotoPage.text) = 1 Or Val(txtGotoPage.text) < 1 Then
         bExit = True
         txtGotoPage.text = 1
         bExit = False
         BtPrev.Enabled = False
      Else
         BtPrev.Enabled = True
      End If
   End If
   currentPage = Val(txtGotoPage.text)
   Bexit = False
   RenderPage()
   
End

Public Sub txtGotoPage_KeyPress()
   
   If modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, Key.code) = False Then
      Stop Event
      Return
   End If
   
End

Public Sub Print_Content()
   '---------------------------------------------------------------------------------------
   'Do not change this name. It is called from Fclinical as well via Object.Call(O,"Print_Content")
   'Can't be called Print as gambas craps itself when doing the object call.
   'when the pdf is embedded on a tab
   '---------------------------------------------------------------------------------------
   '-----------------------------------------------------------------------------
   ' Print document, currently only works For pdf
   '
   'If a default plain paper printer exists and use default is checked > use that
   'otherwise popup printer dialog
   '
   'fix path if contains blanks
   '------------------------------------------------------------------------------
   Dim pages As Integer
   
   pages = Val(Trim(Replace(LblInfo.text, "of", "")))
   If pages > 3 Then
      If Message.Question("There are " & Str(pages) & " pages in this document.\n\nAre you sure you want to print this?", "Yes - Print Document", "Cancel") = 2 Then Return
   Endif
   modPrinting.Print_PDF(pdf_path)
   Return
   If chkUseDefaultPrinter.value = False Then
      If printer1.Configure() Then Return
   Else
      printer1.name = FMain.cmbPrinters.Text
      If printer1.name = "Default" Then
         Message.info("Default printer is not set")
         Return
      End If
   End If
   Shell "lp -d " & Printer1.name & " " & Replace(pdf_path, " ", "\\ ") Wait
   
   Catch
      Return 'pages can be null
End

Public Sub BtPrint_Click()
   
   Print_Content()
   
End

Public Sub btRotate_Click()
   
   Select Case hPdf.Orientation
      Case PdfDocument.Normal
         hPdf.Orientation = PdfDocument.Sideways
      Case PdfDocument.Sideways
         hPdf.Orientation = PdfDocument.Inverted
      Case PdfDocument.Inverted
         hPdf.Orientation = PdfDocument.SidewaysInverted
      Case PdfDocument.SidewaysInverted
         hPdf.Orientation = PdfDocument.Normal
   End Select
   
   RenderPage()
   
End

Public Sub tbSave_Click()
   
   Save_PDF()
   
End

Public Sub TxtFind_Activate()
   
   Find_Text()
   
End

Public Sub TxtFind_KeyPress()
   
   If Key.Control Then ViewPort.SetFocus()
   If Key.Code = Key.F3 Then Find_Text()
   
End

Public Sub Find_Text()
   
   '---------------------------------------------------------------------------
   'This function is called if the user wants fo find the string inside the textbox "TxtFind" by hitting the enter key
   '--------------------------------------------------------------------------
   If Not hPdf.Count Then Return
   If Bexit Then Return
   If TxtFind.Text <> "" Then
      If currentSearchResult > 0 Then
         If currentSearchResult = NumberOfSearchResults Then
            If currentpage = hPdf.Count Then
               CurrentPage = 1
            Else
               CurrentPage = CurrentPage + 1
            Endif
            FindNext()
         Else
            currentSearchResult = currentSearchResult + 1
            RenderPage(TxtFind.Text)
         Endif
      Else
         FindNext()
      Endif
   End If
   
End

Private Sub VerifySearchResult(CurrentSearchPage As Integer, SynonymArray As String[], Position As Integer, Synonymcount As Integer, Casesensetivity As Boolean) As Integer
   '---------------------------------------------------------------------------
   'This function is called by the funktion FindSynonymeFromArray and gives back whether the result is a
   ' headline or not
   '--------------------------------------------------------------------------
   
   Dim BufferArrayTop As Float[]    'these three arrays will contain the position of the search results which need to be verified
   Dim BufferArrayLeft As Float[]
   Dim BufferArrayWidth As Float[]
   Dim MultiCount As Integer = 0    'multicount is usd in multiple loops as a counting variable
   Dim i As Integer                 'i is used in loops as a counting variable
   
   BufferArrayTop = New Float[]
   BufferArrayLeft = New Float[]
   BufferArrayWidth = New Float[]
   
   hPdf[CurrentSearchPage].Find(SynonymArray[Position, Synonymcount], Casesensetivity)
   BufferArrayTop.resize(hPdf[CurrentSearchPage].Result.Count)
   BufferArrayLeft.resize(hPdf[CurrentSearchPage].Result.count)
   BufferArrayWidth.resize(hPdf[CurrentSearchPage].Result.count)
   
   'saves the positions of the search result which need to be verified
   Repeat
      BufferArrayTop[MultiCount] = hPdf[CurrentSearchPage].Result[MultiCount].Top
      BufferArrayLeft[MultiCount] = hPdf[CurrentSearchPage].Result[MultiCount].Left
      BufferArrayWidth[MultiCount] = hPdf[CurrentSearchPage].Result[MultiCount].Width
      Inc MultiCount
   Until MultiCount = hPdf[CurrentSearchPage].Result.Count
   
   MultiCount = 0
   
   'headlines are always lokated at the left side of the pdf document and this is checked here
   'if a result is not maching the specifications it gets removed from the arrays
   Repeat
      If BufferArrayLeft[MultiCount] / CurrentZoom > 130 Then
         BufferArrayLeft.Remove(MultiCount)
         BufferArrayTop.Remove(MultiCount)
         BufferArrayWidth.Remove(MultiCount)
         If BufferArrayLeft.Length = 0 Then Return 0
         Dec MultiCount
      Endif
      Inc MultiCount
   Until Multicount = BufferArrayTop.Length
   
   'headlines never has a space bevor it and this is checked here
   'if a result is maching this specification it gets removed from the arrays
   If hPdf[CurrentSearchPage].Find(" " & SynonymArray[Position, Synonymcount], Casesensetivity) = False Then
      MultiCount = 0
      Repeat
         Repeat
            If BufferArrayTop[MultiCount] = hPdf[CurrentSearchPage].Result[i].top Then
               If BufferArrayLeft[MultiCount] + BufferArrayWidth[MultiCount] = hPdf[CurrentSearchPage].Result[i].Left + hPdf[CurrentSearchPage].Result[i].Width Then
                  BufferArrayLeft.Remove(MultiCount)
                  BufferArrayTop.Remove(MultiCount)
                  BufferArrayWidth.Remove(MultiCount)
                  If BufferArrayLeft.Length = 0 Then Return 0
                  If BufferArrayLeft.Length = MultiCount Then
                     Dec MultiCount
                     Break
                  Endif
                  i = 0
               Endif
            Endif
            Inc i
         Until i = hPdf[CurrentSearchPage].Result.Count
         i = 0
         Inc MultiCount
         
      Until Multicount = BufferArrayTop.Length
   Endif
   
   'if a result is maching the previous conditions and has a ":" afterwards it is definitely a headline
   'if a result is maching this specifications the correct headline is found
   If hPdf[CurrentSearchPage].Find(SynonymArray[Position, Synonymcount] & ":", Casesensetivity) = False Then
      MultiCount = 0
      Repeat
         If BufferArrayTop[MultiCount] = hPdf[CurrentSearchPage].Result[0].top Then
            BufferArrayTop[0] = hPdf[CurrentSearchPage].Result[0].Top
            BufferArrayLeft[0] = hPdf[CurrentSearchPage].Result[0].Left
            i = 0
            hPdf[CurrentSearchPage].Find(SynonymArray[Position, Synonymcount], Casesensetivity)
            While hPdf[CurrentSearchPage].Result[i].top <> BufferArrayTop[0] And hPdf[CurrentSearchPage].Result[i].left <> BufferArrayLeft[0]
               Inc i
            Wend
            Return i + 1
         Endif
         Inc MultiCount
      Until Multicount = BufferArrayTop.Length
   Endif
   
   'headlines never have a space after it and this is checked here
   'if a result is maching this specification it gets removed from the arrays
   If hPdf[CurrentSearchPage].Find(SynonymArray[Position, Synonymcount] & " ", Casesensetivity) = False Then
      MultiCount = 0
      Repeat
         Repeat
            If BufferArrayTop[MultiCount] = hPdf[CurrentSearchPage].Result[i].top Then
               If BufferArrayLeft[MultiCount] = hPdf[CurrentSearchPage].Result[i].Left Then
                  BufferArrayLeft.Remove(MultiCount)
                  BufferArrayTop.Remove(MultiCount)
                  BufferArrayWidth.Remove(MultiCount)
                  If BufferArrayLeft.Length = 0 Then Return 0
                  If BufferArrayLeft.Length = MultiCount Then
                     Dec MultiCount
                     Break
                  Endif
                  i = 0
               Endif
            Endif
            Inc i
         Until i = hPdf[CurrentSearchPage].Result.Count
         i = 0
         Inc MultiCount
         
      Until Multicount = BufferArrayTop.Length
   Endif
   
   'headlines never have a "," after it and this is checked here
   'if a result is maching this specification it gets removed from the arrays
   If hPdf[CurrentSearchPage].Find(SynonymArray[Position, Synonymcount] & ",", Casesensetivity) = False Then
      MultiCount = 0
      Repeat
         Repeat
            If BufferArrayTop[MultiCount] = hPdf[CurrentSearchPage].Result[i].top Then
               If BufferArrayLeft[MultiCount] = hPdf[CurrentSearchPage].Result[i].Left Then
                  BufferArrayLeft.Remove(MultiCount)
                  BufferArrayTop.Remove(MultiCount)
                  BufferArrayWidth.Remove(MultiCount)
                  If BufferArrayLeft.Length = 0 Then Return 0
                  If BufferArrayLeft.Length = MultiCount Then
                     Dec MultiCount
                     Break
                  Endif
                  i = 0
               Endif
            Endif
            Inc i
         Until i = hPdf[CurrentSearchPage].Result.Count
         i = 0
         Inc MultiCount
         
      Until Multicount = BufferArrayTop.Length
   Endif
   
   'headlines never have a ")" after it and this is checked here
   'if a result is maching this specification it gets removed from the arrays
   If hPdf[CurrentSearchPage].Find(SynonymArray[Position, Synonymcount] & ")", Casesensetivity) = False Then
      MultiCount = 0
      Repeat
         Repeat
            If BufferArrayTop[MultiCount] = hPdf[CurrentSearchPage].Result[i].top Then
               If BufferArrayLeft[MultiCount] = hPdf[CurrentSearchPage].Result[i].Left Then
                  BufferArrayLeft.Remove(MultiCount)
                  BufferArrayTop.Remove(MultiCount)
                  BufferArrayWidth.Remove(MultiCount)
                  If BufferArrayLeft.Length = 0 Then Return 0
                  If BufferArrayLeft.Length = MultiCount Then
                     Dec MultiCount
                     Break
                  Endif
                  i = 0
               Endif
            Endif
            Inc i
         Until i = hPdf[CurrentSearchPage].Result.Count
         i = 0
         Inc MultiCount
         
      Until Multicount = BufferArrayTop.Length
   Endif
   
   ' If a result is still left in the array we have found the right headline and the position of this result is returned
   
   hPdf[CurrentSearchPage].Find(SynonymArray[Position, Synonymcount], Casesensetivity)
   While hPdf[CurrentSearchPage].Result[i].top <> BufferArrayTop[0] And hPdf[CurrentSearchPage].Result[i].left <> BufferArrayLeft[0]
      Inc i
   Wend
   Return i + 1
   
End

Public Sub ComboBox1_Click()
   
   Dim count As Integer = 0
   
   While ComboBox1.Text <> Synonyms[count, 0] Or count = 19
      Inc count
   Wend
   Wait
   Inc Application.Busy
   If ComboBox1.Text = Synonyms[count, 0] Then
      FindSynonymeFromArray(Synonyms, count)
   Endif
   Dec Application.Busy
   
End

Public Function FindSynonymeFromArray(SynonymArray As String[], Position As Integer) As Boolean
   '---------------------------------------------------------------------------
   ' -this function is typically called from the outside of this form and needs as transfer parameters a multidimensionalarray containing a list
   '  of strings and the position of the strings inside the array
   ' -the funktion tries to find a headline maching with one of the strings inside the SynonymArray beginning with the first
   '  string in the array and the first page of the pdf
   '---------------------------------------------------------------------------
   
   Dim hPic As Picture
   Dim TempStorage As Integer
   Dim currentSearchPage As Short = 1 ' contains the information on which page the search funktion searched the last time
   Dim count2 As Integer = 0
   Dim Casesensetivity As Boolean
   
   currentSearchResultSynonyms = 0
   currentSearchResult = 0
   BtSearchNext.Enabled = False
   BtSearchPrev.Enabled = False
   
   If currentSearchResultSynonyms = 0 Then
      count2 = 0
      Repeat
         Repeat
            hPic = hPdf[currentSearchPage].Image.Picture
            hPdf[currentSearchPage].Find(SynonymArray[Position, count2], False)
            If hPdf[currentSearchPage].Result.Count > 0 Then
               currentSearchResultSynonyms = VerifySearchResult(currentsearchPage, SynonymArray, Position, count2, False)
               If currentSearchResultSynonyms <> 0 Then
                  Casesensetivity = False
               Else
                  currentSearchPage = currentSearchPage + 1
               Endif
            Else
               currentSearchPage = currentSearchPage + 1
            Endif
         Until currentSearchResultSynonyms <> 0 Or currentSearchPage = hPdf.count + 1
         If currentSearchResultSynonyms = 0 Then
            Inc count2
            currentsearchPage = 1
         Endif
      Until currentSearchResultSynonyms <> 0 Or SynonymArray[Position, count2] = "!"
      
   Endif
   
   If currentSearchResultSynonyms <> 0 Then
      TempStorage = currentSearchResultSynonyms
      CurrentPage = currentSearchPage
      txtGotoPage.text = CurrentPage
      currentSearchResultSynonyms = TempStorage
      RenderPage(SynonymArray[position, count2], Casesensetivity)
      Return True
   Else
      Return False
   Endif
   
Catch
   Message.Info("An error occurred whilst trying to view the document.\n\nIf this persists please report this problem.")
   
End

Private Sub FindNext()
   '---------------------------------------------------------------------------
   '    This function finds the next string in the pdf matching the search string located after the current search result
   '---------------------------------------------------------------------------
   
   Dim hPic As Picture
   Dim currentSearchPage As Short = CurrentPage ' contains the information on which page the search funktion searched the last time
   Dim LastPageToSearch As Short                ' contains the information which page is the last page for the find function
   
   If CurrentPage = 1 Then
      LastPageToSearch = 1
   Else
      LastPageToSearch = CurrentPage
      
   Endif
   currentSearchResultSynonyms = 0
   currentSearchResult = 0
   BtSearchNext.Enabled = False
   BtSearchPrev.Enabled = False
   Repeat
      hPic = hPdf[currentSearchPage].Image.Picture
      hPdf[currentSearchPage].Find(TxtFind.Text, False)
      
      If hPdf[currentSearchPage].Result.Count > 0 Then
         CurrentPage = currentsearchPage
         currentSearchResult = 1
      Else
         If currentSearchPage = hPdf.Count Then
            currentSearchPage = 1
         Else
            currentSearchPage = currentSearchPage + 1
         Endif
      Endif
   Until currentSearchResult <> 0 Or currentSearchPage = LastPageToSearch
   If hPdf[currentSearchPage].Result.Count > 0 Then
      CurrentPage = currentSearchPage
      
      txtGotoPage.text = CurrentPage
      currentSearchResult = 1
      NumberOfSearchResults = hPdf[currentSearchPage].Result.Count
      
      BtSearchNext.Enabled = True
      BtSearchPrev.Enabled = True
      
      RenderPage(TxtFind.Text)
      
   Else
      TxtFind.Background = Color.Lighter(16711680)   '16711680 = Red
      RenderPage()
      
   Endif
   
Catch
   Message.Info("An error occurred whilst trying to view the document.\n\nIf this persists please report this problem.")
   
End

Private Sub FindPrevious()
   '---------------------------------------------------------------------------
   '    This function finds the next string in the pdf matching the search string located before the current search result
   '---------------------------------------------------------------------------
   
   Dim hPic As Picture
   Dim currentSearchPage As Short = CurrentPage ' contains the information on which page the search funktion searched the last time
   Dim LastPageToSearch As Short                ' contains the information which page is the last page for the find function
   
   If CurrentPage = hPdf.Count Then
      LastPageToSearch = 0
   Else
      LastPageToSearch = CurrentPage
   Endif
   currentSearchResultSynonyms = 0
   currentSearchResult = 0
   BtSearchNext.Enabled = False
   BtSearchPrev.Enabled = False
   
   Repeat
      hPic = hPdf[currentSearchPage].Image.Picture
      hPdf[currentSearchPage].Find(TxtFind.Text, False)
      If hPdf[currentSearchPage].Result.Count > 0 Then
         CurrentPage = currentsearchPage
         currentSearchResult = 1
      Else
         If currentSearchPage = 1 Then
            currentSearchPage = hPdf.Count
         Else
            currentSearchPage = currentSearchPage - 1
         Endif
      Endif
   Until currentSearchResult <> 0 Or currentSearchPage = LastPageToSearch
   
   If hPdf[currentSearchPage].Result.Count > 0 Then
      CurrentPage = currentSearchPage
      
      txtGotoPage.text = CurrentPage
      currentSearchResult = hPdf[currentSearchPage].Result.Count
      NumberOfSearchResults = hPdf[currentSearchPage].Result.Count
      BtSearchNext.Enabled = True
      BtSearchPrev.Enabled = True
      RenderPage(TxtFind.Text)
   Endif
   
Catch
   Message.Info("An error occurred whilst trying to view the document.\n\nIf this persists please report this problem.")
   
End

Public Sub BtSearchNext_Click()
   '---------------------------------------------------------------------------
   'This funktion is highlighting the next seach string located after the current search string
   '---------------------------------------------------------------------------
   
   If currentSearchResult = NumberOfSearchResults Then
      If currentpage = hPdf.Count Then
         CurrentPage = 1
      Else
         CurrentPage = CurrentPage + 1
      Endif
      FindNext()
   Else
      currentSearchResult = currentSearchResult + 1
      RenderPage(TxtFind.Text)
   Endif
   
End

Public Sub BtSearchPrev_Click()
   '---------------------------------------------------------------------------
   'This funktion is highlighting the next seach string located before the current search string
   '---------------------------------------------------------------------------
   
   If currentSearchResult > 0 Then
      If currentpage = 1 Then
         currentpage = hPdf.Count
      Else
         CurrentPage = CurrentPage - 1
      Endif
      FindPrevious()
   Else
      currentSearchResult = currentSearchResult - 1
      RenderPage(TxtFind.Text)
   Endif
   
End

Public Sub TxtFind_Change()
   '---------------------------------------------------------------------------
   'When the user starts to type in a new search string this function removes all previous search results and in case
   'the last search was not successful it turns the bachground color from red back to white
   '---------------------------------------------------------------------------
   
   If TxtFind.Background = Color.Lighter(16711680) Then
      TxtFind.Background = Color.White
      
   Endif
   
   currentSearchResult = 0
   currentSearchResultSynonyms = 0
   BtSearchNext.Enabled = False
   BtSearchPrev.Enabled = False
   Print hPdf.count
   RenderPage()
   
End

Public Sub ViewPort_KeyPress()
   
   If Key.Code = Key["f"] And Key.Control Then
      TxtFind.SetFocus
      ControllKey = False
   Endif
   If Key.Code = Key.F3 Then Find_Text()
   If Key.Control Then ControllKey = Key.Control
   
End

Public Sub PBox_KeyPress()
   
   If Key.Code = Key["f"] And Key.Control Then
      TxtFind.SetFocus
      ControllKey = False
      
   Endif
   If Key.Code = Key.F3 Then Find_Text()
   If Key.Control Then ControllKey = Key.Control
   
End

Public Sub ViewPort_KeyRelease()
   
   If Key.Control Then ControllKey = False
   
End

Public Sub PBox_KeyRelease()
   
   If Key.Control Then ControllKey = False
   
End

Public Function PBox_MouseWheel()
   
   If ControllKey And Mouse.Delta > 0 Then zoom_in()
   If ControllKey And Mouse.Delta < 0 Then zoom_out()
   
End

Public Sub Form_Close()
   
   modUtil.Kill_If_Temp(pdf_path)
   
End

Public Sub tbExternalViewer_Click()
   '-----------------------------------------------------------------------
   'Load the pdf into an external pdf viewer if one available in the system
   '-----------------------------------------------------------------------
    If pdf_path = "" Then Return   
    Try modArchiveDocumentsDBI.Launch_External_PDF_Viewer(pdf_path)

End
