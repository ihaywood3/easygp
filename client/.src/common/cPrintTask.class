' Gambas class file

Inherits CEmailTask
' Copyright (C) 2013-2014 Dr. Ian Haywood

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------

'  class to allow printing entirely in the background
'  largely duplicates the functionality of modPrinting and should replace it...eventually



Public Sub Latex_To_Pdf(latex As String) As String
   
   Dim stem As String = Temp$
   Dim f As File 
   Dim cmd As String
   
   f = Open stem & ".tex" For Write Create
   Print #f, latex
   Close #f
   cmd = modUtil.FindProgram("pdflatex", "texlive-latex-base")
   If IsNull(cmd) Then Return 
   cmd &= " \\\\batchmode \\\\input " & stem & ".tex\n"
   Me.SetCrashFile(stem & ".log")
   Me.Send(cmd)
   Me.Send(Subst$("rm -f &1.tex\nrm -f &1.aux\nrm -f &1.log\n", stem))
   Return stem & ".pdf"
End

Public Sub Print_PDF(pdf_path As String, Optional printertype As Integer = const.Paper_Plain, number_copies As Integer = 1)
   
   Dim cmd As String
   
   If pdf_path = "" Then Return
   cmd = modUtil.FindProgram("lpr", "cups")
   If IsNull(cmd) Then Return
   pdf_path = "'" & pdf_path & "'" 'fixes baulking on odd instring characters eg ( or )
   cmd &= " " & GetOption(printertype)!lpr & " -# " & number_copies & " " & pdf_path & "\n"
   Me.Send(cmd)
   
End

Public Function Latex_To_Ps(latex As String, printertype As Integer) As String
   Dim stem As String
   Dim f As File
   Dim cmd As String
   Dim coll As Collection
   
   stem = Temp$()
   f = Open stem & ".tex" For Write Create
   Print #f, latex
   Close #f
   cmd = modUtil.FindProgram("latex", "texlive-latex-base")
   If IsNull(cmd) Then Return 
   cmd &= " \\\\batchmode \\\\input " & stem & ".tex\n"
   coll = GetOption(printertype)
   cmd &= Subst$("dvips -q &2 &1.dvi -o &1.ps\n", stem, coll!dvips)
   Me.SetCrashFile(stem & ".log")
   Me.Send(cmd)
   Me.Send(Subst$("rm -f &1.tex\nrm -f &1.aux\nrm -f &1.dvi\nrm -f &1.log\n", stem))
   Return stem & ".ps"
   
End

Public Function Html_To_Pdf(sHtml As String) As String
   '-----------------------------------------------------------------------------
   'prints some html to a printer as a pdf using wkhtmltopdf to do the conversion
   '-----------------------------------------------------------------------------
   
   Dim cmd As String
   Dim wkhtmltopdf_options As String
   Dim fname As String
   
   If sHtml = "" Then Return
   cmd = modUtil.FindProgram("wkhtmltopdf", "wkhtmltopdf")
   If IsNull(cmd) Then Return
   wkhtmltopdf_options = modAdminDBI.Config_Get_Staff_Member("text_print_style", "standard")
   Select wkhtmltopdf_options
      Case "standard"
         wkhtmltopdf_options = ""
      Case "large"
         wkhtmltopdf_options = "--margin-top 25 --margin-bottom 25 --margin-left 20 --margin-right 20 "
   End Select
   fname = Temp$()
   File.Save(fname & ".html", sHtml)
   cmd = Subst$("&1 &2 -q '&3.html' '&3.pdf'\n", cmd, wkhtmltopdf_options, fname)
   Log.DebugMsg("HTML print command: " & cmd)
   Me.Send(cmd)
   Return fname & ".pdf"
   
End

Public Function GetOption(printertype As Integer) As Collection
   
   Dim config_printer As String
   Dim printername As String
   Dim coll As New Collection
   Dim printer_options As String
     
   config_printer = "Default"
   Try config_printer = FMain.GetSelectedPrinter()
   If config_printer = "" Then config_printer = "Default"
   If config_printer <> "Default" Then
      FMain.ResetPrinters()
      Return Subst$("-P &1", config_printer)
   Endif
   Select Case printertype
      Case const.Paper_Script
         printername = "script"
      Case const.Paper_Plain
         printername = "plain"
      Case const.Paper_Request
         printername = "request"
      Case const.Paper_Long
         printername = "long"
   End Select
   config_printer = Settings[Subst$("Printers/&1", printername), "Default"]
   printer_options = Settings[Subst$("Printers/&1_options", printername), "Default"]
   If printer_options <> "Default" Then
      coll = SplitOptions(printer_options)
   Endif
   If config_printer <> "Default" Then
      coll!lpr &= Subst$(" -P &1", config_printer)
   Endif
   Return coll
   
End

Public Function SplitOptions(opts As String) As Collection
   
   ' splits options string into dvips and lpr options strings
   
   Dim res As String[] = ["-O \\S+", "-T \\S+"]
   Dim i As String
   Dim re As Regexp
   Dim dvips_opts As String
   
   dvips_opts = ""
   For Each i In res
      If opts = "" Then Break 
      re = New Regexp(opts, i)
      If re.Offset > -1 Then
         dvips_opts &= " " & re.Text
         opts = Left$(opts, re.Offset) & Right$(opts, Len(opts) - (re.Offset + Len(re.Text)))
      End If
   Next
   
   Return ["lpr": opts, "dvips": dvips_opts] 
   
End


Public Function Pdf_Concat(pdfs As String[]) As String
   
  Dim stem As String
  Dim cmd As String
  Dim i As Integer
  Dim s As String
  
  cmd = modUtil.FindProgram("pdftk", "pdftk")
  If IsNull(cmd) Then Return
  stem = Temp$()
  For Each s In pdfs
     cmd &= " '" & s & "'"
  Next
  cmd &= " cat output " & stem & ".pdf\n"
  Me.Send(cmd & "\n")
  Return stem & ".pdf"
   
End

Public Function RenameFile(fname1 As String, fname2 As String) As String
   
   fname2 = File.Dir(fname1) &/ fname2
   Me.Send(Subst$("mv '&1' '&2'\n", fname1, fname2))
   Return fname2
   
End

' make an encrypted PDF from an ordinary one
' pdf1: the PDF to encrypt
' password: password to encrypt with
' fancy_name: a filename to ue for the new file
' delete_original: true if delete the original PDF
' returns the full path of the new encrypted PDF

Public Function Encrypt_PDF(pdf1 As String, password As String, Optional fancy_name As String, delete_original As Boolean = False) As String
   Dim pdftk As String
   Dim out_pdf As String
   
   pdftk = modUtil.FindProgram("pdftk", "pdftk")
   out_pdf = Temp$() & "encrypted.pdf"
   Me.Send(Subst$("&1 '&2' output '&3' user_pw '&4'\n", pdftk, pdf1, out_pdf, password))
   If Not IsNull(fancy_name) Then
      out_pdf = Me.RenameFile(out_pdf, fancy_name) 
   Endif
   If delete_original And If pdf1 <> out_pdf Then
      Me.Kill(pdf1)
   Endif
   Return out_pdf
   
End

Public Function Encrypt_Zip(the_files As String[], password As String) As String
  
  Dim zip_name As String 
  Dim cmd As String
  Dim i As String
  
  zip_name = Temp$() & "encrypted.zip"
  cmd = modUtil.FindProgram("7z", "p7zip-full") 
  cmd &= Subst$(" a -tzip '-p&1' '&2' ", password, zip_name)
  For Each i In the_files
     cmd &= Subst$("'&1' ", i)
  Next
  cmd &= "\n"
  Me.Send(cmd)
  Return zip_name
End


' send an email as encrypted PDF
' pdf1: the filename of the PDF to send
' addr: the e-mail to send to
' password: the password for encryption
Public Function Send_Email_Encrypted_Pdf(pdf1 As String, addr As String, password As String)
   
  Dim pdf2 As String
  
  pdf2 = Me.Encrypt_PDF(pdf1, password) 
  Me.Send_Email(addr, "Encrypted PDF", "This PDF is encrypted. The password will have/will be provided to you separately", [pdf2])
  Me.Kill(pdf2)
   
End

' send one or more files as an encrypted zip
' files: list of names of filesto encrypt
' addr: e-mail to send to
' password: to use for encryption
Public Function Send_Email_Encrypted_Zip(files As String[], addr As String, password As String)
   
  Dim zipfile As String
  
  zipfile = Me.Encrypt_Zip(files, password)
  Me.Send_Email(addr, "Encrypted ZIP", "this zipfile is encrypted, you have/will be provided with an encryption key separately", [zipfile]) 
  Me.Kill(zipfile)
End


Static Public Sub UnitTest(form_main As FMain)
   
  Dim p As CPrintTask
  Dim f As String
  
  p = New CPrintTask
  
  f = p.Latex_To_Pdf(File.Load("/home/ian/example.tex"))
  p.Send_Email_Encrypted_Zip([f], "rterry@internode.on.net", "guimaster")
  p.Finish()
  
End
