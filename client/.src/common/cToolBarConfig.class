' Gambas class file

'----------------------------------------------------------------------
' Embryonic but intended use is to configure toolbuttons on the toolbar
' This control = a panel + checkbox + label + icon (icon not yet done)
' ---------------------------------------------------------------------
Property Enabled As Boolean
Property ToolTip As String
Property Foreground As Integer
Property Font As Font
'Property Drag As Drag
Property Visible As Boolean
Property Expand As Boolean
Property tag As String
Property Text As String 
Public $hPanel As Panel
Public $hImage As PictureBox
Private $hLabel As Label
Public $hModuleTextBox As TextBox
Public $hModuleAddButton As ToolButton
Public $hModuleRemoveButton As ToolButton
Private $iColor As Integer
Private $hSpacer As Vbox
Private $hTextbox As TextBox
Public $hToolbutton As ToolButton
Private Module As Collection

Private $hHbox As HBox

Event MouseDrag()
Event Click()
Event KeyPress()

Public Sub _new(hContainer As Container, module As Collection, max_label_width As Integer, Optional Parent_Form As String = "")
   
   Dim hPict As Picture
   
   module = module                                 'Collection: eg pk, module name, icon_path
   With $hPanel = New Panel(hContainer) As "Panel"
      .Mouse = Mouse.Pointing
      .Arrangement = Arrange.Horizontal
      .Expand = False 
      .border = Border.Raised
      .height = 30
      .tag = module!pk
      .Background = Color.ButtonBackground
   End With
   hPict = Picture[module!icon_path]
   
   $hImage = New PictureBox($hPanel) As "ModulePicture"
   If hPict Then
      $hImage.Resize(hPict.Width + 4, 24)
      $hImage.Alignment = Align.Right
      $hImage.Picture = hPict
   Else
      $hImage.Resize(32, 24)
   Endif
   With $hSpacer = New VBox($hpanel)
      .width = 20
   End With
   With $hModuleTextBox = New TextBox($hpanel) As "txtModule"
      .Border = False  
      .ReadOnly = True
      .text = module!name
      .tag = "module name"
      .Background = $hPanel.Background
      .Expand = True
   End With
   
   With $hModuleAddButton = New ToolButton($hPanel) As "tbAdd"
      .border = True
      .AutoResize = True
      .text = "Add"
      
      .tag = module!name 
   End With
   With $hModuleRemovebutton = New ToolButton($hPanel) As "tbRemove"
      .border = True
      .AutoResize = True
      .text = "Remove"
      .tag = module!name 
   End With
   '----------
   '--------------------------------------------------------------------------------
   'If this class is called from Admin, there will be an icon path for configuration
   'otherwise, just show the user available icons
   '--------------------------------------------------------------------------------
   If Parent_Form = "Admin" Then 
      With $hTextbox = New TextBox($hPanel) As "txtIconPath"
         .Border = False  
         .Expand = True  
         .text = module!icon_path
         .tag = "icon path"
      End With
      
      With $hToolbutton = New ToolButton($hPanel) As "tbFilePath"
         .Picture = Picture["icon:/small/open"]
         .border = True 
         .width = 30
      End With
   End If   
   
End

Private Function GetToolButton() As ToolButton
   
   Dim hTbutton As ToolButton
   
   Try hTbutton = Last  
   If Not Error Then Return hTbutton 
   
End

Private Function GetTextBox() As TextBox
   
   Dim hTextbox As TextBox
   
   Try hTextbox = Last
   If Not Error Then Return hTextbox
   
End 

Private Function GetPanel() As Panel
   
   Dim hPanel As Panel
   
   Try hPanel = Last
   If Error Then
      hPanel = Last.Parent
   Endif
   
   Return hPanel
   
End

Public Sub tbFilePath_Click()
   
   Dim hToolButton As ToolButton
   Dim FIconSelect As FSelectIcon
   Dim $iconPath As String 
   Dim hCtrl As Control
   Dim PB As PictureBox
   Dim Tb As TextBox
   
   Try hToolButton = Last
   If Not Error Then
      FIconSelect = New FSelectIcon
      $iconPath = FIconSelect.Run("")
      If $iconPath Then
         For Each hctrl In hToolButton.Parent.Children
            If hctrl Is PictureBox Then
               pb = hctrl
               pb.picture = Picture["icons" &/ $iconPath]
            Endif
            If hctrl Is TextBox Then
               If hctrl.tag = "icon path" Then
                  tb = hctrl
                  tb.text = "icons" &/ $iconPath
                  Break
               Endif
            Endif
         Next
      Endif
      
   Endif
   
End

Public Sub tbAdd_Click()
  Dim tb As Toolbutton
  
  tb = GetToolButton()
End

Public Sub tbRemove_Click()
   Dim tb As Toolbutton
  
  tb = GetToolButton() 
End

Public Sub txtModule_KeyPress()
   
   Dim hTextbox As TextBox
   Dim hCtrl As Control
   Dim Txt As TextBox
   Dim tb As ToolButton
   
   hTextbox = GetTextBox()
   If Key.code = Key.return Then
      hTextbox.Background = Color.ButtonBackground   
      
      For Each HCtrl In hTextbox.Parent.Children
         If hctrl Is Toolbutton Then
            tb = hctrl
            tb.SetFocus()
            Break
         Endif
      Next
   Endif
   
End 

Public Sub Panel_MouseDown()
   
   Dim hPanel As Panel
   Dim X As Integer
   Dim Y As Integer
   
   hPanel = GetPanel()
   ' hPanel.Border = Border.None
   
   X = Mouse.X
   Y = Mouse.Y
   
   If Last <> hPanel Then
      X = X + Last.X
      Y = Y + Last.Y
   Endif
   
   If (X >= 0 And Y >= 0 And X < hPanel.W And Y < hPanel.H) Then
      
      Raise MouseDrag()
      
   Else
      
   Endif 
   
End

Public Sub Panel_MouseUp()
   
   Dim hPanel As Panel
   Dim X As Integer
   Dim Y As Integer
   
   hPanel = GetPanel()
   ' hPanel.Border = Border.None
   
   X = Mouse.X
   Y = Mouse.Y
   
   If Last <> hPanel Then
      X = X + Last.X
      Y = Y + Last.Y
   Endif
   
   If (X >= 0 And Y >= 0 And X < hPanel.W And Y < hPanel.H) Then
      
      Raise Click()
      
   Else
      
   Endif
   
End

Private Function Expand_Read() As Boolean
   
   Return $hPanel.Expand
   
End

Private Sub Expand_Write(bExpanded As Boolean)
   
   $hPanel.Expand = bExpanded
   
End

Private Function Tag_Write(tag As String)
   
   $hPanel.tag = tag
   
End

Private Function Tag_Read() As String
   
   Return $hPanel.Tag
   
End

Private Function Text_Write(txt As String)
   
   $hLabel.text = txt
   
End

Private Function Text_Read() As String 
   
   Return $hLabel.text
   
End

Private Function Enabled_Read() As Boolean
   
   Return $hPanel.Enabled
   
End

Private Sub Enabled_Write(bEnabled As Boolean)
   
   $hPanel.Enabled = bEnabled
   
End

Public Sub Move(X As Integer, Y As Integer)
   
   $hPanel.Move(X, Y)
   
End

Public Sub Resize(W As Integer, H As Integer)
   
   $hPanel.Resize(W, H)
   
End

Private Function ToolTip_Read() As String
   
   Return $hPanel.ToolTip
   
End

Private Sub ToolTip_Write(sToolTip As String)
   
   $hPanel.ToolTip = sToolTip
   
End

Private Function Visible_Read() As Boolean
   
   Return $hPanel.visible
   
End

Private Sub Visible_Write(Value As Boolean)
   
   $hPanel.visible = Value
   
End

Private Function Foreground_Read() As Integer
   
   Return $hPanel.Foreground
   
End

Private Sub Foreground_Write(Value As Integer)
   
   $hPanel.Foreground = Value
   
End

Private Sub Font_Write(Value As Font)
   
   $hLabel.Font = Value
   
End

Private Function Font_Read() As Font
   
   Return $hLabel.Font
   
End
