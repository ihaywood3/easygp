' Gambas class file

' Gambas class file .aspell.en.pws
'clskSpell
'March 30, 2008
'Written by Maximillian Von Kloisterheim
'Some code modified by Richard Terry
'Use and Requirements
'~~~~~~~~~~~~~~~~~~~~
'You are expected to have aspell installed on your system. No aspell, no spelling!
'When adding a word to the personal dictionary we dont actually get aspell to do it for us becuase it wont
'exit properly, and the program ends up hanging about after everything has closed. Instead we write the
'word directly to the dictionary ourselves.
'POTENTIAL PROBLEM/BUG
'If you have never used aspell, the file ".aspell.en.pws" might not be in your home folder, which could cause
'a problem. I am *assuming* that aspell puts this file here even if its empty, but be aware of this just in case
'you have problems with adding words
'
'You need to be using an Editor control - this code is designed to deal with the formatting etc, so other
'types of text based controls will cause problems - Change the code a bit and it should work on any control
'that can contain text
'UPDATE on this point: The removal of the formatting code can be done in the DoSpell and Replace button routines. With
'this code removed the speller can work on any text field.
'
'From the form that contains the editor call the class like this:
'
'  DIM SCheck AS NEW clskSpell
'  SCheck.EditorControlToCheck = TextEditorControl
'  SCheck.TempFileForSpelling = "/home/max/.... myspelltemp.txt"
'  SCheck.TempFileForErrors = "/home/max/.... myspelltemppp.txt"
'  SCheck.StartSpelling
'
'The Temp files expect a full path and filename. These will be used BUT NOT deleted - It figures that you are
'likely to do more than just a single spell check with whatever program this class is added to, so there is little
'point in creating and deleting files like that - leave them where they are, use them in each application and they
'will simply be re-used - If this changes for some reason then the KILL command can be issued at the same time as the
'code that closes and destroys the spelling window.
'
'Notes
'~~~~~
'There is only VERY rudimentary checking of the control that we are passed. As long as there IS a control
'passed this code will continue to run. If that control is not an Editor control, expect to hit errors when it comes to
'the formatting code!
'The contents of the temporary file variables are checked too, and if there is no path specified, the routine will
'simply exit.
'The code is not elegant (For now), and we cheat a bit to get the information back from aspell so we can process it.
'To do this we save the text to be checked as a temporary file, then assign aspell to check this temp file and pipe
'the results to another temporary file, which we load and process.
'This means we don't need to worry about trying to hold up aspell long enough to open a window, choose a word
'and correct the current one.
'
'UPDATE #1
'The code has changed to prevent the nasty flashing as the spelling window opened and closed. A new routine called
'DoSpell has been added, which simply takes the first item in the list of error words and sets up the form.
'Each subsequent action (Ignore, Add or Replace) will finish by removing the first item in the errors list, and calling
'out to DoSpell again.
'In its turn DoSpell will check that there is another item to check, and if there is not, will exit nicely.
'
'
'UPDATE #2 (10th April 2008)
'Another few edits:
'1) The call to open the spelling form (SpellingForm.ShowModal) has been moved from the StartSpelling routine to
'   the DoSpell routine. This move was made because in certain circumstances, namely when there were no spelling errors,
'   the program would be unable to exit because the form would not close properly. Now cured.
'
'2) Two new routines have been added to handle the possibility of images being inserted. I worked out the code to insert
'   images, but of course they take up space in the text flow, which meant that the spelling error positions were out of
'   whack on any words checked after an image appeared.
'   To get around this we call DogetImages directly before the spell check, and DoReplaceImages at the very end of
'   the spelling session. See below for an explanation.
'
'DogetImages searches through the underlying code for an image tag. When an image is found the entire image code is copied
'into an array (IMGIMGArray), along with its position (IMGPosArray - Note that this is redundant for now). The actual image
'code is then replaced by a placeholder that will NOT be checked by the speller.
'This amended text (Which is the code of the editor) is then copied back into the editor. The spelling then takes place.
'
'DoReplaceImages is called when the spelling is complete.
'It copies the underlying code of the editor again, and replaces each of the placeholder words with the correct
'image code. This code is then copied back into the editor, giving us the spell checked text and the images in their
'original locations. No problems with this so far.
'-----------------------------------------------------------------------------------------------------------------------------

Public EditorControlToCheck As Object 'assinged by the calling control = the editor control that is to be spell checked
'These are used to save the text in the editor object so that aspell can check it
'and to save the results for us to load - full path and filenames please
Public TempFileForSpelling As String
Public TempFileForErrors As String
'These are the controls that appear on the spelling form that is generated in the class
Private SpellingForm As Object
Private ThePanel As Object
Private mButton1 As Object
Private mButton2 As Object
Private mButton3 As Object
Private mButton4 As Object
Private mLabel As Object
Private mTBox As Object
Private MList As Object
'this array will hold the list of error lines reported by aspell
Private TheErrorList As String[]
'these are used during the spell check to hold and split the data returned by aspell
'we set these up here because they are used in several routines
Private WordStart As Integer
Private WordLen As Integer
Private CheckWord As String
Private Drift As Integer
'a boolean flag that can be set to cancel the spell check
Private CancelSpell As Boolean
'These are used to store the format of the current word as we prepare to check it
Private CurrentFormatBold As Boolean
Private CurrentFormatItalic As Boolean
Private CurrentFormatUnderline As Boolean
Private CurrentFormatStrikeOut As Boolean
Private CurrentFormatColor As Integer
Private CurrentFormatFontName As String
Private CurrentFormatFontSize As Integer
'
'These are used to store the image code (if any). Note that the pos array may well be redundant by now
'but is cleared before use in any case
Private IMGPosArray As Integer[]
Private IMGIMGArray As String[]
Private Linked_txtBox As Textbox
'
'

Public Sub init(Optional tb As TextBox = Null)
   
   IMGPosArray = New Integer[]
   IMGIMGArray = New String[]
   TheErrorList = New String[]
   WordStart = 0
   drift = 0
   Try Linked_txtBox = tb
   
End

Private Sub DoSpell()
   '--------------------------------------------------------------------------------------------------
   'This routine now does most of the work, making sure that there is another word to check, and if so
   'setting everything up, ready for the user to respond
   '--------------------------------------------------------------------------------------------------
   
   Dim holder, pos As String
   Dim CUN, GetSuggestedWords, SPL, SPL2 As String[]
   Dim x, frog As Integer
   
   'First make sure that we actually have an error to check - TheErrorList is populated by the time
   'this routine is called, so if its empty, the user can spell!
   If TheErrorList.Count = 0 Then
      'Before we exit we must check to see if there were any images, and put them back where we found them
      DoReplaceImages
      'all done
      '   Message.Info("Spelling Check Complete")
      'close everything up and return
      SpellingForm.Close
      ' SpellingForm.Delete
      Return
   Endif
   
   'Get the first item in the error list
   holder = TheErrorList[0]
   
   'split this line at the colon so that CUN[1] contains only the suggested words
   CUN = Split(holder, ":")
   
   'Now split CUN[1] at the commas - GetSuggestedWords now holds all the suggested words
   GetSuggestedWords = Split(CUN[1], ",")
   
   'Split the *original* error line at the commas - we are doing this to return the first item in the listing, which will
   'give us (eventually) the position etc
   SPL = Split(holder, ",")
   
   'Clear the list ready for the next set of suggested words
   mList.Clear
   
   'Now loop through the suggested words and add them to the list on the spelling form
   For x = 0 To GetSuggestedWords.Count - 1
      mList.Add(Trim$(GetSuggestedWords[x]))
   Next
   
   'Now split the first item in SPL - remember that this was the original error line split at the commas, so the first
   'item contains the information we need about the positions of the errors, and also the first suggested word
   SPL2 = Split(SPL[0], " ")
   
   'we can get the pos of the current error word by removing the : from item 3 in the array
   pos = Replace$(SPL2[3], ":", "")
   
   'convert this into a variable now - it starts as a string so we need the value of it
   frog = Val(pos)
   
   'set the position of the start of the word - note that on the first pass this will always be zero
   'also note that in some instances Drift becomes negative, but this doesn't matter
   WordStart = frog + Drift
   
   'now get the length of the word - we know its in SPL2[1]
   WordLen = Len(SPL2[1])
   
   'and of course we want the actual word itself
   CheckWord = SPL2[1]
   
   'Set this information on the spelling form
   mLabel.Caption = CheckWord
   mTBox.Text = CheckWord
   
   'Set the position to make sure it is INSIDE the word we are about to check
   'We can then take a note of the formatting of the word, so this can be replicated when we
   'replace it - without this the word will drop back to default formatting
   EditorControlToCheck.Pos = WordStart + 1
   CurrentFormatBold = EditorControlToCheck.Format.Font.Bold
   CurrentFormatItalic = EditorControlToCheck.Format.Font.Italic
   CurrentFormatUnderline = EditorControlToCheck.Format.Font.Underline
   CurrentFormatStrikeOut = EditorControlToCheck.Format.Font.StrikeOut
   CurrentFormatColor = EditorControlToCheck.Format.Color
   CurrentFormatFontName = EditorControlToCheck.Format.Font.Name
   CurrentFormatFontSize = EditorControlToCheck.Format.Font.Size
   EditorControlToCheck.Select(WordStart, WordLen)
   SpellingForm.ShowModal
   
End

Public Sub StartSpelling()
   '---------------------------------------------------------------------------------------
   'This is the routine that starts the whole thing - Kind of like the form_open in a form
   'RT Notes: Not sure how this works, seems to be some code here that does nothing
   '---------------------------------------------------------------------------------------
   
   Dim aspell As Process
   Dim i, x, frog As Integer
   Dim GetSuggestedWords, CUN, SPL, SPL2 As New String[]
   Dim pos, holder As String
   Dim COD As String
   Dim JustTheText As String
   Dim HoldingClipboard As String
   
   'Check that a control has been passed to us - there is currently NO checking to make sure that the
   'control is of the correct type
   If EditorControlToCheck = Null Then
      Message.Error("You Must Pass the Spell checker the name of an Editor!")
      Return
   Endif
   
   'check the path names - if either of these is empty then dont even think of carrying on
   If TempFileForSpelling = "" Or TempFileForErrors = "" Then
      Message.Error("You must set the temporary filenames first!")
      Return
   Endif
   Clipboard.Clear()
   CancelSpell = False  'set this to false now - later it can be set to true to cancel the whole operation
   BuildTheForm         'Build the form
   TheErrorList.Clear   'Clear the array so we are ready for some data
   DogetImages          'check to see if there are any images before we start - we will remove them and deal with them later
   
   'Select the text and transfer it to the variable - this loses all the formatting shit that the textedit holds in
   'its standard .text property
   'store the contents of the clipboard
   HoldingClipboard = ""
   HoldingClipboard = Clipboard.Paste()
   
   EditorControlToCheck.SelectAll
   EditorControlToCheck.Copy
   EditorControlToCheck.Unselect
   JustTheText = Clipboard.Paste()
   
   'Replace any line feeds in the variable with a space- this makes aspell report the word positions as we expect to
   'get them in relation to the textedit control that is being checked
   COD = Replace(JustTheText, "\n", " ")
   JustTheText = COD
   
   'Save this data to a temp file
   File.Save(TempFileForSpelling, JustTheText)
   
   'Shell out to aspell, quoting the file we just saved and piping the spelling check to another temp file
   'Note that adding -H before pipe will stop aspell from trying to check HTML code (The underlying code
   'in the editor), but the positions are still out because aspell counts the html, even though you cant see it when you are
   'moving through the document - this is the reason why we don't just pass the control and check it directly
   Shell "aspell --lang=en_GB --variety=ise pipe <" & TempFileForSpelling & " >" & TempFileForErrors Wait
   'Load the temp file just created by aspell - this holds a list of the spelling mistakes and the suggestions that
   'aspell came up with
   LoadList
   'Process the errors returned and setup the controls in the spelling window
   DoSpell
   'Finally show the spelling form - We are keeping this as modal here, not to hold up a loop
   'but because the returned list of errors includes the *positions* of the wrongly spelled words.
   'If this form is NOT modal, and the user changes the text in any way while the spelling form is
   'open, these positions will be void, and nasty problems will start if any of the spellings are processed
   'SpellingForm.ShowModal
   If HoldingClipboard = "" Then
      Clipboard.Clear
   Else
      Clipboard.Copy(HoldingClipboard)
   Endif
Catch
   Return 'bug somewhere in this routine with the clipboard.paste trying to past an object.
   
End

Private Sub DogetImages()
   
   Dim HuntForIMG, EndChar, IMGStr As String
   Dim FndIMG, EndCharPos, q As Integer
   Dim HoldStr As String
   
   'Clear these arrays now
   IMGPosArray.Clear
   IMGIMGArray.Clear
   
   'take a copy of the text we need to check - this will return the actual CODE in the editor, not what you see
   HuntForIMG = EditorControlToCheck.RichText
   
   'find the position first image (if any) and set var q to -1
   FndIMG = InStr(HuntForIMG, "<img src=")
   q = -1
   
   'start a loop that will not end until we can find no more images
   Do
      If q = FndIMG Then Break
      If FndIMG = 0 Then Break
      'set q now so we can check it after the next loop
      q = FndIMG
      'find the end of the current image tag, starting from the position of the start of the tag
      EndCharPos = InStr(HuntForIMG, ">", FndIMG)
      'Add the position and the entire image code to the arrays
      IMGPosArray.Add(FndIMG)
      IMGIMGArray.Add(Mid$(HuntForIMG, FndIMG, (EndCharPos + 1) - FndIMG))
      'search for the next image, starting at the current position plus one
      FndIMG = InStr(HuntForIMG, "<img src=", FndIMG + 1)
   Loop
   
   'when we get to here the arrays hold the positions and code of all the images
   For q = 0 To IMGIMGArray.Count - 1
      'remove the image codes from the text, replacing them with a placeholder word that will not be spell checked
      HoldStr = Replace$(HuntForIMG, IMGIMGArray[q], "M1A1X" & Trim(Str(q)))
      HuntForIMG = HoldStr
   Next
   
   'once we get here all images should have been removed from the code, so we can set Editor text to this amended version
   EditorControlToCheck.richText = HuntForIMG
   
End

Private Sub DoReplaceImages()
   
   Dim HoldStr, CAD As String
   Dim q As Integer
   
   'we need to replace the images again, so get the CODE of the editor again
   HoldStr = EditorControlToCheck.richText
   
   'loop for the number of images we found
   For q = 0 To IMGIMGArray.Count - 1
      'replace each placeholder with the correct image code
      CAD = Replace$(HoldStr, "M1A1X" & Trim(Str(q)), IMGIMGArray[q])
      HoldStr = CAD
   Next
   
   'set the editor to contain this amended text and return - all images have been replaced
   EditorControlToCheck.richText = HoldStr
   
End

Public Sub mButton3_Click()
   '--------------------------------------------------------------------------------------------------------------------
   'The Add button
   'Note that this is a bit of a hack - I couldnt get aspell to add the word itself AND exit gracefully enough to allow
   'the program to close, so I simply went directly to the personal dictionary that aspell uses, and added the
   'word to the end of it.  FIXME this corrupts the .aspell file
   '--------------------------------------------------------------------------------------------------------------------
   
   Dim hFile As File
   
   hFile = Open "~/.aspell.en.pws" For Output Append
   Print #hFile, mTBox.Text
   Close #hFile
   
   TheErrorList.Delete(0)  'Clear the current word from the list
   DoSpell                 'Process the next item in the error list
   
End

Public Sub mButton4_Click()
   '-------------------------------------------------------------------
   'Set this to true and Unselect the editor that we are checking
   'as soon as the form is closed CancelSpell will be checked and will
   'allow us to jump out of the loop
   '------------------------------------------------------------------
   
   CancelSpell = True
   EditorControlToCheck.Unselect
   '   SpellingForm.Hide    ' will be closed from the calling form when it closes.
   SpellingForm.Close
   
End

Public Sub mButton2_Click()
   '------------------
   'The replace button
   '------------------
   
   Dim OriLen, Newlen As Integer
   
   'First get the lengths of the original bad word and the new one we are replacing it with
   OriLen = WordLen
   Newlen = Len(mTBox.Text)
   '   Message.Info(mTBox.text)
   'Now check to see the difference between the two words
   'note that if there is NO difference, nothing is done with Drift
   If OriLen < Newlen Then
      'The original word is shorter than the new word, so set Drift by adding the difference between the two
      Drift = Drift + (Newlen - OriLen)
   Else If OriLen > Newlen Then
      'Here the original word is longer than the replacement, so we subtract the difference from Drift
      Drift = Drift - (OriLen - Newlen)
   Endif
   
   'Now that drift has been set we can select the offending word in the editor again (Its already selected
   'but we do this to avoid errors) and then insert the new word, replacing the offending one
   EditorControlToCheck.Select(WordStart, WordLen)
   EditorControlToCheck.Insert(mTBox.Text)
   '---------------------------------------------------------------------------------
   'if the speller has been called from a textbox which is using a hidden textcontrol
   'replace the text in the textbox
   '---------------------------------------------------------------------------------
   Try linked_txtbox.text = Replace(linked_txtbox.text, mLabel.text, mTBox.text)
   'Now reset the formatting according to the values we stored earlier
   EditorControlToCheck.Format.Font.Bold = CurrentFormatBold
   EditorControlToCheck.Format.Font.Italic = CurrentFormatItalic
   EditorControlToCheck.Format.Font.Underline = CurrentFormatUnderline
   EditorControlToCheck.Format.Font.StrikeOut = CurrentFormatStrikeOut
   EditorControlToCheck.Format.Color = CurrentFormatColor
   EditorControlToCheck.Format.Font.Name = CurrentFormatFontName
   EditorControlToCheck.Format.Font.Size = CurrentFormatFontSize
   TheErrorList.Delete(0) 'Clear the current word from the list
   DoSpell                'Process the next item in the error list
   
End

Public Sub mButton1_Click()
   '------------------------------------
   'The ignore button
   'Ignore the current word
   'Clear the current word from the list
   '------------------------------------
   
   TheErrorList.Delete(0)
   DoSpell   'Process the next item in the error list
   
End

Public Sub mList_Click()
   '------------------------------------------------------
   'List click to put the suggested word into the text box
   '------------------------------------------------------
   
   mTBox.Text = mList[mList.Index].Text
   
End

Private Sub BuildTheForm()
   '--------------------------------------------------------------
   'Routine to build the form and assign its events to this class
   '-------------------------------------------------------------
   
   SpellingForm = New Form
   SpellingForm.Width = 301
   SpellingForm.Height = 294
   SpellingForm.Center
   SpellingForm.Caption = "Spelling Check"
   SpellingForm.Border = 1 'FIXED
   SpellingForm.SkipTaskbar = True
   SpellingForm.Arrangement = 5 'FILL
   SpellingForm.Padding = 5
   SpellingForm.Maximized = False
   SpellingForm.minimized = False   
   SpellingForm.resizable = False   
   SpellingForm.fullscreen = False  
   Object.Attach(SpellingForm, Me, "SpellingForm")
   
   'THE PANEL
   ThePanel = New Panel(SpellingForm)
   ThePanel.Border = 4 'ETCHED
   
   'THE BUTTONS
   mButton4 = New Button(ThePanel)
   mButton4.X = 203
   mButton4.Y = 245
   mButton4.width = 70
   mButton4.Height = 21
   mButton4.Caption = "Cancel"
   Object.Attach(mButton4, Me, "mButton4")
   '
   mButton3 = New Button(ThePanel)
   mButton3.X = 203
   mButton3.Y = 126
   mButton3.width = 70
   mButton3.Height = 21
   mButton3.Caption = "Add"
   mButton3.enabled = False 'fixme disabled this because adding word corrupts the .aspell file.
   Object.Attach(mButton3, Me, "mButton3")
   '
   mButton2 = New Button(ThePanel)
   mButton2.X = 203
   mButton2.Y = 70
   mButton2.width = 70
   mButton2.Height = 21
   mButton2.Caption = "Replace"
   Object.Attach(mButton2, Me, "mButton2")
   '
   mButton1 = New Button(ThePanel)
   mButton1.X = 203
   mButton1.Y = 14
   mButton1.width = 70
   mButton1.Height = 21
   mButton1.Caption = "Ignore"
   Object.Attach(mButton1, Me, "mButton1")
   
   'THE LABEL
   mLabel = New Label(ThePanel)
   mLabel.X = 14
   mLabel.Y = 14
   mLabel.width = 175
   mLabel.Height = 21
   mLabel.Border = 2 'Sunken
   
   'THE TEXT BOX
   mTBox = New TextBox(ThePanel)
   mTBox.X = 14
   mTBox.Y = 42
   mTBox.width = 175
   mTBox.Height = 21
   
   'THE LIST
   MList = New ListBox(ThePanel)
   MList.X = 14
   MList.Y = 70
   MList.width = 175
   MList.Height = 196
   Object.Attach(MList, Me, "MList")
   
End

Public Sub spellingForm_Open()
   
End

Public Sub SpellingForm_Close()
   
   DoReplaceImages()
   
End

Public Sub SpellingForm_Keypress()

   If Key.code = Key.esc Then
      SpellingForm_Close()
      SpellingForm.Delete()
   Endif
   
End

Public Sub LoadList()
   '------------------
   'Load the errorlist
   '------------------
   
   Dim hFile As File
   Dim Holder As String
   
   hFile = Open TempFileForErrors For Input
   While Not Eof(hFile)
      Line Input #hFile, Holder
      If Holder <> "" Then
         If Left$(Holder, 1) = "&" Then TheErrorList.Add(Holder)
      Endif
   Wend
   Close #hFile
   
End
