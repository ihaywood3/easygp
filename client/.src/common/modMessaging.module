' Gambas module file
' a *simple* messaging layer
' based on old gnumed messaging layer but adapted to Gambas

' Copyright (C) 2010 Dr. Ian Haywood

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

' For the messaging system to work, an agreed system of message names and parameters must exist
' Standard messages should be documented here

' Application_Close(): called once just before application closes
' Close_Patient(patient As Collection, consult as cConsult): called when patient closed in the main clinical screen
' Open_Patient(patient As Collection, consult As cConsult): called when patient opened in the main clinical screen
' Browser_Goto(link As cLink): add a page to the emulated browser in the current tab
' Browser_New_Tab(link As cLink): add a page to the emulated browser in a new tab
' usw

Private events As New Collection

Public Sub Listen(obj As Object, event_name As String)
  
  ' connect an object to an event. event_name is the name of the event
  ' the object is most likely to be "Me"
  ' the object must have a public method of the same name as the event to receive them
  ' this means event names must be valid Gambas identifiers
  ' this method must be a function, although it can return Null
  ' all event handlers of a given event must have a same numbers of parameters and types
  
  If Not events.Exist(event_name) Then events[event_name] = New Object[]
  events[event_name].Push(obj)
End

Public Sub Unlisten(obj As Object, event_name As String)
  
  ' unconnect an object. As gambas has no weak references, this is quite important 
  ' in explicitly unlinking from objects that are to be destroyed
  
  Dim i As Integer

  i = events[event_name].Find(obj)
  If i > -1 Then events[event_name].Remove(i)

End

Public Function Send(event_name As String, params As Variant[]) As Variant[]
  ' sends out an event to all listeners
  ' params is an array of parameters
  ' it must match the parameters on all receiving methods
  ' if a receiver returns Null, this is ignored
  ' not-null values are collected and returned as a variant array
  
  Dim ret As New Variant[]
  Dim v As Variant
  Dim obj As Object
  
  For Each obj In events[event_name]
    v = Object.Call(obj, event_name, params)
    If Not IsNull(v) Then ret.Push(v)
  Next 
  If event_name = "Application_Close" Then
    events.Clear()  ' try to stop interpreter complaining about circular references
  Endif
  Return ret

End
