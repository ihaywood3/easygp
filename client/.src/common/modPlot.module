' Gambas module file

' Copyright (C) 2008-2013 Dr. Richard Terry, Dr. Ian Haywood

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------


Public Function Gnuplot_Run(width As Integer, height As Integer, gnuplot As String, data As Result, Optional font_size As Integer = 3) As String

   Dim sGraphFontSize As String
   Dim gs_path As String
   Dim pro As Process
   Dim datafile As File
   Dim tempfile As String
   Dim dfn As String
   Dim i As ResultField
   Dim d1 As Date
   
   If data.Count < 1 Then
      Return "insufficient_data.png"
   End If
   
   Select Case font_size
      Case 1
         sGraphFontSize = "tiny"
      Case 2
         sGraphFontSize = "small"
      Case 3 
         sGraphFontSize = "medium"
      Case 4 
         sGraphFontSize = "large"
   End Select
   
   Let dfn = Temp$("data1")
   datafile = Open dfn For Output Create
   For Each data
      For Each i In data.Fields
         If i.Type = gb.Date Then
            d1 = data[i.Name]
            Print #datafile, Format$(d1, "dd/mm/yy"); " ";
         Else
            Print #datafile, data[i.Name]; " ";
         Endif
      Next
      Print #datafile  
   Next
   Close #datafile
   
   Let tempfile = Temp() & ".png"
   Let gs_path = modUtil.FindProgram("gnuplot", "gnuplot")
   If IsNull(gs_path) Then Return Null
   Let pro = Exec [gs_path] For Write
   Print #pro, "set terminal png transparent nocrop enhanced " & sGraphFontSize & " size " & width & ", " & height & "\n"
   Print #pro, "set output '" & tempfile & "'\n"
   Let gnuplot = Replace$(gnuplot, "data.dat", dfn)
   Print #pro, gnuplot
   Close #pro
   pro.Wait()
   Try Kill dfn
   Return tempfile

End

Public Function Gnuplot_LineGraph(data As Result, Optional title As String, ytitle As String, linetype As String = "unique") As String

   ' bezier, sbezier, unique, cspline,acsplines, frequency, cumulative, kdensity
   ' takes a SQL result object, the title, and the title for the y axis
   ' returns a gnuplot script to draw a linegraph
   ' of the result first column must be a Date and second some numeric data type
   ' a third numeric column is allowed, causing two lines to be drawn

   Dim s As String
   Dim third As String  
   
   s = "set xdata time\n"
   "set timefmt x \"%d/%m/%Y\"\n"
   "set format x \"%m/%y\"\n"
   "set grid xtics nomxtics ytics nomytics\n"
   "set grid layerdefault linetype 0 linewidth 1.000, linetype 0 linewidth 1.000\n"
   "set xlabel \"Date\" textcolor lt 1\n" 
   "set pointsize 2\n"
   If Not IsNull(title) Then s &= "set title \"" & title & "\"\n" 
   If Not IsNull(ytitle) Then s &= "set ylabel \"" & ytitle & "\" textcolor lt 1\n"
   
   If data.Count < 3 Then
      linetype = "unique"
   End If
   third = ""
   If linetype = "acsplines" Then
      If data.Count < 4 Then
         linetype = "unique"
      Else
         third = ":(10.0)"
      Endif
   Endif
   s &= "plot 'data.dat' using 1:2" & third & " t '' smooth " & linetype & ", '' using 1:2 t '' with points"
   If data.Fields.Count = 3 Then
      s &= ",'data.dat' using 1:3" & third & " t '' smooth " & linetype & ", '' using 1:3 t '' with points"
   End If
   s &= "\n"
   Return s

End

Public Function LineGraph(width As Integer, height As Integer, data As Result, Optional title As String, ytitle As String, font_size As Integer = 3, Optional line_type As String = "unique") As String
   
   Return Gnuplot_Run(width, height, Gnuplot_LineGraph(data, title, ytitle, line_type), data, font_size)
   
End

Public Function Gnuplot_BoxGraph(data As Result, Optional style As String = "rowstacked") As String
   ' generates gnuplot for a boxed graph
   ' styles can be rowstacked or cluster gap NN
   
   Dim s As String
   Dim df As String
   Dim j As Integer
   
   s = "set grid xtics nomxtics ytics nomytics\n"
   "set grid layerdefault linetype 0 linewidth 1.000, linetype 0 linewidth 1.000\n"
   "set boxwidth 0.75 absolute\n"
   "set style fill solid 1.00 border -1\n"
   "set style data histograms\n"
   s &= "set style histogram " & style & "\n"
   s &= "set xlabel \"" & data.Fields[0].Name & "\" textcolor lt 1\n" 
   's &= "set yrange[0: 200]"
   s &= "plot "
   Let df = "data.dat"
   Let j = 1
   While j < data.Fields.Count - 1
      s &= "'" & df & "' using " & (j + 1) & " t \"" & data.Fields[j].Name & "\", "
      Let df = ""
      Inc j
   Wend
   s &= "'" & s & "' using " & (j + 1) & ":xtic(1) t \"" & data.Fields[j].Name & "\"\n"
   Return s

End

Public Function Gnuplot_Scatter() As String
   
   Dim s As String
   
   s = "set key bmargin center horizontal right noreverse enhanced nobox\n"
   "l(x) = y0 + m*x\n"
   "fit l(x) 'data.dat' via y0, m\n"
   "plot 'data.dat', l(x)\n"
   
   Return s

End

Public Sub Graph_Measurement(F As FProgressNotePage, fk_patient As Integer, measurement_text As String)
   '-----------------------------------------------------------
   'Note: like it or not, rightly or wrongly for the moment
   'measurments WE ie the user inputted such as BP, height
   'weight, are stored in clin_measurements.measuremnts table
   'whereas results returned from labs in hl7 files are in the
   'clin_requests.requests_results table.
   'hence the differences in the queries. Also BP must return
   'a calculated systolic/diastolic value from e.g n=190000
   'i.e systolic &1000 + diastolic
   '-----------------------------------------------------------

   Dim sql As String
   Dim sql_end As String
   Dim units As String
   Dim $Result As Result
   Dim Graph_title As String  
   Dim Ref_Range As String
  ' Dim fk_type As Variant = F.lvwAvailableMeasurements.Item.Key 'string or number
   ' Dim measurement_text As String = Trim(F.lvwAvailableMeasurements.Item.Text)
   Dim x As Integer
   Dim Bp As String
   '-----------------------------------------------------
   'This sql will apply to: weight, height as the default
   '-----------------------------------------------------
   sql = "Select distinct consult_date As Date, measurement"  
   '-----------------------------------------------
   'The ending of sql is same for every measurement
   '-----------------------------------------------
   sql_end = " From clin_measurements.vwmeasurements"
   sql_end &= " WHERE fk_patient = " & fk_patient ' " AND  fk_type = " & fk_type 
   sql_end &= "  And lower(type) = $$" & Lower(measurement_text) & "$$"
   sql_end &= " AND age(consult_date) < $$" & f.cmbGraphDateRange.Text & "$$ "
   sql_end &= " ORDER BY date"
   
   Select Case Lower(measurement_text)
      Case "bp"
         'Get three columns: date, systolic,diastolic
         'BP represented as number *1000 eg 190060 = BP of 190/60
         sql = "Select consult_date As Date,"
         "(measurement - (measurement % 1000))/1000 as systolic, "
         "mod(measurement, 1000) As diastolic "
         sql = sql & sql_end
         units = "MmHg"
      Case "weight"
         units = "Kg"
         sql = sql & sql_end
      Case "height" 
         units = "cm"
         sql = sql & sql_end
      Case Else
         '----------------------------------------------------------
         'fixme this may not exist
         'Otherwise, we are trying to graph anything
         'First get the (mostly but not aways accurate)
         'reference range [i.e mixed labs could be different ranges]
         '-----------------------------------------------------------
         sql = "select distinct reference_range "
         sql &= "From clin_requests.vwResults " 
         sql &= " WHERE fk_patient = " & f.patient.pk_patient
         sql &= " AND Lower(vwresults.result) = $$"
         sql &= Lower(measurement_text) & "$$"
         $Result = modDBConnect.exec_query(sql)
         If $Result.count Then
            Ref_Range = $Result!reference_range
         End If
         'Ok, now have the range to display, get the measurements
         
         sql = "Select distinct date, value_as_number as measurement From clin_requests.vwResults "
         sql &= " WHERE fk_patient = " & f.patient.pk_patient
         sql &= " AND Lower(vwresults.result) = $$"
         sql &= Lower(measurement_text) & "$$ ORDER BY  vwresults.date"
         
   End Select
   '---------------
   'Get the records
   '---------------
   
   $Result = modDBConnect.exec_query(sql)
   F.lvMeasurementValues.Clear
   'At this point there must be at least
   If $Result.count Then
      '--------------------------------------------------
      'If there are measurements, show these on a list
      'first show the very last one somewhere obvious
      'and put that first on the list of all measurements
      '--------------------------------------------------
      Graph_Title = measurement_text 
      If Ref_Range <> "" Then
         Graph_title &= " [" & ref_range & "]"
      End If
      Graph_title &= Format($Result!date, "dd/mm/yyyy") & "-"
      $Result.MoveLast 
      Graph_title &= Format($Result!date, "dd/mm/yyyy")
      x = 0
      F.TextLabel1.text = "<small><B>Latest measurement</B>:"
      F.TextLabel1.text &= Format($Result!date, "dd/mm/yyyy")
      
      Select Case Lower(measurement_text)
         Case "bp"
            'Special case, convert to a string
            bp = $Result!systolic & "/" & $Result!diastolic
            F.TextLabel1.text &= "<B>   Value:</B>" & bp & "</small>"
            F.lvMeasurementValues.Add(x, Format($Result!date, "dd/mm/yyyy") & " " & bp)
         Case Else
            F.TextLabel1.text &= "<B>   Value:</B>" & $Result!measurement & "</small>"
            F.lvMeasurementValues.Add(x, Format($Result!date, "dd/mm/yyyy") & " " & $Result!measurement)
      End Select
      '---------------------------------------------------------------------------------
      'Now, sequentially add all the previous measurements to a list, latest till oldest
      '---------------------------------------------------------------------------------
      Inc x
      Do Until $Result.MovePrevious()
         Select Case Lower(measurement_text)
            Case "bp"
               bp = $Result!systolic & "/" & $Result!diastolic
               F.lvMeasurementValues.Add(x, Format($Result!date, "dd/mm/yyyy") & " " & bp)
            Case Else
               F.lvMeasurementValues.Add(x, Format($Result!date, "dd/mm/yyyy") & " " & $Result!measurement)
         End Select
         Inc x 
      Loop
      Try F.Picturebox2.Picture = Picture.Load(modPlot.LineGraph(F.Picturebox2.Width, F.Picturebox2.Height, $Result, Graph_Title, units))
      If Not Error Then
         F.HBox_Picture.Padding = 0
         F.Picturebox2.Visible = True
         F.tlPLottingError.Visible = False
         Return
      End If
   End If
   '---------------------------------------------------------------
   'For whatever reason, ended up with either no or inadequate data
   '---------------------------------------------------------------
   F.HBox_Picture.Padding = 10
   F.Picturebox2.Visible = False
   F.tlPLottingError.Visible = True
   
End

Public Sub Graph_And_Values_Get(fk_patient As Integer, loinc As String, measurement_text As String, PicHeight As Integer, picWidth As Integer, font_size As Integer, Optional line_type As String = "unique", Optional number_months As Integer = 0) As Collection
   '-----------------------------------------------------------
   'PURPOSE    For a given patient return a png of the graph
   '           and the values in graph for given interval
   'Note: like it or not, rightly or wrongly for the moment
   'measurments WE ie the user inputted such as BP, height
   'weight, are stored in clin_measurements.measuremnts table
   'whereas results returned from labs in hl7 files are in the
   'clin_requests.requests_results table.
   'hence the differences in the queries. Also BP must return
   'a calculated systolic/diastolic value from e.g n=190000
   'i.e systolic &1000 + diastolic
   '-----------------------------------------------------------

   Dim sql As String
   Dim sql_end As String
   Dim units As String
   Dim $Result As Result
   Dim Ref_Range As String
   Dim Graph_Title As String 
   ' Dim fk_type As Variant = F.lvwAvailableMeasurements.Item.Key 'string or number
   Dim Graph_And_Values As Collection 
   '-------------------------------------------------------------
   'IF loinc code, then measurement is from an observation result
   '-------------------------------------------------------------
   If loinc <> "" Then
      sql = "Select distinct reference_range from documents.vwGraphableobservations where fk_patient = " & fk_patient & " and loinc = $$" & loinc & "$$ "
      Try ref_range = modDBConnect.exec_query(sql)!reference_range 'may not have a range
      sql = "Select distinct observation_date as date, value_numeric as measurement from documents.vwGraphableobservations where fk_patient = "
      sql &= fk_patient & " and loinc = $$" & loinc & "$$ "
      If number_months Then
         sql &= " AND observation_date between $$" & Format(DateAdd(Now, gb.month, -6), "dd/mm/yyyy") & "$$  AND $$" & Format(Now, "dd/mm/yyyy") & "$$ "
      End If
      sql &= "ORDER BY date"
   Else
      '--------------------------------------------------------------------------------------
      'Otherwise, is from our clin_measurements.lu_type table 1=bp, 2=weight 3 = pf 4 =height
      'FIXME PUT IN PEAK FLOW
      '--------------------------------------------------------------------------------------
      sql = "Select distinct consult_date As Date, measurement"  
      sql_end = " From clin_measurements.vwmeasurements"
      sql_end &= " WHERE fk_patient = " & fk_patient
      sql_end &= "  And lower(name_full) = $$" & Lower(measurement_text) & "$$"
      ' sql_end &= " AND age(consult_date) < $$" & number_months & "$$ "
      sql_end &= " ORDER BY date"
      
      Select Case measurement_text
         Case "blood pressure"
            'Get three columns: date, systolic,diastolic
            'BP represented as number *1000 eg 190060 = BP of 190/60
            sql = "Select consult_date As Date,"
            "(measurement - (measurement % 1000))/1000 as systolic, "
            "mod(measurement, 1000) As diastolic "
            sql = sql & sql_end
            units = "mm Hg"
         Case "weight"
            units = "Kg"
            sql = sql & sql_end
         Case "height" 
            units = "cm"
            sql = sql & sql_end
         Case "peak flow"
            units = "l/min"
            sql = sql & sql_end
      End Select
   End If
   $Result = modDBConnect.exec_query(sql)
   Graph_And_Values = New Collection 
   Graph_Title = measurement_text 
   
   If $Result.count Then
      '----------------------------------------------------------------
      'If there are measurements, construct the title to look like this
      ' Measurement [range] fromdate todate
      '----------------------------------------------------------------
      Graph_Title = measurement_text 
      If Ref_Range <> "" Then
         Graph_title &= " [" & ref_range & "] "
      Else
         Graph_title &= " " 
      End If
      Graph_title &= Format($Result!date, "dd/mm/yyyy") & "-"
      $Result.MoveLast 
      Graph_title &= Format($Result!date, "dd/mm/yyyy")
      
      '--------------------------------------------------
      'If there are measurements, show these on a list
      'first show the very last one somewhere obvious
      'and put that first on the list of all measurements
      '--------------------------------------------------
      picWidth = 500
      PicHeight = 200
      Graph_And_Values!values = $Result
      ' Graph_And_Values!graph_filename = modPlot.LineGraph(picWidth, picHeight, $Result, Graph_Title, units, font_size)
      Graph_And_Values!graph_filename = modPlot.LineGraph(picWidth, picHeight, $Result, Graph_Title, measurement_text, font_size, line_type)
      ' Graph_And_Values!
   End If
   Return Graph_And_Values
   
End

Public Sub Create_View(result_name As String)
   '--------------------------------------------------------------------
   'creates a view on the fly of the measurement the user wants to graph
   'Fixme make me smarter
   '--------------------------------------------------------------------

   Dim $Result As Result
   Dim sql As String

   sql = "Create Or Replace VIEW clin_requests.vw" & result_name & " As "
   sql &= " SELECT vwresults.fk_forms_requests, vwresults.fk_patient, vwresults.date, vwresults.item, "
   sql &= "vwresults.fk_lu_request, vwresults.fk_form, vwresults.deleted, vwresults.request_result_html, "
   sql &= "vwresults.pk_requests_results, vwresults.episode_key, vwresults.result, vwresults.value, vwresults.value_as_number, "
   sql &= "vwresults.units, vwresults.reference_range, vwresults.abnormal, vwresults.probability "
   sql &= " FROM clin_requests.vwresults" 
   sql &= " WHERE lower(vwresults.item) = $$" & Lower(result_name) & "$$ :: text "
   sql &= " ORDER BY vwresults.fk_patient, vwresults.date"
   $Result = modDBConnect.exec_query(sql)
   
End

Public Sub TestGraph() '(form_main As FMain)
   
   Dim s As String
   Dim r As Result
   
   ' modDBConnect.exec_query("create temporary table testgraph (d1 timestamp, n integer, pk serial)")
   ' modDBConnect.insert("testgraph", ["d1": "5/1/2010", "n": 26])
   ' modDBConnect.insert("testgraph", ["d1": "19/3/2010", "n": 17])
   ' modDBConnect.insert("testgraph", ["d1": "12/4/2010", "n": 54])
   ' modDBConnect.insert("testgraph", ["d1": "15/7/2010", "n": 23])
   ' modDBConnect.insert("testgraph", ["d1": "1/10/2010", "n": 12])
   ' modDBConnect.insert("testgraph", ["d1": "12/12/2010", "n": 15])
   ' r = modDBConnect.exec_query("select d1, n from testgraph")
   ' s = LineGraph(500, 500, r, "test data", "foobles", 3)
   ' Exec ["/usr/bin/eog", s] Wait

   modDBConnect.exec_query("create temporary table tg2 (\"month\" text, first float, second float, third float, pk serial)") 
   modDBConnect.insert("tg2", ["month": "Jan", "first": 20.2, "second": 30.4, "third": 14.7])
   modDBConnect.insert("tg2", ["month": "Feb", "first": 14, "second": 25, "third": 12])
   modDBConnect.insert("tg2", ["month": "Mar", "first": 24, "second": 32, "third": 11])
   modDBConnect.insert("tg2", ["month": "Apr", "first": 27, "second": 29, "third": 16])
   modDBConnect.insert("tg2", ["month": "May", "first": 20.2, "second": 30.4, "third": 16.5])
   modDBConnect.insert("tg2", ["month": "Jun", "first": 19, "second": 27, "third": 14.7])
   modDBConnect.insert("tg2", ["month": "Jul", "first": 23, "second": 42, "third": 17])
   modDBConnect.insert("tg2", ["month": "Aug", "first": 22, "second": 36, "third": 11])
   modDBConnect.insert("tg2", ["month": "Sep", "first": 21, "second": 30, "third": 12])
   r = modDBConnect.exec_query("select \"month\",first,second,third from tg2")
   s = Gnuplot_Run(500, 500, Gnuplot_BoxGraph(r, "cluster gap 1"), r)
   Exec ["/usr/bin/eog", s] Wait
   modDBConnect.exec_query("create temporary table tg3 (one float, two float, pk serial)")
   modDBConnect.insert("tg3", ["one": 1.3, "two": 1.3]) 
   modDBConnect.insert("tg3", ["one": 2, "two": 2.1]) 
   modDBConnect.insert("tg3", ["one": 3, "two": 2.9]) 
   modDBConnect.insert("tg3", ["one": 4.1, "two": 4]) 
   modDBConnect.insert("tg3", ["one": 4.9, "two": 5.2]) 
   modDBConnect.insert("tg3", ["one": 6.1, "two": 5.9]) 
   r = modDBConnect.exec_query("select one,two from tg3")
   s = Gnuplot_Run(500, 500, Gnuplot_Scatter(), r)
   Exec ["/usr/bin/eog", s] Wait  

End
