' Gambas module file
' Copyright (C) 2008,2009 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
Public Function TrimRightChars(txt As String, n As Integer) As String
   '------------------------------------------------------------
   'trims off the righter most character, returns rest of string
   '------------------------------------------------------------

   Return Left(txt, Len(txt) - n)
   '
   
End

Public Function CapitaliseWord(s As String) As String
   'Autocapitalise the first letter of all words in a string
   'extend this like Ian's code to do more things

   Dim spacepos As Integer
   Dim words As String[]
   Dim word As String

   words = Split(s, " ")
   s = ""
   For Each word In words
      If Trim(word) <> "" Then
         
         word = Upper(Left(word, 1)) & Right(word, Len(word) - 1)
         s = s & word & " "
      End If
   Next
   Return Trim(s) 'trim off the last blank

End

Public Function remove_newlinechars(astring As String) As String

   Dim charpos As Integer

   charpos = InStr(astring, "\n")
   astring = Replace(astring, "\n", "")
   Return astring

End

Public Function SplitText_IntoMultipleLines(wholetext As String, colwidth As Integer) As Array
   '----------------------------------------------------------------------
   'Expects a sentance
   'Splits this into an arrange of words, then rejoins them into shorter
   'sentances according to FIXME how much text will fit across the current
   'grid width
   'returns the text e.g sometext\n more text\n moretext \n
   'FIX ME to pass down the width
   ' rowcount_text[0] = rowcount
   'rowcount_text[1] = Trim(wholetext)
   '---------------------------------------------------------------------

   Dim words As String[]
   Dim x As Integer
   Dim lettercount As Integer
   Dim rowcount As Integer
   Dim rowcount_text As Variant[] 'was 2 array [0]= number of rows for this text [1] = the text

   rowcount = 1
   words = Split(wholetext, " ")                     'split into single words
   wholetext = ""                                    'start with empty string
   For x = 0 To words.Count - 1                             'start counting the letters in words
      lettercount = lettercount + Len(words[x])            'FIXME change 120 to mesured grid width related to text size
      If lettercount > colwidth Then                               'if have enough words to fit across
         lettercount = 0                                      'zero the letter count
         Inc rowcount                                         'increment the row count
         wholetext = Trim(wholetext) & "\n"    'add a newline character
         wholetext = wholetext & words[x] & " " 'and blank between the words
      Else                                                   'othewise this word will fit on line
         wholetext = wholetext & words[x] & " " 'so add it with an space
      End If
   Next  
   rowcount_text[0] = rowcount
   rowcount_text[1] = Trim(wholetext)
   Return rowcount_text                                     'send it back wordwapped  

End

Public Function EndsWith(s As String, e As String) As Boolean
  ' true if e is the ending of s
  
  If Right$(s, Len(e)) = e Then Return True 
  Return False
  

End

Public Function StartsWith(s As String, b As String) As Boolean
  ' true if b is the beginning of s

  If Left$(s, Len(b)) = b Then Return True
  Return False

End

Public Function Singular(s As String) As String
   
  ' returns the singular of a plural noun
  If EndsWith(s, "children") Then Return Left$(s, -3)
  If EndsWith(s, "oxen") Then Return Left$(s, -2)
  If EndsWith(s, "ves") Then Return Left$(s, -3) & "f"
  If EndsWith(s, "ies") And If s <> "species" Then Return Left$(s, -3) & "y"
  If EndsWith(s, "s") Then Return Left$(s, -1)
  Return s 

End
