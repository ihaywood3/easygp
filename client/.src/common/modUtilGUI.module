' Gambas module file

Public Function Decision_Support_Help_Show(shtml As String, sHeading As String, Optional help_section As String = "")
   'pops up the decision support panel on the right hand side of the screen

   FClinical.DecisionSupport_SetHTML(shtml)
   FClinical.DecisionSupport_Show(sHeading, True, help_section)
   help_section = help_section

End

Public Sub Columnview_Clear_Properly(cv As Columnview)
   'until Benoit fixes the previously selected items being cleared by clear....

   With cv
      .Clear
      .UnselectAll()
   End With

End

Public Function Lcase_Word_First_Letter(txt As String) As String

   Return LCase(Left(txt)) & Right(txt, Len(txt) - 1)

End

Public Sub Template_Missing(template_name As String)

   Message.Title = "EasyGP Document Templates"
   Message.Warning("EasyGP could not find a document template:\n\n" & template_name & "\n\nYou should speak To your system administrator to ensure these are correctly installed.")

End

Public Function Strip_Duplicate_FullStops_Commas(txt As String) As String

   txt = Replace(txt, "..", ".")
   txt = Replace(txt, ",,", ",")
   Return txt

End

Public Function Strip_Last_Character(txt As String, Optional check_full_stop_or_comma As Boolean = False) As String
   '--------------------------------------------------------------------------------
   'stips last character from a line of text including the last blank.
   'used where a loop as added eg comma's, full stops which you know are there or
   'if  you don't know if there is a full stop, set full_stop or Comma set this flag
   '--------------------------------------------------------------------------------

   txt = Trim(txt)
   txt = Strip_Duplicate_FullStops_Commas(Trim(txt))                            'strip blanks and duplicates
   If check_full_stop_or_comma Then                                             'user wants to check if there is a comma or fullstop
      If Right(txt) = "." Then Goto RemoveChars
      If Right(txt) = "," Then Goto RemoveChars
      Return txt

   Endif

RemoveChars:
   Return Left(txt, Len(txt) - 1)

End

Public Sub Cockcroft_Gault_CreatinineClearance_Formulae(cons As Cconsult) As String
   '-----------------------------------------------------------------
   '? A more accurate calculation of EGFR
   'Useful eg for intravenous bisphosphonates as the lab eGFR can be
   'falsly high for low weight females
   ' Various interpretations of this formulae seem to exist
   ' SydPath.stvincents.com.au/other/CalcsCrClCGumol.htm
   ' (140-age) * Kg * (0.85 if female) /creatine * 0.8136
   ' The australina prescriber uses 0.815
   'This routine currently rounds down the egfr even if eg 59.9
   '-----------------------------------------------------------------

   Dim m As Collection
   Dim egfr As Float
   Dim R As Result
   Dim weight As Float
   Dim height As Float
   Dim BMI As Variant

   R = modMeasurementsDBI.Get_Loinc_Value(cons!patient!fk_patient, const.Loinc_Creatinine_Serum, 1, "DESC") 'get the last last creatinine result contains value_numeric, reference_range, units, value(text)
   If R.count = 0 Or IsNull(R!value_numeric) Then Return
   m = modMeasurementsDBI.Measurement_Get_Latest(cons!measurements, const.Measurement_Weight)  'get the last weight
   If Not IsNull(m) Then                                                                                 'if have a weight
      weight = m!data
      egfr = (140 - cons!patient!age_numeric) * weight                                         'start calculateion
      If cons!patient!fk_sex = const.cSexFemale Then                                           'adjust for sex
         egfr = egfr * 0.85
      Endif
   Else
      Return Null
   End If
   egfr = egfr / (R!value_numeric * 0.815)
   m = modMeasurementsDBI.Measurement_Get_Latest(cons!measurements, const.Measurement_Height)
   If Not IsNull(m) Then
      height = m!data
   End If
   Try BMI = (weight / (height ^ 2)) * 10000
   If Not Error Then
      If BMI < 20 Or BMI > 30 Then
         Return "Cockcroft Gault Cr Clear unreliable at BMI of " & Format(BMI, "##.##")
      Endif
   Endif
   Return "Cockcroft Gault Cr Clear " & Str(Format(egfr, " ##.#")) & "mls/min " & Format(R!observation_date, "(dd/mm/yyyy)")
Catch
   Return Null

End

' prepare a default value for Splitter.Layout
' values is an array of percentages of desktop width
Public Sub HSplit(values As Integer[]) As Integer[]

   Return modUtil.Splitter_Defaults(values, Desktop.Width)

End

Public Sub Columnview_Columns_Set_Size(cvw As ColumnView, lblMeasure As Label)
   '---------------------------------------------------------
   'Due to gambas columns eradically auto-sizing, do the work
   '---------------------------------------------------------

   Dim col_widths As New Integer[cvw.Columns.count + 1]
   Dim col As Integer
   Dim row As Integer

   With lblMeasure
      .AutoResize = True
      .Expand = False
      .Visible = False
      .font = cvw.Font
   End With

   If Not cvw.count Then Return
   For row = 0 To cvw.Count - 1
      Print row
      For col = 0 To cvw.Columns.Count               'read each column row 0 to row nAdd(allergy!pk
         If cvw[row][col] <> "" Then
            lblMeasure.text = cvw[row][col] & "    "
            col_widths[col] = Max(col_widths[col], lblMeasure.width + 2)
         End If
      Next
   Next
   For col = 0 To cvw.Columns.Count - 1
      cvw.Columns[col].Width = col_widths[col]
   Next

End

Public Sub Gridview_Columns_Set_Size(gvw As Gridview, lblMeasure As Label)
   '---------------------------------------------------------
   'Due to gambas columns eradically auto-sizing, do the work
   '---------------------------------------------------------

   Dim col_widths As New Integer[gvw.Columns.count + 1]
   Dim col As Integer
   Dim row As Integer

   With lblMeasure
      .AutoResize = True
      .Expand = False
      .Visible = False
      .font = gvw.Font
   End With

   If Not gvw.Rows.count Then Return
   For row = 0 To gvw.Rows.Count - 1
      For col = 0 To gvw.Columns.Count - 1              'read each column row 0 to row nAdd(allergy!pk
         If gvw[row, col].Text <> "" Then
            lblMeasure.text = gvw[row, col].Text
            col_widths[col] = Max(col_widths[col], lblMeasure.width)
         Else
            If Not IsNull(gvw[row, col].Picture) Then
               col_widths[col] = Max(col_widths[col], gvw[row, col].Picture.Width)
            Endif
         End If
      Next
   Next
   For col = 0 To gvw.Columns.Count - 1
      gvw.Columns[col].Width = col_widths[col]
   Next

End
' same for vertical splits using Desktop height.

Public Sub VSplit(values As Integer[]) As Integer[]

   Return modUtil.Splitter_Defaults(values, Desktop.Height)

End

Public Function columnSizes_Set(colsizes As String, cvw As Columnview)
   '-----------------------------------------------------------------
   'PURPOSE    helper for Settings_Load() from any form needing
   '           to set user-defined column sizes
   '-----------------------------------------------------------------

   Dim x As Integer
   Dim cols As String[]

   If Not InStr(colsizes, "|") Then Return
   cols = Split(colsizes, "|")
   cvw.Columns.count = cols.Count
   For x = 0 To cvw.Columns.count - 1
      If cols.count > x Then
         cvw.Columns[x].width = Val(cols[x])
      Endif
   Next

End

Public Function Columnsizes_To_String(cvw As ColumnView) As String
   '---------------------------------------------------------------------------------------
   'PURPOSE    reads the column sizes of a columnview, concatenates to '|' delimited string
   '           used by any columnview which wants to save its sizes back to settings file
   '----------------------------------------------------------------------------------------

   Dim x As Integer
   Dim colsize As String

   For x = 0 To cvw.Columns.Count - 1
      colsize &= Str$(cvw.Columns[x].width) & "|"
   Next
   colsize = Left(colsize, Len(colsize) - 1) 'trim off unwanted pipe character
   Return colsize

End

Public Function LoadCombo(combo As ComboBox, data As Collection, display_field As String) As Collection
   '-------------------------------------------------------------------------------
   'Note the combo must be cleared by the calling routine, as sometimes we may want
   'to add data not retrieved from the data collection
   '-------------------------------------------------------------------------------

   Dim i As Integer
   Dim j As Collection
   Dim c As New Collection

   combo.Clear()
   i = 0
   For Each j In data
      combo.Add(data[data.key][display_field])
      c.Add(j, i)
      Inc i
   Next
   Return c

End

Public Function LoadCombo_new(combo As ComboBox, data As Collection, display_fields As String[]) As Collection
   '-------------------------------------------------------------------------------
   'Note the combo must be cleared by the calling routine, as sometimes we may want
   'to add data not retrieved from the data collection
   'IAN ?fixme or at least accept me as ok.
   '-------------------------------------------------------------------------------

   Dim i As Integer
   Dim j As Collection
   Dim c As New Collection
   Dim Display_field As String

   combo.Clear()
   i = 0
   For Each j In data
      If IsNull(data[data.key][display_fields[0]]) Then
         combo.Add(data[data.key][display_fields[1]])
      Else
         combo.Add(data[data.key][display_fields[0]])
      End If
      c.Add(j, i)
      Inc i
   Next
   Return c

End

Public Sub Columnview_SetFont(Obj As Object, Settings_Section As String)
   '----------------------------------------------------------
   'Attempts to change the font of object and save to settings
   'FIXME - do global search/replace name it Object_SetFont
   '----------------------------------------------------------

   Dialog.font = obj.font
   If Dialog.SelectFont() Then Return
   Obj.font = Dialog.Font
   Settings[Settings_Section & "/" & Obj.name & ".font"] = Obj.Font.ToString()
   Settings.Save

End

Public Sub Listview_SetFont(lvw As Listview, Settings_Section As String)
   '-----------------------------------------------------------------
   'Attempts to change the font of a columnview and save to settings
   '-----------------------------------------------------------------

   Dialog.font = lvw.font
   If Dialog.SelectFont() Then Return
   lvw.font = Dialog.Font
   Settings[Settings_Section & "/" & lvw.name & ".font"] = lvw.Font.ToString()

End

Public Function Change_Fonts(F As Font) As Font

   Dialog.font = F
   If Dialog.SelectFont() Then Return
   Return Dialog.Font

End

Public Function Screenshot_Grab(Ctrl As Control, Optional h As Integer, Optional w As Integer) As String

   '---------------------------------------------------------------
   'Grabs a screenshot of a control, saves to a temp file
   'returns some html for the notes
   'fixme this dosn't work
   '---------------------------------------------------------------
   Dim tempfile As String
   Dim P As New Picture
   Dim sPicPath As String

   Tempfile = Temp() & ".png"
   P = Ctrl.Screenshot()

   P.Save(Tempfile)  'save the picture to the disk
   If Not h Then h = P.h
   If Not w Then w = P.w

   sPicPath = "<TABLE WIDTH=100%><TR><TD WIDTH=100%><P><IMG src=" & tempfile & " "
   sPicPath &= " NAME=graphics ALIGN=LEFT WIDTH=" & Str(w) & " HEIGHT=" & Str(h) & " BORDER=0></TR></TD></TABLE><BR><BR>"  '<BR CLEAR=Left>

   Return sPicPath
   '

End

Public Sub Image_Load_In_External_Program(filename As String, bIsDocument As Boolean)

   ' only works with kolourpaint IAN fixme show me how to get all paint programs
   If IsNull(modUtil.FindProgram("kolourpaint", "kolourpaint")) Then
      Error.Raise("The program 'kolourpaint' was not found.\n\nYou can install this at at terminal with this command:\n\nsudo apt-get install kolourpaint")
      Return   'fixme make this configurable
   End If
   If bIsDocument Then
      Try Shell "kolourpaint " & modFiles.Get("document_archiving_directory", filename)
   Else
      Try Shell "kolourpaint " & modUtil.filepath_fix_Blanks(Filename)
   End If

End

Public Function File_IO_Describe_Error(error_code As Integer) As String

   Dim sMsg As String

   Select Case error_code

      Case const.File_IOError_Out_of_memory
         smsg = "Unable to open the file - out of memory"
      Case const.File_IOError_Access_Forbidden
         sMsg = "The file could not be accessed, please check you have the appropriate file permissions"
      Case const.File_IOError_File_is_directory
         sMsg = "The file you have attempted to open is a directory"
      Case const.File_IOError_File_Non_Existant
         sMsg = "The file could not be found. Please check the name and path and try again"
      Case const.File_IOError_Device_Full
         sMsg = "The disk you are trying to write to is full. To continue you should probably clean up your disk"
      Case const.File_IOError_System_Error
         sMsg = "Unkown system error"
   End Select
   Return sMsg

End

Public Sub NotImplemented(sFeature As String, Optional title As String)

   If title <> "" Then
      Message.Title = title
   Endif
   Message.Info(sFeature & "\n\nThis feature is not implemented yet")

End

Public Function WebBrowserZoom(mode As String, current_zoom As Integer) As Integer

   Select Case mode
      Case "zoom in"
         Return Round(current_zoom * 1.25, -2)
      Case "zoom out"
         Return Round(current_zoom / 1.25, -2)
   End Select

End

Public Function AllowKeys(Restriction As Integer, keyascii As Integer) As Boolean
   '--------------------------------------------------------------------------------------
   'Restricts key entry in textboxes, excluding <return><backspace><leftarrow><rightarrow>
   'const.AllowKeys_NumbersOnly  0-9
   'const.AllowKeys_Letters upper or lower case a-z
   'const.AllowKeys_DateFormat dd/mm/yyyy as numbers or a '/' character
   'RETURNS true if key is valid
   'I've also include F12 here, as this is the EasyGP global 'save' key press in FClinical
   '--------------------------------------------------------------------------------------

   Dim bValidKey As Boolean

   bValidKey = False
   Select Case Restriction
      Case const.AllowKeys_BP
         If (keyascii = Asc("/")) Or (keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or (keyascii > 47 And keyascii < 59)) Then
            bValidKey = True
         End If

      Case const.AllowKeys_InputMask
         If (keyascii = Asc("/") Or keyascii = Asc(":") Or keyascii = Asc(".") Or keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or (keyascii > 47 And keyascii < 59)) Then
            bValidKey = True
         End If
      Case const.AllowKeys_NumbersDecimal
         If (keyascii = Asc(".") Or keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or (keyascii > 47 And keyascii < 59)) Then
            bValidKey = True
         End If
      Case const.AllowKeys_money
         If (keyascii = Asc(".") Or keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or (keyascii > 47 And keyascii < 59) Or keyascii = Asc("$")) Then
            bValidKey = True
         End If
      Case const.AllowKeys_NumbersOnly
         If (keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or (keyascii > 47 And keyascii < 59)) Then
            bValidKey = True
         End If
      Case const.AllowKeys_Numbers_D_M_Y
         If keyascii = Asc("M") Or keyascii = Asc("m") Or keyascii = Asc("Y") Or keyascii = Asc("y") Or keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or (KeyAscii = 8 Or KeyAscii = 13 Or (KeyAscii > 47 And KeyAscii < 59)) Then
            bValidKey = True
         End If
      Case const.AllowKeys_Letters_Numbers_slash_apostrophe_dash 'FIX THIS WHOLE ROUTINE MUST BE A MORE INTELLIGENT WAY OF DOING IT
         If keyascii = Asc("-") Or keyascii = Asc("/") Or keyascii = Asc("'") Or keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or ((KeyAscii > 64 And KeyAscii < 91) Or (KeyAscii = 32) Or (KeyAscii = 13) Or (KeyAscii > 96 And KeyAscii < 123)) Or (keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or (keyascii > 47 And keyascii < 59)) Then
            bValidKey = True
         End If
      Case const.AllowKeys_Letters_Numbers_slash_dash_period
         If keyascii = Asc(".") Or keyascii = Asc("-") Or keyascii = Asc("/") Or keyascii = Asc(",") Or keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or ((KeyAscii > 64 And KeyAscii < 91) Or (KeyAscii = 32) Or (KeyAscii = 13) Or (KeyAscii > 96 And KeyAscii < 123)) Or (keyascii = Key.down Or (keyascii > 47 And keyascii < 59)) Then
            bValidKey = True
         End If
      Case const.AllowKeys_Letters_Numbers
         If keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or ((KeyAscii > 64 And KeyAscii < 91) Or (KeyAscii = 32) Or (KeyAscii = 13) Or (KeyAscii > 96 And KeyAscii < 123)) Or (keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or (keyascii > 47 And keyascii < 59)) Then
            bValidKey = True
         End If
      Case const.AllowKeys_Letters_Comma
         If keyascii = Asc(",") Or keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or ((KeyAscii > 64 And KeyAscii < 91) Or (KeyAscii = 32) Or (KeyAscii = 13) Or (KeyAscii > 96 And KeyAscii < 123)) Or (keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or (keyascii > 47 And keyascii < 59)) Then
            bValidKey = True
         End If

      Case const.AllowKeys_Letters
         If keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or ((KeyAscii > 64 And KeyAscii < 91) Or (KeyAscii = 32) Or (KeyAscii = 13) Or (KeyAscii > 96 And KeyAscii < 123)) Then
            bValidKey = True
         End If
      Case const.AllowKeys_AtoZ_UpDown_Arrows 'a-z plus arrow keys, used in grid validation eg FDayList
         If keyascii = key.up Or keyascii = key.down Or keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or ((KeyAscii > 64 And KeyAscii < 91) Or (KeyAscii = 32) Or (KeyAscii = 13) Or (KeyAscii > 96 And KeyAscii < 123)) Then
            bValidKey = True
         End If
      Case const.AllowKeys_AtoZ_and_Period
         If keyascii = Asc(".") Or keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or ((KeyAscii > 64 And KeyAscii < 91) Or (KeyAscii = 32) Or (KeyAscii = 13) Or (KeyAscii > 96 And KeyAscii < 123)) Then
            bValidKey = True
         End If

      Case const.AllowKeys_Letters 'abc etc and the apostrophe ' and ? and * and -
         If keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or ((KeyAscii > 64 And KeyAscii < 91) Or (KeyAscii = 42) Or (KeyAscii = 45) Or (KeyAscii = 63) Or (KeyAscii = 39) Or (KeyAscii = 32) Or (KeyAscii = 13) Or (KeyAscii > 96 And KeyAscii < 123) Or (KeyAscii = 8) Or (KeyAscii = 59)) Then
            bValidKey = True
         End If
      Case const.AllowKeys_DateFormat 'allow on eg mm/dd/yyyy or mm.dd.yyyy or mm-dd-yyyy but Replace .. -- with /
         If keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or (KeyAscii = 8 Or KeyAscii = 13 Or (KeyAscii > 46 And KeyAscii < 59)) Then
            bValidKey = True
         End If
      Case const.AllowKeys_Date_DWMY
         ' Case const.AllowKeys_DateRecalls 'special format for recalls, date characters + 'Mm' or 'Yy" to allow typeing 3Y (= Now + 3ys)
         If keyascii = Asc("D") Or keyascii = Asc("d") Or keyascii = Asc("W") Or keyascii = Asc("w") Or keyascii = Asc("M") Or keyascii = Asc("m") Or keyascii = Asc("Y") Or keyascii = Asc("y") Or keyascii = Key.Return Or keyascii = Key.BackSpace Or keyascii = Key.Delete Or keyascii = Key.Left Or keyascii = Key.Right Or (KeyAscii = 8 Or KeyAscii = 13 Or (KeyAscii > 46 And KeyAscii < 59)) Then
            bValidKey = True
         End If
      Case const.AllowKeys_SQLCrash
         If keyascii <> Asc("\\") Then
            bValidKey = True
         End If

   End Select
   Return bValidKey

End

Public Sub ReportError(errtxt As String, bt As String[], Optional where_string As String)
   ' reports as error, usually used at the end of the
   ' function like:
   ' Catch
   '   modUtilGUI.ReportError(Error.Text, Error.Backtrace)
   ' End
   ' NOTE: if you are calling from TRY, Error.Backtrace doesn't work properly
   ' instead call as modUtilGUI.ReportError(Error.Text, Null, Error.Where)

   Dim frm_error As FError
   Dim i As String

   Log.ErrorMsg(errtxt)
   If IsNull(bt) Then
      Log.ErrorMsg(where_string)
   Else
      For Each i In bt
         Log.ErrorMsg(i)
      Next
   Endif

   frm_error = New FError
   frm_error.SetMessage(errtxt)
   Try frm_error.ShowModal()

End

Public Function Check_Utilities_Missing() As Boolean
   '--------------------------------------------------------------------
   'Does a quickn dirty check that some necessary programs are installed
   'pdfjoin (pdfjam) wkhtmltopdf, gmplayer, gnuplot
   'returns True if not installed
   '---------------------------------------------------------------------

   Dim Support_Programs As String[]
   Dim bMissingPrograms As Boolean
   Dim x As Integer
   Dim sMsg As String

   Support_Programs = New String[8, 2]
   Support_Programs[0, 0] = "mplayer"
   Support_Programs[0, 1] = "plays video files - install mplayer"
   Support_Programs[1, 0] = "wkhtmltopdf"
   Support_Programs[1, 1] = "converts html files to pdf files - install wkhtmltopdf-static binary"
   Support_Programs[2, 0] = "gnuplot"
   support_Programs[2, 1] = "creates graphs - install gnuplot"
   Support_Programs[3, 0] = "pdfjoin"
   support_Programs[3, 1] = "joins pdf - install pdfjam to get this"
   Support_Programs[4, 0] = "pdftk"
   support_Programs[4, 1] = "A pdf tool kit - install pdftk"
   Support_Programs[5, 0] = "lame"
   support_Programs[5, 1] = "An MP3 encoder"
   Support_Programs[6, 0] = "latex"
   support_Programs[6, 1] = "Latex - for document preparation and printing - install texlive-latex-base and texlive-latex-extra and  texlive-fonts-recommended"
   support_Programs[7, 0] = "mutt"
   support_Programs[7, 1] = "mutt - a program to send e-mails"
   sMsg = "<p>Some utilities needed to run EasyGP are missing from this computer:</p><ul>"
   For x = 0 To Support_Programs.count / 2 - 1
      Try modUtil.FindProgram(support_Programs[x, 0], support_Programs[x, 0])  'look for program, but suppress error message
      If Error Then
         bMissingPrograms = True
         sMsg &= "<li>" & Support_Programs[x, 0] & " - " & Support_Programs[x, 1] & "\n"
      End If
   Next
   If bMissingPrograms Then
      sMsg &= "</ul></p><p>EasyGP may not function properly, or worse, may even crash.\n\nYou should probably contact your IT support before using the program.</p>"
      modUtilGUI.SingleWarning("noutils2", sMsg, "EasyGP - Missing Support Utilities")
   Endif
   Return True

End

Public Sub SingleWarning(name As String, msg As String, Optional title As String = "Warning", allow_quit As Boolean = False)

   Dim s As String
   Dim i As Integer

   s = Settings["SingleWarning/" & name, "no"]
   If s = "yes" Then Return
   Message.Title = title
   If allow_quit Then
      i = Message.Warning(msg, "Ignore", "Ignore, and Don't Tell Me Again", "Quit")
      If i = 3 Then Quit
   Else
      i = Message.Warning(msg, "Ignore", "Ignore, and Don't Tell Me Again")
   Endif
   If i = 2 Then
      Settings["SingleWarning/" & name] = "yes"
      Settings.Save()
   Endif

End
