' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
'PURPOSE       :Display heirachically organisations/branches/employees
'              :FIXME- RE-WRITE THIS ENTIRELY
'              :THIS WAS THE FIRST GAMBAS CODE I EVER WROTE AND IS CRAP
'-----------------------------------------------------------------------
Private persons As Collection
Private person As Collection
Private country_code As String
Private fk_ethnicity As Integer
Private fk_language As Integer
Private addresses As Collection
Private Views_addresses As Collection
Private frmWebBrowser As FBrowser                   'New instance of web browser
Private bExit As Boolean                            'general flag to prevent re-entry into routines
Private bNewCommunication As Integer                'true if adding a new communication
Private bEmployeeDisplayed As Boolean               'True if adding or displaying existing employee
Private sLastSearchCriteria As String               'last criteria used to create the viewing list
Private iTimer_count As Integer
Private sSearchMode As String                       'search for e.g firstname, surname, category, occupation, organisation
Private iCommunication As Integer
Private age As Integer
Private Branches As Collection                      'holds a collection of cBranch = 1 row in the viewing list
Private Towns As Collection
Private Town As Collection
Private Members As Collection
Private Member As Collection
Private The_Collection As Collection
Private sMsgGlobal As String
Private Categories As Collection
Private category As Collection
Private aString As String                      'a collection or towns or suburbs
Private SpellChecker As ClskSpell
Private iSecurityType As Integer  'clinical/clerical or both
Private cSecurityTypeClinical As Integer = 0
Private cSecurityTypeClerical As Integer = 1
Private cSecurityTypeBoth As Integer = 3
Private bKeyValid As Boolean
Private staff_member As Collection
Private usingWizard As Boolean 'If true this form has been loaded form the installation wizard
Private fk_staff As Integer
Private fk_organisation As Integer
Private fk_branch As Integer
Private fk_address As Integer
Private fk_category As Integer
Private fk_employee As Integer
Private fk_person As Integer
Private fk_occupation As Integer
Private fk_town As Integer
Private organisation As Collection
Private rows_in_view As Collection
Private row_in_view As Collection 'current row we are on
Private branch As Collection
Private clinic As Collection
Private employee As Collection
Private employees As Collection
Private address As Collection
Private views_comms As Collection
Private Comms As Collection
Private Comm As Collection
Private HtmlMessageBox As FGenericHTMLMessage
Private bEmbedded As Boolean
Private textboxForSpellCheck As TextBox

Public Sub set_embedded(flag As Boolean)
   
   bEmbedded = flag
   
End

Public Sub Form_Open()
   
   Init() 'just for compatibility with the other forms
   
End

Public Sub Init()
   
   Dim x As Integer
   Dim sMsg As String
   '-------------------------------------------------------
   'First set up the screen etc for organisations/employees
   '-------------------------------------------------------
   Try Settings_Load()
   combos_Load()
   With gvwOrganisations
      .Columns.count = 3
      .Enabled = False
   End With
   With SpellChecker = New ClskSpell
      .EditorControlToCheck = teForSpelling
      .TempFileForSpelling = User.home &/ "myspelltemp.txt"  'FIXME
      .TempFileForErrors = User.home &/ "myspellerrors.txt"
   End With
   cvwContacts.Columns.count = 3
   Reset_Fonts(VBox_EditArea_Organisation)
   Reset_Fonts(Vbox_EditArea_Right)
   Reset_Fonts(Vbox_EditArea_Employee)
   Vbox_EditArea.Enabled = False
   lblmeasure.text = "Work Status"
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Employee, lblmeasure)
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Right, lblmeasure)
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Organisation, lblmeasure)
   cmbSearchType.index = 0 'default to search organisations and employees
   chkEmployeeRetired.width = txtEmployeeBirthdate.Width
   gvwPersons.Background = Color.RGB(248, 248, 248)
   VBox_Billing.Visible = False
   '---------------------------------
   'Input the persons part of the form
   '----------------------------------
   ' lblMeasure.text = " Occupation "
   ' modEditAreaHelpers.Resize_labels(VBox_EditArea_person_Left, lblMeasure)
   ' ReferenceHboxForTopOfListBox = New HBox(VBox_EditArea_Left)
   ' '  Try Settings_Load()
   ' Combos_FillPersons()
   ' bExit = True
   ' tbAddPerson.text = " New Person "
   ' tbAddFamilyMember.Visible = False
   ' chkLeftPractice.Visible = False
   ' VBox_Billing.Visible = False
   ' bExit = False
   ' cvwPersons.columns.Count = 8
   ' cvwContacts.Columns.count = 3
   ' cvwAddresses.Columns.count = 3
   ' lblMeasure.text = " Deceased "
   ' chkDeceased.width = txtOccupation.Width
   ' txtSearch.SetFocus()
   
End

Public Sub Combos_Fill_Persons()
   ' 'fixme put me in eg editarea helpers
   '
   ' cmbSex.Add("Male", 0)
   ' cmbSex.Add("Female", 1)
   ' cmbSex.Add("Unknown", 2)
   ' cmbSex.Add("Transexual", 3)
   ' cmbSex.Add("Hermaphrodite", 4)
   ' arraysex.Resize(5)
   ' arraysex[0] = "M"
   ' arraysex[1] = "F"
   ' arraysex[2] = "U"
   ' arraysex[3] = "T"
   ' arraysex[4] = "H"
   '
   ' cmbTitle.Add("Mr", 0)
   ' cmbTitle.Add("Mrs", 1)
   ' cmbTitle.Add("Master", 2)
   ' cmbTitle.Add("Miss", 3)
   ' cmbTitle.Add("Dr", 4)
   ' cmbTitle.Add("Prof", 5)
   ' cmbTitle.Add("Ms")
   '
   ' cmbemployeeMarital.Add("Unknown", 0)
   ' cmbemployeeMarital.Add("Single", 1)
   ' cmbemployeeMarital.Add("Married", 2)
   ' cmbemployeeMarital.Add("Divorced", 3)
   ' cmbemployeeMarital.Add("Defacto", 4)
   ' cmbemployeeMarital.Add("Widow", 5)
   ' cmbemployeeMarital.Add("Widower", 6)
   '
   ' arraymarital.Resize(7)
   ' arraymarital[0] = "U"
   ' arraymarital[1] = "S"
   ' arraymarital[2] = "M"
   ' arraymarital[3] = "D"
   ' arraymarital[4] = "F"
   ' arraymarital[5] = "W"
   ' arraymarital[6] = "WD"
   '
   ' cmbAddressType.Add("Home", 0)
   ' cmbAddressType.Add("Work", 1)
   ' cmbAddressType.Add("PO Box", 2)
   ' cmbAddressType.Add("Parents", 3)
   ' cmbAddressType.Add("Nursing Home", 4)
   ' cmbAddressType.Add("Refuge", 5)
   '
   ' cmbCommunicationType.Add("At Home", 0)
   ' cmbCommunicationType.Add("At Work", 1)
   ' cmbCommunicationType.Add("Fax", 2)
   ' cmbCommunicationType.Add("Email", 3)
   ' cmbCommunicationType.Add("Mobile", 4)
   ' cmbCommunicationType.Add("VOIP", 5)
   ' cmbCommunicationType.Add("Web URL", 6)
   ' cmbCommunicationType.Add("Phone", 7)
   ' cmbCommunicationType.Add("Toll Free ", 8)
   
End

Public Sub Reset_Fonts(VB As Vbox)
   
   Dim hCtrl As Control
   Dim ABox As HBox
   Dim lbl As Label
   
   For Each Hctrl In VB.Children
      If hctrl Is Hbox Then
         Abox = hctrl
         For Each hctrl In Abox.Children
            If hctrl Is Label Then
               lbl = hctrl
               If lbl.AutoResize = False Then
                  lbl.width = lblmeasure.Width
               End If
               Break
            End If
         Next
      End If
   Next
   
End

Public Sub combos_Load()
   
   cmbEmployeeSex.Add("Male", 0)
   cmbEmployeeSex.Add("Female", 1)
   cmbEmployeeSex.Add("Unknown", 2)
   
   cmbEmployeeTitle.Add("Mr", 0)
   cmbEmployeeTitle.Add("Mrs", 1)
   cmbEmployeeTitle.Add("Master", 2)
   cmbEmployeeTitle.Add("Miss", 3)
   cmbEmployeeTitle.Add("Dr", 4)
   cmbEmployeeTitle.Add("Prof", 5)
   cmbEmployeeTitle.Add("Ms", 6)
   cmbemployeeMarital.Add("Unkown", 0)
   cmbemployeeMarital.Add("Single", 1)
   cmbemployeeMarital.Add("Married", 2)
   cmbemployeeMarital.Add("Divorced", 3)
   cmbemployeeMarital.Add("Defacto", 4)
   cmbemployeeMarital.Add("Widow", 5)
   cmbemployeeMarital.Add("Widower", 6)
   
   cmbCommunicationType.Add("Home", 0)
   cmbCommunicationType.Add("Work", 1)
   cmbCommunicationType.Add("Fax", 2)
   cmbCommunicationType.Add("Email", 3)
   cmbCommunicationType.Add("Mobile", 4)
   cmbCommunicationType.Add("VOIP", 5)
   cmbCommunicationType.Add("Web URL ", 6)
   cmbCommunicationType.Add("Phone", 7)
   cmbCommunicationType.Add("Toll Free", 8)
   
End

Public Sub Form_Close()
   
   Settings_Save()
   
End

Public Sub Settings_Save()
   
   Settings["FContactsOrganisations/HSplit_EditArea_Organisations.Layout"] = HSplit_EditArea_Organisations.Layout
   Settings["FContactsOrganisations/VSplit_DataEntry.Layout"] = VSplit_DataEntry.Layout
   
End

Private Sub Settings_Load()
   
   VSplit_DataEntry.Layout = Settings["FContactsOrganisations/VSplit_DataEntry.Layout", modUtil.HSplit([983, 716])]
   HSplit_EditArea_Organisations.Layout = Settings["FContactsOrganisations/HSplit_EditArea_Organisations.Layout", modUtil.HSplit([527, 384])]
   Try gvwOrganisations.Font = Font[Settings["FContactsOrganisations/gwvOrganisations.font"]]
   
End

Public Sub lvwEmployee_KeyPress()
   
End

Public Sub EditArea_Organisation_Clear()
   
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Organisation)
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Right)
   cmbCommunicationType.index = const.CommModalityPhone
   cvwContacts.Clear()
   
End

Public Sub Organisation_WebSite_Browse()
   
   frmWebBrowser = New FBrowser(Me)
   frmWebBrowser.HBox2.Visible = False
   frmWebBrowser.Visible = True
   
   frmWebBrowser.cmbURLs.text = "http://" & Trim(txtCommunication.Text)
   frmWebBrowser.Browser.path = "http://" & Trim(txtCommunication.Text)
   
End

Public Sub Reset_Gui()
   
   bExit = True
   timer1.Stop
   iTimer_count = 0
   sSearchMode = "general search"
   bEmployeeDisplayed = False
   VSplit_DataEntry.Visible = True
   EditArea_Organisation_Clear()  'clear appropriate fields in either section
   tbSave.Picture = Picture.Load("icons/12/filesave.png")
   lblActioning.text = ""
   tbSave.Foreground = Color.black
   lblOrganisation.text = ""
   Vbox_EditArea_Employee.Visible = False
   VBox_EditArea_Organisation.Visible = True
   txtSearch.text = ""
   With gvwOrganisations
      .clear
      .enabled = False
   End With
   listview1.Visible = False
   VBox_EditArea.Enabled = False
   bExit = False
   
End Sub

Public Sub PopupAddressMenu_Click()
   
   Select Case Last.tag
      Case "new"
         
      Case "delete"
         
   End Select
   
End

Public Sub Form_KeyPress()
   
   Select Case key.Code
      Case key.F12
         Save()
      Case key.Esc
         Reset_Gui
         
   End Select
   
End

Public Sub Communication_New()
   
   bExit = True
   iCommunication = cvwContacts.Count 'if 3, then this is 0,1,2 so 3 will be new
   txtCommunication.text = ""
   txtCommunicationNotes.text = ""
   cmbCommunicationType.index = const.CommModalityPhone
   chkCommunicationConfidential.Value = False
   chkPreferredCommunication.Value = False
   bNewCommunication = True
   txtCommunication.enabled = True
   txtCommunicationNotes.enabled = True
   chkCommunicationConfidential.Enabled = True
   chkPreferredCommunication.Enabled = True
   tbBrowseWeb.Visible = False
   btnAddContact.text = "Add new contact to list"
   btnAddContact.Foreground = Color.black
   comm = New Collection
   bExit = False
   
End

Public Sub Communication_Delete()
   
   Select Message.Question("Delete current contact?", "Yes", "No")
      Case 1
         modDBConnect.BeginTrans       'a noop
         If bEmployeeDisplayed = True Then
            
         Else
            If Not IsNull(comm!pk) Then
               modContactsDBI.Branch_Comm_Link_Mark_Deleted(fk_branch, comm!pk)
            End If
         End If
         modDBConnect.CommitTrans()
   End Select
   
End

Public Sub timer1_Timer()
   
   Inc itimer_Count
   If itimer_count > 3 Then
      timer1.stop
      Select Case sSearchMode
            
         Case "general search"
            Organisations_Refresh()
            Persons_Get()
         Case "suburb"
            Suburb_Selection("get")
         Case "category"
            Category_Selection("get")
         Case "surname"
            Surname_Duplicates_Selection("get")
         Case "firstname"
            Firstname_Selection("get")
         Case "occupation"
            Occupation_Selection("get")
         Case "organisation"
            Organisations_Show_Duplicates
         Case "occupation"
      End Select
   End If
   
End

Public Sub Surname_Duplicates_Selection(action As String, Optional calling_control As String)
   
   Select Case action
      Case "get"
         listview1.Clear
         If Trim(txtEmployeesurname.text) = "" Then Return
         The_Collection = modContactsDBI.Person_Get(Trim(txtEmployeesurname.text), const.contacttype_person)
         The_Collection.Remove("sql_in_english")
         If The_Collection.count Then
            For Each Member In The_Collection
               listview1.Add(Member!pk_view, Member!firstname & " " & Member!surname & " (" & Member!occupation & ")")
            Next
            listview1.Visible = True
            listview1.Raise
            listview1.tag = txtEmployeesurname
         Else
            listview1.Visible = False
         End If
      Case "accept"
         
         bExit = True
         If listview1.Visible Then
            listview1.MoveCurrent()             'match internal cursor to marquee
         End If
         txtEmployeesurname.text = The_Collection[listview1.Item.key]!surname
         txtEmployeeFirstname.text = The_Collection[listview1.Item.key]!firstname
         txtEmployeeoccupation.text = The_Collection[listview1.Item.key]!occupation
         Try fk_occupation = The_Collection[listview1.Item.key]!fk_occupation
         fk_person = The_Collection[listview1.Item.key]!fk_person
         rows_in_view[gvwOrganisations.row]!fk_person = fk_person
         Try fk_category = The_Collection[listview1.Item.key]!fk_category
         txtEmployeeCategory.text = The_Collection[listview1.Item.key]!category
         Try cmbEmployeeSex.index = The_Collection[listview1.Item.key]!fk_sex
         Try cmbEmployeeTitle = The_Collection[listview1.Item.key]!fk_title
         listview1.Visible = False
         
         tbSave.SetFocus()
         bExit = False
   End Select
Catch            'couldn't find elegant way to cope with the fact that the list can be showing but no internal key is set.
   bexit = False  
   txtEmployeesurname.text = ""
   
End

Public Function Read_Help(sfilename As String) As String
   
   Dim fn As File
   Dim sString As String
   
   fn = Open sfilename For Input
   Input #fn, sstring
   Close #fn
   Return sstring
   
End

Public Sub Suburb_Selection(action As String, Optional calling_control As String)
   
   Dim iMatched As Boolean
   Dim x As Integer
   
   Select Case action
      Case "get"
         If Trim$(txtSuburb.text) = "" Then Return
         Towns = modContactsDBI.Get_Town(Lower(Trim$(txtSuburb.text)))
         listview1.Clear
         listview1.Raise
         If Towns.count Then
            For Each Town In Towns
               listview1.Add(Town!pk, Town!town & " " & Town!state & " " & Town!postcode)
            Next
            If Towns.count = 1 Then
               Suburb_Selection("accept")
            Else
               listview1.Visible = True
               listview1.tag = txtSuburb
            End If
         Else
            listview1.Visible = False
         End If
      Case "accept"
         bExit = True
         If calling_control = "textbox" Then
            If listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If InStr(Lower(listview1.Item.text), Trim(Lower(txtsuburb.text))) Then
                     iMatched = True
                     Break
                  End If
               Next
               If Not iMatched Then
                  listview1.Visible = False
                  txtSuburb.SetFocus()
                  Return 'no match found for suburb user typed in
               End If
            End If
         Else
            If listview1.Visible Then
               listview1.MoveCurrent()             'match internal cursor to marquee
            End If
         End If
         txtSuburb.text = Towns[listview1.Item.key]!town  'still a null object bug here
         txtState.text = Towns[listview1.Item.key]!state
         txtPostcode.text = Towns[listview1.Item.key]!postcode
         fk_town = Towns[listview1.Item.key]!pk
         
         If chkHeadOffice.Enabled = True Then
            chkHeadOffice.SetFocus()
         Else
            chkPostal.SetFocus()
         End If
         
         listview1.Visible = False
         bExit = False
   End Select
Catch
   bexit = False
   txtSuburb.SetFocus
   
End

Sub SetStatus(section As String, statustext As String, bOff As Boolean, message_severity As String)
   
   If bOff Then
      
   Else
      
   End If
   If message_severity = 0 Then
      
   Else If message_severity = 1 Then
      
   End If
   
End

Public Sub ListView1_DblClick()
   
   Select Case Last.Tag.tag
      Case "category"
         Category_Selection("accept", "list")
      Case "occupation"
         occupation_selection("accept", "list")
      Case "firstname"
         Firstname_Selection("accept", "list")
      Case "surname"
         Surname_Duplicates_Selection("accept", "list")
         
      Case "suburb"
         Suburb_Selection("accept", "list")
   End Select
   listView1.visible = False
   
End

Public Sub ListView1_KeyPress()
   
   If Key.Code = Key.RETURN Then
      ListView1_DblClick()
   End If
   
End

Public Sub Organisation_ClearInputArea()
   
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Organisation)
   ' txtOrganisation.text = ""
   ' txtBranch.text = ""
   ' txtBranch.Visible = False
   ' txtStreet1.text = ""
   ' txtStreet2.text = ""
   ' txtState.text = ""
   ' txtPostcode.text = ""
   ' txtSuburb.text = ""
   ' teBranchMemo.clear
   ' txtEmployeeCategory.text = ""
   ' txtCommunicationNotes.text = ""
   ' txtCommunication.text = ""
   ' txtSearch.text = ""
   ' chkHeadOffice.Value = False
   ' chkHeadOffice.Enabled = True
   ' chkPostal.Value = False
   ' chkPostal.enabled = True
   ' chkCommunicationConfidential.Value = False
   ' chkPreferredCommunication.Value = False
   
End

Public Sub Save()
   '------------------------------------------------------------
   'Can be called by F12 rather than the click_event so read tag
   '------------------------------------------------------------
   
   If tbSave.Tag = "new person" Then
      Save_Person
   Else
      Save_Organisation
   Endif
   
End

Public Sub Save_Person()
   
End

Public Sub Save_Organisation()
   '---------------------------------------------------------------------------------------
   'Save Organisation or Employee, can't change both at one as the gui showing only for one
   'reloads the data using the same search criteria and finds the appropriate record by
   'using the state of fk_organisation, fk_branch and fk_employee prior to the save
   '---------------------------------------------------------------------------------------
   
   Dim old_pk As Integer
   Dim data_numbers As CRow
   Dim organisation As CRow
   Dim person As CRow
   Dim employee As CRow
   Dim branch As CRow
   Dim address As CRow
   Dim category As CRow
   Dim communication As CRow
   Dim link_branches_comm As CRow
   Dim link_employee_comm As CRow
   Dim R As Result
   Dim occupation As CRow
   Dim sSearchCriteria As String = Trim(txtSearch.text)
   
   If Vbox_EditArea.Padding = 0 Then Return                                     'no data change indicators - no save
   tbSave.Enabled = False
   modEditAreaHelpers.EditArea_ResetTextBox_BackColor(Vbox_EditArea_Right)
   modEditAreaHelpers.EditArea_ResetTextBox_BackColor(VBox_EditArea_Organisation)
   If bEmployeeDisplayed = False Then
      If Not Valid_Organisation() Then
         tbSave.Enabled = True
         Return
      End If
      '--------------------------------------------------------
      ' CREATE TABLE contacts.data_organisations
      ' (
      '   pk serial NOT NULL,
      '   organisation text NOT NULL,
      '   deleted boolean DEFAULT false,
      '   CONSTRAINT data_organisations_pkey PRIMARY KEY (pk )
      ' )
      ' WITH (
      '   OIDS=FALSE
      ' );
      '---------------------------------------------------------
      Organisation = New Crow
      If fk_organisation Then
         Organisation.put_unchanged(fk_organisation, "fk_organisation")
      End If
      organisation!organisation = Trim(txtOrganisation.text)
      organisation.Save("contacts.data_organisations", "fk_organisation")
      '-------------------------------------------------
      ' Create TABLE contacts.lu_categories
      ' (
      '   pk serial Not Null,
      '   category character varying(50) Not Null,
      '   CONSTRAINT lu_categories_pkey PRIMARY KEY(pk)
      ' )
      ' With (
      '   OIDS = False
      ' );
      ' Category can apply to organisation or employee
      ' ------------------------------------------------
      If fk_category = 0 Then
         category = New CRow
         category!category = Trim(txtEmployeeCategory.text)
         category.Save("contacts.lu_categories", "fk_category")
         fk_category = category!fk_category
      Endif
      '------------------------------------------------------------------------------------------
      ' CREATE TABLE contacts.data_addresses
      ' (
      '   pk serial NOT NULL,
      '   street1 text,
      '   fk_town integer,
      '   preferred_address boolean DEFAULT false,
      '   postal_address boolean DEFAULT false,
      '   head_office boolean DEFAULT false,
      '   geolocation point, -- geographical location latitude and longitude
      '   country_code character(2), -- pointer to lu_country
      '   fk_lu_address_type integer,
      '   deleted boolean DEFAULT false, -- IF False then this address has had its link removed
      '   street2 text,
      '   CONSTRAINT data_addresses_pkey PRIMARY KEY (pk )
      ' )
      ' WITH (
      '   OIDS=FALSE
      ' );
      '------------------------------------------------------------------------------------------
      If Trim(txtStreet1.text) = "" And fk_town = 0 Then
         address = Null
      Else
         address = New CRow
         If fk_address <> 0 Then
            address.put_unchanged(fk_address, "fk_address")
         End If
         address!street1 = Trim(txtStreet1.text)
         address!street2 = Trim(txtStreet2.text)
         If fk_town <> 0 Then address!fk_town = fk_town
         address!country_code = "AU" 'FIXME make me configurable
         If chkHeadOffice.value = True Then
            address!head_office = True
         Else
            address!head_office = False
         End If
         If chkPostal.Value = True Then
            address!postal_address = True
         Else
            address!postal_address = False
         End If
         address.Save("contacts.data_addresses", "fk_address")
      End If
      branch = New CRow
      If fk_branch <> 0 Then
         branch.put_unchanged(fk_branch, "fk_branch")
      End If
      branch!fk_organisation = fk_organisation
      Try branch!fk_address = address!fk_address   'address can be null
      branch!branch = Trim(txtBranch.text)
      branch!fk_category = fk_category
      branch!memo = Trim(teBranchMemo.Text)
      branch.Save("contacts.data_branches", "fk_branch")
      fk_branch = branch!fk_branch
      '-----------------------------------------------------------------------------
      'patch to put in organisation ABN, dosn't take into account employee with abn
      'an existing organisation
      'patch first see if have existing ABN
      '-----------------------------------------------------------------------------
      R = modDBConnect.exec_query("Select * from contacts.data_numbers where fk_branch = " & branch!fk_branch & " AND australian_business_number is not null")
      If R.count Then      'the organisation already has an ABN
         data_numbers = New CRow
         data_numbers.put_unchanged(R!pk, "fk_data_numbers")
         data_numbers!australian_business_number = Trim(txtAustralianBusinessNumber.text) 'will revert to null
         data_numbers.Save("contacts.data_numbers", "fk_data_numbers")
      Else          'the organisation does not have an abn.
         If Trim(txtAustralianBusinessNumber.text) <> "" Then      'is user has entered an ABN
            data_numbers = New CRow
            data_numbers!fk_branch = Branch!fk_branch
            data_numbers!australian_business_number = Trim(txtAustralianBusinessNumber.text)
            data_numbers.Save("contacts.data_numbers", "fk_data_numbers")
         Endif
      End If
      '------------------------------------------------------------------------
      'CREATE TABLE contacts.links_branches_comms
      ' (
      '   pk serial NOT NULL,
      '   fk_branch integer,
      '   fk_comm integer,
      '   deleted boolean DEFAULT false,
      '   CONSTRAINT links_branches_comms_pkey PRIMARY KEY (pk ),
      '   CONSTRAINT links_branches_comms_fk_branch_fkey FOREIGN KEY (fk_branch)
      '       REFERENCES contacts.data_branches (pk) MATCH SIMPLE
      '       ON UPDATE NO ACTION ON DELETE NO ACTION,
      '   CONSTRAINT links_branches_comms_fk_comm_fkey FOREIGN KEY (fk_comm)
      '       REFERENCES contacts.data_communications (pk) MATCH SIMPLE
      '       ON UPDATE NO ACTION ON DELETE NO ACTION
      ' )
      ' WITH (
      '   OIDS=FALSE
      ' );
      '----------------------------------------------------------------------------
      ' CREATE TABLE contacts.data_communications
      ' (
      '   pk serial NOT NULL,
      '   value text NOT NULL,
      '   note text,
      '   preferred_method boolean DEFAULT false,
      '   confidential boolean DEFAULT false,
      '   deleted boolean DEFAULT false,
      '   fk_type integer NOT NULL,
      '   CONSTRAINT data_communications_pkey PRIMARY KEY (pk )
      ' )
      ' WITH (
      '   OIDS=FALSE
      ' );
      '-------------------------------------------------------------------------------
      For Each comm In comms
         communication = New CRow
         If comm!pk Then
            communication.put_unchanged(comm!pk, "fk_comm")
         Endif
         communication!value = comm!value
         communication!note = comm!note
         communication!preferred_method = comm!preferred_method
         communication!confidential = comm!confidential
         communication!fk_type = comm!fk_type
         communication.Save("contacts.data_communications", "fk_comm")
         If IsNull(comm!pk) Then
            link_branches_comm = New CRow
            link_branches_comm!fk_branch = fk_branch
            link_branches_comm!fk_comm = communication!fk_comm
            link_branches_comm.Save("contacts.links_branches_comms", "fk_link_branch_comm")
         Endif
      Next
   Else
      '------------------------------------------------------------------------------------
      ' CREATE TABLE contacts.data_persons
      ' (
      '   pk serial NOT NULL,
      '   firstname text,
      '   surname text,
      '   salutation text,
      '   birthdate date,
      '   fk_ethnicity integer,
      '   fk_language integer,
      '   memo text,
      '   fk_marital integer DEFAULT 0,
      '   fk_title integer DEFAULT 7,
      '   fk_sex integer,
      '   country_code text, -- This code if not null refers to common.lu_countries and is the country of origin or the patient, normally country of birth
      '   fk_image integer,
      '   retired boolean DEFAULT false,
      '   fk_occupation integer, -- maybe a temporary column - at the moment only used to record a single occupation ...
      '   deleted boolean DEFAULT false,
      '   deceased boolean DEFAULT false,
      '   date_deceased date,
      '   language_problems boolean DEFAULT false, -- so named in case EasyGP used outside of english speaking country, ie this field could have...
      '   surname_normalised text,
      '   CONSTRAINT data_persons_pkey PRIMARY KEY (pk )
      ' )
      ' WITH (
      '   OIDS=FALSE
      ' );
      ' note fk_occupation not saved here as fk_occupation could be employee specific
      ' employee fk_image not  used
      ' -----------------------------------------------------------------------------
      If Not valid_Person() Then
         tbSave.Enabled = True
         Return
      End If
      person = New CRow
      If fk_person Then
         person.put_unchanged(fk_person, "fk_person")
      End If
      person!firstname = Trim(txtEmployeeFirstname.text)
      person!surname = Trim(txtEmployeeSurname.text)
      person!salutation = Trim(txtEmployeeSalutation.text)
      person!fk_title = cmbEmployeeTitle.Index
      person!fk_sex = cmbEmployeeSex.Index
      person!fk_marital = cmbemployeeMarital.Index
      If chkEmployeeRetired.value Then
         person!retired = True
      Else
         person!retired = False
      End If
      If chkDeceased.value = True Then
         person!deceased = True
      Else
         person!deceased = False
      Endif
      If Trim(txtEmployeeBirthdate.text) <> "" Then
         person!birthdate = Format(Val(txtEmployeeBirthdate.text), "dd/mm/yyyy")
      End If
      person.Save("contacts.data_persons", "fk_person")
      If fk_occupation = 0 Then
         occupation = New CRow
         occupation!occupation = Trim(txtEmployeeOccupation.text)
         occupation.Save("common.lu_occupations", "fk_occupation")
         fk_occupation = occupation!fk_occupation
      End If
      employee = New CRow
      If fk_employee Then
         employee.put_unchanged(fk_employee, "fk_employee")
      End If
      If chkLeftOrganisation.value = True Then
         employee!fk_status = const.StaffStatus_LeftOrganisation
      Else
         employee!fk_status = const.StaffStatus_Active
      End If
      employee!fk_branch = fk_branch
      employee!fk_person = person!fk_person
      employee!fk_occupation = fk_occupation
      employee!memo = Trim(txtEmployeeMemo.text)
      employee.Save("contacts.data_employees", "fk_employee")
      fk_employee = employee!fk_employee
      '----------------------------------------------------------
      'the employee communcations
      ' CREATE TABLE contacts.links_employees_comms
      ' (
      '   pk serial NOT NULL,
      '   fk_employee integer,
      '   fk_comm integer,
      '   deleted boolean DEFAULT false,
      '   CONSTRAINT links_employees_comms_pkey PRIMARY KEY (pk )
      ' )
      ' WITH (
      '   OIDS=FALSE
      ' );
      '----------------------------------------------------------
      For Each comm In comms
         communication = New CRow
         If comm!pk Then
            communication.put_unchanged(comm!pk, "fk_comm")
         Endif
         communication!value = comm!value
         communication!note = comm!note
         communication!preferred_method = comm!preferred_method
         communication!confidential = comm!confidential
         communication!fk_type = comm!fk_type
         communication.Save("contacts.data_communications", "fk_comm")
         If IsNull(comm!pk) Then
            link_employee_comm = New CRow
            link_employee_comm!fk_branch = fk_branch
            link_employee_comm!fk_comm = communication!fk_comm
            link_employee_comm.Save("contacts.links_branches_comms", "fk_link_employee_comm")
         Endif
      Next
      modContactsDBI.Set_Numbers(person!fk_person, fk_branch, txtProviderNumber.Text, Null)
   End If
   modDBConnect.CommitTrans()
   Vbox_EditArea.Padding = 0
   tbSave.foreground = Color.Black
   txtSearch.text = sSearchCriteria
   Organisations_Refresh()                                                           'refresh organisations by same search criteria
   gvwOrganisations_find_row_by_keys                                              'match fk_organisation, fk_branch, fk_employee
   
End

Public Sub gvwOrganisations_Change_ForeGround_Text_Color(iExludingRow As Integer)
   'fixme probably will not use this
   
   Dim row As Integer
   Dim x As Integer
   
   For row = 0 To gvwOrganisations.Rows.Count - 1
      If row <> iExludingRow Then
         For x = 0 To gvwOrganisations.Columns.count - 1
            gvwOrganisations[row, x].Foreground = Color.LightGray
         Next
      End If
   Next
   
End

Public Sub gvwOrganisations_find_row_by_keys()
   '--------------------------------------------------------------
   'the organisations collectin is zero based = so is the gridview
   'match keys to set the grid row after a save
   '--------------------------------------------------------------
   
   Dim x As Integer
   
   For Each organisation In rows_in_view
      If organisation!fk_organisation = fk_organisation Then        'match organisation
         If organisation!fk_branch = fk_branch Then                 'match branch
            If fk_employee Then                                     'if there is an employee
               If organisation!fk_employee = fk_employee Then       'match to emplyee
                  Goto SetRow
               Endif
            Else                                                    'otherwise
               Goto SetRow                                          'just much on branch
            Endif
         Endif
      Endif
      Inc x
   Next
   Return
   
SetRow:
   With gvwOrganisations
      .row = x
      .SetFocus()
   End With
   gvwOrganisations_Select()
   
End

Public Sub Organisation_Add()
   
   bExit = True
   
   Comms = New Collection
   Comm = New Collection
   iCommunication = 0
   fk_organisation = 0
   fk_address = 0
   fk_branch = 0
   fk_town = 0
   fk_employee = 0
   fk_category = 0
   fk_person = 0
   
   Vbox_EditArea_Employee.Visible = False
   VBox_EditArea_Organisation.Visible = True
   Organisation_ClearInputArea()
   gvwOrganisations.Clear()
   cvwContacts.Clear()
   txtBranch.visible = True
   txtBranch.text = "HEAD OFFICE"
   txtBranch.Enabled = False
   Hbox_Category.Visible = True
   chkHeadOffice.value = True
   chkHeadOffice.Enabled = False
   chkPostal.enabled = True
   Communication_New()
   modEditAreaHelpers.Notify_Data_Changed(Vbox_EditArea, tbSave, False)
   tbSave.Enabled = True
   Vbox_EditArea.Enabled = True
   Hbox_Occupation.Visible = False
   txtOrganisation.SetFocus
   ' lblBranch.text = "New Organisation"
   lblOrganisation.text = "New Organisation"
   bEmployeeDisplayed = False
   bExit = False
   
End

Public Sub Branch_Add()
   
   Dim sOrganisation As String
   Dim sCategory As String
   Dim sMsg As String
   Dim tempfile As String
   Dim fk_category_organisation As Integer
   Dim x As Integer
   
   fk_category_organisation = fk_category
   '
   ' For x = 0 To gvwOrganisations.Rows.Count
   '    If organisations[x]!fk_organisation = fk_organisation Then
   '       If organisations[x]!branch = "HEAD OFFICE" Then
   '
   '       Endif
   '    Endif
   ' Next
   Print txtSearch.Text
   lblActioning.text = "Add New Branch"
   sOrganisation = txtOrganisation.Text
   sCategory = txtEmployeeCategory.Text
   bExit = True
   bEmployeeDisplayed = False
   Organisation_ClearInputArea() 'clear all textboxes on the screen
   EditArea_Employee_Clear()
   cvwContacts.Clear()
   txtOrganisation.Enabled = False
   txtStreet1.Enabled = True
   txtStreet2.Enabled = True
   txtSuburb.Enabled = True
   txtPostcode.Enabled = True
   txtState.Enabled = True
   '  lblOrganisation.text = "Add new branch to the organisation"
   txtBranch.Visible = True
   txtBranch.Enabled = True
   chkHeadOffice.Enabled = False
   tbSave.Enabled = True
   txtOrganisation.text = sOrganisation
   txtEmployeeCategory.text = sCategory
   chkHeadOffice.Enabled = False
   chkPostal.Enabled = True
   Comms = New Collection
   fk_address = 0
   fk_town = 0
   fk_employee = 0
   fk_person = 0
   fk_branch = 0
   fk_category = fk_category_organisation
   bExit = False
   Communication_New()
   txtBranch.SetFocus()
   Print txtSearch.Text
   
End

Public Sub branch_delete()
   
End

Public Function Valid_Organisation() As Boolean
   
   Dim sMsg As String
   Dim category As Collection
   
   If listview1.Visible Then
      listview1.SetFocus
      Return
   Endif
   If txtOrganisation.text = "" Then
      sMsg = "Please enter the name of the organisation before saving"
      txtOrganisation.SetFocus()
      Goto MissingData
   End If
   If txtBranch.text = "" Then
      sMsg = "Please enter the name of the branch before saving"
      If chkHeadOffice.value = True Then
         txtBranch.text = "HEAD OFFICE"
      End If
      txtBranch.SetFocus()
      Goto MissingData
   End If
   
   If txtemployeeCategory.text = "" Then
      sMsg = "Each entry in the contacts database must be allocated a category.\n\n"
      "This is extremely important, and should be an accurate refelection of the"
      "organisation, so please think carefully before allocating this.\n\n"
      "If the category does not exist, it will be created when the record is saved."
      txtemployeeCategory.SetFocus()
      Goto MissingData
   Else
      '---------------------------------------------------------------------------------
      'though we shouldn't have to do this, the gambas lost focus event does not trigger
      'when the control recieving focus is e.g button, so the EditArea_LostFocus() event
      'will not have triggered
      '----------------------------------------------------------------------------------
      bExit = True
      '  textboxForSpellCheck = txtEmployeeCategory
      '  teForSpelling.text = Trim(txtEmployeeCategory.text)
      '   bExit = False
      ' SpellChecker.init()
      '  SpellChecker.StartSpelling()
      SpellCheck_TextBox(txtemployeeCategory)
      category = modContactsDBI.Category_Get(Trim(txtEmployeeCategory.text))
      If category.Count Then
         fk_category = category!pk
      Endif
   End If
   Return True
MissingData:
   Message.Info(sMsg)
   Return False
   
End

Public Function Valid_Person() As Boolean
   
   Dim sMsg As String
   Dim occupation As Collection
   
   If listview1.Visible Then  'eg typed in suburb, category or occupation and not selected.
      listview1.SetFocus
      Return
   Endif
   If Trim(txtEmployeeFirstname.text) = "" Then
      txtEmployeeFirstname.SetFocus
      Return False
   End If
   
   If Trim(txtEmployeeSurname.text) = "" Then
      txtEmployeeSurname.SetFocus
      Return False
   End If
   If Trim(txtEmployeeBirthdate.text) <> "" Then
      If Not IsDate(txtEmployeeBirthdate.text) Then
         txtEmployeeBirthdate.SetFocus()
         Return False
      End If
   End If
   If fk_occupation = 0 And Trim(txtEmployeeOccupation.text) = "" Then
      sMsg = "Please enter an occupation for this employee."
      txtEmployeeOccupation.SetFocus
      Message.Info(sMsg)
      Return
   Endif
   If fk_occupation = 0 And Trim(txtEmployeeoccupation.text) <> "" Then
      ' textboxForSpellCheck = txtEmployeeoccupation
      ' bExit = True
      ' teForSpelling.text = Trim(txtEmployeeOccupation.text)
      ' bExit = False
      '   SpellChecker.init(txtEmployeeoccupation)
      '  SpellChecker.StartSpelling()
      SpellCheck_TextBox(txtEmployeeoccupation)
      'check if occupation is in the database
      occupation = modCommonDBI.Occupation_Get(Trim(txtEmployeeoccupation.text))
      If Not IsNull(occupation) Then
         fk_occupation = occupation!pk
      Else
         smsg = "The occupation " & Trim(txtEmployeeoccupation.text) & " was not found in the database.\n\n"
         "Please check the spelling and if ok confirm you wish to add this occupation to the database."
         If Message.Question(sMsg, "Yes - Add Occupation", "Cancel") = 2 Then Return
      End If
   Endif
   Return True
   
End

Public Sub Org_Input_Enable(bflag As Boolean)
   
   If bFlag Then
      txtOrganisation.Enabled = True
      txtBranch.Enabled = True
      txtStreet1.Enabled = True
      txtStreet2.Enabled = True
      txtSuburb.Enabled = True
      txtState.Enabled = False
      txtPostcode.Enabled = False
      'lblBranch.Text = "Branch"
      
      chkHeadOffice.Enabled = True
      chkPostal.Enabled = True
      
   Else
      txtOrganisation.Enabled = False
      txtBranch.Enabled = False
      txtStreet1.Enabled = False
      txtStreet2.Enabled = False
      txtSuburb.Enabled = False
      txtState.Enabled = False
      txtPostcode.Enabled = False
      'lblBranch.Text = "Branch"
      chkHeadOffice.Enabled = False
      chkPostal.Enabled = False
   End If
   
End

Public Sub Employee_Add()
   
   Dim msg As String
   
   If gvwOrganisations.rows.count = 0 Then Return
   msg = "You may not link a new employee to an existing employee\n\n"
   "Please select an organisation or a branch or department prior to adding an employee"
   If row_in_view!fk_employee <> 0 Then
      Message.Info(Msg)
      Return
   End If
   
   bexit = True
   EditArea_Employee_Clear()
   lblActioning.Text = "Add Employee to: " & txtBranch.Text
   VBox_EditArea_Organisation.Visible = False
   Vbox_EditArea_Employee.Visible = True
   cmbCommunicationType.index = 0
   txtCommunication.text = ""
   txtCommunicationNotes.text = ""
   Hbox_Category.Visible = False
   cvwContacts.Clear()
   Hbox_Occupation.Visible = True
   Hbox_Provider_Number.Visible = True
   lblOccupation.Visible = True
   txtEmployeeoccupation.Visible = True
   Comms = New Collection
   listview1.Visible = False
   bEmployeeDisplayed = True
   Communication_New()
   bExit = False
   txtEmployeeSurname.SetFocus
   
End

Public Sub Organisations_Refresh()
   
   If bExit Then Return
   If Trim(txtSearch.text) = "" Then Return
   Select Case cmbSearchType.Index
      Case 0 'organisations together with employee's
         rows_in_view = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.organisations_employees_get("%" & Trim(txtSearch.text)))
      Case 1
         
      Case 2 'only organisations, no employees
         rows_in_view = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Organisations_Get(Trim(txtSearch.text)))
      Case 3
         rows_in_view = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Employees_In_Organisations_Find(Trim(txtSearch.text)))
   End Select
   If Not IsNull(rows_in_view) Then Organisations_Refresh_List()
   
End

Public Sub Organisations_Show_Duplicates()
   
   If Trim(txtOrganisation.text) = "" Then Return
   The_Collection = modContactsDBI.Organisations_Get(Trim(txtOrganisation.text))
   listview1.Clear
   If The_Collection.count Then
      For Each Member In The_Collection
         listview1.Add(Member!pk_view, Member!organisation & " " & Member!branch & " " & Trim(Member!street1 & " " & Member!street2) & " " & Member!town & " (" & Member!category & ")")
      Next
      listview1.Visible = True
      listview1.Raise
      listview1.tag = txtOrganisation
   Else
      listview1.Visible = False
   End If
   
End

Public Sub Organisations_Employees_Find(sSearchCriteria As String)
   
   rows_in_view = modContactsDBI.organisations_employees_get(Trim(sSearchCriteria))
   If Not IsNull(rows_in_view) Then Organisations_Refresh_List()
   
End

Public Sub EditArea_Employee_Clear()
   
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_Employee)
   
End

Public Sub Organisations_Refresh_List()
   '----------------------------------------------------------------
   'Loads into the gridview all organisations for txtSearch criteria
   '----------------------------------------------------------------
   
   Dim x As Integer
   Dim sTemp As String
   Dim sStatusMessage As String
   Dim iLastorganisation_pk As Integer
   Dim ilastBranch As Integer
   Dim sText As String
   Dim sAddress As String
   
   With gvwOrganisations
      .Clear
      .Rows.count = 0
      .Columns.count = 2
   End With
   If rows_in_view.count Then                                                       'If organisations exist do all the work
      sStatusMessage = Str$(rows_in_view.count) & " records found for search criteria '" & Trim(txtSearch.text) & "'"
      SetStatus("Organisations", sStatusMessage, False, 0)
      Print rows_in_view.Count
      For Each row_in_view In rows_in_view
         sText = ""
         sAddress = ""
         Inc gvwOrganisations.Rows.Count
         gvwOrganisations.Rows[x].height = -1
         If iLastorganisation_pk <> row_in_view!fk_organisation Then
            iLastorganisation_pk = row_in_view!fk_organisation
            With gvwOrganisations[x, 0]
               '  .wordwrap = True
               '  .RichText = "<B>" & row_in_view!organisation & "</B>  "
               .text = row_in_view!organisation & "  "
               .Alignment = Align.TopLeft
            End With
            ' gvwOrganisations.Rows[x].height = -1
         End If
         ' gvwOrganisations.Rows[x].height = -1
         If IsNull(row_in_view!surname) Then
            If row_in_view!head_office = True Then
               sText = "<B>" & "HEAD OFFICE" & "</B>"
            Else
               sText = "<B>" & row_in_view!branch & "</B>"
            End If
         End If
         ilastBranch = row_in_view!fk_branch
         If Len(row_in_view!surname) Then 'FIXME BAD CODE
            sTemp = " -- " & row_in_view!firstname & " " & row_in_view!surname & Space$(Max(35 - Len(Trim(row_in_view!firstname & " " & row_in_view!surname)), 1))
            If Not IsNull(row_in_view!occupation) Then
               sTemp &= " (" & row_in_view!occupation & ")"
            End If
            sText &= sTemp
            sTemp = ""
            If row_in_view!fk_status = const.StaffStatus_LeftOrganisation Then
               '    '    gvwOrganisations[x, 2].Text = "*** NO LONGER AT THIS ADDRESS *** "
               ' sText &= "<BR>   :" & "<small><i>*** NO LONGER AT THIS ADDRESS ***</I></small> " 'this works
               sTemp = "<BR>   :" & "<small><i>*** NO LONGER AT THIS ADDRESS ***</I></small> "
            End If
            If row_in_view!retired = True Then
               If Left(sTemp, 4) <> "<BR>" Then
                  sTemp &= "<BR>   :"
               End If
               sTemp &= "<I><small>*** RETIRED ****</small></I>"
            Endif
            If row_in_view!deceased = True Then
               If Left(sTemp, 4) <> "<BR>" Then
                  sTemp &= "<BR>   :"
               Endif
               sTemp &= "<I><small> *** DECEASED ***</small></I>"
            Endif
            If sTemp <> "" Then sText &= sTemp
         Else
            sAddress = Trim(Trim(row_in_view!street1 & " " & row_in_view!street2) & " " & row_in_view!town & " " & row_in_view!postcode)
            If sAddress <> "" Then
               sText &= "<BR>" & sAddress
            Endif
         End If
         ' If sAddress <> "" Then
         '    sText &= "<BR>" & sAddress
         ' Endif
         gvwOrganisations[x, 1].RichText = "<B>" & "HEAD OFFICE" & "</B><BR>Street Address"
         With gvwOrganisations[x, 1]
            .WordWrap = True
            .RichText = sTExt
            .Alignment = Align.Left
         End With
         gvwOrganisations.Rows[x].height = -1
         Inc x
      Next
      VSplit_DataEntry.Enabled = True
      gvwOrganisations.Enabled = True
      lblmeasure.font = gvwOrganisations.Font
      modUtil.Gridview_Columns_Set_Size(gvwOrganisations, lblmeasure)
   End If
   
End

Public Sub gvwOrganisations_Select()
   '----------------------------------------------------------------------------------
   'User has clicked on an row in the grid, prompt to save unsaved data
   'the flag bPromptedSave later  used in Save to determine if move to the changed row
   'if false we will move to the row saved
   '-----------------------------------------------------------------------------------
   
   If bExit Or gvwOrganisations.Rows.count = 0 Then Return
   bexit = True
   gvwPersons.UnSelectAll
   bexit = False                                          'de-select the persons listbexit
   gvwpersons.Background = Color.RGB(248, 248, 248)
   Check_Unsaved_Data
   If gvwOrganisations.Background = Color.RGB(248, 248, 248) Then     'if greyed out have been using the persons list
      With gvwOrganisations
         .row = 0                                        'set row to 0
         .Background = Color.White                       'alert user by making background white
         .Foreground = Color.Black
      End With
   End If
   Organisation_Display()
   
End

Public Sub Check_Unsaved_Data()
   '----------------------------------
   'Prompt  user to save  unsaved data
   '----------------------------------
   
   If Vbox_EditArea.Padding = 1 Then
      sMsgGlobal = "Do you wish to save the altered data for:\n\n"
      sMsgGlobal &= Trim(txtOrganisation.text) & "\n" & Trim(txtBranch.text) & "\n\""
      If Vbox_EditArea_Employee.Visible Then
         sMsgGlobal &= cmbEmployeeTitle.text & " " & Trim(txtEmployeeFirstname.text) & " " & Trim(txtEmployeeSurname.text)
      Endif
      If Message.Question(sMsgGlobal, " Yes ", " No ") = 1 Then
         Save()
         Return
      Endif
   End If
   
End

Public Sub Organisation_Display()
   '----------------------------------------------------------------------------------------------
   'Displays a row in the columnview according to whether it is an organisation or an employee row
   '----------------------------------------------------------------------------------------------
   
   Dim i As Integer
   Dim x As Integer
   
   If gvwOrganisations.rows.Count = 0 Or gvwOrganisations.row = -1 Then Return
   '-------------------------------------
   'Setup the gui just for organisations
   '------------------------------------
   With tbAdd
      .text = "New Employee"
      .Tooltip = "Add New Employee"
      .tag = "new employee"
   End With
   bExit = True
   lblActioning.text = ""
   listview1.Visible = False 'could have been visible e.g user adding record, then just clicks on list without saving
   Vbox_EditArea.Enabled = True
   EditArea_Organisation_Clear()             'clear just the textboxes
   EditArea_Employee_Clear()                 'for organisation and employee
   bNewCommunication = False
   row_in_view = rows_in_view[gvwOrganisations.row]
   fk_organisation = row_in_view!fk_organisation
   fk_branch = row_in_view!fk_branch
   If row_in_view!fk_employee = 0 Then
      bEmployeeDisplayed = False
      fk_town = 0                   'this row may not have a town
      fk_address = 0                'and may not have an address
      Try fk_address = row_in_view!fk_address
      fk_category = row_in_view!fk_category
      Try fk_town = row_in_view!fk_town 'may not address
      txtOrganisation.text = row_in_view!organisation
      lblOrganisation.text = row_in_view!organisation & " " & row_in_view!branch
      txtBranch.text = row_in_view!branch
      txtStreet1.text = row_in_view!street1
      txtStreet2.text = row_in_view!street2
      txtSuburb.text = row_in_view!town
      txtState.text = row_in_view!state
      txtPostcode.text = row_in_view!postcode
      chkHeadOffice.Enabled = row_in_view!head_office
      Try chkHeadOffice.value = row_in_view!head_office
      chkPostal.Enabled = True
      Try chkPostal.value = row_in_view!postal_address
      txtemployeeCategory.text = row_in_view!category
      If Not IsNull(row_in_view!australian_business_number) Then
         txtAustralianBusinessNumber.text = row_in_view!australian_business_number
      Endif
      Hbox_Category.Visible = True
      Hbox_Occupation.Visible = False
      Hbox_Provider_Number.Visible = False
      teBranchMemo.text = row_in_view!memo
      If row_in_view!postal_address = True Then
         chkPostal.value = True
      Else
         chkPostal.value = False
      End If
      If row_in_view!head_office = True Then
         chkHeadOffice.value = True
      Else
         chkHeadOffice.value = False
      End If
      lblActioning.text = "Edit " & txtOrganisation.text & ": " & txtBranch.text
      MnuOrganisationsPopup_EnableBranchOptions
      fk_person = 0
      fk_employee = 0
      VBox_EditArea_Organisation.Visible = True
      Vbox_EditArea_Employee.Visible = False
      lblOccupation.visible = False
      txtEmployeeoccupation.Visible = False
      views_comms = New Collection
      views_comms = modContactsDBI.Branch_Comms_Get(row_in_view!fk_branch)
   Else
      lblOccupation.Visible = True
      txtEmployeeoccupation.Visible = True
      bEmployeeDisplayed = True
      fk_employee = row_in_view!fk_employee
      fk_branch = row_in_view!fk_branch
      fk_organisation = row_in_view!fk_organisation
      fk_person = row_in_view!fk_person
      Try fk_occupation = row_in_view!fk_occupation
      fk_category = 0
      Hbox_Category.Visible = False
      Hbox_Occupation.Visible = True
      Hbox_Provider_Number.Visible = True
      txtEmployeeFirstname.text = row_in_view!firstname
      txtEmployeeSurname.text = row_in_view!surname
      txtEmployeeSalutation.text = row_in_view!salutation
      txtEmployeeOccupation.text = row_in_view!occupation
      txtEmployeeMemo.text = row_in_view!memo
      cmbEmployeeSex.Index = row_in_view!fk_sex
      cmbEmployeeTitle.Index = row_in_view!fk_title
      txtProviderNumber.Text = row_in_view!provider_number
      Select Case row_in_view!fk_status
         Case const.StaffStatus_Active
            chkLeftOrganisation.value = False
         Case const.StaffStatus_LeftOrganisation
            chkLeftOrganisation.value = True
      End Select
      chkDeceased.value = row_in_view!deceased
      mnuOrganisationsPopup_EnableEmployeeOptions
      If row_in_view!retired = True Then
         chkEmployeeRetired.value = True
      Else
         chkEmployeeRetired.Value = False
      Endif
      lblOrganisation.text = row_in_view!organisation & " " & row_in_view!branch & ": " & row_in_view!firstname & " " & row_in_view!surname
      Vbox_EditArea_Employee.Visible = True
      VBox_EditArea_Organisation.Visible = False
      views_comms = New Collection
      views_comms = modContactsDBI.person_Comms_Get(row_in_view!fk_person)
   End If
   cvwContacts.Clear()
   comms = New Collection
   For Each Member In views_comms
      comm = New Collection
      comm!type = Member!type
      comm!value = Member!value
      comm!note = Member!note
      comm!pk = Member!pk
      comm!preferred_method = Member!preferred_method
      comm!confidential = Member!confidential
      comm!fk_type = Member!fk_type
      comm!type = Member!type
      x = cvwContacts.Count
      comms.Add(comm, x)
      cvwContacts.Add(x, 0)
      cvwContacts[x][0] = comm!type
      cvwContacts[x][1] = comm!value
      cvwContacts[x][2] = comm!note
   Next
   lblmeasure.font = cvwContacts.Font
   modUtil.Columnview_Columns_Set_Size(cvwContacts, lblmeasure)
   Communication_New()
   tbSave.Enabled = True
   modEditAreaHelpers.Notify_Data_Changed(Vbox_EditArea, tbSave, False)
   bExit = False
   HSplit_EditArea_Organisations.Visible = True
   HSplit_EditArea_Persons.visible = False
   
End

Public Sub Communications_FillList()
   
   Dim comm As Collection
   Dim x As Integer
   
   If IsNull(Comms) Then Return
   cvwContacts.Clear()
   If comms.count Then
      For Each Comm In comms
         If comm!value Then
            x = cvwContacts.Count
            cvwContacts.Add(x, 0)
            cvwContacts[x][0] = comm!type
            cvwContacts[x][1] = comm!value
            cvwContacts[x][2] = comm!note
            
         End If
      Next
   End If
   
End

Public Sub Communication_Accept()
   
   Dim sMsg As String           'used to show message on status bar as to what we are doing
   Dim i As Integer             'used as a loop counter in this routine
   Dim iCurrentRow As Integer   'keep to allow moving back to this row after update
   
   If Trim(txtCommunication.Text) = "" Then
      
      txtCommunication.SetFocus
      sMsg = "Hint: Contacts must consist of at least one value eg phone number, email address etc"
      SetStatus("Contacts", sMsg, False, const.cStatusMsg_Info)
      Return
   End If
   
   If bNewCommunication = True Then
      
      comm = New Collection
      cvwContacts.Add(iCommunication, 0)
      cvwContacts[iCommunication][0] = cmbCommunicationType.text
      cvwContacts[iCommunication][1] = txtCommunication.text
      cvwContacts[iCommunication][2] = txtCommunicationNotes.Text
      
      Comm!fk_type = cmbCommunicationType.Index
      Comm!type = cmbCommunicationType.text 'need this for display
      Comm!value = txtCommunication.Text
      Comm!note = txtCommunicationNotes.Text
      
      If chkPreferredCommunication.value Then
         Comm!preferred_method = True
      Else
         Comm!preferred_method = False
      End If
      If chkCommunicationConfidential.Value Then
         Comm!confidential = True
      Else
         Comm!confidential = False
      End If
      Comms.Add(Comm, iCommunication)
      
   Else
      
      Comms[iCommunication]!value = txtCommunication.Text
      Comms[iCommunication]!note = txtCommunicationNotes.Text
      
      If chkPreferredCommunication.value Then
         Comms[iCommunication]!preferred_method = True
      Else
         Comms[iCommunication]!preferred_method = False
      End If
      If chkCommunicationConfidential.Value Then
         Comms[iCommunication]!confidential = True
      Else
         Comms[iCommunication]!confidential = False
      End If
      Comms[iCommunication]!fk_type = cmbCommunicationType.index
      Comms[iCommunication]!type = cmbCommunicationType.text
      
      Communications_FillList()
   End If
   
   Communication_New()
   txtCommunication.SetFocus
   
End

Public Sub Branch_Data_Changed_Notify(bflag As Boolean)
   
   If bexit Then Return
   branch.data_changed = bflag
   If bflag Then
      tbSave.Picture = Picture.Load("icons/12/filesave_changed.png")
   Else
      tbSave.Picture = Picture.Load("icons/12/filesave.png")
   End If
   
End

Public Sub cvwContacts_Menu()
   
   If cvwContacts.Count = 0 Then
      Return
   End If
   popupMnuContacts.Popup
   
End

Public Sub cvwContacts_Click()
   
   If cvwContacts.Count = 0 Then Return
   bExit = True 'stop triggering a popup list on the textboxes
   bNewCommunication = False 'must be existing or not saved if clicking on it
   btnAddContact.text = "Save modifications to list"
   
   cvwContacts.MoveCurrent 'move internal cursor to the item showing
   iCommunication = cvwContacts.Item.Key
   Comm = Comms[iCommunication]
   If bEmployeeDisplayed Then
      txtCommunication.text = Comms[iCommunication]!value
      txtCommunicationNotes.text = Comms[iCommunication]!note
      cmbCommunicationType.index = Comms[iCommunication]!fk_type
      chkCommunicationConfidential.value = Comms[iCommunication]!confidential
      chkPreferredCommunication.Value = Comms[iCommunication]!preferred_method
      
   Else
      txtCommunication.text = Comms[iCommunication]!value
      txtCommunicationNotes.text = Comms[iCommunication]!note
      cmbCommunicationType.index = Comms[iCommunication]!fk_type
      chkCommunicationConfidential.value = Comms[iCommunication]!confidential
      chkPreferredCommunication.Value = Comms[iCommunication]!preferred_method
   End If
   bExit = False
   
End

Public Sub popupMnuContacts_Click()
   
   Select Case Last.tag
      Case "add"
         Communication_New()
      Case "delete"
         Communication_Delete
   End Select
   
End

Public Sub Employee_Delete()
   
   Dim smsg As String = "Are you sure you want to delete this employee:\n\n"
   'fixme
   Message.Info("Richard fix employee delete")
   Return
   sMsg &= "Organisation:" & rows_in_view[gvwOrganisations.row]!organisation & "\n"
   sMsg &= "Branch:" & rows_in_view[gvwOrganisations.row]!branch & "\n"
   sMsg &= "Name:" & rows_in_view[gvwOrganisations.row]!wholename & "\n\n"
   sMsg &= "Are you sure you want to continue?"
   If Message.Warning(sMsg, "Yes", "No") = 2 Then Return
   modContactsDBI.Employee_Delete(fk_person, fk_branch)
   modDBConnect.CommitTrans()
   rows_in_view = modContactsDBI.Organisations_Employees_Get_By_Keys(fk_organisation)
   Organisations_Refresh_List()
   
End

Public Sub tbContacts_Click()
   
   Dim tempLayout As String
   
   Select Case Last.tag
      Case "display all"
         Organisations_Employees_Find("%")
      Case "add"
      Case "add all"
         
      Case "delete"
         
      Case "delete all"
         
      Case "new organisation"
         Check_Unsaved_Data
         Organisation_Add()
         
      Case "add address"
      Case "new branch"
         Check_Unsaved_Data
         branch_add()
      Case "delete branch"
         branch_delete
      Case "new employee"
         Check_Unsaved_Data
         employee_add()
      Case "delete employee"
         employee_delete()
      Case "add communication"
         
         '  cvOrganisations_DblClick
         Communication_New()
         txtCommunication.SetFocus
      Case "reset"
         
      Case "browse web"
         
      Case "save"
         Save  'save person or organisation/employee
      Case "advanced search"
         
      Case "settings"
         
      Case "information"
         
      Case "help"
         
      Case "maximize"
         Return
         
      Case "close"
         Me.Close()
   End Select
   
End

Public Sub Employees_Find(sSearchCriteria As String) As Collection
   
   Dim $localResult As Result
   
   sLastSearchCriteria = Trim(sSearchCriteria)
   $localResult = modContactsDBI.Employees_In_Organisations_Find(sSearchCriteria)
   Organisations_Refresh_List($localResult)
   
End

Public Sub btnAquirePHoto2_Click()
   
   Message.Info("Not implemented yet")
   
End

Public Sub btnCommunications_Click()
   
   Select Case Last.tag
      Case "new communication"
         Communication_New()
         txtCommunication.SetFocus
      Case "add communication"
         Communication_Accept()
   End Select
   
End

Public Sub Employee_Locations_Show()
   
End

Public Sub gvwOrganisations_Menu()
   '-------------------------------------
   'Popup menu over the organisations list
   '--------------------------------------
   
   If gvwOrganisations.rows.Count And gvwOrganisations.row <> -1 Then
      mnuOrganisationsPopUp_SetDefaultProvider.Caption = "Set as Default Provider for " & rows_in_view[gvwOrganisations.Row]!category
      '  mnuOrganisationsPopUp_BranchAdd.text = "Add Branch to Head Office"
      mnuOrganisationsPopUp.popup
   End If
   
End

Public Sub mnuOrganisationsPopup_EnableEmployeeOptions()
   
   ' mnuOrganisationsPopUp_BranchAdd.Enabled = False
   mnuOrganisationsPopUp_AddEmployee.Enabled = False
   mnuOrganisationsPopUp_AddEmployeeAll.Enabled = False
   mnuOrganisationsPopUp_DeleteEmployee.Enabled = True
   mnuOrganisationsPopUp_DeleteEmployeeAll.Enabled = True
   mnuOrganisationsPopUp_Email.Enabled = True 'fixme b checking if this is possible
   mnuOrganisationsPopUp_Web.Enabled = True 'fixme b checking if this is possible
   
End

Public Sub MnuOrganisationsPopup_EnableBranchOptions()
   
   If chkHeadOffice.Value = True
      mnuOrganisationsPopUp_AddEmployee.text = "Add employee to head office"
      '  mnuOrganisationsPopUp_BranchAdd.Enabled = True
      tbBranchAdd.Enabled = True
      chkHeadOffice.Enabled = True
   Else
      '  mnuOrganisationsPopUp_BranchAdd.Enabled = False
      mnuOrganisationsPopUp_AddEmployee.text = "Add employee to branch office"
      tbBranchAdd.Enabled = False
      chkHeadOffice.Enabled = False
   End If
   tbAdd.Enabled = True 'can add employee to head office or any other branch
   mnuOrganisationsPopUp_AddEmployee.Enabled = True
   mnuOrganisationsPopUp_AddEmployeeAll.Enabled = False
   mnuOrganisationsPopUp_DeleteEmployee.Enabled = False
   mnuOrganisationsPopUp_DeleteEmployeeAll.Enabled = False
   
   mnuOrganisationsPopUp_Email.Enabled = True 'fixme b checking if this is possible
   mnuOrganisationsPopUp_Web.Enabled = True 'fixme b checking if this is possible
   
End

Public Sub Employee_Surname_Get()
   
End

Public Sub Firstname_Selection(action As String, Optional calling_control As String)
   
   Dim x As Integer
   
   Select Case action
      Case "get"
         listview1.Visible = False  'user may have backspaced and list still visible
         If Trim(txtEmployeeFirstname.text) = "" Then Return
         The_Collection = modContactsDBI.Firstname_Get(Trim(txtEmployeeFirstname.text))
         listview1.Clear
         
         If The_Collection.count Then
            For Each Member In The_Collection
               listview1.Add(Member!pk, Member!firstname)
            Next
            If The_Collection.count = 1 Then
               If Trim(Lower(txtEmployeefirstname.text)) = Lower(Member!firstname) Then
                  Firstname_Selection("select", "list")
                  Return
               End If
            End If
            listview1.Visible = True
            listview1.Raise
            listview1.tag = txtEmployeefirstname
            Return
         End If
         listview1.Visible = False
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            
            If listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If Lower(listview1.Item.text) = Trim(Lower(txtEmployeeFirstname.text)) Then
                     listview1.Visible = False
                     Break
                  End If
               Next
            End If
         Else
            
            If listview1.Visible Then
               listview1.MoveCurrent   'set internal cursor to match marquee
               txtEmployeeFirstname.Text = listview1.Item.Text
            End If
         End If
         listview1.Visible = False
         cmbEmployeeSex.SetFocus()
         bExit = False
   End Select
Catch
   bexit = False  
   Return
   
End

Public Sub Occupation_Selection(action As String, Optional calling_control As String)
   
   Dim x As Integer
   
   Select Case action
      Case "get"
         
         If Len(Trim(txtEmployeeOccupation.text)) = 0 Then Return
         The_Collection = modCommonDBI.Occupations_Get(Trim(txtEmployeeOccupation.text))
         listview1.Clear
         
         If The_Collection.count Then
            For Each Member In The_Collection
               listview1.Add(Member!pk, Member!occupation)
            Next
            If The_Collection.count = 1 Then
               If Trim(Lower(txtEmployeeOccupation.text)) = Lower(Member!occupation) Then
                  Occupation_Selection("select", "list")
                  Return
               End If
            End If
            listview1.Visible = True
            listview1.Raise
            listview1.tag = txtEmployeeOccupation
            Return
         Else
            
            If bEmployeeDisplayed Then
               fk_occupation = 0
            End If
         End If
         listview1.Visible = False
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            
            If listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If Lower(listview1.Item.text) = Trim(Lower(txtEmployeeOccupation.text)) Then
                     fk_occupation = listview1.Item.Key
                     Break
                  End If
               Next
            End If
            
            fk_occupation = 0
            listview1.Visible = False
         Else
            
            If listview1.Visible Then
               listview1.MoveCurrent   'set internal cursor to match marquee
               fk_occupation = listview1.Item.key
               txtEmployeeOccupation.Text = listview1.Item.Text
            End If
         End If
         '   If bEmployeeDisplayed Then
         '      txtEmployeeOccupation.SetFocus()
         '   Else
         txtCommunication.SetFocus()
         '  End If
         bExit = False
   End Select
Catch
   bexit = False  
   Return
   
End

Public Function EditArea_TextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case tag
      Case "birthdate"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_KeyPress()
   
   If Not EditArea_Textbox_ExcludeKeys(key.code, Last.tag) Then
      Stop Event
      Return
   End If
   Select Case key.Code
      Case key.Return
         Select Case Last.tag
            Case "organisation"
               listview1.Visible = False 'becomes visible when editing existing organisation
               txtStreet1.SetFocus()
            Case "branch"
               txtStreet1.SetFocus()
            Case "surname"
               cmbEmployeeTitle.SetFocus()
               listview1.Visible = False 'list could be popped up with duplicate and not used
            Case "firstname"
               Firstname_Selection("accept", "textbox")
               cmbEmployeeSex.setfocus()
            Case "birthdate"
               txtEmployeeMemo.setfocus()
            Case "occupation"
               Occupation_Selection("accept", "textbox")
            Case "salutation"
               cmbemployeeMarital.SetFocus()
            Case "street1"
               txtSuburb.SetFocus()
            Case "street2"
               txtSuburb.SetFocus()
            Case "suburb"
               Suburb_Selection("accept", "textbox")
               chkHeadOffice.setfocus()
            Case "value"
               txtCommunicationNotes.SetFocus()
            Case "notes"
               If Trim(txtCommunication.text) = "" Then
                  tbSave.SetFocus()
               Else
                  btnAddContact.SetFocus()
               End If
            Case "category"
               Category_Selection("accept", "textbox")
         End Select
      Case key.Tab
         listview1.Visible = False
      Case key.Down
         Select Case Last.tag
            Case "occupation", "surname", "firstname", "suburb", "category"
               If listview1.Visible Then
                  listview1.SetFocus
                  listview1.MoveFirst
                  listview1.Item.Selected = True
               End If
         End Select
   End Select
   
End

Public Sub Editarea_GotFocus()
   
   sSearchMode = Last.tag
   With listview1
      .Visible = False
      .Clear
   End With
   timer1.start
   textboxForSpellCheck = Null
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
      Case "suburb"
         With listview1
            .top = VBox_EditArea_Organisation.top + Last.parent.parent.top + Last.height
            .left = VBox_EditArea_Organisation.left + Last.Parent.left + VBox_EditArea_Organisation.padding
            .Width = txtSuburb.Width
         End With
      Case "category"
         With listview1
            .left = VBox_EditArea_Right.left + Last.Parent.Left + VBox_EditArea_Right.padding
            .width = txtEmployeeCategory.Width
            .top = VBox_EditArea_Right.top + Last.Parent.top + txtEmployeeCategory.Height + VBox_EditArea_Right.Padding
            .raise
         End With
         textboxForSpellCheck = Last
      Case "firstname"
         With listview1
            .left = Vbox_EditArea_Employee.left + txtEmployeeFirstname.Left + Vbox_EditArea_Employee.padding
            .width = txtEmployeeFirstname.Width
            .top = Vbox_EditArea_Employee.top + Hbox_Firstname.top + txtEmployeeFirstname.Height
            .raise
         End With
      Case "surname"
         With listview1
            .left = Vbox_EditArea_Employee.left + txtEmployeeSurname.Left + Vbox_EditArea_Employee.padding
            .width = txtEmployeeSurname.Width
            .top = Vbox_EditArea_Employee.top + Hbox_Surname.top + txtEmployeeSurname.Height
            .raise
         End With
      Case "occupation"
         With listview1
            .left = VBox_EditArea_Right.left + Last.parent.left + txtEmployeeOccupation.Left + Vbox_EditArea_Employee.padding
            .width = txtEmployeeOccupation.Width
            .top = Last.parent.parent.top + txtEmployeeOccupation.Height ' + VBox_EditArea_Right.padding
            .raise
         End With
         textboxForSpellCheck = Last
      Case "organisation"
         With listview1
            .left = VBox_EditArea_Organisation.left + Last.Parent.Left + VBox_EditArea_Organisation.padding
            .width = txtOrganisation.Width
            .top = VBox_EditArea_Organisation.top + HboxOrg_Name.top + txtOrganisation.Height
            .raise
         End With
   End Select
   
End

Public Sub EditArea_Change()
   
   If bexit Then Return
   If Trim(Last.text) = "" Then
      listview1.Visible = False
   End If
   Select Case Last.tag
      Case "suburb"
         If Trim(txtSuburb.text) = "" Then
            txtState.Text = ""
            txtPostcode.text = ""
            fk_town = 0
            ' listview1.Visible = False
            Return
         End If
      Case "organisation"
         ' If Trim(Last.text) = "" Then
         '    listview1.Visible = False
         ' End If
      Case "surname"
         
      Case "firstname"
         
      Case "birthdate"
         If txtEmployeeBirthdate.text <> "" Then
            age = -1
            Try age = DateDiff(Val((Trim(txtEmployeeBirthdate.text))), Now, gb.Year)
            If Not Error Then
               If age > 0 And age < 100 Then 'most unlikely to have centarian working in practice
                  txtEmployeeAge.text = age
               End If
            End If
         Else
            txtEmployeeAge.text = ""
         End If
      Case "occupation"
         If Trim(Last.text) = "" Then 'Or Trim(Last.text) = "" And Listview1.Visible = False Then
            fk_occupation = 0
            '  listview1.Visible = False 'could be showing if user backspaced
         End If
      Case "employee memo", "memo branch"
         If InStr(Last.text, "\n\n") Then
            Last.text = Replace(Last.text, "\n\n", "")
            txtEmployeeCategory.SetFocus()
         End If
      Case "category"
         If Len(txtEmployeeCategory.text) = 0 Then
            fk_category = 0
         End If
         
      Case "notes"
         btnAddContact.Foreground = Color.red
      Case "value"
         If InStr(Last.text, "@") Then
            cmbCommunicationType.index = const.CommModalityEmail
         Else If Left$(Trim(Last.text), 2) = "04" Then 'fix me put in the rest
            cmbCommunicationType.index = const.CommModalityMobile
         Else If InStr(Last.text, "www") Or InStr(Last.text, "http://") Then
            cmbCommunicationType.index = const.CommModalityWeb
         Else If InStr(Last.text, "1800") Then
            cmbCommunicationType.index = Const.CommModalityTollFree
         End If
         If Trim(Last.text) = "" Then
            tbBrowseWeb.Visible = False 'could have become visible, so always need to remove
         End If
         btnAddContact.Foreground = Color.red
   End Select
   
   modEditAreaHelpers.Notify_Data_Changed(Vbox_EditArea, tbSave, True)
   
End

Public Sub EditArea_LostFocus()
   
   Last.BackGround = Color.White
   timer1.stop
   Last.pos = 0
   ' Select Case Last.tag
   '    Case "occupation", "category"
   '       SpellCheck_TextBox(Last)
   ' End Select
   
End

Public Sub SpellCheck_TextBox(tb As TextBox)
   
   bexit = True
   teForSpelling.text = tb.text
   bexit = False
   
   SpellChecker.init(tb)
   SpellChecker.StartSpelling()
   
End

Public Sub EditArea_KeyRelease()
   
   iTimer_count = 0
   timer1.start
   Select Case Last.tag
      Case "surname"
         ' Surname_Duplicates_Selection("get")
      Case "firstname"
         '  Firstname_Selection("get")
      Case "organisation"
         '   Organisations_Show_Duplicates
      Case "occupation"
         '  Occupation_Selection("get")
         
      Case "salutation"
         
      Case "suburb"
         ' Suburb_Selection("get")
      Case "category"
         ' Category_Selection("get")
         
   End Select
   
End

Public Sub Category_Selection(action As String, Optional calling_control As String)
   
   Dim x As Integer
   
   Select Case action
      Case "get"
         
         If Trim$(txtEmployeeCategory.text) = "" Then Return
         categories = modContactsDBI.Categories_Get(Lower(Trim$(txtEmployeeCategory.text)))
         listview1.Clear
         
         If categories.count Then
            For Each category In categories
               listview1.Add(category!pk, category!category)
            Next
            If categories.count = 1 Then
               If Trim(Lower(txtEmployeeCategory.text)) = Lower(category!category) Then
                  Category_Selection("select")
                  Return
               End If
            End If
            listview1.Visible = True
            listview1.Raise
            listview1.tag = txtEmployeeCategory
            Return
            
         Else
            
            fk_category = 0
         End If
         listview1.Visible = False
      Case "accept"
         
         If calling_control = "textbox" Then
            
            If listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If Lower(listview1.Item.text) = Trim(Lower(txtEmployeeCategory.text)) Then
                     fk_category = listview1.Item.Key
                     listview1.Visible = False
                     Break
                  End If
               Next
            End If
         Else
            
            If listview1.Visible Then
               listview1.MoveCurrent   'set internal cursor to match marquee
               fk_category = listview1.Item.key
               txtEmployeeCategory.Text = listview1.Item.Text
            Else
               fk_category = 0
            End If
         End If
         listview1.Visible = False
         If Hbox_Occupation.Visible Then
            txtEmployeeoccupation.SetFocus
         Else
            txtCommunication.SetFocus()
         Endif
         
   End Select
Catch
   Return

End

' Public Sub cvwEmployees_KeyPress()
'
'    If key.code = key.return Then
'
'       cvwEmployees_DblClick()
'
'    End If
'
' End

' Public Sub cvwEmployees_DblClick()
'
' End

' Public Sub cvwEmployees_Select()
'
'    Dim key As Integer
'
'    cvwEmployees.MoveCurrent                                              'set internal cursor to the visible row
'    key = cvwEmployees.Current.key                                        'get the key to the collection
'
' End

' Public Sub rbSecurity_Click()
'
' End

Public Sub EditAreaChkBox_KeyPress()
   
   If key.code = key.Return Then
      Select Case Last.tag
         Case "head office"
            chkPostal.SetFocus
         Case "postal address"
            teBranchMemo.SetFocus
         Case "communication preferred"
            chkCommunicationConfidential.SetFocus
         Case "communication confidential"
            btnAddContact.SetFocus()
      End Select
   End If
   
End

Public Sub EditAreaChkBox_Click()
   
   If bExit Then Return
   Select Case Last.tag
      Case "Head office"
         If Last.value = True Then
            txtBranch.text = "HEAD OFFICE"
         Else
            txtBranch.text = ""
         Endif
   End Select
   modEditAreaHelpers.Notify_Data_Changed(Vbox_EditArea, tbSave, True)
   
End

Public Sub cmbEditArea_KeyPress()
   
   If key.code = key.Return Then
      Select Case Last.tag
         Case "title"
            txtEmployeeFirstname.SetFocus
         Case "sex"
            txtEmployeeSalutation.SetFocus
         Case "communication type"
            txtCommunication.SetFocus
      End Select
   End If
   
End

Public Sub cmbEditArea_Click()
   
   If bExit Then Return
   
   Select Case Last.tag
         
      Case "communication type"
         
         If Last.index = const.CommModalityWeb Then
            tbBrowseWeb.Visible = True
         Else
            tbBrowseWeb.Visible = False
         End If
   End Select
   modEditAreaHelpers.Notify_Data_Changed(Vbox_EditArea, tbSave, True)
   
End

Public Sub mnuOrganisations_Click()
   
   Dim rd As CRequestDefault
   
   Select Case Last.tag
      Case "add branch"
         branch_add()
      Case "add employee"
         employee_add()
      Case "delete employee"
         Employee_Delete()
      Case "delete employee from all branches"
         modUtil.NotImplemented("delete employee from all branches not implemented")
      Case "delete organisation"
         modUtil.NotImplemented("Deleting organisation not implemented")
      Case "add communication"
         '  cvOrganisations_DblClick
         ' Communication_New()
         '  txtCommunication.SetFocus
      Case "fonts"
         modUtil.Columnview_SetFont(gvwOrganisations, "FContactsOrganisations") 'fixme misnomer
      Case "show locations"
         Employee_Locations_Show()
      Case "show all branches"
         modUtil.NotImplemented("show all branches not implemented")
      Case "default provider"
         modUtil.NotImplemented("default provider not implemented")
         
   End Select
   
End

Public Sub btnCommunications_KeyPress()
   
   If key.code = key.return Then
      btnCommunications_Click()
   End If
   
End

Public Sub EditArea_Combo_KeyPress()
   
   Select Case Last.tag
      Case "title"
         txtEmployeeFirstname.SetFocus()
      Case "sex"
         txtEmployeeSalutation.SetFocus()
      Case "marital"
         txtEmployeeBirthdate.SetFocus()
   End Select
   
End

Public Sub tbContacts_KeyPress()
   
   If key.code = key.Return Then
      Select Case Last.tag
         Case "save"
            Save()
      End Select
   End If
   
End

Public Sub txtSearch_KeyRelease()
   
   iTimer_count = 0
   Timer1.start
   
End

Public Sub txtSearch_GotFocus()
   
   Check_Unsaved_Data
   Reset_Gui()
   
End

Public Sub cmbSearchType_Click()
   
   Check_Unsaved_Data
   Organisations_Refresh()
   
End

Public Sub Form_Leave()
   
   timer1.Stop
   timer1.Enabled = False
   
End

Public Sub Form_Enter()
   
   Timer1.enabled = True
   
End

'gvwFeeScheduleItems.rows[x].Height = -1

Public Sub gvwPersons_Select()
   
   Print "gvpersons selected"
   If bExit Or gvwPersons.Rows.count = 0 Then Return
   With gvwOrganisations
      .Background = Color.RGB(248, 248, 248)
      .Foreground = Color.LightGray
   End With
   bexit = True
   gvwOrganisations.UnSelectAll
   bexit = False
   Print "gvwPersons past the bexit flag"
   '  Check_Unsaved_Data
   If gvwPersons.Background = Color.RGB(248, 248, 248) Then
      With gvwPersons
         .Background = Color.White
         .Foreground = Color.Black
         .row = 0
      End With
   Endif
   Print "gvwPersons trying to display"
   Person_Display()
   Print "gvwPersons display successfuil"
   
End

Public Sub Persons_Get()
   
   If Trim(txtSearch.text) = "" Then Return
   Inc Application.Busy
   ' persons = modContactsDBI.Person_Get(Trim(txtSearch.text), const.contacttype_person, chkIncludeDeceased.value)
   persons = modContactsDBI.Person_Get(Trim(txtSearch.text), const.contacttype_person, False) 'fixme false = don't include deceased
   Persons_List_Fill()
   Dec Application.Busy
   
End

Public Sub Persons_List_Fill()
   
   Dim iKey As Integer
   
   Dim comm As Collection
   Dim sTemp As String
   Dim sStatusMessage As String
   Dim person As Collection
   Dim iLastperson_pk As Integer
   Dim x As Integer
   
   With gvwPersons
      .Clear                           'clear current list persons
      .Columns.count = 9
      .Rows.count = 0
   End With
   views_comms = New Collection
   If persons.count Then
      Try persons.Remove("sql_in_english") 'ian included this for FClinical patient search
      persons = modUtil.Copy_Collection_Keyed_Sequentially(persons)
      sStatusMessage = Str$(persons.count) & " records found for search criteria '" & Trim(txtSearch.text) & "'"
      SetStatus("persons", sStatusMessage, False, 0)
      For Each person In persons
         Inc gvwPersons.Rows.Count
         If iLastperson_pk <> person!fk_person Then
            gvwPersons[x, 0].text = person!surname & "  "
            gvwPersons[x, 1].text = person!firstname & "  "
            gvwPersons[x, 2].text = person!sex
            Try gvwPersons[x, 3].text = Format(person!birthdate, "dd/mm/yyyy") & "   "
            Try gvwPersons[x, 4].text = person!age_display
            iLastperson_pk = person!fk_person
         Else
            gvwPersons[x][0].text = ""
         End If
         gvwPersons[x, 6].text = ""
         gvwPersons[x, 7].text = Trim(person!street1 & " " & person!street2) & " " & person!town & " " & person!postcode
         gvwPersons[x, 8].text = ""
         Inc x
         
      Next
      gvwPersons.Enabled = True                       'enable list for clicking on
   End If
   lblMeasure.font = gvwPersons.Font
   modUtil.Gridview_Columns_Set_Size(gvwPersons, lblmeasure)
   
End

Public Sub Person_Display()
   '---------------------------------------------------
   'Display the detail of the person (or patient)
   'editing is implicit - ie automatically in edit mode
   '---------------------------------------------------
   
   Dim bFoundPerson As Boolean
   Dim x As Integer
   Dim row As Collection
   
   If gvwPersons.rows.Count = 0 Or gvwPersons.row = -1 Then Return
   '  Check_For_Unsaved_Data()
   '-------------------------------------------------
   'change the gui e.g button labels, for the persons
   '-------------------------------------------------
   With tbAdd
      .text = "Add person"
      .Tooltip = "Add New Person"
      .tag = "new person"
   End With
   'pk_view = persons[gvwpersons.row]!pk_view
   person = persons[gvwpersons.row]
   ' EditArea_Persons_Clear()   'clear the display fields and the patients picture
   
   bExit = True
   fk_person = person!fk_person
   'country_code = person!country_code
   ' country_code_birth = person!country_code_birth
   '  Try fk_ethnicity = person!fk_ethnicity
   ' Try fk_language = person!fk_language
   ' Try fk_address = person!fk_address
   '  Try fk_next_of_kin = person!fk_next_of_kin
   '  Try fk_family = person!fk_family
   Try fk_occupation = person!fk_occupation
   ' Try fk_payer = person!fk_payer
   '  Try fk_image = person!fk_image
   '  If iSection = cSection_Persons Then
   lblContactType.text = "Edit Details "
   ' Else
   '    lblContactType.text = "Edit Details: " & person!title & " " & person!firstname & " " & person!surname
   '    Try lblContactType.text &= " File ID:" & Str$(person!fk_patient)
   '    form_billing.Display_Patient_Data(person) 'ignore the crap mixed up code in this module - will all be re-written
   'End If
   ' lblPerson.text = ""
   txtSurname.text = person!surname
   txtFirstname.text = person!firstname
   lblActioning.text = "Edit " & modUtil.Ucase_Word_First_Letter(person!firstname & " " & person!surname)
   Try txtEmployeeBirthdate.text = Format(person!birthdate, "dd/mm/yyyy")
   If Not Error Then
      txtEmployeeAge.text = person!age_display
   End If
   Try txtDateEmployeeDeceased.text = Format(person!date_deceased, "dd/mm/yyyy")
   If person!deceased Then
      chkDeceased.value = True
   Else
      chkDeceased.Value = False
   Endif
   If person!fk_lu_active_status = 1 Then
      chkLeftPractice.value = False
   Else
      chkLeftPractice.value = True
   End If
   txtSalutation.text = person!salutation
   txtCountry.text = person!country_birth
   txtethnicity.text = person!ethnicity
   txtlanguage.text = person!language
   If person!language_problems = True Then
      chkLanguageProblems.value = True
   Else
      chkLanguageProblems.Value = False
   Endif
   txtOccupation.text = person!occupation
   txtMemo.text = person!person_memo
   Try cmbemployeeMarital.index = person!fk_marital
   cmbTitle.Index = person!fk_title
   Try cmbSex.index = person!fk_sex
   chkEmployeeRetired.value = person!retired
   Select Case person!fk_lu_aboriginality
      Case 0
         rbAboriginalityNone.value = True
      Case 1
         rbAboriginalityAboriginal.value = True
      Case 2
         rbAboriginalityTSI.value = True
   End Select
   cvwAddresses.Clear
   address = New Collection
   addresses = New Collection
   Views_addresses = New Collection
   For Each person In persons
      If Not IsNull(person!fk_address) Then
         ' Views_addresses.Add(row, person!fk_address)
         Views_addresses.Add(person, Views_addresses.count)
         If person!fk_person = fk_person Then
            bFoundPerson = True
            address = New Collection
            address!fk_address = person!fk_address
            address!street1 = person!street1
            address!street2 = person!street2
            address!postal_address = person!postal_address
            address!head_office = person!head_office
            address!country_code = person!country_code
            address!town = person!town
            address!fk_lu_address_type = person!fk_lu_address_type
            Try address!fk_town = person!fk_town
            address!state = person!state
            address!postcode = person!postcode
            addresses.Add(address, cvwAddresses.count)
         Else
            If bFoundPerson Then Break
         End If
      End If
   Next
   ' Addresses_FillList()
   ' Communications_Reload()  'Finally show the communications in the list
   ' Communication_New()
   ' BExit = True
   
   '  tbSave.Enabled = True
   '  VBox_EditArea.Enabled = True
   ' Address_New() 'default to new address in case they type here
   ' Vbox_EditArea.Enabled = True
   bExit = False
   HSplit_EditArea_Organisations.Visible = False
   HSplit_EditArea_Persons.visible = True
   
End
