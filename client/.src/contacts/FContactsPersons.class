' Gambas class file

' Copyright (C) 2008-2012 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' ------------------------------------------------------------------------
' PURPOSE      A module to keep details of patients/person
' FIXME        Re-write this module
'              It was the first gambas code I ever wrote and is really
'              really crap.........
'              Don't have any provisions for addresses for other countries
'              ------------------------------------------------------------
Private limit As Integer 
Private Views_addresses As Collection
Private pk_view As String 'compound key because view has multiple addreses, I could change this and call addreses as needed
Private pk_view_address As Integer
Private fk_country As Integer
Private bKeyValid As Boolean
Private seach_delay As Integer
Private PersonPicture As Collection
Private bNewOrgContact As Integer
Private bNewPersonContact As Integer
Private iLastKeycode As Integer
Private iSaveYesNo As Integer
Private $TownResult As Result
Private bRefreshing As Boolean
Private bNewAddress As Boolean
Private bAddingOrgAddress As Boolean
Private bAddFamilyMember As Boolean
Private bList2HasFocus As Boolean
Private Const cStatusMsg_Info As Integer = 0 
Private Const cStatusMsg_Warning As Integer = 1 
Private bExit As Boolean 'fix me remove to a single flag later

Private bNewCommunication As Boolean
Private iAddNew As Integer              'true if adding new patient
Private patients As Collection
Private cTowns As Collection
Private isubsection As Integer
Private Const cNameSearch As Integer = 0
Private Const cFamilySearch As Integer = 1
Private Age As Integer 
Private age_months As Integer
Private arraySex As New String[]  'was 6
Private arraymarital As New String[] 'was 7
Private arrayAddressType As New String[]
Private arrayConctactType As New String[]
Private bDisplayingData As Boolean
Private currentdisplayedpersonspk As Integer
Private lastdisplayedpersonspk As Integer
Private Const cSection_Patients As Integer = 0 'these section
Private Const cSection_Persons As Integer = 1
Private pk_last_comm_deleted As Integer         'the primary key of the last key deleted in contacts.data_communications
Private iSection As Integer
Private iaddress As Integer
Private fk_organisation As Integer
Private fk_address As Integer
Private fk_image As Integer
Private fk_person As Integer
Private fk_patient As Integer
Private fk_occupation As Integer
Private fk_town As Integer
Private country_code As String
Private country_code_birth As String 
Private fk_language As Integer
Private fk_ethnicity As Integer
Private fk_next_of_kin As Integer
Private fk_family As Integer
Private fk_payer As Integer
Private rows_in_view As Collection 
Private row_in_view As Collection 'current row we are on
Private iCommunication As Integer
Private person As Collection 
Private patient As Collection 
Private address As Collection
Private addresses As Collection
Private views_comms As Collection
Private Comms As Collection
Private Comm As Collection
Private The_Collection As Collection
Private Member As Collection
Private FImport As FImportPatientsWizard
Private bEmbedded As Boolean
Private form_merge As New FMergeContact
Private Embedded_In_Form As String
Private form_billing As FPatientBillingCards

Public Sub set_embedded(flag As Boolean)
   
   bEmbedded = flag
   
End

Public Sub Set_Embedded_In_Form(ef As String)
   
   Embedded_In_Form = ef ' "patients" or "persons"
   
End

Public Sub Set_Section(section As Integer)
   
   isection = section  '0 = patients = cSectionPatients 1 =cSectionStaff
   
End 

Public Sub Form_Open()
   
   Init()
   
End

Public Sub Form_Close()
   
   Settings_Save()
   
End

Public Sub Settings_Save()
   
   If Embedded_In_Form = "persons" Then   
      Settings["Contacts Persons/HSplit_EditArea"] = HSplit_EditArea.Layout
      Settings["Contacts Persons/VSplit_DataEntry"] = VSplit_DataEntry.Layout
   Else
      Settings["Contacts Patients/HSplit_EditArea"] = HSplit_EditArea.Layout
      Settings["Contacts Patients/VSplit_DataEntry"] = VSplit_DataEntry.Layout
      
   End If   
   
End

Private Sub Settings_Load()
   
   If Embedded_In_Form = "persons" Then 
      Try HSplit_EditArea.Layout = Settings["Contacts Persons/HSplit_EditArea"[1, 1, 0]]
      Try VSplit_DataEntry.Layout = Settings["Contacts Persons/VSplit_DataEntry", [2, 1]]
     
   Else
      Try HSplit_EditArea.Layout = Settings["Contacts Patients/HSplit_EditArea", [1, 1, 1]]
      Try VSplit_DataEntry.Layout = Settings["Contacts Patients/VSplit_DataEntry", [2, 1]]
   Endif
   
End

Public Sub Init()
   
   lblMeasure.text = " Occupation "
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Left, lblMeasure)
   Try Settings_Load()
   Combos_Fill()
   bExit = True
   If iSection = cSection_Persons Then
      tbAddPerson.text = "New Person"
      tbAddFamilyMember.Visible = False
      chkLeftPractice.Visible = False
       VBox_Billing.Visible = False    
   Else
      VBox_Billing.Visible = True  
      chkLeftPractice.Visible = True   
      With form_billing = New FPatientBillingCards(VBox_Billing)
         .Init(Vbox_EditArea)
      End With
   End If
   bExit = False
   Person_New()
   cvwPersons.columns.Count = 9
   cvwContacts.Columns.count = 3
   cvwAddresses.Columns.count = 3
   lblMeasure.text = " Deceased "
   chkDeceased.width = txtOccupation.Width
   
End

Public Sub Combos_Fill()
   
   cmbSex.Add("Male", 0)
   cmbSex.Add("Female", 1)
   cmbSex.Add("Unknown", 2)
   cmbSex.Add("Transexual", 3)
   cmbSex.Add("Hermaphrodite", 4)
   arraysex.Resize(5)
   arraysex[0] = "M"
   arraysex[1] = "F"
   arraysex[2] = "U"
   arraysex[3] = "T"
   arraysex[4] = "H"
   
   cmbTitle.Add("Mr", 0)
   cmbTitle.Add("Mrs", 1)
   cmbTitle.Add("Master", 2)
   cmbTitle.Add("Miss", 3)
   cmbTitle.Add("Dr", 4)
   cmbTitle.Add("Prof", 5)
   cmbTitle.Add("Ms")
   
   cmbMarital.Add("Unknown", 0)
   cmbMarital.Add("Single", 1)
   cmbMarital.Add("Married", 2)
   cmbMarital.Add("Divorced", 3)
   cmbMarital.Add("Defacto", 4)
   cmbMarital.Add("Widow", 5)
   cmbMarital.Add("Widower", 6)
   
   arraymarital.Resize(7)
   arraymarital[0] = "U"
   arraymarital[1] = "S"
   arraymarital[2] = "M"
   arraymarital[3] = "D"
   arraymarital[4] = "F" 
   arraymarital[5] = "W" 
   arraymarital[6] = "WD" 
   
   cmbAddressType.Add("Home", 0)
   cmbAddressType.Add("Work", 1)
   cmbAddressType.Add("PO Box", 2)
   cmbAddressType.Add("Parents", 3)
   cmbAddressType.Add("Nursing Home", 4)
   cmbAddressType.Add("Refuge", 5)
   
   cmbCommunicationType.Add("At Home", 0)
   cmbCommunicationType.Add("At Work", 1)
   cmbCommunicationType.Add("Fax", 2)
   cmbCommunicationType.Add("Email", 3)
   cmbCommunicationType.Add("Mobile", 4)
   cmbCommunicationType.Add("VOIP", 5)
   cmbCommunicationType.Add("Web URL", 6)
   cmbCommunicationType.Add("Phone", 7)
   cmbCommunicationType.Add("Toll Free ", 8)
   
End

Public Sub DataInputArea_Visible(bflag As Boolean)
   
   VBox_EditArea.Visible = bflag 
   
End

Public Sub cvwPersons_Select()
   
   If bExit Then Return 
   Person_Display()
   
End

Public Sub Persons_Find()
   
   Inc Application.Busy
   Timer1.stop()
   Try limit = Val(txtlimit.text)
   If Error Then limit = 100
   If Isection = cSection_Patients Then
      rows_in_view = modContactsDBI.patients_get_firstname_surname(Trim(txtSearch.text), chkIncludeDeceased.value, limit)
   Else
      rows_in_view = modContactsDBI.Person_Get(Trim(txtSearch.text), const.contacttype_person, chkIncludeDeceased.value)
   End If
   
   Persons_List_Fill()
   Dec Application.Busy
   
End

Public Sub Persons_List_Fill()
   
   Dim iKey As Integer
   
   Dim comm As Collection
   Dim sTemp As String
   Dim sStatusMessage As String
   Dim person As Collection 
   Dim iLastperson_pk As Integer
   
   cvwPersons.Clear                           'clear current list persons
   views_comms = New Collection 
   If rows_in_view.count Then       
      Try rows_in_view.Remove("sql_in_english") 'ian included this for FClinical patient search     
      sStatusMessage = Str$(rows_in_view.count) & " records found for search criteria '" & Trim(txtSearch.text) & "'" 
      SetStatus("persons", sStatusMessage, False, 0)
      For Each row_in_view In rows_in_view
         
         cvwPersons.Add(row_in_view!pk_view, 0)
         
         If iLastperson_pk <> row_in_view!fk_person Then
            cvwPersons[row_in_view!pk_view][0] = row_in_view!surname
            cvwPersons[row_in_view!pk_view][1] = row_in_view!firstname 
            cvwPersons[row_in_view!pk_view][2] = row_in_view!sex       
            Try cvwPersons[row_in_view!pk_view][3] = Format(row_in_view!birthdate, "dd/mm/yyyy")
            Try cvwPersons[row_in_view!pk_view][4] = row_in_view!age_display
            iLastperson_pk = row_in_view!fk_person
         Else
            cvwPersons[row_in_view!pk_view][0] = ""
         End If
         cvwPersons[row_in_view!pk_view][6] = ""
         cvwPersons[row_in_view!pk_view][7] = Trim(row_in_view!street1 & " " & row_in_view!street2) & " " & row_in_view!town & " " & row_in_view!postcode
         cvwPersons[row_in_view!pk_view][8] = ""
      Next
      cvwPersons.Enabled = True                       'enable list for clicking on 
   End If
   
End 

Public Sub Person_Picture_Clear()
   
   With PictureBox2
      .Picture = Picture.Load("icons/misc/no_photo.png")
      .tag = ""
      .Refresh()
   End With
   Wait        'otherwise, visually, picture won't disappear
   
End

Public Sub Person_Display()
   '---------------------------------------------------
   'Display the detail of the person (or patient)
   'editing is implicit - ie automatically in edit mode
   '---------------------------------------------------   
   
   Dim bFoundPerson As Boolean
   Dim x As Integer
   
   If cvwPersons.Count = 0 Then Return  
   Check_For_Unsaved_Data()
   cvwPersons.MoveCurrent()
   pk_view = cvwPersons.Current.Key
   row_in_view = rows_in_view[cvwPersons.Current.Key]
   EditArea_Clear()   'clear the display fields and the patients picture
   bExit = True  
   fk_person = row_in_view!fk_person
   Try fk_patient = row_in_view!fk_patient 'missing if a person
   country_code = row_in_view!country_code
   country_code_birth = row_in_view!country_code_birth
   Try fk_ethnicity = row_in_view!fk_ethnicity
   Try fk_language = row_in_view!fk_language
   Try fk_address = row_in_view!fk_address
   Try fk_next_of_kin = row_in_view!fk_next_of_kin
   Try fk_family = row_in_view!fk_family
   Try fk_occupation = row_in_view!fk_occupation
   Try fk_payer = row_in_view!fk_payer
   Try fk_image = row_in_view!fk_image
   
   If iSection = cSection_Persons Then
      lblContactType.text = "Edit Details "  
   Else
      lblContactType.text = "Edit Details: " & row_in_view!title & " " & row_in_view!firstname & " " & row_in_view!surname 
      Try lblContactType.text &= " File ID:" & Str$(row_in_view!fk_patient)
      form_billing.Display_Patient_Data(row_in_view) 'ignore the crap mixed up code in this module - will all be re-written
   End If
   lblPerson.text = ""
   txtSurname.text = row_in_view!surname
   txtFirstname.text = row_in_view!firstname
   Try txtBirthdate.text = Format(row_in_view!birthdate, "dd/mm/yyyy")
   If Not Error Then
      txtAge.text = row_in_view!age_display
   End If
   Try txtDateDeceased.text = Format(row_in_view!date_deceased, "dd/mm/yyyy")
   If row_in_view!deceased Then
      chkDeceased.value = True
   Else
      chkDeceased.Value = False  
   Endif
   If row_in_view!fk_lu_active_status = 1 Then
      chkLeftPractice.value = False 
   Else
      chkLeftPractice.value = True 
   End If   
   txtSalutation.text = row_in_view!salutation
   txtCountry.text = row_in_view!country_birth
   txtethnicity.text = row_in_view!ethnicity
   txtlanguage.text = row_in_view!language
   If row_in_view!language_problems = True Then
      chkLanguageProblems.value = True
   Else
      chkLanguageProblems.Value = False  
   Endif
   txtOccupation.text = row_in_view!occupation
   txtMemo.text = row_in_view!memo
   Try cmbMarital.index = row_in_view!fk_marital
   cmbTitle.Index = row_in_view!fk_title
   Try cmbSex.index = row_in_view!fk_sex 
   chkRetired.value = row_in_view!retired   
   Select Case row_in_view!fk_lu_aboriginality
      Case 0
         rbAboriginalityNone.value = True
      Case 1
         rbAboriginalityAboriginal.value = True
      Case 2
         rbAboriginalityTSI.value = True
   End Select
   cvwAddresses.Clear  
   address = New Collection
   addresses = New Collection
   Views_addresses = New Collection 
   For Each row_in_view In rows_in_view
      If Not IsNull(row_in_view!fk_address) Then
         Views_addresses.Add(row_in_view, row_in_view!fk_address)
         If row_in_view!fk_person = fk_person Then
            bFoundPerson = True  
            address = New Collection 
            address!fk_address = row_in_view!fk_address
            address!street1 = row_in_view!street1
            address!street2 = row_in_view!street2
            address!postal_address = row_in_view!postal_address
            address!head_office = row_in_view!head_office
            address!country_code = row_in_view!country_code
            address!town = row_in_view!town
            address!fk_lu_address_type = row_in_view!fk_lu_address_type
            
            Try address!fk_town = row_in_view!fk_town
            address!state = row_in_view!state
            address!postcode = row_in_view!postcode
            addresses.Add(address, cvwAddresses.count)
         '   cvwAddresses.Add(cvwAddresses.count, Trim(address!street1 & " " & address!street2) & " " & UCase(address!town) & " " & address!postcode)
         Else
            If bFoundPerson Then Break
         End If
      End If
   Next
   Addresses_FillList()
   Communications_Reload()  'Finally show the communications in the list
   Communication_New()
   BExit = True   
   If fk_image Then
      Patient_Picture_Display()
   End If 
   tbSave.Enabled = True
   VBox_EditArea.Enabled = True  
   Address_New() 'default to new address in case they type here
   Vbox_EditArea.Enabled = True 
   bExit = False
   
End

Public Sub Patient_Picture_Display()
   
   Dim tempFile As String
   Dim tempPicture As Variant
   
   tempFile = Temp() & ".png"
   tempPicture = rows_in_view[pk_view]!image
   
   If tempPicture.data Then 
      File.Save(tempFile, tempPicture.data)
      PictureBox2.Picture = Picture.Load(Tempfile)
      PersonPicture = New Collection
      PersonPicture!fk_image = rows_in_view[pk_view]!fk_image
      PersonPicture!picture = PictureBox2.Picture
      PersonPicture!path = Tempfile
   End If
   
End

Public Sub EditArea_Clear()
   
   bExit = True  
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Left)
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Right)
   
   tbnAddContact.text = "Add to list"
   tbnAddAddress.text = "Add to list"
   cvwAddresses.Clear
   cvwContacts.Clear   
   rbAboriginalityNone.value = True 
   
   pk_last_comm_deleted = 0
   listview1.Visible = False  
   listview2.Visible = False  
   PersonPicture = New Collection 
   Person_Picture_Clear()
   bExit = False
   EditArea_Notify_DataChange(False)
   
End

Public Function check_field_valid(ctrl As Textbox) As Boolean
   
   If ctrl.text = "" Then
      ctrl.SetFocus()
      Return False
   End If
   Return True
   
End

Public Function Valid_Data() As Boolean
   
   Dim sMsg As String 
   
   If Not check_field_valid(txtsurname) Then Return False               'always have a surname
   If Not check_field_valid(txtFirstname) Then Return False             'always have a firstname   
   If iSection = cSection_Patients Then                                
      If Not IsDate(txtBirthdate.text) Then                             'patient must have a birthdate
         txtBirthdate.SetFocus()
         Return                                    
      End If   
      If form_billing.txtMedicareCardExpiryDate.text <> "" Then              'only validate if user has entered something
         If Not IsDate(form_billing.txtMedicareCardExpiryDate.text) Then
            form_billing.txtMedicareCardExpiryDate.SetFocus()
            Return 
         Endif
      Endif
      If form_billing.txtConcessionExpiryDate.text <> "" Then                 'only validate if user has entered something
         If Not IsDate(form_billing.txtConcessionExpiryDate.text) Then
            form_billing.txtConcessionExpiryDate.SetFocus()
            Return
         Endif
      Endif
   End If  
   
   If iSection = cSection_Persons Then                                  'insist on occupation for a person
      If Not check_field_valid(txtOccupation) Then
         Return False   
      End If
      If Trim(txtBirthdate.text) <> "" Then                             'not mandatory but if present must be valid
         If Not IsDate(Trim(txtBirthdate.text)) Then 
            txtBirthdate.SetFocus()
            Return False                                                 
         Endif
      End If
   End If
   If Trim(txtDateDeceased.text) <> "" Then
      If Not IsDate(Trim(txtDateDeceased.Text)) Then   
         txtDateDeceased.SetFocus()
         Return False
      Endif
   Endif
   
   Return True  
   
End


Public Sub Save()
   'FIXME mixture of really old and newer cRow code in this routine   
   Dim Returned_collection As Collection
   Dim x As Integer 
   Dim person As CRow
   Dim patient As CRow
   Dim address As CRow
   Dim address_link As CRow
   Dim Coll As Collection
   Dim communication As CRow
   Dim link_person_comm As New CRow
   Dim Image As CRow
   
   
   If Vbox_EditArea.Padding = 0 Then Return     'no padding = no data
   If Not Valid_Data() Then Return 
   
   If fk_town <> 0 Then 
      Address_Accept()                          'if user has left in the address editing area > to the list   End If
   End If     
  If isection = cSection_Patients Then
      patient = New CRow
      If fk_patient Then
         patient.put_unchanged(fk_patient, "fk_patient")
      End If
      If rbAboriginalityNone.value = True Then
         patient!fk_lu_aboriginality = Const.aboriginality_none
      End If
      If rbAboriginalityAboriginal.value = True Then
         patient!fk_lu_aboriginality = Const.aboriginality_aboriginal
      End If
      If rbAboriginalityTSI.value = True Then
         patient!fk_lu_aboriginality = Const.aboriginality_Torres_Strait_Islander
      End If
      If chkLeftPractice.value = True Then
         patient!fk_lu_active_status = const.PatientStatus_Inactive
      Else
         patient!fk_lu_active_status = const.PatientStatus_Active
      Endif
      patient!medicare_number = form_billing.Medicare_Number()
      patient!medicare_ref_number = form_billing.Medicare_Reference_number()
      patient!medicare_expiry_date = form_billing.Medicare_Card_Expiry_Date()
      patient!veteran_number = form_billing.Veteran_Card_Number()
      If patient!veteran_number <> "" Then 
         patient!fk_lu_veteran_card_type = form_billing.Veteran_Card_Type()
         patient!veteran_specific_condition = form_billing.veteran_specific_condition()
      Else
         patient!fk_lu_veteran_card_type = Null
         patient!veteran_specific_condition = Null
      End If  
      patient!concession_card_number = form_billing.Concession_Card_Number()
      If patient!concession_card_number <> "" Then
         patient!concession_card_expiry_date = form_billing.Concession_Card_Expiry_Date()
         patient!fk_lu_centrelink_card_type = form_billing.Centrelink_Card_Type()
      Else
         patient!concession_card_expiry_date = Null
         patient!fk_lu_centrelink_card_type = Null
      Endif
      patient!fk_lu_billing_type = form_billing.Billing_type()
      patient!fk_lu_private_health_fund = form_billing.Private_Health_Fund()
      If patient!fk_lu_private_health_fund <> const.PrivateHealthFund_None Then
         patient!private_insurance = True
      Else
         patient!private_insurance = False  
      Endif
      patient!fk_doctor = form_billing.Preferred_Doctor()  
   End If   
   '--------------------------------------------------------------------------------------
   'Now save the person before we save the patient in case need the fk_person for cPatient
   '--------------------------------------------------------------------------------------
   person = New CRow
   If fk_person Then
      person.put_unchanged(fk_person, "fk_person")
   End If
   person!firstname = Trim(txtFirstname.text)
   person!surname = Trim(txtSurname.text)
   person!salutation = Trim(txtSalutation.text)
   Try person!birthdate = Format(Val(txtBirthdate.text), "dd/mm/yyyy")
   person!fk_title = cmbTitle.index
   person!fk_sex = cmbSex.index
   person!fk_marital = cmbMarital.index
   If chkRetired.value Then
      person!retired = True
   Else
      person!retired = False 
   End If  
   If chkDeceased.value = True Then
      person!deceased = True
   Else
      person!deceased = False   
   Endif
   Try person!date_deceased = Format(Val(txtDateDeceased.text), "dd/mm/yyyy")
   person!memo = Trim(txtMemo.text)
   person!country_code = country_code_birth
   person!fk_ethnicity = fk_ethnicity
   If fk_occupation <> 0 Then                            'fk_occupation exists = an existing occupation
      person!fk_occupation = fk_occupation
   Else
      If Trim(txtOccupation.text) <> "" Then             'have an occupation but no key - is a new occupation
         person!fk_occupation = modContactsDBI.Occupation_Save(Lower(Trim(txtOccupation.text)))
      End If  
   End If            
   person!fk_language = fk_language
   If chkLanguageProblems.value = True Then
      person!language_problems = True
   Else
      person!language_problems = False
   End If
   modDBConnect.BeginTrans()
   If PersonPicture!path Then
      If fk_image Then                                            'patient has existing photo
          If PersonPicture!path = "icons/misc/no_photo.png" Then  'if is a 'no photo' then must have deleted the real image  
            person!fk_image = Null                                'set this back to null in backend
            Image = New CRow
            Image.put_unchanged(fk_image, "fk_image")             'and mark existing image in blobs    
            Image!deleted = True                                  'to deleted (still recoverable via fk_consult              
            Image.Save("blobs.images", "fk_image")
        Else
              person!fk_image = modContactsDBI.Image_Save(PersonPicture)
        End If 
      Else                                                        ' no fk_image?
           person!fk_image = modContactsDBI.Image_Save(PersonPicture) 'save their new photo
      End If   
   End If  
   person.Save("contacts.data_persons", "fk_person")
   For Each Coll In Comms
      communication = New CRow
      If Coll!pk Then
         communication.put_unchanged(Coll!pk, "pk")
      Endif
      communication!fk_type = Coll!fk_type
      communication!value = Coll!value
      communication!note = Coll!note
      communication!preferred_method = Coll!preferred_method
      communication!confidential = Coll!confidential
      communication.Save("contacts.data_communications", "pk")
      If IsNull(Coll!pk) Then 
         link_person_comm = New CRow 
         link_person_comm!fk_person = person!fk_person
         link_person_comm!fk_comm = communication!pk
         link_person_comm.Save("contacts.links_persons_comms", "fk_link_person_comm") 
      End If   
   Next  
   For Each coll In Addresses
      address = New CRow
      If coll!fk_address Then
         address.put_unchanged(coll!fk_address, "fk_address")
      Endif
      address!fk_town = coll!fk_town
      address!street1 = coll!street1 
      address!street2 = coll!street2
      address!fk_lu_address_type = coll!fk_lu_address_type 
      address!country_code = coll!country_code
      address!postal_address = coll!postal_address
      address!preferred_address = coll!postal_address
      address.Save("contacts.data_addresses", "fk_address")
      If IsNull(coll!fk_address) Then 
       address_link = New CRow   
       address_link!fk_person = person!fk_person
       address_link!fk_address = address!fk_address
       address_link.Save("contacts.links_persons_addresses", "fk_link_person_address")
      End If   
       Print address
       
   Next
   If Isection = cSection_Patients Then
      patient!fk_person = person!fk_person
      patient.Save("clerical.data_patients", "fk_patient")
   End If
   modDBConnect.CommitTrans()
   
   EditArea_Notify_DataChange(False)
   
   If Isection = cSection_Patients Then
      If patient!fk_patient And person.Exist("fk_image") Then
         If Not IsNull(person!fk_image) Then    
            If person!fk_image > 0 And If FClinical.IsSamePatient(fk_patient) Then
               FClinical.Patient_Picture_Refresh(personpicture!path)
               FClinical.Patient_Demographics_Refresh()
            End If
         End If
      End If
      rows_in_view = modContactsDBI.Patient_Get_Using_PK(patient!fk_patient) ' must be Collection so the rest of the code works
      rows_in_view = [rows_in_view!pk_view: rows_in_view]
   Else
      rows_in_view = modContactsDBI.Person_Get_Using_PK(person!fk_person)
   End If   
   Persons_List_Fill()
   If cvwPersons.Count > 0 Then
      cvwPersons.MoveFirst
      cvwPersons.Item.Selected = True
      cvwPersons_Select()
   End If
   
End

Public Sub Reset_Gui()
   
   Check_For_Unsaved_Data()
   bExit = True
   lblContactType.text = ""
   EditArea_Clear() 
   
   tbSave.Picture = Picture.Load("icons/12/filesave.png")
   txtSearch.text = ""
   bDisplayingData = True
   bExit = False       
   isubsection = cNameSearch
   VBox_EditArea.Enabled = False  
   cvwPersons.Clear()
   txtSearch.SetFocus
   
End Sub 

Public Sub mnuAddresses_Click()
   
   Select Case Last.tag
      Case "edit"
         Address_Edit()
      Case "new"
         Address_New()
      Case "delete"
         Address_Delete()
      Case "unlink"
         
   End Select 
   
End

Public Sub mnuPersons_Click()
   
   Dim x As Integer
   Dim P As Collection 
   Dim C As New Collection 'empty collections for comms
   Dim selected_count As Integer
   Dim sMsg As String
   
   Select Case Last.tag
      Case "add address"
         Address_New
      Case "add contact"
      Case "add person"
         bAddFamilyMember = False
         Person_New()
      Case "add family member"
         bAddFamilyMember = True
         Person_New()
      Case "show family members"
         
         isubsection = cFamilySearch
         
      Case "link as next of kin"
      Case "select as next of kin"    
      Case "mark deceased"
         '----------------------------------------------------------------
         'Run through the selected persons, if more than one being deleted
         'request confirmation first, then delete the lot
         'see code in FDiabetesResearch which is better FIXME
         '----------------------------------------------------------------
         cvwPersons.MoveFirst
         sMsg = "You have selected a number of persons to mark deceased.\n\nThey will no longer appear in "
         "the patients list or the clinical record, but will not actually be removed from the database."
         For x = 1 To cvwPersons.Count
            If cvwPersons.Item.Selected = True Then
               Inc selected_count
               If selected_count > 1 Then
                  
                  Message.Title = "Patients - Mark Deceased"
                  If Message.Warning(sMsg, "Confirm - Mark Deceased", "Cancel") = 2 Then Return
                  Break
               Endif
            Endif
            cvwPersons.MoveNext
         Next
         cvwPersons.MoveFirst
         For x = 1 To cvwPersons.Count
            If cvwPersons.Item.Selected = True Then
               P = New Collection 
               P!fk_person = rows_in_view[cvwPersons.Item.key]!fk_person
               P!deceased = True
               modContactsDBI.Person_Save(rows_in_view, cvwPersons.Item.key, P, C, C)
               modDBConnect.CommitTrans()
            Endif
            cvwPersons.MoveNext
         Next
         Persons_Find() 'refresh the list
      Case "delete address"
         Address_Delete
      Case "delete person"
      Case "merge"
         Person_Merge()
   End Select
   
End

Public Sub Person_Merge()
   '------------------------------
   'Merges one person with another 
   '------------------------------ 
   
   Message.Info("This section is under construction")
   Return 
   cvwPersons.MoveCurrent
   
   FMergeContact.Init(rows_in_view[cvwPersons.Current.Key])
   
   FMergeContact.ShowModal()
   
End

Sub Address_Delete()
   
   Return 
   modDBConnect.BeginTrans()
   modContactsDBI.person_address_delete(fk_address)
   modDBConnect.CommitTrans()
   rows_in_view = modContactsDBI.Patient_Get_Using_Pk(fk_patient)
   Persons_List_Fill()
   cvwPersons.MoveFirst
   cvwPersons.Item.Selected = True
   cvwPersons_Select()
   
End

Public Sub Person_New()
   
   Dim keepaddress As Collection 
   Dim keepcomm As Collection
   Dim iFk_Family As Integer ' the family table pk
   Dim sSurname As String
   
   txtSearch.text = ""       
   cvwPersons.Clear()
   bExit = True
   
   If bAddFamilyMember Then 
      
   Else 
      
      EditArea_Clear()
      PersonPicture = New Collection 
      addresses = New Collection 
      Views_addresses = New Collection
      rows_in_view = Null
      Comms = New Collection
      pk_view_address = -1
      fk_person = 0
      fk_address = 0
      fk_town = 0
      fk_patient = 0
      fk_image = 0
      fk_ethnicity = 0
      fk_country = 0 '?used
      country_code_birth = ""
      
      iCommunication = 0
      pk_view = 0
      
      Address_New()       'res-sets variables for new address
   End If
   Communication_New()
   If iSection = cSection_Patients Then
      rbAboriginalityNone.Value = True
      lblContactType.text = "New Patient"
   Else
      lblContactType.text = "New Person"
   End If  
   bExit = False  
   Vbox_EditArea.Enabled = True
   txtSurname.SetFocus() 
   
End

Public Sub Address_New()
   
   bExit = True
   bNewAddress = True
   txtStreet1.text = ""
   txtStreet2.Text = ""
   txtSuburb.text = ""
   txtPostcode.text = ""
   '  txtstate.text = ""
   country_code = "AU" 'fixme don't default to this
   address = New Collection 
   chkPostal.value = False
   chkAddressPreferred.Value = False  
   If iSection = cSection_Patients Then   
      cmbAddressType.Index = Const.AddressType_Home
   Else
      cmbAddressType.Index = const.AddressType_Work
   End If
   
   iAddress = cvwaddresses.count
   fk_town = 0
   bExit = False
   
   tbnAddAddress.text = "Add to list"
   tbnAddAddress.Foreground = Color.Black
   
End

Public Function Display_Mode(searchtext As String) As String
   
End

Public Sub cvwAddresses_Click()
   
End

Public Function Address_Valid() As Boolean
   
   If Trim(txtStreet1.text) = "" Then
      If fk_town = 0 Then
         txtSuburb.text = ""
      End If
      txtStreet1.SetFocus()
      Return False
   End If
   If fk_town = 0 Then
      txtSuburb.text = ""
      txtSuburb.SetFocus()
      Return False
   End If
   Return True
   
End

Public Sub Address_Accept()
   
   Dim sMsg As String           'used to show message on status bar as to what we are doing
   Dim i As Integer             'used as a loop counter in this routine
   Dim iCurrentRow As Integer   'keep to allow moving back to this row after update
   
   If Not Address_Valid() Then Return
   
   If bNewaddress Then
      
      address = New Collection  
      cvwAddresses.Add(iAddress, cmbAddressType.text & ": " & Trim(txtStreet1.text & " " & txtStreet2.text) & " " & txtSuburb.text)                     
      address!fk_lu_address_type = cmbAddressType.Index
      address!type = cmbAddressType.Text           'kept for display purposes
      address!street1 = Trim(txtStreet1.text)
      address!street2 = Trim(txtStreet2.text)
      address!fk_town = fk_town
      address!country_code = "AU" 'fixme don't default to this
      address!town = Trim(txtsuburb.text)
      address!state = Trim(txtState.text)
      address!postcode = Trim(txtPostcode.text)
      If chkPostal.value = True Then
         address!postal_address = True
      End If   
      If chkAddressPreferred.value = True Then
         address!preferred_address = True
      End If
      addresses.Add(address, iAddress)
   Else 
      
      addresses[iAddress]!fk_lu_address_type = cmbAddressType.Index
      addresses[iAddress]!type = cmbAddressType.text
      addresses[iAddress]!street1 = Trim(txtStreet1.text)
      addresses[iAddress]!street2 = Trim(txtStreet2.text)
      addresses[iAddress]!fk_town = fk_town
      addresses[iAddress]!country_code = "AU" 'fixme
      addresses[iAddress]!town = Trim(txtsuburb.text)
      addresses[iAddress]!state = Trim(txtState.text)
      addresses[iAddress]!postcode = Trim(txtPostcode.text)
      If chkPostal.value = True Then
         addresses[iAddress]!postal_address = True
      End If   
      If chkAddressPreferred.value = True Then
         addresses[iAddress]!preferred_address = True
      End If
      
      Addresses_FillList()
   End If
   
   Address_New()
   txtStreet1.SetFocus()
   
End

Public Sub Addresses_FillList()
   
   Dim address As Collection
   
   If IsNull(Addresses) Then Return 
   cvwAddresses.Clear()
   If Addresses.count Then            
      For Each address In Addresses
         cvwAddresses.Add(cvwAddresses.count, address!type & ": " & Trim(address!street1 & " " & address!street2) & " " & address!town)                     
      Next
   End If 
   
End

Public Sub Address_Edit()
   
   bExit = True
   bNewAddress = False  
   cvwAddresses.MoveCurrent
   iAddress = cvwAddresses.Item.Key
   address = addresses[iAddress]
   Try fk_address = address!fk_address 'FIXME make sure this is ok to do
   txtStreet1.text = addresses[iAddress]!street1
   txtStreet2.text = addresses[iAddress]!street2
   txtsuburb.text = addresses[iAddress]!town
   Try fk_town = addresses[iAddress]!fk_town
   txtState.text = addresses[iAddress]!state
   txtPostcode.text = addresses[iAddress]!postcode
   Try cmbAddressType.index = addresses[iAddress]!fk_lu_address_type
   If addresses[iAddress]!preferred_address = True Then
      chkAddressPreferred.Value = True
   Else
      chkAddressPreferred.Value = False
   End If
   If addresses[iAddress]!postal_address = True Then
      chkPostal.value = True
   Else
      chkPostal.value = False
   End If
   tbnAddAddress.text = "Save modifications to list"
   cvwAddresses.UnSelectAll()
   txtStreet1.SetFocus()
   bExit = False
   
End

Public Sub cvwAddresses_Menu()
   
   If cvwAddresses.Count Then 
      mnuAddresses.Popup
   End If
   
End

Public Sub Form_KeyPress()
   
   Select Case key.Code
      Case key.F12
         Save()
      Case key.Esc
         Reset_Gui()
         
   End Select 
   
End

Public Sub cvwPersons_Menu()
   
   If cvwPersons.count Then mnuPersons.Popup()
   
End

Public Sub mnuContacts_Click()
   
   Select Case Last.tag
      Case "add"
         Communication_New()
         txtCommValue.SetFocus()
      Case "edit"
         Communication_Edit()
      Case "delete"
         Communication_Delete()
      Case "undelete"
         Communication_UnDelete()
   End Select
   
End

Public Sub cvwContacts_Menu()
   
   If cvwContacts.Count = 0 Then                  'no contacts in list
      mnuContacts_add.Enabled = True         'allow add new or undo if appropriate
      If pk_last_comm_deleted <> 0 Then mnuContacts_UnDelete.Enabled = True
      mnuContacts_Edit.Enabled = False       'no items to edit
      mnuContacts_Delete.Enabled = False     'no items to delete
   Else
      mnuContacts_Edit.Enabled = True 
      mnuContacts_Delete.Enabled = True 
   End If   
   mnuContacts.Popup
   
End

Sub SetStatus(section As String, statustext As String, bOff As Boolean, message_severity As String)
   
End

Public Sub tbAddFamilyMember_Click()
   
End

Public Sub ListView2_DblClick()
   
   Select Case Last.Tag.tag
      Case "country"
         Country_Origin_Selection("accept", "list")
      Case "language"
         Language_Selection("accept", "list")
      Case "ethnicity"
         Ethnicity_Selection("accept", "list")
   End Select
   listView2.visible = False
   
End

Public Sub ListView1_DblClick()
   
   Select Case Last.Tag.tag
      Case "occupation"
         occupation_selection("accept", "list")
      Case "firstname" 
         Firstname_Selection("accept", "list")
      Case "surname"
         Surname_Duplicates_Selection("accept", "list")
      Case "suburb"
         Suburb_Selection("accept", "list")
   End Select
   listView1.visible = False
   
End

Public Sub ListView1_KeyPress()
   
   If Key.Code = Key.RETURN Then 
      ListView1_DblClick()
   End If
   
End

Public Sub ListView2_KeyPress()
   
   If Key.Code = Key.RETURN Then 
      ListView2_DblClick()
   End If
   
End

Public Sub Timer1_Timer()
   
   Persons_Find()
   
End

Public Function EditArea_TextBox_ExcludeKeys(keycode As Integer) As Boolean
   
   Select Case Last.Tag
      Case "birthdate"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case "limit"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersOnly, keycode) 
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TextBox_Change()
   
   If bexit Then Return 
   Select Case Last.tag
      Case "language"
         If Trim(Last.text) = "" Then 
            fk_language = 0
            listview2.Visible = False  
         End If
      Case "country"
         If Trim(Last.text) = "" Then 
            fk_country = 0
            country_code = ""
            listview2.Visible = False  
         End If
      Case "ethnicity"
         If Trim(Last.text) = "" Then 
            fk_ethnicity = 0
            listview2.Visible = False  
         End If
      Case "street1", "street2"
         tbnAddAddress.Foreground = Color.Red        
      Case "suburb"
         
         If Trim(txtSuburb.text) = "" Then  
            txtState.Text = ""
            txtPostcode.text = ""
            fk_town = 0
            listview1.Visible = False  
            tbnAddAddress.Foreground = Color.Red
         End If
      Case "memo"
         If InStr(Last.text, "\n\n") Then 
            txtMemo.text = Replace(txtMemo.text, "\n", "")
            cmbCommunicationType.SetFocus()
         End If
      Case "comm value"
         If InStr(Last.text, "@") Then 
            cmbCommunicationType.index = const.CommModalityEmail
         Else If Left$(Trim(Last.text), 2) = "04" Then 'fix me put in the rest
            cmbCommunicationType.index = const.CommModalityMobile
         Else If InStr(Last.text, "www") Or InStr(Last.text, "http://") Then 
            cmbCommunicationType.index = const.CommModalityWeb
         Else If InStr(Last.text, "1800") Then
            cmbCommunicationType.index = Const.CommModalityTollFree
         End If
         tbnAddContact.Foreground = Color.red
      Case "comm notes"
         tbnAddContact.Foreground = Color.red
      Case "birthdate"
         If txtBirthdate.text <> "" Then
            If IsDate(txtBirthdate.text) Then 
               Try Age = DateDiff(Val(Trim(txtBirthdate.text)), Now, gb.Year)
               If Age > 0 And Age < 5 Then    'fixme arbitrary cutoff
                  Try txtAge.text = Age & "y" & Str(DateDiff(Val(Trim(txtBirthdate.text)), Now, gb.Month) Mod 12) & "m"
               Else
                  Try txtAge.text = DateDiff(Val((Trim(txtBirthdate.text))), Now, gb.Year)
               End If   
            End If   
         Else
            txtAge.text = ""
         End If
   End Select
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_TextBox_KeyRelease()
   
   If bexit Then Return 
   Select Case Last.tag
      Case "surname"
         Surname_Duplicates_Selection("get")
      Case "firstname" 
         Firstname_Selection("get")
      Case "occupation"
         Occupation_Selection("get")
      Case "suburb"
         Suburb_Selection("get")
      Case "country"
         Country_Origin_Selection("get")
      Case "ethnicity"
         Ethnicity_Selection("get")
      Case "language"
         Language_Selection("get") 
   End Select  
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   If bExit Then Return
   
   If Not EditArea_TextBox_ExcludeKeys(key.code) Then
      Stop Event
      Return
   End If
   Select Case key.Code
      Case key.Return, key.Tab
         Select Case Last.tag
            Case "surname"
               cmbTitle.Setfocus()
            Case "firstname"
               Firstname_Selection("accept", "textbox")
            Case "salutation"
               cmbMarital.SetFocus()
            Case "birthdate"
               txtOccupation.SetFocus()
            Case "occupation"
               Occupation_Selection("accept", "textbox")
            Case "street1"
               
               If Trim(Last.text) = "" Then
                  cmbCommunicationType.SetFocus()
               Else
                  txtSuburb.SetFocus()
               End If
            Case "street2"
               txtSuburb.SetFocus
            Case "suburb"
               
               tbnAddAddress.SetFocus()
            Case "country"
               Country_Origin_Selection("accept", "textbox")
            Case "ethnicity"
               Ethnicity_Selection("accept", "textbox")
            Case "language"
               Language_Selection("accept", "textbox")
            Case "memo"
               cmbCommunicationType.SetFocus()
            Case "comm value"
               txtCommNotes.SetFocus()
            Case "comm notes"
               tbnAddContact.SetFocus()
         End Select
         
      Case Key.Down
         Select Case Last.tag
            Case "occupation", "firstname", "suburb", "surname"
               If listview1.Visible Then
                  listview1.SetFocus
                  listview1.MoveFirst
                  listview1.Item.Selected = True
               End If
            Case "country", "ethnicity", "language"
               If listview2.Visible Then
                  listview2.SetFocus
                  listview2.MoveFirst
                  listview2.Item.Selected = True
               End If
               
         End Select
   End Select
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   With listview1 
      .top = Last.Parent.Parent.top + Last.Parent.height
      .left = Last.Parent.left + VBox_EditArea_Left.Padding
      .width = 200 'just a guess
      .Clear
      .Visible = False   
   End With
   With listview2 
      .top = Last.Parent.Parent.top + Last.Parent.height
      .left = Last.Parent.left + VBox_EditArea_Right.Padding
      .width = 200 'just a guess
      .Clear()
      .Visible = False   
   End With
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.White
   Select Case Last.tag
      Case "birthdate", "date deceased"
         If Not IsDate(Last.text) Then
            Last.text = ""
         End If
   End Select
   
   Try Last.pos = 0
   
End

Public Sub Patient_Picture_Import()
   
   Dim filepath As String 
   Dim sMsg As String 
   
   Dialog.Title = "Select Image File"
   Dialog.Filter = ["*.png", "Image Files", "*", "All files"]
   
   If Dialog.OpenFile() Then Return
   Try PictureBox2.picture = Picture.Load(Dialog.Path) 
   If Error Then
      sMsg = "An error occurred the file couldn't be loaded.\n\n"
      sMsg &= "Filename:" & Dialog.Path & "\n\n"
      sMsg &= "Perhaps it was not a valid picture file?"
      Message.Info(sMsg)
      Person_Picture_Clear()
      Return
   End If 
   Try PictureBox2.tag = Dialog.Path
   PersonPicture = New Collection
   PersonPicture!path = Dialog.Path
   PersonPicture!picture = Picturebox2.picture
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   
   If Bexit Then Return 
   If flag Then  
      Vbox_EditArea.Padding = 1  
      tbSave.Foreground = Color.Red  
   Else
      Vbox_EditArea.Padding = 0  
      tbSave.Foreground = Color.Black 
   End If
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "accept address"
         Address_Accept()
      Case "new address"
         Address_New()
         txtStreet1.SetFocus()
      Case "accept communication"
         Communication_Accept()
      Case "new communication"
         Communication_New() 
         txtCommValue.SetFocus()
      Case "load photo"
         Patient_Picture_Import()
      Case "acquire photo"
         
      Case "remove photo"   
         Person_Picture_Clear()
         
         If fk_image Then
            PersonPicture!path = "icons/misc/no_photo.png"
            PersonPicture!picture = Picturebox2.picture 
            EditArea_Notify_DataChange(True)
         End If  
      Case "export"
      Case "reset"
         Reset_Gui()
      Case "save"
         Save()
      Case "new person"
         Person_New()
      Case "new family member"
         
   End Select
   
End

Public Sub Communication_Edit()
   
   If cvwContacts.Count = 0 Then Return
   bExit = True 'stop triggering a popup list on the textboxes
   bNewCommunication = False 'must be existing or not saved if clicking on it
   
   txtcommValue.text = Comms[iCommunication]!value
   txtcommnotes.text = Comms[iCommunication]!note
   cmbCommunicationType.index = Comms[iCommunication]!fk_type
   chkCommunicationConfidential.value = Comms[iCommunication]!confidential
   chkCommunicationpreferred.Value = Comms[iCommunication]!preferred_method
   tbnAddContact.text = "Save modifications to list"
   bExit = False
   
End

Public Sub Communication_UnDelete()
   
   modContactsDBI.Communication_UnDelete(pk_last_comm_deleted)
   modDBConnect.CommitTrans()
   mnuContacts_UnDelete.Enabled = False 
   pk_last_comm_deleted = 0
   Communications_Reload() 
   
End

Public Sub Communication_Delete()
   '----------------------------------------------------------------------------------
   'Problem with this (poor design i guess) fixme
   'if record is not new (I mean the person) and has say a phone number saved
   'then user adds another number (not yet saved), then tries to delete it, it becomes
   'complicated
   '----------------------------------------------------------------------------------
   
   Message.Title = "Delete contact"
   If Message.Question("Confirm delete\n\n" & comm!type & ": " & comm!value, "Yes", "No") = 1 Then 
      If Not IsNull(comm!pk) Then         'may not yet have been saved
         comm!deleted = True  
         Try modDBConnect.update("contacts.data_communications", views_comms[comm!pk], comm, "pk")
         
         If Not Error Then
            modDBConnect.CommitTrans()
            mnuContacts_UnDelete.Enabled = True  
            pk_last_comm_deleted = comm!pk
         End If   
      End If   
      Communications_Reload()
   End If
   
End

Public Sub Communications_Reload()
   
   views_comms = modContactsDBI.person_comms_get(fk_person)
   comms = New Collection 
   For Each Member In views_comms
      comm = New Collection 
      comm!type = Member!type
      comm!value = Member!value
      comm!note = Member!note
      comm!pk = Member!pk
      comm!preferred_method = Member!preferred_method
      comm!confidential = Member!confidential
      comm!fk_type = Member!fk_type
      comm!type = Member!type
      comms.Add(comm, comms.count)
   Next 
   Communications_FillList()
   
End

Public Sub Communication_New()
   
   bExit = True
   iCommunication = cvwContacts.Count 'if 3, then this is 0,1,2 so 3 will be new
   txtCommValue.text = ""
   txtCommNotes.text = ""
   If iSection = cSection_Patients Then   
      cmbCommunicationType.index = Const.CommModalityHome
   Else
      cmbCommunicationType.index = Const.CommModalityPhone
   End If
   chkCommunicationConfidential.Value = False
   chkCommunicationPreferred.Value = False
   bNewCommunication = True
   txtCommValue.enabled = True
   txtCommNotes.enabled = True
   chkCommunicationConfidential.Enabled = True
   chkCommunicationPreferred.Enabled = True
   comm = New Collection 
   tbnAddContact.text = "Add to list"
   tbnAddContact.Foreground = Color.black
   
   bExit = False
   
End

Public Sub Communication_Accept()
   
   Dim sMsg As String           'used to show message on status bar as to what we are doing
   Dim i As Integer             'used as a loop counter in this routine
   Dim iCurrentRow As Integer   'keep to allow moving back to this row after update
   
   If Trim(txtCommValue.Text) = "" Then 
      
      txtCommValue.SetFocus
      sMsg = "Hint: Contacts must consist of at least one value eg phone number, email address etc"
      SetStatus("Contacts", sMsg, False, const.cStatusMsg_Info)
      Return
   End If
   
   If bNewCommunication = True Then
      
      comm = New Collection       
      cvwContacts.Add(iCommunication, 0)   
      cvwContacts[iCommunication][0] = cmbCommunicationType.text
      cvwContacts[iCommunication][1] = txtCommValue.text
      cvwContacts[iCommunication][2] = txtCommNotes.Text
      Comm!fk_type = cmbCommunicationType.Index
      Comm!type = cmbCommunicationType.text 'need this for display
      Comm!value = txtCommValue.Text
      Comm!note = txtCommNotes.Text
      If chkCommunicationPreferred.value Then
         Comm!preferred_method = True
      Else
         Comm!preferred_method = False
      End If  
      If chkCommunicationConfidential.Value Then
         Comm!confidential = True
      Else
         Comm!confidential = False
      End If  
      Comms.Add(Comm, iCommunication)
   Else 
      
      Comms[iCommunication]!value = txtCommValue.Text
      Comms[iCommunication]!note = txtCommNotes.Text
      
      If chkcommunicationpreferred.value Then
         Comms[iCommunication]!preferred_method = True
      Else
         Comms[iCommunication]!preferred_method = False
      End If  
      If chkCommunicationConfidential.Value Then
         Comms[iCommunication]!confidential = True
      Else
         Comms[iCommunication]!confidential = False
      End If  
      Comms[iCommunication]!fk_type = cmbCommunicationType.index
      Comms[iCommunication]!type = cmbCommunicationType.text
      
      Communications_FillList()
   End If
   
   Communication_New()
   txtCommValue.SetFocus
   
End

Public Sub Communications_FillList()
   
   Dim comm As Collection
   Dim x As Integer
   
   If IsNull(Comms) Then Return 
   cvwContacts.Clear()
   If comms.count Then            
      For Each Comm In comms
         x = cvwContacts.Count
         cvwContacts.Add(x, 0)
         cvwContacts[x][0] = comm!type
         cvwContacts[x][1] = comm!value 
         cvwContacts[x][2] = comm!note
      Next
   End If 
   
End

Public Sub EditArea_CheckBox_KeyPress()
   
   Select Case key.Code
      Case key.return, key.tab
         Select Case Last.tag
            Case "postal address"
               
            Case "preferred address"
               
            Case "retired"
               txtStreet1.SetFocus()         
            Case "comm confidential"
               tbnAddContact.SetFocus()
            Case "comm preferred"
               chkCommunicationConfidential.SetFocus()
         End Select
   End Select 
   
End

Public Sub EditArea_CheckBox_Click()
   
   If bExit Then Return
   
   Select Case Last.tag
      Case "communication confidential"
         tbnAddContact.Foreground = Color.red
      Case "communication preferred"
         tbnAddContact.Foreground = Color.red
   End Select
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_Combo_KeyPress()
   
   If bExit Then Return 
   Select Case key.Code
      Case key.return, key.tab
         Select Case Last.tag  
            Case "sex"
               txtSalutation.SetFocus()
            Case "title"
               txtFirstname.SetFocus()
            Case "marital"
               txtBirthdate.SetFocus()
            Case "address type"
            Case "comm type"
               txtCommValue.SetFocus
               
         End Select
   End Select
   
End

Public Sub EditArea_Combo_Click()
   
   If bExit Then Return 
   EditArea_Notify_DataChange(True)
   
End

Public Sub Firstname_Selection(action As String, Optional calling_control As String)
   
   Dim x As Integer
   
   Select Case action
      Case "get"
         If Trim(txtFirstname.text) = "" Then Return 
         The_Collection = modContactsDBI.Firstname_Get(Trim(txtFirstname.text))
         listview1.Clear
         
         If The_Collection.count Then 
            For Each Member In The_Collection
               listview1.Add(Member!pk, Member!firstname)
            Next 
            If The_Collection.count = 1 Then 
               If Trim(Lower(txtFirstname.text)) = Lower(Member!firstname) Then
                  Firstname_Selection("select", "list")
                  Return
               End If
            End If
            listview1.Visible = True
            listview1.Raise
            listview1.tag = txtFirstname
            Return 
            
         Else
            
         End If
         listview1.Visible = False  
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            
            If listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If Lower(listview1.Item.text) = Trim(Lower(txtFirstname.text)) Then
                     listview1.Visible = False  
                     Break
                  End If
               Next
            End If
            
         Else
            
            If listview1.Visible Then
               listview1.MoveCurrent   'set internal cursor to match marquee
               txtFirstname.Text = listview1.Item.Text
            End If
         End If
         listview1.Visible = False  
         cmbsex.SetFocus
         bExit = False  
   End Select
   
End

Public Sub surname_Selection(action As String, Optional calling_control As String)
   
End

Public Sub Occupation_Selection(action As String, Optional calling_control As String)
   
   Dim x As Integer
   
   Select Case action
      Case "get"
         
         If Len(Trim(txtOccupation.text)) = 0 Then
            fk_occupation = 0
            Return
         End If
         The_Collection = modContactsDBI.Occupation_Get(Trim(txtOccupation.text))
         listview1.Clear
         
         If The_Collection.count Then 
            For Each Member In The_Collection
               listview1.Add(Member!pk, Member!occupation)
            Next 
            If The_Collection.count = 1 Then 
               If Trim(Lower(txtOccupation.text)) = Lower(Member!occupation) Then
                  Occupation_Selection("select", "list")
                  Return
               End If
            End If
            listview1.Visible = True
            listview1.Raise
            listview1.tag = txtOccupation
         Else
            listview1.Visible = False  
         End If
         
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            fk_occupation = 0 
            If listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If Lower(listview1.Item.text) = Trim(Lower(txtOccupation.text)) Then
                     fk_occupation = listview1.Item.Key
                     Break
                  End If
                  listview1.MoveNext()
               Next
            End If
            listview1.Visible = False     
         Else
            
            If listview1.Visible Then
               listview1.MoveCurrent   'set internal cursor to match marquee
               fk_occupation = listview1.Item.key
               txtOccupation.Text = listview1.Item.Text
            End If
         End If
         If Isection = cSection_Patients Then
            txtStreet1.SetFocus
         End If  
         
         bExit = False  
   End Select
   
End

Public Sub Suburb_Selection(action As String, Optional calling_control As String) 
   
   Dim iMatched As Boolean
   Dim x As Integer
   
   Select Case action
      Case "get"
         
         If Trim$(txtSuburb.text) = "" Then Return
         listview1.Visible = False  
         The_Collection = modContactsDBI.Get_Town(Lower(Trim$(txtSuburb.text)))
         listview1.Clear
         If The_Collection.count Then 
            For Each Member In The_Collection
               listview1.Add(Member!pk, Member!town & " " & Member!state & " " & Member!postcode)
            Next 
            If The_Collection.count = 1 Then 
               Suburb_Selection("accept")
            Else 
               listview1.Visible = True
               listview1.Raise
               listview1.tag = txtSuburb
            End If
         Else
            listview1.Visible = False  
         End If
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            
            If listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If InStr(Lower(listview1.Item.text), Trim(Lower(txtsuburb.text))) Then
                     
                     iMatched = True 
                     Break
                  End If
               Next
               If Not iMatched Then
                  listview1.Visible = False
                  txtSuburb.SetFocus()
                  fk_town = 0
                  Return 'no match found for suburb user typed in 
               End If 
            End If
         Else
            
            If listview1.Visible Then
               
               listview1.MoveCurrent()             'match internal cursor to marquee
            End If
         End If
         
         txtSuburb.text = The_Collection[listview1.Item.key]!town
         txtState.text = The_Collection[listview1.Item.key]!state 
         txtPostcode.text = The_Collection[listview1.Item.key]!postcode
         fk_town = The_Collection[listview1.Item.key]!pk
         tbnAddAddress.SetFocus()
         listview1.Visible = False  
         bExit = False  
   End Select
   
End

Public Sub Country_Origin_Selection(action As String, Optional calling_control As String) 
   '--------------------------------------------------------------
   'Fixme - probably need to look at oversea's countries addresses
   'This subroutine is for country_birth
   '--------------------------------------------------------------  
   
   Dim iMatched As Boolean
   Dim x As Integer
   
   Select Case action
      Case "get"
         
         listview2.Visible = False   
         If Trim$(txtCountry.text) = "" Then Return 
         The_Collection = modContactsDBI.country_get(Lower(Trim$(txtCountry.text)))
         Listview2.Clear
         If The_Collection.count Then 
            For Each Member In The_Collection
               Listview2.Add(Member!pk, Member!country)
            Next 
            If The_Collection.count = 1 Then 
               Country_Origin_Selection("accept")
            Else 
               Listview2.Visible = True
               Listview2.Raise
               Listview2.tag = txtCountry
            End If
         Else
            Listview2.Visible = False  
         End If
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            
            If Listview2.Visible Then
               Listview2.MoveFirst
               For x = 0 To listview2.count - 1
                  If InStr(Lower(listview2.Item.text), Trim(Lower(txtCountry.text))) Then
                     iMatched = True 
                     Break
                  End If
               Next
               If Not iMatched Then
                  Listview2.Visible = False
                  txtCountry.SetFocus()
                  bExit = False
                  Return 'no match found for country user typed in 
               End If 
            Else
               txtEthnicity.SetFocus()
               bexit = False
               Return 
            End If
         Else
            
            If Listview2.Visible Then
               Listview2.MoveCurrent()             'match internal cursor to marquee
            End If
         End If
         
         txtCountry.text = The_Collection[listview2.Item.key]!country
         country_code_birth = The_Collection[listview2.Item.key]!country_code
         txtEthnicity.SetFocus
         Listview2.Visible = False  
         bExit = False  
   End Select
   
End

Public Sub Ethnicity_Selection(action As String, Optional calling_control As String) 
   
   Dim iMatched As Boolean
   Dim x As Integer
   
   Select Case action
      Case "get"
         
         listview2.Visible = False  
         If Trim$(txtEthnicity.text) = "" Then Return 
         
         The_Collection = modContactsDBI.Ethnicity_Get(Lower(Trim$(txtEthnicity.text)))
         Listview2.Clear
         If The_Collection.count Then 
            For Each Member In The_Collection
               Listview2.Add(Member!pk, Member!ethnicity)
            Next 
            If The_Collection.count = 1 Then 
               Ethnicity_Selection("accept")
            Else 
               Listview2.Visible = True
               Listview2.Raise
               Listview2.tag = txtEthnicity
            End If
         Else
            Listview2.Visible = False  
         End If
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            
            If Listview2.Visible Then
               Listview2.MoveFirst
               For x = 0 To listview2.count - 1
                  If InStr(Lower(listview2.Item.text), Trim(Lower(txtEthnicity.text))) Then
                     iMatched = True 
                     Break
                  End If
               Next
               If Not iMatched Then
                  Listview2.Visible = False
                  bexit = False
                  txtEthnicity.SetFocus()
                  Return 'no match found for suburb user typed in 
               End If 
            Else
               bexit = False
               txtLanguage.SetFocus()
               Return 
            End If
         Else
            
            If Listview2.Visible Then
               Listview2.MoveCurrent()             'match internal cursor to marquee
            End If
         End If
         
         txtEthnicity.text = The_Collection[listview2.Item.key]!ethnicity
         fk_ethnicity = The_Collection[listview2.Item.key]!pk
         txtLanguage.SetFocus
         Listview2.Visible = False  
         bExit = False  
   End Select
   
End

Public Sub Language_Selection(action As String, Optional calling_control As String) 
   
   Dim iMatched As Boolean
   Dim x As Integer
   
   Select Case action
      Case "get"
         
         listview2.Visible = False  
         If Trim$(txtLanguage.text) = "" Then Return 
         The_Collection = modContactsDBI.Language_Get(Lower(Trim$(txtLanguage.text)))
         Listview2.Clear
         If The_Collection.count Then 
            For Each Member In The_Collection
               Listview2.Add(Member!pk, Member!language)
            Next 
            
            Listview2.Visible = True
            Listview2.Raise
            Listview2.tag = txtLanguage
            
         Else
            Listview2.Visible = False  
         End If
      Case "accept"
         bExit = True
         If calling_control = "textbox" Then
            
            If Listview2.Visible Then
               Listview2.MoveFirst
               For x = 0 To listview2.count - 1
                  
                  If Lower(listview2.Item.text) = Trim(Lower(txtLanguage.text)) Then
                     iMatched = True 
                     Break
                  End If
               Next
               If Not iMatched Then
                  Listview2.Visible = False
                  bExit = False
                  fk_language = 0
                  txtLanguage.SetFocus()
                  Return 
               End If 
            Else
               bExit = False
               Return  
            End If
         Else
            
            If Listview2.Visible Then
               Listview2.MoveCurrent()             'match internal cursor to marquee
            End If
         End If
         
         txtLanguage.text = The_Collection[listview2.Item.key]!language
         fk_language = The_Collection[listview2.Item.key]!pk
         txtMemo.SetFocus()
         Listview2.Visible = False  
         bExit = False  
   End Select
   
End

Public Sub EditArea_Buttons_KeyPress()
   
   If key.code = key.return Then
      EditArea_Buttons_Click
   End If   
   
End

Public Sub EditArea_RadioButtons_Click()
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_RadioButtons_KeyPress()
   
   Select Case key.Code
      Case key.return
         Select Case Last.tag
            Case "aboriginality none"
               rbAboriginalityAboriginal.SetFocus()
            Case "aboriginal"
               rbAboriginalityTSI.SetFocus()
            Case "torres strait islander"
               txtCountry.SetFocus()
               
         End Select
   End Select
   
End

Public Sub Check_For_Unsaved_Data()
   
   Return 
   If Vbox_EditArea.Padding = 1 Then
      Select Case Message.Warning("Do you want to save the changes before proceeding?", "Yes", "Discard changes")
         Case 1
            Save()
         Case 2
            EditArea_Notify_DataChange(False)
      End Select
   End If  
   
End

Public Sub txtSearch_GotFocus()
   
   pk_view = 0 
   txtSearch.Clear()
   EditArea_Clear()
   bExit = True   
   cvwPersons.UnselectAll
   VBox_EditArea.Enabled = False   
   '  Vbox1.Enabled = False   
   bExit = False  
   lblContactType.text = ""
   Check_For_Unsaved_Data() 'not implemented
   
End

Public Sub txtSearch_KeyRelease()
   
   If Trim(Last.text) = "" Then Return 
   Timer1.start()
   
End

Public Sub cvwContacts_Select()
   
   cvwContacts.MoveCurrent()
   iCommunication = cvwContacts.Item.Key
   Comm = comms[iCommunication]
   
End

Public Sub Surname_Duplicates_Selection(action As String, Optional calling_control As String) 
   
   Dim sMsg As String
   
   Select Case action
      Case "get"
         
         Listview1.Clear
         Listview1.Visible = False  
         If Trim(txtSurname.text) = "" Then 
            Listview1.Visible = False  
            Return 
         End If
         If Isection = cSection_Patients Then
            The_Collection = modContactsDBI.patients_get_firstname_surname(Trim(txtSurname.text), False, 20)
         Else
            The_Collection = modContactsDBI.Person_Get(Trim(txtSurname.text), const.contacttype_person)
         End If
         The_Collection.Remove("sql_in_english")
         
         If The_Collection.count Then 
            For Each Member In The_Collection
               Listview1.Add(Member!pk_view, Member!firstname & " " & Member!surname & " (" & Member!occupation & ")")
            Next 
            Listview1.Visible = True
            Listview1.Raise
            Listview1.tag = txtSurname
         End If
      Case "accept"
         
         listview1.MoveCurrent()
         If Not IsNull(The_Collection[listview1.Item.key]!fk_patient) Then
            sMsg = The_Collection[listview1.Item.key]!surname & " " & The_Collection[listview1.Item.key]!firstname & "\n"
            sMsg &= "Birthdate:"
            If Not IsNull(The_Collection[listview1.Item.key]!birthdate) Then
               smsg &= Format(The_Collection[listview1.Item.key]!birthdate, "dd/mm/yyyy") & "\n"
            Endif
            sMsg &= Trim(The_Collection[listview1.Item.key]!street1 & " " & The_Collection[listview1.Item.key]!Street2) & " " 
            sMsg &= The_Collection[listview1.Item.key]!town & " " & The_Collection[listview1.Item.key]!postcode & "\n\n"
            sMsg &= "already exists in the patient's database.\n\nAre you sure you want to continue"
            Message.title = "Possible duplicate patient"
            If Message.question(sMsg, "Yes - add duplicate", "Cancel") = 2 Then Return 
         Endif
         Message.Warning("The person already exists in the database, they will now be added to the patient's database")
         bExit = True
         listview1.MoveCurrent()             'match internal cursor to marquee
         txtSurname.text = The_Collection[listview1.Item.key]!surname
         txtFirstname.text = The_Collection[listview1.Item.key]!firstname
         txtOccupation.text = The_Collection[listview1.Item.key]!occupation
         fk_occupation = The_Collection[listview1.Item.key]!fk_occupation
         fk_person = The_Collection[listview1.Item.key]!fk_person
         Try cmbSex.indxex = The_Collection[listview1.Item.key]!fk_sex
         Try cmbTitle = The_Collection[listview1.Item.key]!fk_title
         listview1.Visible = False  
         bExit = False   
   End Select
   
End

Public Sub txtLimit_KeyRelease()
   
   Timer1.start()
   
End
