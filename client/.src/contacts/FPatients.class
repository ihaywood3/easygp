' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' ------------------------------------------------------------------------
' PURPOSE      A module to keep details of patients/person
' FIXME        Re-write this module
'              It was the first gambas code I ever wrote and is really
'              really crap.........
'              Don't have any provisions for addresses for other countries
'---------------------------------------------------------------------------
Private sSearchCriteria As String 
Private pic_inactive As Picture = Picture["icons/12/red_dot.png"]
Private ReferenceHboxForTopOfListBox As Hbox               'used if split moves to reposition columnview
Private limit As Integer
Private Views_addresses As Collection
Private iTimer_Count As Integer
Private sSearchMode As String
Private bKeyValid As Boolean
Private PersonPicture As Collection
Private P As Picture
Private bNewAddress As Boolean
Private bAddFamilyMember As Boolean
Private Const cStatusMsg_Info As Integer = 0
Private Const cStatusMsg_Warning As Integer = 1
Private bExit As Boolean 'fix me remove to a single flag later
Private occupations As Collection 
Private bNewCommunication As Boolean
Private isubsection As Integer
Private Const cNameSearch As Integer = 0
Private Const cFamilySearch As Integer = 1
Private Age As Integer
Private arraySex As New String[]  'was 6
Private arraymarital As New String[] 'was 7
Private bDisplayingData As Boolean
Private Const cSection_Patients As Integer = 0 'these section
Private Const cSection_Persons As Integer = 1
Private pk_last_comm_deleted As Variant         'the primary key of the last key deleted in contacts.data_communications
Private iSection As Integer
Private iaddress As Integer
Private pk_view As Variant 'compound key because view has multiple addreses, I could change this and call addreses as needed
Private cvwPatients_key As Variant
Private pk_view_address As Variant
Private fk_country As Variant
Private fk_address As Variant
Private fk_image As Variant
Private fk_person As Variant
Private fk_patient As Variant
Private fk_occupation As Variant
Private fk_town As Variant
Private country_code As String
Private country_code_birth As String
Private fk_language As Variant
Private fk_ethnicity As Variant
Private fk_next_of_kin As Variant
Private fk_family As Variant
Private fk_payer As Variant
Private rows_in_view As Collection
Private row_in_view As Collection 'current row we are on
Private iCommunication As Integer
Private address As Collection
Private addresses As Collection
Private views_comms As Collection
Private Comms As Collection
Private Comm As Collection
Private The_Collection As Collection
Private Member As Collection
Private form_merge As New FMergeContact
Private Embedded_In_Form As String
Private form_billing As FPatientBillingCards
Private Suburb As Collection
Private suburbs As Collection
Private form_patient_photo As FPatientPhoto
Private currentconsult As CConsult

Public Sub _new()

   With form_patient_photo = New FPatientPhoto(VBox_Photo)
      .lblID.Visible = False  
   End With

End   

Public Sub Form_Open()
   
   Init()
   
End

Public Sub Settings_Save()
   
   Settings["FContactsPatients/HSplit_EditArea.Layout"] = HSplit_EditArea.Layout
   Settings["FContactsPatients/VSplit_DataEntry.Layout"] = VSplit_DataEntry.Layout
   
End

Private Sub Settings_Load()
   
   HSplit_EditArea.Layout = Settings["FContactsPersons_Patient/HSplit_EditArea.Layout", [1, 1, 1]]
   VSplit_DataEntry.Layout = Settings["FContactsPersons_Patient/VSplit_DataEntry.Layout", [1, 1]]
   cvwPatients.Font = Font[Settings["FContactsPatients/cvwPatients.font", "DejaVu Sans,9"]]
   
End

Public Sub Init()
   '---------------------------------------------------------------------------------------------------------
   'In scanning the embedded FPatients's does not need the billing details part
   'as its only used e.g if specialist gets referral, staff add a new patient at time the referral scanned in
   'for billing stuff please use standing FPatient in FClerical or via billing screen FRecordVisit
   '---------------------------------------------------------------------------------------------------------
   
   lblMeasure.text = " Occupation "
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Left, lblMeasure)
   modEditAreaHelpers.Religions_Menu_Refresh(mnuReligions) 
   ReferenceHboxForTopOfListBox = New HBox(VBox_EditArea_Left)
   Religions_Menu_Refresh
   Try Settings_Load()
   Combos_Fill()
   bExit = True
   If Me.Parent.Name = "VBox_Patients_On_Scanning_Tab" Then  '
      VBox_Billing.Visible = False  
   Else
      VBox_Billing.Visible = True
   Endif
   chkLeftPractice.Visible = True
   With form_billing = New FPatientBillingCards(VBox_Billing)
     ' .bExit = True   
     ' .TabStrip1.index = 2
      .VBox_Contacts.Delete
      .Vbox_Patient_Contacts.Delete
      .TabStrip1.count = 3
      .Init(Vbox_EditArea)
    '  .bExit = False  
   End With
   bExit = False
   cvwPatients.columns.Count = 8
   cvwContacts.Columns.count = 4
   cvwAddresses.Columns.count = 3
   lblMeasure.text = " Deceased "
   chkDeceased.width = txtOccupation.Width
   txtSearch.SetFocus()
   modDBConnect.Register_Listener("ihi_update", Me)
   cvwPatients_key = Null
   
End

Public Sub Form_Close()
   
   modDBConnect.Unregister_Listener("ihi_update", Me) 
   
End

Public Sub Notify(its_us As Boolean, param As String)
   
   Dim i As Variant
   
   If its_us Then Return
   Try i = CInt(param)
   If i = fk_patient Then
      form_billing.Reload_IHI(fk_patient)
   Endif
   
End

Public Sub Combos_Fill()
   'fixme put me in eg editarea helpers
   
   cmbSex.Add("Male", 0)
   cmbSex.Add("Female", 1)
   cmbSex.Add("Unknown", 2)
   cmbSex.Add("Transgender", 3)
   cmbSex.Add("Intersex", 4)
   arraysex.Resize(5)
   arraysex[0] = "M"
   arraysex[1] = "F"
   arraysex[2] = "U"
   arraysex[3] = "T"
   arraysex[4] = "I"
   
   cmbTitle.Add("Mr", 0)
   cmbTitle.Add("Mrs", 1)
   cmbTitle.Add("Master", 2)
   cmbTitle.Add("Miss", 3)
   cmbTitle.Add("Dr", 4)
   cmbTitle.Add("Prof", 5)
   cmbTitle.Add("Ms")
   
   cmbMarital.Add("Unknown", 0)
   cmbMarital.Add("Single", 1)
   cmbMarital.Add("Married", 2)
   cmbMarital.Add("Divorced", 3)
   cmbMarital.Add("Defacto", 4)
   cmbMarital.Add("Widow", 5)
   cmbMarital.Add("Widower", 6)
   
   arraymarital.Resize(7)
   arraymarital[0] = "U"
   arraymarital[1] = "S"
   arraymarital[2] = "M"
   arraymarital[3] = "D"
   arraymarital[4] = "F"
   arraymarital[5] = "W"
   arraymarital[6] = "WD"
   
   cmbAddressType.Add("Home", 0)
   cmbAddressType.Add("Work", 1)
   cmbAddressType.Add("PO Box", 2)
   cmbAddressType.Add("Parents", 3)
   cmbAddressType.Add("Nursing Home", 4)
   cmbAddressType.Add("Refuge", 5)
   
   cmbCommunicationType.Add("At Home", 0)
   cmbCommunicationType.Add("At Work", 1)
   cmbCommunicationType.Add("Fax", 2)
   cmbCommunicationType.Add("Email", 3)
   cmbCommunicationType.Add("Mobile", 4)
   cmbCommunicationType.Add("VOIP", 5)
   cmbCommunicationType.Add("Web URL", 6)
   cmbCommunicationType.Add("Phone", 7)
   cmbCommunicationType.Add("Toll Free ", 8)
   
End

Public Sub DataInputArea_Visible(bflag As Boolean)
   
   VBox_EditArea.Visible = bflag
   
End

Public Sub cvwPatients_Select()
   '-----------------------------------------------
   'User has selected a patient from the columnview
   '-----------------------------------------------   
   
   If bExit Then Return
   cvwPatients.MoveCurrent
   cvwPatients_key = cvwPatients.Item.Key
   If IsNull(cvwPatients_key) Then Return 'shoulder never happen
   Patient_Display()
   
End

Public Sub Patients_Get()
   
   If Trim(txtSearch.text) = "" Then Return
   
   Inc Application.Busy
   Try limit = Val(txtlimit.text)
   If Error Then limit = 100
   rows_in_view = modContactsDBI.patients_get_firstname_surname(Trim(txtSearch.text), chkIncludeDeceased.value, limit, chkIncludeInactive.value)
   Patients_List_Fill()
   Dec Application.Busy
   
End

Public Sub Patients_List_Fill()
   
   Dim sStatusMessage As String
   Dim vLastPatient_pk As Variant
   Dim x As Integer
   
   With cvwPatients
      .Clear                           'clear current list persons
      .Columns.count = 9
   End With
   views_comms = New Collection
   If rows_in_view.count Then
      Try rows_in_view.Remove("sql_in_english") 'ian included this for FClinical patient search
      rows_in_view = modUtil.Copy_Collection_Keyed_Sequentially(rows_in_view)
      sStatusMessage = Str$(rows_in_view.count) & " records found for search criteria '" & Trim(txtSearch.text) & "'"
      SetStatus("persons", sStatusMessage, False, 0)
      For Each row_in_view In rows_in_view
         If row_in_view!fk_lu_active_status = const.PatientStatus_Inactive Then
            cvwPatients.Add(x, "", pic_inactive)
         Else
            cvwPatients.Add(x, "")
         Endif
         If vLastPatient_pk <> row_in_view!fk_person Then
            cvwPatients[x][1] = row_in_view!surname & "  "
            cvwPatients[x][2] = row_in_view!firstname & "  "
            cvwPatients[x][3] = row_in_view!sex
            Try cvwPatients[x][4] = Format(row_in_view!birthdate, "dd/mm/yyyy") & "   "
            Try cvwPatients[x][5] = row_in_view!age_display
            vLastPatient_pk = row_in_view!fk_person
         Else
            cvwPatients[x][1] = ""
         End If
         cvwPatients[x][6] = ""
         cvwPatients[x][7] = Trim(row_in_view!street1 & " " & row_in_view!street2) & " " & row_in_view!town & " " & row_in_view!postcode
         cvwPatients[x][8] = ""
         Inc x
      Next
      cvwPatients.Enabled = True                       'enable list for clicking on
   End If
   lblMeasure.font = cvwPatients.Font
   modUtilGUI.Columnview_Columns_Set_Size(cvwPatients, lblMeasure)
   
End



Public Sub Patient_Display()
   '---------------------------------------------------
   'Display the detail of the person (or patient)
   'editing is implicit - ie automatically in edit mode
   '---------------------------------------------------
   
   Dim bFoundPerson As Boolean
   Dim row As Collection
   
   If cvwPatients.Columns.count = 5 Then Return 'just being used for display purposes
   If cvwPatients.Count = 0 Then Return
   Check_For_Unsaved_Data()
   cvwPatients.MoveCurrent()
   pk_view = rows_in_view[cvwPatients_key]!pk_view
   row_in_view = rows_in_view[cvwPatients_key]
   currentConsult = New CConsult(row_in_view, const.ConsultType_ClericalNote)
   EditArea_Clear()   'clear the display fields and the patients picture
   bExit = True
   fk_person = row_in_view!fk_person
   Try fk_patient = row_in_view!fk_patient 'missing if a person
   country_code = row_in_view!country_code
   country_code_birth = row_in_view!country_code_birth
   Try fk_ethnicity = row_in_view!fk_ethnicity
   Try fk_language = row_in_view!fk_language
   Try fk_address = row_in_view!fk_address
   Try fk_next_of_kin = row_in_view!fk_next_of_kin
   Try fk_family = row_in_view!fk_family
   Try fk_occupation = row_in_view!fk_occupation
   Try fk_payer = row_in_view!fk_payer
   Try fk_image = row_in_view!fk_image
   If iSection = cSection_Persons Then
      lblContactType.text = "Edit Details "
   Else
      lblContactType.text = "Edit Details: " & row_in_view!title & " " & row_in_view!firstname & " " & row_in_view!surname
      Try lblContactType.text &= " File ID:" & Str$(row_in_view!fk_patient)
    '  form_billing.Display_Patient_Data(row_in_view) 'ignore the crap mixed up code in this module - will all be re-written
      form_billing.Display_Patient_Data(currentconsult) 'ignore the crap mixed up code in this module - will all be re-written

   End If
   lblPerson.text = ""
   txtSurname.text = row_in_view!surname
   txtFirstname.text = row_in_view!firstname
   Try txtBirthdate.text = Format(row_in_view!birthdate, "dd/mm/yyyy")
   If Not Error Then
      txtAge.text = row_in_view!age_display
   End If
   Try txtDateDeceased.text = Format(row_in_view!date_deceased, "dd/mm/yyyy")
   If row_in_view!deceased Then
      chkDeceased.value = True
   Else
      chkDeceased.Value = False
   Endif
   If row_in_view!fk_lu_active_status = 1 Then
      chkLeftPractice.value = False
   Else
      chkLeftPractice.value = True
   End If
   chkLongAppointments.value = row_in_view!long_appointment
   txtAppointmentBookMemo.text = row_in_view!appointment_memo
   txtSalutation.text = row_in_view!salutation
   txtCountry.text = row_in_view!country_birth
   txtethnicity.text = row_in_view!ethnicity
   txtlanguage.text = row_in_view!language
   If row_in_view!language_problems = True Then
      chkLanguageProblems.value = True
   Else
      chkLanguageProblems.Value = False
   Endif
   txtOccupation.text = row_in_view!occupation
   txtMemo.text = row_in_view!person_memo
   Try cmbMarital.index = row_in_view!fk_marital
   cmbTitle.Index = row_in_view!fk_title
   Try cmbSex.index = row_in_view!fk_sex
   chkRetired.value = row_in_view!retired
   Select Case row_in_view!fk_lu_aboriginality
      Case 0
         rbAboriginalityNone.value = True
      Case 1
         rbAboriginalityAboriginal.value = True
      Case 2
         rbAboriginalityTSI.value = True
   End Select
   cvwAddresses.Clear
   address = New Collection
   addresses = New Collection
   Views_addresses = New Collection
   For Each row In rows_in_view
      If Not IsNull(row!fk_address) Then
         Views_addresses.Add(row, row!fk_address)
         If row!fk_person = fk_person Then
            bFoundPerson = True
            address = New Collection
            address!fk_address = row!fk_address
            address!street1 = row!street1
            address!street2 = row!street2
            address!postal_address = row!postal_address
            address!head_office = row!head_office
            address!country_code = row!country_code
            address!town = row!town
            address!fk_lu_address_type = row!fk_lu_address_type
            Try address!fk_town = row!fk_town
            address!state = row!state
            address!postcode = row!postcode
            address!preferred_address = row!preferred_address
            addresses.Add(address, cvwAddresses.count)
         Else
            If bFoundPerson Then Break
         End If
      End If
   Next
   Addresses_FillList()
   Communications_Reload()  'Finally show the communications in the list
   Communication_New()
   BExit = True
   If Not IsNull(fk_image) Then
      Patient_Picture_Display()
    
   End If
 
   form_patient_photo.Init(currentconsult)
   tbSave.Enabled = True
   VBox_EditArea.Enabled = True
   Address_New() 'default to new address in case they type here
   Vbox_EditArea.Enabled = True
   bExit = False
   VBox_EditArea_Outer.Enabled = True
   EditArea_Notify_DataChange(False)
   
End

Public Sub Patient_Picture_Display()
   
   ' Dim tempFile As String
   ' Dim tempPicture As Variant
   ' 
   ' tempFile = Temp() & ".png"
   ' tempPicture = row_in_view!image
   ' 
   ' If tempPicture.data Then
   '    File.Save(tempFile, tempPicture.data)
   '    PictureBox2.Picture = Picture.Load(Tempfile)
   '    PersonPicture = New Collection
   '    PersonPicture!fk_image = row_in_view!fk_image
   '    PersonPicture!picture = PictureBox2.Picture
   '    PersonPicture!path = Tempfile
   ' End If
   ' 
End

Public Sub EditArea_Notify_DataChange(flag As Boolean)
   
   If Bexit Then Return
   If flag Then
      Vbox_EditArea.Padding = 1
      tbSave.Foreground = Color.Red
   Else
      Vbox_EditArea.Padding = 0
      tbSave.Foreground = Color.Black
   End If
   
End

Public Sub EditArea_Buttons_Click()
   
   Select Case Last.tag
      Case "accept address"
         Address_Accept()
      Case "new address"
         Address_New()
         txtStreet1.SetFocus()
      Case "accept communication"
         Communication_Accept()
      Case "new communication"
         Communication_New()
         txtCommValue.SetFocus()
      ' Case "load photo"
      '    Patient_Picture_Import()
      ' ' Case "remove photo"
      '    Person_Picture_Clear()
      '    If Not IsNull(fk_image) Then
      '       PersonPicture!path = "icons/misc/no_photo.png"
      '       PersonPicture!picture = Picturebox2.picture
      '    End If
      '    EditArea_Notify_DataChange(True)
      ' Case "export"
      Case "reset"
         Reset_Gui()
      Case "save"
         Save()
      Case "new person"
         Patient_New()
      Case "new family member"
         
   End Select
   
End

Public Sub EditArea_Clear()
   
   bExit = True
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Left)
   modEditAreaHelpers.EditArea_Clear(VBox_EditArea_Right)
   With Vbox_PatientsList
      .Background = Color.Background
      .padding = 2
   End With
   If isection = cSection_Patients Then
      With form_billing
         .EditArea_Clear()
         .Currentconsult_Set_Null()
         '    .form_next_of_kin.EditArea_Clear() 'bug here
         .TabStrip1.index = 0
      End With
   Endif
   lblWarning.Visible = False 
   fk_occupation = Null 
   fk_payer = Null
   fk_ethnicity = Null
   fk_language = Null
   fk_address = Null
   fk_next_of_kin = Null
   fk_family = Null
   fk_image = Null
   fk_patient = Null
   country_code = ""
   country_code_birth = ""
   tbnAddContact.text = "Add to List  "
   tbnAddAddress.text = "Add to List  "
   cvwAddresses.Clear
   cvwContacts.Clear
   rbAboriginalityNone.value = True
   pk_last_comm_deleted = Null
   listview1.Visible = False
   listview2.Visible = False
  ' PersonPicture = New Collection
  ' Person_Picture_Clear()
   form_patient_photo.Patient_Picture_Clear
   bExit = False
   EditArea_Notify_DataChange(False)
   cvwPatients_key = Null
   
End

Public Function check_field_valid(ctrl As Textbox) As Boolean
   
   If ctrl.text = "" Then
      ctrl.SetFocus()
      Return False
   End If
   Return True
   
End

Public Function Patient_Valid() As Boolean
   
   If Not check_field_valid(txtsurname) Then Return False               'always have a surname
   If Not check_field_valid(txtFirstname) Then Return False             'always have a firstname
   
   If Not IsDate(txtBirthdate.text) Then                             'patient must have a birthdate
      txtBirthdate.SetFocus()
      Return
   End If
   If Not form_billing.Valid_Data() Then
      Return
   Endif
   If Trim(txtOccupation.text) <> "" Then 
      fk_occupation = modCommonDBI.Occupation_Check_Valid(txtOccupation)
      If IsNull(fk_occupation) Then Return             'user aborted popup dialog asking to save new occupation 
   End If   
   If Trim(txtDateDeceased.text) <> "" Then
      If Not IsDate(Trim(txtDateDeceased.Text)) Then
         txtDateDeceased.SetFocus()
         Return False
      Endif
   Endif
   
   Return True
   
End

Public Sub Save()
   
   Dim new_ihi As String
   Dim old_ihi As String
   Dim person As CRow
   Dim patient As CRow
   Dim address As CRow
   Dim address_link As CRow
   Dim Coll As Collection
   Dim communication As CRow
   Dim link_person_comm As New CRow
   Dim Image As CRow
   Dim sSearchText As String
   Dim occupational_history As CRow 
   Dim Currentconsult As CConsult
   Dim NOK_Consult As CConsult    'if saving social history for new patient see below
   Dim notes As String = ""
   Dim bAddingNewPatient As Boolean
   
   If Vbox_EditArea.Padding = 0 Then Return     'no padding = no data
   If Not Patient_Valid() Then Return
   If txtSearch.text <> "" Then sSearchCriteria = Trim(txtSearch.text) 
   If Not IsNull(fk_town) Then                  'User may not have clicked on the address save button
      Address_Accept()                          'if userrows_in_view has left in the address editing area > to the list   End If
   End If
   patient = New CRow
   If Not IsNull(fk_patient) Then
      patient.put_unchanged(fk_patient, "fk_patient")
   Else
      bAddingNewPatient = True   
   End If
   If rbAboriginalityNone.value = True Then
      patient!fk_lu_aboriginality = Const.aboriginality_none
   End If
   If rbAboriginalityAboriginal.value = True Then
      patient!fk_lu_aboriginality = Const.aboriginality_aboriginal
   End If
   If rbAboriginalityTSI.value = True Then
      patient!fk_lu_aboriginality = Const.aboriginality_Torres_Strait_Islander
   End If
   If chkLeftPractice.value = True Then
      patient!fk_lu_active_status = const.PatientStatus_Inactive
   Else
      patient!fk_lu_active_status = const.PatientStatus_Active
   Endif
   If IsNull(form_billing.Responsible_Payer_Get_fk_person()) Then
      patient!fk_payer_person = Null
   Else
      patient!fk_payer_person = form_billing.Responsible_Payer_Get_fk_person()
   Endif
   If IsNull(form_billing.Responsible_Payer_Get_fk_branch()) Then
      patient!fk_payer_branch = Null
   Else
      patient!fk_payer_branch = form_billing.Responsible_Payer_Get_fk_branch()
   Endif
   If Trim(txtAppointmentBookMemo.text) <> "" Then
      patient!appointment_memo = Trim(txtAppointmentBookMemo.text)
   Else
      patient!appointment_memo = Null
   End If   
   patient!long_appointment = CBool(chkLongAppointments.value)
   patient!medicare_number = form_billing.Medicare_Number()
   patient!medicare_ref_number = form_billing.Medicare_Reference_number()
   patient!medicare_expiry_date = modUtil.Medicare_Create_Expiry_date(form_billing.Medicare_Card_Expiry_Date()) 'add the last day of the month
   If form_billing.PCEHR_Consent() <> form_billing.old_consent Then
      patient!pcehr_consent = form_billing.PCEHR_Consent()
      form_billing.old_consent = patient!pcehr_consent
   Endif 
   patient!veteran_number = form_billing.Veteran_Card_Number()
   If patient!veteran_number <> "" Then
      patient!fk_lu_veteran_card_type = form_billing.Veteran_Card_Type()
      patient!veteran_specific_condition = form_billing.veteran_specific_condition()
   Else
      patient!fk_lu_veteran_card_type = Null
      patient!veteran_specific_condition = Null
   End If
   patient!concession_card_number = form_billing.Concession_Card_Number()
   If patient!concession_card_number <> "" Then
      patient!concession_card_expiry_date = form_billing.Concession_Card_Expiry_Date()
      patient!fk_lu_centrelink_card_type = form_billing.Centrelink_Card_Type()
   Else
      patient!concession_card_expiry_date = Null
      patient!fk_lu_centrelink_card_type = Null
   Endif
   patient!fk_lu_default_billing_level = form_billing.Billing_level_Get()
   patient!fk_lu_private_health_fund = form_billing.Private_Health_Fund()
   If patient!fk_lu_private_health_fund <> const.PrivateHealthFund_None Then
      patient!private_insurance = True
   Else
      patient!private_insurance = False
   Endif
   patient!fk_doctor = form_billing.Preferred_Doctor()
   patient!nursing_home_resident = form_billing.Nursing_Home_Resident()
   '-------------------------------
   'Now any patient pharmacy stuff
   '-------------------------------
   If Not IsNull(form_billing.fk_patient_pharmacy_get()) Then   
      patient!fk_branch_pharmacy = form_billing.fk_patient_pharmacy_get()
   Else
      patient!fk_branch_pharmacy = Null
   End If   
   If form_billing.patient_pharmacy_memo_get() <> "" Then
      patient!memo_for_pharmacy = form_billing.patient_pharmacy_memo_get()
   Endif
   patient!uses_webster_pack = form_billing.webster_pack_get()
   '--------------------------------------------------------------------------------------
   'Now save the person before we save the patient in case need the fk_person for cPatient
   '--------------------------------------------------------------------------------------
   person = New CRow
   If Not IsNull(fk_person) Then
      person.put_unchanged(fk_person, "fk_person")
   End If
   person!firstname = Trim(txtFirstname.text)
   person!surname = Trim(txtSurname.text)
   person!salutation = Trim(txtSalutation.text)
   Try person!birthdate = Format(Val(txtBirthdate.text), "dd/mm/yyyy")
   person!fk_title = cmbTitle.index
   person!fk_sex = cmbSex.index
   person!fk_marital = cmbMarital.index
   If chkRetired.value Then
      person!retired = True
   Else
      person!retired = False
   End If
   If chkDeceased.value = True Then
      person!deceased = True
   Else
      person!deceased = False
   Endif
   Try person!date_deceased = Format(Val(txtDateDeceased.text), "dd/mm/yyyy")
   person!memo = Trim(txtMemo.text)
   person!country_code = country_code_birth
   person!fk_ethnicity = fk_ethnicity 
   person!fk_occupation = fk_occupation
   person!fk_language = fk_language
   If chkLanguageProblems.value = True Then
      person!language_problems = True
   Else
      person!language_problems = False
   End If
   ' If PersonPicture!path Then
   '    If Not IsNull(fk_image) Then                                            'patient has existing photo
   '       If PersonPicture!path = "icons/misc/no_photo.png" Then  'if is a 'no photo' then must have deleted the real image
   '          person!fk_image = Null                                'set this back to null in backend
   '          Image = New CRow
   '          Image.put_unchanged(fk_image, "fk_image")             'and mark existing image in blobs
   '          Image!deleted = True                                  'to deleted (still recoverable via fk_consult
   '          Image.Save("blobs.images", "fk_image")
   '       Else
   '          person!fk_image = modContactsDBI.Image_Save(PersonPicture)
   '       End If
   '    Else                                                        ' no fk_image?
   '       person!fk_image = modContactsDBI.Image_Save(PersonPicture) 'save their new photo
   '    End If
   ' End If
   person.Save("contacts.data_persons", "fk_person")
   For Each Coll In Comms
      communication = New CRow
      If Not IsNull(Coll!pk) Then
         communication.put_unchanged(Coll!pk, "pk")
      Endif
      communication!fk_type = Coll!fk_type
      communication!value = Coll!value
      communication!note = Coll!note
      communication!preferred_method = Coll!preferred_method
      communication!confidential = Coll!confidential
      communication.Save("contacts.data_communications", "pk")
      If IsNull(Coll!pk) Then
         link_person_comm = New CRow
         link_person_comm!fk_person = person!fk_person
         link_person_comm!fk_comm = communication!pk
         link_person_comm.Save("contacts.links_persons_comms", "fk_link_person_comm")
      End If
   Next
   For Each coll In Addresses
      address = New CRow
      If Not IsNull(coll!fk_address) Then
         address.put_unchanged(coll!fk_address, "fk_address")
      Endif
      address!fk_town = coll!fk_town
      address!street1 = coll!street1
      address!street2 = coll!street2
      address!fk_lu_address_type = coll!fk_lu_address_type
      address!country_code = coll!country_code
      address!postal_address = coll!postal_address
      address!preferred_address = coll!preferred_address
      address.Save("contacts.data_addresses", "fk_address")
      If IsNull(coll!fk_address) Then
         address_link = New CRow
         address_link!fk_person = person!fk_person
         address_link!fk_address = address!fk_address
         address_link.Save("contacts.links_persons_addresses", "fk_link_person_address")
      End If
   Next
   patient!fk_person = person!fk_person
   old_ihi = form_billing.Previous_IHI(new_ihi)
   new_ihi = form_billing.Patient_IndividualHealthIdentifier()
   If new_ihi <> old_ihi And If Not (IsNull(new_ihi) And IsNull(old_ihi)) Then
      '-------------------------------------------------------------------------------------------------------------------------
      ' we need to do some very specific auditing on whether the IHI has changed
      ' ------------------------------------------------------------------------------------------------------------------------
      patient!ihi = new_ihi
      If Not IsNull(new_ihi) Then
         patient!ihi_updated = "now()"
      Endif
      If IsNull(new_ihi) Then
         notes &= Subst$("Old IHI &1 being deleted manually", old_ihi)
      Else If IsNull(old_ihi) Then
         notes &= Subst$("Manual entry of new IHI &1 [status: unknown, record status: unknown]", new_ihi)
      Else 
         notes &= Subst$("IHI changed by manual entry from &1 to &2 [status: unknown, record status: unknown]", old_ihi, new_ihi)
      Endif
   Endif
   coll = New Collection
   coll["n"] = "Not consented"
   coll["e"] = "Error"
   coll["h"] = "Details changed"
   coll["c"] = "Consented"
   coll["v"] = "Verified"
   coll["r"] = "Refused"
   coll["x"] = "Not eligible"
   If form_billing.PCEHR_Consent() <> form_billing.old_consent Then
      notes &= Subst$("<p>Consent status being changed from &2 to &1</p>", coll[form_billing.PCEHR_Consent()], coll[form_billing.old_consent])
   Else If notes <> ""
      notes &= Subst$("<p>Consent status remains &1</p>", coll[form_billing.PCEHR_Consent()])
   Endif
   If notes <> "" And If Not IsNull(modDBConnect.currentUser!hpii) Then
      notes &= " <p>Current users IHI is " & modDBConnect.currentUser!hpii & " </p>"
   Endif 
   ' now actually save
   patient.Save("clerical.data_patients", "fk_patient")
   fk_patient = patient!fk_patient
   ' save audit
   If notes <> "" Then
      Currentconsult = New CConsult(patient.AsCollection(), const.ConsultType_AuditNote, True)
      Currentconsult.Set(const.ConsultType_AuditNote, "IHI audit")
      modAudit.MakeAudit(Currentconsult, const.cAuditAction_PCEHR, "clerical.data_patients", patient!fk_patient, 0, notes)
   Endif
   '-------------------------------------------------------------------------------------------------------------------------
   'Now, check if the occupation is recorded in the main clin_history.occupational_history table
   'one of the rare times a clerical staff can write to the clinical record
   '    Create TABLE clin_history.occupational_history
   ' (
   '   pk serial Not Null,
   '   fk_consult integer Not Null,
   '   fk_occupation integer Not Null, - - foreign key To common.lu_occupations
   '   from_age integer, - - age person started working In this occupation, can be Null, measured In years...
   '   to_age integer,
   '   current boolean Default False, - - If True this Is The patients current occupation
   '   retired boolean Default False, - - If True Then the patient Is Retired With this As Last occupation
   '   notes_occupation text, - - notes about either the occupation Or further comment On exposure risks
   '   deleted boolean Default False,
   '   fk_progressnote integer, - - key To clin_consult.progressnotes points To the Last progress note For this occupation
   '   CONSTRAINT occupational_history_pkey PRIMARY KEY(pk)
   ' )
   ' With (
   '   OIDS = False
   ' );
   ' FIXME - very flakey, only works if new patient and new occupation being entered.
   '         occupations usually added by medical/nursing staff in Fclinical
   '         can make this more sophisticated at some staff as if an edit, the progress note
   '         will be wrong.
   ' ------------------------------------------------------------------------------------------------------------------------
   If Not IsNull(fk_occupation) Then   
      If Not modOccupationalHistoryDBI.Patient_Occupation_Is_It_Recorded(patient!fk_patient, fk_occupation) Then  '
         occupational_history = New CRow                      'no, then we will add it
         Currentconsult = New CConsult(["fk_patient": patient!fk_patient])
         Currentconsult.Set(const.ConsultType_NotesPatientNotPresent, "Clerical Staff Entered Occupation in Contacts Manager")
         occupational_history!fk_consult = Currentconsult.GetPK()
         occupational_history!fk_occupation = fk_occupation
         If person!retired Then 
            occupational_history!retired = True
         Else
            occupational_history!current = True                      'assume it is current
         End If 
         occupational_history!fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, "Clerical staff entered occupation in contacts manager - " & Trim(txtOccupation.text), const.cSection_GeneralNotes, Null, "Occupational History")
         occupational_history.Save("clin_history.occupational_history", "fk_occupational_history")
      End If 
   Endif
   'Adding new patient who has next of kin a problem as NOK kept (historical) in psycho-social history
   'which needs a cconsult. Chicken and egg. the next of kin form won't have a cConsult if a new patient
   If bAddingNewPatient Then 
      NOK_Consult = New CConsult(["fk_patient": patient!fk_patient], const.ConsultType_ClericalNote)
      form_billing.form_next_of_kin.Set_Consult(NOK_Consult)
   Endif
   form_billing.form_next_of_kin.Save()                                          'fix me, this routine as a commit trans in it
   modDBConnect.CommitTrans()
   EditArea_Notify_DataChange(False)
   If FClinicalToolbar.IsSamePatient(fk_patient) Then                                   'if patient loaded into FClinical
      FClinicalToolbar.Patient_Demographics_Refresh()
      If patient!fk_patient And person.Exist("fk_image") Then                    'if we have a picture of them
         If Not IsNull(person!fk_image) Then
            If person!fk_image > 0 Then                                         'image exists
               FClinicalToolbar.Patient_Picture_Refresh(personpicture!path)             'refresh the picture
            Else
               FClinicalToolbar.Patient_Picture_Refresh("icons/misc/no_photo.png")
            End If
            If Not IsNull(fk_occupation) Then
               Try FOccupation.Occupations_Reload()
            Endif
         Else
            FClinicalToolbar.Patient_Picture_Refresh("icons/misc/no_photo.png")
         End If
      End If
      Try FPregnancyDemographics.Occupation_Update(txtOccupation.text, fk_occupation)  'if ante-natal care demographics is loaded
      Try FOccupation.Occupations_Reload
   End If
   Try FPsychoSocialHistory.NextOfKin_Reload(person!fk_person) 'if the patient in Fclinical has this person as their NOK - reload their contact details.
   If bAddingNewPatient Then
      sSearchCriteria = Trim(txtSurname.text) & "," & Trim(txtFirstname.text)
   Endif
   cvwPatients.UnselectAll()
   If sSearchCriteria <> "" Then
      EditArea_Clear
      sSearchMode = "general search"
      txtSearch.text = sSearchCriteria
      iTimer_Count = 4
      Timer1.start()
   Else
      txtSearch.SetFocus 'resets the search text for input
   Endif
   VBox_EditArea.Enabled = False
Catch
   Message.Error("An error occurred whilst trying to save this patient's record.\n\nIf this persists then please contact your SysAdmin "
   "who can notify the developers of the problem")
   modDBConnect.RollBack
   
End

Public Sub Reset_Gui()
   
   Check_For_Unsaved_Data()
   bExit = True
   lblContactType.text = ""
   EditArea_Clear()
   
   tbSave.Picture = Picture.Load("icons/12/filesave.png")
   txtSearch.text = ""
   bDisplayingData = True
   bExit = False
   isubsection = cNameSearch
   VBox_EditArea.Enabled = False
   cvwPatients.Clear()
   txtSearch.SetFocus
   
End Sub

Public Sub mnuAddresses_Click()
   
   Select Case Last.tag
      Case "edit"
         Address_Edit()
      Case "new"
         Address_New()
      Case "delete"
         Address_Delete()
      Case "unlink"
         
   End Select
Catch
   Return 
   
End

Public Sub patients_Mark_Left_Practice()
   '----------------------------------------------------
   'Mark one of more patient as having left the practice
   '----------------------------------------------------   
   
   Dim sMsg As String
   Dim Pat As New CRow 
   Dim x As Integer
   
   sSearchCriteria = txtSearch.Text
   
   Message.Title = "Marking Patients as Left The Practice"
   sMsg = "You have selected "
   If cvwPatients.Selection.Count > 1 Then
      sMsg &= "a number of patients"
   Else
      sMsg &= modStrings.Capitalise_Words_In_String(rows_in_view[cvwPatients.Selection[x]]!wholename)
   Endif
   sMsg &= " to mark as having left the practice.\n\nAre you sure you want to continue?"
   If Message.Question(sMsg, "Yes - Mark as Left", "No") = 2 Then Return
   For x = 0 To cvwPatients.Selection.Count - 1
      Pat = New CRow
      Pat.put_unchanged(rows_in_view[cvwPatients.Selection[x]]!fk_patient, "fk_patient")
      Pat!fk_lu_active_status = const.PatientStatus_Inactive
      Pat.Save("clerical.data_patients", "fk_patient")
   Next 
   modDBConnect.CommitTrans
   cvwPatients.UnselectAll
   txtSearch.text = sSearchCriteria
   Patients_Get
   If cvwPatients.count Then
      With cvwPatients
         .MoveFirst
         .SetFocus
         .Item.Selected = True
      End With
   End If
   
Catch
   modDBConnect.RollBack
   
End

Public Sub mnuPersons_Click()
   
   Dim x As Integer
   Dim P As Collection
   Dim C As New Collection 'empty collections for comms
   Dim selected_count As Integer
   Dim sMsg As String
   
   Select Case Last.tag
      Case "add address"
         Address_New
      Case "add contact"
      Case "add person"
         bAddFamilyMember = False
         Patient_New()
      Case "add family member."
         bAddFamilyMember = True
         Patient_New()
      Case "show family members"
         isubsection = cFamilySearch
      Case "link as next of kin"
      Case "select as next of kin"
      Case "mark left practice"
         patients_Mark_Left_Practice
      Case "mark deceased"
         '----------------------------------------------------------------
         'Run through the selected persons, if more than one being deleted
         'request confirmation first, then delete the lot
         'see code in FDiabetesResearch which is better FIXME
         '----------------------------------------------------------------
         cvwPatients.MoveFirst
         sMsg = "You have selected a number of patients to mark deceased.\n\nThey will no longer appear in "
         "the patients list or the clinical record, but will not actually be removed from the database."
         For x = 1 To cvwPatients.Count
            If cvwPatients.Item.Selected = True Then
               Inc selected_count
               If selected_count > 1 Then
                  Message.Title = "Patients - Mark Deceased"
                  If Message.Warning(sMsg, "Confirm - Mark Deceased", "Cancel") = 2 Then Return
                  Break
               Endif
            Endif
            cvwPatients.MoveNext
         Next
         cvwPatients.MoveFirst
         For x = 1 To cvwPatients.Count
            If cvwPatients.Item.Selected = True Then
               P = New Collection
               P!fk_person = rows_in_view[cvwPatients.Item.key]!fk_person
               P!deceased = True
               modContactsDBI.Person_Save(rows_in_view, cvwPatients.Item.key, P, C, C)
               modDBConnect.CommitTrans()
            Endif
            cvwPatients.MoveNext
         Next
         Patients_Get() 'refresh the list
      Case "delete address"
         Address_Delete
      Case "delete person"
      Case "font"
         If Embedded_In_Form = "persons" Then
            modUtilGUI.Columnview_SetFont(cvwPatients, "FContactsPersons")
         Else
            modUtilGUI.Columnview_SetFont(cvwPatients, "FContactsPersons_Patient")
         Endif
      Case "merge"
         Person_Merge()
   End Select
Catch
   Return 
   
End

Public Sub Religions_Menu_Refresh()
   '------------------------------------------------------
   'There is a 1 to many relationship between the religion
   'and subreligion but subreligion may be null
   'This creates a menu of religions, with sub-religions
   'as submenus         mnu = New Menu(parent_menu) As "FContactsPersons.mnuReligions"
   'FIXME: this should be able to use common routine in modeditareahelpers
   '------------------------------------------------------
   
   Dim mnu As Menu
   Dim religion As Collection
   Dim parent_menu As Menu
   Dim fk_last_religion As Variant
   Dim religions As Collection
   
   religions = modCommonDBI.Religions_Get()
   mnuReligions.Children.Clear
   For Each religion In religions
      If fk_last_religion <> religion!fk_religion Then
         fk_last_religion = religion!fk_religion
         mnu = New Menu(mnuReligions) As "mnuReligions"
         parent_menu = mnu
         mnu.name = religion!religion
         mnu.caption = religion!religion
         mnu.tag = religion!pk_view
      End If
      If Not IsNull(religion!fk_lu_sub_religion) Then
         '-----------------------------
         'Add sub-religions to the menu
         '-----------------------------
         mnu = New Menu(parent_menu) As "mnuReligions"
         mnu.name = religion!sub_religion
         mnu.caption = religion!sub_religion
         mnu.tag = religion!pk_view
      End If
   Next
   
End

Public Sub mnuReligions_Click()
   
   Dim charpos As Integer
   Dim fk_religion As Variant
   Dim fk_sub_religion As Variant
   
   txtReligion.text = ""
   charpos = InStr(Last.tag, "-")
   Try fk_religion = Val(Left(Last.tag, InStr(Last.tag, "-") - 1))
   Try fk_sub_religion = Val(Right(Last.tag, Len(Last.tag) - InStr(Last.tag, "-")))
   txtReligion.text = Last.caption
   txtMemo.SetFocus()
Catch
   Return
   
End

Public Sub Person_Merge()
   '------------------------------
   'Merges one person with another
   '------------------------------
   
   Message.Info("This section is under construction")
   Return
   cvwPatients.MoveCurrent
   
   FMergeContact.Init(rows_in_view[cvwPatients.Current.Key])
   
   FMergeContact.ShowModal()
   
End

Sub Address_Delete()
   
   Dim i As Integer
   
   bExit = True
   cvwAddresses.MoveCurrent
   i = cvwAddresses.Item.Key
   If addresses[i].Exist("fk_address") Then ' only delete in backend when we have a PK
      modDBConnect.BeginTrans()
      modContactsDBI.person_address_delete(addresses[i]!fk_address)
      modDBConnect.CommitTrans()
   Endif
   addresses.Remove(i)
   addresses = modUtil.Copy_Collection_Keyed_Sequentially(addresses) ' renumber the collection
   Addresses_FillList()
   Address_New() ' refresh whatever we were editing to prevent confusion
   bExit = True
   
End

Public Sub Patient_New()
   
   txtSearch.text = ""
   cvwPatients.Clear()
   bExit = True
   
   If bAddFamilyMember Then
      
   Else
      EditArea_Clear()
      PersonPicture = New Collection
      addresses = New Collection
      Views_addresses = New Collection
      rows_in_view = Null
      Comms = New Collection
      pk_view_address = -1
      fk_person = Null
      fk_address = Null
      fk_town = Null
      fk_patient = Null
      fk_image = Null
      fk_ethnicity = Null
      fk_country = Null '?used
      country_code_birth = ""
      iCommunication = 0
      pk_view = Null
      Address_New()       'res-sets variables for new address
   End If
   Communication_New()
   If iSection = cSection_Patients Then
      rbAboriginalityNone.Value = True
      lblContactType.text = "New Patient"
   Else
      lblContactType.text = "New Person"
   End If
   bExit = False
   Vbox_EditArea.Enabled = True
   Wait
   VBox_EditArea_Outer.enabled = True
   txtSurname.SetFocus()
   
End

Public Sub Address_New()
   
   bExit = True
   bNewAddress = True
   txtStreet1.text = ""
   txtStreet2.Text = ""
   txtSuburb.text = ""
   txtPostcode.text = ""
   '  txtstate.text = ""
   country_code = "AU" 'fixme don't default to this
   address = New Collection
   chkPostal.value = False
   chkAddressPreferred.Value = False
   If iSection = cSection_Patients Then
      cmbAddressType.Index = Const.AddressType_Home
   Else
      cmbAddressType.Index = const.AddressType_Work
   End If
   
   iAddress = cvwaddresses.count
   fk_town = Null
   bExit = False
   tbnAddAddress.text = "Add to List  "
   tbnAddAddress.Foreground = Color.Black
   
End

Public Function Display_Mode(searchtext As String) As String
   
End

Public Sub cvwAddresses_Click()
   
End

Public Function Address_Valid() As Boolean
   
   If Trim(txtStreet1.text) = "" Then
      If IsNull(fk_town) Then
         txtSuburb.text = ""
      End If
      txtStreet1.SetFocus()
      Return False
   End If
   If IsNull(fk_town) Then
      txtSuburb.text = ""
      txtSuburb.SetFocus()
      Return False
   End If
   Return True
   
End

Public Sub Address_Accept()
   
   If Not Address_Valid() Then Return
   
   If bNewaddress Then
      
      address = New Collection
      cvwAddresses.Add(iAddress, cmbAddressType.text & ": " & Trim(txtStreet1.text & " " & txtStreet2.text) & " " & txtSuburb.text)
      address!fk_lu_address_type = cmbAddressType.Index
      address!type = cmbAddressType.Text           'kept for display purposes
      address!street1 = Trim(txtStreet1.text)
      address!street2 = Trim(txtStreet2.text)
      address!fk_town = fk_town
      address!country_code = "AU" 'fixme don't default to this
      address!town = Trim(txtsuburb.text)
      address!state = Trim(txtState.text)
      address!postcode = Trim(txtPostcode.text)
      If chkPostal.value = True Then
         address!postal_address = True
      Else
         address!postal_address = False
      End If
      If chkAddressPreferred.value = True Then
         address!preferred_address = True
      Else
         address!preferred_address = False
      End If
      addresses.Add(address, iAddress)
   Else
      
      addresses[iAddress]!fk_lu_address_type = cmbAddressType.Index
      addresses[iAddress]!type = cmbAddressType.text
      addresses[iAddress]!street1 = Trim(txtStreet1.text)
      addresses[iAddress]!street2 = Trim(txtStreet2.text)
      addresses[iAddress]!fk_town = fk_town
      addresses[iAddress]!country_code = "AU" 'fixme
      addresses[iAddress]!town = Trim(txtsuburb.text)
      addresses[iAddress]!state = Trim(txtState.text)
      addresses[iAddress]!postcode = Trim(txtPostcode.text)
      If chkPostal.value = True Then
         addresses[iAddress]!postal_address = True
      End If
      If chkAddressPreferred.value = True Then
         addresses[iAddress]!preferred_address = True
      End If
      
      Addresses_FillList()
   End If
   
   Address_New()
   txtStreet1.SetFocus()
   
End

Public Sub Addresses_FillList()
   
   Dim address As Collection
   Dim sMsg As String
   
   If IsNull(Addresses) Then Return
   cvwAddresses.Clear()
   If Addresses.count Then
      For Each address In Addresses
         sMsg = address!type & ": " & Trim(address!street1 & " " & address!street2) & " " & address!town
         If address!preferred_address = True Then
            sMsg &= " (Preferred Address)"
         Endif
         '  cvwAddresses.Add(cvwAddresses.count, address!type & ": " & Trim(address!street1 & " " & address!street2) & " " & address!town)
         cvwAddresses.Add(cvwAddresses.count, sMsg)
      Next
   End If
   
End

Public Sub Address_Edit()
   
   bExit = True
   bNewAddress = False
   cvwAddresses.MoveCurrent
   iAddress = cvwAddresses.Item.Key
   address = addresses[iAddress]
   Try fk_address = address!fk_address 'FIXME make sure this is ok to do
   txtStreet1.text = addresses[iAddress]!street1
   txtStreet2.text = addresses[iAddress]!street2
   txtsuburb.text = addresses[iAddress]!town
   Try fk_town = addresses[iAddress]!fk_town
   txtState.text = addresses[iAddress]!state
   txtPostcode.text = addresses[iAddress]!postcode
   Try cmbAddressType.index = addresses[iAddress]!fk_lu_address_type
   If addresses[iAddress]!preferred_address = True Then
      chkAddressPreferred.Value = True
   Else
      chkAddressPreferred.Value = False
   End If
   If addresses[iAddress]!postal_address = True Then
      chkPostal.value = True
   Else
      chkPostal.value = False
   End If
   tbnAddAddress.text = "Save modifications to list"
   cvwAddresses.UnSelectAll()
   txtStreet1.SetFocus()
   bExit = False
   
End

Public Sub cvwAddresses_Menu()
   
   If cvwAddresses.Count Then
      mnuAddresses.Popup
   End If
   
End

Public Sub Form_KeyPress()
   
   Select Case key.Code
      Case key.F12
         Save()
      Case key.Esc
         Reset_Gui()
         
   End Select
   
End

Public Sub cvwPatients_Menu()
   
   If cvwPatients.count Then
      mnuPersons.Popup()
   End If  
   
End

Public Sub mnuContacts_Click()
   
   Select Case Last.tag
      Case "add"
         Communication_New()
         txtCommValue.SetFocus()
      Case "edit"
         Communication_Edit()
      Case "delete"
         Communication_Delete()
      Case "undelete"
         Communication_UnDelete()
   End Select
Catch
   Return 
   
End

Public Sub cvwContacts_Menu()
   
   If cvwContacts.Count = 0 Then                  'no contacts in list
      mnuContacts_add.Enabled = True         'allow add new or undo if appropriate
      If Not IsNull(pk_last_comm_deleted) Then mnuContacts_UnDelete.Enabled = True
      mnuContacts_Edit.Enabled = False       'no items to edit
      mnuContacts_Delete.Enabled = False     'no items to delete
   Else
      mnuContacts_Edit.Enabled = True
      mnuContacts_Delete.Enabled = True
   End If
   mnuContacts.Popup
   
End

Sub SetStatus(section As String, statustext As String, bOff As Boolean, message_severity As String)
   
End

Public Sub tbAddFamilyMember_Click()
   
End

Public Sub ListView2_DblClick()
   
   Select Case Last.Tag.tag
      Case "country"
         Country_Origin_Selection("accept", "list")
      Case "language"
         Language_Selection("accept", "list")
      Case "ethnicity"
         Ethnicity_Selection("accept", "list")
   End Select
   listView2.visible = False
   
End

Public Sub ListView1_DblClick()
   
   listview1.MoveCurrent()
   Select Case Last.Tag.tag
      Case "occupation"
         Occupation_Select(occupations[Listview1.Item.key])
      Case "firstname"
         Firstname_Selection("accept", "list")
      Case "surname"
         Surname_Duplicates_Selection("accept", "list")
      Case "suburb"
         suburb = suburbs[listview1.Item.key]
         Suburb_Select()
   End Select
   listView1.visible = False
Catch
   Return
   
End

Public Sub ListView1_KeyPress()
   
   If Key.Code = Key.RETURN Then
      ListView1_DblClick()
   End If
   
End

Public Sub ListView2_KeyPress()
   
   If Key.Code = Key.RETURN Then
      ListView2_DblClick()
   End If
   
End

Public Sub timer1_Timer()
   
   Inc itimer_Count
   If itimer_count > 3 Then
      timer1.stop
      Select Case sSearchMode
         Case "general search"
            Patients_Get()
         Case "surname"
            Surname_Duplicates_Selection("get")
         Case "firstname"
            ' Firstname_Selection("get")
            Surname_Duplicates_Selection("get") 'now user the firstname, surname to check for duplicates
         Case "occupation"
            occupations = modCommonDBI.Occupations_Get(listview1, txtOccupation)   'get popup list of occupations
         Case "suburb"
            Suburb_Get()
         Case "country"
            Country_Origin_Selection("get")
         Case "ethnicity"
            Ethnicity_Selection("get")
         Case "language"
            Language_Selection("get")
      End Select
   End If
   
End

Public Function EditArea_TextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Select Case Tag
      Case "birthdate"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case "limit"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TextBox_Change()
   
   If bexit Then Return
   Select Case Last.tag
      Case "firstname", "surname"
         If Trim(Last.text) = "" Then
            listview1.Visible = False
         Endif
      Case "occupation"
         If Trim(Last.text) = "" Then
            listview1.Visible = False
            fk_occupation = Null
         Endif
      Case "language"
         If Trim(Last.text) = "" Then
            fk_language = Null
            listview2.Visible = False
         End If
      Case "country"
         If Trim(Last.text) = "" Then
            fk_country = Null
            country_code = ""
            listview2.Visible = False
         End If
      Case "ethnicity"
         If Trim(Last.text) = "" Then
            fk_ethnicity = Null
            listview2.Visible = False
         End If
      Case "street1", "street2"
         tbnAddAddress.Foreground = Color.Red
      Case "suburb"
         If Trim(txtSuburb.text) = "" Then
            txtState.Text = ""
            txtPostcode.text = ""
            fk_town = Null
            listview1.Visible = False
            tbnAddAddress.Foreground = Color.Red
         End If
      Case "memo"
         If InStr(Last.text, "\n\n") Then
            txtMemo.text = Replace(txtMemo.text, "\n", "")
            txtCommValue.SetFocus()
         End If
      Case "comm value"
         If InStr(Last.text, "@") Then
            cmbCommunicationType.index = const.CommModalityEmail
         Else If Left$(Trim(Last.text), 2) = "04" Then 'fix me put in the rest
            cmbCommunicationType.index = const.CommModalityMobile
         Else If InStr(Last.text, "www") Or InStr(Last.text, "http://") Then
            cmbCommunicationType.index = const.CommModalityWeb
         Else If InStr(Last.text, "1800") Then
            cmbCommunicationType.index = Const.CommModalityTollFree
         End If
         tbnAddContact.Foreground = Color.red
      Case "comm notes"
         tbnAddContact.Foreground = Color.red
      Case "birthdate"
         If txtBirthdate.text <> "" Then
            If IsDate(txtBirthdate.text) Then
               Try Age = DateDiff(Val(Trim(txtBirthdate.text)), Now, gb.Year) - 1
               If Age > 0 And Age < 5 Then    'fixme arbitrary cutoff
                  Try txtAge.text = Age & "y" & Str(DateDiff(Val(Trim(txtBirthdate.text)), Now, gb.Month) Mod 12) & "m"
               Else
                  Try txtAge.text = DateDiff(Val((Trim(txtBirthdate.text))), Now, gb.Year)
               End If
            End If
         Else
            txtAge.text = ""
         End If
   End Select
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_TextBox_KeyRelease()
   
   If bexit Then Return
   iTimer_Count = 0
   Timer1.Enabled = True
   Timer1.Start
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   If bExit Then Return
   
   If Not EditArea_TextBox_ExcludeKeys(key.code, Last.tag) Then
      Stop Event
      Return
   End If
   Select Case key.Code
      Case key.Return, key.Tab
         Select Case Last.tag
            Case "surname"
               cmbTitle.Setfocus()
            Case "firstname"
               Surname_Duplicates_Selection("get") 'now user the firstname, surname to check for duplicates
               cmbsex.SetFocus()
            Case "salutation"
               cmbMarital.SetFocus()
            Case "birthdate"
               txtOccupation.SetFocus()
            Case "street1"
               If Trim(Last.text) = "" Then
                  txtCommValue.SetFocus()
               Else
                  txtSuburb.SetFocus()
               End If
            Case "street2"
               txtSuburb.SetFocus
            Case "suburb"
               
            Case "country"
               Country_Origin_Selection("accept", "textbox")
            Case "ethnicity"
               Ethnicity_Selection("accept", "textbox")
            Case "language"
               Language_Selection("accept", "textbox")
            Case "memo"
               txtCommValue.SetFocus()
            Case "comm value"
               txtCommNotes.SetFocus()
            Case "comm notes"
               tbnAddContact.SetFocus()
         End Select
         
      Case Key.Down
         Select Case Last.tag
            Case "occupation", "firstname", "suburb", "surname"
               If listview1.Visible Then
                  listview1.SetFocus
                  listview1.MoveFirst
                  listview1.Item.Selected = True
               End If
            Case "country", "ethnicity", "language"
               If listview2.Visible Then
                  listview2.SetFocus
                  listview2.MoveFirst
                  listview2.Item.Selected = True
               End If
               
         End Select
         
   End Select
   If Last.tag = "suburb" And key.Code = key.BackSpace Or key.code = key.Delete Then
      Timer1.stop
   Endif
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   sSearchMode = Last.tag
   Last.BackGround = Color.rgb(95, 255, 175)
   ReferenceHboxForTopOfListBox = Last.Parent.Parent
   'Should work but doesn't seem to ?why
   With listview1
      .top = Last.Parent.Parent.top + Last.Parent.height
      .left = Last.Parent.left + VBox_EditArea_Left.Padding + Last.Parent.Parent.padding
      .width = Last.width - Last.Parent.Parent.padding
      .Clear
      .Visible = False
   End With
   With listview2
      .top = Last.Parent.Parent.top + Last.Parent.height
      .left = Last.Parent.left + VBox_EditArea_Right.Padding
      .width = Last.width
      .Clear()
      .Visible = False
   End With
   ' Select Case Last.tag
   '    Case "surname"
   '       With listview1
   '          .top = Last.Parent.Parent.top + Last.Parent.height
   '          .width = txtSurname.Width
   '          .left = Last.Parent.left + Vbox_EditArea.Padding
   '          .Visible = False
   '       End With
   ' End Select
   Timer1.Stop
Catch
   Return   
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.White
   Select Case Last.tag
      Case "birthdate", "date deceased"
         If Not IsDate(Last.text) Then
            Last.text = ""
         End If
         
   End Select
   
   Try Last.pos = 0
   
End

Public Sub Patient_Picture_Import()
   
   ' Dim sMsg As String
   ' 
   ' Dialog.Title = "Select Image File"
   ' Dialog.Filter = ["*.png", "Image Files", "*", "All files"]
   ' 
   ' If Dialog.OpenFile() Then Return
   ' Try PictureBox2.picture = Picture.Load(Dialog.Path)
   ' If Error Then
   '    sMsg = "An error occurred the file couldn't be loaded.\n\n"
   '    sMsg &= "Filename:" & Dialog.Path & "\n\n"
   '    sMsg &= "Perhaps it was not a valid picture file?"
   '    Message.Info(sMsg)
   '    Person_Picture_Clear()
   '    Return
   ' End If
   ' Try PictureBox2.tag = Dialog.Path
   ' PersonPicture = New Collection
   ' PersonPicture!path = Dialog.Path
   ' PersonPicture!picture = Picturebox2.picture
   ' EditArea_Notify_DataChange(True)
   
End

Public Sub Communication_Edit()
   
   If cvwContacts.Count = 0 Then Return
   bExit = True 'stop triggering a popup list on the textboxes
   bNewCommunication = False 'must be existing or not saved if clicking on it
   
   txtcommValue.text = Comms[iCommunication]!value
   txtcommnotes.text = Comms[iCommunication]!note
   cmbCommunicationType.index = Comms[iCommunication]!fk_type
   chkCommunicationConfidential.value = Comms[iCommunication]!confidential
   chkCommunicationpreferred.Value = Comms[iCommunication]!preferred_method
   tbnAddContact.text = "Save modifications to list"
   bExit = False
Catch
   Return 'can bug out here with wrong iCommunication value ?why FIXME  
   
End

Public Sub Communication_UnDelete()
   
   modContactsDBI.Communication_UnDelete(pk_last_comm_deleted)
   modDBConnect.CommitTrans()
   mnuContacts_UnDelete.Enabled = False
   pk_last_comm_deleted = Null
   Communications_Reload()
   
End

Public Sub Communication_Delete()
   '----------------------------------------------------------------------------------
   'Problem with this (poor design i guess) fixme
   'if record is not new (I mean the person) and has say a phone number saved
   'then user adds another number (not yet saved), then tries to delete it, it becomes
   'complicated
   '----------------------------------------------------------------------------------
   
   Message.Title = "Delete contact"
   If Message.Question("Confirm delete\n\n" & comm!type & ": " & comm!value, "Yes", "No") = 1 Then
      If Not IsNull(comm!pk) Then         'may not yet have been saved
         comm!deleted = True
         Try modDBConnect.update("contacts.data_communications", Null, ["pk": comm!pk, "deleted": True])
         If Not Error Then
            modDBConnect.CommitTrans()
            mnuContacts_UnDelete.Enabled = True
            pk_last_comm_deleted = comm!pk
            If FClinicalToolbar.IsSamePatient(fk_patient) Then
               FClinicalToolbar.Patient_Demographics_Refresh()  'update the phone numbers etc.
            Endif
         End If
      End If
      Communications_Reload()
   End If
   
End

Public Sub Communications_Reload()
   
   views_comms = modContactsDBI.person_comms_get(fk_person)
   comms = New Collection
   For Each Member In views_comms
      comm = New Collection
      comm!type = Member!type
      comm!value = Member!value
      comm!note = Member!note
      comm!pk = Member!pk
      comm!preferred_method = Member!preferred_method
      comm!confidential = Member!confidential
      comm!fk_type = Member!fk_type
      comm!type = Member!type
      comms.Add(comm, comms.count)
   Next
   Communications_FillList()
   
End

Public Sub Communication_New()
   
   bExit = True
   iCommunication = cvwContacts.Count 'if 3, then this is 0,1,2 so 3 will be new
   txtCommValue.text = ""
   txtCommNotes.text = ""
   If iSection = cSection_Patients Then
      cmbCommunicationType.index = Const.CommModalityHome
   Else
      cmbCommunicationType.index = Const.CommModalityPhone
   End If
   chkCommunicationConfidential.Value = False
   chkCommunicationPreferred.Value = False
   bNewCommunication = True
   txtCommValue.enabled = True
   txtCommNotes.enabled = True
   chkCommunicationConfidential.Enabled = True
   chkCommunicationPreferred.Enabled = True
   comm = New Collection
   tbnAddContact.text = "Add to List  "
   tbnAddContact.Foreground = Color.black
   
   bExit = False
   
End

Public Sub Communication_Accept()
   
   Dim sMsg As String           'used to show message on status bar as to what we are doing
   Dim re As RegExp
   Dim comm_text As String
   
   If Trim(txtCommValue.Text) = "" Then
      txtCommValue.SetFocus
      sMsg = "Hint: Contacts must consist of at least one value eg phone number, email address etc"
      SetStatus("Contacts", sMsg, False, const.cStatusMsg_Info)
      Return
   End If  
   comm_text = txtcommValue.Text
   If cmbCommunicationType.Text = "Mobile" Then
      comm_text = Replace$(comm_text, " ", "")
      comm_text = Replace$(comm_text, "-", "")
      re = New RegExp(comm_text, "04[0-9]{8}$")
      If re.Offset = -1 Then
         txtCommValue.SetFocus
         'SetStatus("Contacts", "Mobile number not valid", False, const.cStatusMsg_Info)
         Message.Error("Mobile number not valid")
         Return
      Endif
   Endif
   If cmbCommunicationType.Text = "Phone" Or If cmbCommunicationType.Text = "At Home" Or If cmbCommunicationType.Text = "At Work" Or If cmbCommunicationType.Text = "Fax" Then
      comm_text = Replace$(comm_text, " ", "")
      comm_text = Replace$(comm_text, "-", "")
      re = New RegExp(txtCommValue.Text, "0[0-9]{9}$")
      If re.Offset = -1 Then
         re = New RegExp(comm_text, "[0-9]{8}$")
         If re.Offset = -1 Then
            txtCommValue.SetFocus
            'SetStatus("Contacts", "Mobile number not valid", False, const.cStatusMsg_Info)
            Message.Error("Phone/fax number not valid")
            Return
         Endif
      Endif
   Endif
   
   If bNewCommunication = True Then
      comm = New Collection
      While cvwContacts.Exist(iCommunication)
         Inc iCommunication
      Wend
      cvwContacts.Add(iCommunication, 0)
      cvwContacts[iCommunication][0] = cmbCommunicationType.text
      cvwContacts[iCommunication][1] = comm_text
      cvwContacts[iCommunication][2] = txtCommNotes.Text
   Else
      If IsNull(Comms[iCommunication]) Then Comms[iCommunication] = New Collection
      comm = comms[iCommunication]
   End If
   Comm!fk_type = cmbCommunicationType.Index
   Comm!type = cmbCommunicationType.text 'need this for display
   Comm!value = comm_text
   Comm!note = txtCommNotes.Text
   If chkCommunicationPreferred.value Then
      Comm!preferred_method = True
   Else
      Comm!preferred_method = False
   End If
   If chkCommunicationConfidential.Value Then
      Comm!confidential = True
   Else
      Comm!confidential = False
   End If
   
   If bNewCommunication Then
      Comms.Add(Comm, iCommunication)
   Else
      Communications_FillList()
   Endif
   
   Communication_New()
   txtCommValue.SetFocus
   
End

Public Sub Communications_FillList()
   
   Dim comm As Collection
   Dim x As Integer
   Dim s As String
   
   If IsNull(Comms) Then Return
   cvwContacts.Clear()
   If comms.count Then
      For Each Comm In comms
         x = cvwContacts.Count
         cvwContacts.Add(x, 0)
         cvwContacts[x][0] = comm!type
         cvwContacts[x][1] = comm!value
         cvwContacts[x][2] = comm!note
         s = ""
         If comm!preferred_method Then
            s &= String.Chr(&H2605)  'star
         Endif
         If comm!confidential Then
            s &= "[P]"
         Endif
         cvwContacts[x][3] = s
      Next
   End If
   lblMeasure.font = cvwContacts.Font
   modUtilGUI.Columnview_Columns_Set_Size(cvwContacts, lblMeasure)
   
End

Public Sub EditArea_CheckBox_KeyPress()
   
   Select Case key.Code
      Case key.return, key.tab
         Select Case Last.tag
            Case "postal address"
               
            Case "preferred address"
               
            Case "retired"
               txtStreet1.SetFocus()
            Case "comm confidential"
               tbnAddContact.SetFocus()
            Case "comm preferred"
               chkCommunicationConfidential.SetFocus()
         End Select
   End Select
   
End

Public Sub EditArea_CheckBox_Click()
   
   If bExit Then Return
   
   Select Case Last.tag
      Case "communication confidential"
         tbnAddContact.Foreground = Color.red
      Case "communication preferred"
         tbnAddContact.Foreground = Color.red
      Case "deceased"
         If Last.value = True Then
            Hbox_Deceased.Background = Color.Red
         Else
            Hbox_Deceased.Background = Color.Background
         Endif
   End Select
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_Combo_KeyPress()
   
   If bExit Then Return
   Select Case key.Code
      Case key.return, key.tab
         Select Case Last.tag
            Case "sex"
               txtSalutation.SetFocus()
            Case "title"
               txtFirstname.SetFocus()
            Case "marital"
               txtBirthdate.SetFocus()
            Case "address type"
            Case "comm type"
               txtCommValue.SetFocus
               
         End Select
   End Select
   
End

Public Sub EditArea_Combo_Click()
   
   If bExit Then Return
   EditArea_Notify_DataChange(True)
   
End

Public Sub Firstname_Selection(action As String, Optional calling_control As String)
   
   Dim x As Integer
   
   Select Case action
      Case "get"
         listview1.Clear
         If Trim(txtFirstname.text) = "" Then Return
         The_Collection = modContactsDBI.Firstname_Get(Trim(txtFirstname.text))
         If The_Collection.count Then
            For Each Member In The_Collection
               listview1.Add(Member!pk, Member!firstname)
            Next
            If The_Collection.count = 1 Then
               If Trim(Lower(txtFirstname.text)) = Lower(Member!firstname) Then
                  Firstname_Selection("select", "list")
                  
                  Return
               End If
            End If
            listview1.Visible = True
            listview1.Raise
            listview1.tag = txtFirstname
            Return
            
         Else
            
         End If
         listview1.Visible = False
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            
            If listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If Lower(listview1.Item.text) = Trim(Lower(txtFirstname.text)) Then
                     listview1.Visible = False
                     Break
                  End If
               Next
            End If
            
         Else
            
            If listview1.Visible Then
               listview1.MoveCurrent   'set internal cursor to match marquee
               txtFirstname.Text = listview1.Item.Text
            End If
         End If
         listview1.Visible = False
         cmbsex.SetFocus
         bExit = False
   End Select
Catch
   bexit = False  
   Return
   
End

Public Sub Occupation_Select(occupation As Collection)
   '----------------------------------------
   'Select an occupation from the popup list
   'called by Listview1_dblclick() 
   '-----------------------------------------   
   
   bexit = True   
   txtOccupation.Text = occupation!occupation
   bexit = False
   fk_occupation = occupation!pk
   txtStreet1.SetFocus
Catch
   Return
   
End

Public Sub Suburb_Select()
   
   bExit = True
   txtSuburb.text = suburb!town
   txtState.text = suburb!state
   txtPostcode.text = suburb!postcode
   fk_town = suburb!pk
   tbnAddAddress.SetFocus()
   bExit = False
   
End

Public Sub Suburb_Get()
   
   Dim x As Integer
   
   With listview1
      .Visible = False
      .Clear
   End With
   If Trim$(txtSuburb.text) = "" Then Return
   Suburbs = modUtil.Copy_Collection_Keyed_Sequentially(modContactsDBI.Get_Town(Lower(Trim$(txtSuburb.text))))
   If Suburbs.count Then
      For Each suburb In Suburbs
         listview1.Add(x, Suburb!town & " " & Suburb!state & " " & Suburb!postcode)
         Inc x
      Next
      If Suburbs.count = 1 Then
         Suburb_Select()
         Return
      End If
      With listview1
         .Raise
         .Visible = True
         .tag = txtSuburb
      End With
   End If
   
End

Public Sub Country_Origin_Selection(action As String, Optional calling_control As String)
   '--------------------------------------------------------------
   'Fixme - probably need to look at oversea's countries addresses
   'This subroutine is for country_birth
   '--------------------------------------------------------------
   
   Dim iMatched As Boolean
   Dim x As Integer
   
   Select Case action
      Case "get"
         
         listview2.Visible = False
         If Trim$(txtCountry.text) = "" Then Return
         The_Collection = modContactsDBI.country_get(Lower(Trim$(txtCountry.text)))
         Listview2.Clear
         If The_Collection.count Then
            For Each Member In The_Collection
               Listview2.Add(Member!pk, Member!country)
            Next
            If The_Collection.count = 1 Then
               Country_Origin_Selection("accept")
            Else
               Listview2.Visible = True
               Listview2.Raise
               Listview2.tag = txtCountry
            End If
         Else
            Listview2.Visible = False
         End If
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            
            If Listview2.Visible Then
               Listview2.MoveFirst
               For x = 0 To listview2.count - 1
                  If InStr(Lower(listview2.Item.text), Trim(Lower(txtCountry.text))) Then
                     iMatched = True
                     Break
                  End If
               Next
               If Not iMatched Then
                  Listview2.Visible = False
                  txtCountry.SetFocus()
                  bExit = False
                  Return 'no match found for country user typed in
               End If
            Else
               txtEthnicity.SetFocus()
               bexit = False
               Return
            End If
         Else
            
            If Listview2.Visible Then
               Listview2.MoveCurrent()             'match internal cursor to marquee
            End If
         End If
         
         txtCountry.text = The_Collection[listview2.Item.key]!country
         country_code_birth = The_Collection[listview2.Item.key]!country_code
         txtEthnicity.SetFocus
         Listview2.Visible = False
         bExit = False
   End Select
Catch
   bexit = False
   Return 
   
End

Public Sub Ethnicity_Selection(action As String, Optional calling_control As String)
   
   Dim iMatched As Boolean
   Dim x As Integer
   
   Select Case action
      Case "get"
         
         listview2.Visible = False
         If Trim$(txtEthnicity.text) = "" Then Return
         
         The_Collection = modContactsDBI.Ethnicity_Get(Lower(Trim$(txtEthnicity.text)))
         Listview2.Clear
         If The_Collection.count Then
            For Each Member In The_Collection
               Listview2.Add(Member!pk, Member!ethnicity)
            Next
            If The_Collection.count = 1 Then
               Ethnicity_Selection("accept")
            Else
               Listview2.Visible = True
               Listview2.Raise
               Listview2.tag = txtEthnicity
            End If
         Else
            Listview2.Visible = False
         End If
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            
            If Listview2.Visible Then
               Listview2.MoveFirst
               For x = 0 To listview2.count - 1
                  If InStr(Lower(listview2.Item.text), Trim(Lower(txtEthnicity.text))) Then
                     iMatched = True
                     Break
                  End If
               Next
               If Not iMatched Then
                  Listview2.Visible = False
                  bexit = False
                  txtEthnicity.SetFocus()
                  Return 'no match found for suburb user typed in
               End If
            Else
               bexit = False
               txtLanguage.SetFocus()
               Return
            End If
         Else
            
            If Listview2.Visible Then
               Listview2.MoveCurrent()             'match internal cursor to marquee
            End If
         End If
         
         txtEthnicity.text = The_Collection[listview2.Item.key]!ethnicity
         fk_ethnicity = The_Collection[listview2.Item.key]!pk
         txtLanguage.SetFocus
         Listview2.Visible = False
         bExit = False
   End Select
Catch
   bexit = False
   Return 
   
End

Public Sub Language_Selection(action As String, Optional calling_control As String)
   
   Dim iMatched As Boolean
   Dim x As Integer
   
   Select Case action
      Case "get"
         
         listview2.Visible = False
         If Trim$(txtLanguage.text) = "" Then Return
         The_Collection = modContactsDBI.Language_Get(Lower(Trim$(txtLanguage.text)))
         Listview2.Clear
         If The_Collection.count Then
            For Each Member In The_Collection
               Listview2.Add(Member!pk, Member!language)
            Next
            
            Listview2.Visible = True
            Listview2.Raise
            Listview2.tag = txtLanguage
            
         Else
            Listview2.Visible = False
         End If
      Case "accept"
         bExit = True
         If calling_control = "textbox" Then
            
            If Listview2.Visible Then
               Listview2.MoveFirst
               For x = 0 To listview2.count - 1
                  
                  If Lower(listview2.Item.text) = Trim(Lower(txtLanguage.text)) Then
                     iMatched = True
                     Break
                  End If
               Next
               If Not iMatched Then
                  Listview2.Visible = False
                  bExit = False
                  fk_language = Null
                  txtLanguage.SetFocus()
                  Return
               End If
            Else
               bExit = False
               Return
            End If
         Else
            
            If Listview2.Visible Then
               Listview2.MoveCurrent()             'match internal cursor to marquee
            End If
         End If
         
         txtLanguage.text = The_Collection[listview2.Item.key]!language
         fk_language = The_Collection[listview2.Item.key]!pk
         txtMemo.SetFocus()
         Listview2.Visible = False
         bExit = False
   End Select
Catch
   bexit = False
   Return 
   
End

Public Sub EditArea_Buttons_KeyPress()
   
   If key.code = key.return Then
      EditArea_Buttons_Click
   End If
   
End

Public Sub EditArea_RadioButtons_Click()
   
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_RadioButtons_KeyPress()
   
   Select Case key.Code
      Case key.return
         Select Case Last.tag
            Case "aboriginality none"
               rbAboriginalityAboriginal.SetFocus()
            Case "aboriginal"
               rbAboriginalityTSI.SetFocus()
            Case "torres strait islander"
               txtCountry.SetFocus()
               
         End Select
   End Select
   
End

Public Sub Check_For_Unsaved_Data()
   
   Return
   If Vbox_EditArea.Padding = 1 Then
      Select Case Message.Warning("Do you want to save the changes before proceeding?", "Yes", "Discard changes")
         Case 1
            Save()
         Case 2
            EditArea_Notify_DataChange(False)
      End Select
   End If
   
End

Public Sub txtSearch_GotFocus()
   
   itimer_Count = 0
   Timer1.stop
   pk_view = Null
   sSearchMode = "general search"
   txtSearch.Clear()
   EditArea_Clear()
   bExit = True
   cvwPatients.Clear()
   VBox_EditArea.Enabled = False
   bExit = False
   lblContactType.text = ""
   ' Check_For_Unsaved_Data() 'not implemented
   
End

Public Sub txtSearch_KeyRelease()
   
   If Trim(Last.text) = "" Then Return
   itimer_count = 0
   Timer1.start()
   
End

Public Sub cvwContacts_Select()
   
   cvwContacts.MoveCurrent()
   iCommunication = cvwContacts.Item.Key
   Comm = comms[iCommunication]
   
Catch
   Return
   
End

Public Sub Surname_Duplicates_Selection(action As String, Optional calling_control As String)
   '-------------------------------------------------------------------------------
   'Checks for duplicate surnames in the contacts database either person or patient
   '-------------------------------------------------------------------------------
   
   Dim x As Integer
   Dim last_fk_person As Variant
   
   Select Case action
      Case "get"
         With cvwPatients
            .Clear
            .columns.count = 5
         End With
         If Trim(txtSurname.text) = "" Then Return
         The_Collection = modContactsDBI.Person_Get(Trim(txtSurname.text) & "," & Trim(txtFirstname.text), const.contacttype_patient)
         The_Collection.Remove("sql_in_english")
         The_Collection = modUtil.Copy_Collection_Keyed_Sequentially(The_Collection)
         If The_Collection.count Then
            With lblWarning
               .text = "EXISTING DATABASE ENTRIES - PLEASE DOUBLE CHECK FOR DUPLICATES BEFORE SAVING"
               .Visible = True   
            End With
            For Each Member In The_Collection
               If last_fk_person <> Member!fk_person Then                                                    'if this person <> the last person
                  cvwPatients.Add(x, 0)
                  If Not IsNull(Member!fk_patient) Then
                     cvwPatients[X][0] = "PATIENT DATABASE"
                  Else
                     cvwPatients[X][0] = "OTHER PERSONS"
                  Endif
                  cvwPatients[X][1] = Member!firstname & " " & Member!surname & "   "
                  If Not IsNull(Member!birthdate) Then
                     cvwPatients[X][2] = Format(Member!birthdate, "dd/mm/yyyy") & "   "
                  Endif
                  If Not IsNull(Member!occupation) Then
                     cvwPatients[X][3] = " " & Member!occupation & " "
                  Endif
                  cvwPatients[X][4] = " " & Trim(Member!street1 & " " & Member!street2) & " " & Member!town
                  Last_fk_person = Member!fk_person
                  Inc x
               Else
                  cvwPatients[X - 1][4] &= "/" & Trim(Member!street1 & " " & Member!street2) & " " & Member!town
               End If
            Next
            With Vbox_PatientsList
               .Background = Color.REd
               .padding = 10
            End With
         Else
            cvwPatients.Clear
            With Vbox_PatientsList
               .Background = Color.Background
               .padding = 2
            End With
            lblWarning.Visible = False 
         End If
         lblMeasure.font = cvwPatients.Font
         modUtilGUI.Columnview_Columns_Set_Size(cvwPatients, lblmeasure)
   End Select
   
End

Public Sub txtLimit_KeyRelease()
   
   Timer1.start()
   
End

Public Sub Form_Leave()
   
   Timer1.Stop
   timer1.Enabled = False
   
End

Public Sub EditArea_Combo_GotFocus()
   
   listview1.Visible = False
   listview2.Visible = False
   
End

Public Sub EditArea_CheckBox_GotFocus()
   
   listview1.Visible = False
   listview2.Visible = False
   
End

Public Sub VSplit_DataEntry_Resize()
   
   If listview1.Visible Then
      With listview1
         .top = ReferenceHboxForTopOfListBox.top + ReferenceHboxForTopOfListBox.Height
         .width = Listview1.Tag.width
      End With
   Endif
   
End

Public Sub Form_Resize()
   
   VSplit_DataEntry_Resize()
   
End

Public Sub chkIncludeInactive_Click()
   '-----------------------------------------------------------------------------
   'Display patients according to txtSearch but include/exclude inactive patients
   '-----------------------------------------------------------------------------
   
   Patients_Get
   
End

Public Sub MbtnReligions_Menu()
   
   mnuReligions.Popup()
   
End


