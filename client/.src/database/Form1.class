' Gambas class file

Private patient As Collection
Private json_string As String
Private skipped_towns As Collection 
Private skipped_town As Collection 
Private missing_towns As Collection 
Private missing_town_count As Integer
Private misspelt_towns As Collection
Private misspelt_town As Collection
Private bSkipTown As Boolean
Public fk_town As Integer
Private Corrected_Town As Collection

Static Private horst_form As Form1

Public Sub _new()
   
   horst_form = Me 
   
End

Static Public Sub Corrected_Towns_Set(Town As Collection)
   
   horst_form.Set_Corrected_Town(town)
   
End

Public Sub Set_Corrected_Town(town As Collection)
   'collection =  the real name, the real key
   
   Corrected_Town = town
   fk_town = town!pk
   
End

Public Sub Button1_Click()
   
   Dim sOneLine As String 
   Dim hFile As File
   Dim apatient As Collection
   Dim contacts As New Collection
   Dim json_lines As New Collection 
   Dim x As Integer
   Dim last_line As String
   Dim duplicate_line_count As Integer
   Dim possible_companies As New Collection 
   
   '  hFile = Open "/home/richard/horst_json.txt" For Read
   hFile = Open "/home/richard/horst_json_rejected.txt" For Read
   While Not Eof(hFile)
      Line Input #hFile, sOneLine
      If sOneLine <> last_line Then
         last_line = sOneLine
         If InStr(soneline, "{\"salutation\": \"Sir/Madam\", \"surname\":") 
            If Not InStr(sOneline, "surname\": \"Dr ") Then 
               If Not InStr(sOneline, "salutation\": \"Dr ") Then 
                  possible_companies.Add(soneline, possible_companies.count)
               End If   
            End If
         Else
            If Not InStr(sOneline, "firstname") Then
               If Not InStr(sOneline, "surname\": \"Dr ") Then 
                  If Not InStr(sOneline, "salutation\": \"Dr ") Then 
                     Print soneline
                     possible_companies.Add(soneline, possible_companies.count)
                  End If   
               End If   
            Else
               json_lines.Add(soneline, contacts.count)
               contacts.Add(JSON.decode(sOneLIne), contacts.count)
            End If  
         End If   
      Else
         Inc duplicate_line_count
      Endif
      
   Wend
   Close #hFile
   'now eliminate duplicate lines
   Print duplicate_line_count
   Print possible_companies
   
   hFile = Open "/home/richard/contacts_json_unique.txt" For Write Create
   For x = 0 To json_lines.count - 1
      Print #hfile, json_lines[x]
   Next
   Close #hFile
   hFile = Open "/home/richard/contacts_possible_companies.txt" For Write Create
   For x = 0 To possible_companies.count - 1
      Print #hfile, possible_companies[x]
   Next
   Close #hFile
   
   Import(contacts, json_lines) '
   Print JSON
   
End

Public Sub Import(contacts As Collection, json_lines As Collection)
   
   Dim person As CRow
   Dim persons As New Collection
   Dim address_Link As CRow
   Dim link_person_comm As CRow
   Dim address As CRow
   Dim sql As String
   Dim contact As Collection
   Dim x As Integer
   Dim fk_occupation As Integer
   Dim occupation As Collection
   Dim R As Result
   Dim fk_title As Integer
   Dim sMsg As String
   Dim bOddOccupation As Boolean
   Dim OddRecords As New Collection 
   Dim oddoccupations As New String[]
   Dim Notpersons As New Collection 
   Dim rejected_records As New Collection
   Dim hFile As File
   Dim brejected As Boolean
   Dim communications As Collection
   Dim communication_row As String
   Dim communication As CRow  
   Dim Town As String
   
   missing_towns = New Collection
   
   For Each contact In contacts
      
      brejected = False
      person = New CRow
      person!firstname = contact!person!firstname
      R = modDBConnect.exec_query("Select sex from contacts.lu_firstnames where firstname ILIKE $$" & Trim(person!firstname) & "$$")
      If R.count Then
         Select Case R!sex                
            Case "m"
               person!fk_sex = const.cSexMale
            Case "f"
               person!fk_sex = const.cSexFemale
         End Select
         
      Else
         person!fk_sex = const.cSexUnknown
      Endif
      person!surname = contact!person!surname
      Select Case Lower(Replace(contact!person!title, ".", ""))
         Case "dr"
            fk_title = const.ctitleDr
         Case "mr"
            fk_title = const.ctitleMr
         Case "mrs"
            fk_title = const.ctitleMrs
         Case "ms"
            fk_title = const.ctitleMs
         Case "master"
            fk_title = const.ctitleMaster
         Case "miss"
            fk_title = const.ctitleMiss
         Case "prof"
            fk_title = const.ctitleProf
         Case Else 
            Select Case person!fk_sex
               Case const.cSexMale
                  fk_title = const.ctitleMr
               Case const.cSexFemale
                  fk_title = const.ctitleMs
            End Select
            If fk_title <> const.ctitleMr Or fk_title <> const.ctitleMs Then
               fk_title = const.ctitleUnKnown
               smsg = "Firstname:" & contact!person!firstname & "\n"
               smsg &= "Surname:" & contact!person!surname & "\n\n"
               Select Case Message.question(sMsg & "\n\nTitle is missing.\n\nPlease confirm this is a person, they will be given title 'unknown'", "Confirm - is a person", "No - not a person")
                  Case 2 
                     Notpersons.Add(contact, Notpersons.count)
                     brejected = True
                     rejected_records.Add(json_lines[x], rejected_records.count)
               End Select
            End If   
      End Select
      If Not brejected Then   
         person!fk_title = fk_title 
         bOddOccupation = False   
         R = modDBConnect.exec_query("Select * from common.lu_occupations where occupation ILIKE $$" & Trim(Lower(contact!occupation)) & "$$")
         If R.count Then
            person!fk_occupation = R!pk
         Else           
            If Not oddoccupations.Exist(Trim(Lower(contact!occupation))) Then 
               Select Case Message.Question("Occupation not found:\n\n" & contact!occupation, "Save As New Occupation", "Do Not save")
                  Case 1 
                     person!fk_occupation = modContactsDBI.Occupation_Save(Trim(Lower(contact!occupation)))
                     modDBConnect.CommitTrans
                  Case 2
                     bOddOccupation = True        
                     oddoccupations.Add(Trim(Lower(contact!occupation)), oddoccupations.count)    
               End Select
            Else 
               bOddOccupation = True   
               
            End If   
         Endif
         If bOddOccupation = False Then
            persons.Add(person, persons.count)
         Else
            OddRecords.Add(person, OddRecords.count)
            brejected = True 
            rejected_records.Add(json_lines[x], rejected_records.count)
         End If   
      End If  
      
      '---------------------------------
      'At this point have a valid person
      'now lets go for the address, Horst data is very very dirty
      'examples
      'town field could have town + postcode
      'the town could be ok, but the state missing
      'the town could be ok but the postcode is wrong
      '----------------------------------------------------
      If Not brejected And Not IsNull(contact!addresses) Then
         address = New CRow
         '-------------------------------------------------------------
         'first, lets go for a unique australian town.
         'town_Cleanup(contact!addresses!town)cleanup crap in the names
         '-------------------------------------------------------------
         sql = "Select * from contacts.lu_towns where town ilike $$" & town_Cleanup(contact!addresses!town) & "$$ AND comment is null"
         R = modDBConnect.exec_query(sql)
         If r.count = 1 Then
            address = town_Make(R, contact)
         Else      
            '-----------------------------------------------------------------------------------------------------
            'ok, bombed on that, there could be none or > 1, try town + state as I've noted postcodes can be wrong
            '-----------------------------------------------------------------------------------------------------
            If Not IsNull(contact!addresses!state) Then 
               sql = "Select * from contacts.lu_towns where town ilike $$" & town_Cleanup(contact!addresses!town) & "$$ AND comment is null "        
               sql &= " AND state = $$" & Trim(contact!addresses!state) & "$$"
               R = modDBConnect.exec_query(sql)
               If R.count = 1 Then  
                  address = town_Make(R, contact)
               Endif
            Else   
               '----------------------------------
               'ok, no state, try town + postcode
               '-----------------------------------
               If Not IsNull(contact!addresses!postcode) Then  
                  sql = "Select * from contacts.lu_towns where town ilike $$" & town_Cleanup(contact!addresses!town) & "$$ AND comment is null "     
                  sql &= " AND postcode = $$" & Trim(contact!addresses!postcode) & "$$"
                  R = modDBConnect.exec_query(sql)
                  If R.count = 1 Then
                     address = town_Make(R, contact)
                  End If
               End If 
            End If  
            If Not address.count Then    
               '----------------------------------------------------
               'At this point we have not town, need user input
               'ok, failed, use popup and get use to add the town
               'We'll look first in previously saved mis-spelt town
               '----------------------------------------------------
               misspelt_town = modContactsDBI.Misspelt_towns_Get(contact!addresses!town) 
               If Not IsNull(misspelt_town) Then 
                  address = New CRow
                  address!fk_town = misspelt_town!fk_town
                  address!street1 = contact!addresses!street1 
                  address!street2 = contact!addresses!street2
                  address!fk_lu_address_type = const.AddressType_Work
               End If   
               If address.count = 0 And Not IsNull(contact!addresses!town) Then
                  '------------------- Endif---------------------------------------------------------
                  'not previously encoutered it, ok give user the popup dialog let them find it
                  '----------------------------------------------------------------------------
                  
                  '   If IsNull(misspelt_towns)
                  ' bSkipTown = False    'First check if we have encountered this town previously this sesion, found no equivalent, and marked to skip
                  ' For Each skipped_town In skipped_towns
                  '   If Lower(skipped_town) = Lower(contact!addresses!town) Then
                  '       bSkipTown = True
                  '       Break
                  '   Endif
                  ' Next
                  '    If bSkipTown = False Then       'this is a new one  popup the dialog, let user choose             
                  fk_town = 0
                  misspelt_town = New Collection
                  misspelt_town!town_misspelt = contact!addresses!town
                  FSelectTown.txtNotFound.text = contact!addresses!town
                  FSelectTown.txtFirstname.text = person!firstname
                  FSelectTown.txtSurname.text = person!surname
                  FSelectTown.txtstreet1.text = contact!addresses!street1
                  FSelectTown.txtstreet2.text = contact!addresses!street2
                  FSelectTown.Init(contact!addresses)
                  Dec Application.Busy
                  FSelectTown.ShowModal()                         'get the data,if user did allocate valid town, fk_town > 0
                  Print contact!addresses
                  Inc Application.Busy
                  If fk_town Then
                     '------------------------------------------------------------------------------------------   
                     'if the user allocated a town, fill the address collection
                     'then save the misspelt town to the backend, along with the correct key to the correct town
                     '------------------------------------------------------------------------------------------
                     address = New CRow
                     address!fk_town = fk_town
                     address!street1 = contact!addresses!street1
                     address!street2 = contact!addresses!street2
                     address!fk_lu_address_type = const.AddressType_Work
                     misspelt_town!fk_town = fk_town             'the real town
                     misspelt_town!town = Corrected_Town!town 
                     misspelt_town!town_misspelt = contact!addresses!town 'the mis-spelt town
                     modDBConnect.BeginTrans
                     modDBConnect.insert("contacts.lu_misspelt_towns", misspelt_town)
                     modDBConnect.CommitTrans
                  End If
               Else  'null town.
                  brejected = True  
                  rejected_records.Add(json_lines[x], rejected_records.count)
               End If
               If address.count = 0 Then
                  brejected = True  
                  rejected_records.Add(json_lines[x], rejected_records.count)
               End If 
            End If     
         Endif
         
      End If  
      If Not brejected And Not IsNull(contact!communications) Then 
         communications = New Collection
         If Not IsNull(contact!communications!phone_business) Then
            communication = New CRow
            communication!fk_type = const.CommModalityWork
            communication!value = contact!communications!phone_business
            communications.Add(communication, communications.count)
         Endif
         If Not IsNull(contact!communications!phone_afterhours) Then
            communication = New CRow
            communication!fk_type = const.CommModalityPhoneAfterHours
            communication!value = contact!communications!phone_afterhours
            communications.Add(communication, communications.count)
         Endif
         If Not IsNull(contact!communications!fax_no) Then
            communication = New CRow
            communication!fk_type = const.CommModalityFax
            communication!value = contact!communications!fax_no
            communications.Add(communication, communications.count)
         Endif
         If Not IsNull(contact!communications!web) Then
            communication = New CRow 
            communication!fk_type = const.CommModalityWeb
            communication!value = contact!communications!web
            communications.Add(communication, communications.count)
         Endif
         If Not IsNull(contact!communications!email) Then
            communication = New CRow
            communication!fk_type = const.CommModalityEmail
            communication!value = contact!communications!email 
            communications.Add(communication, communications.count)
         Endif
      Endif
      If Not brejected Then
         '---------------
         'save the record 
         '---------------
         person.Save("contacts.data_persons", "fk_person")
         address.Save("contacts.data_addresses", "fk_address")
         address_link = New CRow   
         address_link!fk_person = person!fk_person
         address_link!fk_address = address!fk_address
         address_link.Save("contacts.links_persons_addresses", "fk_link_person_address")
         For Each communication In communications
            communication.Save("contacts.data_communications", "fk_comm")
            link_person_comm = New CRow 
            link_person_comm!fk_person = person!fk_person
            link_person_comm!fk_comm = communication!fk_comm
            link_person_comm.Save("contacts.links_persons_comms", "fk_link_person_comm")
         Next
      Endif
      Inc x
      ' If rejected_records.count = 2 Then
      ' 
      '  Print x
      '  Print person
      '  Break
      ' End If   
   Next
   If Message.Question("Happy?", "Yes", "No") = 1 Then 
      modDBConnect.CommitTrans
   End If   
   Print persons
   Print OddRecords
   Print Notpersons
   
   hFile = Open "/home/richard/horst_json_rejected.txt" For Write Create
   For x = 0 To rejected_records.count - 1
      Print #hfile, rejected_records[x]
   Next
   Close #hfile
   
End

' Public Const const.ctitleMr As Integer = 0
' Public Const const.ctitleMrs As Integer = 1
' Public Const const.ctitleMaster As Integer = 2
' Public Const const.ctitleMiss As Integer = 3
' Public Const const.ctitleDr As Integer = 4
' Public Const const.ctitleProf As Integer = 5
' Public Const const.ctitleMs As Integer = 6
' Public Const const.ctitleUnKnown As Integer = 7

' person
'   Salutation
'   surname
'    some are weird eg 'the healing centre'
'   firstname
'   title
' communications
'   phone_business
'   fax_no
'   phoneafterhours 
'     eg could be a mobile whose comment should then be 'after hours'
'     need to strip out town names eg some Taree nnnnnnn
'   email - need to make these all lower case
' "huntercardio@hunterlink.nat.au - has multiple occurrences
'   web - but weird entries eg  oversea's numbers ('in korea')
' ocupation
'  some are weird eg 'sleep clinic' is not an occupation or 'cancer services'
' "NURSING HOME;COMMUNITY CARE; HOSTEL"
' id
'   num
' addresses
'   town
'   street1
'   street2
'   postcode
' 
Public Sub town_Cleanup(town As String) As String
   'lots of horsts towns have multiple ascii 32's and some have full stops
   
   town = Replace(town, ".", " ")
   Return modUtil.StripExtraBlanks(town)
   
End

Public Sub town_Make(R As Result, contact As Collection) As CRow
   
   Dim address As New CRow
   
   address!fk_town = r!pk
   address!street1 = contact!addresses!street1
   address!street1 = contact!addresses!street2
   address!fk_lu_address_type = const.AddressType_Work
   Return address
   
End
'            '-------------------------------------------------------
'                   missing_towns.Add(bits[iSuburb], missing_town_count)
'                   Inc missing_town_count
'                   Print #hLogfile, person!firstname & " " & person!surname & " - failed to match suburb:" & address!suburb & " checking misspelt towns table for match...."
'                   C = modContactsDBI.Misspelt_towns_Get(address!suburb)
'                   If IsNull(c)
'                      If chkPromptForPostcodes.value = True Then 
'                         'First check if we have encountered this, found no equivalent, and marked to skip
'                          bSkipTown = False  
'                          For Each skipped_town In skipped_towns
'                            If Lower(skipped_town) = Lower(address!suburb) Then
'                                bSkipTown = True
'                                Print #hLogfile, person!firstname & " " & person!surname & " - skipping suburb - not found previously"
'                                Break
'                            Endif
'                          Next
'                          If bSkipTown = False Then                 
'                        
'                            misspelt_town = New Collection
'                            misspelt_town!town_misspelt = address!suburb
'                            FSelectTown.txtNotFound.text = address!suburb
'                            FSelectTown.txtFirstname.text = person!firstname
'                            FSelectTown.txtSurname.text = person!surname
'                            FSelectTown.txtbirthdate.text = person!birthdate
'                            FSelectTown.txtstreet1.text = address!street
'                            Dec Application.Busy
'                            FSelectTown.ShowModal()
'                            Inc Application.Busy
'                            If FSelectTown.fk_town Then
'                               address!fk_town = FSelectTown.fk_town
'                               misspelt_town!fk_town = FSelectTown.fk_town
'                               misspelt_town!town = FSelectTown.town
'                               modDBConnect.BeginTrans
'                               modDBConnect.insert("contacts.lu_misspelt_towns", misspelt_town)
'                               modDBConnect.CommitTrans
'                            Else
'                                Print #hLogfile, person!firstname & " " & person!surname & " - no suburb selected for substitution"
'                                Inc Errorcount
'                            End If
'                          End If
'                          Inc Errorcount
'                          iError = True
'                      End If
