' Gambas module file

' Copyright (C) 2013-2014 Dr. Ian Haywood

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

' ---------------------------------------------------------------------
' this file controls access to the files in the document store and elsewhere
' abstracts out whether we accessing through the database or the local filesystem

Public Const DirNotAvail As Byte = 0
Public Const DirLocal As Byte = 1
Public Const DirRemote As Byte = 2

Private sFoundDir As String

Public Function Dir_Status(config As String, Optional fk_clinic As Integer = 0) As Byte
    Dim c As Collection
    
    c = modAdminDBI.Config_Get_Full(config, fk_clinic)
    If IsNull(c) Then Return DirNotAvail
    If c!value = "*notused*" Then Return DirNotAvail
    If Access(c!value, gb.read And gb.write) Then 
       sFoundDir = c!value
       Return DirLocal
    Endif
    sFoundDir = Settings["Files/" & config, Null]
    If Not IsNull(sFoundDir) And If Access(sFoundDir, gb.Read And gb.Write) Then
       Return DirLocal
    Endif
    If c!server_dir Then 
      sFoundDir = c!value
      Return DirRemote
    Endif
    Return DirNotAvail
    
End

' returns true if a directory is available either by direct filesystem or server-side, false if not
Public Function Dir_Working(config As String, Optional fk_clinic As Integer = 0) As Boolean
 
   If Dir_Status(config, fk_clinic) = DirNotAvail Then Return False
   Return True
    
End


' takes the name of the config option for the directory (e.g. "document_archiving_directory")
' and the filename
' returns a *local* pathname with a copy of the file
' WARNING: this function will crash out if the file doesn't exist
Public Function Get(config As String, fname As String) As String

   Dim s As String
   Dim r As Result

   If Dir_Status(config) = DirRemote Then
      ' we need to grab from the remote filesystem
      s = Temp$ & "." & Right$(fname, - RInStr(fname, ".")) ' make the temp name have the same ending as the original file
      'r = modDBConnect.exec_query("select load_file(&1,&2) as data", [config, fname])
      'File.Save(s, r!data.Data)
      modDBConnect.Scp_Download(sFoundDir &/ fname, s)
      Return s
   Else
      s = sFoundDir &/ fname
      If Not Exist(s) Then
         Message.Error(Subst$("File &1 doesn't exist on the local filesystem", s)) 
         Error.Raise("File " & s & " does not exist")
      Endif
      Return s
   Endif

End

' puts a file in a remote filestore
' fname is the name you want it to have remotely
' local_filename is the local name (so this function does a name change on the file "for free")
Public Sub Put(config As String, fname As String, local_filename As String, Optional task As CShellTask)
   
   If Dir_Status(config) = DirRemote Then
      If IsNull(task) Then
         modDBConnect.Scp_Upload(local_filename, sFoundDir &/ fname)
      Else
         task.Send(modDBConnect.Scp_Upload_Cmd(local_filename, sFoundDir &/ fname))
      Endif
   Else
      retry_copy_dir:
      If Not Access(sFoundDir, gb.Read And gb.Write) Then
         Wait 2
         If Not Access(sFoundDir, gb.Read And gb.write) Then
            If Message.Warning("I cannot access directory " & sFoundDir, "Try Again", "Bug Out") = 1 Then
               Goto retry_copy_dir
            Else
               Error.Raise("cannot access " & sFoundDir)
            Endif
         Endif
      Endif
      retry_copy_file:
<<<<<<< .mine
      If Not Access(local_filename, gb.Read) Then
         Wait 2
         If Not Access(local_filename, gb.Read) Then
            If Message.Warning("I cannot access file " & local_filename, "Try Again", "Bug Out") = 1 Then
               Goto retry_copy_file
            Else
               Error.Raise("cannot access " & local_filename)
            Endif
         Endif
      Endif
      'If Not Access(local, gb.Read) Then
      '   Wait 2
      '   If Not Access(local, gb.Read) Then
      '      If Message.Warning("I cannot access file " & local, "Try Again", "Bug Out") = 1 Then
      '         Goto retry_copy_file
      '      Else
      '         Error.Raise("cannot access " & local)
      '      Endif
      '   Endif
      'Endif
      fname = sFoundDir &/ fname
      Log.DebugMsg(Subst$("trying to copy &1 to &2", local_filename, fname))
      If Not IsNull(task) Then
         Task.Send(Subst$("cp '&1' '&2'", local_filename, fname))
         Task.Send(Subst$("chmod 664 '&1'", fname))
      Else
         Copy local_filename To fname
         Chmod fname To "rw-rw-r--"
      Endif
   Endif

End

' return a list of all files in the directory
' don't do this on "document_archiving_directory" as it will have too many file
' it should cope with subdirectories: it lists all the files in them too
Public Sub List(config As String) As String[]

   Dim r As Result
   Dim ret As String[]
   
   If Dir_Status(config) = DirRemote Then
      ret = New String[]
      r = modDBConnect.exec_query("select list_files(&1) as fname", [config])
      For Each r
         ret.Add(r!fname)
      Next
      Return ret
   Else
      Return Dir(sFoundDir)
   Endif

End

' deletes a file on the server in the directory specified in the config
' remember it acts as athe "postgres" user there: UNIX permissions must be set correctly.
Public Sub Delete(config As String, fname As String)
   
   If Dir_Status(config) = DirRemote Then
      modDBConnect.exec_query("select delete_file(&1,&2)", [config, fname])
   Else
      Kill sFoundDir &/ fname
   Endif

End

' unit tests
Public Sub UnitTest(form_main As FMain)

   Dim files As String[]

   Put("document_scanning_directory", "foo.pdf", "/home/ian/final-quantitative.pdf")
   Get("document_scanning_directory", "foo.pdf")
   files = List("document_scanning_directory")
  Delete("document_scanning_directory", "foo.pdf")
End
