' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
Private $himage As Image
Private sPath As String 
Private pic_original As Picture 
Private pic_modified As Picture
Private orig_height As Integer
Private orig_width As Integer 
Private sCurrentpath As String 
Private bHasBorder As Boolean       'If true the picture already has a border

Public Sub Run() As Boolean

  Return Not Me.ShowModal()

End

Public Sub Set_Image(I As Image)
   $himage = I
End
Public Sub Form_Open()
   '--------------------------------------------------------------------
   'When first opened, the image may have been pre-loaded in set_image()
   'So attempt to load this image into the picture box
   '--------------------------------------------------------------------
   Picture_Load()
End

Public Sub Picture_Load()
  '-------------------------------------- 
  'Loads the picture into the picture box
  '--------------------------------------
   If Not IsNull($hImage) Then
     Inc Application.Busy
     sPath = Temp() & ".png"
     $hImage.Save(sPath)
     
     Picturebox1.Picture = Picture.Load(sPath)
     Wait
     Picturebox1.tag = sPath
     pic_original = Picture.Load(sPath)

     orig_height = Picturebox1.Picture.height
     orig_width = Picturebox1.Picture.width
      Dec Application.Busy
   End If
End

Public Sub btnOK_Click()
  $hImage = Image.Load(Picturebox1.tag)
  Clipboard.Copy($hImage)
  Me.Close()
 End

Public Sub btnCancel_Click()
  Me.Close
End


Public Sub tbGetPicture_Click()
   '---------------------------------
   'Load an image from the filesystem
   '---------------------------------
   Dim pic As Picture
   Dim tempfile As String
   $hImage = New Image
   Dialog.Title = "Select Image File"
   Dialog.Filter = ["*.png", "Image Files", "*", "All files"]
   If Dialog.OpenFile() Then
          Return
   End If   
   Try $hImage = Image.Load(Dialog.Path)
   'spath = modUtil.filepath_fix_Blanks(Dialog.Path)
   Picture_Load()
End

Public Sub Picture_Update(picpath As String)
   Picturebox1.Picture = Picture.Load(picpath)
   ' Not bHasBorder Then
          Picturebox1.tag = Picpath 
  ' End If   
End


Public Sub slider_Image_size_Change()
   '-------------------------------------------------
   'Re-size the image, minimum size = 10% of original
   '-------------------------------------------------
   Dim new_h As Integer
   Dim new_w As Integer
 '  chkAddBorder.value = False
   New_H = Max(orig_height / 10, orig_height / (1000 / slider_Image_size.value))
   New_W = Max(orig_width / 10, orig_width / (1000 / slider_Image_size.value))
   Inc Application.Busy
   Shell "convert " & sPath & " -resize " & Str(New_H) & "x" & Str(New_W) & " /tmp/modified.png" Wait
   Picture_Update("/tmp/modified.png")
    Dec Application.Busy
   chkAddBorder_Click()
  
End

Public Sub slider_brightness_Change()
   '-------------------------------------------------------------
   'Lighten/Darken currently no rationale for the slider settings
   '-------------------------------------------------------------
    Inc Application.Busy
   Shell "convert " & "/tmp/modified.png" & " -modulate " & Str(slider_brightness.value) & " /tmp/brightness_modified.png" Wait
   Picture_Update("/tmp/brightness_modified.png")
    Dec Application.Busy
   chkAddBorder_Click()
  
End 

Public Sub chkAddBorder_Click()
   '-------------------
   'Adds a black border
   '-------------------
   If chkAddBorder.value = True And bHasBorder = False Then 
      Inc Application.Busy
      Shell "convert " & Picturebox1.tag & " -bordercolor Black -border 2x2 /tmp/border.png" Wait
     ' bHasBorder = True
      Dec Application.Busy
      Picture_Update("/tmp/border.png")
   Else
      Picture_Update(Picturebox1.tag) 'fixme dosn't reload a brightness modified picture
  End If 
End


Public Sub HBox3_MouseDown()

  

End
