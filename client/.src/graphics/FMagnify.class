' Gambas class file

' Copyright (C) 2011 Dr. Richard Terry, Shane Powell

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'Don't delete this module = used to dump all schema and tables into the audit schema.
'Updating this will break your database, so only do this if you know what you are doing.
'-----------------------------------------------------------------------------------------------------------------
' PURPOSE            Magnify images
' ACKNOWLEDGEMENTS   Based on a prototype submitted to the gambas user lists by Richard Terry
'                    Developed with advice from Fabian Bodard And From the gambas samples
'                    The full functionality of this prototype module can be attributed to the work of Shane Powell
'                    Shane Powell <shanep@supernerd.com.au>
'                    Fabien Bodard <gambas.fr@gmail.com>
'                    gambas users <gambas-user@lists.sourceforge.net> (see for the archival trail of development)
' TODO               Just about everything! to integrate this into an image viewer.
'----------------------------------------------------------------------------------------------------------------

Public img As Image
Private baseimg As Image
Private img2 As New Image
Private MX As Integer
Private MY As Integer
Private offsetX As Integer = 0
Private offsetY As Integer = 0
Private Radius As Float = 100
Private Zoom As Float = 1
Private img_loaded As Boolean = False
Private bLens As Boolean
Private Path As String
Private aspect As Float

Public Sub DrawingArea1_Draw()
   
   Dim hBrush As PaintBrush
   Print DrawingArea1.Width, "is the width"
   If img_loaded
      Draw.Begin(DrawingArea1)
      Draw.Image(img, offsetX, offsetY)
      Draw.Foreground = color.white 
      Draw.Text("X: " & mx & "  Y: " & my, 10, 10)
      Draw.Text("Base Img Width " & baseimg.Width & " Height " & baseimg.Height, 10, 25)
      Draw.Text("Img Width " & img.Width & " Height " & img.Height, 10, 40)
      Draw.Text("Aspect " & aspect, 10, 55)
      Draw.Text("Zoom: " & Str(Abs(zoom)), 10, 70)
      Draw.Foreground = color.Black
     
     
      Draw.End
      hBrush = Paint.Image(img2)
      hBrush.Translate(mx - Radius * zoom, my - Radius * zoom)
      hBrush.Scale(Zoom, Zoom)
      Paint.Arc(MX, MY, Radius * 1.0)
      Paint.Brush = Paint.Color(Color.DarkRed)
      Paint.Fill(True)
      Paint.Brush = Paint.Color(Color.Black)
      Paint.Stroke
      Paint.Brush = hBrush
      Paint.Arc(MX, MY, Radius)
      Paint.Fill(True)
      Paint.Brush = Paint.Color(Color.Black)
      Paint.Stroke
   Endif
   
End

Public Sub DrawingArea1_MouseMove()
   
   bLens = True
   mx = Mouse.X
   my = Mouse.Y
   
   If img_loaded Then
      img2 = baseimg.Copy((mx / aspect) - Radius, (my / aspect) - Radius, Radius * 2, Radius * 2)
      DrawingArea1.Refresh
   Endif
   
End

Public Sub OpenMenu_Click()
   
   Dim cmd As String
   
   Dialog.Title = "Open Image File"
   Dialog.Path = User.Home
   Dialog.Filter = ["*.png;*.jpg;*.jpeg;*.gif", "All Image Files"]
   If Dialog.OpenFile() Then
      Return
   Endif
   Try Picture_Load(Dialog.path)
   
End

Public Sub Picture_Load(sPath As String)
   
   Try baseimg = Image.Load(sPath)
   img = ScaleImage(baseimg, DrawingArea1.Width, DrawingArea1.Height)
   img_loaded = True
 
   DrawingArea1.Refresh
Catch
   Message.Error(Error.Text, "Ok")
   
End

Public Sub ExitMenu_Click()
   
   Me.Close
   
End

Public Sub DrawingArea1_MouseWheel()
   
   If Mouse.Delta = -1 Then
      zoom = Max(Zoom - 0.1, 1)
   Else
      zoom = Min(zoom + 0.1, 4)
   End If
   
End

Public Sub DrawingArea1_Enter()
   
   DrawingArea1.Refresh
   
End

Public Function ScaleImage(img As Image, width As Integer, height As Integer) As Image

   Dim nheight As Integer
   Dim nwidth As Integer
   
   aspect = Min(width / img.Width, height / img.Height)
   nwidth = img.Width * aspect
   nheight = img.Height * aspect
   
   Return img.Stretch(nwidth, nheight)
   
End

Public Sub Form_Resize()
   
   If img_loaded
      img = ScaleImage(baseimg, DrawingArea1.Width, DrawingArea1.Height)
   Endif
   
End
