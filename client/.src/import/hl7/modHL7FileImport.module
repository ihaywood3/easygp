' Gambas module file

' Copyright (C) 2008-2014 Dr. Richard Terry, Dr. Ian Haywood
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'--------------------------------------------------------------------------
' contains the routines for scanning directories and  importing into the DB
'This is what gets called as a script on the server
'--------------------------------------------------------------------------
Private importdir As String
Private processing_log As String[]
Private pb As Progressbar
Private notification_panel As Panel
Private lblImport As Label
Private global_filename_temp As String

Public Sub Set_Notification_Panel(pnl As Panel)
   
   notification_panel = pnl
   
End

Public Sub Auto_Process()
   '------------------------------------------------------
   'Using a list of all the providers in the system,
   'check their incoming dictories and process the file
   'Get the information for handling the different types of hl7 messages
   'eg incoming_dir could be douglass or medical objects
   '--------------------------------------------------------------------
   
   importdir = modAdminDBI.Config_Get("hl7_incoming_directory", "/var/lib/easygp/hl7/incoming")
   If Access(importdir, gb.exec Or gb.Write) Then    
      If Not Access(importdir &/ "processed", gb.Exec Or gb.Write) Then
         Mkdir importdir &/ "processed"
      Endif
      If Not Access(importdir &/ "processed/errors", gb.Exec Or gb.Write) Then
         Mkdir importdir &/ "processed/errors"
      Endif
   Else
      Goto NoAccessError
   End If 
   pb = notification_panel.Children[1] '                                   'reset the progress bar
   lblImport = notification_panel.Children[0]
   pb.value = 0.0 
   pb.Refresh
   Process_Dir_Or_File(importdir)
   notification_panel.Visible = False  
   Return
NoAccessError:
   Message.Title = "Importing Documents or HL7"
   Message.info("EasyGP was not able to access the directories necessary to allow you to import hl7 or scanned documents.\n\n"
   "Please check your Admin.Global Settings")
Catch
   Message.info("An error occurred whilst trying to import new hl7 files.\n\nPlease contact the system administrator for assistance.") 
   
End Sub

Private Sub Process_Dir_Or_File_orig(fname As String)
   '------------------------------------------------------------------------
   'Read the files in each of the child directories with hl7 messages
   'If the dir is not error/ or processed/ then process the file is not a dir
   'Failure to read the file, or properly parse, or move to destination dir
   'will cause bugging out and moving to error dir
   '--------------------------------------------------------------------------
   
   Dim sFile As String
   Dim hl7 As CHL7
   Dim typ As String
   Dim i As String
   Dim f As File
   Dim s As String
   Dim l As Integer
   Dim processing_log_entry As String
   Dim filecount As Integer
   Dim x As Integer 
   
   If IsDir(fname) Then
      If (fname = "errors") Or (fname = "LOG") Or (fname = "send") Or (fname = "error") Then ' ignore healthlink crap
         Return
      Endif
      For Each sFile In Dir(fname)
         If File.Ext(sFile) <> "" Then
            If Left(sfile) <> "." Then Inc Filecount
         Endif
      Next
      notification_panel.Visible = filecount    
      Wait  
      For Each sFile In Dir(fname)
         If Left$(sFile, 1) = "." Then  'ignore hidden files
            Continue
         Endif
         If Left$(sFile, 3) = "DHM" Then  'ignore crap Fetch downloader puts into the incoming directory
            Continue
         Endif
         If Right$(sFile, 4) = ".txt" Or Right$(sFile, 4) = ".htm" Or Right$(sFile, 4) = ".ico" Or Right$(sFile, 4) = ".xml" Or Right$(sFile, 4) = ".zip" Then ' ignore crap blasted healthlink/sonic dumps into hl7 directory
            Continue
         Endif
         i = Lower$(fname &/ sFile)                                        'List all files or subdirectories in the root
         If Not InStr(i, "errors") And If Not InStr(i, "processed") Then  'if not in error or processee
            Inc x
            pb.value = x / filecount
            pb.Refresh()
            lblImport.text = "Importing HL7 Files (" & Str(x) & " of " & Str(filecount) & ")  "
            Wait
            Process_Dir_Or_File(fname &/ sFile)                            'try again, this time could be a file
         End If
      Next
   Else  'yes, its a file, try and load it
      typ = "unk"
      f = Open fname For Read
      l = Lof(f)
      Log.DebugMsg("trying to read " & fname & " it is " & l & " bytes long")
      If l < 4 Then
         Log.WarningMsg("skipping " & fname & " as it is too short to contain anything useful")
         Move fname To importdir &/ "processed/errors" &/ modUtil.filepath_fix_Blanks(File.Name(fname))
      Else
         i = Read #f, 3 ' "taste" the file to find type
         Seek #f, 0
         Select Case i
            Case "001" 
               Log.DataMsg(Subst$("decided &1 is PIT by header", fname))
               typ = "pit"
            Case "FHS", "BHS", "MSH"
               Log.DataMsg(Subst$("decided &1 is HL7 by header", fname))
         End Select
         If typ = "unk" Then
            Select Case Lower$(Right$(fname, 4))
               Case ".pit"
                  Log.DataMsg(Subst$("decided &1 is PIT by suffix", fname))
                  typ = "pit"
               Case ".hl7", ".oru"
                  Log.DataMsg(Subst$("decided &1 is HL7 by suffix", fname))
                  typ = "hl7"
            End Select
         Endif
         If typ = "pit" Then
            If IsNull(f) Then f = Open fname For Read
            processing_log = PITImporter.Import(f, File.Name(fname))
            Close #f
         Else  ' at the moment try to parse as HL7 if not clearly PIT
            i = Read #f, Lof(f)
            Close #f
            hl7 = New CHL7(i)
            Try Processing_Log.Clear()
            Process_File(hl7, fname)
         Endif
         Move fname To importdir &/ "processed" &/ modUtil.filepath_fix_Blanks(File.Name(fname))
         processing_log.Add("Executed: Move " & fname & " to " & "processed" &/ modUtil.filepath_fix_Blanks(File.Name(fname)))
         modDBConnect.CommitTrans()
         processing_log.Add("Transaction committed")
      Endif 
   End If 
   
Catch
   Message.Info("Richard - an error " & fname)
   i = "HL7 File Processing Error: " & fname & "\n"
   i &= "Error Message: " & Error.Text & "\n " & "Backtrace:\n" & Error.Backtrace.Join("\n") & " (" & fname & ")"
   i &= "\n\nThe processing log was:\n\n"
   For Each processing_log_entry In Processing_Log
      i &= processing_log_entry & "\n"
   Next
   Print #File.Err, i
   Log.ErrorMsg(i)
   s = modAdminDBI.Config_Get("admin_email", Null)
   If Not IsNull(s) Then
      '   Message.Error("There was an error processing this file:\n\n" & fname & "\n\nthis will be reported to the Adminstrator at the following mail address:\n\n" & s)
      cEmailTask.Send_Email_Easy(s, "EasyGP HL7file import error", i)
   Else
      Message.Error(i)
   Endif
   Try Move fname To importdir &/ "processed/errors" &/ modUtil.filepath_fix_Blanks(File.Name(fname))
   If Error Then
      i = "Error of " & Error.Text & " moving " & fname & " to " & importdir &/ "/processed/errors/ (" & Error.Text & ")"
      Print #File.Err, i
      Log.ErrorMsg(i)
      i &= "\n\n" & "There was an error moving this file to the error directory:\n\n" & fname & "\n\nthis will be reported to the Adminstrator at the following mail address:\n\n" & s
      If Not IsNull(s) Then
         cEmailTask.Send_Email_Easy(s, "EasyGP HL7file import error", i)
      Endif
   End If
   
   modDBConnect.RollBack()
   
End Sub

Private Sub Process_Dir_Or_File(fname As String)
   '------------------------------------------------------------------------
   'Read the files in each of the child directories with hl7 messages
   'If the dir is not error/ or processed/ then process the file is not a dir
   'Failure to read the file, or properly parse, or move to destination dir
   'will cause bugging out and moving to error dir
   '--------------------------------------------------------------------------
   
   Dim sFile As String
   Dim hl7 As CHL7
   Dim typ As String
   Dim i As String
   Dim f As File
   Dim s As String
   Dim l As Integer
   Dim processing_log_entry As String
   Dim filecount As Integer
   Dim x As Integer 
   Dim R As Result
   Dim unique_filename_key As Integer 
   Dim unique_filename As String
   
   If IsDir(fname) Then
      If (fname = "errors") Or (fname = "LOG") Or (fname = "send") Or (fname = "error") Then ' ignore healthlink crap
         Return
      Endif
      For Each sFile In Dir(fname)
         If File.Ext(sFile) <> "" Then
            If Left(sfile) <> "." Then Inc Filecount
         Endif
      Next
      notification_panel.Visible = filecount    
      Wait  
      For Each sFile In Dir(fname)
         If Left$(sFile, 1) = "." Then  'ignore hidden files
            Continue
         Endif
         '   If Left$(sFile, 3) = "DHM" Then  'ignore crap Fetch downloader puts into the incoming directory
         If sfile = "DSPpend.htm" Then  'ignore crap Fetch downloader puts into the incoming directory
            Continue
         Endif
         If Right$(sFile, 4) = ".txt" Or Right$(sFile, 4) = ".htm" Or Right$(sFile, 4) = ".ico" Or Right$(sFile, 4) = ".xml" Or Right$(sFile, 4) = ".zip" Then ' ignore crap blasted healthlink/sonic dumps into hl7 directory
            Continue
         Endif
         i = Lower$(fname &/ sFile)                                        'List all files or subdirectories in the root
         If Not InStr(i, "errors") And If Not InStr(i, "processed") Then  'if not in error or processee
            Inc x
            If Filecount <> 0 Then  
               pb.value = x / filecount
               pb.Refresh()
               lblImport.text = "Importing HL7 Files (" & Str(x) & " of " & Str(filecount) & ")  "
               Wait
            End If   
            Process_Dir_Or_File(fname &/ sFile)                            'try again, this time could be a file
         End If
      Next
   Else  'yes, its a file, try and load it
      typ = "unk"
      'rename the file to avoid future duplication issues some senders don't have unique identifiers in their filenames
      unique_filename_key = modDBConnect.exec_query("select nextval('documents.hl7_messages_in') as pk")!pk     'gets the unique value
      unique_filename = "hl7_in_" & Str(unique_filename_key) & "_" & modUtil.filepath_fix_Blanks(File.Name(fname)) 
      Move fname To importdir &/ unique_filename    'change filename in the import dir
      fname = importdir &/ unique_filename
      f = Open fname For Read
      l = Lof(f)
      Log.DebugMsg("trying to read " & fname & " it is " & l & " bytes long")
      If l < 4 Then
         Log.WarningMsg("skipping " & fname & " as it is too short to contain anything useful")
         Move fname To importdir &/ "processed/errors" &/ modUtil.filepath_fix_Blanks(File.Name(fname))
      Else
         i = Read #f, 3 ' "taste" the file to find type
         Seek #f, 0
         Select Case i
            Case "001" 
               Log.DataMsg(Subst$("decided &1 is PIT by header", fname))
               typ = "pit"
            Case "FHS", "BHS", "MSH"
               Log.DataMsg(Subst$("decided &1 is HL7 by header", fname))
         End Select
         If typ = "unk" Then
            Select Case Lower$(Right$(fname, 4))
               Case ".pit"
                  Log.DataMsg(Subst$("decided &1 is PIT by suffix", fname))
                  typ = "pit"
               Case ".hl7", ".oru"
                  Log.DataMsg(Subst$("decided &1 is HL7 by suffix", fname))
                  typ = "hl7"
            End Select
         Endif
         If typ = "pit" Then
            If IsNull(f) Then f = Open fname For Read
            processing_log = PITImporter.Import(f, File.Name(fname))
            Close #f
         Else  ' at the moment try to parse as HL7 if not clearly PIT
            i = Read #f, Lof(f)
            Close #f
            hl7 = New CHL7(i)
            Try Processing_Log.Clear()
            Process_File(hl7, fname)
         Endif
         Move fname To importdir &/ "processed" &/ modUtil.filepath_fix_Blanks(File.Name(fname))
         processing_log.Add("Executed: Move " & fname & " to " & "processed" &/ modUtil.filepath_fix_Blanks(File.Name(fname)))
         modDBConnect.CommitTrans()
         processing_log.Add("Transaction committed")
      Endif 
   End If 
   
Catch
   Message.Info("Richard - an error " & fname)
   i = "HL7 File Processing Error: " & fname & "\n"
   i &= "Error Message: " & Error.Text & "\n " & "Backtrace:\n" & Error.Backtrace.Join("\n") & " (" & fname & ")"
   i &= "\n\nThe processing log was:\n\n"
   For Each processing_log_entry In Processing_Log
      i &= processing_log_entry & "\n"
   Next
   Print #File.Err, i
   Log.ErrorMsg(i)
   s = modAdminDBI.Config_Get("admin_email", Null)
   If Not IsNull(s) Then
      '   Message.Error("There was an error processing this file:\n\n" & fname & "\n\nthis will be reported to the Adminstrator at the following mail address:\n\n" & s)
      cEmailTask.Send_Email_Easy(s, "EasyGP HL7file import error", i)
   Else
      Message.Error(i)
   Endif
   Try Move fname To importdir &/ "processed/errors" &/ modUtil.filepath_fix_Blanks(File.Name(fname))
   If Error Then
      i = "Error of " & Error.Text & " moving " & fname & " to " & importdir &/ "/processed/errors/ (" & Error.Text & ")"
      Print #File.Err, i
      Log.ErrorMsg(i)
      i &= "\n\n" & "There was an error moving this file to the error directory:\n\n" & fname & "\n\nthis will be reported to the Adminstrator at the following mail address:\n\n" & s
      If Not IsNull(s) Then
         cEmailTask.Send_Email_Easy(s, "EasyGP HL7file import error", i)
      Endif
   End If
   
   modDBConnect.RollBack()
   
End Sub

Private Function Get_Originator(Originator As String) As String
   '-------------------------------------------------------------------------
   'Again, fucked hl7, some vendors don't use hats, don't comply to standards
   '-------------------------------------------------------------------------
   
   Dim bits As String[]
   
   If InStr(Originator, "&") Then
      bits = Split(Originator, "&", "", True)
      If bits.COUNT = 2 Then 'non compliant to hl7 standard eg PRP imaging
         Return bits[1] & " " & bits[0]
      Endif
      If bits.COUNT > 2 Then    
         Return bits[2] & " " & bits[1]
      End If   
   Else
      bits = Split(Originator, " ", "", True)
      If bits.count = 3 Then
         Return bits[0] & " " & bits[1] & " " & bits[2]  'eg Dr. Joe Smith
      Else
         Message.Info("originator parsing problem (" & originator & ")")
      End If
   End If
Catch
   Message.info("Give richard copy of this file.... it crashed on the catch of the sub")
   Return 
   
End 

Private Function Document_Originator_Get_From_OBR(hl7 As Chl7, sender As Collection) As Collection
   '----------------------------------------------------------------------------------------------------------------------------
   'attempts to get the person who wrote the hl7 letter or ordered the test 'i.e could be specialist sending a letter back to GP
   'or  the GP or doctor who ordered a test who hence indirectly caused the document to spring into existance
   'This person/organisation/thing is saved in Documents.Documents.orginator and is displayed in the Gui in FClinical
   'For example
   '  01/01/2000   fbc;esr;uec;lfts        DR R Terry
   '  19/12/1999   Renal Ultasound         Dr Nanra
   '  OBR(16) = ordering provider in the standard
   '  OBR(32) = Principal_Result_Interpreter in the standard
   '  If OBR(32) is null then most likely we caused the document to come into being as the ordering provider (OBR 16)
   '  Sample of OBR(32) |0481946T&NEUROLOGIST&FAMOUSE&&&Dr.&&&AUSHICPR", 1)'
   '  Also if the hl7 is a request, then most likely OBR(16) is the appopriate segement
   '  If the hl7 is  a letter, most likely the OBR(32) is best... but nothing is foolproof
   '----------------------------------------------------------------------------------------------------------------------------- 
   
   Dim document_originator As New Collection
   Dim seg_string As String 
   
   Select Case sender!fk_lu_message_display_style
      Case const.Document_Display_As_Letter
         If hl7[modHL7Constants.OBR_Principal_Result_Interpreter] Then  'OBR(32) may not exist
            seg_string = hl7[modHL7Constants.OBR_Principal_Result_Interpreter] 
            If InStr(seg_string, "&") Then                                       'try OBR(32) first - not present eg in any path, xrays etc
               document_originator!wholename = Get_Originator(seg_string)
               If document_originator.count Then Return document_originator
            End If
         End If   
         document_originator = hl7.GetNameAsCollection("OBR", modHL7Constants.OBR_Requesting_Provider)  'OBR[16]
         If document_originator.count Then Return document_originator    
      Case const.Document_Display_As_Result
         document_originator = hl7.GetNameAsCollection("OBR", modHL7Constants.OBR_Requesting_Provider)  'OBR[16]
         If document_originator.count Then Return document_originator   
         If hl7[modHL7Constants.OBR_Principal_Result_Interpreter] Then  'OBR(32) may not exist
            seg_string = hl7[modHL7Constants.OBR_Principal_Result_Interpreter] 
            If InStr(seg_string, "&") Then                                       'try OBR(32) first - not present eg in any path, xrays etc
               document_originator!wholename = Get_Originator(seg_string)
               If document_originator.count Then Return document_originator
            End If
         End If    
   End Select
   
End

Private Function intended_recipient_Search_OBR(hl7 As CHL7, processing_log As String[]) As Collection
   '-----------------------------------------------------------------------------------------------
   'Called if the recipient of a HL7 message has not been found in PRD or PV1 segments
   'searches multiple segments in OBR 16, 20, 28 and returns valid staff member or empty collection
   '-----------------------------------------------------------------------------------------------
   
   Dim intended_recipient As Collection
   Dim persons_in_obr28_copy_to As String[]
   Dim person_in_obr28_copy_to As String
   Dim copy_to_count As Integer
   Dim sSTring As String
   
   intended_recipient = hl7.GetNameAsCollection("OBR", modHL7Constants.OBR_Requesting_Provider)    'try OBR16 (requesting provider)
   If modAdminDBI.Is_Staff_Member(intended_recipient) Then
      Return intended_recipient 
   Else
      intended_recipient = New Collection
   Endif
   If intended_recipient.count = 0 Then                                                     'healthscope have the this in OBR only and then ambiguous
      processing_log.Add("Looking bizaare place  OBR(20).....")
      intended_recipient = hl7.GetNameAsCollection("OBR", 20)                                      'occasionally can only pull it form obr(20) a so called 'Filler Field 1  Healthscope
      If intended_recipient.count <> 0 Then 
         If Not modAdminDBI.Is_Staff_Member(intended_recipient) Then
            processing_log.Add("Found someone..." & Get_Name_As_String(intended_recipient) & " but they don't check out as a staff member")
            intended_recipient = Null
         Else
            processing_log.Add("Found message recipient in OBR(20).. " & Get_Name_As_String(intended_recipient))
         Endif
      Else
         intended_recipient = Null
         processing_log.Add("Message recipient was not found in OBR(20) -Nor should it be!, sadley sometimes it is")
      End If   
   Else
      processing_log.Add("Found the recipient in OBR(16) - " & Get_Name_As_String(intended_recipient))
   End If 
   If IsNull(intended_recipient) Then                                                      'healthscope may only have this in obr(28) - copy to
      If hl7[modHL7Constants.OBR_CopyTo] Then                                              'If there are copy to seg's maybe staff name is in there?
         persons_in_obr28_copy_to = Split(hl7[modHL7Constants.OBR_CopyTo], "~")
         If persons_in_obr28_copy_to.count Then
            processing_log.Add("Getting desperate, maybe the recipient's name is in OBR(28) in the copy-to's")
            For Each person_in_obr28_copy_to In persons_in_obr28_copy_to
               intended_recipient = hl7.GetNameAsCollection("OBR", modHL7Constants.OBR_CopyTo, copy_to_count)
               If intended_recipient.count <> 0 Then 
                  If modAdminDBI.Is_Staff_Member(intended_recipient) Then 
                     processing_log.Add("Found a possible recipient who is a staff member: " & Get_Name_As_String(intended_recipient))
                     Return intended_recipient
                  End If   
               End If   
               Inc copy_to_count 
            Next
         End If
      Else
         processing_log.Add("Bumma, running out of options... not in the copy to segment either")
         Return intended_recipient 'will be null   
      End If   
   End If      
   If intended_recipient.count <> 0 Then                                                  'if now have a potential staff member
      If modAdminDBI.Is_Staff_Member(intended_recipient) Then                                           'are they actuallyd one of our staff
         processing_log.Add("Found destination staff member - " & Get_Name_As_String(intended_recipient))
         Return intended_recipient
      Else
         processing_log.Add("Unable to identify destination staff member - " & Get_Name_As_String(intended_recipient))
         intended_recipient = Null
      Endif
   End If   
   Return Null
   
End

Private Function intended_recipient_Search_OBR_orig(hl7 As CHL7, processing_log As String[]) As Collection
   '-----------------------------------------------------------------------------------------------
   'Called if the recipient of a HL7 message has not been found in PRD or PV1 segments
   'searches multiple segments in OBR 16, 20, 28 and returns valid staff member or empty collection
   '-----------------------------------------------------------------------------------------------
   
   Dim intended_recipient As Collection
   Dim persons_in_obr28_copy_to As String[]
   Dim person_in_obr28_copy_to As String
   Dim copy_to_count As Integer
   Dim sSTring As String
   
   intended_recipient = hl7.GetNameAsCollection(modHL7Constants.OBR_Requesting_Provider)    'try OBR16 (requesting provider)
   If modAdminDBI.Is_Staff_Member(intended_recipient) Then
      Return intended_recipient 
   Else
      intended_recipient = New Collection
   Endif
   If intended_recipient.count = 0 Then                                                     'healthscope have the this in OBR only and then ambiguous
      processing_log.Add("Looking bizaare place  OBR(20).....")
      intended_recipient = hl7.GetNameAsCollection(20)                                      'occasionally can only pull it form obr(20) a so called 'Filler Field 1  Healthscope
      If intended_recipient.count <> 0 Then 
         If Not modAdminDBI.Is_Staff_Member(intended_recipient) Then
            processing_log.Add("Found someone..." & Get_Name_As_String(intended_recipient) & " but they don't check out as a staff member")
            intended_recipient = Null
         Else
            processing_log.Add("Found message recipient in OBR(20).. " & Get_Name_As_String(intended_recipient))
         Endif
      Else
         intended_recipient = Null
         processing_log.Add("Message recipient was not found in OBR(20) -Nor should it be!, sadley sometimes it is")
      End If   
   Else
      processing_log.Add("Found the recipient in OBR(16) - " & Get_Name_As_String(intended_recipient))
   End If 
   If IsNull(intended_recipient) Then                                                      'healthscope may only have this in obr(28) - copy to
      If hl7[modHL7Constants.OBR_CopyTo] Then                                              'If there are copy to seg's maybe staff name is in there?
         persons_in_obr28_copy_to = Split(hl7[modHL7Constants.OBR_CopyTo], "~")
         If persons_in_obr28_copy_to.count Then
            processing_log.Add("Getting desperate, maybe the recipient's name is in OBR(28) in the copy-to's")
            For Each person_in_obr28_copy_to In persons_in_obr28_copy_to
               intended_recipient = hl7.GetNameAsCollection(modHL7Constants.OBR_CopyTo, copy_to_count)
               If intended_recipient.count <> 0 Then 
                  If modAdminDBI.Is_Staff_Member(intended_recipient) Then 
                     processing_log.Add("Found a possible recipient who is a staff member: " & Get_Name_As_String(intended_recipient))
                     Return intended_recipient
                  End If   
               End If   
               Inc copy_to_count 
            Next
         End If
      Else
         processing_log.Add("Bumma, running out of options... not in the copy to segment either")
         Return intended_recipient 'will be null   
      End If   
   End If      
   If intended_recipient.count <> 0 Then                                                  'if now have a potential staff member
      If modAdminDBI.Is_Staff_Member(intended_recipient) Then                                           'are they actuallyd one of our staff
         processing_log.Add("Found destination staff member - " & Get_Name_As_String(intended_recipient))
         Return intended_recipient
      Else
         processing_log.Add("Unable to identify destination staff member - " & Get_Name_As_String(intended_recipient))
         intended_recipient = Null
      Endif
   End If   
   Return Null
   
End

Private Sub Process_File(hl7 As CHL7, fname As String)
   '----------------------------------------------------------------------------------------------------------------------------------------------------
   'Process a hl7  File the contents saved to the documents and observations table
   'This whole sub is **crap++** but works (sort of)
   'The sender              - is pulled from MSH into msh_seg_sender
   '                          This is a text string representing the proper name of the sender (usually)
   '                          e.g Douglas Hanly Moir
   '                              Symbion Laverty Patholgoy
   '                              Dr Best Surgeon
   'The patient             - is pulled from PID
   'documents_originator    - is the person wheo generated  (e.g ordered) or wrote or took resonsiblity for signing off the document
   '                        - this my/easygp terminology, not hl7 and meant to be either the author of the document (if a letter)
   '                          or the person whose original actions generated the document (i.e ordered the test - pathology/radiology)
   '                          I cannot find any consistant pattern to figure out who has written the letter. if in fact this is a letter
   '                          except to say that by and large path/radiology companies don't use the & in obr32
   '                          With Medical objects From specialists it seems To be the Principal_Result_Interpreter(seg OBR[32])
   '                          This is included so that when the user of EasyGP scrolls through their results or document lists
   '                          they can see who generated it. This <> the sender e.g patient in hospital JHH would be the sender
   '                          but if Dr Best Nuerologist signed off on the document his name would be the document_originator
   '                          
   '                           This Is Found either very easily:
   '                             PRD|CP^Consulting Provider^HL70286|Dr Jon Smith|P <<Note also here the lack of hats
   '                          Sometimes it is found in ORC  common order segment
   '                             ORC| 12 = ordering provider
   '                          Failing that its up For grabs.Fro example obviously OBR(16) If I ordered a path test
   '                          but if its a letter from some one it will be in OBR(32) as the person taking responsibility
   '                             OBR|...............etc |0481946T&RAYMOND&STEVE&&&Dr.&&&AUSHICPR"
   '                             
   'The intended_recipient  - interpreted by us to be the GP or other staff member in the practice the hl7 message is aimed at
   '                          if a name is found it is tested by the Is_Staff_Member() subroutine, if not set back to null
   '                          There is no consistancy where this information is found (usually in PV1)
   '                          segments are searched In the order they occur in the files and proceeds to next site if fails
   '                          However some specialists regard themselves as primary care provider no good solution there
   '                             PRD|RT^Referred to Provider^HL70286|Terry^Richard^^^Dr|
   '                             PRD|PP^General provider/Primary provider^HL70286|TERRY^RICHARD^^^Dr.|
   '                             PV1|1|O||||||0458332T^TERRY^RICHARD^^^DR|0458332T^TERRY^RICHARD^^^DR|||||||||||
   '                          As some companies eg Healthscope dont have PV1 we look in OBR(16)= ordering provider
   '                             OBR|1|5-00288|99248256-D-U-CTPCR^NATA^2178^N|D-U-CTPCR^U-CTPCR^2178||20081120|200811210000+1100|||||||200811210000+1100||0458332T^TERRY^RICHARD^^^DR|
   '                          Sometimes this will fai2014l, and the only place you will find name of a staff member is in OBR(20) 'hl7 specs = Filler Field 1+
   '                          Last fall back is to the copyto segment OBR(28) which may contain multiple providers
   '                          however luckily usually the GP seems to be the first person in the copyto's
   '                          Next if name not found we look and see who the patient's usual doctor is (if recorded)
   '                          If it doesn't find a valid staff member nad no usual doctorif uses the fallback staff member see Admin.GlobalPreferences (in the Gui)
   '----------------------------------------------------------------------------------------------------------------------------------------------------------------
   
   Dim shtml As String
   Dim tempfile As String
   Dim embedded_picture As Picture
   Dim audit As Collection 
   Dim sender As Collection
   Dim sString As String 
   Dim msh_seg_sender As Collection              'the string = sender name in the msh segment
   Dim intended_recipient As Collection          'person message is intended for - often hard to figure
   Dim document_originator As Collection         'he/she/who/it who generated, sent, was responsible for generation of the message
   Dim document_originator_ORC12 As Collection   '=ordering provider segment
   Dim document_originator_ORC10 As Collection   ' backup - this is designated in HL7 'entered by', sometimes it contains valid name if ORC12 and OBR missing names
   Dim document_originator_first_found As Collection 
   Dim usual_doctor As Collection                'the patient's usual doctor if recorded - used as fallback position
   Dim fallback_staff As Collection              'the staff member setup in Admin.Global preferences to allocate message to when all else fails
   Dim patient As Collection
   Dim obx As Collection
   Dim document As Collection
   Dim obx_type As String 
   Dim bits As String[] 
   Dim Staff_IDs As Collection
   Dim sending_application As String
   Dim sending_entity As Collection
   Dim any_msh As Boolean = False
   Dim bFirstAttemptAtFindingRecipient As Boolean = True 
   Dim seg_name As String
   Dim pdf_doc As Collection                     'document to save a pdf as
   Dim sData As String                           'for base64 segments
   Dim sql As String
   Dim D As CRow  
   
   const.REMOVE_THIS_DO_NOT_USE = fname   
   Do While hl7.Next("MSH")           '
      '------------------------------------------------------------------------------------
      'find out who the sender is and attempt to get a match from contacts database
      'The sender collection is either matched to ex2014isting organisation/employee or person
      'or unmatched, with the unkown sender saved to documents.sending_entity
      '-------------------------------------------------------------------------------------
      Processing_Log = New String[]
      document_originator_ORC12 = Null
      document_originator_ORC10 = Null
      document_originator = Null
      Patient = Null
      intended_recipient = Null
      processing_log.Add("Starting to decode file - filename=" & fname)
      '-----------------------------------------------------------------------------------------------------------------------------
      'get sender plus if had to look up documents.nata_laboratories if a new sender, returns fk_lu_message_display_style as display
      'otherwise this defaults to letter
      'i.e msh_seg_sender!name = "The Best Pathology Company"
      '    msh_seg_sender!fk_lu_message_display_style = const.Document_Display_As_Result
      '------------------------------------------------------------------------------------------------------------------------------
      msh_seg_sender = modHL7Process.Get_SendingEntity(hl7[modHL7Constants.MSH_Sending_Facility], processing_log)
      sending_application = modHL7Process.Get_Sending_Application(hl7[modHL7Constants.MSH_Sending_Application], processing_log)
      Sender = Get_Sender(msh_seg_sender, sending_application)   'msh_seg_sender = !name and !!fk_lu_message_display_style
      any_msh = True
      processing_log.Add("Analysed the message header segment and have determined the sender - " & sender!msh_sending_entity)
      
      '---------------------------------------------------------------------------------------
      'Some messages may be only for one patient, eg gpAccess discharge
      'and have PRD  segment(s) at the top  e.g one or more, often 3! 
      ' PRD  = provider data segment
      ' PRD|RP = referring provider
      ' PRD|PP = primary care provider
      ' PRD|CP = consulting provider
      ' PRD|RT^Referred to Provider^HL70286|Terry^Richard^^^Dr|
      ' Internally they don't conform eg mostly we have provider number ^surname^firstname etc
      ' GP Access in their PRD fields sometimes as eg Dr Joe Blogs
      '---------------------------------------------------------------------------------------
      Do While hl7.Next("PRD", "PID", "MSH")
         seg_name = hl7[0, 0]
         Select Case hl7[1, 0]
            Case "CP", "RP"                      
               document_originator = hl7.GetNameAsCollection(seg_name, 2)
               If document_originator.count Then
                  processing_log.Add("Found document author/generator in PRD|" & hl7[1, 0] & ": " & Get_Name_As_String(document_originator))
                  document_originator_first_found = document_originator
               End If   
            Case "RT", "PP" 
               If bFirstAttemptAtFindingRecipient Then
                  Processing_Log.Add("Will now attempt to find who the message is for, and if they are a staff member in our surgery")
               Endif
               bFirstAttemptAtFindingRecipient = False   
               intended_recipient = hl7.GetNameAsCollection(seg_name, 2)
               If intended_recipient.count Then
                  processing_log.Add("Found the potiential intended recipient in PRD|" & hl7[1, 0] & ": " & Get_Name_As_String(intended_recipient)) 
               Endif
               If modAdminDBI.Is_Staff_Member(intended_recipient) Then  
                  If intended_recipient.count Then processing_log.Add("Confirmed one of our staff") 
               Else
                  intended_recipient = Null
                  processing_log.Add("Sadly, the person is not one of our staff")
               End If   
         End Select
      Loop
      Do While hl7.Next("PID", "MSH")
         patient = modHL7Process.Make_Patient(hl7, processing_log)               'find existing or create new unmatched patient
         
         If hl7.Next("PV1", "OBR", "PID", "MSH") Then
            '-----------------------------------------------------------------------------------------------------------------------------------------------
            'Match the intended recipient to existing staff member, if fails creates entry in documents.unmatched_staff table
            '
            'More complicated than you might think. It may already have been extracted above from the PRD segment (GP Access for example)
            '
            'In most hl7 files, the segment after PID is in fact a PV1 to identify provider,
            'however, in some, the provider is identified **PRIOR** to PID in one or more PRD segments
            'for example this file:
            '
            ' FHS|^~\&|Medical-Objects|GP Access - HUDGP
            ' BHS|^~\&|Medical-Objects|GP Access - HUDGP
            ' MSH|^~\&|MedTech v6.3.1|GP Access - HUDGP^6FB0130D-5700-4EED-BEE7-BA1C92FB636E^GUID|HL7 v2.3.1|stub|20090303095117+1000|GP Access - HUDGP (Capricorn) <MO170909.Capricorn Two>|REF^I12|195193|P|2.3.1^AUS&&ISO^AS4700.6&&L
            ' RF1|P^Pending^HL70283|R^Routine^HL70280|DRF^Discharge referral^HL70281|AM^Assume management^HL70282~DS^Discharge Summary^HL70282||MT090303095118^GP Access - HUDGP^6FB0130D-5700-4EED-BEE7-BA1C92FB636E^GUID|20090303095114+1100||20090303095117+1000|F^For your information^HL70336
            ' PRD|CP^Consulting Provider^HL70286|Dr Joe Blow|PO Box 572^^NEWCASTLE^NSW^2300^^M
            ' PRD|RT^Referred To Provider^HL70286|TERRY^RICHARD^^^Dr.|141 Dudley Road^Whitebridge Medical Centre^WHITEBRIDGE^NSW^2290^^M~141 Dudley Road^Whitebridge Medical Centre^WHITEBRIDGE^NSW^2290^^O||^WPN^PH^^61^02^49436511~^WPN^FX^^61^02^49435929||0458332T^AUSHICPR
            ' PRD|PP^General provider/Primary provider^HL70286|TERRY^RICHARD^^^Dr.|141 Dudley Road^Whitebridge Medical Centre^WHITEBRIDGE^NSW^2290^^M~141 Dudley Road^Whitebridge Medical Centre^WHITEBRIDGE^NSW^2290^^O||^WPN^PH^^61^02^49436511~^WPN^FX^^61^02^49435929||0458332T^AUSHICPR
            ' PID|1|...........................
            ' OBR|1|...........................
            ' OBX|1|..........................
            ' BTS|1
            ' FTS|1|Powered by www.medical-objects.com
            '
            'A conforming PV1 segment such as Douglass Labs HL7 looks like this:
            '     PV1|1|O||||||0458332T^TERRY^RICHARD^^^DR|0458332T^TERRY^RICHARD^^^DR|||||||||||
            '
            'A non conforming PV1 segment eg the teaching hospital JHH, there may be no hats in the PV1 segment separating the recipient name
            'so we can't split the recipient name properly by using the little hats
            'PV1|1|O|||||0458332T^Dr R TERRY^^^^^^^^^^^^~0458332T^^^^^^^^^^^^||0458332T^Dr R TERRY^^^^^^^^^^^^~0458332T
            '
            'so I've doctored the  hl7.GetNameAsCollection to take this into account, however not that well it seems as this PV1
            'brings it unstuck
            '
            'PV1|||BEL|||||UUUH^UNIFIED HEALTHCARE^^^^^^^LOCNATA2203|0458332T^TERRY^RICHARD^ ^^DR^^^AUSHICPR
            '       
            'Also note that they only using the doctors initial, instead of full firstname, so I'll search on provider first which is safest
            'as there could be two doctors in the practice Dr John Smith Dr Justin Smith etc.
            '
            ' PV1 7, 8, 9 = attending Dr, Referring Dr, consulting Dr
            ' Components: <ID number (ST)> ^ <family name (ST)> ^ <given name (ST)> ^ <middle initial or name (ST)>
            ' ^ <suffix (e.g., JR or III) (ST)> ^ <prefix (e.g., DR) (ST)> ^ <degree (e.g., MD) (ST)>
            ' ^ < source table( Is ) > ^ < assigning authority(HD) > ^ < name type code(ID) > 
            '^ < identifier check digit(ST) > ^ < code identifying the check digit scheme employed(ID) >
            '^ < identifier type code( Is ) > ^ < assigning facility(HD) >
            'Subcomponents of assigning authority: <namespace ID (IS)> & <universal ID (ST)> & <universal ID type (ID)>
            ' Subcomponents of assigning facility: <namespace ID (IS)> & <universal ID (ST)> & <universal ID type (ID)>
            'PV1: Hunter radiology
            '            seg 7  attending provider   no     modHL7Constants.PV1_Attending
            '            seg 8  requesting provider  yes  modHL7Constants.PV1_Requesting
            '            seg 9  consulting provider  yes  modHL7Constants.PV1_Consulting
            '     Hunter Imaging Group
            '            seg 7  attending provider   no     modHL7Constants.PV1_Attending
            '            seg 8  requesting provider  yes  modHL7Constants.PV1_Requesting
            '            seg 9  consulting provider  yes  modHL7Constants.PV1_Consulting
            '    HAPS
            '            seg 7  attending provider   yes     modHL7Constants.PV1_Attending ie attending = requesting
            '            seg 8  requesting provider  no  modHL7Constants.PV1_Requesting
            '            seg 9  consulting provider  yes  modHL7Constants.PV1_Consulting
            '   DHM
            '            seg 7  attending provider   no   modHL7Constants.PV1_Attending ie attending = requesting
            '            seg 8  requesting provider  yes  modHL7Constants.PV1_Requesting
            '            seg 9  consulting provider  yes  modHL7Constants.PV1_Consulting
            
            '   Newcastle Pathology
            '           seg 7  attending provider   no   modHL7Constants.PV1_Attending ie attending = requesting
            '            seg 8  requesting provider  yes  modHL7Constants.PV1_Requesting
            '            seg 9  consulting provider  yes  modHL7Constants.PV1_Consulting
            '                     ordering_provider is in OBR 16     
            '   symbion
            '       seg 7  attending provider   no   modHL7Constants.PV1_Attending ie attending = requesting
            '            seg 8  requesting provider  yes  modHL7Constants.PV1_Requesting
            '            seg 9  consulting provider  yes  modHL7Constants.PV1_Consulting
            '                     ordering_provider is in OBR 16     
            '-------------------------------------------------------------------------------------------------------------------------------------
            seg_name = hl7[0, 0]
            If IsNull(intended_recipient)                                                   'may have been pulled from Seg PRD|RT = Referred to Provider
               If bFirstAttemptAtFindingRecipient Then
                  Processing_Log.Add("Will now attempt to find who the message is for, and if they are a staff member in our surgery")
               Endif
               bFirstAttemptAtFindingRecipient = False   
               processing_log.Add("Looking for intended recipient in the PV1 segment")
               intended_recipient = hl7.GetNameAsCollection(seg_name, modHL7Constants.PV1_Consulting)   'this should be the GP or staff member the message is for
               If Not modAdminDBI.Is_Staff_Member(intended_recipient) Then                                      'is this person on the staff
                  processing_log.Add("Found a recipient in PV1 but not one of our staff - " & Get_Name_As_String(intended_recipient))                         
                  intended_recipient = Null                                                    'however sometimes its not! can be the sender!!!! Fucked HL7
               Else
                  processing_log.Add("Found the message recipient in PV1 " & Get_Name_As_String(intended_recipient))
               Endif
            End If 
         Endif
         If hl7.Next("ORC", "OBR", "PID", "MSH")                                    'if exists try for ordering provider
            seg_name = hl7[0, 0]
            If hl7[12] <> "" Then                                                   'can't remember which files needed this
               processing_log.Add("Checking ORC segment for document originator before moving on to OBR segment")
               document_originator_ORC12 = hl7.GetNameAsCollection(seg_name, 12)
               If document_originator_ORC12.count Then
                  processing_log.Add("May have found the person who either ordered the test or wrote the incoming letter in ORC Segment")
                  processing_log.Add("This seems to be " & Get_Name_As_String(document_originator_ORC12) & " however will check against OBR(32) later")
               Else 'try and get another backup from ORC (10) = entered by
                  document_originator_ORC12 = hl7.GetNameAsCollection(seg_name, 10)
               Endif
            End If
         End If
         Do While hl7.Next("OBR", "PID", "MSH")
            '----------------------------------------------------------------------------------------------
            'Some notes on the document:
            'Remember the document concept is quite generic, examples of documents are:
            '  A Scanned 20 page file as a pdf
            '  An email to a staff member
            '  A single pathology result for a FBC
            '  A single page after hours consultation summary
            '  A 5 page hospital discharge summary
            '  An inter-practice staff memo
            '
            'Hence there can be some confusion around terms
            '     document!date_requested may only apply to pathology
            '     document!date_created is named so because it represents when the document was created
            '     e.g a pathology request is the start of the document chain
            '     a hospital discharge summary  is the creation or enactment of the document
            '------------------------------------------------------------------------------------------------
            processing_log.Add("Starting to analyse the OBR segment")
            If IsNull(intended_recipient) Then
               processing_log.Add("Not yet found a staff member who the message is intended for... will look through the OBR fields")
               intended_recipient = intended_recipient_Search_OBR(HL7, Processing_Log)
            End If   
            If Not IsNull(intended_recipient) Then                                                   'if now have a potential staff member
               If modAdminDBI.Is_Staff_Member(intended_recipient) Then                                           'are they actuallyd one of our staff
                  processing_log.Add("Decided that " & Get_Name_As_String(intended_recipient) & " is the recipient and one of our staff")
                  staff_IDs = Get_Staff_Member(intended_recipient, fname)                            'if so get the id's
                  processing_log.Add("Verified staff ID's")
               End If   
            Else                                                                                     'we have no recipient
               processing_log.Add("Giving up on finding the recipient/staff member")
               staff_IDs = New Collection 
               If Not IsNull(patient!fk_doctor) Then                                         'try and allocate to their usual doctor
                  staff_IDs!fk_staff = patient!fk_doctor
                  processing_log.Add("Allocating this mesage to the patient's ususal doctor " & modAdminDBI.Preferred_Doctor_Get(patient!fk_doctor)!wholename)
               Else                                                                                  'have none? then fallback position
                  staff_IDs!fk_staff = modAdminDBI.Config_Get("fk_hl7_fallback_staff_member", -1, Null, modDBConnect.currentUser!fk_clinic)
                  fallback_staff = modAdminDBI.Preferred_Doctor_Get(staff_IDs!fk_staff)
                  processing_log.Add("Have allocated document to  the fallback staff member " & fallback_staff!title & " " & fallback_staff!wholename)
               End If   
               staff_IDs!fk_unmatched_staff = 0
            End If   
            processing_log.Add("Creating a new document collection prior to saving to the back end")
            document = New Collection
            document!fk_lu_urgency = const.UrgencyLevelRoutine
            document!fk_sending_entity = sender!fk_sending_entity
            document!fk_lu_display_as = sender!fk_lu_message_display_style 'defaults to 1 = letter different name = historical- fiXME SOMETIME in documents.sending_entities
            document!source_file = File.name(fname) 
            document!imported_time = Now()
            processing_log.Add("inserting dates message was requested, collected or the message created")
            document!date_requested = Val(Format(DateString_Decode(hl7[modHL7Constants.OBR_Request_Date]), "dd/mm/yyyy"))
            If IsNull(DateString_Decode(hl7[modHL7Constants.OBR_Collect_Date])) Then
               document!date_created = document!date_requested
            Else
               document!date_created = Val(Format(DateString_Decode(hl7[modHL7Constants.OBR_Collect_Date]), "dd/mm/yyyy"))
            End If   
            If patient!fk_patient <> 0 Then document!fk_patient = patient!fk_patient
            If patient!fk_unmatched_patient <> 0 Then document!fk_unmatched_patient = patient!fk_unmatched_patient   
            If staff_IDs!fk_staff <> 0 Then document!fk_staff_destination = staff_IDs!fk_staff
            If staff_IDs!fk_unmatched_staff <> 0 Then document!fk_unmatched_staff = staff_IDs!fk_unmatched_staff
            ' If IsNull(document_originator) Then ' Now if not yet collected from PRD|CP (consulting provider) or ORC(12) ordering provider get the document_originator
            If IsNull(document_originator) Or sender!fk_lu_message_display_style = const.Document_Display_As_Letter Then ' Now if not yet collected from PRD|CP (consulting provider) or ORC(12) ordering provider get the document_originator
               processing_log.Add("Not yet sure  who ordered/created/authored this message, will look in OBR segment")
               document_originator = Document_Originator_Get_From_OBR(hl7, sender)  'the sender!fk_lu_message_display_style can help us guess
               If IsNull(document_originator) Then
                  If Not IsNull(document_originator_first_found) Then 
                     document_originator = document_originator_first_found
                  Else
                     If Not IsNull(document_originator_ORC12) Then  'fallback to ORC(12)
                        document_originator = document_originator_ORC12
                     Endif
                  End If   
               Endif
            Endif
            If IsNull(document_originator) Then
               processing_log.Add("Giving up.. god knows who ordered/created/authored this message")
               processing_log.Add("Will use the MSH Segment sender:" & sender!msh_sending_entity)
               document!originator = sender!msh_sending_entity
            Else
               If IsNull(document_originator!wholename) Then   
                  document!originator = Trim(document_originator!title & " " & document_originator!firstname & " " & document_originator!surname)
               Else  
                  document!originator = document_originator!wholename   
               End If   
               If sender!fk_lu_message_display_style = const.Document_Display_As_Letter Then
                  Processing_Log.Add("The Document seems to be a letter and written by " & document!originator)
               Else
                  Processing_Log.Add("The Document seems to be a result which was ordered by " & document!originator)
               Endif
            End If 
            processing_log.Add("Filtering out crap from within some text... eg tabs")
            sstring = Replace$(hl7[modHL7Constants.OBR_Request, modHL7Constants.OBR_Request_Name], "\\T\\", " & ")
            document!tag = sstring
            processing_log.Add("The document tag supplied in the message was " & document!tag)
            'some clinical comments have cr imbedded for some reason - more haps crap
            document!comment_on_document = hl7[modHL7Constants.OBR_Clinical_Notes]
            document!comment_on_document = Replace(document!comment_on_document, "\\.br\\", " ")
            If Right(document!comment_on_document) = "," Then
               document!comment_on_document = Left(document!comment_on_document, Len(document!comment_on_document) - 1)
            Endif
            '------------------------------------------------------------------------------------------------
            ' Reference from providers of the service structure is variable: 
            ' douglas - OBR|1|3-00792|231231847-M-MSU^NATA^2178^N| we want:231231847
            ' HIG     - ditto
            ' laverty - OBR|1||11-1273373-FBE-0|F
            ' helathscope - ditto
            ' Please don't switch this construct around as some vendors have both hats and - in the one segment
            '--------------------------------------------------------------------------------------------------
            If InStr(hl7[modHL7Constants.OBR_Episode], "^") Then     
               document!provider_of_service_reference = Split(hl7[modHL7Constants.OBR_Episode], "^")[0]
               If InStr(document!provider_of_service_reference, "-") Then
                  bits = Split(document!provider_of_service_reference, "-")
                  If Len(bits[0]) < 3 Then
                     document!provider_of_service_reference = bits[1] 
                  Else
                     document!provider_of_service_reference = bits[0] 
                  Endif 
                  ' document!provider_of_service_reference = Split(hl7[modHL7Constants.OBR_Episode], "-")[0]
               End If
            Else                                                       
               If InStr(hl7[modHL7Constants.OBR_Episode], "-") Then   
                  document!provider_of_service_reference = Split(hl7[modHL7Constants.OBR_Episode], "-")[1] 'eg laverty, healthscope
               Else
                  document!provider_of_service_reference = hl7[modHL7Constants.OBR_Episode]
               Endif
               
            End If
            document!internal_reference = "" 'until the hl7 vendors fix their stuff hl7[modHL7Constants.OBR_Our_Reference]  
            document!pk = modDBConnect.insert("documents.documents", document)  
            processing_log.Add("New document was successfully inserted into the documents.documents table")
            processing_log.Add("Now will analyse the OBX segments....")
            Do While hl7.Next("OBX", "OBR", "PID", "MSH")
               '-------------------------------------------------
               ' table documents.observations is the obx segment:
               '   pk serial NOT NULL,
               '   fk_document integer,
               '   set_id integer,
               '   value_type text,
               '   identifier text,
               '   sub_identifier text,
               '   "value" text,
               '   units text,
               '   reference_range text,
               '   abnormal text,
               '   probability text,
               '   nature_abnormality text,
               '   result_status text,
               '   date_last_normal date,
               '   user_defined_access_checks text,
               '   observation_date date,hl7
               '   value_numeric double precision,
               '   loinc text
               '---------------------------------------------------
               
               obx = New Collection
               obx!fk_document = document!pk
               obx!set_id = hl7[1]
               obx!value_type = hl7[2]
               'temporary maybe patch for this situation: Douglas putting the name of urine drug screen in wrong field
               obx!identifier = hl7[3, 1]  'actually not the whole segment
               If IsNull(obx!identifier) Then        'this is quite common in correct hl7, this one was a lab mistake.
                  If document!tag = "Urine Drug Screen" Then
                     obx!identifier = hl7[3, 0]
                  Endif
               Endif
               obx!sub_identifier = hl7[4]
               If obx!value_type <> "ED" Then   
                  sstring = Replace$(hl7[5], "\\T\\", " & ") 'FIXME, NEEDS ALSO SOME .BR AND OTHER \ \ FIXES
                  obx!value = Replace$(hl7[5], "\\R\\", "")   'IAN CHECK THIS WHATIS \\R\\ it seems to litter some letter
                  obx!value = sstring
               Else
                  obx!value = hl7[5]
               End If   
               obx!units = hl7[6, 1]
               obx!reference_range = hl7[7]
               obx!abnormal = hl7[8]
               obx!probability = hl7[9]
               obx!nature_abnormality = hl7[10]
               obx!result_status = hl7[11]
               obx!observation_date = document!date_created 'most labs don't keep OBX 14!!!1 douglas does
               '--------------------------------------------------------------------------------------
               'Numeric is a little problematic - to my chagrin after many weeks work I found I was
               'dropping data on closer examination, due to numeric qualifiers used eg in haematology
               'and biochem eg egfr >90 basophils <0.1. Only noticed this when my graphing played up
               'So, attempt a straight conversion, if fails, parse out the signs
               '--------------------------------------------------------------------------------------
               If obx!value_type = "NM" Or obx!value_type = "SN" Then 'NM = numeric SN= structured numeric.
                  sString = hl7[5]
                  Try obx!value_numeric = CFloat(sString)
                  If Error Then
                     If InStr(sString, "<") And Not (InStr(sString, "<^")) Then
                        obx!value_numeric_qualifier = "<"
                        sString = Replace$(sString, "<", "")
                        Try obx!value_numeric = CFloat(sString)
                     End If
                     If InStr(sString, "<^") Then
                        obx!value_numeric_qualifier = "<^"
                        sString = Replace$(sString, "<^", "")
                        Try obx!value_numeric = CFloat(sString)
                     End If
                     If InStr(sString, ">") And Not (InStr(sString, ">^")) Then 
                        obx!value_numeric_qualifier = ">"
                        sString = Replace$(sString, ">", "")
                        Try obx!value_numeric = CFloat(sString)
                     End If 
                     If InStr(sString, ">^") Then
                        obx!value_numeric_qualifier = ">^"
                        sString = Replace$(sString, ">^", "")
                        Try obx!value_numeric = CFloat(sString)
                     End If 
                  End If
               Endif     
               If obx!value_type = "FT" Then
                  'need both segments,because if a free text field contained PIT which didn't designate PIT (I've encountered this) it would exclude data
                  If (InStr(hl7[2] & "|" & hl7[3], "FT|^^PIT") Or InStr(hl7[2] & "|" & hl7[3], "FT|PIT")) Then
                     obx!pit = True
                  End If
               End If 
               If obx!value_type = "NM" Or obx!value_type = "SN" Then
                  If hl7[3, 2] = "LN" Then
                     obx!loinc = hl7[3, 0]
                  Endif
               End If   
               'Not sure what the EN stands for as my internet is down
               
               ' If obx!value_type = "ED" Then '[5,2]=JPEG,PDF, [5,3]=base64 [5,4]=data
               '  obx!value_type = obx!value_type &= ":" & Lower(Trim(hl7[5, 2])) 'ie ED:pdf, ED:html, ED:jpeg etc. <<My convention
               '    Print hl7[5, 2]
               '    Print hl7[5, 3]
               '    Print hl7[5, 4]
               '    Tempfile = Temp() & "." & Lower(Trim(hl7[5, 2]))
               '    sData = ModBase64.FromB64(hl7[5, 4])
               ' '   sData = Replace(sData, "\"", "'")
               '    Print sData
               '    ' s = Replace(s, "\"", "'")
               '    File.Save(Tempfile, ModBase64.FromB64(hl7[5, 4]))
               '    Select Case Lower(Trim(hl7[5, 2]))
               '       Case "pdf"
               '          File.Save(Tempfile, ModBase64.FromB64(hl7[5, 4]))
               '       Case "jpg", "jpeg", "png"
               '          File.Save(Tempfile, ModBase64.FromB64(hl7[5, 4]))
               '       Case "html"
               '          ' D = New CRow
               '          ' D.put_unchanged(document!pk, "pk")
               '          ' D!fk_lu_data_content_type = 1
               '          ' D!data = sData
               '          ' 
               '          ' D.Save("documents.documents", "pk")
               '          
               '          ' document!data = sData
               '          ' document!lu_data_content_type = 1 '/text/html FIXME PUT IN CONSTANT
               '          ' sql = "INSERT INTO documents.documents(data,lu_data_content_type) "
               '          ' sql &= "values ($$" & sdata & "$$,1) WHERE pk=" & document!pk
               '          ' Print sql
               '          ' modDBConnect.exec_query(sql)
               '          
               '    End Select
               '    
               '    Wait  
               '    Try embedded_picture = Picture.Load(Tempfile)
               '    If Not Error Then
               '    '  
               '       sHtml = "<Html><body><img src='" & tempfile & "'></body></html>"
               '       sString = modUtil.Write_HTML(shtml)
               '       Shell "wkhtmltopdf " & sString & " /tmp/output.pdf" Wait
               '       PdfDocument = New Collection
               '    End If   
               '    End If  
               modDBConnect.insert("documents.observations", obx)
            Loop
            processing_log.Add("The OBX segments have been successfully analysed and saved but not yet committed to the database")
         Loop 
      Loop 
   Loop
   
   If Not any_msh Then
      Error.Raise("No valid MSH segments found")
   Endif
   
End

Public Function Get_Name_As_String(name As Collection) As String
   
   Return Trim(name!title & " " & name!firstname & " " & name!surname) 
   
End

Public Function Get_Staff_Member(staff_member As Collection, fname As String) As Collection 
   '--------------------------------------------------------------------
   'Return fk_staff and fk_unmatched_staff
   'Attempts to match on provider number, if fails on firstname surname
   'if fails, inserts unkown staff-member into documents.unmatched_staff
   'remove fname
   '--------------------------------------------------------------------
   
   Dim sql As String
   Dim unmatched_staff As Collection 
   Dim staff_ID As New Collection 
   
   '------------------------------------------------------------------------
   'Now try and match this with a staff member, first via  a provider number
   '------------------------------------------------------------------------
   If staff_member.Exist("provider_number") Then
      sql = "Select * from admin.vwStaffInclinics where provider_number = $$" & staff_member!provider_number & "$$"
      unmatched_staff = modDBConnect.exec_query_first(sql)
   Endif
   If IsNull(unmatched_staff) Then
      sql = "Select * from admin.vwStaffInclinics where firstname ILIKE $$" & staff_member!firstname & "$$ AND surname  ILIKE $$" & staff_member!surname & "$$"
      unmatched_staff = modDBConnect.exec_query_first(sql)
      If IsNull(unmatched_staff) Then
         '---------------------------------------------------------------------------------------------
         'Last resort - use first letter of firstname - if it ends up in wrong box, not that important
         'as the doctor will recognise and admin can fix. FIXME: need some sort of lookup table here
         'to translate bad HL7 doctor names to staff names automatically
         '---------------------------------------------------------------------------------------------
         sql = "Select * from admin.vwStaffInclinics where firstname ILIKE $$" & Left(staff_member!firstname) & "%$$ AND surname  ILIKE $$" & staff_member!surname & "$$"       
         unmatched_staff = modDBConnect.exec_query_first(sql)
      End If
   End If 
   If Not IsNull(unmatched_staff) Then
      staff_ID!fk_staff = unmatched_staff!fk_staff
      staff_ID!fk_unmatched_staff = 0
   Else
      '---------------------------------------------------------------------------------------------------------------
      'Ok, can't find this recipient on our premises, see if we've a previous message for them in unmatched staff
      'This can be tricky eg I've encountered multiple variations in spelling of an unmatched Dr sent to our practice
      'e.g Dr Rita Cumi  or Dr Rita Cummi etc, so can return more than one record if we just search on the provider
      'which interestingly enough is usually accurate (the provider number)
      'so... search on firstname, surname match only
      'if search on provider number alone this can return multiple records with exec_query_first
      '--------------------------------------------------------------------------------------------------------------
      sql = "Select * from documents.unmatched_staff where firstname ILIKE $$" & staff_member!firstname & "$$ AND surname  ILIKE $$" & staff_member!surname & "$$"
      sql &= " AND provider_number = $$" & staff_member!provider_number & "$$"
      unmatched_staff = modDBConnect.exec_query_first(sql)
      If IsNull(unmatched_staff) Then
         '----------------------------------------------------
         'Failed on firstname and lastname and provider number
         'just look up provider number
         '----------------------------------------------------
         sql = "Select * from documents.unmatched_staff where provider_number = $$" & staff_member!provider_number & "$$ LIMIT 1" 'could be multiple due to misspellings
         unmatched_staff = modDBConnect.exec_query_first(sql)
         If IsNull(unmatched_staff) Then
            '---------------------------------------------------
            'Still failed, bumma, give up and create a new entry
            '---------------------------------------------------
            staff_ID!fk_staff = 0
            staff_ID!fk_unmatched_staff = modDBConnect.insert("documents.unmatched_staff", staff_member)
         Else
            staff_ID!fk_staff = 0
            staff_ID!firstname = unmatched_staff!firstname
            staff_ID!surname = unmatched_staff!surname
            staff_ID!fk_unmatched_staff = unmatched_staff!pk
         End If
         
      Else
         staff_ID!fk_staff = 0
         staff_ID!firstname = unmatched_staff!firstname
         staff_ID!surname = unmatched_staff!surname
         staff_ID!fk_unmatched_staff = unmatched_staff!pk
      End If
   End If
   Return STaff_ID
   
End

Public Function Get_Sender(msh_seg_sender As Collection, SendingApplication As String) As Collection 
   '------------------------------------------------------------------------------------
   'using the sending_entity from the MSH segment, looks to see if this sending_entity
   'has been encountered before. If not if the sending entity was a NATA lab, use the msh_seg_sender!fk_lu_message_display_style
   'otherwise, when new messages end up in the inbox they will look like letters and confuse the user
   'No: saves it to documents.sending_entities
   '   pk serial NOT NULL,
   '   fk_lu_request_type integer, -- The type of provider eg pathology provider, radiology provider
   '   msh_sending_entity text NOT NULL, -- the entity sending, could be unintelligable eg a NATA/number or a recognizable name eg Hunter Radiology, however often bears no relationship to a real person or company
   '   msh_transmitting_entity text, -- could be the sending entity or third party transmitter eg Medical Objects, or the name of a computer program generating the hl7
   '   fk_lu_message_display_style integer NOT NULL, -- display as letter or result style
   '   fk_branch integer,
   '   fk_employee integer,
   '   fk_person integer,
   '   fk_lu_message_standard integer NOT NULL, -- hl7 or pit
   '   exclude_ft_report boolean DEFAULT false, -- if true then no free text segments will be shown
   '   exclude_pit boolean DEFAULT false, -- if contains PIT segments if true these will not be shown (often duplicated the hl7 data itself)
   '   abnormals_foreground_color integer DEFAULT 16711680,
   '   abnormals_background_color integer DEFAULT 16777215,
   '   CONSTRAINT sending_entities_pkey PRIMARY KEY (pk)
   
   'Yes:returns a sender collection 
   '------------------------------------------------------------------------------------
   Dim sql As String 
   Dim Sender As New Collection
   Dim senders As Collection 'not used but needed for save
   Dim pk_view As Integer    'not used but needed for save
   Dim r As Result
   '------------------------------------------------------------------------------------------------
   'Have we saved this one before? If so, it could already be matched to contacts, so retreive
   'its record and see if fk_branch, fk_employee or fk_person is set
   'We do this because the name of the sending entity, often is not a proper company, also
   'the same practice seems to change its sending entity name over time.
   '------------------------------------------------------------------------------------------------
   msh_seg_sender!name = Replace$(msh_seg_sender!name, "\\T\\", "&")
   sql = "Select * from documents.vwsendingentities where msh_sending_entity ILIKE $$" & msh_seg_sender!name & "$$ and deleted = False"
   r = modDBConnect.exec_query(sql)
   If r.count Then
      sender!fk_sending_entity = r!pk_sending_entities
      sender!fk_lu_message_display_style = r!fk_lu_message_display_style
      sender!msh_sending_entity = r!msh_sending_entity
   Else
      '-----------------------------------------------------------------------
      'No? then save this so it can be dealt with in inbox/message preferences
      'As probably path/radiology will be configured first, most unknown
      'files most likely letter-style
      '------------------------------------------------------------------------
      sender = New Collection
      sender!msh_sending_entity = msh_seg_sender!name
      sender!msh_transmitting_entity = SendingApplication
      sender!fk_lu_message_standard = const.document_message_standard_hl7 
      sender!fk_lu_message_display_style = msh_seg_sender!fk_lu_message_display_style 'fixme make detectioni of letter/result more sophisticated
      sender!exclude_pit = True
      sender!fk_sending_entity = modInboxDBI.Save_HL7_FileHandling_Defaults(senders, pk_view, sender)
      modDBConnect.CommitTrans()
   End If
   Return Sender
   
End

'rename this DateString_YYYMMDD_to Date(DateSTring) as Date
Public Function DateString_Decode(Datestring As String) As Date
   'expects date in this format yyyymmdd, returns valid date with time 00:00
   'sadly some hl7 contains eg |16/07/14    ??:?|
   
   Dim sTemp As String
   Dim d1 As Date
   Dim bits As String[]
   
   If InStr(Datestring, "/") Then
      If InStr(Datestring, " ") Then
         bits = Split(Split(Datestring, " ")[0], "/")
      Else
         bits = Split(Datestring, "/")
      End If  
      Return Date(Val(bits[2]), Val(bits[1]), Val(bits[0]))
   Endif
   d1 = Null
   sTemp = Left(Datestring, 8)
   Try d1 = Date(Val(Left(sTemp, 4)), Val(Mid(sTemp, 5, 2)), Val(Right(sTemp, 2)))
   Return d1
   
End

Public Sub Make_ASCII_Safe(s As String) As String
   ' removes strange Microsoft byte codes to make safe for import into Postgres
   
   Dim r As String
   Dim a As Integer
   Dim i As Integer
   
   For i = 1 To Len(s) 
      a = Asc(s, i)
      Select Case a
         Case 147
            r &= "\""
         Case 148
            r &= "\""
         Case 145
            r &= "'"
         Case 146
            r &= "'"
         Case 150
            r &= "-"
         Case 151
            r &= "-"
         Case 133
            r &= "..."
         Case 137
            r &= "/1000"
         Case 140
            r &= "OE"
         Case 156
            r &= "oe"
         Case 198
            r &= "AE"
         Case 230
            r &= "ae"
         Case 153
            r &= "TM"
         Case 169
            r &= "(C)"
         Case 188
            r &= "1/4"
         Case 189
            r &= "1/2"
         Case 190
            r &= "3/4"
         Case 178
            r &= "^2"
         Case 179
            r &= "^3"
         Case 181
            r &= "mc"
         Case 247
            r &= "/"
         Case 194
            ' noop
         Case Else
            If a < 127 Then
               r &= Mid$(s, i, 1)
            Else
               r &= "?"
            Endif
      End Select
   Next
   Return r
   
End
