' Gambas module file

' Copyright (C) 2008-2014 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

' routines which does the processing for display as
' HTML in the inbox, also breaks up atomic path and stores in the
' correct tables, called by FInbox and elsewhere

Private cell_color As String = "#FFFFFF" 'to be removed in real life as will be user-defined
Private font_color As String = "#000000"

Public Function Format_Result_Line(result_line As Collection, abnormals_fgcolor As Integer, abnormals_bgcolor As Integer) As String
   '--------------------------------------------------------------------------------
   'Colors for abnormal results: Assume abnormality, this will be switched if normal
   'back to black on white.
   '-------------------------------------------------------------------------------
   
   Dim s As String 
   Dim sAbnormal_text As String 
   
   font_color = Hex(abnormals_fgcolor)
   cell_color = Hex(abnormals_bgcolor)
   s = "<TR STYLE=\"color: %font_color%; background-color: %cell_color%;\">" 
   "<TD>%identifier% &nbsp;&nbsp;</TD>"
   "<TD>%value% &nbsp;&nbsp;</TD>"
   "<TD>%units%  &nbsp;&nbsp;</TD>"
   "<TD>%reference_range%  &nbsp;&nbsp;</TD>"
   "</TR>"
   s = Replace_Coll(s, result_line, "identifier")
   s = Replace_Coll(s, result_line, "value")
   s = Replace_Coll(s, result_line, "units")
   If result_line.Exist("reference_range") And Not IsNull(result_line!reference_range) Then
      result_line!reference_range = Replace(result_line!reference_range, "(", "")  'stupid but otherwise get (( ))
      result_line!reference_range = Replace(result_line!reference_range, ")", "")
      s = Replace$(s, "%reference_range%", "(" & result_line!reference_range & ")")
   Else
      s = Replace$(s, "%reference_range%", "")
   Endif
   
   '--------------------------------------------------------------------------------------------------------
   'showing abnormality is a pain, these values cover most options, yes, bizaare as the options seem
   'sometimes, vendor even puts in * or a ascii 32 character
   '--------------------------------------------------------------------------------------------------------
   Select Case result_line!abnormal
      Case "N", "", " "
         cell_color = "#FFFFFF"   'white 
         font_color = "#000000"   'black
      Case "L"
         sAbnormal_text = "Below Low Normal"
      Case "LL"
         sAbnormal_text = "Below Panic"
      Case "H"
         sAbnormal_text = "Above High Normal"
      Case "HH"
         sAbnormal_text = "Above Panic"
      Case "A", "*"
         sAbnormal_text = "Abnormal"
      Case "N"
         sAbnormal_text = "Normal"
      Case "I"
         sAbnormal_text = "Indeterminate"
      Case "NA"
         sAbnormal_text = "Not Applicable"
      Case "AA"
         sAbnormal_text = "Very Abnormal"
      Case "<"
         sAbnormal_text = "Below Absolute Low"
      Case ">"
         sAbnormal_text = "Above Absolute High"
      Case "S"
         sAbnormal_text = "Susceptible"
      Case "R"
         sAbnormal_text = "Resistant"
      Case "MS"
         sAbnormal_text = "Moderately Susceptible"
      Case "VS"
         sAbnormal_text = "Very Susceptible"
      Case "U"
         sAbnormal_text = "Significant Change Up"
      Case "D"
         sAbnormal_text = "Significant Change Down"
      Case "B"
         sAbnormal_text = "Better"
      Case "W"    
         sAbnormal_text = "Worse"
      Case "-"
         'FIXME see Ron bl's notes from western pathology for details
      Case Else
         '  Message.Info("Hey, a new out of range value I've not seen yet in HL7:" & result_line!abnormal_code)
         '  Log.ErrorMsg("Hey, a new out of range value I've not seen yet in HL7:" & result_line!abnormal_code)
         s = Replace$(s, "%cell_color%", "#FFFFFF")
         s = Replace$(s, "%font_color%", "#FF0000")
         'fixme
   End Select  
   
   s = Replace$(s, "%cell_color%", cell_color)
   s = Replace$(s, "%font_color%", font_color)
   Return s
   
End

Public Function Make_Result(hl7 As CHL7) As Collection
   
   Dim cc As New Collection
   
   cc!name = hl7[3, 1]
   cc!value = hl7[5]
   cc!units = hl7[6, 1]
   cc!range = hl7[7] 
   cc!abnormal = hl7[8]
   cc!segment_type = hl7[2]
   cc!pit_ftreport = hl7[2] & "|" & hl7[3] 'eg  "FT|^^PIT"
   
   Return cc
   
End

Public Function Construct_HTML(pat As Collection, document As Collection, results As Collection, bExcludePIT As Boolean, bExcludeFTSegment As Boolean, style As Integer, Optional fgcolor As Integer = 16711680, bgcolor As Integer = 16777215) As String
   '---------------------------------------------------------------------
   'Create the html to diplay the test result from the collections
   'Note not mentioned here some purveyors of hl7 use * as the abnormal 
   'indicator, but this will be picked up automatically
   'fixme: note the routine also called from FClinical for unfiled docs
   'fix the code back there
   'fix  this routine so that pat, document and results = obligatory,but rest optional
   '--------------------------------------------------------------------
   
   Dim result_line As Collection  
   Dim TableStart As String = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0>"
   Dim in_table As Boolean = False
   Dim a_result As String       
   Dim sHtml As String
   Dim segtype As String
   Dim sSTring As String
   
   If style = const.Document_Display_As_Letter Then 
      sHtml = "<html><body><P STYLE='background: #ffb515'><FONT COLOR='#ffffff'><B>Letter: %company%</B></FONT></P>%result%</body></html>"
   Else
      sHtml = modHL7Templates.pathologyResult_Template
   End If
   
   shtml = Replace(shtml, "%company%", document!msh_sending_entity) 'was provider_of_service
   shtml = Replace(shtml, "%patient%", pat!title & " " & pat!firstname & " " & pat!surname)
   If IsNull(pat!birthdate) Then
      shtml = Replace(shtml, "%dob%", "")
   Else
      shtml = Replace(shtml, "%dob%", Format(pat!birthdate, "dd/mm/yyyy"))
   End If
   shtml = Replace(shtml, "%sex%", pat!sex)
   shtml = Replace(shtml, "%age%", pat!age_display)
   shtml = Replace(shtml, "%reference%", document!internal_reference)                  'internal surgery reference
   shtml = Replace(shtml, "%requestingdr%", document!originator)                       'he who in the first place, ordered a test, wrote the letter etc
   shtml = Replace(shtml, "%usualdr%", document!staff_destination_title & " " & document!staff_destination_wholename)
   If Not IsNull(document!date_requested) Then
      shtml = Replace(shtml, "%daterequested%", Format(document!date_requested, "dd/mm/yyyy"))
   Else
      shtml = Replace(shtml, "%daterequested%", "")
   End If
   If Not IsNull(document!date_created) Then
      shtml = Replace(shtml, "%collected%", Format(document!date_created, "dd/mm/yyyy"))
   Else
      shtml = Replace(shtml, "%collected%", "")
   End If
   shtml = Replace(shtml, "%episode%", document!provider_of_service_reference)
   shtml = Replace(shtml, "%copytodr%", "")
   '--------------------------------------------------------------
   'Clinical notes from user, don't seem to be returned very often
   '--------------------------------------------------------------
   shtml = Replace(shtml, "Clinical Information:", "")
   sSTring = document!tag  'otherwise, replace will affect original collection
   sSTring = Replace(sSTring, "_", "") 'to eliminate poorly formatted lab names
   If IsNull(document!comment_on_document) Then
      
      shtml = Replace(shtml, "%clinicalnotes%", "<B>" & UCase(sSTring) & "</B>")
   Else
      shtml = Replace(shtml, "%clinicalnotes%", "<B>" & UCase(sSTring) & "</B><BR>" & Trim(document!comment_on_document) & "<BR>")   
   End If 
   
   For Each result_line In results
      segtype = result_line!value_type
      If style = const.Document_Display_As_Result Then
         If Not (bExcludeFTSegment = True And Lower(result_line!loinc) = "report") Then
            Select Case segtype
               Case "NM", "SN", "CE", "ST"
                  If Not in_table Then
                     a_result &= TableStart
                     in_table = True
                  Endif
                  If InStr(result_line!value, ".br") Then
                     result_line!value = cHL7.FreeText_Format(result_line!value, style)  
                  End If
                  a_result &= modHL7Process.Format_Result_Line(result_line, fgcolor, bgcolor)
               Case "FT", "TX"
                  If in_table Then
                     in_table = False
                     a_result &= "</TABLE>"
                  Endif
                  If result_line!pit = True And bExcludePIT = True Then
                     a_result &= ""
                  Else
                     a_result &= "<P>" & cHL7.FreeText_Format(result_line!value, style) & "</P>"       
                  End If 
            End Select
         End If
      Else
         If segtype = "FT" Then
            If result_line!pit = True Then
               If bExcludePIT = False Then
                  a_result &= "<P>" & cHL7.FreeText_Format(result_line!value, style) & "</P>"
               Endif
            Else   
               a_result &= "<P>" & cHL7.FreeText_Format(result_line!value, style) & "</P>"
            End If
         End If
      End If  
      
   Next
   If in_table Then
      a_result &= "</TABLE>"
   Endif
   sHtml = Replace(sHtml, "%result%", a_result)    
   Return sHtml
   
End

Public Function Field_Unpack(field As String, names As String[]) As Collection
   
   Dim subfields As String[]
   Dim coll As New Collection
   Dim i As Integer
   
   subfields = Split(field, "^")
   For i = 0 To Min(subfields.Count - 1, names.Count - 1)
      coll[names[i]] = subfields[i]
   Next
   Return coll
   
End

' Public Function Make_Patient_new(field As String) As Collection 
'    '--------------------------------------------------------------------------------------
'    'Create patient collection - many problems and difficulties
'    'e.g vendor may include name, no sex or DOB or title
'    '    vendor may use inappropriate format eg Mr Barry Jones instead of Jones^Barry^^^^Mr
'    '    (or however many hats there are meant to be, can't remember of fop of my head)
'    '------------------------------------------------------------------------------------
'    
'    Dim pat As Collection 
'    Dim names As String[]
'    Dim subfields As String[] = Split(Field, "|")
'    Dim fk_patient As Integer
'    Dim fk_unmatched_patient As Integer
'    Dim r As Collection
'    Dim sql As String
'    
'    pat = Field_Unpack(subfields[modHL7Constants.PID_Name], ["surname", "firstname", "middle_name", "unknown", "title"])
'    names = Split(pat!firstname, " ")
'    If names.count = 2 Then  
'       pat!firstname = names[0]
'       pat!middle_name = names[1]
'    End If
'    pat!full_id = Trim(pat!title & " " & pat!firstname & " " & pat!surname)                              'title may not exist
'    Try pat!birthdate = modUtil.DateString_Decode(subfields[modHL7Constants.PID_Birthdate])              'this field may not exist
'    If IsNull(pat!birthdate) Then  
'       pat!birthdate = Date(1900, 1, 1)
'    Endif
'    pat!full_id &= " " & pat!birthdate
'    Try pat!sex = subfields[modHL7Constants.PID_Sex]                                                  'this field may not exist
'    If Error Then                                                                                    'probably an out of bounds error, some hl7 patient data does not contain sex
'       Try pat!sex = modContactsDBI.Sex_Get(pat!firstname)
'    End If
'    sql = "Select * from contacts.vwPatients where "
'    sql &= "lower (firstname)=$$" & Lower(pat!firstname) & "$$ "
'    sql &= " AND lower (surname)=$$" & Lower(pat!surname) & "$$"
'    If Not InStr(pat!full_id, "00:00:00") Then sql &= " And birthdate = '" & Format(pat!birthdate, "dd/mm/yyyy") & "'"
'    sql &= " limit 1"  'Limit 1 because single patient can have multiple addresses
'    r = modDBConnect.exec_query_first(sql)
'    If IsNull(r) Then
'       'see if there is a middle name
'       ' try again with reversed name
'       sql = "Select * from contacts.vwPatients where "
'       sql &= "lower (surname)=$$" & Lower(pat!firstname) & "$$ "
'       sql &= " AND lower (firstname)=$$" & Lower(pat!surname) & "$$"
'       If Not InStr(pat!full_id, "00:00:00") Then sql &= " And birthdate = '" & Format(pat!birthdate, "dd/mm/yyyy") & "'"
'       sql &= " limit 1"
'       r = modDBConnect.exec_query_first(sql)
'       If IsNull(r) Then
'          'perhaps they have sent example "Raymond Jones" and we have Raymond Bruce Jones" 'poor DB design on our part?
'          sql = "Select * from contacts.vwPatients where "
'          sql &= "lower (firstname) ILIKE $$%" & Lower(pat!firstname) & "%$$ "
'          sql &= " AND lower (surname)= $$" & Lower(pat!surname) & "$$"
'          If Not InStr(pat!full_id, "00:00:00") Then sql &= " And birthdate = '" & Format(pat!birthdate, "dd/mm/yyyy") & "'"
'          sql &= " limit 1"
'          r = modDBConnect.exec_query_first(sql)
'          If IsNull(r) Then
'             '-----------------------------------------------------------------------------------
'             'ok, give in, time to create unmatched patient
'             'Now see if this patient is already in the unmatched_patients table, if not add them
'             '-----------------------------------------------------------------------------------
'             sql = "Select * from documents.unmatched_patients where "
'             sql &= "lower (firstname)=$$" & Lower(pat!firstname) & "$$ "
'             sql &= " AND lower (surname)=$$" & Lower(pat!surname) & "$$"
'             If Not InStr(pat!full_id, "00:00:00") Then 
'                sql &= " And birthdate = '" & Format(pat!birthdate, "dd/mm/yyyy") & "'"
'             Else
'                pat.Remove("birthdate")
'             End If  
'             pat.Remove("full_id")
'             Try pat.remove("middle_name")
'             Try pat.remove("unknown")         'some idiot puts in segments like surname^^firstname^middlename
'             r = modDBConnect.exec_query_first(sql)
'             If IsNull(r) Then
'                fk_unmatched_patient = modDBConnect.insert("documents.unmatched_patients", pat)
'             Else
'                If Not IsNull(r!fk_real_patient) Then
'                   fk_patient = r!fk_real_patient
'                   fk_unmatched_patient = 0
'                Else
'                   fk_patient = 0
'                   fk_unmatched_patient = r!pk
'                End If
'             End If
'          Else
'             fk_patient = r!fk_patient
'          End If   
'       Else
'          fk_patient = r!fk_patient
'       Endif
'    Else
'       fk_patient = r!fk_patient
'    Endif 
'    pat!fk_patient = fk_patient
'    pat!fk_unmatched_patient = fk_unmatched_patient
'    Return pat
'    
' End 

Public Function Make_Patient(hl7 As CHL7, processing_log As String[]) As Collection   '01/09/2014 - the latest
   '--------------------------------------------------------------------------------------
   'Attempt to match patient, if fails then save in documents.unmatched_patients
   'e.g vendor may include name, no sex or DOB or title
   '    vendor may use inappropriate format eg Mr Barry Jones instead of Jones^Barry^^^^Mr
   '    (or however many hats there are meant to be, can't remember of fop of my head)
   'Variations: surname firstname eg smith john
   '                              eg smith john p
   '                              eg smith john peter etc
   '--------------------------------------------------------------------------------------
   
   Dim pat As Collection 
   Dim names As String[]
   Dim fk_patient As Integer
   Dim fk_unmatched_patient As Integer
   Dim fk_usual_doctor As Integer
   Dim r As Collection
   Dim sql As String
   
   processing_log.Add("Starting to decode patient information.....")
   pat = hl7.GetField(modHL7Constants.PID_Name, ["surname", "firstname", "middle_name", "unknown", "title"])
   names = Split(pat!firstname, " ")
   If names.count = 2 Then  
      pat!firstname = names[0]
      pat!middle_name = names[1]
   End If
   If Lower(pat!surname) = "gambrill" Then
      Print
   Endif
   pat!full_id = Trim(pat!title & " " & pat!firstname & " " & pat!surname)                              'title may not exist
   Try pat!birthdate = modUtil.DateString_Decode(hl7[modHL7Constants.PID_Birthdate])              'this field may not exist
   If IsNull(pat!birthdate) Then  
      pat!birthdate = Date(1900, 1, 1)
   Endif
   pat!full_id &= " " & pat!birthdate
   Try pat!sex = hl7[modHL7Constants.PID_Sex]                                                  'this field may not exist
   If Error Then                                                                                    'probably an out of bounds error, some hl7 patient data does not contain sex
      Try pat!sex = modContactsDBI.Sex_Get(pat!firstname)
   End If
   sql = "Select * from contacts.vwPatients where "
   sql &= "lower (firstname)=$$" & Lower(pat!firstname) & "$$ "
   sql &= " AND lower (surname)=$$" & Lower(pat!surname) & "$$"
   If Not InStr(pat!full_id, "00:00:00") Then sql &= " And birthdate = '" & Format(pat!birthdate, "dd/mm/yyyy") & "'"
   sql &= " limit 1"  'Limit 1 because single patient can have multiple addresses
   r = modDBConnect.exec_query_first(sql)
   If IsNull(r) Then
      'see if there is a middle name
      ' try again with reversed name
      sql = "Select * from contacts.vwPatients where "
      sql &= "lower (surname)=$$" & Lower(pat!firstname) & "$$ "
      sql &= " AND lower (firstname)=$$" & Lower(pat!surname) & "$$"
      If Not InStr(pat!full_id, "00:00:00") Then sql &= " And birthdate = '" & Format(pat!birthdate, "dd/mm/yyyy") & "'"
      sql &= " limit 1"
      r = modDBConnect.exec_query_first(sql)
      If IsNull(r) Then
         'perhaps they have sent example "Raymond Jones" and we have Raymond Bruce Jones" 'poor DB design on our part?
         sql = "Select * from contacts.vwPatients where "
         sql &= "lower (firstname) ILIKE $$%" & Lower(pat!firstname) & "%$$ "
         sql &= " AND lower (surname)= $$" & Lower(pat!surname) & "$$"
         If Not InStr(pat!full_id, "00:00:00") Then sql &= " And birthdate = '" & Format(pat!birthdate, "dd/mm/yyyy") & "'"
         sql &= " limit 1"
         r = modDBConnect.exec_query_first(sql)
         If IsNull(r) Then
            '-----------------------------------------------------------------------------------
            'ok, give in, time to create unmatched patient
            'Now see if this patient is already in the unmatched_patients table, if not add them
            '-----------------------------------------------------------------------------------
            sql = "Select * from documents.unmatched_patients where "
            sql &= "lower (firstname)=$$" & Lower(pat!firstname) & "$$ "
            sql &= " AND lower (surname)=$$" & Lower(pat!surname) & "$$"
            If Not InStr(pat!full_id, "00:00:00") Then 
               sql &= " And birthdate = '" & Format(pat!birthdate, "dd/mm/yyyy") & "'"
            Else
               pat.Remove("birthdate")
            End If  
            pat.Remove("full_id")
            Try pat.remove("middle_name")
            Try pat.remove("unknown")         'some idiot puts in segments like surname^^firstname^middlename
            r = modDBConnect.exec_query_first(sql)
            If IsNull(r) Then
               fk_unmatched_patient = modDBConnect.insert("documents.unmatched_patients", pat)
               processing_log.Add("Couldn't find" & pat!full_id & " in our database, inserted as an unmatched patient")
            Else
               If Not IsNull(r!fk_real_patient) Then
                  fk_patient = r!fk_real_patient
                  fk_unmatched_patient = 0
               Else
                  fk_patient = 0
                  fk_unmatched_patient = r!pk
                  processing_log.Add("Found a match in the unmatched patient table")
               End If
            End If
         Else
            fk_patient = r!fk_patient
            Try fk_usual_doctor = r!fk_doctor   
         End If   
      Else
         fk_patient = r!fk_patient
         Try fk_usual_doctor = r!fk_doctor  
      Endif
   Else
      fk_patient = r!fk_patient
      Try fk_usual_doctor = r!fk_doctor  
   Endif 
   If fk_patient Then
      processing_log.Add("Success: matched patient to " & pat!full_id)
      pat!fk_patient = fk_patient
      pat!fk_unmatched_patient = fk_unmatched_patient
      If fk_usual_doctor Then    
         pat!fk_doctor = fk_usual_doctor
      Else
         pat!fk_doctor = Null
      End If   
   Endif
   If fk_unmatched_patient Then
      pat!fk_patient = 0
      pat!fk_unmatched_patient = fk_unmatched_patient
      pat!fk_doctor = Null
   Endif
   Return pat
   
Catch
   processing_log.Add("Fatal error, could not extract anything resembling a patient name")
   processing_log.Add("This message will be allocated to a generic Uknown Patient with DOB 01/01/1900")
   pat!surname = "Patient"
   pat!firstname = "Unknown"
   pat!birthdate = Date(1900, 1, 1)
   sql = "Select * from documents.unmatched_patients where "
   sql &= "lower (firstname)=$$unknown$$ "
   sql &= " AND lower (surname)=$$patient$$"
   sql &= " And birthdate = '01/01/1900'"
   r = modDBConnect.exec_query_first(sql)
   If IsNull(r) Then
      processing_log.Add("Couldn't find 'Unknown Patient' in our database, inserted as an unmatched patient")
      pat!fk_unmatched_patient = modDBConnect.insert("documents.unmatched_patients", pat)
      pat!fk_patient = 0
   Else
      If Not IsNull(r!fk_real_patient) Then
         pat!fk_patient = r!fk_real_patient
         pat!fk_unmatched_patient = 0
      Else
         pat!fk_patient = 0
         pat!k_unmatched_patient = r!pk
         processing_log.Add("Found a match in the unmatched patient table")
      End If
   End If 
   Return pat

End 

Private Function Replace_Coll(s As String, coll As Collection, field As String) As String
   
   If coll.Exist(field)
      Return Replace$(s, "%" & field & "%", coll[field], gb.IgnoreCase)
   Else
      Return Replace$(s, "%" & field & "%", "", gb.IgnoreCase)
   Endif
   
End

Public Function Get_EOL_Char(filepath As String) As Integer
   
   Dim oneline As String 
   Dim hFile As File 
   Dim linecount As Integer
   Dim eol_char As Integer
   
   Try hfile = Open filepath For Input 
   hfile.EndOfLine = gb.unix
   eol_char = gb.unix
   While Not Eof(hfile) 
      Line Input #hfile, OneLine
      Inc linecount
   Wend
   
   If Linecount = 1 Then
      eol_char = gb.Mac
   Else
      eol_char = gb.Windows
   End If
   
   Close #hfile
   Return eol_char
   
End

Public Function Get_Sending_Application(msh_subseg_application As String, processing_log As String[]) As String
   '--------------------------------------------------------------------------------------------------------
   'Get the sending application eg Apollo, SNP, Genie Vx.y, Medical Objects, etc, sometimes its non existant
   '--------------------------------------------------------------------------------------------------------
   
   Dim sending_application As String
   
   If InStr(msh_subseg_application, "^") Then
      sending_application = Split(msh_subseg_application, "^")[0]
   Else
      sending_application = msh_subseg_application
   End If
   If sending_application = "" Then
      sending_application = "Unknown"
   Endif
   If Not IsNull(processing_log) Then
      processing_log.Add("Sending application seems to be " & sending_application)
   Endif
   Return sending_application
   
End

Public Function Nata_Labs_Get() As Collection
   
   Return modCache.Get("documents.lu_nata_laboratories") 
   
End

Public Function Get_SendingEntity_WITH_RESULT(msh_subseg_sender As String, Optional processing_log As String[]) As Collection
   '-------------------------------------------------------------------------------------------
   'msh_subseg_sender has been extracted from MSH and contains!name
   'Some samples of MSH are:
   '
   'Douglas:                  MSH|^~\&|APOLLO|NATA^2178^N|||201009161340+1000||dhm1026.ORU||1026 
   'Hunter Imaging Group      MSH|^~\&|Sonic v2|HIG|  
   'Newcastle pathology       MSH|^~\&|LRS|Newcastle Pathology
   'Medical objects           MSH|^~\&|EQUATORDXTRAY^EQUATORDXTRAY:2.20.2 (Build 1491)^L|Dr Andrew Hedges^2EF632CD-F10D-46D4-BBF8-B68510F964A4^GUID|
   'Hunter Area pathology     MSH|^~\&|HAPSDLOAD|HAPS| 'this is Hunter Area Pathology Services
   'Symbion Laverty Pathology MSH |^~\&|ULTRA|Symbion Laverty Pathology|
   '
   'If a nata lab - use the lookup table, otherwise included a couple for me to save db calls
   '------------------------------------------------------------------------------------------------
   
   Dim SendingEntity As New Collection
   Dim Sub_segs As String[]
   Dim sql As String
   Dim R As Collection
   
   If InStr(msh_subseg_sender, "^") Then
      sub_segs = Split(msh_subseg_sender, "^")
      SendingEntity!name = Trim(sub_segs[0])
   Else
      SendingEntity!name = Trim(msh_subseg_sender)
   End If
   '------------------------------------------------------------------------
   'Now, as they further don't identify themselves correctly, some more work
   '-----------------------------------------------------f-------------------
   Select Case SendingEntity!name
      Case "NATA"
         sql = "Select distinct pk,labname from documents.lu_nata_laboratories WHERE accreditation_no = '" & sub_segs[1] & "' LIMIT 1"
         R = modCache.Query("documents.lu_nata_laboratories", sql)
         '    R = modDBConnect.exec_query(sql)
         If R.count Then
            SendingEntity!name = R!labname
            SendingEntity!fk_lu_message_display_style = const.Document_Display_As_Result 'should be fk_lu_display_as but for historical reasons its not!
         Endif
      Case "HIG"
         SendingEntity!name = "Hunter Imaging Group"
         SendingEntity!fk_lu_message_display_style = const.Document_Display_As_Result
      Case "HAPS"
         SendingEntity!name = "Hunter Area Pathology Services"
         SendingEntity!fk_lu_message_display_style = const.Document_Display_As_Result
      Case Else
         SendingEntity!fk_lu_message_display_style = const.Document_Display_As_Letter  
   End Select
   Return SendingEntity          
   
End

Public Function Get_SendingEntity(msh_subseg_sender As String, Optional processing_log As String[]) As Collection
   '-------------------------------------------------------------------------------------------------------------------
   'msh_subseg_sender has been extracted from MSH and contains!name
   'Some samples of MSH are:
   '
   'Douglas:                  MSH|^~\&|APOLLO|NATA^2178^N|||201009161340+1000||dhm1026.ORU||1026 
   'Hunter Imaging Group      MSH|^~\&|Sonic v2|HIG|  
   'Newcastle pathology       MSH|^~\&|LRS|Newcastle Pathology
   'Medical objects           MSH|^~\&|EQUATORDXTRAY^EQUATORDXTRAY:2.20.2 (Build 1491)^L|Dr Andrew Hedges^2EF632CD-F10D-46D4-BBF8-B68510F964A4^GUID|
   'Hunter Area pathology     MSH|^~\&|HAPSDLOAD|HAPS| 'this is Hunter Area Pathology Services
   'Symbion Laverty Pathology MSH |^~\&|ULTRA|Symbion Laverty Pathology|
   '
   'If a nata lab - use the lookup table, otherwise included a couple for me to save db calls
   'But.... sadly not all accredited pathology labs use their NATA number eg pathology north, pathology west etc (govt's)
   '----------------------------------------------------------------------------------------------------------------------
   
   Dim SendingEntity As New Collection
   Dim Sub_segs As String[]
   Dim sql As String
   Dim all_labs As Collection
   Dim lab As Collection
   
   If InStr(msh_subseg_sender, "^") Then
      sub_segs = Split(msh_subseg_sender, "^")
      SendingEntity!name = Trim(sub_segs[0])
   Else
      SendingEntity!name = Trim(msh_subseg_sender)
   End If
   '------------------------------------------------------------------------
   'Now, as they further don't identify themselves correctly, some more work
   '-----------------------------------------------------f-------------------
   Select Case SendingEntity!name
      Case "NATA"
         If IsNumber(sub_segs[1]) Then    
            lab = modCache.Get("documents.lu_nata_laboratories", sub_segs[1], "accreditation_no") 'first occurrence of nata number = company name (usally)
            If Not IsNull(lab) Then  
               SendingEntity!name = lab!labname
               SendingEntity!fk_lu_message_display_style = const.Document_Display_As_Result 'should be fk_lu_display_as but for historical reasons its not!
            Endif
         Else 'something else masquerading as a nata lab e.g this: MSH|^~\&|DSP|NATA^HOBART,LAUNCESTON AND NORTH WEST PATH^N||, not using a nata number
            SendingEntity!name = sub_segs[1]
            SendingEntity!fk_lu_message_display_style = const.Document_Display_As_Result
         End If   
      Case "HIG"
         SendingEntity!name = "Hunter Imaging Group"
         SendingEntity!fk_lu_message_display_style = const.Document_Display_As_Result
      Case "HAPS"
         SendingEntity!name = "Hunter Area Pathology Services"
         SendingEntity!fk_lu_message_display_style = const.Document_Display_As_Result
      Case Else
         If InStr(Lower(SendingEntity!name), "imaging") Or InStr(Lower(SendingEntity!name), "ultrasound") Or InStr(Lower(SendingEntity!name), "image") Or InStr(Lower(SendingEntity!name), "radiology") Or InStr(Lower(SendingEntity!name), "xray") Or InStr(Lower(SendingEntity!name), "x-ray") Or InStr(Lower(SendingEntity!name), "pathology") Or InStr(Lower(SendingEntity!name), "audiology") Then
            SendingEntity!fk_lu_message_display_style = const.Document_Display_As_Result
         Else
            SendingEntity!fk_lu_message_display_style = const.Document_Display_As_Letter  
         Endif
   End Select
   Return SendingEntity          
   
End
