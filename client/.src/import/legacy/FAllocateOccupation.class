' Gambas class file

Private occupations As Collection
Private occupation As Collection
Private fk_occupation As Integer
'

Public Sub Init(occ As String)

   ' TextLabel1.text = "<B>Selecting an occupation</B><BR><BR>"
   ' "Easygp uses the Australian Bureau of Statistics (ABS) coded occuptions, so the list is fixed and not user extensible, i.e you may not add new occupations via the user interface. "
   ' "Please select an occupation to match your existing occupation. Should it absolutely be impossible, which is very "
   ' "unlikely, please email the EasyGP developers (see Help/About in the main FClinical Screen.\n\n"
   ' "Note that occupations with the suffix 'nfd' mean 'Not Further Defined'"
   txtOccupationNew.text = occ

End

Public Sub Run() As Boolean

   Return Not Me.ShowModal()

End

Public Sub btnOK_Click()

   Dim mso As CRow
   Dim R As Result
   Dim sql As String

   If txtOccupation.text = "" Then
      txtOccupation.SetFocus()
      Return
   Endif
   '-----------------------------------------------------------
   'if the verified occupation spelling different to that found
   ' in the table putting the data into this field
   'save this as a probable mis-spelt occupation
   '-----------------------------------------------------------
   If modUtil.StripExtraBlanks(txtOccupation.text) <> Trim(txtOccupationNew.text) Then
      sql = "Select * from import_export.lu_misspelt_occupations where misspelt_occupation ILIKE $$"
      sql &= Lower(Trim(txtOccupationNew.text)) & "$$ AND "
      sql &= "occupation ILIKE $$" & Lower(modUtil.StripExtraBlanks(txtOccupation.text)) & "$$"
      R = modDBConnect.exec_query(sql)
      If Not R.count Then
         mso = New CRow
         mso!occupation = Lower(modUtil.StripExtraBlanks(txtOccupation.text))
         mso!misspelt_occupation = Lower(Trim(txtOccupationNew.text)) 'don't strip internal blanks
         mso.Save("import_export.lu_misspelt_occupations", "fk_lu_misspelt_occupations")
         modDBConnect.CommitTrans()
      End If
   End If
   const.globalstring = Lower(modUtil.StripExtraBlanks(txtOccupation.text))
   Me.Close(True)

End

Public Sub btnCancel_Click()

   const.globalstring = ""
   Me.Close

End

Public Sub listview1_KeyPress()

   If Key.code = Key.return Then
      listview1_DblClick
   End If

End

Public Sub listview1_DblClick()

   listview1.MoveCurrent
   occupation = occupations[listview1.Item.key]
   occupation_Select
   listview1.Visible = False

End

Public Sub Occupation_Get()

   With listview1
      .Visible = False
      .Clear
   End With
   If Trim(txtoccupation.text) = "" Then Return
   occupations = modCommonDBI.occupations_get(Trim(txtoccupation.text))
   Listview1.Clear()
   If occupations.count Then
      For Each occupation In occupations
         listview1.Add(occupation!pk, occupation!occupation)
      Next
      If occupations.count = 1 Then
         occupation_Select()
      Else
         With Listview1
            .Visible = True
            .Raise
            .tag = txtOccupation
         End With
      Endif

      Return
   End If

End
'

Public Sub Occupation_Select()

   txtoccupation.text = occupation!occupation
   fk_occupation = occupation!pk

End

Public Sub txtOccupation_GotFocus()

   With listview1
      .top = Last.Parent.top + Last.Parent.height
      .left = Last.Left
      .Visible = False
      .width = txtoccupation.Width
   End With

End

Public Sub txtOccupation_Change()

End

Public Sub txtOccupation_KeyRelease()

   Return
   occupation_get()

End

Public Sub txtOccupation_KeyPress()

   Return
   If Key.code = Key.Down Then
      listview1.SetFocus()
   Endif
   Inc Application.Busy

End
