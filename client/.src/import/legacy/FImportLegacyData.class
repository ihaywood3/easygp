' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-------------------------------------------------------------------
' PURPOSE        To import legacy data
' TODO           Just about everything this is only just started
'                check are getting all the comm types
' BUGS           Millions, in practice this module won't work at all
' ------------------------------------------------------------------
Private oddoccupations As String[]
Private OddRecords As Collection
Private rejected_records As Collection
Private patients As Collection
Private patient As Collection
Private surname As Integer = 0
Private firstname As Integer = 1
Private birthdate As Integer = 2
Private social_history As Integer = 3
Private sLineInput As String
Private currentconsult As CConsult
Private import_dir As String = User.home &/ "easygp/import/"
Private Errorfile As File
Private hfile As File
Private FICPC As FICPCBrowser
Private Form_directorychooser As FDirectoryChooser
Private Form_Help As FHtmlViewer
Private json_string As String
Private skipped_towns As Collection
Private skipped_town As Collection
Private missing_towns As Collection
Private missing_town_count As Integer
Private misspelt_towns As Collection
Private misspelt_town As Collection
Private bSkipTown As Boolean
Public fk_town As Integer
Private Corrected_Town As Collection
Private hLog_file As File
Private last_fk_relationship As Integer
Private bexit As Boolean

Static Private Form_Legacy_Data_Import As FImportLegacyData

Static Public Sub Corrected_Towns_Set(Town As Collection)

   Form_Legacy_Data_Import.Set_Corrected_Town(town)

End

Public Sub Set_Corrected_Town(town As Collection)
   'collection =  the real name, the real key

   Corrected_Town = town
   fk_town = town!pk

End

Public Sub form_Open()

   init()

End

Public Sub init()

   Form_Legacy_Data_Import = Me
   With Form_Help = New FHtmlViewer(Vbox_Help)
      .tbWebBrowserZoomIn.Visible = True
      .tbWebBrowserZoomOut.Visible = True
      .Help_Show("importing-data-from-other-systems.html")
   End With
   bexit = True

   cmbMedicalProgram.Add("DrsDesk")
   cmbMedicalProgram.Add("Medical Director V2")
   cmbMedicalProgram.Add("Medical Director V3")
   cmbMedicalProgram.Add("Best Practice")
   cmbMedicalProgram.Add("Profile")
   cmbMedicalProgram.Add("Genie")
   cmbMedicalProgram.Add("Medibase")
   txtPastHistoryPath.text = User.home &/ "easygp/import/Exported_PastHistory_small.txt" 'fixme
   lblmeasure.text = "  Import Patient Demographics  "
   modEditAreaHelpers.Resize_labels(Vbox_EditArea, lblmeasure)
   cmbMedicalProgram.Index = -1
   Try Settings_Load()
   bexit = False

End

Public Sub Settings_Save()

   Settings["FImportLegacyData/HSplit_ImportLegacy.Layout"] = HSplit_ImportLegacy.Layout
   Settings["FImportLegacyData/VSplit_Legacy.Layout"] = VSplit_Legacy.layout
   Settings["FImportLegacyData/HSplit_Legacy.layout"] = HSplit_Legacy1.layout
   Settings["FImportLegacyData/import_dir"] = Trim(txtImportDirectory.text)
   Settings["FImportLegacyData/import_program"] = cmbMedicalProgram.Text

End

Private Sub Settings_Load()

   HSplit_ImportLegacy.Layout = Settings["FImportLegacyData/HSplit_ImportLegacy.Layout", modUtil.HSplit([996, 707])]
   VSplit_Legacy.layout = Settings["FImportLegacyData/VSplit_Legacy.Layout", modUtil.VSplit([481, 212])]
   HSplit_Legacy1.layout = Settings["FImportLegacyData/HSplit_Legacy.Layout", modUtil.HSplit([547, 209])]
   txtImportDirectory.text = Settings["FImportLegacyData/import_dir", User.home &/ "easgyp/import"]
   cmbMedicalProgram.index = cmbMedicalProgram.Find(Settings["FImportLegacyData/import_program"])

End

Public Sub chkLegacyData_Click()

   '-------------------------------------------------------------------
   'User has checked a box, wants to load legacy data for this segment
   'Search for the children of the Hbox the checkbox is in, when find
   'the only other Hbox which contains the toolbutton, enable or
   'disable the toolbutton according to whether the checkbox is checked
   '-------------------------------------------------------------------
   Dim hCtrl As Control
   Dim hCtrl1 As Control
   Dim aBox As Hbox
   Dim tb As Toolbutton
   Dim aTextBox As Textbox

   For Each hCtrl In Last.parent.children
      If hctrl Is Hbox Then
         aBox = hctrl
         Break
      End If
   Next
   For Each hCtrl In aBox.Children
      If hctrl Is Toolbutton Then
         tb = hctrl
         tb.Enabled = Last.value
         If Last.value = False Then
            For Each hCtrl1 In Last.parent.children
               If hCtrl1 Is TextBox Then
                  aTextbox = hCtrl1
                  aTextbox.text = ""
               End If
            Next
         End If
      End If
   Next

End

Public Sub tbSelectlegacyFile_Click()
   '---------------------------------------------
   'Select a file to import demographic data from
   '---------------------------------------------

   Dim hfile As File
   Dim sFilename As String
   Dim sLineInput As String
   Dim hCtrl As Control
   Dim aTextbox As Textbox
   Dim x As Integer

   'Dialog.Path = EasyGP.dir_root & "import/"
   '------------------------------
   'No file to process, then leave
   '------------------------------
   If Dialog.OpenFile() Then Return
   '-----------------------------------------
   'file to process, then put its name in the
   'corresponding textbox on the screen
   '-----------------------------------------
   For Each hctrl In Last.parent.parent.children
      If hctrl Is Textbox Then
         aTextbox = hctrl
         aTextbox.text = Dialog.Path
         ' tbImportExport.Enabled = True
         Break
      End If
   Next

End

Public Sub txtLegacyImportPath_LostFocus()

   Last.pos = 1

End

Public Sub DrsDesk_Vaccinations_Import()
   '---------------------------------------------------------------------------------------------------------------------------------------------
   ' Patient|Peter|08/06/1990 0:00:00|25/09/2002|30|20|A1018|0|Hepatitis B vaccine|H-B-Vax II Paediatric Formulation|Injection|Hepatitis B|0|0
   '  surname  firstn  birthdate         vax date         sno.    type vaccine            brand vaccine                 formulation|Schedule
   '    0         1        2               3         4|5   6    7      8                        9                           10            11
   '---------------------------------------------------------------------------------------------------------------------------------------------
   ' 0=surname
   ' 1=firstname
   ' 2=birthdate
   ' 3=date_vaccination
   ' 4=
   ' 5=
   ' 6=serial number
   ' 7=type of vaccine
   ' 9=brand name
   ' 10=formulation
   ' ------------------------------------------------------------------------------

   Dim sFilename As String
   Dim hfile As File
   Dim sFileError As String
   Dim surname As Integer = 0
   Dim firstname As Integer = 1
   Dim birthdate As Integer = 2
   Dim vax_date As Integer = 3
   Dim vax_serialno As Integer = 6
   Dim vax_target_disease As Integer = 7
   Dim vax_brand As Integer = 9
   Dim vax_formulation As Integer = 10
   Dim vax_schedule As Integer = 11
   Dim bits As String[]
   Dim sLastPatient As String
   Dim scurrentPatient As String
   Dim vaccine As Collection
   Dim vaccines As Collection
   Dim bFoundVaccine As Boolean
   Dim bFoundschedule As Boolean
   Dim Vaccination As CRow
   Dim vaccinations As Collection
   Dim vaccination_count As Integer
   Dim import_count As Integer
   Dim bValidPatient As Boolean
   Dim learntTerms As Result
   Dim ErrorFile As File
   Dim sql As String
   Dim $Result As Result
   Dim total_vaccine_count As Integer
   Dim schedule As Collection
   Dim schedules As Collection
   Dim progressNote As CRow

   modDBConnect.BeginTrans()
   vaccines = modDBConnect.exec_query_collection("Select * from clin_vaccination.vwVaccines")
   schedules = modDBConnect.exec_query_collection("Select * from clin_vaccination.lu_schedules")
   patients = New Collection
   Sfilename = import_dir & "/" & Trim("Exported_Vaccinations.txt")
   If sFilename = "" Then
      txtImportDirectory.SetFocus()
      Return
   End If
   '------------------------------------------------------------------
   'Attempt to open the designated file
   'If fail, given an appropriate understandable error message and exit
   '-------------------------------------------------------------------
   Try hfile = Open sfilename For Input
   If Error Then
      sFileError = File_IO_Describe_Error(Error.code)
      Message.Warning("Unable to open " & sFilename & "\n\n" & sFileError)
      Return
   End If
   ErrorFile = Open import_dir & "/vaccination_import_errors.txt" For Write Create   'open an error file to log errors

   '-------------------------------------------------------------------
   'So far so good - hourglass to user to indicate we are go for import
   '-------------------------------------------------------------------
   Inc Application.Busy
   lvDataImportProgressMessages.Clear()
   lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Starting vaccination import..............")
   Patients = New Collection
   While Not Eof(hfile)
      '------------------------------------------
      'Input each line and split at the delimeter
      '------------------------------------------
      Line Input #hfile, sLineInput
      bits = Split(sLineInput, "|")
      scurrentPatient = bits[firstname] & bits[surname] & bits[birthdate]
      If sLastPatient <> scurrentPatient Then
         '------------------------------------------------------
         'if line contains a new patient, find match in back end
         'and reset keys
         '------------------------------------------------------
         lblmeasure.text = "Imported patient number:" & import_count & " " & sLastPatient
         Print "committing data..............."
         modDBConnect.CommitTrans()
         total_vaccine_count += vaccination_count
         ' Print "Total Vaccines Processed:" & total_vaccine_count
         vaccination_count = 0
         lblProgress.text = "Importing vaccine record for " & scurrentPatient
         '  Print "loading data for " & scurrentPatient
         Inc import_count
         bValidPatient = False
         patient = Patient_Identify(bits)                                    'create the next patient.
         If patient!fk_patient Then
            sLastPatient = bits[firstname] & bits[surname] & bits[birthdate]
            currentconsult = New CConsult(patient)
            currentconsult.Set(const.ConsultType_DataImport, "Vaccination Imported")
            bValidPatient = True
         End If
      End If
      If bValidPatient Then
         '-------------------------------------------------------------------------
         ' At this point probably got a valid patient, save each family vaccination
         '-------------------------------------------------------------------------
         'Create TABLE clin_vaccination.vaccinations
         ' (
         '   pk serial Not Null,
         ' x  fk_vaccine integer,
         ' x  fk_schedule integer,
         ' x  fk_site integer Not Null Default 0, - - As Sometimes we need To record a vaccine component As Not given...
         ' x  fk_laterality integer,
         ' x  date_given character varying(10), - - Not a Date field because sometimes may need To record just say 01 / 2002 Or 1998
         ' x  serial_no text Not Null Default 'not recorded'::text,
         '   fk_progressnote integer,
         ' x  notes text, - - notes about the vaccine e.g this vaccine Not given because child was...
         ' x  not_given boolean Default False, - - If True Then this vaccine was Not given.Recorded because a schedule...
         '  x deleted boolean Default False,
         '   CONSTRAINT vaccinations_pkey PRIMARY KEY(pk)
         ' )
         ' With (
         '   OIDS = False
         ' );
         Progressnote = New CRow
         Progressnote!fk_consult = currentconsult.GetPK()
         Progressnote!fk_audit_action = const.cAuditAction_FileImport
         Progressnote!fk_section = const.cSection_Vaccination
         Progressnote!fk_problem = 0 'no problem
         '-------------------------------------------------------------------------
         'get fk_schedule - first try and match the legacy vaccine with EasyGP vaccines.
         '-------------------------------------------------------------------------
         bFoundschedule = False
         bFoundVaccine = False
         Vaccination = New CRow
         For Each vaccine In vaccines
            If Lower(Trim(bits[vax_brand])) = Lower(vaccine!brand) Then
               Vaccination!fk_vaccine = vaccine!pk
               bFoundVaccine = True
               Progressnote!notes = "Imported vaccine: " & bits[vax_brand] & " given " & bits[vax_date]
               Break
            Endif
         Next
         If bFoundVaccine = False Then
            Print "missing vaccine"
            Message.Info("missing vaccine - richar stop here")
            Print
         Endif
         '-----------------------------------------------------------------------
         'get fk_vaccine - first try and match legacy vaccine with EasyGP vaccine
         '-----------------------------------------------------------------------
         If Trim(bits[vax_schedule]) = "4 year childhood (From 1/11/2005)" Then 'I changed the name of this schedule
            bits[vax_schedule] = "4 year childhood"
         Endif
         If Trim(bits[vax_schedule]) = "18 month childhood (From 1/11/2005)" Then
            bits[vax_schedule] = "18 month childhood"
         Endif
         '     If Trim(bits[vax_schedule]) = "2 month childhood (From 1/11/2005)" Then
         '        bits[vax_schedule] = "2 month childhood - old prevenar"
         '    Endif
         '    If Trim(bits[vax_schedule]) = "6 month childhood (From 1/11/2005)" Then
         '        bits[vax_schedule] = "6 month childhood - old prevenar"
         '    Endif
         '    If Trim(bits[vax_schedule]) = "12 month childhood (From 1/11/2005)" Then
         '        bits[vax_schedule] = "12 month childhood"
         '    Endif
         '     If Trim(bits[vax_schedule]) = "2 month childhood (Born after 01 May 2007)" Then
         '         bits[vax_schedule]) = "2 month childhood - old prevenar"
         '     Endif
         '     If Trim(bits[vax_schedule]) = "4 month childhood (Born after 01 May 2007)" Then
         '         bits[vax_schedule] = "4 month childhood - old prevenar"
         '     Endif
         '     If Trim(bits[vax_schedule]) = "6 month childhood (Born after 01 May 2007)" Then
         '         bits[vax_schedule] = "6 month childhood - old prevenar"
         '     Endif

         For Each Schedule In schedules
            If Lower(Trim(bits[vax_schedule])) = Lower(schedule!schedule) Then
               Vaccination!fk_schedule = schedule!pk
               bFoundschedule = True
               progressNote!notes &= " for " & bits[vax_schedule]
               Break
            Endif
         Next
         If bFoundschedule = False Then
            Print "missing schedule"
         Endif
         Vaccination!fk_consult = currentconsult.GetPK()
         Vaccination!fk_progressnote = 0  'no progress note
         Vaccination!fk_laterality = 0    'were not kept in drsdesk
         Vaccination!fk_site = 0          'were not kept in drsdesk
         Vaccination!date_given = Trim(bits[vax_date]) 'not a date in the backend see notes there
         Vaccination!notes = ""
         If Trim(bits[vax_serialno]) = "" Then
            bits[vax_serialno] = "Unknown"
         Endif
         Vaccination!serial_no = Trim(bits[vax_serialno])
         '  progressNote.Save("clin_consult.progressnotes", "fk_progressnote")
         '  Vaccination!fk_progressnote = progressNote!fk_progressnote
         Vaccination.Save("clin_vaccination.vaccinations", "fk_vaccination")
         Inc vaccination_count
         '' If import_count = 2 Then
         '  Break
         'Endif
      End If

   Wend
   modDBConnect.CommitTrans()
   Dec Application.Busy
   chkImportVaccinations.value = False
   lblProgress.text = ""

End

Public Sub DrsDesk_Ethicity_Occupation_Country_Of_Birth_Import()
   '---------------------------------------------------------------------------------
   'Imports patients ethnicity country of birth and occupation from DrsDesk Software
   'Adams|George|20/12/1925 0:00:00|Scotland|tool maker|0|0|1
   'Sname|Fname |dob               |country|occupation|ab|torres|retired
   'Adams|George|20/12/1925 0:00:00|3520||English|tool maker
   '---------------------------------------------------------------------------------

   Dim iSurname As Integer = 0
   Dim iFirstname As Integer = 1
   Dim iBirthdate As Integer = 2
   Dim iCountry_birth As Integer = 3
   Dim iOccupation As Integer = 4
   Dim iAboriginality As Integer = 5
   Dim iTorresstraightislander As Integer = 6
   Dim iRetired As Integer = 7
   Dim sfilename As String
   Dim Errorfile As File
   Dim bits As String[]
   Dim sFileError As String
   Dim bError As Boolean
   Dim sLinecount As Integer
   Dim sCurrentPatient As String
   Dim sLastPatient As String
   Dim bValidPatient As Boolean
   Dim import_count As Integer
   Dim occupation As CRow
   Dim country_of_birth As CRow
   Dim patient_aboriginality As CRow
   Dim person As CRow
   Dim Ethnicities As Collection
   Dim Countries As Collection
   Dim ethnicity As Collection
   Dim country As Collection
   Dim fk_occupation As Integer

   countries = modDBConnect.exec_query_collection("Select * from common.lu_countries")
   ethnicities = modDBConnect.exec_query_collection("Select * from common.lu_ethnicity")
   '-------------------------------------------------
   'Insist on at least some sort of attempt at a name
   '-------------------------------------------------
   import_dir = "/home/richard/easygp/import/"
   Sfilename = import_dir & "/" & Trim("Exported_Ethnicity.txt")
   If sFilename = "" Then
      txtImportDirectory.SetFocus()
      Return
   End If
   '------------------------------------------------------------------
   'Attempt to open the designated file
   'If fail, given an appropriate understandable error message and exit
   '-------------------------------------------------------------------
   Try hfile = Open sfilename For Input
   If Error Then
      sFileError = File_IO_Describe_Error(Error.code)
      Message.Warning("Unable to open " & sFilename & "\n\n" & sFileError)
      Return
   End If
   '-------------------------------------------------------------------
   'So far so good - hourglass to user to indicate we are go for import
   '-------------------------------------------------------------------
   Inc Application.Busy
   lvDataImportProgressMessages.Clear()
   lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Starting ethnicity & occupation import..............")
   Patients = New Collection
   While Not Eof(hfile)
      '------------------------------------------
      'Input each line and split at the delimeter
      'carriage returns randomly in the text
      '------------------------------------------
      Line Input #hfile, sLineInput                                               'import a line
      Inc slinecount
      bits = Split(sLineInput, "|")                                               'split at delimiter
      scurrentPatient = bits[firstname] & bits[surname] & bits[birthdate]         'firstnamenamebirthdate is current patient
      If sLastPatient <> scurrentPatient Then                                     'if this patient different to the last, save the habits
         bValidPatient = False                                                   'scurrentPatient <> that on the current sLineInput
         patient = Patient_Identify(bits)                                        'so identify the patient
         If patient!fk_patient Then                                              'if we find them
            sLastPatient = bits[firstname] & bits[surname] & bits[birthdate]     'they become the current patient
            bValidPatient = True                                                 'flag the patient as valid
            Inc import_count
            Print "importing data for " & bits[firstname] & " " & bits[surname]
         End If
      End If
      If bValidPatient Then
         '--------------------------------------------------------------------------------------
         'rightly or wrongly the aboriginality lookup flag is in clerical.data_patients
         'so only have to change that field, otherwise the data goes into contacts.data_patients
         '--------------------------------------------------------------------------------------
         Person = New CRow
         Person.put_unchanged(patient!fk_person, "fk_person")
         person!fk_language = const.language_english                                      'well, is most likely
         '-----------------------
         'First the aboriginality
         '-----------------------
         patient_aboriginality = New CRow
         patient_aboriginality.put_unchanged(patient!fk_patient, "fk_patient")
         patient_aboriginality!fk_lu_aboriginality = 0                                        'default to non aboriginal
         If bits[iAboriginality] = 1 Then
            patient_aboriginality!fk_lu_aboriginality = const.aboriginality_aboriginal
         Endif
         If bits[iTorresstraightislander] = 1 Then
            patient_aboriginality!fk_lu_aboriginality = const.aboriginality_Torres_Strait_Islander
         Endif
         patient_aboriginality.Save("clerical.data_patients", "fk_patient")
         '----------------------------------------------------------------
         'Now the rest of the person stuff - keep in contacts.data_persons
         '----------------------------------------------------------------
         If bits[surname] = "Askew" Then
            Print
         Endif
         If bits[iRetired] = True Then
            Person!retired = True                               'the backend default is false so don't implicitly set this
         Else
            Person!retired = False
         Endif
         If Trim(bits[iOccupation]) <> "" Then                      'get the key or create new row in common.lu_occupations
            fk_occupation = Occupation_Get(Trim(bits[iOccupation])) 'return proper fk_occupation or 0 if user aborts adding one
            If fk_occupation Then person!fk_occupation = fk_occupation
         Endif
         If Lower(bits[iCountry_birth]) = "england" Then bits[iCountry_birth] = "United Kingdom"
         If Lower(bits[iCountry_birth]) = "scotland" Then bits[iCountry_birth] = "United Kingdom"
         If Lower(bits[iCountry_birth]) = "wales" Then bits[iCountry_birth] = "United Kingdom"

         If InStr(Lower(bits[iCountry_birth]), "romania") Then bits[iCountry_birth] = "Romania"
         If Trim(Lower(bits[iCountry_birth])) = "netherlands" Then bits[iCountry_birth] = "Netherlands"
         If Trim(Lower(bits[iCountry_birth])) = "republic of ireland" Then bits[iCountry_birth] = "Ireland"
         If Trim(Lower(bits[iCountry_birth])) = "northern ireland" Then bits[iCountry_birth] = "Ireland"

         If bits[iCountry_birth] <> "" Then
            country = modContactsDBI.Country_Get_Single(bits[iCountry_birth])
            If Not IsNull(country) Then
               person!country_code = country!country_code

               '------------------------------------------------
               'Now try and guess ethnicity for commoner groups
               '------------------------------------------------
               Select Case person!country_code
                  Case "UA" 'ukraine
                     person!fk_ethnicity = const.ethnicity_Ukrainian
                  Case "CY" 'cyprus
                     person!fk_ethnicity = const.ethnicity_Cypriot_Unspecified
                  Case "CH" 'switzerland
                     person!fk_ethnicity = const.ethnicity_swiss
                  Case "MU" 'mauritius
                     person!fk_ethnicity = const.ethnicity_Mauritian
                  Case "PL"
                     person!fk_ethnicity = const.ethnicity_Polish
                  Case "AU"
                     If bits[iAboriginality] = 1 Then
                        person!fk_ethnicity = const.ethnicity_australian_aboriginal
                     Else
                        person!fk_ethnicity = const.ethnicity_australian
                     Endif
                  Case "NZ"
                     If Message.Question("Is the person a Maori NewZealander?\n\n" & bits[firstname] & " " & bits[surname], "Yes", "No") = 1 Then
                        person!fk_ethnicity = const.ethnicity_New_Zealand_Maori
                     Else
                        person!fk_ethnicity = const.ethnicity_New_Zealand_European
                     Endif
                  Case "RO"
                     person!fk_ethnicity = const.ethnicity_Romanian
                  Case "FR" 'france
                     person!fk_ethnicity = const.ethnicity_French
                  Case "AT" 'austria
                     person!fk_ethnicity = const.ethnicity_Austrian
                  Case "CA" 'canada
                     person!fk_ethnicity = const.ethnicity_canadian
                  Case "CL"  'chile
                     person!fk_ethnicity = const.ethnicity_Chilean
                  Case "CN" 'china
                     person!fk_ethnicity = const.ethnicity_chinese
                  Case "DE" 'germany"
                     person!fk_ethnicity = const.ethnicity_German
                  Case "ES"  'spain
                     person!fk_ethnicity = const.ethnicity_Spanish
                  Case "GB"  'great britain
                     person!fk_ethnicity = const.ethnicity_british
                  Case "GR" 'greece
                     person!fk_ethnicity = const.ethnicity_Greek
                  Case "HU" 'hungary"
                     person!fk_ethnicity = const.ethnicity_Hungarian
                  Case "IE" 'ireland
                     person!fk_ethnicity = const.ethnicity_Irish
                  Case "IN" 'india
                     person!fk_ethnicity = const.ethnicity_Indian
                  Case "IT"  'italy"
                     person!fk_ethnicity = const.ethnicity_Italian
                  Case "JP" 'japan
                     person!fk_ethnicity = const.ethnicity_japanese
                  Case "KR" 'south korea"
                     person!fk_ethnicity = const.ethnicity_Korean
                  Case "KH" 'cambodia
                     person!fk_ethnicity = const.ethnicity_Cambodian_Khmer
                  Case "MY" 'malaysia
                     person!fk_ethnicity = const.ethnicity_Malay_Malayan
                  Case "PK" 'poland
                     person!fk_ethnicity = const.ethnicity_Polish
                  Case "SW" 'sweden
                     person!fk_ethnicity = const.ethnicity_swedish
                  Case "UK" 'united kingdon
                     person!fk_ethnicity = const.ethnicity_swedish
                  Case "TH" 'thailand
                     person!fk_ethnicity = const.ethnicity_Thai_Tai_Siamese
                  Case "VN 'vietnam"
                     person!fk_ethnicity = const.ethnicity_Vietnam
                  Case "ZA" 'south africa
                     person!fk_ethnicity = const.ethnicity_South_African
                  Case "US"
                     person!fk_ethnicity = const.ethnicity_American
                  Case "NL"
                     person!fk_ethnicity = const.ethnicity_Dutch
                  Case Else
                     Message.info("ethnicity not found " & bits[iCountry_birth])
                     Print
               End Select
            Else

               Message.title = "Country of Origin"
               Message.info("The country " & bits[iCountry_birth] & " was not found.")
               Print person
            End If
         End If
         person.Save("contacts.data_persons", "fk_person")
         lblProgress.text = "Saving ethnicity data for " & import_count & " " & bits[firstname] & " " & bits[surname]
         modDBConnect.CommitTrans()
      Endif
   Wend
   modDBConnect.CommitTrans()
   Dec Application.busy
   chkImportEthnicity.value = False
   lblProgress.text = ""

End

Public Sub DrsDesk_SocialHistory_Import()
   '--------------------------------------------------------------
   'Imports the patients social history initially only DrsDesk
   'The DrsDesk social history came from a multi-line text control
   'so sometimes users inserted a CR by mistake.
   'Due to the social history text containing internal CR's
   'I've stuck a field on the end of the import data |end, so
   'that where this code splits a line in the middle of a
   'social history field, I can detect and repair it
   '--------------------------------------------------------------

   Dim $Result As Result
   Dim sql As String
   Dim cons As CConsult
   Dim sfilename As String
   Dim Errorfile As File
   Dim bits As String[]
   Dim skipcode As Boolean
   Dim x As Integer
   Dim y As Integer
   Dim missingpatients As Integer
   Dim bError As Boolean
   Dim badfilename As Integer
   Dim sFileError As String
   Dim anError As Error
   Dim bLineComplete As Boolean
   Dim sIncompleteLine As String
   Dim ICPCTerm As Collection
   Dim SH As Collection
   Dim Errorcount As Integer
   'open an error file to log errors

   modDBConnect.BeginTrans()
   lblProgress.text = ""
   patients = New Collection
   '  ErrorFile = Open import_dir & "/socialhistory_import_errors.txt" For Write Create
   '-------------------------------------------------
   'Insist on at least some sort of attempt at a name
   '-------------------------------------------------
   import_dir = "/home/richard/easygp/import/"

   Sfilename = import_dir & "/" & Trim("Exported_SocialHistory.txt")
   If sFilename = "" Then
      txtImportDirectory.SetFocus()
      Return
   End If
   '------------------------------------------------------------------
   'Attempt to open the designated file
   'If fail, given an appropriate understandable error message and exit
   '-------------------------------------------------------------------
   Try hfile = Open sfilename For Input
   If Error Then
      sFileError = File_IO_Describe_Error(Error.code)
      Message.Warning("Unable to open " & sFilename & "\n\n" & sFileError)
      Return
   End If
   '-------------------------------------------------------------------
   'So far so good - hourglass to user to indicate we are go for import
   '-------------------------------------------------------------------
   Inc Application.Busy
   lvDataImportProgressMessages.Clear()
   lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Starting social history import..............")
   'Patients = New collection
   '  While Not Eof(hfile)
   '------------------------------------------
   'Input each line and split at the delimeter
   '------------------------------------------
   '  Line Input #hfile, sLineInput
   '    Inc x
   '    If x = 10 Then Return
   '  Wend
   While Not Eof(hfile)
      '------------------------------------------
      'Input each line and split at the delimeter
      'The data in DrsDesk is "dirty", there are
      'carriage returns randomly in the text
      '------------------------------------------
      bLineComplete = False      'assume their is an internal CR to muck things up
      Line Input #hfile, sLineInput                'read single line gb.unix as default
      sIncompleteLine = sLineInput                 'use a copy
      Do Until Right(sIncompleteLine, 4) = "|end"  'does it have an ending
         Line Input #hfile, sLineInput              'No, then get the next line
         sIncompleteLine &= sLineInput          'and concatenate for re-testing
      Loop
      sLineInput = sIncompleteLine                 'line has an ending, keep going.
      bits = Split(sLineInput, "|")
      '----------------------------------------------------------
      'Create a new patient object add to the patients collection
      '----------------------------------------------------------
      patient = New Collection
      patient!firstname = bits[firstname]
      patient!surname = bits[surname]
      patient!birthdate = Val(bits[birthdate])
      If bits[firstname] = "" Then
         lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "no firstname:" & patient!firstname & " " & patient!surname)
         bError = True
      End If
      If bits[surname] = "" Then
         lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "no surname:" & patient!firstname & " " & patient!surname)
         bError = True
      End If
      If Year(patient!birthdate) = 0 Then
         lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "no birthdate:" & patient!firstname & " " & patient!surname)
         Wait
         Inc Errorcount
         patient!birthdate = CDate("01/01/1901")
         Wait
         Inc Errorcount
         bError = True
      End If
      patients.Add(patient, patients.count)
      '---------------------------------------------------
      'Now match that patient to the demographic database
      '---------------------------------------------------
      sql = "Select * from contacts.vwPatients where "
      sql &= "firstname ILIKE $$" & patient!firstname & "$$ "
      sql &= " AND surname ILIKE $$" & patient!surname & "$$ "
      sql &= " AND birthdate ='" & Format(patient!birthdate, "dd/mm/yyyy") & "'"
      $Result = modDBConnect.exec_query(sql)
      If $Result.count = 1 Then
         patient!fk_patient = $Result!fk_patient
         lblProgress.text = "Importing data for" & patient!firstname & " " & patient!surname
         Wait
         '--------------------------------------------------
         'Ok we have a patient, so save their social history
         'Should we worry about the original data of entry
         'if yes, then add it later, for now, just use today
         'create a consult and retrieve pk_consult
         'necessary because every table linked to consult
         'fixme later: use only a single pk_consult for an
         'entire patients imported data
         '--------------------------------------------------
         '------------------------------------
         'class cSocialHistory
         '
         ' Public pk As Integer
         ' Public fk_consult As Integer
         ' Public history As String
         ' Public data_changed As String
         ' Public pk_progressnote As Integer
         ' Public responsible_person As String
         '-------------------------------------

         currentconsult = New CConsult(patient)
         currentconsult.Set(const.ConsultType_DataImport, "Social History Imported")
         SH = New Collection
         SH!fk_consult = currentconsult.GetPK()
         SH!history = bits[social_history]
         SH!fk_socialhistory = modDBConnect.insert("clin_history.social_history", SH)
         modDBConnect.CommitTrans()
      Else
         If $Result.count > 1 Then
            Message.info("More than 1 patient found with same names and dob")
            Print patient
            lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "duplicate name:" & patient!firstname & " " & patient!surname)
            Inc MissingPatients
            Wait
         End If
         If $Result.count = 0 Then
            lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Not in Demographic Database:" & patient!firstname & " " & patient!surname)
            Wait
            Inc MissingPatients
         End If
      End If
      Inc x
   Wend
   modDBConnect.CommitTrans()

   '  lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Import completed")
   '  lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "We imported " & Str(patients.count) & " patients")
   ' lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "there were" & Str$(missingpatients) & "missing or duplicated patients")
   ''

   Dec Application.busy
   chkImportSocialHIstory.value = False
   lblProgress.text = ""

End

Public Function DrskDesk_Fill_Relationship_ID_Array() As Integer[]
   'ids[drsDesk]= key to common.lu_relationships in EasyGP
   '

   Dim ids As Integer[]

   ids = New Integer[48]

   ids[1] = 1     'x 1;"Mother"
   ids[2] = 31    'x 31;"Step mother"
   ids[3] = 43    'x 43;"father"
   ids[4] = 32    'x 32;"Step father"
   ids[5] = 44    'x  44;"Brother"
   ids[6] = 45    'x  45;"Sister"
   ids[7] = 19    'x 19;"Aunt - maternal"
   ids[8] = 20    'x 20;"Aunt - paternal"
   ids[9] = 26    'x 26;"Niece - maternal"
   ids[10] = 25    'x 25;"Niece - paternal"
   ids[11] = 2     'x 2;"Grandmother - maternal"
   ids[12] = 3     'x 3;"Grandmother - paternal"
   ids[13] = 4     'x 4;"Grandfather - maternal"
   ids[14] = 5     'x 5;"Grandfather - paternal"
   ids[15] = 13    'x 13;"Wife"
   ids[16] = 14    'x 14;"Husband"
   ' ids[17] = '  Defacto not used in EasyGP let it crash
   ids[18] = 17    'x 17;"Uncle - maternal"
   ids[19] = 18    'x 18;"Uncle - paternal"
   ids[20] = 23    'x 23;"Nephew - maternal"
   ids[21] = 24    'x 24;"Nephew - paternal"
   ids[22] = 27    'x 27;"Son"
   ids[23] = 28    'x 28;"Step son"
   ids[24] = 29    'x 29;"Daughter"
   ids[25] = 30    'x 30;"Step daughter"
   ids[26] = 10    'x 10;"General Family History"
   ids[27] = 21    'x 21;"Cousin maternal"
   ids[28] = 22    'x 22;"Cousin paternal"
   ids[29] = 16    'x 16;"Defacto husband"
   ids[30] = 33    'x 33;"Uncle - side of family unknown"
   ids[31] = 34    'x 34;"Aunt - side of family unknown"
   ids[32] = 35    'x 35;"Cousin side of family unknown"
   ids[33] = 37    'x 37;"Grandmother side of family unknown"
   ids[34] = 38    'x 38;"Grandfather side of family unknown"
   ids[35] = 39    ' 39;"Grandaughter side of family unknown"
   ids[36] = 40    ' 40;"Grandson side of family unknown"
   ' ids[37] = was Adoptive Father in DrsDesk
   ' ids[38] =  was Adoptive Mother in drsdesk
   ids[39] = 41    ' 41;"Adopted son"
   ids[40] = 42    ' 42;"Adopted daughter"
   ids[41] = 15    ' 15;"Defacto wife"
   ids[42] = 6     'x 6;"Great grandmother paternal"
   ids[43] = 7     'x 7;"Great grandmother maternal"
   ids[44] = 8     'x 8;"Great grandfather maternal"
   ids[45] = 9     'x 9;"Great grandfather paternal"
   ids[46] = 11    'x 11;"General History - paternal"
   ids[47] = 12    'x 12;"General History - maternal"

   Return ids

End

Public Function DrsDesk_Leant_Terms_Refresh() As Result
   '------------------------------------------------------------------------
   'Returns a result object of terms the system has learnt to match to ICPC2
   '------------------------------------------------------------------------

   Dim sql As String = ""

   "SELECT distinct"
   "  icpc2_terms.term as pk_view,"
   "  icpc2_terms.term, "
   "  icpc2_terms.term_code, "
   "  icpc2_terms.icpc_code, "
   "  lu_icpc2_plain_language_mapper.free_text "
   "FROM "
   "  coding.icpc2_terms, "
   "  coding.lu_icpc2_plain_language_mapper "
   "WHERE "
   "  lu_icpc2_plain_language_mapper.fk_icpc2_term = icpc2_terms.pk;"
   Print sql
   Return modDBConnect.exec_query(sql)

End

Public Sub DrsDesk_Habits_Import()
   '----------------------------------------------------------------
   'Imports habit data from DrsDesk
   'in DrsDesk the data was ';' delimited.
   ' Smith|Firstname|19/03/1946 0:00:00|2|Alcohol|80;smokes - when drinks, binge drinker;w;
   ' Smith|Firstname|19/03/1946 0:00:00|1|Cigarettes|15;23;25;1;
   ' Terry|Richard|19/01/1953 0:00:00|2|Alcohol|10;;w;
   ' Terry|Richard|19/01/1953 0:00:00|1|Cigarettes|;;;2;  for cigs = bits[3] 1= past 2=never

   ' 0=surname
   ' 1=firstname
   ' 2=birthdate
   ' 3=type of habit 1=cigarettes 2= alcohol
   ' 4=longhand type eg 'cigarettes' actually not used
   ' 5=the sub-date to be split by ";"
   '   e.g for cigarettes the data above would be:
   '   data[0]=15 means 15 per day
   '   data[1]]=23 means from age 23
   '   data[2] =25 means to age 25
   '   data[3]=1 means if 1= past smoker 0=current smoker
   '   e.g for alcohol:
   '   data[0] = 80 means 80gm
   '   data[1] = qual Habit!ifier here "smokes - when drinks, binge drinker"
   '   data[2] = the interval 'w'=weeks, 'd=day', 'm=month' 'u=unkown' 'n=non drinker'
   '   data[3] = 2 = never used

   '-------------------------------

   Dim surname As Integer = 0
   Dim firstname As Integer = 1
   Dim birthdate As Integer = 2
   Dim habit_type As Integer = 3
   Dim habit_bits_unit_count As Integer = 0 'for cigs or alcohol
   Dim habit_bits_nicotine_from_age As Integer = 1
   Dim habit_bits_nicotine_to_age As Integer = 2
   Dim habit_bits_nictotine_current As Integer = 3
   Dim habit_bits_alcohol_qualifier As Integer = 1
   Dim habit_bits_alcohol_interval As Integer = 2
   Dim import_dir As String
   Dim Errorfile As File
   Dim sfilename As String
   Dim bits As String[]
   Dim bits_habit_detail As String[]
   Dim bError As Boolean
   Dim Habits As Collection
   Dim Habit As CRow
   Dim sql As String
   Dim sFileError As String
   Dim sCurrentPatient As String
   Dim sLastPatient As String
   Dim habits_item_count As Integer
   Dim import_count As Integer
   Dim bValidPatient As Boolean
   Dim Recreational_drug As Collection
   Dim sLinecount As Integer

   lblProgress.text = ""
   import_dir = "/home/richard/easygp/import/"
   ErrorFile = Open import_dir & "/habits_import_errors.txt" For Write Create   'open an error file to log errors
   Sfilename = import_dir & "/" & Trim("Exported_Habits.txt")                   'Insist on at least some sort Of attempt at a name
   If sFilename = "" Then
      txtImportDirectory.SetFocus()
      Return
   End If
   Try hfile = Open sfilename For Input                                              'Attempt to open the designated file
   If Error Then
      sFileError = File_IO_Describe_Error(Error.code)
      Message.Warning("Unable to open " & sFilename & "\n\n" & sFileError)
      Return
   End If
   Inc Application.Busy
   lvDataImportProgressMessages.Clear()
   lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Starting habits import..............")
   Patients = New Collection
   While Not Eof(hfile)
      '------------------------------------------
      'Input each line and split at the delimeter
      'carriage returns randomly in the text
      '------------------------------------------
      Line Input #hfile, sLineInput                                               'import a line
      Inc slinecount
      Print "reading line " & slinecount
      bits = Split(sLineInput, "|")                                               'split at delimiter
      scurrentPatient = bits[firstname] & bits[surname] & bits[birthdate]         'firstnamenamebirthdate is current patient
      If sLastPatient <> scurrentPatient Then                                     'if this patient different to the last, save the habits
         If habits_item_count Then
            For Each Habit In Habits
               Habit.Save("clin_history.recreational_drugs", "fk_recreationaldrug")
               modDBConnect.CommitTrans()
            Next
            habits_item_count = 0
         End If
         bValidPatient = False                                                   'scurrentPatient <> that on the current sLineInput
         patient = Patient_Identify(bits)                                        'so identify the patient
         If patient!fk_patient Then                                              'if we find them
            sLastPatient = bits[firstname] & bits[surname] & bits[birthdate]     'they become the current patient
            currentconsult = New CConsult(patient)                               'start a new consult
            currentconsult.Set(const.ConsultType_DataImport, "Recreational Drugs Imported") ' set the type to import of recreational drugs
            bValidPatient = True                                                 'flag the patient as valid
            Habits = New Collection                                              'start a new collection of their cRow Habit
            Inc import_count
            lblProgress.text = "Importing data for " & import_count & " " & scurrentPatient
         End If
      End If
      '-------------------------------------------------------------------------------------------------
      'At this point probably have a valid patient, create a cRow object for each habit for the patient
      ' CREATE TABLE clin_history.recreational_drugs
      ' (
      '   pk serial NOT NULL,
      '   fk_consult integer NOT NULL,
      '   fk_lu_recreational_drug integer NOT NULL, -- foreign key to common.lu_recreational_drugs
      '   age_started integer, -- the age the patient first used this drug
      '   age_last_used integer, -- the age the patient last used or stopped using the drug
      '   substance_amount integer, -- the quantity of the substance e.g 10 if say 10gm of alcohol per day see lu_substance_frequency
      '   fk_lu_substance_amount_units integer, -- the units for the substance amount eg gm key to common.lu_units (to be restricted in the front end
      '   fk_lu_substance_frequency integer, -- foreign key to common.lu_units but front end will allow on day/week/month/year
      '   fk_lu_route_administration integer, -- key to common.lu_route_administration
      '   cumulative_amount integer, -- the cumulative amount of the drug meant more for  nicotine eg 25=25 pack years
      '   never_used_drug boolean DEFAULT false, -- this apparently useless column is because we have to record if say smoker is non-smoker or non- drinker, just have empty start_age end_age is not good enough
      '   notes text, -- any qualifying information about the drug eg, 'used intermittently 20-30, stopped in 30's, started again in 40's
      '   deleted boolean DEFAULT false,

      '------------------------------------------------------------------------------------------------
      If bValidPatient Then
         bits_habit_detail = Split(bits[5], ";")                              'split the habit data
         If bits[5] <> ";;u;" Then
            Habit = New CRow
            Habit!fk_progressnote = 0                                             'we don't want progress notes
            Habit!fk_consult = currentconsult.GetPK()                            'get fk_consult
            Habit!fk_lu_recreational_drug = bits[habit_type]                     '1=nicotine 2 = alcohol

            Select Case bits[habit_type]
               Case const.cRecreational_Drug_Nicotine                            'have they ever been a smoker?
                  If bits_habit_detail[3] = 2 Then                               '2=never used not the same as EasyGP const.cSmokerNever=0
                     Habit!never_used_drug = True
                  Else
                     Habit!fk_lu_substance_frequency = const.Units_day           'smoking default per day
                     If bits_habit_detail[habit_bits_nicotine_from_age] <> "" Then
                        Habit!age_started = bits_habit_detail[habit_bits_nicotine_from_age]
                     Endif
                     If bits_habit_detail[habit_bits_nicotine_to_age] <> "" Then
                        Habit!age_last_used = bits_habit_detail[habit_bits_nicotine_to_age]
                     Endif
                     If bits_habit_detail[habit_bits_unit_count] <> "" Then
                        Habit!substance_amount = bits_habit_detail[habit_bits_unit_count]
                     Endif
                     Habit!fk_lu_route_administration = const.route_administration_inhaled
                  End If
               Case const.cRecreational_Drug_Alcohol                             'have they ever drunk?
                  If bits_habit_detail[habit_bits_alcohol_interval] = "n"      'n=have never drunk
                     Habit!never_used_drug = True
                  Else
                     Select Case bits_habit_detail[habit_bits_alcohol_interval] ' d= day, w=week, m=month, u=unkown n=never
                        Case "d"
                           Habit!fk_lu_substance_frequency = const.Units_day
                        Case "w"
                           Habit!fk_lu_substance_frequency = const.Units_week
                        Case "m"
                           Habit!fk_lu_substance_frequency = const.Units_month
                        Case "u"                   'if unknown add no units
                     End Select
                     If bits_habit_detail[habit_bits_unit_count] <> "" Then
                        Habit!substance_amount = bits_habit_detail[habit_bits_unit_count]
                     Endif
                     If bits_habit_detail[habit_bits_alcohol_qualifier] <> "" Then
                        Habit!notes = bits_habit_detail[habit_bits_alcohol_qualifier]
                     Endif
                     Habit!fk_lu_route_administration = const.route_administration_oral
                  End If
            End Select
            Habits.Add(habit, Habits.count) '
            Inc habits_item_count
         End If
      End If
   Wend
   modDBConnect.CommitTrans()
   chkImportHabits.value = False
   Dec Application.Busy

End

Public Sub DrsDesk_FamilyHistory_Import()
   '-------------------------------------------------------------------------------
   'todo - make the file surname/fistname
   ' Imports the patients family history initially only DrsDesk
   ' Terry|Richard|19/1/53 0:00:00|Margaret|<birthdate relative>|1|Mother|-1|2|Osteoarthritis|55|0|a comment
   '   0     1        2                3          4              5  6      7 8   9            10 11
   ' 0=surname
   ' 1=firstname
   ' 2=birthdate
   ' 3=relations name
   ' 4=relations birthdate
   ' 5=relationship id = comon.lu_family_relationships.pk
   ' 6=the relationship .eg motheer
   ' 7=age_deat icpc_terms = modDBConnect.exec_query_collection("Select * from coding.icpc2_terms") icpc_terms = modDBConnect.exec_query_collection("Select * from coding.icpc2_terms")h -1 or null = ?
   ' 8=condition_id
   ' 9=condition
   ' 10=age_onset
   ' 11=boolean cause of death
   ' 12=comment
   ' 13=member_id

   ' ------------------------------------------------------------------------------
   Dim cRelationship_ID As Integer = 5
   Dim cRelations_Name As Integer = 3
   Dim cRelations_Birthdate As Integer = 4
   Dim cAge_Death As Integer = 7
   Dim cCondition As Integer = 9
   Dim cCondition_Age_Onset As Integer = 10
   Dim cCaused_Death As Integer = 11
   Dim cCondition_Notes As Integer = 12
   Dim J_code_count As Integer
   Dim user_j_terms As Collection
   Dim new_j_term As CRow
   Dim sFilename As String
   Dim hfile As File
   Dim sFileError As String
   Dim surname As Integer = 0
   Dim firstname As Integer = 1
   Dim birthdate As Integer = 2
   Dim bits As String[]
   Dim sLastPatient As String
   Dim scurrentPatient As String
   Dim FH_Link As CRow
   Dim FH_Condition As CRow
   Dim FH_Member As CRow
   Dim Members As Collection
   Dim conditions As Collection
   Dim relationship_ids As Integer[]
   Dim family_history_condition_count As Integer

   Dim import_count As Integer
   Dim FamilyHistory As Collection
   Dim bValidPatient As Boolean
   Dim learntTerms As Result
   Dim ErrorFile As File
   Dim icpc_terms As Collection
   Dim icd10_terms As Collection
   Dim a_term As Collection
   Dim sql As String
   Dim $Result As Result
   Dim icpc2_mapped_term As CRow

   lblProgress.text = ""
   learntTerms = DrsDesk_Leant_Terms_Refresh()                                'Load mappable terms drsdesk to icpc as result
   icd10_terms = modDBConnect.exec_query_collection("Select code as pk_code, term  from coding.generic_terms where fk_coding_system = 2")
   icpc_terms = modDBConnect.exec_query_collection("Select * from coding.icpc2_terms")
   relationship_ids = DrskDesk_Fill_Relationship_ID_Array()
   modDBConnect.BeginTrans()
   patients = New Collection
   Sfilename = import_dir & "/" & Trim("Exported_FamilyHistory.txt")
   If sFilename = "" Then
      txtImportDirectory.SetFocus()
      Return
   End If
   '------------------------------------------------------------------
   'Attempt to open the designated file
   'If fail, given an appropriate understandable error message and exit
   '-------------------------------------------------------------------
   Try hfile = Open sfilename For Input
   If Error Then
      sFileError = File_IO_Describe_Error(Error.code)
      Message.Warning("Unable to open " & sFilename & "\n\n" & sFileError)
      Return
   End If
   ErrorFile = Open import_dir & "/familyhistory_import_errors.txt" For Write Create   'open an error file to log errors

   '-------------------------------------------------------------------
   'So far so good - hourglass to user to indicate we are go for import
   '-------------------------------------------------------------------
   Inc Application.Busy
   lvDataImportProgressMessages.Clear()
   lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Starting family history import..............")
   Patients = New Collection
   While Not Eof(hfile)
      '------------------------------------------
      'Input each line and split at the delimeter
      '------------------------------------------
      Line Input #hfile, sLineInput
      bits = Split(sLineInput, "|")
      scurrentPatient = bits[firstname] & bits[surname] & bits[birthdate]
      If sLastPatient <> scurrentPatient Then
         '------------------------------------------------------
         'if line contains a new patient, find match in back end
         'and reset keys
         '------------------------------------------------------
         Print "Imported patient number:" & import_count & " " & sLastPatient
         Print "committing data..............."
         modDBConnect.CommitTrans()
         Print "loading data for " & scurrentPatient
         lblProgress.text = "loading data for " & scurrentPatient
         family_history_condition_count = 0
         Inc import_count
         bValidPatient = False
         last_fk_relationship = 0
         patient = Patient_Identify(bits)                                    'create the next patient.
         If patient!fk_patient Then
            sLastPatient = bits[firstname] & bits[surname] & bits[birthdate]
            currentconsult = New CConsult(patient)
            currentconsult.Set(const.ConsultType_DataImport, "Family History Imported")
            bValidPatient = True
         End If
      End If
      If bValidPatient Then
         '-----------------------------------------------------------------------------
         ' At this point probably got a valid patient, save each family history item
         ' CREATE TABLE clin_history.family_members
         ' (
         '   pk serial NOT NULL,
         '   fk_relationship integer NOT NULL,
         '   fk_person integer, -- I put this in in-case it was needed if we had imported family history from an person who exists in the easygp database.
         '   "name" text,
         '   birthdate date,
         '   age_of_death integer,
         '   fk_occupation integer,
         '   fk_country_birth character(2),
         '   deleted boolean DEFAULT false,
         '   fk_consult integer,
         '
         '   First - if the row of data contains a different relationship
         '-----------------------------------------------------------------------------
         If last_fk_relationship <> relationship_ids[bits[cRelationship_ID]] Then
            FH_Member = New CRow
            FH_Member!fk_relationship = relationship_ids[bits[cRelationship_ID]]
            FH_Member!name = bits[cRelations_Name]
            Try FH_Member!birthdate = Val(bits[cRelations_Birthdate])
            If bits[cAge_Death] <> -1 Then
               FH_Member!age_of_death = bits[cAge_Death]
            Else
               FH_Member!age_of_death = ""
            End If
            FH_Member!fk_consult = currentconsult.GetPK()
            FH_Member.Save("clin_history.family_members", "fk_member")
            last_fk_relationship = relationship_ids[bits[cRelationship_ID]]
            '---------------------------------------------------
            'Now link this family member to the patient
            ' CREATE TABLE clin_history.family_links
            ' (
            '   pk serial NOT NULL,
            '   fk_member integer NOT NULL,
            '   fk_patient integer NOT NULL,
            '   deleted boolean DEFAULT false,
            '   CONSTRAINT family_links_pkey PRIMARY KEY (pk)
            ' )
            ' WITH (
            '   OIDS=FALSE
            ' );
            '---------------------------------------------------
            FH_Link = New CRow
            FH_Link!fk_member = FH_Member!fk_member
            FH_Link!fk_patient = patient!fk_patient
            FH_Link.Save("clin_history.family_links", "fk_link")
         End If
      End If
      'End If
      ' If bValidPatient Then
      '---------------------------------------------------------------------------------------------
      'next the conditions for this patient
      '' CREATE TABLE clin_history.family_conditions
      ' (
      '   pk serial NOT NULL,
      '   fk_member integer NOT NULL,
      '   condition text NOT NULL, -- note: the condition may NEVER exist in the coded database, ...
      '   age_of_onset integer,
      '   cause_of_death boolean DEFAULT false,
      '   notes text,
      '   deleted boolean DEFAULT false,
      '   fk_consult integer,
      '   contributed_to_death boolean,
      '   fk_code text, -- foreign key to coding.generic_terms table. Note this key is a text string...
      '---------------------------------------------------------------------------------------------
      Inc family_history_condition_count

      FH_Condition = New CRow
      FH_Condition!fk_member = FH_Member!fk_member
      FH_Condition!condition = bits[cCondition]
      If InStr(bits[cCondition], "?") Then
         FH_Condition!diagnosis_certain = False 'defaults to true in backend
      End If
      If bits[cCondition_Age_Onset] <> -1 Then
         FH_Condition!age_of_onset = Trim(bits[cCondition_Age_Onset])
      Else
         FH_Condition!age_of_onset = "" 'null
      Endif
      If Bits[cCaused_Death] <> 0 Then
         FH_Condition!cause_of_death = True
         FH_Condition!contributed_to_death = True
      Else
         Print
      Endif
      FH_Condition!notes = Trim(Bits[cCondition_Notes])
      FH_Condition!fk_consult = currentconsult.GetPK()
      '------------------------------------------------------------------------------
      'Now attempt to get code
      'first by direct match For the condition To ICPC terms
      'Now try and match this health_issue with an icpc
      'natural_language_term. This is because I only
      'used natural language terms. There are around
      '4000/17000 terms in my database not equatable
      'believe it or not things like NIDDM/IDDM for
      'which ICPC has no equivalent.
      'if can, equate to pk
      'of coding.icpc2_terms, otherwise, when saved
      'the natural_language_term will be added as a
      'J99-00n term or popup an option to search
      '-------------------------------------------------
      For Each a_term In icpc_terms                                            ' loop through all icpc2 terms
         If Lower(FH_Condition!condition) = Lower(a_term!natural_language_term) Then   ' is there are match to my natural language?
            '  PH!fk_coding_system = const.coding_icpcPlus                        'yes, then coding system = icpc2 plus
            FH_Condition!fk_code = a_term!icpc_code & a_term!term_code                   ' the code = join of both codes = key to coding.generic_terms
            Break
         End If
      Next
      If Not FH_Condition.Exist("fk_code") Then                                          'we didn't find an icpc2 match
         For Each a_term In icd10_terms                                        'try looking in icd10
            If Lower(FH_Condition!condition) = Lower(a_term!term) Then                 'found a match?
               FH_Condition!fk_code = a_term!pk_code                                     'coding.generic_terms.pk
               Break
            End If
         Next
      End If
      If Not FH_Condition.Exist("fk_code") Then                                          'still not code?, see if we have learnt it
         For Each LearntTerms
            If Trim(Lower(FH_Condition!condition)) = Trim(Lower(LearntTerms!free_text)) Then  'Yes?
               FH_Condition!fk_code = LearntTerms!icpc_code & LearntTerms!term_code                     'save the code
               Break
            End If
         Next
      End If
      'have we already allocate this to a j-code?
      If Not FH_Condition.Exist("fk_code") Then                                          'still not code?, see if we have learnt it
         user_j_terms = ICPC2_Get_J_Terms()                 'get all current j terms
         For Each a_term In user_j_terms                    'try and find a match
            If Lower(FH_Condition!condition) = Lower(a_term!natural_language_term) Then
               FH_Condition!fk_code = a_term!icpc_code & a_term!term_code
               Break
            Endif
         Next
      End If
      If Not FH_Condition.Exist("fk_code") Then                                           'ok, still have no code
         '-------------------------------------------
         'We couldn't match the free text with an icpc
         'natural language term, so, check if we have
         're-allocated this one, if not popup a modal
         'box to get the code.God this could take some
         'time as there are nearly 4000 of these, so
         'I should write these to the database.
         '---------------------------------------------
         Dec Application.Busy
         const.globalstring = ""
         FICPC = New FICPCBrowser
         FICPC.txtTermToImport.text = FH_Condition!condition                           'term we are trying to match
         FICPC.txtSearch.SetFocus()
         FICPC.ShowModal()
         Inc Application.busy
         FH_Condition!fk_code = const.globalstring
         '-----------------------------------------------------
         'If user (me) did allocate a term, save for future use
         '-----------------------------------------------------
         If FH_Condition!fk_code Then
            icpc2_mapped_term = New CRow
            icpc2_mapped_term!fk_icpc2_term = FH_Condition!fk_code
            icpc2_mapped_term!free_text = FH_Condition!condition
            icpc2_mapped_term.Save("coding.lu_icpc2_plain_language_mapper", "fk_lu_icpc2_plain_language_mapper")
            modDBConnect.CommitTrans()
            learntTerms = DrsDesk_Leant_Terms_Refresh() 'Load mappable terms drsdesk to icpc
         Else
            'still not term, have we saved before as a j term?
            user_j_terms = ICPC2_Get_J_Terms()                 'get all current j terms
            For Each a_term In user_j_terms                    'try and find a match
               If Lower(FH_Condition!condition) = Lower(a_term!natural_language_term) Then
                  FH_Condition!fk_code = a_term!icpc_code & a_term!term_code
                  FH_Condition!fk_coding_system = const.coding_icpcPlus
                  Break
               Endif
            Next
         End If
         If Not FH_Condition.Exist("fk_code") Or IsNull(FH_Condition!fk_code) Then
            Print "creating j-code"
            J_code_count = modDBConnect.exec_query("SELECT CAST(coalesce(term_code, '0') AS integer) as last_j_code from coding.icpc2_user_terms order by pk DESC limit 1")!last_j_code
            FH_Condition!fk_code = "J99" & Format(J_code_count + 1, "00#")
            '  FH_Condition!fk_coding_system = 1
            '  pk integer,
            '   term text,
            '   natural_language_term text,
            '   icpc_code text,
            '   term_code text,
            '   status text,
            '   replacement text

            new_j_term = New CRow
            new_j_term!term = "User;" & FH_Condition!condition
            new_j_term!natural_language_term = FH_Condition!condition
            new_j_term!icpc_code = "J99"
            new_j_term!term_code = Str(J_code_count + 1)
            new_j_term!status = "A"
            new_j_term.Save("coding.icpc2_user_terms", "fk_new_j_term")
            modDBConnect.CommitTrans()
         End If
      End If
      Print "....saving condition:", FH_Condition!condition
      FH_Condition.Save("clin_history.family_conditions", "fk_condition")
   Wend
   modDBConnect.CommitTrans()
   Dec Application.Busy
   chkImportFamilyHistory.value = False

End

Public Sub DrsDesk_PastHistory_Import()
   '--------------------------------------------------------------
   ' Imports the patients past history initially only DrsDesk
   ' Mouse|Mickey|08/04/1947 0:00:00|0|59|7|ankle fusion|failed union Dr James O'sullivan|1|2006|0|0|0|1|0
   ' surname
   ' firstname
   ' birthdate
   ' active flag 0=not 1 = yes
   ' age_onset
   ' age_onset_units eg 7 = year 5 = week, 6 = month
   ' condition
   ' comment
   ' side body 0, 1=left, 2= right 3 = both
   ' ozcode
   ' date_onset
   ' operation
   ' cause death
   ' confidential
   ' significant
   ' deleted
   '    Case "mark major"
   '          currentProblem!major = True
   '          Update()
   '       Case "mark significant"
   '          currentProblem!major = False
   '          currentProblem!active = True
   '          Update()
   '       Case "mark inactive"
   '          currentProblem!major = False
   '          currentProblem!active = Fals  Nexte
   '          Update()

   '-----------------------------------------------------------------------------------------------
   'From the ICPC-2 documentation:
   '
   ' After considering spelling, keyword length and term organisation if you
   ' still can't find the term you want:-
   ' In each software product, there should be a facility to enter the term in free text and apply a
   ' temporary code - J99. The term you record should be retained in the database and
   ' allocated a term code (so that the first time you use J99, the term you record will be saved
   ' as term number J99-001 and so on.) Your software should allow you to view your list of
   ' temporary terms. You could print out the list and post or fax it to the Family Medicine
   ' Research Centre so that the terms can be allocated to the correct ICPC-2 code and added
   ' to ICPC-2 PLUS with their term keys. The next upgrade you receive will therefore include the
   ' term, the correct code and term code. Your software should allow you to alter your original
   ' record to the correct code (of course always retaining the hidden audit trail of the change for
   ' medico-legal purposes).
   '-------------------------------------------------------------------------------------------------
   Dim $Result As Result
   Dim sql As String
   Dim LearntTerms As Result
   Dim cons As CConsult
   Dim sfilename As String
   Dim unmatchables As New Collection
   Dim Unmatchable As Collection
   Dim progressNote As String
   Dim fk_progressNote As Integer
   Dim active As Integer = 3
   Dim age_onset As Integer = 4
   Dim age_onset_units As Integer = 5
   Dim condition As Integer = 6
   Dim comment As Integer = 7
   Dim lateralisation As Integer = 8
   Dim date_onset As Integer = 9
   Dim operation As Integer = 10
   Dim cause_death As Integer = 11
   Dim confidential As Integer = 12
   Dim significant As Integer = 13
   Dim Deleted As Integer = 14
   Dim Errorfile As File
   Dim bits As String[]
   Dim vwTerms As Collection
   Dim skipcode As Boolean
   Dim x As Integer
   Dim y As Integer
   Dim missingpatients As Integer
   Dim bError As Boolean
   Dim badfilename As Integer
   Dim learntTerm As Collection
   Dim iTemporaryProblemKey As Integer
   Dim sFileError As String
   Dim anError As Error
   Dim bLineComplete As Boolean
   Dim sIncompleteLine As String
   Dim past_history_item_count As Integer
   Dim sLastPatient As String
   Dim scurrentPatient As String
   Dim bValidPatient As Boolean
   Dim PH As CRow
   Dim PastHistory As Collection 'of all PH
   Dim a_term As Collection
   Dim icpc_terms As Collection
   Dim icd10_terms As Collection
   Dim J_code_count As Integer
   Dim PN As CRow
   Dim import_count As Integer
   Dim user_j_terms As Collection
   Dim new_j_term As CRow
   Dim icpc2_mapped_term As CRow

   modDBConnect.BeginTrans()
   lblProgress.text = ""
   icpc_terms = modDBConnect.exec_query_collection("Select * from coding.icpc2_terms")
   icd10_terms = modDBConnect.exec_query_collection("Select code as pk_code, term  from coding.generic_terms where fk_coding_system = 2")
   learntTerms = DrsDesk_Leant_Terms_Refresh()                                'Load mappable terms drsdesk to icpc as result
   import_dir = "/home/richard/easygp/import/"
   ErrorFile = Open import_dir & "/pasthistory_import_errors.txt" For Write Create   'open an error file to log errors
   Sfilename = import_dir & Trim("Exported_PastHistory.txt")                   'Insist on at least some sort Of attempt at a name
   If sFilename = "" Then
      txtImportDirectory.SetFocus()
      Return
   End If
   Try hfile = Open sfilename For Input                                              'Attempt to open the designated file
   If Error Then
      sFileError = File_IO_Describe_Error(Error.code)
      Message.Warning("Unable to open " & sFilename & "\n\n" & sFileError)
      Dec Application.Busy
      Return
   End If
   Inc Application.Busy
   lvDataImportProgressMessages.Clear()
   lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Starting past history import..............")
   Patients = New Collection
   While Not Eof(hfile)
      '------------------------------------------------------------------------------------
      'Input each line and split at the delimeter the data in DrsDesk is "dirty", there are
      'carriage returns randomly in the text
      '------------------------------------------------------------------------------------
      Line Input #hfile, sLineInput
      bits = Split(sLineInput, "|")
      scurrentPatient = bits[firstname] & bits[surname] & bits[birthdate]
      If sLastPatient <> scurrentPatient Then
         '----------------------------------------------------------------
         'if line contains a new patient, then save any outstanding data
         'If past_history_item_count is > 0, then have data to save
         'And Then Create a New patient object
         '----------------------------------------------------------------
         If past_history_item_count Then
            For Each PH In PastHistory
               PH!fk_progressnote = 0
               PH.Save("clin_history.past_history", "fk_pasthistory")
               modDBConnect.CommitTrans()
            Next
            lblProgress.text = "Imported patient " & import_count & " " & scurrentPatient
            past_history_item_count = 0
            Inc import_count
         End If
         bValidPatient = False
         patient = Patient_Identify(bits)
         If patient!fk_patient Then
            sLastPatient = bits[firstname] & bits[surname] & bits[birthdate]
            currentconsult = New CConsult(patient)
            currentconsult.Set(const.ConsultType_DataImport, "Past History Imported")
            bValidPatient = True
            PastHistory = New Collection
         End If
      End If
      '-----------------------------------------------------------------------------
      ' At this point probably got a valid patient, save each past history item
      '
      '   pk serial NOT NULL,
      '   fk_consult integer NOT NULL,
      '   age_onset integer NOT NULL,
      '   age_onset_units integer NOT NULL,
      '   description text NOT a_term!pk_codeNULL,
      '   fk_laterality integer DEFAULT 0,
      '   year_onset text NOT NULL,
      '   active boolean DEFAULT false,
      '   operation boolean DEFAULT false,
      '   cause_of_death boolean DEFAULT false,
      '   confidential boolean DEFAULT false,
      '   major boolean DEFAULT false,
      '   deleted boolean DEFAULT false,
      '   year_onset_uncertain boolean DEFAULT false,
      '   management_summary text DEFAULT ''::text,
      '   condition_summary text DEFAULT ''::text,
      '   risk_factor boolean DEFAULT false,
      '   fk_coding_system integer NOT NULL, -- key to coding.lu_coding_system containing name of coding system ...
      '   fk_code text,  -- key to coding.generic_terms can be 6 digit ICPC2 or smaller icd10
      '   aim_of_plan text,
      '   fk_progressnote integer, -- foreign key to clin_consult.progressnotes table, used only during each consultation...
      '------------------------------------------ ----------------------------------------------

      If bValidPatient Then
         Inc iTemporaryProblemKey
         PH = New CRow
         PH!fk_consult = currentconsult.GetPK()
         PH!age_onset = bits[age_onset]
         Select Case bits[age_onset_units]
            Case 5
               PH!age_onset_units = const.Units_week
            Case 6
               PH!age_onset_units = const.Units_month
            Case 7
               PH!age_onset_units = const.Units_year
         End Select
         PH!description = Trim(bits[condition])
         '-------------------------------------------------
         'Now try and match this health_issue with an icpc
         'natural_language_term. This is because I only
         'used natural language terms. There are around
         '4000/17000 terms in my database not equatable
         'believe it or not things like NIDDM/IDDM for
         'which ICPC has no equivalent.
         'if can, equate to pk
         'of coding.icpc2_terms, otherwise, when saved
         'the natural_language_term will be added as a
         'J99-00n term or popup an option to search
         '-------------------------------------------------
         For Each a_term In icpc_terms                                            ' loop through all icpc2 terms
            If Lower(PH!description) = Trim(Lower(a_term!natural_language_term)) Then   ' is there are match to my natural language?
               PH!fk_coding_system = const.coding_icpcPlus                        'yes, then coding system = icpc2 plus
               PH!fk_code = a_term!icpc_code & a_term!term_code                   ' the code = join of both codes = key to coding.generic_terms
               Break
            End If
         Next
         If Not PH.Exist("fk_code") Then                                          'we didn't find an icpc2 match
            For Each a_term In icd10_terms                                        'try looking in icd10
               If Lower(PH!description) = Lower(a_term!term) Then                 'found a match?
                  PH!fk_coding_system = const.coding_icd10                        'save fields
                  PH!fk_code = a_term!pk_code                                     'coding.generic_terms.pk
                  Break
               End If
            Next
         End If
         If Not PH.Exist("fk_code") Then                                          'still not code?, see if we have learnt it
            For Each LearntTerms
               If Trim(Lower(PH!description)) = Trim(Lower(LearntTerms!free_text)) Then  'Yes?
                  PH!fk_coding_system = const.coding_icpcPlus                                    'we only learn from icpc2 plus - my decision
                  PH!fk_code = LearntTerms!icpc_code & LearntTerms!term_code                     'save the code
                  Break
               End If
            Next
         End If
         'have we already allocate this to a j-code?
         If Not PH.Exist("fk_code") Then                                          'still not code?, see if we have learnt it
            user_j_terms = ICPC2_Get_J_Terms()                 'get all current j terms
            For Each a_term In user_j_terms                    'try and find a match
               If Lower(PH!description) = Trim(Lower(a_term!natural_language_term)) Then
                  PH!fk_code = a_term!icpc_code & a_term!term_code
                  PH!fk_coding_system = const.coding_icpcPlus
                  Break
               Endif
            Next
         End If
         If Not PH.Exist("fk_code") Then                                           'ok, still have no code
            '-------------------------------------------
            'We couldn't match the free text with an icpc
            'natural language term, so, check if we have
            're-allocated this one, if not popup a modal
            'box to get the code.God this could take some
            'time as there are nearly 4000 of these, so
            'I should write these to the database.
            '---------------------------------------------
            Dec Application.Busy
            const.globalstring = ""
            FICPC = New FICPCBrowser
            FICPC.txtTermToImport.text = PH!description                           'term we are trying to match
            FICPC.txtSearch.SetFocus()
            FICPC.ShowModal()
            '  If const.globalstring = "" Then
            '     Message.Info("no term code retrieved")
            '   Endif
            Inc Application.busy
            PH!fk_code = const.globalstring
            PH!fk_coding_system = const.coding_icpcPlus
            '-----------------------------------------------------
            'If user (me) did allocate a term, save for future use
            '-----------------------------------------------------
            If PH!fk_code Then
               icpc2_mapped_term = New CRow
               icpc2_mapped_term!fk_icpc2_term = PH!fk_code
               icpc2_mapped_term!free_text = PH!description
               icpc2_mapped_term.Save("coding.lu_icpc2_plain_language_mapper", "fk_lu_icpc2_plain_language_mapper")
               modDBConnect.CommitTrans()
               learntTerms = DrsDesk_Leant_Terms_Refresh() 'Load mappable terms drsdesk to icpc
            Else
               'still not term, have we saved before as a j term?
               user_j_terms = ICPC2_Get_J_Terms()                 'get all current j terms
               For Each a_term In user_j_terms                    'try and find a match
                  If Lower(PH!description) = Lower(a_term!natural_language_term) Then
                     PH!fk_code = a_term!icpc_code & a_term!term_code
                     PH!fk_coding_system = const.coding_icpcPlus
                     Break
                  Endif
               Next
            End If
            If Not PH.Exist("fk_code") Or IsNull(PH!fk_code) Then
               Print "creating j-code"
               J_code_count = modDBConnect.exec_query("SELECT CAST(coalesce(term_code, '0') AS integer) as last_j_code from coding.icpc2_user_terms order by pk DESC limit 1")!last_j_code
               PH!fk_code = "J99" & Format(J_code_count + 1, "00#")
               PH!fk_coding_system = 1
               '  pk integer,
               '   term text,
               '   natural_language_term text,
               '   icpc_code text,
               '   term_code text,
               '   status text,
               '   replacement text

               new_j_term = New CRow
               new_j_term!term = "User;" & PH!description
               new_j_term!natural_language_term = PH!description
               new_j_term!icpc_code = "J99"
               new_j_term!term_code = Str(J_code_count + 1)
               new_j_term!status = "A"
               new_j_term.Save("coding.icpc2_user_terms", "fk_new_j_term")
               modDBConnect.CommitTrans()
            End If
         Else
            PH!condition_summary = bits[comment]
            PH!fk_laterality = bits[lateralisation] 'same DrsDesk and EasyGP
            PH!year_onset = bits[date_onset]
            If bits[active] = 1 Then
               PH!active = True
            Else
               PH!active = False
            End If

            If bits[operation] = 1 Then
               PH!operation = True
            Else
               PH!operation = False
            End If
            If bits[cause_death] = 1 Then
               PH!cause_of_death = True
            Else
               PH!cause_of_death = False
            End If
            If bits[confidential] = 1 Then
               PH!confidential = True
            Else
               confidential = False
            End If
            '-------------------------------------------------------------
            'Now have to do some guessing, in Drs Desk things were either
            'inactive or active, now they can be major or significant or
            'a risk factor
            'fix me - put in some popup learning
            'for starters lets just make them major or inactive
            '-------------------------------------------------------------
            If PH!active = True Then
               If InStr(Lower(PH!description), "mitral regurgitation") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "mitral stenosis") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "mitral incompetence") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "aortic regurgitation") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "aortic incompetence") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "aortic stenosis") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "transient ischaemic attack") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "prostate cancer") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "hepatitis c") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "haemophilia") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "haemachromatosis") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "chronic kidney disease") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "myasthenia gravis") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "polycythaemia") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "asthma") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "bronchiectasis") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "copd") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "chronic airways disease") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "chronic obstructive pulmonary disease") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "emphysema") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "hyperlipidaemia") Then
                  PH!risk_factor = True
               Endif
               If InStr(Lower(PH!description), "hypercholesterolaemia") Then
                  PH!risk_factor = True
               Endif
               If InStr(Lower(PH!description), "cholesterol") Then
                  PH!risk_factor = True
               Endif
               If InStr(Lower(PH!description), "overweight") Then
                  PH!risk_factor = True
               Endif
               If InStr(Lower(PH!description), "obesity") Then
                  PH!risk_factor = True
               Endif
               If InStr(Lower(PH!description), "hypertension") Then
                  PH!risk_factor = True
               Endif
               If InStr(Lower(PH!description), "high blood pressure") Then
                  PH!risk_factor = True
               Endif
               If InStr(Lower(PH!description), "impaired fasting glycaemia") Then
                  PH!risk_factor = True
               Endif
               If InStr(Lower(PH!description), "niddm") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "niddm on insulin") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "iddm") Then
                  PH!major = True
               Endif
               If Lower(PH!description) = "diabetes" Then ' will miss then gestational
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "sleep apnoea") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "carcinoma breast") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "breast cancer") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "thyroid cancer") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "melanoma") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "mixed mitral valve disease") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "heart failure") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "ccf") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "prostate cancer") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "cancer of prostate") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "atrial fibrillation") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "rheumatoid arthritis") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "psoriatic arthritis") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "lupus") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "cardiomyopathy") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "coronary artery disease") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "ischaemic heart disease") Then
                  PH!major = True
               Endif
               If Lower(PH!description) = "renal failure" Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "hyperthyroidism") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "hypothyroidism") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "epilepsy") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "osteoporosis") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "complex partial") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "parkinson") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "dementia") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "memory loss") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "multiple sclerosis") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "pacemaker") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "macular degeneration") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "congenital blindness") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "developmental delay") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "autism") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "asberger") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "deafness") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "renal impairment") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "chronic kidney") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "alcoholism") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "depression") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "anxiety") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "bipolar") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "vitamin b12") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "alcohol dependence") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "ulcerative colitis") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "crohn") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "panic disorder") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "carcinoma bladder") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "bladder cancer") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "anal carcinoma") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "bowel cancer") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "carcinoma bowel") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "colonic polyps") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "thyroid cancer") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "ptsd") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "warfarinised") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "glaucoma") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "idiopathic pulmonary fibrosis") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "memory impairment") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "leukemia") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "lymphoma") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "anaesthetic risk") Then
                  PH!major = True
               Endif
               If InStr(Lower(PH!description), "anaesthetic reaction") Then
                  PH!major = True
               Endif
            End If
            PastHistory.Add(PH, PastHistory.count)
            lblProgress.text = "Importing pasthistory for " & scurrentPatient & " " & Str(import_count) & " " "item count: " & Str(past_history_item_count)
            Inc past_history_item_count 'this will be 1 if the first item.(x(x

         End If
         '  Else
         '      unmatchables.Add(PH, unmatchables.count)
         ' End If
         Inc x
      End If

   Wend
   modDBConnect.CommitTrans()

   lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Import completed")
   lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "We imported " & Str(patients.count) & " patients")
   lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "there were" & Str$(missingpatients) & "missing or duplicated patients")
   lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "there were" & Str$(x) & "terms matched")
   lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "there were" & Str(unmatchables.count) & "terms not matched")
   Close #hfile
   hfile = Open User.home &/ "easygp/import/unmatched.txt" For Write Create
   For Each unmatchable In unmatchables
      Print #hfile, Lower(unmatchable!description)
   Next
   Close #hfile

   Dec Application.busy
   chkImportPastHistory.Value = False

End

Public Sub Patient_Identify(bits As String[]) As Collection

   Dim sql As String
   Dim $Result As Result
   Dim sMsg As String

   patient = New Collection
   patient!firstname = bits[firstname]
   patient!surname = bits[surname]
   patient!birthdate = Val(bits[birthdate])
   If bits[firstname] = "" Then
      lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "no firstname:" & patient!firstname & " " & patient!surname)
   End If
   If bits[surname] = "" Then
      lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "no surname:" & patient!firstname & " " & patient!surname)
   End If
   If Year(patient!birthdate) = 0 Then
      lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "no birthdate:" & patient!firstname & " " & patient!surname)
      Wait
      patient!birthdate = CDate("01/01/1901")
   End If

   '---------------------------------------------------
   'Now match that patient to the demographic database
   '---------------------------------------------------
   sql = "Select * from contacts.vwPatients where "
   sql &= "firstname ILIKE $$" & patient!firstname & "$$ "
   sql &= " AND surname ILIKE $$" & patient!surname & "$$ "
   sql &= " AND birthdate ='" & Format(patient!birthdate, "dd/mm/yyyy") & "'"
   $Result = modDBConnect.exec_query(sql)
   If $Result.count = 1 Then
      patient!fk_patient = $Result!fk_patient
      patient!fk_person = $Result!fk_person  'needed to save ethnicity data
      lblImporting2.text = "Importing data for" & patient!firstname & " " & patient!surname
      Wait
   Else
      sMsg = ""
      If $Result.count > 1 Then
         patient!fk_patient = $Result!fk_patient
         patient!fk_person = $Result!fk_person
         '  For Each $Result
         '     sMsg &= $Result!firstname & " " & $Result!surname & " " & Format($Result!birthdate, "dd/mm/yyyy") & "\n"
         '  Next
         '
         ' If Message.Question("More than 1 patient found with same name and dob\n\n" & sMsg & " Same patient?", "Yes", "No") = 2 Then
         '     patient!fk_patient = 0
         '     lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "duplicate name:" & patient!firstname & " " & patient!surname)
         '     Print patient
         ' Endif
         ' Wait
      End If
      If $Result.count = 0 Then
         lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Not in Demographic Database:" & patient!firstname & " " & patient!surname)
         patient!fk_patient = 0
         Wait
      End If
   End If
   patients.Add(patient, patients.count)
   Return patient

End

Public Sub Button1_Click()

   Temp1

End

Public Function File_IO_Describe_Error(error_code As Integer) As String

   Dim sMsg As String

   Select Case error_code

      Case const.File_IOError_Out_of_memory
         smsg = "Unable to open the file - out of memory"
      Case const.File_IOError_Access_Forbidden
         sMsg = "The file could not be accessed, please check you have the appropriate file permissions"
      Case const.File_IOError_File_is_directory
         sMsg = "The file you have attempted to open is a directory"
      Case const.File_IOError_File_Non_Existant
         sMsg = "The file could not be found. Please check the name and path and try again"
      Case const.File_IOError_Device_Full
         sMsg = "The disk you are trying to write to is full. To continue you should probably clean up your disk"
      Case const.File_IOError_System_Error
         sMsg = "Unkown system error"
   End Select
   Return sMsg

End

Public Sub EditArea_Buttons_Click()

   Select Case Last.tag
      Case "import"
         Import("new")
      Case "resume"
         If Message.Question("Resume from last patient imported for currently selected section?", "Yes", "No") = 2 Then Return
         Import("resume")
      Case "import path"
         Import_Select_Dir()
   End Select

End

Public Sub DrsDesk_Import()

   If chkImportPastHistory.value = True Then
      DrsDesk_PastHistory_Import
   End If
   If chkImportSocialHIstory.value = True Then
      DrsDesk_SocialHistory_Import()
   End If
   If chkImportFamilyHistory.value Then
      DrsDesk_FamilyHistory_Import
   Endif
   If chkImportVaccinations.Value Then
      DrsDesk_Vaccinations_Import
   Endif
   If chkImportHabits.Value Then
      DrsDesk_Habits_Import
   Endif
   If chkImportEthnicity.Value Then
      DrsDesk_Ethicity_Occupation_Country_Of_Birth_Import
   Endif

End

Public Sub Medibase_Import(sImportType As String)

   Dim bNothingChosen As Boolean = True
   Dim starttime As Date
   Dim endtime As Date
   Dim sOneline As String

   starttime = Now()
   hLog_file = Open Trim(txtImportDirectory.text) &/ "staff_json_import_log.txt" For Write Create
   Print #hLog_file, "Started Medidbase import :" & Format(Now, "dd/mm/yyy:hh:nn")
   If chkImportStaff.value = True Then
      bNothingChosen = False
      Print #hLog_file, "Starting staff import"
      Medibase_Import_Staff()
      Print #hLog_file, "Ending staff import"
      chkImportStaff.value = False
      FStaff.Staff_Refresh_External()
   Endif
   If chkImportPatients.value = True Then
      bNothingChosen = False
      Print #hLog_file, "Starting patient import"
      Medibase_Import_Patients()
      Print #hLog_file, "Ending patient import"
      chkImportPatients.Value = False
   Endif
   If chkImportLetters.value = True Then
      bNothingChosen = False
      Print #hLog_file, "Starting letters import"
      Medibase_Import_Letters(sImportType)
      Print #hLog_file, "Finished letters import"
      chkImportLetters.Value = False
   End If

   If chkImportProgressNotes.value = True Then
      bNothingChosen = False
      Medibase_Import_Progress_Notes(sImportType)
      chkImportProgressNotes.Value = False
   End If
   If chkImportDocuments.value = True Then
      bNothingChosen = False
      Print #hLog_file, "Starting document import"
      Medibase_Import_Documents(sImportType)
      Print #hLog_file, "ending document import"
      chkImportDocuments.Value = False
   End If
   If bNothingChosen Then
      Message.Info("Please select the type of data you wish to import")
   Endif
   endtime = Now()
   Print #hLog_file, "Finished import of medibase records"
   Print #hLog_file, "Total time:" & Str(DateDiff(starttime, Endtime, gb.Minute)) & " minutes"
   Close #hLog_file

   hFile = Open Trim(txtImportDirectory.text) &/ "staff_json_import_log.txt" For Read

   While Not Eof(hFile)
      Line Input #hFile, sOneLine
      lvwLog.Add(lvwLog.count, sOneline)
   Wend
   '  Close #hLog_file  'BUG HERE, why can't close

End

Public Function Get_Possible_Request_Tags() As Collection
   '------------------------
   'Gets likely request tags
   '------------------------

   Return modDBConnect.exec_query_collection("Select * from import_export.lu_misspelt_user_request_tags")

End

Public Sub Medibase_Import_Documents(sImportType As String)

   Dim sFile As String
   Dim sDir As String
   Dim sRootdir As String
   Dim fk_patient As Integer
   Dim sNotesDir As String
   Dim sPatientDir As String
   Dim Documents As Collection
   Dim MetaData As Collection
   Dim x As Integer
   Dim bits As String[]
   Dim hfile As File
   Dim sOneLine As String
   Dim fk_staff As Integer
   Dim consult As CRow
   Dim progressNote As CRow
   Dim datebits As String[]
   Dim timebits As String[]
   Dim metadata_filename_path As String
   Dim pdf_filename_path As String
   Dim notes As String
   Dim charpos As Integer
   Dim sString As String
   Dim bpString As String
   Dim LeftString As String
   Dim RightString As String
   Dim iPatientCount As Integer
   Dim Document As CRow
   Dim pdf_filename_original As String 'the original name exported we will clean up later
   Dim pdf_filename_modified As String 'the orginal name minus the crud
   Dim fk_lu_display_as As Integer
   Dim msh_sending_entity As String
   Dim request_tags As Collection = Get_Possible_Request_Tags()
   Dim request_tag As Collection

   lblImport.text = "Importing Documents"
   lblProgress.text = ""
   rejected_records = New Collection
   sRootdir = Trim(txtImportDirectory.text)
   If sImportType = "new" Then
      Settings["FImportLegacyData/last_patient_no_documents"] = -1
   Endif
   If modAdminDBI.Config_Get("document_archiving_directory", "", Null, modDBConnect.currentUser!fk_clinic) = "" Then
      Message.info("Cannot import the documents as there is no destination directory set in Admin/Preferences.\n\nPlease rectify this before proceeding.")
      Return
   Endif
   If IsDir(sRootdir) Then
      If iPatientCount > Settings["FImportLegacyData/last_patient_no_documents", -1] Then
         For Each sFile In Dir(sRootdir)
            If IsDir(sRootdir &/ Sfile) Then
               sPatientDir = sFile
               fk_patient = modImportDBI.Patient_Get_pk_Using_fk_Legacy(sPatientDir)
               For Each sFile In Dir(sRootdir &/ sPatientDir)
                  If sFile = "DOCUMENTS" Then
                     x = 0
                     For Each sFile In Dir(sRootdir &/ sPatientDir &/ sNotesDir &/ "DOCUMENTS")
                        If File.Ext(sRootdir &/ sPatientDir &/ sNotesDir &/ sFile) = "meta" Then
                           Documents = New Collection
                           MetaData = New Collection
                           metadata_filename_path = sRootdir &/ sPatientDir &/ sNotesDir &/ "DOCUMENTS" &/ sFile
                           hFile = Open metadata_filename_path For Read
                           While Not Eof(hFile)
                              Line Input #hFile, sOneLine
                           Wend
                           Close #hfile
                           MetaData = JSON.Decode(sOneline)
                           pdf_filename_original = Replace(sFile, ".meta", "")         'this is the pdf name
                           pdf_filename_modified = modUtil.Filename_Protect(pdf_filename_original) & ".pdf"                                            'create a new name which won't crash
                           fk_staff = modImportDBI.Staff_Get_Using_Firstname_Lastname(metadata)
                           '------------------------------------------------------------------------------------------------
                           'Insert the document
                           'the fk_sending_entity = the practice importing the data, ie wherever this program is being run
                           'const.Document_Display_As_Letter not of relevance
                           '---------------------------------------- --------------------------------------------------------
                           Document = New CRow
                           '------------------------------------------------------------
                           'Can sometimes work out if a request result or a letter
                           'HORST/IAN FIXME: replace this long line with a better logic
                           'e.g symbion s & n, 'Holter' etc
                           'Default to assuming it is a letter
                           '------------------------------------------------------------
                           Document!tag_user = MetaData!description
                           fk_lu_display_as = const.Document_Display_As_Letter
                           Document!tag = "Sender Unknown - scanned letter"

                           If Not InStr(Document!tag_user, "Dr ") Then
                              For Each request_tag In request_tags                           'loaded from import_export.lu_misspelt_user_request_tags
                                 If InStr(Lower(MetaData!description), Lower(request_tag!tag)) Then
                                    fk_lu_display_as = const.Document_Display_As_Result
                                    Document!tag = "Sender Unknown - scanned result"
                                    Break
                                 End If
                              Next
                           End If
                           msh_sending_entity = modDBConnect.currentUser!organisation & "." & modDBConnect.currentUser!branch
                           Document!fk_sending_entity = modInboxDBI.SendingEntity_GetPK(fk_lu_display_as, msh_sending_entity, modDBConnect.currentUser!fk_branch)
                           If Not File.Ext(pdf_filename_modified) = ".pdf" Then
                              Message.Info(pdf_filename_modified, " is not ok")
                           Endif
                           Document!source_file = pdf_filename_modified
                           Document!imported_time = Now()
                           Document!date_created = MetaData!document_date
                           Document!originator = "sender unknown"
                           Document!fk_patient = fk_patient
                           Document!fk_staff_filed_document = modDBConnect.currentUser!fk_staff
                           Document!fk_staff_destination = modDBConnect.currentUser!fk_staff
                           Document!concluded = True
                           Document!fk_lu_display_as = fk_lu_display_as
                           Document!fk_lu_urgency = const.UrgencyLevelRoutine
                           Document!md5sum = modUtil.Calc_md5sum_File(sRootdir &/ sPatientDir &/ sNotesDir &/ "DOCUMENTS" &/ pdf_filename_original)
                           Try modFiles.Put("document_archiving_directory", pdf_filename_modified, sRootdir &/ sPatientDir &/ sNotesDir &/ "DOCUMENTS" &/ pdf_filename_original) 'copy to our documents dir
                           If Not Error Then
                              Document.Save("documents.documents", "fk_document")
                              modDBConnect.CommitTrans()
                              '   Try Kill sRootdir &/ sPatientDir &/ sNotesDir &/ "DOCUMENTS" &/ pdf_filename_original
                              '  If Error Then
                              '     Message.info("problem killing the original file")
                              '   Endif
                           Else
                              Print "error...." & sRootdir &/ sPatientDir &/ sNotesDir &/ "DOCUMENTS" &/ pdf_filename_original
                              rejected_records.Add(sRootdir &/ sPatientDir &/ sNotesDir &/ "DOCUMENTS" &/ pdf_filename_original, rejected_records.count)
                           Endif
                           Settings["FImportLegacyData/last_patient_no_documents"] = iPatientCount
                        Endif
                        Inc x
                     Next
                  End If
               Next
            Endif
            Inc iPatientCount
            Print "patient", iPatientCount
            If iPatientCount > 613 Then Break
            lblProgress.text = "total patients processed:" & Str(iPatientCount)
            Wait
         Next
      End If
   End If
   modDBConnect.CommitTrans
   If rejected_records.count Then
      hFile = Open sRootdir &/ "documents_rejected.txt" For Write Create
      For x = 0 To rejected_records.count - 1
         Print #hfile, rejected_records[x]
      Next
      Close #hfile
      Message.Info("Some records could not be processed.\n\nA list may be found in this file:\n\n" & sRootdir &/ "documents_rejected.txt")
   End If
Catch

   Print iPatientCount
   Print sPatientDir
   Message.info("An error occurred")

End

Public Sub Medibase_Import_Progress_Notes(sImportType As String)
   '----------------------------------------------------
   'Expected directory structure
   'PATIENTNAME/PROGRESSNOTES
   '  file.html
   ' file.json which contains
   ' {"pk_legacy": "MCLEJAMEA", "staff_firstname": "Peter", "staff_lastname": "Wong", "time": "17:33:58", "date": "2000-07-18", "problem": null, "pk_staff_legacy": "1"}
   '-----------------------------------------------------

   Dim sFile As String
   Dim sDir As String
   Dim sRootdir As String
   Dim fk_patient As Integer
   Dim sNotesDir As String
   Dim sPatientDir As String
   Dim ProgressNotes As Collection
   Dim MetaData As Collection
   Dim x As Integer
   Dim bits As String[]
   Dim hfile As File
   Dim sOneLine As String
   Dim fk_staff As Integer
   Dim consult As CRow
   Dim progressNote As CRow
   Dim datebits As String[]
   Dim timebits As String[]
   Dim metadata_filename_path As String
   Dim html_filename_path As String
   Dim notes As String
   Dim charpos As Integer
   Dim sString As String
   Dim bpString As String
   Dim LeftString As String
   Dim RightString As String
   Dim iPatientCount As Integer = -1

   lblImport.text = "Importing progress notes"
   lblProgress.text = ""
   rejected_records = New Collection
   sRootdir = Trim(txtImportDirectory.text) ' &/ "MEDIBASE_EXPORT/"
   If sImportType = "new" Then
      Settings["FImportLegacyData/last_patient_no_notes"] = -1
   Endif
   If IsDir(sRootdir) Then                             'eg "/home/user/MEDIBASE_EXPORT/"
      For Each sFile In Dir(sRootdir)
         If IsDir(sRootdir &/ Sfile) Then
            Inc iPatientCount
            If iPatientCount > Settings["FImportLegacyData/last_patient_no_notes", -1] Then
               Print iPatientCount
               lblProgress.text = "Total patients with imported notes:" & Str(iPatientCount)
               sPatientDir = sFile
               fk_patient = modImportDBI.Patient_Get_pk_Using_fk_Legacy(sPatientDir)
               For Each sFile In Dir(sRootdir &/ sPatientDir)
                  If sFile = "PROGRESSNOTES" Then
                     x = 0
                     For Each sFile In Dir(sRootdir &/ sPatientDir &/ sNotesDir &/ "PROGRESSNOTES")
                        If File.Ext(sRootdir &/ sPatientDir &/ sNotesDir &/ sFile) = "json" Then
                           ProgressNotes = New Collection
                           MetaData = New Collection
                           metadata_filename_path = sRootdir &/ sPatientDir &/ sNotesDir &/ "PROGRESSNOTES" &/ sFile
                           hFile = Open metadata_filename_path For Read
                           While Not Eof(hFile)
                              Line Input #hFile, sOneLine
                           Wend
                           Close #hfile
                           MetaData = JSON.Decode(sOneline)
                           html_filename_path = Replace(metadata_filename_path, ".json", ".html")
                           hFile = Open html_filename_path For Read
                           notes = ""
                           While Not Eof(hFile)
                              Line Input #hFile, sOneLine
                              notes &= sOneLine
                           Wend
                           Close #hfile
                           '------------------------------------------------------------------------------------------
                           'Ok, massage the notes a little, first correct the formatting, leaving headings on one line
                           '------------------------------------------------------------------------------------------
                           metadata!notes = notes
                           metadata!notes = Replace$(metadata!notes, "<b>Diagnosis:", "<BR><b>Diagnosis:")
                           metadata!notes = Replace$(metadata!notes, "<b>Management:", "<BR><b>Management:")
                           metadata!notes = Replace$(metadata!notes, "<b>Action:", "<BR><b>Management:")
                           metadata!notes = Replace$(metadata!notes, "<b>History:", "<BR><b>History:")
                           metadata!notes = Replace$(metadata!notes, "<b>Examination:", "<BR><b>Examination:")
                           metadata!notes = Replace$(metadata!notes, "<b>Actions:", "<BR><b>Actions:")
                           metadata!notes = Replace$(metadata!notes, "<b>Review:", "<BR><b>Review:")
                           metadata!notes = Replace$(metadata!notes, "&nbsp", "&nbsp;")
                           '------------------------------------------------------------
                           'Next, try and parse out the BP measurements
                           '<A HREF='blood pressure'>blood pressure=180/80 mmhg</A><BR>
                           'BP: 135/85 &nbsp;
                           '-----------------------------------------------------------
                           ' If InStr(metadata!notes, "BP: ") Then
                           '    Print "found a BP"
                           '    Print metadata!notes
                           '    charpos = InStr(metadata!notes, "BP: ")
                           '    LeftString = Left(metadata!notes, InStr(metadata!notes, "BP: ") - 1)
                           '    Print LeftString
                           '  '  metadata!notes = Replace$("BP: ", "<A HREF='blood pressure'>blood pressure=")
                           '    sString = Right(metadata!notes, Len(metadata!notes) - charpos - 3)  'includes e.g 130/85 ;nbsp
                           '    RightString = Right(sString, Len(sSTring) - InStr(sString, "&nbsp") - 5)
                           '
                           '    Print "right side:", RightString
                           '
                           '    Print
                           '    charpos = InStr(sString, "&nbsp")
                           '    bpString = Trim(Left(sSTring, charpos - 1))
                           '    Print bpString
                           '  metadata!notes = LeftString & "<A HREF='blood pressure'>blood pressure=" & bpString & " mmhg</A><BR>" & RightString
                           '  Print metadata!notes
                           '
                           ' Endif
                           '   Print "starting ", txtImportPatient.text, fk_patient, MetaData!date, MetaData!time
                           fk_staff = modImportDBI.Staff_Get_Using_Firstname_Lastname(metadata)
                           datebits = Split(MetaData!date, "-")
                           timebits = Split(MetaData!time, ":")
                           consult = New CRow
                           consult!consult_date = Make_Date_time(datebits, timebits)
                           consult!consult_date = Make_Date_time(datebits, timebits)
                           consult!fk_patient = fk_patient
                           consult!fk_staff = fk_staff
                           consult!fk_type = const.consult_type_at_Surgery
                           consult!summary = "Imported progress note from MediBase" & Format(Now, "dd/mm/yyyy")
                           consult.Save("clin_consult.consult", "fk_consult")
                           Progressnote = New CRow
                           Progressnote!fk_consult = consult!fk_consult
                           Progressnote!fk_audit_action = const.cAuditAction_FileImport
                           Progressnote!notes = metadata!notes
                           Progressnote!fk_section = 0 'general notes
                           Progressnote!fk_problem = 0 'no problem
                           progressNote.Save("clin_consult.progressnotes", "fk_progressnote")
                           modDBConnect.CommitTrans()
                           Settings["FImportLegacyData/last_patient_no_notes"] = iPatientCount
                           Wait
                        Endif
                        Inc x
                     Next
                  End If
               Next
               Wait
            Endif
         Endif

      Next
   End If
   ' Message.Info("Commit Progress Notes?")
   modDBConnect.CommitTrans()
   If rejected_records.count Then
      hFile = Open sRootdir &/ "progress_notes_rejected.txt" For Write Create
      For x = 0 To rejected_records.count - 1
         Print #hfile, rejected_records[x]
      Next
      Close #hfile
      Message.Info("Some records could not be processed.\n\nA list may be found in this file:\n\n" & sRootdir &/ "progress_notes_rejected.txt")
   End If

End

Public Sub Import_Select_Dir()

   Dim hCtrl As Control
   Dim aTextbox As TextBox

   Form_directorychooser = New FDirectoryChooser(Me)
   With Form_directorychooser
      .top = Vbox_EditArea.top + Last.parent.parent.top + Last.parent.height
      For Each hctrl In Last.parent.children
         If hctrl Is Textbox Then
            aTextbox = hctrl
            Form_directorychooser.tag = aTextbox
            Break
         End If
      Next
      .left = Vbox_EditArea.left + aTextbox.parent.Left
      .width = aTextbox.Width
   End With
   Form_directorychooser.Visible = True
   Form_directorychooser.ShowModal()

End

Public Sub Import(sImportType As String) 'resume or start again

   If Not IsDir(Trim(txtImportDirectory.text)) Then
      Message.Info("Please select a valid directory before proceeding")
      txtImportDirectory.BackGround = Color.rgb(95, 255, 175)
      txtImportDirectory.SetFocus()
      Return
   Endif
   Select Case cmbMedicalProgram.text
      Case "Medibase"
         Medibase_Import(sImportType)
      Case "DrsDesk"
         DrsDesk_Import()
   End Select

End

Public Sub btnImportDemographics_Click()

   Dim sOneLine As String
   Dim hFile As File
   Dim apatient As Collection
   Dim contacts As New Collection
   Dim json_lines As New Collection
   Dim x As Integer
   Dim last_line As String
   Dim duplicate_line_count As Integer
   Dim possible_companies As New Collection

   hFile = Open "/home/richard/horst/patients_json.txt" For Read

   While Not Eof(hFile)
      Line Input #hFile, sOneLine
      json_lines.Add(soneline, contacts.count)
      contacts.Add(JSON.decode(sOneLIne), contacts.count)
   Wend
   Close #hFile

   Medibase_Import_Patients(contacts, json_lines) '

End

Public Sub button2_Click()

   Dim sOneLine As String
   Dim hFile As File
   Dim apatient As Collection
   Dim contacts As New Collection
   Dim json_lines As New Collection
   Dim x As Integer
   Dim last_line As String
   Dim duplicate_line_count As Integer
   Dim possible_companies As New Collection

   '  hFile = Open "/home/richard/horst_json.txt" For Read
   hFile = Open "/home/richard/horst_json_rejected.txt" For Read
   While Not Eof(hFile)
      Line Input #hFile, sOneLine
      If sOneLine <> last_line Then
         last_line = sOneLine
         If InStr(soneline, "{\"salutation\": \"Sir/Madam\", \"surname\":")
            If Not InStr(sOneline, "surname\": \"Dr ") Then
               If Not InStr(sOneline, "salutation\": \"Dr ") Then
                  possible_companies.Add(soneline, possible_companies.count)
               End If
            End If
         Else
            If Not InStr(sOneline, "firstname") Then
               If Not InStr(sOneline, "surname\": \"Dr ") Then
                  If Not InStr(sOneline, "salutation\": \"Dr ") Then
                     possible_companies.Add(soneline, possible_companies.count)
                  End If
               End If
            Else
               json_lines.Add(soneline, contacts.count)
               contacts.Add(JSON.decode(sOneLIne), contacts.count)
            End If
         End If
      Else
         Inc duplicate_line_count
      Endif

   Wend
   Close #hFile
   'now eliminate duplicate lines

   hFile = Open "/home/richard/contacts_json_unique.txt" For Write Create
   For x = 0 To json_lines.count - 1
      Print #hfile, json_lines[x]
   Next
   Close #hFile
   hFile = Open "/home/richard/contacts_possible_companies.txt" For Write Create
   For x = 0 To possible_companies.count - 1
      Print #hfile, possible_companies[x]
   Next
   Close #hFile

   '   Import(contacts, json_lines) '

End

Public Sub Medibase_Import_Patients()

   Dim bits As String[]
   Dim person As CRow
   Dim persons As New Collection
   Dim address_Link As CRow
   Dim link_person_comm As CRow
   Dim address As CRow
   Dim sql As String
   Dim contact As Collection
   Dim x As Integer
   Dim fk_occupation As Integer
   Dim occupation As Collection
   Dim R As Result
   Dim fk_title As Integer
   Dim sMsg As String
   Dim bOddOccupation As Boolean
   Dim OddRecords As New Collection
   Dim Notpersons As New Collection
   Dim rejected_records As New Collection
   Dim hFile As File
   Dim brejected As Boolean
   Dim communications As Collection
   Dim communication_row As String
   Dim communication As CRow
   Dim Town As String
   Dim icounter As Integer
   Dim patient As CRow
   Dim sOneLine As String
   Dim oldpatient As Collection
   Dim apatient As Collection
   Dim last_line As String
   Dim duplicate_line_count As Integer
   Dim sRootdir As String
   Dim json_lines As Collection

   lblImport.text = "Importing patient"
   lblProgress.text = ""
   json_lines = New Collection
   patients = New Collection
   sRootdir = Trim(txtImportDirectory.text)
   hFile = Open sRootdir &/ "patients_json.txt" For Read
   While Not Eof(hFile)
      Line Input #hFile, sOneLine
      json_lines.Add(soneline, patients.count)
      patients.Add(JSON.decode(sOneLIne), patients.count)
   Wend
   Close #hFile
   'message for horst  - need standardisation of eg communications[] or staight colleciton
   For Each oldpatient In patients
      Inc icounter
      Print icounter

      Person = New CRow

      Person = Person_Create(oldpatient)                                        'create new person row
      If Not IsNull(person) Then                                                 'is ok?
         If Not IsNull(oldpatient!communications) Then                       'if have comms
            Communications = Comms_Create(oldpatient!communications) 'add their comms
         Endif
         If Not IsNull(oldpatient!addresses) Then                       'if have an address
            Address = Address_Create(oldpatient!addresses, person, const.AddressType_Home)             'add their address
         Endif
         '---------------
         'save the record
         '---------------
         person.Save("contacts.data_persons", "fk_person")
         '  If Not IsNull(address) Then

         If address.count <> 0 Then
            address.Save("contacts.data_addresses", "fk_address")
            address_link = New CRow
            address_link!fk_person = person!fk_person
            address_link!fk_address = address!fk_address
            address_link.Save("contacts.links_persons_addresses", "fk_link_person_address")
         Else
            Print
         End If
         For Each communication In communications
            communication.Save("contacts.data_communications", "fk_comm")
            link_person_comm = New CRow
            link_person_comm!fk_person = person!fk_person
            link_person_comm!fk_comm = communication!fk_comm
            link_person_comm.Save("contacts.links_persons_comms", "fk_link_person_comm")
         Next
         patient = New CRow
         patient!fk_person = person!fk_person
         patient!medicare_number = oldpatient!patient!medicare_number
         If Len(oldpatient!patient!medicare_number) > 10 Then
            Message.Info("medicare number too long")
         Endif
         patient!medicare_ref_number = oldpatient!patient!medicare_ref_number
         patient!fk_lu_aboriginality = oldpatient!patient!atsi
         Select Case oldpatient!patient!active_status                           'ok
            Case "a"
               patient!fk_lu_active_status = const.PatientStatus_Active
            Case "i"
               patient!fk_lu_active_status = const.PatientStatus_Inactive
            Case Else
               Message.Info("was active status i don't know")
         End Select
         patient!veteran_number = oldpatient!patient!veteran_number                'ok
         patient!fk_lu_veteran_card_type = oldpatient!patient!veteran_card_type    'ok
         patient!fk_legacy = oldpatient!patient!pk_legacy                          'ok
         lblProgress.text = person!firstname & " " & person!surname
         Wait
         patient.Save("clerical.data_patients", "fk_patient")
      Else
         rejected_records.Add(json_lines[x], rejected_records.count)

      Endif
      Inc x
   Next
   ' If Message.Question("Would you like to commit the transaction to the database?", "Yes", "No") = 1 Then
   modDBConnect.CommitTrans
   ' Else
   '    Print #hLog_file, "Patient Import was cancelled by the user."
   ' End If

   hFile = Open sRootdir &/ "medibase_patients_rejected.txt" For Write Create
   For x = 0 To rejected_records.count - 1
      Print #hfile, rejected_records[x]
   Next
   Close #hfile

End

'
Public Sub town_Cleanup(town As String) As String
   'lots of horsts towns have multiple ascii 32's and some have full stops

   town = Replace(town, ".", " ")
   Return modUtil.StripExtraBlanks(town)

End

Public Sub Town_Make(R As Result, data As Collection, fk_address_type As Integer) As CRow

   Dim address As New CRow

   If IsNull(r!pk) Or r!pk = 0 Then
      Message.Info("missing-fk_town")
      Print
   Endif
   address!fk_town = r!pk
   address!street1 = data!street1
   address!street2 = data!street2
   address!fk_lu_address_type = fk_address_type
   Return address

End
'            '-------------------------------------------------------
'                   missing_towns.Add(bits[iSuburb], missing_town_count)
'                   Inc missing_town_count
'                   Print #hLogfile, person!firstname & " " & person!surname & " - failed to match suburb:" & address!suburb & " checking misspelt towns table for match...."
'                   C = modContactsDBI.Misspelt_towns_Get(address!suburb)
'                   If IsNull(c)
'                      If chkPromptForPostcodes.value = True Then
'                         'First check if we have encountered this, found no equivalent, and marked to skip
'                          bSkipTown = False
'                          For Each skipped_town In skipped_towns
'                            If Lower(skipped_town) = Lower(address!suburb) Then
'                                bSkipTown = True
'                                Print #hLogfile, person!firstname & " " & person!surname & " - skipping suburb - not found previously"
'                                Break
'                            Endif
'                          Next
'                          If bSkipTown = False Then
'
'                            misspelt_town = New Collection
'                            misspelt_town!town_misspelt = address!suburb
'                            FSelectTown.txtNotFound.text = address!suburb
'                            FSelectTown.txtFirstname.text = person!firstname
'                            FSelectTown.txtSurname.text = person!surname
'                            FSelectTown.txtbirthdate.text = person!birthdate
'                            FSelectTown.txtstreet1.text = address!street
'                            Dec Application.Busy
'                            FSelectTown.ShowModal()
'                            Inc Application.Busy
'                            If FSelectTown.fk_town Then
'                               address!fk_town = FSelectTown.fk_town
'                               misspelt_town!fk_town = FSelectTown.fk_town
'                               misspelt_town!town = FSelectTown.town
'                               modDBConnect.BeginTrans
'                               modDBConnect.insert("contacts.lu_misspelt_towns", misspelt_town)
'                               modDBConnect.CommitTrans
'                            Else
'                                Print #hLogfile, person!firstname & " " & person!surname & " - no suburb selected for substitution"
'                                Inc Errorcount
'                            End If
'                          End If
'                          Inc Errorcount
'                          iError = True
'                      End If

Public Sub btnImportStaff_Click()

   ' Dim sOneLine As String
   ' Dim hFile As File
   ' Dim staff As New Collection
   ' Dim json_lines As New Collection
   ' Dim x As Integer
   ' Dim last_line As String
   '
   ' '  hFile = Open "/home/richard/horst_json.txt" For Read
   ' hFile = Open "/home/richard/horst/staff_json.txt" For Read
   ' While Not Eof(hFile)
   '    Line Input #hFile, sOneLine
   '    json_lines.Add(soneline, staff.count)
   '    staff.Add(JSON.decode(sOneLIne), staff.count)
   ' Wend
   ' Close #hFile
   '
   ' Import_staff(staff, json_lines) '

End

Public Function Occupation_Get(person_occupation As String) As Integer
   '---------------------------------------------------------
   'Attempts to find if the occupation exists
   'if not, pops up a dialog, asks to correct spelling
   'which strips out any extra blanks and returns the string
   'then we have to re-check that this possibly corrected
   'string in which user may have changed the spelling
   'is not already an existing occupation
   '---------------------------------------------------------

   Dim occupation As New Collection
   Dim new_occupation As CRow
   Dim fk_occupation As Integer
   Dim Form_Verify_Occupation As New FAllocateOccupation
   Dim misspelt_occupation As CRow
   Dim sql As String
   Dim bNotInMisSpeltOccupations As Boolean
   Dim sstring As String
   Dim R As Result

   person_occupation = modUtil.StripExtraBlanks(person_occupation)
   Dec Application.Busy
   occupation = modCommonDBI.Occupation_Get(person_occupation)    'should only return one if this table has been fixed
   R = modDBConnect.exec_query("Select * from common.lu_occupations where occupation ilike $$" & person_occupation & "$$")
   If R.count = 0 Then                                     'no match found in common.lu_occupations
      sql = "Select * from import_export.lu_misspelt_occupations " 'see if previously encountered as mis-spelling
      sql &= " WHERE misspelt_occupation ILIKE $$" & person_occupation & "$$"
      occupation = modDBConnect.exec_query_first(sql)             'will return only one
      If Not IsNull(occupation) Then                              'get the real pk from common.lu_occupations
         sString = occupation!occupation
         occupation = New Collection
         R = modDBConnect.exec_query("Select * from common.lu_occupations where occupation ILIKE $$" & sstring & "$$")
         If R.count Then
            Return R!pk
         End If
      End If
      'still not found
      With Form_Verify_Occupation                                'popup a dialog to get user interaction
         .Init(Lower(person_occupation))                         'this will also save the new mis-spelt occupation
         .txtOccupationNew.SetFocus()                            'when user hits <OK>
         .ShowModal()
      End With
      If const.globalstring <> "" Then                           'ok - they typed in something
         occupation = modCommonDBI.Occupation_Get(const.globalstring) 'this could be change in spelling, so check again
         If IsNull(occupation) Then                              'give up, save this as new occupation
            new_occupation = New CRow
            new_occupation!occupation = const.globalstring        'the verified or corrected spelling
            new_occupation.Save("common.lu_occupations", "fk_occupation")
            fk_occupation = new_occupation!fk_occupation
         Else
            fk_occupation = occupation!pk
         End If
         modDBConnect.CommitTrans()
      Else
         Message.title = "Occupations"
         Message.Info("Inserting new occupation cancelled by the user")
         Return '0
      End If
   Else
      fk_occupation = R!pk
   Endif
   Inc Application.Busy
   Return fk_occupation

End

' Public Sub tbImportProgressNotes_Click()
'
'    Dim sFile As String
'    Dim sDir As String
'    Dim sRootdir As String
'    Dim fk_patient As Integer
'    Dim sNotesDir As String
'    Dim sPatientDir As String
'    Dim ProgressNotes As Collection
'    Dim MetaData As Collection
'    Dim x As Integer
'    Dim bits As String[]
'    Dim hfile As File
'    Dim sOneLine As String
'    Dim fk_staff As Integer
'    Dim consult As CRow
'    Dim progressNote As CRow
'    Dim datebits As String[]
'    Dim timebits As String[]
'    Dim metadata_filename_path As String
'    Dim html_filename_path As String
'    Dim notes As String
'    Dim charpos As Integer
'    Dim sString As String
'    Dim bpString As String
'    Dim LeftString As String
'    Dim RightString As String
'    Dim iPatientCount As Integer
'
'    ' Dialog.Title = "Select Path to Progress Notes"
'
'    '   If Dialog.SelectDirectory() Then Return
'    '  Print Dialog.Path
'    '----------------------------------------------------
'    'Ok, check this is a valid image (e.g they could have
'    'changed the file selector to any file
'    'directory structure
'    'PATIENTNAME/PROGRESSNOTES
'    '  file.html
'    ' file.json which contains
'    ' {"pk_legacy": "MCLEJAMEA", "staff_firstname": "Peter", "staff_lastname": "Wong", "time": "17:33:58", "date": "2000-07-18", "problem": null, "pk_staff_legacy": "1"}
'    '
'    '-----------------------------------------------------
'    sRootdir = "/home/richard/horst/MEDIBASE_EXPORT/"
'     sRootdir = "/home/richard/Downloads/Horst_Latests"
'    If IsDir(sRootdir) Then                             'eg "/home/richard/horst/MEDIBASE_EXPORT/"
'       For Each sFile In Dir(sRootdir)                  'eg "/home/richard/horst/MEDIBASE_EXPORT/"
'          If IsDir(sRootdir &/ Sfile) Then              '/home/richard/horst/temp/MCGUWAYNA
'             sPatientDir = sFile
'             fk_patient = modImportDBI.Patient_Get_pk_Using_fk_Legacy(sPatientDir)
'             For Each sFile In Dir(sRootdir &/ sPatientDir) '/home/richard/horst/temp/MCGUWAYNA
'                sNotesDir = sFile
'                x = 0
'                For Each sFile In Dir(sRootdir &/ sPatientDir &/ sNotesDir)
'                   ProgressNotes = New Collection
'                   MetaData = New Collection
'                   If File.Ext(sRootdir &/ sPatientDir &/ sNotesDir &/ sFile) = "meta" Then
'                      metadata_filename_path = sRootdir &/ sPatientDir &/ sNotesDir &/ sFile
'                      hFile = Open metadata_filename_path For Read
'                      While Not Eof(hFile)
'                         Line Input #hFile, sOneLine
'                      Wend
'                      Close #hfile
'                      MetaData = JSON.Decode(sOneline)
'                      html_filename_path = Replace(metadata_filename_path, ".meta", "")
'                      hFile = Open html_filename_path For Read
'                      notes = ""
'                      While Not Eof(hFile)
'                         Line Input #hFile, sOneLine
'                         notes &= sOneLine
'                      Wend
'                      Close #hfile
'                      '------------------------------------------------------------------------------------------
'                      'Ok, massage the notes a little, first correct the formatting, leaving headings on one line
'                      '------------------------------------------------------------------------------------------
'                      metadata!notes = notes
'                      metadata!notes = Replace$(metadata!notes, "<b>Diagnosis:", "<BR><b>Diagnosis:")
'                      metadata!notes = Replace$(metadata!notes, "<b>Management:", "<BR><b>Management:")
'                      metadata!notes = Replace$(metadata!notes, "<b>Action:", "<BR><b>Management:")
'                      metadata!notes = Replace$(metadata!notes, "<b>History:", "<BR><b>History:")
'                      metadata!notes = Replace$(metadata!notes, "<b>Examination:", "<BR><b>Examination:")
'                      metadata!notes = Replace$(metadata!notes, "<b>Actions:", "<BR><b>Actions:")
'                      metadata!notes = Replace$(metadata!notes, "<b>Review:", "<BR><b>Review:")
'                      metadata!notes = Replace$(metadata!notes, "&nbsp", "&nbsp;")
'                      '------------------------------------------------------------
'                      'Next, try and parse out the BP measurements
'                      '<A HREF='blood pressure'>blood pressure=180/80 mmhg</A><BR>
'                      'BP: 135/85 &nbsp;
'                      '-----------------------------------------------------------
'                      ' If InStr(metadata!notes, "BP: ") Then
'                      '    Print "found a BP"
'                      '    Print metadata!notes
'                      '    charpos = InStr(metadata!notes, "BP: ")
'                      '    LeftString = Left(metadata!notes, InStr(metadata!notes, "BP: ") - 1)
'                      '    Print LeftString
'                      '  '  metadata!notes = Replace$("BP: ", "<A HREF='blood pressure'>blood pressure=")
'                      '    sString = Right(metadata!notes, Len(metadata!notes) - charpos - 3)  'includes e.g 130/85 ;nbsp
'                      '    RightString = Right(sString, Len(sSTring) - InStr(sString, "&nbsp") - 5)
'                      '
'                      '    Print "right side:", RightString
'                      '
'                      '    Print
'                      '    charpos = InStr(sString, "&nbsp")
'                      '    bpString = Trim(Left(sSTring, charpos - 1))
'                      '    Print bpString
'                      '  metadata!notes = LeftString & "<A HREF='blood pressure'>blood pressure=" & bpString & " mmhg</A><BR>" & RightString
'                      '  Print metadata!notes
'                      '
'                      ' Endif
'                      fk_staff = modImportDBI.Staff_Get_Using_Firstname_Lastname(metadata)
'                      datebits = Split(MetaData!date, "-")
'                      timebits = Split(MetaData!time, ":")
'                      consult = New CRow
'                      consult!consult_date = Make_Date_time(datebits, timebits)
'                      consult!fk_patient = fk_patient
'                      consult!fk_staff = fk_staff
'                      consult!fk_type = const.consult_type_at_Surgery
'                      consult!summary = "Imported from MediBase" & Format(Now, "dd/mm/yyyy")
'                      consult.Save("clin_consult.consult", "fk_consult")
'                      Progressnote = New CRow
'                      Progressnote!fk_consult = consult!fk_consult
'                      Progressnote!fk_audit_action = const.cAuditAction_FileImport
'                      Progressnote!notes = metadata!notes
'                      Progressnote!fk_section = 0 'general notes
'                      Progressnote!fk_problem = 0 'no problem
'                      progressNote.Save("clin_consult.progressnotes", "fk_progressnote")
'                   Endif
'                   Inc x
'                Next
'             Next
'             Print "patient key:", fk_patient
'          Endif
'          Inc iPatientCount
'          Print "Patient:" & iPatientCount
'       Next
'    End If
'    modDBConnect.CommitTrans
'
' End

Public Sub Medibase_Import_Staff()

   Dim logon_suffix As Integer   'if logon_name exists increment this tag on end
   Dim person As CRow
   Dim link_person_comm As CRow
   Dim x As Integer
   Dim R As Result
   Dim sMsg As String
   Dim rejected_records As New Collection
   Dim hFile As File
   Dim communications As Collection
   Dim communication As CRow
   Dim icounter As Integer
   Dim staffmember As Collection
   Dim staff As Collection
   Dim newstaff As New CRow
   Dim link_staff_clinic As New CRow
   Dim employee As New CRow
   Dim sOneline As String
   Dim sRootdir As String
   Dim json_lines As Collection
   Dim data_numbers As CRow

   Message.info("Do not user this module due to recent changes - talk to Richard First")
   Return   
   FStaff.Staff_Refresh_External()
   'Return
   lblImport.text = "Importing Staff"
   lblProgress.text = ""
   '---------------------------------------------
   'Open the staff file, create a json collection
   '---------------------------------------------
   sRootdir = Trim(txtImportDirectory.text)
   staff = New Collection
   json_lines = New Collection
   oddoccupations = New String[]
   hFile = Open sRootdir &/ "staff_json.txt" For Read
   While Not Eof(hFile)
      Line Input #hFile, sOneLine
      json_lines.Add(soneline, staff.count)
      staff.Add(JSON.decode(sOneLIne), staff.count)
   Wend
   Close #hFile
   For Each staffmember In staff
      Inc icounter
      Print icounter
      '----------------------------------------------------------------------
      'First, try and create a person
      'This will fail for example if duplicate exists in the database already
      'but ajson_lines[x] log file will  be created of this FIXME DO THIS
      '----------------------------------------------------------------------
      Person = New CRow
      Person = Person_Create(staffmember)                                        'create new person row
      If Not IsNull(person) Then                                                 'is ok?
         If Not IsNull(staffmember!communications[0]) Then                       'if have comms
            Communications = Comms_Create(staffmember!communications[0]) 'add their comms
         Endif
         '----------------------------------------------------------------------------------------
         'If not rejected, try and add the postgres user first with default password of 'password'
         '----------------------------------------------------------------------------------------
         Newstaff = New CRow
         Newstaff!password = "password"
         Newstaff!fk_role = staffmember!fk_role
         Newstaff!fk_status = staffmember!fk_status
         If modDBConnect.Role_Check_If_Exists(staffmember!logon_name) Then
            Inc logon_suffix
            Newstaff!logon_name = staffmember!logon_name & Str(logon_suffix)
         Else
            Newstaff!logon_name = staffmember!logon_name
         End If
         Newstaff!logon_date_from = Now()
         Newstaff!logon_date_to = DateAdd(Now(), gb.Year, 2)
         Newstaff!qualifications = staffmember!qualifications
         Select Case staffmember!fk_role
            Case 1, 3 'doctor
               Newstaff!fk_lu_staff_type = 9 'general practitioners
            Case 2
               Newstaff!fk_lu_staff_type = 3
            Case 4
               Newstaff!fk_lu_staff_type = 13
            Case 5
               Newstaff!fk_lu_staff_type = 7 'general nursing
            Case 6, 7
               Newstaff!fk_lu_staff_type = 12
            Case 8
               Newstaff!fk_lu_staff_type = 4
            Case 9, 11, 12
               Newstaff!fk_lu_staff_type = 2
            Case 10
               Newstaff!fk_lu_staff_type = 6
         End Select
         If Not (modContactsDBI.Staff_Create_Postgres_User(Null, 0, newstaff)) Then
            rejected_records.Add(json_lines[x], rejected_records.count)
         Else
            person.Save("contacts.data_persons", "fk_person")
            For Each communication In communications
               communication.Save("contacts.data_communications", "fk_comm")
               link_person_comm = New CRow
               link_person_comm!fk_person = person!fk_person
               link_person_comm!fk_comm = communication!fk_comm
               link_person_comm.Save("contacts.links_persons_comms", "fk_link_person_comm")
            Next
         Endif
         newstaff.Remove("password")
         Newstaff!fk_person = person!fk_person   'put in the person key
         Newstaff.Save("admin.staff", "fk_staff")
         employee = New CRow
         employee!fk_branch = modDBConnect.currentUser!fk_branch
         employee!fk_status = staffmember!fk_status
         If person.Exist("fk_occupation") Then
            employee!fk_occupation = person!fk_occupation
         End If
         employee!fk_person = person!fk_person
         employee.Save("contacts.data_employees", "fk_employee")
         link_staff_clinic = New CRow
         link_staff_clinic!fk_staff = Newstaff!fk_staff
         link_staff_clinic!fk_clinic = modDBConnect.currentUser!fk_clinic
         link_staff_clinic.Save("admin.link_staff_clinics", "fk_link_staff_clinics")
         If Not IsNull(staffmember!provider_number) Then
            modContactsDBI.Set_Numbers(person!fk_person, modDBConnect.currentUser!fk_branch, staffmember!provider_number, staffmember!presciber_number)
         End If
         lblProgress.text = "Adding " & person!firstname & " " & person!surname
         Wait
      Else
         rejected_records.Add(json_lines[x], rejected_records.count)
      End If
      Inc x
   Next
   ' If Message.Question("Would you like to commit the transaction to the database?", "Yes", "No") = 1 Then
   modDBConnect.CommitTrans
   ' Else
   '    Print #hLog_file, "Staff Import was cancelled by the user."
   ' End If
   If rejected_records.count Then
      Print #hLog_file, "There were " & Str(rejected_records.count) & " records rejected details in the file " & sRootdir &/ "medibase_staff_rejected/txt"
   End If
   hFile = Open sRootdir &/ "medibase_staff_rejected.txt" For Write Create
   For x = 0 To rejected_records.count - 1
      Print #hfile, rejected_records[x]
   Next
   Close #hfile
   Fstaff.Reload()

End

Public Sub Person_Create(data As Collection) As CRow
   '------------------------------------------------------------------------------------
   'creates a person, if not valid the return cRow is null
   'If person exists in the contacts database with same name/DOB then considered invalid
   'however will write to  a log file FIXME to keep record of this
   '------------------------------------------------------------------------------------

   Dim R As Result
   Dim brejected As Boolean
   Dim bOddOccupation As Boolean
   Dim fk_title As Integer
   Dim bits As String[]
   Dim Person As New CRow
   Dim sql As String
   Dim sMsg As String

   person!firstname = data!person!firstname
   R = modDBConnect.exec_query("Select sex from contacts.lu_firstnames where firstname ILIKE $$" & Trim(person!firstname) & "$$")
   If R.count Then
      Select Case R!sex
         Case "m"
            person!fk_sex = const.cSexMale
         Case "f"
            person!fk_sex = const.cSexFemale
      End Select
   Else
      person!fk_sex = const.cSexUnknown
   Endif
   person!surname = data!person!surname
   If Not IsNull(data!person!birthdate) Then
      person!birthdate = data!person!birthdate
   Else
      Message.Info("Missing birthdate! - your programming skills are fucked")
      person!birthdate = "1900-01-01"
   End If
   If Not IsNull(data!person!retired) Then
      person!retired = True
   Endif
   Select Case Lower(Replace(data!person!title, ".", ""))
      Case "dr"
         fk_title = const.ctitleDr
      Case "mr"
         fk_title = const.ctitleMr
      Case "mrs"
         fk_title = const.ctitleMrs
      Case "ms"
         fk_title = const.ctitleMs
      Case "master"
         fk_title = const.ctitleMaster
      Case "miss"
         fk_title = const.ctitleMiss
      Case "prof"
         fk_title = const.ctitleProf
      Case Else
         Select Case person!fk_sex
            Case const.cSexMale
               bits = Split(person!birthdate, "-")
               If DateDiff(Now, Date(Val(bits[0]), Val(bits[1]), Val(bits[2])), gb.year) > 15 Then
                  fk_title = const.ctitleMr
               Else
                  fk_title = const.ctitleMaster
               End If
            Case const.cSexFemale
               bits = Split(person!birthdate, "-")
               If DateDiff(Now, Date(Val(bits[0]), Val(bits[1]), Val(bits[2])), gb.year) > 15 Then
                  fk_title = const.ctitleMiss
               Else
                  fk_title = const.ctitleMs
               End If
         End Select
   End Select
   person!fk_title = fk_title
   bOddOccupation = False
   If Not IsNull(Trim(Lower(data!person!occupation))) Then
      If Not InStr(Trim(Lower(data!person!occupation)), "/") Then
         R = modDBConnect.exec_query("Select * from common.lu_occupations where occupation ILIKE $$" & Trim(Lower(data!person!occupation)) & "$$")
         If R.count Then
            person!fk_occupation = R!pk
         Else
            If Not oddoccupations.Exist(Trim(Lower(data!person!occupation))) Then
               Select Case Message.Question("Occupation not found:\n\n" & data!person!occupation, "Save As New Occupation", "Do Not save")
                  Case 1
                     person!fk_occupation = modCommonDBI.Occupation_Save(Trim(Lower(data!person!occupation)))
                     modDBConnect.CommitTrans
                  Case 2
                     bOddOccupation = True
                     oddoccupations.Add(Trim(Lower(data!person!occupation)), oddoccupations.count)
               End Select
            Else
               bOddOccupation = True
            End If
         Endif
      End If
   End If
   '-------------------------------------------------------
   'Does the person already exist in the person's database?
   '-------------------------------------------------------
   bits = Split(person!birthdate, "-")
   sql = "Select * from contacts.data_persons where "
   sql &= "Firstname ILIKE $$" & person!firstname & "$$ AND surname ILIKE $$" & person!surname & "$$ "
   sql &= " AND birthdate = $$" & person!birthdate & "$$"
   R = modDBConnect.exec_query(sql)
   If R.Count Then
      'fixme write to logfile
      ' Message.title = "Duplicate Record" 'fixme write to a logfile
      ' sMsg = " The name:" & person!firstname & " " & person!surname & " " & Format(Date(Val(bits[0]), Val(bits[1]), Val(bits[2])), "dd/mm/yyyy")
      ' sMsg &= " already exists in the database.\n\n"
      ' If R.count > 1 Then
      '    sMsg &= "In fact, the same person and date of birth exist  " & Str(R.count) & " times.\n\n"
      '    sMsg &= "This record cannot be processed and will be added to a list in the log file ."
      '    Message.Info(sMsg)
      ' End If
      person = Null

   Endif
   Return Person

End

Public Sub Comms_Create(data As Collection) As Collection
   '----------------------------------------------------------------------
   'Creates a collection of persons comms null collection returned if none
   '----------------------------------------------------------------------

   Dim communications As New Collection
   Dim communication As CRow

   communications = New Collection
   If Not IsNull(data!phone_business) Then
      communication = New CRow
      communication!fk_type = const.CommModalityWork
      communication!value = data!phone_business
      communications.Add(communication, communications.count)
   Endif
   If Not IsNull(data!phone_afterhours) Then
      communication = New CRow
      communication!fk_type = const.CommModalityPhoneAfterHours
      communication!value = data!phone_afterhours
      communications.Add(communication, communications.count)
   Endif
   If Not IsNull(data!fax_no) Then
      communication = New CRow
      communication!fk_type = const.CommModalityFax
      communication!value = data!fax_no
      communications.Add(communication, communications.count)
   Endif
   If Not IsNull(data!web) Then
      communication = New CRow
      communication!fk_type = const.CommModalityWeb
      communication!value = data!web
      communications.Add(communication, communications.count)
   Endif
   If Not IsNull(data!email) Then
      communication = New CRow
      communication!fk_type = const.CommModalityEmail
      communication!value = data!email
      communications.Add(communication, communications.count)
   Endif
   If Not IsNull(data!phone_mobile) Then
      communication = New CRow
      communication!fk_type = const.CommModalityMobile
      communication!value = data!phone_mobile
      communications.Add(communication, communications.count)
   Endif
   If Not IsNull(data!phone_home) Then
      communication = New CRow
      communication!fk_type = const.CommModalityHome
      communication!value = data!phone_home
      communications.Add(communication, communications.count)
   Endif
   Return communications

End

Public Function Address_Create(data As Collection, person As CRow, fk_lu_address_type As Integer) As CRow
   '--------------------------------------------------------------------------------
   'Attempt to create an address, however much of the data to import is very 'dirty'
   'as a good many legacy databases had no proper town/postcode data input method
   'and relied on secretarial typing.... many spello's and non-existant towns
   'We will try various things, if they fail we will prompt the user for help
   'town field could have town + postcode
   'the town could be ok, but the state missing
   'the town could be ok but the postcode is wrong
   '---------------------------------------------------------------------------------

   Dim address As New CRow
   Dim sql As String
   Dim R As Result

   '-------------------------------------------------------------
   'first, lets go for a unique australian town.
   'town_Cleanup(data!town)cleanup crap in the names
   '-------------------------------------------------------------
   If Not data.count Then
      Return address
   Endif
   If person!firstname = "Kylea" Then
      Print
   Endif
   sql = "Select * from contacts.lu_towns where town ilike $$" & town_Cleanup(data!town) & "$$ AND comment is null"
   R = modDBConnect.exec_query(sql)
   If r.count = 1 Then
      address = town_Make(R, data, fk_lu_address_type)
   Else
      '-----------------------------------------------------------------------------------------------------
      'ok, bombed on that, there could be none or > 1, try town + state as I've noted postcodes can be wrong
      '-----------------------------------------------------------------------------------------------------
      If Not IsNull(data!state) Then
         sql = "Select * from contacts.lu_towns where town ilike $$" & town_Cleanup(data!town) & "$$ AND comment is null "
         sql &= " AND state = $$" & Trim(data!state) & "$$"
         R = modDBConnect.exec_query(sql)
         If R.count = 1 Then
            address = town_Make(R, data, fk_lu_address_type)
         Endif
      Else
         '----------------------------------
         'ok, no state, try town + postcode
         '-----------------------------------
         If Not IsNull(data!postcode) Then
            sql = "Select * from contacts.lu_towns where town ilike $$" & town_Cleanup(data!town) & "$$ AND comment is null "
            sql &= " AND postcode = $$" & Trim(data!postcode) & "$$"
            R = modDBConnect.exec_query(sql)
            If R.count = 1 Then
               address = town_Make(R, data, fk_lu_address_type)
            End If
         End If
      End If
      If Not address.count Then
         '----------------------------------------------------
         'At this point we have not town, need user input
         'ok, failed, use popup and get use to add the town
         'We'll look first in previously saved mis-spelt town
         '----------------------------------------------------
         If Not IsNull(data!town) Then
            misspelt_town = modContactsDBI.Misspelt_towns_Get(data!town)
            If Not IsNull(misspelt_town) Then
               address = New CRow
               address!fk_town = misspelt_town!fk_town
               address!street1 = data!street1
               address!street2 = data!street2
               address!fk_lu_address_type = const.AddressType_Work
               Return address
            Else
               '   If address.count = 0 And Not IsNull(data!town) Then
               '  fk_town = 0
               '  misspelt_town = New Collection
               '  misspelt_town!town_misspelt = data!town
               '  FSelectTown.txtNotFound.text = data!town
               '  FSelectTown.txtFirstname.text = person!firstname
               '  FSelectTown.txtSurname.text = person!surname
               '  FSelectTown.txtstreet1.text = data!street1
               '  FSelectTown.txtstreet2.text = data!street2
               ' ' FSelectTown.Init(data)
               '  Dec Application.Busy
               ' ' FSelectTown.ShowModal()                         'get the data,if user did allocate valid town, fk_town > 0
               '  Inc Application.Busy
               '  If fk_town Then
               '     '------------------------------------------------------------------------------------------
               '     'if the user allocated a town, fill the address collection
               '     'then save the misspelt town to the backend, along with the correct key to the correct town
               '     '------------------------------------------------------------------------------------------
               '     address = New CRow
               '     If fk_town = 0 Then 'should never be trying to find bug
               '        Message.Info("fk_town is zero")
               '        Print
               '     End If
               '     address!fk_town = fk_town
               '     address!street1 = data!street1
               '     address!street2 = data!street2
               '     address!fk_lu_address_type = fk_lu_address_type
               '     misspelt_town!fk_town = fk_town             'the real town
               '     misspelt_town!town = Corrected_Town!town
               '     misspelt_town!town_misspelt = data!town 'the mis-spelt town
               '     modDBConnect.BeginTrans
               '     modDBConnect.insert("contacts.lu_misspelt_towns", misspelt_town)
               '     modDBConnect.CommitTrans
               address = New CRow
               address!street1 = data!street1
               address!street2 = data!town  'for helping staff later
               address!fk_lu_address_type = fk_lu_address_type
               address!fk_town = 1 'the dummy town in our backend
               Return address
            End If
         Else
            '--------------------------------------------------------
            ' Not town, but still should have an address of some sort
            ' -------------------------------------------------------
            address = New CRow
            address!street1 = data!street1
            address!street2 = data!town  'for helping staff later
            address!fk_lu_address_type = fk_lu_address_type
            address!fk_town = 1 'the dummy town in our backend
            Return address
            ' End If
            ' End If
         End If
      End If
   End If
   Return address

End

Public Function ICPC2_Get_J_Terms() As Collection

   Return modDBConnect.exec_query_collection("Select * from coding.icpc2_user_terms")

End

Public Function Make_Date(bits As String[]) As Date

   If bits.count <> 3 Then
      Message.info("bad date bits")
      Return
   Endif
   Return Date(Val(bits[0]), Val(bits[1]), Val(bits[2]))

End

Public Function Make_Date_time(datebits As String[], timebits As String[]) As Date
   'some records missing time in part or whole

   Dim x As Integer

   For x = timebits.count To 2
      timebits.Add("0")
   Next
   If timebits.count = 2 Then
      timebits.Add("0")
   Endif
   Return Date(Val(datebits[0]), Val(datebits[1]), Val(datebits[2]), Val(timebits[0]), Val(timebits[1]), Val(timebits[2]))

End

Public Sub EditArea_TextBox_LostFocus()

   Last.BackGround = Color.White

End

Public Sub EditArea_TextBox_GotFocus()

   Last.BackGround = Color.rgb(95, 255, 175)

End

' pk serial Not Null,
'    fk_lu_request_type integer, - - The type Of provider eg pathology provider, radiology provider
' msh_sending_entity text Not Null, - - the entity sending, could be unintelligable eg a NATA / number Or a recognizable name eg Hunter Radiology, however often bears no relationship To a real person Or company
' msh_transmitting_entity text, - - could be the sending entity Or third party transmitter eg Medical Objects, Or the name Of a computer program generating the hl7
' fk_lu_message_display_style integer Not Null, - - display As Letter Or result style...
'    fk_branch integer,
'    fk_employee integer,
'    fk_person integer,
'    fk_lu_message_standard integer Not Null, - - hl7 Or pit
' exclude_ft_report boolean Default False, - - If True Then no Free text segments will be shown
' exclude_pit boolean Default False, - - If contains PIT segments If True these will Not be shown(often duplicated the hl7 data itself)
' abnormals_foreground_color integer Default 16711680,
'    abnormals_background_color integer Default 16777215,
'    deleted boolean Default False,
'    CONSTRAINT sending_entities_pkey PRIMARY KEY(pk)
' )
' With (
'       OIDS = False
'    );
'    ALTER TABLE documents.sending_entities
'    OWNER To richard;
'    GRANT ALL On TABLE documents.sending_entities To richard;
'    GRANT ALL On TABLE documents.sending_entities To easygp;
'    GRANT ALL On TABLE documents.sending_entities To staff;
'    COMMENT On TABLE documents.sending_entities
'    Is 'Sending entities and the parameters to define how to handle incoming hl7 messages
'       On a per - provider basis.Note these messages can be In form Of various hl7 standards Or old style PIT(sequential numbered text lines eg 100, 110 120 etc This table
'    defines the file type hl7 Or pit, who Is Sending it, where To put it, which segments Of the message To exclude when displaying In Html ';
'    COMMENT On COLUMN documents.sending_entities.fk_lu_request_type Is 'The type of provider eg pathology provider, radiology provider';
'       COMMENT On COLUMN documents.sending_entities.msh_sending_entity Is 'the entity sending, could be unintelligable eg a NATA/number or a recognizable name eg Hunter Radiology, however often bears no relationship to a real person or company';
'       COMMENT On COLUMN documents.sending_entities.msh_transmitting_entity Is 'could be the sending entity or third party transmitter eg Medical Objects, or the name of a computer program generating the hl7';
'       COMMENT On COLUMN documents.sending_entities.fk_lu_message_display_style Is 'display as letter or result style
'       - Public Const Document_Display_As_Letter As Integer = 1
'    - Public Const Document_Display_As_Result As Integer = 2
'
'    Note: though this attribute Is Kept For Each document In document.documents
'    at the Time the document Is Signed off by the user,
'       we need To know what the Default display type Is For Each message sender -
'       defaults To 1 = letter, because, though pathology companies are far more
'    common, they will have been set To display As A result In the configuration Of
'    message senders.Scanned documents however will Not by Default , so we assume
'    (sometimes wrongly)that they are usually letters
'    ';
'    COMMENT On COLUMN documents.sending_entities.fk_lu_message_standard Is 'hl7 or pit';
'       COMMENT On COLUMN documents.sending_entities.exclude_ft_report Is 'if true then no free text segments will be shown';
'       COMMENT On COLUMN documents.sending_entities.exclude_pit Is 'if contains PIT segments if true these will not be shown (often duplicated the hl7 data itself)';
'
'   originator text,
'   originator_reference text,
'   comment_on_document text, - - additional comment e.g NAD etc
' COMMENT On COLUMN documents.documents.comment_on_document Is 'additional comment e.g NAD etc';
' COMMENT On COLUMN documents.documents.staff_intended_for_unknown Is 'Sometimes despite all efforts it is not possible to determine from the hl7 who the message was
'  intended for.In this situation EasyGP has a Default staff member who Is Allocated the
'  orphaned messages.If so, Then this field will be True
'  If this Is Sorted out, Then this field will be re - set To False the fk_staff_destination set
'  To the correct fk_staff, however these changes will be logged ';
' COMMENT On COLUMN documents.documents.fk_lu_display_as Is 'How to display the document 1 as a result 2 as a letter';
' COMMENT On COLUMN documents.documents.fk_lu_request_type Is ' - key to clin_requests.lu_request_type table which contains the types
'     Of requests e.g Pathology Radiology Vascular.
'   - note this field over - rides the
'    fk_lu_request_type Of a given documents.sending_entities.fk_lu_request_type
'    which Is There To aid FDocumentMetadata guess the likely type Of request For
'    a given sender Of messages, but may Not be correct all the Time ';
'
Public Sub Temp1()

   Dim hfile As File
   Dim destFile As File
   Dim sfile As String = "/home/richard/Downloads/pregdat/pregcatdata_AU.txt"
   Dim sOneline As String
   Dim icounter As Integer
   Dim pregdata As CRow
   Dim alldata As New Collection
   Dim bits As String[]
   Dim sql As String
   Dim R As Result
   Dim iatccount As Integer

   Try hfile = Open sfile For Input
   While Not Eof(hfile)
      Line Input #hfile, sOneline
      bits = Split(sOneline, "|")
      R = modDBConnect.exec_query("Select * from drugs.atc where atcname ILIKE $$" & bits[0] & "$$")
      pregdata = New CRow
      If R.count Then
         pregdata!atccode = R!atccode
         Inc iatccount
      End If
      Try pregdata!generic = bits[0]
      Try pregdata!fk_lu_pregnancy_category = bits[1]
      Try pregdata!safety_information = bits[2]
      Try pregdata!class1 = bits[3]
      Try pregdata!class2 = bits[4]
      Try pregdata!class3 = bits[5]
      pregdata.Save("drugs.link_generic_pregcat_safety_info", "fk_link")
      alldata.Add(pregdata, alldata.count)
      Inc icounter
      Print icounter
   Wend
   Print alldata, icounter, iatccount
   modDBConnect.CommitTrans

End

Public Sub Medibase_Import_Letters(sImportType As String)

   '----------------------------------------------------
   'Expected directory structure
   'PATIENTNAME/PROGRESSNOTES
   '  file.html
   ' file.json which contains
   '{"fk_branch": null, "deleted": false, "date_referral": "2006-02-28",
   ' "fk_person": Null, "tag": "TO: Physiotherapist, RE: Letter to specialist",
   '  "body_html": "", "include_careplan": False, "fk_progressnote": Null,
   '   "letter_html": "", "fk_address": Null, "fk_pasthistory": Null,
   '   "include_healthsummary": False, "fk_type": 11, "copyto": "",
   '   "fk_consult": Null, "fk_employee": Null}
   ' CREATE TABLE clin_referrals.referrals
   ' (
   '  x  pk serial NOT NULL,
   '  x  fk_consult integer NOT NULL, -- key to the main clin_consult.consult table which is the master table of the database
   '  x  date_referral date NOT NULL, -- Date written on the referral, may not be the consult_date
   '  x  fk_branch integer, -- if not null key to contacts.data_branches - points to organisation and address of the organisation
   '  x  fk_employee integer, -- if not null key to contacts.data_employees table - points to employee of an organisation
   '  x  fk_person integer, -- if not null key to contacts.data_persons table ie person referred to
   '  x  fk_address integer, -- key to contacts.data_addresses, if not null is the address of the person. not the address of the organisation/branch/employee obtained through the other keys
   '  x fk_type integer, -- key to lu_referral_type table ie type of referral e.g opinion or management
   '  x letter_html text NOT NULL, -- html which is the letter itself
   '  x tag text, -- A description of the letter eg 'heart failure'
   '  x deleted boolean DEFAULT false,
   '  x body_html text, -- Contains the html of the body of the letter
   '  x fk_pasthistory integer DEFAULT 0, -- if not 0 = general notes, then is the key to clin_history.past_history table
   '  x fk_progressnote integer, -- key to clin_consult.progress notes table - points to the progress note of a letter during the...
   '  x include_careplan boolean DEFAULT false,
   '  x include_healthsummary boolean DEFAULT false,
   '  x copyto text, -- a Pipe delimated list of entities receiving copies...
   '  x fk_lu_urgency integer DEFAULT 1,
   '  x letter_hl7 text, -- the hl7 of the letter ** minus ** the inclusions OBX segments...
   '   CONSTRAINT referrals_pkey PRIMARY KEY (pk )
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );

   '-----------------------------------------------------
   Dim sFile As String
   Dim sDir As String
   Dim sRootdir As String
   Dim fk_patient As Integer
   Dim sNotesDir As String
   Dim sPatientDir As String
   Dim MetaData As Collection
   Dim x As Integer
   Dim bits As String[]
   Dim hfile As File
   Dim sOneLine As String
   Dim fk_staff As Integer
   Dim consult As CRow
   Dim Referral As CRow
   Dim datebits As String[]
   Dim timebits As String[]
   Dim metadata_filename_path As String
   Dim html_filename_path As String
   Dim letter_html As String
   Dim charpos As Integer
   Dim sString As String
   Dim bpString As String
   Dim LeftString As String
   Dim RightString As String
   Dim iPatientCount As Integer

   lblImport.text = "Importing Letters"
   lblProgress.text = ""
   rejected_records = New Collection
   sRootdir = Trim(txtImportDirectory.text) ' &/ "MEDIBASE_EXPORT/"
   If sImportType = "new" Then
      Settings["FImportLegacyData/last_patient_no_letters"] = -1
   Endif
   If IsDir(sRootdir) Then                             'eg "/home/user/MEDIBASE_EXPORT/"
      For Each sFile In Dir(sRootdir)
         If iPatientCount > Settings["FImportLegacyData/last_patient_no_letters", -1] Then
            If IsDir(sRootdir &/ Sfile) Then
               sPatientDir = sFile
               fk_patient = modImportDBI.Patient_Get_pk_Using_fk_Legacy(sPatientDir)
               Print sPatientDir
               For Each sFile In Dir(sRootdir &/ sPatientDir)
                  If sFile = "LETTERS" Then
                     x = 0
                     For Each sFile In Dir(sRootdir &/ sPatientDir &/ sNotesDir &/ "LETTERS")
                        If File.Ext(sRootdir &/ sPatientDir &/ sNotesDir &/ sFile) = "json" Then
                           MetaData = New Collection
                           metadata_filename_path = sRootdir &/ sPatientDir &/ sNotesDir &/ "LETTERS" &/ sFile
                           hFile = Open metadata_filename_path For Read
                           While Not Eof(hFile)
                              Line Input #hFile, sOneLine
                           Wend
                           Close #hfile
                           MetaData = JSON.Decode(sOneline)
                           html_filename_path = Replace(metadata_filename_path, ".json", ".html")
                           hFile = Open html_filename_path For Read
                           letter_html = ""
                           While Not Eof(hFile)
                              Line Input #hFile, sOneLine
                              letter_html &= sOneLine
                           Wend
                           Close #hfile
                           '------------------------------------------------------------------------------------------
                           'Ok, massage the notes a little, first correct the formatting, leaving headings on one line
                           '------------------------------------------------------------------------------------------
                           fk_staff = modImportDBI.Staff_Get_Using_Firstname_Lastname(metadata)
                           datebits = Split(MetaData!date_referral, "-")
                           timebits = Split(MetaData!time, ":")
                           consult = New CRow
                           consult!consult_date = Make_Date_time(datebits, timebits)
                           consult!fk_patient = fk_patient
                           consult!fk_staff = modDBConnect.currentUser!fk_staff
                           consult!fk_type = const.consult_type_at_Surgery
                           consult!summary = "Imported referral letter from MediBase " & Format(Now, "dd/mm/yyyy")
                           consult.Save("clin_consult.consult", "fk_consult")
                           Referral = New CRow
                           Referral!fk_consult = consult!fk_consult
                           ' Referral!fk_branch = modDBConnect.currentUser!fk_branch
                           Referral!date_referral = metadata!date_referral
                           Referral!fk_type = const.ReferralType_OpinionAndManagement 'metadata!fk_type
                           Referral!letter_html = letter_html
                           Referral!tag = Replace(metadata!tag, "TO: ", "")
                           Referral!body_html = metadata!body_html
                           Referral!finalised = True
                           Referral.Save("clin_referrals.referrals", "fk_referral")
                           modDBConnect.CommitTrans()
                           Settings["FImportLegacyData/last_patient_no_letters"] = iPatientCount
                        Endif
                        Inc x
                     Next
                  End If
               Next
            Endif
         End If
         Inc iPatientCount
         Print iPatientCount
         lblProgress.text = "Total patients with imported letters:" & Str(iPatientCount)
         Wait
      Next
   End If
   modDBConnect.CommitTrans()
   If rejected_records.count Then
      hFile = Open sRootdir &/ "referral_letters_rejected.txt" For Write Create
      For x = 0 To rejected_records.count - 1
         Print #hfile, rejected_records[x]
      Next
      Close #hfile
      Message.Info("Some records could not be processed.\n\nA list may be found in this file:\n\n" & sRootdir &/ "progress_notes_rejected.txt")
   End If

End

Public Sub cmbMedicalProgram_Click()

   Select Case Last.text
      Case "DrsDesk"
         Hbox_Import_PastHistory.Visible = True
         Hbox_Import_FamilyHistory.Visible = True
         Hbox_Import_SocialHistory.Visible = True

      Case Else
         Hbox_Import_PastHistory.Visible = False
         Hbox_Import_FamilyHistory.Visible = False
         Hbox_Import_SocialHistory.Visible = False

   End Select
   ' Try txtImportDirectory.text = Settings["FImportLegacy/import_dir"]

End

'CLEARING THE DATABASE FOR PREVIOUSLY IMPORTED DATA JUST FOR RICHARD TERRY
' Delete From clin_consult.consult where "summary" ILIKE 'Past History Imported';
' Delete From clin_history.past_history;
' ALTER SEQUENCE clin_history.past_history_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
' Delete From clin_history.team_care_members;
' ALTER SEQUENCE clin_history.team_care_members_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
' Delete From clin_history.care_plan_components;
' ALTER SEQUENCE clin_history.care_plan_components_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
' Delete From clin_history.care_plan_components_due;
' ALTER SEQUENCE clin_history.care_plan_components_due_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
' Delete From clin_history.family_conditions;
' ALTER SEQUENCE clin_history.family_conditions_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
' Delete From clin_history.family_links;
' ALTER SEQUENCE clin_history.family_links_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
' Delete From clin_history.family_members;
' ALTER SEQUENCE clin_history.family_members_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
' Delete From clin_history.lu_exposures;
' ALTER SEQUENCE clin_history.lu_exposures_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
' Delete From clin_history.occupational_history;
' ALTER SEQUENCE clin_history.occupational_history_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
'' delete From clin_history.occupations_exposures;
' ALTER SEQUENCE clin_history.occupations_exposures_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
' delete From clin_history.lu_careplan_components;
' ALTER SEQUENCE clin_history.lu_careplan_components_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
' delete From clin_history.team_care_members;
' ALTER SEQUENCE clin_history.team_care_members_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
' delete From clin_history.social_history;
' ALTER SEQUENCE clin_history.social_history_pk_seq
'     INCREMENT 1 MINVALUE 1
'     MAXVALUE 9223372036854775807 RESTART 1
'     CACHE 1 NO CYCLE;
'
' delete From clin_consult.consult where pk > 25 And pk < 1804;
' delete From clin_consult.progressnotes where pk > 25 And pk < 1804;
' - -1; 3389 = fk_consults both owned by test_patient
' - -2; 48015
'
' - - Select * From clin_consult.consult where pk = 127
' - - Select distinct(fk_consult) From clin_history.past_history
'== == == == == == == == == == == == == == == == == == == == == == ==
'THE OLD MEDREC.FRM
''===================================================================
' VERSION 5.00
' Object = "{1BE65FA0-CBF9-11D2-BBC7-00104B9E0792}#2.0#0"; "SSTBARS2.OCX"
' Object = "{0BA686C6-F7D3-101A-993E-0000C0EF6F5E}#2.0#0"; "THREED20.OCX"
' Object = "{00028CDA-0000-0000-0000-000000000046}#6.0#0"; "TDBG6.OCX"
' Object = "{625E24A3-B09D-101D-85F5-6EBA1EE93AF4}#3.3#0"; "INICON32.OCX"
' Object = "{3B7C8863-D78F-101B-B9B5-04021C009402}#1.2#0"; "RICHTX32.OCX"
' Object = "{00025600-0000-0000-C000-000000000046}#5.2#0"; "CRYSTL32.OCX"
' Object = "{0A45DB48-BD0D-11D2-8D14-00104B9E072A}#2.0#0"; "SSTABS2.OCX"
' Object = "{F9043C88-F6F2-101A-A3C9-08002B2F49FB}#1.2#0"; "COMDLG32.OCX"
' Object = "{54F3CD43-5ADA-11D2-81EB-006008A2E49D}#1.0#0"; "PEGO32A.OCX"
' Object = "{97F4CED3-9103-11CE-8385-524153480001}#2.1#0"; "VSPELL32.OCX"
' Object = "{913B26E0-F514-11D3-A6CD-002078188915}#1.0#0"; "CONTACTS RESIZER.OCX"
' Begin VB.Form frmMain
'    Caption         =   "DrsDesk Medical Records"
'    ClientHeight    =   6420
'    ClientLeft      =   636
'    ClientTop       =   1836
'    ClientWidth     =   9492
'    Icon            =   "MedRec.frx":0000
'    KeyPreview      =   -1  'True
'    LinkTopic       =   "Form1"
'    ScaleHeight     =   6420
'    ScaleWidth      =   9492
'    Begin VB.Timer Timer1
'       Interval        =   10000
'       Left            =   4884
'       Top             =   6012
'    End
'    Begin VB.CommandButton Command4
'       Caption         =   "Command4"
'       Height          =   300
'       Left            =   8424
'       TabIndex        =   20
'       TabStop         =   0   'False
'       Top             =   2580
'       Visible         =   0   'False
'       Width           =   1068
'    End
'    Begin VB.PictureBox Picture1
'       Align           =   1  'Align Top
'       Appearance      =   0  'Flat
'       BackColor       =   &H00C0C0C0&
'       BorderStyle     =   0  'None
'       FillColor       =   &H00C0C0C0&
'       FillStyle       =   0  'Solid
'       ForeColor       =   &H80000008&
'       Height          =   36
'       Index           =   2
'       Left            =   0
'       ScaleHeight     =   36
'       ScaleWidth      =   9492
'       TabIndex        =   0
'       Top             =   0
'       Width           =   9492
'    End
'    Begin VB.PictureBox Picture5
'       Appearance      =   0  'Flat
'       BackColor       =   &H00E0E0E0&
'       ForeColor       =   &H80000008&
'       Height          =   5484
'       Left            =   1500
'       ScaleHeight     =   5460
'       ScaleWidth      =   5712
'       TabIndex        =   4
'       Top             =   6700
'       Visible         =   0   'False
'       Width           =   5736
'       Begin PEGOALib.Pegoa Pego1
'          Height          =   324
'          Left            =   5712
'          TabIndex        =   26
'          Top             =   468
'          Width           =   588
'          _Version        =   65536
'          _ExtentX        =   1037
'          _ExtentY        =   572
'          _StockProps     =   96
'          _AllProps       =   "MedRec.frx":030A
'       End
'       Begin VB.CommandButton Command2
'          Caption         =   "&Close"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   180
'          Index           =   4
'          Left            =   4524
'          Style           =   1  'Graphical
'          TabIndex        =   10
'          TabStop         =   0   'False
'          Top             =   5256
'          Width           =   648
'       End
'       Begin VB.CommandButton Command2
'          Caption         =   "&Print Referral"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   180
'          Index           =   3
'          Left            =   132
'          Style           =   1  'Graphical
'          TabIndex        =   9
'          TabStop         =   0   'False
'          Top             =   5256
'          Width           =   1032
'       End
'       Begin Threed.SSPanel sspanel2
'          Height          =   204
'          Index           =   5
'          Left            =   -24
'          TabIndex        =   5
'          Top             =   0
'          Width           =   5820
'          _ExtentX        =   10266
'          _ExtentY        =   360
'          _Version        =   131073
'          ForeColor       =   16777215
'          BackColor       =   16761024
'          BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851}
'             Name            =   "MS Sans Serif"
'             Size            =   7.8
'             Charset         =   0
'             Weight          =   700
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          BevelOuter      =   0
'          Begin VB.TextBox Text7
'             Appearance      =   0  'Flat
'             BorderStyle     =   0  'None
'             Height          =   156
'             Left            =   2808
'             TabIndex        =   12
'             Top             =   36
'             Visible         =   0   'False
'             Width           =   996
'          End
'          Begin VB.Label Label1
'             Appearance      =   0  'Flat
'             AutoSize        =   -1  'True
'             BackColor       =   &H008080FF&
'             Caption         =   "Pregnancy details"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H0000FFFF&
'             Height          =   144
'             Left            =   4272
'             MouseIcon       =   "MedRec.frx":1148
'             MousePointer    =   99  'Custom
'             TabIndex        =   8
'             Top             =   36
'             Visible         =   0   'False
'             Width           =   1212
'          End
'          Begin VB.Label Label4
'             Appearance      =   0  'Flat
'             AutoSize        =   -1  'True
'             BackColor       =   &H008080FF&
'             BeginProperty Font
'                Name            =   "Verdana"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H0000FFFF&
'             Height          =   144
'             Left            =   120
'             TabIndex        =   6
'             Top             =   48
'             Width           =   36
'          End
'       End
'       Begin RichTextLib.RichTextBox RichTextBox1
'          Height          =   5016
'          Index           =   1
'          Left            =   0
'          TabIndex        =   7
'          TabStop         =   0   'False
'          Top             =   204
'          Width           =   5736
'          _ExtentX        =   10118
'          _ExtentY        =   8848
'          _Version        =   393217
'          ScrollBars      =   2
'          Appearance      =   0
'          TextRTF         =   $"MedRec.frx":158A
'          BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851}
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'       End
'       Begin VB.Image Image1
'          Height          =   1104
'          Left            =   2736
'          Top             =   252
'          Width           =   3312
'       End
'       Begin VB.Label Label5
'          Alignment       =   2  'Center
'          Appearance      =   0  'Flat
'          BackColor       =   &H00C0C0C0&
'          Caption         =   "Mims July-August 2000"
'          BeginProperty Font
'             Name            =   "Verdana"
'             Size            =   7.8
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          ForeColor       =   &H80000008&
'          Height          =   180
'          Left            =   0
'          TabIndex        =   11
'          Top             =   5256
'          Width           =   5712
'       End
'    End
'    Begin RichTextLib.RichTextBox RichTextBox1
'       Height          =   324
'       Index           =   0
'       Left            =   2652
'       TabIndex        =   1
'       TabStop         =   0   'False
'       Top             =   4164
'       Visible         =   0   'False
'       Width           =   2484
'       _ExtentX        =   4382
'       _ExtentY        =   572
'       _Version        =   393217
'       ScrollBars      =   2
'       Appearance      =   0
'       TextRTF         =   $"MedRec.frx":16BB
'       BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851}
'          Name            =   "Verdana"
'          Size            =   7.8
'          Charset         =   0
'          Weight          =   400
'          Underline       =   0   'False
'          Italic          =   0   'False
'          Strikethrough   =   0   'False
'       EndProperty
'    End
'    Begin MSComDlg.CommonDialog CommonDialog1
'       Left            =   1050
'       Top             =   5748
'       _ExtentX        =   699
'       _ExtentY        =   699
'       _Version        =   393216
'    End
'    Begin Contacts.Resizer Resizer1
'       Height          =   300
'       Left            =   2424
'       TabIndex        =   28
'       Top             =   5760
'       Width           =   288
'       _ExtentX        =   508
'       _ExtentY        =   529
'       ResizeFont      =   -1  'True
'    End
'    Begin ActiveTabs.SSActiveTabs SSActiveTabs1
'       Height          =   2616
'       Left            =   5988
'       TabIndex        =   21
'       TabStop         =   0   'False
'       Top             =   72
'       Visible         =   0   'False
'       Width           =   3432
'       _ExtentX        =   6054
'       _ExtentY        =   4614
'       _Version        =   131083
'       TabCount        =   7
'       TabMinWidth     =   396
'       TagVariant      =   ""
'       Tabs            =   "MedRec.frx":17EC
'       Images          =   "MedRec.frx":19A8
'       Begin ActiveTabs.SSActiveTabPanel SSActiveTabPanel1
'          Height          =   2280
'          Left            =   24
'          TabIndex        =   22
'          Top             =   312
'          Width           =   3384
'          _ExtentX        =   5969
'          _ExtentY        =   4022
'          _Version        =   131083
'          TabGuid         =   "MedRec.frx":30F8
'          Begin TrueDBGrid60.TDBGrid TDBGrid1
'             Bindings        =   "MedRec.frx":3120
'             Height          =   2148
'             Index           =   0
'             Left            =   72
'             OleObjectBlob   =   "MedRec.frx":3130
'             TabIndex        =   126
'             TabStop         =   0   'False
'             Top             =   72
'             Width           =   3360
'          End
'          Begin VB.Line Line1
'             BorderColor     =   &H00808080&
'             Index           =   8
'             Visible         =   0   'False
'             X1              =   0
'             X2              =   0
'             Y1              =   0
'             Y2              =   684
'          End
'          Begin VB.Line Line1
'             BorderColor     =   &H00808080&
'             Index           =   7
'             Visible         =   0   'False
'             X1              =   0
'             X2              =   0
'             Y1              =   0
'             Y2              =   684
'          End
'       End
'    End
'    Begin VB.Data Data4
'       Caption         =   "Data4"
'       Connect         =   "Access"
'       DatabaseName    =   ""
'       DefaultCursorType=   0  'DefaultCursor
'       DefaultType     =   2  'UseODBC
'       Exclusive       =   0   'False
'       Height          =   324
'       Left            =   3312
'       Options         =   0
'       ReadOnly        =   0   'False
'       RecordsetType   =   1  'Dynaset
'       RecordSource    =   ""
'       Top             =   5664
'       Visible         =   0   'False
'       Width           =   1464
'    End
'    Begin VB.CommandButton Command2
'       Caption         =   "&Cancel"
'       BeginProperty Font
'          Name            =   "Small Fonts"
'          Size            =   6.6
'          Charset         =   0
'          Weight          =   400
'          Underline       =   0   'False
'          Italic          =   0   'False
'          Strikethrough   =   0   'False
'       EndProperty
'       Height          =   204
'       Index           =   1
'       Left            =   7260
'       Style           =   1  'Graphical
'       TabIndex        =   25
'       TabStop         =   0   'False
'       Top             =   6108
'       Visible         =   0   'False
'       Width           =   648
'    End
'    Begin VB.CommandButton Command2
'       Caption         =   "&Print"
'       BeginProperty Font
'          Name            =   "Small Fonts"
'          Size            =   6.6
'          Charset         =   0
'          Weight          =   400
'          Underline       =   0   'False
'          Italic          =   0   'False
'          Strikethrough   =   0   'False
'       EndProperty
'       Height          =   204
'       Index           =   2
'       Left            =   5316
'       Style           =   1  'Graphical
'       TabIndex        =   24
'       TabStop         =   0   'False
'       Top             =   5784
'       Visible         =   0   'False
'       Width           =   648
'    End
'    Begin VB.CommandButton Command2
'       Caption         =   "&Ok"
'       BeginProperty Font
'          Name            =   "Small Fonts"
'          Size            =   6.6
'          Charset         =   0
'          Weight          =   400
'          Underline       =   0   'False
'          Italic          =   0   'False
'          Strikethrough   =   0   'False
'       EndProperty
'       Height          =   204
'       Index           =   0
'       Left            =   5568
'       Style           =   1  'Graphical
'       TabIndex        =   23
'       TabStop         =   0   'False
'       Top             =   6096
'       Width           =   336
'    End
'    Begin Crystal.CrystalReport CrystalReport1
'       Left            =   1992
'       Top             =   5748
'       _ExtentX        =   593
'       _ExtentY        =   593
'       _Version        =   348160
'       PrintFileLinesPerPage=   60
'    End
'    Begin VB.Data Data3
'       Caption         =   "Data3"
'       Connect         =   "Access"
'       DatabaseName    =   ""
'       DefaultCursorType=   0  'DefaultCursor
'       DefaultType     =   2  'UseODBC
'       Exclusive       =   0   'False
'       Height          =   276
'       Left            =   3276
'       Options         =   0
'       ReadOnly        =   0   'False
'       RecordsetType   =   1  'Dynaset
'       RecordSource    =   ""
'       Top             =   6144
'       Width           =   1464
'    End
'    Begin VB.PictureBox Picture2
'       BackColor       =   &H8000000C&
'       BorderStyle     =   0  'None
'       Height          =   1188
'       Left            =   6456
'       ScaleHeight     =   1188
'       ScaleWidth      =   2724
'       TabIndex        =   13
'       Top             =   5820
'       Visible         =   0   'False
'       Width           =   2724
'       Begin TrueDBGrid60.TDBGrid TDBGrid2
'          Bindings        =   "MedRec.frx":5B35
'          Height          =   1164
'          Left            =   72
'          OleObjectBlob   =   "MedRec.frx":5B45
'          TabIndex        =   14
'          TabStop         =   0   'False
'          Top             =   180
'          Width           =   2700
'       End
'    End
'    Begin VB.PictureBox Picture1
'       Appearance      =   0  'Flat
'       BackColor       =   &H008080FF&
'       BorderStyle     =   0  'None
'       ForeColor       =   &H80000008&
'       Height          =   432
'       Index           =   5
'       Left            =   6108
'       ScaleHeight     =   432
'       ScaleWidth      =   2544
'       TabIndex        =   3
'       Top             =   5784
'       Visible         =   0   'False
'       Width           =   2544
'    End
'    Begin RichTextLib.RichTextBox rtb2
'       Height          =   828
'       Left            =   1932
'       TabIndex        =   2
'       TabStop         =   0   'False
'       Top             =   4644
'       Visible         =   0   'False
'       Width           =   2712
'       _ExtentX        =   4784
'       _ExtentY        =   1461
'       _Version        =   393217
'       Enabled         =   -1  'True
'       Appearance      =   0
'       TextRTF         =   $"MedRec.frx":8547
'       BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851}
'          Name            =   "MS Sans Serif"
'          Size            =   7.8
'          Charset         =   0
'          Weight          =   400
'          Underline       =   0   'False
'          Italic          =   0   'False
'          Strikethrough   =   0   'False
'       EndProperty
'    End
'    Begin VB.Data Data2
'       Caption         =   "Data2"
'       Connect         =   "Access"
'       DatabaseName    =   ""
'       DefaultCursorType=   0  'DefaultCursor
'       DefaultType     =   2  'UseODBC
'       Exclusive       =   0   'False
'       Height          =   276
'       Left            =   1608
'       Options         =   0
'       ReadOnly        =   0   'False
'       RecordsetType   =   1  'Dynaset
'       RecordSource    =   ""
'       Top             =   6144
'       Visible         =   0   'False
'       Width           =   1464
'    End
'    Begin VB.Timer Timer2
'       Enabled         =   0   'False
'       Interval        =   100
'       Left            =   579
'       Top             =   5748
'    End
'    Begin VB.Data Data1
'       Caption         =   "Data1"
'       Connect         =   "Access"
'       DatabaseName    =   ""
'       DefaultCursorType=   0  'DefaultCursor
'       DefaultType     =   2  'UseODBC
'       Exclusive       =   0   'False
'       Height          =   276
'       Left            =   -60
'       Options         =   0
'       ReadOnly        =   0   'False
'       RecordsetType   =   1  'Dynaset
'       RecordSource    =   ""
'       Top             =   6144
'       Visible         =   0   'False
'       Width           =   1464
'    End
'    Begin IniconLib.Init Init1
'       Left            =   60
'       Top             =   5748
'       _Version        =   196611
'       _ExtentX        =   677
'       _ExtentY        =   677
'       _StockProps     =   0
'       Application     =   ""
'       Parameter       =   ""
'       Value           =   ""
'       Filename        =   ""
'    End
'    Begin VB.PictureBox Picture3
'       Appearance      =   0  'Flat
'       BackColor       =   &H80000005&
'       ForeColor       =   &H80000008&
'       Height          =   5484
'       Left            =   96
'       ScaleHeight     =   5460
'       ScaleWidth      =   5712
'       TabIndex        =   29
'       Top             =   72
'       Visible         =   0   'False
'       Width           =   5736
'       Begin Threed.SSPanel SSPanel4
'          Height          =   5460
'          Left            =   0
'          TabIndex        =   132
'          Top             =   0
'          Visible         =   0   'False
'          Width           =   5700
'          _ExtentX        =   10054
'          _ExtentY        =   9631
'          _Version        =   131073
'          Caption         =   "SSPanel4"
'          Begin VB.Image Image2
'             Height          =   5496
'             Left            =   -12
'             Picture         =   "MedRec.frx":8670
'             Stretch         =   -1  'True
'             Top             =   -12
'             Width           =   5856
'          End
'       End
'       Begin Threed.SSPanel sspanel2
'          Height          =   204
'          Index           =   0
'          Left            =   0
'          TabIndex        =   107
'          Top             =   0
'          Width           =   5712
'          _ExtentX        =   10075
'          _ExtentY        =   360
'          _Version        =   131073
'          ForeColor       =   16777215
'          BackColor       =   16761024
'          BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851}
'             Name            =   "Tahoma"
'             Size            =   7.8
'             Charset         =   0
'             Weight          =   700
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Caption         =   "Social and family disease history"
'          BevelOuter      =   0
'          Begin VB.Label Label8
'             Appearance      =   0  'Flat
'             AutoSize        =   -1  'True
'             BackColor       =   &H80000005&
'             Caption         =   "Label8"
'             BeginProperty Font
'                Name            =   "Verdana"
'                Size            =   7.8
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H80000008&
'             Height          =   192
'             Left            =   4944
'             TabIndex        =   110
'             Top             =   -12
'             Visible         =   0   'False
'             Width           =   504
'          End
'          Begin VB.Label Label3
'             Appearance      =   0  'Flat
'             AutoSize        =   -1  'True
'             BackColor       =   &H008080FF&
'             Caption         =   "P"
'             BeginProperty Font
'                Name            =   "Verdana"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H0000FFFF&
'             Height          =   144
'             Left            =   1116
'             MouseIcon       =   "MedRec.frx":6599A
'             MousePointer    =   99  'Custom
'             TabIndex        =   109
'             Top             =   36
'             Visible         =   0   'False
'             Width           =   96
'          End
'          Begin VB.Label lblMasterHeading
'             Appearance      =   0  'Flat
'             AutoSize        =   -1  'True
'             BackColor       =   &H008080FF&
'             Caption         =   "OVERVIEW"
'             BeginProperty Font
'                Name            =   "Verdana"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H0000FFFF&
'             Height          =   144
'             Left            =   60
'             TabIndex        =   108
'             Top             =   36
'             Width           =   780
'          End
'       End
'       Begin VB.TextBox Text5
'          Appearance      =   0  'Flat
'          BackColor       =   &H008080FF&
'          BorderStyle     =   0  'None
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   700
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          ForeColor       =   &H00C0C000&
'          Height          =   216
'          Left            =   1308
'          TabIndex        =   31
'          Top             =   1092
'          Visible         =   0   'False
'          Width           =   4044
'       End
'       Begin VB.ListBox List1
'          Appearance      =   0  'Flat
'          BackColor       =   &H00FFFFFF&
'          Columns         =   2
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   180
'          Index           =   2
'          IntegralHeight  =   0   'False
'          ItemData        =   "MedRec.frx":65DDC
'          Left            =   2820
'          List            =   "MedRec.frx":65DDE
'          TabIndex        =   42
'          TabStop         =   0   'False
'          Top             =   3384
'          Visible         =   0   'False
'          Width           =   1140
'       End
'       Begin VB.ListBox List2
'          Appearance      =   0  'Flat
'          Columns         =   1
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   168
'          IntegralHeight  =   0   'False
'          Left            =   4032
'          TabIndex        =   37
'          TabStop         =   0   'False
'          Top             =   3708
'          Width           =   1152
'       End
'       Begin VB.ListBox List1
'          Appearance      =   0  'Flat
'          BackColor       =   &H00FFFFFF&
'          Columns         =   2
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   1272
'          Index           =   1
'          IntegralHeight  =   0   'False
'          ItemData        =   "MedRec.frx":65DE0
'          Left            =   1068
'          List            =   "MedRec.frx":65DE2
'          TabIndex        =   100
'          TabStop         =   0   'False
'          Top             =   3720
'          Visible         =   0   'False
'          Width           =   1140
'       End
'       Begin VB.ListBox List1
'          Appearance      =   0  'Flat
'          BackColor       =   &H00FFFFFF&
'          Columns         =   1
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   1116
'          Index           =   0
'          IntegralHeight  =   0   'False
'          ItemData        =   "MedRec.frx":65DE4
'          Left            =   1308
'          List            =   "MedRec.frx":65DE6
'          TabIndex        =   106
'          TabStop         =   0   'False
'          Top             =   3276
'          Visible         =   0   'False
'          Width           =   1128
'       End
'       Begin VB.TextBox Text2
'          Appearance      =   0  'Flat
'          BackColor       =   &H00C0C0FF&
'          BorderStyle     =   0  'None
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          ForeColor       =   &H00808080&
'          Height          =   180
'          Index           =   0
'          Left            =   1608
'          TabIndex        =   105
'          TabStop         =   0   'False
'          Top             =   300
'          Visible         =   0   'False
'          Width           =   456
'       End
'       Begin VB.TextBox Text2
'          Appearance      =   0  'Flat
'          BackColor       =   &H00C0C0FF&
'          BorderStyle     =   0  'None
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   180
'          Index           =   2
'          Left            =   1548
'          TabIndex        =   104
'          TabStop         =   0   'False
'          Top             =   720
'          Visible         =   0   'False
'          Width           =   456
'       End
'       Begin VB.TextBox Text2
'          Appearance      =   0  'Flat
'          BackColor       =   &H00C0C0FF&
'          BorderStyle     =   0  'None
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   180
'          Index           =   3
'          Left            =   3708
'          TabIndex        =   103
'          TabStop         =   0   'False
'          Top             =   768
'          Visible         =   0   'False
'          Width           =   456
'       End
'       Begin VB.TextBox Text2
'          Appearance      =   0  'Flat
'          BackColor       =   &H00C0C0FF&
'          BorderStyle     =   0  'None
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   180
'          Index           =   1
'          Left            =   4932
'          TabIndex        =   102
'          TabStop         =   0   'False
'          Top             =   924
'          Visible         =   0   'False
'          Width           =   456
'       End
'       Begin VB.TextBox Text2
'          Appearance      =   0  'Flat
'          BackColor       =   &H00C0C0FF&
'          BorderStyle     =   0  'None
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   180
'          Index           =   4
'          Left            =   3792
'          TabIndex        =   101
'          TabStop         =   0   'False
'          Top             =   324
'          Visible         =   0   'False
'          Width           =   456
'       End
'       Begin VB.TextBox Text2
'          Appearance      =   0  'Flat
'          BackColor       =   &H00C0C0FF&
'          BorderStyle     =   0  'None
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   180
'          Index           =   5
'          Left            =   4752
'          TabIndex        =   99
'          TabStop         =   0   'False
'          Top             =   336
'          Visible         =   0   'False
'          Width           =   456
'       End
'       Begin VB.PictureBox Picture1
'          Appearance      =   0  'Flat
'          BackColor       =   &H80000005&
'          ForeColor       =   &H80000008&
'          Height          =   216
'          Index           =   3
'          Left            =   228
'          ScaleHeight     =   192
'          ScaleWidth      =   948
'          TabIndex        =   97
'          TabStop         =   0   'False
'          Top             =   792
'          Visible         =   0   'False
'          Width           =   972
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             BackColor       =   &H00FFFFFF&
'             Caption         =   "Problem"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00C0C000&
'             Height          =   336
'             Index           =   23
'             Left            =   84
'             TabIndex        =   98
'             Top             =   0
'             Width           =   744
'          End
'       End
'       Begin VB.PictureBox Picture1
'          Appearance      =   0  'Flat
'          BackColor       =   &H80000005&
'          ForeColor       =   &H80000008&
'          Height          =   1560
'          Index           =   0
'          Left            =   264
'          ScaleHeight     =   1536
'          ScaleWidth      =   912
'          TabIndex        =   85
'          TabStop         =   0   'False
'          Top             =   1176
'          Visible         =   0   'False
'          Width           =   936
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             BackColor       =   &H80000005&
'             Caption         =   "Regular"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H80000008&
'             Height          =   204
'             Index           =   13
'             Left            =   0
'             TabIndex        =   130
'             Top             =   0
'             Visible         =   0   'False
'             Width           =   720
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             BackColor       =   &H80000005&
'             Caption         =   "Regular"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H80000008&
'             Height          =   204
'             Index           =   11
'             Left            =   120
'             TabIndex        =   96
'             Top             =   1128
'             Visible         =   0   'False
'             Width           =   720
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             BackColor       =   &H80000005&
'             Caption         =   "Problem"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H80000008&
'             Height          =   204
'             Index           =   5
'             Left            =   84
'             TabIndex        =   95
'             Top             =   -12
'             Width           =   888
'          End
'          Begin VB.Label Label7
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C00000&
'             Caption         =   "Dr"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6.6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00FFFFFF&
'             Height          =   156
'             Index           =   3
'             Left            =   672
'             TabIndex        =   94
'             Top             =   1368
'             Visible         =   0   'False
'             Width           =   204
'          End
'          Begin VB.Label Label7
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0E0FF&
'             Caption         =   "S8"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6.6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H000000FF&
'             Height          =   156
'             Index           =   2
'             Left            =   456
'             TabIndex        =   93
'             Top             =   1368
'             Visible         =   0   'False
'             Width           =   204
'          End
'          Begin VB.Label Label7
'             Appearance      =   0  'Flat
'             BackColor       =   &H00FFFFC0&
'             Caption         =   "R"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6.6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00FF0000&
'             Height          =   156
'             Index           =   1
'             Left            =   252
'             TabIndex        =   92
'             Top             =   1368
'             Visible         =   0   'False
'             Width           =   204
'          End
'          Begin VB.Label Label7
'             BackColor       =   &H00C0FFFF&
'             Caption         =   "B3"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6.6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00008000&
'             Height          =   156
'             Index           =   0
'             Left            =   24
'             TabIndex        =   91
'             Top             =   1368
'             Visible         =   0   'False
'             Width           =   216
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             BackColor       =   &H80000005&
'             Caption         =   "Regular"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H80000008&
'             Height          =   204
'             Index           =   10
'             Left            =   108
'             TabIndex        =   90
'             Top             =   936
'             Visible         =   0   'False
'             Width           =   720
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             BackColor       =   &H80000005&
'             Caption         =   "Problem"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H80000008&
'             Height          =   204
'             Index           =   9
'             Left            =   120
'             TabIndex        =   89
'             Top             =   732
'             Width           =   888
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             BackColor       =   &H80000005&
'             Caption         =   "Problem"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H80000008&
'             Height          =   204
'             Index           =   8
'             Left            =   132
'             TabIndex        =   88
'             Top             =   576
'             Width           =   888
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             BackColor       =   &H80000005&
'             Caption         =   "Problem"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H80000008&
'             Height          =   204
'             Index           =   7
'             Left            =   108
'             TabIndex        =   87
'             Top             =   372
'             Width           =   888
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             BackColor       =   &H80000005&
'             Caption         =   "Problem"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H80000008&
'             Height          =   204
'             Index           =   6
'             Left            =   156
'             TabIndex        =   86
'             Top             =   180
'             Width           =   888
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             BackColor       =   &H80000005&
'             Caption         =   "Regular"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H80000008&
'             Height          =   204
'             Index           =   12
'             Left            =   132
'             TabIndex        =   127
'             Top             =   1284
'             Visible         =   0   'False
'             Width           =   720
'          End
'       End
'       Begin VB.PictureBox Picture1
'          Appearance      =   0  'Flat
'          BackColor       =   &H80000005&
'          ForeColor       =   &H80000008&
'          Height          =   1560
'          Index           =   1
'          Left            =   1284
'          ScaleHeight     =   1536
'          ScaleWidth      =   4188
'          TabIndex        =   46
'          Top             =   1416
'          Visible         =   0   'False
'          Width           =   4212
'          Begin VB.CheckBox check1
'             Alignment       =   1  'Right Justify
'             BackColor       =   &H00C0C0FF&
'             Caption         =   "check1(7)"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   204
'             Index           =   7
'             Left            =   0
'             TabIndex        =   129
'             TabStop         =   0   'False
'             Tag             =   "Regulation 24 check box"
'             Top             =   0
'             Visible         =   0   'False
'             Width           =   864
'          End
'          Begin VB.TextBox Text3
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0C0FF&
'             BorderStyle     =   0  'None
'             ForeColor       =   &H00808000&
'             Height          =   200
'             Index           =   10
'             Left            =   132
'             TabIndex        =   128
'             Top             =   276
'             Width           =   804
'          End
'          Begin VB.TextBox Text3
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0C0FF&
'             BorderStyle     =   0  'None
'             ForeColor       =   &H00808000&
'             Height          =   200
'             Index           =   9
'             Left            =   924
'             TabIndex        =   79
'             Top             =   12
'             Width           =   336
'          End
'          Begin VB.TextBox Text3
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0C0FF&
'             BorderStyle     =   0  'None
'             ForeColor       =   &H00808000&
'             Height          =   200
'             Index           =   8
'             Left            =   576
'             TabIndex        =   78
'             Top             =   0
'             Width           =   168
'          End
'          Begin VB.TextBox Text3
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0C0FF&
'             BorderStyle     =   0  'None
'             ForeColor       =   &H00808000&
'             Height          =   200
'             Index           =   7
'             Left            =   0
'             TabIndex        =   77
'             Top             =   24
'             Width           =   300
'          End
'          Begin VB.TextBox Text3
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0C0FF&
'             BorderStyle     =   0  'None
'             ForeColor       =   &H00808000&
'             Height          =   200
'             Index           =   6
'             Left            =   1476
'             TabIndex        =   76
'             Top             =   120
'             Width           =   444
'          End
'          Begin VB.CommandButton Command3
'             Caption         =   "Equivalents"
'             Enabled         =   0   'False
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   180
'             Index           =   4
'             Left            =   1884
'             TabIndex        =   75
'             TabStop         =   0   'False
'             Top             =   1380
'             Width           =   864
'          End
'          Begin VB.CheckBox check1
'             Alignment       =   1  'Right Justify
'             BackColor       =   &H00C0C0FF&
'             Caption         =   "check1(6)"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   204
'             Index           =   6
'             Left            =   2148
'             TabIndex        =   74
'             TabStop         =   0   'False
'             Tag             =   "Regulation 24 check box"
'             Top             =   660
'             Visible         =   0   'False
'             Width           =   864
'          End
'          Begin VB.CheckBox check1
'             Alignment       =   1  'Right Justify
'             BackColor       =   &H00C0C0FF&
'             Caption         =   "check1(5)"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   204
'             Index           =   5
'             Left            =   1740
'             TabIndex        =   73
'             TabStop         =   0   'False
'             Tag             =   "Regulation 24 check box"
'             Top             =   888
'             Visible         =   0   'False
'             Width           =   948
'          End
'          Begin VB.CommandButton Command3
'             Caption         =   "Preview"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   180
'             Index           =   3
'             Left            =   948
'             TabIndex        =   72
'             TabStop         =   0   'False
'             Top             =   1344
'             Width           =   864
'          End
'          Begin VB.CheckBox check1
'             Alignment       =   1  'Right Justify
'             BackColor       =   &H00C0C0FF&
'             Caption         =   "check1(4)"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   204
'             Index           =   4
'             Left            =   3084
'             TabIndex        =   71
'             TabStop         =   0   'False
'             Tag             =   "Regulation 24 check box"
'             Top             =   1116
'             Visible         =   0   'False
'             Width           =   948
'          End
'          Begin VB.CheckBox check1
'             Alignment       =   1  'Right Justify
'             BackColor       =   &H00C0C0FF&
'             Caption         =   "check1(3)"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   204
'             Index           =   3
'             Left            =   2292
'             TabIndex        =   70
'             TabStop         =   0   'False
'             Tag             =   "Regulation 24 check box"
'             Top             =   1116
'             Visible         =   0   'False
'             Width           =   948
'          End
'          Begin VB.CheckBox check1
'             Alignment       =   1  'Right Justify
'             BackColor       =   &H00C0C0FF&
'             Caption         =   "check1(2)"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   204
'             Index           =   2
'             Left            =   1296
'             TabIndex        =   69
'             TabStop         =   0   'False
'             Tag             =   "Regulation 24 check box"
'             Top             =   1116
'             Visible         =   0   'False
'             Width           =   948
'          End
'          Begin VB.TextBox Text3
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0C0FF&
'             BorderStyle     =   0  'None
'             ForeColor       =   &H00808000&
'             Height          =   200
'             Index           =   5
'             Left            =   1020
'             TabIndex        =   68
'             Top             =   660
'             Width           =   720
'          End
'          Begin VB.CommandButton Command1
'             Caption         =   ":"
'             Height          =   216
'             Index           =   2
'             Left            =   3984
'             TabIndex        =   67
'             TabStop         =   0   'False
'             Top             =   288
'             Visible         =   0   'False
'             Width           =   120
'          End
'          Begin VB.CommandButton Command1
'             Caption         =   ":"
'             Height          =   216
'             Index           =   0
'             Left            =   3612
'             TabIndex        =   66
'             TabStop         =   0   'False
'             Top             =   276
'             Visible         =   0   'False
'             Width           =   120
'          End
'          Begin VB.CommandButton Command1
'             Caption         =   ":"
'             Height          =   216
'             Index           =   1
'             Left            =   3804
'             TabIndex        =   65
'             TabStop         =   0   'False
'             Top             =   312
'             Visible         =   0   'False
'             Width           =   120
'          End
'          Begin VB.TextBox Text1
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0FFFF&
'             BorderStyle     =   0  'None
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6.6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00800000&
'             Height          =   204
'             Left            =   924
'             TabIndex        =   64
'             TabStop         =   0   'False
'             Top             =   576
'             Visible         =   0   'False
'             Width           =   1440
'          End
'          Begin VB.CheckBox check1
'             Alignment       =   1  'Right Justify
'             BackColor       =   &H00C0C0FF&
'             Caption         =   "Yes"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   156
'             Index           =   1
'             Left            =   -24
'             TabIndex        =   63
'             TabStop         =   0   'False
'             Top             =   912
'             Visible         =   0   'False
'             Width           =   576
'          End
'          Begin VB.CheckBox check1
'             Alignment       =   1  'Right Justify
'             BackColor       =   &H00C0C0FF&
'             Caption         =   "Yes"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   204
'             Index           =   0
'             Left            =   12
'             TabIndex        =   62
'             TabStop         =   0   'False
'             Tag             =   "Regulation 24 check box"
'             Top             =   1104
'             Visible         =   0   'False
'             Width           =   528
'          End
'          Begin VB.CommandButton Command3
'             Caption         =   "New Relation"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   180
'             Index           =   0
'             Left            =   36
'             TabIndex        =   61
'             TabStop         =   0   'False
'             Top             =   1332
'             Width           =   864
'          End
'          Begin VB.TextBox Text3
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0C0FF&
'             BorderStyle     =   0  'None
'             ForeColor       =   &H000000FF&
'             Height          =   200
'             Index           =   4
'             Left            =   1116
'             TabIndex        =   60
'             Top             =   312
'             Width           =   588
'          End
'          Begin VB.OptionButton Option2
'             BackColor       =   &H00FFFFFF&
'             Caption         =   "Soap"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00404040&
'             Height          =   144
'             Index           =   0
'             Left            =   1572
'             TabIndex        =   59
'             TabStop         =   0   'False
'             Top             =   180
'             Width           =   636
'          End
'          Begin VB.OptionButton Option2
'             BackColor       =   &H00FFFFFF&
'             Caption         =   "Review"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00404040&
'             Height          =   144
'             Index           =   5
'             Left            =   3528
'             TabIndex        =   58
'             TabStop         =   0   'False
'             Top             =   36
'             Width           =   636
'          End
'          Begin VB.OptionButton Option2
'             BackColor       =   &H00FFFFFF&
'             Caption         =   "Recall"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00404040&
'             Height          =   144
'             Index           =   4
'             Left            =   2868
'             TabIndex        =   57
'             TabStop         =   0   'False
'             Top             =   36
'             Width           =   588
'          End
'          Begin VB.OptionButton Option2
'             BackColor       =   &H00FFFFFF&
'             Caption         =   "Refer"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00404040&
'             Height          =   144
'             Index           =   3
'             Left            =   2256
'             TabIndex        =   56
'             TabStop         =   0   'False
'             Top             =   36
'             Width           =   552
'          End
'          Begin VB.OptionButton Option2
'             BackColor       =   &H00FFFFFF&
'             Caption         =   "Investigate"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00404040&
'             Height          =   144
'             Index           =   2
'             Left            =   1320
'             TabIndex        =   55
'             TabStop         =   0   'False
'             Top             =   24
'             Width           =   864
'          End
'          Begin VB.OptionButton Option2
'             BackColor       =   &H00FFFFFF&
'             Caption         =   "Script"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00404040&
'             Height          =   144
'             Index           =   1
'             Left            =   696
'             TabIndex        =   54
'             TabStop         =   0   'False
'             Top             =   24
'             Width           =   564
'          End
'          Begin VB.TextBox Text3
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0C0FF&
'             BorderStyle     =   0  'None
'             ForeColor       =   &H00808000&
'             Height          =   200
'             Index           =   0
'             Left            =   1056
'             TabIndex        =   53
'             Top             =   504
'             Width           =   2328
'          End
'          Begin VB.TextBox Text3
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0C0FF&
'             BorderStyle     =   0  'None
'             ForeColor       =   &H000000FF&
'             Height          =   200
'             Index           =   2
'             Left            =   12
'             TabIndex        =   52
'             Top             =   672
'             Width           =   804
'          End
'          Begin VB.TextBox Text3
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0C0FF&
'             BorderStyle     =   0  'None
'             ForeColor       =   &H000000FF&
'             Height          =   200
'             Index           =   3
'             Left            =   708
'             TabIndex        =   51
'             Top             =   900
'             Width           =   792
'          End
'          Begin VB.TextBox Text4
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0FFFF&
'             BorderStyle     =   0  'None
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6.6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00800000&
'             Height          =   204
'             Index           =   0
'             Left            =   1896
'             TabIndex        =   50
'             TabStop         =   0   'False
'             Top             =   384
'             Visible         =   0   'False
'             Width           =   1068
'          End
'          Begin VB.CommandButton Command3
'             Caption         =   "Cancel"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   180
'             Index           =   1
'             Left            =   3564
'             TabIndex        =   49
'             TabStop         =   0   'False
'             Top             =   1332
'             Width           =   564
'          End
'          Begin VB.CommandButton Command3
'             Caption         =   "&Ok"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   180
'             Index           =   2
'             Left            =   3168
'             TabIndex        =   48
'             Top             =   1344
'             Width           =   300
'          End
'          Begin VB.TextBox Text3
'             Appearance      =   0  'Flat
'             BackColor       =   &H00C0C0FF&
'             BorderStyle     =   0  'None
'             ForeColor       =   &H000000FF&
'             Height          =   200
'             Index           =   1
'             Left            =   12
'             TabIndex        =   47
'             Top             =   456
'             Width           =   792
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             AutoSize        =   -1  'True
'             BackColor       =   &H80000005&
'             Caption         =   "Label2(19)"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00800000&
'             Height          =   144
'             Index           =   19
'             Left            =   2280
'             TabIndex        =   131
'             Top             =   192
'             Visible         =   0   'False
'             Width           =   732
'          End
'          Begin VB.Shape ShSpacerEndGap
'             BackColor       =   &H00000080&
'             BackStyle       =   1  'Opaque
'             BorderColor     =   &H00000080&
'             FillColor       =   &H00000080&
'             FillStyle       =   0  'Solid
'             Height          =   200
'             Left            =   4080
'             Top             =   972
'             Visible         =   0   'False
'             Width           =   40
'          End
'          Begin VB.Shape shText3Spacer
'             BorderColor     =   &H000000C0&
'             FillColor       =   &H000000FF&
'             FillStyle       =   0  'Solid
'             Height          =   12
'             Left            =   0
'             Top             =   660
'             Visible         =   0   'False
'             Width           =   708
'          End
'          Begin VB.Shape Shape3
'             FillColor       =   &H000000C0&
'             FillStyle       =   0  'Solid
'             Height          =   204
'             Left            =   4020
'             Top             =   744
'             Visible         =   0   'False
'             Width           =   96
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             AutoSize        =   -1  'True
'             BackColor       =   &H80000005&
'             Caption         =   "Label2(14)"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00800000&
'             Height          =   144
'             Index           =   14
'             Left            =   3084
'             TabIndex        =   84
'             Top             =   252
'             Visible         =   0   'False
'             Width           =   732
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             AutoSize        =   -1  'True
'             BackColor       =   &H80000005&
'             Caption         =   "Label2(18)"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00800000&
'             Height          =   144
'             Index           =   18
'             Left            =   3084
'             TabIndex        =   83
'             Top             =   960
'             Visible         =   0   'False
'             Width           =   732
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             AutoSize        =   -1  'True
'             BackColor       =   &H80000005&
'             Caption         =   "Label2(17)"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00800000&
'             Height          =   144
'             Index           =   17
'             Left            =   2964
'             TabIndex        =   82
'             Top             =   840
'             Visible         =   0   'False
'             Width           =   732
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             AutoSize        =   -1  'True
'             BackColor       =   &H80000005&
'             Caption         =   "Label2(16)"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00800000&
'             Height          =   144
'             Index           =   16
'             Left            =   3060
'             TabIndex        =   81
'             Top             =   672
'             Visible         =   0   'False
'             Width           =   732
'          End
'          Begin VB.Label Label2
'             Appearance      =   0  'Flat
'             AutoSize        =   -1  'True
'             BackColor       =   &H80000005&
'             Caption         =   "label2(15)"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   700
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             ForeColor       =   &H00800000&
'             Height          =   144
'             Index           =   15
'             Left            =   3048
'             TabIndex        =   80
'             Top             =   432
'             Visible         =   0   'False
'             Width           =   684
'          End
'       End
'       Begin VB.OptionButton Option3
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "Reg"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   180
'          Index           =   0
'          Left            =   2856
'          TabIndex        =   45
'          TabStop         =   0   'False
'          Top             =   324
'          Visible         =   0   'False
'          Width           =   480
'       End
'       Begin VB.OptionButton Option3
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "Irreg"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   180
'          Index           =   1
'          Left            =   3408
'          TabIndex        =   44
'          TabStop         =   0   'False
'          Top             =   324
'          Visible         =   0   'False
'          Width           =   480
'       End
'       Begin VB.OptionButton Option3
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "A Fibrillation"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   180
'          Index           =   2
'          Left            =   3960
'          TabIndex        =   43
'          TabStop         =   0   'False
'          Top             =   324
'          Visible         =   0   'False
'          Width           =   900
'       End
'       Begin VB.CheckBox check2
'          Alignment       =   1  'Right Justify
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "Aboriginal"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   132
'          Index           =   0
'          Left            =   684
'          TabIndex        =   41
'          TabStop         =   0   'False
'          Top             =   564
'          Visible         =   0   'False
'          Width           =   816
'       End
'       Begin VB.CheckBox check2
'          Alignment       =   1  'Right Justify
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "TS Islander"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   132
'          Index           =   1
'          Left            =   2700
'          TabIndex        =   40
'          TabStop         =   0   'False
'          Top             =   684
'          Visible         =   0   'False
'          Width           =   912
'       End
'       Begin VB.PictureBox Picture1
'          Appearance      =   0  'Flat
'          BackColor       =   &H80000005&
'          ForeColor       =   &H80000008&
'          Height          =   240
'          Index           =   4
'          Left            =   1296
'          ScaleHeight     =   216
'          ScaleWidth      =   4188
'          TabIndex        =   38
'          TabStop         =   0   'False
'          Top             =   1080
'          Visible         =   0   'False
'          Width           =   4212
'          Begin VB.CommandButton Command1
'             Caption         =   ":"
'             Height          =   228
'             Index           =   3
'             Left            =   4068
'             TabIndex        =   39
'             TabStop         =   0   'False
'             Top             =   -12
'             Width           =   120
'          End
'       End
'       Begin VB.PictureBox Picture4
'          Appearance      =   0  'Flat
'          BackColor       =   &H00E0E0E0&
'          BorderStyle     =   0  'None
'          ForeColor       =   &H80000008&
'          Height          =   192
'          Left            =   2592
'          ScaleHeight     =   192
'          ScaleWidth      =   2736
'          TabIndex        =   32
'          TabStop         =   0   'False
'          Top             =   1056
'          Width           =   2736
'          Begin VB.OptionButton Option4
'             BackColor       =   &H00E0E0E0&
'             Caption         =   "Month"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   180
'             Index           =   3
'             Left            =   1296
'             TabIndex        =   36
'             TabStop         =   0   'False
'             Top             =   24
'             Visible         =   0   'False
'             Width           =   684
'          End
'          Begin VB.OptionButton Option4
'             BackColor       =   &H00E0E0E0&
'             Caption         =   "None"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   180
'             Index           =   2
'             Left            =   2088
'             TabIndex        =   35
'             TabStop         =   0   'False
'             Top             =   24
'             Visible         =   0   'False
'             Width           =   612
'          End
'          Begin VB.OptionButton Option4
'             BackColor       =   &H00E0E0E0&
'             Caption         =   "Day"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   180
'             Index           =   0
'             Left            =   60
'             TabIndex        =   34
'             TabStop         =   0   'False
'             Top             =   24
'             Visible         =   0   'False
'             Width           =   480
'          End
'          Begin VB.OptionButton Option4
'             BackColor       =   &H00E0E0E0&
'             Caption         =   "Week"
'             BeginProperty Font
'                Name            =   "Small Fonts"
'                Size            =   6
'                Charset         =   0
'                Weight          =   400
'                Underline       =   0   'False
'                Italic          =   0   'False
'                Strikethrough   =   0   'False
'             EndProperty
'             Height          =   180
'             Index           =   1
'             Left            =   684
'             TabIndex        =   33
'             TabStop         =   0   'False
'             Top             =   24
'             Visible         =   0   'False
'             Width           =   564
'          End
'       End
'       Begin VB.CheckBox check3
'          Alignment       =   1  'Right Justify
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "Retired"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   132
'          Left            =   156
'          TabIndex        =   30
'          TabStop         =   0   'False
'          Top             =   3396
'          Visible         =   0   'False
'          Width           =   732
'       End
'       Begin Threed.SSPanel SSPanel1
'          Height          =   180
'          Left            =   648
'          TabIndex        =   111
'          Top             =   5256
'          Width           =   5088
'          _ExtentX        =   8975
'          _ExtentY        =   318
'          _Version        =   131073
'          ForeColor       =   255
'          BackColor       =   12632256
'          BevelOuter      =   0
'       End
'       Begin Threed.SSPanel sspanel2
'          Height          =   204
'          Index           =   3
'          Left            =   72
'          TabIndex        =   112
'          Top             =   4824
'          Width           =   5604
'          _ExtentX        =   9885
'          _ExtentY        =   360
'          _Version        =   131073
'          ForeColor       =   16777215
'          BackColor       =   16761024
'          BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851}
'             Name            =   "Tahoma"
'             Size            =   7.8
'             Charset         =   0
'             Weight          =   700
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Caption         =   "Active Problems"
'          BevelOuter      =   0
'       End
'       Begin Threed.SSPanel sspanel2
'          Height          =   204
'          Index           =   1
'          Left            =   -48
'          TabIndex        =   113
'          Top             =   2856
'          Width           =   5604
'          _ExtentX        =   9885
'          _ExtentY        =   360
'          _Version        =   131073
'          ForeColor       =   16777215
'          BackColor       =   16761024
'          BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851}
'             Name            =   "Tahoma"
'             Size            =   7.8
'             Charset         =   0
'             Weight          =   700
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Caption         =   "consultation summary"
'          BevelOuter      =   0
'       End
'       Begin Threed.SSPanel sspanel2
'          Height          =   204
'          Index           =   2
'          Left            =   -12
'          TabIndex        =   114
'          Top             =   4284
'          Width           =   5604
'          _ExtentX        =   9885
'          _ExtentY        =   360
'          _Version        =   131073
'          ForeColor       =   16777215
'          BackColor       =   16761024
'          BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851}
'             Name            =   "Tahoma"
'             Size            =   7.8
'             Charset         =   0
'             Weight          =   700
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Caption         =   "Habits                                                    Immunisations"
'          BevelOuter      =   0
'       End
'       Begin VB.Shape Shape9
'          BorderStyle     =   0  'Transparent
'          FillColor       =   &H00888880&
'          FillStyle       =   0  'Solid
'          Height          =   1584
'          Index           =   0
'          Left            =   108
'          Top             =   984
'          Visible         =   0   'False
'          Width           =   888
'       End
'       Begin VB.Label Label2
'          Appearance      =   0  'Flat
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "Height"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          ForeColor       =   &H00404040&
'          Height          =   180
'          Index           =   1
'          Left            =   2208
'          TabIndex        =   121
'          Top             =   312
'          Visible         =   0   'False
'          Width           =   408
'       End
'       Begin VB.Label Label2
'          Appearance      =   0  'Flat
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "Pulse"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          ForeColor       =   &H00404040&
'          Height          =   156
'          Index           =   3
'          Left            =   2160
'          TabIndex        =   124
'          Top             =   996
'          Visible         =   0   'False
'          Width           =   360
'       End
'       Begin VB.Label Label2
'          Appearance      =   0  'Flat
'          BackColor       =   &H00FFFFFF&
'          Caption         =   "label2(22)"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          ForeColor       =   &H00C0C000&
'          Height          =   204
'          Index           =   22
'          Left            =   4152
'          TabIndex        =   116
'          Top             =   648
'          Width           =   888
'       End
'       Begin VB.Label Label2
'          Appearance      =   0  'Flat
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "Label2(21)"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          ForeColor       =   &H00404040&
'          Height          =   156
'          Index           =   21
'          Left            =   780
'          TabIndex        =   115
'          Top             =   780
'          Visible         =   0   'False
'          Width           =   660
'       End
'       Begin VB.Label Label2
'          Appearance      =   0  'Flat
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "Weight"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          ForeColor       =   &H00404040&
'          Height          =   180
'          Index           =   0
'          Left            =   1020
'          TabIndex        =   120
'          Top             =   312
'          Visible         =   0   'False
'          Width           =   456
'       End
'       Begin VB.Label lblHabits
'          Caption         =   "Label1"
'          Height          =   168
'          Left            =   24
'          TabIndex        =   118
'          Top             =   552
'          Width           =   744
'       End
'       Begin VB.Line LineTopBorder
'          BorderColor     =   &H00808080&
'          Visible         =   0   'False
'          X1              =   36
'          X2              =   36
'          Y1              =   276
'          Y2              =   660
'       End
'       Begin VB.Line LineLeftBorder
'          BorderColor     =   &H00808080&
'          Visible         =   0   'False
'          X1              =   2232
'          X2              =   2040
'          Y1              =   564
'          Y2              =   948
'       End
'       Begin VB.Shape shText2Measure
'          FillColor       =   &H000000FF&
'          FillStyle       =   0  'Solid
'          Height          =   180
'          Left            =   1500
'          Top             =   252
'          Visible         =   0   'False
'          Width           =   72
'       End
'       Begin VB.Line Line2
'          BorderColor     =   &H00FF8080&
'          X1              =   0
'          X2              =   5736
'          Y1              =   204
'          Y2              =   204
'       End
'       Begin VB.Shape Shape2
'          BackColor       =   &H00404040&
'          BackStyle       =   1  'Opaque
'          BorderColor     =   &H00E0E0E0&
'          BorderStyle     =   0  'Transparent
'          FillColor       =   &H00404040&
'          FillStyle       =   0  'Solid
'          Height          =   24
'          Index           =   4
'          Left            =   36
'          Top             =   456
'          Visible         =   0   'False
'          Width           =   5592
'       End
'       Begin VB.Label Label2
'          Appearance      =   0  'Flat
'          AutoSize        =   -1  'True
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "BP"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          ForeColor       =   &H00404040&
'          Height          =   156
'          Index           =   4
'          Left            =   1032
'          TabIndex        =   125
'          Top             =   564
'          Visible         =   0   'False
'          Width           =   192
'       End
'       Begin VB.Label LabelAlerts
'          Appearance      =   0  'Flat
'          BackColor       =   &H00C0C0C0&
'          Caption         =   " Alerts"
'          ForeColor       =   &H80000008&
'          Height          =   180
'          Left            =   36
'          TabIndex        =   123
'          Top             =   5256
'          Width           =   516
'       End
'       Begin VB.Label Label2
'          Appearance      =   0  'Flat
'          AutoSize        =   -1  'True
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "BMI"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          ForeColor       =   &H00404040&
'          Height          =   180
'          Index           =   2
'          Left            =   3312
'          TabIndex        =   122
'          Top             =   324
'          Visible         =   0   'False
'          Width           =   252
'       End
'       Begin VB.Label lblMeasure
'          AutoSize        =   -1  'True
'          Caption         =   "measure"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          Height          =   156
'          Left            =   396
'          TabIndex        =   119
'          Top             =   252
'          Visible         =   0   'False
'          Width           =   540
'       End
'       Begin VB.Shape Shape2
'          BorderColor     =   &H00E0E0E0&
'          FillColor       =   &H00E0E0E0&
'          FillStyle       =   0  'Solid
'          Height          =   252
'          Index           =   8
'          Left            =   0
'          Top             =   5208
'          Width           =   5712
'       End
'       Begin VB.Shape Shape9
'          BorderStyle     =   0  'Transparent
'          FillColor       =   &H00888880&
'          FillStyle       =   0  'Solid
'          Height          =   1584
'          Index           =   1
'          Left            =   1908
'          Top             =   3228
'          Visible         =   0   'False
'          Width           =   4200
'       End
'       Begin VB.Label Label2
'          Appearance      =   0  'Flat
'          BackColor       =   &H00E0E0E0&
'          Caption         =   "label2(20)"
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          ForeColor       =   &H00404040&
'          Height          =   156
'          Index           =   20
'          Left            =   2544
'          TabIndex        =   117
'          Top             =   840
'          Visible         =   0   'False
'          Width           =   612
'       End
'       Begin VB.Shape Shape1
'          BackColor       =   &H00E0E0E0&
'          BackStyle       =   1  'Opaque
'          BorderColor     =   &H00E0E0E0&
'          BorderStyle     =   0  'Transparent
'          Height          =   2568
'          Left            =   288
'          Top             =   1344
'          Width           =   5592
'       End
'    End
'    Begin Threed.SSPanel SSPanel3
'       Height          =   2784
'       Index           =   1
'       Left            =   5988
'       TabIndex        =   15
'       Top             =   2760
'       Width           =   3432
'       _ExtentX        =   6054
'       _ExtentY        =   4911
'       _Version        =   131073
'       BevelWidth      =   2
'       Begin TrueDBGrid60.TDBGrid TDBGrid1
'          Bindings        =   "MedRec.frx":65DE8
'          Height          =   1296
'          Index           =   1
'          Left            =   72
'          OleObjectBlob   =   "MedRec.frx":65DF8
'          TabIndex        =   17
'          TabStop         =   0   'False
'          Top             =   1440
'          Visible         =   0   'False
'          Width           =   3276
'       End
'       Begin TrueDBGrid60.TDBGrid TDBGrid1
'          Bindings        =   "MedRec.frx":695C9
'          Height          =   840
'          Index           =   2
'          Left            =   72
'          OleObjectBlob   =   "MedRec.frx":695D9
'          TabIndex        =   27
'          TabStop         =   0   'False
'          Top             =   408
'          Width           =   3276
'       End
'       Begin VB.TextBox Text6
'          Appearance      =   0  'Flat
'          BackColor       =   &H00FFFFFF&
'          BorderStyle     =   0  'None
'          BeginProperty Font
'             Name            =   "Small Fonts"
'             Size            =   6.6
'             Charset         =   0
'             Weight          =   400
'             Underline       =   0   'False
'             Italic          =   0   'False
'             Strikethrough   =   0   'False
'          EndProperty
'          ForeColor       =   &H000000FF&
'          Height          =   180
'          Left            =   72
'          TabIndex        =   16
'          TabStop         =   0   'False
'          Top             =   204
'          Width           =   3276
'       End
'       Begin VB.Label Label6
'          Alignment       =   2  'Center
'          Caption         =   "Label6"
'          Height          =   192
'          Left            =   72
'          TabIndex        =   19
'          Top             =   1248
'          Visible         =   0   'False
'          Width           =   3276
'       End
'       Begin VB.Label Label9
'          Alignment       =   2  'Center
'          Caption         =   "Scratch Pad"
'          ForeColor       =   &H00800000&
'          Height          =   180
'          Index           =   1
'          Left            =   72
'          TabIndex        =   18
'          Top             =   24
'          Width           =   3276
'       End
'    End
'    Begin ActiveToolBars.SSActiveToolBars SSActiveToolBars1
'       Left            =   0
'       Top             =   0
'       _ExtentX        =   572
'       _ExtentY        =   572
'       _Version        =   131083
'       ToolBarsCount   =   2
'       ToolsCount      =   175
'       ShowShortcutsInToolTips=   -1  'True
'       Tools           =   "MedRec.frx":6BA3E
'       ToolBars        =   "MedRec.frx":A6C42
'    End
'    Begin VB.Shape Shape_BottomRightHeight
'       FillColor       =   &H000000FF&
'       FillStyle       =   0  'Solid
'       Height          =   2784
'       Left            =   5928
'       Top             =   2760
'       Visible         =   0   'False
'       Width           =   60
'    End
'    Begin VB.Shape Shape_rightwidth
'       FillColor       =   &H000000C0&
'       FillStyle       =   0  'Solid
'       Height          =   60
'       Left            =   5988
'       Top             =   2664
'       Visible         =   0   'False
'       Width           =   3432
'    End
'    Begin VB.Shape Shape_TopRightHeight
'       FillColor       =   &H000000FF&
'       FillStyle       =   0  'Solid
'       Height          =   2616
'       Left            =   5928
'       Top             =   72
'       Visible         =   0   'False
'       Width           =   60
'    End
'    Begin VB.Shape Shape_MainHeight
'       FillColor       =   &H000000FF&
'       FillStyle       =   0  'Solid
'       Height          =   5484
'       Left            =   36
'       Top             =   72
'       Visible         =   0   'False
'       Width           =   72
'    End
'    Begin VB.Shape Shape_MainWidth
'       FillColor       =   &H000000FF&
'       FillStyle       =   0  'Solid
'       Height          =   48
'       Left            =   96
'       Top             =   24
'       Visible         =   0   'False
'       Width           =   5736
'    End
'    Begin VspelocxLib.VSSpell VSSpell1
'       Left            =   1581
'       Top             =   5748
'       _Version        =   131073
'       AutoPopup       =   -1  'True
'       AutoReplace     =   -1  'True
'       AutoSuggest     =   -1  'True
'       BreakWordCount  =   0
'       CacheSize       =   0
'       ErrorOffset     =   32350
'       IgnoreFullCaps  =   0   'False
'       IgnorePartialNumbers=   0   'False
'       MaxSuggestions  =   10
'       MultiLine       =   -1  'True
'       CustomDictionary=   ""
'       StandardDictionary=   ""
'       SuggestionsLimit=   1500
'       AllowJoinedWords=   0   'False
'       DialogLeft      =   0
'       DialogTop       =   0
'       ReplaceRecheck  =   -1  'True
'       DialogBgColor   =   12632256
'       WordMisspelledTitle=   ""
'       OptionsTitle    =   ""
'       ErrorTitle      =   ""
'       WordMisspelledHelpFile=   "vspeller.hlp"
'       OptionsHelpFile =   "vspeller.hlp"
'    End
'    Begin VB.Line Line1
'       BorderColor     =   &H00808080&
'       Index           =   2
'       Visible         =   0   'False
'       X1              =   24
'       X2              =   24
'       Y1              =   48
'       Y2              =   732
'    End
'    Begin VB.Shape Shape2
'       BackColor       =   &H00808080&
'       BackStyle       =   1  'Opaque
'       BorderStyle     =   0  'Transparent
'       Height          =   5496
'       Index           =   6
'       Left            =   144
'       Top             =   156
'       Width           =   5640
'    End
'    Begin VB.Shape Shape2
'       BackColor       =   &H00808080&
'       BackStyle       =   1  'Opaque
'       BorderStyle     =   0  'Transparent
'       Height          =   5496
'       Index           =   7
'       Left            =   5904
'       Top             =   144
'       Width           =   3528
'    End
' End
' Attribute VB_Name = "frmMain"
' Attribute VB_GlobalNameSpace = False
' Attribute VB_Creatable = False
' Attribute VB_PredeclaredId = True
' Attribute VB_Exposed = False
' Option Explicit
' Dim ContactsDb As Database
' Dim iReferrals_Categories_Alone As Integer
' '-----------------------------------------------------------
' 'Area on the top of the central display containing dates etc
' '-----------------------------------------------------------
' Const cTheDate = 2
' '---------
' 'Edit Area
' '---------
' Const cButtonCancel = 1
' Const cButtonAccept = 2
' '-------------------------------------------
' 'Variables for input text boxes in edit area
' '-------------------------------------------
' Const cReferrals_Person = 0
' Const cReferrals_Org_name = 1
' Const cReferrals_Street1 = 2
' Const cReferrals_Street2 = 3
' Const cReferrals_Street3 = 4
' Const cReferrals_Suburb = 5
' Const cReferrals_ReasonFor = 6
' Const cReferrals_Person_Firstname = 6
' Const cReferrals_Org_HeadOffice = 7
' Const cReferrals_Phone = 7
' Const cReferrals_Fax = 8
' Const cReferrals_email = 9
' Const cReferrals_Postcode = 10
' '---------------
' 'Request section
' '---------------
' Const cRequest_Type = 0
' Const cRequest_Company = 1
' Const cRequest_Street123 = 2
' Const cREquest_Suburb = 3
' Const cRequest_request = 4
' Const cRequest_notes = 5
' Const cRequest_Medications = 6
' Const cRequest_CopyTo = 7 'reason for ordering
' Const cRequest_ProgressNote = 8
' Const cRequest_Phone = 9
'
' Dim SourceControl As Control
'
' Dim iTGBGrid2_HasFocus As Boolean
' Const cTxt_FHRelativeName = 0
' Const cTxt_FHRelationship As Byte = 1
' Const cTxt_FHDisease As Byte = 2
' Const cTxt_FHComment As Byte = 3
' Const cTxt_FHAgeOnset As Byte = 4
' Const cTxt_FHDiedOfThis As Byte = 5
' Const cTxt_FHAgeDeath As Byte = 6
' Const cTxt_FHDOB  As Byte = 7
' Const cTxt_Scrpt_For = 5
' Const cTxt_Scrpt_Inst = 4
' Const cTxt_PHCondition As Byte = 0
' Const cTxt_PHComment As Byte = 1
' Dim cAllowOneTermOnly As Boolean
' Dim iKeepLRHW(0 To 5) As Integer  '0 = top 1 = left 2 = height 3 = width
'                                   '4 = tdbgrid1(0).width
'                                    '5 = tdbgrid1(0).height
' Dim bUseRecordset  As Boolean
' Dim iEditScratchPad As Integer
' Dim iGettingHabits As Integer
' Dim gtScript_ItemtoPrint() As tScript_Item
' Const cGrID_Image_Authorities = 0
' Const cGrID_Image_Medications = 1
' Const cGrID_Image_Equivalents = 2
' Const cGrID_Image_Patients = 3
' Const cGrID_Image_RestrictedDrug = 4
' Const cGrID_Image_indications = 5
' Const cGrID_Image_Letters = 6
' Const cGrID_Image_Measurements = 7
' Const cGrID_Image_AvailableGraphs = 8
' Const cGrID_Image_Description = 9
' Const cGrID_Image_ProblemList = 10
' Const cGrID_Image_Immunisation_Schedules = 11
' Const CGrID_Image_Vaccines = 12
' Const cGrID_Image_Reviews = 13
' Const cGrID_Image_FH_Relationships = 14
' Const cGrID_Image_Brands = 15
' Const cGrID_Image_Packs = 16
' Const cGrID_Image_Instructions = 17
' Const cGrID_Image_prescribed_For = 18
' Const cGrID_Image_Suburbs = 19
' Const cGrID_Image_Requests = 20
' Const cGrID_Image_Referral_Reasons = 21
' Const cGrID_Image_Clinics = 22
' Const cGrID_Image_Countries = 23
' Const cGrID_Image_languages = 24
' Const cGrID_Image_Occupations = 25
' Const cGrID_Image_FH_Condition = 26
' Const cGrID_Image_None = -1
' Const cGrID_Image_PastCondition = 27
' Const cGrID_Image_Allergy_Drug = 28
' Const cGrID_image_Allergy_Reaction = 29
' Const cGrID_Image_DrugClasses = 30
' Const cGrID_Image_RecallReason = 31
' Const cGrID_Image_Requests_notes = 33
' Const cGrID_Image_Organisations = 34
' Const cGrID_Image_persons = 35
' Const cGrID_Image_Doctors = 36
' Const cGrID_Recall_Methods = 37
' Const cGrID_REcall_lengths = 38
' Const cGrID_Image_ScratchPad = 44
' Const cGrID_Requests_copyTo = 40
' Const cGrID_Requests_Provider_Addresses = 41
' Const cGrID_Requests_Provider_types = 42
' Const cGrID_Image_Requests_Providers_Names = 43
' Const cGrID_Image_Addresses = 44
' Const cGrID_Image_DrugProducts = 45
' Const cGrID_Image_Referrals_PersonCategory = 46
' Const cGrID_Image_Recalls = 47
' Const cGrID_Image_GenericDrugs = 48
' Const cGrID_Image_Requests_Providers_Suburbs = 49
'
'
' '---------------------------------
'     'Dimensions for script printing
'     '---------------------------------
'
'     Dim whoseCopy(0 To 1)
'     Dim ix As Integer
'     Dim sMsg As String
'     Dim sMsg1 As String
'     Dim iNextScriptNo As Integer
'     Dim iInd As Integer
'     Dim iInd1 As Integer
'     Dim xval As Integer
'     Dim yval As Integer
'     Dim PrintDoctorY As Integer
'     Dim PrintDoctorX  As Integer
'     Dim PrintPrescriberNoX As Integer
'     Dim PrintPrescriberNoY As Integer
'     Dim PrintScriptNoY As Integer
'     Dim PrintScriptNoX As Integer
'     Dim PrintPharmBenefitNoY As Integer
'     Dim PrintPharmBenefitNoX As Integer
'     Dim PrintSaftNetNoY As Integer
'     Dim PrintSaftNetNoX As Integer
'     Dim PrintPensConsNoY As Integer
'     Dim PrintPensConsNoX As Integer
'     Dim PrintAddressY As Integer
'     Dim PrintAddressX As Integer
'     Dim PrintDateY As Integer
'     Dim PrintDateX As Integer
'     Dim PrintBrandSubstY As Integer
'     Dim PrintBrandSubstX As Integer
'     Dim PrintDrugsY As Integer
'     Dim PrintDrugsX As Integer
'     Dim PrintAuthorityNoY As Integer
'     Dim PrintAuthorityDetailsX As Integer
'     Dim PrintAuthorityDetailsY As Integer
'     Dim PageFooterY As Integer
'     Dim PageGap As Integer
'     Dim PrintPoisonsDetailsX As Integer
'     Dim PrintPoisonsDetailsY As Integer
'
' Dim iProblemChosen As Integer
'
' '---------------------------------------------------
' 'Used in the richtextbox1(1) in central display area
' '---------------------------------------------------
' Dim iAgeisMonths As Integer
' Dim iCentralDisplay As Integer
' Const cCentralDisplay_None = 0
' Const cCentralDisplay_ExistingLetter = 1
' Const cCentralDisplay_PreviewLetter = 3
' Const cCentralDisplay_PregnancyCategory = 5
' Const cCentralDisplay_Interactions = 6
' Const cCentralDisplay_Demographics = 7
' Const cCentralDisplay_PI = 7
' Dim iSpcPos As Integer
' Dim sReferralText As String  ' -the bit the doctor writes specifically
' Const cEdit_AddText = 0
' Const cEdit_Preview = 3
' Const cEdit_cancel = 1
' Const cEdit_Accept = 2
'
' Dim iArrayPosition As Integer ' position within an array
' Dim iEditing As Integer
' Dim sTempText As String
' Dim intAge_in_Months As Integer
' Dim iEquiv_count As Integer
' 'Constants for text boxes in editing area
' 'Const cRequest_ProviderType = 0
' Const cRequest_Name = 1
' 'Const cRequest_notes = 2
' 'Const cRequest_Medications = 3
'     Dim sRequestNames() As String
'
'     Dim sProfile_REquestNames(0 To 10) As String
'     Dim lProfile_RequestIds(0 To 10) As Long
'     Dim lLastRequestID As Long 'ID of last request
'
'
' Dim lProviderAddressID As Long     'address of current company provider
' '--------------------------------------------------
' 'Constants to make code for textboxes more readable
' '--------------------------------------------------
' Dim vArray(0 To 10) 'multipurpose array
' Dim iVaccine_ID As Integer
' Dim iSchedule_ID As Integer
' Dim iLive_Vaccine As Integer
' Dim sVaccine_Trade_Name As String
' Dim svaccine_Formulation As String
' Dim sVaccine_Abbreviation As String
'
' Dim iRelationship_ID As Integer 'used in family disease history
' Dim sRelationship_Name As String
' Dim ipastHistory_PreExistingCondition As Integer
' Dim lozcode As Long
' Public iConsultIDSaved As Integer
' Const csection_None = -1
' Const cSection_Overview = 0
' Const cSection_PastHistory = 2
' Const cSection_SOAP = 3
' Const cSection_FamilyandSocialHistory = 5
' Const cSection_ProgressNotes = 6
' Const cSection_NewNotes = 7
' Const cSection_Immunisations = 8
' Const cSection_Referrals = 9
' Const cSection_Recalls = 10
' Const cSection_Script = 11
' Const cSection_Allergies = 12
' Const cSection_requests = 13
' Const cSection_Reports = 14
' Const cSection_Measure = 15
' Const cSection_Demographics = 16
'
' Dim iCurrentSection As Integer  'either summary, soap,etc
' '------------------
' 'Prescribing things
' '------------------
' Dim ucfField1 As Field
' Dim ucfField_Active As Field
' Dim ucfField_Active_units As Field
' Dim ucfField_Per_volume As Field
' Dim ucfField_Per_vol_units As Field
' Dim ucfField_Unit_volume As Field
' Dim ucfField_Unit_vol_units As Field
' Dim ucfField_Units_per_pack As Field
' Dim ucfField_No_of_Packs As Field
' Dim ucfField_pbs As Field
' Dim ucfField_pbs_price As Field
' Dim ucfField_bpp As Field
' Dim ucfField_price As Field
' Dim ucfField_Quantity As Field
' Dim ucfField_Repeats As Field
' Dim Data1Rsclone As Recordset
' Dim Data2RsClone As Recordset
' Dim Data3RsClone As Recordset
' Dim ucfField_Product As Field
' Dim ucfField_Brand As Field
' Dim ucfField As Field
' Dim ucfClone As Recordset
' Dim ucfField_MonthsOverdue As Field
'
'
' Const cRecall_Date = 2
' Const cRecall_Dr = 0
' Const cRecall_For = 1
' Const cRecall_Method = 3
' Const cRecall_Length = 4
' Const cRecall_Memo = 5
'
'
' 'copied from Qup to sort out
' '===================
' ' Private Constants
' '===================
'
'     Const cSortByDate = 0
'     Const cUserProfileSectionID = 11            'user profile section id in database
'     Const cTermNamesList = 1    'the list of ozcode terms is being viewed
'     Const cReasonsNamesList = 2
'     Const cClinicalNotesList = 4
'
' '===================
' ' Private Variables
' '===================
'     Dim iRequestDoesNotExist As Integer
'     Dim lRequestIDs() As Long
'
'
'
'     Dim sDeletedSubString As String  'part deleted out of text3()
'     Dim iFinishedLineInput As Integer
'     Dim BasicText
'     Dim TempText
'     Dim iHIV_Deidentify   As Integer
'
'     Dim iSortOrder As Integer
'     Dim iStopAllKeyBoardInput As Integer
'     Dim HasQuestionMarkpreceedingTerm As Integer
'     Dim sExistingText As String
'     Dim sLatestTextAdded As String
'
'     Dim iUserclickedOnList As Integer
'     Dim copyofClinicalNotes As String
'    ' Dim sDoctorName As String
'
'
'     Dim sCopyofRequestedTest As String 'copy for comparison
'     Dim PreviousPatientID  'used to recall previous patient crl_L        *
'     Dim startpos As Integer 'used in text3() text editor
'     Dim Endpos As Integer   'used in text3() text editor
'     Dim curpos As Integer   'used in text3() text editor
'     'Dim Ws1 As Workspace
'     Dim iStartSpot As Integer
'
'     Dim iDefaultclinicalNotesList               'view either ozcodes/clinicalnotes
'     Dim sCopyLastClinicalNotes As String        'copy of last clinical notes
'     Dim icounter As Integer
'
'   Sub PastHistory_Save()
'     Dim icounter As Integer
'     Dim iExistingRecord As Integer
'     Dim dNumber As Double
'     Dim SProgressText As String
'     '----------------------------------------
'     'Only update the file if data has changed
'     '----------------------------------------
'     If gtPatient(1).PastHIstory_Changed Then
'        Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'        '---------------------------
'        'For each past history item:
'        '---------------------------
'        For icounter = 0 To UBound(gtPatient(1).PastHistory())
'          '--------------------------------------------
'          'For each item if the data has changed in it:
'          '--------------------------------------------
'          If gtPatient(1).PastHistory(icounter).DataChanged = True _
'             And gtPatient(1).PastHistory(icounter).Deleted = False Then
'             '------------------------------------------
'             'construct the progress notes for this item
'             '------------------------------------------
'             SProgressText = UCase(gtPatient(1).PastHistory(icounter).Description) & " "
'             '------------------
'             'Is it lateralised?
'             '------------------
'             If gtPatient(1).PastHistory(icounter).Side_of_Body > 0 Then
'                 SProgressText = SProgressText & "(" & UCase(sLateralisation_ID(gtPatient(1).PastHistory(icounter).Side_of_Body)) & ") "
'             End If
'             '---------------------------------------------------
'             'And date of occurrance, assume if operation date if
'             'reasonably accurate
'             '----------------------------------------------------
'             If gtPatient(1).PastHistory(icounter).Operation = True Then
'                 SProgressText = SProgressText & "at age "
'             Else
'                 SProgressText = SProgressText & "which occurred or was first noted at the age of "
'             End If
'             SProgressText = SProgressText & gtPatient(1).PastHistory(icounter).age_Onset
'             Select Case gtPatient(1).PastHistory(icounter).Age_onset_Units
'             Case mrUnits_Months
'                  SProgressText = SProgressText & " Months "
'             Case mrUnits_Years
'                  SProgressText = SProgressText & " Years"
'             End Select
'             SProgressText = SProgressText & " in " & gtPatient(1).PastHistory(icounter).Date & ". "
'             '------------------------
'             'Add any qualifying notes
'             '------------------------
'             If gtPatient(1).PastHistory(icounter).Notes <> "" Then
'                 SProgressText = SProgressText & "(" & gtPatient(1).PastHistory(icounter).Notes & "). "
'             End If
'             If gtPatient(1).PastHistory(icounter).Confidential Then
'                 SProgressText = SProgressText & " **NB CONFIDENTIAL INFORMATION**"
'             End If
'           '----------------------------------------------------------
'           'if editing an existing record, archive this record before
'           'creating a new one - old records have a condition_ID
'           'allocated by MSAccess when the original record was created
'           'this leaves an audit trail
'           '----------------------------------------------------------
'           If gtPatient(1).PastHistory(icounter).Record_ID <> 0 Then
'                Set Q = Db.QueryDefs("MRQ_pastHistory_Archive")
'                Q("Enter Record_ID") = gtPatient(1).PastHistory(icounter).Record_ID
'                Q.Execute
'                 '--------------------------------------------------
'                 'Mark this archived record with consult archived at
'                 '--------------------------------------------------
'                 Set Q = Db.QueryDefs("MRQ_PastHistory_Archive_Duringconsult")
'                 Q("Enter Record_ID") = gtPatient(1).PastHistory(icounter).Record_ID
'                 Q("Enter Consult_ID") = gtconsult.Consult_ID
'                 Q("Enter Archive_Reason_ID") = mrArchived_Changed
'                 Q.Execute
'            End If
'           '---------------------------------------------------------
'           'If this condition is to become a review or review changed
'           'add new or change the record
'           '---------------------------------------------------------
'            If gtPatient(1).PastHistory(icounter).Review.Description <> "" Then
'               '-------------------------------------------------------------
'               'If a review entry already exists for this condition edit this
'               '-------------------------------------------------------------
'               Set Rs = Db.OpenRecordset("data_Recall_Reviews", dbOpenTable)
'               With Rs
'                 If gtPatient(1).PastHistory(icounter).Review.Record_ID <> 0 Then
'                    '---------------------------------------------------------------
'                    'Archive the existing review details which may have been changed
'                    '---------------------------------------------------------------
'                     Set Q = Db.QueryDefs("MRQ_Recall_Review_Archive")
'                     Q("Enter Recall_Review_ID") = gtPatient(1).PastHistory(icounter).Review.Record_ID
'                     Q.Execute
'                     Set Q = Db.QueryDefs("MRQ_Recall_Review_Archive_Duringconsult")
'                     Q("Enter Consult_ID") = gtconsult.Consult_ID
'                     Q("Enter Archive_Reason_ID") = mrArchived_Changed
'                     Q("Enter Recall_Review_ID") = gtPatient(1).PastHistory(icounter).Review.Record_ID
'                     Q.Execute
'                     '-------------------
'                     'now edit the record
'                     '-------------------
'                     iExistingRecord = True
'                     .Index = "PrimaryKey"
'                     .Seek "=", gtPatient(1).PastHistory(icounter).Review.Record_ID
'                     .Edit
'                 Else
'                   iExistingRecord = False
'                   .AddNew
'                 End If
'                 !Consult_ID = gtconsult.Consult_ID
'                 !Doctor_ID = gtDoctor.Doctor_ID
'                 !Method_ID = gtPatient(1).PastHistory(icounter).Review.Method_ID
'                 !Length_ID = gtPatient(1).PastHistory(icounter).Review.Length_ID
'                 !Type_ID = gtPatient(1).PastHistory(icounter).Review.Type_ID
'                 !Description = gtPatient(1).PastHistory(icounter).Review.Description
'                 If gtPatient(1).PastHistory(icounter).Review.Last_date <> "" Then
'                    !Last_date = gtPatient(1).PastHistory(icounter).Review.Last_date
'                 End If
'                 !Interval = gtPatient(1).PastHistory(icounter).Review.Interval
'                 !End = gtPatient(1).PastHistory(icounter).Review.End
'                 .Update
'                 If iExistingRecord = False Then
'                     .MoveLast
'                     gtPatient(1).PastHistory(icounter).Review.Record_ID = !REVIEW_ID
'                 End If
'                 .Close
'               End With
'                 '----------------------------------------------
'                 'Mention review interval for the progress notes
'                 '----------------------------------------------
'                 If gtPatient(1).PastHistory(icounter).Review.Interval Then
'                     SProgressText = SProgressText & "The condition will be prompted for review every "
'                     SProgressText = SProgressText & gtPatient(1).PastHistory(icounter).Review.Interval & " months "
'                     If gtPatient(1).PastHistory(icounter).Review.End = 0 Then
'                         SProgressText = SProgressText & "indefinitely."
'                     Else
'                         SProgressText = SProgressText & "for the next " & gtPatient(1).PastHistory(icounter).Review.End & " months."
'                     End If
'                 End If
'
'            ElseIf gtPatient(1).PastHistory(icounter).Review.Record_ID <> 0 Then
'                '--------------------------------------------------------
'                'ie no description but existing ID = user has changed the
'                'review by turning off the check box
'                'First archive the existing review
'                '--------------------------------------------------------
'                 Set Q = Db.QueryDefs("MRQ_Recall_Review_Archive")
'                 Q("Enter Recall_Review_ID") = gtPatient(1).PastHistory(icounter).Review.Record_ID
'                 Q.Execute
'                 '-------------------------------------------------------
'                 'Mark as deleted in review table so no longer accessible
'                 '-------------------------------------------------------
'                 Set Q = Db.QueryDefs("MRQ_Recall_Review_Mark_Deleted")
'                 Q("Enter Recall_Review_ID") = gtPatient(1).PastHistory(icounter).Review.Record_ID
'                 Q.Execute
'                 '---------------------------------------
'                 'Insert consult_Id archive at and reason
'                 '---------------------------------------
'                 Set Q = Db.QueryDefs("MRQ_Recall_Review_Archive_Duringconsult")
'                 Q("Enter Consult_ID") = gtconsult.Consult_ID
'                 Q("Enter Archive_Reason_ID") = mrArchived_Deleted
'                 Q("Enter Recall_Review_ID") = gtPatient(1).PastHistory(icounter).Review.Record_ID
'                 Q.Execute
'
'                 If gtPatient(1).PastHistory(icounter).Consult_ID <> gtconsult.Consult_ID Then
'                     SProgressText = SProgressText & "This was previously being " _
'                         & "prompted for review, reminder prompts for this will now cease. "
'                 End If
'                  gtPatient(1).PastHistory(icounter).Review.Record_ID = 0
'            End If
'            '-----------------------------------------------------------
'            'If there is no ozcode for this term, create a new user term
'            'if the record contains a terminator ; remove it
'            '-----------------------------------------------------------
'            If right(gtPatient(1).PastHistory(icounter).Description, 1) = ";" Then
'                gtPatient(1).PastHistory(icounter).Description = left(gtPatient(1).PastHistory(icounter).Description, Len(gtPatient(1).PastHistory(icounter).Description) - 1)
'            End If
'            If gtPatient(1).PastHistory(icounter).Ozcode = 0 Then
'                Coding_Add_NewTerm gtPatient(1).PastHistory(icounter).Ozcode, _
'                gtPatient(1).PastHistory(icounter).Description
'            Else
'                 '------------------------------------
'                 'exists, then increment the weighting
'                 '------------------------------------
'                 Set Q = Db.QueryDefs("MRQ_Coding_IncrementWeighting")
'                 Q("Enter Description") = gtPatient(1).PastHistory(icounter).Description
'                 Q.Execute
'            End If
'           '--------------------------------------------------
'           'Now add a new record - either entirely new or edit
'           'old one if a record was changed
'           '--------------------------------------------------
'           Set Rs = Db.OpenRecordset("Data_PastHistory", dbOpenTable)
'           With Rs
'              If gtPatient(1).PastHistory(icounter).Record_ID <> 0 Then
'                 iExistingRecord = True
'                 .Index = "PrimaryKey"
'                 .Seek "=", gtPatient(1).PastHistory(icounter).Record_ID
'                 .Edit
'                 If gtPatient(1).PastHistory(icounter).Consult_ID <> gtconsult.Consult_ID Then
'                     If gtPatient(1).PastHistory(icounter).active Then
'                         dNumber = pnPH_ActiveChanged
'                     Else
'                         dNumber = pnPH_InactiveChanged
'                     End If
'                 Else
'                     If gtPatient(1).PastHistory(icounter).active Then
'                         dNumber = pnPH_Active
'                     Else
'                         dNumber = pnPH_Inactive
'                     End If
'                End If
'             Else
'                  .AddNew
'                  iExistingRecord = False
'                  If gtPatient(1).PastHistory(icounter).active Then
'                     dNumber = pnPH_Active
'                  Else
'                     dNumber = pnPH_Inactive
'                  End If
'                  !Consult_First_noted = gtconsult.Consult_ID
'                  gtPatient(1).PastHistory(icounter).Consult_First_noted = gtconsult.Consult_ID
'             End If
'             !Consult_ID = gtconsult.Consult_ID
'             !REVIEW_ID = gtPatient(1).PastHistory(icounter).Review.Record_ID
'             !age_Onset = gtPatient(1).PastHistory(icounter).age_Onset
'             !Age_onset_Units = gtPatient(1).PastHistory(icounter).Age_onset_Units
'             !Notes = gtPatient(1).PastHistory(icounter).Notes
'             !Side_of_Body = gtPatient(1).PastHistory(icounter).Side_of_Body
'             !Description = gtPatient(1).PastHistory(icounter).Description
'             !Ozcode = gtPatient(1).PastHistory(icounter).Ozcode
'             !Date = gtPatient(1).PastHistory(icounter).Date
'             !active = gtPatient(1).PastHistory(icounter).active
'             !Operation = gtPatient(1).PastHistory(icounter).Operation
'             !Confidential = gtPatient(1).PastHistory(icounter).Confidential
'             !significant = gtPatient(1).PastHistory(icounter).significant
'             .Update
'             If iExistingRecord = False Then
'                .MoveLast
'                .Edit
'                gtPatient(1).PastHistory(icounter).Record_ID = !PastHIstory_ID
'             End If
'             gtPatient(1).PastHistory(icounter).DataChanged = False
'            .Close
'           End With
'             '----------------------------------------------------------
'             'If this past history item was created in current consult
'             'archive its existing progress note(s)
'             '--------------------------------------------------------
'             If gtPatient(1).PastHistory(icounter).Consult_ID = gtconsult.Consult_ID _
'                And iExistingRecord = True Then
'                 Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'                 Q("Enter Consult_ID") = gtPatient(1).PastHistory(icounter).Consult_ID
'                 Q("Enter Table_ID") = mrTable_PH
'                 Q("Enter Record_ID") = gtPatient(1).PastHistory(icounter).Record_ID
'                 Q.Execute
'             End If
'             gtPatient(1).PastHistory(icounter).Consult_ID = gtconsult.Consult_ID
'             gtPatient(1).PastHistory(icounter).Saved = mrSaveUncommitted
'
'                Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'                ProgressNotes_Save pnGeneralHistory, dNumber, _
'                       0, "", SProgressText, True, _
'                       mrTable_PH, _
'                       gtPatient(1).PastHistory(icounter).Record_ID, _
'                       gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(dNumber).Notes_order, _
'                Rs
'              Rs.Close
'            End If
'        Next icounter
'    End If
'    gtPatient(1).PastHIstory_Changed = False
' End Sub
'
'
'
'
'
'
' Private Sub check1_Click(Index As Integer)
'       If bExitRoutine Then
'   Exit Sub
'       End If
'       Select Case iCurrentSection
'       Case cSection_requests
'             If check1(0).Value Then
'                Requests_Patients_Medications_DisplayAll
'             Else
'                 Text3(cRequest_Medications) = ""
'             End If
'
'
'       Case cSection_Allergies
'            If check1(0).Value Then
'               gtNew_allergy(0).definite = 1
'            Else
'               gtNew_allergy(0).definite = False
'            End If
'            If check1(1).Value Then
'               gtNew_allergy(0).Generic_Specific_Reaction = 1
'
'            Else
'               gtNew_allergy(0).Generic_Specific_Reaction = False
'            End If
'
'       Case cSection_PastHistory
'            'If problem is active, allow review data entry
'            Select Case Index
'            Case 1
'             If check1(1).Value = 1 Then
'                Text3(4).Visible = True
'                Text3(5).Visible = True
'                'label2(19).Visible = True
'                Label2(15).Visible = True
'                Label2(10).Visible = True
'                Text3(4).SetFocus
'             Else
'                bExitRoutine = True
'                Text3(4).Visible = False
'                Text3(4).Text = ""
'                Text3(5).Visible = False
'                Text3(5).Text = ""
'                'label2(19).Visible = False
'                Label2(15).Visible = False
'                 Label2(10).Visible = False 'the 'review every label'
'                bExitRoutine = False
'              End If
'             Case 3
'
'             End Select
'
'       Case cSection_NewNotes
'
'       Case cSection_Script
'         Select Case Index
'         Case 0 'the rpbs
'              Script_Item_Display_PBSStatus
'
'              If check1(0).Value = 1 Then
'                 gtNew_ScriptItem(0).Veteran = 1
'              Else
'                 gtNew_ScriptItem(0).Veteran = False
'              End If
'              Script_EditArea_Entitlement_Display
'         Case 1 'the Reg 24 button
'              If check1(1).Value = 1 Then
'                 gtNew_ScriptItem(0).Reg24 = True
'              Else
'               gtNew_ScriptItem(0).Reg24 = False
'              End If
'         Case 6
'              If check1(6).Value = 1 Then
'                 gtNew_ScriptItem(0).Current_medication = True
'              Else
'                gtNew_ScriptItem(0).Current_medication = False
'              End If
'         End Select
'    Case cSection_Recalls
'            bExitRoutine = True
'             If check1(0).Value = 1 Then
'                gtEditArea_Recall(0).Dealt_with = True
'                If Text3(5) = "" Then
'
'                    Text3(5) = "completed"
'
'                 End If
'             Else
'                 gtEditArea_Recall(0).Dealt_with = False
'                 Text3(5) = ""
'             End If
'             bExitRoutine = False
'    Case cSection_Referrals
'            If check1(7).Value = 1 Then
'               gtNew_Referral(0).Address.Head_office = True
'            Else
'               gtNew_Referral(0).Address.Head_office = False
'            End If
'
'       End Select
' End Sub
'
' Private Sub check1_KeyPress(Index As Integer, KeyAscii As Integer)
'         Select Case iCurrentSection
'         Case cSection_PastHistory
'         If KeyAscii = vbKeyReturn Then
'             If Index = 1 And Text3(4).Visible Then
'               Text3(4).SetFocus
'             Else
'               Command3(cEdit_Accept).SetFocus
'             End If
'         End If
'         End Select
' End Sub
'
' Private Sub check2_Click(Index As Integer)
'      If bExitRoutine Then
'          Exit Sub
'      End If
'      Select Case iCurrentSection
'
'      Case cSection_FamilyandSocialHistory
'
'            Select Case Index
'            Case 0
'              If check2(0).Value = 1 Then
'                   gtPatient(1).Ethnicity.Aboriginal = True
'              Else
'               gtPatient(1).Ethnicity.Aboriginal = False
'              End If
'           Case 1
'               If check2(1).Value = 1 Then
'                   gtPatient(1).Ethnicity.Torres_Strait_Islander = True
'               Else
'                    gtPatient(1).Ethnicity.Torres_Strait_Islander = False
'               End If
'           End Select
'           gtPatient(1).Ethnicity.DataChanged = True
'           gtPatient(1).DataChanged = True
'          'Command2(0).Enabled = True 'save
'     Case cSection_NewNotes
'
'     Case cSection_Script
'          If Index = 0 Then
'             gtNew_ScriptItem(0).Previousauthority = check2(0).Value
'          Else
'             gtNew_ScriptItem(0).AuthPostHome = check2(1).Value
'          End If
'     End Select
'
' End Sub
'
' Private Sub check3_Click()
'         If bExitRoutine = True Then
'  Exit Sub
'         End If
'
'         If check3.Value <> gtPatient(1).Retired Then
'            gtPatient(1).DataChanged = True
'            gtPatient(1).Ethnicity.DataChanged = True
'            gtPatient(1).Retired = check3.Value
'          End If
' End Sub
'
' Private Sub Command4_Click()
' Command4.ZOrder
' Consult_Summary_Save
' End Sub
'
' Private Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)
'    If iStopAllKeyBoardInput Then
'       If Picture1(2).Visible = True Then 'the cover up picture
'          Select Case KeyCode
'          Case 27
'             Call Form_KeyPress(vbKeyEscape)
'          Case Is <> 13
'             KeyCode = 0
'   Exit Sub
'          End Select
'
'       End If
'       KeyCode = 0
'       Exit Sub
'    End If
'     Select Case KeyCode
'
'     Case vbKeyTab
'       If Picture1(2).Visible = True Then
'          KeyCode = 0
'       End If
'     Case vbKeyEscape
'          Call Form_KeyPress(vbKeyEscape)
'
'     Case vbKeyF4
'          Show_Section "New Notes"
'         'referrals
'        '  iCurrentSection = cSection_NewNotes
'        '  dNotes_Subsection = 7.5
'        '  Option2_Click cSection_NewNotes
'     Case vbKeyF5
'         Show_Section "Family and Social"
'     Case vbKeyF6
'         Show_Section "Past History"
'     Case vbKeyF7
'         Show_Section "Immunisations"
'     Case vbKeyF10
'         ' ProgressNotes_Show
'     Case vbKeyF12
'          Save_Consult
'     End Select
'
' End Sub
'
' Private Sub Form_KeyPress(KeyAscii As Integer)
'
'        If iStopAllKeyBoardInput And KeyAscii <> 27 Then
'           KeyAscii = 0
'   Exit Sub
'        End If
'        On Error Resume Next
'
'
'         If KeyAscii = vbKeyEscape Then
'             Picture2.Visible = False
'             If itdbgrid1_image = cGrID_Image_RestrictedDrug _
'                Or itdbgrid1_image = cGrID_Image_Authorities Then
'               'PositionSSActiveTab1 "Restore"
'                SSActiveTabs1.SelectedTab = 1
'                Patient_Get_Medications True
'             End If
'             If itdbgrid2_image = cGrID_Image_Patients Then
'                SSPanel3(1).Visible = False
'                 itdbgrid2_image = cGrID_Image_None
'                 SSActiveToolBars1.Tools("ID_Age").Edit.Text = ""
'                 SSActiveToolBars1.Tools("ID_FindWhat").Edit.Text = ""
'      Exit Sub
'             End If
'              If itdbgrid1_image = cGrID_Image_indications Then
'                 '------------------------------------------------------
'                 'user removing drugs by indication without choosing one
'                 'so reset the edit area
'                 '------------------------------------------------------
'                 Picture5.Visible = False
'                 Script_PastMeds_ViewActive
'                 Command3_Click (1)
'             End If
'             If iCentralDisplay Then
'                iCentralDisplay = False
'                Picture5.Visible = False
'      Exit Sub
'             End If
'
'             Select Case ctrlLastUsed.Name
'
'             Case "rtb2"
'                rtb2.Visible = False
'                Picture1(5).Visible = False
'             Case "Richtextbox1(0)"
'                   Select Case iCurrentSection
'                   Case cSection_Immunisations
'                      lblMasterHeading = " IMMUNISATIONS"
'                       With Label3
'                         .Caption = " UP TO DATE "
'                         .left = Command1(3).left - Label3.width - 100
'                         .BackColor = vbRed
'                         .ForeColor = vbYellow
'                         .Visible = True
'                        End With
'
'                      RichTextBox1(0).Visible = False
'
'                  Case cSection_Overview
'                      bExitRoutine = True
'                      With RichTextBox1(0) 'holds social history summary
'                         .toP = Picture3.toP + sspanel2(0).height  '+ shape_top_outline.height
'                         .left = Picture3.left + 10
'                         .width = Picture3.width - 20
'                         .BackColor = vbWhite
'                         .BorderStyle = rtfNoBorder
'                         .Font = "Verdana"
'                         .Font.Size = 7
'                         .Font.Bold = False
'                         .height = 800
'                         .Visible = True
'                         .Locked = True
'                         .Text = ""
'                     End With
'                     RichTextBox1(0).Text = gtPatient(1).socialHistory.history
'                     bExitRoutine = False
'                     Label3.Visible = False
'                      lblMasterHeading = " OVERVIEW "
'
'                 End Select
'             End Select
'
'         End If
'
' End Sub
'
' Private Sub Form_Unload(Cancel As Integer)
'  Call FormPosition_Save(Me)
'
'  End
' End Sub
'
' Private Sub Label1_Click()
'
'   Exit Sub
'   Dim iFoundpos
'     Dim ifoundline
'     Set ctrlLastUsed = rtb2
'     With rtb2
'         .Text = sMsg & vbCrLf
'         .width = 4000
'         .Font = "Verdana"
'         .Font.Size = 7
'         .BackColor = vbLightYellow
'         .left = Picture3.left + 500
'         .toP = Picture3.toP + 500
'         .BorderStyle = rtfFixedSingle
'         iFoundpos = rtb2.Find(vbCrLf, , , rtfWholeWord)
'         ' Show message based on whether the text was found or not.
'         If iFoundpos <> -1 Then      ' Returns number of line containing found text.
'              ifoundline = rtb2.GetLineFromChar(iFoundpos)
'         End If
'         .height = 1000  '(ifoundline + 2) * 150
'             With Picture1(5)
'                 .toP = rtb2.toP + 75
'                 .left = rtb2.left + 75
'                 .height = rtb2.height
'                 .width = rtb2.width
'                 .BackColor = vbDarkGrey
'                 .Visible = True
'                 .ZOrder
'              End With
'
'         End With
'         With rtb2
'         .SelStart = 0
'         .SelLength = Len(.Text)
'         .SelColor = vbBlue
'         .SelLength = 0
'         .ZOrder
'         .Visible = True
'         .SetFocus
'         End With
'
'
'
'
' End Sub
'
' Private Sub Label2_DblClick(Index As Integer)
'          If iCurrentSection = cSection_Overview Then
'             Select Case Index
'             Case 12
'                  Show_Section "Family and Social"
'             Case 1
'                  Show_Section "Immunisations"
'             End Select
'          End If
' End Sub
'
' Private Sub Label2_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
'       Select Case Index
'         Case 12 'Overview family history
'           Select Case Button
'              Case vbKeyRButton
'
'                  Set SourceControl = Label2(Index)
'                  Label2(Index).Tag = "Family History"
'                     SSActiveToolBars1.PopupMenu "ID_OverviewPopUp"
'              End Select
'       End Select
' End Sub
'
' Private Sub Label7_Click(Index As Integer)
'         Dim iNumRows As Integer
'         Select Case Index
'         Case 0
'
'             Script_Item_Display_Preg_text gtNew_ScriptItem(0).pc, gtNew_ScriptItem(0).Prodcode, gtNew_ScriptItem(0).Formcode, gtNew_ScriptItem(0).Brand, gtNew_ScriptItem(0).GenericString
'         Case 1
'             '------------------------------------------
'             'Toggle drug restrictions in use on and off
'             '------------------------------------------
'             If TDBGrid1(0).Caption = "Restricted Drug" Then
'                Patient_Get_Medications True
'             Else
'                Script_Authority_GetDetails gtNew_ScriptItem(0).Restcode, iNumRows
'                Script_Authority_DisplayList iNumRows
'                TDBGrid1(0).Caption = "Restricted Drug"
'                itdbgrid1_image = cGrID_Image_RestrictedDrug
'             End If
'         Case 2
'         Case 3
'         End Select
'
' End Sub
'
'
' Private Sub lblHabits_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
'         If iCurrentSection = cSection_Overview Then
'             If Button = 2 Then
'                Set SourceControl = lblHabits
'                lblHabits.Tag = "Habits"
'                SSActiveToolBars1.PopupMenu ("ID_OverviewPopUp")
'               End If
'         End If
' End Sub
'
' Private Sub List1_Click(Index As Integer)
'     Dim ix As Integer
'     If bExitRoutine Then Exit Sub
'     '----------------------------------------
'     'List1(2) if used to show overdue actions
'     '----------------------------------------
'     If Index = 3 Then
'        Exit Sub
'     End If
'
'     Select Case iCurrentSection
'     Case cSection_Measure
'          bExitRoutine = True
'          ix = List1(0).ItemData(List1(0).ListIndex)
'          Select Case Index
'
'          Case 0
'              '--------------------------------------------------------
'              'Display the Type of measurement in edit area, set arrays
'              '--------------------------------------------------------
'              iEditing = True
'              bExitRoutine = True
'              Measure_Values_GetForType gtPatient(1).Measurements(List1(0).ItemData(List1(0).ListIndex)).Type_ID, List1(0).ItemData(List1(0).ListIndex)
'
'              ' gtMeasurement(0).Type_ID , List1(0).ItemData(List1(0).ListIndex)
'              gtMeasurement(0) = gtPatient(1).Measurements(List1(0).ItemData(List1(0).ListIndex))
'
'              With gtPatient(1).Measurements(List1(0).ItemData(List1(0).ListIndex))
'                 Text3(0) = .Description
'                 gtMeasurement(0).Values(0) = .Values(0)
'                 sspanel2(1).Caption = .Full_Description
'              End With
'             Measure_Values_DisplayForType
'             bExitRoutine = False
'               List1(1).ListIndex = 0
'          Case 1
'             iEditing = True
'             ReDim gtMeasurement(0)
'             gtMeasurement(0) = gtPatient(1).Measurements(ix)
'             gtMeasurement(0).Values(0) = gtPatient(1).Measurements(0).Values(List1(1).ListIndex)
'
'             '------------------------------------------------
'              'Display the actual values of the values()member
'              '-----------------------------------------------
'              Text3(0) = gtPatient(1).Measurements(ix).Description
'              With gtPatient(1).Measurements(ix).Values(List1(1).ListIndex)
'                   Text3(1) = .Value
'                   Text3(2) = .Date
'                   Text3(3) = .Comment
'              End With
'          End Select
'          bExitRoutine = False
'
'
'     Case cSection_Overview
'     Case cSection_FamilyandSocialHistory
'         Select Case Index
'         Case 0
'             '----------------------------------------------------------
'             'Display the members details their disease list and the
'             'first disease on their disease list
'             '----------------------------------------------------------
'             FH_displayMember
'             FH_DisplayDiseasesList
'             FH_DisplayDisease 0
'         Case 1
'             '-------------------------------------------------
'             'Display the disease currently highlighted by user
'             '-------------------------------------------------
'              If Text3(cTxt_FHRelationship) = "" Then
'                 FH_displayMember
'              End If
'              FH_DisplayDisease List1(1).ItemData(List1(1).ListIndex)
'         End Select
'     Case cSection_PastHistory
'          Select Case Index
'          Case 0, 1 'list 0 holds all the past history
'             ipastHistory_PreExistingCondition = True
'             iEditing = True
'             bExitRoutine = True
'             '------------------------------------------------------------
'             'Display the currently hightlighted row back to the edit area
'             '------------------------------------------------------------
'             For icounter = 0 To 4
'                 Text3(icounter) = ""
'             Next
'             For icounter = 0 To 2
'                 Option2(icounter).Value = False
'             Next
'             check1(0).Value = False
'             check1(1).Value = False
'             ix = List1(Index).ItemData(List1(Index).ListIndex)
'             iArrayPosition = ix  'remove duplicate later
'             Text3(0) = gtPatient(1).PastHistory(ix).Description
'             Text3(1) = gtPatient(1).PastHistory(ix).Notes
'             Text3(2) = gtPatient(1).PastHistory(ix).age_Onset
'
'             If gtPatient(1).PastHistory(ix).Age_onset_Units = mrUnits_Months Then
'                Text3(2) = Text3(2) & "M"
'             End If
'             Text3(3) = gtPatient(1).PastHistory(ix).Date
'             If gtPatient(1).PastHistory(ix).Review.Interval <> 0 Then
'                Label2(15).Visible = True
'                With Text3(4)
'                   '  .Visible = True
'                     .Text = gtPatient(1).PastHistory(ix).Review.Interval
'                End With
'                With Text3(5)
'                   '  .Visible = True
'                     If gtPatient(1).PastHistory(ix).Review.End = 0 Then
'                       .Text = "Indefinite"
'                     Else
'                       .Text = gtPatient(1).PastHistory(ix).Review.End _
'                             & " Months"
'                     End If
'                 End With
'             End If
'
'             If gtPatient(1).PastHistory(ix).Operation = True Then
'                check1(0).Value = 1
'             End If
'             If gtPatient(1).PastHistory(ix).active = True Then
'                check1(1).Value = 1
'                Text3(4).Visible = True
'                Text3(5).Visible = True
'                 Label2(15).Visible = True
'                Label2(10).Visible = True
'             End If
'             If gtPatient(1).PastHistory(ix).significant = True Then
'                check1(3).Value = 1
'             End If
'             If gtPatient(1).PastHistory(ix).Side_of_Body > 0 Then
'                Option2(gtPatient(1).PastHistory(ix).Side_of_Body - 1).Value = True
'             End If
'             If gtPatient(1).PastHistory(ix).Confidential = True Then
'                check1(2).Value = 1
'             Else
'                check1(2).Value = False
'             End If
'             lozcode = gtPatient(1).PastHistory(ix).Ozcode
'          Case 1 'list 1 holds only active problems
'
'          End Select
'     Case cSection_NewNotes
'
'     Case cSection_SOAP
'     Case cSection_Script
'     Case cSection_Allergies
'         '----------------------------------------
'         'display allergy details for current drug
'         '----------------------------------------
'         Allergy_Edit
'         allergy_ViewClassNotes
'     Case cSection_requests
'
'
'     Case cSection_Referrals
'         iEditing = True
'         Command3(cEdit_AddText).Caption = "Edit text"
'         Command3(cEdit_Preview).Enabled = True 'enable preview button
'         sMsg = Format(List1(0).ItemData(List1(0).ListIndex))
'         sMsg = right(sMsg, Len(sMsg) - 1)
'         iArrayPosition = gtPatient(1).ConsultationSummary(List1(0).ListIndex).Array_Position
'         bExitRoutine = True
'         Text3(1) = gtPatient(1).Referrals(iArrayPosition).Person.Firstname
'         Text3(2) = gtPatient(1).Referrals(iArrayPosition).Type
'         Text5 = gtPatient(1).Referrals(iArrayPosition).KeyProblem
'         RichTextBox1(0).Text = gtPatient(1).Referrals(iArrayPosition).Text
'         check1(0).Value = Abs(gtPatient(1).Referrals(iArrayPosition).Include_Medications)
'         check1(1).Value = Abs(gtPatient(1).Referrals(iArrayPosition).Include_SocialHistory)
'         check1(2).Value = Abs(gtPatient(1).Referrals(iArrayPosition).Include_FamilyHistory)
'         check1(3).Value = Abs(gtPatient(1).Referrals(iArrayPosition).Include_PastHistory)
'         check1(4).Value = Abs(gtPatient(1).Referrals(iArrayPosition).Include_ActiveProblems)
'         Command3(cEdit_AddText).Enabled = True
'         Command3(cEdit_Accept).Enabled = True
'         Command3(cEdit_Preview).Enabled = True
'         bExitRoutine = False
'     Case cSection_Recalls
'         '-----------------------------------------------
'         'Display the highlighted recall in the edit area
'         '-----------------------------------------------
'         iEditing = True
'         bExitRoutine = True
'         iInteger = List1(0).ItemData(List1(0).ListIndex)
'          gtEditArea_Recall(0) = gtPatient(1).Recalls(iInteger)
'        ' gtEditArea_Recall(0).Doctor_ID = gtPatient(1).Recalls(iInteger).Doctor_ID
'        ' gtEditArea_Recall(0).Method_ID = gtPatient(1).Recalls(iInteger).Method_ID
'        '  gtEditArea_Recall(0).Length_ID = gtPatient(1).Recalls(iInteger).Length_ID
'        ' gtEditArea_Recall(0).Doctor_ID = gtPatient(1).Recalls(iInteger).Doctor_ID
'        ' gtEditArea_Recall(0).Doctor_firstname = gtPatient(1).Recalls(iInteger).Doctor_firstname
'        ' gtEditArea_Recall(0).Doctor_Surname = gtPatient(1).Recalls(iInteger).Doctor_Surname
'         Text3(cRecall_Dr) = "Dr " & gtEditArea_Recall(0).Doctor_firstname & " " & gtEditArea_Recall(0).Doctor_Surname
'         Text3(cRecall_Date) = gtPatient(1).Recalls(iInteger).Last_date
'         Text3(cRecall_For) = gtPatient(1).Recalls(iInteger).Description
'         Text3(cRecall_Method) = gtPatient(1).Recalls(iInteger).ContactMethod_Name
'         Text3(cRecall_Length) = gtPatient(1).Recalls(iInteger).consultLength_Name
'         If gtPatient(1).Recalls(iInteger).Dealt_with = True Then
'            check1(0).Value = 1
'         Else
'            check1(1).Value = 0
'         End If
'             Text3(cRecall_Memo) = gtPatient(1).Recalls(iInteger).Memo
'             bExitRoutine = False
'
'    '     Case 1 'the active problem list
'    '         iEditing = True
'    '         Text5 = List1(1).List(List1(1).ListIndex)
'    '     End Select
'     Case cSection_Immunisations 'xilist1
'         bExitRoutine = True
'         Picture2.Visible = False
'         Select Case Index
'         Case 0
'             '-------------------------------------------------------
'             'display in the editing area the vaccine details for the
'             'schedule and first vaccine in list1(1)
'             '-------------------------------------------------------
'             Text3(0).Text = List1(0).List(List1(0).ListIndex)
'             iSchedule_ID = List1(0).ItemData(List1(0).ListIndex)
'             List1(1).Clear
'             For icounter = 0 To UBound(gtPatient(1).Vaccinations())
'                 '-----------------------------------------------------------------------
'                 'Use the schedule ID in itemdata of list1(0) to add items to the list1(1)
'                 '------------------------------------------------------------------------
'                 If gtPatient(1).Vaccinations(icounter).Schedule.ID = List1(0).ItemData(List1(0).ListIndex) _
'                    And gtPatient(1).Vaccinations(icounter).Deleted <> True Then
'                     List1(1).AddItem gtPatient(1).Vaccinations(icounter).Vaccine.Trade_Name & " (" & gtPatient(1).Vaccinations(icounter).Vaccine.Abbreviation & ") - " & gtPatient(1).Vaccinations(icounter).Date_given
'                     sVaccine_Trade_Name = gtPatient(1).Vaccinations(icounter).Vaccine.Trade_Name
'                     svaccine_Formulation = gtPatient(1).Vaccinations(icounter).Vaccine.Formulation
'                     sVaccine_Abbreviation = gtPatient(1).Vaccinations(icounter).Vaccine.Abbreviation
'                     List1(1).ItemData(List1(1).NewIndex) = gtPatient(1).Vaccinations(icounter).Vaccine.ID
'                 End If
'             Next
'             '---------------------------------------------------
'             'set the display to the first member of the list1(1)
'             '---------------------------------------------------
'             bExitRoutine = False
'             List1(1).ListIndex = List1(1).NewIndex
'
'         Case 1
'             '----------------------------------------------------
'             'using the schedule highlighted in list1(0) and the
'             'item highlighted in list1(1) get vaccination details
'             '----------------------------------------------------
' For icounter = 0 To UBound(gtPatient(1).Vaccinations())
'     If (gtPatient(1).Vaccinations(icounter).Schedule.ID = List1(0).ItemData(List1(0).ListIndex)) And (gtPatient(1).Vaccinations(icounter).Vaccine.ID = List1(1).ItemData(List1(1).ListIndex)) Then
'         If InStr(List1(1).List(List1(1).ListIndex), gtPatient(1).Vaccinations(icounter).Date_given) Then
'         'Text3(1) = List1(1).List(List1(1).ListIndex)
'         Text3(1) = gtPatient(1).Vaccinations(icounter).Vaccine.Trade_Name & " (" & gtPatient(1).Vaccinations(icounter).Vaccine.Abbreviation & ""
'         iVaccine_ID = List1(1).ItemData(List1(1).ListIndex)
'         Text3(0) = List1(0).List(List1(0).ListIndex)
'         iSchedule_ID = List1(0).ItemData(List1(0).ListIndex)
'         Text3(2) = gtPatient(1).Vaccinations(icounter).Date_given
'         Text3(3) = gtPatient(1).Vaccinations(icounter).Vaccine.Serial_No
'         Text3(4) = gtPatient(1).Vaccinations(icounter).Reaction
'         Exit For
'         End If
'     End If
' Next
'         End Select
'     End Select
'     bExitRoutine = False
' End Sub
'
' Private Sub List1_DblClick(Index As Integer)
'     If bExitRoutine Then
'        Exit Sub
'     End If
'     Select Case iCurrentSection
'     Case cSection_Overview
'         Select Case Index
'         Case 1
'             iProblemChosen = List1(1).ItemData(List1(1).ListIndex)
'         Case 0
'             iProblemChosen = List1(0).ItemData(List1(0).ListIndex)
'         End Select
'         Show_Section "Past History"
'
'     Case cSection_FamilyandSocialHistory
'
'     Case cSection_PastHistory
'
'     Case cSection_NewNotes
'
'     End Select
' End Sub
'
'
' Private Sub List1_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
'  Select Case iCurrentSection
'
'     Case cSection_Immunisations
'          Select Case KeyCode
'                 Case vbKeyDelete
'                       IMM_Delete Index
'          End Select
'     End Select
' End Sub
'
' Private Sub List1_LostFocus(Index As Integer)
' Select Case iCurrentSection
' Case cSection_Overview
'      List1(Index).ListIndex = -1
' Case cSection_FamilyandSocialHistory
'
' Case cSection_PastHistory
'
'
' Case cSection_NewNotes
'
'  End Select
'  If Index = 3 Then
'     List1(3).ListIndex = -1
'  End If
' End Sub
'
' Private Sub List1_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
'     If List1(Index).ListIndex < 0 Then
'        Exit Sub
'     End If
'     If Button <> 2 Then
'        Exit Sub
'     End If
'     Select Case iCurrentSection
'     Case cSection_requests
'          If List1(0).ListCount And Index = 0 Then
'                SSActiveToolBars1.PopupMenu "ID_CommonForms"
'          End If
'     Case cSection_Overview
'          Select Case Button
'                      Case vbKeyRButton
'                           If Index = 0 Then
'                             List1(Index).Tag = "All Problems"
'                           Else
'                             List1(Index).Tag = "Active Problems"
'                           End If
'                           Set SourceControl = List1(Index)
'                            SSActiveToolBars1.PopupMenu "ID_OverviewPopUp"
'              End Select
'       Case cSection_Measure
'             If List1(1).ListCount And Index = 1 Then
'                SSActiveToolBars1.PopupMenu "ID_Measure"
'             '   SSActiveToolBars1.Tools.Item("ID_MeasureDelete").Enabled = True
'             End If
'
'     Case cSection_Recalls
'            If List1(0).ListCount And Index = 0 Then
'
'                If gtPatient(1).Recalls(List1(0).ItemData(List1(0).ListIndex)).Consult_ID _
'                   = gtconsult.Consult_ID Then
'                  SSActiveToolBars1.Tools.Item("ID_RecallDelete").Name = "Reverse Entry"
'                Else
'                  SSActiveToolBars1.Tools.Item("ID_RecallDelete").Name = "Delete Entry"
'                End If
'                SSActiveToolBars1.Tools.Item("ID_RecallDelete").Enabled = True
'              SSActiveToolBars1.PopupMenu "ID_RecallList1Popup"
'             End If
'
'     Case cSection_FamilyandSocialHistory
'              If List1(1).ListCount And Index = 1 Then
'                 List1(Index).Tag = "Family History"
'                 Set SourceControl = List1(Index)
'                 SSActiveToolBars1.PopupMenu "ID_PopUp_FH"
'                 SSActiveToolBars1.Tools.Item("ID_FH_DeleteMember").Enabled = False
'             End If
'     Case cSection_PastHistory
'             If List1(Index).ListCount And List1(0).ListIndex <> -1 Then
'                Select Case Index
'                Case 0
'                    List1(Index).Tag = "All Problems"
'                Case 1
'                    List1(Index).Tag = "Active Problems"
'                End Select
'                 Set SourceControl = List1(Index)
'                 If gtPatient(1).PastHistory(List1(Index).ItemData(List1(Index).ListIndex)).Consult_First_noted = gtconsult.Consult_ID Then
'                    SSActiveToolBars1.Tools("ID_PH_ReverseEntry").Enabled = True
'                 Else
'                    SSActiveToolBars1.Tools("ID_PH_ReverseEntry").Enabled = False
'                 End If
'                 SSActiveToolBars1.PopupMenu "ID_PH"
'             End If
'     Case cSection_NewNotes
'     Case cSection_Measure
'             If List1(0).ListCount Then
'                SSActiveToolBars1.PopupMenu "ID_Graph"
'             End If
'
'     Case cSection_Script
'     If Button = 2 And List1(0).ListIndex <> -1 Then
'         If List1(0).ListCount Then
'             '-------------------------------
'             'disable inapplicable menu items
'             '-------------------------------
'             If gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).pc = "" Then
'               SSActiveToolBars1.Tools.Item("ID_ScriptPregnancyInfo").Enabled = False
'             Else
'               SSActiveToolBars1.Tools.Item("ID_ScriptPregnancyInfo").Enabled = True
'             End If
'               '-------------------------------
'             If gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).authcode = 0 Then
'               SSActiveToolBars1.Tools.Item("ID_AIA").Enabled = False
'             Else
'               SSActiveToolBars1.Tools.Item("ID_AIA").Enabled = True
'             End If
'             If gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Restcode = 0 Then
'               SSActiveToolBars1.Tools.Item("ID_ScriptRestrictions").Enabled = False
'             Else
'               SSActiveToolBars1.Tools.Item("ID_ScriptRestrictions").Enabled = True
'             End If
'             Set SourceControl = List1(Index)
'             List1(Index).Tag = "Scripts"
'             SSActiveToolBars1.PopupMenu "ID_ScriptList1PopUpMenu"
'         End If
'     End If
'     Case cSection_Allergies
'           If Button = 2 And List1(0).ListIndex <> -1 Then
'             If List1(0).ListCount Then
'                 Set SourceControl = List1(Index)
'                 List1(Index).Tag = "Allergies"
'                 SSActiveToolBars1.PopupMenu "ID_AllergyPopUPMenu"
'             End If
'           End If
'     Case cSection_Immunisations
'         Select Case Index
'             Case 1
'                 If Button = 2 Then  'right mouse
'                    Set SourceControl = List1(Index)
'                    List1(Index).Tag = "Immunisations"
'                    SSActiveToolBars1.PopupMenu SSActiveToolBars1.Tools("ID_Immunisation")
'                 End If
'             Case 0
'         End Select
'    End Select
'     If Index = 3 Then
'        If Button = 2 Then  'right mouse
'           SSActiveToolBars1.PopupMenu SSActiveToolBars1.Tools("ID_recall")
'        End If
'     End If
'
' End Sub
'
' Private Sub List2_Click()
'        If bExitRoutine Then
' Exit Sub
'        End If
'        '----------------------------------------------------------------
'        'List2 is populated when the user clicks on the command1() button
'        '----------------------------------------------------------------
'        Select Case itdbgrid2_image
'        Case cGrID_Image_ProblemList
'            Text5 = StrConv(List2.List(List2.ListIndex), vbProperCase)
'            Select Case iCurrentSection
'            Case cSection_Script
'                 Script_PrescribeByIndication_MakeTable
'            End Select
'       ' Case cList_NotesMode
'       '      lblMeasure.Caption = " " & UCase(List2.List(List2.ListIndex)) & " "
'       '      With Label3
'       '           .Caption = lblMeasure.Caption
'       '           .width = lblMeasure.width
'       '           .left = Command1(3).left - Label3.width - 200
'       '           .toP = lblMasterHeading.toP
'       '           .height = lblMasterHeading.height
'       '           .Visible = True
'       '      End With
'       '      Option2_Click (List2.ListIndex)
'
'        Case cGrID_Requests_Provider_types
'       Exit Sub
'             '----------------------------------------------------------
'             'The type of service provider is changing, hence as well as
'             'showing the name:
'             '----------------------------------------------------------
'             bExitRoutine = True
'             List2.Visible = False
'             Text3(0).Text = List2.List(List2.ListIndex)
'             Text1 = ""
'             Text4(0) = ""
'             Text3(1).Text = "" 'the line for inputting request
'             bExitRoutine = False
'             '----------------------------------------------------------
'             'must get the default company for this type and the default
'             'company rooms address for this type
'             '----------------------------------------------------------
'            ' lServiceProvidertypeID = List2.ItemData(List2.ListIndex)
'             gtNew_Form(0).Provider.Type_ID = List2.ItemData(List2.ListIndex)
'
'             Requests_Providers_Default_Get gtNew_Form(0).Provider.Type_ID
'             If gtNew_Form(0).Provider.Type_ID = mrRequest_radiology Then
'                lblMeasure.Caption = "Return films with patient"
'                 With check1(0)
'                     .left = 10
'                     .toP = Command3(2).toP
'                     .Caption = "Return films with patient"
'                     .Visible = True
'                     .width = lblMeasure.width + 200
'                 End With
'             Else
'                check1(0).Visible = False
'             End If
'        Case cGrID_Image_Requests_Providers_Names
'             '---------------------------------------------------------
'             'display the service providing company on top of form
'             'and use the company provider Id to find all the addresses
'             '---------------------------------------------------------
'         '   Text1.Text = List2.List(List2.ListIndex)
'         '   gtNew_Form(0).Provider.Name = Text1
'         '   gtNew_Form(0).Provider.ID = List2.ItemData(List2.ListIndex)
'         '  '  Requests_Providers_Default_Get lServiceProvidertypeID
'         '    Get_PreferredRoomsAddress 'lServiceProvidertypeID
'        Case cGrID_Requests_Provider_Addresses
'             '-----------------------------------
'             'user has chosen a providers address
'             '-----------------------------------
'             'lblProviderAddress.Caption = strProviderAddress(List2.ListIndex)
'             lProviderAddressID = List2.ItemData(List2.ListIndex)
'             Get_PreferredRoomsAddress   'for printing out on the form
'             Text4(0).Text = List2.List(List2.ListIndex)
'
'        End Select
'        List2.Visible = False
'
'
'     Exit Sub
'     '----------------------------------------------------------------
'     'If user has chosen a different service provider to the one shown
'     'then display new choice and get request names from the database
'     'according to the text in text3(0)
'     '----------------------------------------------------------------
'     Dim iCurrentServiceProviderID As Integer
'     iCurrentServiceProviderID = gtNew_Form(0).Provider.ID
'     If List2.ItemData(List2.ListIndex) <> iCurrentServiceProviderID Then
'         ' Text4.Text = List2.List(List2.ListIndex)
'          gtNew_Form(0).Provider.ID = List2.ItemData(List2.ListIndex)
'         ' gtNew_Form(0).Name = Text4.Text
'
'          'Requests_Providers_Requests_List_Get
'     End If
'
'     List2.Visible = False
' End Sub
'
' Private Sub List2_LostFocus()
'     List2.Visible = False
' End Sub
'
' Sub PastHistory_GetForPatient()
'     '---------------------------------------
'     'Get past history for a given patient ID
'     '---------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_pastHistory_Get")
'     Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'     Set Rs = Q.OpenRecordset()
'     icounter = 0
'     Erase gtPatient(1).PastHistory() 'clear this array
'     With Rs
'         Do Until .EOF
'            ReDim Preserve gtPatient(1).PastHistory(icounter)
'            gtPatient(1).PastHistory(icounter).Deleted = False
'            gtPatient(1).PastHistory(icounter).Record_ID = !PastHIstory_ID
'            gtPatient(1).PastHistory(icounter).Consult_ID = !Consult_ID
'            gtPatient(1).PastHistory(icounter).Consult_First_noted = !Consult_First_noted
'            gtPatient(1).PastHistory(icounter).Description = !Description
'            gtPatient(1).PastHistory(icounter).Notes = !Notes
'            gtPatient(1).PastHistory(icounter).Side_of_Body = !Side_of_Body
'            gtPatient(1).PastHistory(icounter).age_Onset = !age_Onset
'            gtPatient(1).PastHistory(icounter).Age_onset_Units = !Age_onset_Units
'            gtPatient(1).PastHistory(icounter).active = !active
'            gtPatient(1).PastHistory(icounter).Operation = !Operation
'            gtPatient(1).PastHistory(icounter).DataChanged = False
'            gtPatient(1).PastHistory(icounter).Date = !Date
'            gtPatient(1).PastHistory(icounter).Ozcode = !Ozcode
'            gtPatient(1).PastHistory(icounter).Confidential = !Confidential
'            On Error Resume Next
'            gtPatient(1).PastHistory(icounter).Review.Record_ID = "" & !REVIEW_ID
'            gtPatient(1).PastHistory(icounter).Review.Interval = !Interval
'            gtPatient(1).PastHistory(icounter).Review.Interval_Unit_ID = !Unit_ID
'            gtPatient(1).PastHistory(icounter).Review.End = !End
'            If Not IsNull(!Last_date) Then
'                 gtPatient(1).PastHistory(icounter).Review.Last_date = !Last_date
'            End If
'            On Error GoTo 0
'            gtPatient(1).PastHistory(icounter).Review.Description = !Description
'            icounter = icounter + 1
'            Rs.MoveNext
'         Loop
'     End With
' End Sub
'
'
'
'
'
'
' Sub FH_Accept()
'     Dim icondition As Integer
'     Dim Pre_existingCondition As Integer
'     Dim iName_exists As Integer 'true if data for this relative exists
'     Dim ix As Integer
'     Dim iY As Integer
'     '------------------------------------------------------
'     'if no valid relationship ID and iRelationshipName then
'     'go back a text box
'     '------------------------------------------------------
'      If iRelationship_ID = 0 Or LCase(Text3(cTxt_FHRelationship)) <> LCase(sRelationship_Name) Then
'         sMsg = "Please select a valid relationship from the list before "
'         sMsg = sMsg & "proceeding." & vbLf & vbLf & "Type in the first few letters eg 'gra' for "
'         sMsg = sMsg & "'grandfather, or grandmother' etc, then either "
'         sMsg = sMsg & "click on the list to select, or hit the <enter key>."
'         lresponse = MsgBox(sMsg, vbOKOnly, "Relationship of family member to the patient")
'         Text3(cTxt_FHRelationship).SetFocus
'         Exit Sub
'     End If
'    '-------------------------------------
'     'Check a minimum amount of data exists
'     '-------------------------------------
'     If Trim(Text3(cTxt_FHDisease)) = "" Then
'        sMsg = "At a very minimum you must enter a description of the "
'        sMsg = sMsg & "medical condition for this family member."
'        lresponse = MsgBox(sMsg, vbOKOnly, "MISSING DATA")
'        Text3(cTxt_FHDisease).SetFocus
'        Exit Sub
'     End If
'     '-----------------------------------------------------------------
'     'Takes the data from the editing area and puts into into the array
'     '1.Do records exist yet for the member ie Name = jo blogs, cycle
'     'through the existing name array, or existing relationship if
'     'no name has been entered for the relative
'     '-----------------------------------------------------------------
'     iName_exists = False
'     ix = -1
'     If List1(0).ListCount <> 0 Then
'        If iEditing Then
'           ix = List1(0).ItemData(List1(0).ListIndex)
'           iName_exists = True
'        Else
'        '-------------------------------------------------------------
'        'If the names of relatives exist in the list, look for a match
'        '-------------------------------------------------------------
'        For icounter = 0 To UBound(gtPatient(1).FamilyMembers())
'          '------------------------------------------------------
'          'if a relatives name is entered and the relationship_ID
'          'is the same as one in existing array match to that
'          '------------------------------------------------------
'          If LCase(Trim(Text3(cTxt_FHRelativeName))) <> "" Then
'             If LCase(gtPatient(1).FamilyMembers(icounter).Person_Name) = Trim(LCase(Text3(cTxt_FHRelativeName))) _
'                And gtPatient(1).FamilyMembers(icounter).Relationship_ID = iRelationship_ID Then
'                '-------------------------------------------------
'                'Name already exist in list - update data for them
'                '-------------------------------------------------
'                ix = icounter
'                iName_exists = True
'                Exit For
'              End If
'          Else
'             '------------------------------------------------------------
'             'No relatives name, try and match to a relationship eg father
'             '------------------------------------------------------------
'             If LCase(gtPatient(1).FamilyMembers(icounter).Relationship) = Trim(LCase(Text3(cTxt_FHRelationship))) Then
'                 iName_exists = True
'                 ix = icounter
'                 Exit For
'             End If
'          End If
'        Next
'       End If
'      End If
'    '-------------------------------------------------------------------
'    'At this point, if iName_Exists = true, have got an array number = ix
'    'If do not, add another member to the array
'    '-------------------------------------------------------------------
'    If iName_exists = False Then
'        '------------------------------------------------------------
'        'If array not started, ix will be -1 as set at top of routine
'        'and first array member will be set to 0, otherwise array is
'        'incremented by one
'        '------------------------------------------------------------
'        On Error Resume Next
'        ix = UBound(gtPatient(1).FamilyMembers())
'        ix = ix + 1
'        ReDim Preserve gtPatient(1).FamilyMembers(ix)
'    End If
'    '----------------------------------------------------------------------
'    'Now ix is either value within the existing array, or the latest member
'    '----------------------------------------------------------------------
'     gtPatient(1).FamilyMembers(ix).Person_Name = Trim(Text3(cTxt_FHRelativeName))
'     gtPatient(1).FamilyMembers(ix).Relationship = Trim(Text3(cTxt_FHRelationship))
'     gtPatient(1).FamilyMembers(ix).Date_of_Birth = Trim(Text3(cTxt_FHDOB))
'     gtPatient(1).FamilyMembers(ix).Relationship_ID = iRelationship_ID
'     If Text3(cTxt_FHAgeDeath) = "" Then
'        gtPatient(1).FamilyMembers(ix).Age_Death = -1
'     Else
'        gtPatient(1).FamilyMembers(ix).Age_Death = Val(Text3(cTxt_FHAgeDeath))
'     End If
'     gtPatient(1).FamilyMembers(ix).DataChanged = True
'     gtPatient(1).FamilyMedicalHistory_Changed = True
'     gtPatient(1).FamilyMembers(ix).Deleted = False
'     '---------------------------------------------------------------
'     'name match, now check if record for this disease exists, assume
'     'for starters that it is a new condition till proven otherwise
'     '---------------------------------------------------------------
'     If iEditing = False Then
'         iY = -1
'         On Error Resume Next
'         iY = UBound(gtPatient(1).FamilyMembers(ix).Conditions())
'         Pre_existingCondition = False
'         For icondition = 0 To iY
'             '-----------------------------------------------------------------------
'             'For each condition in conditions() is this new condition already there?
'             '-----------------------------------------------------------------------
'             If LCase(Trim(gtPatient(1).FamilyMembers(ix).Conditions(icondition).Description)) = LCase(Trim(Text3(cTxt_FHDisease))) Then
'                  Pre_existingCondition = True
'                  iY = icondition
'                  Exit For
'             End If
'         Next
'         '-----------------------------------------------------------------
'         'If the condition does not exist, increment the conditions() array
'         '-----------------------------------------------------------------
'         If Pre_existingCondition = False Then
'            On Error Resume Next
'            iY = UBound(gtPatient(1).FamilyMembers(ix).Conditions())
'            iY = iY + 1
'            ReDim Preserve gtPatient(1).FamilyMembers(ix).Conditions(iY)
'         End If
'     Else
'        iY = List1(1).ItemData(List1(1).ListIndex)
'        Pre_existingCondition = True
'     End If
'     '-----------------------------------------------------------------
'     'At this point will either have a pointer into the condition array
'     'or a new member of the array. If the condition already exists in
'     'the array its ID will  be non-zero
'     '-----------------------------------------------------------------
'     If Trim(Text3(cTxt_FHAgeOnset)) <> "" Then 'age of onset
'         gtPatient(1).FamilyMembers(ix).Conditions(iY).age_Onset = Val(Text3(cTxt_FHAgeOnset))
'     Else
'         gtPatient(1).FamilyMembers(ix).Conditions(iY).age_Onset = -1
'     End If
'     If LCase(Text3(cTxt_FHDiedOfThis)) = "yes" Then
'        gtPatient(1).FamilyMembers(ix).Conditions(iY).Cause_of_Death = True
'     Else
'        gtPatient(1).FamilyMembers(ix).Conditions(iY).Cause_of_Death = False
'     End If
'     gtPatient(1).FamilyMembers(ix).Conditions(iY).Description = Trim(Text3(cTxt_FHDisease))
'     gtPatient(1).FamilyMembers(ix).Conditions(iY).Comment = Trim(Text3(cTxt_FHComment))
'     gtPatient(1).FamilyMembers(ix).Conditions(iY).DataChanged = True
'     gtPatient(1).FamilyMembers(ix).Conditions(iY).Deleted = False
'     gtPatient(1).FamilyMembers(ix).Conditions(iY).Ozcode = lozcode
'     gtPatient(1).FamilyMembers(ix).DataChanged = True
'     gtPatient(1).DataChanged = True
'     '-------------------------------------------------------------
'     'If this is a new relative, display them on the left hand list
'     '-------------------------------------------------------------
'     bExitRoutine = True
'     If iName_exists = False Then
'         List1(0).AddItem Trim(Text3(cTxt_FHRelativeName)) & " (" & Trim(Text3(cTxt_FHRelationship)) & ")"
'         List1(0).ItemData(List1(0).NewIndex) = ix 'keep array position
'         List1(0).ListIndex = List1(0).NewIndex
'     Else
'         If iEditing Then
'            List1(0).List(List1(0).ListIndex) = Trim(Text3(cTxt_FHRelativeName)) & " (" & Trim(Text3(cTxt_FHRelationship)) & ")"
'         End If
'     End If
'     bExitRoutine = False
'     '-----------------------------------------------
'     'Not display all diseases for that family member
'     '-----------------------------------------------
'      FH_DisplayDiseasesList
'      Command3_Click (0)
' End Sub
' Private Sub Command1_Click(Index As Integer)
'     Picture2.Visible = False ' in case visible
'     Dim icounter As Integer
'     Select Case Index
'     Case 3
'     Select Case iCurrentSection
'     Case cSection_Referrals
'          'show drop down list of categories
'          iReferrals_Categories_Alone = True
'          Text5 = ""
'          Referrals_Categories_Getlist
'     Case cSection_Script
'          '----------------------------------
'          'Pop up the list of active problems
'          '----------------------------------
'          On Error Resume Next
'          Text5_GotFocus
'          Script_EditArea_Clear
'          FillLIst2_ActiveProblems
'     End Select
'
'
'     Case 2
'         '------------------------------------------------------
'         'Display the address list of all referral rooms for the
'         'particular company shown in text1
'         '------------------------------------------------------
'
'         itdbgrid2_image = cGrID_Requests_Provider_Addresses
'         Text4(0) = "*"
'         Requests_Providers_Addresses_getlist
'         Text4(0).SetFocus
'     Case 1
'         '----------------------------------------------------------------
'         'get list of companies for currently chosen service provider type
'         '----------------------------------------------------------------
'        ' itdbgrid2_image = cGrID_Image_Requests_Providers_Names
'         ' Load_Layout "Description", TDBGrid2, cGrID_Image_Requests_Providers_Names
'         'With Picture2
'         '   .toP = Picture3.toP + Picture1(1).toP + Text3(cRequest_request).toP
'         '    .left = Picture3.left + Picture1(1).left + Text3(cRequest_request).left
'         'End With
'          Requests_Providers_List_Get gtNew_Form(0).Provider.Type_ID
'     Case 0
'       '  iSourceControl = cCmdProviderTypes
'         itdbgrid2_image = cGrID_Requests_Provider_types
'         bExitRoutine = True
'         Text3(0) = ""
'         'Text1 = ""
'         'Text4(0) = ""
'         bExitRoutine = False
'         '-------------------------------------------------------
'         'Get and display the complete list of types of providers
'         '-------------------------------------------------------
'         Requests_Providers_Types_Single_List_Get
'         Text3(0).SetFocus
'       Case 4
'             bExitRoutine = True
'             '---------------------------------------------
'             'Add active problems to the pick list in list2
'             '---------------------------------------------
'             List2.Clear
'             If List1(1).ListCount Then
'                 Label2(5).ForeColor = vbDarkBlue
'                 List2.Clear
'                 For icounter = 0 To List1(1).ListCount
'                     List2.AddItem List1(1).List(icounter)
'                     sMsg = List2.List(icounter)
'                 Next
'                 With List2
'                     .width = Picture1(4).width
'                     .Font = "Verdana"
'                     .Font.Size = 8
'                     .toP = Text5.toP + Text5.height
'                     .left = Picture1(4).left
'                     .height = List2.ListCount * Text5.height
'                     .Visible = True
'                     .ForeColor = vbAqua
'                 End With
'
'                 List2.SetFocus
'                 List2.ListIndex = 0
'             itdbgrid2_image = cGrID_Image_ProblemList
'             End If
'             Text5.Visible = True
'             bExitRoutine = False
'     End Select
' End Sub
' Sub Requests_Providers_Addresses_getlist()
'
'          '------------------------------------
'          'index Addresses by the provider code
'          '------------------------------------
'         ' Data1.DatabaseName = sContacts_MDB
'          sSql = "SELECT Links_owner_address.Address_ID, " _
'               & "Links_owner_address.Owner_ID, data_addresses.Street1, " _
'               & "data_addresses.Street2, data_addresses.Suburb as Description, " _
'               & "data_addresses.Postcode, data_addresses.State " _
'               & "FROM data_addresses RIGHT JOIN (data_organisations " _
'               & "INNER JOIN Links_owner_address ON " _
'               & "data_organisations.Organisation_ID = " _
'               & "Links_owner_address.Owner_ID) ON " _
'               & "data_addresses.Address_ID = " _
'               & "Links_owner_address.Address_ID " _
'               & "WHERE (((Links_owner_address.Owner_ID) = " _
'               & gtNew_Form(0).Provider.ID & ")) " _
'               & "ORDER BY data_addresses.Suburb"
'
'          General_getList Text4(0), sContacts_MDB, sSql
'
' End Sub
'
' Private Sub Command2_Click(Index As Integer)
'     If Picture5.Visible Then
'        Select Case Index
'         Case 3 'the print button
'           Select Case iCentralDisplay
'               Case cCentralDisplay_PI
'                   Script_PI_Print
'
'           End Select
'        Case 4 'the close button
'            ' Command3(3).SetFocus
'        Case 5 'The edit button
'
'        End Select
'        Picture5.Visible = False
'        'DoEvents
'        Exit Sub
'     End If
'
'     If Command2(2).Caption = "Print PI" And Command2(2).Visible Then
'        Select Case Index
'        Case 1
'
'             rtb2.Visible = False
'             Picture1(5).Visible = False
'            ' RichTextBox1(0).Visible = False
'             Command2(1).Visible = False
'             Command2(2).Visible = False
'             Command2(0).Visible = True
'        Case 2
'
'         Exit Sub
'        End Select
'     End If
'
'     Select Case iCurrentSection
'    ' Case cSection_LetterDisplay
'     Case cSection_Overview
'          Select Case Index
'          Case 1
'              bExitRoutine = True
'              '------------------------------------------------------
'              'If this button clicked then user looking at PI in this
'              'section which has displaced the richtextboxes
'              '------------------------------------------------------
'               With RichTextBox1(0) 'holds social history summary
'                 .toP = Picture3.toP + sspanel2(0).height  '+ shape_top_outline.height
'                 .left = Picture3.left + 10
'                 .width = Picture3.width - 20
'                 .BackColor = vbWhite
'                 .BorderStyle = rtfNoBorder
'                 .Font = "Verdana"
'                 .Font.Size = 7
'                 .Font.Bold = False
'                 .height = 800
'                 .Visible = True
'                 .Locked = True
'                  SH_FormatText sMsg
'                 .Text = sMsg
'             End With
'              With rtb2 'holds medical family disease history summary
'                  .toP = RichTextBox1(0).toP + RichTextBox1(0).height + Shape2(4).height
'
'                  .left = Picture3.left '+ shape_left_outline.width
'                  .width = Picture3.width - 100
'                  .height = 450
'                  .BorderStyle = rtfNoBorder
'                  .BackColor = vbWhite
'                  .Font = "Verdana"
'                  .Font.Bold = False
'                  .Font.Size = 6
'                  .SelColor = vbBlue
'                  .SelStart = 0
'                  .Visible = True
'                  .Locked = True
'                  .MaxLength = 0
'              End With
'
'              Picture1(5).Visible = False
'
'              Command2(1).Visible = False
'              Command2(2).Visible = False
'              Command2(0).Visible = True
'              bExitRoutine = True
'    Exit Sub
'          Case 2 'print button
'               Overview_Print
'     Exit Sub
'          End Select
'
'          Case cSection_SOAP
'          Case cSection_Script
'               Script_Save  'save to database
'               Script_Print 'print all the scripts
'          Case cSection_Recalls
'               Save_Consult
'          Case cSection_requests
'          Case cSection_Referrals
'
'         Case cSection_Immunisations
'              Select Case Index
'              Case 0
'              Case 1
'                 RichTextBox1(0).Visible = False
'        Exit Sub
'              End Select
'
'     End Select
'     Timer2.Enabled = False
'     Save_Consult
' End Sub
' Sub SH_Save()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  Rs1                                                                                   *
' '*                                                                                        *
' '* Local Labels (Removed)                                                                 *
' '*  SH_SaveError                                                                          *
' '******************************************************************************************
'
'    Dim iExistingRecord As Integer
'    Dim dNumber As Double
'    Dim SProgressText As String
'   '-----------------------------------------
'    'Save ethnicity details and social history
'    '-----------------------------------------
'    On Error GoTo 0  'SH_SaveError
'    If gtPatient(1).SocialHistory_Changed Then
'         Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'           '----------------------------------------------------------
'           'if editing an existing record, archive this record before
'           '----------------------------------------------------------
'           If gtPatient(1).socialHistory.Record_ID <> 0 Then
'             '--------------------------------------
'             'archive current copy of social history
'             '--------------------------------------
'             Set Q = Db.QueryDefs("MRQ_SH_Archive")
'             Q("Enter SocialHistory_ID") = gtPatient(1).socialHistory.Record_ID
'             Q.Execute
'             '--------------------------------------------------
'             'Mark this archived record with consult archived at
'             '--------------------------------------------------
'             Set Q = Db.QueryDefs("MRQ_SH_Archive_Duringconsult")
'             Q("Enter SocialHistory_ID") = gtPatient(1).socialHistory.Record_ID
'             Q("Enter Consult_ID") = gtconsult.Consult_ID
'             Q("Enter Archive_Reason_ID") = mrArchived_Changed
'             Q.Execute
'           End If
'           '----------------------------------------
'           'Now add a new record or edit the old one
'           '----------------------------------------
'           Set Rs = Db.OpenRecordset("Data_SocialHistory", dbOpenTable)
'           With Rs
'                 If gtPatient(1).socialHistory.Record_ID <> 0 Then
'                       iExistingRecord = True
'                       .Index = "PrimaryKey"
'                       .Seek "=", gtPatient(1).socialHistory.Record_ID
'                       .Edit
'                       If gtPatient(1).socialHistory.Consult_First_noted _
'                          <> gtconsult.Consult_ID Then
'                          dNumber = pnSH_LifeHistory_Changed
'                       Else
'                         dNumber = pnSH_LifeHistory
'                       End If
'                 Else
'                      .AddNew
'                      iExistingRecord = False
'                      dNumber = pnSH_LifeHistory
'                      !Consult_First_noted = gtconsult.Consult_ID
'                      gtPatient(1).socialHistory.Consult_First_noted = gtconsult.Consult_ID
'                 End If
'                 !Consult_ID = gtconsult.Consult_ID
'                 !Description = gtPatient(1).socialHistory.history
'                 .Update
'                 If iExistingRecord = False Then
'                     .MoveLast
'                     gtPatient(1).socialHistory.Record_ID = !SocialHistory_ID
'                     gtPatient(1).SocialHistory_Changed = False
'                 End If
'                 .Close
'             End With
'             '--------------------------------------------------------
'             'If this past history item was created in current consult
'             'archive its existing progress note(s)
'             '--------------------------------------------------------
'             If gtPatient(1).socialHistory.Consult_ID = gtconsult.Consult_ID _
'                And iExistingRecord = True Then
'                 Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'                 Q("Enter Consult_ID") = gtPatient(1).socialHistory.Consult_ID
'                 Q("Enter Table_ID") = mrTable_SH
'                 Q("Enter Record_ID") = gtPatient(1).socialHistory.Record_ID
'                 Q.Execute
'             End If
'             '------------------------------------------
'             'add the progress notes for this item
'             '------------------------------------------
'             If gtPatient(1).socialHistory.history <> "" Then
'                 SProgressText = gtPatient(1).socialHistory.history
'             Else
'                If gtPatient(1).socialHistory.Consult_First_noted <> gtconsult.Consult_ID Then
'                   dNumber = pnSH_LifeHistory_Deleted
'                   SProgressText = "Existing information completely deleted by user"
'                Else
'                   SProgressText = ""
'                End If
'             End If
'             gtPatient(1).socialHistory.Consult_ID = gtconsult.Consult_ID
'
'             If SProgressText <> "" Then
'             Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'                ProgressNotes_Save pnGeneralHistory, dNumber, _
'                       0, "", SProgressText, True, _
'                       mrTable_SH, _
'                      gtPatient(1).socialHistory.Record_ID, _
'                       gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(dNumber).Notes_order, _
'                Rs
'               Rs.Close
'             End If
'
'          Db.Close
'    End If
'    '-------------------------------------------------------------------
'    'If any ethnicity data has changed save this to data_ethnicity table
'    '-------------------------------------------------------------------
'    If gtPatient(1).Ethnicity.DataChanged Then
'          Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'          If gtPatient(1).Ethnicity.ID <> 0 Then
'             '-----------------------------------------
'             'Archive current copy of ethnicity details
'             '-----------------------------------------
'             Set Q = Db.QueryDefs("MRQ_SH_Ethnicity_Archive")
'             Q("Enter Ethnicity_ID") = gtPatient(1).Ethnicity.ID
'             Q.Execute
'             '--------------------------------------------------
'             'Mark this archived record with consult archived at
'             '--------------------------------------------------
'             Set Q = Db.QueryDefs("MRQ_SH_Ethnicity_Archive_Duringconsult")
'             Q("Enter Ethnicity_ID") = gtPatient(1).Ethnicity.ID
'             Q("Enter Consult_ID") = gtconsult.Consult_ID
'             Q("Enter Archive_Reason_ID") = mrArchived_Changed
'             Q.Execute
'          End If
'         '----------------------------------------------------------
'         'Check if new occupation, if yes add to lu_occupation table
'         '----------------------------------------------------------
'         If gtPatient(1).Occupation_ID = 0 And gtPatient(1).Occupation <> "" Then
'            sSql = "Select * from lu_occupations where Description = "
'            sSql = sSql & Chr$(34) & gtPatient(1).Occupation & Chr$(34)
'            Set Rs = Db.OpenRecordset(sSql)
'            With Rs
'            If .EOF + .BOF Then
'               .AddNew
'               .Description = gtPatient(1).Occupation
'               .Update
'               .MoveLast
'               gtPatient(1).Occupation_ID = !Occupation_ID
'               gtPatient(1).Occupation_Changed = False
'             End If
'            End With
'         End If
'         '---------------------------------------------------
'         'Open table data_Ethnicity, and either edit existing
'         'record or create a new one
'         '---------------------------------------------------
'         Set Rs = Db.OpenRecordset("Data_Ethnicity", dbOpenTable)
'         With Rs
'             If gtPatient(1).Ethnicity.ID <> 0 Then
'                 iExistingRecord = True
'                 .Index = "PrimaryKey"
'                 .Seek "=", gtPatient(1).Ethnicity.ID
'                 .Edit
'                 If gtPatient(1).Ethnicity.Consult_First_noted _
'                    <> gtconsult.Consult_ID Then
'                    dNumber = pnSH_Ethnicity_Changed
'                 Else
'                    dNumber = pnSH_Ethnicity
'                 End If
'             Else
'                 .AddNew
'                 iExistingRecord = False
'                 dNumber = pnSH_Ethnicity
'                 !Consult_First_noted = gtconsult.Consult_ID
'                 gtPatient(1).Ethnicity.Consult_First_noted = gtconsult.Consult_ID
'             End If
'             !Consult_ID = gtconsult.Consult_ID
'             !Language_ID = gtPatient(1).Ethnicity.Language_ID
'             !Country_Id = gtPatient(1).Ethnicity.Country_Id
'             !Aboriginal = gtPatient(1).Ethnicity.Aboriginal
'             !Torres_Strait_Islander = gtPatient(1).Ethnicity.Torres_Strait_Islander
'             !Occupation_ID = gtPatient(1).Occupation_ID
'             !Retired = gtPatient(1).Retired
'             .Update
'             gtPatient(1).Ethnicity.DataChanged = False
'             If iExistingRecord = False Then
'                .MoveLast
'                gtPatient(1).Ethnicity.ID = !Ethnicity_ID
'                gtPatient(1).Ethnicity.DataChanged = False
'             End If
'             .Close
'          End With
'             '--------------------------------------------------------
'             'If this past history item was created in current consult
'             'archive its existing progress note(s) (in effect = edit)
'             '--------------------------------------------------------
'             If gtPatient(1).Ethnicity.Consult_ID = gtconsult.Consult_ID _
'                And iExistingRecord = True Then
'                 Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'                 Q("Enter Consult_ID") = gtPatient(1).Ethnicity.Consult_ID
'                 Q("Enter Table_ID") = mrTable_Ethnicity
'                 Q("Enter Record_ID") = gtPatient(1).Ethnicity.ID
'                ' Q("Enter Heading_ID") = gtPatient(1).Ethnicity.ID
'                 Q.Execute
'             End If
'             gtPatient(1).Ethnicity.Consult_ID = gtconsult.Consult_ID
'             SProgressText = "Country of origin is " _
'                 & gtPatient(1).Ethnicity.Country & ", " _
'                 & gtPatient(1).Ethnicity.Language _
'                 & " is " & gtPatient(1).Firstname & "'s main language."
'            If gtPatient(1).Ethnicity.Aboriginal = True Then
'                 SProgressText = SProgressText & "Aboriginality noted."
'            End If
'            If gtPatient(1).Ethnicity.Torres_Strait_Islander = True Then
'                 SProgressText = SProgressText & "Torres-Strait Islander."
'            End If
'            If gtPatient(1).Occupation_ID <> 0 Then
'               SProgressText = SProgressText & " Occupation: " _
'               & gtPatient(1).Occupation
'            End If
'            If gtPatient(1).Retired = True Then
'               SProgressText = SProgressText & " (Retired)"
'            End If
'            '------------------------------------------
'            'add the progress notes for this item
'            '------------------------------------------
'            Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'                ProgressNotes_Save pnGeneralHistory, dNumber, _
'                       0, "", SProgressText, True, _
'                       mrTable_Ethnicity, _
'                      gtPatient(1).Ethnicity.ID, _
'                       gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(dNumber).Notes_order, _
'                       Rs
'         Rs.Close
'         Db.Close
'    End If
'    Exit Sub
'
'     sMsg = "An error occurred whilst saving the social history." & vbLf & vbLf
'     sMsg = "If the problem exists please contact technical support."
'     lresponse = MsgBox(sMsg, vbOKOnly, "Family and Social History")
'     Exit Sub
' End Sub
'
' Private Sub Command3_Click(Index As Integer)
'     Dim icounter As Integer
'     'itdbgrid2_image = cGrID_Image_None
'     Select Case iCurrentSection
'     Case cSection_Measure
'     Select Case Index
'            Case 0
'                 '--------------------------------------------------
'                 'Keep measurement type but clear rest of input area
'                 '--------------------------------------------------
'                 bExitRoutine = True
'                 Erase gtMeasurement(0).Values()
'                 ReDim Preserve gtMeasurement(0).Values(0)
'                 For icounter = 1 To 5
'                     Text3(icounter) = ""
'                 Next
'                 Pego1.Visible = False
'                 Picture2.Visible = False
'                 Text3(1).SetFocus
'                 iEditing = False
'                 bExitRoutine = False
'            Case cButtonCancel 'clear the input area
'                 bExitRoutine = True
'                 For icounter = 0 To 5
'                     Text3(icounter) = ""
'                 Next
'                 bExitRoutine = False
'                 Erase gtMeasurement()
'                 ReDim gtMeasurement(0)
'                 ReDim gtMeasurement(0).Values(0)
'                 Pego1.Visible = False
'                 Picture2.Visible = False
'                 Text3(0).SetFocus
'                 iEditing = False
'
'             Case 2
'                 Measure_Accept
'             Case 3
'                '------------------------------
'                'Graph current measurement type
'                '------------------------------
'               Graph gtMeasurement(0).Full_Description, _
'                     gtMeasurement(0).Type_ID, _
'                     gtMeasurement(0).Unit_text, _
'                     gtMeasurement(0).HelpFile, _
'                     gtMeasurement(0).Ozcode
'             End Select
'     Case cSection_Overview
'
'     Case cSection_FamilyandSocialHistory
'          Select Case Index
'          Case cButtonCancel 'clear, ie New relation, blank all input area
'                 bExitRoutine = True
'                 For icounter = cTxt_FHRelativeName To cTxt_FHDOB
'                     Text3(icounter) = ""
'                 Next
'                 Option2(0).Value = False 'died of condition yes
'                 Option2(1).Value = False 'died of condition no
'                 lozcode = 0
'                 iRelationship_ID = 0
'                 sRelationship_Name = ""
'                 iEditing = False
'                 TempText = ""
'                 Picture2.Visible = False
'                 Text3(cTxt_FHRelativeName).SetFocus
'                   bExitRoutine = False
'          Case 0 'new condition, keep relations name and relationship
'                 If iRelationship_ID = 0 Then
'                     Command3_Click (1)
' Exit Sub
'                 End If
'                 bExitRoutine = True
'                 For icounter = cTxt_FHDisease To cTxt_FHDiedOfThis
'                      Text3(icounter) = "" 'the condition
'                 Next
'                 Text3(cTxt_FHDisease).SetFocus
'                 iEditing = False
'                 TempText = ""
'                 lozcode = 0
'                 sSearchText = ""
'                 bExitRoutine = False
'          Case 2
'             '-----------------------------------------------------------------------
'             'Move the data back into the gtpatient(1).FamilyMedicalHistory etc array
'             '-----------------------------------------------------------------------
'             FH_Accept
'           End Select
'     Case cSection_PastHistory
'          Select Case Index
'          Case cButtonCancel 'the cancel current input button
'                  bExitRoutine = True
'                  For icounter = 0 To 3
'                     Text3(icounter) = ""
'                  Next
'                 bExitRoutine = False
'
'                 check1(0).Value = False 'was an operation
'                 check1(1).Value = False 'is active
'                 check1(2).Value = False
'                 check1(3).Value = 1 'default to significant consult
'                 For icounter = 0 To 2
'                     Option2(icounter).Value = False
'                 Next
'                 sSearchText = ""
'                 Text3(0).SetFocus
'                 lozcode = 0
'                 ipastHistory_PreExistingCondition = False
'                 iArrayPosition = -1
'                 Picture2.Visible = False
'                 iEditing = False
'          Case 2
'              PastHistory_Accept
'
'          End Select
'     Case cSection_NewNotes
'
'         Case cSection_SOAP
'         Case cSection_Reports
'                 bExitRoutine = True
'                 For icounter = 0 To 5
'                     Text3(icounter) = ""
'                     check1(icounter).Value = False
'                 Next
'                 iEditing = False
'                 Command3(2).Enabled = True
'                 bExitRoutine = False
'         Case cSection_Allergies
'                 Select Case Index
'                 Case cButtonCancel 'Cancel
'                     bExitRoutine = True
'                     Erase gtNew_allergy() 'erase existing data
'                     ReDim gtNew_allergy(0)
'                     gtNew_allergy(0).definite = True
'                     gtNew_allergy(0).Type = mrDrug_Allergy
'                     Option2(0).Value = True
'                     For icounter = 0 To 4
'                         Text3(icounter) = ""
'                     Next
'                     check1(0).Value = 1 'default allergy to definite
'                     check1(1).Value = 0 'default to not generic specific
'                     Text3(0) = sToday
'                     Text3(1).SetFocus
'                     iEditing = False
'                     TempText = ""
'                      RichTextBox1(0).Text = ""
'                      Picture2.Visible = False
'                     bExitRoutine = False
'                 Case 2
'                     Allergy_Accept
'                 End Select
'         Case cSection_Script
'                 Select Case Index
'                 Case 0
'                      '---------------------------------------------------
'                      'Is user has requested an authority, show one if the
'                      'item is pbs or rpbs, otherwise don't. Also if the
'                      'drug is an actual authority item, display the aia
'                      '---------------------------------------------------
'                      If gtNew_ScriptItem(0).AuthorityScript = False _
'                         And gtNew_ScriptItem(0).pbs <> "" _
'                         And Command3(0).Caption = ">&Authority" Then
'                         Design_Panel_Script_Authorities True
'                         If gtNew_ScriptItem(0).authcode <> 0 Then
'                            Dim iNumRows As Integer
'                            Script_Authority_GetDetails gtNew_ScriptItem(0).authcode, iNumRows
'                             Script_Authority_DisplayList iNumRows
'                         Else
'                           If check1(0).Value And InStr(gtNew_ScriptItem(0).pbs, "RPBS") Then
'                             lblMasterHeading.Caption = "RPBS AUTHORITY (1800 552580)"
'                             gtNew_ScriptItem(0).Print_Status = "RPBS"
'                             gtNew_ScriptItem(0).AuthorityScript = True
'                             Label2(7).Caption = "AUTH Drug"
'                             If gtPatient(1).VeteranNo <> "" Then
'                                 Label8.Caption = "  " & gtPatient(1).VeteranNo & "  "
'                             Else
'                                 Label8.Caption = " Veteran no. missing "
'                             End If
'                           Else
'                             lblMasterHeading.Caption = "PBS AUTHORITY (1800 888333)"
'                             gtNew_ScriptItem(0).Print_Status = "PBS"
'                             gtNew_ScriptItem(0).AuthorityScript = True
'                             Label2(7).Caption = "AUTH Drug"
'                             If gtPatient(1).MedicareNo <> "" Then
'                                  Label8.Caption = "  " & Format(gtPatient(1).MedicareNo, "#### ##### #") & "  "
'                             Else
'                                  Label8.Caption = " Medicare no. missing "
'                             End If
'
'                           End If
'                           If Text3(5) <> "" Then
'                              Text2(0) = Trim(Text3(5))
'                              Text2(2).SetFocus
'                           Else
'                              Text2(0).SetFocus
'                           End If
'                           gtNew_ScriptItem(0).Inc_Quantity_via_Auth = True
'                         End If
'                         If gtNew_ScriptItem(0).Authorityno = "" Then
'                             Script_Authority_GetNumber gtNew_ScriptItem(0).Authorityno
'                             Label3.Caption = "No. " & gtNew_ScriptItem(0).Authorityno
'                          End If
'                      Else
'                         Design_Panel_Script_Authorities False
'                         Text1_LostFocus
'                       End If
'                 Case cButtonCancel 'Cancel
'                     With SSActiveTabs1 'the top tab control
'                         .height = Shape_TopRightHeight.height
'                     End With
'                     Script_EditArea_Clear
'                     Call Text3_GotFocus(2)
'                     Script_Brand_GetList "*!+%"
'                     Text3(2).SetFocus
'                 Case 2
'                     Script_Item_Accept
'                 Case 3 'show Mims PI
'                     If gtNew_ScriptItem(0).Brand <> "" Then
'                         Script_ProductInformation_Get gtNew_ScriptItem(0).Brand, gtNew_ScriptItem(0).Formulation
'                     End If
'                 Case 4
'                     Script_Getlist_equivalentBrands
'                 End Select
'         Case cSection_Recalls
'              Select Case Index
'              Case cButtonCancel
'                 bExitRoutine = True
'                 Picture2.Visible = False
'                 '----------------------------------------------------
'                 'Clear array and set defaults Default to doctor using
'                 'the package, letter = 0 and standard consult = 0
'                 '----------------------------------------------------
'                 ReDim gtEditArea_Recall(0)
'                 gtEditArea_Recall(0).Method_ID = 0
'                 gtEditArea_Recall(0).Length_ID = 0
'                 gtEditArea_Recall(0).Doctor_ID = gtDoctor.Doctor_ID
'                 gtEditArea_Recall(0).Doctor_firstname = gtDoctor.Firstname
'                 gtEditArea_Recall(0).Doctor_Surname = gtDoctor.Surname
'                 Text3(0) = "Dr " & gtDoctor.Firstname & " " & gtDoctor.Surname
'                 '-------------------------------
'                 'Visually clear the editing area
'                 '-------------------------------
'                 For icounter = 1 To 5
'                     Text3(icounter) = ""
'                 Next
'                 check1(0).Value = False
'                 iEditing = False
'                 Command3(2).Enabled = True
'                 bExitRoutine = False
'                 Text3(1).SetFocus
'              Case 2
'                 Recalls_Accept
'              End Select
'         Case cSection_requests
'              Select Case Index
'              Case cButtonCancel 'cancel
'                  Requests_Forms_Cancel
'              Case 2
'                  Requests_Forms_Accept
'          End Select
'         Case cSection_Referrals
'              Select Case Index
'              Case cButtonCancel
'                  '------------------------------
'                  'erase current referral details
'                  '------------------------------
'                  Picture2.Visible = False
'                  bExitRoutine = True
'                  ReDim gtNew_Referral(0)
'                  For icounter = 0 To 9
'                       Text3(icounter) = ""
'                  Next
'                  For icounter = 0 To 5
'                      check1(icounter).Value = 0
'                  Next
'                  check1(7).Value = 0
'                  RichTextBox1(0).Text = ""
'                  sTempText = ""
'                  iEditing = False
'                  Text5 = "" 'the problem text box above edit area
'                  bExitRoutine = False
'                  Text3(0).SetFocus
'             Case 2
'                 '--------------------------
'                 'Preview the letter in full
'                 '--------------------------
'                 If Trim(Text3(cReferrals_Person)) <> "" And Trim(Text3(cReferrals_ReasonFor)) <> "" Then
'                     RichTextBox1(1).Text = ""
'                     sReferralText = RichTextBox1(0).Text
'                     mrReferral_status = mrReferral_Preview
'                     Dim sLetterText As String
'                     Referrals_Letter_Generate sLetterText
'                     Referrals_Letter_Preview sLetterText
'                     '------------------------------
'                     'Presume a tag for the filesave
'                     '------------------------------
'                     Text7 = Trim(Text3(cReferrals_Person).Text)
'                     iCentralDisplay = cCentralDisplay_PreviewLetter
'                     Command2(4).Caption = "&Close"
'                 Else
'                     If Text3(cReferrals_Person) = "" Then
'                        Text3(cReferrals_Person).SetFocus
'                     ElseIf Text3(cReferrals_ReasonFor) = "" Then
'                            Text3(cReferrals_ReasonFor).SetFocus
'                     End If
'                 End If
'              End Select
'
'     Case cSection_Immunisations
'          bExitRoutine = True
'          Select Case Index
'          Case 0 'next vaccine in schedule wipe out only vaccine details
'           '     bExitRoutine = True 'dog
'           '     For icounter = 0 To 4
'           '         Text3(icounter) = ""
'           '     Next
'           '     iVaccine_ID = 0
'           '     Text3(0).SetFocus
'           '     bExitRoutine = False
'          Case cButtonCancel 'cancel or clear
'                 For icounter = 0 To 4
'                     Text3(icounter) = ""
'                 Next
'                 bExitRoutine = False
'                 iSchedule_ID = 0
'                 iVaccine_ID = 0
'                 Picture2.Visible = False
'                 Call Text3(0).SetFocus
'           Case 2
'             Picture2.Visible = False
'             IMM_Accept
'          End Select
'          bExitRoutine = False
'     End Select
'
' End Sub
' Sub IMM_Accept()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  iVaccine                      iPre_existingVaccine                                    *
' '******************************************************************************************
'
'
'
'     Dim iVaccination_Done As Integer
'     Dim ix As Integer
'     Dim iSchedID As Integer
'     Dim iVaccID  As Integer
'     Dim iScheduleExists As Integer
'     '----------------------------------------------------------------
'     'Takes the data from the editing area and puts into into the
'     'gtpatient(1).vaccination()array. The data may be entirely new or
'     'the user may be editing old data.
'     '-----------------------------------------------------------------
'     iVaccination_Done = False
'     '------------------------------
'     'Check there is any data at all
'     '------------------------------
'     If iVaccine_ID = 0 Or iSchedule_ID = 0 Or Len(Text3(2)) = 0 Then
'        sMsg = "You have not entered valid immunisation data. "
'        sMsg = sMsg & "At a minimum you must select from the lists provided:" & vbLf & vbLf
'        sMsg = sMsg & "the vaccine shedule eg Typhoid" & vbLf
'        sMsg = sMsg & "a vaccine name         eg Typhim VI" & vbLf & vbLf
'        sMsg = sMsg & "a valid date                 eg 01/01/1999 or just 1999"
'        lresponse = MsgBox(sMsg, vbOKOnly, "Immunisation data")
'        Exit Sub
'     End If
'     '---------------------------------------------------------------------
'     'If there are schedules listed in the list1(0), first check if the
'     'schedule of which the vaccine is part already exists for this patient
'     'and if the vaccine being changed or added is part of this schedule
'     'iSchedID and iVaccID are internal to this subroutine
'     'iShedule_ID and iVaccination_ID are set when user edits/adds vaccine
'     '---------------------------------------------------------------------
'     If List1(0).ListCount <> 0 Then
'             For icounter = 0 To UBound(gtPatient(1).Vaccinations())
'             '-------------------------------------------------------------
'             'if a Schedule Id and a Vaccine_ID exist in the array
'             'the vaccine has been previously recorded and is being updated
'             'or may be a booster vaccine eg 10 yearly tetanus needly
'             '-------------------------------------------------------------
'             If LCase(Trim(Text3(0))) <> "" And gtPatient(1).Vaccinations(icounter).Deleted <> True Then
'               iSchedID = gtPatient(1).Vaccinations(icounter).Schedule.ID
'               iVaccID = gtPatient(1).Vaccinations(icounter).Vaccine.ID
'                '----------------------------------------------------
'                'If the schedule exists in list1(0) then check if the
'                'vaccine exists - if yes keep array place in iX
'                '----------------------------------------------------
'                If (iSchedID = iSchedule_ID) Then
'                   iScheduleExists = True
'                   If iVaccID = iVaccine_ID Then
'                     iVaccination_Done = True
'                     '--------------------------------------
'                     'Check and see if the date is different
'                     '--------------------------------------
'                     If gtPatient(1).Vaccinations(icounter).Date_given <> Trim(Text3(2)) Then
'                         sMsg = "This vaccine is identical to one in the list, except the date "
'                         sMsg = sMsg & "given is different." & vbLf & vbLf
'                         sMsg = sMsg & "Is this a booster? "
'                         lresponse = MsgBox(sMsg, vbYesNo, "Possible Duplicate Immunisation")
'                         If lresponse = vbNo Then
'                              ix = icounter    'keep pointer to place in the array
'                         Else
'                             iVaccination_Done = False
'                         End If
'                     Else
'                        ix = icounter
'
'                     End If
'                     Exit For
'                   End If
'                End If
'             End If
'         Next
'     End If
'     '--------------------------------------------------------------
'     'Possibilities:
'     '1:This is a new shedule - no current entry in the schedule list
'     '  list1(0) for this schedule add a new member to the array and
'     '  remove any existing vaccine details from list1(1)
'     '-------------------------------------------------------------
'     If iScheduleExists = False Then
'        If List1(0).ListCount = 0 Then
'          ix = 0
'        Else
'         ix = UBound(gtPatient(1).Vaccinations()) + 1
'        End If
'         ReDim Preserve gtPatient(1).Vaccinations(ix)
'         List1(0).AddItem Trim(Text3(0))
'         List1(0).ItemData(List1(0).NewIndex) = iSchedule_ID
'         List1(1).Clear
'
'      End If
'     '----------------------------------------------------------------
'     '2:The shedule does exist, but this vaccine has not been given
'     '  add a new member to the array
'     '----------------------------------------------------------------
'     If iScheduleExists = True And iVaccination_Done = False Then
'          ix = UBound(gtPatient(1).Vaccinations()) + 1
'          ReDim Preserve gtPatient(1).Vaccinations(ix)
'     End If
'     '----------------------------------------------------------------
'     '3:The schedule does exist and so does the vaccine - the
'     '  ix value points already to this spot in the array
'     '----------------------------------------------------------------
'     'at this point we will be either editing an existing schedule, or
'     'about to add data to a new schedule
'     '----------------------------------------------------------------
'     gtPatient(1).Vaccinations(ix).DataChanged = True
'     gtPatient(1).Vaccinations(ix).Schedule.Name = Trim(Text3(0))
'     gtPatient(1).Vaccinations(ix).Schedule.ID = iSchedule_ID
'     gtPatient(1).Vaccinations(ix).Date_given = Trim(Text3(2))
'     gtPatient(1).Vaccinations(ix).Reaction = Trim(Text3(4))
'     gtPatient(1).Vaccinations(ix).Vaccine.ID = iVaccine_ID
'     gtPatient(1).Vaccinations(ix).Vaccine.Name = Trim(Text3(1))
'     gtPatient(1).Vaccinations(ix).Vaccine.Serial_No = Trim(Text3(3))
'     gtPatient(1).Vaccinations(ix).Vaccine.Trade_Name = sVaccine_Trade_Name
'     gtPatient(1).Vaccinations(ix).Vaccine.Formulation = svaccine_Formulation
'     gtPatient(1).Vaccinations(ix).Vaccine.Abbreviation = sVaccine_Abbreviation
'     gtPatient(1).Vaccinations_datachanged = True
'     gtPatient(1).DataChanged = True
'
'     '----------------------------------------------------------
'     'now refresh the list for the schedule shown in list1(0)
'     'if vaccine not given, add to the lists, otherwise the vaccine
'     'name already exists in list1(1), so don't do anything
'     '----------------------------------------------------------
'     If iVaccination_Done = False Then
'         List1(1).AddItem sVaccine_Trade_Name & "  (" & sVaccine_Abbreviation & ") - " & Trim(Text3(2))
'     End If
'     If iScheduleExists = False Then
'        List1(0).ListIndex = List1(0).ListCount - 1
'     End If
'     If iVaccination_Done = False Then
'
'         Command3_Click (1)      'clear the editing area
'         Text3(0).SetFocus
'     End If
'     '------------------------------------
'     'Update the consultationSummary Array
'     '------------------------------------
'    Command2(0).Enabled = True 'the save button
' End Sub
'
'
' Private Sub Form_Load()
'    'remove all temp stuff such as preferences later
'    gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsList
'    gtPreferences.ReportPageZoom = 75
'    Enable_Controls Me, False
'    sSpellDataDir = "c:\medrec\data"
'    bExitRoutine = True
'    itdbgrid1_image = cGrID_Image_None
'    itdbgrid2_image = cGrID_Image_None
'    iStopAllKeyBoardInput = True
'    sDefaultAustralianState = "NSW" 'later get from ini file
'    sLateralisation_ID(1) = "left"
'    sLateralisation_ID(2) = "right"
'    sLateralisation_ID(3) = "bilateral"
'     '---------------------------------------------
'     'remove these when finished, get from ini file
'     '---------------------------------------------
'     mrPromptBeforePrint = False
'     '----------------------------------------------
'     bExitRoutine = True
'     '------------------------------------------------------------
'     'this panel covers the entire screen to hide all the graphics
'     '------------------------------------------------------------
'     Picture1(2).height = Screen.height
'     'Picture1(2).Visible = True
'     Timer2.Enabled = False
'     ReDim gtPatient(0 To 1) As tPatient
'     '-------------------------------------------------------------
'     'Get doctor name and ID from the oLogon object then destroy it
'     '-------------------------------------------------------------
'     gtDoctor.Doctor_ID = oLogon.Doctor_ID
'     gtDoctor.Firstname = oLogon.DoctorFirstname
'     gtDoctor.Surname = oLogon.DoctorSurname
'     gtDoctor.Provider_number = oLogon.Doctor_ProviderNumber
'     gtDoctor.Prescriber_Number = oLogon.Doctor_PrescriberNumber
'     Set oLogon = Nothing
'     '--------------------------
'     'Start the failsafe logging
'     '--------------------------
'     'bUseLogging = False
'     'Start_FAILSAFE_LOG sMedRec_Ini, "LogFile_Main", sMain_Dir, Me
'     iLoading = True
'     Get_SurgeryAddress              'Address of their surgery
'     Get_DoctorsPreferences          'how they want program to behave
'     Spelling_OpenDictionaries            'link to dictionaries for spelling
'     LinktoDemographicData           'link to source of patient data
'     LinktoHelpFiles                 'set up links to helpo files
'     Me.Caption = "DrsDesk Medical Records" & " [ Dr " & UCase(left(gtDoctor.Firstname, 1)) & " " & gtDoctor.Surname & "]"
'     Highlight_Control TDBGrid1(0), True, Line1(7), Line1(8)
'     'PositionSSActiveTab1 "save"
'     SSActiveToolBars1.Tools("ID_ComboBox").ComboBox.ListIndex = 6
'     ProgressNotes_GetConstants
'     '-------------------------------------------------
'     'Load layouts which do not change between sections
'     '-------------------------------------------------
'     Design_Panel_Overview
'     Load_Layout "Review", TDBGrid1(1), cGrID_Image_Reviews
'     Load_Layout "Scratchpad", TDBGrid1(2), cGrID_Image_ScratchPad
'     Call FormPosition_Load(Me)
'
' End Sub
'
'
'
'
'
' Sub Patient_Get_Medications(iActive As Integer)
'     Dim ws As Workspace
'     Dim Db As Database
'     Dim Rs As Recordset
'     Dim Q As QueryDef
'     Dim ix As Integer
'     '-------------------------------------------------------------------
'     'displays active medications if iActive is true or inactive if false
'     '-------------------------------------------------------------------
'     bExitRoutine = True
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Script_GetMedications")
'     Q("Enter Patient ID") = gtPatient(1).Patient_ID
'     If iActive Then
'        Q("Enter Current Medication") = True
'        TDBGrid1(0).Caption = "Active Medications"
'     Else
'        Q("Enter Current Medication") = False
'        TDBGrid1(0).Caption = "Inactive Medications"
'     End If
'     Set Data2.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data2) Then
'            Set Data2RsClone = Data2.Recordset.Clone
'            Set ucfField_Active = Data2RsClone.Fields!active
'            Set ucfField_Active_units = Data2RsClone.Fields!active_units
'            Set ucfField_Per_volume = Data2RsClone.Fields!per_volume
'            Set ucfField_Per_vol_units = Data2RsClone!per_vol_units
'            Set ucfField_Unit_volume = Data2RsClone.Fields!unit_volume
'            Set ucfField_Unit_vol_units = Data2RsClone.Fields!unit_vol_units
'            Set ucfField_Units_per_pack = Data2RsClone.Fields!Quantity
'            Set ucfField_Quantity = Data2RsClone!Quantity
'            Set ucfField_Repeats = Data2RsClone!Repeats
'            Erase gtPatient(1).medications()
'            On Error Resume Next
'            ix = 0
'            With Data2RsClone
'             Do Until .EOF
'                 If !Current_medication = True Then
'                     ReDim Preserve gtPatient(1).medications(ix)
'                     gtPatient(1).medications(ix).drug = !drug
'                     gtPatient(1).medications(ix).Instructions = !Instruction
'                     gtPatient(1).medications(ix).Prescribed_For = !Prescribed_For
'                     sMsg = "" & !active & "" & !active_units
'                     If !per_volume <> "" Then
'                      sMsg = sMsg & "/" & !per_volume
'                     End If
'                     sMsg = Trim(sMsg & !per_vol_units & " " & !unit_volume & !unit_vol_units & " ")
'                     gtPatient(1).medications(ix).Strength = sMsg
'                     ix = ix + 1
'                 End If
'                 .MoveNext
'             Loop
'           End With
'     End If
'    Load_Layout "Medications", TDBGrid1(0), cGrID_Image_Medications
'    bExitRoutine = False
'    SSActiveTabs1.height = Shape_TopRightHeight.height
'
'    With TDBGrid1(0)
'         .HoldFields
'         .ReBind
'         .height = SSActiveTabPanel1.height - 48
'         .toP = 24
'         .left = 24
'         .width = SSActiveTabPanel1.width - 48
'    End With
'    Screen.MousePointer = vbArrow
' End Sub
'
'
'
'
'
'
' Private Sub Option2_Click(Index As Integer)
'     If bExitRoutine Then Exit Sub
'
'     Select Case iCurrentSection
'     Case cSection_requests
'          gtNew_Form(0).Billing = Index + 1
'
'     Case cSection_Allergies
'         '---------------------------------------------
'         'Set the reaction as an allergy of sensitivity
'         '---------------------------------------------
'          If Option2(0).Value Then
'             For icounter = 0 To UBound(gtNew_allergy())
'                 gtNew_allergy(icounter).Type = mrDrug_Allergy
'             Next
'          Else
'             For icounter = 0 To UBound(gtNew_allergy())
'                 gtNew_allergy(icounter).Type = mrDrugClass_Sensitivity
'             Next
'          End If
'
'    '
'    Case cSection_FamilyandSocialHistory
'      '   If Trim(Text3(2)) <> "" Then
'      '       If Option2(0).Value = True Then
'      '           If Trim(Text3(3)) <> "" And Trim(Text3(5)) = "" Then
'      '                Text3(5) = Text3(3) 'assume same year of death
'      '                 Text3(5).SetFocus
'      '           End If
'      '       End If
'      '   Else
'      '       Option2(0).Value = False
'      '       Option2(1).Value = False
'     ' End If
'   End Select
' End Sub
'
' Private Sub Option2_KeyPress(Index As Integer, KeyAscii As Integer)
'
'    Select Case iCurrentSection
'    Case cSection_PastHistory
'          If KeyAscii = vbKeyReturn Then
'             Text3(1).SetFocus
'          End If
'    ' Case cSection_FamilyandSocialHistory
'    '      If Index = 1 Then
'    '         If KeyAscii = vbKeyReturn Then
'    '            Command3(cEdit_Accept).SetFocus 'the accept this data ok button
'    '            End If
'    '      End If
'    '
'     End Select
' End Sub
'
' Private Sub Option3_Click(Index As Integer)
'     If bExitRoutine = True Then
'        Exit Sub
'     End If
'     Select Case iCurrentSection
'     Case cSection_Overview
'
'     Case cSection_FamilyandSocialHistory
'
'     Case cSection_PastHistory
'          If Option3(2).Value = True Then
'             Option3(2).TabStop = False
'             For icounter = 0 To 2
'                 bExitRoutine = True
'                 Text2(icounter) = ""
'                 bExitRoutine = False
'             Next
'          ElseIf Option3(0).Value = True Then
'                 Option3(0).TabStop = False
'                 Text2(2) = ""
'          End If
'          RecreationalDrugs_smoking_FormatData
'     Case cSection_NewNotes
'
'     End Select
' End Sub
'
' Private Sub Option4_Click(Index As Integer)
'    If bExitRoutine Then Exit Sub
'     bExitRoutine = True
'     If Trim(Text2(3)) = "" Then
'        Option4(0).Value = False
'        Option4(1).Value = False
'
'     End If
'     If Option4(3).Value = True Then
'        Option4(3).TabStop = False
'        Text2(3) = ""
'     End If
'     bExitRoutine = False
'     RecreationalDrugs_Alcohol_FormatData
'
' End Sub
'
' Private Sub Richtextbox1_Change(Index As Integer)
'
'     If bExitRoutine Then
'        Exit Sub
'     End If
'     Select Case Index
'     Case 0
'         '------------------------------------------------------
'         'Code only used if in family and social history section
'         '------------------------------------------------------
'         If iCurrentSection <> cSection_FamilyandSocialHistory Then
'   Exit Sub
'         End If
'         'If existing family history <> new contents of family history
'
'
'         If gtPatient(1).socialHistory.history <> Trim(RichTextBox1(0).Text) Then
'            'If there is something there then set flags to save it
'            If Trim(RichTextBox1(0).Text) <> "" Then
'                 gtPatient(1).SocialHistory_Changed = True
'                 gtPatient(1).DataChanged = True
'                 gtPatient(1).socialHistory.history = Trim(RichTextBox1(0).Text)
'            Else
'                'If there is nothing there
'                If gtPatient(1).socialHistory.Consult_First_noted <> 0 Then
'                 gtPatient(1).SocialHistory_Changed = True
'                 gtPatient(1).DataChanged = True
'                 gtPatient(1).socialHistory.history = ""
'
'                End If
'            End If
'         Else
'            gtPatient(1).SocialHistory_Changed = False
'            gtPatient(1).DataChanged = False
'         End If
'     Case 1
'           If iCentralDisplay = cCentralDisplay_ExistingLetter Then
'              If sTempText <> RichTextBox1(1).TextRTF Then
'                 ' With Command2(4)
'                  '   .Visible = True
'                  '   .Caption = "&Save"
'                  'End With
'                  'With Command2(3)
'                  '   .Caption = "&Print Referral"
'                  'End With
'                  With Label4
'                     .left = 10
'                     .Caption = "CHANGED REFERRAL LETTER - Enter new tag:"
'                  End With
'                  With Text7
'                     .Font.Name = "Verdana"
'                     .Font.Size = 7
'                     .left = Label4.left + Label4.width + 50
'                     .height = Label4.height
'                     .ForeColor = vbRed
'                     .toP = Label4.toP
'                     .Text = ""
'                    ' .width = Picture5.width - Label4.Left - Label4.width - 300
'                     .Visible = True
'                  End With
'                  iEditing = True
'                '  gtPatient(1).DataChanged = True
'              Else
'                  iEditing = False
'                  With Command2(4)
'                      .Visible = True
'                      .Caption = "&Close"
'                  End With
'                  Text7.Visible = False
'                  sMsg = Data2.Recordset!File_name
'                  sMsg = right(sMsg, Len(sMsg) - (InStr(sMsg, " ")))
'                  Label4.Caption = "REFERRAL LETTERS: " & sMsg
'                  Command2(3).Caption = "Reprint Letter"
'              End If
'           End If
'     End Select
' End Sub
' Sub Reports()
'   '  Data2.DatabaseName = sMEDREC_MDB
'   '  Data2.RecordSource = "Select * from all_patients_over_65"
'   '  Data2.Refresh
'   ' TDBGrid1(0).LayoutFileName = "C:\MedRec\Data\Patients over 65.grx"
'   ' TDBGrid1(0).LayoutName = "Patients_over_65"
'   ' TDBGrid1(0).LoadLayout
'   ' TDBGrid1(0).ReBind
'   ' SSpanel3(1).ZOrder
'   ' SSpanel3(1).Align = 5
'
' End Sub
'
' Private Sub RichTextBox1_DblClick(Index As Integer)
'        Select Case Index
'        Case 0
'        If iCurrentSection = cSection_Overview Then
'           Show_Section "Family and Social"
'        End If
'        If iCurrentSection = cSection_Script Then
'           Script_Interactions_3_DisplayText
'        End If
'        Case 1
'        End Select
' End Sub
'
' Private Sub Richtextbox1_LostFocus(Index As Integer)
'     ' If iCurrentSection <> cSection_FamilyandSocialHistory Then
'     '    Exit Sub
'     ' End If
'     ' gtPatient(1).socialHistory.history = RichTextBox1(0).Text
' End Sub
'
' Private Sub RichTextBox1_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
'        Select Case iCurrentSection
'        Case cSection_Script
'             If Index = 0 Then
'                 Select Case Button
'                 Case vbKeyRButton
'                      RichTextBox1(0).Tag = "Interactions"
'                      SSActiveToolBars1.Tools("ID_GeneralMenuChangefont").Enabled = False
'                      SSActiveToolBars1.Tools("ID_GeneralMenuSAvefont").Enabled = False
'                      Set SourceControl = RichTextBox1(0)
'                      SSActiveToolBars1.PopupMenu "ID_OverviewPopUp"
'                 End Select
'             End If
'        Case cSection_Immunisations
'           If Index = 0 Then
'                 Select Case Button
'                 Case vbKeyRButton
'                      RichTextBox1(0).Tag = "Missing Immunisations"
'                      Set SourceControl = RichTextBox1(0)
'                      SSActiveToolBars1.PopupMenu "ID_OverviewPopUp"
'
'                 End Select
'             End If
'        Case cSection_Allergies
'             If Index = 0 Then
'                 Select Case Button
'                 Case vbKeyRButton
'                      RichTextBox1(0).Tag = "Allergy Class Notes"
'                      Set SourceControl = RichTextBox1(0)
'                      SSActiveToolBars1.PopupMenu "ID_OverviewPopUp"
'
'                 End Select
'             End If
'        Case cSection_Overview, cSection_FamilyandSocialHistory, cSection_Demographics
'        Select Case Index
'         Case 0
'             Select Case Button
'             Case vbKeyRButton
'                  RichTextBox1(0).Tag = "Social History"
'                  Set SourceControl = RichTextBox1(0)
'                  SSActiveToolBars1.PopupMenu "ID_OverviewPopUp"
'
'             End Select
'         Case 1
'             Select Case Button
'             Case vbKeyRButton
'                  RichTextBox1(1).Tag = "Demographic History"
'                  Set SourceControl = RichTextBox1(1)
'                  SSActiveToolBars1.PopupMenu "ID_OverviewPopUp"
'             End Select
'
'         End Select
'        Case cSection_Referrals
'          Select Case Button
'           Case vbKeyRButton
'                 If Index = 0 Then
'                         RichTextBox1(0).Tag = "Referral Letter Minimized"
'                 Else
'                         RichTextBox1(1).Tag = "Referral Letter Maximized"
'                 End If
'                 Set SourceControl = RichTextBox1(Index)
'                 SSActiveToolBars1.PopupMenu "ID_OverviewPopUp"
'
'
'          End Select
'
'        End Select
' End Sub
'
' Private Sub rtb2_LostFocus()
'             'used in pi section  - later make this exclusive to this
'             rtb2.Visible = False
'             Picture1(5).Visible = False
' End Sub
'
' Private Sub SSActiveTabs1_Click()
'  SSActiveTabs1.height = Shape_TopRightHeight.height
'  Select Case SSActiveTabs1.SelectedTab.Key
'   Case "medications"
'        If TDBGrid1(0).Caption = "Active Medications" Then
'             Script_PastMeds_ViewInActive
'        Else
'             Script_PastMeds_ViewActive
'        End If
'   Case "recall"
'         Recalls_GetForPatient
'   Case "requests"
'         If gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsList Then
'            gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsForm
'         Else
'            gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsList
'         End If
'         itdbgrid2_image = cGrID_Image_Requests
'         Requests_Patients_List_Get
'   Case "referrals"
'         itdbgrid2_image = cGrID_Image_Letters
'         Referrals_GetList_ForPatient
'
'   Case "graphs"
'      Measure_AvailableList
'   End Select
' End Sub
' Sub Print_Section()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  sLetterText                                                                           *
' '******************************************************************************************
'
'    '-----------------------------------------------------------------------
'    'If the central display area is overlying any other section deal with it
'    '-----------------------------------------------------------------------
'    If Picture5.Visible Then
'     Select Case iCentralDisplay
'          Case cCentralDisplay_PreviewLetter
'               '------------------------------------------
'               'Printing a newly generated referral letter
'               '------------------------------------------
'               Referrals_Letter_PrintAndSave
'          Case cCentralDisplay_ExistingLetter
'               '---------------------------------------------
'               'Reprint either an existing referral or report
'               '---------------------------------------------
'               Letter_ReprintExisting
'          Case cCentralDisplay_PI
'               '----------------------------------
'               'Print the drug product information
'               '----------------------------------
'               Script_PI_Print
'          Case cCentralDisplay_Interactions
'               '---------------------------------------
'               'Print drug interactions for the patient
'               '---------------------------------------
'                Script_Interactions_Print
'          End Select
'          Picture5.Visible = False
'          DoEvents
'          Exit Sub
'    Else
'        '--------------------------------------------------
'        'Print whatever is required for the current section
'        '--------------------------------------------------
'         Select Case iCurrentSection
'
'          Case cSection_Overview
'               Overview_Print
'          Case cSection_Referrals
'               Referrals_Letter_PrintAndSave
'          Case cSection_Demographics
'
'              With rtb2
'                 .Font.Name = "Times New Roman"
'                 .Font.Size = 12
'                 .RightMargin = 20
'              End With
'              rtb2.Text = RichTextBox1(1).Text
'              Printer.Print ""
'              rtb2.SelPrint (Printer.hDC)
'              Printer.EndDoc
'          Case cSection_Script
'              Script_Save  'save to database
'              Script_Print 'print all the scripts
'          Case cSection_requests
'             Requests_Forms_Save
'             Requests_Forms_Print_All
'          End Select
'     End If
' End Sub
'
' Private Sub SSActiveToolBars1_ToolClick(ByVal Tool As ActiveToolBars.SSTool)
'       Dim iFlag As Integer
'       If Picture1(2).Visible Then
'          Exit Sub
'       End If
'       Select Case Tool.ID
'       Case "ID_ScriptMakeItemReg24"
'
'       '------------------
'       'General menu Items
'       '------------------
'       Case "ID_GeneralDisplayDetails"
'             Display_Section_chosen
'       Case "ID_SaveLayout"
'             Save_Layouts
'
'       Case "ID_GeneralMenuChangeFont"
'             Fonts_Change SourceControl
'       Case "ID_GeneralMenuSAvefont"
'            Controls_Save_Font_Preference
'       Case "ID_RecallRemindersFlagAsComplete"
'
'       Case "ID_RecallRemindersFlagAsCompleteWithExplanation"
'
'       '-------------------------------
'       'Requests Right Mouse Menu items
'       '-------------------------------
'       Case "ID_RequestsViewAsType"
'              gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsType
'             Requests_Patients_List_Get
'       Case "ID_RequestsViewAsNames"
'             gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsList
'             Requests_Patients_List_Get
'       Case "ID_RequestsViewAsForms"
'             gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsForm
'             Requests_Patients_List_Get
'       Case "ID_RequestsDelete"
'              Requests_Patients_List_Delete
'       Case "ID_RequestsGraph"
'       Case "ID_RequestsReOrder"
'             Requests_Forms_ReOrder
'       Case "ID_RequestsSortByRequestName"
'             SSActiveToolBars1.Tag = "Name"
'       Case "ID_RequestsSortByDate"
'             SSActiveToolBars1.Tag = "Date"
'       Case "ID_RequestsSortAscending"
'             Requests_Sort ("ASC")
'       Case "ID_RequestsSortDescending"
'              Requests_Sort ("DESC")
'       Case "ID_RequestsViewSummaryReport"
'
'             Requests_Reports_View crSendtoWindow
'       Case "ID_RequestsPrintSummaryReport"
'             Requests_Reports_View crSendToPrinter
'       Case "ID_RequestsReverseEntry"
'             Requests_Patients_List_Delete
'       '-----------------------------
'       'Menus in the Overview section
'       '-----------------------------
'       Case "ID_OverviewFHChangeFont"
'             Fonts_Save "family history", Label2(22)
'       Case "ID_OverviewActiveProblemsChangeFont"
'             Fonts_Save "Active Problems", List1(1)
'       Case "ID_OverviewActiveProblemsDisplayDetails"
'             List1_DblClick List1(0).ListIndex
'       Case "ID_SHChangeFont"
'            Fonts_Save "social history", RichTextBox1(0)
'       Case "ID_SHCopy"
'       '------------
'       'Common Forms
'       '------------
'       Case "ID_CommonFormsDelete"
'
'              Requests_Forms_Delete
'              Command3_Click (cButtonCancel)
'       Case "ID_CommonFormsEditForm"
'             Requests_Forms_Edit
'       Case "ID_CommonFormsPrintAllForms" 'print all unprinted forms
'             Requests_Forms_Save
'             Requests_Forms_Print_All
'       Case "ID_CommonFormsPrintSelectedForm"
'             'Hide all other forms first
'             For icounter = 0 To UBound(gtPatient(1).Forms())
'                 If icounter <> List1(0).ItemData(List1(0).ListIndex) Then
'                    gtPatient(1).Forms(icounter).Hidden = True
'                 End If
'             Next
'             If gtPatient(1).Forms(List1(0).ItemData(List1(0).ListIndex)).Printed = False Then
'                Requests_Forms_Save
'                Requests_Forms_Print_Single (List1(0).ItemData(List1(0).ListIndex))
'                gtPatient(1).Forms(List1(0).ItemData(List1(0).ListIndex)).Printed = True
'             End If
'             For icounter = 0 To UBound(gtPatient(1).Forms())
'                 gtPatient(1).Forms(icounter).Hidden = False
'             Next
'
'       Case "ID_CommonFormsRe-PrintAllForms"
'             Requests_Forms_RePrint True
'
'       Case "ID_CommonFormsRe-Print"
'             Requests_Forms_RePrint False
'       Case "ID_MeasureDeleteValue"
'
'            Measure_Delete
'      Case "ID_MeasureGraph"
'       Case "ID_PH_Save"
'            Save_Consult
'       Case "ID_PH_Delete"
'            PastHistory_Delete
'       Case "ID_PH_ReverseEntry"
'             PastHistory_Delete
'       Case "ID_PH_Help"
'       Case "ID_PH_ViewAll"
'
'       Case "ID_ScratchPadEdit"
'           ScratchPad_Edit
'       Case "ID_ScratchPadComplete"
'           ScratchPad_Delete False, False
'     Case "ID_ScratchPadDelete"
'          ScratchPad_Delete True, True
'     Case "ID_ScratchPadCompleteText"
'          ScratchPad_Delete True, False
'     Case "ID_ScratchPadHelp"
'     '----------------------------------------------------------------
'     'The pop up menu over the previously saved recalls in tdbgrid1(0)
'     '----------------------------------------------------------------
'     Case "ID_RecallListDelete", "ID_RecallListReverseEntry"
'          Recalls_Delete_NEw Data2.Recordset!Consult_ID, _
'                              Data2.Recordset!Description, _
'                              Data2.Recordset!Last_date, _
'                              Data2.Recordset!REVIEW_ID, _
'                              pnRecalls_Deleted, True
'     Case "ID_RecallListFlagComplete"
'             Recalls_Delete_NEw Data2.Recordset!Consult_ID, _
'                              Data2.Recordset!Description, _
'                              Data2.Recordset!Last_date, _
'                              Data2.Recordset!REVIEW_ID, _
'                              pnRecalls_Completed, False
'     Case "ID_RecallListFlagCompleteWithExplanation"
'          Recalls_Delete_NEw Data2.Recordset!Consult_ID, _
'                              Data2.Recordset!Description, _
'                              Data2.Recordset!Last_date, _
'                              Data2.Recordset!REVIEW_ID, _
'                              pnRecalls_Completed, True
'      Case "ID_RecallsSave"
'             Recalls_Save_Separately
'     Case "ID_RecallDelete"
'                 ix = List1(0).ItemData(List1(0).ListIndex)
'                 Recalls_Delete_NEw gtPatient(1).Recalls(ix).Consult_ID, _
'                              gtPatient(1).Recalls(ix).Description, _
'                              gtPatient(1).Recalls(ix).Last_date, _
'                             gtPatient(1).Recalls(ix).Record_ID, _
'                             pnRecalls_Deleted, True
'
'       Case "ID_FH_DeleteCondition"
'             FH_Delete
'       Case "ID_FH_DeleteMember"
'
'         Case "ID_Print"
'              Print_Section
'         Case "ID_ProgressNotes"
'              ProgressNotes_Show "Patient"
'        Case "ID_ShortcutPatientDetails"
'                 patient_ShowDemographics
'         '------------------
'         'The drop down menu
'         '------------------
'         Case "ID_FileExit"
'               Save_Consult
'               Call Form_Unload(0)
'         Case "ID_FileNew"
'         Case "ID_FileOpen"
'         Case "ID_PrinterSetup"
'               frmPrinters.Show vbModal
'               'frmOptions.Show vbModal
'         Case "ID_FileSave"
'         Case "ID_Help"
'         Case "ID_HelpAbout"
'               frmAbout.Show vbModal
'         Case "ID_HelpContents"
'         Case "ID_HelpTechnicalSupport"
'         Case "ID_ShortcutOverview"
'               Show_Section "Overview"
'         Case "ID_PastHistory", "ID_ShortcutPastHistory"
'               Show_Section "Past History"
'         Case "ID_FamilyHistory", "ID_ShortcutFamilyHistory"
'               Show_Section "Family and Social"
'        ' Case "ID_BMI"
'         'Case "ID_Calculator"
'         'Case "ID_Calender"
'         'Case "ID_PregCalculator"
'
'         '--------------
'         'Graphing stuff
'         '--------------
'         Case "ID_GraphItem"
'              Measure_Graph_item
'         Case "ID_ShortcutRequests"
'               Requests_Section_Show
'         Case "ID_Measurements", "ID_ShortcutMeasurements"
'           Measure_Section_Show
'         '---------------------
'         'Medication list Stuff
'         '---------------------
'         Case "ID_ChangeInstructions"
'               Script_Instructions_Change
'         Case "ID_DeleteMedication"
'                 Script_PastMeds_Delete
'         Case "ID_MedsReverseEntry"
'              Script_PastMeds_ReverseEntry
'         Case "ID_MedsViewActive"
'              Script_PastMeds_ViewActive
'         Case "ID_MedsViewInactive"
'              Script_PastMeds_ViewInActive
'         Case "ID_Script", "ID_ShortcutScript"
'              Script_Show_Section
'         Case "ID_PrescribeSelected"
'             Script_PastMeds_PrescribeSelected
'         Case "ID_PrescribeAll"
'             Script_PastMeds_PrescribeAll
'         Case "ID_MedsMakeActive"
'              Script_Item_MakeActiveOrInactive mrMedication_Active, False
'              Script_PastMeds_ViewInActive
'         Case "ID_MakeActiveWithComment"
'             Script_Item_MakeActiveOrInactive mrMedication_Active, True
'             Script_PastMeds_ViewInActive
'         Case "ID_MakeInactiveWithComment"
'             Script_Item_MakeActiveOrInactive mrMedication_Inactive, True
'             Script_PastMeds_ViewActive
'         Case "ID_MedsMakeInactive"
'               Script_Item_MakeActiveOrInactive mrMedication_Inactive, False
'               Script_PastMeds_ViewActive
'         Case "ID_MedsInteractions"
'              Script_Interactions_5_Source_MedList
'         Case "ID_Interactions"
'               Script_Interactions_4_Source_Pad
'         '-------------------
'         'Stuff on the script
'         '-------------------
'         Case "ID_ScriptItemEdit"
'              Script_Item_Edit
'         Case "ID_ScriptSaveItemNoPrint"
'              Script_Save_SingleItem_NoPrint
'        Case "ID_ScriptSaveAllNoPrint"
'             Script_Save_AllItems_NoPrint
'         Case "ID_MBM"
'              If List1(0).ListIndex <> -1 Then
'                 Script_ProductInformation_Get gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Brand, _
'                       gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Formulation
'              End If
'         Case "ID_MA"
'         Case "ID_AIA"
'         Case "ID_ScriptItemDelete"
'               Script_Item_MarkDeleted
'         Case "ID_ScriptItemDeleteAll"
'              Script_ItemsMarkDeleted
'
'         Case "ID_ScriptPregnancyInfo"
'
'               Script_Item_Display_Preg_text gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).pc, gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Prodcode, gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Formcode, gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Brand, gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).GenericString
'
'         Case "ID_ScriptReprintAll"
'               '------------------------------------------------
'               'reset all the flags to not printed and not saved
'               '------------------------------------------------
'               For icounter = 0 To UBound(gtPatient(1).Scripts())
'                    gtPatient(1).Scripts(icounter).Saved = False
'                    gtPatient(1).Scripts(icounter).Printed = False
'                    gtPatient(1).Scripts(icounter).Reprint = True
'               Next
'               Script_Item_SaveAndPrint
'         Case "ID_ScriptReprintItem"
'               'reprints the item and saves it as well (contents may have been changed)
'               gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Saved = False
'               gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Printed = False
'               gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Reprint = True
'               Script_Item_SaveAndPrint
'         Case "ID_ScriptRestrictions"
'               If gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Restcode <> 0 Then
'
'              End If
'         Case "ID_ScriptPrintAll"
'               Script_Item_SaveAndPrint
'         Case "ID_ScriptPrintItem"
'               Script_HideArray True 'hide all members
'               gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Hidden = False
'               Script_Print_Single_Item
'               Script_HideArray False
'         Case "ID_Save"
'               Save_Consult
'         Case "ID_Exit"
'               Save_Consult
'               End
'         Case "ID_ShortcutImmunisation"
'              IMM_ShowSection
'         '-------------
'         'Allergy stuff
'         '-------------
'         Case "ID_DeleteAllergy"
'               Allergy_Delete
'         Case "ID_ViewClassNotes"
'              allergy_ViewClassNotes
'         Case "ID_ShortcutAllergies"
'              iCurrentSection = cSection_Allergies
'              Design_Panel_Allergies
'              Allergy_Display
'              Command3_Click (1) 'zero arrays and editing area
'              Text3_GotFocus (1)
'         '---------------------------
'         'things to do with referrals
'         '---------------------------
'         Case "ID_ShortcutReferrals"
'              Referrals_DisplaySection
'
'         Case "ID_ShortcutRecalls"
'              Recalls_DisplaySection
'         '-------------------------
'         'Things to do with letters
'         '-------------------------
'         Case "ID_LettersRename"
'         Case "ID_LettersReprint"
'
'              Letter_ReprintExisting
'              'Command2_Click (3)
'         Case "ID_LettersDelete"
'             Referrals_Letter_Delete
'         Case "ID_LettersReverseEntry"
'             Referrals_Letter_Delete
'         Case "ID_LettersView"
'               If RecordsExist(Data2) Then
'                  TDBGrid1_Click (0)
'               End If
'         Case "ID_Completed"
'               Recalls_Mark_Complete
'         Case "ID_PregCalc"
'              Reports
'             ' LinkToProgram "Pregnancy Calculator", sMain_Dir & "\dd_pcalc.exe", iflag
'         Case "ID_Contacts"
'             LinkToProgram "Contacts Version 2", sMain_Dir & "\Contacts.exe", iFlag
'         Case "ID_Calculator"
'             LinkToProgram "Calculator", sMain_Dir & "\calc.exe", iFlag
'         Case "ID_BMI"
'             LinkToProgram "BMI Calculator", sMain_Dir & "\BMI.exe", iFlag
'         Case "ID_Calender"
'              LinkToProgram "Calender", sMain_Dir & "\dd_caldr.exe", iFlag
'         Case "ID_Wizard"
'              'Wizards
'         '--------------------------------------------------------------
'         'the pop up menu has been visible, and medical history selected
'         '--------------------------------------------------------------
'     '    Case "ID_MedicalHistory"
'     '         'set up the screen
'     '
'     '        With Label2(0)
'     '             .Top = 528
'     '             .width = 200
'     '        End With
'
'     '        iCurrentSection = cSection_PastHistory
'     '        itdbgrid2_image = cLIst_ozcodes
'     '        Tabstrip1.tabindex = cSOAP_Subjective
'     '        'VideoSoftIndexTab1(1).Caption = "Past Medical Conditions"
'     '        Configure_TDBGrid2
'     '        GetList_OzcodeTerms
'
'             'Text3(0).SetFocus
'      '   Case "ID_FamilyHistory"
'      '       '-------------------------------------------------------------
'      '       'This selection collects the social and family history as well
'      '       'as ethnicity and country of origin
'      '       '-------------------------------------------------------------
'      '       iCurrentSection = cSection_FamilyandSocialHistory
'      '       design_InputPanels
'      '       Dim sMsg As String
'      '
'      '       itdbgrid2_image = cGrID_Image_FH_Relationships
'       '      Tabstrip1.tabindex = cSOAP_Subjective
'       '      'VideoSoftIndexTab1(1).Caption = "Family Disease History"
'
'            ' GetList_TypesOfFamilyRelationships
'             'PictureEdit.Visible = True
'             'picture1(0).Visible = False
'             'picture1(1).Visible = False
'            ' FH_Get_FamilyMembers
'        '     Text3(0).SetFocus
'       '---------------------
'       'Medication activities
'       '---------------------
'       Case "ID_BriefPI"
'            Script_ProductInformation_Get Data2.Recordset!drug, Data2.Recordset!Formulation
'
'      Case "ID_MedsSaveGridLayout"
'            Save_Layout "Medications", "medications", TDBGrid1(0)
'
'       '---------------------
'       'Vaccination triggered
'       '---------------------
'       Case "ID_ProductInformation"
'             Script_ProductInformation_Get sVaccine_Trade_Name, svaccine_Formulation
'       Case "ID_IMM_Delete"
'             'IMM_Delete
'       Case "ID_Write"
'            Select Case itdbgrid2_image
'            Case cGrID_Image_Letters
'                 Dim Retval
'                 sMsg = sLetters_Dir & "\" & Data2.Recordset!File_name
'                 Retval = Shell("C:\WINDOWS\write.EXE" & " " & Chr$(34) & sMsg & Chr$(34), 1)    ' Run Calculator.
'            End Select
'       Case "ID_MSWord"
'
'     End Select
' End Sub
'
' Sub GetList_TypesOfFamilyRelationships()
'     iStopAllKeyBoardInput = True
'     Screen.MousePointer = vbHourglass
'     sSql = "SELECT lu_Family_relationships.Description, "
'     sSql = sSql & "lu_Family_relationships.Relationship_Id "
'     sSql = sSql & "From lu_Family_relationships "
'     sSql = sSql & "WHERE (((lu_Family_relationships.Description) Like "
'     sSql = sSql & Chr$(34) & Trim(Text3(1)) & "*" & Chr$(34) & ")) "
'     sSql = sSql & "order by lu_Family_relationships.Description"
'     Data1.DatabaseName = sMEDREC_MDB
'     Data1.RecordSource = sSql
'     Data1.Refresh
'     TDBGrid2.Refresh
'     DoEvents
'     If RecordsExist(Data1) And Len(Text3(1)) Then
'        If LCase(Data1.Recordset!Description) <> Trim(LCase(Text3(1))) Then
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'             Picture2.Visible = False
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
'     iStopAllKeyBoardInput = False
' End Sub
'
'
'
' Private Sub SSActiveToolBars1_ToolGotFocus(ByVal Tool As ActiveToolBars.SSTool)
'     Dim bFlag As Boolean
'     Dim sString As String
'     Dim sMsg As String
'     Dim bCancel As Boolean
'
'     Timer2.Enabled = False 'temporary bug somewhere switching this on
'     If Tool.ID = "ID_FindWhat" And gtPatient(1).Patient_ID <> 0 Then
'         '---------------------------------------------
'         'Append temporary progress notes to main table
'         '---------------------------------------------
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Q = Db.QueryDefs("MRQ_ProgressNotes_Finalise")
'         Q.Execute
'         Set Q = Db.QueryDefs("MRQ_ProgressNotes_DeleteTempNotes")
'         Q.Execute
'         Db.Close
'         '---------------------------------------------
'         'Save any outstanding changes for this patient
'         '---------------------------------------------
'         UnprintedItems_Print
'
'         If gtPatient(1).DataChanged = True Then
'            sMsg = "You have made changes to this patients medical record." & vbLf & vbLf
'            sMsg = sMsg & "Do you want to save these changes?" & vbLf & vbLf
'            lresponse = MsgBox(sMsg, vbYesNoCancel, "Data Changed")
'            If lresponse = vbYes Then
'               Save_Consult
'
'            ElseIf lresponse = vbCancel Then
'                   sMsg = "The changes you have made have not been saved, but "
'                   sMsg = sMsg & "will remain active until you active choose "
'                   sMsg = sMsg & "not to save this record."
'                   lresponse = MsgBox(sMsg, vbOKOnly, "Data Changed")
'                     Exit Sub
'
'             End If
'         End If
'         Consult_Summary_Save
'         Enable_Controls Me, False
'         '-------------------------------------------------------------
'         'Picture1(2) is a full screen grey box used to hide everything
'         'so if they want to get a new patient cover everything up
'         'whilst do the necessary things under the hood
'         '-------------------------------------------------------------
'          bExitRoutine = True
'          Picture1(2).height = Screen.height
'          Picture1(2).ZOrder
'          Text5 = ""
'          Picture1(2).Visible = True
'          SSPanel1.Caption = ""
'          SSPanel1.MarqueeStyle = 0
'          SSPanel1.Visible = False
'          SSActiveToolBars1.Tools("ID_Sections").Enabled = False
'          SSActiveToolBars1.Tools("ID_File").Enabled = False
'          SSActiveToolBars1.Tools("ID_Configure").Enabled = False
'          Ssactivetabs1_TabsState False
'          Reset_Variables
'          Erase gtPatient()
'          ReDim gtPatient(0 To 1) As tPatient
'          gtconsult.Patient_ID = 0
'          gtconsult.Consult_ID = 0
'          Picture5.Visible = False 'if happens to be showing
'          SSActiveToolBars1.Tools("ID_Age").Edit.Text = ""
'          SSActiveToolBars1.Tools("ID_FindWhat").Edit.Text = ""
'          SSActiveToolBars1.Tools("ID_Allergies").Edit.Text = ""
'          SSActiveToolBars1.Tools("ID_EditAllergy").Enabled = False
'          SSActiveToolBars1.Tools("ID_ShortcutScript").Enabled = False
'          Picture2.Visible = False
'          TDBGrid1(1).Visible = False
'          Text6 = ""
'          bExitRoutine = False
'          'SSActiveToolBars1.Tools("ID_ComboBox").ComboBox.ItemData ((SSActiveToolBars1.Tools("ID_ComboBox").ComboBox.ListIndex)
'          SSActiveToolBars1.Tools("ID_ComboBox").ComboBox.ListIndex = 6
'     End If
'
' End Sub
' Private Sub SSActiveToolBars1_ToolKeyDown(ByVal Tool As ActiveToolBars.SSTool, ByVal KeyCode As Integer, ByVal Shift As Integer)
'     Select Case Tool.Name
'     Case "Finalise"
'          If KeyCode = vbKeyReturn Then
'             If Tool.Edit.Text <> "" Then
'                 Recalls_Mark_Complete
'                 Tool.Edit.Text = ""
'             End If
'         End If
'     Case "Find"
'
'
'
'         If KeyCode = vbKeyReturn Then
'             Screen.MousePointer = vbHourglass
'             DoEvents
'            '-----------------------------------------------
'            'Get the selected patients name and address only
'            '-----------------------------------------------
'            Timer2.Enabled = False 'bug problem
'            iTimerCounter = 0
'            sMsg = SSActiveToolBars1.Tools("ID_FindWhat").Edit.Text
'            Get_Patient sMsg
'            SSActiveToolBars1.Tools("ID_Configure").Enabled = True
'            If Picture1(2).Visible = False Then
'                 iConsultIDSaved = False 'flag as a new consultation
'                 Screen.MousePointer = vbArrow
'            Else
'
'            End If
'         End If
'     End Select
' End Sub
'
' Private Sub SSActiveToolBars1_ToolKeyPress(ByVal Tool As ActiveToolBars.SSTool, ByVal KeyAscii As ActiveToolBars.SSReturnShort)
'         Restrict_Keys mrKeys_SQLCrash, KeyAscii
' End Sub
'
' Private Sub SSPanel1_Click()
'  SSPanel1.MarqueeStyle = 0 'stop the blinking
' End Sub
' Sub SH_Occupations_GetList()
'     iStopAllKeyBoardInput = True
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_SH_Occupations_Getlist")
'     Q("Enter Occupation") = Trim(Text2(2))
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(Text2(2)) Then
'        If LCase(Data1.Recordset!Description) <> Trim(LCase(Text2(2))) Then
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'             Picture2.Visible = False
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
'     iStopAllKeyBoardInput = False
' End Sub
'
' Private Sub SSPanel3_Resize(Index As Integer)
'     On Error Resume Next
'     If Index = 1 Then
'        TDBGrid1(0).width = SSPanel3(1).width - 144
'        TDBGrid1(0).height = SSPanel3(1).height - 144
'        Highlight_Control TDBGrid1(0), True, Line1(7), Line1(8)
'     End If
' End Sub
'
'
'
' Private Sub TDBGrid1_AfterColEdit(Index As Integer, ByVal ColIndex As Integer)
'       Select Case Index
'       Case 2
'   '         If TDBGrid1(Index).Columns(ColIndex).Text <> "" Then
'   '             If iConsultIDSaved = False Then
'   '                   Save_ConsultID
'   '             End If
'   '            If Data4.Recordset!Consult_ID = gtconsult.Consult_ID Then
'   '
'   '                    Data4.Recordset.Update
'   '            Else
'   '                    If IsNull(Data4.Recordset!Consult_ID) Then
'   '                      Data4.Recordset!Consult_Date = sToday
'   '                      Data4.Recordset!Patient_ID = gtPatient(1).Patient_ID
'   '                      Data4.Recordset!Doctor_ID = gtDoctor.Doctor_ID
'   '                      Data4.Recordset!Consult_ID = gtconsult.Consult_ID
'   '                    End If
'   '                     Data4.Recordset.Update
'    '           End If
'    '        Else
'               ' Data4.Recordset.Cancel = True
'                'Data4.Recordset.MoveFirst
'     '       End If
'       End Select
'
' End Sub
'
' Private Sub TDBGrid1_BeforeColEdit(Index As Integer, ByVal ColIndex As Integer, ByVal KeyAscii As Integer, Cancel As Integer)
'         Select Case Index
'         Case 2
'            '------------------------------------------------------------
'            'Only allow editing of scratch pad notes created this consult
'            '------------------------------------------------------------
'           ' If Data4.Recordset!Consult_ID = gtconsult.Consult_ID Then
'           '    Data4.Recordset.Edit
'           ' ElseIf Data4.Recordset!Consult_ID > 0 Then
'                 '  Cancel = True
'           'Else
'              'Cancel = True
'
'    '        End If
'         End Select
'
' End Sub
'
' Private Sub TDBGrid1_BeforeColUpdate(Index As Integer, ByVal ColIndex As Integer, OldValue As Variant, Cancel As Integer)
'    Select Case Index
'    Case 0
'
'    Case 1
'        If TDBGrid1(1).Columns(0).Value = False Then
'          ' Set Db = OpenDatabase(sMEDREC_MDB, False)
'          ' sSql = "Update data_reviews set Last_date ="
'          ' sSql = sSql & "Format(Now(), 'dd/mm/yyyy'), "
'          ' sSql = sSql & "data_Recall_Reviews.Overdue = False "
'          ' sSql = sSql & "WHERE (((data_Recall_Reviews.Review_ID)= "
'          ' sSql = sSql & Data3.Recordset!REVIEW_ID & "))"
'          ' Db.Execute sSql
'          ' Db.Close
'        End If
'        DoEvents
'    Case 2
'
'
'    End Select
' End Sub
'
' Private Sub TDBGrid1_Click(Index As Integer)
'   'SSPanel4.Visible = True
'   ' Exit Sub
'    Select Case TDBGrid1(Index).Tag
'        Case cGrID_Image_Authorities
'              'Text2(0) = ""
'              Text2(0) = Data2.Recordset!Indication
'         Case cGrID_Image_Medications
'
'         Case cGrID_Image_indications
'              ' Script_ProductInformation_Get Data2.Recordset!Brand, Data2.Recordset!Form
'         Case cGrID_Image_Equivalents
'         Case cGrID_Image_AvailableGraphs
'         Graphs_DisplayGraph
'         Case cGrID_Image_Letters
'               Referrals_Letter_Show
'
'
'
'    End Select
'
' End Sub
' Sub Make_RTB1_BIG(iIndex)
'  Select Case iIndex
'  Case 0
'  With RichTextBox1(iIndex)
'     .toP = Picture3.toP + sspanel2(0).height
'     .left = Picture3.left
'     .height = Picture3.height - Shape2(8).height - sspanel2(0).height
'     .width = Picture3.width
'     .ZOrder
' End With
' Case 1
' With RichTextBox1(iIndex)
'     .toP = sspanel2(5).height
'     .left = 0
'     .height = Picture5.height - sspanel2(5).height - Shape2(8).height
'     .width = Picture3.width
'     .ZOrder
'    End With
' End Select
' End Sub
' Private Sub TDBGrid1_DblClick(Index As Integer)
'        iStopAllKeyBoardInput = True
'        If InStr(Label3.Caption, "AUTH") Then
'               Text2(0) = Data2.Recordset!Indication
'        End If
'        Select Case Index
'        Case 0
'         Select Case itdbgrid1_image
'
'         Case cGrID_Image_indications
'              '----------------------------------------
'              'Select the highlighted drug to prescribe
'              '----------------------------------------
'              Picture5.Visible = False
'              DoEvents
'              Set Data1.Recordset = Data2.Recordset
'              Text3(2) = Data1.Recordset!Brand
'              Script_PastMeds_ViewActive
'              Text3(2).SetFocus
'
'         Case cGrID_Image_Patients
'           '  Ssactivetabs1_TabsState True
'           '  SSActiveTabs1.Visible = False
'           '  PositionSSActiveTab1 "restore"
'             'Patient_Display_Data
'             'SSActiveTabs1.Visible = True
'        Case cGrID_Image_Medications
'            '--------------------------------
'            'Prescribe an existing medication
'            '--------------------------------
'            'Script_PrescribeOneExisting
'         Case cGrID_Image_Authorities
'         End Select
'     End Select
'      iStopAllKeyBoardInput = False
' End Sub
' Sub Script_PastMeds_RePrescribe()
'      'How this routine works:
'      '1:gtPatient(1).Scripts() is incremented by 1 to hold new data
'      '2:The user must have selected row or rows to print hence
'      '  For icounter = 0 To TDBGrid1(0).SelBookmarks.Count - 1
'      '      Loop through the  TDBGrid1(0).SelBookmarks collection and set
'      '      Data2RsClone.Bookmark = TDBGrid1(0).SelBookmarks.Item(icounter)
'      '      If the drug is not already in today's list to prescribe then
'      '           ReDim Preserve gtPatient(1).Scripts(ubound + 1)
'      '           With Data2RsClone
'      '                Split !ClassCodes
'      '                Allergy_Check
'      '                If iAllergic then
'      '                   gtPatient(1).Scripts(iX).Deleted = True  ie mark deleted in array
'      '                Else
'      '                   Create Rs of all occurrences of Drug_formulation_active etc
'      '                   If RecordsExist (ie Rs.Recordcount) then
'      '                      If rs!Authority_ID <> 0 'was prescribed as authority last time
'      '                         Get AIA used from Data_Aia table
'      '                         If !Inc_Quantity_via_Auth = true then
'      '                            iValidAia = true
'      '                            If Still a pbs/rpbs benefit then
'      '                                   If has become an authority then
'     '
'      '                                    Else
'      '
'      '                                    End If
'      '                             Else
'      '                               Jump to PromptUser - Tell no longer PBS
'      '                            End If
'      '                         Else
'      '                            loop through Rs and check that last AIA is still current
'      '                             if Yes then
'      '                                aia=true
'      '
'      '                             Else
'      '                                Jump to PromptUser - InformUser must re-prescribe
'     '                              End If
'      '                         End If
'      '                      Else 'was not prescribed as authority last time
'
'      '                       End If
'      '                   Else
'      '                       Jump to PromptUser -tell drug longer in mims or changed in some way
'      '                   end If
'      '                End If
'      '          End With
'      '      End If
'      '  Next icounter
'      '--------------------------------------------------------------------------------------
'      Dim sPromptTitle As String
'      Dim iY As Integer
'      Dim iZ As Integer
'      Dim iAllergic As Integer
'      Dim sMsg As String
'      Dim sPromptMsg As String
'      Dim sMsg1 As String
'      Dim iValidAia As Integer
'      Dim iExists As Boolean
'      Dim lInvalidDrug As Boolean
'      Dim Rs As Recordset
'      Dim Db As Database
'      Dim db1 As Database
'      Dim rs1 As Recordset
'      Dim bTemp As Integer
'      '--------------------------
'      'Increment the script array
'      '--------------------------
'      On Error Resume Next
'      ix = -1
'      ix = UBound(gtPatient(1).Scripts())
'      On Error GoTo 0
' If TDBGrid1(0).SelBookmarks.Count Then
'  For icounter = 0 To TDBGrid1(0).SelBookmarks.Count - 1
'    '-------------------------------------------------------
'    'Set recordset clone to match the highlighted medication
'    '-------------------------------------------------------
'    TDBGrid1(0).Bookmark = TDBGrid1(0).SelBookmarks.Item(icounter)
'    Data2RsClone.Bookmark = TDBGrid1(0).SelBookmarks.Item(icounter)
'    '--------------------------------------------------------------
'    'First check the treatment not already in the array, exit if is
'    '--------------------------------------------------------------
'    If ix <> -1 Then
'        iExists = False
'        For iY = 0 To UBound(gtPatient(1).Scripts())
'              If gtPatient(1).Scripts(iY).ScriptDate_Id = Data2RsClone!ScriptDate_Id _
'                 And gtPatient(1).Scripts(iY).Deleted = False Then
'                 iExists = True
'                 Exit For
'              End If
'         Next iY
'    End If
'    '-----------------------------------------------------
'    'If drug not already in the script array, prescribe it
'    '-----------------------------------------------------
'    If iExists = False Then
'       ix = ix + 1
'       ReDim Preserve gtPatient(1).Scripts(ix)
'       '--------------------------------------------------------
'       'Populate the script array with data for the current drug
'       '--------------------------------------------------------
'       With Data2RsClone
'         '-----------------------------------------------
'         'Put the class codes for the drug into the array
'         'split the class code string into components
'         '-----------------------------------------------
'         gtPatient(1).Scripts(ix).ClassCodeString = !ClassCodes 'as "cla1,cla2"
'         Split !ClassCodes, ","
'         For iZ = 0 To UBound(sArray())
'                  ReDim Preserve gtPatient(1).Scripts(ix).ClassCodes(iZ)
'                  gtPatient(1).Scripts(ix).ClassCodes(iZ) = sArray(iZ)
'         Next iZ
'         '----------------------------------------------------------
'         'Now Check for allergy, If allergic, skip to end of routine
'         '----------------------------------------------------------
'         Allergy_Check iAllergic, gtPatient(1).Scripts(ix).ClassCodes(), True, 0
'         '***************************************************************
'         'THIS IS THE START OF CODE FOR EVERYTHING DONE TO A SINGLE DRUG
'         '***************************************************************
'         If iAllergic Then
'             gtPatient(1).Scripts(ix).Deleted = True
'         Else
'             '----------------------------------------------------------------------------
'             'Does this drug as prescribed previously with this name, unit etc still exist
'             'in the current MIMS drug release?
'             '----------------------------------------------------------------------------
'             sSql = "SELECT formdat.brand, formdat.form, packdat.active, packdat.active_units, " _
'                & "packdat.[per volume], packdat.per_vol_units, packdat.unit_volume, " _
'                & "packdat.unit_vol_units, inddat.indication, packdat.authcode, packdat.restcode, " _
'                & "packdat.pbs, formdat.gf, packdat.rp, packdat.equiv, proddat.deleted, " _
'                & "packdat.prodcode, packdat.formcode, packdat.packcode, packdat.units_per_pack, " _
'                & "packdat.no_of_packs, proddat.pc, formdat.Drowsy " _
'                & "FROM ((formdat INNER JOIN packdat ON (formdat.prodcode = packdat.prodcode) AND " _
'                & "(formdat.formcode = packdat.formcode)) INNER JOIN proddat ON formdat.prodcode = " _
'                & "proddat.prodcode) LEFT JOIN inddat ON packdat.authcode = inddat.indcode " _
'                & "WHERE (((formdat.brand)= " _
'                & Chr$(34) & !drug & Chr$(34) & ") " _
'                & "AND ((formdat.form)=" _
'                & Chr$(34) & !Formulation & Chr$(34) & ") "
'             If !active <> "" Then
'                sSql = sSql & " AND ((PackDat.active)=" & Chr$(34) & !active & Chr$(34) & ") "
'             Else
'                sSql = sSql & " AND ((PackDat.active) is null) "
'             End If
'             If !active_units <> "" Then
'                   sSql = sSql & " AND ((PackDat.active_units)=" & Chr$(34) & !active_units & Chr$(34) & ") "
'             Else
'                   sSql = sSql & " AND ((PackDat.active_units) is null) "
'             End If
'             If !per_volume <> "" Then
'                    sSql = sSql & " AND ((PackDat.[per volume]) =" & Chr$(34) & !per_volume & Chr$(34) & ") "
'             Else
'                    sSql = sSql & " AND ((PackDat.[Per volume]) is null) "
'             End If
'             If !per_vol_units <> "" Then
'                   sSql = sSql & " AND ((PackDat.per_vol_units)=" & Chr$(34) & !per_vol_units & Chr$(34) & ") "
'             Else
'                   sSql = sSql & " AND ((PackDat.Per_vol_units) is null) "
'             End If
'             If !unit_volume <> "" Then
'                      sSql = sSql & " AND ((PackDat.unit_volume)=" & Chr$(34) & !unit_volume & Chr$(34) & ") "
'             Else
'                     sSql = sSql & " AND ((PackDat.unit_volume) is null) "
'             End If
'             If !unit_vol_units <> "" Then
'                   sSql = sSql & " AND ((PackDat.unit_vol_units) =" & Chr$(34) & !unit_vol_units & Chr$(34) & ")) "
'             Else
'                   sSql = sSql & " AND ((PackDat.unit_vol_units) is null)) "
'             End If
'             Set Db = OpenDatabase(sDrugs_MdB, False)
'             Set Rs = Db.OpenRecordset(sSql)
'             '--------------------------------------------------------
'             'If No records exist in recordset, drug no longer in MIMS
'             '--------------------------------------------------------
'             If Rs.RecordCount = 0 Then
'                 gtPatient(1).Scripts(ix).Deleted = True
'                 sPromptMsg = "You have previously prescribed the drug " & !drug & vbLf & vbLf _
'                  & "Some of its details may have changed in the current release of MIMS, " _
'                  & "or the drug may have been deleted." & vbLf & vbLf _
'                  & "You should move this drug into your inactive list and re-prescribe it."
'                 sPromptTitle = "INVALID OR CHANGED DRUG DETAILS"
'                 GoTo PromptUser
'             Else
'                 gtPatient(1).Scripts(ix).Print_Status = !Print_Status  'original print status
'                 '-----------------------------------------------------------------------------
'                 'Otherwise, there are one or more occurrences of this drug/strengh etc in MIMS
'                 'If has an authority_ID, get the aia last time prescribed
'                 '-----------------------------------------------------------------------------
'                 If !Authority_ID <> 0 Then
'                     iValidAia = False 'default to invalid previous authority text
'                     gtPatient(1).Scripts(ix).Previousauthority = True
'                     gtPatient(1).Scripts(ix).Authority_ID = !Authority_ID
'                     '------------------------------------------------------
'                     'Get the authority indication used last time prescribed
'                     '------------------------------------------------------
'                     Set db1 = OpenDatabase(sMEDREC_MDB, False)
'                     Set rs1 = db1.OpenRecordset("Data_Script_AIA", dbOpenTable)
'                     With rs1
'                       .Index = "PrimaryKey"
'                       .Seek "=", gtPatient(1).Scripts(ix).Authority_ID
'                       If .NoMatch = False Then
'                         gtPatient(1).Scripts(ix).Aia = !Indication
'                       End If
'                       .Close
'                     End With
'                     db1.Close
'                     '----------------------------------------------------------
'                     'If drug prescribed via increased quantity assume aia valid
'                     'put code in here to check if still pbs/rpbs
'                     '----------------------------------------------------------
'                     If !Incr_Quantity_via_Auth = True Then
'                        gtPatient(1).Scripts(ix).Inc_Quantity_via_Auth = True
'                           iValidAia = True
'                           '---------------------------------------------
'                           'Now check that it is still a pbs/rpbs benefit
'                           '---------------------------------------------
'                            bTemp = False
'                          Select Case !Print_Status
'                          Case "PBS"
'                                  '-------------------------------------------------
'                                  'If still on PBS, allow prescription at previously
'                                  'allowed quantity
'                                  '-------------------------------------------------
'
'                              Do Until Rs.EOF
'                                  If InStr(Rs!pbs, "PBS/") Or Rs!pbs = !Print_Status Then
'                                     bTemp = True
'                                     gtPatient(1).Scripts(ix).Quantity = Data2RsClone!Quantity
'                                     Exit Do 'leave loop with Rs positioned for FINISH:
'                                  End If
'                                  .MoveNext
'                              Loop
'                         Case "RPBS"
'                              Do Until Rs.EOF
'                                  '----------------------------------------------------------
'                                  'If still on repatriation, allow prescription at previously
'                                  'allowed quantity
'                                  '----------------------------------------------------------
'                                  If (InStr(Rs!pbs, "RPBS") Or Rs!pbs = !Print_Status) Then
'                                      bTemp = True
'                                      gtPatient(1).Scripts(ix).Quantity = Data2RsClone!Quantity
'                                      Exit Do 'leave loop with Rs positioned for FINISH:
'                                  End If
'                                  Rs.MoveNext
'                              Loop
'                         End Select
'                         If bTemp = False Then
'                             sPromptMsg = "The drug " & !drug & " was previously prescribed as " _
'                             & !Print_Status & ", however this drug is no longer covered under this " _
'                             & "category."
'                             sPromptTitle = "CHANGE IN PBS STATUS"
'                             gtPatient(1).Scripts(ix).Deleted = True
'                             GoTo PromptUser
'                          End If
'
'                     Else
'                         '-------------------------------------------------------------
'                         'Check that a current Indication is correct for this authority
'                         'drug by looping through Rs until a match is found
'                         '-------------------------------------------------------------
'                         With Rs
'                              Do Until .EOF
'                               If InStr(LCase(!Indication), LCase(gtPatient(1).Scripts(ix).Aia)) Then
'                                  iValidAia = True
'                                  'This will leave the recordset positioned on correct spot for
'                                  'repeats, pack sizes etc
'                                  gtPatient(1).Scripts(ix).authcode = !authcode
'                                  gtPatient(1).Scripts(ix).Formcode = !Formcode
'                                  gtPatient(1).Scripts(ix).Packcode = !Packcode
'                                  gtPatient(1).Scripts(ix).Prodcode = !Prodcode
'                                  If Data2RsClone!Quantity <> !units_per_pack Then
'                                     gtPatient(1).Scripts(ix).Quantity = Data2RsClone!Quantity
'                                  Else
'                                     gtPatient(1).Scripts(ix).Quantity = Rs!units_per_pack
'                                  End If
'                                  gtPatient(1).Scripts(ix).Inc_Quantity_via_Auth = False
'                                  Exit Do
'                               End If
'                               .MoveNext
'                              Loop
'                              If iValidAia = False Then
'                                 sPromptMsg = "The Authority wording for the drug " & Data2RsClone!drug & " has changed " _
'                                 & "since you last prescribed it, or it may no longer be on an authority. " & vbLf & vbLf & "Please transfer the drug to your inactive list and re-prescribe it. "
'                                 sPromptTitle = "INVALID DRUG DETAILS"
'                                 gtPatient(1).Scripts(ix).Deleted = True
'                                 GoTo PromptUser
'                              End If
'                         End With
'                     End If
'                  Else    'Else to match    If !Authority_ID <> 0 Then
'                     '-----------------------------------------------------
'                     'The drug was not prescribed as an Authority Last Time
'                     'Check the Data2RecordsetClone!Print_Status to see if
'                     'the drug was prescribed as PBS RPBS or PRIV
'                     'note must put in restricted parsing here also
'                     '-----------------------------------------------------
'                     iValidAia = False
'                     gtPatient(1).Scripts(ix).authcode = 0
'                     gtPatient(1).Scripts(ix).Aia = ""
'                     gtPatient(1).Scripts(ix).Authority_ID = 0
'                     gtPatient(1).Scripts(ix).Authorityno = ""
'                     gtPatient(1).Scripts(ix).AuthorityScript = False
'                     gtPatient(1).Scripts(ix).AuthPhoneApproval = ""
'                     gtPatient(1).Scripts(ix).AuthPostHome = False
'                     gtPatient(1).Scripts(ix).Inc_Quantity_via_Auth = False
'
'                     'See if the Print_Status has a non-authority match in the
'                     'recordset
'                     Rs.MoveFirst
'                     bTemp = False
'                     Select Case !Print_Status
'                     Case "PBS"
'                         Do Until Rs.EOF
'                             If InStr(Rs!pbs, "PBS/") Or Rs!pbs = !Print_Status _
'                                And Val(Rs!units_per_pack) = !Quantity Then
'                                bTemp = True
'                                gtPatient(1).Scripts(ix).Quantity = Rs!units_per_pack
'                                Exit Do 'leave loop with Rs positioned for FINISH:
'                             End If
'                             Rs.MoveNext
'                         Loop
'                    Case "RPBS"
'                         Do Until Rs.EOF
'                             If (InStr(Rs!pbs, "RPBS") Or Rs!pbs = !Print_Status) Then
'                                If Val(Rs!units_per_pack) = !Quantity Then
'                                 bTemp = True
'                                 gtPatient(1).Scripts(ix).Quantity = Rs!units_per_pack
'                                 Exit Do 'leave loop with Rs positioned for FINISH:
'                                End If
'                             End If
'                             Rs.MoveNext
'                         Loop
'                     Case "PRIV"
'                          Do Until Rs.EOF
'                             If IsNull(Rs!pbs) Then    'And Val(rs!units_per_pack) = !Quantity Then
'                                 bTemp = True
'                                 gtPatient(1).Scripts(ix).Quantity = Data2RsClone!Quantity 'rs!units_per_pack
'                                 Exit Do 'leave loop with Rs positioned for FINISH:
'
'                             End If
'                             Rs.MoveNext
'                         Loop
'
'                     End Select
'                      If bTemp = False Then
'                       sPromptMsg = "The drug " & !drug & " was previously prescribed as " _
'                           & !Print_Status & ", however this drug is no longer covered under this " _
'                           & "category."
'                           gtPatient(1).Scripts(ix).Deleted = True
'                           sPromptTitle = "CHANGE IN PBS STATUS"
'                           GoTo PromptUser
'
'                      End If
'
'
'
'                 End If  'end if to match  of !authority_ID <> 0
' Finish:
'                 '--------------------------------------------------------------------------
'                 'If get to this point then the previously prescribed drug in the exact same
'                 'name, formulation, active, active units, per_volume, per_vol_units etc
'                 'must exist in MIMs hence can re-use those things from the Rx_table
'                 '--------------------------------------------------------------------------
'                 With Rs
'                     gtPatient(1).Scripts(ix).Prodcode = !Prodcode
'                     gtPatient(1).Scripts(ix).Formcode = !Formcode
'                     gtPatient(1).Scripts(ix).Formcode = !Packcode
'                     If Not IsNull(!Restcode) Then
'                         gtPatient(1).Scripts(ix).Restcode = !Restcode
'                     End If
'                     gtPatient(1).Scripts(ix).pbs = "" & !pbs
'                     gtPatient(1).Scripts(ix).gf = "" & !gf
'                     gtPatient(1).Scripts(ix).pc = "" & !pc
'                     gtPatient(1).Scripts(ix).drowsy = "" & !drowsy
'                     gtPatient(1).Scripts(ix).active = !active
'                     gtPatient(1).Scripts(ix).No_of_packs = !No_of_packs
'                      gtPatient(1).Scripts(ix).active_units = !active_units
'                      gtPatient(1).Scripts(ix).per_volume = ![per volume]
'                      gtPatient(1).Scripts(ix).per_vol_units = !per_vol_units
'                      gtPatient(1).Scripts(ix).unit_volume = !unit_volume
'                      gtPatient(1).Scripts(ix).unit_vol_units = !unit_vol_units
'                      gtPatient(1).Scripts(ix).units_per_pack = !units_per_pack
'                      gtPatient(1).Scripts(ix).Brand = !Brand
'                       gtPatient(1).Scripts(ix).Formulation = !Form
'                       If Not IsNull(!Rp) Then
'                         gtPatient(1).Scripts(ix).Repeats = !Rp
'                       Else
'                         gtPatient(1).Scripts(ix).Repeats = 0
'                       End If
'                 End With
'                      gtPatient(1).Scripts(ix).Rx_ID = !Rx_ID  '?needed
'                      gtPatient(1).Scripts(ix).GenericString = !Generic 'as "gen1;gen2"
'                      gtPatient(1).Scripts(ix).Section = !Section
'                      gtPatient(1).Scripts(ix).SubSection = !SubSection
'                     sMsg = ""
'                     '---------------------------
'                     'Make up the strengh summary
'                     '---------------------------
'                     Script_Packs_MakeSummary gtPatient(1).Scripts(ix).Strength_Summary, _
'                     gtPatient(1).Scripts(ix).active, _
'                     gtPatient(1).Scripts(ix).active_units, _
'                     gtPatient(1).Scripts(ix).per_volume, _
'                     gtPatient(1).Scripts(ix).per_vol_units, _
'                     gtPatient(1).Scripts(ix).unit_volume, _
'                     gtPatient(1).Scripts(ix).unit_vol_units
'                     '----------------------------------------------------------------
'                     'This is all the things for the drug which are not dependant upon
'                     'changes to the PBS etc, ie:
'                     'instructions, what prescribed for
'                     '----------------------------------------------------------------
'                     gtPatient(1).Scripts(ix).Instructions = !Instruction
'                     gtPatient(1).Scripts(ix).Instructions_ID = !Instruction_ID
'                     gtPatient(1).Scripts(ix).Prescribed_For = !Prescribed_For
'                     gtPatient(1).Scripts(ix).Prescribed_For_ID = !PrescribedFor_ID
'                     '-----------------------------------------------------
'                     'Those items saved to the data_script_item_Dates table
'                     '-----------------------------------------------------
'                     gtPatient(1).Scripts(ix).Last_date = !Last_date
'                     gtPatient(1).Scripts(ix).Start_date = !Start_date
'                     gtPatient(1).Scripts(ix).Script_Date = Format(Now, "dd/mm/yyyy")
'                     gtPatient(1).Scripts(ix).ScriptDate_Id = !ScriptDate_Id
'                     gtPatient(1).Scripts(ix).Current_medication = !Current_medication
'                     '----------------------------------------
'                     'Those things needed to view, edit script
'                     '1:individual generic components
'                     '----------------------------------------
'                      sMsg = !Generic
'                      Split sMsg, ";"
'                      For iY = 0 To UBound(sArray())
'                          ReDim Preserve gtPatient(1).Scripts(ix).Generic_components(iY)
'                          gtPatient(1).Scripts(ix).Generic_components(iY) = sArray(iY)
'                      Next
'                     '--------------------------------------
'                     '2:the individual class code components
'                     '--------------------------------------
'                     sMsg = !ClassCodes
'                     Split sMsg, ","
'                     Set Db = OpenDatabase(sDrugs_MdB, False)
'                     Set rs1 = Db.OpenRecordset("Classes", dbOpenTable)
'                     With rs1
'                         .Index = "PrimaryKey"
'                         For iY = 0 To UBound(sArray())
'                             ReDim Preserve gtPatient(1).Scripts(ix).ClassCodes(iY)
'                             ReDim Preserve gtPatient(1).Scripts(ix).ClaDesc(iY)
'                             .MoveFirst
'                             .Seek "=", sArray(iY)
'                             gtPatient(1).Scripts(ix).ClassCodes(iY) = sArray(iY)
'                             gtPatient(1).Scripts(ix).ClaDesc(iY) = !ClaDesc
'                         Next
'                         .Close
'                     End With
'                     '------------------------------------------------------------------------
'                     'Now get automatically the next authority number if the item is authority
'                     '------------------------------------------------------------------------
'                     If iValidAia Then
'                         Script_Authority_GetNumber gtPatient(1).Scripts(ix).Authorityno
'                         gtPatient(1).Scripts(ix).AuthPostHome = True 'default
'                         gtPatient(1).Scripts(ix).Previousauthority = True
'                         gtPatient(1).Scripts(ix).AuthorityScript = True
'                     End If
'                     '--------------------------------------------------
'                     'set the veteran flag according to the print_status
'                     '--------------------------------------------------
'                     If !Print_Status = "RPBS" Then
'                         gtPatient(1).Scripts(ix).Veteran = True
'                     Else
'                         gtPatient(1).Scripts(ix).Veteran = False 'ok
'                     End If
'                     '----------------------------------------------------------
'                     'Set miscellaneous flags for printing, deletion, saving etc
'                     '----------------------------------------------------------
'                     gtPatient(1).Scripts(ix).Deleted = False  'ok
'                     gtPatient(1).Scripts(ix).Printed = False  'ok
'                     gtPatient(1).Scripts(ix).Saved = False  'ok
'                     gtPatient(1).Scripts(ix).Reg24 = False
'             End If      'matches rs.recordcount END OF CODE FOR EVERYTHING DONE TO A SINGLE DRUG
'         End If          'Matches If bAllergic Then
'       End With          'Matches first With Data2RsClone
'    End If               'matches If iExists = False Then (is dug not already in list)
'    GoTo NextDrug:
' PromptUser:
'        lresponse = MsgBox(sPromptMsg, vbOK, sPromptTitle)
' NextDrug:
'  Next icounter       'count of all bookmarks selected in the grid
'     '---------------------------------------------------------------
'     'Update the list of all medications prescribed this consultation
'     '---------------------------------------------------------------
'     Script_Items_DisplayThosePrescribed
'     '-----------------------------------------
'     'remove bookmarks from the medication list
'     '-----------------------------------------
'     While TDBGrid1(0).SelBookmarks.Count <> 0
'           TDBGrid1(0).SelBookmarks.Remove 0
'     Wend
' End If 'matches  If TDBGrid1(0).SelBookmarks.Count Then
' End Sub
'
' Private Sub TDBGrid1_FetchCellStyle(Index As Integer, ByVal Condition As Integer, ByVal Split As Integer, Bookmark As Variant, ByVal Col As Integer, ByVal CellStyle As TrueDBGrid60.StyleDisp)
'     On Error Resume Next
'     If Index = 0 And TDBGrid1(0).Tag = cGrID_Image_Medications Then
'         Data2RsClone.Bookmark = Bookmark
'         If Data2RsClone!Authority_ID <> 0 Then
'             CellStyle = "Authority"
'         End If
'     End If
'
' End Sub
'
' Private Sub TDBGrid1_GotFocus(Index As Integer)
' Select Case Index
' Case 0
'
'  Select Case SSActiveTabs1.SelectedTab.Key
'  Case "medications"
'        'ActiveList = cList_Medications
'  Case "requests"
'  Case "graphs"
'  Case "referrals"
'    '  itdbgrid2_image = cGrID_Image_Letters
'     TDBGrid1(0).MarqueeStyle = dbgHighlightRow
'  End Select
'  TDBGrid1(0).MarqueeStyle = dbgHighlightRow
' Case 1
'  TDBGrid1(Index).MarqueeStyle = dbgHighlightRow
' Case 2
'   itdbgrid1_image = cGrID_Image_ScratchPad
'    TDBGrid1(2).MarqueeStyle = dbgHighlightRow
' End Select
' End Sub
'
' Private Sub TDBGrid1_KeyPress(Index As Integer, KeyAscii As Integer)
'        Select Case Index
'         Case 0
'             If KeyAscii = vbKeyReturn Then
'                 TDBGrid1_DblClick (0)
'             End If
'             If itdbgrid1_image = cGrID_Image_indications Then
'
'                 '--------------------------------------------------
'                 'Move to the drug whose letter starts with keyascii
'                 '--------------------------------------------------
'                 Screen.MousePointer = vbHourglass
'                 sMsg = "Left(Brand, 1) Like " & Chr$(34) & Chr$(KeyAscii) & Chr$(34)
'                 Data2RsClone.FindNext sMsg
'                 If Not Data2RsClone.NoMatch Then
'                     Data2.Recordset.Bookmark = Data2RsClone.Bookmark
'                 Else
'                     Data2RsClone.FindFirst sMsg
'                     If Not Data2RsClone.NoMatch Then
'                         Data2.Recordset.Bookmark = Data2RsClone.Bookmark
'                     End If
'                 End If
'                 Screen.MousePointer = vbArrow
'           End If
'        End Select
' End Sub
'
' Private Sub TDBGrid1_LostFocus(Index As Integer)
'  TDBGrid1(Index).MarqueeStyle = dbgNoMarquee '  no marquee
'  Select Case Index
' Case 0
' Case 1
'
' End Select
' End Sub
'
' Private Sub TDBGrid1_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
'        Set SourceControl = TDBGrid1(Index)
'        TDBGrid1(Index).MarqueeStyle = dbgHighlightRow
'         Select Case Index
'         Case 0
'             Select Case Button
'             Case vbKeyRButton
'                 If RecordsExist(Data2) Then
'                   Select Case TDBGrid1(0).Tag
'                    Case cGrID_Image_Requests
'                        If RecordsExist(Data2) Then
'                           If gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsForm Then
'                              If InStr(Data2.Recordset!Description, ";") <> Len(Data2.Recordset!Description) Then
'                                 SSActiveToolBars1.Tools("ID_RequestsReverseEntry").ChangeAll ssChangeAllName, "Reverse multiple requests"
'                              Else
'                                 SSActiveToolBars1.Tools("ID_RequestsReverseEntry").ChangeAll ssChangeAllName, "Reverse single request"
'                              End If
'                           Else
'                               SSActiveToolBars1.Tools("ID_RequestsReverseEntry").ChangeAll ssChangeAllName, "Reverse single request"
'                           End If
'                           If Data2.Recordset!Consult_ID = gtconsult.Consult_ID Then
'                                SSActiveToolBars1.Tools("ID_RequestsReverseEntry").Enabled = True
'                            Else
'                               SSActiveToolBars1.Tools("ID_RequestsReverseEntry").Enabled = False
'                            End If
'                                                        SSActiveToolBars1.PopupMenu "ID_Requests"
'                        End If
'                    Case cGrID_Image_Recalls
'                         If RecordsExist(Data2) Then
'                            If Data2.Recordset!Consult_ID = gtconsult.Consult_ID Then
'                                SSActiveToolBars1.Tools("ID_RecallListReverseEntry").Enabled = True
'                            Else
'                               SSActiveToolBars1.Tools("ID_RecallListReverseEntry").Enabled = False
'                            End If
'                              SSActiveToolBars1.PopupMenu "ID_RecallList"
'                         End If
'                    Case cGrID_Image_Medications
'                         If RecordsExist(Data2) Then
'                            If TDBGrid1(0).Caption = "Active Medications" Then
'                               SSActiveToolBars1.Tools("ID_MedsMakeActive").Enabled = False
'                               SSActiveToolBars1.Tools("ID_MakeActiveWithComment").Enabled = False
'                               SSActiveToolBars1.Tools("ID_MakeInactiveWithComment").Enabled = True
'                               SSActiveToolBars1.Tools("ID_MedsMakeInactive").Enabled = True
'
'                            Else
'                               SSActiveToolBars1.Tools("ID_MedsMakeActive").Enabled = True
'                               SSActiveToolBars1.Tools("ID_MakeActiveWithComment").Enabled = True
'
'                              SSActiveToolBars1.Tools("ID_MakeInactiveWithComment").Enabled = False
'                              SSActiveToolBars1.Tools("ID_MedsMakeInactive").Enabled = False
'                            End If
'                            SSActiveToolBars1.PopupMenu "ID_Medications"
'                         End If
'                    Case cGrID_Image_Letters
'                         If RecordsExist(Data2) Then
'                             If Data2.Recordset!Consult_ID <> gtconsult.Consult_ID Then
'                                SSActiveToolBars1.Tools("ID_LettersReverseEntry").Enabled = False
'                             Else
'                                SSActiveToolBars1.Tools("ID_LettersReverseEntry").Enabled = True
'                             End If
'                             If Picture5.Visible = False Then
'                                 SSActiveToolBars1.Tools("ID_LettersReprint").Enabled = False
'                             Else
'                                  SSActiveToolBars1.Tools("ID_LettersReprint").Enabled = True
'                             End If
'                             SSActiveToolBars1.PopupMenu "ID_Letters"
'                         End If
'                    End Select
'                 End If
'              End Select
'          Case 1
'               If Button = 2 Then
'                     If RecordsExist(Data3) Then
'                             SSActiveToolBars1.PopupMenu "ID_RecallReviewReminders"
'                     End If
'               End If
'          Case 2 'the scratchpad grid
'               If Button = 2 Then
'               If RecordsExist(Data4) Then
'                  If Data4.Recordset!Consult_ID = gtconsult.Consult_ID Then
'                    SSActiveToolBars1.Tools("ID_ScratchPadEdit").Enabled = True
'                  Else
'                    SSActiveToolBars1.Tools("ID_ScratchPadEdit").Enabled = False
'                  End If
'                  SSActiveToolBars1.PopupMenu "ID_Scratch"
'               End If
'               End If
'
'          End Select
' End Sub
'
' Private Sub TDBGrid1_RowColChange(Index As Integer, LastRow As Variant, ByVal LastCol As Integer)
'
'       If bExitRoutine Then Exit Sub
'         If TDBGrid1(0).Caption = "Authority Indications" Then
'         'If InStr(lblMasterHeading.Caption, "AUTH") Then
'               bExitRoutine = True
'               'If Len(Text2(0)) = 0 Then
'                ' If Len(Data2.Recordset!Indication) < 62 Then
'                   Text2(0) = Data2.Recordset!Indication
'                ' Else
'                '   Text2(0) = left(Data2.Recordset!Indication, 55) & ".........."
'                ' End If
'                 gtNew_ScriptItem(0).Aia = Data2.Recordset!Indication
'                 'gtNew_ScriptItem(0).authcode = Data2.Recordset!auth_code
'               'End If
'               bExitRoutine = False
'        End If
'        TDBGrid1(0).ToolTipText = "" 'default to no tool tip text
'        '----------------------------------------------------------------
'        'The trid image is used rather than the tab key because some tabs
'        'eg medications may have multiple grid images
'        '----------------------------------------------------------------
'         Select Case TDBGrid1(Index).Tag
'         Case cGrID_Image_Recalls
'              If RecordsExist(Data2) Then
'                 If gtconsult.Consult_ID = Data2.Recordset!Consult_ID Then
'                      SSActiveToolBars1.Tools.Item("ID_RecallListReverseEntry").Enabled = True
'                      SSActiveToolBars1.Tools.Item("ID_RecallListDelete").Enabled = False
'                 Else
'                      SSActiveToolBars1.Tools.Item("ID_RecallListReverseEntry").Enabled = False
'                      SSActiveToolBars1.Tools.Item("ID_RecallListDelete").Enabled = True
'                 End If
'              End If
'         Case cGrID_Image_Letters
'              Referrals_Letter_Show
'
'         Case cGrID_Image_indications
'              Script_ProductInformation_Get1 Data2.Recordset!Brand
'         Case cGrID_Image_AvailableGraphs
'              Graphs_DisplayGraph
'         Case cGrID_Image_Requests
'             If RecordsExist(Data2) Then
'                 TDBGrid1(0).ToolTipText = Data2.Recordset!Date & ": " & Data2.Recordset!Description
'             End If
'         Case cGrID_Image_Medications
'           '   If Data2.Recordset!Authority_ID Then
'           '      TDBGrid1(0).ToolTipText = "AUTHORITY:"
'           '   Else
'               TDBGrid1(0).ToolTipText = ""
'           '   End If
'           '   TDBGrid1(0).ToolTipText = TDBGrid1(0).ToolTipText _
'           '          & Data2.Recordset!drug & " (" & Data2.Recordset!Generic & "), " _
'           '          & "last Prescibed:" & Data2.Recordset!Last_date & "," _
'           '          & Data2.Recordset!Instruction & ", Started on " _
'           '          & Data2.Recordset!Start_date
'
'              If Picture5.Visible Then
'                 Script_ProductInformation_Get Data2.Recordset!drug, Data2.Recordset!Formulation
'              End If
'              '----------------------------------------------------------
'              'If medication prescribed this consult, allow reverse entry
'              '----------------------------------------------------------
'              If RecordsExist(Data2) Then
'                 If gtconsult.Consult_ID = Data2.Recordset!Consult_last_Prescribed Then
'                      SSActiveToolBars1.Tools.Item("ID_MedsReverseEntry").Enabled = True
'                      SSActiveToolBars1.Tools.Item("ID_DeleteMedication").Enabled = False
'                 Else
'                      SSActiveToolBars1.Tools.Item("ID_MedsReverseEntry").Enabled = False
'                      SSActiveToolBars1.Tools.Item("ID_DeleteMedication").Enabled = True
'                 End If
'              End If
'         End Select
' End Sub
' Sub Referrals_Letter_Show()
'       Dim iLetterNotfound As Integer
'       On Error Resume Next
'       If Not (RecordsExist(Data2)) Then
'          Exit Sub
'       End If
'       '----------------------------------
'       'Error trap in case file is missing
'       '----------------------------------
'       sFname = sLetters_Dir & "\" & Data2.Recordset!File_name
'       If Dir(sFname) = "" Then
'          iLetterNotfound = True
'       End If
'       iCentralDisplay = cCentralDisplay_ExistingLetter
'       If Picture5.Visible = False Then
'          With Picture5
'           .left = Picture3.left
'           .toP = Picture3.toP
'           .height = Picture3.height
'           .width = Picture3.width
'           .Visible = True 'the container
'           .ZOrder
'         End With
'       End If
'       '-----------------------------------------------------
'       'Load the selected filename, extract text only
'       'The text in letters are different - larger font sizes
'       'hence transfer it via rtb2 to stop screen flicker when
'       'the font size changes
'       '------------------------------------------------------
'       bExitRoutine = True
'       If iLetterNotfound = False Then
'         rtb2.FileName = sFname
'       End If
'       '-----------------------------------------------------------
'       'Now downsize the text to make it readable on central screen
'       '-----------------------------------------------------------
'       Make_RTB1_BIG 1
'       With RichTextBox1(1)
'           .Font.Size = 8
'           .Visible = True
'           .Locked = False
'           If iLetterNotfound = False Then
'             .Text = rtb2.Text
'           Else
'             .Text = "The file for this letter could not be found in the " _
'                  & "default letter directory."
'             .Locked = True
'           End If
'           .SelStart = 1
'       End With
'       Label5.Caption = ""
'       Text7.Visible = False 'text box to get tag changes
'       '------------------------------------------------------
'       'change heading on top of central area to indicate file
'       '------------------------------------------------------
'       Label4.Visible = True
'       Label4.Font.Size = 7
'       sMsg = Data2.Recordset!File_name
'       sMsg = right(sMsg, Len(sMsg) - (InStr(sMsg, " ")))
'       Label4.Caption = "REFERRAL LETTERS: " & sMsg
'       Label1.Visible = False 'second label on top panel
'       '------------------------------------------------
'       'Save a copy of the letter to compare for changes
'       '------------------------------------------------
'       sTempText = RichTextBox1(1).TextRTF
'       bExitRoutine = False
'      Command2(3).Visible = False
'      Command2(4).Visible = False
'
' End Sub
'
' Private Sub TDBGrid1_UnboundColumnFetch(Index As Integer, Bookmark As Variant, ByVal Col As Integer, Value As Variant)
'
'   Select Case Index
'   Case 0
'
'     '---------------------------------------------------------------------
'     'The data in the unbound column is obtained from the appropriate field
'     'objects. This speeds up the display and makes reporting direct from
'     'the grid possible
'     '---------------------------------------------------------------------
'     On Error Resume Next
'     Data2RsClone.Bookmark = Bookmark  'move data source to current row showing
'     '--------------------
'     'populate each column
'     '--------------------
'     Select Case itdbgrid1_image
'     Case cGrID_Image_Letters
'         Select Case Col
'          Case 1
'                 '----------------------------------------------------------------
'                 'Files are in the format (Patient_ID)_F_surname (space)...details
'                 'Hence only show what is to the right of the first space
'                 '----------------------------------------------------------------
'                 iSpcPos = InStr(ucfField1, " ")
'                 Value = right(ucfField1, Len(ucfField1) - (InStr(ucfField1, " ")))
'
'           End Select
'
'    Case cGrID_Image_Medications
'         If bExitRoutine Then Exit Sub
'         Data2RsClone.Bookmark = Bookmark  'move data source to current row showing
'         Select Case Col
'         Case 1
'             '----------------------------------------------------------------
'             'Construct the format eg 250mg 20's to show to user in pack table
'             '----------------------------------------------------------------
'             sMsg = ""
'            sMsg = "" & ucfField_Active & "" & ucfField_Active_units
'             If ucfField_Per_volume <> "" Then
'                 sMsg = sMsg & "/" & ucfField_Per_volume
'             End If
'             sMsg = sMsg & ucfField_Per_vol_units & " " _
'                & ucfField_Unit_volume & ucfField_Unit_vol_units
'             Value = Trim(sMsg)
'         Case 4
'             Value = Space$(3 - Len(ucfField_Quantity)) & ucfField_Quantity & " rpt " & ucfField_Repeats
'     End Select
'     End Select
'   Case 1 'ucf
'      On Error Resume Next
'      Data3RsClone.Bookmark = Bookmark
'      If Col = 1 Then
'        If Not IsNull(ucfField_MonthsOverdue) Then
'           Select Case ucfField_MonthsOverdue
'           Case 0
'              Value = "due now"
'           Case 1
'              Value = "overdue "
'                Value = Value & ucfField_MonthsOverdue & " mth"
'           Case Is > 1
'              Value = "overdue"
'              Value = Value & ucfField_MonthsOverdue & " mths"
'           Case Is < 0
'                  Value = "Due in " & Abs(ucfField_MonthsOverdue)
'                  If ucfField_MonthsOverdue = -1 Then
'                     Value = Value & " mth"
'                  Else
'                      Value = Value & " mths"
'                  End If
'            End Select
'         Else
'            Value = "??"
'        End If
'     End If
'   End Select
' End Sub
'
' Private Sub TDBGrid2_Click()
'         bExitRoutine = True
'         Select Case iCurrentSection
'
'
'         Case cSection_Immunisations
'              Select Case itdbgrid2_image
'              Case CGrID_Image_Vaccines
'                   Call Text3_KeyPress(1, 13)
'              Case cGrID_Image_Immunisation_Schedules
'                   Call Text3_KeyPress(0, 13)
'              End Select
'         Case cSection_Script
'              Select Case itdbgrid2_image
'                  Case cGrID_Image_Packs
'                   ' Call Text3_LostFocus(3)
'              End Select
'         End Select
'         bExitRoutine = False
'
' End Sub
'
' Private Sub TDBGrid2_DblClick()
'
'     Select Case iCurrentSection
'     Case cSection_FamilyandSocialHistory
'          Select Case itdbgrid2_image
'          Case cGrID_Image_Countries
'                 SH_SelectCountry
'                 Text2(1).SetFocus
'          Case cGrID_Image_languages
'                 SH_SelectLanguage
'                 Text2(2).SetFocus
'          Case cGrID_Image_Occupations
'                 Select_Occupation
'                 Text3(0).SetFocus
'          Case cGrID_Image_FH_Relationships 'the  relationship
'                 iUserclickedOnList = True
'                 FH_Select_FamilyRelationship
'                 Text3(cTxt_FHDisease).SetFocus
'          'Case cGrID_Image_FH_Relationships
'                ' Select_Relative
'               '  Text3(cTxt_FHRelationship).SetFocus
'          Case cGrID_Image_FH_Condition
'                 iUserclickedOnList = True
'                 FH_Select_RelativesDisease
'                 Text3(cTxt_FHComment).SetFocus
'          End Select
'       Case cSection_PastHistory
'          Select Case itdbgrid2_image
'          Case cGrID_Image_PastCondition
'                    iUserclickedOnList = True
'                     PastHistory_Select_Condition
'                     Text3(cTxt_PHComment).SetFocus
'           End Select
'         Case cSection_Referrals
'             Select Case itdbgrid2_image
'             Case cGrID_Image_Organisations
'                  Referrals_Organisation_Select
'
'             Case cGrID_Image_Addresses
'                 Referrals_Address_Select
'                 Text3(cReferrals_ReasonFor) = "Ongoing management"
'                 itdbgrid2_image = cGrID_Image_Referral_Reasons
'                 Referrals_ReasonsFor_Getlist
'                 Referrals_ReasonFor_Select
'                 RichTextBox1(0).SetFocus
'             Case cGrID_Image_persons
'                  Referrals_Person_Select
'                 ' If gtNew_Referral(0).Organisation.ID = 0 And Then
'                 '    Text3(cReferrals_Org_name).SetFocus
'       '    Exit Sub
'                 ' End If
'                 ' If gtNew_Referral(0).Organisation.Address.ID <> 0 Then
'                 '    Text3(cReferrals_ReasonFor).SetFocus
'                 ' End If
'             Case cGrID_Image_Referral_Reasons
'                 Referrals_ReasonFor_Select
'                 RichTextBox1(0).SetFocus
'             Case cGrID_Image_Suburbs
'                 Referrals_Suburb_Select
'                 Text3(cReferrals_ReasonFor).SetFocus
'             Case cGrID_Image_Referrals_PersonCategory
'                  bExitRoutine = True
'                  Text5 = Data1.Recordset!Description
'                  bExitRoutine = False
'                  If Data1.Recordset.Fields(0).Name = "Person_ID" Then
'                     Referrals_Person_Select
'                  Else
'                    gtNew_Referral(0).Person.Category.Name = Data1.Recordset!Category
'                    gtNew_Referral(0).Person.Category.ID = Data1.Recordset!Category_ID
'                    Picture2.Visible = False
'                    Text3(cReferrals_Person).SetFocus
'                  End If
'         End Select
'       Case cSection_Recalls
'             Select Case itdbgrid2_image
'             Case cGrID_Image_RecallReason
'                  Recalls_SelectReason
'             Case cGrID_REcall_lengths
'                  Recalls_SelectLength
'             Case cGrID_Recall_Methods
'                 Recalls_SelectMethod
'             End Select
'          '
'
'           'Case cGrID_REcall_lengths
'
'
'      Case cSection_Script
'          Select Case itdbgrid2_image
'                  Case cGrID_Image_prescribed_For
'                  Case cGrID_Image_indications
'                         Script_Indications_Select
'                         Script_PrescribeByIndication_MakeTable
'                  Case cGrID_Image_DrugClasses
'                      Script_Classes_SelectClass
'                      Text3(2).SetFocus
'                  Case cGrID_Image_Brands
'                       Script_Brand_SelectBrand
'                       Script_Packs_Select
'
'                       Text3(3).SetFocus
'                  Case cGrID_Image_Packs
'                     Script_Packs_Select
'                     Text3(4).SetFocus
'                  End Select
'      Case cSection_requests
'         Select Case itdbgrid2_image
'         Case cGrID_Image_Requests_Providers_Suburbs
'              Requests_Providers_Suburb_Select
'              Text3(cRequest_request).SetFocus
'         Case cGrID_Requests_Provider_types
'              Requests_Providers_Types_Select
'              If Text3(cRequest_Type) = "" Then
'                 Text3(cRequest_Type).SetFocus
'       Exit Sub
'              End If
'              If gtNew_Form(0).Provider.ID = 0 Then
'                 Text3(cRequest_Company).SetFocus
'              Else
'                 Text3(cRequest_request).SetFocus
'             End If
'         Case cGrID_Image_Requests_Providers_Names
'              Requests_Providers_Select
'              Text3(cRequest_request).SetFocus
'          Case cGrID_Image_Requests
'                iUserclickedOnList = True
'               Call Text3_KeyPress(cRequest_request, vbKeyReturn)
'          Case cGrID_Image_Requests_notes
'               iUserclickedOnList = True
'               Call Text3_KeyPress(cRequest_notes, vbKeyReturn)
'          Case cGrID_Image_DrugProducts
'               iUserclickedOnList = True
'               Call Text3_KeyPress(cRequest_Medications, vbKeyReturn)
'          Case cGrID_Requests_copyTo
'            'iUserclickedOnList = True
'           Requests_CopyTo_Select
'           Text3(cRequest_ProgressNote).SetFocus
'
'
'         End Select
'     Case cSection_Reports
'         Select Case itdbgrid2_image
'         'Case cList_Suburbs
'         '          If RecordsExist(Data1) Then
'         '             bExitRoutine = True
'         '             Text3(2) = Data1.Recordset!Town
'         '             Text3(3) = Data1.Recordset!State
'         '             Text3(4) = Data1.Recordset!Postcode
'         '             bExitRoutine = False
'         '             Picture2.Visible = False
'         '          End If
'         End Select
'
'      End Select
'
'
'
'    'Select Case itdbgrid2_image
'    ' Case cTestNamesList
'    '     bExitRoutine = True
'    '     '------------------------------------------------------------------
'    '     'If text in the textbox does not end in a ';' character then add it
'    '     '------------------------------------------------------------------
'    '     If Right(Text3(cQUP_test), 1) <> ";" And InStr(Text3(cQUP_test), ";") = False Then
'    '         Text3(cQUP_test) = Trim(Data1.Recordset!test_description) & ";"
'    '     Else
'    '         'a request already exists on this line, do again unless duplicated
'    '         If InStr(LCase(sExistingText), LCase(Trim(Data1.Recordset!test_description))) = False Then
'    '             Text3(cQUP_test) = sExistingText & Trim(Data1.Recordset!test_description) & ";"
'    '         Else
'    '             'test duplicated
'    '             Text3(cQUP_test) = sExistingText
'    '             TempText = ""
'    '             sMsg = ""
'    '             sLatestTextAdded = ""
'    '             bExitRoutine = False
'    '             SplitIntoExistingAndNewText Text3(cQUP_test)
'    '             bExitRoutine = False
'    '             Exit Sub
'    '         End If
'    '     End If
'    '     '-----------------------------------------------------------------
'    '     'If a profile, get the request names, and Requests_id's into
'    '     'separate arrays:sProfile_REquestNames() and lProfile_RequestIds()
'    '     '-----------------------------------------------------------------
'    '     If Data1.Recordset!Section_ID = cUserProfileSectionID Then
'    '        Deal_with_User_profile
'    '     End If
'    '     Fill_RequestName_RequestID_array
'    '     sExistingText = Text3(cQUP_test)
'    '     TempText = ""
'    '     sMsg = ""
'    '     sLatestTextAdded = ""
'    '     bExitRoutine = False
'    '     SplitIntoExistingAndNewText Text3(cQUP_test)
'    '     bExitRoutine = False
'    '     If iHIV_Deidentify = False Then
'    '        HIVPROMPT
'    '     End If
'    '
'    '
'    ' Case cTermNamesList
'          ' If RecordsExist(Data1) Then
'          '       NewerStill Text3(iSOAP_Line_On), Data1.Recordset!description
'          ' End If
'
'    ' Case cClinicalNotesList
'    '      If RecordsExist(Data1) Then
'    '         NewerStill Text3(cQup_Notes), Data1.Recordset!Description
'    '      End If'
'
'     'CasecList_Medications
'     '    If RecordsExist(Data1) Then
'     '         NewerStill Text3(cQUP_medications), Data1.Recordset!drug
'     '    End If
'     'Case cReasonsNamesList
'     '    Get_ProjectReasons
'     '    display_ReasonForOrdering          'reset to display all reasons
'    ' End Select
'    Exit Sub
'
' End Sub
'
' Private Sub TDBGrid2_KeyDown(KeyCode As Integer, Shift As Integer)
'     Select Case iCurrentSection
'     Case cSection_PastHistory
'          If KeyCode = vbKeyUp Then
'          Data1.Recordset.MovePrevious
'          If Data1.Recordset.BOF = True Then
'             Text3(0).SetFocus
'             Picture2.Visible = False
'          End If
'          End If
'     End Select
' End Sub
'
' Private Sub TDBGrid2_KeyPress(KeyAscii As Integer)
'        If KeyAscii = vbKeyReturn Then
'           TDBGrid2_DblClick
'        End If
' End Sub
'
' Private Sub TDBGrid2_LostFocus()
'  iTGBGrid2_HasFocus = False
' End Sub
'
' Private Sub TDBGrid2_UnboundColumnFetch(Bookmark As Variant, ByVal Col As Integer, Value As Variant)
'
'    If bExitRoutine Then
'       Exit Sub
'    End If
'     On Error Resume Next
'     '---------------------------------------------------------------------
'     'The data in the unbound column is obtained from the appropriate field
'     'objects. This speeds up the display and makes reporting direct from
'     'the grid possible
'     '---------------------------------------------------------------------
'      Data1Rsclone.Bookmark = Bookmark  'move data source to current row showing
'     ' PackClone.Bookmark = Bookmark
'     '--------------------
'     'populate each column
'     '--------------------
'     Select Case itdbgrid2_image
'     Case cGrID_Image_Doctors
'
'     Case cGrID_Image_Packs  'from mims drug list
'     'Data1RsClone.Bookmark = Bookmark  'move data source to current row showing
'
'         Select Case Col
'         Case 0
'         '----------------------------------------------------------------
'         'Construct the format eg 250mg 20's to show to user in pack table
'         '----------------------------------------------------------------
'         sMsg = ""
'         sMsg = ucfField_Active ' active eg 250
'         sMsg = sMsg & ucfField_Active_units 'active_units eg mg
'         If ucfField_Per_volume <> "" Then
'             sMsg = sMsg & "/" & ucfField_Per_volume   'per volume
'         End If
'         sMsg = sMsg & ucfField_Per_vol_units & " "  'per_vol_units
'         sMsg = sMsg & ucfField_Unit_volume 'unit_volume
'         sMsg = sMsg & ucfField_Unit_vol_units & " "  'per_vol_units
'
'         If ucfField_No_of_Packs <> "" Then
'            If ucfField_No_of_Packs <> "1" Then
'             sMsg = sMsg & " " & ucfField_No_of_Packs & " " & Chr$(215) & " "
'            End If
'         End If
'         sMsg = sMsg & ucfField_Units_per_pack  'eg 1 or 2
'         Value = Trim(sMsg) & "'s"
'      End Select
'     End Select
' End Sub
'
' Private Sub Text1_KeyPress(KeyAscii As Integer)
'      Select Case iCurrentSection
'      Case cSection_Script
'        Restrict_Keys mrKeys_NumbersOnly, KeyAscii
'        If KeyAscii = vbKeyReturn Then
'             Text3(5).SetFocus
'        End If
'
'      End Select
' End Sub
'
' Private Sub Text1_LostFocus()
'         Select Case iCurrentSection
'             Case cSection_Script
'             '------------------------------------------
'             'Firstly only allow multiples of pack sizes
'             '------------------------------------------
'             If Trim(Text1) <> "" Then
'                 bExitRoutine = True
'                 If Val(Trim(Text1)) = gtNew_ScriptItem(0).units_per_pack _
'                   Or (Val(Trim(Text1)) Mod gtNew_ScriptItem(0).units_per_pack <> 0) _
'                   Or Val(Text1) = 0 Then
'                   Text1 = gtNew_ScriptItem(0).units_per_pack
'                   Script_Item_Display_PBSStatus
'                   'If authority section showing, make this invisible
'                   If gtNew_ScriptItem(0).authcode = 0 Then
'                      Design_Panel_Script_Authorities False
'                   End If
'                 Else
'                   '-------------------------
'                   'There are valid multiples
'                   '-------------------------
'                   If Val(Trim(Text1)) > gtNew_ScriptItem(0).units_per_pack Then
'                      '----------------------------------------------
'                      'If not the pbs or rpbs pack size, make private
'                      '----------------------------------------------
'                      If gtNew_ScriptItem(0).pbs = "" _
'                         Or gtNew_ScriptItem(0).AuthorityScript = False Then
'                         Label2(6).Caption = "PRIV Drug"
'                         gtNew_ScriptItem(0).Print_Status = "PRIV"
'                      End If
'                   End If
'                 End If
'              End If
'              bExitRoutine = False
'         End Select
'  End Sub
'
' Private Sub Text2_Change(Index As Integer)
'     If bExitRoutine = True Then
'        Exit Sub
'     End If
'     Select Case iCurrentSection
'     Case cSection_Script
'         bExitRoutine = True
'         Select Case Index
'         Case 0
'              Text2(0).BackColor = vbWhite
'              gtNew_ScriptItem(0).Aia = Trim(Text2(Index))
'         Case 1
'              gtNew_ScriptItem(0).AuthPhoneApproval = Trim(Text2(Index))
'         Case 2 'the date of script
'             gtNew_ScriptItem(0).Script_Date = Trim(Text2(Index))
'         End Select
'         bExitRoutine = False
'
'     Case cSection_FamilyandSocialHistory
'
'         Case cSection_PastHistory
'          bExitRoutine = True
'          Select Case Index
'          Case 0 '#cigs per day
'               '-----------------------------------------------------
'               'Allow up to 99 per day, don't allow a preceeding zero
'               'set option buttons accordingly
'               '-----------------------------------------------------
'               Text2(0) = Trim(Text2(0))
'               If Len(Trim(Text2(0))) Then 'If a number in cigs/day text box
'                  If Text2(0) = "0" Then
'                     Text2(0) = ""
'                  End If
'                  '----------------------------------------------
'                  'if no age stopped then set current smoker flag
'                  '----------------------------------------------
'                  If Trim(Text2(2)) = "" Then
'                     Option3(0).Value = 1
'                     Option3(0).TabStop = False
'                  Else
'                     '----------------------------------------
'                     'age stopped exists, set past smoker flag
'                     '----------------------------------------
'                     Option3(1).Value = 1
'                     Option3(1).TabStop = False
'                  End If
'               Else
'                  '-------------------------------------------------
'                  'user has deleted number of cigs, reset everything
'                  '-------------------------------------------------
'                   Text2(1) = ""
'                   Text2(2) = ""
'                   Option3(0).Value = False
'                   Option3(0).TabStop = False
'                   Option3(1).Value = False
'                   Option3(1).TabStop = False
'               End If
'
'          Case 1
'               '---------------------------
'               'don't allow preceeding zero
'               '---------------------------
'               If Text2(1) = "0" Then
'                     Text2(1) = ""
'               End If
'               '----------------------------
'               'User has deleted age started
'               '----------------------------
'               If Len(Text2(1)) = 0 Then
'                  Text2(2) = ""    'delete age stopped etc
'                  Option3(0).Value = False
'                  Option3(1).Value = False
'               End If
'               '-----------------------------------------------
'               'If age started greater than patients age, reset
'               '-----------------------------------------------
'               If Val(Text2(1)) > gtPatient(1).Age Then
'                  Text2(1) = ""
'               End If
'          Case 2
'               '---------------------------
'               'don't allow preceeding zero
'               '---------------------------
'               If Text2(2) = "0" Then
'                     Text2(2) = ""
'               End If
'             '-------------------------------------------
'             'if year ended smoking > patients age, reset
'             '-------------------------------------------
'             If Len(Text2(2)) Then
'                 If Val(Text2(2)) > gtPatient(1).Age Then
'                    Option3(1).Value = False
'                    Option3(0).Value = True
'                    Option3(0).TabStop = False
'                    Text2(2) = ""
'                 End If
'                 Option3(1).Value = True
'                 Option3(1).TabStop = False
'
'               Else
'                  '----------------------------------------------------
'                  'year ending changed to no value, becomes past smoker
'                  '----------------------------------------------------
'                  If Len(Text2(0)) Then
'                   Option3(0).Value = True
'                   Option3(0).TabStop = False
'                  End If
'               End If
'          Case 3 'alcohol grams
'               '--------------------------
'               'Don't allow a preceeding 0
'               '--------------------------
'               If Text2(3) = "0" Then
'                  Text2(3) = ""
'               End If
'               '--------------------------------------------------
'               'If delete the amount of alcohol switch off options
'               '--------------------------------------------------
'               If Len(Trim(Text2(Index))) = 0 Then
'                  Option4(0).Value = False
'                  Option4(0).TabStop = False
'                  Option4(1).Value = False
'                  Option4(1).TabStop = False
'               End If
'
'          End Select
'          bExitRoutine = False
'          '----------------------------------
'          'format the smoking data on the fly
'          '----------------------------------
'          If Index < 3 Then
'               RecreationalDrugs_smoking_FormatData
'          Else
'               RecreationalDrugs_Alcohol_FormatData
'          End If
'     End Select
' End Sub
'
' Private Sub Text2_GotFocus(Index As Integer)
'    If bExitRoutine Then
'         Exit Sub
'     End If
'     Highlight_Control Text2(Index), True, LineLeftBorder, LineTopBorder
'     Select Case iCurrentSection
'     Case cSection_FamilyandSocialHistory
'          For icounter = 0 To 2
'              Text2(icounter).TabStop = True
'          Next
'          Select Case Index
'          Case 0 'country of origen, default to Australia
'             Load_Layout "Countries", TDBGrid2, cGrID_Image_Countries
'             bExitRoutine = True
'             If Trim(Text2(Index)) = "" Then
'                Text2(Index) = "Australia"
'             End If
'             SH_Countries_GetList
'             bExitRoutine = False
'          Case 1   'Language spoken, default to English
'
'             Load_Layout "Languages", TDBGrid2, cGrID_Image_languages
'             bExitRoutine = True
'             If Trim(Text2(Index)) = "" Then
'                Text2(Index) = "English"
'             End If
'             SH_Languages_GetList
'             DoEvents
'             bExitRoutine = False
'          Case 2
'
'             Load_Layout "Occupations", TDBGrid2, cGrID_Image_Occupations
'             SH_Occupations_GetList
'          End Select
'           If Index < 3 Then
'               Picture2.toP = Picture3.toP + Text2(Index).toP + Text2(Index).height
'               Picture2.left = Picture3.left + Text2(Index).left
'               Picture2.height = TDBGrid2.height + 24 '1000
'               Picture2.width = Picture3.width / 3
'               TDBGrid2.width = Picture2.width - 24
'           End If
'      Case cSection_PastHistory
'           For icounter = 0 To 4: Text2(icounter).TabStop = True: Next
'
'     End Select
' End Sub
'
' Private Sub Text2_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
'     Select Case iCurrentSection
'       Case cSection_FamilyandSocialHistory
'          Select Case Index
'          Case 0
'              If itdbgrid2_image <> cGrID_Image_Countries Then
'                 Text2_GotFocus (0)
'              End If
'          Case 1
'              If itdbgrid2_image <> cGrID_Image_languages Then
'                 Text2_GotFocus (1)
'              End If
'          Case 2
'              If itdbgrid2_image <> cGrID_Image_Occupations Then
'                 Text2_GotFocus (2)
'              End If
'
'          End Select
'     End Select
'     If bExitRoutine Then
'         Exit Sub
'     End If
'         Select Case KeyCode
'         Case vbKeyDown
'              KeyCode = 0
'              If Data1.Recordset.EOF <> True Then
'                 Data1.Recordset.MoveNext
'              Else
'                 If Data1.Recordset.BOF <> True Then
'                 Data1.Recordset.MovePrevious
'                 End If
'             End If
'         Case vbKeyUp
'              KeyCode = 0
'             If Data1.Recordset.BOF <> True Then
'                 Data1.Recordset.MovePrevious
'             ElseIf Data1.Recordset.EOF <> True Then
'                 Data1.Recordset.MoveNext
'             End If
'         End Select
' End Sub
'
' Private Sub Text2_KeyPress(Index As Integer, KeyAscii As Integer)
'    If bExitRoutine Then
'         Exit Sub
'     End If
'    Select Case iCurrentSection
'    Case cSection_Script
'         If Index = 1 Then
'              KeyAscii = Asc(UCase(Chr(KeyAscii)))
'         End If
'         If KeyAscii = vbKeyReturn Then
'            If Index = 0 Then
'               Text2(1).SetFocus
'            ElseIf Index = 1 Then
'               Command3(2).SetFocus
'            End If
'         End If
'    Case cSection_FamilyandSocialHistory
'              Restrict_Keys mrKeys_SQLCrash, KeyAscii
'              Restrict_Keys mrKeys_Letters, KeyAscii
'              Timer2.Enabled = True
'              iTimerCounter = 0
'      Select Case itdbgrid2_image
'          Case cGrID_Image_Countries
'               If itdbgrid2_image <> cGrID_Image_Countries Then
'                  Call Text2_GotFocus(0)
'               End If
'               If KeyAscii = vbKeyReturn Then
'                  Text2(1).SetFocus
'               End If
'          Case cGrID_Image_languages
'               If itdbgrid2_image <> cGrID_Image_languages Then
'                  Call Text2_GotFocus(1)
'               End If
'               If KeyAscii = vbKeyReturn Then
'                 ' SH_SelectLanguage
'                  Text2(2).SetFocus
'               End If
'          Case cGrID_Image_Occupations
'               If itdbgrid2_image <> cGrID_Image_Occupations Then
'                  Call Text2_GotFocus(2)
'               End If
'               If KeyAscii = vbKeyReturn Then
'                  'Select_Occupation
'                  Text3(0).SetFocus
'               End If
'          End Select
'     Case cSection_PastHistory
'         Select Case Index
'         Case 0, 1, 2, 3
'              '---------------------------------------------------
'              'cigarettes per day, from age, to age,grams etoh/day
'              'text boxes 0,1,2 = smoking 3 = alcohol 4 = alcohol
'              'comment
'              '---------------------------------------------------
'               Restrict_Keys mrKeys_NumbersOnly, KeyAscii
'               If KeyAscii = vbKeyReturn Then
'                  Text2(fMinInteger(Index + 1, 4)).SetFocus
'              End If
'        Case 4
'             If KeyAscii = vbKeyReturn Then
'                Text3(0).SetFocus
'             End If
'        End Select
'   End Select
' End Sub
'
' Private Sub Text2_LostFocus(Index As Integer)
'     If bExitRoutine Then
'         Exit Sub
'     End If
'     Highlight_Control Text2(Index), False, LineLeftBorder, LineTopBorder
'        Select Case iCurrentSection
'     Case cSection_FamilyandSocialHistory
'          For icounter = 0 To 2
'               Text2(icounter).TabStop = False
'          Next
'
'         iTimerCounter = 0
'         Timer2.Enabled = False
'         Select Case Index
'         Case 0 'country
'             SH_SelectCountry
'         Case 1  'language
'             SH_SelectLanguage
'         Case 2 'occupation
'             Select_Occupation
'         End Select
'         bExitRoutine = True
'         Text2(Index) = StrConv(Trim(Text2(Index)), vbProperCase)
'         bExitRoutine = False
'         Picture2.Visible = False
'     Case cSection_PastHistory
'       For icounter = 0 To 4: Text2(icounter).TabStop = False: Next
'         Select Case Index
'         Case 0
'            '  RecreationalDrugs_smoking_FormatData
'         Case 1
'             'insert system message here later - validate ages
'             If Val(Text2(Index)) > gtPatient(1).Age Then
'                Text2(1) = ""
'             ElseIf Val(Text2(1)) > Val(Text2(2)) Then
'                 Text2(2) = ""
'           End If
'          '  RecreationalDrugs_smoking_FormatData
'         Case 2
'             'validate ages
'             If Val(Text2(2)) > gtPatient(1).Age Then
'                Text2(2) = ""
'             ElseIf Val(Text2(2)) < Val(Text2(1)) Then
'                 Text2(2) = ""
'             End If
'         End Select
'      Case cSection_Script
'             Select Case Index
'             Case 0  'the authority indication
'
'             Case 2 'the date of script
'                     bExitRoutine = True
'                     Dim iFlag As Integer
'                     ValidateDate Text2(Index), "Date of script", iFlag
'                     If iFlag Then
'                        Text2(Index) = sToday
'                     End If
'                     bExitRoutine = False
'             End Select
'      End Select
' End Sub
'
' Sub RecreationalDrugs_smoking_FormatData()
'     If bExitRoutine Then
'        Exit Sub
'     End If
'     '-------------------------------------------------------------------
'     'Smoking data is in a single parsable string in following format
'     'cigs per day;from age;toage;flag where flag of 0 = past 1 = current
'     'eg 20;15;45;0 means smokes average 20/day from age 15 to 45 years
'     '-------------------------------------------------------------------
'     Dim sMsg
'     sMsg = Format(Trim(Text2(0))) & ";" 'cigs per day
'     sMsg = sMsg & Format(Trim(Text2(1))) & ";" 'from age
'     sMsg = sMsg & Format(Trim(Text2(2))) & ";" 'to age
'
'     If Option3(0).Value = True Then
'         sMsg = sMsg & "0;"
'     ElseIf Option3(1).Value = True Then
'         sMsg = sMsg & "1;"
'     ElseIf Option3(2).Value = True Then
'        sMsg = sMsg & "2;"
'     Else
'        sMsg = sMsg & "3;"  '3 = value not recorded
'     End If
'     gtPatient(1).Recreationaldrugs(0).qualifier = sMsg
'     gtPatient(1).Recreationaldrugs(0).Drug_ID = 1
'     If sMsg <> ";;;3;" Then
'        gtPatient(1).Recreationaldrugs(0).DataChanged = True
'        gtPatient(1).RecreationalDrugs_Changed = True
'        gtPatient(1).DataChanged = True
'     End If
'
' End Sub
' Sub RecreationalDrugs_Alcohol_FormatData()
'     If bExitRoutine Then
'        Exit Sub
'     End If
'     '------------------------------------------------------------
'     'Takes contents of text2(3) = grams per day and combines with
'     'text2(4) (the comment up to a max of 45 characters
'     '------------------------------------------------------------
'     bExitRoutine = True
'     sMsg = Format(Trim(Text2(3))) & ";" & Trim(Text2(4)) & ";"
'     If Option4(0).Value = True Then
'        sMsg = sMsg & "d;" 'day
'     ElseIf Option4(1).Value = True Then
'        sMsg = sMsg & "w;" 'week
'     ElseIf Option4(2).Value = True Then
'        sMsg = sMsg & "m;" 'none
'     ElseIf Option4(3).Value = True Then
'        sMsg = sMsg & "n;" 'none
'     Else
'        sMsg = sMsg & "u;" 'u = unknown units
'     End If
'     bExitRoutine = False
'     gtPatient(1).Recreationaldrugs(1).qualifier = sMsg
'     gtPatient(1).Recreationaldrugs(1).Drug_ID = 2
'     If sMsg <> ";;" Then
'        gtPatient(1).Recreationaldrugs(1).DataChanged = True
'        gtPatient(1).RecreationalDrugs_Changed = True
'        gtPatient(1).DataChanged = True
'        Command2(0).Enabled = True 'the save button
'     End If
' End Sub
' Sub Get_DoctorsPreferences()
'
'     'On Error GoTo ErrHandler
'     '--------------------------------------
'     'Each doctor has individual preferences
'     '--------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Setup_GetDrDefaults")
'     Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'     Set Rs = Q.OpenRecordset()
'     If Rs.EOF + Rs.BOF <> -2 Then
'         With Rs
'             .Move 1: gtProgramDefaults.Provider_Type = Rs!Translated_Value
'                     gtProgramDefaults.Provider_Description = Rs!Value
'             .Move 2: gtProgramDefaults.NotesSource = Rs!Translated_Value
'             .Move 1: gtProgramDefaults.PrintPreview = Rs!Translated_Value
'             .Move 2: gtProgramDefaults.Script_ProgramName = Rs!Value
'             .Move 1: gtProgramDefaults.Script_Filename = Rs!Value
'             .Move 1: gtProgramDefaults.Script_Path = Rs!Value
'             .Move 2: gtProgramDefaults.Demographic_ProgramName = Rs!Value
'             .Move 1: gtProgramDefaults.Demographic_filename = Rs!Value
'             .Move 1: gtProgramDefaults.Demographic_DbaseType = Rs!Value
'             .Move 1: gtProgramDefaults.Demographic_Path = Rs!Value
'         End With
'     End If
'     Rs.Close
'     Db.Close
'     Exit Sub
'
'     sMsg = "An error occurred whilst trying to load the doctors preferences."
'     sMsg = sMsg & "The program cannot be loaded." & vbLf & vbLf
'     sMsg = sMsg & "If the problem persists, please ring for technical support"
'     lresponse = MsgBox(sMsg, vbCritical + vbOKOnly, "PROBLEM:")
'    ' Call Form_Unload(0)
'     End
'
' End Sub
'
' Sub Get_SurgeryAddress()
'     '------------------------
'     'Get the practice details
'     '------------------------
'     Init1.FileName = sMedRec_Ini
'     Init1.Application = "Practice Details"
'     Init1.Parameter = "Name"
'     gtSurgery.Name = Init1.Value
'     Init1.Parameter = "Street1"
'     gtSurgery.Street1 = Init1.Value
'     Init1.Parameter = "Street2"
'     gtSurgery.Street2 = Init1.Value
'     Init1.Parameter = "suburb"
'     gtSurgery.suburb = Init1.Value
'     Init1.Parameter = "State"
'     gtSurgery.State = Init1.Value
'     Init1.Parameter = "Postcode"
'     gtSurgery.Postcode = Init1.Value
'     Init1.Parameter = "Telephone"
'     gtSurgery.Phone = Init1.Value
'     Init1.Parameter = "facsimilie"
'     gtSurgery.Fax = Init1.Value
'     Init1.Parameter = "email"
'     gtSurgery.Email = Init1.Value
' End Sub
'
' Sub Printers_Swap(PrinterName As String)
'     '-------------------------------------------------------------------
'     'Check the printer collection and swap to the printer which user has
'     'chosen to print the forms on. This needs DevStudio SP3 or later to
'     'work.
'     '-------------------------------------------------------------------
'     Dim p As Object
'     For Each p In Printers
'         If p.DeviceName = PrinterName Then
'             Set Printer = p
'             Exit For
'         End If
'     Next p
' End Sub
' Sub Spelling_OpenDictionaries()
'     '-----------------------------
'     'Allocate default dictionaries
'     '-----------------------------
'     VSSpell1.OpenStandard(True) = sSpellDataDir & "\medical.vtd"
'     VSSpell1.OpenCustom(True) = sSpellDataDir & "\test.dic"
'    ' If VSSpell1.Resultcode > 0 Then
'
'   '
'     Set speller = VSSpell1
'     'MsgBox VSSpell1.DictionaryName(-1)
'     End Sub
'
' Sub LinktoDemographicData()
'
'     Screen.MousePointer = vbHourglass
'     '-------------------------------------
'     'Load the appropriate patient database
'     '-------------------------------------
'     SourceTableName = "Patient"
'     connectString = ";DATABASE=" & gtProgramDefaults.Demographic_Path & "\" & gtProgramDefaults.Demographic_filename
'     Set ws1 = DBEngine.CreateWorkspace("Special", "Harvest", "@YAHWEH^")
'     Retval = ConnectSource
'     sPatients_MDB = sMEDREC_MDB
'     Screen.MousePointer = vbArrow
' End Sub
'
'
'
'
'
'
'
' Sub SetCursor(Source_textbox As Control)
'     '---------------------------------------------------------------
'     'used to work out which word to highlight when user doubleclicks
'     'over it in the text3()
'     '---------------------------------------------------------------
'      If Source_textbox.SelStart < iStartSpot Then
'         Source_textbox.SelStart = iStartSpot
'      End If
' End Sub
' Sub display_PatientNameAndAddress()
'  Screen.MousePointer = vbHourglass
'  '------------------------------------------------------------------
'  'This routine is called by get_patient if a single patient or
'  'tdbgrid1_dblClick if multiple patient list is showing
'  'Note if put "" before a null data2 record stops crash
'  'note the patient_ID is different from the patient_folder reference
'  '------------------------------------------------------------------
'  Select Case LCase(gtProgramDefaults.Demographic_ProgramName)
'            Case "medical director"
'                 sMsg = StrConv(Data2.Recordset!Firstname, vbProperCase) & " " & StrConv(Data2.Recordset!Surname, vbProperCase)
'
'                 sMsg = sMsg & " " & StrConv(Data2.Recordset!Address, vbProperCase)
'                 sMsg = sMsg & " " & UCase(Data2.Recordset!City) & " " & Data2.Recordset!Postcode
'                 SSActiveToolBars1.Tools("ID_FindWhat").Edit.Text = sMsg
'                 gtPatient(1).Firstname = "" & Data2.Recordset!Firstname
'                 gtPatient(1).Surname = "" & Data2.Recordset!Surname
'                 gtPatient(1).Title = "" & Data2.Recordset!Title
'                 gtPatient(1).Sex = "" & Data2.Recordset!Sex
'                 gtPatient(1).Street1 = "" & Data2.Recordset!Address
'                 gtPatient(1).suburb = "" & Data2.Recordset!City
'                 gtPatient(1).Postcode = "" & Data2.Recordset!Postcode
'                 gtPatient(1).Date_of_Birth = "" & Data2.Recordset!DOB
'                 gtPatient(1).HomePhone = "" & Data2.Recordset!Phone
'                 gtPatient(1).MedicareNo = "" & Data2.Recordset!Mc_no
'                 gtPatient(1).Patient_ID = "" & Data2.Recordset!UR_NO
'                 gtPatient(1).Folder_Number = "" & Data2.Recordset!chart_no
'
'                 DoEvents
'                  'create treatment table now to get latest version
'                  On Error Resume Next
'                 Set Db = OpenDatabase(sMEDREC_MDB, False)
'                 Db.Execute "Drop Table Rx_MDW"
'                 Db.Execute "SELECT Rx.* INTO Rx_MdW FROM Rx"
'                 Db.Execute "CREATE INDEX Rx ON Rx_MDW ([Drug_no])"
'                 Db.Close
'                 On Error GoTo 0
'              Case "pracsoft gp"
'                 sMsg = StrConv(Data2.Recordset!Firstname, vbProperCase) & " " & StrConv(Data2.Recordset!Surname, vbProperCase)
'                 sMsg = sMsg & " " & StrConv(Data2.Recordset!Street, vbProperCase)
'                 sMsg = sMsg & " " & UCase(Data2.Recordset![Town/suburb]) & " " & Data2.Recordset!Postcode
'                 gtconsult.Patient_ID = Data2.Recordset!PatientNo
'                 SSActiveToolBars1.Tools("ID_FindWhat").Edit.Text = sMsg
'                 'SSActiveToolBars1.Tools("ID_Allergies").Edit.Text = "Penicillin"
'
'                 gtPatient(1).Firstname = "" & Data2.Recordset!Firstname
'                 gtPatient(1).Surname = "" & Data2.Recordset!Surname
'                 gtPatient(1).Title = "" & Data2.Recordset!Title
'                 gtPatient(1).Sex = "" & Data2.Recordset!Sex
'                 gtPatient(1).EntitlementNo = "" & Data2.Recordset!EntitlementNo
'                 gtPatient(1).VeteranNo = "" & Data2.Recordset!VeteranNo
'                 Dim charpos
'                 charpos = InStr(Data2.Recordset!Street, vbCrLf)
'                 If charpos Then
'                     gtPatient(1).Street1 = "" & left(Data2.Recordset!Street, charpos - 1)
'                     gtPatient(1).Street2 = "" & right(Data2.Recordset!Street, Len(Data2.Recordset!Street) - charpos - 1)
'                 Else
'                    gtPatient(1).Street1 = "" & Data2.Recordset!Street
'                 End If
'
'                 gtPatient(1).suburb = "" & Data2.Recordset![Town/suburb]
'                 gtPatient(1).Postcode = "" & Data2.Recordset!Postcode
'                 If "" & Data2.Recordset!DOB = "" Then
'                     MsgBox "Please insert date of birth"
'                     gtPatient(1).Date_of_Birth = "01/01/1900"
'                 Else
'                    gtPatient(1).Date_of_Birth = "" & Data2.Recordset!DOB
'                  End If
'
'                 gtPatient(1).Concession = Data2.Recordset!Concession
'                 Patient_Display_Age
'                 gtPatient(1).HomePhone = "" & Data2.Recordset!Phone_h
'                 gtPatient(1).MedicareNo = "" & Data2.Recordset!MedicareNo
'                 gtPatient(1).Patient_ID = "" & Data2.Recordset!PatientNo
'
'                 If "" & Data2.Recordset!fileNo <> "" Then
'                     gtPatient(1).Folder_Number = Data2.Recordset!fileNo
'                     If "" & Data2.Recordset!filePersNo <> "" Then
'                        gtPatient(1).Folder_Number = Format(Val(Data2.Recordset!filePersNo)) & "-" & Data2.Recordset!fileNo
'                     End If
'                 End If
'
'                ' If "" & Data2.Recordset!fileNo <> "" And "" & Data2.Recordset!filePersNo <> "" Then
'                '     gtpatient(1).Folder_Number = Format(Val(Data2.Recordset!filePersNo)) & "-" & Data2.Recordset!fileNo
'                ' Else
'                '     gtpatient(1).Folder_Number = ""
'                ' End If
'
'                Case "the drsdesk"
'                 sMsg = StrConv(Data2.Recordset!Firstname, vbProperCase) & " " & StrConv(Data2.Recordset!Surname, vbProperCase)
'                 sMsg = sMsg & " " & StrConv(Data2.Recordset!Street1, vbProperCase) & " " & StrConv(Data2.Recordset!Street2, vbProperCase)
'                 sMsg = sMsg & "" & UCase(Data2.Recordset!suburb) & " " & "" & Data2.Recordset!Postcode
'                 gtconsult.Patient_ID = Data2.Recordset![Patient code]
'                 SSActiveToolBars1.Tools("ID_FindWhat").Edit.Text = sMsg
'                 gtPatient(1).Firstname = "" & Data2.Recordset!Firstname
'                 gtPatient(1).Surname = "" & Data2.Recordset!Surname
'                 gtPatient(1).Title = "" & Data2.Recordset!Title
'                 gtPatient(1).Sex = "" & Data2.Recordset!Sex
'                 gtPatient(1).Street1 = "" & Data2.Recordset!Street1
'                 gtPatient(1).Street2 = "" & Data2.Recordset!Street2
'                 gtPatient(1).suburb = "" & Data2.Recordset!suburb
'                 gtPatient(1).Postcode = "" & Data2.Recordset!Postcode
'                 gtPatient(1).Date_of_Birth = "" & Data2.Recordset![Date of birth]
'                 gtPatient(1).HomePhone = "" & Data2.Recordset![Home Phone]
'                 gtPatient(1).MedicareNo = "" & Data2.Recordset![Medicare Number]
'                 gtPatient(1).Patient_ID = "" & Data2.Recordset![Patient code]
'                 gtPatient(1).Folder_Number = Data2.Recordset![Patient code]
'
'
'              Case "mims script"
'                 sMsg = StrConv(Data2.Recordset!Firstname, vbProperCase) & " " & StrConv(Data2.Recordset!Surname, vbProperCase)
'                 sMsg = sMsg & " " & StrConv("" & Data2.Recordset!AddressLine1, vbProperCase)
'                 sMsg = sMsg & " " & Data2.Recordset!AddressLine3 & " " & "" & Data2.Recordset!AddressPostcode
'                 gtconsult.Patient_ID = Data2.Recordset!PatientId
'                 SSActiveToolBars1.Tools("ID_FindWhat").Edit.Text = sMsg
'                 gtPatient(1).Firstname = "" & Data2.Recordset!Firstname
'                 gtPatient(1).Surname = "" & Data2.Recordset!Surname
'                 gtPatient(1).Title = "" & Data2.Recordset!Title
'                 gtPatient(1).Sex = "" & Data2.Recordset!Sex
'                 gtPatient(1).Street1 = "" & Data2.Recordset!AddressLine1
'                 If ("" & Data2.Recordset!AddressLine3 = "") Or ("" & Data2.Recordset!AddressLine3 = "NSW") Then
'                    gtPatient(1).suburb = "" & Data2.Recordset!AddressLine2
'                 Else
'                     gtPatient(1).suburb = "" & Data2.Recordset!AddressLine3
'                 End If
'                 gtPatient(1).Postcode = "" & Data2.Recordset!AddressPostcode
'                 gtPatient(1).Date_of_Birth = "" & Data2.Recordset!Birthdate
'                 gtPatient(1).HomePhone = "" '& Data2.Recordset!
'                 gtPatient(1).MedicareNo = "" & Data2.Recordset!MedicareNum
'                 gtPatient(1).Patient_ID = "" & Data2.Recordset!PatientId
'                 gtPatient(1).Folder_Number = "" 'Data2.Recordset!Ur_no
'             End Select
'                                              'display the date
'            iSortOrder = cSortByDate                'default test order
'             For icounter = 0 To 3                   'enable edit area
'                 Text3(icounter).Enabled = True
'             Next
'            TDBGrid1(0).Enabled = True                 'grid showing past tests
'             TDBGrid2.Enabled = True                 'grid showing tests can order
'            PreviousPatientID = gtPatient(1).Patient_ID 'to use if recall them
'           ' SSActiveTabs1.SelectedTab = 1
'            SSActiveToolBars1.ToolBars("Shortcuts").Visible = True
'            SSActiveToolBars1.Tools("ID_Sections").Enabled = True
'
' Screen.MousePointer = vbArrow
' End Sub
'
'
'
' Sub LinktoHelpFiles()
'   App.HelpFile = sMain_Dir & "\qup.Hlp"
'     'MnuHelp_Contents.HelpContextID = 5
' End Sub
'
' Private Sub Text3_Click(Index As Integer)
'     '--------------------------------------------------------------
'     'Curpos is the starting point for the routine Text2_doubleclick
'     'and acts as the reference point for editing
'     '--------------------------------------------------------------
'     curpos = Text3(Index).SelStart
' End Sub
'
' Private Sub Text3_DblClick(Index As Integer)
'  '-----------------------------------------------------------------
'    'stop the normal double click behaviour of highlighting whole text
'    'The aim of this whole exercise is to only allow highlighting of
'    'test for deletion, between two dividing characters eg ;text;
'    '-----------------------------------------------------------------
'    Text3(Index).SelLength = 0
'    '-------------------------------------------------------------------
'    'If there is no divider then exit the routine and highlight all text
'    '-------------------------------------------------------------------
'    If InStr(Text3(Index).Text, ";") = 0 Then
'       Text3(Index).SelLength = Len(Text3(Index).Text)
'       Exit Sub
'    End If
'    '------------------------------------------------------
'    'There must now be at least one divider occurrence of ;
'    'look backwards through the text box and find the last
'    'divider character ';' which will be the startpos
'    'The variable curpos is first set when the user clicks
'    'with the mouse on the text box in Text3(index)_click event
'    '------------------------------------------------------
'    startpos = 0 'default to start
'    For ind = curpos To 1 Step -1
'        If Mid$(Text3(Index).Text, ind, 1) = ";" Then
'           startpos = ind
'           Exit For
'        End If
'
'    Next
'    '----------------------------------------------------
'    'find the next ';' character which will be the endpos
'    '----------------------------------------------------
'
'     For ind = startpos + 1 To Len(Text3(Index))
'        If Mid$(Text3(Index).Text, ind, 1) = ";" Then
'           Endpos = ind
'           Exit For
'        End If
'    Next
'    '-----------------------------------------------------------------------
'    'If we are actually at the end of the whole Text3(index).text then endpos = end
'    '-----------------------------------------------------------------------
'    If ind = Len(Text3(Index)) + 1 Then
'       Endpos = Len(Text3(Index)) + 1
'    End If
'    '-------------------------------------------------------------------
'    'Now set the starting position of text to be highlighted to startpos
'    '-------------------------------------------------------------------
'    Text3(Index).SelStart = startpos
'    '-----------------------------------------------------------------------
'    'Now, if we are highlighting to the end of the row, allow highlight,exit
'    '-----------------------------------------------------------------------
'    If Len(Text3(Index)) - Endpos = 0 Or startpos = 0 Then
'       Text3(Index).SelLength = Endpos - startpos
'       Exit Sub
'    Else
'     '----------------------------------------------------------------------
'     'There may be a ';' character either before, or after the selected text
'     'and we don't want any duplicates when the user deletes the hightlight
'     'text, so adjust the width accordingly
'     '----------------------------------------------------------------------
'     If Text3(Index).SelStart <> 0 Then
'          If Mid$(Text3(Index), Text3(Index).SelStart, 1) = ";" And Mid$(Text3(Index), Endpos, 1) = ";" Then
'               Text3(Index).SelLength = Endpos - startpos
'          Else
'              Text3(Index).SelLength = Endpos - 1 - startpos
'          End If
'     End If
'    End If
'
' End Sub
' Sub Reset_Variables()
'     sSearchText = ""
'     bExitRoutine = False
'     iConsultIDSaved = False
'     iCentralDisplay = cCentralDisplay_None
'     itdbgrid1_image = cGrID_Image_None
'    itdbgrid2_image = cGrID_Image_None
'     iEditing = False
'     Timer2.Enabled = False 'bug somewhere not switching it off - fix
'     iProblemChosen = -1
' End Sub
'
' Private Sub Text3_GotFocus(Index As Integer)
'   If bExitRoutine Then
'         Exit Sub
'   End If
'   bUseRecordset = False 'default to never allow recordset use
'   Select Case iCurrentSection
'   Case cSection_Measure
'     Timer2.Enabled = False
'     Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(Index + 1).toP
'     Select Case Index
'
'         Case 0
'             Load_Layout "Description", TDBGrid2, cGrID_Image_Measurements
'             Measurement_Types_getList
'             bUseRecordset = True
'         Case 1
'             Select Case gtMeasurement(0).Type_ID
'             Case mrMeasure_BP
'                 Text3(Index).MaxLength = 7
'
'                  End Select
'         Case 2
'             If Text3(Index) = "" Then
'                Text3(Index) = sToday
'             End If
'     End Select
' Case cSection_Overview
'
' Case cSection_FamilyandSocialHistory
'
'      Select Case Index
'      Case cTxt_FHRelativeName
'
'      Case cTxt_FHRelationship
'             Load_Layout "FH_Relationships", TDBGrid2, cGrID_Image_FH_Relationships
'             GetList_TypesOfFamilyRelationships
'             bUseRecordset = True
'      Case cTxt_FHDisease
'             Load_Layout "FH_Diseases", TDBGrid2, cGrID_Image_FH_Condition
'             If Text3(cTxt_FHDisease) <> "" Then
'                TempText = Text3(cTxt_FHDisease)
'             Else
'                Picture2.Visible = False
'             End If
'             bUseRecordset = True
'            GetList_OzcodeTerms
'      Case Is > cTxt_FHDisease
'           itdbgrid2_image = cGrID_Image_None
'      End Select
'      If Index < cTxt_FHComment Then
'           If Len(Text3(Index)) = 0 Then
'              sSearchText = ""
'           End If
'           With Picture2
'             .toP = Picture3.toP + Picture1(1).toP + Text3(Index + 1).toP
'             .left = Picture3.left + Picture1(1).left + Text3(Index + 1).left
'             .width = Command3(cEdit_Accept).left - 50
'           End With
'           With TDBGrid2
'                     .left = 12
'                     .toP = 12
'                     .width = Picture2.width - 24
'                     DoEvents
'                     .height = Picture2.height - 24
'             End With
'             TDBGrid2.width = TDBGrid2.width - 12
'       Else
'           Picture2.Visible = False
'      End If
'      Case cSection_PastHistory
'         Select Case Index
'         Case 0
'              Picture2_FullWidth
'              Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(Index + 1).toP
'              Load_Layout "Past_History", TDBGrid2, cGrID_Image_PastCondition
'              bUseRecordset = True
'         Case Is > 0
'            Picture2.Visible = False
'            Timer2.Enabled = False
'            iTimerCounter = 0
'         End Select
'     Case cSection_NewNotes 'cns
'
'      Case cSection_SOAP
'      Case cSection_Allergies
'           bExitRoutine = True
'           Select Case Index
'           Case 1
'             Load_Layout "Description", TDBGrid2, cGrID_Image_Allergy_Drug
'             Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(Index + 1).toP
'             With TDBGrid2
'              .width = Picture2.width - 24
'              .height = Picture2.height - 24
'             End With
'             If Trim(Text3(Index)) <> "" Then
'                Allergy_Getlist_Drugs
'             End If
'             bUseRecordset = True
'           Case 4
'                 Load_Layout "Description", TDBGrid2, cGrID_image_Allergy_Reaction
'                 Timer2.Enabled = False
'                 Picture2.toP = Picture3.toP + Picture1(1).toP + Command3(cEdit_Accept).toP
'                 Picture2.Visible = False
'                 sSearchText = Text3(4)
'                 GetList_OzcodeTerms
'                 bUseRecordset = True
'            End Select
'            bExitRoutine = False
'      Case cSection_Script
'           If Index < 4 Then
'             Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(Index + 1).toP
'           End If
'           bExitRoutine = True
'           Select Case Index
'           Case 0
'                 Load_Layout "Description", TDBGrid2, cGrID_Image_DrugClasses
'                 Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(Index + 1).toP
'                 Script_Classes_Getlist
'                 bUseRecordset = True
'           Case 1 'the generic
'                 Load_Layout "Description", TDBGrid2, cGrID_Image_GenericDrugs
'                 Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(Index + 1).toP
'
'
'           Case 2 'the brand
'                 Load_Layout "Script_Brands", TDBGrid2, cGrID_Image_Brands
'                 Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(Index + 1).toP
'
'                 If Trim(Text3(0)) <> "" And iEditing = False And Text3(2) = "" Then
'                    Script_Classes_Getlist_BrandsInClass
'                 ElseIf Trim(Text3(1)) <> "" And iEditing = False And Text3(2) = "" Then
'                    Script_GenericPrescribing_GetlistBrands
'                 ElseIf Trim(Text5) <> "" And iEditing = False Then
'                       Script_PrescribeByIndication_MakeTable
'                 End If
'                 'if Editing match data2.recordset to this drug
'                 If iEditing Then
'                     Script_Brand_GetList gtNew_ScriptItem(0).Brand
'                 End If
'                 bUseRecordset = True
'           Case 3
'             If gtNew_ScriptItem(0).Brand = "" Then
'                 bExitRoutine = False
'       Exit Sub
'             End If
'             bExitRoutine = True
'             Load_Layout "Script_Packs", TDBGrid2, cGrID_Image_Packs
'             Script_Packs_Getlist
'             TDBGrid2.ReBind
'             Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(Index + 1).toP
'             bUseRecordset = True
'            Case 4
'                 Load_Layout "Description", TDBGrid2, cGrID_Image_Instructions
'                 Timer2.Enabled = False
'                 Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(Index + 1).toP
'                 Picture2.Visible = False
'                 Script_Instructions_getlist_habits
'                 bUseRecordset = True
'            Case 5
'                 Load_Layout "Description", TDBGrid2, cGrID_Image_prescribed_For
'                 Timer2.Enabled = False
'                 Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(7).toP
'                 Picture2.Visible = False
'                 If Text3(5) <> "" Then
'                    TempText = Text3(5)
'                 End If
'                 Script_Brand_PrescribedFor_GetList
'                 bUseRecordset = True
'             Case 6
'                 itdbgrid2_image = cGrID_Image_None
'                 Timer2.Enabled = False
'                 Picture2.Visible = False
'           End Select
'           bExitRoutine = False
'      Case cSection_Reports
'         Select Case Index
'         Case 2
'
'             Load_Layout "Suburbs", TDBGrid2, cGrID_Image_Suburbs
'             TempText = Text3(Index)
'             Picture2.toP = Picture3.toP + Picture1(1).toP + check1(0).toP
'                    End Select
'      bUseRecordset = True
'      Case cSection_Recalls
'          TempText = Text3(Index)
'          Select Case Index
'          Case 0 'the doctors
'               Load_Layout "Description", TDBGrid2, cGrID_Image_Doctors
'               Recalls_doctors_GetList
'               bUseRecordset = True
'          Case 2 'The date
'               Timer2.Enabled = False
'          Case 1 'The reason
'                 Load_Layout "Description", TDBGrid2, cGrID_Image_RecallReason
'                 Recalls_Reasons_GetList
'                 bUseRecordset = True
'          Case 3 'the method
'                Load_Layout "Description", TDBGrid2, cGrID_Recall_Methods
'                Recalls_Methods_GetList Trim(Text3(cRecall_Method))
'                bUseRecordset = True
'          Case 4 'the length
'                itdbgrid2_image = cGrID_REcall_lengths
'                Load_Layout "Recall_Length", TDBGrid2, cGrID_REcall_lengths
'                TDBGrid2.width = 1700
'                Recalls_Lengths_Getlist Trim(Text3(cRecall_Length))
'                bUseRecordset = True
'          End Select
'          With Picture2
'             If Index < 4 Then
'                  .toP = Picture3.toP + Picture1(1).toP + Text3(Index).toP + Text3(Index).height + 10
'                  .left = Text3(0).left + Picture3.left + Picture1(1).left
'                  .width = Command3(cEdit_Accept).left + Command3(cEdit_Accept).width
'                  TDBGrid2.width = Picture2.width - 24
'             ElseIf Index = 4 Then
'              .toP = Picture3.toP + Picture1(1).toP + Text3(Index).toP + Text3(Index).height + 10
'              .left = Text3(4).left + Picture3.left + Picture1(1).left
'              .width = TDBGrid2.width + 24
'             End If
'
'
'          End With
'      Case cSection_requests
'        iUserclickedOnList = False
'         Picture2.Visible = False
'         With Picture2
'             .toP = Picture3.toP + Picture1(1).toP + Text3(Index).toP + Text3(Index).height + 10
'             .left = Picture3.left + Picture1(1).left + Text3(Index).left
'             .width = Command3(cEdit_Accept).left + Command3(cEdit_Accept).width
'         End With
'          Select Case Index
'
'
'          Case cREquest_Suburb
'             Load_Layout "Description", TDBGrid2, cGrID_Image_Requests_Providers_Suburbs
'             Requests_Providers_Suburbs_Get_List
'             bUseRecordset = True
'          Case cRequest_Type
'             Timer2.Enabled = False
'             Load_Layout "Description", TDBGrid2, cGrID_Requests_Provider_types
'             Requests_Providers_Types_Single_List_Get
'             bUseRecordset = True
'          Case cRequest_Company
'             Load_Layout "Description", TDBGrid2, cGrID_Image_Requests_Providers_Names
'             Requests_Providers_List_Get gtNew_Form(0).Provider.Type_ID
'             bUseRecordset = True
'          Case cRequest_request
'              TempText = Text3(Index)
'              Timer2.Enabled = True
'              iTimerCounter = 0
'              Load_Layout "Request_Names", TDBGrid2, cGrID_Image_Requests
'              SplitIntoExistingAndNewText Text3(Index)
'              bUseRecordset = True
'           Case cRequest_notes 'the clinical notes
'              Timer2.Enabled = True
'              iTimerCounter = 0
'                  TempText = Text3(Index)
'                  Load_Layout "Description", TDBGrid2, cGrID_Image_Requests_notes
'                  SplitIntoExistingAndNewText Text3(cRequest_notes)
'                  If InStr(LCase(Text3(cRequest_request)), "pap") Then
'                    If Len(Text3(cRequest_notes)) = 0 Then
'                       'fix this pap section later as special design case
'                       ' Command3_Click (1)
'                       ' TxtpapDates(0).SetFocus
'                    End If
'                End If
'
'             bUseRecordset = True
'          '---------------------------------------------------------
'          'have a valid test, put last clinical notes onto clipboard
'          'to allow user to paste them in to save typing
'          '---------------------------------------------------------
'           Clipboard.SetText sCopyLastClinicalNotes
'          '--------------------------------------------------------------
'          'If there are no existing clinical notes, re-set all parameters
'          'and if there is no text at all in text3() show default notes
'          '--------------------------------------------------------------
'          If Len(Text3(Index)) = 0 Then
'             Requests_EditArea_Reset_Parameters
'             '-------------------------------------------------------------
'             'Now select which of the clinical notes list is displayed
'             'according to user preferences put in the configuration module
'             '-------------------------------------------------------------
'          End If
'             Select Case iDefaultclinicalNotesList
'             Case cClinicalNotesList
'
'           Case cTermNamesList
'
'           End Select
'           bExitRoutine = False
'   Exit Sub
'
'          Case cRequest_Medications
'                 If check1(0).Value Then
'                     Requests_Patients_Medications_DisplayAll
'                 Else
'                     TempText = Text3(Index)
'                     Load_Layout "Request_Medications", TDBGrid2, cGrID_Image_DrugProducts
'                End If
'         Case cRequest_CopyTo
'                Load_Layout "Requests_CopyTo", TDBGrid2, cGrID_Requests_copyTo
'                bUseRecordset = True
'         Case cRequest_ProgressNote
'                itdbgrid2_image = cGrID_Image_None
'          End Select
'      Case cSection_Referrals 'cns2
'           Select Case Index
'           Case cReferrals_Person  ' person or doctor to refer to
'                Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(cReferrals_Org_name).toP
'                Load_Layout "Description", TDBGrid2, cGrID_Image_persons
'                If Text3(cReferrals_Suburb) = "" Then
'                     Referrals_Persons_Getlist
'                ElseIf gtNew_Referral(0).Person.Category.ID <> 0 And Text3(cReferrals_Suburb) <> "" Then
'                     Referrals_Persons_Getlist_BySuburb_ByCategory
'                End If
'                bUseRecordset = True
'           Case cReferrals_Org_name  'the organisation
'                Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(cReferrals_Street1).toP
'                Load_Layout "Description", TDBGrid2, cGrID_Image_Organisations
'                bUseRecordset = True
'                Referrals_Organisations_Getlist
'        Case cReferrals_Street1  'the address
'                Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(cReferrals_Street2).toP
'                Load_Layout "Description", TDBGrid2, cGrID_Image_Addresses
'                bUseRecordset = True
'               If gtNew_Referral(0).Organisation.ID <> 0 Then
'                   Referrals_Organisations_Addresses_Getlist
'               ElseIf Len(Text3(cReferrals_Street1)) = 0 Then
'                    Referrals_Persons_Addresses_Getlist
'               End If
'
'          Case cReferrals_Suburb
'                 Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(cReferrals_ReasonFor).toP
'                 Load_Layout "Description", TDBGrid2, cGrID_Image_Suburbs
'                 Referrals_Getlist_Suburbs
'                 bUseRecordset = True
'
'          Case cReferrals_ReasonFor  ' reason for referral eg opinion
'             Picture2.toP = Picture3.toP + Picture1(1).toP + check1(0).toP
'             Load_Layout "Description", TDBGrid2, cGrID_Image_Referral_Reasons
'             Referrals_ReasonsFor_Getlist
'             bUseRecordset = True
'           End Select
'
'
'     Case cSection_Immunisations 'xi
'         bExitRoutine = True
'         Picture2.toP = Picture3.toP + Picture1(1).toP + Text3(Index + 1).toP
'         Select Case Index
'         Case 0 'The schedule
'
'             Load_Layout "Immunisation_Schedules", TDBGrid2, cGrID_Image_Immunisation_Schedules
'             IMM_Schedules_GetList
'             bUseRecordset = True
'           '  Timer2.Enabled = True
'           Case 1 'xxxx
'             '--------------------------------
'             'ensure always chooses a schedule
'             '--------------------------------
'             If Trim(Text3(0)) = "" Or iSchedule_ID = 0 Then
'                Text3(0).SetFocus
'      Exit Sub
'             End If
'
'             Load_Layout "Vaccinations", TDBGrid2, CGrID_Image_Vaccines
'             Vaccinations_GetLIst_have_Schedule_ID
'             bUseRecordset = True
'         Case 2 'the date actually given
'             If Trim(Text3(Index)) = "" Then
'                Text3(Index) = sToday
'             End If
'             Picture2.Visible = False
'             'put in by wizard
'             If Trim(Text3(Index)) = "0:00:00" Then
'                For icounter = 0 To UBound(gtPatient(1).Vaccinations())
'                    If gtPatient(1).Vaccinations(icounter).Schedule.ID = iSchedule_ID Then
'                       Text3(Index) = DateAdd("m", gtPatient(1).Vaccinations(icounter).Schedule.Age_due_months, gtPatient(1).Date_of_Birth)
'                       Exit For
'                    End If
'                 Next
'             End If
'        End Select
'        bExitRoutine = False
'     End Select
'
'
' End Sub
'
' Private Sub Text3_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
'        Select Case iCurrentSection
'        Case cSection_Recalls
'             Select Case Index
'             Case 0
'                 If itdbgrid2_image <> cGrID_Image_Doctors Then
'                        Call Text3_GotFocus(0)
'                 End If
'             Case 1
'                 If itdbgrid2_image <> cGrID_Image_RecallReason Then
'                    Call Text3_GotFocus(2)
'                 End If
'              Case 3
'                     If itdbgrid2_image <> cGrID_Recall_Methods Then
'                        Call Text3_GotFocus(3)
'                     End If
'             End Select
'
'              If KeyCode = vbKeyDown Then
'                Select Case Index
'                Case cRecall_Method
'                    Recalls_Methods_GetList "*"
'                Case cRecall_Length
'                    Recalls_Lengths_Getlist "*"
'                End Select
'                     If RecordsExist(Data1) Then
'                        Data1.Recordset.MoveFirst
'                        If Picture2.Visible = False Then
'                           Picture2.Visible = True
'                        End If
'                        iTGBGrid2_HasFocus = True
'                        TDBGrid2.SetFocus
'                        TDBGrid2.MarqueeStyle = dbgHighlightRow
'    Exit Sub
'                       ' End If
'                     End If
'               End If
'        Case cSection_requests
'          Select Case Index
'             Case cREquest_Suburb
'                  If itdbgrid2_image <> cGrID_Image_Requests_Providers_Suburbs Then
'                       Call Text3_GotFocus(cREquest_Suburb)
'                  End If
'                 Select Case KeyCode
'                 Case vbKeyDown
'                     If RecordsExist(Data1) Then
'                        Data1.Recordset.MoveFirst
'                        If Picture2.Visible Then
'                          iTGBGrid2_HasFocus = True
'                           TDBGrid2.SetFocus
'                           TDBGrid2.MarqueeStyle = dbgHighlightRow
'      Exit Sub
'                         End If
'                     End If
'                     End Select
'             Case cRequest_Type
'                  If itdbgrid2_image <> cGrID_Requests_Provider_types Then
'                     Call Text3_GotFocus(cRequest_Type)
'                  End If
'                   Select Case KeyCode
'                     Case vbKeyDown
'                     If RecordsExist(Data1) Then
'                        Data1.Recordset.MoveFirst
'                        If Picture2.Visible Then
'                         iTGBGrid2_HasFocus = True
'                          TDBGrid2.SetFocus
'                          TDBGrid2.MarqueeStyle = dbgHighlightRow
'     Exit Sub
'                        End If
'                     End If
'                  End Select
'             Case cRequest_Company
'                  If itdbgrid2_image <> cGrID_Image_Requests_Providers_Names Then
'                     Call Text3_GotFocus(cRequest_Company)
'                  End If
'                    If KeyCode = vbKeyDown Then
'                       If RecordsExist(Data1) Then
'                             Data1.Recordset.MoveFirst
'                             If Picture2.Visible = False Then
'                                 Picture2.Visible = True
'                             End If
'                             iTGBGrid2_HasFocus = True
'                             TDBGrid2.SetFocus
'                             TDBGrid2.MarqueeStyle = dbgHighlightRow
'         Exit Sub
'                       Else
'                           Requests_Providers_List_Get gtNew_Form(0).Provider.Type_ID
'                        End If
'                     End If
'
'
'             Case cRequest_request
'                 If itdbgrid2_image <> cGrID_Image_Requests Then
'                     Call Text3_GotFocus(cRequest_request)
'                  End If
'             Case cRequest_notes
'                 If itdbgrid2_image <> cGrID_Image_Requests_notes Then
'                     Call Text3_GotFocus(cRequest_notes)
'                  End If
'
'
'             Case cRequest_Medications
'                 If itdbgrid2_image <> cGrID_Image_Medications Then
'                     Call Text3_GotFocus(cRequest_Medications)
'                  End If
'             Case cRequest_CopyTo
'                  If itdbgrid2_image <> cGrID_Requests_copyTo Then
'                      Call Text3_GotFocus(cRequest_CopyTo)
'                  End If
'
'          End Select
'
'             Select Case KeyCode
'                 Case vbKeyDown
'                     If RecordsExist(Data1) Then
'                        Data1.Recordset.MoveFirst
'                        If Picture2.Visible Then
'                         iTGBGrid2_HasFocus = True
'                          TDBGrid2.SetFocus
'                          TDBGrid2.MarqueeStyle = dbgHighlightRow
'     Exit Sub
'                        End If
'                     End If
'              End Select
'        Case cSection_Measure
'            Select Case Index
'            Case 0
'               If itdbgrid2_image <> cGrID_Image_Measurements Then
'                 Call Text3_GotFocus(0)
'              End If
'            End Select
'        Case cSection_Script
'             Select Case Index
'             Case 0
'               If itdbgrid2_image <> cGrID_Image_DrugClasses Then
'                    Call Text3_GotFocus(0)
'               End If
'             Case 1
'                 If itdbgrid2_image <> cGrID_Image_GenericDrugs Then
'                    Text3_GotFocus (1)
'                 End If
'             Case 3
'                 If itdbgrid2_image <> cGrID_Image_Packs Then
'                    Text3_GotFocus (3)
'                 End If
'
'             Case 4
'               If itdbgrid2_image <> cGrID_Image_Instructions Then
'                  Text3_GotFocus (4)
'               End If
'             End Select
'
'
'        Case cSection_FamilyandSocialHistory
'             Select Case Index
'             Case cTxt_FHRelationship
'                 If itdbgrid2_image <> cGrID_Image_FH_Relationships Then
'                       Call Text3_GotFocus(cTxt_FHRelationship)
'                 End If
'             Case cTxt_FHDisease
'                If itdbgrid2_image <> cGrID_Image_FH_Condition Then
'                     Call Text3_GotFocus(cTxt_FHDisease)
'                End If
'             End Select
'             If Index = cTxt_FHRelationship Or Index = cTxt_FHDisease Then
'                 Select Case KeyCode
'                 Case vbKeyDown
'                     If Picture2.Visible Then
'                         iTGBGrid2_HasFocus = True
'                          TDBGrid2.SetFocus
'                          TDBGrid2.MarqueeStyle = dbgHighlightRow
' Exit Sub
'                     End If
'                 End Select
'              End If
'         Case cSection_Referrals
'             Select Case Index
'             Case cReferrals_Person
'                     If itdbgrid2_image <> cGrID_Image_persons Then
'                        Call Text3_GotFocus(cReferrals_Person)
'                     End If
'
'             Case cReferrals_Org_name
'                If itdbgrid2_image <> cGrID_Image_Organisations Then
'                    Call Text3_GotFocus(cReferrals_Org_name)
'                End If
'             Case cReferrals_Street1
'                If itdbgrid2_image <> cGrID_Image_Addresses Then
'                    Call Text3_GotFocus(cReferrals_Street1)
'                End If
'             Case cReferrals_Suburb
'                 If itdbgrid2_image <> cGrID_Image_Suburbs Then
'                     Call Text3_GotFocus(cReferrals_Suburb)
'                  End If
'             Case cReferrals_ReasonFor
'                 If itdbgrid2_image <> cGrID_Image_Referral_Reasons Then
'                    Call Text3_GotFocus(cReferrals_ReasonFor)
'                 End If
'             End Select
'              Select Case KeyCode
'                     Case vbKeyDown
'                     If RecordsExist(Data1) Then
'                        Data1.Recordset.MoveFirst
'                        If Picture2.Visible Then
'                         iTGBGrid2_HasFocus = True
'                          TDBGrid2.SetFocus
'                          TDBGrid2.MarqueeStyle = dbgHighlightRow
'     Exit Sub
'                        End If
'                     End If
'             End Select
'        Case cSection_Allergies
'             Select Case Index
'             Case 1
'                  If itdbgrid2_image <> cGrID_Image_Allergy_Drug Then
'                       Call Text3_GotFocus(0)
'                  End If
'             Case 4
'                 If itdbgrid2_image <> cGrID_image_Allergy_Reaction Then
'                    Call Text3_GotFocus(4)
'                 End If
'             End Select
'          Case cSection_PastHistory
'             Select Case Index
'             Case 0
'                     If itdbgrid2_image <> cGrID_Image_PastCondition Then
'                        Call Text3_GotFocus(0)
'                     End If
'             End Select
'             Select Case KeyCode
'                 Case vbKeyDown
'                     If RecordsExist(Data1) Then
'                        Data1.Recordset.MoveFirst
'                        If Picture2.Visible Then
'                         iTGBGrid2_HasFocus = True
'                          TDBGrid2.SetFocus
'                          TDBGrid2.MarqueeStyle = dbgHighlightRow
'     Exit Sub
'                        End If
'                     End If
'             End Select
'        End Select
'        'temporary patch
'        On Error GoTo T3KDError
'
'         Select Case KeyCode
'         Case vbKeyDown
'              Select Case iCurrentSection
'              Case cSection_requests
'
'              Case cSection_Referrals
'                   Text3(Index) = ""
'                   If Index = 2 Then
'                     gtNew_Referral(0).Address.ID = 0
'                   End If
'              End Select
'              TDBGrid2.MarqueeStyle = 3 'highlight cell
'              If Picture2.Visible = False _
'                  And RecordsExist(Data1) _
'                  And bUseRecordset = True Then
'                 Picture2.Visible = True
'              End If
'              KeyCode = 0
'              If Data1.Recordset.EOF <> True Then
'                 Data1.Recordset.MoveNext
'                 If Data1.Recordset.EOF Then
'                    Data1.Recordset.MoveLast
'                 End If
'
'              Else
'                 If Data1.Recordset.BOF <> True Then
'                    Data1.Recordset.MovePrevious
'                    If Data1.Recordset.BOF Then
'                        Data1.Recordset.MoveNext
'                    End If
'                 End If
'             End If
'         Case vbKeyUp
'              KeyCode = 0
'              TDBGrid2.MarqueeStyle = 3
'             If Data1.Recordset.BOF <> True Then
'                Data1.Recordset.MovePrevious
'                If Data1.Recordset.BOF Then
'                   Data1.Recordset.MoveNext
'                End If
'
'             ElseIf Data1.Recordset.EOF <> True Then
'                 Data1.Recordset.MoveNext
'                 If Data1.Recordset.EOF = True Then
'                     Data1.Recordset.MovePrevious
'
'                 End If
'             End If
'         End Select
'       ' Exit Sub
'        Dim Char
'        Select Case KeyCode
'        '------------------------------------------------
'        'only allow deletion of complete terms eg 'term;'
'        '------------------------------------------------
'        Case vbKeyDelete
'                  SplitIntoExistingAndNewText Text3(Index)
'                  '------------------------------------------------------
'                  'Get the deleted substring. This will only exist if the
'                  'user has highlighted a portion of text
'                  '------------------------------------------------------
'                  If Text3(Index).SelStart = 0 Then
'                     sDeletedSubString = left(Text3(Index), Text3(Index).SelLength)
'                  Else
'                     sDeletedSubString = Mid$(Text3(Index), Text3(Index).SelStart + 1, Text3(Index).SelLength)
'                  End If
'                  '------------------------------------------------------
'                  'If there is no text highlighted, then prevent deletion
'                  'of a single character
'                  '------------------------------------------------------
'                  If sDeletedSubString = "" Then
'                     If Text3(Index).SelStart < Len(Text3(Index)) - Len(sLatestTextAdded) Then
'                             KeyCode = 0
'     Exit Sub
'                     End If
'                      ElseIf sDeletedSubString = Text3(Index) Then
'  Exit Sub
'                  End If
'
'                  '----------------------------------------------------------
'                  'Allow deletion of any characters on the end of the line
'                  'without a ';' character after them - ie this will occur
'                  'when the user is typing in new text and has made a mistake
'                  'and wants to delete these new characters which are not
'                  'actually a request name
'                  '----------------------------------------------------------
'                   If InStr(sDeletedSubString, ";") <> Len(sDeletedSubString) And Text3(Index).Locked = False Then
'                     sMsg = "You may only delete complete words." & vbLf & vbLf
'                     sMsg = sMsg & "To delete a word, double click over the word you wish to remove "
'                     sMsg = sMsg & "and when it becomes highlighted, select the delete key."
'
'                     lresponse = MsgBox(sMsg, vbCritical + vbOKOnly, "PROBLEM:")
'                     KeyCode = 0
' Exit Sub
'                 Else
'                     '----------------------------------------------------
'                     'a block of text is being deleted, need to fix up the
'                     'sSOAP_Subjective() and lREquestIDs to reflect this
'                     '----------------------------------------------------
'                 '    If Index = cSOAP_Subjective And Text3(Index).SelLength Then
'                 '      'fix_Requests_array
'                 '    End If
'                 End If
'
'                 Char = Mid$(Text3(Index), Text3(Index).SelStart + 1, 1)
'                 If Char = ";" Then
'                    '-------------------------------------------------
'                    '1.Is this the only ; on the line, if so delete it
'                    '-------------------------------------------------
'                    If Len(Text3(Index)) = 1 Then
'                       'Reset_Editing_Parameters
'     Exit Sub
'                    End If
'                    '-----------------------------------------------------------
'                    'Is the ; followed by another ; ie duplicate, then delete it
'                    '-----------------------------------------------------------
'                    If Mid$(Text3(Index), Text3(Index).SelStart + 2, 1) = ";" Then
'   Exit Sub
'                    ElseIf Mid$(Text3(Index), Text3(Index).SelStart, 1) = ";" Then
'   Exit Sub
'                    End If
'                    KeyCode = 0
'                 End If
'
'         End Select
'
'         Select Case KeyCode
'
'          Case vbKeyTab
'
'         Case vbKeyDown
'              KeyCode = 0
'              If Data1.Recordset.EOF <> True Then
'                 Data1.Recordset.MoveNext
'              Else
'                 If Data1.Recordset.BOF <> True Then
'                 Data1.Recordset.MovePrevious
'                 End If
'             End If
'         Case vbKeyUp
'              KeyCode = 0
'             If Data1.Recordset.BOF <> True Then
'                 Data1.Recordset.MovePrevious
'             ElseIf Data1.Recordset.EOF <> True Then
'                 Data1.Recordset.MoveNext
'             End If
'         End Select
'         Exit Sub
' T3KDError:
' Exit Sub
'
' End Sub
'
' Private Sub Text3_KeyPress(Index As Integer, KeyAscii As Integer)
'     '------------------------------------------------------------------
'     'General Notes:
'     ' iTimercounter always set to 0 to prevents any sQLs whilst typing
'     ' Restrict_Keys mrKeys_SQLCrash always used to prevent sql crash
'     '------------------------------------------------------------------
'     Restrict_Keys mrKeys_SQLCrash, KeyAscii
'     Select Case iCurrentSection
'     Case cSection_Measure
'          Restrict_Keys mrKeys_SQLCrash, KeyAscii
'          Select Case Index
'          Case 0
'               Restrict_Keys mrKeys_Letters, KeyAscii
'          Case 1
'               Restrict_Keys gtMeasurement(0).Key_Restriction_ID, KeyAscii
'               Select Case gtMeasurement(0).Key_Restriction_ID
'               Case 5 'decimal
'                 lcharpos = InStr(Text3(Index), ".")
'                 If KeyAscii = Asc(".") Then
'                   If Len(Text3(Index)) = 0 _
'                      Or lcharpos Then
'                      KeyAscii = 0
'                   End If
'                 End If
'               ' If Len(right(Text3(Index), Len(Text3(Index) - lcharpos))) > 1 Then
'               '    KeyAscii = 0
'             '
'              '   End If
'
'               Case 6 'blood pressure
'                If KeyAscii = Asc("/") Then
'                   If Len(Text3(Index)) = 0 _
'                      Or InStr(Text3(1), "/") Then
'                      KeyAscii = 0
'                   End If
'                 End If
'
'                End Select
'          Case 2
'               Restrict_Keys mrKeys_DateFormat, KeyAscii
'          End Select
'          If KeyAscii = vbKeyReturn Then
'
'                 Select Case Index
'                 Case 0
'                      Text3(1).SetFocus
'                 Case 1
'                      Text3(2).SetFocus
'                 Case 2
'                      Text3(3).SetFocus
'                 Case 3
'                      Command3(cEdit_Accept).SetFocus
'                 End Select
'          End If
'
'
'     Case cSection_Overview
'     Case cSection_NewNotes
'     Case cSection_Allergies
'            Restrict_Keys mrKeys_SQLCrash, KeyAscii
'            Select Case Index
'            Case 0
'                Restrict_Keys mrKeys_DateFormat, KeyAscii
'
'            Case Is <> 0
'                 ' Restrict_Keys mrKeys_Letters, KeyAscii
'            End Select
'            If Index = 4 Then
'               Timer2.Enabled = True
'               iTimerCounter = 0
'            End If
'            If KeyAscii = vbKeyReturn Then
'               Select Case Index
'               Case 0
'                    Text3(1).SetFocus
'               Case 1
'                    Text3(4).SetFocus
'               Case 4
'                    Command3(cEdit_Accept).SetFocus
'               End Select
'            End If
'      Case cSection_Reports
'           Select Case Index
'           Case 2
'                 KeyAscii = Asc(UCase(Chr(KeyAscii)))
'           End Select
'           Select Case KeyAscii
'           Case vbKeyReturn
'                Select Case Index
'                Case 2 'the suburb
'                 TDBGrid2_DblClick
'                End Select
'                If Index < 4 Then
'                  Text3(fMinInteger(Index + 1, 4)).SetFocus
'                End If
'           Case Is <> vbKeyReturn
'
'           End Select
'      Case cSection_SOAP
'      Case cSection_Script
'
'         Restrict_Keys mrKeys_SQLCrash, KeyAscii
'         Select Case Index
'         Case 0
'              Timer2.Enabled = False
'         Case 1
'
'         Case 2
'             If itdbgrid2_image <> cGrID_Image_Brands Then
'                Call Text3_GotFocus(2)
'             End If
'             If (KeyAscii <> 13 And Text3(0) <> "") Or (KeyAscii <> 13 And Text3(1) <> "") Then
'                sMsg = "Brand like " & Chr$(34) & Trim(Text3(2)) & Chr$(KeyAscii) & "*" & Chr$(34)
'                Data1.Recordset.FindNext sMsg
'                If Data1.Recordset.NoMatch = True Then
'                  ' Data1.Recordset.MoveFirst
'                Else
'                  Data1.Recordset.FindFirst sMsg
'                   If Data1.Recordset.NoMatch Then
'                      Data1.Recordset.MoveFirst
'                      Text3(2) = ""
'                   End If
'                 End If
'              '  Text3(0) = ""
'             End If
'             Timer2.Enabled = False
'         Case 3
'             If itdbgrid2_image <> cGrID_Image_Packs Then
'                Call Text3_GotFocus(3)
'             End If
'          Timer2.Enabled = False
'         Case 4
'              If itdbgrid2_image <> cGrID_Image_Instructions Then
'                   Call Text3_GotFocus(4)
'              End If
'              Timer2.Enabled = False
'         Case 5
'              Timer2.Enabled = True
'              iTimerCounter = 0
'              If itdbgrid2_image <> cGrID_Image_prescribed_For Then
'                 Call Text3_GotFocus(5)
'              End If
'         Case 6, 7
'               If itdbgrid2_image <> cGrID_Image_None Then
'                  itdbgrid2_image = cGrID_Image_None
'               End If
'         End Select
'         If KeyAscii = vbKeyReturn Then
'              Timer2.Enabled = False
'              Select Case Index
'              Case 0, 1
'                   Text3(2).SetFocus
'              Case 2
'                  Text3(3).SetFocus
'              Case 3
'                  Text3(4).SetFocus
'              Case 4
'                   Text3(5).SetFocus
'              Case 5
'                   Text3(7).SetFocus
'                  ' Command3(2).SetFocus
'              Case 6
'                   Text3(7).SetFocus
'              Case 7
'                   Command3(2).SetFocus
'              End Select
'           End If
'       Case cSection_Recalls
'
'         Select Case Index
'         Case 0
'              Timer2.Enabled = True
'              iTimerCounter = 0
'         Case 2
'            'allow dates or Mm,Yy,Dd,Ww
'             If Not (KeyAscii = 8 Or KeyAscii = 13 Or (KeyAscii > 46 And KeyAscii < 59) Or (KeyAscii = 77 Or KeyAscii = 109 Or KeyAscii = 68 Or KeyAscii = 100 Or KeyAscii = 87 Or KeyAscii = 119 Or KeyAscii = 89 Or KeyAscii = 121)) Then
'                  KeyAscii = 0
'       Exit Sub
'              End If
'          Case 1
'                      Timer2.Enabled = True
'              iTimerCounter = 0
'          Case 3
'              Timer2.Enabled = True
'              iTimerCounter = 0
'                      Case 4
'              Timer2.Enabled = True
'              iTimerCounter = 0
'          End Select
'           Select Case KeyAscii
'             Case vbKeyReturn
'             Select Case Index
'             Case cRecall_For
'                  Picture2.Visible = False
'             Case cRecall_Date
'                   Recalls_CalculateDate
'                   If Not (IsDate(Text3(cRecall_Date))) Then
'                      Text3(cRecall_Date).SetFocus
'  Exit Sub
'                   End If
'             End Select
'             If Index < 4 Then
'                     Text3(Index + 1).SetFocus
'             Else
'                Command3(cEdit_Accept).SetFocus
'             End If
'           End Select
'       Case cSection_Referrals
'           Restrict_Keys mrKeys_SQLCrash, KeyAscii
'           Select Case Index
'           Case cReferrals_Person, cReferrals_Org_name, cReferrals_ReasonFor
'                 Restrict_Keys mrKeys_Letters, KeyAscii
'                 Timer2.Enabled = True
'           Case cReferrals_Suburb
'                KeyAscii = Asc(UCase(Chr(KeyAscii)))
'                Timer2.Enabled = False
'           End Select
'
'           iTimerCounter = 0
'           Select Case KeyAscii
'           Case vbKeyReturn
'                 Timer2.Enabled = False
'                 Select Case Index
'                      Case cReferrals_Person
'                       Referrals_Person_Select
'                       Text3(cReferrals_Org_name).SetFocus
'                      Case cReferrals_Org_name
'                           Text3(cReferrals_Street1).SetFocus
'                      Case cReferrals_Street1
'                          Referrals_Address_Select
'                         '  If Trim(Text3(cReferrals_Org_name)) <> "" Then
'                          '    Text3(2).SetFocus
'                          ' Else
'                          '   Text3(cReferrals_Street2).SetFocus
'                           'End If
'                      Case cReferrals_Street2
'                          Text3(cReferrals_Street3).SetFocus
'                      Case cReferrals_Street3
'                          Text3(cReferrals_Suburb).SetFocus
'                      Case cReferrals_Suburb
'                            Referrals_Suburb_Select
'                           Text3(cReferrals_ReasonFor).SetFocus
'                      Case cReferrals_ReasonFor 'type of referral
'                           RichTextBox1(0).SetFocus
'                 End Select
'           End Select
'
'      Case cSection_requests 'any request, pathology, Xray etc
'
'           Select Case Index
'
'           Case cRequest_request
'             Timer2.Enabled = True
'             iTimerCounter = 0
'             '---------------------------------------------------------
'             'do not allow an existing test name to be corrupted by the
'             'user inserting extra letters. 1 = testname
'             '---------------------------------------------------------
'            If Text3(Index).SelStart < Len(Text3(Index)) And iUserclickedOnList = False Then
'                   KeyAscii = 0
' Exit Sub
'             End If
'         Case cRequest_Street123
'             Timer2.Enabled = True
'             iTimerCounter = 0
'         Case cRequest_Type, cRequest_Medications, cRequest_CopyTo
'                  '--------------------------------------------------------------
'                  'If user inputting clinical notes, restrict some keys
'                  'allow control c (copy), ctrl v(insert) control x (cut) etc
'                  '--------------------------------------------------------------
'                  Restrict_Keys mrKeys_Letters, KeyAscii
'                  Timer2.Enabled = True
'                  iTimerCounter = 0
'                   If Text3(Index).SelStart < Len(Trim(Text3(Index))) And iUserclickedOnList = False Then
'                      KeyAscii = 0
'          Exit Sub
'             End If
'
'         Case cRequest_ProgressNote
'                  Timer2.Enabled = False
'         Case cRequest_notes
'             Timer2.Enabled = True
'             iTimerCounter = 0
'                 If Text3(Index).SelStart < Len(Text3(Index)) And iUserclickedOnList = False Then
'                   KeyAscii = 0
' Exit Sub
'                 End If
'         End Select
'
'            '---------------------------------------------------------
'            'Now, check the key pressed to keep text propery formatted
'            'according to the following rules:
'            '---------------------------------------------------------
'         Select Case KeyAscii
'         Case Asc(" ")
'                 '----------------------------------------
'                 'Dont allow blank if preceeding char =";"
'                 '----------------------------------------
'                 If Len(Text3(Index)) > 1 Then
'                    If Mid$(Text3(Index), Text3(Index).SelStart, 1) = ";" Then
'                       KeyAscii = 0
'                    End If
'                 End If
'          Case Asc(";")
'
'                 '----------------------------------------------------
'                 'Don't allow two dividing characters in a row ie ";;"
'                 '----------------------------------------------------
'                 If Len(Text3(Index)) > 1 Then
'                    If Mid$(Text3(Index), Text3(Index).SelStart, 1) = ";" Then
'                       KeyAscii = 0
'                    End If
'                 End If
'          Case vbKeyBack
'                 If Index = cRequest_request Then
'                      '----------------------------------------------------------
'                      'Allow backspace of any characters on the end of the line
'                      'without a ';' character after them - ie this will occur
'                      'when the user is typing in new text and has made a mistake
'                      'and wants to delete these new characters which are not
'                      'actually a request name
'                      '----------------------------------------------------------
'                     If Len(Text3(cRequest_request)) > Len(sExistingText) Then
'
'                        sMsg = right(Text3(cRequest_request), Len(Text3(cRequest_request)) - Len(sExistingText))
'                        If InStr(sMsg, ";") Then
'                            KeyAscii = 0
'                        Else
'     Exit Sub
'                        End If
'                     Else
'                         KeyAscii = 0
'                     End If
'                 Else
'                     '---------------------------------
'                     'Handle the back-key possibilities
'                     '---------------------------------
'                     If Len(Text3(Index)) > 1 Then
'                         '-----------------------
'                         'If the character is a ;
'                         '-----------------------
'                         If Mid$(Text3(Index), fMaxInteger(Text3(Index).SelStart, 1), 1) = ";" Then
'                            '-------------------------------------------
'                            'backspace and remove it if it is duplicated
'                            '-------------------------------------------
'                            If Mid$(Text3(Index), Text3(Index).SelStart - 1, 1) = ";" Then
'         Exit Sub
'                            ElseIf Mid$(Text3(Index), Text3(Index).SelStart + 1, 1) = ";" Then
'         Exit Sub
'                            Else
'                               '----------------------------------
'                               'otherwise, prevent it being erased
'                               '----------------------------------
'                               KeyAscii = 0
'                            End If
'                         End If
'                      End If
'                  End If
'         End Select
'             '------------------------------
'             'Now handle various key presses
'             '------------------------------
'
'             Select Case KeyAscii
'             Case vbKeyReturn, Asc(";")  'x*
'                     'at this point ';' will only be single
'                Select Case Index
'                Case cRequest_Type
'                  If Data1.Recordset.RecordCount = 1 Then
'                        Requests_Providers_Types_Select
'                        If Text3(cRequest_Company) <> "" Then
'                             Text3(cRequest_request).SetFocus
'                        End If
'                     End If
'                Case cRequest_Company
'                     If Data1.Recordset.RecordCount = 1 Then
'                         Requests_Providers_Select
'                     End If
'                     Text3(cRequest_request).SetFocus
'               Case cREquest_Suburb
'                     If Data1.Recordset.RecordCount = 1 Then
'                         Requests_Providers_Suburb_Select
'                     End If
'                     Text3(cRequest_request).SetFocus
'                Case cRequest_request
'                     '---------------------------------------------------
'                     'Gets whatever new text was added after the last
'                     'delimeter ; and adds it to the request array where
'                     'SourceText = all the tests eg fbc;esr;uec; User can
'                     'only proceed to clinical notes if at least one test
'                     'has been requested. If enter pressed after a ; then
'                     'move to next line
'                     '---------------------------------------------------
'                     iFinishedLineInput = False
'                     SplitIntoExistingAndNewText Text3(Index)
'                     Requests_Request_Select Text3(Index)
'                     sCopyofRequestedTest = Text3(Index)
'                     If iFinishedLineInput And Len(Text3(cRequest_request)) > 0 Then
'                        Text3(cRequest_notes).SetFocus
'                        iFinishedLineInput = False
'                        bExitRoutine = False
'    Exit Sub
'                     End If
'                     Text3(cRequest_request).SelStart = Len(Text3(cRequest_request)) + 1
'                     Text3(cRequest_request).SetFocus
'                     KeyAscii = 0
'                Case cRequest_notes
'                     AddText Text3(Index), sLatestTextAdded, "no clinical notes;"
'                     If sLatestTextAdded = "" Then
'                        Text3(cRequest_Medications).SetFocus
'                     Else
'                         Picture2.Visible = False
'                         Text3(cRequest_notes).SetFocus
'                         Text3(cRequest_notes).SelStart = Len(Text3(cRequest_notes)) + 1
'                     End If
'                     bExitRoutine = False
'                     KeyAscii = 0
' Exit Sub
'
'
'               Case cRequest_Medications
'                     AddText Text3(Index), sLatestTextAdded, ""
'                     If sLatestTextAdded = "" Then
'                        Text3(cRequest_CopyTo).SetFocus
'                     Else
'                         Picture2.Visible = False
'                         Text3(cRequest_Medications).SetFocus
'                          Text3(cRequest_Medications).SelStart = Len(Text3(cRequest_Medications)) + 1
'                     End If
'                     bExitRoutine = False
'                     KeyAscii = 0
' Exit Sub
'
'                     If sLatestTextAdded = "" Then
'                        iFinishedLineInput = True
'                     Else
'                       iFinishedLineInput = False
'                       sMsg = sLatestTextAdded
'                        bExitRoutine = True
'                         Requests_Select_Medication
'                         Text3(cRequest_Medications) = sExistingText & sMsg & ";"
'                         sLatestTextAdded = ""
'                         sMsg = ""
'                         sExistingText = ""
'                         TempText = ""
'                           bExitRoutine = False
'                     End If
'
'                     'If enter pressed with no text input move on
'                     If iFinishedLineInput Or Text3(cRequest_Medications) = "" Then
'                        Text3(cRequest_CopyTo).SetFocus
'                        iFinishedLineInput = False
'                        bExitRoutine = False
'     Exit Sub
'                     End If
'                     Text3(cRequest_Medications).SetFocus
'                     Text3(cRequest_Medications).SelStart = Len(Text3(cRequest_Medications)) + 1
'                     KeyAscii = 0
'                Case cRequest_CopyTo 'copy to
'                     Text3(cRequest_ProgressNote).SetFocus
'                Case cRequest_ProgressNote 'additional clinical notes
'                      Command3(2).SetFocus
'                End Select
'
'             Case 12 ' ctrl L?
'                  '---------------------------------------------------------------
'                  'User Control L to bring back the last term used. Assume it will
'                  'be in the form of term; and that this term was found in the
'                  'ozcodes list - fix later as if it was free text, won't work
'                  '---------------------------------------------------------------
'                  If itdbgrid2_image = cGrID_Image_Requests Then
'                     lcharpos = InStr(sCopyLastClinicalNotes, ";")
'                     sSearchText = left(sCopyLastClinicalNotes, lcharpos - 1)
'                     GetList_OzcodeTerms
'                     '-------------------------------------------------------------
'                     'if can find this term in the ozcodes list, match it up so the
'                     'viewer can see the marquee on it. That way if they hit the
'                     'enter key, the routine to handle this won't transfer the term
'                     'back to the text3(cRequest_notes) text box twice
'                     '-------------------------------------------------------------
'                     If RecordsExist(Data1) Then
'                         Data1.Recordset.FindFirst "Description = " & Chr$(34) & sSearchText & Chr$(34)
'                     End If
'                     Text3(cRequest_notes) = sCopyLastClinicalNotes
'                  ElseIf itdbgrid2_image = cReasonsNamesList Then
'                       'Text3(cRequest_RFO) = sCopyLastReasonsForTest
'                  End If
'                  KeyAscii = 0
' Exit Sub
'             Case Is <> vbKeyReturn
'                  iTimerCounter = 0
'                  iTimerCounter = 0
'
'             End Select
'             lastkeypressed = KeyAscii
'             Char = Chr(KeyAscii)
'             bExitRoutine = False
'             Case cSection_Referrals
'        Exit Sub
'    'EndSelect
'
'     Case cSection_FamilyandSocialHistory 'J1
'          Restrict_Keys mrKeys_SQLCrash, KeyAscii
'          iTimerCounter = 0
'          Select Case Index
'          Case cTxt_FHRelativeName
'               Restrict_Keys mrKeys_Letters, KeyAscii
'          Case cTxt_FHRelationship 'eg mother
'               Restrict_Keys mrKeys_Letters, KeyAscii
'               Timer2.Enabled = True 'must leave this in - trust me
'          Case cTxt_FHDisease 'condition or disease - link to code list
'               Restrict_Keys mrKeys_Letters, KeyAscii
'               If InStr(Text3(Index), ";") Then
'                  If KeyAscii <> vbKeyReturn Then
'                     Timer2.Enabled = False
'                     KeyAscii = 0
' Exit Sub
'                  End If
'               End If
'               Timer2.Enabled = True
'               iTimerCounter = 0
'           Case cTxt_FHAgeOnset, cTxt_FHAgeDeath
'                Restrict_Keys mrKeys_NumbersOnly, KeyAscii
'          Case cTxt_FHDiedOfThis
'                Restrict_Keys mrKeys_YesNo, KeyAscii
'                If KeyAscii > 77 Then
'                 If Chr$(KeyAscii) = "y" Or Chr$(KeyAscii) = "Y" Then
'                   Text3(cTxt_FHDiedOfThis) = "Yes"
'                 Else
'                   Text3(cTxt_FHDiedOfThis) = "No"
'                 End If
'                End If
'                KeyAscii = 13
'          Case cTxt_FHDOB 'date of birth
'               Restrict_Keys mrKeys_DateFormat, KeyAscii
'          End Select
'          Select Case KeyAscii
'          Case vbKeyReturn
'               Timer2.Enabled = False
'               bExitRoutine = True
'               Select Case Index
'               Case cTxt_FHRelativeName 'existing name in the database of a relative
'                    Text3(cTxt_FHRelationship).SetFocus
'               Case cTxt_FHRelationship 'relationship
'                    FH_Select_FamilyRelationship
'                    Text3(cTxt_FHDisease).SetFocus
'               Case cTxt_FHDisease 'the disease the relative had
'                    FH_Select_RelativesDisease
'                     Text3(cTxt_FHComment).SetFocus
'               Case cTxt_FHComment
'                    Text3(cTxt_FHAgeOnset).SetFocus
'               Case cTxt_FHAgeOnset
'                    Text3(cTxt_FHDiedOfThis).SetFocus
'               Case cTxt_FHDiedOfThis   'validate the date of birth as accurate
'                 ' ValidateDate Text3(Index), "Birthdate", iInteger
'                 ' If iInteger Then
'                 '    Text3(Index) = ""
'                 '    bExitRoutine = False
'       '    Exit Sub
'                 ' End If
'                  Text3(cTxt_FHAgeDeath).SetFocus
'               Case cTxt_FHAgeDeath
'                  Command3(cEdit_Accept).SetFocus
'               End Select
'               bExitRoutine = False
'            Case Asc(";")
'                KeyAscii = 0
'            End Select
'
'     Case cSection_Immunisations
'         bExitRoutine = True
'         Select Case Index
'         Case 0
'             If itdbgrid2_image <> cGrID_Image_Immunisation_Schedules Then
'                 bExitRoutine = False
'                 Call Text3_GotFocus(0)
'             End If
'         Case 1
'              If itdbgrid2_image <> CGrID_Image_Vaccines Then
'                 bExitRoutine = False
'                 Call Text3_GotFocus(1)
'              End If
'         Case 2
'         Case 3
'
'         End Select
'         bExitRoutine = False
'          '-----------------------------------
'          'Select the data from the popup list
'          '-----------------------------------
'          If KeyAscii = vbKeyReturn Then
'             Timer2.Enabled = False
'             If Index < 3 Then
'                Text3(Index + 1).SetFocus
'             Else
'                Command3(cEdit_Accept).SetFocus
'             End If
'          End If
'         '---------------------------------------------
'         'Otherwise restrict keyinput according to line
'         '---------------------------------------------
'         Restrict_Keys mrKeys_SQLCrash, KeyAscii
'         Select Case Index
'         Case 0, 1 'the schedule, the vaccine
'             Timer2.Enabled = True
'             iTimerCounter = 0
'         Case 2 'date
'               Restrict_Keys mrKeys_DateFormat, KeyAscii
'         End Select
'         bExitRoutine = False
'     Case cSection_PastHistory
'
'          '------------------------------------
'          'Exclude keys particular to each line
'          '------------------------------------
'          Restrict_Keys mrKeys_SQLCrash, KeyAscii
'          Select Case Index
'          Case 0 'the past medical condition
'             If itdbgrid2_image <> cGrID_Image_PastCondition Then
'                Call Text3_GotFocus(0)
'             End If
'             Restrict_Keys mrKeys_Letters, KeyAscii
'             If InStr(Text3(Index), ";") Then
'                  If KeyAscii <> vbKeyReturn Then
'                     Timer2.Enabled = False
'                     KeyAscii = 0
' Exit Sub
'                  End If
'             End If
'             Timer2.Enabled = True
'             iTimerCounter = 0
'
'
'          Case 2  'the age onset of the disease
'             Restrict_Keys mrKeys_AgeFormat, KeyAscii
'             Timer2.Enabled = False
'          Case 3 'the year onset of the disease
'              Restrict_Keys mrKeys_DateFormat, KeyAscii
'              Timer2.Enabled = False
'          Case 4, 5
'               Restrict_Keys mrKeys_NumbersOnly, KeyAscii
'               Timer2.Enabled = False
'
'          End Select
'          '---------------------------------
'          'Now handle any special keypresses
'          '---------------------------------
'          Select Case KeyAscii
'          Case vbKeyReturn
'               Select Case Index
'               Case 0
'                     PastHistory_Select_Condition
'                     Text3(cTxt_PHComment).SetFocus
'               Case 2
'                 '----------------------------------------------
'                 'user has typed in the age in years or nM where
'                 'n = a number and M = letter M meaning months
'                 '----------------------------------------------
'                ' PastHistory_Calc_DAte_onset_Disease Text3(Index)
'
'               Case 3
'                   '--------------------------------------------------
'                   'User has typed in a year or a date, back calculate
'                   'the year or nM of disease if patient < 2yr 1 month
'                   '---------------------------------------------------
'                   'PastHistory_Calc_Age_onset_Disease Text3(Index)
'                   check1(1).SetFocus 'set focus on the ?active
'               Case 4 'the review period
'                    If Trim(Text3(5)) = "" And Text3(4) <> "" Then
'                       Text3(5) = "Indefinite"  'uuu
'                    Else
'                       Text3(5) = ""
'                    End If
'                    Command3(2).SetFocus
'          Exit Sub
'               Case 5
'                     Command3(2).SetFocus
' Exit Sub
'               End Select
'               If Index <> 3 Then
'                 Text3(fMinInteger(Index + 1, 4)).SetFocus
'               Else
'
'               End If
'            Case Asc(";")
'                If Len(Text3(Index)) = 0 Then
'                   KeyAscii = 0
'         Exit Sub
'                End If
'                If RecordsExist(Data1) Then
'                   If Trim(LCase(Data1.Recordset!Description)) = Trim(LCase(Text3(Index))) Then
'                      lozcode = Data1.Recordset!code
'                      KeyAscii = 0
'                      Text3(1).SetFocus
'                   End If
'                End If
'
'           End Select
'     Case cSection_NewNotes
'
'     End Select
'    '----------------------------
'    'everything below is old code
'    '----------------------------
'    Exit Sub
'    If Index <> 5 Then 'temporary code whilst experimenting with past history
'     Timer2.Enabled = True
'    Else
'     Timer2.Enabled = False
'    End If
'        '---------------------------------------------------------
'        'do not allow an existing test name to be corrupted by the
'        'user inserting extra letters.
'        '---------------------------------------------------------
'      '  If Index = cSOAP_Subjective Or Index = cSOAP_Plan Then
'       '    If Text3(Index).SelStart < Len(Text3(Index)) Then
'       '       KeyAscii = 0
'       '        Exit Sub
'       '    End If
'       '  End If
'
'         '-----------------------------------------------------------
'         'every key press resets the timer to 0 and prevents a search
'         '-----------------------------------------------------------
'         iTimerCounter = 0
'        '--------------------------------------------------------------
'         'If user inputting clinical notes, restrict some keys
'         'allow control c (copy), ctrl v(insert) control x (cut) etc
'         '--------------------------------------------------------------
'         If Index <> 5 Then 'temporary code for experimenting
'            If Not ((KeyAscii > 47 And KeyAscii < 58) Or (KeyAscii > 64 And KeyAscii < 91) Or (KeyAscii = 3) Or (KeyAscii = 24) Or (KeyAscii = 22) Or (KeyAscii = 63) Or (KeyAscii = 32) Or (KeyAscii = 13) Or (KeyAscii = 59) Or (KeyAscii > 96 And KeyAscii < 123) Or (KeyAscii = 45) Or (KeyAscii > 39 And KeyAscii < 42) Or (KeyAscii = 8) Or (KeyAscii = 39)) Then
'                KeyAscii = 0
'       Exit Sub
'            End If
'         End If
'            '---------------------------------------------------------
'            'Now, check the key pressed to keep text propery formatted
'            'according to the following rules:
'            '---------------------------------------------------------
'            Select Case KeyAscii
'            Case Asc(" ")
'                 '----------------------------------------
'                 'Dont allow blank if preceeding char =";"
'                 '----------------------------------------
'                 If Len(Text3(Index)) > 1 Then
'                    If Mid$(Text3(Index), Text3(Index).SelStart, 1) = ";" Then
'                       KeyAscii = 0
'                    End If
'                 End If
'            Case Asc(";")
'
'                 '----------------------------------------------------
'                 'Don't allow two dividing characters in a row ie ";;"
'                 '----------------------------------------------------
'                 If Len(Text3(Index)) > 1 Then
'                    If Mid$(Text3(Index), Text3(Index).SelStart, 1) = ";" Then
'                       KeyAscii = 0
'                    End If
'                 End If
'                ' If Index = cSOAP_Objective Or Index = cSOAP_Assessment Then
'                '     checkspelling Text3(Index)
'                '  End If
'             Case vbKeyBack
'             'If Index = cSOAP_Subjective Then
'           '       '----------------------------------------------------------
'           '       'Allow backspace of any characters on the end of the line
'           '       'without a ';' character after them - ie this will occur
'           '       'when the user is typing in new text and has made a mistake
'           '       'and wants to delete these new characters which are not
'           '       'actually a request name
'           '       '----------------------------------------------------------
'           '      If Len(Text3(cSOAP_Subjective)) > Len(sExistingText) Then
' '
' '                   sMsg = Right(Text3(cSOAP_Subjective), Len(Text3(cSOAP_Subjective)) - Len(sExistingText))
' '                   If InStr(sMsg, ";") Then
' '                       KeyAscii = 0
' '                   Else
' '                       Exit Sub
' '                   End If
' '                Else
' '                    KeyAscii = 0
' '                End If
'            ' Else
'              '---------------------------------
'              'Handle the back-key possibilities
'              '---------------------------------
'             ' If Len(Text3(Index)) > 1 Then
'             '     '-----------------------
'             '     'If the character is a ;
'             '     '-----------------------
'             '     If Mid$(Text3(Index), fMaxInteger(Text3(Index).SelStart, 1), 1) = ";" Then
'             '        '-------------------------------------------
'             '        'backspace and remove it if it is duplicated
'             '        '-------------------------------------------
'             '        If Mid$(Text3(Index), Text3(Index).SelStart - 1, 1) = ";" Then
'   '            Exit Sub
'             ''        ElseIf Mid$(Text3(Index), Text3(Index).SelStart + 1, 1) = ";" Then
'   '            Exit Sub
'             '        Else
'             '           '----------------------------------
'             '           'otherwise, prevent it being erased
'                        '----------------------------------
'              '          KeyAscii = 0
'              '       End If
'                '  End If
'             ' End If
'            ' End If
'         End Select
'
'     '------------------------------
'     'Now handle various key presses
'     '------------------------------
'     Select Case KeyAscii
'
'     Case 42, 91, 124, 34 'I added 42 22Mar98 ?need this
'         '--------------------------------------------
'         'bracket,pipe,quote characters will crash sql
'         '--------------------------------------------
'         KeyAscii = 0
'         Exit Sub
'
'     Case vbKeyReturn, Asc(";")  'x*
'
'         'at this point ';' will only be single
'         Select Case Index
'        Case 4 'temporary code until see if works
'             '-------------------
'             'Add the ozcode name for past history
'             '-------------------
'
'             iFinishedLineInput = False
'             Process_user_data_input Text3(Index)
'            ' sPastHistoryDescription = Data1.Recordset!description
'            ' sPastHistoryOzcode = Data1.Recordset!code
'             'Add_ClinicalNote
'             ' checkspelling Text3(Index)
'             'If enter pressed with no text input move on
'            If iFinishedLineInput And Len(Text3(Index)) > 0 Then
'                Text3(Index).SetFocus
'                iFinishedLineInput = False
'       Exit Sub
'             End If
'             Text3(5).SetFocus
'             'Text3(cRequest_notes).SelStart = Len(Text3(cRequest_notes)) + 1
'              KeyAscii = 0
'     '   Case cSOAP_Subjective
'
'             'User_SelectRequest
'
'             'If enter pressed with no text input move on
'             'If iFinishedLineInput And Len(Text3(cSOAP_Subjective)) > 0 Then
'             '   Text3(cSOAP_Objective).SetFocus
'             '   iFinishedLineInput = False
' ' Exit Sub
'            ' End If
'            ' If InStr(LCase(Text3(cSOAP_Subjective)), "pap;") Then
'            '     Command3(cEdit_Cancel).Enabled = True
'            ' Else
'            '      Command3(cEdit_Cancel).Enabled = False
'            ' End If
'            ' Text3(cSOAP_Subjective).SelStart = Len(Text3(cSOAP_Subjective)) + 1
'            ' Text3(cSOAP_Subjective).SetFocus
'            ' KeyAscii = 0
'       ' Case cSOAP_Objective
'             '-------------------
'             'Add a clinical note
'             '-------------------
'
'           '  iFinishedLineInput = False
'           '  Process_user_data_input Text3(cSOAP_Objective)
'           '  ' checkspelling Text3(Index)
'           '  'If enter pressed with no text input move on
'           ' If iFinishedLineInput And Len(Text3(cSOAP_Objective)) > 0 Then
'           '     Text3(cSOAP_Assessment).SetFocus
'           '     iFinishedLineInput = False
' '      Exit Sub
'           '  End If
'           '  Text3(cSOAP_Objective).SetFocus
'           '  Text3(cSOAP_Objective).SelStart = Len(Text3(cSOAP_Objective)) + 1
'           '   KeyAscii = 0
'       ' Case cSOAP_Assessment
'       '      checkspelling Text3(Index)
'       '      'Add_Medication
'       '      Text3(cSOAP_Plan).SetFocus
'       '       KeyAscii = 0
'       '  Case cSOAP_Plan
'       '       'Get_ProjectReasons
' '
' '            iFinishedLineInput = False
'             'Get sExistingText and sLatestTextAdded
' '            SplitIntoExistingAndNewText Text3(cSOAP_Plan)
'             '------------------------------------------------
'             'If enter pressed when no text added,quit routine
'             '------------------------------------------------
' '            If sLatestTextAdded = "" Then
' '                If Len(Text3(cSOAP_Plan)) > 0 Then
' '                     iFinishedLineInput = True
' '                     cmdAcceptTest.SetFocus
' '                     iFinishedLineInput = False
' '           Exit Sub
' '                End If
' '            End If
'
'
'             '------------------------------------------------------
'             'if no records exist, cannot have chosen a valid reason
'             'as the user is not allowed free text on this line
'             '------------------------------------------------------
'            ' If RecordsExist(Data1) Then
'            '    ParseText2 Text3(cSOAP_Plan)
'            ' Else
'            '     sMsg = "You may only choose one of the reasons in the list "
'            '     sMsg = sMsg & "for your personal reasons for ordering the test."
'            '     lResponse = MsgBox(sMsg, vbCritical + vbOKOnly, "PROBLEM:")
'            '     bExitRoutine = True
'            '     Text3(cSOAP_Plan) = sExistingText
' '
'  '               TempText = ""
'  '               sMsg = ""
'  '               sLatestTextAdded = ""
'  '               bExitRoutine = False
'
' '            End If
'
'  '           Text3(cSOAP_Plan).SelStart = Len(Text3(cSOAP_Plan)) + 1
'  '           display_ReasonForOrdering          'reset to display all reasons
'
'   '          KeyAscii = 0
'         End Select
'
'     Case 12 ' ctrl L?
'          '---------------------------------------------------------------
'          'User Control L to bring back the last term used. Assume it will
'          'be in the form of term; and that this term was found in the
'          'ozcodes list - fix later as if it was free text, won't work
'          '---------------------------------------------------------------
'          If itdbgrid2_image = cGrID_Image_Requests Then
'             lcharpos = InStr(sCopyLastClinicalNotes, ";")
'             sSearchText = left(sCopyLastClinicalNotes, lcharpos - 1)
'             GetList_OzcodeTerms
'             '-------------------------------------------------------------
'             'if can find this term in the ozcodes list, match it up so the
'             'viewer can see the marquee on it. That way if they hit the
'             'enter key, the routine to handle this won't transfer the term
'             'back to the text3(cSOAP_Objective) text box twice
'             '-------------------------------------------------------------
'             If RecordsExist(Data1) Then
'                 Data1.Recordset.FindFirst "Description = " & Chr$(34) & sSearchText & Chr$(34)
'             End If
'           '  Text3(cSOAP_Objective) = sCopyLastClinicalNotes
'          ElseIf itdbgrid2_image = cReasonsNamesList Then
'              ' Text3(cSOAP_Plan) = sCopyLastReasonsForTest
'          End If
'          KeyAscii = 0
'          Exit Sub
'     Case Is <> vbKeyReturn
'          iTimerCounter = 0
'          iTimerCounter = 0
'
'     End Select
'     lastkeypressed = KeyAscii
'     Char = Chr(KeyAscii)
' End Sub
'
'
'
' Sub Patient_Display_Age()
'     Dim sMsg As String
'     If IsDate(gtPatient(1).Date_of_Birth) Then
'         sMsg = Int((Date - DateValue(gtPatient(1).Date_of_Birth)) / 365.25 * 10) / 10
'          sMsg = Int((Now - DateValue(gtPatient(1).Date_of_Birth)) / 365.25 * 10) / 10
'
'         SSActiveToolBars1.Tools("ID_Age").Edit.Text = sMsg
'         gtPatient(1).Age = sMsg
'         '------------------------------------
'         'Calculate the patients age in months
'         '------------------------------------
'         intAge_in_Months = (Int((Date - DateValue(gtPatient(1).Date_of_Birth)) / 365.25 * 10) / 10) * 12
'     Else
'         intAge_in_Months = 0
'     End If
'     gtPatient(1).Age_Months = intAge_in_Months
'     '-----------------
'     'Check if birthday
'     '-----------------
'     If Not iRemindBirthday Then
'         If Format(gtPatient(1).Date_of_Birth, "dd,mm") = Format(sToday, "dd,mm") Then
'            sTitle = "Friendly reminder:birthdate =" & gtPatient(1).Date_of_Birth
'            sMsg = "Don't forget to wish the patient happy birthday."
'            lresponse = MsgBox(sMsg, vbInformation + vbOKOnly, sTitle)
'            iRemindBirthday = True
'         End If
'     End If
' End Sub
' Public Sub GetList_OzcodeTerms()
'
'          If left(sSearchText, 1) = "?" Then
'            sSearchText = right(sSearchText, Len(sSearchText) - 1)
'          End If
'          Screen.MousePointer = vbHourglass
'         '---------------------------------------
'         'search for the reason for test ordering
'         '---------------------------------------
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Q = Db.QueryDefs("MRQ_Ozcodes_Whole")
'         Q("Enter Description") = sSearchText
'         Set Data1.Recordset = Q.OpenRecordset()
'         If RecordsExist(Data1) And Len(sSearchText) > 0 Then
'             If LCase(Data1.Recordset!Description) <> Trim(LCase(sSearchText)) Then
'                  Picture2.Visible = True: Picture2.ZOrder
'             Else
'                  Picture2.Visible = False
'             End If
'          Else
'             Picture2.Visible = False
'         End If
'         Screen.MousePointer = vbArrow
'
' End Sub
' Sub Requests_Providers_Requests_List_Get()
'     '----------------------------------------------
'     'Get requests according to the type of provider
'     '----------------------------------------------
'     If gtNew_Form(0).Provider.ID = 0 Then
'        Text3(cRequest_request) = ""
'        Text3(cRequest_Company) = ""
'        Text3(cRequest_Company).SetFocus
'        Exit Sub
'     End If
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Requests_Getlist_Requests_ForProviderType")
'
'     Q("Enter Request") = sSearchText
'     'Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'     Q("Enter Provider_Type_ID") = gtNew_Form(0).Provider.Type_ID
'     Set Data1.Recordset = Q.OpenRecordset()
'      If RecordsExist(Data1) And sLatestTextAdded <> "" Then
'        If Data1.Recordset!Description <> sLatestTextAdded Then
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'             Picture2.Visible = False
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
'
'
' Private Sub Text3_LostFocus(Index As Integer)
'     Text3(Index).SelStart = 0
'     Timer2.Enabled = False
'
'     If bExitRoutine Then Exit Sub
'
'
'     iTimerCounter = 0
'     Select Case iCurrentSection
'     Case cSection_Measure
'          Select Case Index
'          Case 0
'               Measure_Type_Select
'          Case 1
'               Measure_Validate_Measurement
'          Case 2
'             If Len(Text3(2)) Then
'                 ValidateDate Text3(Index), "Measurement Date", iInteger
'                  If iInteger Then
'                     Text3(Index) = ""
'                     bExitRoutine = False
'       Exit Sub
'                  End If
'               End If
'          End Select
'     Case cSection_Overview
'     Case cSection_FamilyandSocialHistory 'J3
'         bExitRoutine = True
'         Select Case Index
'         Case cTxt_FHRelationship
'             'FH_Select_FamilyRelationship
'         Case cTxt_FHDisease
'             ' If iTGBGrid2_HasFocus = False Then
'             '    Call Text3_KeyPress(Index, vbKeyReturn)
'             ' End If
'              bExitRoutine = False
'    Exit Sub
'             ' iUserclickedOnList = False
'             ' FH_Select_RelativesDisease
'             ' bExitRoutine = True
'             ' checkspelling Text3(Index)
'             ' bExitRoutine = False
'              '--------------------------------------------------------
'              'If replacement of word occurred after the spellcheck
'              'must get new ozcode if one exists, otherwise lozcode = 0
'              '--------------------------------------------------------
'        Case cTxt_FHComment
'              checkspelling Text3(Index)
'         Case cTxt_FHDiedOfThis
'              If Trim(Text3(Index)) = "" Then
'                 Text3(Index) = "No"
'              End If
'         Case cTxt_FHDOB
'               If Len(Text3(cTxt_FHDiedOfThis)) Then
'                 ValidateDate Text3(Index), "Birthdate", iInteger
'                  If iInteger Then
'                     Text3(Index) = ""
'                     bExitRoutine = False
' Exit Sub
'                  End If
'               End If
'         End Select
'         If Index <> cTxt_FHComment Then Text3(Index) = StrConv(Trim(Text3(Index)), vbProperCase)
'         If Text3(cTxt_FHAgeOnset) <> "" And Trim(Text3(cTxt_FHAgeDeath)) <> "" Then 'if age onset exists
'             'If age given for death < age onset condition
'             'etc, warn them
'             If Val(Trim(Text3(cTxt_FHAgeDeath))) < Val(Trim(Text3(cTxt_FHAgeOnset))) Then
'                sMsg = "There is a discrepency between the age of onset "
'                sMsg = sMsg & "of the condition, and the age of death"
'                lresponse = MsgBox(sMsg, vbOKOnly, "PROBLEM:")
'             End If
'         End If
'         bExitRoutine = False
'         Case cSection_SOAP
'         Case cSection_Allergies
'              Select Case Index
'              Case 1 'user has selected a product
'
'                     Allergy_SelectDrug
'              Case 4
'                    If Trim(Text3(Index)) <> "" Then
'                         bExitRoutine = True
'                         checkspelling Text3(Index)
'                         bExitRoutine = False
'                         Allergy_SelectReaction
'                    End If
'              End Select
'         Case cSection_Script
'
'             bExitRoutine = True
'             Select Case Index
'             Case 0
'                 Script_Classes_SelectClass
'             Case 1
'                Script_GenericPrescribing_SelectGeneric
'             Case 2 'the drug
'                Text3(2).SelStart = 0
'                Script_Brand_SelectBrand
'
'             Case 3  'the quantity
'                  Script_Packs_Select
'             Case 4 'the directions
'                  Script_Instructions_Select
'             Case 5
'                ' If (Len(Text3(Index)) And Picture2.Visible) Or iGettingHabits Then
'                 If iGettingHabits Then
'                     Script_Brand_PrescribedFor_Select
'                     iGettingHabits = False
'                 End If
'            Case 6
'                  If Trim(Text3(6)) = "" Then
'                      Text3(6) = 0
'                  End If
'             Case 7 'clinical notes
'
'              checkspelling Text3(Index)
'             End Select
'             bExitRoutine = False
'         Case cSection_Reports
'               If Index < 2 Or Index > 3 Then
'                 Text3(Index) = StrConv(Text3(Index), vbProperCase)
'               End If
'     Exit Sub
'         Case cSection_Script
'         Case cSection_Recalls
'              Select Case Index
'              Case 0
'                   Recalls_SelectDoctor
'              Case 1
'                  If iTGBGrid2_HasFocus = False Then
'                      Recalls_SelectReason
'                  End If
'
'              Case 2 'the date
'                  If Not IsDate(Text3(Index)) And Len(Trim(Text3(Index))) Then
'                     Call Text3_KeyPress(Index, 13)
'                  End If
'                         Case 3
'                 If iTGBGrid2_HasFocus = False Then
'                     Recalls_SelectMethod
'                 End If
'              Case 4
'                If iTGBGrid2_HasFocus = False Then
'                     Recalls_SelectLength
'                End If
'              End Select
'
'         Case cSection_requests
'
'              Select Case Index
'
'              Case cRequest_Type
'
'              Case cRequest_Company
'
'              Case cRequest_CopyTo
'
'              End Select
'
'
'         Case cSection_Referrals
'            StrCapitalise Text3(Index)
'              'If Index <> cReferrals_Suburb Then
'              '   Text3(Index) = StrConv(Trim(Text3(Index)), vbProperCase)
'              'End If
'              Select Case Index
'              Case cReferrals_Person
'                  ' Referrals_Person_Select
'              Case cReferrals_Org_name
'                   'Referrals_Organisation_Select
'               Case cReferrals_Street1
'                  ' Referrals_Address_Select
'              Case cReferrals_Suburb
'                  '  Referrals_Suburb_Select
'              Case cReferrals_ReasonFor
'                  ' Referrals_ReasonFor_Select
'              End Select
'         Case cSection_PastHistory
'           '-------------------------------------------------------
'           'The lost focus event is used for the final selection of
'           'the condition, age onset disease etc
'           '-------------------------------------------------------
'           Select Case Index
'           Case 0 'the condition or disease
'           Case 1
'              bExitRoutine = True
'              checkspelling Text3(Index)
'              bExitRoutine = False
'            Case 2 'the age of onset of the disease
'                 '----------------------------------------------
'                 'user has typed in the age in years or nM where
'                 'n = a number and M = letter M meaning months
'                 '----------------------------------------------
'                PastHistory_Calc_DAte_onset_Disease Text3(Index)
'            Case 3
'                 '--------------------------------------------------
'                 'User has typed in a year or a date, back calculate
'                 'the year or nM of disease if patient < 2yr 1 month
'                 '---------------------------------------------------
'                   PastHistory_Calc_Age_onset_Disease Text3(Index)
'            Case 5
'                 bExitRoutine = True
'                 Text3(5) = Text3(5) & " Months"
'                 bExitRoutine = False
'                End Select
'     Case cSection_Immunisations
'          bExitRoutine = True
'          Select Case Index
'          Case 0
'               Select_Immunisation_Schedule
'          Case 1
'               IMM_Select_Vaccine_Name
'          Case 2 'date
'                 'Allow valid year or valid date assume 4char = valid
'                 If Len(Text3(Index)) > 4 Then
'                     Dim iFlag As Integer
'                     ValidateDate Text3(Index), "Date of immunisation", iFlag
'                     If iFlag Then
'                        Text3(Index).SetFocus
'                     End If
'                 ElseIf Len(Text3(Index)) <> 4 Then
'                         bExitRoutine = True
'                         Text3(Index) = ""
'                         Text3(Index).SetFocus
'                         bExitRoutine = False
'                 End If
'          Case 4
'
'          End Select
'          bExitRoutine = False
'     End Select
' End Sub
'
' Private Sub Text4_GotFocus(Index As Integer)
'    itdbgrid1_image = cGrID_Image_Description
'    Load_Layout "Description", TDBGrid2, cGrID_Image_Description
'    With Picture2
'         .left = Picture3.left + Picture1(1).left + Text4(0).left
'         .width = Text4(0).width
'         .toP = Picture1(1).toP + Picture3.toP + Text4(0).toP + Text4(0).height
'    End With
'   ' With TDBGrid2
'         '.width = Picture2.width - 24
'   ' End With
' End Sub
'
' Private Sub Text4_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
'     Select Case KeyCode
'         Case vbKeyDown
'
'              If Picture2.Visible = False Then
'                 Picture2.Visible = True
'              End If
'              KeyCode = 0
'              If Data1.Recordset.EOF <> True Then
'                 Data1.Recordset.MoveNext
'              Else
'                 If Data1.Recordset.BOF <> True Then
'                 Data1.Recordset.MovePrevious
'                 End If
'             End If
'         Case vbKeyUp
'              KeyCode = 0
'             If Data1.Recordset.BOF <> True Then
'                 Data1.Recordset.MovePrevious
'             ElseIf Data1.Recordset.EOF <> True Then
'                 Data1.Recordset.MoveNext
'             End If
'         End Select
' End Sub
'
' Private Sub Text4_KeyPress(Index As Integer, KeyAscii As Integer)
'       If KeyAscii = vbKeyReturn Then
'          Text3(1).SetFocus
'       End If
' End Sub
'
' Private Sub Text4_LostFocus(Index As Integer)
'         'Requests_Select_Suburb
' End Sub
'
' Private Sub Text5_Change()
'     If bExitRoutine Then Exit Sub
'     Select Case iCurrentSection
'     Case cSection_Script
'         If Len(Text5) = 0 Then
'            Script_EditArea_Clear
'   Exit Sub
'         End If
'         Script_Indications_GetList
'
'     Case cSection_Referrals
'         If Trim(Text5) = "" Then
'             Command3_Click (cButtonCancel)
'             Text5.SetFocus
'         End If
'         If Trim(Text3(cReferrals_Person)) <> "" Then
'            Referrals_Categories_Getlist
'
'         ElseIf Trim(Text3(cReferrals_Suburb)) <> "" Then
'              Referrals_Categories_Getlist
'         Else
'            Referrals_Persons_Getlist_LikeCategory
'         End If
'     End Select
' End Sub
' Sub Tdbgrid2_Show(SourceControl As Control)
'     With Picture2
'         .toP = Picture1(3).toP + SourceControl.height + Picture3.toP
'         .width = SourceControl.width
'         .left = SourceControl.left + Picture3.left
'     End With
'     With TDBGrid2
'         .width = Picture2.width - 24
'     End With
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) Then
'        Picture2.Visible = True: Picture2.ZOrder
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
'
' End Sub
'
' Private Sub Text5_GotFocus()
'     Select Case iCurrentSection
'     Case cSection_Script
'         Script_EditArea_Clear
'         Picture2.toP = Picture3.toP + Picture1(4).toP + Picture1(4).height
'         Load_Layout "Prescribe_by_Indication", TDBGrid2, cGrID_Image_indications
'     Case cSection_Referrals
'         Picture2.toP = Picture3.toP + Picture1(4).toP + Picture1(4).height
'         Load_Layout "Description", TDBGrid2, cGrID_Image_Referrals_PersonCategory
'     End Select
' End Sub
'
' Private Sub Text5_KeyDown(KeyCode As Integer, Shift As Integer)
'      If KeyCode = vbKeyDown Then
'         If RecordsExist(Data1) Then
'            Data1.Recordset.MoveFirst
'            If Picture2.Visible = False Then
'               Picture2.Visible = True
'            End If
'            iTGBGrid2_HasFocus = True
'            TDBGrid2.SetFocus
'            TDBGrid2.MarqueeStyle = dbgHighlightRow
'   Exit Sub
'           ' End If
'         End If
'     End If
'         Exit Sub
'         Select Case KeyCode
'
'         Case vbKeyDown
'
'              If Picture2.Visible = False And RecordsExist(Data1) Then
'                 Picture2.Visible = True
'              End If
'              KeyCode = 0
'              If Data1.Recordset.EOF <> True Then
'                 Data1.Recordset.MoveNext
'                 If Data1.Recordset.EOF Then
'                    Data1.Recordset.MoveLast
'                 End If
'
'              Else
'                 If Data1.Recordset.BOF <> True Then
'                    Data1.Recordset.MovePrevious
'                    If Data1.Recordset.BOF Then
'                        Data1.Recordset.MoveNext
'                    End If
'                 End If
'             End If
'         Case vbKeyUp
'              KeyCode = 0
'             If Data1.Recordset.BOF <> True Then
'                Data1.Recordset.MovePrevious
'                If Data1.Recordset.BOF Then
'                   Data1.Recordset.MoveNext
'                End If
'
'             ElseIf Data1.Recordset.EOF <> True Then
'                 Data1.Recordset.MoveNext
'                 If Data1.Recordset.EOF = True Then
'                     Data1.Recordset.MovePrevious
'
'                 End If
'             End If
'         End Select
' End Sub
'
' Private Sub Text5_KeyPress(KeyAscii As Integer)
'     Select Case iCurrentSection
'     Case cSection_SOAP
'     Case cSection_Script
'          Restrict_Keys mrKeys_Letters, KeyAscii
'          If KeyAscii = vbKeyReturn Then
'             Text3(1).SetFocus
'          End If
'
'     Case cSection_Referrals
'        If KeyAscii = vbKeyReturn Then
'           Text3(0).SetFocus
'        End If
'     Case cSection_Reports
'        If KeyAscii = vbKeyReturn Then
'           Text3(0).SetFocus
'        Else
'            KeyAscii = Asc(UCase(Chr(KeyAscii)))
'        End If
'     End Select
' End Sub
'
' Private Sub Text5_LostFocus()
'        bExitRoutine = True
'        Text5.Text = StrConv(Text5.Text, vbProperCase)
'        bExitRoutine = False
'        If iCurrentSection = cSection_Script Then
'        Timer2.Enabled = False
'        bExitRoutine = True
'        Text5 = StrConv(Trim(Text5), vbProperCase)
'        bExitRoutine = False
'        If Len(Text5) Then
'           'Script_Indications_Select
'           'Text3(2).SetFocus
'        End If
'        End If
' End Sub
'
' Private Sub Text6_Change()
'      If Trim(Text6) = "" Then
'         gtPatient(1).ScratchPad.Record_ID = 0
'         gtPatient(1).ScratchPad.Consult_First_noted = 0
'         gtPatient(1).ScratchPad.Consult_ID = 0
'      End If
'
' End Sub
'
' Sub ScratchPad_Save()
'     Dim iExistingRecord As Integer
'     Dim dNumber As Double
'     If iConsultIDSaved = False Then
'         Save_ConsultID
'     End If
'     On Error GoTo SPSE
'     Database_Lock
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'     '------------------------------------------------
'     'If there is text on the scratch-pad line save it
'     '------------------------------------------------
'     If Trim(Text6) <> "" Then
'         '---------------------------------------
'         'Now add a new record or edit the old one
'         '----------------------------------------
'         Set Rs = Db.OpenRecordset("Data_ScratchPad", dbOpenTable)
'         With Rs
'                If gtPatient(1).ScratchPad.Record_ID <> 0 Then
'                   iExistingRecord = True
'                   .Index = "PrimaryKey"
'                   .Seek "=", gtPatient(1).ScratchPad.Record_ID
'                   .Edit
'                   If gtPatient(1).ScratchPad.Consult_First_noted _
'                         <> gtconsult.Consult_ID Then
'                      dNumber = pnScratchPad_Changed
'                   Else
'                     dNumber = pnScratchPad
'                   End If
'                 Else
'                   .AddNew
'                   iExistingRecord = False
'                   dNumber = pnScratchPad
'                   !Consult_ID = gtconsult.Consult_ID
'                   !Consult_First_noted = gtconsult.Consult_ID
'                   gtPatient(1).ScratchPad.Consult_First_noted = gtconsult.Consult_ID
'                 End If
'                 '----------------
'                 'Now add the data
'                 '----------------
'                 !Description = Trim(Text6)
'                 .Update
'                 If iExistingRecord = False Then
'                    .MoveLast
'                    .Edit
'                    gtPatient(1).ScratchPad.Record_ID = !ScratchPad_iD
'                 End If
'                 .Close
'         End With
'         '------------------------------------------------------
'         'If this scratchpad item was created in current consult
'         'archive its existing progress note(s)
'         '------------------------------------------------------
'         If gtPatient(1).ScratchPad.Consult_ID = gtconsult.Consult_ID _
'            And iExistingRecord = True Then
'             Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'             Q("Enter Consult_ID") = gtPatient(1).ScratchPad.Consult_ID
'             Q("Enter Table_ID") = mrTable_ScratchPad
'             Q("Enter Record_ID") = gtPatient(1).ScratchPad.Record_ID
'             Q.Execute
'         End If
'         '------------------------------------------
'         'add the progress notes for this item
'         '------------------------------------------
'         Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'             ProgressNotes_Save pnClinicalNotes, pnScratchPad, _
'                 pnScratchPad, "REMINDERS", _
'                 StrConv(Trim(Text6), vbProperCase), True, _
'                 mrTable_ScratchPad, _
'                 gtPatient(1).ScratchPad.Record_ID, _
'                 gtProgressNotes(0).Segments(pnClinicalNotes).SubHeadings(pnScratchPad).Notes_order, _
'                 Rs
'         Rs.Close
'     End If
'     Db.Close
'     ws.CommitTrans
'     ScratchPad_Get
'     Text6.SetFocus
'     Database_Unlock
'     Exit Sub
' SPSE:
'      Database_Unlock
'      Exit Sub
' End Sub
'
'
' Sub Reset_DatachangedFlags()
'     '-----------------------------------------------------------------
'     'Data has been written to the database - reset all flags(these may
'     'or may not have been changed
'     '-----------------------------------------------------------------
'     gtPatient(1).DataChanged = False        'main flag
'
'     If gtPatient(1).ScratchPad_Changed Then
'        ScratchPad_Get
'     End If
'     If gtPatient(1).Vaccinations_datachanged Then
'         gtPatient(1).Vaccinations_datachanged = False
'     End If
'     gtPatient(1).SocialHistory_Changed = False
'     gtPatient(1).RecreationalDrugs_Changed = False
'     gtPatient(1).PastHIstory_Changed = False
'     gtPatient(1).Occupation_Changed = False
'     If gtPatient(1).FamilyMedicalHistory_Changed Then
'         FH_SetCommitFlags True
'     End If
'     gtPatient(1).Ethnicity.DataChanged = False
'
'     If gtPatient(1).recalls_changed Then
'        gtPatient(1).recalls_changed = False
'        Recalls_SetcommitFlags True
'        If SSActiveTabs1.SelectedTab.Key = "recall" Then
'             Recalls_GetForPatient
'        End If
'     End If
'     If gtPatient(1).Allergy_DataChanged Then
'         Allergy_SetCommitFlags True
'         gtPatient(1).Allergy_DataChanged = False
'         Allergy_GetForPatient
'     End If
'
' End Sub
' Sub FH_SetCommitFlags(iStatus As Boolean)
'     Dim ix As Integer
'     gtPatient(1).FamilyMedicalHistory_Changed = False
'     For icounter = 0 To UBound(gtPatient(1).FamilyMembers())
'         For ix = 0 To UBound(gtPatient(1).FamilyMembers(icounter).Conditions())
'             If gtPatient(1).FamilyMembers(icounter).Conditions(ix).Saved = mrSaveUncommitted Then
'                If iStatus Then
'                     gtPatient(1).FamilyMembers(icounter).Conditions(ix).Saved = False
'                     gtPatient(1).FamilyMembers(icounter).Conditions(ix).DataChanged = False
'                Else
'                     gtPatient(1).FamilyMembers(icounter).Conditions(ix).Saved = False
'                     gtPatient(1).FamilyMembers(icounter).Conditions(ix).DataChanged = True
'                End If
'             End If
'         Next ix
'     Next icounter
' End Sub
' Sub ScratchPad_Get()
'     '--------------------------
'     'Load any scratch pad notes
'     '--------------------------
'   '  Load_Layout "ScratchPad", TDBGrid1(2), cGrID_Image_ScratchPad
'     With Data4
'          .DatabaseName = sMEDREC_MDB
'          .RecordSource = "SELECT Consult.Patient_ID, Data_ScratchPad.ScratchPad_ID, " _
'             & "Data_ScratchPad.Consult_ID, Data_ScratchPad.Description, " _
'             & "Data_ScratchPad.Consult_First_Noted " _
'             & "FROM Consult RIGHT JOIN Data_ScratchPad ON " _
'             & "Consult.Consult_ID = Data_ScratchPad.Consult_ID " _
'             & "WHERE (((Consult.Patient_ID)=" _
'             & gtPatient(1).Patient_ID & ") " _
'             & "AND ((Data_ScratchPad.Deleted)=False))" _
'             & "order by consult.consult_Date DESC"
'           .Refresh
'     End With
'
'
' End Sub
'
' Private Sub Text6_GotFocus()
'         Call Text6_Change
' End Sub
'
' Private Sub Text6_KeyPress(KeyAscii As Integer)
'      If KeyAscii = vbKeyReturn Then
'         ScratchPad_Save
'         iEditScratchPad = False
'         Text6 = ""
'     End If
'
' End Sub
'
' Private Sub Text6_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
'         If Button = 2 Then
'           SSActiveToolBars1.PopupMenu "ID_Scratch"
'        End If
' End Sub
'
' Private Sub Timer2_Timer()
'
'     '----- ------------------------------------------------------------------
'     'Increment the iTimerCounter every 100msec.This TimerCounter is being set
'     'back to 0 every time a key is pressed in Text3(cSOAP_Plan) text box
'     'Note:make this 100msec user determined, we type at different speeds
'     '-----------------------------------------------------------------------
'     iTimerCounter = fMinInteger(iTimerCounter + 1, 4)
'    If iTimerCounter = 3 Then
'       '  If FrmAuditTrail.Visible Then
'        '    FrmAuditTrail.Archive_GetReasons
'         '    Exit Sub
'         'End If
'
'           '--------------------------------------------------------------
'           'Get the text on the end to search on to right of a ; eg fred;a
'           'the searchtext would be a
'           '---------------------------------------------------------------
'
'
'
'            sMsg = TempText
'            sExistingText = ""
'
'            lcharpos = True
'         Do Until lcharpos = False
'            lcharpos = InStr(sMsg, ";")
'           If lcharpos Then
'
'               sExistingText = sExistingText & left(sMsg, lcharpos)
'                sMsg = right(sMsg, Len(sMsg) - lcharpos)
'               sLatestTextAdded = sMsg
'            Else
'            sLatestTextAdded = sMsg
'               Exit Do
'            End If
'          Loop
'          '--------------------------------------
'          'If there is a ?at the start, ignore it
'          '--------------------------------------
'          sSearchText = sMsg
'          If left(sMsg, 1) = "?" Then
'             sSearchText = right(sMsg, Len(sMsg) - 1)
'          End If
'          sSearchText = Trim(sSearchText)
'         Select Case itdbgrid2_image
'         Case cGrID_Image_PastCondition, cGrID_Image_Requests_notes, cGrID_Image_prescribed_For, cGrID_Image_FH_Condition, cGrID_image_Allergy_Reaction
'              GetList_OzcodeTerms
'         Case cGrID_Image_Brands 'cList_Prescribing_drugs
'              Prescribe_Get_Product_Formulation_Data
'         Case cGrID_Image_FH_Relationships 'cGrID_Image_FH_Relationships
'              GetList_TypesOfFamilyRelationships
'         Case CGrID_Image_Vaccines 'cList_Vaccines
'              Vaccinations_GetLIst
'         Case cGrID_Image_Immunisation_Schedules 'cList_ImmunisationSchedule
'              IMM_Schedules_GetList
'         Case cGrID_Image_Countries 'cGrID_Image_Countries
'              SH_Countries_GetList
'         Case cGrID_Image_languages  'cGrID_Image_Languages
'              SH_Languages_GetList
'       '  Case Clist_ServiceProviders
'        '      'EtList_ServiceProviders
'         Case cGrID_Image_Requests 'cGrID_Image_Requests
'              Requests_Providers_Requests_List_Get
'         Case cGrID_Image_Occupations 'cGrID_Image_Occupations
'              SH_Occupations_GetList
'        Case cGrID_Image_Referral_Reasons 'cGrID_Image_Referral_Reasons
'             Referrals_ReasonsFor_Getlist
'        Case cGrID_Image_Organisations 'cGrID_Image_Organisations
'             Referrals_Organisations_Getlist
'
'        Case cGrID_Image_persons 'cGrID_Image_persons
'            ';If Trim(Text3(1)) = "" Then
'            '     Referrals_Persons_Getlist_in_Organisation
'            ' Else
'                Referrals_Persons_Getlist
'
'           '  End If
'         Case cGrID_Image_DrugProducts 'cList_Medications
'              Requests_DrugBrandNames_List_Get
'         Case cGrID_Image_Doctors 'cGrID_Image_Doctors
'             Recalls_doctors_GetList
'         Case cGrID_Recall_Methods
'             Recalls_Methods_GetList Trim(Text3(cRecall_Method))
'         Case cGrID_REcall_lengths
'             Recalls_Lengths_Getlist Trim(Text3(cRecall_Length))
'         Case cGrID_Image_RecallReason
'             Recalls_Reasons_GetList
'         Case cGrID_Image_Suburbs
'             Referrals_Getlist_Suburbs
'         Case cGrID_Image_Brands
'              If Trim(Text3(0)) <> "" And iEditing = False Then
'                 Script_Classes_Getlist_BrandsInClass
'              ElseIf iEditing = False Then
'                     Script_Brand_GetList Text3(1)
'              ElseIf iEditing = True Then
'                      Script_Brand_GetList gtNew_ScriptItem(0).Brand
'              End If
'         Case cGrID_Image_Packs
'              Script_Packs_Getlist
'         Case cGrID_Image_DrugClasses
'              Script_Classes_Getlist
'         Case cGrID_Requests_copyTo
'             Requests_CopyTo_Getlist
'         End Select
'         Exit Sub
'     End If
' End Sub
' Private Sub Text3_Change(Index As Integer)
'
'     If bExitRoutine = True Then Exit Sub
'     bExitRoutine = True
'     Select Case iCurrentSection
'      Case cSection_Measure
'             'gtMeasurement(0).DataChanged = True
'             'put in later gtpatient(1).datachanged = true
'             Select Case Index
'             Case 0
'                  Measurement_Types_getList
'             Case 1
'                  'if format(Text3(index),"###.#")
'
'                  gtMeasurement(0).Values(0).Value = Trim(Text3(Index))
'             Case 2
'                  gtMeasurement(0).Values(0).Date = Trim(Text3(Index))
'             Case 3
'                  gtMeasurement(0).Values(0).Comment = Trim(Text3(Index))
'             End Select
'     Case cSection_NewNotes
'     Case cSection_SOAP
'         TempText = Trim(Text3(Index))
'     Case cSection_Allergies
'          Select Case Index
'          Case 1 'drug noted to cause the allergy
'                 If Len(Text3(Index)) = 0 Then
'                    Command3_Click (1)
'                    'Picture2.Visible = False
'                 Else
'                    Allergy_Getlist_Drugs
'                 End If
'          Case 4 'the description of the allergy of sensitivity
'                 TempText = Trim(Text3(Index))
'                 If Trim(Text3(Index)) = "" Then
'                    Picture2.Visible = False
'                    DoEvents
'                    'itdbgrid2_image = cLIst_ozcodes
'                    Timer2.Enabled = True
'                 End If
'          End Select
'     Case cSection_Script
'          Select Case Index
'          Case 0  'prevent invalid class
'              If Len(Text3(Index)) = 0 Then
'                  Command3_Click (1)
'              Else
'                  On Error Resume Next
'                  ix = -1
'                  ix = UBound(gtNew_ScriptItem(0).ClaDesc())
'                  If ix <> -1 Then
'                     If gtNew_ScriptItem(0).ClaDesc(0) <> "" Then
'                          Script_Brand_Class_Show
'                     End If
'                  End If
'              End If
'              Script_Classes_Getlist
'          Case 1
'             Script_GenericPrescribing_GetlistGenerics
'          Case 2 'prevent invalid brand
'              If Len(Text3(Index)) = 0 Then
'
'                  Command3_Click (1)
'                  Label2(7).Caption = "Drug"
'              Else
'                  If gtNew_ScriptItem(0).Brand <> "" Then
'                     bExitRoutine = True
'                     Text3(2) = gtNew_ScriptItem(0).Brand & " (" & gtNew_ScriptItem(0).GenericString & ")"
'                     bExitRoutine = False
'                  End If
'              End If
'              If Text3(0) = "" And Text3(1) = "" Then
'                 Script_Brand_GetList Text3(Index)
'              End If
'          Case 3
'           If gtNew_ScriptItem(0).Strength_Summary <> "" Then
'                 bExitRoutine = True
'              Text3(Index) = gtNew_ScriptItem(0).Strength_Summary
'             bExitRoutine = False
'           End If
'
'          Case 4
'            Picture2.Visible = False
'            Script_Instructions_Expand
'
'          Case 5
'
'            TempText = Trim(Text3(Index))
'            If Trim(Text3(Index)) = "" Then
'               Picture2.Visible = False
'            End If
'          Case 6 'repeats
'              If Val(Text3(Index)) = 0 Then
'                 check1(1).Enabled = False
'              Else
'                 check1(1).Enabled = True
'              End If
'         Case 7 'clinical notes attatched to the drug
'             'gtNew_ScriptItem(0).ClinicalNotes = Text3(Index)
'          End Select
'     Case cSection_Recalls
'
'          If Len(Text3(Index)) = 0 Then
'             Text3_GotFocus (Index)
'          End If
'           TempText = Trim(Text3(Index))
'     Case cSection_requests
'           TempText = Trim(Text3(Index))
'          Select Case Index
'           Case cRequest_Type
'             If Len(Text3(Index)) = 0 Then
'                bExitRoutine = True
'                Requests_Forms_Cancel
'                bExitRoutine = False
'      Exit Sub
'             End If
'             Requests_Providers_Types_Single_List_Get
'             If Trim(Text3(cRequest_request)) <> "" Then
'                   Command3(cEdit_Accept).Enabled = True
'             End If
'         Case cRequest_Company
'              If Len(Trim(Text3(cRequest_Company))) = 0 Then
'                 bExitRoutine = True
'                 Text3(cRequest_Street123) = ""
'                 Text3(cREquest_Suburb) = ""
'                 Text3(cRequest_Phone) = ""
'                 gtNew_Form(0).Provider.ID = 0
'                 gtNew_Form(0).Provider.Address.ID = 0
'                 bExitRoutine = False
'              End If
'              Requests_Providers_List_Get gtNew_Form(0).Provider.Type_ID
'         Case cREquest_Suburb
'              If Len(Trim(Text3(cREquest_Suburb))) = 0 Then
'                 bExitRoutine = True
'                 Text3(cRequest_Street123) = ""
'                 Text3(cRequest_Phone) = ""
'                 bExitRoutine = False
'                ' Text3(cRequest_Street123).SetFocus
'              End If
'         ' Case cRequest_Street123
'              Requests_Providers_Suburbs_Get_List
'          Case cRequest_CopyTo
'              If Len(Text3(cRequest_CopyTo)) = 0 Then
'                 gtNew_Form(0).CopyTo.ID = 0
'                 Picture2.Visible = False
'              End If
'          'Case cRequest_Medication 'xxx
'
'          End Select
'     Case cSection_Referrals
'
'
'          Select Case Index
'          Case cReferrals_Person
'               If Trim(Text3(cReferrals_Person)) = "" Then
'                 ' gtNew_Referral(0).Person.ID = 0
'                  Command3_Click (cButtonCancel)
'               End If
'               sTempText = Trim(Text3(cReferrals_Person))
'          Case cReferrals_Org_name 'the organisation
'              ' If Trim(Text3(cReferrals_Org_name)) = "" Then
'                  For icounter = cReferrals_Street1 To cReferrals_Suburb
'                      Text3(icounter) = ""
'                  Next
'                  For icounter = cReferrals_Phone To cReferrals_email
'                      Text3(icounter) = ""
'                  Next
'                 gtNew_Referral(0).Organisation.ID = 0
'                 gtNew_Referral(0).Address.ID = 0
'                 gtNew_Referral(0).Organisation.Communication.HOme_Phone = ""
'                 gtNew_Referral(0).Organisation.Communication.HOme_Phone_Confidential = False
'                 gtNew_Referral(0).Organisation.Communication.Work_Phone_Confidential = False
'                 gtNew_Referral(0).Organisation.Communication.Fax_Confidential = False
'                 gtNew_Referral(0).Organisation.Communication.Email_Confidential = False
'                 gtNew_Referral(0).Organisation.Communication.Internet = ""
'                 gtNew_Referral(0).Organisation.Communication.Internet_Confidential = False
'                 gtNew_Referral(0).Organisation.Communication.Mobile = ""
'                 gtNew_Referral(0).Organisation.Communication.Mobile_Confidential = False
'               'End If
'          Case cReferrals_Street1
'                '-------------------------------------------------
'                'If an existing street with an ID has been changed
'                'set its Address_ID back to 0 to re-force a save
'                '-------------------------------------------------
'                If Len(Trim(Text3(cReferrals_Street1))) = 0 Then  'Or Trim(Text3(Index)) <> gtNew_Referral(0).Address.Street1 Then
'                     gtNew_Referral(0).Address.ID = 0
'                     gtNew_Referral(0).Organisation.Communication.ID = 0
'                    For icounter = cReferrals_Street2 To cReferrals_Suburb
'                         Text3(icounter) = ""
'                    Next
'                    For icounter = cReferrals_Phone To cReferrals_email
'                      Text3(icounter) = ""
'                    Next
'                End If
'          Case cReferrals_Street2
'                gtNew_Referral(0).Address.Street2 = Trim(Text3(cReferrals_Street2))
'          Case cReferrals_Suburb
'              Timer2.Enabled = False
'              If Trim(Text3(cReferrals_Suburb)) = "" Then
'                 Text3(cReferrals_Postcode) = ""
'              End If
'              Referrals_Getlist_Suburbs
'
'          End Select
'
'          Case cSection_FamilyandSocialHistory
'                  Select Case Index
'                     Case cTxt_FHDisease
'                     TempText = Trim(Text3(Index))
'                     If Trim(Text3(Index)) = "" Then
'                        Text3(cTxt_FHAgeOnset) = ""
'                     End If
'                  Case cTxt_FHDiedOfThis
'                     If LCase(Text3(Index)) = "yes" Then
'                        Text3(cTxt_FHAgeDeath) = Text3(cTxt_FHAgeOnset)
'                     End If
'                  Case cTxt_FHAgeDeath  'age of death
'                      If Len(Text3(cTxt_FHAgeDeath)) > 1 Then
'                         If left(Text3(cTxt_FHAgeDeath), 1) = "0" Then
'                            Text3(cTxt_FHAgeDeath) = right(Text3(cTxt_FHAgeDeath), Len(Text3(cTxt_FHAgeDeath)) - 1)
'                            Text3(cTxt_FHAgeDeath).SelStart = Len(Text3(cTxt_FHAgeDeath))
'                         End If
'                       End If
'                  End Select
'      Case cSection_Immunisations
'              bExitRoutine = True
'              Select Case Index
'                  Case 0, 1
'                       TempText = Trim(Text3(Index))
'                       If Len(Text3(Index)) = 0 Then
'                          Picture2.Visible = False
'                       End If
'                  Case 2 'the date
'                       If Trim(Text3(2)) = "" Then
'                          Text3(3) = ""
'                       End If
'
'              bExitRoutine = False
'              End Select
'      Case cSection_PastHistory
'                  bExitRoutine = True
'                  Select Case Index
'                  Case 0
'                       TempText = Trim(Text3(Index))
'                       If Len(Text3(Index)) = 0 Then
'                          For icounter = 0 To 2
'                              Option2(icounter).Value = False
'                              Option2(icounter).TabStop = False
'                          Next
'                          Picture2.Visible = False
'                       End If
'                  Case 3
'                      '------------------------------------------------
'                      'If year of onset is deleted, delete age of onset
'                      '------------------------------------------------
'                      If Trim(Text3(Index)) = "" Then
'                         Text3(2) = ""
'                      End If
'                  End Select
'                  bExitRoutine = False
'      End Select
'      bExitRoutine = False
'     'everything below is old
'     Exit Sub
'     '-----------------------------------------------------------
'     'When text3 is being changed and don't want to enter routine
'     'eg when adding new notes, medications, reasons
'     '-----------------------------------------------------------
'     If bExitRoutine Then
'        Exit Sub
'     End If
'
'     Select Case Index
'    ' Case cSOAP_Plan
'    '     ' display_ReasonForOrdering
'
'  '   Case cSOAP_Subjective
'  '        If Len(Text3(Index)) = 0 Then
'  '           'cmdCancelTest_Click
'  '           iValidTestRequested = False
'  '           For icounter = 0 To 50
'  '              sSOAP_Subjective(icounter) = ""
'  '              lRequestIDs(icounter) = vbEmpty
'  '           Next
'  '           For icounter = 0 To 10
'  '              sProfile_REquestNames(icounter) = ""
'  '              lProfile_RequestIds(icounter) = vbEmpty
'  '           Next
'  '          ' TabStrip1.TabIndex = 0
'  '           'VideoSoftIndexTab1_Click 1
'  '        End If
' '
' '    Case cSOAP_Assessment
' '        'Reset_Editing_Parameters
' '    Case cSOAP_Plan
' '         'Reset_Editing_Parameters
' '    Case cSOAP_Objective
' '        If Len(Text3(cSOAP_Objective)) = 0 Then
' '          ' Reset_Editing_Parameters
' '        End If
'   ' Case cPastMedicalHistory
'   '
'     End Select
'
'     'For icounter = 0 To 3
'     '    If Text3(icounter) <> "" Then
'     '       Command3(cEdit_AddText).Enabled = True
'     '       Command2(
'     '    End If
'     'Next
'
'    TempText = Text3(Index)
' End Sub
'
' Sub SplitIntoExistingAndNewText(SourceText As Control)
'     '---------------------------------------------------------------------
'     'The sourcetext control  will consist of one or more words separated
'     'by a ; character
'     'Eg if swholeText = 'cat;mouse;rat then sExistingText = cat;mouse;
'     'and the sLatesttextAdded = rat
'     '1.Get the root term(s)
'     '----------------------------------------------------------------
'      sMsg = SourceText
'     '-----------------------------------------------------------------
'     'if there are other ; in the string, is a multiple term, otherwise
'     'this is the first word in the string
'     '------------------------------------
'     lcharpos = InStr(sMsg, ";")
'     '------------------------------------------------------------------
'     '1.There is no other ';' in the string, hence this must be the only
'     'term the user has attempted to put in
'     '------------------------------------------------------------------
'     If lcharpos = False And sMsg & ";" <> copyofClinicalNotes Then
'        sExistingText = ""
'        sLatestTextAdded = sMsg
'     Else
'        '---------------------------------------------------------
'        'Terms already exist on the line, find the last one put in
'        '---------------------------------------------------------
'         icounter = 0
'        sExistingText = ""
'        Do Until lcharpos = False
'            lcharpos = InStr(sMsg, ";")
'            If lcharpos Then
'               If Len(sExistingText) Then
'                  sExistingText = sExistingText & left(sMsg, lcharpos - 1) & ";"
'               Else
'                  sExistingText = left(sMsg, lcharpos - 1) & ";"
'               End If
'               sMsg = right(sMsg, Len(sMsg) - lcharpos)
'            Else
'               sLatestTextAdded = sMsg
'            End If
'          Loop
'     End If
' End Sub
'
'
' Sub Process_user_data_input(SourceText As Control)
'
'      '------------------------------------------------------
'       'Split the text3() eg rat;cat Any existing text will be
'       'delineated by a ; and anything to the right with no ;
'       '------------------------------------------------------
'       SplitIntoExistingAndNewText SourceText
'       '--------------------------------------------------------
'       'Now using the sLatestTextAdded string make assumptions
'       'on whether the text is an entirely new term, a misspelled
'       'word, or find an exact or nearest guess for the inputted
'       'letters
'       '--------------------------------------------------------
'      ' If Tabstrip1.tabindex = 0 Then 'the request
'      '    Requests_Request_Select sourcetext
'         ' HIVPROMPT
'      ' Else
'          ParseText2 SourceText
'      ' End If
'
'
'
'
' End Sub
' Sub ParseText2(SourceText As Control)
'     Dim RecordsetBookmark
'     '------------------------------------------------
'     'If enter pressed when no text added,quit routine
'     '------------------------------------------------
'     If sLatestTextAdded = "" Then
'        If Len(SourceText) > 0 Then
'             iFinishedLineInput = True
'        Else
'           TDBGrid2_DblClick
'   Exit Sub
'        End If
'        Exit Sub
'     End If
'      '----------------------------------------------
'      'chop of a preceeding ? character from the term
'      '----------------------------------------------
'        If InStr(1, sMsg, "?") Then
'       ' If InStr(1, sLatestTextAdded, "?") Then
'           sMsg = Trim(right(sMsg, Len(sMsg) - 1))
'           sLatestTextAdded = sMsg
'           HasQuestionMarkpreceedingTerm = True
'        Else
'           HasQuestionMarkpreceedingTerm = False
'        End If
'     '-------------------------------------------------------------------
'     'At this point will have:
'     '   sExistingText = any previously chosen terms on the line +
'     '   sLatestTextAdded = the new bit, which could be the only bit
'     '   if the user actually double clicked on TDBGrid2 containing the
'     '   ozcode terms, append this to the end of the list.
'     '--------------------------------------------------------------------
'     If iUserclickedOnList Then
'        If RecordsExist(Data1) Then
'            If HasQuestionMarkpreceedingTerm Then
'                  sMsg = sExistingText & "?" & Trim(Data1.Recordset!Description) & ";"
'            Else
'                  sMsg = sExistingText & Trim(Data1.Recordset!Description) & ";"
'            End If
'         End If
'      Else
'         '------------------------------------------------------------------
'         'User must have pressed enter, or text3.lost focus. If they pressed
'         'enter must do some interpretation of what they most likely wanted
'         'to do in terms of this new text.
'         '------------------------------------------------------------------
'         If RecordsExist(Data1) Then
'             RecordsetBookmark = Data1.Recordset.Bookmark
'             '---------------------------------------------------------
'             'Clone the recordset, and check if the text in the textbox
'             'exactly matches any of the records in the clone. If it
'             'does, keep that record, or if not, keep the nearest subset.
'             'If the users word is an entire space delimited word within
'             'any of the terms, assume a new variation on the term.
'             '---------------------------------------------------------
'
'             Set Data1Rsclone = Data1.Recordset.Clone
'             Data1Rsclone.MoveFirst
'             '-----------------------------------------------------------
'             '1: Does text user typed in exactly match any member of list
'             '-----------------------------------------------------------
'
'             With Data1Rsclone
'             Do Until .EOF
'                If LCase(!Description) = Trim(LCase(sLatestTextAdded)) Then
'                    '------------------------------------------------------
'                    'the term the user has typed matches exactly any of the
'                    'terms in the whole recordset, keep that term and code
'                    '------------------------------------------------------
'                    If HasQuestionMarkpreceedingTerm Then
'                         sLatestTextAdded = "?" & Trim(!Description)
'                    Else
'                       sLatestTextAdded = Trim(!Description)
'                    End If
'                     sMsg = sExistingText & sLatestTextAdded & ";"
'                     bExitRoutine = True
'                     SourceText = sMsg
'                     sExistingText = sMsg
'                     TempText = ""
'                     sMsg = ""
'                     sLatestTextAdded = ""
'                     bExitRoutine = False
' Exit Sub
'                   Exit Do
'                End If
'                .MoveNext
'             Loop
'             '-----------------------------------------------------
'             '2. no exact match of phrase found in entire recordset
'             'look for subset in entire subset xxx
'             '-----------------------------------------------------
'             .Bookmark = RecordsetBookmark  're-position the clone
'             If InStr(LCase(!Description), Trim(LCase(sLatestTextAdded))) Then
'                     If HasQuestionMarkpreceedingTerm Then
'                         sLatestTextAdded = "?" & Trim(!Description)
'                     Else
'                         sLatestTextAdded = Trim(!Description)
'                     End If
'                     sMsg = sExistingText & sLatestTextAdded & ";"
'                     bExitRoutine = True
'                     SourceText = sMsg
'                     SourceText.SelStart = Len(SourceText) + 1
'                     sExistingText = sMsg
'                     TempText = ""
'                     sMsg = ""
'                     sLatestTextAdded = ""
'                     bExitRoutine = False
' Exit Sub
'             Else
'             Do Until .EOF
'               .FindNext "Lcase(Description) like " & Chr$(34) & "*" & Trim(LCase(sLatestTextAdded)) & "*" & Chr$(34)
'
'               If .NoMatch Then
'                   .MoveNext
'                Else
'                     If HasQuestionMarkpreceedingTerm Then
'                          sLatestTextAdded = "?" & Trim(!Description)
'                     Else
'                          sLatestTextAdded = Trim(!Description)
'                     End If
'                     sMsg = sExistingText & sLatestTextAdded & ";"
'                     bExitRoutine = True
'                     SourceText = sMsg
'                     SetCursor SourceText
'                     sExistingText = sMsg
'                     TempText = ""
'                     sMsg = ""
'                     sLatestTextAdded = ""
'                     bExitRoutine = False
'         Exit Sub
'                End If
'             Loop
'             End If
'             '---------------------------------------------------------
'             'At this point there has been
'             '- no exact match
'             '- no substring match
'             'so:3. If the recordset is not at the beginning, it is
'             '      reasonable to assume the user has scrolled down the
'             '      list - so accept the term the recordset is showing
'             '---------------------------------------------------------
'             If HasQuestionMarkpreceedingTerm Then
'                  sLatestTextAdded = "?" & Trim(Data1.Recordset!Description)
'             Else
'                  sLatestTextAdded = Trim(Data1.Recordset!Description)
'             End If
'             sMsg = sExistingText & sLatestTextAdded & ";"
'             bExitRoutine = True
'             SourceText = sMsg
'             SetCursor SourceText
'             sExistingText = sMsg
'             TempText = ""
'             sMsg = ""
'             sLatestTextAdded = ""
'             bExitRoutine = False
'   Exit Sub
'             '------------------------------------------------------
'                'If no exact match found is the text part of one of the
'                'terms showing in the recordset ie nomatch = true
'                '-------------------------------------------------------
'                 If .NoMatch Then
'                    '-------------------------------------------------------
'                    '1. Is the word the user typed in a complete word within
'                    'the context of the entire phrase, not just a subset
'                    'assume the user wants this as a new subset term
'                    '-------------------------------------------------------
'                    lcharpos = InStr(Trim(Data1.Recordset!Description) & " ", " " & Trim(sLatestTextAdded) & " ")
'                    lcharpos = InStr(Trim(Data1Rsclone!Description) & " ", " " & Trim(sLatestTextAdded) & " ")
'
'                    If lcharpos Then
'                        If HasQuestionMarkpreceedingTerm Then
'                              sMsg = sExistingText & "?" & sLatestTextAdded & ";"
'                        Else
'                              sMsg = sExistingText & sLatestTextAdded & ";"
'                        End If
'                        bExitRoutine = True
'                        SourceText = sMsg
'                        bExitRoutine = False
'    Exit Sub
'                    Else
'                    '-----------------------------------------------------------
'                    '2. Is the word a substring of the existing highlighted term
'                    '-----------------------------------------------------------
'                    'lcharpos = InStr(Trim(Data1.Recordset!Description), Trim(sLatestTextAdded))
'                    lcharpos = InStr(Trim(Data1Rsclone!Description), Trim(sLatestTextAdded))
'
'                    '----------------------------------------------------
'                    'If yes, then transfer that term to the term text box
'                    '----------------------------------------------------
'                    If lcharpos Then
'                      ' sLatestTextAdded = Trim(Data1.Recordset!Description)
'                       sLatestTextAdded = Trim(Data1Rsclone!Description)
'
'
'
'
'                   'End If
'
'                        If HasQuestionMarkpreceedingTerm Then
'                               sMsg = sExistingText & "?" & sLatestTextAdded & ";"
'                         Else
'                               sMsg = sExistingText & sLatestTextAdded & ";"
'                         End If
'                        bExitRoutine = True
'                        SourceText = sMsg
'                        sExistingText = sMsg
'                        sLatestTextAdded = ""
'                        sMsg = ""
'                        TempText = ""
'                        bExitRoutine = False
'                     End If
'                  End If
'                 Else
'                    '------------------------------------------------------
'                    'the term the user has typed matches exactly any of the
'                    'terms in the whole recordset, keep that term and code
'                    '------------------------------------------------------
'                     sLatestTextAdded = Trim(Data1Rsclone!Description)
'                     sMsg = sExistingText & sLatestTextAdded & ";"
'                     bExitRoutine = True
'                     SourceText = sMsg
'                     sExistingText = sMsg
'                     TempText = ""
'                     sMsg = ""
'                     sLatestTextAdded = ""
'                     bExitRoutine = False
'                 End If
'            End With
'
'
'
'
'         Else
'             '----------------------------------------------------------
'             'There are no records showing at all, it must be a new term
'             'when the record is saved with frmmain.save_patholgytest
'             'these new terms will be read from frmProjectData and saved
'             'as un unallocated term in the ozcode
'             '----------------------------------------------------------
'
'             If HasQuestionMarkpreceedingTerm Then
'                  sMsg = sExistingText & "?" & sLatestTextAdded & ";"
'             Else
'                  sMsg = sExistingText & sLatestTextAdded & ";"
'             End If
'
'         End If
'
'      End If
'
'     If sLatestTextAdded = "" Then Exit Sub
'             'no match in the list and not a sub-word, now check spelling
'              '-------------------------------------------------------
'             'Check the spelling of the word silently, ie prevent the
'             'popup word suggester from showing
'             '-------------------------------------------------------
'            ' iSilentSpellcheck = True
'            ' Text4 = sLatestTextAdded
'            ' checkspelling Text4
'            ' iSilentSpellcheck = False
'             '-------------------------------------------------------
'             'if word not found in the dictionary give user chance to
'             'choose replacement word via overt spellcheck
'             '-------------------------------------------------------
'            ' If speller.Resultcode = -1 Then
'            '     sMsg = "The term: " & sLatestTextAdded & vbLf & vbLf
'            '     sMsg = sMsg & "that you have just entered may contain errors. "
'            '     If InStr(sLatestTextAdded, " ") Then
'            '        sMsg = sMsg & "One or more words either don't appear to be  known english words, or "
'            '       sMsg = sMsg & "are not found in the medical dictionary. "
'            '     Else
'            '        sMsg = "The word you have entered may not be an recognised english word or '"
'            '        sMsg = sMsg & "is not found in the medical dictionary."
'            '     End If
'            '     sMsg = sMsg & "It is possible you may have misspelled this word." & vbLf & vbLf
'            '     sMsg = sMsg & "Do you wish to invoke the spellchecker?"
'            '     lResponse = MsgBox(sMsg, vbCritical + vbYesNo, "PROBLEM:")
'            '     If lResponse = vbYes Then
'            '         'change this to ask to check spelling
'            '         checkspelling SourceText
'            '         If speller.ReplacementWord <> "" Then
'            '            sLatestTextAdded = speller.ReplacementWord
'            '         End If
'            '     Else
'            '        sMsg = "Use the word anyway?"
'            '        lResponse = MsgBox(sMsg, vbQuestion + vbYesNo, "New Words")
'            '        If lResponse = vbNo Then
'  '           Exit Sub
'            '        End If
'            '     End If
'
'                 'If HasQuestionMarkpreceedingTerm Then
'                 '      sLatestTextAdded = "?" & sLatestTextAdded
'                 ' End If
'                 ' sMsg = sExistingText & sLatestTextAdded & ";"
'                 ' bExitRoutine = True
'                 ' SourceText = sMsg
'                 ' sExistingText = sMsg
'                 ' TempText = ""
'                 ' sMsg = ""
'                 ' sLatestTextAdded = ""
'                 ' bExitRoutine = False
'       ' Exit Sub
'
'             'Else
'                 'it is a valid word, but not in the terms list
'                 If HasQuestionMarkpreceedingTerm Then
'                     sMsg = sExistingText & "?" & sLatestTextAdded & ";"
'                 Else
'                     sMsg = sExistingText & sLatestTextAdded & ";"
'                 End If
'
'                 bExitRoutine = True
'                 SourceText = sMsg
'                 sExistingText = sMsg
'                 TempText = ""
'                 sMsg = ""
'                 sLatestTextAdded = ""
'                 bExitRoutine = False
'       Exit Sub
'           ' End If
'
' End Sub
'
' Sub Requests_Request_Select(SourceText As Control)
'     '------------------------------------------------
'     'If enter pressed when no text added,quit routine
'     '------------------------------------------------
'     If sLatestTextAdded = "" Then
'        If Len(SourceText) > 0 Then
'             iFinishedLineInput = True
'        Else
'             TDBGrid2_DblClick
'   Exit Sub
'        End If
'        Exit Sub
'     End If
'     '-------------------------------------------------------------------
'     'At this point will have:
'     '   sExistingText = any previously chosen terms on the line +
'     '   sLatestTextAdded = the new bit, which could be the only bit
'     '   if the user actually double clicked on TDBGrid2 containing the
'     '   ozcode terms, append this to the end of the list.
'     '--------------------------------------------------------------------
'
'        If RecordsExist(Data1) Then
'             iRequestDoesNotExist = False
'             sMsg = sExistingText & Trim(Data1.Recordset!Description) & ";"
'             '-----------------------------------------------------------------
'             'If a profile, get the request names, and Requests_id's into
'             'separate arrays:sProfile_REquestNames() and lProfile_RequestIds()
'             '-----------------------------------------------------------------
'             If Data1.Recordset!Section_ID = cUserProfileSectionID Then
'                Deal_with_User_profile
'             End If
'             Fill_RequestName_RequestID_array
'             bExitRoutine = True
'             SourceText = sMsg
'             'HIVPROMPT
'             sExistingText = sMsg
'             TempText = ""
'             sMsg = ""
'
'             sLatestTextAdded = ""
'             bExitRoutine = False
'
'       Exit Sub
'        Else
'            '----------------------------------------------------
'            'There are no records in recordset hence invalid test
'            '----------------------------------------------------
'            If sLatestTextAdded <> "" Then
'                 'TellUserTestNotValid
'                 'iRequestDoesNotExist = True
'                 'sLatestTextAdded = ""
'                ' bExitRoutine = True
'                 SourceText = sExistingText
'                 TempText = ""
'                 sMsg = ""
'                 bExitRoutine = False
'            End If
'        End If
' End Sub
'
' Sub Recalls_CalculateDate()
'
'     Dim iSpcPos As Integer
'     Dim sMsg As String
'     bExitRoutine = True
'     '----------------------------------------------------------
'     'Check if user wants day, month or year and add accordingly
'     '----------------------------------------------------------
'
'     If InStr(LCase(Trim(Text3(cRecall_Date))), "m") Then
'          sMsg = "m"
'     ElseIf InStr(LCase(Trim(Text3(cRecall_Date))), "y") Then
'          sMsg = "yyyy"
'     ElseIf InStr(LCase(Trim(Text3(cRecall_Date))), "d") Then
'         sMsg = "d"
'     ElseIf InStr(LCase(Trim(Text3(cRecall_Date))), "w") Then
'         sMsg = "ww"
'     Else
'         If Not (IsDate(Text3(cRecall_Date))) Then
'
'                   sMsg = "To allow the program to quickly calculate a valid date, "
'                   sMsg = sMsg & "enter a number, followed by either 'd','m' or 'y'" & vbCrLf & vbCrLf
'                   sMsg = sMsg & "For example typing 12M will produce a recall date "
'                   sMsg = sMsg & "12 month from the current system date."
'                   lresponse = MsgBox(sMsg, vbOKOnly, "Invalid Date")
'                   Text3(cRecall_Date) = ""
'
'         End If
'            bExitRoutine = False
'       Exit Sub
'
'     End If
'     iSpcPos = InStr(LCase(Text3(cRecall_Date)), left(sMsg, 1))
'     Text3(cRecall_Date) = Format(DateAdd(sMsg, Val(left(Text3(cRecall_Date), iSpcPos - 1)), Now), "dd/mm/yyyy")
'     bExitRoutine = False
'
' End Sub
' Sub Requests_Patients_List_Get()
'    '-----------------------------------------------------------------
'    'where DisplayType = 0 for lists of requests, 1 = display as Forms
'    '-----------------------------------------------------------------
'    Load_Layout "Requests", TDBGrid1(0), cGrID_Image_Requests
'    SSActiveTabs1.SelectedTab = 2
'
'    Screen.MousePointer = vbHourglass
'    '-----------------------------
'    'Display all the past requests
'    '-----------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     If gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsList Then
'         Set Q = Db.QueryDefs("MRQ_Requests_Getlist_ForPatient")
'     ElseIf gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsForm Then
'         Set Q = Db.QueryDefs("MRQ_Requests_GetForms_ForPatient")
'     Else
'        Set Q = Db.QueryDefs("MRQ_Requests_GetList_ByRequestType")
'        Q("Enter Provider_Type_ID") = Data2.Recordset!Provider_Type_ID
'     End If
'     Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'     Set Data2.Recordset = Q.OpenRecordset()
'     itdbgrid1_image = cGrID_Image_Requests
'     Screen.MousePointer = vbArrow
'     If RecordsExist(Data2) Then
'        TDBGrid1(0).ToolTipText = Data2.Recordset!Date & ": " & Data2.Recordset!Description
'     End If
'     TDBGrid1(0).ReBind
'     SSActiveTabPanel1.Visible = True
'     TDBGrid1(0).Visible = True
'     DoEvents
'
' End Sub
'
'
'
'
'
' Sub Prescribe_Get_Product_Formulation_Data()
'     Screen.MousePointer = vbHourglass
'     sSql = "SELECT DISTINCTROW proddat.product, proddat.section, "
'     sSql = sSql & "proddat.subsection, proddat.pc, proddat.p_text, "
'     sSql = sSql & "proddat.cmpcode, proddat.dis, proddat.cpi, "
'     sSql = sSql & "proddat.use, proddat.ci, proddat.pr, "
'     sSql = sSql & "proddat.ar, proddat.ir, proddat.wa, "
'     sSql = sSql & "proddat.manpage, proddat.xref, proddat.sportcode, "
'     sSql = sSql & "proddat.s11, proddat.prodsort, proddat.mancode, "
'     sSql = sSql & "proddat.deleted, formdat.prodcode, formdat.formcode, "
'     sSql = sSql & "formdat.form, formdat.rx, formdat.rx_text, "
'     sSql = sSql & "formdat.co, formdat.gf, formdat.brand, "
'     sSql = sSql & "formdat.da, formdat.foodcode, fooddat.description, "
'     sSql = sSql & "formdat.Drowsy FROM proddat INNER JOIN "
'     sSql = sSql & "(formdat LEFT JOIN fooddat ON formdat.foodcode = "
'     sSql = sSql & "fooddat.foodcode) ON proddat.prodcode = "
'     sSql = sSql & "formdat.prodcode WHERE (((proddat.product) Like "
'     sSql = sSql & Chr$(34) & Trim(Text3(0)) & "*" & Chr$(34) & ") "
'     sSql = sSql & "AND ((Left([formdat].[co],7))<>'Deleted' Or "
'     sSql = sSql & "(Left([formdat].[co],7)) Is Null)) "
'     sSql = sSql & "ORDER BY formdat.brand"
'     Data1.DatabaseName = sDrugs_MdB '"c:\drsdesk\data\sc_drugs7.mdb"
'     Data1.RecordSource = sSql
'     Data1.Refresh
'     Set Data1Rsclone = Data1.Recordset.Clone
'     Set ucfField_Product = Data1Rsclone.Fields!Product
'     Set ucfField_Brand = Data1Rsclone.Fields!Brand
'     TDBGrid2.ReBind
'     Screen.MousePointer = vbArrow
' End Sub
' Sub Script_Brand_GetList(sText As String)
'     '------------------------------------------------------------------
'     'Displays a list of brands to the user who has typed in sText which
'     'derives from text3(2)
'     '------------------------------------------------------------------
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Q = Db.QueryDefs("MRQ_Script_GetBrands")
'     Q("Enter Brand") = Trim(sText)
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(Text3(2)) Then
'        Picture2.Visible = True: Picture2.ZOrder
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
' Sub Script_Getlist_equivalentBrands()
'
'         sSql = "SELECT DISTINCTROW equivdat.prodcode1, equivdat.formcode1, "
'         sSql = sSql & "equivdat.packcode1, formdat.brand, proddat.section, "
'         sSql = sSql & " proddat.Prodcode , proddat.SubSection, proddat.pc, "
'         sSql = sSql & "proddat.Deleted, formdat.Formcode, formdat.formsort, "
'         sSql = sSql & "formdat.Form, formdat.rx_text, formdat.gf, "
'         sSql = sSql & "formdat.drowsy "
'         sSql = sSql & "FROM equivdat INNER JOIN (proddat INNER JOIN "
'         sSql = sSql & "formdat ON proddat.prodcode = formdat.prodcode) ON "
'         sSql = sSql & "(equivdat.formcode2 = formdat.formcode) AND "
'         sSql = sSql & "(equivdat.prodcode2 = formdat.prodcode) "
'         sSql = sSql & "Where (((equivdat.prodcode1) = "
'         sSql = sSql & gtNew_ScriptItem(0).Prodcode & ") "
'         sSql = sSql & "AND ((equivdat.formcode1) = "
'         sSql = sSql & gtNew_ScriptItem(0).Formcode & ") "
'         sSql = sSql & "And ((equivdat.packcode1) = "
'         sSql = sSql & gtNew_ScriptItem(0).Packcode & ") "
'         sSql = sSql & "And ((proddat.Deleted) Is Null)) "
'         sSql = sSql & "ORDER BY formdat.formsort"
'
'         Data2.DatabaseName = "c:\Drsdesk\data\sc_drugs7.mdb"
'         Data2.RecordSource = sSql
'         Data2.Refresh
'         If RecordsExist(Data1) Then
'            Load_Layout "Brand_Equivalents", TDBGrid1(0), cGrID_Image_Equivalents
'          '  Tdbgrid1_Image = cGrID_Image_Equivalents
'            TDBGrid1(0).ReBind
'         End If
'
' End Sub
' Sub Requests_Providers_Types_Single_List_Get()
'     '---------------------------------------------------
'     'get a list of service provider types and their ID's
'     'ie eg pathology - ID = 1, radiology - ID = 2
'     '---------------------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Requests_Providers_Types_List_Get")
'     Q("Enter Description") = Trim(Text3(cRequest_Type))
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(Trim(Text3(cRequest_Type))) <> 0 Then
'        If LCase(Data1.Recordset!Description) <> LCase(Trim(Text3(cRequest_Type))) Then
'           Picture2.Visible = True: Picture2.ZOrder
'        End If
'     Else
'        Picture2.Visible = False
'        Text3(0) = ""
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
' Sub Requests_Providers_Types_All_List_Get()
'     '---------------------------------------------------
'     'get a list of service provider types and their ID's
'     'ie eg pathology - ID = 1, radiology - ID = 2
'     '---------------------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("Requests_Providers_Types_All_List_Get")
'     Q("Enter Description") = "*"
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) Then
'        Picture2.Visible = True: Picture2.ZOrder
'     Else
'        Picture2.Visible = False
'        Text3(0) = ""
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
'
' Sub Requests_Providers_Types_Select()
'     '--------------------------------------------------
'     'The type of request has been selected eg pathology
'     '--------------------------------------------------
'     If Len(Text3(cRequest_Type)) And Picture2.Visible _
'        And itdbgrid2_image = cGrID_Requests_Provider_types Then
'        Command3_Click (1) 'clear the editing area
'        bExitRoutine = True
'        If RecordsExist(Data1) Then
'            With Data1.Recordset
'                Text3(cRequest_Type) = !Description
'                gtNew_Form(0).Provider.Type_ID = !Request_Type_ID
'                gtNew_Form(0).Provider.Type = !Description
'            End With
'         End If
'         bExitRoutine = False
'         '------------------------------------------------------------
'         'Next get either the default company for this user or if none
'         'display the first company in the list of providers of this
'         'request service
'         '------------------------------------------------------------
'         Requests_Providers_Default_Get gtNew_Form(0).Provider.Type_ID
'
'     End If
'
' End Sub
'
' Sub Requests_Providers_List_Get(Provider_Type_ID As Long)
'         '--------------------------------------------
'         'show the companies for this type of provider
'         '--------------------------------------------
'         If gtNew_Form(0).Provider.Type_ID = 0 Then
'            Command3_Click (cButtonCancel)
'  Exit Sub
'         End If
'         Set Db = OpenDatabase(sContacts_MDB, False)
'         Set Q = Db.QueryDefs("MRQ_Requests_Providers_Names_Like_GetList_Have_Type_ID")
'         Q("Enter Request_type_ID") = Provider_Type_ID
'         Q("Enter Description") = Trim(Text3(cRequest_Company))
'         Set Data1.Recordset = Q.OpenRecordset()
'           If RecordsExist(Data1) Then
'             If LCase(Data1.Recordset!Description) <> LCase(Trim(Text3(cRequest_Company))) Then 'Trim(LCase(sSearchText)) Then
'                Picture2.Visible = True: Picture2.ZOrder
'             Else
'                Picture2.Visible = False
'                Text3(cRequest_Company) = ""
'             End If
'          Else
'             '-----------------------------------------------------------
'             'No provider linked to this category - display all providers
'             '-----------------------------------------------------------
'              Set Q = Db.QueryDefs("MRQ_Requests_Providers_GetListNoLInkage")
'            ' Q("Enter Request_type_ID") = Provider_Type_ID
'              Q("Enter Description") = Trim(Text3(cRequest_Company))
'              Set Data1.Recordset = Q.OpenRecordset()
'              If RecordsExist(Data1) Then
'                 If LCase(Data1.Recordset!Description) <> LCase(Trim(Text3(cRequest_Company))) Then 'Trim(LCase(sSearchText)) Then
'                    Picture2.Visible = True: Picture2.ZOrder
'                 Else
'                    Picture2.Visible = False
'                 End If
'             Else
'                 Picture2.Visible = False
'                 Text3(cRequest_Company) = ""
'             End If
'         End If
'         Screen.MousePointer = vbArrow
'
' End Sub
' Sub Get_Patient(SearchText As String)
'     Dim sFieldMissing As String         'name of missing field
'     Dim Ws2 As Workspace
'     Dim bCancel As Boolean
'     bExitRoutine = True
'     Screen.MousePointer = vbHourglass
'     DoEvents
'     '--------------------------------------------------------------------
'     'Assume that text presented is either part firstname and part surname
'     'if seperated by a space, or if text only it is surname or part of it
'     '--------------------------------------------------------------------
'     SearchText = Trim(SearchText)
'     lcharpos = InStr(SearchText, " ")
'     If lcharpos = 0 Then
'        lcharpos = InStr(SearchText, ",")
'     End If
'
'     Select Case LCase(gtProgramDefaults.Demographic_ProgramName)
'     Case "medical director"
'          If lcharpos Then
'              sSql = "Select * from Patients where "
'              sSql = sSql & "Patients.Firstname like " & Chr$(34) & left(UCase(SearchText), lcharpos - 1) & "*" & Chr$(34)
'              sSql = sSql & " AND Patients.Surname like " & Chr$(34) & right(UCase(SearchText), Len(SearchText) - lcharpos) & "*" & Chr$(34)
'          Else
'              sSql = "Select * from patients where surname like "
'              sSql = sSql & Chr$(34) & UCase(SearchText) & "*" & Chr$(34)
'          End If
'          Set Ws2 = DBEngine.CreateWorkspace("ws02", "admin", "password")
'
'     Case "the drsdesk"
'          If lcharpos Then
'              sSql = "Select * from patients where "
'              sSql = sSql & "Patients.Firstname like " & Chr$(34) & left(SearchText, lcharpos - 1) & "*" & Chr$(34)
'              sSql = sSql & " AND Patients.Surname like " & Chr$(34) & right(Trim(SearchText), Len(SearchText) - lcharpos) & "*" & Chr$(34)
'          Else
'              sSql = "Select * from patients where surname like "
'              sSql = sSql & Chr$(34) & UCase(SearchText) & "*" & Chr$(34)
'          End If
'         sSql = sSql & " Order by Patients.Surname, Patients.Firstname, Patients.Street1, patients.suburb"
'         Set Ws2 = DBEngine.CreateWorkspace("ws02", "admin", "password")
'     Case "mims script"
'          If lcharpos Then
'              sSql = "Select * from patients where "
'              sSql = sSql & "Patients.Firstname like " & Chr$(34) & left(SearchText, lcharpos - 1) & "*" & Chr$(34)
'              sSql = sSql & " AND Patients.Surname like " & Chr$(34) & right(SearchText, Len(SearchText) - lcharpos) & "*" & Chr$(34)
'          Else
'              sSql = "Select * from patients where surname like "
'              sSql = sSql & Chr$(34) & UCase(SearchText) & "*" & Chr$(34)
'          End If
'         sSql = sSql & " Order by Patients.Surname, Patients.Firstname, Patients.AddressLine1, patients.AddressLine3"
'         Set Ws2 = DBEngine.CreateWorkspace("ws02", "admin", "password")
'     Case "pracsoft gp"
'         If lcharpos Then
'              sSql = "Select * from patients where "
'              sSql = sSql & "Patients.Firstname like " & Chr$(34) & left(SearchText, lcharpos - 1) & "*" & Chr$(34)
'              sSql = sSql & " AND Patients.Surname like " & Chr$(34) & right(SearchText, Len(SearchText) - lcharpos) & "*" & Chr$(34)
'          Else
'              sSql = "Select * from patients where surname like "
'              sSql = sSql & Chr$(34) & UCase(SearchText) & "*" & Chr$(34)
'          End If
'         sSql = sSql & " Order by Patients.Surname, Patients.Firstname, "
'         sSql = sSql & "Patients.Street, patients.[Town/suburb]"
'         Set Ws2 = DBEngine.CreateWorkspace("ws02", "Harvest", "@YAHWEH^")
'    End Select
'
'     '-------------------------------------------
'     'Open the patient table from whatever source
'     '-------------------------------------------
'     Set Db = Ws2.OpenDatabase(sMEDREC_MDB, False)
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Rs = Db.OpenRecordset(sSql)
'     Data2.DatabaseName = sMEDREC_MDB
'     Data2.RecordSource = sSql
'     Set Data2.Recordset = Rs
'     Data2.Refresh
'     '--------------------------------------------------------------
'     'If records exist, then get the record count, if multiple, then
'     'display a multiple pick list for user to select from
'     '--------------------------------------------------------------
'     If Data2.Recordset.EOF + Data2.Recordset.BOF <> -2 Then
'         Data2.Recordset.MoveLast
'         If Data2.Recordset.RecordCount > 1 Then
'            Data2.Recordset.MoveFirst
'            FrmAuditTrail.Caption = "Patients"
'            Set FrmAuditTrail.Data1.Recordset = frmMain.Data2.Recordset
'            Screen.MousePointer = vbArrow
'            FrmAuditTrail.Show 1
'            If FrmAuditTrail.Command1(1).Cancel = True Then
'               bCancel = True
'            Else
'                     Picture1(2).Visible = True
'                     display_PatientNameAndAddress
'                     frmConfirmPatientIdentity.Show 1
'                     If frmConfirmPatientIdentity.Command1(1).Cancel = True Then
'                           bCancel = True
'                     End If
'                     Unload frmConfirmPatientIdentity
'                 Patient_Display_Data
'                 iStopAllKeyBoardInput = False
'                 Exit Sub
'            End If
'
'         Else
'             '------------------------------------------------------------------
'             'Otherwise, there was only a single name found, so show the details
'             '------------------------------------------------------------------
'             display_PatientNameAndAddress
'             frmConfirmPatientIdentity.Show 1
'             If frmConfirmPatientIdentity.Command1(1).Cancel = True Then
'                   bCancel = True
'             End If
'             Unload frmConfirmPatientIdentity
'             Patient_Display_Data
'             iStopAllKeyBoardInput = False
'        End If
'     Else
'             '--------------------------------------------
'             'No records in the recordset, inform the user
'             '--------------------------------------------
'             bCancel = True
'             Screen.MousePointer = vbArrow
'             sMsg = "No record was found using the search criteria '" & SearchText & "'" & vbLf & vbLf
'             sMsg = sMsg & "If you want to enter the details for a new patient "
'             sMsg = sMsg & "you should do so in your nominated patient database ie "
'             sMsg = sMsg & gtProgramDefaults.Demographic_ProgramName
'             lresponse = MsgBox(sMsg, vbOKOnly + vbInformation, "Patient Database Search")
'     End If
'     '-----------------------------------------------------------------
'     'Either user chose to abort a multiple select, or no records exist
'     '-----------------------------------------------------------------
'     If bCancel Then
'           SearchText = ""
'           SSActiveToolBars1.Tools("ID_FindWhat").Edit.Text = ""
'           iStopAllKeyBoardInput = False
'           SendKeys "{F2}"
'          ' SSActiveToolBars1.Tools("ID_FindWhat").SetFocus
'     End If
'     Screen.MousePointer = vbArrow
'     bExitRoutine = False
'     Exit Sub
'
'    Screen.MousePointer = vbArrow
'    sTitle = "PROBLEM:"
'    sMsg = "Your patient record file is missing critical information for this "
'    sMsg = sMsg & "patient - the " & sFieldMissing & "." & vbLf & vbLf
'    sMsg = sMsg & "You should fix this in Medical Director before proceeding."
'    lresponse = MsgBox(sMsg, vbInformation, sTitle)
'     Exit Sub
'
'    Screen.MousePointer = vbArrow
'    sTitle = "PROBLEM:"
'    sMsg = "The program was unable to access your patient database." & vbLf & vbLf
'    sMsg = sMsg & "Please check the pathways are correct by selecting the configure menu, then file locations. "
'    sMsg = sMsg & "If you are unable to do this and cannot rectify the problem, please call technical support "
'    sMsg = sMsg & "(see the help menu - technical support)."
'    lresponse = MsgBox(sMsg, vbInformation, sTitle)
'    Exit Sub
' End Sub
'
'
' Sub IMM_GetForPatient()
'    Dim iVaccineCount As Integer
'    Dim iLastVaccineID As Integer
'    Dim iLastRecordID As Integer
'    Dim ilastScheduleiD As Integer
'    '----------------------------------------------
'    'Now get the immunisation data for this patient
'    '----------------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_IMM_GetForPatient")
'     Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'     Set Rs = Q.OpenRecordset()
'     iLastVaccineID = -1
'     ilastScheduleiD = -1
'     iLastRecordID = -1
'     '----------------------------------------------
'     'place data into the gtpatient(1).vaccination()
'     '----------------------------------------------
'     iVaccineCount = -1 'counter for patients vaccine count
'
'     With Rs
'        Do Until .EOF
'        If iLastRecordID <> !Record_ID Then
'             iEquiv_count = 0
'             iVaccineCount = iVaccineCount + 1
'             iLastRecordID = !Record_ID 'Rs!vaccine_Id
'             ReDim Preserve gtPatient(1).Vaccinations(0 To iVaccineCount)
'             gtPatient(1).Vaccinations(iVaccineCount).DataChanged = False
'             gtPatient(1).Vaccinations(iVaccineCount).Schedule.Name = "" & !Schedule_Text
'             gtPatient(1).Vaccinations(iVaccineCount).Schedule.ID = !Schedule_ID
'             gtPatient(1).Vaccinations(iVaccineCount).Deleted = False
'             If Not IsNull(!Age_due_months) Then
'               gtPatient(1).Vaccinations(iVaccineCount).Schedule.Age_due_months = !Age_due_months
'             End If
'             If Not IsNull(!Date_given) Then
'                gtPatient(1).Vaccinations(iVaccineCount).Date_given = !Date_given
'             End If
'             gtPatient(1).Vaccinations(iVaccineCount).Consult_First_noted = !Consult_First_noted
'             gtPatient(1).Vaccinations(iVaccineCount).Consult_ID = !Consult_ID
'             gtPatient(1).Vaccinations(iVaccineCount).Reaction = "" & !Reaction
'             gtPatient(1).Vaccinations(iVaccineCount).Vaccine.ID = !vaccine_Id
'             gtPatient(1).Vaccinations(iVaccineCount).Vaccine.live_vaccine = !live_vaccine
'             gtPatient(1).Vaccinations(iVaccineCount).Vaccine.Name = !Description
'             gtPatient(1).Vaccinations(iVaccineCount).Vaccine.Formulation = "" & !Formulation
'             gtPatient(1).Vaccinations(iVaccineCount).Vaccine.Serial_No = "" & !Serial_No
'             gtPatient(1).Vaccinations(iVaccineCount).Vaccine.Trade_Name = !Trade_Name
'             gtPatient(1).Vaccinations(iVaccineCount).Vaccine.Abbreviation = "" & !Abbreviation
'             gtPatient(1).Vaccinations(iVaccineCount).Record_ID = !Record_ID
'             gtPatient(1).Vaccinations_datachanged = False
'        End If
'        If Not IsNull(!Equivalent_ID) Then
'            ReDim Preserve gtPatient(1).Vaccinations(iVaccineCount).Vaccine.Equalivalent_ID(iEquiv_count)
'            gtPatient(1).Vaccinations(iVaccineCount).Vaccine.Equalivalent_ID(iEquiv_count) = !Equivalent_ID
'            iEquiv_count = iEquiv_count + 1
'        Else
'           ReDim Preserve gtPatient(1).Vaccinations(iVaccineCount).Vaccine.Equalivalent_ID(iEquiv_count)
'           gtPatient(1).Vaccinations(iVaccineCount).Vaccine.Equalivalent_ID(iEquiv_count) = 0
'        End If
'        .MoveNext
'        Loop
'     End With
'     Rs.Close
'     Db.Close
' End Sub
' Sub Save_Consult()
'    Dim iLockStatus As Integer
'    ' On Error GoTo Save_Consult_Error
'     If gtPatient(1).DataChanged = False Then
'        Exit Sub
'     End If
'     Screen.MousePointer = vbHourglass
'     iStopAllKeyBoardInput = True
'
'      '----------------------------------------------------------
'     '1.For every patient put a single record into consult table
'     '  the consult_ID is autonumbered by msaccess. The consult_ID
'     '  is only saved once for each encounter.
'     '----------------------------------------------------------
'     If iConsultIDSaved = False Then
'         Save_ConsultID
'     End If
'
'     Database_Lock
'     '--------------------------------------------------------------------
'     'save all changes made to the patient record during this consultation
'     'The consult_ID is incremented only once. The flag iConsultIDSaved is
'     'true after the initial save
'     '--------------------------------------------------------------------
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     'Save_ProgressNotes
'     SH_Save
'     FH_Save
'     RecreationalDrugs_Save
'     PastHistory_Save
'     IMM_Save
'     Allergy_save
'     'Measure_Save
'     Recalls_Save
'     ws.CommitTrans
'     ws.Close
'     Database_ChangeLocking False
'     Screen.MousePointer = vbArrow
'     '--------------------------------------------
'     'Transaction committed flag as committed save
'     '--------------------------------------------
'     Reset_DatachangedFlags
'     Patient_CheckHealthStatus
'     iConsultIDSaved = True
'     Screen.MousePointer = vbArrow
'     iStopAllKeyBoardInput = False
'
'     Exit Sub
'
'     On Error Resume Next
'     sMsg = "An error occurred whilst saving this patients record." & vbLf & vbLf
'     sMsg = "If the problem persists please contact technical support."
'     lresponse = MsgBox(sMsg, vbOKOnly, "PROBLEM:")
'     '----------------------------------------
'     'Committ the transaction and re-set flags
'     '----------------------------------------
'     ws.Rollback
'     Database_Unlock
'     Allergy_SetCommitFlags False
'     Recalls_SetcommitFlags False
'     Screen.MousePointer = vbArrow
'     iStopAllKeyBoardInput = False
'     On Error GoTo 0
' End Sub
'
' Sub FH_Get_FamilyMembers()
'     Dim sMsg As String
'     Dim icounter As Integer
'     Dim sFMH As String
'       Dim sLastRelationship As String
'       Dim sHeader As String
'       Dim icondition As Integer 'counter for next condition for relative
'       Dim iLast_member_ID As Integer
'       Erase gtPatient(1).FamilyMembers()
'
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Q = Db.QueryDefs("MRQ_FH_FamilyMembers_get")
'         Q("Enter Patient ID") = gtPatient(1).Patient_ID
'         Set Rs = Q.OpenRecordset()
'         icounter = -1
'         If Rs.EOF + Rs.BOF <> -2 Then
'             sLastRelationship = ""
'             iLast_member_ID = -1
'             sMsg = ""
'             sFMH = ""
'             With Rs
'             Do Until .EOF
'              '----------------------
'              'When each name changes
'              '----------------------
'              If !Member_iD <> iLast_member_ID Then
'                 If sMsg <> "" Then
'                    If sFMH = "" Then
'                       sFMH = sMsg
'                       sMsg = ""
'                    Else
'                       sFMH = sFMH & ";" & sMsg
'                       sMsg = ""
'                    End If
'                 End If
'                 sHeader = !Description
'                 sLastRelationship = !Description
'                 iLast_member_ID = !Member_iD
'                 icondition = 0
'                 icounter = icounter + 1
'                 '---------------------------------------
'                 'start a new array record for the member
'                 '---------------------------------------
'                 ReDim Preserve gtPatient(1).FamilyMembers(icounter)
'                 '---------------------------------------------
'                 'keep name,age of death,relationship once only
'                 '---------------------------------------------
'                 gtPatient(1).FamilyMembers(icounter).Person_Name = "" & !Name
'                 gtPatient(1).FamilyMembers(icounter).Date_of_Birth = "" & !Date_of_Birth
'                 gtPatient(1).FamilyMembers(icounter).Relationship = "" & !Description
'                 gtPatient(1).FamilyMembers(icounter).Relationship_ID = "" & !Relationship_ID
'                 gtPatient(1).FamilyMembers(icounter).Record_ID = !Member_iD
'                 gtPatient(1).FamilyMembers(icounter).Consult_First_noted = !Member_Consult_First_Noted
'                 gtPatient(1).FamilyMembers(icounter).Consult_ID = !Member_Consult_ID
'                 gtPatient(1).FamilyMembers(icounter).Deleted = False
'                 If !Age_of_Death <> "" Then
'                     gtPatient(1).FamilyMembers(icounter).Age_Death = !Age_of_Death
'                     sHeader = sHeader & " - died age " & !Age_of_Death
'                 Else
'                     gtPatient(1).FamilyMembers(icounter).Age_Death = -1
'                 End If
'                 sHeader = sHeader & " - "
'               sMsg = sHeader & sMsg
'              End If
'              '--------------------------------------------------------
'              'Aggregate all conditions for each relative together then
'              'add the sHeader (relative and name)
'              '--------------------------------------------------------
'              If !Condition <> "" Then
'                sMsg = sMsg & ", " & !Condition
'              End If
'              If Not IsNull(!Age_of_onset) Then
'                 sMsg = sMsg & " age " & !Age_of_onset
'              End If
'                 '-----------------------------------------------------
'                 'Now for each condition within that particular patient
'                 'add to the subarray 'note ozcode left out at this point
'                 '-----------------------------------------------------
'                 ReDim Preserve gtPatient(1).FamilyMembers(icounter).Conditions(icondition)
'                 gtPatient(1).FamilyMembers(icounter).Conditions(icondition).Record_ID = !Condition_ID
'                 gtPatient(1).FamilyMembers(icounter).Conditions(icondition).Deleted = False
'                 If Not IsNull(!Ozcode) Then
'                   gtPatient(1).FamilyMembers(icounter).Conditions(icondition).Ozcode = !Ozcode
'                 End If
'                 gtPatient(1).FamilyMembers(icounter).Conditions(icondition).DataChanged = False
'                 If Not IsNull(!Condition) Then
'                     gtPatient(1).FamilyMembers(icounter).Conditions(icondition).Description = !Condition
'                 End If
'                 If Not IsNull(!Comment) Then
'                     gtPatient(1).FamilyMembers(icounter).Conditions(icondition).Comment = !Comment
'                 End If
'                 If Not IsNull(!Age_of_onset) Then
'                     gtPatient(1).FamilyMembers(icounter).Conditions(icondition).age_Onset = !Age_of_onset
'                 Else
'                     gtPatient(1).FamilyMembers(icounter).Conditions(icondition).age_Onset = -1
'                 End If
'                 If Not IsNull(!Cause_of_Death) Then
'                     gtPatient(1).FamilyMembers(icounter).Conditions(icondition).Cause_of_Death = !Cause_of_Death
'                 End If
'                 gtPatient(1).FamilyMembers(icounter).Conditions(icondition).Consult_First_noted = !Condition_Consult_First_noted
'                 gtPatient(1).FamilyMembers(icounter).Conditions(icondition).Consult_ID = !Condition_Consult_ID
'                 gtPatient(1).FamilyMembers(icounter).Conditions(icondition).Deleted = False
'                 icondition = icondition + 1
'               Rs.MoveNext
'             Loop
'            If sMsg <> "" Then
'                    If sFMH = "" Then
'                       sFMH = sMsg
'                       sMsg = ""
'                    Else
'                       sFMH = sFMH & ";" & sMsg
'                       sMsg = ""
'                    End If
'                 End If
'        End With
'        gtPatient(1).FamilyMedicalSummary = sFMH & "."
'
'     End If
'     gtPatient(1).FamilyMedicalHistory_Changed = False
'     Rs.Close
'     Db.Close
'
' End Sub
'
' Sub SH_GetForPatient()
'         '-----------------------
'         'Get social history text
'         '-----------------------
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Q = Db.QueryDefs("MRQ_SH_Get")
'         Q("Enter Patient ID") = gtPatient(1).Patient_ID
'         Set Rs = Q.OpenRecordset()
'         gtPatient(1).socialHistory.history = ""
'         With Rs
'             If .EOF + .BOF <> -2 Then
'                gtPatient(1).socialHistory.history = !Description
'                gtPatient(1).socialHistory.Record_ID = !SocialHistory_ID
'                gtPatient(1).socialHistory.Consult_ID = !Consult_ID
'                gtPatient(1).socialHistory.Consult_First_noted = !Consult_First_noted
'                gtPatient(1).SocialHistory_Changed = False
'              End If
'         End With
'         Rs.Close
'         '-------------------------
'         'now get ethnicity details
'         '-------------------------
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Q = Db.QueryDefs("MRQ_SH_Ethnicity")
'         Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'          Set Rs = Q.OpenRecordset()
'        On Error Resume Next
'         With Rs
'             If .EOF + .BOF <> -2 Then
'                 gtPatient(1).Ethnicity.ID = !Ethnicity_ID
'                 gtPatient(1).Ethnicity.Aboriginal = !Aboriginal
'                 gtPatient(1).Ethnicity.Torres_Strait_Islander = !Torres_Strait_Islander
'                 gtPatient(1).Ethnicity.Country = "" & !Country
'                 gtPatient(1).Occupation = "" & !Description
'                 gtPatient(1).Occupation_ID = !Occupation_ID
'                 gtPatient(1).Occupation_Changed = False
'                 gtPatient(1).Ethnicity.Country_Id = 0 + !Country_Id
'                 gtPatient(1).Ethnicity.Language = "" & !Language
'                 gtPatient(1).Ethnicity.Language_ID = 0 & !Language_ID
'                 gtPatient(1).Ethnicity.DataChanged = False
'                 gtPatient(1).Retired = !Retired
'             End If
'         End With
'     Rs.Close
'     Db.Close
' End Sub
' Sub Patient_Get_AllData()
'     '-------------------------------------------------------------------
'     'Prevent change events, click events anywhere in program as get data
'     '-------------------------------------------------------------------
'     bExitRoutine = True
'     SH_GetForPatient
'     FH_Get_FamilyMembers
'     PastHistory_GetForPatient
'     RecreationalDrugs_GetForPatient
'     IMM_GetForPatient
'     ScratchPad_Get
'     Allergy_GetForPatient
'     Patient_GetMeasurements
'     bExitRoutine = False
'     itdbgrid1_image = cGrID_Image_None
'     itdbgrid2_image = cGrID_Image_None
'     iCurrentSection = csection_None
'     gtPatient(1).Aboriginal_TSI = False
'     gtPatient_Backup = gtPatient(1)
'     SSActiveToolBars1.Tools("ID_EditAllergy").Enabled = True
'     SSActiveToolBars1.Tools("ID_ShortCutScript").Enabled = True
'     Patient_CheckHealthStatus
'     Ssactivetabs1_TabsState True
'     SSActiveTabs1.SelectedTab = 1 'show medications tab at boot up
'     Patient_Get_Medications mrShowMedsActive
' End Sub
' Sub Ssactivetabs1_TabsState(iVisible As Boolean)
'    On Error Resume Next
'    For icounter = 1 To 4
'         SSActiveTabs1.Tabs(icounter).Visible = iVisible
'     Next
' End Sub
' Sub Patient_CheckHealthStatus()
'     Vaccines_Are_They_UpToDate
'     Patient_Get_Overdues
' End Sub
' Sub Patient_Display_Data()
'     '----------------------------
'     'Display the name and address
'     '----------------------------
'     display_PatientNameAndAddress
'     '-----------------------------
'     'Then get their medical record
'     '-----------------------------
'     Patient_Get_AllData
'     '------------------------------------------------------------------
'     'Default to overview mode and display the data from the gtpatient()
'     '------------------------------------------------------------------
'     Enable_Controls Me, True
'     SSActiveTabs1.Visible = True
'     SSActiveTabs1.Enabled = True
'     Show_Section "Overview"
'
' End Sub
' Sub Design_InputPanels()
'     Select Case iCurrentSection
'     Case cSection_Overview
'
'     Case cSection_FamilyandSocialHistory
'          Design_Panel_FamilyHistory
'     Case cSection_PastHistory
'          Design_panel_PastHistory
'     Case cSection_NewNotes
'         Design_Panel_NewNotes
'     Case cSection_SOAP
'
'     Case cSection_Script
'          Option2_Click (0)
'     Case cSection_Recalls
'     Case cSection_requests
'     Case cSection_Referrals
'     Case cSection_Reports
'     Case cSection_Immunisations
'          Design_Panel_Immunisations
'     Case cSection_ProgressNotes
'     End Select
' End Sub
' Sub IMM_ShowSection()
'       If iCurrentSection <> cSection_Immunisations Then
'           iCurrentSection = cSection_Immunisations
'           itdbgrid2_image = cGrID_Image_None
'           Design_Panel_Immunisations
'           Display_SectionData
'           Command3_Click (1)
'           'Call Text3_GotFocus(0)
'         End If
' End Sub
'
' Sub Display_SectionData()
'    bExitRoutine = True
'    On Error GoTo 0
'    ' On Error GoTo SectionData_Error
'     Dim sMsg As String
'     Select Case iCurrentSection
'     Case cSection_Overview
'      '----------------------------------
'      'display the social history summary
'      '----------------------------------
'      With RichTextBox1(0)
'             .Locked = True
'             SH_FormatText sMsg
'            .Text = sMsg
'      End With
'      '------------------------------------------
'      'display the diseases in the family members
'      '------------------------------------------
'      GenerateText_DiseasesInFamily sMsg
'      If sMsg <> "" Then
'         Label2(22).Caption = "FAMILY MEDICAL HISTORY: " & sMsg
'      Else
'         Label2(22).Caption = ""
'      End If
'
'
'      '------------------
'      'Display the habits
'      '------------------
'      RecreationalDrugs_Display
'      '--------------------------------
'      'display past history of diseases
'      '--------------------------------
'      PastHistory_Display
'      '----------------------------------
'      'Display if vaccines are up to date
'      '----------------------------------
'      'patient_CheckHealthStatus
'
'     Case cSection_FamilyandSocialHistory 'SFH
'          bExitRoutine = True '?remove this
'          '-----------------
'          'Ethnicity details
'          '-----------------
'          Text2(0) = gtPatient(1).Ethnicity.Country
'          Text2(1) = gtPatient(1).Ethnicity.Language
'          Text2(2) = gtPatient(1).Occupation
'          If gtPatient(1).Ethnicity.Aboriginal = True Then
'             check2(0).Value = 1
'          End If
'          If gtPatient(1).Ethnicity.Torres_Strait_Islander = True Then
'             check2(1).Value = 1
'          End If
'          If gtPatient(1).Retired = True Then
'             check3.Value = 1
'          End If
'
'          FH_DisplayLists
'          RichTextBox1(0).Text = gtPatient(1).socialHistory.history
'          bExitRoutine = False
'     Case cSection_PastHistory
'          RecreationalDrugs_Display
'          PastHistory_Display
'          On Error Resume Next
'          If iProblemChosen <> -1 Then
'             List1(0).ListIndex = iProblemChosen
'             iProblemChosen = -1
'          End If
'     Case cSection_Immunisations
'          IMM_Display
'          IMM_Display_Status
'          Vaccines_Alert_Those_missing
'     Case cSection_NewNotes
'          Problems_Active_DisplayList
'          SummaryList_Update
'
'
'    ' Case cSection_ProgressNotes
'    '      ProgressNOtes_Display
'
'     End Select
'     bExitRoutine = False
'     Exit Sub
'
'  bExitRoutine = True
' Exit Sub
' End Sub
'
'
' Sub Design_Panel_FamilyHistory()
'     Dim CommaPos As Integer
'     '-------------------------------------------------------------
'     'This selection collects the social and family history as well
'     'as ethnicity and country of origin
'     '-------------------------------------------------------------
'     Design_Panel_Basic
'     Init1.FileName = sMain_Dir & "\Medrec.ini"
'     Init1.Application = "FamilyandSocialHistory Fonts " & gtDoctor.Doctor_ID
'     bExitRoutine = True
'     cAllowOneTermOnly = True
'     '---------------------------------
'     'Remove things in Basic not needed
'     '---------------------------------
'     Picture1(3).Visible = False
'     Picture1(4).Visible = False
'     '------------
'     'The headings
'     '------------
'     With lblMasterHeading
'          .Caption = "FAMILY AND SOCIAL HISTORY"
'          .Visible = True
'     End With
'     lblMeasure = " Country Born "
'     With Label2(0)
'         .height = shText2Measure.height
'         .toP = sspanel2(0).toP + sspanel2(0).height + 100
'         .Visible = True
'         .left = 50
'         .FontBold = False
'         .Caption = "Country Born"
'         .BackColor = vbLightGrey
'         .ForeColor = vbPurple
'         .width = lblMeasure.width
'         .ZOrder
'     End With
'     lblMeasure.Caption = "   Australia   "
'     With Text2(0)
'         .Text = ""
'         .height = Label2(0).height
'         .left = Label2(0).left + Label2(0).width + 24
'         .toP = Label2(0).toP
'         .ForeColor = vbPurple
'         .width = lblMeasure.width    '800
'         .Visible = True
'         .BackColor = vbWhite
'         .ForeColor = vbDarkGrey
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .Locked = False
'         .MaxLength = 50
'         .TabStop = False
'         .TabIndex = 0
'     End With
'     lblMeasure.Caption = "  Language  "
'      With Label2(1)
'         .BackColor = vbLightGrey
'         .ForeColor = vbPurple
'         .height = Label2(0).height
'         .left = Text2(0).left + Text2(0).width + 24
'         .Caption = " Language"
'         .Visible = True
'         .toP = Label2(0).toP
'         .width = lblMeasure.width
'         .ZOrder
'     End With
'     lblMeasure.Caption = "  English  "
'     With Text2(1) 'language spoken
'         .toP = Text2(0).toP
'         .height = Label2(0).height
'         .Text = ""
'         .left = Label2(1).left + Label2(1).width + 24
'         .width = lblMeasure.width '900
'         .Visible = True
'         .BackColor = vbWhite
'         .ForeColor = vbDarkGrey
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .Locked = False
'         .MaxLength = 25
'         .TabStop = False
'         .TabIndex = 1
'     End With
'     With Label2(2)
'         .height = Label2(0).height
'         .left = Label2(0).left
'         .Caption = "Occupation "
'         .Visible = True
'         .toP = Label2(0).toP + Label2(0).height + 72
'         .width = Label2(0).width
'         .ForeColor = vbPurple
'         .BackColor = vbLightGrey
'         .ZOrder
'     End With
'
'     lblMeasure = " Teacher - primary school "
'     With Text2(2) 'occupation
'         .Text = ""
'         .height = Label2(0).height
'         .left = Text2(0).left
'         .width = lblMeasure.width
'         .Locked = False
'         .MaxLength = 30
'         .Visible = True
'         .toP = Label2(2).toP
'         .BackColor = vbWhite
'         .ForeColor = vbDarkGrey
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .TabStop = False
'         .TabIndex = 2
'     End With
'     lblMeasure = "     Retired    "
'     With check3
'         .Value = False
'         .width = lblMeasure.width
'         .Caption = "Retired"
'         .toP = Text2(2).toP
'         .left = Text2(2).left + Text2(2).width + 100
'         .Visible = True
'         .Font = "Verdana"
'         .Font.Size = 6
'     End With
'     'option buttons above editing area
'     lblMeasure.Caption = "    Aboriginal   "
'     With check2(0)
'         .Visible = True
'         .Caption = "Aboriginal"
'         .Tag = "Aboriginal"
'         .width = lblMeasure.width
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .ForeColor = vbPurple
'         .toP = Label2(0).toP
'         .left = Text2(1).left + Text2(1).width + 50
'         .Value = 0
'     End With
'     lblMeasure.Caption = "    Ts Island   "
'     With check2(1)
'         .Visible = True
'         .Caption = "TS Island"
'         .width = lblMeasure.width
'         .ForeColor = vbPurple
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .Tag = "Torres Strait Island"
'         .toP = Label2(0).toP
'         .left = check2(0).left + check2(0).width + 25
'         .Value = 0
'     End With
'
'     '------------------------------------------
'     'change the prompts inside the editing area
'     '------------------------------------------
'     With Label2(5)
'         .Caption = "Person's name"
'         .ForeColor = vbAqua
'     End With
'     Label2(6).Caption = "Relationship"
'     Label2(7).Caption = "Condition"
'     Label2(8).Caption = "Comment"
'     Label2(9).Caption = "Age onset"
'     With Label2(10)
'         .Caption = "Died of this"
'         .Visible = True
'     End With
'     With Text3(0) 'firstname and surname of family member
'          .width = 2000
'          .MaxLength = 50
'          .TabIndex = 3
'     End With
'     With Label2(19)
'         .Caption = "Date or birth "
'         .left = Text3(0).left + Text3(0).width + 100
'         .toP = Text3(0).toP
'         .height = Shape3.height
'         .BackColor = vbWhite
'         .ForeColor = vbDarkBlue
'         .Visible = True
'     End With
'     With Text3(7) 'used for relatives date of birth
'         .width = Picture1(1).width - Label2(19).left - Label2(19).width - ShSpacerEndGap.width '100
'         .toP = Text3(0).toP
'         .left = Label2(19).left + Label2(19).width + 50
'         .MaxLength = 10 'date format 00/00/0000
'         .TabIndex = 9
'         .Visible = True
'     End With
'     With Text3(1) 'relationship comes from database picklist
'         .width = Text3(0).width
'         .left = Text3(0).left
'         .MaxLength = 40
'         .TabIndex = 4
'     End With
'     lblMeasure = "80's"
'     With Text3(6) 'used for age of death
'         .width = Text3(7).width
'         .toP = Text3(1).toP
'         .left = Label2(19).left + Label2(19).width + 50
'         .MaxLength = 3 'up to 100 or eg 50's, 60's etc
'         .TabIndex = 9
'         .Visible = True
'     End With
'     lblMeasure = " Age of death "
'     With Label2(15)
'         .Caption = "Age of death "
'         .left = Label2(19).left
'         .toP = Text3(1).toP
'         .BackColor = vbWhite
'         .ForeColor = vbDarkBlue
'         .Visible = True
'     End With
'     With Text3(2) 'medical condition of family member
'         .width = Picture1(1).width - ShSpacerEndGap.width
'         .MaxLength = 50
'         .TabIndex = 5
'         .left = 10
'     End With
'     With Text3(3) 'used for comment on the family history item
'         .width = lblMeasure.width
'         .width = Text3(2).width
'         .MaxLength = 50
'         .TabIndex = 6
'         .left = 10
'     End With
'     With Text3(4) 'used for age of onset
'         .width = lblMeasure.width
'         .MaxLength = 3 'up to 100 or eg 50's, 60's etc
'         .TabIndex = 7
'         .left = 10
'     End With
'     With Text3(5)
'         .width = Text3(4).width
'         .MaxLength = 3 'Yes or No
'         .TabIndex = 8
'         .left = 10
'     End With
'     lblMeasure.Caption = " &Add Condition "
'     With Command3(0)
'         .left = 50
'         .width = lblMeasure.width
'         .Caption = "&Next Condition"
'         .Enabled = True
'         .Visible = True
'         .toP = Text3(5).toP + Text3(5).height + 50
'     End With
'     Command3(cEdit_Accept).toP = Command3(0).toP
'     Command3(cEdit_cancel).toP = Command3(0).toP
'     With Picture1(1)
'         .height = Command3(0).toP + Command3(0).height + 50
'         .toP = Text2(2).toP + Text2(2).height + 150
'     End With
'
'     With Picture1(0)
'         .height = Picture1(1).height
'         .toP = Picture1(1).toP
'
'     End With
'     Design_DisplayShadows
'     '----------------------------------------------------
'     'change the prompts for summary of family members
'     'list1(0) is now used to display this data
'     '----------------------------------------------------
'     With sspanel2(1)
'         .Caption = "Member                             Disease                   "
'         .toP = Picture1(0).toP + Picture1(0).height + 100
'         .Visible = True
'         .left = sspanel2(0).left
'     End With
'     Init1.Parameter = "Family History"
'     Split Init1.Value, ","
'     With List1(0) 'will display family member names
'         .height = (Picture3.height - sspanel2(1).toP - sspanel2(1).height - Shape2(8).height) / 2
'         .left = -6
'         .width = (Picture3.width / 7) * 3
'         .toP = sspanel2(1).toP + sspanel2(1).height
'         .Font.Name = "Verdana" 'sArray(0)
'         .Font.Size = 7  'sArray(1)
'         .Font.Bold = False ' sArray(2)
'         .Font.Italic = False 'sArray(3)
'          .Font.Size = 7
'          .Font.Bold = False
'          .Font.Italic = False
'         .BackColor = vbWhite
'         .Clear
'         .Visible = True
'         .Columns = 1
'     End With
'     With List1(1) 'will display a family member disease list
'         .height = List1(0).height
'         .left = List1(0).width - 1
'         .width = Picture3.width - List1(0).width - -12
'         .toP = sspanel2(1).toP + sspanel2(1).height
'         .Columns = 1
'         .Clear
'         .Visible = True
'         .Font.Name = "Verdana"  'sArray(0)
'         .Font.Size = 7 'sArray(1)
'         .Font.Bold = False 'sArray(2)
'         .Font.Italic = False 'sArray(3)
'         .BackColor = vbLightYellow
'     End With
'     With sspanel2(2)
'         .toP = List1(0).toP + List1(0).height
'         .Caption = "&Social History"
'         .Visible = True
'         .left = 0
'     End With
'     With Shape2(8)
'        ' .toP = Picture3.height - sspanel2(2).height
'         .left = 0
'         .Visible = True
'        ' .height = sspanel2(2).height
'     End With
'     With LabelAlerts
'       '  .height = Shape2(8).height
'       '  .toP = Shape2(8).toP
'       '  .toP = Picture3.height - Shape2(8).height
'        ' .left = 0
'     End With
'     With SSPanel1
'         ' .toP = Shape2(8).toP
'          .ForeColor = vbRed
'          .left = LabelAlerts.width + LabelAlerts.left
'          .Visible = True
'          .height = LabelAlerts.height
'          .width = Picture3.width - LabelAlerts.width
'     End With
'     '----------------------------------------------------
'     'Now move the Richtextbox1(0) to be the editor for the
'     'social history details.Move its header picture box
'     '----------------------------------------------------
'     Init1.Parameter = "Social History"
'      Split Init1.Value, ","
'     With RichTextBox1(0)
'         .ZOrder
'         .toP = Picture3.toP + sspanel2(2).toP + sspanel2(2).height
'         .Font.Name = "Verdana" ' = sArray(0)
'         .Font.Size = 7 'sArray(1)
'         .Font.Bold = False 'sArray(2)
'         .Font.Italic = False 'sArray(3)
'         .height = Shape2(8).toP - sspanel2(2).toP - sspanel2(2).height '- sspanel2(3).height
'         .left = Picture3.left + 20  'shape_left_outline.width
'         .width = Picture3.width - 40 ''shape_left_outline.width - shape_right_outline.width
'         .Text = ""
'         .BorderStyle = rtfNoBorder
'         .Visible = True
'         .Locked = False
'     End With
'     SSActiveToolBars1.Tools("ID_Print").Enabled = False 'default
'     bExitRoutine = False
'     DoEvents
'     Resizer1.Rebuild
' End Sub
'
' Sub Design_Panel_Overview()
'     Dim CommaPos As Integer
'     Init1.FileName = sMain_Dir & "\Medrec.ini"
'     Init1.Application = "OverView Fonts " & gtDoctor.Doctor_ID
'     Picture3.Visible = True     'holds all the controls
'     bExitRoutine = True
'     'resize the main panel using the shapes which will be
'     'automatically resized with contacts resizer
'     MainContainers_Position
'     '--------------------------------
'     'Make unwanted controls invisible
'     '--------------------------------
'     Label2(4).Visible = False
'     Picture4.Visible = False ' holds alcohol day, month etc
'     check3.Visible = False
'     Label2(21).Visible = False
'     List1(0).Clear
'     List1(1).Clear
'     Label8.Visible = False
'     Picture1(5).Visible = False
'     Text5.Visible = False
'     List1(0).Visible = False
'     List1(2).Visible = False 'the third of the general purpose list boxes
'     Command2(1).Visible = False
'     Command2(2).Visible = False
'     Label3.Visible = False
'     Label2(3).Visible = False
'     LabelAlerts.Visible = False
'     RichTextBox1(0).Visible = False
'     Picture2.Visible = False
'     Shape1.Visible = False
'     List2.Visible = False    'list box used over edit area
'     Picture1(0).Visible = False 'the editing area picture boxes and contents
'     Picture1(1).Visible = False
'     Shape9(0).Visible = False   'the background behind these edit areas
'     Shape9(1).Visible = False
'     Label2(19).Visible = False
'     Label2(0).Visible = False
'     Text2(3).Visible = False
'     Text2(5).Visible = False
'
'     Picture1(3).Visible = False
'     Picture1(4).Visible = False
'     For icounter = 0 To 1
'         check2(icounter).Visible = False
'     Next
'
'     For icounter = 0 To 2
'         Option3(icounter).Visible = False
'     Next
'     Text2(4).Visible = False 'height
'     Text2(2).Visible = False 'BP
'     Text2(0).Visible = False
'      '------------------------------------------------------
'      'Configure the main subheadings and controls under them
'      '------------------------------------------------------
'      lblMasterHeading = "OVERVIEW"
'      lblMasterHeading.Visible = True
'      With sspanel2(0)
'         .Caption = "Social and family"
'         .left = 0 'shape_left_outline.left + shape_left_outline.width
'         .width = Picture3.width ' - shape_right_outline.width - shape_left_outline.width
'         .toP = 0 '12
'      End With
'
'     Init1.Parameter = "Social History"
'     Split Init1.Value, ","
'     CommaPos = InStr(Init1.Value, ",")
'      With RichTextBox1(0) 'holds social history summary
'         .toP = Picture3.toP  ' + sspanel2(0).height + shape_top_outline.height
'         .left = Picture3.left
'         .width = Picture3.width
'         .BackColor = vbWhite
'         .BorderStyle = rtfFixedSingle
'         .Font = sArray(0)
'         .Font.Size = sArray(1)
'         .Font.Bold = sArray(2)
'         .Font.Italic = sArray(3)
'         .height = Picture3.height * 0.15
'         .Visible = True
'         .Locked = True
'         .Text = ""
'        .SelColor = vbBlack
'      End With
'
'     Init1.Parameter = "Family History"
'     Split Init1.Value, ","
'      With Label2(22)  'holds medical family disease history summary
'         .toP = RichTextBox1(0).toP + RichTextBox1(0).height  '+ Shape2(4).height
'         .left = 0 'shape_left_outline.width
'         .width = Picture3.width '- 100
'         .height = Picture3.height * 0.08
'         .BorderStyle = 0 'no border
'         .BackColor = vbWhite
'         .Font = sArray(0)
'         .Font.Size = sArray(1)
'         .Font.Bold = sArray(2)
'         .Font.Italic = sArray(3)
'         .ForeColor = vbBlue
'         .Visible = True
'         .WordWrap = True
'      End With
'     'SSPanel1.height = Shape2(8).height '-  'shape_bottom_outline.height * 3 'holds the alerts
'     ' SSPanel1.toP = Command2(2).toP
'      With sspanel2(1)
'         .Caption = "Active problems"
'         .toP = Label2(22).toP + Label2(22).height + 50
'         .Visible = True
'         .left = sspanel2(0).left
'         .width = sspanel2(0).width
'      End With
'      Init1.Parameter = "Active Problems"
'       Split Init1.Value, ","
'      With List1(1)  'to display the active problems
'         .toP = sspanel2(1).toP + sspanel2(1).height
'         .height = Picture3.height * 0.24 ' 1250
'         .left = -6
'         .width = Picture3.width 'main mother panel
'         .Visible = True
'         .Font = sArray(0)
'         .Font.Size = sArray(1)
'         .Font.Bold = sArray(2)
'         .Font.Italic = sArray(3)
'         .BackColor = vbWhite
'         .Columns = 3
'      End With
'         With sspanel2(2)
'         .Caption = "Habits                                          Risk Factors "
'         .toP = List1(1).toP + List1(1).height
'         .Visible = True
'         .left = sspanel2(0).left
'         .width = sspanel2(0).width
'      End With
'      lblHabits.Visible = False: Label2(1).Visible = False: Picture5.Visible = False
'      Init1.Parameter = "Habits"
'       Split Init1.Value, ","
'      With lblHabits 'label to display the habits
'         .toP = sspanel2(2).toP + sspanel2(2).height + 12
'         .width = Picture3.width / 2 - 50
'         .height = 600   'Picture3.height * 0.14   '500
'         .left = 48
'         .BackColor = vbWhite
'         .ForeColor = vbBlack
'         .Font = sArray(0)
'         .Font.Size = sArray(1)
'         .Font.Bold = sArray(2)
'         .Font.Italic = sArray(3)
'         .Visible = True
'         .Caption = ""
'      End With
'      With sspanel2(3)
'         .Caption = "Significant past problems"
'         .Visible = True
'         .width = sspanel2(0).width
'         .toP = lblHabits.toP + lblHabits.height + 12
'         '.toP = List1(0).toP - sspanel2(3).height
'         .left = sspanel2(0).left
'     End With
'     Init1.Parameter = "All Problems"
'     Split Init1.Value, ","
'      With List1(0) 'to hold the past history
'         .BackColor = vbRed
'         .toP = sspanel2(3).toP + sspanel2(3).height '+ 1
'         .left = -6
'         .Columns = 3
'         .height = Picture3.height - sspanel2(3).toP - Shape2(8).height - sspanel2(3).height
'         .width = Picture3.width
'         .Font = sArray(0)
'         .Font.Size = sArray(1)
'         .Font.Bold = sArray(2)
'         .Font.Italic = sArray(3)
'         .Visible = True
'         .BackColor = vbWhite
'       End With
'
'     With LabelAlerts
'         .Visible = True
'        ' .left = 0
'     End With
'     With SSPanel1
'        '  .toP = Shape2(8).toP
'          .ForeColor = vbRed
'          .left = LabelAlerts.width + LabelAlerts.left
'          .Visible = True
'         ' .height = LabelAlerts.height
'          .width = Picture3.width - LabelAlerts.width
'     End With
'     SSPanel1.BackColor = vbLightGrey
'     SSActiveToolBars1.Tools("ID_Print").Enabled = True 'default
'     SSActiveToolBars1.Tools("ID_GeneralMenuChangefont").Enabled = True
'     SSActiveToolBars1.Tools("ID_GeneralMenuSAvefont").Enabled = True
'     bExitRoutine = False
'     Resizer1.Rebuild
'     DoEvents
' End Sub
' Sub MainContainers_Position()
'
'      With Picture3
'         .height = Shape_MainHeight.height
'         .width = Shape_MainWidth.width
'         .left = 100
'       End With
'       With Shape2(6)
'            .height = Shape_MainHeight.height
'            .width = Shape_MainWidth.width
'            .toP = Picture3.toP + 75
'            .left = Picture3.left + 75
'       End With
'       With SSActiveTabs1 'the top tab control
'         .height = Shape_TopRightHeight.height
'         .width = Shape_rightwidth.width
'         .left = Shape_TopRightHeight.left + Shape_TopRightHeight.width
'       End With
'       With SSPanel3(1) 'the control holding scratch pad/reminders
'         .height = Shape_BottomRightHeight.height
'         .width = SSActiveTabs1.width
'         .left = SSActiveTabs1.left
'         .toP = Shape_BottomRightHeight.toP
'         .Visible = True
'       End With
'       With Shape2(7) 'the shadow under right hand containers
'         .toP = Shape2(6).toP
'         .left = SSActiveTabs1.left + 75
'         .height = Picture3.height
'         .width = SSPanel3(1).width
'       End With
'
'
' End Sub
' Sub Design_Panel_NewNotes()
'         bExitRoutine = True
'           LineTopBorder.Visible = False
'         LineLeftBorder.Visible = False
'        '---------------------------------------------
'        'Controls not used in this section are removed
'        '---------------------------------------------
'         lblMeasure.WordWrap = False
'        Label3.Visible = False
'         Picture4.Visible = False 'CONTAINS OPTION 4 BUTTONS
'         Picture1(5).Visible = False
'         Label2(21).Visible = False
'        Command3(cEdit_AddText).Visible = False
'         Command2(2).Visible = False 'ancilliary print button
'        Label2(10).Visible = False
'        lblHabits.Visible = False
'        Label2(22).Visible = False
'        Label2(19).Visible = False
'        Shape2(4).Visible = False
'        check3.Visible = False
'          Label2(15).Visible = False
'        Text3(5).Visible = False
'        Text2(5).Visible = False
'        For icounter = 0 To 5
'            check1(icounter).Visible = False
'        Next
'        RichTextBox1(0).Visible = False
'        RichTextBox1(0).Text = ""
'        sspanel2(3).Visible = False
'        With Text5
'         .toP = Picture1(4).toP + 12
'         .height = Picture1(4).height - 24
'         .width = Picture1(4).width - Command1(3).width - 24
'         .left = Picture1(4).left + 12
'         .BackColor = vbWhite
'         .ForeColor = vbAqua
'        End With
'        With Command1(3) 'the button inside picture1(4)
'         .left = Picture1(4).width - Command1(3).width - 12
'         .toP = 0
'         .height = Picture1(4).height - 24
'       End With
'         For icounter = 0 To 1
'          check1(icounter).Visible = False
'          check2(icounter).Visible = False
'        Next
'        For icounter = 0 To 2
'            Command1(icounter).Visible = False
'        Next
'        Text1.Visible = False
'        'Text4.Visible = False
'        For icounter = 0 To 4
'           Text3(icounter).Text = ""
'
'        Next
'        For icounter = 0 To 5
'             Option2(icounter).Visible = False
'        Next
'       Label2(20).Visible = False
'         Picture2.Visible = False
'        rtb2.Visible = False
'        '----------------
'        'the main heading
'        '----------------
'        lblMasterHeading.Visible = True
'        lblMasterHeading.Font.Size = 7
'        lblMasterHeading.Caption = "NEW CLINICAL DATA"
'        sspanel2(0).Caption = ""
'
'     '  For iCounter = 0 To 4
'     '      Text2(iCounter).Text = ""
'     '      Text2(iCounter).Visible = False
'     '  Next
'       '---------------------------------------------------------
'       'The input text boxes at top of screen, and option buttons
'       '---------------------------------------------------------
'       With Label2(0)
'          .Caption = "Weight "
'          .height = 180
'          .left = 850
'          .toP = 324
'          .Font.Name = "Verdana"
'          .Font.Bold = False
'          .Font.Size = 7
'          .BackColor = vbLightGrey
'          .ForeColor = vbDarkBlue
'          .Visible = True
'       End With
'       With Text2(0) 'weight input
'          .Text = ""
'          .toP = Label2(0).toP
'          .left = Label2(0).left + Label2(0).width + 100
'          .height = Label2(0).height
'          .width = 480
'          .BackColor = vbWhite
'          .ForeColor = vbDarkGrey
'          .Font.Name = "Verdana"
'          .Font.Size = 7
'          .Visible = True
'       End With
'
'     With Label2(1)
'          .Caption = "Height"
'          .height = 180
'          .left = Text2(0).left + Text2(0).width + 50
'          .toP = Label2(0).toP
'          .Font.Name = "Verdana"
'          .Font.Bold = False
'          .Font.Size = 7
'          .BackColor = vbLightGrey
'          .ForeColor = vbDarkBlue
'          .width = Label2(0).width
'          .Visible = True
'       End With
'       With Text2(1) 'height
'          .Text = ""
'          .toP = Label2(0).toP
'          .height = Label2(0).height
'          .width = 480
'          .left = Label2(1).left + Label2(1).width + 50
'          .BackColor = vbWhite
'          .ForeColor = vbDarkGrey
'          .Font.Name = "Verdana"
'          .Font.Size = 7
'          .Visible = True
'       End With
'       With Label2(2)
'          .Caption = "BMI"
'          .height = Label2(0).height
'          .left = Text2(1).left + Text2(1).width + 50
'          .toP = Label2(0).toP
'          .Font.Name = "Verdana"
'          .Font.Bold = False
'          .Font.Size = 7
'          .BackColor = vbLightGrey
'          .ForeColor = vbDarkBlue
'          .Visible = True
'       End With
'       With Text2(4) 'BMI
'          .Text = ""
'          .height = Label2(0).height
'          .left = Label2(2).left + Label2(2).width + 50
'          .BackColor = vbWhite
'          .ForeColor = vbDarkGrey
'          .Font.Name = "Verdana"
'          .Font.Size = 7
'          .width = 480
'          .Visible = True
'       End With
'        With Label2(4)
'          .Caption = "BP"
'          .height = Label2(0).height
'          .left = Label2(0).left
'          .toP = Label2(0).toP + Label2(0).height + 100
'          .Font.Name = "Verdana"
'          .Font.Bold = False
'          .Font.Size = 7
'          .BackColor = vbLightGrey
'          .ForeColor = vbDarkBlue
'          .Visible = True
'       End With
'       With Text2(2) 'BP
'          .Text = ""
'          .left = Text2(0).left
'          .toP = Label2(4).toP
'          .height = Label2(0).height
'          .BackColor = vbWhite
'          .ForeColor = vbDarkGrey
'          .Font.Name = "Verdana"
'          .Font.Size = 7
'          .width = 480
'          .Visible = True
'       End With
'         With Label2(3)
'          .Caption = "Pulse"
'          .height = 180
'          .left = Text2(2).left + Text2(2).width + 50
'          .toP = Label2(4).toP
'          .width = Label2(0).width
'          .BackColor = vbLightGrey
'          .ForeColor = vbDarkBlue
'          .Font.Name = "Verdana"
'          .Font.Bold = False
'          .Font.Size = 7
'          .Visible = True
'       End With
'       With Text2(3) 'pulse
'          .Text = ""
'          .height = Label2(0).height
'          .left = Text2(1).left
'          .toP = Label2(4).toP
'          .BackColor = vbWhite
'          .ForeColor = vbDarkGrey
'          .Font.Name = "Verdana"
'          .Font.Size = 7
'          .width = 480
'          .Visible = True
'       End With
'       With Option3(0)
'         .toP = Label2(4).toP
'         .Caption = "Reg "
'         .left = 3100
'         .width = 500
'         .Font.Name = "Verdana"
'         .Font.Size = 7
'         .Visible = True
'         .Value = False
'       End With
'       With Option3(1)
'         .toP = Label2(4).toP
'         .Caption = "Irreg "
'         .left = Option3(0).left + Option3(0).width
'         .width = 550
'         .Font.Name = "Verdana"
'         .Font.Size = 7
'         .Visible = True
'         .Value = False
'       End With
'        With Option3(2)
'         .toP = Label2(4).toP
'         .Caption = "A Fibrillation"
'         .left = Option3(1).left + Option3(1).width + 100
'         .width = 1100
'         .Font.Name = "Verdana"
'         .Font.Size = 7
'         .Visible = True
'         .Value = False
'       End With
'       '-------------------------------------------------------------
'       'Make the main caption boxes containing the subsection and the
'       'current problem visible
'       '-------------------------------------------------------------
'       With Picture1(3)
'           .toP = Label2(3).toP + Label2(3).height + 150
'           .left = 135
'           .Visible = True
'           .height = 216
'       End With
'       With Picture1(4)
'           .toP = Picture1(3).toP
'           .left = Picture1(3).left + Picture1(3).width + 50
'           .Visible = True
'           .height = 216
'       End With
'
'          'the row of option buttons across the top. An option button
'        'without any text is about 140 across
'
'       ' With Option2(0)
'       '  .Top = Option2(2).Top
'       '  .Visible = True
'       '  .width = 550
'       '  .Left = 0
'       ' End With
'       ' With Option2(1)
'       '  .Top = Option2(2).Top
'       '  .Visible = True
'       ' End With
'          'Make the options visible
'        '  With Option2(0)
'        '     .Caption = "Soap"
'        '     .width = 650
'        '     .Visible = True
'        '     .Top = 30
'        '  End With
'        '  With Option2(1)
'        '     .Caption = "Script"
'        '     .Visible = True
'        '     .Top = 30
'        '     .width = 650
'        '     .Left = Option2(0).Left + Option2(0).width + 10
'        '     .Value = False
'        '  End With
'        '  With Option2(2)
'        '     .Caption = "Investigate"
'        '     .Visible = True
'        '     .Top = 30
'        '     .Left = Option2(1).Left + Option2(1).width + 5
'        '     .width = 1000
'        '     .Value = False
'        '  End With
'        '  With Option2(3)
'        '     .Caption = "Refer"
'        '     .Visible = True
'        '     .Top = 30
'        '     .Value = False
'        '  End With
'        '  With Option2(4)
'        '     .Caption = "Recall"
'        '     .Visible = True
'        '     .Top = 30
'        '     .Value = False
'        '  End With
'        '  With Option2(5)
'        '     .Caption = "Review"
'        '     .Visible = True
'        '     .Top = 30
'        '     .Value = False
'        '  End With
'          With Command3(cEdit_Accept)
'             .Caption = "&Ok"
'             .left = 3180
'             .toP = Label2(9).toP + 224
'          End With
'          lblMeasure.Caption = " &Cancel "
'          With Command3(cEdit_cancel)
'              .Caption = "&Cancel"
'              .left = Command3(cEdit_Accept).left + Command3(cEdit_Accept).width + 50
'              .toP = Command3(cEdit_Accept).toP
'              .width = 600
'          End With
'          With Picture1(0)
'              .toP = Picture1(3).toP + Picture1(3).height + 25
'              .left = Picture1(3).left
'              .Visible = True 'these hold the editing area
'              .height = Command3(cEdit_Accept).toP + Command3(cEdit_Accept).height + 50
'          End With
'          With Picture1(1)
'              .toP = Picture1(0).toP
'              .height = Picture1(0).height
'              .left = Picture1(4).left
'              .Visible = True
'          End With
'          '--------------------------------------
'         'the background behind these edit areas
'         '--------------------------------------
'         Design_DisplayShadows
'
'             With sspanel2(1)
'             .Caption = "Summary of this consultation"
'             .toP = Picture1(1).toP + Picture1(1).height + 200
'             .left = 12
'             .Visible = True
'         End With
'       '-----------------------------------------------------
'       'This shape acts as the grey background for text boxes
'       'and the edit area
'       '-----------------------------------------------------
'       With Shape1
'           .left = 0
'           .toP = Line2.y1 + 1
'           .height = sspanel2(1).toP - Line2.y1 + 1
'           .width = Picture3.width
'           .Visible = True
'           .BackColor = vbLightGrey
'       End With
'         With List1(0)
'             .Clear
'             .toP = sspanel2(1).toP + sspanel2(1).height
'             .height = 1272
'             .Font.Name = "Verdana"
'             .Font.Size = 6
'             .left = 0
'             .width = Picture3.width
'             .Visible = True
'         End With
'         With sspanel2(2)
'             .Caption = "Active Problems"
'             .toP = List1(0).toP + List1(0).height
'             .left = 12
'             .width = Picture3.width - 24
'             .Visible = True
'         End With
'         With List1(1) 'holds the active diseases
'             .toP = sspanel2(2).toP + sspanel2(2).height
'             .height = Shape2(8).toP - List1(1).toP
'             .Font.Name = "Verdana"
'             .Font.Size = 7
'             .left = 0
'              .Clear
'             .width = Picture3.width
'             .Visible = True
'         End With
'         Shape2(8).Visible = True
'         LabelAlerts.Visible = True
'         bExitRoutine = False
'         DoEvents
'         Option2_Click (0)
'         Label3.Caption = " SOAP NOTES "
'         Label3.Visible = True
'
' End Sub
' Sub Design_Panel_Basic()
'       bExitRoutine = True
'       MainContainers_Position
'       cAllowOneTermOnly = False
'       lblMeasure.Font.Name = "Verdana"
'       lblMeasure.Font.Size = 6
'
'         '------------------------------------------
'         'This is the basic design for every segment
'         'Controls not used in this section are removed
'         '1Those above the editing area
'         '---------------------------------------------
'           ' the temporary drop down list
'        With Label8
'             .Visible = False
'             .BackColor = vbWhite
'             .ForeColor = vbBlack
'             .Caption = ""
'       End With
'       Text3(10).Visible = False
'       Timer2.Enabled = False
'       Command2(0).Visible = False
'       List2.Visible = False
'       Label2(22).Visible = False
'         LineTopBorder.Visible = False
'         LineLeftBorder.Visible = False
'         Picture5.Visible = False 'central display
'        For icounter = 12 To 21
'            If icounter <> 23 Then
'             Label2(icounter).Visible = False
'            End If
'        Next
'        For icounter = 0 To 5
'            With Text2(icounter)
'                 .Visible = False
'                 .Font.Name = "Verdana"
'                 .Font.Size = 6
'                 .BackColor = vbWhite
'                 .ForeColor = vbBlack
'                 .height = Shape2(8).height  '180
'                 .MaxLength = 0
'                 .Locked = False
'                 .Text = ""
'            End With
'       Next
'       For icounter = 0 To 4
'           With Label2(icounter)
'             .Caption = ""
'             .height = Shape3.height '180
'             .Font.Name = "Verdana"
'             .Font.Bold = False
'             .Font.Size = 6
'             .BackColor = vbLightGrey
'             .ForeColor = vbDarkBlue
'             .Visible = False
'            End With
'       Next
'       Label2(5).ForeColor = vbAqua
'       For icounter = 0 To 1
'           With check2(icounter)
'                .Visible = False
'           End With
'      Next
'       For icounter = 0 To 2
'           With Option3(icounter)
'             .Visible = False
'             .Caption = ""
'             .Font.Name = "Verdana"
'             .Font.Size = 6
'             .Visible = False
'             .Value = False
'           End With
'      Next
'      Picture4.Visible = False 'holds option 4(0 t0 2)
'      lblMeasure.WordWrap = False
'      Label1.Visible = False
'
'        lblHabits.Visible = False
'
'        With Label3
'         .Caption = " "
'        .Visible = False
'        End With
'
'         Picture1(5).Visible = False
'         Shape2(4).Visible = False
'         check3.Visible = False
'         For icounter = 6 To 9
'             Text3(icounter).Visible = False
'
'         Next
'
'         '------------------------------------------------------
'         '2:Those things within the editing area not always used
'         '------------------------------------------------------
'         With Command3(0)
'             .Visible = False
'             .toP = Command3(2).toP
'         End With
'
'         With Command3(3)
'             .Visible = False
'             .toP = Command3(2).toP
'         End With
'         Command3(4).Visible = False
'         '3.Those things on the bottom of the screen
'         Command2(2).Visible = False 'ancilliary print button
'        For icounter = 0 To 7
'            check1(icounter).Visible = False
'        Next
'        For icounter = 0 To 3
'            Label7(icounter).Visible = False
'        Next
'        '----------------------------
'        'Those general things on form
'        '----------------------------
'        RichTextBox1(0).Visible = False
'        RichTextBox1(0).Text = ""
'        sspanel2(3).Visible = False
'
'
'        rtb2.Visible = False
'        For icounter = 0 To 3
'            Command1(icounter).Visible = False
'        Next
'        Text1.Visible = False
'        Text4(0).Visible = False
'
'        '-----------------------------------------------------------------
'        'Now configure the positions of basic things always in the same or
'        'similar place
'        '-----------------------------------------------------------------
'
'        For icounter = 0 To 5
'             Option2(icounter).Visible = False
'             Option2(icounter).TabStop = False
'        Next
'
'       '-------------------------------------------------------------
'       'Make the main caption boxes containing the subsection and the
'       'current problem visible
'       '-------------------------------------------------------------
'        lblMeasure.Caption = "   Persons name   "
'       With Picture1(3)
'           .left = 100
'           .toP = 882
'           .Visible = True
'           .height = Shape3.height 'spacer
'           .width = lblMeasure.width
'       End With
'       With Picture1(4)
'           .left = Picture1(3).left + Picture1(3).width + 50
'           .Visible = True
'           .height = Shape3.height
'           .toP = Picture1(3).toP
'           .width = Picture3.width - Picture1(3).width - 250
'       End With
'        '--------------------------------------------------------
'        'the position of the label prompts for all the text boxes
'        '--------------------------------------------------------
'        For icounter = 5 To 13
'            With Label2(icounter)
'                 .toP = shText3Spacer.height + (Shape3.height * (icounter - 5)) + (shText3Spacer.height * (icounter - 5))
'                 .BackColor = vbWhite
'                 .Visible = True
'                 .ForeColor = vbDarkBlue
'                 .Caption = ""
'                 .height = Shape3.height '192
'                 .left = 10
'                  If icounter < 10 Then
'                    .Visible = True
'                  Else
'                    .Visible = False
'                 End If
'                 .width = Picture1(3).width - 20
'            End With
'        Next
'
'        '----------------
'        'the main heading
'        '----------------
'        With lblMasterHeading
'             .Visible = True
'             .Caption = ""
'             .Font.Size = 6
'             .Font.Name = "Verdana"
'        End With
'       '-----------------------------------------------
'       'The first purple panel at the top of the screen
'       '-----------------------------------------------
'        sspanel2(0).Caption = ""
'
'          lblMeasure.Caption = " &Clear "
'          With Command3(cEdit_cancel)
'              .Caption = "&Clear"
'              .width = 600
'              .left = Picture1(1).width - .width - 75
'            '  .left = Command3(cEdit_Accept).left + Command3(cEdit_Accept).width + 50
'              .toP = Label2(10).toP + 20
'              .Visible = True
'
'          End With
'
'          With Command3(cEdit_Accept)
'            .width = 300
'             .Caption = "&Ok"
'             .left = Command3(cEdit_cancel).left - .width - 50
'             .toP = Command3(cEdit_cancel).toP
'             .Visible = True
'          End With
'         With Command3(0)
'             .Visible = False
'             .toP = Command3(2).toP
'         End With
'         With Command3(3)
'             .Visible = False
'             .toP = Command3(2).toP
'         End With
'         With Picture1(0)
'              .left = Picture1(3).left
'              .Visible = True 'these hold the editing area
'              .height = Label2(10).toP + Label2(10).height + 50
'              .toP = Picture1(3).toP + Picture1(3).height + 25
'              .width = Picture1(3).width
'          End With
'          With Picture1(1)
'              .toP = Picture1(0).toP
'              .height = Picture1(0).height
'              .left = Picture1(4).left
'              .Visible = True
'              .width = Picture1(4).width
'          End With
'
'         For icounter = 0 To 9
'             With Text3(icounter)
'              .Text = ""
'              .BackColor = vbPink
'              .ForeColor = vbRed
'              .toP = Label2(icounter + 5).toP
'              .left = 10
'              .width = Picture1(1).width - ShSpacerEndGap.width
'              .height = Shape3.height
'              .MaxLength = 0
'              .Enabled = True
'              .Locked = False
'              If icounter < 6 Then
'                  .Visible = True
'                  .TabIndex = icounter
'                 .TabStop = True
'              Else
'                 .TabStop = False
'              End If
'            End With
'         Next
'
'
'         '--------------------------------------
'         'the background behind these edit areas
'         '--------------------------------------
'        ' With Shape9(0)
'        '      .toP = Picture1(0).toP + 45
'        '      .left = Picture1(0).left + 25
'        '      .height = Picture1(0).height ' + 45
'        '      .Visible = True
'        '      .width = Picture1(0).width
'        ' End With
'        ' With Shape9(1)
'        '      .toP = Picture1(1).toP + 45
'        '      .left = Picture1(1).left + 45
'        '      .Visible = True
'         '     .height = Picture1(1).height '+ 25
'        '      .width = Picture1(1).width
'        ' End With
'
'         With sspanel2(1)
'             .Caption = ""
'             .toP = Picture1(1).toP + Picture1(1).height + 200
'             .left = 0
'             .Visible = True
'         End With
'      '-----------------------------------------------------
'       'This shape acts as the grey background for text boxes
'       'and the edit area
'       '-----------------------------------------------------
'       With Shape1
'           .left = 0
'           .toP = sspanel2(0).toP + sspanel2(0).height
'         '  .Top = Line2.y1 + 1
'           .height = sspanel2(1).toP - sspanel2(0).toP  'Line2.y1 + 1
'           .width = Picture3.width
'           .Visible = True
'           .BackColor = vbLightGrey
'       End With
'         With List1(0)
'             .Clear
'             .toP = sspanel2(1).toP + sspanel2(1).height
'            .height = (Picture3.height - sspanel2(1).toP - sspanel2(1).height - Shape2(8).height) / 2
'            .Font.Name = "Verdana"
'             .Font.Size = 6
'             .left = -6
'             .width = Picture3.width
'             .Visible = True
'         End With
'         With sspanel2(2)
'             .Caption = ""
'             .toP = List1(0).toP + List1(0).height
'             .left = 0
'             .width = Picture3.width - 24
'             .Visible = True
'         End With
'         With List1(1) 'holds the active diseases
'             .toP = sspanel2(2).toP + sspanel2(2).height
'             .height = Picture3.height - sspanel2(2).toP - Shape2(8).height - sspanel2(2).height
'             .Font.Name = "Verdana"
'             .Font.Size = 7
'             .left = -6
'              .Clear
'             .width = Picture3.width
'             .Visible = True
'         End With
'         Shape2(8).Visible = True
'         LabelAlerts.Visible = True
'
'     Picture2_FullWidth
'     Tdbgrid2_FullWidth
'      With Text5
'         .toP = Picture1(4).toP + 12
'         .height = Picture1(4).height - 36
'         .width = Picture1(4).width - Command1(3).width - 24
'         .left = Picture1(4).left + 12
'         .BackColor = vbWhite
'         .ForeColor = vbAqua
'         .Visible = False
'         .Text = ""
'         .ZOrder
'        End With
'        With Command1(3)
'          .toP = 0
'         .left = Text5.width
'         .height = Text5.height
'         .ZOrder
'         .Visible = True 'to drop down list of active problems
'        End With
'        SSPanel1.BackColor = vbLightGrey 'darker in design time to see it
'        SSActiveToolBars1.Tools("ID_GeneralMenuChangefont").Enabled = True
'       SSActiveToolBars1.Tools("ID_GeneralMenuSAvefont").Enabled = True
'       bExitRoutine = False
'       DoEvents
' End Sub
' Sub Design_panel_PastHistory()
'     Design_Panel_Basic
'     Init1.FileName = sMain_Dir & "\Medrec.ini"
'     Init1.Application = "PastHistory Fonts " & gtDoctor.Doctor_ID
'     bExitRoutine = True
'      cAllowOneTermOnly = True
'     '---------------------------------
'     'Remove things in Basic not needed
'     '---------------------------------
'     Picture1(3).Visible = False
'     Picture1(4).Visible = False
'
'     Label2(19).Visible = False
'     '------------
'     'The headings
'     '------------
'     With lblMasterHeading
'          .Caption = "PAST HISTORY"
'          .Visible = True
'     End With
'     '-----------------------------------------
'     'Add the controls peculiar to this section
'     '-----------------------------------------
'     lblMeasure.Caption = " Smoking"
'     With Label2(0)
'         .Caption = "Smoking "
'         .height = shText2Measure.height
'         .left = 100
'         .toP = sspanel2(0).toP + sspanel2(0).height + 100
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .width = lblMeasure.width
'         .Font.Bold = True
'         .BackColor = vbLightGrey
'         .ForeColor = vbDarkBlue
'         .Visible = True
'     End With
'     lblMeasure.Caption = "   40  "
'     With Text2(0)  'the cigs per day
'       .toP = Label2(0).toP
'       .left = Label2(0).left + Label2(0).width + 100
'       .height = Label2(0).height
'       .width = lblMeasure.width
'       .BackColor = vbWhite
'       .ForeColor = vbDarkGrey
'       .Font.Name = "Verdana"
'       .Font.Size = 6
'       .Visible = True
'       .Locked = False
'       .TabStop = False
'       .TabIndex = 0
'       .MaxLength = 2
'     End With
'     lblMeasure.Caption = " /day from age "
'     With Label2(1)
'       .Caption = " /day from age "
'       .height = Label2(0).height
'       .left = Text2(0).left + Text2(0).width + 50
'       .toP = Label2(0).toP
'       .Font.Name = "Verdana"
'       .Font.Size = 6
'       .width = lblMeasure.width
'       .BackColor = vbLightGrey
'       .ForeColor = vbDarkBlue
'       .Visible = True
'     End With
'     With Text2(1) 'height
'        .toP = Label2(0).toP
'        .height = Label2(0).height
'        .width = 300
'        .left = Label2(1).left + Label2(1).width + 50
'        .BackColor = vbWhite
'        .ForeColor = vbDarkGrey
'        .Font.Name = "Verdana"
'        .Font.Size = 6
'        .Visible = True
'        .Locked = False
'        .MaxLength = 3
'        .TabStop = False
'        .TabIndex = 1
'     End With
'     lblMeasure.Caption = "  to"
'     With Label2(2)
'        .Caption = " to "
'        .height = Label2(0).height
'        .left = Text2(1).left + Text2(1).width + 50
'        .toP = Label2(0).toP
'        .Font.Name = "Verdana"
'        .Font.Size = 6
'        .BackColor = vbLightGrey
'        .ForeColor = vbDarkBlue
'        .width = lblMeasure.width
'        .Visible = True
'     End With
'     With Text2(2) 'age stopped smoking
'        .height = Label2(0).height
'        .toP = Label2(0).toP
'        .left = Label2(2).left + Label2(2).width + 50
'        .BackColor = vbWhite
'        .ForeColor = vbDarkGrey
'        .Font.Name = "Verdana"
'        .Font.Size = 6
'        .width = Text2(1).width
'        .Visible = True
'        .Locked = False
'        .MaxLength = 3
'        .TabStop = False
'        .TabIndex = 2
'     End With
'     lblMeasure.Caption = "   Current   "
'     With Option3(0)
'         .toP = Label2(0).toP
'         .Caption = "Current"
'         .left = Text2(2).left + Text2(2).width + 200
'         .width = lblMeasure.width
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .Value = False
'         .Visible = True
'         .TabStop = False
'     End With
'     lblMeasure.Caption = "   Past    "
'     With Option3(1)
'         .toP = Label2(0).toP
'         .Caption = "Past"
'         .left = Option3(0).left + Option3(0).width + 50
'         .width = lblMeasure.width
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .Value = False
'         .Visible = True
'         .TabStop = False
'     End With
'     lblMeasure.Caption = "   Never    "
'     With Option3(2)
'         .toP = Label2(0).toP
'         .Caption = "Never"
'         .left = Option3(1).left + Option3(1).width + 50
'         .width = lblMeasure.width
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .Value = False
'         .Visible = True
'         .TabStop = False
'     End With
'     With Label2(3)
'        .Caption = "Alcohol"
'        .height = Label2(0).height
'        .left = Label2(0).left
'        .toP = Label2(0).toP + Label2(0).height + 100
'        .width = Label2(0).width
'        .BackColor = vbLightGrey
'        .ForeColor = vbDarkBlue
'        .Font.Name = "Verdana"
'        .Font.Bold = True
'        .Font.Size = 6
'        .Visible = True
'        .ZOrder
'
'     End With
'     lblMeasure.Caption = "    120    "
'     With Text2(3) 'grams  of alcohol
'         .height = Label2(0).height
'         .left = Text2(0).left
'         .toP = Label2(3).toP
'         .BackColor = vbWhite
'         .ForeColor = vbDarkGrey
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .width = Text2(0).width
'         .Visible = True
'         .Locked = False
'         .TabStop = False
'         .TabIndex = 3
'         .MaxLength = 3
'     End With
'     lblMeasure.Caption = "  (gm /  "
'     With Label2(4)
'         .Caption = "(gm /"
'         .height = Label2(0).height
'         .left = Label2(1).left
'         .toP = Label2(3).toP
'         .BackColor = vbLightGrey
'         .ForeColor = vbDarkBlue
'         .Font.Name = "Verdana"
'         .Font.Bold = False
'         .Font.Size = 6
'         .width = lblMeasure.width
'         .Visible = True
'     End With
'     lblMeasure.Caption = "    Day    "
'     With Option4(0)
'          .Caption = "Day"
'          .height = Label2(0).height
'          .toP = 0
'          .Font.Name = "Verdana"
'          .Font.Size = 6
'          .Value = False
'          .Visible = True
'          .TabStop = False
'          .width = lblMeasure.width
'     End With
'     lblMeasure.Caption = " Week   "
'     With Option4(1)
'         .Caption = "Week "
'         .width = lblMeasure.width + 200
'         .height = Label2(0).height
'          .toP = 0
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .TabStop = False
'         .Visible = True
'         .Value = False
'     End With
'     lblMeasure.Caption = "  Month  "
'     With Option4(2)
'         .Caption = "Month "
'         .width = lblMeasure.width + 200
'         .height = Label2(0).height
'          .toP = 0
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .left = Option4(1).left + Option4(1).width
'         .Visible = True
'         .Value = False
'         .TabStop = False
'       End With
'       lblMeasure.Caption = "  None   "
'       With Option4(3)
'         .Caption = "None "
'         .width = lblMeasure.width + 200
'         .height = Label2(0).height
'          .toP = 0
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .left = Option4(2).left + Option4(2).width
'         .Visible = True
'         .Value = False
'         .TabStop = False
'       End With
'     With Picture4
'         .Visible = True 'CONTAINS OPTION 4 BUTTON ARRAY
'         .width = Option4(0).width + Option4(1).width + Option4(2).width + Option4(3).width
'         .left = Label2(4).left + Label2(4).width + 100
'         .toP = Label2(3).toP
'         .height = Label2(3).height
'     End With
'     With Label2(21)
'         .Caption = "Notes:"
'         .FontBold = True
'         .height = Label2(0).height
'         .left = Label2(0).left
'         .toP = Label2(3).toP + Label2(3).height + 100
'         .BackColor = vbLightGrey
'         .ForeColor = vbDarkBlue
'         .Font.Name = "Verdana"
'         .Font.Bold = False
'         .Font.Size = 6
'         .Visible = True
'         .width = Label2(0).width
'         .ZOrder
'     End With
'     With Text2(4) 'comments regarding alcohol
'         .height = Label2(0).height
'         .left = Text2(0).left
'         .width = sspanel2(0).width - Text2(4).left - 150
'         .toP = Label2(21).toP
'         .BackColor = vbWhite
'         .ForeColor = vbDarkGrey
'         .Font.Name = "Verdana"
'         .Font.Size = 6
'         .Visible = True
'         .Locked = False
'         .TabStop = False
'         .TabIndex = 4
'         .MaxLength = 43
'     End With
'     '----------------_-------------------------
'     'change the prompts inside the editing area
'     '------------------------------------------
'     With Label2(5)
'         .Caption = "Condition"
'         .ForeColor = vbAqua
'     End With
'     Label2(6).Caption = "Notes"
'     Label2(7).Caption = "Age onset"
'     Label2(8).Caption = "Year Onset"
'     With Label2(10)
'         .Caption = "Review each"
'
'     End With
'     With Command3(cEdit_Accept)
'         .Enabled = True
'         .toP = Label2(10).toP + shText3Spacer.height
'     End With
'     With Command3(cEdit_cancel)
'          .TabStop = False
'          .toP = Label2(10).toP + shText3Spacer.height
'     End With
'     'Picture1(0).height = Command3(cEdit_cancel).toP + Command3(cEdit_cancel).height + 100
'     'Picture1(1).height = Picture1(0).height
'      With Picture1(1)
'         .height = Command3(0).toP + Command3(0).height + 50
'         .toP = Text2(4).toP + Text2(4).height + 150
'     End With
'
'     With Picture1(0)
'         .height = Picture1(1).height
'         .toP = Picture1(1).toP
'
'     End With
'
'     '----------------------------------
'     'The textboxes within the edit area
'     '----------------------------------
'      With Text3(0)                   'Condition
'         .width = Picture1(1).width - 1500
'         .TabIndex = 5
'         .MaxLength = 50
'     End With
'     With Option2(0)
'          .Caption = "&L"
'          .width = 400
'          .left = Text3(0).left + Text3(0).width + 50
'          .toP = Text3(0).toP + 25
'          .Visible = True
'           .Value = False
'           .TabStop = False
'     End With
'     With Option2(1)
'          .Caption = "&R"
'          .width = 400
'          .left = Option2(0).left + Option2(0).width + 10
'          .toP = Text3(0).toP + 25
'          .Visible = True
'          .Value = False
'          .TabStop = False
'     End With
'     With Option2(2)
'          .Caption = "&Both"
'          .width = 800
'          .left = Option2(1).left + Option2(1).width + 10
'          .toP = Text3(0).toP + 25
'          .Visible = True
'          .Value = False
'          .TabStop = False
'     End With
'     With Text3(1)                   'comment or notes on condition
'          .MaxLength = 50
'          .TabIndex = 6
'      End With
'     With Text3(2)                   'age of onset
'         .width = 950
'         .left = Text3(0).left
'         .MaxLength = 3
'         .TabIndex = 7
'     End With
'     With Text3(3)                   'Year onset
'         .width = 950
'         .left = Text3(0).left
'
'         .Visible = True
'         .toP = Label2(8).toP
'         .MaxLength = 10
'         .TabIndex = 8
'     End With
'
'     lblMeasure.Caption = "    Active    "
'     With check1(1)
'         .left = Text3(0).left
'         .toP = Label2(9).toP
'         .Caption = "   &Active"
'         .BackColor = vbPink
'         .width = lblMeasure.width
'         .height = Text3(0).height
'         .Value = False
'         .Visible = True
'     End With
'     lblMeasure.Caption = "   Operation   "
'     Label2(10).Visible = False 'the review each label
'      With check1(0) 'Yes for operation yes or no
'         .left = check1(1).left + check1(1).width + 50
'         .Caption = "O&peration"
'         .toP = check1(1).toP
'         .Value = False
'         .width = lblMeasure.width
'         .Visible = True
'         .BackColor = vbPink
'         .height = Text3(4).height
'         .TabStop = False
'     End With
'    lblMeasure.Caption = "    Confi&dential    "
'     With check1(2) 'Confidential
'         .left = check1(0).left + check1(0).width + 50
'         .Caption = "  Confi&dential"
'         .toP = check1(1).toP
'         .Value = False
'         .width = lblMeasure.width
'         .Visible = True
'         .BackColor = vbPink
'         .height = Text3(4).height
'         .TabStop = False
'     End With
'     With check1(3)
'         .left = check1(2).left + check1(2).width + 50
'         .toP = Label2(9).toP
'         .Caption = "   &Significant"
'         .BackColor = vbPink
'         .width = Picture1(1).width - check1(2).left - check1(2).width - 100
'         .height = Text3(0).height
'         .Value = False
'         .Visible = True
'     End With
'
'     With Text3(4) 'gets number of months for each review
'         .MaxLength = 3
'         .width = check1(1).width / 3
'         .Visible = False
'         .TabIndex = 9
'         .toP = Label2(10).toP
'     End With
'     lblMeasure.Caption = "    Months      End review    "
'     With Label2(15)
'         .Caption = " Months      End review  "
'         .width = lblMeasure.width '(0).left + check1(0).width - Text3(4).width - 100
'         .left = Text3(4).left + Text3(4).width + 10
'         .toP = Label2(10).toP + 20
'         .BackColor = vbWhite
'         .ForeColor = vbDarkBlue
'          .Visible = False
'     End With
'     With Text3(5)
'              .left = Label2(15).left + Label2(15).width + 100
'              .toP = Text3(4).toP
'              .Visible = False
'              .width = check1(0).width
'              .MaxLength = 10
'              .TabIndex = 10
'         End With
'         Design_DisplayShadows
'         With sspanel2(1)
'             .Caption = "Significant problems"
'             .toP = Picture1(1).toP + Picture1(1).height + 100
'         End With
'          Init1.Parameter = "All Problems"
'          Split Init1.Value, ","
'         With List1(0) 'to contain a list of past problems
'             .toP = sspanel2(1).toP + sspanel2(1).height
'             .height = (Picture3.height - sspanel2(1).toP - sspanel2(1).height - Shape2(8).height) / 2
'             .Font = sArray(0)
'             .Font.Size = sArray(1)
'             .Font.Bold = sArray(2)
'             .Font.Italic = sArray(3)
'             .left = -6
'             .Columns = 2
'             .width = Picture3.width
'             .Visible = True
'              .BackColor = vbWhite
'         End With
'         With sspanel2(2)
'             .Caption = "Active Problems"
'             .toP = List1(0).toP + List1(0).height
'             .left = 12
'             .width = Picture3.width - 24
'             .Visible = True
'         End With
'         Init1.Parameter = "Active Problems"
'         Split Init1.Value, ","
'         With List1(1) 'to contain a list of active problems
'             .toP = sspanel2(2).toP + sspanel2(2).height
'             .left = -6
'             .height = Picture3.height - sspanel2(2).toP - Shape2(8).height - sspanel2(2).height
'             .Font = sArray(0)
'             .Font.Size = sArray(1)
'             .Font.Bold = sArray(2)
'             .Font.Italic = sArray(3)
'             .width = Picture3.width
'             .Visible = True
'             .Columns = 3
'         End With
'         Shape2(8).Visible = True
'         LabelAlerts.Visible = True
'         SSActiveToolBars1.Tools("ID_Print").Enabled = False 'default
'        bExitRoutine = False
'        Resizer1.Rebuild
'         DoEvents
' End Sub
'
' Sub FH_Save()
'     Dim icounter As Integer
'     Dim ix As Integer
'     Dim iExistingRecord As Integer
'     Dim SProgressText As String
'     Dim dNumber As Double
'     On Error GoTo 0
'     '------------------------------------------------------------------
'     'save family history. The details are kept in the gtfamily... array
'     'and multiple new or ammended entries may have been added.
'     '------------------------------------------------------------------
'     Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'     '-------------------------------------------------------------------
'     'For each person in the gtpatient(1).familyMedicalHIstory.Name array
'     'Check if data has been changed
'     '-------------------------------------------------------------------
'     If gtPatient(1).FamilyMedicalHistory_Changed Then
'        For icounter = 0 To UBound(gtPatient(1).FamilyMembers())
'             '------------------------------------------------------
'             'If any data has changed for a family member, save that
'             '------------------------------------------------------
'             If gtPatient(1).FamilyMembers(icounter).DataChanged Then
'                '--------------------------------------------------
'                'If editing an existing record, archive before edit
'                '--------------------------------------------------
'                If gtPatient(1).FamilyMembers(icounter).Record_ID <> 0 Then
'                     Set Q = Db.QueryDefs("MRQ_FH_FamilyMember_Archive")
'                     Q("Enter Record_ID") = gtPatient(1).FamilyMembers(icounter).Record_ID
'                     Q.Execute
'                     '--------------------------------------------------
'                     'Mark this archived record with consult archived at
'                     '--------------------------------------------------
'                     Set Q = Db.QueryDefs("MRQ_FH_FamilyMember_Archive_Duringconsult")
'                     Q("Enter Record_ID") = gtPatient(1).FamilyMembers(icounter).Record_ID
'                     Q("Enter Consult_ID") = gtconsult.Consult_ID
'                     Q("Enter Archive_Reason_ID") = mrArchived_Changed
'                     Q.Execute
'                End If
'                '---------------------------------------
'                'add new record or edit the existing one
'                '---------------------------------------
'                Set Rs = Db.OpenRecordset("data_FH_FMembers", dbOpenTable)
'                With Rs
'                  If gtPatient(1).FamilyMembers(icounter).Record_ID <> 0 Then
'                     iExistingRecord = True
'                     .Index = "PrimaryKey"
'                     .Seek "=", gtPatient(1).FamilyMembers(icounter).Record_ID
'                     .Edit
'                      If gtPatient(1).FamilyMembers(icounter).Consult_First_noted _
'                         <> gtconsult.Consult_ID Then
'                         dNumber = pnFH_Changed
'                      Else
'                         dNumber = pnFH
'                      End If
'                  Else
'                     .AddNew
'                     iExistingRecord = False
'                     dNumber = pnFH
'                     !Consult_First_noted = gtconsult.Consult_ID
'                     gtPatient(1).FamilyMembers(icounter).Consult_First_noted = gtconsult.Consult_ID
'                  End If
'                 !Consult_ID = gtconsult.Consult_ID
'                 !Name = gtPatient(1).FamilyMembers(icounter).Person_Name
'                 !Date_of_Birth = gtPatient(1).FamilyMembers(icounter).Date_of_Birth
'                 !Relationship_ID = gtPatient(1).FamilyMembers(icounter).Relationship_ID
'                 !Age_of_Death = gtPatient(1).FamilyMembers(icounter).Age_Death
'                 .Update
'                 If iExistingRecord = False Then
'                     .MoveLast
'                     gtPatient(1).FamilyMembers(icounter).Record_ID = !Member_iD
'                 End If
'                 .Close
'                End With
'                gtPatient(1).FamilyMembers(icounter).Consult_ID = gtconsult.Consult_ID
'                gtPatient(1).FamilyMembers(icounter).Saved = mrSaveUncommitted
'                '-------------------------------------------------------
'                'If there is no existing record for this family member in
'                'the data_FH_fMembers table, then there will not be a
'                'linking record in the data_fh_links table
'                '--------------------------------------------------------
'                If iExistingRecord = False Then
'                  Set Q = Db.QueryDefs("MRQ_FH_LinkMember_Patient_Add")
'                  Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'                  Q("Enter Member_ID") = gtPatient(1).FamilyMembers(icounter).Record_ID
'                  Q("Enter Consult_ID") = gtconsult.Consult_ID
'                  Q.Execute
'               End If
'             '---------------------------------------------------------
'             'Now for each condition in the condition() array, check if
'             'it is either a new condition or a changed condition
'             '---------------------------------------------------------
'             For ix = 0 To UBound(gtPatient(1).FamilyMembers(icounter).Conditions())
'                  '--------------------------------------------------------
'                  'If the condition_deleted flag = true the item was a new
'                  'edition on screen, but was deleted by user before it was
'                  'saved to the database
'                  '--------------------------------------------------------
'                  If gtPatient(1).FamilyMembers(icounter).Conditions(ix).Deleted = False _
'                     And gtPatient(1).FamilyMembers(icounter).Conditions(ix).Saved = False Then
'                    '-------------------------------------------------
'                    'if the datachanged flag is set for this condition
'                    'save any changes,otherwise skip over it
'                    '-------------------------------------------------
'                   If gtPatient(1).FamilyMembers(icounter).Conditions(ix).DataChanged Then
'                     '-----------------------------------------------
'                     'if the record contains a terminator ; remove it
'                     '-----------------------------------------------
'                     If right(gtPatient(1).FamilyMembers(icounter).Conditions(ix).Description, 1) = ";" Then
'                          gtPatient(1).FamilyMembers(icounter).Conditions(ix).Description = left(gtPatient(1).FamilyMembers(icounter).Conditions(ix).Description, Len(gtPatient(1).FamilyMembers(icounter).Conditions(ix).Description) - 1)
'                     End If
'                     '--------------------------------------------------
'                     'First add any new user terms to the terms database
'                     '--------------------------------------------------
'                     If gtPatient(1).FamilyMembers(icounter).Conditions(ix).Ozcode = 0 Then
'                         Coding_Add_NewTerm gtPatient(1).FamilyMembers(icounter).Conditions(ix).Ozcode, _
'                         gtPatient(1).FamilyMembers(icounter).Conditions(ix).Description
'                     Else
'                         '------------------------------------
'                         'exists, then increment the weighting
'                         '------------------------------------
'                         Set Q = Db.QueryDefs("MRQ_Coding_IncrementWeighting")
'                         Q("Enter Description") = gtPatient(1).FamilyMembers(icounter).Conditions(ix).Description
'                         Q.Execute
'                     End If
'                     '------------------------------------------------------
'                     'If it is a pre-existing record then need to archive it
'                     '------------------------------------------------------
'                       If gtPatient(1).FamilyMembers(icounter).Conditions(ix).Record_ID <> 0 Then
'                         Set Q = Db.QueryDefs("MRQ_FH_Conditions_Archive")
'                         Q("Enter Record_ID") = gtPatient(1).FamilyMembers(icounter).Conditions(ix).Record_ID
'                         Q.Execute
'                         '--------------------------------------------------
'                         'Mark this archived record with consult archived at
'                         '--------------------------------------------------
'                         Set Q = Db.QueryDefs("MRQ_FH_Conditions_Archive_Duringconsult")
'                         Q("Enter Record_ID") = gtPatient(1).FamilyMembers(icounter).Conditions(ix).Record_ID
'                         Q("Enter Consult_ID") = gtconsult.Consult_ID
'                         Q("Enter Archive_Reason_ID") = mrArchived_Changed
'                         Q.Execute
'                     End If
'                     '---------------------------------------
'                     'Now add a new record or edit the old one
'                     '----------------------------------------
'                     Set Rs = Db.OpenRecordset("Data_fh_Conditions", dbOpenTable)
'                     With Rs
'                         If gtPatient(1).FamilyMembers(icounter).Conditions(ix).Record_ID <> 0 Then
'                             iExistingRecord = True
'                             .Index = "PrimaryKey"
'                             .Seek "=", gtPatient(1).FamilyMembers(icounter).Conditions(ix).Record_ID
'                             .Edit
'                             If gtPatient(1).FamilyMembers(icounter).Conditions(ix).Consult_First_noted _
'                                 <> gtconsult.Consult_ID Then
'                                  dNumber = pnFH_Changed
'                             Else
'                                 dNumber = pnFH
'                             End If
'                         Else
'                           .AddNew
'                           iExistingRecord = False
'                           dNumber = pnFH
'                           !Consult_First_noted = gtconsult.Consult_ID
'                           gtPatient(1).FamilyMembers(icounter).Conditions(ix).Consult_First_noted = gtconsult.Consult_ID
'                         End If
'                         !Consult_ID = gtconsult.Consult_ID
'                         !Member_iD = gtPatient(1).FamilyMembers(icounter).Record_ID
'                         !Condition = gtPatient(1).FamilyMembers(icounter).Conditions(ix).Description
'                         !Ozcode = gtPatient(1).FamilyMembers(icounter).Conditions(ix).Ozcode
'                         !Age_of_onset = gtPatient(1).FamilyMembers(icounter).Conditions(ix).age_Onset
'                         !Cause_of_Death = gtPatient(1).FamilyMembers(icounter).Conditions(ix).Cause_of_Death
'                         !Comment = gtPatient(1).FamilyMembers(icounter).Conditions(ix).Comment
'                         .Update
'                         If iExistingRecord = False Then
'                             .MoveLast
'                             gtPatient(1).FamilyMembers(icounter).Conditions(ix).Record_ID = !Condition_ID
'                         End If
'                     End With
'                     '---------------------------------------------------
'                     'If this item was created in current consult
'                     'archive its existing progress note(s)
'                     '---------------------------------------------------
'                     If gtPatient(1).FamilyMembers(icounter).Conditions(ix).Consult_ID = gtconsult.Consult_ID _
'                     And iExistingRecord = True Then
'                         Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'                         Q("Enter Consult_ID") = gtPatient(1).FamilyMembers(icounter).Conditions(ix).Consult_ID
'                         Q("Enter Table_ID") = mrTable_FH
'                         Q("Enter Record_ID") = gtPatient(1).FamilyMembers(icounter).Conditions(ix).Record_ID
'                         Q.Execute
'                     End If
'                     gtPatient(1).FamilyMembers(icounter).Conditions(ix).Saved = mrSaveUncommitted
'                     gtPatient(1).FamilyMembers(icounter).Conditions(ix).Consult_ID = gtconsult.Consult_ID
'                    '------------------------------------------
'                    'Add the progressNote(s) for this condition
'                    '------------------------------------------
'                    SProgressText = gtPatient(1).FamilyMembers(icounter).Relationship & ": " _
'                         & gtPatient(1).FamilyMembers(icounter).Conditions(ix).Description
'                      If gtPatient(1).FamilyMembers(icounter).Conditions(ix).Comment <> "" Then
'                         SProgressText = SProgressText & ", " & gtPatient(1).FamilyMembers(icounter).Conditions(ix).Comment & ", "
'                      End If
'                      If gtPatient(1).FamilyMembers(icounter).Conditions(ix).age_Onset <> -1 Then
'                      SProgressText = SProgressText & " onset at age " _
'                        & gtPatient(1).FamilyMembers(icounter).Conditions(ix).age_Onset
'                      Else
'                           SProgressText = SProgressText & " ?age onset "
'                      End If
'                      If gtPatient(1).FamilyMembers(icounter).Conditions(ix).Cause_of_Death = True Then
'                         SProgressText = SProgressText & " caused death at age " & gtPatient(1).FamilyMembers(icounter).Age_Death
'                      End If
'                               '--------------------------------------------------
'                      'Save progress notes for this new or changed record
'                      '--------------------------------------------------
'                       Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'                         ProgressNotes_Save pnGeneralHistory, dNumber, _
'                               0, "", SProgressText, True, _
'                               mrTable_FH, _
'                               gtPatient(1).FamilyMembers(icounter).Conditions(ix).Record_ID, _
'                               gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(dNumber).Notes_order, _
'                               Rs
'                        Rs.Close
'                  End If 'matches .datachanged
'                  End If 'matches .deleted
'              Next ix
'            End If
'           Next icounter
'     End If
' End Sub
' Sub IMM_Save()
'     Dim icounter As Integer
'     Dim iExistingRecord As Integer
'     Dim dNumber As Double
'     Dim Dsection As Double
'     Dim SProgressText As String
'     Dim sSegmentText As String
'       Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'     '----------------------------------------------------------------
'     'For each vaccine in the vaccinations() array, if the data for it
'     'have changed save this to disk
'     '----------------------------------------------------------------
'     If gtPatient(1).Vaccinations_datachanged Then
'         For icounter = 0 To UBound(gtPatient(1).Vaccinations())
'             '--------------------------------------------
'             'If vaccine_data record has changed/new data
'             '--------------------------------------------
'           If gtPatient(1).Vaccinations(icounter).DataChanged _
'              And gtPatient(1).Vaccinations(icounter).Deleted <> True Then
'              If gtPatient(1).Vaccinations(icounter).Record_ID <> 0 Then
'                     '----------------------------------------------------
'                     'If the changed vaccine has an existing record number
'                     'then archive this record before adding a new one
'                     '----------------------------------------------------
'                     Set Q = Db.QueryDefs("MRQ_IMM_Archive")
'                     Q("Enter Record_ID") = gtPatient(1).Vaccinations(icounter).Record_ID
'                     Q.Execute
'                     '--------------------------------------------------
'                     'Mark this archived record with consult archived at
'                     '--------------------------------------------------
'                     Set Q = Db.QueryDefs("MRQ_IMM_Archive_Duringconsult")
'                     Q("Enter Record_ID") = gtPatient(1).Vaccinations(icounter).Record_ID
'                     Q("Enter Consult_ID") = gtconsult.Consult_ID
'                     Q("Enter Archive_Reason_ID") = mrArchived_Changed
'                     Q.Execute
'              End If
'             '---------------------------------------
'             'add new record or edit the existing one
'             '---------------------------------------
'             Set Rs = Db.OpenRecordset("data_immunisations", dbOpenTable)
'                With Rs
'                  If gtPatient(1).Vaccinations(icounter).Record_ID <> 0 Then
'                     iExistingRecord = True
'                     .Index = "PrimaryKey"
'                     .Seek "=", gtPatient(1).Vaccinations(icounter).Record_ID
'                     .Edit
'                      If gtPatient(1).Vaccinations(icounter).Consult_First_noted _
'                         <> gtconsult.Consult_ID Then
'                         dNumber = pnImmunisation_changed
'                         Dsection = pnGeneralHistory
'                         sSegmentText = ""
'                      Else
'                         dNumber = pnImmunisation
'                         sSegmentText = "IMMUNISATIONS GIVEN"
'                         Dsection = pnClinicalNotes
'                      End If
'                  Else
'                     .AddNew
'                     iExistingRecord = False
'                     dNumber = pnImmunisation
'                     Dsection = pnClinicalNotes
'                      sSegmentText = "IMMUNISATIONS GIVEN"
'                     !Consult_First_noted = gtconsult.Consult_ID
'                     gtPatient(1).Vaccinations(icounter).Consult_First_noted = gtconsult.Consult_ID
'                  End If
'                ' !Patient_ID = gtPatient(1).Patient_ID
'                 !Consult_ID = gtconsult.Consult_ID
'                 !Date_given = gtPatient(1).Vaccinations(icounter).Date_given
'                 !vaccine_Id = gtPatient(1).Vaccinations(icounter).Vaccine.ID
'                 !Schedule_ID = gtPatient(1).Vaccinations(icounter).Schedule.ID
'                 !Serial_No = gtPatient(1).Vaccinations(icounter).Vaccine.Serial_No
'                 !Reaction = gtPatient(1).Vaccinations(icounter).Reaction
'                 .Update
'                 If iExistingRecord = False Then
'                     .MoveLast
'                      gtPatient(1).Vaccinations(icounter).Record_ID = !Record_ID
'                 End If
'                 .Close
'                End With
'                 '---------------------------------------------------
'                 'If this allergy item was created in current consult
'                 'archive its existing progress note(s)
'                 '---------------------------------------------------
'                 If gtPatient(1).Vaccinations(icounter).Consult_ID = gtconsult.Consult_ID _
'                    And iExistingRecord = True Then
'                     Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'                     Q("Enter Consult_ID") = gtPatient(1).Vaccinations(icounter).Consult_ID
'                     Q("Enter Table_ID") = MrTable_Immunisations
'                     Q("Enter Record_ID") = gtPatient(1).Vaccinations(icounter).Record_ID
'                     Q.Execute
'                 End If
'                gtPatient(1).Vaccinations(icounter).Consult_ID = gtconsult.Consult_ID
'                gtPatient(1).Vaccinations(icounter).Saved = mrSaveUncommitted
'                '-------------------------------------
'                'Update the last used vaccine batch_no
'                '-------------------------------------
'                If gtPatient(1).Vaccinations(icounter).Vaccine.Serial_No <> "" Then
'                 Set Q = Db.QueryDefs("MRQ_IMM_VaccineSerialNo_UpdateLastUsed")
'                 Q("Enter Serial_No") = gtPatient(1).Vaccinations(icounter).Vaccine.Serial_No
'                 Q("Enter Vaccine_ID") = gtPatient(1).Vaccinations(icounter).Vaccine.ID
'                 Q.Execute
'               End If
'             '------------------------------------------
'             'add the progress notes for this item
'             '------------------------------------------
'             SProgressText = gtPatient(1).Vaccinations(icounter).Vaccine.Trade_Name
'             If Format(gtPatient(1).Vaccinations(icounter).Date_given, "dd/mm/yyyy") _
'                    <> sToday Then
'                 Dsection = pnGeneralHistory
'                 SProgressText = SProgressText & " recorded as given "
'                 If IsDate(gtPatient(1).Vaccinations(icounter).Date_given) Then
'                    SProgressText = SProgressText & "on "
'                 Else
'                    SProgressText = SProgressText & "in "
'                 End If
'                 SProgressText = SProgressText & gtPatient(1).Vaccinations(icounter).Date_given
'              End If
'             SProgressText = SProgressText & ", "
'                 ' & left(sProgressText, Len(sProgressText) - 2)
'             If gtPatient(1).Vaccinations(icounter).Reaction <> "" Then
'                  SProgressText = SProgressText & " site " & StrConv(gtPatient(1).Vaccinations(icounter).Reaction, vbLowerCase)
'             End If
'             SProgressText = SProgressText & "  [Schedule " & StrConv(gtPatient(1).Vaccinations(icounter).Schedule.Name, vbProperCase) & ":"
'             If gtPatient(1).Vaccinations(icounter).Vaccine.Serial_No <> "" Then
'                 SProgressText = SProgressText & ", serial no = " & gtPatient(1).Vaccinations(icounter).Vaccine.Serial_No
'             End If
'             SProgressText = SProgressText & "]."
'             Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'             ProgressNotes_Save Dsection, dNumber, _
'                  0, sSegmentText, SProgressText, True, _
'                  MrTable_Immunisations, _
'                  gtPatient(1).Vaccinations(icounter).Record_ID, _
'                  gtProgressNotes(0).Segments(Dsection).SubHeadings(dNumber).Notes_order, _
'                  Rs
'             Rs.Close
'          End If
'         Next icounter
'     Db.Close
'     End If
' End Sub
'
' Sub SH_Countries_GetList()
'     iStopAllKeyBoardInput = True
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_SH_Countries_Getlist")
'     Q("Enter Country") = Trim(Text2(0))
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(Text2(0)) Then
'        If LCase(Data1.Recordset!Country) <> Trim(LCase(Text2(0))) Then
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'             Picture2.Visible = False
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
'     iStopAllKeyBoardInput = False
' End Sub
' Sub Referrals_ReasonsFor_Getlist()
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Referrals_ReasonFor")
'     Q("Enter Reason") = Trim(Text3(cReferrals_ReasonFor))
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) Then
'        If LCase(Data1.Recordset!Description) <> Trim(LCase(Text3(cReferrals_ReasonFor))) Then
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'             Picture2.Visible = False
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
' Sub SH_Languages_GetList()
'     iStopAllKeyBoardInput = True
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_SH_Languages_Getlist")
'     Q("Enter Language") = Trim(Text2(1))
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(Text2(1)) Then
'        If Data1.Recordset!Language <> Trim(Text2(1)) Then
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'             Picture2.Visible = False
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
'     iStopAllKeyBoardInput = False
' End Sub
'
'
' Sub IMM_Schedules_GetList()
'     If Trim(Text3(0)) = "" Then
'        Exit Sub
'     End If
'     itdbgrid2_image = cGrID_Image_Immunisation_Schedules
'     '------------------------------------------
'     'Get list of distinct vaccination Schedules
'     '------------------------------------------
'     sSql = "SELECT lu_vaccine_schedules.Schedule_Text, "
'     sSql = sSql & "lu_vaccine_schedules.Age_Due_Months, "
'     sSql = sSql & "lu_vaccine_schedules.Schedule_ID, "
'     sSql = sSql & "lu_vaccine_schedules.Female_Only, "
'     sSql = sSql & "lu_vaccine_schedules.Display_Schedule_only "
'     sSql = sSql & "From lu_vaccine_schedules "
'     sSql = sSql & "WHERE((( lu_vaccine_schedules.Schedule_Text) Like "
'     sSql = sSql & Chr$(34) & Trim(Text3(0)) & "*" & Chr$(34) & ") "
'
'     sSql = sSql & "AND ((lu_vaccine_schedules.Age_due_months) "
'     If gtPatient(1).Age > 24 Then
'         sSql = sSql & " >  299 "   '300 = age 25 - age first 10 year tet booster
'         sSql = sSql & "And (lu_vaccine_schedules.Age_due_months) < "
'         sSql = sSql & intAge_in_Months & ") "
'     ElseIf gtPatient(1).Age > 7 Then
'       sSql = sSql & " > 84  "
'       sSql = sSql & "And (lu_vaccine_schedules.Age_due_months) < "
'       sSql = sSql & intAge_in_Months & ") "
'     Else
'        sSql = sSql & "<  " & intAge_in_Months + 2 & ") "
'     End If
'     If LCase(gtPatient(1).Sex) = "m" Then
'        sSql = sSql & " And ((lu_vaccine_schedules.Female_Only) <> True ) "
'     End If
'     sSql = sSql & "And ((lu_vaccine_schedules.Aboriginal_TSI_only) = False)) "
'     sSql = sSql & "OR (((lu_vaccine_schedules.Schedule_Text) Like "
'     sSql = sSql & Chr$(34) & Trim(Text3(0)) & "*" & Chr$(34) & ") "
'     sSql = sSql & "And ((lu_vaccine_schedules.Age_due_months) Is Null)) "
'    If gtPatient(1).Age > 24 Then
'     sSql = sSql & " ORDER BY lu_vaccine_schedules.Schedule_Text"
'    Else
'     sSql = sSql & " ORDER BY lu_vaccine_schedules.Age_Due_Months, "
'     sSql = sSql & " lu_vaccine_schedules.Schedule_ID"
'    End If
'
'     Data1.DatabaseName = sMEDREC_MDB
'     Data1.RecordSource = sSql
'     Data1.Refresh
'
'     If RecordsExist(Data1) And Len(Text3(0)) Then
'        If Data1.Recordset!Schedule_Text <> Trim(Text3(0)) Then
'
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'             Picture2.Visible = False
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
'
' Sub PastHistory_Delete()
'     Dim sMsg As String
'     Dim lAudit_ID As Long
'     Dim sAuditText As String
'     Dim SProgressText As String
'     Dim iCancel As Integer
'     Dim ix As Integer
'     If iConsultIDSaved = False Then
'         Save_ConsultID
'     End If
'     ix = List1(0).ItemData(List1(0).ListIndex)
'     '-----------------------------------------------------------------
'     'Delete a past history record by marking it as archived. Each past
'     'history item has a unique condition_ID so patient code not needed
'     'If the Record_ID = 0 the list member has not yet been saved
'     'to the database, so mark it as deleted from the array and clear
'     'the editing area
'     '-----------------------------------------------------------------
'     If gtPatient(1).PastHistory(ix).Record_ID = 0 Then
'        gtPatient(1).PastHistory(ix).Deleted = True
'        PastHistory_Display
'        Command3_Click (1) 'the cancel button
'        Exit Sub
'     End If
'     '-----------------------------------------------------------
'     'Mark this entry for reversal if occurred in current consult
'     '-----------------------------------------------------------
'     If gtPatient(1).PastHistory(ix).Consult_First_noted = gtconsult.Consult_ID Then
'            lAudit_ID = mrReversalOfEntry
'     Else
'         '--------------------------------------------------------------
'         'Get the audit trail reason for deleting this past history item
'         '--------------------------------------------------------------
'         SProgressText = "'" & StrConv(gtPatient(1).PastHistory(ix).Description, vbUpperCase) _
'             & "' has been deleted. "
'         sMsg = "Before deleting the past history item - '" _
'         & gtPatient(1).PastHistory(ix).Description & "', please enter your reason for doing this. "
'         AuditTrail_Delete_GetReason sAuditText, lAudit_ID, sMsg, iCancel, "Past History"
'         If iCancel Then
'   Exit Sub
'         Else
'             SProgressText = SProgressText & " Reason: ':" & sAuditText & "'."
'         End If
'     End If
'     '--------------------------------------
'     'Create workspace and begin transaction
'     '--------------------------------------
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'     '--------------------------------------------------------
'     'If the reason for archiving dosn't exist, first add this
'     '--------------------------------------------------------
'     If lAudit_ID = 0 Then
'         AuditTrail_SaveNewReason sAuditText, lAudit_ID
'     End If
'         '--------------------------------------
'         'First archive the record to be deleted
'         '--------------------------------------
'         Set Q = Db.QueryDefs("MRQ_PastHistory_Archive")
'         Q("Enter Record_ID") = gtPatient(1).PastHistory(ix).Record_ID
'         Q.Execute
'         '------------------------------------------------------------
'         'Now insert the consult_ID and Archive_reason_ID to the table
'         '------------------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_PastHistory_Archive_DuringConsult")
'         Q("Enter Record_ID") = gtPatient(1).PastHistory(ix).Record_ID
'         Q("Enter Consult_ID") = gtconsult.Consult_ID
'         Q("Enter Archive_Reason_ID") = lAudit_ID
'         Q.Execute
'         '----------------------------------------------------------------
'         'Mark this record as deleted in the table so no longer accessible
'         '----------------------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_PastHistory_Mark_Deleted")
'         Q("Enter PastHistory_ID") = gtPatient(1).PastHistory(ix).Record_ID
'         Q.Execute
'         '----------------------------------------------
'         'Archive and mark Deleted any attatched reviews
'         '----------------------------------------------
'         If gtPatient(1).PastHistory(ix).Review.Record_ID <> 0 Then
'             '-----------------------
'             'Archive existing review
'             '-----------------------
'             Set Q = Db.QueryDefs("MRQ_Recall_Review_Archive")
'             Q("Enter Recall_Review_ID") = gtPatient(1).PastHistory(ix).Review.Record_ID
'             Q.Execute
'             '---------------------------------------
'             'Insert consult_Id archive at and reason
'             '---------------------------------------
'             Set Q = Db.QueryDefs("MRQ_Recall_Review_Archive_Duringconsult")
'             Q("Enter Consult_ID") = gtconsult.Consult_ID
'             Q("Enter Archive_Reason_ID") = lAudit_ID
'             Q("Enter Recall_Review_ID") = gtPatient(1).PastHistory(ix).Review.Record_ID
'             Q.Execute
'             '-------------------------------------------------------
'             'Mark as deleted in review table so no longer accessible
'             '-------------------------------------------------------
'             Set Q = Db.QueryDefs("MRQ_Recall_Review_Mark_Deleted")
'             Q("Enter Recall_Review_ID") = gtPatient(1).PastHistory(ix).Review.Record_ID
'             Q.Execute
'             SProgressText = SProgressText & "This condition will " _
'             & "no longer be prompted for review."
'         End If
'         '----------------------------------------------------------------
'         'If entry is being reversed during same consultation, delete the
'         'associated progress note text entry and mark 'reversal of entry'
'         '----------------------------------------------------------------
'         If lAudit_ID = mrReversalOfEntry Then
'             Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'             Q("Enter Consult_ID") = gtPatient(1).PastHistory(ix).Consult_ID
'             Q("Enter Table_ID") = mrTable_PH
'             Q("Enter Record_ID") = gtPatient(1).PastHistory(ix).Record_ID
'             Q.Execute
'         Else
'             Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'                 ProgressNotes_Save pnGeneralHistory, pnPH_Deleted, _
'                           0, "", SProgressText, True, _
'                           mrTable_PH, _
'                           gtPatient(1).PastHistory(ix).Record_ID, _
'                           gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(pnPH_Deleted).Notes_order, _
'                           Rs
'             Rs.Close
'         End If
'         Db.Close
'         ws.CommitTrans
'         ws.Close
'
'     PastHistory_GetForPatient
'     PastHistory_Display      'update past history display
'     Get_OverDueReviews       'update reviews
'     Command3_Click (1) 'clear display area of text boxes
'     Exit Sub
'
'    On Error Resume Next
'    Db.Close
'    ws.Rollback
'    ws.Close
'    sMsg = "An error occurred whilst attempting to delete a past history item." & vbLf & vbLf
'    sMsg = sMsg & "If the error persists please contact technical support."
'    lresponse = MsgBox(sMsg, vbOKOnly, "PROBLEM:")
'    On Error GoTo 0
'    Exit Sub
' End Sub
' Sub FH_Delete()
'     Dim ix
'     Dim iCancel As Integer
'     Dim lAudit_ID As Long
'     Dim SProgressText As String
'     Dim sAuditText As String
'     '------------------------------------------------------------------
'     'Delete a family  history record by marking it as archived. Each
'     'family member has a unique condition_ID so patient code not needed
'     'The FH_ID in the database =
'     'the  gtPatient(1).FamilyMembers(n1).Condition_Id(n2)
'     '------------------------------------------------------------------
'     ix = List1(1).ItemData(List1(1).ListIndex)
'     If gtPatient(1).FamilyMembers(List1(0).ListIndex).Conditions(ix).Record_ID = 0 Then
'        '-------------------------------------------------------------------
'        'the record currently showing has not yet been saved to the database
'        'so just mark it as deleted  from the array.
'        '-------------------------------------------------------------------
'        gtPatient(1).FamilyMembers(List1(0).ListIndex).Conditions(ix).Deleted = True
'        sMsg = "This family history item has not yet been saved to the database." & vbLf & vbLf
'        sMsg = "Do you wish to delete this family  history item?" & vbLf & vbLf
'        sMsg = sMsg & gtPatient(1).FamilyMembers(List1(0).ListIndex).Relationship & " - "
'        sMsg = sMsg & gtPatient(1).FamilyMembers(List1(0).ListIndex).Conditions(List1(1).ListIndex).Description
'        sTitle = "Unsaved data item"
'        lresponse = MsgBox(sMsg, vbYesNo, sTitle)
'        If lresponse = vbNo Then
' Exit Sub
'        End If
'        List1(1).RemoveItem List1(1).ListIndex
'        If List1(1).ListCount = 0 Then
'             gtPatient(1).FamilyMembers(List1(0).ListIndex).Deleted = True
'             List1(0).RemoveItem List1(0).ListIndex
'         End If
'        Command3_Click (1)
'        '----------------------------------------------------------------
'        'Now reset the gtpatient(1).FamilyMembers.datachanged flag
'        'if this was the only thing which has recently been added. First
'        'assume no new items of family history added. If encounter 1 item
'        'change this flag back (one is enough, even if more than one have
'        'been changed)
'        '----------------------------------------------------------------
'        gtPatient(1).FamilyMedicalHistory_Changed = False
'        For icounter = 0 To UBound(gtPatient(1).FamilyMembers())
'            For iInteger = 0 To UBound(gtPatient(1).FamilyMembers(icounter).Conditions())
'             If gtPatient(1).FamilyMembers(icounter).Conditions(iInteger).DataChanged = True _
'                   And gtPatient(1).FamilyMembers(icounter).Conditions(iInteger).Deleted = False _
'                   Then
'                  gtPatient(1).FamilyMedicalHistory_Changed = True
'                   Exit For
'             End If
'            Next
'        Next
'     Else
'         If gtPatient(1).FamilyMembers(List1(0).ListIndex).Conditions(List1(1).ListIndex).Consult_ID = _
'            gtconsult.Consult_ID Then
'            lAudit_ID = mrReversalOfEntry
'         Else
'             sMsg = "Before deleting the family  history item:" & vbLf & vbLf _
'              & gtPatient(1).FamilyMembers(List1(0).ListIndex).Relationship & " - " _
'              & gtPatient(1).FamilyMembers(List1(0).ListIndex).Conditions(List1(1).ListIndex).Description & vbLf & vbLf _
'              & " from the patients record, you must enter " _
'              & "a reason for doing this."
'              AuditTrail_Delete_GetReason sAuditText, lAudit_ID, sMsg, iCancel, "Allergies"
'             If iCancel Then
'      Exit Sub
'             End If
'             SProgressText = gtPatient(1).FamilyMembers(List1(0).ListIndex).Relationship & ": " _
'                 & gtPatient(1).FamilyMembers(List1(0).ListIndex).Conditions(List1(1).ListIndex).Description _
'                 & " has been deleted because " & sAuditText & "."
'         End If
'         '-----------------------------------
'         'Save consult_ID if not already done
'         '-----------------------------------
'         If iConsultIDSaved = False Then
'             Save_ConsultID
'         End If
'         Database_Lock
'         Screen.MousePointer = vbHourglass
'         Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'         ws.BeginTrans
'         '-------------------------------------------------------------
'         'First save any family history items not yet saved to database
'         '-------------------------------------------------------------
'         FH_Save
'         '--------------------------------------------------------
'         'If the reason for archiving dosn't exist, first add this
'         '--------------------------------------------------------
'         Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'         If lAudit_ID = 0 Then
'             AuditTrail_SaveNewReason sAuditText, lAudit_ID
'         End If
'         '--------------------------------------
'         'First archive the record to be deleted
'         '--------------------------------------
'         Set Q = Db.QueryDefs("MRQ_FH_Conditions_Archive")
'         Q("Enter Record_ID") = gtPatient(1).FamilyMembers(List1(0).ListIndex).Conditions(ix).Record_ID
'         Q.Execute
'         '--------------------------------------------------
'         'Mark this archived record with consult archived at
'         '--------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_FH_Conditions_Archive_Duringconsult")
'         Q("Enter Record_ID") = gtPatient(1).FamilyMembers(List1(0).ListIndex).Conditions(ix).Record_ID
'         Q("Enter Consult_ID") = gtconsult.Consult_ID
'         Q("Enter Archive_Reason_ID") = lAudit_ID
'         Q.Execute
'         '----------------------------------------
'         'Mark this record as deleted in the table
'         '----------------------------------------
'         Set Q = Db.QueryDefs("MRQ_FH_Conditions_Mark_Deleted")
'         Q("Enter Record_ID") = gtPatient(1).FamilyMembers(List1(0).ListIndex).Conditions(ix).Record_ID
'         Q.Execute
'         '-------------------------------------------------------------------
'         'Mark this record as deleted from the progress notes if same consult
'         '-------------------------------------------------------------------
'         If lAudit_ID = mrReversalOfEntry Then
'             Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'             Q("Enter Consult_ID") = gtPatient(1).FamilyMembers(List1(0).ListIndex).Conditions(ix).Consult_ID
'             Q("Enter Table_ID") = mrTable_FH
'             Q("Enter Record_ID") = gtPatient(1).FamilyMembers(List1(0).ListIndex).Conditions(ix).Record_ID
'             Q.Execute
'         End If
'
'         List1(1).RemoveItem List1(1).ListIndex
'         '-------------------------------------------------------------
'         'Now, if this person has no conditions attatched to their name
'         'the record in Data_Fh_Members is marked as deleted as is the
'         'link in data_FH_Links to this patient and a record kept
'         'in the archive tables to show who did it
'         '-------------------------------------------------------------
'         If List1(1).ListCount = 0 Then
'            '--------------------------------------------------------------
'            'If the member and conditions was not added during this consult
'            'record construct progress note text
'            '--------------------------------------------------------------
'            If gtPatient(1).FamilyMembers(List1(0).ListIndex).Consult_First_noted _
'               <> gtconsult.Consult_ID Then
'                 SProgressText = SProgressText _
'                  & " All entries for the family member " _
'                  & gtPatient(1).FamilyMembers(List1(0).ListIndex).Person_Name _
'                  & "Have now been deleted."
'             End If
'             '----------------------------------------------------------
'             'Archive the family member record and mark at which consult
'             'and mark this family members record as deleted
'             '----------------------------------------------------------
'             Set Q = Db.QueryDefs("MRQ_FH_FamilyMember_Archive")
'             Q("Enter Record_ID") = gtPatient(1).FamilyMembers(List1(0).ListIndex).Record_ID
'             Q.Execute
'             Set Q = Db.QueryDefs("MRQ_FH_FamilyMember_Archive_Duringconsult")
'             Q("Enter Record_ID") = gtPatient(1).FamilyMembers(List1(0).ListIndex).Record_ID
'             Q("Enter Consult_ID") = gtconsult.Consult_ID
'             Q("Enter Archive_Reason_ID") = mrArchived_Deleted
'             Q.Execute
'             Set Q = Db.QueryDefs("MRQ_FH_FamilyMember_Mark_Deleted")
'             Q("Enter Member_ID") = gtPatient(1).FamilyMembers(List1(0).ListIndex).Record_ID
'             Q.Execute
'             '---------------------------------------------------------
'             'Now remove the link to the patient and this family member
'             'by archiving the link and marking deleted
'             '---------------------------------------------------------
'             Set Q = Db.QueryDefs("MRQ_FH_Link_Archive")
'             Q("Enter Member_ID") = gtPatient(1).FamilyMembers(List1(0).ListIndex).Record_ID
'             Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'             Q.Execute
'             Set Q = Db.QueryDefs("MRQ_FH_Link_Archive_Duringconsult")
'             Q("Enter Record_ID") = gtPatient(1).FamilyMembers(List1(0).ListIndex).Record_ID
'             Q("Enter Consult_ID") = gtconsult.Consult_ID
'             Q("Enter Archive_Reason_ID") = mrArchived_Deleted
'             Q.Execute
'             Set Q = Db.QueryDefs("MRQ_FH_Link_Mark_Deleted")
'             Q("Enter member_ID") = gtPatient(1).FamilyMembers(List1(0).ListIndex).Record_ID
'             Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'             Q.Execute
'         End If
'         '--------------------------------------------------
'         'Save progress notes for this new or changed record
'         '--------------------------------------------------
'          If lAudit_ID <> mrReversalOfEntry Then
'             Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'              ProgressNotes_Save pnGeneralHistory, pnFH_Deleted, _
'                  0, "", SProgressText, True, _
'                  mrTable_FH, _
'                  gtPatient(1).FamilyMembers(List1(0).ListIndex).Conditions(ix).Record_ID, _
'                  gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(pnFH_Deleted).Notes_order, _
'                  Rs
'              Rs.Close
'          End If
'         ws.CommitTrans
'         Db.Close
'         ws.Close
'         Database_Unlock
'         Screen.MousePointer = vbArrow
'         FH_Get_FamilyMembers
'         FH_DisplayMembersList
'         FH_DisplayDiseasesList
'         Command3_Click (1) 'clear display area of text boxes
'     End If
' End Sub
' Sub IMM_Display()
'     On Error GoTo IMM_Display_Error
'     '---------------------------------------------------------------
'     'Takes the data from the gtpatient(1).vaccination() and shows it
'     '---------------------------------------------------------------
'     Dim icounter As Integer
'     Dim slastScheduleName As String
'     '------------------------------------------------------------
'     'First display any schedules the patient has had vaccines for
'     '------------------------------------------------------------
'     List1(0).Clear
'     List1(1).Clear
'     For icounter = 0 To UBound(gtPatient(1).Vaccinations())
'         If gtPatient(1).Vaccinations(icounter).Schedule.Name <> slastScheduleName _
'            And gtPatient(1).Vaccinations(icounter).Deleted <> True Then
'            List1(0).AddItem gtPatient(1).Vaccinations(icounter).Schedule.Name
'            List1(0).ItemData(List1(0).NewIndex) = gtPatient(1).Vaccinations(icounter).Schedule.ID
'            slastScheduleName = gtPatient(1).Vaccinations(icounter).Schedule.Name
'         End If
'     Next
'     '------------------------------------------------------------------------
'     'Now display any vaccinations Attatched to the first schedule on the list
'     '------------------------------------------------------------------------
'     bExitRoutine = False
'     List1(0).ListIndex = 0
'     Exit Sub
' IMM_Display_Error:
'     Exit Sub
' End Sub
' Sub PastHistory_Accept()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  iName_exists                                                                          *
' '******************************************************************************************
'
'
'     Dim ix As Integer
'     Dim icounter
'     '----------------------------------------
'     'First ensure the minimum data is present
'     '----------------------------------------
'     If Trim(Text3(0)) = "" Then
'        Text3(0).SetFocus
'        Exit Sub
'     ElseIf Trim(Text3(2)) = "" Then
'            Text3(2).SetFocus
'  Exit Sub
'     ElseIf Trim(Text3(3)) = "" Then
'  Exit Sub
'     End If
'    ' If InStr(Text3(2), "M") = 0 Then
'    '     If Val(Text3(2)) < 0 Or Val(Text3(2)) > gtPatient(1).Age Or Text3(3) = "" Then
'    '         sMsg = "Please record either the patients age at time of diagnosis "
'    '         sMsg = sMsg & "or the year of diagnosis" & vbLf & vbLf
'    '         sMsg = sMsg & "If is also a good idea to record if the problem is currently active."
'    '         lResponse = MsgBox(sMsg, vbOKOnly, "PROBLEM:MISSING DATA")
'    '         Text3(3).SetFocus
'    '         Exit Sub
'    '  End If
'     'End If
'     '--------------------------------------------------------------------
'     'Takes the data from the editing area and puts into into the array
'     'There are 3 possibilities:
'     '--------------------------------------------------------------------
'     '1:Records exist and we are editing an existing one - hence at this
'     'point the value of iArrayposition has been set by the user clicking
'     'on a member of list1() and gettings its value from itemdata property
'     '--------------------------------------------------------------------
'     '2:no members of past history array exist, therefore start array at 0
'     '--------------------------------------------------------------------
'     On Error Resume Next
'     ix = -1
'     ix = UBound(gtPatient(1).PastHistory())
'     If ix = -1 Then
'        iArrayPosition = 0
'        ReDim gtPatient(1).PastHistory(iArrayPosition)
'        '------------------------------------------------------------
'        '3:Members exist, but this is not pre-existing, hence add one
'        '  preserving the existing array members
'        '------------------------------------------------------------
'     ElseIf ipastHistory_PreExistingCondition = False Then
'            iArrayPosition = UBound(gtPatient(1).PastHistory()) + 1
'            ReDim Preserve gtPatient(1).PastHistory(iArrayPosition)
'     End If
'     gtPatient(1).PastHistory(iArrayPosition).Deleted = False
'     gtPatient(1).PastHistory(iArrayPosition).Description = Trim(Text3(0))
'     gtPatient(1).PastHistory(iArrayPosition).Notes = Trim(Text3(1))
'     gtPatient(1).PastHistory(iArrayPosition).Ozcode = lozcode
'     If InStr(UCase(Trim(Text3(2))), "M") Then 'age in months, set units
'        gtPatient(1).PastHistory(iArrayPosition).Age_onset_Units = mrUnits_Months
'         gtPatient(1).PastHistory(iArrayPosition).age_Onset = Val(left$(Text3(2), InStr(UCase(Text3(2)), "M") - 1))
'     Else
'         gtPatient(1).PastHistory(iArrayPosition).age_Onset = Val(Trim(Text3(2)))
'         gtPatient(1).PastHistory(iArrayPosition).Age_onset_Units = mrUnits_Years
'
'     End If
'     gtPatient(1).PastHistory(iArrayPosition).Date = Trim(Text3(3))
'     If check1(0).Value = 1 Then
'          gtPatient(1).PastHistory(iArrayPosition).Operation = True
'     Else
'          gtPatient(1).PastHistory(iArrayPosition).Operation = False
'     End If
'     If check1(2).Value = 1 Then
'         gtPatient(1).PastHistory(iArrayPosition).Confidential = True
'     Else
'         gtPatient(1).PastHistory(iArrayPosition).Confidential = False
'     End If
'     If check1(1).Value = 1 Then
'        gtPatient(1).PastHistory(iArrayPosition).active = True
'     Else
'        gtPatient(1).PastHistory(iArrayPosition).active = False
'     End If
'     If check1(3).Value = 1 Then
'        gtPatient(1).PastHistory(iArrayPosition).significant = True
'     Else
'        gtPatient(1).PastHistory(iArrayPosition).significant = False
'     End If
'
'     For icounter = 0 To 2
'         If Option2(icounter).Value = True Then
'            gtPatient(1).PastHistory(iArrayPosition).Side_of_Body = icounter + 1
'            Exit For
'         End If
'     Next
'     If Trim(Text3(4)) <> "" Then 'the recall period
'        gtPatient(1).PastHistory(iArrayPosition).Review.Interval = Val(Text3(4))
'        gtPatient(1).PastHistory(iArrayPosition).Review.Description = Trim(Text3(0))
'        If LCase(Trim(Text3(4))) <> "Indefinite" Then
'           gtPatient(1).PastHistory(iArrayPosition).Review.End = Val(Text3(5))
'        End If
'        gtPatient(1).PastHistory(iArrayPosition).Review.Length_ID = mrReviewLength_Standard
'        gtPatient(1).PastHistory(iArrayPosition).Review.Method_ID = mrReviewMethod_Routine
'        gtPatient(1).PastHistory(iArrayPosition).Review.Type_ID = mrReviewtype_Review
'     Else
'        'needed if an active review has been changed back to inactive
'        gtPatient(1).PastHistory(iArrayPosition).Review.Description = ""
'        gtPatient(1).PastHistory(iArrayPosition).Review.End = 0
'        gtPatient(1).PastHistory(iArrayPosition).Review.Interval = 0
'        gtPatient(1).PastHistory(iArrayPosition).Review.Length_ID = 0
'        gtPatient(1).PastHistory(iArrayPosition).Review.Method_ID = 0
'     End If
'     gtPatient(1).PastHistory(iArrayPosition).DataChanged = True
'     gtPatient(1).DataChanged = True
'     gtPatient(1).PastHIstory_Changed = True
'     sMsg = Trim(Text3(3)) & " " & Trim(Text3(0))
'     If gtPatient(1).PastHistory(iArrayPosition).Age_onset_Units = 6 Then
'        sMsg = sMsg & " _  " & Trim(Text3(2)) & "M"
'     Else
'        sMsg = sMsg & " - " & Trim(Text3(2)) & "y"
'     End If
'     '-----------------------------------------------------------
'     'If re-editing a pre-existing condition, change that in list
'     '-----------------------------------------------------------
'     If ipastHistory_PreExistingCondition Then
'        PastHistory_Display
'        '------------------------------------------------------------------
'        'If this condition has been made active, change that in active list
'        '------------------------------------------------------------------
'     Else
'        '-------------------------------
'        'a new condition add to the list
'        '-------------------------------
'         List1(0).AddItem sMsg 'the past history list
'         List1(0).ItemData(List1(0).NewIndex) = iArrayPosition
'         If gtPatient(1).PastHistory(iArrayPosition).active = True Then
'            List1(1).AddItem " " & gtPatient(1).PastHistory(iArrayPosition).Description
'            List1(1).ItemData(List1(1).NewIndex) = iArrayPosition
'         End If
'     End If
'    'Command2(0).Enabled = True 'save button
'     Command3_Click (1)
'  End Sub
' Sub PastHistory_Display()
'     On Error GoTo PastHistory_DisplayError
'     '------------------------------------------------------------------
'     'Displays any past history. If the gtpatient(1).pasthistory() array
'     'is empty it the error condition triggers an exit sub
'     '------------------------------------------------------------------
'     Dim icounter As Integer
'     Dim sMsg As String
'     Dim iArrayMembers As Integer
'     List1(0).Clear
'     List1(1).Clear
'     iArrayMembers = UBound(gtPatient(1).PastHistory())
'
'         For icounter = 0 To iArrayMembers
'         If gtPatient(1).PastHistory(icounter).Deleted = False Then
'             Select Case iCurrentSection
'             Case cSection_Overview
'
'                 '--------------------------------------------------------
'                 'For overview it is easier to read year onset and disease
'                 '--------------------------------------------------------
'                  If gtPatient(1).PastHistory(icounter).age_Onset = 0 Then
'                     sMsg = "Birth "
'                  Else
'                     sMsg = Format(gtPatient(1).PastHistory(icounter).age_Onset, "0#")
'
'                     If gtPatient(1).PastHistory(icounter).Age_onset_Units = mrUnits_Months Then
'                        sMsg = sMsg & "mth  "
'                     Else
'                        sMsg = sMsg & "y  "
'                     End If
'                   End If
'                   sMsg = sMsg & gtPatient(1).PastHistory(icounter).Description
'
'             Case cSection_PastHistory
'                 '---------------------------------------------------------
'                 'when entering data patients often relate in year of onset
'                 '---------------------------------------------------------
'                 '------------------------------------------------
'                 'If date is dd/mm/yyyy then extract just the year
'                 '------------------------------------------------
'                 If Len(gtPatient(1).PastHistory(icounter).Date) > 4 Then
'                    sMsg = Year(gtPatient(1).PastHistory(icounter).Date) & " "
'                 Else
'                    sMsg = gtPatient(1).PastHistory(icounter).Date
'                 End If
'
'                 sMsg = sMsg & " " & gtPatient(1).PastHistory(icounter).Description
'                 sMsg = sMsg & " - " & gtPatient(1).PastHistory(icounter).age_Onset
'                 If gtPatient(1).PastHistory(icounter).Age_onset_Units = 6 Then
'                    sMsg = sMsg & "M"
'                 Else
'                    sMsg = sMsg & "y"
'                 End If
'             End Select
'             List1(0).AddItem sMsg 'all problems to past list
'             List1(0).ItemData(List1(0).NewIndex) = icounter
'             If gtPatient(1).PastHistory(icounter).active = True Then
'                 List1(1).AddItem " " & gtPatient(1).PastHistory(icounter).Description
'                 List1(1).BackColor = vbLightYellow
'                 List1(1).ItemData(List1(1).NewIndex) = icounter
'             End If
'            ' If List1(0).ListCount < 14  Then
'            '    List1(0).Columns = 3
'            ' Else
'            '    List1(0).Columns = 2
'            ' End If
'            ' If List1(1).ListCount < 15 Then
'            '    List1(1).Columns = 2
'            ' Else
'            '    List1(1).Columns = 3
'            ' End If
'          End If
'         Next
'        If List1(1).ListCount < 13 Then
'             List1(1).Columns = 2
'        Else
'            List1(1).Columns = 3
'        End If
'        If List1(0).ListCount < 10 Then
'         List1(0).Columns = 2
'       Else
'            List1(0).Columns = 3
'        End If
'     ipastHistory_PreExistingCondition = False
'     Exit Sub
' PastHistory_DisplayError:
'      Exit Sub
' End Sub
' Sub Problems_Active_DisplayList()
'     On Error GoTo Display_ActiveListError
'     List1(1).Clear
'     For icounter = 0 To UBound(gtPatient(1).PastHistory())
'             'sMsg = gtPatient(1).PastHistory(icounter).Date & " " &
'              '  & " - age - " &
'            '  sMsg = Format(gtPatient(1).PastHistory(icounter).Age_Onset, "##") & "y   " & _
'            '          gtPatient(1).PastHistory(icounter).description
'            ' List1(0).AddItem sMsg 'all problems to past list
'             If gtPatient(1).PastHistory(icounter).active = True Then
'                 List1(1).AddItem " " & gtPatient(1).PastHistory(icounter).Description
'                 List1(1).ItemData(List1(1).NewIndex) = icounter
'                 List1(1).BackColor = vbLightYellow
'             End If
'         Next
'     Exit Sub
' Display_ActiveListError:
' Exit Sub
' End Sub
'
' Sub RecreationalDrugs_GetForPatient()
'     Dim iHabit As Integer
'     Dim icounter As Integer
'     '-------------------------------------------
'     'Get the recreational drugs for this patient
'     '-------------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_RecreationalDrugs_get")
'     Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'     Set Rs = Q.OpenRecordset()
'     '-------------------------------------------------------------
'     'dimension for  alcohol =0 and smoking = 1 at a minimum
'     'if there are more than this the array is later re-dimensioned
'     '-------------------------------------------------------------
'     ReDim gtPatient(1).Recreationaldrugs(0 To 1)
'     icounter = 1
'     With Rs
'         If .EOF + .BOF <> -2 Then
'            Do Until .EOF
'                 Select Case !Drug_ID
'                 Case 1 'smoking
'                     iHabit = 0
'                 Case 2 'alcohol
'                     iHabit = 1
'                 End Select
'                 gtPatient(1).Recreationaldrugs(iHabit).DataChanged = False
'                 gtPatient(1).Recreationaldrugs(iHabit).Consult_First_noted = !Consult_First_noted
'                 gtPatient(1).Recreationaldrugs(iHabit).Consult_ID = !Consult_ID
'                 gtPatient(1).Recreationaldrugs(iHabit).Drug_ID = !Drug_ID
'                 gtPatient(1).Recreationaldrugs(iHabit).Description = !Description
'                 gtPatient(1).Recreationaldrugs(iHabit).Record_ID = !Habit_ID
'                 gtPatient(1).Recreationaldrugs(iHabit).qualifier = "" & !qualifier
'                 .MoveNext
'             Loop
'          End If
'     End With
'     Rs.Close
'     Db.Close
'
' End Sub
'
'
'
' Sub RecreationalDrugs_Save()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  ix                            iCharpos                                                *
' '******************************************************************************************
'
'     Dim icounter As Integer
'     Dim iExistingRecord As Integer
'     Dim dNumber As Double
'     Dim SProgressText As String
'     '----------------------------------------
'     'Only update the file if data has changed
'     '----------------------------------------
'      If gtPatient(1).RecreationalDrugs_Changed = True Then
'        Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'        '---------------------------
'        'For each habit item:
'        '---------------------------
'        For icounter = 0 To UBound(gtPatient(1).Recreationaldrugs())
'          '--------------------------------------------
'          'For each item if the data has changed in it:
'          '--------------------------------------------
'          If gtPatient(1).Recreationaldrugs(icounter).DataChanged = True Then
'             '----------------------------------------------------------
'             'if editing an existing record, archive this record before
'             'creating a new one - old records have a Habit_ID
'             'allocated by MSAccess when the original record was created
'             'this leaves an audit trail
'             '----------------------------------------------------------
'             If gtPatient(1).Recreationaldrugs(icounter).Record_ID <> 0 Then
'                 Set Q = Db.QueryDefs("MRQ_RecreationalDrugs_Archive")
'                 Q("Enter Habit_ID") = gtPatient(1).Recreationaldrugs(icounter).Record_ID
'                 Q.Execute
'                 '--------------------------------------------------
'                 'Mark this archived record with consult archived at
'                 '--------------------------------------------------
'                 Set Q = Db.QueryDefs("MRQ_RecreationalDrugs_Archive_Duringconsult")
'                 Q("Enter Habit_ID") = gtPatient(1).Recreationaldrugs(icounter).Record_ID
'                 Q("Enter Consult_ID") = gtconsult.Consult_ID
'                 Q("Enter Archive_Reason_ID") = mrArchived_Changed
'                 Q.Execute
'             End If
'
'             '---------------------------------------
'             'Now add a new record or edit the old one
'             '----------------------------------------
'             Set Rs = Db.OpenRecordset("Data_RecreationalDrugs", dbOpenTable)
'             With Rs
'                 If gtPatient(1).Recreationaldrugs(icounter).Record_ID <> 0 Then
'                     iExistingRecord = True
'                     .Index = "PrimaryKey"
'                     .Seek "=", gtPatient(1).Recreationaldrugs(icounter).Record_ID
'                     .Edit
'                     If gtPatient(1).Recreationaldrugs(icounter).Consult_First_noted _
'                         <> gtconsult.Consult_ID Then
'                         If gtPatient(1).Recreationaldrugs(icounter).Drug_ID = 1 Then 'smoking
'                            dNumber = pnHabits_Smoking_Changed
'                         Else
'                            dNumber = pnHabits_Alcohol_Changed
'                         End If
'                     Else
'                         If gtPatient(1).Recreationaldrugs(icounter).Drug_ID = 1 Then 'smoking
'                            dNumber = pnHabits_Smoking
'                         Else
'                            dNumber = pnHabits_Alcohol
'                         End If
'                     End If
'                 Else
'                   .AddNew
'                   iExistingRecord = False
'                   !Consult_First_noted = gtconsult.Consult_ID
'                   gtPatient(1).Recreationaldrugs(icounter).Consult_First_noted = gtconsult.Consult_ID
'                   If gtPatient(1).Recreationaldrugs(icounter).Drug_ID = 1 Then 'smoking
'                       dNumber = pnHabits_Smoking
'                   Else
'                       dNumber = pnHabits_Alcohol
'                   End If
'                 End If
'                !Consult_ID = gtconsult.Consult_ID
'                ' If icounter = 0 Then 'smoking history
'                     !Drug_ID = gtPatient(1).Recreationaldrugs(icounter).Drug_ID
'                ' ElseIf icounter = 1 Then 'alcohol
'                '     !Drug_ID = 2
'                ' End If
'                !qualifier = gtPatient(1).Recreationaldrugs(icounter).qualifier
'
'               .Update
'                If iExistingRecord = False Then
'                     .MoveLast
'                     gtPatient(1).Recreationaldrugs(icounter).Record_ID = !Habit_ID
'                End If
'                gtPatient(1).Recreationaldrugs(icounter).DataChanged = False
'                .Close
'             '--------------------------------------------------------
'             'If this past history item was created in current consult
'             'archive its existing progress note(s)
'             '--------------------------------------------------------
'             If gtPatient(1).Recreationaldrugs(icounter).Consult_ID = gtconsult.Consult_ID _
'             And iExistingRecord = True Then
'                 Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'                 Q("Enter Consult_ID") = gtPatient(1).Recreationaldrugs(icounter).Consult_ID
'                 Q("Enter Table_ID") = mrTable_RecreationalDrugs
'                 Q("Enter Record_ID") = gtPatient(1).Recreationaldrugs(icounter).Record_ID
'                 Q.Execute
'             End If
'             gtPatient(1).Recreationaldrugs(icounter).Consult_ID = gtconsult.Consult_ID
'
'             '------------------------------------------
'             'add the progress notes for this item
'             '------------------------------------------
'            If gtPatient(1).Recreationaldrugs(icounter).Drug_ID = 1 Then
'               RecreationalDrugs_Smoking_GenerateText
'            Else
'               RecreationalDrugs_Alcohol_Generate_Text
'            End If
'             SProgressText = sMsg
'            Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'                ProgressNotes_Save pnGeneralHistory, dNumber, _
'                       0, "", SProgressText, True, _
'                       mrTable_RecreationalDrugs, _
'                      gtPatient(1).Recreationaldrugs(icounter).Record_ID, _
'                       gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(dNumber).Notes_order, _
'                       Rs
'            Rs.Close
'            End With
'          End If
'        Next
'     End If
'     gtPatient(1).RecreationalDrugs_Changed = False
' End Sub
' Sub RecreationalDrugs_Display()
'     bExitRoutine = True
'     '-------------------------------------------------------
'     'uses the data in gtpatient(n).Recreationaldrugs() array
'     '-------------------------------------------------------
'     If gtPatient(1).Recreationaldrugs(0).qualifier <> "" Then
'        '-----------------------
'        '1.show the smoking data
'        '-----------------------
'
'        Select Case iCurrentSection
'        Case cSection_PastHistory
'               sMsg = gtPatient(1).Recreationaldrugs(0).qualifier
'               Split_SemiColonDelimitedData sMsg
'               For icounter = 0 To 2
'                   Text2(icounter) = vArray(icounter)
'               Next
'
'               Select Case vArray(3)
'               Case 0
'                   Option3(0).Value = 1
'                   Option3(0).TabStop = False 'dont ask me why but
'                   'setting the value on changes tabstop value
'               Case 1
'                    Option3(1).Value = 1
'                     Option3(0).TabStop = False
'               Case 2
'                    Option3(2).Value = 1
'                     Option3(0).TabStop = False
'               Case 3
'                     For icounter = 0 To 2
'                        Option3(icounter).Value = False
'                     Next
'               End Select
'
'
'       Case cSection_Overview
'           RecreationalDrugs_Smoking_GenerateText
'           lblHabits = sMsg
'       End Select
'     End If
'      '----------------------------------
'      'If text present split alcohol data
'      '----------------------------------
'      If gtPatient(1).Recreationaldrugs(1).qualifier <> "" Then
'
'        Select Case iCurrentSection
'        Case cSection_PastHistory
'           sMsg = gtPatient(1).Recreationaldrugs(1).qualifier
'            Split_SemiColonDelimitedData sMsg
'             bExitRoutine = True
'             Text2(3) = vArray(0)
'             Text2(4) = vArray(1)
'             Select Case vArray(2)
'             Case "d"
'                   Option4(0).Value = True
'             Case "w"
'                    Option4(1).Value = True
'             Case "m"
'                    Option4(2).Value = True
'             Case "n"
'                    Option4(3).Value = True
'             End Select
'             bExitRoutine = False
'        Case cSection_Overview
'            ' If sMsg <> "" Then
'            '    sMsg = sMsg & vbLf
'            ' End If
'             RecreationalDrugs_Alcohol_Generate_Text
'             sMsg = vbCrLf & sMsg
'             lblHabits = lblHabits & sMsg
'         End Select
'      End If
'      '--------------------
'      'Display other habits
'      '--------------------
'      Select Case iCurrentSection
'      Case cSection_PastHistory
'           '  Text2(5) = ""
'           '  For icounter = 2 To UBound(gtPatient(1).Recreationaldrugs())
'           '     If gtPatient(1).Recreationaldrugs(icounter).Description <> "" Then
'           '        Text2(5) = Text2(5) & gtPatient(1).Recreationaldrugs(icounter).Description & ";"
'           '     End If
'           '  Next
'      Case cSection_Overview
'          ' RecreationalDrugs_Generate_Text sMsg
'          ' lblHabits = lblHabits & sMsg
'      End Select
'      bExitRoutine = False
'
' End Sub
' Sub Split_SemiColonDelimitedData(sMsg As String)
'     Dim icharpos As Integer 'to hold a character position result
'     Dim icounter As Integer
'     icounter = 0
'     Do Until sMsg = ""
'          icharpos = InStr(1, sMsg, ";")
'          vArray(icounter) = left(sMsg, icharpos - 1)
'          sMsg = right(sMsg, Len(sMsg) - icharpos)
'          icounter = icounter + 1
'     Loop
' End Sub
'
'
'
'
'
'
' Sub Referrals_Letter_Preview(sPreviewText As String)
'         iCentralDisplay = cCentralDisplay_ExistingLetter
'         Label4.Caption = "REFERRAL LETTERS"
'         lblMeasure.WordWrap = False
'         Command2(3).Visible = False
'         bExitRoutine = True
'         Make_RTB1_BIG 1
'         Init1.FileName = sMain_Dir & "\Medrec.ini"
'         Init1.Application = "Referrals Fonts " & gtDoctor.Doctor_ID
'        Init1.Parameter = "Referral Letter Maximized"
'        Split Init1.Value, ","
'         With RichTextBox1(1)
'             .Font = sArray(0)
'             .Font.Size = sArray(1)
'             .Font.Bold = sArray(2)
'             .Font.Italic = sArray(3)
'             .Locked = False
'         End With
'         RichTextBox1(1).Text = sPreviewText 'sMsg
'          iEditing = False
'          Label1.Visible = False
'       With Picture5
'         .left = Picture3.left
'         .toP = Picture3.toP
'         .Visible = True 'the container
'         .ZOrder
'         .height = Picture3.height
'         .width = Picture3.width
'    End With
'    bExitRoutine = False
' End Sub
' Sub Design_Panel_Immunisations()
'         Design_Panel_Basic
'         Init1.FileName = sMain_Dir & "\Medrec.ini"
'         Init1.Application = "Immunisations Fonts " & gtDoctor.Doctor_ID
'
'         bExitRoutine = True
'         '------------------------
'         'remove things not needed
'         '------------------------
'         Text3(5).Visible = False
'         Picture1(3).Visible = False
'         Picture1(4).Visible = False
'         '------------
'         'The headings
'         '------------
'         With lblMasterHeading
'              .Caption = "IMMUNISATION"
'              .Visible = True
'         End With
'        '-----------------------
'        'Put up explanatory text
'        '-----------------------
'        With lblHabits
'          .Caption = ""
'          .width = sspanel2(2).width - 200
'          .height = 500
'          .left = 100
'          .toP = sspanel2(0).toP + sspanel2(0).height + 100
'          .Font.Name = "Verdana"
'          .Font.Size = 6
'          .Font.Bold = False
'          .BackColor = vbLightGrey
'          .ForeColor = vbDarkBlue
'          .Visible = True
'          .ZOrder
'       End With
'          '------------------------------------------
'         'change the prompts inside the editing area
'         '------------------------------------------
'         With Label2(5)
'             .Caption = "Target Disease"
'             .ForeColor = vbAqua
'         End With
'         With Label2(6)
'             .Caption = "Vaccine"
'         End With
'         With Label2(7)
'             .Caption = "Date given"
'         End With
'         With Label2(8)
'             .Caption = "Serial #"
'         End With
'         With Label2(9)
'             .Caption = "Site injected"
'             .Visible = True
'         End With
'
'         With Command3(cEdit_Accept)
'             .Enabled = True
'             .TabStop = True
'             .TabIndex = 5
'         End With
'         lblMeasure.Caption = " &Next Vaccine "
'         '--------------------------------------
'         'the background behind these edit areas
'         '--------------------------------------
'        Design_DisplayShadows
'         With Text3(0)                   'Condition
'              .MaxLength = 0
'         End With
'
'
'         With Text3(1)                   'comment or notes on condition
'                  .MaxLength = 50
'          End With
'         With Text3(2)                   'age of onset
'              .MaxLength = 10
'         End With
'           With Text3(3)                   'Year onset
'             .MaxLength = 20
'          End With
'           With Text3(4)                   'Year onset
'             .MaxLength = 25
'         End With
'         lblMeasure.Caption = "Left                 "
'     '
'
'         With sspanel2(1)
'             .Caption = "Disease/Schedule                             Vaccines              "
'           End With
'        Init1.Parameter = "Immunisations"
'        Split Init1.Value, ","
'        With List1(0) 'will display Schedule names eg 2 month (complete)
'                  .height = (Picture3.height - sspanel2(1).toP - sspanel2(1).height - Shape2(8).height) / 2
'                 .left = -6
'                 .width = (Picture3.width / 5) * 2
'                 .toP = sspanel2(1).toP + sspanel2(1).height
'                 .Font = sArray(0)
'                 .Font.Size = sArray(1)
'                 .Font.Bold = sArray(2)
'                 .Font.Italic = sArray(3)
'                 .Clear
'                 .Visible = True
'                 .Columns = 1
'                 .BackColor = vbWhite
'                 .TabStop = False
'         End With
'
'         With List1(1) 'will display vaccines in the schedule
'                 .height = List1(0).height
'                 .left = List1(0).width - 6
'                 .width = Picture3.width - List1(0).width
'                 .toP = sspanel2(1).toP + sspanel2(1).height
'                 .Columns = 1
'                 .Clear
'                 .Visible = True
'                 .Font = sArray(0)
'                 .Font.Size = sArray(1)
'                 .Font.Bold = sArray(2)
'                 .Font.Italic = sArray(3)
'                 .TabStop = False
'         End With
'         With sspanel2(3)
'             .Caption = "Missing Immunisations"
'             .toP = List1(0).toP + List1(0).height
'             .left = 0
'             .width = Picture3.width - 24
'             .Visible = True
'         End With
'        Init1.Parameter = "Missing Immunisations"
'        Split Init1.Value, ","
'        With RichTextBox1(0)
'             .toP = sspanel2(3).toP + sspanel2(3).height + Picture3.toP
'             .left = Picture3.left + 20
'             .height = Shape2(8).toP - (sspanel2(3).toP + sspanel2(3).height)
'             .Text = ""
'             .Font = sArray(0)
'             .Font.Size = sArray(1)
'             .Font.Bold = sArray(2)
'             .Font.Italic = sArray(3)
'             .width = Picture3.width - 40 ' - shape_left_outline.width - shape_right_outline.width
'             .Visible = True
'             .TabStop = False
'        End With
'        Shape2(8).Visible = True
'        LabelAlerts.Visible = True
'        bExitRoutine = False
'        DoEvents
'        SSActiveToolBars1.Tools("ID_Print").Enabled = False 'default
'        Resizer1.Rebuild
' End Sub
' Sub Vaccinations_GetLIst()
'
'     sSql = "SELECT lu_Vaccines.Trade_Name, lu_Vaccines.Description, "
'     sSql = sSql & "lu_Vaccines.vaccine_Id , lu_Vaccines.Abbreviation, "
'     sSql = sSql & "lu_vaccines.Last_Batch_no, lu_vaccines.Formulation, "
'     sSql = sSql & "lu_Vaccines.live_vaccine, lu_vaccines_in_schedule.Schedule_ID "
'     sSql = sSql & "FROM lu_Vaccines INNER JOIN lu_vaccines_in_schedule "
'     sSql = sSql & "ON lu_Vaccines.Vaccine_ID = lu_vaccines_in_schedule.Vaccine_ID "
'     sSql = sSql & "WHERE (((lu_Vaccines.Trade_Name) Like "
'     sSql = sSql & Chr$(34) & Trim(Text3(1)) & "*" & Chr$(34) & ") "
'     sSql = sSql & "AND ((lu_vaccines_in_schedule.Schedule_ID)="
'     sSql = sSql & iSchedule_ID & "))"
'
'
'     Data1.DatabaseName = sMEDREC_MDB
'     Data1.RecordSource = sSql
'     Data1.Refresh
'     If RecordsExist(Data1) Then  'And Len(Text3(1)) Then
'        If LCase(Data1.Recordset!Trade_Name) <> Trim(LCase(Text3(1))) Then
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'             Picture2.Visible = False
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'  'End If
' End Sub
'
'
'
' Sub Vaccines_Are_They_UpToDate()
'     '--------------------------------------------------
'     'Using the patients age in month eg everything that
'     'should be done for a person of this age
'     '--------------------------------------------------
'     IMM_GetForPatient
'     Vaccines_Get_Those_Due
'     Vaccines_Get_Those_Missing
'     Vaccines_Alert_Those_missing
' End Sub
' Sub Vaccines_Get_Those_Missing()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  sSchedule_incomplete          sSchedule_complete            sSTring                   *
' '*  sStrString                                                                            *
' '*                                                                                        *
' '* Local Labels (Removed)                                                                 *
' '*  Vaccines_Are_They_UpToDate_error                                                      *
' '******************************************************************************************
'
'     Dim icounter As Integer
'     Dim iY
'     Dim iVaccinesCompleted As Integer 'counter
'     Dim ix As Integer 'used as counter
'     Dim iDone_ShedID As Integer 'schedule ID of  vaccines already done
'     Dim iDone_VaccID As Integer 'vaccine ID of vaccines already done
'     Dim iDue_SchedID As Integer  'Schedule ID of vaccines which are due
'     Dim iDue_VaccID As Integer  'vaccine ID of vaccines which are due
'     Dim iStartMonth As Integer
'     Dim iEndMonth As Integer
'     '---------------------------------------------------------------------
'     'The patients vaccines have been loaded: sub IMM_GetForPatient
'     'Age due specific information found: sub Vaccines_Get_Those_Due
'     'now check against the lists and see what is missing
'     '---------------------------------------------------------------------
'     On Error GoTo 0
'     '--------------------------------------------------------------------
'     'For each vaccine which the patient has had, mark it off in the
'     'list of the vaccinations should have had for that age.
'     'I've used redundant variables to fit code on line so I could read it
'     '--------------------------------------------------------------------
'     iVaccinesCompleted = 0
'     On Error Resume Next
'     For iY = 0 To UBound(gtPatient(1).Vaccinations())
'         iDone_ShedID = gtPatient(1).Vaccinations(iY).Schedule.ID
'         iDone_VaccID = gtPatient(1).Vaccinations(iY).Vaccine.ID
'         '----------------------------------------------------
'         'Check the done vaccination against list of whats due
'         '----------------------------------------------------
'         For icounter = 0 To UBound(gtAge_Due_Vaccinations())
'             iDue_SchedID = gtAge_Due_Vaccinations(icounter).Schedule_ID
'             iDue_VaccID = gtAge_Due_Vaccinations(icounter).vaccine_Id
'             '------------------------------------------------------------
'             'If find the vaccine in list of what should be done, mark it
'             ' off 1 = done 2 = equivalent to another vaccine 0 = not done
'             '------------------------------------------------------------
'             If iDone_ShedID = iDue_SchedID And iDone_VaccID = iDue_VaccID Then
'                gtAge_Due_Vaccinations(icounter).VaccinationDone = 1
'                iVaccinesCompleted = iVaccinesCompleted + 1
'                '---------------------------------------------------------
'                'A completed vaccine has been marked off as  complete. Now
'                'mark any equivalents off as done
'                '---------------------------------------------------------
'                Dim iZ As Integer
'                'for each equivalent vaccine to the current vaccine
'
'      For iZ = 0 To UBound(gtPatient(1).Vaccinations(iY).Vaccine.Equalivalent_ID())
'       If gtPatient(1).Vaccinations(iY).Vaccine.Equalivalent_ID(iZ) <> 0 Then
' '----------------------------------------------
' 'Now mark off as 'done' any equivalent vaccines
' '----------------------------------------------
' For ix = 0 To UBound(gtAge_Due_Vaccinations())
'     'if not marked off by a previous cycle
'     If gtAge_Due_Vaccinations(ix).VaccinationDone <> 2 Then
'          If gtPatient(1).Vaccinations(iY).Vaccine.Equalivalent_ID(iZ) = gtAge_Due_Vaccinations(ix).vaccine_Id Then
'              gtAge_Due_Vaccinations(ix).VaccinationDone = 2
'              iVaccinesCompleted = iVaccinesCompleted + 1
'              Exit For
'          End If
'     End If
' Next
'        End If
'
'     Next
'             End If
'          Next
'
'      Next
'
'      '---------------------------------------------------------
'      'Now mark off seasonal vaccines not due as 'done' to avoid
'      'the INCOMPLETE VACCINATION MESSAGE
'      '---------------------------------------------------------
'       For icounter = 0 To UBound(gtAge_Due_Vaccinations())
'             iStartMonth = gtAge_Due_Vaccinations(icounter).Month_Start
'             iEndMonth = gtAge_Due_Vaccinations(icounter).Month_end
'             'If there are seasonal bounds recorded
'             If (iStartMonth And iEndMonth <> 0) Then
'              'is seasonal, check if within the month range
'              If Not (Month(Now) >= iStartMonth And Month(Now) <= iEndMonth) Then
'                 'if not yet within range mark as 'completed'
'                 gtAge_Due_Vaccinations(icounter).VaccinationDone = True
'                 iVaccinesCompleted = iVaccinesCompleted + 1
'              End If
'             End If
'         Next
'
'      '-------------------------------------------------------
'      'If all age appropriate vaccinations done then flag this
'      '-------------------------------------------------------
'      If iVaccinesCompleted <> UBound(gtAge_Due_Vaccinations()) + 1 Then
'         gtPatient(1).Vaccinations_UpToDate = False
'      Else
'         gtPatient(1).Vaccinations_UpToDate = True
'      End If
'      Exit Sub
'
'
'    Exit Sub
' End Sub
' Sub Vaccines_Alert_Those_missing()
'      On Error Resume Next
'      '-------------------------------------------------
'      'Display Flashing panel if immunisation incomplete
'      '-------------------------------------------------
'      If gtPatient(1).Vaccinations_UpToDate = False Then
'         SSPanel1.Caption = "INCOMPLETE IMMUNISATION"
'         SSPanel1.MarqueeStyle = 3
'         SSPanel1.Visible = True
'         Select Case iCurrentSection
'         Case cSection_Overview
'         'If iCurrentSection <> cSection_PastHistory Then
'               '  Label2(1).Caption = "Vaccine schedules are NOT up to date"
'          '    End If
'        With Label2(1)
'           .Font.Name = "Tahoma"
'           .Font.Size = 6
'           .Caption = "Cholesterol = 7.5 HDL = 0.9, RR = 8.2" & vbLf _
'             & "Exercise - lacking" & vbLf _
'             & "Diabetic " & vbLf _
'             & "Post menopausal "
'
'        End With
'        ' Else
'            ' SSPanel1.Caption = ""
'            ' SSPanel1.MarqueeStyle = 0
'            ' SSPanel1.Visible = False
'            ' If iCurrentSection <> cSection_PastHistory Then
'            '     Label2(1).Caption = "All age due vaccinations are up to date"
'            ' End If
'
'        ' End If
'        Case cSection_Immunisations
'             Vaccines_Show_Those_missing
'        End Select
'     Else
'        Select Case iCurrentSection
'        Case cSection_Overview
'              Label2(1).Caption = "All age due vaccinations are up to date"
'        Case cSection_Immunisations
'             RichTextBox1(0) = ""
'             Label3.Caption = "COMPLETE"
'        End Select
'
'        SSPanel1.cpation = ""
'        SSPanel1.MarqueeStyle = 0 'stop the blinking
'         SSPanel1.Visible = False
'     End If
' End Sub
'
' Sub Vaccines_Get_Those_Due()
'     On Error GoTo 0
'     Dim icounter As Integer
'     Dim Db As Database
'     Dim sSql As String
'     '--------------------------------------------------------------------
'     'Gets a list of vaccines which would be due at patients age in months
'     'taking into account patients sex and aboriginality
'     '--------------------------------------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     sSql = "SELECT lu_Vaccine_Schedules_age_due.Age_Due_Months, "
'     sSql = sSql & "lu_vaccine_schedules.Schedule_Text, "
'     sSql = sSql & "lu_Vaccines_in_Schedule.Vaccine_ID, "
'     sSql = sSql & "lu_Vaccines_in_Schedule.Schedule_ID, "
'     sSql = sSql & "lu_Vaccines.Trade_Name, lu_Vaccines.Abbreviation, "
'     sSql = sSql & "lu_vaccine_schedules.Aboriginal_TSI_only, "
'     sSql = sSql & "lu_Seasonal_use.Start , lu_Seasonal_use.End "
'     sSql = sSql & "FROM ((lu_vaccine_schedules LEFT JOIN "
'     sSql = sSql & "(lu_Vaccines RIGHT JOIN lu_Vaccines_in_Schedule "
'     sSql = sSql & "ON lu_Vaccines.Vaccine_ID = "
'     sSql = sSql & "lu_Vaccines_in_Schedule.Vaccine_ID) ON "
'     sSql = sSql & "lu_vaccine_schedules.Schedule_ID = "
'     sSql = sSql & "lu_Vaccines_in_Schedule.Schedule_ID) "
'     sSql = sSql & "LEFT JOIN lu_Seasonal_use ON "
'     sSql = sSql & "lu_vaccine_schedules.Seasonal_ID = "
'     sSql = sSql & "lu_Seasonal_use.Seasonal_ID) "
'     sSql = sSql & "INNER JOIN lu_Vaccine_Schedules_age_due "
'     sSql = sSql & "ON lu_vaccine_schedules.Schedule_ID = "
'     sSql = sSql & " lu_Vaccine_Schedules_age_due.Schedule_ID "
'     sSql = sSql & "Where (((lu_vaccine_schedules_age_due.Age_due_months) > "
'     'sSql = sSql & intAge_in_Months + 1
'     If gtPatient(1).Age < 7 Then
'         sSql = sSql & 1
'         sSql = sSql & " And (lu_vaccine_schedules_age_due.Age_due_months) <  "
'         sSql = sSql & intAge_in_Months + 1 & ") "
'     ElseIf gtPatient(1).Age > 19 Then
'         sSql = sSql & 228
'         sSql = sSql & "  And (lu_Vaccine_Schedules_age_due.Age_due_months) < "
'         sSql = sSql & intAge_in_Months + 1 & ") "
'     ElseIf gtPatient(1).Age < 7 And gtPatient(1).Age < 9.9 Then
'           sSql = sSql & 228
'             sSql = sSql & " And (lu_vaccine_schedules_age_due.Age_due_months) > 0)) "
'     ElseIf gtPatient(1).Age > 9.9 And gtPatient(1).Age < 19 Then
'             sSql = sSql & 119
'             sSql = sSql & " And (lu_vaccine_schedules_age_due.Age_due_months) < "
'             sSql = sSql & intAge_in_Months + 1 & ") "
'     Else  'age is between 7 and 9.9
'              sSql = sSql & 85
'             sSql = sSql & " And (lu_vaccine_schedules_age_due.Age_due_months) < "
'             sSql = sSql & intAge_in_Months + 1 & ") "
'     End If
'     sSql = sSql & "AND ((lu_vaccine_schedules.Aboriginal_TSI_only)=False)) "
'     sSql = sSql & "ORDER BY lu_vaccine_schedules.Age_due_months, "
'     sSql = sSql & "lu_vaccine_schedules.Schedule_Text, "
'     sSql = sSql & "lu_Vaccines_in_Schedule.Vaccine_ID"
'
'   ' Where (((lu_Vaccine_Schedules_age_due.Age_due_months) > 227
'   ' And (lu_Vaccine_Schedules_age_due.Age_due_months) < 449)
'  ' And ((lu_vaccine_schedules.Aboriginal_TSI_only) = False))
' 'ORDER BY lu_vaccine_schedules.Age_Due_Months, lu_vaccine_schedules.Schedule_Text, lu_Vaccines_in_Schedule.Vaccine_ID;
'
'
'     Set Rs = Db.OpenRecordset(sSql)
'     icounter = 0
'     sMsg = ""
'     With Rs
'     Do Until .EOF
'         ReDim Preserve gtAge_Due_Vaccinations(0 To icounter)
'         gtAge_Due_Vaccinations(icounter).Age_due = !Age_due_months
'         gtAge_Due_Vaccinations(icounter).Abbreviation = "" & !Abbreviation
'         gtAge_Due_Vaccinations(icounter).Schedule_ID = !Schedule_ID
'         gtAge_Due_Vaccinations(icounter).Schedule_Text = "" & !Schedule_Text
'         gtAge_Due_Vaccinations(icounter).Trade_Name = !Trade_Name
'         gtAge_Due_Vaccinations(icounter).VaccinationDone = False
'         gtAge_Due_Vaccinations(icounter).vaccine_Id = !vaccine_Id
'         gtAge_Due_Vaccinations(icounter).Month_Start = 0 & !Start
'         gtAge_Due_Vaccinations(icounter).Month_end = 0 & !End
'         icounter = icounter + 1
'         Rs.MoveNext
'     Loop
'     End With
'     Rs.Close
'     Db.Close
' End Sub
'
' Sub Requests_EditArea_Reset_Parameters()
'          'eg where text3() = dysuria;ren
'           sExistingText = ""        ' = spot occupied by 'dysuria;'
'           sLatestTextAdded = ""     ' = spot occupied by 'ren'
'           sSearchText = ""          ' = the text searching on eg 'ren'
'           sMsg = ""
'           TempText = ""
'
'           BasicText = ""
'           iFinishedLineInput = False
' End Sub
'
'
'
' Sub Requests_Providers_Default_Get(Provider_Type_ID As Long)
'     Dim Q As QueryDef
'     Dim bDefaultExists As Boolean
'     Dim sMsg As String
'     Dim lresponse As Long
'     Screen.MousePointer = vbHourglass
'     bExitRoutine = True
'     '-----------------------------------------------------------------
'     'Get the doctors preferred provider and rooms ID for this category
'     'If this does not exist prompt use to choose from drop down lists
'     '-----------------------------------------------------------------
'     Set Db = OpenDatabase(sContacts_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Requests_Provider_GetPreferredForDoctor_ofGivenType")
'     Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'     Q("Enter Request_Type_ID") = gtNew_Form(0).Provider.Type_ID
'     Set Rs = Q.OpenRecordset()
'     '--------------------------------------------------------------
'     'IF preferences exist, pass these to the parameter query in the
'     'contacts Db to get the providers name and rooms address
'     '--------------------------------------------------------------
'     With Rs
'         If .EOF + .BOF <> -2 Then
'            gtNew_Form(0).Provider.ID = "" & !Organisation_ID
'            gtNew_Form(0).Provider.Doctor_reference_Number = "" & !Doctor_reference_Number
'            gtNew_Form(0).Provider.Address.ID = !Address_ID
'            gtNew_Form(0).Provider.Address_Weighting = !Address_Weighting
'            gtNew_Form(0).Provider.Provider_Weighting = !Provider_Weighting
'            gtNew_Form(0).Provider.ID = !Organisation_ID
'            bDefaultExists = True
'            Set Q = Db.QueryDefs("MRQ_Requests_Providers_AllDetails_Get")
'            Q("Enter Organisation_ID") = !Organisation_ID
'            Q("Enter Address_ID") = !Address_ID
'            Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'           End If
'     End With
'     If bDefaultExists = False Then
'            '------------------------------------------------
'            'See if there are any providers for this category
'            '------------------------------------------------
'            Set Q = Db.QueryDefs("MRQ_Requests_Providers_GetList_ofGivenType")
'            Q("Enter Request_Type_ID") = gtNew_Form(0).Provider.Type_ID
'            Set Rs = Q.OpenRecordset()
'            If Rs.EOF + Rs.BOF <> -2 Then
'               bDefaultExists = True
'               gtNew_Form(0).Provider.Provider_Weighting = 0
'            Else
'                 Screen.MousePointer = vbArrow
'                 sMsg = "There are no service providers linked to the medical records database for the request category " & gtNew_Form(0).Provider.Type & "." & vbLf & vbLf _
'                  & "When you enter the name of a service provider, the service provider will subsequently be linked to the type of request you are ordering. " & vbLf & vbLf _
'                  & "If the service provider does not exist, you must enter the details in the Contacts Database before it will appear in the medical records program."
'                  lresponse = MsgBox(sMsg, vbOKOnly, "Request forms")
'                  bExitRoutine = False
'                  Text3(cRequest_Company).SetFocus
'
'        Exit Sub
'            End If
'         End If
'      Rs.Close
'     If bDefaultExists Then
'         Set Rs = Q.OpenRecordset(dbOpenDynaset)
'         Text3(cRequest_Company) = Rs!Description
'         Text3(cRequest_Street123) = "" & Rs!Street1 & " " & "" & Rs!Street2 & " " & "" & Rs!Street3
'         Text3(cREquest_Suburb) = "" & Rs!suburb
'         Text3(cRequest_Phone) = "" & Rs!Work_Phone
'         gtNew_Form(0).Provider.ID = Rs!Organisation_ID
'         gtNew_Form(0).Provider.Address.ID = Rs!Address_ID
'         gtNew_Form(0).Provider.Name = "" & Rs!Description
'         gtNew_Form(0).Provider.Address.Street1 = "" & Rs!Street1
'         gtNew_Form(0).Provider.Address.Street2 = "" & Rs!Street2
'         gtNew_Form(0).Provider.Address.Street3 = "" & Rs!Street3
'         gtNew_Form(0).Provider.Address.suburb = "" & Rs!suburb
'         gtNew_Form(0).Provider.Address.Postcode = "" & Rs!Postcode
'         gtNew_Form(0).Provider.Address.State = "" & Rs!State
'         gtNew_Form(0).Provider.Communication.Work_Phone = "" & Rs!Work_Phone
'         gtNew_Form(0).Provider.Request_Link_ID = Rs!Link_ID
'       Else
'         '------------------------------------------------------------
'         'Default provider does not exist, get list of these. Show the
'         'name of first provider in the list
'         '-------------------------------------------------------------
'         sSql = "SELECT DISTINCTROW data_organisations.Description, " _
'                  & "data_organisations.Organisation_ID, " _
'                  & "data_organisations.Request_Type_iD " _
'                  & "From data_organisations " _
'                  & "Where (((data_organisations.Description) Like '*') " _
'                  & "And ((data_organisations.Request_Type_iD) = " _
'                  & gtNew_Form(0).Provider.Type_ID & ")) " _
'                  & "ORDER BY data_organisations.Description"
'        Data1.DatabaseName = sContacts_MDB
'        Data1.RecordSource = sSql
'        Data1.Refresh
'        Set Db = OpenDatabase(sContacts_MDB, False)
'        Set Q = Db.QueryDefs("MRQ_Requests_OrganisationTypes_GetList")
'        Q("Enter Request_Type_ID") = gtNew_Form(0).Provider.Type_ID
'        Set Data1.Recordset = Q.OpenRecordset()
'        TDBGrid2.ReBind
'        If RecordsExist(Data1) Then
'           Text3(cRequest_Company) = Data1.Recordset!Description
'           gtNew_Form(0).Provider.Name = "" & Data1.Recordset!Description
'           gtNew_Form(0).Provider.ID = Data1.Recordset!Organisation_ID
'           End If
'        Screen.MousePointer = vbArrow
'        Db.Close
'        bExitRoutine = False
'        Exit Sub
'     End If
'     Rs.Close
'     Db.Close
'     Requests_Providers_HeadOffice_Address_Get
'     bExitRoutine = False
'     Screen.MousePointer = vbArrow
' End Sub
'
' Sub Get_PreferredRoomsAddress()
'     '-------------------------------------------------------------------
'     'Find for display the rooms each doctor prefers to send his patients
'     'to for the service provider
'     '-------------------------------------------------------------------
'     Set Db = OpenDatabase(sContacts_MDB, False)
'     Set Q = Db.QueryDefs("c99_getProvider_And_PreferredRooms")
'     Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'     Q("Enter Provider_ID") = gtNew_Form(0).Provider.ID
'
'     Set Rs = Q.OpenRecordset(dbOpenDynaset)
'     With Rs
'          If .EOF + .BOF <> -2 Then
'         gtNew_Form(0).Provider.Address.Street1 = "" & Rs!Street1
'         gtNew_Form(0).Provider.Address.Street2 = "" & Rs!Street2
'         gtNew_Form(0).Provider.Address.suburb = "" & Rs!suburb
'         gtNew_Form(0).Provider.Address.Postcode = "" & Rs!Postcode
'        ' gtNew_Form(0).Provider.tollFree = "" & rs!Toll_free
'        ' gtNew_Form(0).Provider.Fax = "" & rs!Fax
'        ' gtNew_Form(0).Provider.Email = "" & rs!Email
'         End If
'     End With
'     Rs.Close
'     Db.Close
' End Sub
' Sub Deal_with_User_profile()
'     '---------------------------------------------------------
'     'If the test is a user profile, must get all tests in that
'     'user profile from the database
'     '---------------------------------------------------------
'     If Data1.Recordset!Section_ID = cUserProfileSectionID Then
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         sSql = "SELECT lu_UserDefinedProfiles.Profile_ID, "
'         sSql = sSql & "lu_pathologytestnames.Pathology_Test_ID, "
'         sSql = sSql & "lu_pathologytestnames.Section_ID, "
'         sSql = sSql & "lu_pathologytestnames.Haps_TestID, "
'         sSql = sSql & "lu_pathologytestnames.Douglas_TestID, "
'         sSql = sSql & "lu_pathologytestnames.Hampson_TestID, "
'         sSql = sSql & "lu_pathologytestnames.Test_Description, "
'         sSql = sSql & "lu_pathologytestnames.User_name, "
'         sSql = sSql & "lu_pathologytestnames.weighting "
'         sSql = sSql & "From lu_UserDefinedProfiles "
'         sSql = sSql & "INNER JOIN lu_pathologytestnames ON "
'         sSql = sSql & "lu_UserDefinedProfiles.Pathology_Test_ID = "
'         sSql = sSql & "lu_pathologytestnames.Pathology_Test_ID "
'         sSql = sSql & "WHERE (((lu_UserDefinedProfiles.Profile_ID)= "
'         sSql = sSql & Data1.Recordset!Pathology_Test_ID & "))"
'         Set Rs = Db.OpenRecordset(sSql)
'         '---------------------------------------------------------
'         'add the test id's into the profile array. This array is
'         'kept separate because if they delete a profile from the
'         'test line, must delete all the tests in the profile from
'         'the main sRequestNames() lRequestIds()
'         '---------------------------------------------------------
'         If Rs.EOF + Rs.BOF <> -2 Then
'            icounter = 0
'             With Rs
'                 Do Until .EOF
'                     sProfile_REquestNames(icounter) = Trim(Rs!test_description)
'                     lProfile_RequestIds(icounter) = Rs!Pathology_Test_ID
'                     icounter = icounter + 1
'                     .MoveNext
'                 Loop
'             End With
'             Rs.Close
'             Db.Close
'         Else
'            sMsg = "There do not seem to be any tests in this user defined profile" & vbLf & vbLf
'            sMsg = sMsg & "Please run the pathology terms module to correct this."
'            lresponse = MsgBox(sMsg, vbInformation + vbOKOnly, "PROBLEM:missing data")
'            'cmdCancelTest_Click
'  Exit Sub
'         End If
'     End If
' End Sub
' Sub Fill_RequestName_RequestID_array()
'     Dim ix As Integer
'     '----------------------------------------------------------
'     'As user enters tests on text3(cqup_test) the sRequestNames
'     'array fills up
'     'Find the start point with no data in the sREquestnames()
'     '----------------------------------------------------------
'     On Error Resume Next
'     ix = UBound(gtNew_Form(0).Request())
'     If Err.Number = 9 Then
'        ix = 0
'     Else
'        ix = ix + 1
'     End If
'     On Error GoTo 0
'     '---------------------------------------------------------
'     'now icounter = last loop index
'     'If test was a user profile then tack all tests into array
'     'I have assumed only up to 11 tests in a profile
'     '---------------------------------------------------------
'      If Data1.Recordset!Section_ID = cUserProfileSectionID Then
'         For X = 0 To 10
'             If sProfile_REquestNames(X) <> "" Then
'                  sRequestNames(icounter) = sProfile_REquestNames(X)
'                  lRequestIDs(icounter) = lProfile_RequestIds(X)
'                  lLastRequestID = lRequestIDs(icounter)
'                  icounter = icounter + 1
'             Else
'                  Exit For
'             End If
'          Next
'      Else
'          '-------------------------------
'          'Otherwise, it was a single test
'          '-------------------------------
'          ReDim Preserve gtNew_Form(0).Request(ix)
'
'         ' ReDim Preserve sRequestNames(icounter)
'         ' ReDim Preserve lRequestIDs(icounter)
'                   gtNew_Form(0).Request(ix).Name = Trim(Data1.Recordset!Description)
'          gtNew_Form(0).Request(ix).Request_ID = Data1.Recordset!Request_ID
'          gtNew_Form(0).Request(ix).Instruction_ID = Data1.Recordset!Instruction_ID
'          gtNew_Form(0).Request(ix).Lateralisation_ID = Data1.Recordset!Lateralisation_ID
'          'sRequestNames(icounter) = Trim(Data1.Recordset!Description)
'          'lRequestIDs(icounter) = Data1.Recordset!Request_ID
'          lLastRequestID = Data1.Recordset!Request_ID
'      End If
' End Sub
'
' Sub Requests_Forms_Accept()
'         '----------------------------------------------------------
'         'This routine accepts requests for any provider eg patholgy
'         'xray, podiatry, neurology etc
'         '----------------------------------------------------------
'         Dim ix As Integer                'counter for this routine
'         Dim iNewForm As Integer
'         Dim sMsg As String
'         '----------------------
'         'Ensure minimum dataset
'         '----------------------
'         For ix = cRequest_Type To cRequest_request
'             bExitRoutine = True
'             If Trim(Text3(ix)) = "" Then
'                 sMsg = "One or more pieces of information are missing." & vbLf & vbLf _
'                 & "You must at a minimum enter the type of test, company, address and test name, and " _
'                 & "preferably some clinical notes." & vbLf & vbLf _
'                 & "NOTE: You must select the type of request and the service provider from the pick list, ie those which currently exist in the database. " _
'                 & "Free text is not acceptable. You may add a service provider via the Contacts Database"
'                 lresponse = MsgBox(sMsg, vbInformation + vbOKOnly, "REQUESTS:MISSING DATA:")
'                 If gtNew_Form(0).Provider.Type_ID = 0 Then
'                    Command3_Click (cButtonCancel)
' Exit Sub
'                 End If
'                 If gtNew_Form(0).Provider.ID = 0 Then
'                    Text3(cRequest_Company) = ""
'                    Text3(cREquest_Suburb) = ""
'                    Text3(cRequest_Company).SetFocus
'                 Else
'                    Text3(ix).SetFocus
'                 End If
'                 bExitRoutine = False
'       Exit Sub
'             End If
'
'         Next
'         If Text3(cRequest_Medications) <> "" Then
'             If right(Text3(cRequest_Medications), 1) <> ";" Then
'                bExitRoutine = True
'                Text3(cRequest_Medications) = Trim(Text3(cRequest_Medications)) & ";"
'                bExitRoutine = False
'             End If
'         End If
'         If Trim(Text3(cRequest_notes)) <> "" Then
'             gtNew_Form(0).Notes = Trim(Text3(cRequest_notes))
'         Else
'             gtNew_Form(0).Notes = "no clinical notes"
'         End If
'         '--------------------------------------------------------------------
'         'First check that the requests present in the array are still present
'         'on the request line as they may have been deleted by the user
'         '--------------------------------------------------------------------
'         For ix = 0 To UBound(gtNew_Form(0).Request())
'              If InStr(Text3(cRequest_request), gtNew_Form(0).Request(ix).Name) = False Then
'                 gtNew_Form(0).Request(ix).Deleted = True
'              End If
'         Next
'
'         gtNew_Form(0).medications = Trim(Text3(cRequest_Medications))
'         gtNew_Form(0).Request_Summary = Trim(Text3(cRequest_request))
'         gtNew_Form(0).Date = Trim(Text2(cTheDate))
'         gtNew_Form(0).ProgressNotes = Trim(Text3(cRequest_ProgressNote))
'
'         '---------------------------------------------
'         'Add new member to the request array if needed
'         '---------------------------------------------
'         On Error Resume Next
'         If iEditing = False Then
'             ix = UBound(gtPatient(1).Forms())
'             If Err.Number = 9 Then
'                 ix = 0
'                 ReDim gtPatient(1).Forms(0)
'                 iNewForm = True
'             Else
'                 ix = ix + 1
'                 ReDim Preserve gtPatient(1).Forms(ix)
'             End If
'         Else
'              '-----------------------------------------------------
'              'The form already exists - have there been any changes
'              'during this edit
'              '-----------------------------------------------------
'              ix = List1(0).ItemData(List1(0).ListIndex)
'         End If
'         On Error GoTo 0
'         gtPatient(1).Forms(ix) = gtNew_Form(0)
'         gtPatient(1).Forms(ix).DataChanged = True
'         gtPatient(1).Forms(ix).Printed = False 'reset as could be edited
'         gtPatient(1).Forms(ix).Saved = False
'         'gtPatient(1).DataChanged = True
'         Command3(cEdit_cancel).Enabled = True
'         sCopyLastClinicalNotes = Text3(cRequest_notes)
'         Requests_Forms_Ordered_Show
'         Command3_Click (cEdit_cancel)
' End Sub
'
'
'
'
'
' Sub IMM_Display_Status()
'      '-----------------------------
'          'Alert to any missing vaccines
'          '-----------------------------
'          bExitRoutine = True
'          'Richtextbox1(0).Text = ""
'          bExitRoutine = False
'          sMsg = ""
'          Dim sStrString As String
'          If gtPatient(1).Vaccinations_UpToDate = False Then
'             With Label3
'                 .Caption = " INCOMPLETE "
'                 .BackColor = vbRed
'                 .ForeColor = vbYellow
'                 .Visible = True
'                 .left = Command1(3).left - Label3.width - 100
'             End With
'             sMsg = "Please enter the immunisation details for this "
'             If gtPatient(1).Age < 15 Then
'                 sStrString = "child"
'             Else
'                  sStrString = "patient"
'             End If
'             sMsg = sMsg & sStrString & ". If the majority of this " & sStrString & "'s"
'             sMsg = sMsg & " immunisations are "
'             sMsg = sMsg & "complete, try using the system wizard to enter the "
'             sMsg = sMsg & "necessary details."
'             lblHabits.Caption = sMsg
'
'          Else
'             '-----------------------
'             'Vaccines are up to date
'             '-----------------------
'
'             If gtPatient(1).Age < 15 Then
'                    sStrString = "child"
'
'             Else
'                    sStrString = "patient"
'             End If
'             sMsg = "This " & sStrString & "'s recommended immunisations "
'             sMsg = sMsg & "are up to date. You may change any details "
'             sMsg = sMsg & "such as date given, or add a reaction to a  vaccine."
'             lblHabits.Caption = sMsg
'             With Label3
'                 .Caption = " UP TO DATE "
'                 .left = Command1(3).left - Label3.width - 100
'                 .BackColor = vbRed
'                 .ForeColor = vbYellow
'                 .Visible = True
'             End With
'             SSPanel1.Caption = ""   'stop flashing a display
'
'             SSPanel1.MarqueeStyle = 0
'             SSPanel1.Visible = False
'
'          End If
'      bExitRoutine = False
'
' End Sub
' Sub Vaccinations_GetLIst_have_Schedule_ID()
'     sSql = "SELECT lu_Vaccines_in_Schedule.Schedule_ID, "
'     sSql = sSql & "lu_Vaccines.Trade_Name, lu_Vaccines.Description, "
'      sSql = sSql & "lu_Vaccines.formulation, "
'     sSql = sSql & "lu_Vaccines.Vaccine_ID, lu_Vaccines.Abbreviation, "
'     sSql = sSql & "lu_Vaccines.live_vaccine, lu_vaccines.last_Batch_no "
'     sSql = sSql & "FROM lu_Vaccines INNER JOIN lu_Vaccines_in_Schedule ON "
'     sSql = sSql & "lu_Vaccines.Vaccine_ID = lu_Vaccines_in_Schedule.Vaccine_ID "
'     sSql = sSql & "WHERE (((lu_Vaccines_in_Schedule.Schedule_ID)="
'     sSql = sSql & iSchedule_ID & "))"
'     Data1.DatabaseName = sMEDREC_MDB
'     Data1.RecordSource = sSql
'     Data1.Refresh
'     Data1.Recordset.MoveLast
'     If Data1.Recordset.RecordCount = 1 Then
'        bExitRoutine = True
'        IMM_Select_Vaccine_Name
'       Exit Sub
'     Else
'      Picture2.Visible = True: Picture2.ZOrder
'     End If
' End Sub
' Sub Vaccines_Show_Those_missing()
'    '---------------------------------------------------------------------
'    'Check through all age due vaccinations and using the .vaccinationDone
'    'flag, display a summary of all those which are age appropriate and
'    'are missing
'    '---------------------------------------------------------------------
'    On Error Resume Next
'    If gtPatient(1).Vaccinations_UpToDate = True Then
'       Exit Sub
'    End If
'    sMsg = ""
'    Dim strSchedule As String
'     For icounter = 0 To UBound(gtAge_Due_Vaccinations())
'         If gtAge_Due_Vaccinations(icounter).VaccinationDone = False Then
'                 '-----------------------------------------------------------
'                 'use schedule name only once. Don't show schedules which are
'                 'seasonal except if in between ..start and ..end
'                 '-----------------------------------------------------------
'
'                If gtAge_Due_Vaccinations(icounter).Schedule_Text <> strSchedule Then
'
'                   'If sMsg <> "" Then
'                   '   sMsg = left(sMsg, Len(sMsg) - 3) & "],  " 'remove the 'or'
'                   'End If
'                   sMsg = sMsg & UCase(gtAge_Due_Vaccinations(icounter).Schedule_Text) & ", "
'
'
'                End If
'                 '  sMsg = sMsg & gtAge_Due_Vaccinations(icounter).Trade_Name & " or "
'                   strSchedule = gtAge_Due_Vaccinations(icounter).Schedule_Text
'         End If
'     Next
'   bExitRoutine = True
'   If sMsg = "" Then
'   Else
'      sMsg = left(sMsg, Len(sMsg) - 3) & "]"
'   End If
'   With RichTextBox1(0)
'     .Text = sMsg
'     .Locked = True
'   End With
'
'    bExitRoutine = False
' End Sub
'
'
'
'
' Sub IMM_Delete(Index As Integer)
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Labels (Removed)                                                                 *
' '*  IMM_Delete_Error                                                                      *
' '******************************************************************************************
'
'     Dim iRecord_ID As Integer
'     Dim iSID As Integer ' schedule ID
'     'On Error GoTo IMM_Delete_Error
'     '----------------------------------------------------------
'     'Delete the immunisation highlighted in either list.
'     'later put exit loop after sid changes
'     '----------------------------------------------------------
'     Select Case Index
'     Case 0
'         '---------------------------------------------------------
'         'If clicked list1(0), this is a schedule, hence delete all
'         'items attatched to that schedule
'         '---------------------------------------------------------
'         sMsg = "Are you sure you want to delete all the items for the "
'         sMsg = sMsg & "schedule: " & vbLf & vbLf & List1(0).List(List1(0).ListIndex) & "?"
'         sTitle = "DELETE SCHEDULE"
'         iSID = List1(0).ItemData(List1(0).ListIndex) 'the schedule_ID
'         '-----------------------------------
'         'Save consult_ID if not already done
'         '-----------------------------------
'         If iConsultIDSaved = False Then
'             Save_ConsultID
'         End If
'         Database_Lock
'         Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'         ws.BeginTrans
'         '-------------------------------------------------------------
'         'First save any immunisation items not yet saved to database
'         '-------------------------------------------------------------
'         IMM_Save
'         '---------------------------------------
'         'Archive any records about to be deleted
'         '---------------------------------------
'        For icounter = 0 To UBound(gtPatient(1).Vaccinations())
'           If gtPatient(1).Vaccinations(icounter).Schedule.ID = iSID Then
'             sSql = "INSERT INTO arch_Immunisations ( record_Id, Patient_ID, "
'             sSql = sSql & "consult_ID, Date_given, Vaccine_ID, Schedule_ID, Serial_No, Reaction ) "
'             sSql = sSql & "SELECT data_Immunisations.record_Id, "
'             sSql = sSql & "data_Immunisations.Patient_ID, "
'             sSql = sSql & "data_Immunisations.consult_ID, "
'             sSql = sSql & "data_Immunisations.Date_given, "
'             sSql = sSql & "data_Immunisations.Vaccine_ID, "
'             sSql = sSql & "data_Immunisations.Schedule_ID, "
'             sSql = sSql & "data_Immunisations.Serial_No, "
'             sSql = sSql & "data_Immunisations.Reaction "
'             sSql = sSql & "From data_Immunisations "
'             sSql = sSql & "WHERE (((data_Immunisations.record_Id)="
'             sSql = sSql & gtPatient(1).Vaccinations(icounter).Record_ID & "))"
'             Db.Execute sSql
'             '--------------------------------------------------
'             'Now edit that record and insert current consult_ID
'             '--------------------------------------------------
'             Set Rs = Db.OpenRecordset("Arch_Immunisations", dbOpenTable)
'             With Rs
'                 .MoveLast
'                 .Edit
'                 !Archived_During_Consult = gtconsult.Consult_ID
'                 .Update
'              End With
'              Rs.Close
'          End If
'         Next
'         '-----------------------------------------------------------
'         'finally delete the existing record and remove from the list
'         '-----------------------------------------------------------
'         sSql = "Delete data_Immunisations.Patient_ID, "
'         sSql = sSql & "data_Immunisations.Schedule_ID "
'         sSql = sSql & "From data_Immunisations "
'         sSql = sSql & "WHERE (((data_Immunisations.Patient_ID)="
'         sSql = sSql & gtPatient(1).Patient_ID & ") "
'         sSql = sSql & "AND ((data_Immunisations.Schedule_ID)="
'         sSql = sSql & iSID & "))"
'         Db.Execute sSql
'     Case 1
'      For icounter = 0 To UBound(gtPatient(1).Vaccinations())
'         'first find the matching schedule_ID and vaccine ID and
'         'date given
'         If gtPatient(1).Vaccinations(icounter).Schedule.ID = List1(0).ItemData(List1(0).ListIndex) _
'            And gtPatient(1).Vaccinations(icounter).Vaccine.ID = List1(1).ItemData(List1(1).ListIndex) _
'            And Trim(Text3(2)) = gtPatient(1).Vaccinations(icounter).Date_given Then
'            sMsg = "The following vaccine has been identified for deletion." & vbLf & vbLf
'            sMsg = sMsg & "Schedule  : " & List1(0).List(List1(0).ListIndex) & vbLf
'            sMsg = sMsg & "Vaccine     : " & gtPatient(1).Vaccinations(icounter).Vaccine.Trade_Name & vbLf
'            sMsg = sMsg & "Date given: " & gtPatient(1).Vaccinations(icounter).Date_given & vbLf & vbLf
'            sMsg = sMsg & "Are you sure you want to delete this vaccine?"
'            lresponse = MsgBox(sMsg, vbYesNo + vbQuestion, "DELETE IMMUNISATION")
'            If lresponse = vbNo Then
'     Exit Sub
'            End If
'            iRecord_ID = gtPatient(1).Vaccinations(icounter).Record_ID
'            gtPatient(1).Vaccinations(icounter).Deleted = True
'            List1(1).RemoveItem List1(1).ListIndex
'            If List1(1).ListCount = 0 Then
'                List1(0).RemoveItem List1(0).ListIndex
'            End If
'           Command3_Click (1)
'            Exit For
'         End If
'     Next
'     '----------------------------------------------------
'     'If record ID is non-zero delete record from database
'     '----------------------------------------------------
'     If iRecord_ID Then 'non zero value = already saved to database
'         sSql = "UPDATE data_Immunisations SET "
'         sSql = sSql & "data_Immunisations.Archived = True "
'         sSql = sSql & "WHERE (((data_Immunisations.record_Id)="
'         sSql = sSql & iRecord_ID & "))"
'         Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'         ws.BeginTrans
'         Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'         Db.Execute sSql
'         Db.Close
'         sMsg = "Commit these changes to the database?"
'         lresponse = MsgBox(sMsg, vbQuestion + vbYesNo, "DELETE IMMUNISATION")
'         If lresponse = vbYes Then
'              ws.CommitTrans
'             ' IMM_GetForPatient
'             ' IMM_Display
'             ' IMM_Display_Status
'         Else
'              '-----------------------------------------------------
'              'Rollback the database and un-flag the deleted vaccine
'              '-----------------------------------------------------
'              ws.Rollback
'              gtPatient(1).Vaccinations(icounter).Deleted = False
'
'
'         End If
'         ws.Close
'         IMM_GetForPatient
'         IMM_Display
'         IMM_Display_Status
'     End If
'     End Select
'     '-----------------------------
'     'Give user a chance to back out
'     '------------------------------
'     lresponse = MsgBox(sMsg, vbQuestion + vbYesNo, sTitle)
'     If lresponse = vbYes Then
'          ws.CommitTrans
'     Else
'          '-----------------------------------------------------
'          'Rollback the database and un-flag the deleted vaccine
'          '-----------------------------------------------------
'          ws.Rollback
'     End If
'     ws.Close
'     Database_Unlock
'     '-----------------------------
'     'Now refresh display and flags
'     '-----------------------------
'     IMM_GetForPatient
'     IMM_Display
'     IMM_Display_Status
'     Exit Sub
'
'
'   On Error Resume Next
'   sMsg = "An error occurred whilst attempting to delete information "
'   sMsg = sMsg & "from the database. "
'   MsgBox sMsg
'   Db.Close
'   ws.Close
'   Database_Unlock
'   Exit Sub
'
'
' End Sub
' Sub Referrals_Letter_Save(sLetterText As String)
'     Dim lRecord_ID As Long
'     Dim SProgressText As String
'     Dim sString As String
'     Dim iOverwrite As Integer 'if true overwrite the existing file
'     '---------------------------------------
'     'Save consult_ID if not previously saved
'     '---------------------------------------
'     If gtconsult.Consult_ID = 0 Then
'        Save_ConsultID
'     End If
'     '------------------------------------------------------
'     'Create the last bit of the filename eg '10-Apr-99.rtf'
'     '------------------------------------------------------
'     sString = " " & Format(Now, "medium date") & ".rtf"
'     '---------------------------------------
'     'If no tag in text7 and iEditing is true
'     'assume want to overwrite existing file
'     '---------------------------------------
'     If Text7 = "" And iEditing = True Then
'         sFname = Data2.Recordset!File_name
'         SProgressText = "change of text in existing letter, "
'         SProgressText = SProgressText & "the existing file was overwritten: '"
'         SProgressText = SProgressText & sFname & "'"
'     Else
'         '---------------
'         'Create Filename
'         '---------------
'         sFname = Format(gtPatient(1).Patient_ID) & "_" & UCase(left(gtPatient(1).Firstname, 1)) & "_"
'         sFname = sFname & gtPatient(1).Surname & " "
'
'
'         If iEditing Then
'             sFname = sFname & StrConv(Trim(Text7), vbProperCase) & sString
'             SProgressText = "Change of text in existing letter which has been "
'             SProgressText = SProgressText & "saved under a new name: '"
'             SProgressText = SProgressText & sFname & "'"
'            iEditing = False
'         Else
'            sFname = sFname & Trim(Text3(0)) & sString
'            SProgressText = "Letter to " & Trim(Text3(0).Text)
'            If Text5 <> "" Then
'               SProgressText = SProgressText & " re: " & Trim(Text5)
'            End If
'            SProgressText = SProgressText & " for " & Trim(Text3(7)) _
'              & ", a new file was created  and saved as: '" & sFname & "'"
'
'         End If
'     End If
'
'     '----------------------------------------------------
'     'Save the letter to file eg nnnn_M_Gerrard to Dr_Xxxx
'     'plus save file name to the table data_referrals
'     '----------------------------------------------------
'     Dim ws As Workspace
'     Database_Lock
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Rs = Db.OpenRecordset("Select * from data_referrals")
'     iOverwrite = True
'     On Error GoTo Letter_Exists_error
'     With Rs
'         .AddNew
'         !Consult_ID = gtconsult.Consult_ID
'         !Consult_First_noted = gtconsult.Consult_ID
'         !File_name = sFname
'         .Update
'         .MoveLast
'         lRecord_ID = !Referral_ID
'     End With
'     Rs.Close
' Createfile:
'     If iOverwrite Then
'         rtb2.Font.Name = "Times New Roman"
'         rtb2.Font.Size = 12
'         rtb2.Text = sLetterText 'RichTextBox1(1).Text
'         On Error GoTo FileAccessError
'         rtb2.SaveFile sLetters_Dir & "\" & sFname, rtfRTF
'     End If
'     iEditing = False
'     Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'           ProgressNotes_Save pnClinicalNotes, pnReferralLetter_Printed, _
'              pnReferralLetter_Printed, "REFERRALS", _
'              SProgressText, True, _
'              mrTable_Referrals, _
'              lRecord_ID, _
'              gtProgressNotes(0).Segments(pnClinicalNotes).SubHeadings(pnReferralLetter_Printed).Notes_order, _
'              Rs
'     Rs.Close
'     Db.Close
'     ws.CommitTrans
'     ws.Close
'     Database_Unlock
'     Exit Sub
' FileAccessError:
'    sMsg = "The letter cannot be saved." & vbLf & vbLf
'    sMsg = sMsg & "The file may be in use by another program."
'    lresponse = MsgBox(sMsg, vbOKOnly, "File access problem")
'    ws.Rollback
'    ws.Close
'    Database_Unlock
'    Exit Sub
' Letter_Exists_error:
'     sMsg = "An identical filename for this letter already exists." & vbLf & vbLf
'     sMsg = sMsg & "Are you sure you want to overwrite the file?"
'     lresponse = MsgBox(sMsg, vbYesNo, "DUPLICATE FILENAME")
'     If lresponse = vbNo Then
'        Rs.Close
'        Db.Close
'        ws.Close
'        Database_Unlock
'        iOverwrite = False
'        Exit Sub
'     End If
'
'     SProgressText = "Letter to " & Trim(Text3(0).Text)
'     If Text5 <> "" Then
'        SProgressText = SProgressText & " re: " & Trim(Text5)
'     End If
'     SProgressText = SProgressText & ", a existing file of the same name " _
'                  & "was overwritten: " & sFname & "'"
'
'     GoTo Createfile:
' End Sub
' Sub Referrals_Letter_Print(sLetterText As String)
'
'     '-------------------------------------
'     'Prints the referral letter to printer
'     '-------------------------------------
'      Printer_Set mrPrinter_PlainPaper
'    With rtb2
'        .Font.Name = "Times New Roman"
'        .Font.Size = 12
'        .RightMargin = 20
'        .Text = sLetterText
'     End With
'    ' sMsg = sLetterText
'     sMsg = left(rtb2.TextRTF, Len(rtb2.TextRTF) - 4)
'     sMsg = sMsg & " \par \F4\FS18\B(The preceeding information has been generated from the " _
'          & "patients electronic medical record. Please note this is " _
'          & "dependant on data entry and may not be complete. There may " _
'          & "also  be  confidential information which has been excluded " _
'          & "from this letter at the patients request) }"
'
'    rtb2.TextRTF = sMsg
'    Printer.Print ""
'    rtb2.SelPrint (Printer.hDC)
'
'
' End Sub
'
'
' Sub SummaryList_Update()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  iZ                            sLastFamilyMember                                       *
' '******************************************************************************************
'
'   '--------------------------------------------------------------------
'     'Checks whole gtpatient array, generates updated list of all
'     'activities this consultation. Destroys and recreates the array
'     '--------------------------------------------------------------------
'     Dim ix As Integer
'     Dim iY As Integer
'     Dim sMsg1 As String
'     Dim sString As String
'     Dim icharpos As Integer
'     On Error Resume Next
'     Erase gtPatient(1).ConsultationSummary()
'     ix = -1
'
'       '------------------------------------------------
'       'Has the doctor been prompted with any overdue's?
'       '------------------------------------------------
'       If Trim(Text6) <> "" Then
'          sMsg1 = "Overdue activities - "
'          sString = TrimNVC(Text6)
'          icharpos = -1
'          Do Until icharpos = 0
'             icharpos = InStr(sString, vbCrLf)
'             If icharpos Then
'                sMsg1 = sMsg1 & left(sString, icharpos - 1) & ", "
'                sString = right(sString, Len(sString) - icharpos)
'             Else
'                sMsg1 = sMsg1 & sString & "."
'             End If
'          Loop
'          ix = ix + 1
'          ReDim Preserve gtPatient(1).ConsultationSummary(ix)
'          gtPatient(1).ConsultationSummary(ix).Text = sMsg1
'          gtPatient(1).ConsultationSummary(ix).Segment_ID = mrOverdues
'       End If
'
'       '---------------------------------------
'       'Have recalls been added or changed
'       '---------------------------------------
'      ' If gtPatient(1).recalls_changed Then
'      '    For icounter = 0 To UBound(gtPatient(1).Recalls())
'      '        If gtPatient(1).Recalls(icounter).DataChanged Then
'      '           ix = ix + 1
'      '           ReDim Preserve gtPatient(1).ConsultationSummary(ix)
'      '           If gtPatient(1).Recalls(icounter).ID = 0 Then '
'      '              gtPatient(1).ConsultationSummary(ix).Heading_ID = mrTextNote
'      '              sMsg1 = "Logged for "
'      '           Else
'      '              gtPatient(1).ConsultationSummary(ix).Heading_ID = mrChanged
'      '              sMsg1 = "For "
'      '           End If
'      '           sMsg1 = sMsg1 & gtPatient(1).Recalls(icounter).Description
'      '           sMsg1 = sMsg1 & " on " & gtPatient(1).Recalls(icounter).Last_date
'      '           sMsg1 = sMsg1 & " to see Dr " & gtPatient(1).Recalls(icounter).Doctor_firstname & " " & gtPatient(1).Recalls(ix).Doctor_Surname
'      '           sMsg1 = sMsg1 & " (" & gtPatient(1).Recalls(icounter).ContactMethod_Name & "). "
'      '           If gtPatient(1).Recalls(icounter).Dealt_with = True Then
'      '              sMsg1 = sMsg1 & "This recall has been archived"
'      '              If gtPatient(1).Recalls(icounter).Memo <> "" Then
'      '                 sMsg1 = sMsg1 & " - " & gtPatient(1).Recalls(icounter).Memo
'      '              End If
'      '              sMsg1 = sMsg1 & "."
'      '           End If
'      '           'MsgBox sMsg1
'      '           gtPatient(1).Recalls(icounter).Summary = sMsg1
'      '           gtPatient(1).ConsultationSummary(ix).Text = sMsg1
'      '           gtPatient(1).ConsultationSummary(ix).Segment = mrRecall
'      '           gtPatient(1).ConsultationSummary(ix).Array_Position = gtPatient(1).Recalls(ix).Array_index
'      '       End If
'      '       Next
'      ' End If
'   '
'     '-----------------------------
'     'Add any referrals to the list
'     '-----------------------------
'      iY = -1 'assume no referrals exist
'      iY = UBound(gtPatient(1).Referrals())
'      If iY <> -1 Then
'         For icounter = 0 To iY
'             ix = ix + 1
'             ReDim Preserve gtPatient(1).ConsultationSummary(ix)
'             sMsg1 = "Referral - letter to " & gtPatient(1).Referrals(icounter).Person.Firstname & " "
'             If gtPatient(1).Referrals(icounter).Organisation.Name <> "" Then
'                sMsg1 = sMsg1 & " at " & gtPatient(1).Referrals(icounter).Organisation.Name & " "
'             End If
'             If gtPatient(1).Referrals(icounter).KeyProblem <> "" Then
'                sMsg1 = sMsg1 & "Re:" & gtPatient(1).Referrals(icounter).KeyProblem
'             End If
'             gtPatient(1).ConsultationSummary(ix).Text = sMsg1
'            ' gtPatient(1).ConsultationSummary(ix).ItemData = CDbl("4" & Format(ix))
'             gtPatient(1).ConsultationSummary(ix).Array_Position = icounter
'             gtPatient(1).ConsultationSummary(ix).Segment = mrReferral
'         Next
'     End If
'
' End Sub
'
' Sub FH_DisplayLists()
'     On Error GoTo D_FHL_Error
'     '-----------------------------------------------
'     'List1(0) contains a list a family members names
'     '-----------------------------------------------
'     List1(0).Clear
'     List1(0).Columns = 1
'
'     For icounter = 0 To UBound(gtPatient(1).FamilyMembers())
'         If gtPatient(1).FamilyMembers(icounter).Deleted = False Then
'             List1(0).AddItem gtPatient(1).FamilyMembers(icounter).Person_Name & " (" & gtPatient(1).FamilyMembers(icounter).Relationship & ")"
'             List1(0).ItemData(List1(0).NewIndex) = icounter
'         End If
'     Next
'     '--------------------------------------------------
'     'now show any diseases for first member on the list
'     '--------------------------------------------------
'
'     If List1(0).ListCount Then
'        bExitRoutine = False
'        List1(0).ListIndex = 0
'        List1_Click (0)
'     End If
'     bExitRoutine = False
'     Exit Sub
' D_FHL_Error:
'          Exit Sub
' End Sub
' Sub Overview_Print()
'     '-------------------------------------------------------------------
'     'Print a summary of all patients allergies, history, medications etc
'     '-------------------------------------------------------------------
'     On Error Resume Next
'     Dim iY As Integer
'     Dim iDisease As Integer
'     Dim iY1 As Integer
'     Dim iy2 As Integer
'     Dim ix As Integer
'     Dim ifamilyMember As Integer
'     Dim sMsg As String
'     Dim slastScheduleName As String
'     '---------------------------------
'     'Ensure medication list is showing
'     '---------------------------------
'     If TDBGrid1(0).Caption <> "Active Medications" Then
'        Script_PastMeds_ViewActive
'     End If
'     '---------------------------
'     'Swap to plain paper printer
'     '---------------------------
'     Printer_Set mrPrinter_PlainPaper
'     '------------------------------
'     'Set up for printing coversheet
'     '------------------------------
'     Printer.ScaleMode = vbMillimeters
'     Printer.PaperSize = vbPRPSA4
'     Printer.DrawWidth = 3
'     Printer.Line (0, 0)-(Printer.ScaleWidth, 0)
'     Printer.Font.Name = "Times New Roman"
'     Printer.Font.Size = 10
'     Printer.CurrentX = 0: Printer.CurrentY = 1
'     ' If iY = 0 Then
'     Printer.Font.Bold = True
'     Printer.Print gtSurgery.Name
'     Printer.Font.Bold = False
'     Printer.Print gtSurgery.Street1
'     Printer.Print gtSurgery.suburb & " " & gtSurgery.Postcode
'     Printer.Print "Phone:" & gtSurgery.Phone
'     iY = Printer.CurrentY
'     Printer.CurrentX = 55: Printer.CurrentY = 5
'     Printer.Font.Size = 16
'     Printer.Font.Bold = True
'     Printer.Print " HEALTH SUMMARY SHEET"
'     Printer.Font.Size = 10
'     Printer.CurrentX = 75: Printer.CurrentY = 14
'     Printer.Print "Printed on " & Format(Now, "Medium Date")
'     Printer.Font.Name = "Comic Sans MS"
'     Printer.Font.Bold = True
'     Printer.Font.Size = 11
'     Printer.CurrentY = 1: Printer.CurrentX = 145
'     Printer.Print UCase(gtPatient(1).Surname);
'     Printer.Font.Bold = False
'     Printer.Print " " & StrConv(gtPatient(1).Firstname, vbProperCase)
'     Printer.Font.Name = "Times New Roman"
'     Printer.Font.Size = 8
'     Printer.CurrentX = 145: 'Printer.CurrentY = 5
'     Printer.Print gtPatient(1).Street1
'     Printer.CurrentX = 145
'     Printer.Print gtPatient(1).suburb & " " & gtPatient(1).Postcode;
'     If gtPatient(1).HomePhone <> "" Then
'        Printer.Print " phone:" & gtPatient(1).HomePhone
'     Else
'        Printer.Print ""
'     End If
'     Printer.CurrentX = 145
'     Printer.Print "Birthdate: ";
'     Printer.Print gtPatient(1).Date_of_Birth
'     Printer.Font.Bold = True
'     Printer.CurrentX = 145
'     Printer.Print "File ";
'     Printer.Print gtPatient(1).Folder_Number
'     Printer.CurrentY = iY + 2
'     Printer.Line (0, Printer.CurrentY)-(Printer.ScaleWidth, Printer.CurrentY)
'     Printer.DrawWidth = 1
'     Printer.Line (0, Printer.CurrentY + 1)-(Printer.ScaleWidth, Printer.CurrentY + 1)
'     Printer.Line (50, 0)-(50, iY + 2)
'     Printer.Line (140, 0)-(140, iY + 2)
'     '---------
'     'Allergies
'     '---------
'     On Error Resume Next
'     ix = UBound(gtPatient(1).Allergies())
'
'     Printer.Font.Bold = True
'     Printer.Font.Size = 10
'     Printer.CurrentX = 0
'     Printer.CurrentY = 22
'     Printer.Print "ALLERGIES/SENSITIVITIES"
'     Printer.Font.Bold = False
'     If Err.Number = 9 Then
'        Printer.Print "Nil recorded"
'     Else
'             For icounter = 0 To UBound(gtPatient(1).Allergies())
'                 If gtPatient(1).Allergies(icounter).Generic_Specific_Reaction = False Then
'                     Printer.Print StrConv(gtPatient(1).Allergies(icounter).Class_Description, vbProperCase);
'                 Else
'                     Printer.Print StrConv(gtPatient(1).Allergies(icounter).Generic, vbProperCase) & " (Generic specific reaction)";
'                 End If
'                 Printer.Print " - " & gtPatient(1).Allergies(icounter).Reaction; " - ";
'                 If gtPatient(1).Allergies(icounter).definite = True Then
'                    Printer.Print "[DEFINATE ";
'                 Else
'                    Printer.Print "[POSSIBLE ";
'                 End If
'                 If gtPatient(1).Allergies(icounter).Type = mrDrug_Allergy Then
'                    Printer.Print " ALLERGY]"
'                 Else
'                    Printer.Print " SENSITIVITY]"
'                 End If
'             Next
'     End If
'     Printer.Print
'     '-------------------
'     'Print a family tree
'     '-------------------
'      Printer.CurrentX = 100
'      Printer.Font.Bold = True
'      Printer.Font.Size = 10
'      iy2 = Printer.CurrentY
'      Printer.Print "FAMILY HISTORY"
'      Printer.Font.Bold = False
'      Printer.Print
'     '----------------------
'     'For each family member
'     '----------------------
'      ifamilyMember = -1 'will remain -1 if no upper bound to this array
'      For ifamilyMember = 0 To UBound(gtPatient(1).FamilyMembers())
'         If ifamilyMember = -1 Then
'            Exit For
'         End If
'         Printer.Font.Bold = True
'         Printer.CurrentX = 100
'         Printer.Print gtPatient(1).FamilyMembers(ifamilyMember).Relationship;
'         If gtPatient(1).FamilyMembers(ifamilyMember).Person_Name <> "" Then
'            Printer.Print " (" & gtPatient(1).FamilyMembers(ifamilyMember).Person_Name & ")";
'         End If
'         If gtPatient(1).FamilyMembers(ifamilyMember).Age_Death <> -1 Then
'            Printer.Print " - died age " & gtPatient(1).FamilyMembers(ifamilyMember).Age_Death
'         Else
'            Printer.Print ""
'         End If
'         Printer.Font.Bold = False
'         '------------------------------
'         'and for each of their diseases
'         '------------------------------
'        For iDisease = 0 To UBound(gtPatient(1).FamilyMembers(ifamilyMember).Conditions())
'             '-------------------------------------------------------
'             'every time a different disease encountered add to array
'             '-------------------------------------------------------
'             Printer.CurrentX = 100
'             sMsg = gtPatient(1).FamilyMembers(ifamilyMember).Conditions(iDisease).Description
'             If gtPatient(1).FamilyMembers(ifamilyMember).Conditions(iDisease).age_Onset <> -1 Then
'                sMsg = sMsg & " onset at age " & gtPatient(1).FamilyMembers(ifamilyMember).Conditions(iDisease).age_Onset
'             End If
'             If gtPatient(1).FamilyMembers(ifamilyMember).Conditions(iDisease).Cause_of_Death = True Then
'                sMsg = sMsg & " [caused death]"
'             End If
'             Printer.Print sMsg
'          Next
'     Next
'     iY = Printer.CurrentY
'     '--------------------
'     'Print social History
'     '--------------------
'      Printer.CurrentX = 0
'      Printer.Font.Bold = True
'      Printer.Font.Size = 10
'      Printer.CurrentY = iy2
'      Printer.Print "SOCIAL HISTORY"
'      Printer.Font.Bold = False
'      Printer.CurrentX = 0
'      If gtPatient(1).socialHistory.history <> "" Then
'         'if pass directly will change the string
'         SH_FormatText sMsg
'         split_lines 65, sMsg
'         For icounter = 0 To UBound(AnyArray())
'             Printer.CurrentX = 0
'             Printer.Print AnyArray(icounter)
'         Next
'      End If
'     '--------------------
'     'Print Occupation etc
'     '--------------------
'     Printer.Print
'     Printer.Font.Bold = True
'     Printer.CurrentX = 0
'     Printer.Print "Occupation "
'     Printer.Font.Bold = False
'     Printer.Print gtPatient(1).Occupation;
'     If gtPatient(1).Retired = True Then
'        Printer.Print " (Retired)"
'     End If
'     Printer.Print
'     Printer.Print
'     '------------
'     'Print Habits
'     '------------
'      Printer.CurrentX = 0
'      Printer.Font.Bold = True
'      Printer.Font.Size = 10
'      Printer.Print "Habits "
'      Printer.Font.Bold = False
'      Printer.Print lblHabits.Caption
'      Printer.Print
'      '-----------------------------------------
'      'Print a line under top section of summary
'      '-----------------------------------------
'      If Printer.CurrentY < iY Then
'         Printer.CurrentY = iY + 2
'      End If
'      Printer.DrawWidth = 2
'      Printer.Line (0, Printer.CurrentY)-(Printer.ScaleWidth, Printer.CurrentY)
'      '-----------------------------------
'      'Print significant past problem list
'      '-----------------------------------
'      Printer.CurrentX = 0
'      Printer.CurrentY = Printer.CurrentY + 2
'      iY = Printer.CurrentY
'      Printer.Font.Bold = True
'      Printer.Print "SIGNIFICANT PAST PROBLEMS"
'      Printer.Print
'      Printer.Font.Bold = False
'      sMsg = ""
'      For icounter = 0 To UBound(gtPatient(1).PastHistory())
'          If gtPatient(1).PastHistory(icounter).active = False Then
'                   Printer.Print gtPatient(1).PastHistory(icounter).Date & "  ";
'             ix = Printer.CurrentX
'             sMsg = gtPatient(1).PastHistory(icounter).Description
'             If gtPatient(1).PastHistory(icounter).Side_of_Body <> 0 Then
'                Select Case gtPatient(1).PastHistory(icounter).Side_of_Body
'                Case 1
'                sMsg = sMsg & " (Left)"
'                Case 2
'                sMsg = sMsg & " (right)"
'                Case 3
'                sMsg = sMsg & " (Right & left)"
'                End Select
'             End If
'             Printer.Print sMsg;
'             Printer.CurrentX = 80
'             sMsg = gtPatient(1).PastHistory(icounter).age_Onset
'             If gtPatient(1).PastHistory(icounter).Age_onset_Units = mrUnits_Months Then
'                sMsg = sMsg & " mth  "
'             Else
'                sMsg = sMsg & " yrs  "
'             End If
'             Printer.Print sMsg
'             If gtPatient(1).PastHistory(icounter).Notes <> "" Then
'                Printer.Font.Size = 8
'                Printer.CurrentX = ix
'                Printer.Print "(" & LCase(gtPatient(1).PastHistory(icounter).Notes) & ")"
'                Printer.Font.Size = 10
'             End If
'          End If
'      Next
'      '-----------------------------------------------------------
'      'Keep current y under significant problem list for later use
'      '-----------------------------------------------------------
'      iY1 = Printer.CurrentY
'      '-------------------------
'      'Currently Active Problems
'      '-------------------------
'      Printer.CurrentY = iY 'reset to same level as significant past problem list
'      Printer.CurrentX = 100
'      Printer.Font.Bold = True
'      Printer.Print "ACTIVE PROBLEMS"
'      Printer.Font.Bold = False
'      Printer.Print
'      sMsg = ""
'      For icounter = 0 To UBound(gtPatient(1).PastHistory())
'          If gtPatient(1).PastHistory(icounter).active = True Then
'             Printer.CurrentX = 100
'             Printer.Print gtPatient(1).PastHistory(icounter).Date & "  ";
'             ix = Printer.CurrentX
'             sMsg = gtPatient(1).PastHistory(icounter).Description
'             If gtPatient(1).PastHistory(icounter).Side_of_Body <> 0 Then
'                Select Case gtPatient(1).PastHistory(icounter).Side_of_Body
'                Case 1
'                sMsg = sMsg & " (Left)"
'                Case 2
'                sMsg = sMsg & " (right)"
'                Case 3
'                sMsg = sMsg & " (Right & left)"
'                End Select
'             End If
'             Printer.Print sMsg;
'             Printer.CurrentX = 180
'             Printer.Print gtPatient(1).PastHistory(icounter).age_Onset & " yrs "
'             If gtPatient(1).PastHistory(icounter).Notes <> "" Then
'                Printer.Font.Size = 8
'                Printer.CurrentX = ix
'                Printer.Print "(" & LCase(gtPatient(1).PastHistory(icounter).Notes) & ")"
'                Printer.Font.Size = 10
'             End If
'
'          End If
'      Next
'      '---------------------------------------------------------------
'      'Now draw a single line under both active and past problem lists
'      '---------------------------------------------------------------
'      If iY1 > Printer.CurrentY Then
'         Printer.CurrentY = iY1 + 2
'      Else
'         Printer.CurrentY = Printer.CurrentY + 2
'      End If
'      iY = Printer.CurrentY
'      Printer.DrawWidth = 2
'      Printer.Line (0, Printer.CurrentY)-(Printer.ScaleWidth, Printer.CurrentY)
'      '-----------
'      'Medications
'      '-----------
'      Printer.Font.Bold = True
'      Printer.CurrentX = 0
'      Printer.CurrentY = iY + 2
'      Printer.Print "MEDICATIONS"
'      Printer.Font.Bold = False
'      sMsg = ""
'      If RecordsExist(Data2) Then
'            With Data2.Recordset
'            .MoveFirst
'            Do Until .EOF
'               Printer.Font.Bold = True
'               Printer.Print Data2.Recordset!drug;
'               Printer.Font.Bold = False
'               Printer.CurrentX = 50
'               sMsg = ""
'               sMsg = Data2.Recordset!active & "" & Data2.Recordset!active_units
'               If Not IsNull(Data2.Recordset!per_volume) Then
'                  sMsg = sMsg & "/"
'               End If
'               sMsg = sMsg & "" & Data2.Recordset!per_volume _
'                    & "" & Data2.Recordset!per_vol_units & " " _
'                    & "" & Data2.Recordset!unit_volume _
'                    & "" & Data2.Recordset!unit_vol_units
'               Printer.Print sMsg;
'               Printer.Font.Bold = False
'               Printer.CurrentX = 85
'               Printer.Print Data2.Recordset!Instruction;
'               Printer.CurrentX = 155
'               Printer.Print Data2.Recordset!Prescribed_For
'              .MoveNext
'            Loop
'            End With
'
'       Else
'          Printer.Print "Nil recorded"
'       End If
'       '----------------------------------
'       'Print a line under the Medications
'       '----------------------------------
'       Printer.CurrentY = Printer.CurrentY + 2
'       Printer.Line (0, Printer.CurrentY)-(Printer.ScaleWidth, Printer.CurrentY)
'       '------------------------------------------------------------------
'       'Print Immunisations as eg Influenza 01/03/1998, 04/4/1999 .... etc
'       '------------------------------------------------------------------
'       Printer.CurrentX = 0
'       Printer.Font.Bold = True
'       Printer.Print "IMMUNISATIONS"
'       On Error Resume Next
'      ' On Error GoTo 0
'       icounter = -1
'       icounter = UBound(gtPatient(1).Vaccinations())
'       If icounter <> -1 Then
'          For icounter = 0 To UBound(gtPatient(1).Vaccinations())
'             If gtPatient(1).Vaccinations(icounter).Schedule.Name <> slastScheduleName _
'                 And gtPatient(1).Vaccinations(icounter).Deleted <> True Then
'                 Printer.Print
'                 Printer.Font.Bold = True
'                 Printer.Print gtPatient(1).Vaccinations(icounter).Schedule.Name;
'                 Printer.CurrentX = 50
'                 Printer.Font.Bold = False
'                 For ix = 0 To UBound(gtPatient(1).Vaccinations())
'                     If gtPatient(1).Vaccinations(ix).Schedule.ID = gtPatient(1).Vaccinations(icounter).Schedule.ID _
'                          And gtPatient(1).Vaccinations(ix).Deleted <> True Then
'                         ' Printer.CurrentX = 0
'                          Printer.Print gtPatient(1).Vaccinations(ix).Date_given;
'                          Printer.Font.Size = 9
'                          Printer.Print " (";
'                          Printer.Print gtPatient(1).Vaccinations(ix).Vaccine.Trade_Name & ")   ";
'                          Printer.Font.Size = 10
'
'                         ' Printer.Print " (";
'                          'Printer.Print gtPatient(1).Vaccinations(ix).Vaccine.Formulation;
'                          'Printer.Print ")  ";
'                     End If
'                 Next
'                 Printer.Font.Bold = False
'                 slastScheduleName = gtPatient(1).Vaccinations(icounter).Schedule.Name
'             End If
'         Next
'
'       Else
'         Printer.Print "No immunisations are recorded"
'       End If
'       '------------------------------------
'       'Print a line under the Immunisations
'       '------------------------------------
'       Printer.CurrentY = Printer.CurrentY + 10
'       Printer.Line (0, Printer.CurrentY)-(Printer.ScaleWidth, Printer.CurrentY)
'     Printer.EndDoc
' End Sub
'
' Sub SH_FormatText(sMsg As String)
'         sMsg = ""
'         If gtPatient(1).Ethnicity.Country <> "" Then
'           sMsg = "Born in  " & gtPatient(1).Ethnicity.Country & ". "
'         End If
'         If gtPatient(1).Ethnicity.Language <> "" Then
'              sMsg = sMsg & "Speaks " & gtPatient(1).Ethnicity.Language & ". "
'         End If
'         If gtPatient(1).Occupation <> "" Then
'             If gtPatient(1).Retired = True Then
'                 sMsg = sMsg & "Retired " & gtPatient(1).Occupation
'             Else
'                 sMsg = sMsg & "Occupation " & gtPatient(1).Occupation
'             End If
'                 sMsg = sMsg & ". "
'         End If
'            If gtPatient(1).Ethnicity.Aboriginal = True Then
'             sMsg = sMsg & "Aboriginal. "
'            ElseIf gtPatient(1).Ethnicity.Torres_Strait_Islander = True Then
'             sMsg = sMsg & "Torres-Strait Islander. "
'            End If
'            sMsg = sMsg & gtPatient(1).socialHistory.history
' End Sub
' Sub Script_ProductInformation_Get(drug As String, Formulation As String)
'   '-----------------------------------------------------------------
'   'Get the product information for a drug. Used by Command3_Click(3)
'   '-----------------------------------------------------------------
'   'On Error GoTo Script_ProductInformation_Get_ERror
'   Dim iFoundpos As Integer
'   Dim iSpcPos As Integer
'   Dim strGeneric As String
'   Dim iNoOfTrys As Integer
'   Dim sDrugCopy As String
'   sDrugCopy = drug
'   bExitRoutine = True
'   Set Db = OpenDatabase(sDrugs_MdB)
'   '------------------------------------------------
'   'first query is exact match to patients drug name
'   '------------------------------------------------
'   Set Q = Db.QueryDefs("MRQ_Script_GetPI_HaveBrandAndForm")
'   iNoOfTrys = 1
' SecondTry:
'   strGeneric = ""
'   Q("Enter Brand") = sDrugCopy
'   Q("Enter Form") = Formulation
'   Set Rs = Q.OpenRecordset(dbOpenDynaset)
'   '--------------------------------------------------------
'   'If no drug match found, prompt to search for close match
'   '--------------------------------------------------------
'   If Rs.EOF + Rs.BOF = -2 Then
'
'         sMsg = "The product information for " & drug & " could not be found." & vbLf & vbLf
'         sMsg = sMsg & "The product name may have changed in the drug database since the "
'         sMsg = sMsg & "the time it was last prescribed. Please consult your "
'         sMsg = sMsg & "drug reference system." & vbLf & vbLf
'         If iNoOfTrys = 1 Then
'             sMsg = sMsg & "Would you like to see possible alternatives?"
'             lresponse = MsgBox(sMsg, vbYesNo, "Brief Product Information")
'             If lresponse = vbYes Then
'                 '------------------------------------------------------------
'                 'drug name may have one or more words in it, so keep maximum
'                 'number of discrete words less one eg if drug was panadeine
'                 'forte caplets, would next search on panadeine forte. If drug
'                 'was a single word, seach of left 4 characters - arbitary
'                 '------------------------------------------------------------
'                 sDrugCopy = drug
'                 iSpcPos = InStr(sDrugCopy, " ")
'                 If iSpcPos Then
'                    sMsg = right(sDrugCopy, Len(sDrugCopy) - iSpcPos)
'                    sDrugCopy = left(sDrugCopy, iSpcPos - 1)
'                    iSpcPos = InStr(sMsg, " ")
'                    If iSpcPos Then
'                       sDrugCopy = sDrugCopy & " " & left(sMsg, iSpcPos - 1)
'                    End If
'                 Else
'                    sDrugCopy = left(sDrugCopy, 4)
'                 End If
'                 '---------------------------------------------------------
'                 'Change the query to one searching for names like the drug
'                 '---------------------------------------------------------
'                 Set Q = Db.QueryDefs("MRQ_Script_GetPI_SimilarDrugs")
'                 iNoOfTrys = 2
'                 GoTo SecondTry
'
'             Else
'                Rs.Close
'                Db.Close
'                TDBGrid1(0).SetFocus
'                bExitRoutine = False
'      Exit Sub
'             End If
'         Else
'                sMsg = "Product information for a close alternative with "
'                sMsg = sMsg & "similar sounding name could not be found." & vbLf & vbLf
'                sMsg = sMsg & "Please consult your drug reference system."
'                lresponse = MsgBox(sMsg, vbOKOnly, "Drug not found")
'                Rs.Close
'                Db.Close
'                  bExitRoutine = False
'                   TDBGrid1(0).SetFocus
'      Exit Sub
'         End If
'   Else
'         If iNoOfTrys = 2 Then
'         '-----------------------------------------------------------
'         'this is the second try to find a match to a drug name which
'         'is no longer valid. The recordset may consist of multiple
'         'drug names eg if second try criteria was 'gluc*' then could
'         'have glucose, glucobay etc ie different products
'         '------------------------------------------------------------
'             With Rs
'                 sMsg = !Brand
'                 Do Until .EOF
'                     If !Brand <> sMsg Then
'                       '-------------------------
'                       ' Display_CloseDrugMatches
'                       '-------------------------
'                        'Temp_configure_TDBG1
'                        sMsg = "There is no close match for this drug." & vbLf & vbLf
'                        sMsg = sMsg & "Please consult your drug reference system."
'                        lresponse = MsgBox(sMsg, vbOKOnly, "Drug not found")
'                       .Close
'                        Db.Close
'    Exit Sub
'                     Else
'                       .MoveNext
'                     End If
'
'                 Loop
'                  .MoveFirst
'              End With
'           End If
'         '--------------------------------------------
'         'Drug has been found, there may be more than
'         'one generic component
'         '--------------------------------------------
'         With Rs
'              strGeneric = Rs!Generic & ", "
'              .MoveNext
'              Do Until .EOF
'                 If InStr(strGeneric, !Generic) = False Then
'                      strGeneric = strGeneric & !Generic & ", "
'                 End If
'                 .MoveNext
'              Loop
'              strGeneric = left(strGeneric, Len(strGeneric) - 2)
'              .MoveFirst
'          End With
'
'
'
'   End If
'   '--------------------------------
'   'load template for the PI display
'   '--------------------------------
'   RichTextBox1(1).FileName = sMain_Dir & "\templates\template product information.rtf"
'   '-------------------------------
'   'Now substitute data for the tags
'   '-------------------------------
'    Label4.Caption = UCase(Rs!Brand)
'    Label4.Visible = True
'    '------------
'    'Generic name
'    '------------
'     iFoundpos = RichTextBox1(1).Find("(Generic)", , , rtfWholeWord)
'     RichTextBox1(1).SelText = strGeneric
'    '--------------
'    'Script needed?
'    '--------------
'    iFoundpos = RichTextBox1(1).Find("(Script)", , , rtfWholeWord)
'    If LCase(Rs!Rx) = "yes" Then
'       RichTextBox1(1).SelText = "Script needed"
'    Else
'       RichTextBox1(1).SelText = "Script not needed"
'    End If
'    '-----------------
'    'Sport information
'    '-----------------
'    iFoundpos = RichTextBox1(1).Find("(Sport)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!sportcodetxt & vbLf
'    '---------------
'    'Contains gluten
'    '---------------
'    iFoundpos = RichTextBox1(1).Find("(Gluten)", , , rtfWholeWord)
'    If LCase(Rs!gf) = "yes" Then
'       RichTextBox1(1).SelText = "Gluten free"
'    Else
'       RichTextBox1(1).SelText = ""
'    End If
'    '---------------------------------------------------
'    'Pregnancy category add to top bar with hotspot hand
'    '---------------------------------------------------
'    If Not IsNull(Rs!pc) Then
'          'Label1.Visible = False
'          With Label1
'             .BackColor = vbPurple
'            ' .left = sspanel2(0).width - Label1.width - 100
'             .height = Label4.height
'             .ForeColor = vbWhite
'             .Caption = "  PREG:" & Rs!pc
'             .Font.Bold = True
'             .Visible = True
'             .left = Picture5.width - .width - 100
'             .toP = Label4.toP
'
'          End With
'          sMsg = "PREGNANCY CATEGORY " & Rs!pc & vbLf & vbLf
'          sMsg = sMsg & Rs!Preg_description 'in case want to show this
'    End If
'    '-------------------
'    'Indications for use
'    '-------------------
'    iFoundpos = RichTextBox1(1).Find("(Use)", , , rtfWholeWord)
'    If Not IsNull(Rs!use) Then
'       RichTextBox1(1).SelText = "" & Rs!use
'    Else
'       RichTextBox1(1).SelText = ""
'    End If
'    iFoundpos = RichTextBox1(1).Find("(Contraindications)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!ci
'    iFoundpos = RichTextBox1(1).Find("(Adverse reactions)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!ar
'    iFoundpos = RichTextBox1(1).Find("(Precautions)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!pr
'    iFoundpos = RichTextBox1(1).Find("(Interactions)", , , rtfWholeWord)
'    If Not IsNull(Rs!ir) Then
'        RichTextBox1(1).SelText = "" & Rs!ir
'    Else
'        RichTextBox1(1).SelText = "consult full product information"
'    End If
'    iFoundpos = RichTextBox1(1).Find("(Warnings)", , , rtfWholeWord)
'    If Not IsNull(Rs!wa) Then
'       RichTextBox1(1).SelText = "" & Rs!wa
'    Else
'       RichTextBox1(1).SelText = "No additional warnings"
'    End If
'    iFoundpos = RichTextBox1(1).Find("(Dose and administration)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!da
'    iFoundpos = RichTextBox1(1).Find("(Composition)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!Co
'    iFoundpos = RichTextBox1(1).Find("(MimsAnnual)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!Manpage
'    RichTextBox1(1).SelStart = 0
'    Make_RTB1_BIG 1
'    Command2(3).Caption = "Print PI"
'    With Picture5
'         .left = Picture3.left
'         .toP = Picture3.toP
'         .height = Picture3.height
'         .width = Picture3.width
'         If .Visible = False Then
'             .Visible = True 'the container
'         End If
'         .ZOrder
'    End With
'    Rs.Close
'    iCentralDisplay = cCentralDisplay_PI
'     Pego1.Visible = False
'    With Label5
'              .Font.Name = "Verdana"
'              .Font.Size = 7
'              .Font.Italic = False
'              .ForeColor = vbRed
'              .BackColor = vbLightGrey
'    End With
'    Set Rs = Db.OpenRecordset("Issue", dbOpenTable)
'    With Rs
'        Label5.Caption = "Mims " & !issue
'        .Close
'    End With
'    Db.Close
'    With Command2(3)
'         .Visible = True 'Print PI
'         .Caption = "Print PI"
'    End With
'    With Command2(4)
'     .Visible = True  'Close
'     .Caption = "Close"
'    End With
'   bExitRoutine = False
'    Picture2.Visible = False
'   Exit Sub
'
'    On Error Resume Next
'
'    Rs.Close
'    Db.Close
'    On Error GoTo 0
'    bExitRoutine = False
'
'    DoEvents
'    Exit Sub
'
' End Sub
' Sub Script_ProductInformation_Get1(drug As String)
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  iNextPos                      iLength                                                 *
' '*                                                                                        *
' '* Local Labels (Removed)                                                                 *
' '*  Script_ProductInformation_Get_ERror                                                                          *
' '******************************************************************************************
'
'
'   'On Error GoTo Script_ProductInformation_Get_ERror
'   Dim iFoundpos As Integer
'   Dim iSpcPos As Integer
'   Dim strGeneric As String
'   Dim iNoOfTrys As Integer
'   Dim sDrugCopy As String
'   sDrugCopy = drug
'   bExitRoutine = True
'   Set Db = OpenDatabase("c:\medrec\data\sc_drugs7.mdb")
'   '------------------------------------------------
'   'first query is exact match to patients drug name
'   '------------------------------------------------
'   Set Q = Db.QueryDefs("MRQ_Script_GetPI_HaveBrand")
'   iNoOfTrys = 1
' SecondTry:
'   strGeneric = ""
'   Q("Enter Brand") = sDrugCopy
'   'Q("Enter Form") = Formulation
'   Set Rs = Q.OpenRecordset(dbOpenDynaset)
'   'Data2.DatabaseName = "d:\drsdesk\sc_drugs.mdb"
'   'Dim q1
'
'   'Data2.RecordSource = QueryDefs.   ("GetPI")
'   'Data2.Refresh
' '
'  ' Set RsClone = Rs.Clone
'   '--------------------------------------------------------
'   'If no drug match found, prompt to search for close match
'   '--------------------------------------------------------
'   If Rs.EOF + Rs.BOF = -2 Then
'
'         sMsg = "The product information for " & drug & " could not be found." & vbLf & vbLf
'         sMsg = sMsg & "The product name may have changed in the drug database since the "
'         sMsg = sMsg & "the time it was last prescribed. Please consult your "
'         sMsg = sMsg & "drug reference system." & vbLf & vbLf
'         If iNoOfTrys = 1 Then
'             sMsg = sMsg & "Would you like to see possible alternatives?"
'             lresponse = MsgBox(sMsg, vbYesNo, "Brief Product Information")
'             If lresponse = vbYes Then
'                 '------------------------------------------------------------
'                 'drug name may have one or more words in it, so keep maximum
'                 'number of discrete words less one eg if drug was panadeine
'                 'forte caplets, would next search on panadeine forte. If drug
'                 'was a single word, seach of left 4 characters - arbitary
'                 '------------------------------------------------------------
'                 sDrugCopy = drug
'                 iSpcPos = InStr(sDrugCopy, " ")
'                 If iSpcPos Then
'                    sMsg = right(sDrugCopy, Len(sDrugCopy) - iSpcPos)
'                    sDrugCopy = left(sDrugCopy, iSpcPos - 1)
'                    iSpcPos = InStr(sMsg, " ")
'                    If iSpcPos Then
'                       sDrugCopy = sDrugCopy & " " & left(sMsg, iSpcPos - 1)
'                    End If
'                 Else
'                    sDrugCopy = left(sDrugCopy, 4)
'                 End If
'                 '---------------------------------------------------------
'                 'Change the query to one searching for names like the drug
'                 '---------------------------------------------------------
'                 Set Q = Db.QueryDefs("MRQ_Script_GetPI_SimilarDrugs")
'                 iNoOfTrys = 2
'                 GoTo SecondTry
'
'             Else
'                Rs.Close
'                Db.Close
'                bExitRoutine = False
'      Exit Sub
'             End If
'         Else
'                sMsg = "Product information for a close alternative with "
'                sMsg = sMsg & "similar sounding name could not be found." & vbLf & vbLf
'                sMsg = sMsg & "Please consult your drug reference system."
'                lresponse = MsgBox(sMsg, vbOKOnly, "Drug not found")
'                Rs.Close
'                Db.Close
'      Exit Sub
'         End If
'   Else
'         If iNoOfTrys = 2 Then
'         '-----------------------------------------------------------
'         'this is the second try to find a match to a drug name which
'         'is no longer valid. The recordset may consist of multiple
'         'drug names eg if second try criteria was 'gluc*' then could
'         'have glucose, glucobay etc ie different products
'         '------------------------------------------------------------
'             With Rs
'                 sMsg = !Brand
'                 Do Until .EOF
'                     If !Brand <> sMsg Then
'                       '-------------------------
'                       ' Display_CloseDrugMatches
'                       '-------------------------
'                        'Temp_configure_TDBG1
'                        sMsg = "There is no close match for this drug." & vbLf & vbLf
'                        sMsg = sMsg & "Please consult your drug reference system."
'                        lresponse = MsgBox(sMsg, vbOKOnly, "Drug not found")
'
'                       '.MoveFirst
'
'                     'Set Data2.Recordset = Rs.Clone
'                     ' Data2.Refresh
'                       'TDBGrid1.ReBind
'                        .Close
'                        Db.Close
'    Exit Sub
'                     Else
'                       .MoveNext
'                     End If
'
'                 Loop
'                  .MoveFirst
'              End With
'           End If
'         '--------------------------------------------
'         'Drug has been found, there may be more than
'         'one generic component
'         '--------------------------------------------
'         With Rs
'              strGeneric = Rs!Generic & ", "
'              .MoveNext
'              Do Until .EOF
'                 If InStr(strGeneric, !Generic) = False Then
'                      strGeneric = strGeneric & !Generic & ", "
'                 End If
'                 .MoveNext
'              Loop
'              strGeneric = left(strGeneric, Len(strGeneric) - 2)
'              .MoveFirst
'          End With
'
'
'
'   End If
'   '--------------------------------
'   'load template for the PI display
'   '--------------------------------
'   RichTextBox1(1).FileName = "c:\medrec\templates\template product information.rtf"
'   '-------------------------------
'   'Now subsitute data for the tags
'   '-------------------------------
'    Label4.Caption = UCase(Rs!Brand)
'    Label4.Visible = True
'    '------------
'    'Generic name
'    '------------
'     iFoundpos = RichTextBox1(1).Find("(generic)", , , rtfWholeWord)
'     RichTextBox1(1).SelText = strGeneric
'    '--------------
'    'Script needed?
'    '--------------
'    iFoundpos = RichTextBox1(1).Find("(script)", , , rtfWholeWord)
'    If LCase(Rs!Rx) = "yes" Then
'       RichTextBox1(1).SelText = "needed"
'    Else
'       RichTextBox1(1).SelText = "not needed"
'    End If
'    '-----------------
'    'Sport information
'    '-----------------
'    iFoundpos = RichTextBox1(1).Find("(Sport)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!sportcodetxt & vbLf
'    '---------------
'    'Contains gluten
'    '---------------
'    iFoundpos = RichTextBox1(1).Find("(gluten)", , , rtfWholeWord)
'    If LCase(Rs!gf) = "yes" Then
'       RichTextBox1(1).SelText = "free"
'    Else
'       RichTextBox1(1).SelText = ""
'    End If
'    '---------------------------------------------------
'    'Pregnancy category add to top bar with hotspot hand
'    '---------------------------------------------------
'    If Not IsNull(Rs!pc) Then
'          Label1.Visible = False
'          With Label1
'             .BackColor = vbPurple
'             .left = sspanel2(0).width - Label1.width - 100
'             .height = sspanel2(0).height
'             .ForeColor = vbWhite
'             .Caption = "  PREG:" & Rs!pc
'             .Font.Bold = True
'             .Visible = True
'          End With
'          sMsg = "PREGNANCY CATEGORY " & Rs!pc & vbLf & vbLf
'          sMsg = sMsg & Rs!Preg_description 'in case want to show this
'    End If
'    '-------------------
'    'Indications for use
'    '-------------------
'    iFoundpos = RichTextBox1(1).Find("(Use)", , , rtfWholeWord)
'    If Not IsNull(Rs!use) Then
'       RichTextBox1(1).SelText = "" & Rs!use
'    Else
'       RichTextBox1(1).SelText = ""
'    End If
'    iFoundpos = RichTextBox1(1).Find("(contraindications)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!ci
'    iFoundpos = RichTextBox1(1).Find("(adverse reactions)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!ar
'    iFoundpos = RichTextBox1(1).Find("(precautions)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!pr
'    iFoundpos = RichTextBox1(1).Find("(interactions)", , , rtfWholeWord)
'    If Not IsNull(Rs!ir) Then
'        RichTextBox1(1).SelText = "" & Rs!ir
'    Else
'        RichTextBox1(1).SelText = "consult full product information"
'    End If
'    iFoundpos = RichTextBox1(1).Find("(warnings)", , , rtfWholeWord)
'    If Not IsNull(Rs!wa) Then
'       RichTextBox1(1).SelText = "" & Rs!wa
'    Else
'       RichTextBox1(1).SelText = "No additional warnings"
'    End If
'    iFoundpos = RichTextBox1(1).Find("(dose and administration)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!da
'    iFoundpos = RichTextBox1(1).Find("(composition)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!Co
'    iFoundpos = RichTextBox1(1).Find("(MimsAnnual)", , , rtfWholeWord)
'    RichTextBox1(1).SelText = "" & Rs!Manpage
'    RichTextBox1(1).SelStart = 0
'    Command2(3).Caption = "Print PI"
'    With RichTextBox1(1)
'     .toP = sspanel2(5).height
'     .left = 0
'     .height = Picture3.height - sspanel2(5).height - Label5.height
'     .width = Picture3.width '- shape_left_outline.width - shape_right_outline.width
'     .ZOrder
'    End With
'    With Picture5
'         .left = Picture3.left
'         .toP = Picture3.toP
'         .height = Picture3.height
'         .width = Picture3.width
'         .Visible = True 'the container
'         .ZOrder
'    End With
'    Rs.Close
'    Pego1.Visible = False
'    iCentralDisplay = cCentralDisplay_PI
'    With Label5
'              .Font.Name = "Verdana"
'              .Font.Size = 7
'              .Font.Italic = False
'              .ForeColor = vbRed
'    End With
'    Set Rs = Db.OpenRecordset("Issue", dbOpenTable)
'    With Rs
'        Label5.Caption = Space$(50) & "Mims " & !issue
'        .Close
'    End With
'    Db.Close
'   bExitRoutine = False
'    Picture2.Visible = False
'   Exit Sub
'
'    On Error Resume Next
'
'    Rs.Close
'    Db.Close
'    On Error GoTo 0
'    bExitRoutine = False
'
'    DoEvents
'    Exit Sub
'
'
' End Sub
' Sub Script_PI_Print()
'     '---------------------------
'     'Swap to blank paper printer
'     '---------------------------
'     If mrPromptBeforePrint = False Then
'         Printer_Set mrPrinter_PlainPaper
'     End If
'     Printer.Print ""
'     RichTextBox1(1).SelPrint Printer.hDC
'  End Sub
'
'
'
' Private Sub Referrals_Letter_Generate(PrvText As String)
'     bExitRoutine = True
'    ' Dim PrvText As String
'     Dim ix As Integer
'     '--------------
'     'Letter Heading
'     '--------------
'     PrvText = ""
'     PrvText = gtSurgery.Name & vbCrLf
'     PrvText = PrvText & gtSurgery.Street1 & vbCrLf
'     If gtSurgery.Street2 <> "" Then
'         PrvText = PrvText & gtSurgery.Street2 & vbCrLf
'     End If
'     PrvText = PrvText & gtSurgery.suburb & gtSurgery.Postcode & vbCrLf
'     PrvText = PrvText & "Phone:" & gtSurgery.Phone & vbCrLf
'     PrvText = PrvText & "Fax  :" & gtSurgery.Fax & vbCrLf
'     PrvText = PrvText & "Email:" & gtSurgery.Email & vbCrLf & vbCrLf
'     '---------------
'     'Insert the date
'     '---------------
'     PrvText = PrvText & Format(Now, "dd/mm/yyyy") & vbCrLf & vbCrLf
'     '----------------------------------------
'     'Insert the person referring to if exists
'     '  Header looks like:
'     '  Person name
'     '  Clinic if it exists
'     '  Organisation if it exists
'     '  Address if it exists
'     '----------------------------------------
'     If Text3(0) <> "" Then
'         PrvText = PrvText & Trim(Text3(0)) & vbCrLf
'     End If
'      '--------------------------------------------
'     'Organisation name exists, insert its address
'     '--------------------------------------------
'     If gtNew_Referral(0).Organisation.Name <> "" Then
'                PrvText = PrvText & gtNew_Referral(0).Organisation.Name & vbCrLf
'     End If
'     '----------------------------
'     'Now the address if it exists
'     '----------------------------
'     If gtNew_Referral(0).Address.Street1 <> "" Then
'        PrvText = PrvText & gtNew_Referral(0).Address.Street1 & vbCrLf
'         If gtNew_Referral(0).Address.Street2 <> "" Then
'            PrvText = PrvText & gtNew_Referral(0).Address.Street2 & vbCrLf
'         End If
'         If gtNew_Referral(0).Address.Street3 <> "" Then
'            PrvText = PrvText & gtNew_Referral(0).Address.Street3 & vbCrLf
'         End If
'         PrvText = PrvText & gtNew_Referral(0).Address.suburb & " " & gtNew_Referral(0).Address.Postcode & vbCrLf
'     End If
'     '---------------------
'     'Insert communications
'     '---------------------
'     If gtNew_Referral(0).Organisation.ID <> 0 And gtNew_Referral(0).Organisation.Communication.Work_Phone <> "" Then
'            PrvText = PrvText & gtNew_Referral(0).Organisation.Communication.Work_Phone & vbCrLf
'     ElseIf gtNew_Referral(0).Organisation.ID = 0 And gtNew_Referral(0).Person.Communication.Work_Phone <> "" Then
'            PrvText = PrvText & gtNew_Referral(0).Person.Communication.Work_Phone & vbCrLf
'     End If
'     '-------------------------------------
'     'Inset the name of person referring to
'     '-------------------------------------
'     PrvText = PrvText & vbCrLf & "Dear "
'     If check1(6).Value = 1 Then
'        If gtNew_Referral(0).Person.Firstname <> "" Then
'           PrvText = PrvText & gtNew_Referral(0).Person.Firstname & "," & vbCrLf & vbCrLf
'        End If
'     Else
'         If gtNew_Referral(0).Person.Title <> "" Then
'            PrvText = PrvText & gtNew_Referral(0).Person.Title & " "
'         End If
'         PrvText = PrvText & gtNew_Referral(0).Person.Surname & ", " & vbCrLf & vbCrLf
'     End If
'     '--------------------------
'     'Inset the patients details
'     '--------------------------
'     PrvText = PrvText & "Re: " & gtPatient(1).Firstname & " " & gtPatient(1).Surname & " "
'     PrvText = PrvText & gtPatient(1).Street1 & " " & gtPatient(1).Street2 & " "
'     PrvText = PrvText & gtPatient(1).suburb & " " & gtPatient(1).Postcode
'     PrvText = PrvText & " DOB: " & gtPatient(1).Date_of_Birth & " Age:" & gtPatient(1).Age & vbCrLf & vbCrLf
'     '-------------------
'     'Reason for referral
'     '-------------------
'     PrvText = PrvText & "TYPE OF REFERRAL: " & UCase(Text3(cReferrals_ReasonFor)) & vbCrLf
'     '-----------------------------------------------------
'     'Add any extra referral details typed in by the doctor
'     '-----------------------------------------------------
'     If RichTextBox1(0).Text <> "" Then
'        sReferralText = RichTextBox1(0).Text
'        PrvText = PrvText & vbCrLf & RichTextBox1(0).Text & vbCrLf 'buggy
'     Else
'        sTempText = ""
'     End If
'     '----------------------
'     'Insert Active Problems
'     '----------------------
'      If check1(4).Value Then
'         On Error Resume Next
'         ix = -1
'         ix = UBound(gtPatient(1).PastHistory())
'         If ix <> -1 Then
'             PrvText = PrvText & vbCrLf & "Active Problems include "
'             For icounter = 0 To UBound(gtPatient(1).PastHistory())
'              If gtPatient(1).PastHistory(icounter).active = True _
'                 And gtPatient(1).PastHistory(icounter).Confidential = False Then
'                 PrvText = PrvText & gtPatient(1).PastHistory(icounter).Description
'                 '----------------------
'                 'include lateralisation
'                 '----------------------
'                 If gtPatient(1).PastHistory(icounter).Side_of_Body <> 0 Then
'                    Select Case gtPatient(1).PastHistory(icounter).Side_of_Body
'                    Case 1
'                    PrvText = PrvText & " (Left)"
'                    Case 2
'                    PrvText = PrvText & " (Right)"
'                    Case 3
'                    PrvText = PrvText & " (Bilateral)"
'                    End Select
'                 End If
'                 '------------------------------------
'                 'Include any clinical notes with this
'                 '------------------------------------
'                 If gtPatient(1).PastHistory(icounter).Notes <> "" Then
'                     PrvText = PrvText & "-" & LCase(gtPatient(1).PastHistory(icounter).Notes)
'                 End If
'                 '----------------------------
'                 'Date problem occurred/noted
'                 '---------------------------
'                  PrvText = PrvText & " [" & gtPatient(1).PastHistory(icounter).Date & "], "
'              End If
'         Next
'       End If
'       PrvText = left(PrvText, Len(PrvText) - 2) & "." & vbCrLf
'     End If
'     '--------------------------
'     'generate past problem list
'     '--------------------------
'     If check1(3).Value Then
'        On Error Resume Next
'        icounter = -1
'        icounter = UBound(gtPatient(1).PastHistory())
'        If icounter <> -1 Then
'          For icounter = 0 To UBound(gtPatient(1).PastHistory())
'              If gtPatient(1).PastHistory(icounter).active = False _
'                 And gtPatient(1).PastHistory(icounter).Confidential = False Then
'                     If InStr(1, PrvText, "Significant past problems include") = False Then
'                     PrvText = PrvText & vbCrLf & "Significant past problems include "
'                 End If
'                 PrvText = PrvText & gtPatient(1).PastHistory(icounter).Description
'                 '----------------------
'                 'include lateralisation
'                 '----------------------
'                  If gtPatient(1).PastHistory(icounter).Side_of_Body <> 0 Then
'                     Select Case gtPatient(1).PastHistory(icounter).Side_of_Body
'                     Case 1
'                     PrvText = PrvText & " (Left)"
'                     Case 2
'                     PrvText = PrvText & " (Right)"
'                     Case 3
'                     PrvText = PrvText & " (Bilateral)"
'                     End Select
'                End If
'                '------------------------------------
'                'Include any clinical notes with this
'                '------------------------------------
'                   If gtPatient(1).PastHistory(icounter).Notes <> "" Then
'                     PrvText = PrvText & "-" & LCase(gtPatient(1).PastHistory(icounter).Notes)
'                   End If
'                '----------------------------
'                'Date problem occurred/noted
'                '---------------------------
'                 PrvText = PrvText & " [" & gtPatient(1).PastHistory(icounter).Date & "], "
'              End If
'          Next
'          PrvText = left(PrvText, Len(PrvText) - 2) & "." & vbCrLf
'        End If
'     End If
'       '---------------------
'     'Insert Family History
'     '---------------------
'     If check1(2).Value Then
'          GenerateText_DiseasesInFamily sSql
'          If sSql <> "" Then
'             PrvText = PrvText & vbCrLf & "There is a family history of " & sSql & vbCrLf
'          End If
'     End If
'     '------------------
'     'Add social History
'     '------------------
'     If check1(1).Value Then
'        If gtPatient(1).socialHistory.history <> "" Then
'          PrvText = PrvText & vbCrLf & "Social History - " & gtPatient(1).socialHistory.history & vbCrLf
'        End If
'     End If
'     '--------------------
'     'Insert habit details
'     '--------------------
'     If check1(5).Value Then
'        RecreationalDrugs_Smoking_GenerateText
'        If sMsg <> "" Then
'             PrvText = PrvText & vbCrLf & sMsg
'        End If
'        RecreationalDrugs_Alcohol_Generate_Text
'        If sMsg <> "" Then
'           PrvText = PrvText & vbCrLf & sMsg & vbCrLf
'        End If
'     End If
'     '-----------------
'     'Include allergies
'     '-----------------
'     On Error Resume Next
'     ix = UBound(gtPatient(1).Allergies())
'     If Err.Number <> 9 Then
'        PrvText = PrvText & vbCrLf & "Allergies:"
'        For icounter = 0 To UBound(gtPatient(1).Allergies())
'            PrvText = PrvText & " " & StrConv(gtPatient(1).Allergies(icounter).Class_Description, vbProperCase)
'            If gtPatient(1).Allergies(icounter).Reaction <> "" Then
'                 PrvText = PrvText & " - reaction " & StrConv(gtPatient(1).Allergies(icounter).Reaction, vbLowerCase)
'            End If
'            PrvText = PrvText & " noted with the drug " _
'             & gtPatient(1).Allergies(icounter).Product & " ["
'            If gtPatient(1).Allergies(icounter).definite = True Then
'               PrvText = PrvText & "DEFINATE],"
'            Else
'               PrvText = PrvText & "POSSIBLE],"
'            End If
'         Next
'         PrvText = left(PrvText, Len(PrvText) - 1) & "." & vbCrLf
'     End If
'     '-------------------
'     'Include medications
'     '-------------------
'     If check1(0).Value Then
'        On Error Resume Next
'        ix = UBound(gtPatient(1).medications())
'        If Err.Number <> 9 Then
'            PrvText = PrvText & vbCrLf & "Medications and reasons for use include "
'             For ix = 0 To UBound(gtPatient(1).medications())
'                 PrvText = PrvText & " " & gtPatient(1).medications(ix).drug & " ("
'                 PrvText = PrvText & gtPatient(1).medications(ix).Prescribed_For & "),"
'             Next ix
'             PrvText = left(PrvText, Len(PrvText) - 1) & "." & vbCrLf
'        End If
'     End If
'     '-----------------------------
'     'Now the signature and dr name
'     '-----------------------------
'     PrvText = PrvText & vbCrLf & vbCrLf & "Yours sincerely," & vbCrLf & vbCrLf & vbCrLf & vbCrLf
'     PrvText = PrvText & "Dr " & gtDoctor.Firstname & " " & gtDoctor.Surname & " " & gtDoctor.Qualifications & "(Prov No.:" & gtDoctor.Provider_number & ")"
'     bExitRoutine = False
' End Sub
'
' Sub Referrals_GetList_ForPatient()
'     bExitRoutine = True
'     '----------------------------------------------------------
'     'Displays all the referral letters written for this patient
'     '----------------------------------------------------------
'     On Error Resume Next
'     Data2RsClone.Close
'     Load_Layout "Referral_Letters", TDBGrid1(0), cGrID_Image_Letters
'     SSActiveTabs1.SelectedTab = 4
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Referrals_GetForPatient")
'     Q("Enter Patient ID") = gtPatient(1).Patient_ID
'     Set Data2.Recordset = Q.OpenRecordset()
'     Set Data2RsClone = Data2.Recordset.Clone
'     Set ucfField1 = Data2RsClone.Fields(3)
'     TDBGrid1(0).ReBind
'     SSActiveTabPanel1.Visible = True
'     TDBGrid1(0).Visible = True
'     DoEvents
'     bExitRoutine = False
' End Sub
' Sub Save_ConsultID()
' Dim ws As Workspace
' Dim Db As Database
' Dim Rs As Recordset
' Dim iLockStatus As Integer
' On Error GoTo 0
' If iConsultIDSaved = False Then
'         Database_Lock
'         Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'         ws.BeginTrans
'         Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'         Database_Lock
'         Set Rs = Db.OpenRecordset("Select * from Consult")
'         With Rs
'             .AddNew
'             !Doctor_ID = gtDoctor.Doctor_ID
'             !Patient_ID = gtPatient(1).Patient_ID
'             !Consult_Date = Now
'             '!Type_ID =
'            ' sMsg = Str$(SSActiveToolBars1.Tools("ID_ComboBox").ComboBox.ItemData((SSActiveToolBars1.Tools("ID_ComboBox").ComboBox.ListIndex)))
'            ' MsgBox sMsg
'             !Type_ID = SSActiveToolBars1.Tools("ID_ComboBox").ComboBox.ItemData((SSActiveToolBars1.Tools("ID_ComboBox").ComboBox.ListIndex))
'             .Update
'             .MoveLast
'             '---------------------------------------------------------------
'             'this value just allocated is need to put data into other tables
'             '---------------------------------------------------------------
'             gtconsult.Consult_ID = !Consult_ID
'         End With
'         ws.CommitTrans
'         Rs.Close
'         Db.Close
'         ws.Close
'         iConsultIDSaved = True
'         Database_Unlock
' End If
' End Sub
' Sub Referrals_Organisations_Getlist_old()
'    ' On Error GoTo GLOError
'     If gtNew_Referral(0).Organisation.ID <> 0 Then Exit Sub
'     '-------------------------------------------------------------------
'     'Used in the Referrals Section to get list of all organisations like
'     'text3(1)
'     '-------------------------------------------------------------------
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sContacts_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Referrals_Organisations_Getlist")
'     Q("Enter Organisation") = Trim(Text3(cReferrals_Org_name))
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(Text3(cReferrals_Org_name)) Then
'        If LCase(Data1.Recordset!Description) <> Trim(LCase(Text3(cReferrals_Org_name))) Then
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'             Picture2.Visible = False
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
'     Exit Sub
' GLOError:
'     On Error Resume Next
'     Db.Close
'     Screen.MousePointer = vbArrow
'     Command3_Click (1)
' End Sub
' Sub Referrals_Organisations_Getlist()
'    ' On Error GoTo GLOError
'
'     If gtNew_Referral(0).Organisation.ID <> 0 Then Exit Sub
'     '-------------------------------------------------------------------
'     'Used in the Referrals Section to get list of all organisations like
'     'text3(1)
'     '-------------------------------------------------------------------
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sContacts_MDB, False)
'   ' If gtNew_Referral(0).Person.ID <> 0 Then
'   '      Set Q = Db.QueryDefs("MRQ_Referrals_Employees_Getlist_InOrganisations")
'   '      Q("Enter Person_ID") = gtNew_Referral(0).Person.ID
'   '      Set Data1.Recordset = Q.OpenRecordset()
'   '      If RecordsExist(Data1) = False Then
'   '          Set Q = Db.QueryDefs("MRQ_Referrals_Organisations_Getlist")
'   '          Q("Enter Organisation") = Trim(Text3(cReferrals_Org_name))
'   '          Set Data1.Recordset = Q.OpenRecordset()
'   '     End If
'   '  Else
'   '      Set Q = Db.QueryDefs("MRQ_Referrals_Organisations_Getlist")
'   '      Q("Enter Organisation") = Trim(Text3(cReferrals_Org_name))
'   '      Set Data1.Recordset = Q.OpenRecordset()
'   '  End If
'   '--------------------------------------------------------------------
'   'If no organisation name just get list person is linked to, otherwise
'   'get both that list, and organisations like organisation name being
'   'typed in
'   '--------------------------------------------------------------------
'   If Trim(Text3(cReferrals_Org_name)) <> "" And gtNew_Referral(0).Person.ID <> 0 Then
'             Set Q = Db.QueryDefs("MRQ_Referrals_Organisations_Getlist_union")
'             Q("Enter Person_ID") = gtNew_Referral(0).Person.ID
'             Q("Enter Organisation") = Trim(Text3(cReferrals_Org_name))
'    ElseIf gtNew_Referral(0).Person.ID Then
'             Set Q = Db.QueryDefs("MRQ_Referrals_Employees_Getlist_InOrganisations")
'             Q("Enter Person_ID") = gtNew_Referral(0).Person.ID
'   Else
'             Set Q = Db.QueryDefs("MRQ_Referrals_Organisations_Getlist")
'             Q("Enter Organisation") = Trim(Text3(cReferrals_Org_name))
'   End If
'   Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) Then  'And Len(Text3(cReferrals_Org_name)) Then
'        If (LCase(Data1.Recordset!Description) <> Trim(LCase(Text3(cReferrals_Org_name))) And Trim(Text3(cReferrals_Org_name)) <> "") Then
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'            If Data1.Recordset.RecordCount = 1 Then
'                Referrals_Organisation_Select
'            Else
'             Picture2.Visible = True
'            End If
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
'     Exit Sub
' GLOError:
'     On Error Resume Next
'     Db.Close
'     Screen.MousePointer = vbArrow
'     Command3_Click (1)
' End Sub
' Sub GetList_havePersonID_Get_Clinics()
'         '-------------------------------------------------------------
'         'No organisation exists in text3(0), user has chosen a persons
'         'name, now find out where they work
'         '-------------------------------------------------------------
'         Screen.MousePointer = vbHourglass
'         Set Db = OpenDatabase(sContacts_MDB, False)
'         Set Q = Db.QueryDefs("c99_Referrals_havePersonID_Get_Clinics")
'         Q("Enter Person_ID") = gtNew_Referral(0).Person.ID
'         Q("Enter Clinic_Name") = Trim(Text3(2))
'         Set Data1.Recordset = Q.OpenRecordset()
'         If RecordsExist(Data1) And Len(Text3(1)) Then
'              Data1.Recordset.MoveLast
'              If Data1.Recordset.RecordCount = 1 Then
'                 Text3(2) = Data1.Recordset!Description
'       Exit Sub
'              End If
'              If LCase(Data1.Recordset!Description) <> Trim(LCase(Text3(1))) Then
'                 Picture2.Visible = True: Picture2.ZOrder
'              Else
'                 Picture2.Visible = False
'             End If
'         Else
'         Picture2.Visible = False
'         End If
'         Screen.MousePointer = vbArrow
' End Sub
' Sub Referrals_Persons_Getlist()
'
'     If gtNew_Referral(0).Person.ID <> 0 Then Exit Sub
'        Screen.MousePointer = vbHourglass
'        Set Db = OpenDatabase(sContacts_MDB, False)
'        Set Q = Db.QueryDefs("MRQ_Referrals_Persons_Getlist")
'        Q("Enter Surname") = Text3(cReferrals_Person)
'       Set Data1.Recordset = Q.OpenRecordset()
'       If RecordsExist(Data1) And Len(Text3(cReferrals_Person)) Then
'
'            Picture2.Visible = True: Picture2.ZOrder
'       Else
'            Picture2.Visible = False
'       End If
'       Screen.MousePointer = vbArrow
' End Sub
' Sub Referrals_Persons_Getlist_BySuburb_ByCategory()
'        Screen.MousePointer = vbHourglass
'        Set Db = OpenDatabase(sContacts_MDB, False)
'        Set Q = Db.QueryDefs("MRQ_Referrals_Persons_Getlist_bySuburb_ByCategory")
'        Q("Enter Suburb") = Text3(cReferrals_Suburb)
'        Q("Enter Category_ID") = gtNew_Referral(0).Person.Category.ID
'       Set Data1.Recordset = Q.OpenRecordset()
'       If RecordsExist(Data1) Then
'            Picture2.Visible = True: Picture2.ZOrder
'       Else
'            Picture2.Visible = False
'       End If
'       Screen.MousePointer = vbArrow
' End Sub
' Sub Requests_CopyTo_Getlist()
'     If gtNew_Form(0).CopyTo.ID <> 0 Then Exit Sub
'        Screen.MousePointer = vbHourglass
'        Set Db = OpenDatabase(sContacts_MDB, False)
'        Set Q = Db.QueryDefs("MRQ_Requests_PersonsSendCopyTo_Getlist")
'        Q("Enter Surname") = Trim(Text3(cRequest_CopyTo))
'        Set Data1.Recordset = Q.OpenRecordset()
'       If RecordsExist(Data1) And Len(Text3(cRequest_CopyTo)) Then
'            Picture2.Visible = True: Picture2.ZOrder
'       Else
'            Picture2.Visible = False
'       End If
'       Screen.MousePointer = vbArrow
'
' End Sub
' Sub GenerateText_DiseasesInFamily(sDiseaseText As String)
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  sMsg                                                                                  *
' '******************************************************************************************
'
'     sDiseaseText = ""
'     On Error GoTo Generate_DiseaseTextError
'     '---------------------------------------------------------
'     'Display the unique disease in family, not person specific
'     '---------------------------------------------------------
'     Dim ifamilyMember As Integer
'     Dim iDisease As Integer 'counter for number of unique diseases
'     sDiseaseText = ""
'     '----------------------
'     'For each family member
'     '----------------------
'     For ifamilyMember = 0 To UBound(gtPatient(1).FamilyMembers())
'         '------------------------------
'         'and for each of their diseases
'         '------------------------------
'         If gtPatient(1).FamilyMembers(ifamilyMember).Deleted = False Then
'          For iDisease = 0 To UBound(gtPatient(1).FamilyMembers(ifamilyMember).Conditions())
'             '-------------------------------------------------------
'             'every time a different disease encountered add to array
'             '-------------------------------------------------------
'            If Not (InStr(LCase(gtPatient(1).FamilyMembers(ifamilyMember).Conditions(iDisease).Description), sDiseaseText)) Then
'                   'sDiseaseText = sDiseaseText & LCase(gtPatient(1).FamilyMedicalHistory(iFamilyMember).Condition(iDisease)) & ", "
'             sDiseaseText = sDiseaseText & StrConv(gtPatient(1).FamilyMembers(ifamilyMember).Conditions(iDisease).Description, vbProperCase) & ", "
'             End If
'          Next
'          sDiseaseText = sDiseaseText & " (" & gtPatient(1).FamilyMembers(ifamilyMember).Relationship
'          If gtPatient(1).FamilyMembers(ifamilyMember).Age_Death <> -1 Then
'            sDiseaseText = sDiseaseText & " - died " & gtPatient(1).FamilyMembers(ifamilyMember).Age_Death
'          End If
'          sDiseaseText = sDiseaseText & "); "
'         End If
'     Next
'
'
'     If sDiseaseText <> "" Then
'         sDiseaseText = left(sDiseaseText, Len(sDiseaseText) - 2) & "." 'chop off the ';'
'     End If
'     Exit Sub
' Generate_DiseaseTextError:
'     Exit Sub
' End Sub
' Sub RecreationalDrugs_Alcohol_Generate_Text()
'      sMsg = ""
'      '----------------------------------
'      'If text present split alcohol data
'      '----------------------------------
'      If gtPatient(1).Recreationaldrugs(1).qualifier <> "" Then
'         sMsg = gtPatient(1).Recreationaldrugs(1).qualifier
'         Split_SemiColonDelimitedData sMsg
'         If vArray(0) <> "" Then
'
'                sMsg = sMsg & "Alcohol currently: " & vArray(0) & " grams/"
'                 Select Case vArray(2)
'                 Case "d"
'                       sMsg = sMsg & "day"
'                 Case "w"
'                       sMsg = sMsg & "week"
'                 Case "m"
'                       sMsg = sMsg & "month"
'
'                 Case "u"
'                       sMsg = sMsg & "??"
'                 End Select
'                 sMsg = sMsg
'             ElseIf vArray(2) = "n" Then
'                 sMsg = "Non drinker"
'             Else
'                sMsg = "Alcohol: no consumption recorded"
'             End If
'             If vArray(1) <> "" Then
'                sMsg = sMsg & ", " & vArray(1) & ""
'             End If
'      End If
' End Sub
' Sub RecreationalDrugs_Smoking_GenerateText()
'     sMsg = ""
'     If gtPatient(1).Recreationaldrugs(0).qualifier <> "" Then
'        '-----------------------
'        '1.show the smoking data
'        '-----------------------
'        sMsg = gtPatient(1).Recreationaldrugs(0).qualifier
'        Split_SemiColonDelimitedData sMsg
'
'          Select Case vArray(3)
'            Case 0
'                sMsg = "Current Smoker"
'                If vArray(0) <> "" Then
'                   sMsg = sMsg & "(" & vArray(0) & "/day"
'                End If
'                If vArray(1) <> "" Then
'                  sMsg = sMsg & " from age " & vArray(1)
'                End If
'                If left(sMsg, 1) = "(" Then
'                 sMsg = sMsg & ")"
'                End If
'            Case 1
'                sMsg = "Ex smoker"
'                If vArray(0) <> "" Then
'                   sMsg = sMsg & "(" & vArray(0) & "/day"
'                End If
'                If vArray(1) <> "" Then
'                  sMsg = sMsg & " from age " & vArray(1)
'                End If
'                If vArray(2) <> "" Then
'                  sMsg = sMsg & " to " & vArray(2) & "years)"
'                End If
'                sMsg = sMsg
'            Case 2
'                 sMsg = "Never smoked"
'            End Select
'       End If
' End Sub
' Sub PastHistory_Calc_Age_onset_Disease(txt As Control)
'     '--------------------------------------------------------------------
'     'given a valid date in Txt, calculate the age of onset to either
'     'the nearest year, or if age < 25 months, the number of months
'     '--------------------------------------------------------------------
'
'     bExitRoutine = True
'     Dim bInvalid As Boolean
'     If Trim(txt) <> "" Then
'        'Dim iflag As Integer
'       ' ValidateDate Txt, iflag
'        'if a full valid date  use that otherwise, make up whole year date
'        If IsDate(Trim(txt)) Then
'           If Year(txt) > Year(Now) Then
'              sMsg = "Date of illness is not valid"
'              lresponse = MsgBox(sMsg, vbOKOnly, "Date validation")
'              txt = ""
'              bExitRoutine = False
'    Exit Sub
'            End If
'            '-------------------------------------------------------------
'            'If the calculated age in months is <25, display age in months
'            '-------------------------------------------------------------
'             If DateDiff("m", gtPatient(1).Date_of_Birth, Trim(txt)) < 0 Then
'                      sMsg = "Date of illness is not valid"
'                     lresponse = MsgBox(sMsg, vbOKOnly, "Date validation")
'                     txt = ""
'                     bExitRoutine = False
' Exit Sub
'             Else
'                If DateDiff("m", gtPatient(1).Date_of_Birth, Trim(txt)) < 25 Then
'                   Text3(2) = DateDiff("m", gtPatient(1).Date_of_Birth, Trim(txt)) & "M"
'                Else
'                   Text3(2) = Int(DateDiff("M", gtPatient(1).Date_of_Birth, Trim(txt)) / 12)
'                End If
'             End If
'        Else
'          'sMsg =
'           sMsg = Format(Now, "DD/MM") & "/" & Trim(txt)
'           sMsg = Format(gtPatient(1).Date_of_Birth, "DD/MM") & "/" & Trim(txt)
'           If IsDate(sMsg) And Len(sMsg) = 10 Then
'              'Text3(2) = DateDiff("YYYY", gtPatient(1).Date_of_Birth, sMsg)
'              Text3(2) = Int(DateDiff("M", gtPatient(1).Date_of_Birth, sMsg) / 12)
'
'              'Text3(2) = Year(sMsg) - Year(gtPatient(1).Date_of_Birth)
'              If Val(Text3(2)) < 0 Or Val(Text3(2)) > gtPatient(1).Age Then
'                 sMsg = "Patients year of illness is not valid"
'                 lresponse = MsgBox(sMsg, vbOKOnly, "Age validation")
'                 Text3(2) = ""
'                 txt = ""
'                 txt.SetFocus
'                 bExitRoutine = False
'       Exit Sub
'              End If
'          Else
'             ' sMsg = "Please enter a valid date." & vbLf & vbLf & "This may be a whole year "
'             ' sMsg = sMsg & "eg 1997, or a month and year eg 07/1997, or a full "
'             ' sMsg = sMsg & "date eg 01/07/1997"
'             ' lResponse = MsgBox(sMsg, vbOKOnly, "Date formats")
'              txt = ""
'              txt.SetFocus
'              bExitRoutine = False
'    Exit Sub
'           End If
'
'        End If
'     End If
'     bExitRoutine = False
' End Sub
'
' Sub PastHistory_Calc_DAte_onset_Disease(txt As Control)
'   Dim iDiseaseAgeInMonths As Integer
'   'The enter key has been pressed in Txt - age onset of disease
'     bExitRoutine = True
'         If Trim(txt) <> "" Then
'            '--------------------------------------
'            'Convert age onset of disease to months
'            '--------------------------------------
'             iAgeisMonths = False
'             If InStr(UCase(txt), "M") Then
'                iAgeisMonths = True
'                sMsg = left$(txt, InStr(UCase(txt), "M") - 1)
'                iDiseaseAgeInMonths = Val(left$(txt, InStr(UCase(txt), "M") - 1))
'             Else
'                iDiseaseAgeInMonths = Val(txt) * 12
'            End If
'            '--------------------------------------------------
'            'Now make sure age onset Not > patients current age
'            '--------------------------------------------------
'            If iDiseaseAgeInMonths > gtPatient(1).Age_Months Then
'           ' If (iAgeisMonths And Val(sMsg) > intAge_in_Months) _
'            '    Or (iAgeisMonths = False And (Val(sMsg) < 0 Or Val(sMsg) > gtPatient(1).Age)) Then
'
'
'            ' If Val(sMsg) < 0 Or Val(sMsg) > gtPatient(1).Age Then
'                    sMsg = "Patients age of illness is not valid"
'                    lresponse = MsgBox(sMsg, vbOKOnly, "Age validation")
'                    txt = ""
'                    Text3(3) = ""
'                    bExitRoutine = False
'                    txt.SetFocus
'          Exit Sub
'
'             End If
'             '----------------------------------------------
'             'Now calculate the year of onset of the disease
'             '----------------------------------------------
'                If iAgeisMonths Then
'                'add the age in months to date of birth
'                 Text3(3) = Format(DateAdd("m", iDiseaseAgeInMonths, gtPatient(1).Date_of_Birth), "dd/mm/yyyy")
'                Else
'                  Text3(3) = Year(Format(DateAdd("m", iDiseaseAgeInMonths, gtPatient(1).Date_of_Birth), "dd/mm/yyyy"))
'                End If
'            ' Text3(3) = Format(DateAdd("m", CDbl(sMsg), gtPatient(1).Date_of_Birth), "dd/mm/yyyy")
'
'           '  Else
'           '      Text3(3) = Format(DateAdd("yyyy", Val(Text3(2)), gtPatient(1).Date_of_Birth), "YYYY")
'           '  End If
'         End If
'         bExitRoutine = False
' End Sub
'
'
'
' Sub Requests_Forms_Print_Single(iArrayIndex As Long)
'
'   Dim icounter As Integer
'   Dim iKeepY As Integer
'   Dim iCheckboxcount As Integer
'   Dim icheckboxFirstY As Integer
'   Dim iKeepY1 As Integer
'   Dim iY1ForInstructions As Integer
'   Dim iKeepX As Integer
'   Dim sSubString As String
'   Dim sMsg5 As String
'   Dim iLeftBracketPos As Integer 'left bracket positition <
'   On Error GoTo 0
'    '--------------------------------------------------------------
'    'Prints a form form the gtpatient(1).forms() array according to
'    'iArrayIndex
'    '--------------------------------------------------------------
'   '  On Error GoTo Errhandler1:
'     Dim WindowsDefaultPrinter As String
'     Dim DefaultPort 'not currently used
'     '--------------------------------------------
'     'Read the Auxillary printer from the ini file
'     '--------------------------------------------
'     'Init1.FileName = sMedRec_Ini
'     'Init1.Application = "Auxillary Printer"
'     'Init1.Parameter = "Device"
'     '----------------------------------------------------------------------
'     'Save the default printer object for re-allocation at end of this routn
'     '----------------------------------------------------------------------
'     'WindowsDefaultPrinter = Printer.DeviceName
'     'DefaultPort = Printer.Port
'     'Printers_Swap Init1.Value 'the form printer
'     '---------------------------
'     'Swap to plain paper printer
'     '---------------------------
'     Printer_Set mrPrinter_PlainPaper
'    ' On Error GoTo ERRHANDLER2:
'     Printer.ScaleMode = vbMillimeters
'     '-------------------------
'     'Print the company heading
'     '-------------------------
'     Printer.CurrentX = 10
'     Printer.CurrentY = 0
'     Printer.FontName = "Times New Roman"
'     Printer.FontItalic = True
'     Printer.FontSize = 13
'     Printer.FontBold = True
'     Printer.Print gtPatient(1).Forms(iArrayIndex).Provider.Name
'     Printer.FontSize = 10
'     Printer.FontBold = False
'     Printer.CurrentX = 10
'     '-----------------------------------------
'     'Get the head office for this organisation
'     '-----------------------------------------
'     Printer.Print gtPatient(1).Forms(iArrayIndex).Provider.HeadOffice.Address.Street1
'     If gtPatient(1).Forms(iArrayIndex).Provider.HeadOffice.Address.Street2 <> "" Then
'        Printer.CurrentX = 10: Printer.Print gtPatient(1).Forms(iArrayIndex).Provider.HeadOffice.Address.Street2
'     End If
'     Printer.CurrentX = 10: Printer.Print gtPatient(1).Forms(iArrayIndex).Provider.HeadOffice.Address.suburb & " ";
'     Printer.Print gtPatient(1).Forms(iArrayIndex).Provider.HeadOffice.Address.State & " ";
'     Printer.Print gtPatient(1).Forms(iArrayIndex).Provider.HeadOffice.Address.Postcode
'     Printer.CurrentX = 10: Printer.Print "Phone:";
'     Printer.Print gtPatient(1).Forms(iArrayIndex).Provider.HeadOffice.communications.Work_Phone
'    ' If gtPatient(1).Forms(iArrayIndex).Provider.HeadOffice.Address.tollFree <> "" Then
'    '     Printer.CurrentX = 10: Printer.Print "Toll Free:";
'    '     Printer.Print gtPatient(1).Forms(iArrayIndex).Provider.HeadOffice.Address.tollFree
'    ' End If
'     If gtPatient(1).Forms(iArrayIndex).Provider.ACN <> "" Then
'         Printer.CurrentX = 10: Printer.Print "A.C.N:";
'         Printer.Print gtPatient(1).Forms(iArrayIndex).Provider.ACN
'     End If
'     Printer.Print
'     iKeepY = 30
'     '----------------------------------
'     'Print any header text if it exists
'     '----------------------------------
'     If gtPatient(1).Forms(iArrayIndex).Provider.Header_Text <> "" Then
'        sMsg5 = gtPatient(1).Forms(iArrayIndex).Provider.Header_Text
'        Printer.CurrentY = 0
'        Do Until sMsg5 = ""
'                     Select Case left(sMsg5, 4)
'                     Case "<H1>"
'                          Printer.CurrentX = 10
'                          Printer.Font.Bold = True
'                     Case "<T1>"
'                         Printer.CurrentX = 10
'                         Printer.Font.Bold = False
'                     Case "<B0>"
'                         Printer.Font.Bold = False
'                     Case "<B1>"
'                         Printer.FontBold = True
'                     End Select
'                     '----------------------------
'                     'Chop of the format code <nn>
'                     '----------------------------
'                     sMsg5 = right(sMsg5, Len(sMsg5) - 4)
'                     iLeftBracketPos = InStr(sMsg5, "<")
'                     '------------------------------------------------
'                     'Find next left bracket and extract text to print
'                     'leaving the remainder of string in Msg5 with the
'                     'next format code ie <nn>remaining text....
'                     '------------------------------------------------
'                     If iLeftBracketPos Then
'                          sSubString = left(sMsg5, iLeftBracketPos - 1)
'                          sMsg5 = right(sMsg5, Len(sMsg5) - iLeftBracketPos + 1)
'                     Else
'                          sSubString = sMsg5
'                          sMsg5 = ""
'                     End If
'                     '-----------------------------------------------
'                     'Print the next text max 140 characters per line
'                     '-----------------------------------------------
'                     split_lines 40, sSubString
'                     For icounter = 0 To UBound(AnyArray())
'                         Printer.CurrentX = 130
'                         Printer.Print AnyArray(icounter)
'                     Next
'             Loop
'     End If
'     '--------------------------------
'     'Draw the major lines on the form
'     '--------------------------------
'     Box 10, iKeepY, 222, 186, 3                       'box around form
'     Printer.DrawWidth = 3
'     Printer.Line (10, iKeepY + 10)-(130, iKeepY + 10) 'line under billing
'     Printer.Line (50, iKeepY)-(50, iKeepY + 10)       'vert right billing
'     Printer.Line (90, iKeepY)-(90, iKeepY + 10)       'vert right of Our Ref
'     Printer.Line (130, iKeepY)-(130, iKeepY + 100)    'left vert down all boxes
'     Printer.Line (10, iKeepY + 40)-(196, iKeepY + 40) 'line under patients
'     Printer.Line (130, iKeepY + 70)-(196, iKeepY + 70) 'line under copy to
'     Printer.Line (10, iKeepY + 100)-(196, iKeepY + 100) 'line under check boxes
'     '----------------------------------------
'     'Now put in the headings and box contents
'     '----------------------------------------
'     Printer.CurrentX = 11:    Printer.CurrentY = iKeepY + 1
'     Requests_SetFormFonts "sub heading"
'     Printer.Print "Billing"
'     Printer.CurrentX = 18
'     Printer.CurrentY = iKeepY + 4
'     Requests_SetFormFonts "patient details"
'     Select Case gtPatient(1).Forms(iArrayIndex).Billing
'     Case 1
'        Printer.Print "Bulk Bill"
'     Case 2
'        Printer.Print "Private"
'     Case 3
'        Printer.Print "Rebate Only"
'     Case 4
'        Printer.Print "Work Cover"
'     End Select
'     '-----------------------------
'     'The box for reference numbers
'     '-----------------------------
'     Requests_SetFormFonts "sub heading"
'     Printer.CurrentX = 52:    Printer.CurrentY = iKeepY + 1
'     Printer.Print "Our Ref:"
'     Printer.CurrentX = 92:    Printer.CurrentY = iKeepY + 1
'     Printer.Print "Your Ref:"
'     Printer.CurrentX = 91:    Printer.CurrentY = iKeepY + 1
'     If iHIV_Deidentify = False Then
'          Requests_SetFormFonts "patient details"
'         Printer.CurrentX = 60: Printer.CurrentY = iKeepY + 4
'         Printer.Print gtPatient(1).Folder_Number
'
'     End If
'
'
'     iKeepY1 = iKeepY + 40
'     '---------------------------------------------------------------
'     'Now to the headings in box 6 - for the requesting practitioners
'     'details, and copy of report to
'     '---------------------------------------------------------------
'     Printer.CurrentX = 133: Printer.CurrentY = iKeepY + 1
'     Requests_SetFormFonts "body of text"
'     Printer.FontSize = 10
'     Printer.FontBold = True
'     Printer.Print "Requesting Practitioner"
'     Printer.FontBold = False
'     Printer.CurrentX = 175: Printer.CurrentY = iKeepY + 2
'     Printer.Print gtPatient(1).Forms(iArrayIndex).Provider.Doctor_reference_Number
'     Printer.Print: Printer.CurrentX = 133:
'     Printer.Print "Dr " & gtDoctor.Firstname & " " & gtDoctor.Surname
'     Printer.CurrentX = 133 ': Printer.CurrentY = 40
'     Printer.Print gtSurgery.Street1
'     If gtSurgery.Street2 <> "" Then
'         Printer.CurrentX = 133: Printer.Print gtSurgery.Street2
'     End If
'     Printer.CurrentX = 133:    Printer.Print gtSurgery.suburb & " ";
'     Printer.Print gtSurgery.Postcode
'     Printer.CurrentX = 133: Printer.Print "Phone:";
'     Printer.CurrentX = 145: Printer.Print gtSurgery.Phone
'     Printer.CurrentX = 133: Printer.Print "Fax  :";
'     Printer.CurrentX = 145: Printer.Print gtSurgery.Fax
'     Printer.CurrentX = 133: Printer.Print "Prov#:";
'     Printer.CurrentX = 145: Printer.Print gtDoctor.Provider_number
'     Printer.CurrentX = 133
'     Printer.CurrentY = iKeepY + 43
'     Printer.Font.Bold = True
'     Printer.Print "Copy of report to"
'     Printer.FontBold = False
'     Printer.Print
'     If gtPatient(1).Forms(iArrayIndex).CopyTo.Surname <> "" Then
'        With gtPatient(1).Forms(iArrayIndex)
'             Printer.CurrentX = 133
'             Printer.Print Trim(.CopyTo.Title _
'                     & " " & .CopyTo.Firstname & " " _
'                     & " " & .CopyTo.Surname)
'             Printer.CurrentX = 133: Printer.Print .CopyTo.Address.Street1
'             If .CopyTo.Address.Street2 <> "" Then
'                 Printer.CurrentX = 133: Printer.Print .CopyTo.Address.Street2
'             End If
'             Printer.CurrentX = 133: Printer.Print .CopyTo.Address.suburb _
'                     & " " & .CopyTo.Address.State _
'                     & " " & .CopyTo.Address.Postcode
'         End With
'     End If
'     Printer.Print
'     Printer.CurrentX = 12: Printer.CurrentY = iKeepY + 15
'     '--------------------------------------------------------------
'     'Print patients name, sex, dob, or initials etc if HIV specific
'     '--------------------------------------------------------------
'     Requests_SetFormFonts "patient details"
'     Printer.CurrentX = 14
'     iKeepY = Printer.CurrentY
'     With gtPatient(1)
'         If iHIV_Deidentify = False Then
'            Printer.Print .Firstname & " " & .Surname
'         Else
'            Printer.Print "Initials: " & UCase(left(.Firstname, 1)) & " " & UCase(left(.Surname, 1))
'         End If
'         Printer.CurrentX = 84: Printer.CurrentY = iKeepY
'         Printer.Print .Sex
'         Printer.CurrentX = 97: Printer.CurrentY = iKeepY
'         Printer.Print Format(.Date_of_Birth, "dd/mm/yyyy")
'         If iHIV_Deidentify = False Then
'             Printer.CurrentX = 14
'             Printer.Print .Street1
'             If .Street2 <> "" Then
'                Printer.CurrentX = 14
'                Printer.Print .Street2
'             End If
'             Printer.CurrentX = 14
'             Printer.Print .suburb & " " & .Postcode
'             Printer.CurrentX = 14: Printer.Print "Phone: ";
'             Printer.Print .HomePhone;
'             Printer.CurrentX = 97
'             Printer.Print Format(.MedicareNo, "#### ##### #")
'         End If
'     End With
'     Requests_SetFormFonts "heading"
'     Printer.CurrentX = 12: Printer.CurrentY = iKeepY1 + 3
'     '------------------
'     'Print the requests
'     '------------------
'     Printer.Print "REQUEST"
'     Requests_SetFormFonts "body of text"
'     sMsg = ""
'      For icounter = 0 To UBound(gtPatient(1).Forms(iArrayIndex).Request())
'          If gtPatient(1).Forms(iArrayIndex).Request(icounter).Deleted = False Then
'             sMsg = sMsg & gtPatient(1).Forms(iArrayIndex).Request(icounter).Name
'             If gtPatient(1).Forms(iArrayIndex).fasting = True Then
'                sMsg = sMsg & "  (Fasting)"
'             End If
'             sMsg = sMsg & ", "
'          End If
'     Next icounter
'     sMsg = left(sMsg, Len(sMsg) - 2) & "."
'     split_lines 75, sMsg
'     For icounter = 0 To UBound(AnyArray())
'          Printer.CurrentX = 12
'          Printer.Print AnyArray(icounter)
'     Next
'     Printer.Print
'     Printer.CurrentX = 12
'     Requests_SetFormFonts "heading"
'     '---------------------------------------
'     'Print any medications the patient is on
'     '---------------------------------------
'     Printer.Print "THERAPY"
'     Requests_SetFormFonts "body of text"
'     Printer.CurrentX = 12
'     sMsg = gtPatient(1).Forms(iArrayIndex).medications
'     If sMsg <> "" Then
'         split_lines 75, sMsg
'         For icounter = 0 To UBound(AnyArray())
'              Printer.CurrentX = 12
'             Printer.Print AnyArray(icounter)
'         Next
'     Else
'        Printer.Print
'     End If
'     Printer.Print
'     Printer.CurrentX = 12
'     Requests_SetFormFonts "heading"
'     Printer.Print "CLINICAL NOTES"
'     Requests_SetFormFonts "body of text"
'     Printer.CurrentX = 12
'     sMsg = gtPatient(1).Forms(iArrayIndex).Notes
'     split_lines 75, sMsg
'     For icounter = 0 To UBound(AnyArray())
'          Printer.CurrentX = 12
'          Printer.Print AnyArray(icounter)
'     Next
'     iY1ForInstructions = iKeepY1 + 61
'     '---------------------------------------------
'     'Print the check boxes needed for this company
'     '---------------------------------------------
'     Set Db = OpenDatabase(sContacts_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Requests_Form_Xtras")
'     Q("Enter Request_Type_ID") = gtPatient(1).Forms(iArrayIndex).Provider.Type_ID
'     Q("Enter Display_ID") = 1     '1 = for check box display
'     Set Rs = Q.OpenRecordset(dbOpenDynaset)
'     With Rs
'        Printer.CurrentY = iKeepY1 + 33
'        icheckboxFirstY = iKeepY1 + 33
'        icounter = 0
'        Do Until .EOF
'            If icounter < 6 Then
'               iKeepY1 = Printer.CurrentY
'               Box 133, iKeepY1 + 1, 3, 3, 1
'               Printer.CurrentY = iKeepY1
'               Printer.CurrentX = 137
'               Printer.Print !Text
'             Else
'               '--------------------------------------
'               'start second row of boxes to the right
'               '--------------------------------------
'               iKeepY1 = Printer.CurrentY
'               Box 162, iKeepY1 + 1, 3, 3, 1
'               Printer.CurrentY = iKeepY1
'               Printer.CurrentX = 166
'               Printer.Print !Text
'             End If
'             .MoveNext
'             icounter = icounter + 1
'             If icounter = 6 Then
'                Printer.CurrentY = icheckboxFirstY
'             End If
'        Loop
'       .Close
'      End With
'     '---------------------------------------------------------
'     'if there is organisation specific general text print that
'     '---------------------------------------------------------
'     Printer.Font.Bold = True
'     Printer.CurrentX = 12
'     Printer.CurrentY = iY1ForInstructions
'     Printer.Print "PATIENT INSTRUCTIONS"
'     Printer.FontBold = False
'     Printer.Font.Size = 9
'     If gtPatient(1).Forms(iArrayIndex).Provider.General_Text <> "" Then
'           sMsg5 = gtPatient(1).Forms(iArrayIndex).Provider.General_Text
'            Do Until sMsg5 = ""
'                     Select Case left(sMsg5, 4)
'                     Case "<H1>"
'                        Printer.Font.Bold = True
'                     Case "<T1>"
'                        Printer.Font.Bold = False
'                     Case "<B0>"
'                         Printer.Font.Bold = False
'                     Case "<B1>"
'                         Printer.FontBold = True
'                     End Select
'                     '----------------------------
'                     'Chop of the format code <nn>
'                     '----------------------------
'                     sMsg5 = right(sMsg5, Len(sMsg5) - 4)
'                     iLeftBracketPos = InStr(sMsg5, "<")
'                     '------------------------------------------------
'                     'Find next left bracket and extract text to print
'                     'leaving the remainder of string in Msg5 with the
'                     'next format code ie <nn>remaining text....
'                     '------------------------------------------------
'                     If iLeftBracketPos Then
'                          sSubString = left(sMsg5, iLeftBracketPos - 1)
'                          sMsg5 = right(sMsg5, Len(sMsg5) - iLeftBracketPos + 1)
'                     Else
'                          sSubString = sMsg5
'                          sMsg5 = ""
'                     End If
'                     '-----------------------------------------------
'                     'Print the next text max 140 characters per line
'                     '-----------------------------------------------
'                     split_lines 135, sSubString
'                     For icounter = 0 To UBound(AnyArray())
'                         Printer.CurrentX = 12
'                         Printer.Print AnyArray(icounter)
'                     Next
'                 Loop
'     End If
'     '---------------------------------------------
'     'If there are special instructions, print them
'     '---------------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Requests_SpecialInstructions")
'     For ix = 0 To UBound(gtPatient(1).Forms(iArrayIndex).Request())
'       If gtPatient(1).Forms(iArrayIndex).Request(ix).Instruction_ID <> 0 Then
'         Q("Enter instruction_ID") = gtPatient(1).Forms(iArrayIndex).Request(ix).Instruction_ID
'         Printer.Font.Bold = True
'         Printer.CurrentX = 12
'         Printer.Print StrConv(gtPatient(1).Forms(iArrayIndex).Request(ix).Name, vbProperCase) & ":"
'         Printer.Font.Bold = False
'         Set Rs = Q.OpenRecordset(dbOpenDynaset)
'         With Rs
'             If .EOF + .BOF <> -2 Then
'                sMsg5 = !Instruction
'                Do Until sMsg5 = ""
'                         Select Case left(sMsg5, 4)
'                         Case "<H1>"
'                            Printer.Font.Bold = True
'                         Case "<T1>"
'                            Printer.Font.Bold = False
'                         Case "<B0>"
'                             Printer.Font.Bold = False
'                         Case "<B1>"
'                             Printer.FontBold = True
'                         End Select
'                         '----------------------------
'                         'Chop of the format code <nn>
'                         '----------------------------
'                         sMsg5 = right(sMsg5, Len(sMsg5) - 4)
'                         iLeftBracketPos = InStr(sMsg5, "<")
'                         '------------------------------------------------
'                         'Find next left bracket and extract text to print
'                         'leaving the remainder of string in Msg5 with the
'                         'next format code ie <nn>remaining text....
'                         '------------------------------------------------
'                         If iLeftBracketPos Then
'                              sSubString = left(sMsg5, iLeftBracketPos - 1)
'                              sMsg5 = right(sMsg5, Len(sMsg5) - iLeftBracketPos + 1)
'                         Else
'                              sSubString = sMsg5
'                              sMsg5 = ""
'                         End If
'                         '-----------------------------------------------
'                         'Print the next text max 140 characters per line
'                         '-----------------------------------------------
'                         split_lines 135, sSubString
'                         For icounter = 0 To UBound(AnyArray())
'                             Printer.CurrentX = 12
'                             Printer.Print AnyArray(icounter)
'                         Next
'                Loop
'             End If
'            .Close
'          End With
'       End If
'     Next
'     '---------------------------
'     'Print the pap smear details
'     '---------------------------
'     'Print_PapSmearDetails
'     '---------------------------------------------
'     'Now the line just above the doctors signature
'     '---------------------------------------------
'     Printer.Line (10, 216)-(130, 216)
'     '------------------------------------------------------
'     'Print all the branch addresses of the company (top 12)
'     '------------------------------------------------------
'     Requests_Providers_Branches_Print gtPatient(1).Forms(iArrayIndex).Provider.ID, gtPatient(1).Forms(iArrayIndex).Provider.Address.ID
'     '------------------------------------------
'     'Now the box with the doctors details in it
'     '------------------------------------------
'     Box 130, 216, 36, 66, 4
'     Printer.FontSize = 10
'     Printer.CurrentX = 133: Printer.CurrentY = 218
'     Printer.Print "Doctors Signature";
'     Printer.CurrentX = 172
'     Printer.Print Format(gtPatient(1).Forms(iArrayIndex).Date, "dd/mm/yy")
'     Requests_SetFormFonts "subheading"
'     Printer.CurrentX = 133: Printer.CurrentY = 242
'     Printer.Print "Dr " & left(gtDoctor.Firstname, 1) & " " & gtDoctor.Surname
'     Printer.CurrentX = 60:
'     '--------------------------------------
'     'Now the last line under the whole form
'     '--------------------------------------
'   ' Printer.Font.Bold = False
'   '  Printer.Line (10, 252)-(193, 252)
'     Printer.CurrentX = 50:    Printer.CurrentY = 254
'     Printer.FontSize = 8
'     Printer.FontItalic = True
'     Printer.FontBold = False
'     Printer.Print "DrsDesk Software - Medical Records -Common Forms"
'     Printer.FontItalic = False
'
'     Printer.EndDoc
'     Printers_Swap WindowsDefaultPrinter
'     Exit Sub
'
'     sMsg = "There was an error whilst attempting to read your default printer settings" & vbCrLf & vbCrLf
'     sMsg = sMsg & "Please check your printer settings in the Windows control panel "
'     sMsg = sMsg & "and try again."
'     lresponse = MsgBox(sMsg, vbInformation + vbOKOnly, "PRINTER PROBLEM:")
'     Printers_Swap WindowsDefaultPrinter
'     Exit Sub
'
'    sMsg = "An error occurred whilst attempting to print the form. " & vbCrLf & vbCrLf
'    sMsg = sMsg & "If the error persists, please contact technical support."
'    lresponse = MsgBox(sMsg, vbInformation + vbOKOnly, "PROBLEM:")
'    Printers_Swap WindowsDefaultPrinter
'    Exit Sub
' End Sub
'
'
' Sub Requests_Providers_HeadOffice_Address_Get()
'    '-----------------------------------------------
'     'We have the provider ID, so get the head office
'     '-----------------------------------------------
'     Set Db = OpenDatabase(sContacts_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Requests_Providers_HeadOffice_Get")
'     Q("Enter Organisation_ID") = gtNew_Form(0).Provider.ID
'     Set Rs = Q.OpenRecordset(dbOpenDynaset)
'     With Rs
'         If Rs.EOF + Rs.BOF <> -2 Then
'             gtNew_Form(0).Provider.HeadOffice.Address.Street1 = "" & !Street1
'             gtNew_Form(0).Provider.HeadOffice.Address.Street2 = "" & !Street2
'             gtNew_Form(0).Provider.HeadOffice.Address.Street3 = "" & !Street3
'             gtNew_Form(0).Provider.HeadOffice.Address.suburb = "" & !suburb
'             gtNew_Form(0).Provider.HeadOffice.Address.Postcode = "" & !Postcode
'             gtNew_Form(0).Provider.HeadOffice.Address.State = "" & !State
'             gtNew_Form(0).Provider.ACN = "" & !ACN
'             gtNew_Form(0).Provider.HeadOffice.communications.Work_Phone = "" & !Work_Phone
'        End If
'         .Close
'     End With
'     '-----------------------------------------------------------------------
'     'Get provider specific type specific header and footer text for the form
'     '-----------------------------------------------------------------------
'     Set Q = Db.QueryDefs("MRQ_Requests_Forms_Maintainance_ProviderSpecificText_Get")
'     Q("Enter Organisation_ID") = gtNew_Form(0).Provider.ID
'     Q("Enter Request_Type_ID") = gtNew_Form(0).Provider.Type_ID
'     Set Rs = Q.OpenRecordset()
'     If Rs.EOF + Rs.BOF <> -2 Then
'          gtNew_Form(0).Provider.General_Text = "" & Rs!General_Text
'          gtNew_Form(0).Provider.Header_Text = "" & Rs!Header_Text
'     End If
'     Rs.Close
'     Db.Close
' End Sub
'
' Sub Requests_SetFormFonts(Displayfont As String)
'     Select Case Displayfont
'     Case "sub heading"
'           Printer.FontName = "Times New Roman"
'           Printer.FontBold = False
'           Printer.FontSize = 9
'           Printer.FontItalic = False
'
'     Case "patient details"
'           Printer.FontName = "Comic Sans MS"
'           Printer.FontSize = 10
'           Printer.FontBold = False
'           Printer.FontItalic = False
'
'     Case "heading"
'          Printer.FontName = "Times New Roman"
'          Printer.FontBold = True
'          Printer.FontSize = 10
'          Printer.FontItalic = False
'
'     Case "body of text"
'          Printer.FontName = "Times New Roman"
'          Printer.FontBold = False
'          Printer.FontSize = 10
'          Printer.FontItalic = False
'     End Select
' End Sub
' Sub Requests_Providers_Branches_Print(lProviderID As Long, lBranchAddressID As Long)
'     Dim lAddress_ID As Long
'     '------------------------------------------------------------
'     '12 branches only fit in the current area allowed per company
'     '------------------------------------------------------------
'     Printer.FontName = "Ms Sans Serif"
'     Printer.FontSize = 6
'     Printer.CurrentY = 20
'     Printer.FontBold = True
'     Printer.CurrentY = 217
'     Printer.CurrentX = 12: Printer.Print "BRANCH LOCATION";
'     Printer.CurrentX = 97: Printer.Print "PHONE";
'     Printer.CurrentX = 112: Printer.Print "MON-FRI";
'     Printer.CurrentX = 124: Printer.Print "SAT"
'     Printer.FontBold = False
'     Printer.Print
'     Set Db = OpenDatabase(sContacts_MDB)
'     Set Q = Db.QueryDefs("MRQ_Requests_Providers_Address_BranchSelected_PlusTop11")
'     Q("Enter Organisation_ID") = lProviderID
'     Q("Enter Address_ID") = lBranchAddressID
'     Set Rs = Q.OpenRecordset()
'     With Rs
'     Do Until .EOF
'        ' If lAddress_ID <> !Address_ID Then
'              Printer.CurrentX = 12
'              If lBranchAddressID = !Address_ID Then
'                 Printer.Font.Bold = True
'              Else
'                 Printer.Font.Bold = False
'              End If
'              Printer.Print !suburb;
'              Printer.CurrentX = 35
'              Printer.Print Trim(!Street1 & " " & !Street2);
'              Printer.CurrentX = 97
'              Printer.Print !Phone
'             ' Printer.CurrentX = 175
'              'Printer.Print !Hours_weekday;
'              'Printer.CurrentX = 185
'             ' Printer.Print !Hours_saturday
'            ' lAddress_ID = !Address_ID
'
'         'End If
'         .MoveNext
'     Loop
'     .Close
'     End With
'
'     Db.Close
' End Sub
'
' Sub Recalls_doctors_GetList()
'         Screen.MousePointer = vbHourglass
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Q = Db.QueryDefs("MRQ_Recalls_GetDrs")
'         If iEditing Then
'            Q("Enter Surname") = gtEditArea_Recall(0).Doctor_Surname
'         Else
'            Q("Enter Surname") = Trim(Text3(0))
'         End If
'         Set Data1.Recordset = Q.OpenRecordset()
'         If RecordsExist(Data1) And Len(Text3(0)) Then
'            If iEditing = False And LCase(Data1.Recordset!Surname) <> Trim(LCase(Text3(0))) Then
'                  Picture2.Visible = True: Picture2.ZOrder
'            Else
'                 Picture2.Visible = False
'            End If
'         Else
'            Picture2.Visible = False
'         End If
'         Screen.MousePointer = vbArrow
' End Sub
' Sub Recalls_Methods_GetList(sMethod As String)
'         Screen.MousePointer = vbHourglass   'kkk
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Q = Db.QueryDefs("MRQ_Recalls_Getlist_Methods")
'         Q("Enter Method") = sMethod 'Trim(Text3(3))
'         Set Data1.Recordset = Q.OpenRecordset()
'         If RecordsExist(Data1) Then ' And Len(Text3(3)) Then
'            If LCase(Data1.Recordset!Description) <> Trim(LCase(Text3(3))) Then
'                 Picture2.Visible = True: Picture2.ZOrder
'            Else
'                 Picture2.Visible = False
'            End If
'         Else
'            Picture2.Visible = False
'         End If
'         Screen.MousePointer = vbArrow
' End Sub
' Sub Recalls_Lengths_Getlist(sLength As String)
'         Screen.MousePointer = vbHourglass   'kkk
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Q = Db.QueryDefs("MRQ_Recalls_GetAppointmentLengths")
'         Q("Enter Length") = sLength 'Trim(Text3(4))
'         Set Data1.Recordset = Q.OpenRecordset()
'        If RecordsExist(Data1) Then
'            If LCase(Data1.Recordset!Description) <> Trim(LCase(Text3(4))) Then
'                 Picture2.Visible = True: Picture2.ZOrder
'            Else
'                 Picture2.Visible = False
'            End If
'         Else
'            Picture2.Visible = False
'         End If
'         Screen.MousePointer = vbArrow
' End Sub
' Sub Recalls_Accept()
'     Dim ix As Integer
'     '----------------------
'     'Ensure minimum dataset
'     '----------------------
'     For icounter = 0 To 4
'         If Trim(Text3(icounter)) = "" Then
'            sMsg = "One or more pieces of information are missing." & vbLf & vbLf
'            sMsg = "You must enter data in all fields before saving."
'            lresponse = MsgBox(sMsg, vbInformation + vbOKOnly, "MISSING DATA:")
'            Text3(icounter).SetFocus
'   Exit Sub
'         End If
'     Next
'     '--------------------------------
'     'If a new record add new array id
'     '--------------------------------
'     If Not iEditing Then
'        On Error Resume Next
'        ix = -1
'        ix = UBound(gtPatient(1).Recalls())
'        ix = ix + 1
'        ReDim Preserve gtPatient(1).Recalls(ix)
'        gtPatient(1).Recalls(ix).Record_ID = 0
'     Else
'        ix = List1(0).ItemData(List1(0).ListIndex)
'     End If
'     gtPatient(1).Recalls(ix) = gtEditArea_Recall(0)
'     gtPatient(1).Recalls(ix).Array_index = ix
'     gtPatient(1).Recalls(ix).DataChanged = True
'     gtPatient(1).Recalls(ix).Last_date = Format(Trim(Text3(cRecall_Date)), "dd/mm/yyyy")
'     gtPatient(1).Recalls(ix).Memo = Trim(Text3(cRecall_Memo))
'     gtPatient(1).Recalls(ix).Type_ID = mrReviewtype_Recall
'     gtPatient(1).DataChanged = True
'     gtPatient(1).recalls_changed = True
'    '--------------------------------------------------
'     'Now add this or change this in the list of recalls
'     '--------------------------------------------------
'    ' If iEditing Then
'    '    List1(0).List(ix) = gtPatient(1).Recalls(ix).Summary
'    ' Else
'    '   List1(0).AddItem gtPatient(1).Recalls(ix).Summary
'    '   List1(0).ItemData(List1(0).NewIndex) = ix 'position in gtp(1).scripts()
'    'End If
'    Recalls_Display
'    Command3_Click (1) 'Clear the editing area
' End Sub
' Sub Recalls_Save()
'     On Error GoTo rse
'     Dim iInterval As Integer
'     Dim ix As Integer
'     Dim dNumber As Double
'     Dim dSegment As Double
'     Dim iExistingRecord As Integer
'     Dim SProgressText As String
'     Screen.MousePointer = vbHourglass
'     Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'     '--------------------------------------------
'     'If flag for any recall data changed true
'     '--------------------------------------------
'     If gtPatient(1).recalls_changed Then
'         '-----------------
'         'check whole array
'         '-----------------
'         For icounter = 0 To UBound(gtPatient(1).Recalls())
'             '----------------------------------------
'             'if an individual recall has changed data
'             '----------------------------------------
'             If gtPatient(1).Recalls(icounter).DataChanged _
'                And gtPatient(1).Recalls(icounter).Deleted = False Then
'                 '----------------------------------------------------
'                 'If the reason for recall does not exist add to table
'                 '----------------------------------------------------
'                 On Error GoTo 0
'                 If gtPatient(1).Recalls(icounter).Description_iD = 0 Then
'                    '-----------------------------------
'                    'First see if this reason does exist
'                    '-----------------------------------
'                    Set Q = Db.QueryDefs("MRQ_Recalls_GetReason_ID")
'                    Q("Enter Description") = gtPatient(1).Recalls(icounter).Description
'                    Set Rs = Q.OpenRecordset()
'                    If Rs.EOF + Rs.BOF <> -2 Then
'                         With Rs
'                             gtPatient(1).Recalls(icounter).Description_iD = !Description_iD
'                             .Close
'                         End With
'                    Else
'                         '--------------------------------------------------
'                         'Work out the number of months/days/years to recall
'                         '--------------------------------------------------
'                         iInterval = DateDiff("yyyy", Now, gtPatient(1).Recalls(icounter).Last_date)
'                         gtPatient(1).Recalls(icounter).Interval_Unit_ID = mrUnits_Years
'                         If iInterval = 0 Then
'                             iInterval = DateDiff("d", Now, gtPatient(1).Recalls(icounter).Last_date)
'                             gtPatient(1).Recalls(icounter).Interval_Unit_ID = mrUnits_days
'                             If iInterval > 7 Then
'                                iInterval = 0
'                             End If
'                         End If
'
'                         If iInterval = 0 Then
'                            iInterval = DateDiff("ww", Now, gtPatient(1).Recalls(icounter).Last_date)
'                            gtPatient(1).Recalls(icounter).Interval_Unit_ID = mrUnits_Weeks
'                            If iInterval Mod 4 <> 0 Then
'                               iInterval = 0
'                            End If
'                         End If
'
'                         If iInterval = 0 Then
'                            iInterval = DateDiff("m", Now, gtPatient(1).Recalls(icounter).Last_date)
'                            gtPatient(1).Recalls(icounter).Interval_Unit_ID = mrUnits_Months
'                         End If
'                         gtPatient(1).Recalls(icounter).Interval = iInterval
'                         Set Q = Db.QueryDefs("MRQ_Recalls_Reason_AddNew")
'                         Q("Enter Description") = gtPatient(1).Recalls(icounter).Description
'                         Q("Enter Default_Interval") = gtPatient(1).Recalls(icounter).Interval
'                         Q("Enter Default_Interval_Units") = gtPatient(1).Recalls(icounter).Interval_Unit_ID
'                         Q("Enter Default_Appointment_length_ID") = gtPatient(1).Recalls(icounter).Length_ID
'                         Q.Execute
'                         Set Rs = Db.OpenRecordset("lu_RecallFor", dbOpenTable)
'                         With Rs
'                              .MoveLast
'                              gtPatient(1).Recalls(icounter).Description_iD = !Description_iD
'                              .Close
'                         End With
'                     End If
'                 End If
'                 '------------------------------------------------
'
'                 'archive existing record, these records have an ID
'                 '-------------------------------------------------
'                 If gtPatient(1).Recalls(icounter).Record_ID <> 0 Then
'                     iExistingRecord = True
'                     '-----------------------------------------------
'                     'Archive the existing record but don't delete it
'                     '-----------------------------------------------
'                     Set Q = Db.QueryDefs("MRQ_Recall_Review_Archive")
'                     Q("Enter Recall_Review_ID") = gtPatient(1).Recalls(icounter).Record_ID
'                     Q.Execute
'                     '--------------------------------------------------
'                     'Insert the consultation it was archived at and the
'                     'archive reason to data changed
'                     '--------------------------------------------------
'                     Set Q = Db.QueryDefs("MRQ_Recall_Review_Archive_Duringconsult")
'                     Q("Enter Recall_Review_ID") = gtPatient(1).Recalls(icounter).Record_ID
'                     Q("Enter Consult_ID") = gtconsult.Consult_ID
'                     Q("Enter Archive_Reason_ID") = mrArchived_Changed
'                     Q.Execute
'                 End If
'                 Set Rs = Db.OpenRecordset("data_Recall_reviews", dbOpenTable)
'                 With Rs
'                 If gtPatient(1).Recalls(icounter).Record_ID <> 0 Then
'                     '--------------------------------------------------
'                     'Now edit the existing record to update the changes
'                     '--------------------------------------------------
'                     .Index = "PrimaryKey"
'                     .Seek "=", gtPatient(1).Recalls(icounter).Record_ID
'                     .Edit
'                     If gtPatient(1).Recalls(icounter).Consult_ID <> _
'                        gtconsult.Consult_ID Then
'                        dNumber = pnRecalls_Changed
'                        dSegment = pnGeneralHistory
'                     Else
'                        dNumber = pnRecalls
'                        dSegment = pnClinicalNotes
'                     End If
'                 Else
'                      .AddNew
'                      iExistingRecord = False
'                      dNumber = pnRecalls
'                      dSegment = pnClinicalNotes
'                 End If
'                 !Consult_ID = gtconsult.Consult_ID
'                 !Doctor_ID = gtDoctor.Doctor_ID
'                 !Method_ID = gtPatient(1).Recalls(icounter).Method_ID
'                 !Length_ID = gtPatient(1).Recalls(icounter).Length_ID
'                 !Type_ID = gtPatient(1).Recalls(icounter).Type_ID
'                 !Description_iD = gtPatient(1).Recalls(icounter).Description_iD
'                 !Description = gtPatient(1).Recalls(icounter).Description
'                 If gtPatient(1).Recalls(icounter).Last_date <> "" Then
'                    !Last_date = gtPatient(1).Recalls(icounter).Last_date
'                 End If
'                 !Interval = gtPatient(1).Recalls(icounter).Interval
'                 !End = gtPatient(1).Recalls(icounter).End
'                 .Update
'                 If iExistingRecord = False Then
'                     .MoveLast
'                     gtPatient(1).Recalls(icounter).Record_ID = !REVIEW_ID
'                 End If
'                 .Close
'               End With
'
'             '------------------------------------------------
'             'If this recall item was created in current consult
'             'archive its existing progress note(s)
'             '--------------------------------------------------
'             If gtPatient(1).Recalls(icounter).Consult_ID = gtconsult.Consult_ID _
'                And iExistingRecord = True Then
'                 Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'                 Q("Enter Consult_ID") = gtPatient(1).Recalls(icounter).Consult_ID
'                 Q("Enter Table_ID") = mrTable_Recalls
'                 Q("Enter Record_ID") = gtPatient(1).Recalls(icounter).Record_ID
'                 Q.Execute
'             End If
'             gtPatient(1).Recalls(icounter).Consult_ID = gtconsult.Consult_ID
'             gtPatient(1).Recalls(icounter).Saved = mrSaveUncommitted
'             '------------------------------------------
'             'add the progress notes for this item
'             '------------------------------------------
'             SProgressText = SProgressText & gtPatient(1).Recalls(icounter).Description _
'                & " on " & gtPatient(1).Recalls(icounter).Last_date _
'                & " to see Dr " & gtPatient(1).Recalls(icounter).Doctor_firstname & " " & gtPatient(1).Recalls(ix).Doctor_Surname _
'                & " (" & gtPatient(1).Recalls(icounter).ContactMethod_Name & "). "
'             If gtPatient(1).Recalls(icounter).Dealt_with = True Then
'                SProgressText = SProgressText & "This recall has been archived"
'                If gtPatient(1).Recalls(icounter).Memo <> "" Then
'                   SProgressText = SProgressText & " - " & gtPatient(1).Recalls(icounter).Memo
'                End If
'                SProgressText = SProgressText & "."
'             End If
'             Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'                ProgressNotes_Save dSegment, dNumber, _
'                       dNumber, "RECALLS", SProgressText, True, _
'                       mrTable_Recalls, _
'                       gtPatient(1).Recalls(icounter).Record_ID, _
'                       gtProgressNotes(0).Segments(dSegment).SubHeadings(dNumber).Notes_order, _
'                       Rs
'                  Rs.Close
'         End If
'         Next
'     End If
'     Db.Close
'     Screen.MousePointer = vbArrow
'     Exit Sub
' rse:
'
'
' End Sub
'
' Sub Recalls_GetForPatient()
'     SSActiveTabPanel1.Visible = True
'
'     '--------------------------------------------------------
'     'Fetches existing recalls for a patient from the database
'     'order them by date due, loads them into the
'     'gtpatient(1).recalls() Array
'     '--------------------------------------------------------
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Recalls_GetForPatient")
'     Q("Enter Patient ID") = gtPatient(1).Patient_ID
'     Q("Enter Type_ID") = mrReviewtype_Recall
'     Set Data2.Recordset = Q.OpenRecordset()
'     Load_Layout "Recalls", TDBGrid1(0), cGrID_Image_Recalls
'     itdbgrid1_image = cGrID_Image_Recalls
'     SSActiveTabs1.SelectedTab = 5
'     Screen.MousePointer = vbArrow
' End Sub
' Sub Recalls_Display()
'     Dim ix As Integer
'     '-------------------------------------------------------------------
'     'Displays existing recalls into the list1(0) when recalls are active
'     '-------------------------------------------------------------------
'      List1(0).Clear
'     '-----------------------------
'     'Exit if no array members
'     '-----------------------------
'     On Error Resume Next
'     ix = -1
'     ix = UBound(gtPatient(1).Recalls())
'     If ix = -1 Then
'        Exit Sub
'     End If
'     '-----------------------------
'     'Add all members into list1(0)
'     '-----------------------------
'      For icounter = 0 To ix
'         If gtPatient(1).Recalls(icounter).Deleted = False Then
'             sMsg = gtPatient(1).Recalls(icounter).Description & " on "
'             sMsg = sMsg & gtPatient(1).Recalls(icounter).Last_date & " to see Dr "
'             sMsg = sMsg & gtPatient(1).Recalls(icounter).Doctor_firstname & " "
'             sMsg = sMsg & gtPatient(1).Recalls(icounter).Doctor_Surname
'             sMsg = sMsg & " (" & gtPatient(1).Recalls(icounter).ContactMethod_Name & ")"
'             List1(0).AddItem sMsg
'             List1(0).ItemData(List1(0).NewIndex) = icounter
'         End If
'     Next
' End Sub
' Sub Recalls_Reasons_GetList()
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Recalls_GetReason")
'     Q("Enter Reason") = Trim(Text3(1))
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(Text3(1)) Then
'        If LCase(Data1.Recordset!Description) <> Trim(LCase(Text3(1))) Then
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'             Picture2.Visible = False
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
' Sub Get_OverDueRecalls()
'
'     sSql = "SELECT Consult.Patient_ID, data_Recalls.Date, "
'     sSql = sSql & "Data_Recalls.Recall_ID, "
'     sSql = sSql & "DateDiff('m',[Data_recalls].[Date],Now()) AS Overdue, "
'     sSql = sSql & "data_Recalls.Description_ID, lu_RecallFor.Description, "
'     sSql = sSql & "data_Recalls.Dealt_With, data_Recalls.Archived "
'     sSql = sSql & "FROM (Consult INNER JOIN data_Recalls ON "
'     sSql = sSql & "Consult.Consult_ID = data_Recalls.Consult_ID) "
'     sSql = sSql & "LEFT JOIN lu_RecallFor ON data_Recalls.Description_ID = "
'     sSql = sSql & "lu_RecallFor.Description_ID "
'     sSql = sSql & "WHERE (((Consult.Patient_ID) = "
'     sSql = sSql & gtPatient(1).Patient_ID & ") "
'     sSql = sSql & "AND ((DateDiff('d',[data_recalls].[date],Now()))>30) "
'     sSql = sSql & "AND ((data_Recalls.Dealt_With)=False) "
'     sSql = sSql & "AND ((data_Recalls.Archived)=False)) "
'     sSql = sSql & "ORDER BY lu_RecallFor.DESCRIPTION"
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Rs = Db.OpenRecordset(sSql)
'     With Rs
'          If .EOF + .BOF <> -2 Then
'            '-------------------------------------------------------
'            'Show outstanding activities, and keep recall id so that
'            'the right mouse menu can mark them off as done
'            '-------------------------------------------------------
'
'            Do Until .EOF
'                 sMsg = !Description & " "
'                 If IsNull(!Overdue) Then
'                    ' sMsg = sMsg & " no review recorded "
'                 Else
'                     sMsg = sMsg & !Overdue & " months overdue"
'                 End If
'                 List1(3).AddItem sMsg
'                 List1(3).ItemData(List1(3).NewIndex) = !Recall_ID
'                 .MoveNext
'            Loop
'         End If
'         .Close
'     End With
'     Db.Close
'     If List1(3).ListCount Then
'        Label6.Visible = True
'        List1(3).Visible = True
'     Else
'         Label6.Visible = False
'         List1(3).Visible = False
'     End If
'    ' If Text6(1) <> "" Then
'    '    Text6(1).Visible = True
'    '    Label6.Visible = True
'    ' End If
' End Sub
' Sub Recalls_Mark_Complete()
'
'    ' On Error GoTo CompleteRecall_error
'     '------------------------------------------------
'     'Called from the pop up recall menu over list1(3)
'     'marks the recall as completed in the database
'     '------------------------------------------------
'     Dim ws As Workspace
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'     'ix = List1(3).ItemData(List1(3).ListIndex)
'     sSql = "UPDATE data_Recalls SET data_Recalls.Dealt_With = Yes, "
'     sSql = sSql & "data_Recalls.Archived = Yes, "
'     sSql = sSql & "data_Recalls.[Memo] = " & Chr$(34)
'     sSql = sSql & SSActiveToolBars1.Tools("ID_Completed").Edit.Text & Chr$(34)
'     sSql = sSql & "WHERE (((data_Recalls.Recall_ID)="
'     sSql = sSql & List1(3).ItemData(List1(3).ListIndex) & "))"
'     Db.Execute sSql
'     Db.Close
'     sMsg = "The following activity will be marked as completed:." & vbLf & vbLf
'    ' For icounter = 0 To UBound(gtPatient(1).Recalls())
'    '    If gtPatient(1).Recalls(icounter).ID = List1(3).ItemData(List1(3).ListIndex) Then
'    '       sMsg = sMsg & gtPatient(1).Recalls(icounter).description
'    '       sMsg = sMsg & "Which was due on " & gtPatient(1).Recalls(icounter).Date & vbLf & vbLf
'    '       Exit For
'    '     End If
'    ' Next
'     sMsg = sMsg & List1(3).List(List1(3).ListIndex) & vbLf & vbLf
'     sMsg = sMsg & "Do you wish to commit these changes to the database?"
'     lresponse = MsgBox(sMsg, vbYesNoCancel, "Outstanding Activities")
'     If lresponse = vbYes Then
'        '----------------------------------------
'        'Committ the transaction and re-set flags
'        '----------------------------------------
'        ws.CommitTrans
'
'        Get_OverDueRecalls
'
'     Else
'        ws.Rollback
'     End If
'     ws.Close
'     Exit Sub
'
'     On Error Resume Next
'     sMsg = "An error occurred whilst attempting to mark the activity as complete." & vbLf & vbLf
'     sMsg = sMsg & "The transaction has been rolled back, data is not saved."
'     lresponse = MsgBox(sMsg, vbInformation + vbOKOnly, "DATA ERROR")
'     Db.Close
'     ws.Rollback
'     ws.Close
'     On Error GoTo 0
'     Exit Sub
' End Sub
' Sub Get_OverDueReviews()
'     '-----------------------------------------------------
'     'Mark overdue reviews as outstanding ie overdue = true
'     'NB:the binary overlay file for the grid in the values
'     'property contains these values:
'     '       0 = checked checkbox
'     '      -1 = unchecked checkbox
'     'this is opposite to normal because the user must be
'     'allowed to indicate review is complete (ie NOT overdue = 0)
'     'by checking the box with a tick
'     '-----------------------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Reviews_MarkOverdue")
'     Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'     Q.Execute
'    '----------------------------------------------
'    'Get all logged review items and months overdue
'    '----------------------------------------------
'     Set Q = Db.QueryDefs("MRQ_Reviews_Overdue_GetForPatient")
'     Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'     Set Data3.Recordset = Q.OpenRecordset()
'     Set Data3RsClone = Data3.Recordset.Clone
'     Set ucfField_MonthsOverdue = Data3RsClone.Fields("Months_overdue")
'     icounter = 0
'     '--------------------------------------------------------
'     'If there are any overdues, load to patients review array
'     '--------------------------------------------------------
'     If RecordsExist(Data3) Then
'       ' Load_Layout "Review", TDBGrid1(1), cGrID_Image_Reviews
'        With Data3.Recordset
'             .MoveLast
'             ReDim Preserve gtPatient(1).Reviews(.RecordCount - 1)
'             .MoveFirst
'             Do Until .EOF
'                  gtPatient(1).Reviews(icounter).Array_index = icounter
'                  gtPatient(1).Reviews(icounter).Description = !Description
'                  gtPatient(1).Reviews(icounter).Interval = !Interval
'                  gtPatient(1).Reviews(icounter).Interval_Unit_ID = !Unit_ID
'                  gtPatient(1).Reviews(icounter).End = !End
'                  gtPatient(1).Reviews(icounter).Record_ID = !REVIEW_ID
'                  If Not IsNull(!Last_date) Then
'                      gtPatient(1).Reviews(icounter).Last_date = "" & !Last_date
'                  End If
'                  gtPatient(1).Reviews(icounter).Overdue = !Overdue
'                  If Not IsNull(!months_overdue) Then
'                     gtPatient(1).Reviews(icounter).Overdue_Months = !months_overdue
'
'                  End If
'                  .MoveNext
'                  icounter = icounter + 1
'             Loop
'             .MoveFirst
'        End With
'        '-----------------------
'        'Now re-bind to the grid
'        '-----------------------
'        With TDBGrid1(1)
'              .ReBind
'              .Visible = True
'        End With
'      Else
'        TDBGrid1(1).Visible = False
'     End If
' End Sub
' Sub Patient_Get_Overdues()
'     Get_OverDueReviews
' End Sub
'
'
'
'
'
'
'
' Sub ProgressNotes_Save(iSegment_ID As Double, _
'         dHeading_ID As Double, _
'         dProblem_ID As Double, _
'         sProblem_Text As String, _
'         Progress_Text As String, _
'         iSaveConsult As Integer, _
'         lTable_ID As Long, _
'         lRecord_ID As Long, _
'         iStartLine As Integer, _
'         Rs As Recordset)
'         '--------------------------------------------------------------
'         'split progress notes into text maximum 115 characters per line
'         '--------------------------------------------------------------
'         sMsg = Progress_Text
'         split_lines 115, sMsg
'         For ix = 0 To UBound(AnyArray())
'              iStartLine = iStartLine + 1
'              With Rs
'                 .AddNew
'                 !Consult_ID = gtconsult.Consult_ID
'                 !Segment_ID = iSegment_ID
'                 !Problem_ID = dProblem_ID
'                 !Problem_Text = sProblem_Text
'                 !Heading_ID = dHeading_ID
'                 !Display_Order = iStartLine
'                 !Text = AnyArray(ix)
'                 !Table_ID = lTable_ID
'                 !Record_ID = lRecord_ID
'                 .Update
'             End With
'         Next ix
'
' End Sub
'
'
'
' Sub SH_SelectCountry()
'     If bExitRoutine Or gtPatient(1).Ethnicity.Country = Trim(Text2(0)) Then
'        Exit Sub
'     End If
'          bExitRoutine = True
'          If itdbgrid2_image <> cGrID_Image_Countries Then Exit Sub
'          If Len(Text2(0)) Then
'              If RecordsExist(Data1) Then
'                 gtPatient(1).Ethnicity.Country = Data1.Recordset!Country
'                 gtPatient(1).Ethnicity.Country_Id = Data1.Recordset!Country_Id
'                 gtPatient(1).Ethnicity.DataChanged = True
'                 gtPatient(1).DataChanged = True
'                 Text2(0) = Data1.Recordset!Country
'              Else
'
'                 gtPatient(1).Ethnicity.Country = ""
'                 gtPatient(1).Ethnicity.Country_Id = 0
'                 gtPatient(1).Ethnicity.DataChanged = True
'                 gtPatient(1).DataChanged = True
'                 Text2(0) = ""
'              End If
'           Else
'              '-------------------------------------------------
'              'Has the user deleted an existing country details?
'              '-------------------------------------------------
'              If gtPatient(1).Ethnicity.ID <> 0 Then
'                 gtPatient(1).Ethnicity.Country = ""
'                 gtPatient(1).Ethnicity.Country_Id = 0
'                 gtPatient(1).Ethnicity.DataChanged = True
'                 gtPatient(1).DataChanged = True
'              End If
'           End If
'           bExitRoutine = False
' End Sub
' Sub Script_Brand_SelectBrand()
'    '--------------------------------------
'    'User has selected a brand from the list
'    '--------------------------------------
'    bExitRoutine = True
'     If itdbgrid2_image = cGrID_Image_Brands And Picture2.Visible Then
'         If RecordsExist(Data1) Then
'            With Data1.Recordset
'              gtNew_ScriptItem(0).Brand = !Brand
'              '------------------------------------------------
'              'get generic name, classes and class descriptions
'              '------------------------------------------------
'              Script_Brand_Get_GenericsANDClassCodes
'              '-------------------------------------------------------------
'              'Check patient not allergic, if they are exit, clear edit area
'              '-------------------------------------------------------------
'              Allergy_Check bExitRoutine, gtNew_ScriptItem(0).ClassCodes(), True, 0
'              If bExitRoutine Then
'                 bExitRoutine = False
'                 Command3_Click (1)
'       Exit Sub
'              End If
'              '-------------------------------------------------------
'              'Check for interactions and show any in abbreviated text
'              '-------------------------------------------------------
'              Script_Interactions_1_MakeArray
'              gtScript_ItemCopy(0) = gtNew_ScriptItem(0)
'              Script_Interactions_2_FormatText
'              '----------------------------------------------------------
'              'Fill in the other text boxes ie class and generic and then
'              'fill the gtNew_scriptItem() array
'              '----------------------------------------------------------
'              Script_Brand_Class_Show
'              bExitRoutine = True
'              Text3(1) = gtNew_ScriptItem(0).GenericString
'             ' Text3(1).Locked = True
'              Text3(2) = gtNew_ScriptItem(0).Brand
'             'Text3(2).Locked = True
'              gtNew_ScriptItem(0).Formcode = !Formcode
'              gtNew_ScriptItem(0).Formulation = !Form
'              gtNew_ScriptItem(0).Prodcode = !Prodcode
'              gtNew_ScriptItem(0).Section = "" & !Section
'              gtNew_ScriptItem(0).SubSection = "" & !SubSection
'              gtNew_ScriptItem(0).pc = "" & !pc
'              Script_Preg_PromptPregCat
'              gtNew_ScriptItem(0).gf = "" & !gf
'              If InStr(!rx_text, "(S8)") Then
'                 gtNew_ScriptItem(0).s8 = True
'                 Label7(2).Visible = True 'contains the s8 logo
'              Else
'                 gtNew_ScriptItem(0).s8 = False
'              End If
'              gtNew_ScriptItem(0).drowsy = "" & !drowsy
'              If LCase(!drowsy) = "yes" Then
'                 Label7(3).Visible = True
'              End If
'              Picture2.Visible = False
'
'              For icounter = 0 To 2
'                 Text3(icounter).Enabled = False
'              Next icounter
'              Text3(3).SetFocus
'
'            End With
'         Else
'            'no legitimate brand
'            Command3_Click (1)
'         End If
'     Else
'         'Text3(2) = ""
'     End If
'    bExitRoutine = False
' End Sub
'
' Sub SH_SelectLanguage()
'     If bExitRoutine Or itdbgrid2_image <> cGrID_Image_languages _
'        Or LCase(gtPatient(1).Ethnicity.Language) = LCase(Trim(Text2(1))) Then
'        Exit Sub
'     End If
'     bExitRoutine = True
'    If Len(Text2(1)) Then
'         If RecordsExist(Data1) And itdbgrid2_image = cGrID_Image_languages Then
'            Text2(1) = Data1.Recordset!Language
'            gtPatient(1).Ethnicity.Language = Data1.Recordset!Language
'            gtPatient(1).Ethnicity.Language_ID = Data1.Recordset!Language_ID
'            gtPatient(1).Ethnicity.DataChanged = True
'            gtPatient(1).DataChanged = True
'         Else
'            Text2(1) = ""
'            gtPatient(1).Ethnicity.Language = ""
'            gtPatient(1).Ethnicity.Language_ID = 0
'            gtPatient(1).Ethnicity.DataChanged = True
'            gtPatient(1).DataChanged = True
'         End If
'    Else
'         '-------------------------------------------------
'         'Has the user deleted the existing language details?
'         '-------------------------------------------------
'             If gtPatient(1).Ethnicity.ID <> 0 Then
'                gtPatient(1).Ethnicity.Language = ""
'                gtPatient(1).Ethnicity.Language_ID = 0
'                gtPatient(1).Ethnicity.DataChanged = True
'                gtPatient(1).DataChanged = True
'             End If
'    End If
'     bExitRoutine = False
' End Sub
' Sub Select_Occupation()
'    If bExitRoutine Or itdbgrid2_image <> cGrID_Image_Occupations Then
'       Exit Sub
'    End If
'    If LCase(gtPatient(1).Occupation) = LCase(Trim(Text2(2))) Then
'       Exit Sub
'    End If
'     'this occupation data is temporarily in ethnicity
'      If Len(Text2(2)) And itdbgrid2_image = cGrID_Image_Occupations Then
'         If RecordsExist(Data1) Then
'             bExitRoutine = True
'             Text2(2) = Data1.Recordset!Description
'             bExitRoutine = False
'             gtPatient(1).Occupation = Data1.Recordset!Description
'             gtPatient(1).Occupation_ID = Data1.Recordset!Occupation_ID
'             gtPatient(1).Occupation_Changed = True
'             gtPatient(1).Ethnicity.DataChanged = True
'             gtPatient(1).DataChanged = True
'          Else
'              '---------------------------------------------------------
'              'otherwise  this may be a new occupation allocate new data
'              'to gtpatient variables. (new occupation will be added to
'              'the database at time data saved
'              '---------------------------------------------------------
'               gtPatient(1).Occupation = Trim(Text2(2))
'               gtPatient(1).Occupation_ID = 0
'               gtPatient(1).Occupation_Changed = True
'               gtPatient(1).Ethnicity.DataChanged = True 'temporary
'               gtPatient(1).DataChanged = True
'              Command2(0).Enabled = True 'the save button
'        End If
'     Else
'         '----------------------------------------------------
'         'Has the user deleted the existing occupation details
'         '----------------------------------------------------
'         If gtPatient(1).Occupation_ID <> 0 Then
'            gtPatient(1).Occupation = ""
'            gtPatient(1).Occupation_ID = 0
'            gtPatient(1).Occupation_Changed = True
'            gtPatient(1).Ethnicity.DataChanged = True 'temporary
'            gtPatient(1).DataChanged = True
'         End If
'     End If
' End Sub
'
' Sub FH_Select_RelativesDisease()
'     Dim QMark  As Boolean
'     bExitRoutine = True
'     sMsg = Text3(cTxt_FHDisease).Text
'     '----------------------------------------------
'     'chop of a preceeding ? character from the term
'     '----------------------------------------------
'     If InStr(1, sMsg, "?") Then
'         sMsg = Trim(right(sMsg, Len(sMsg) - 1))
'         QMark = True
'     End If
'     If RecordsExist(Data1) And itdbgrid2_image = cGrID_Image_FH_Condition _
'           And Data1.Recordset.Fields(0).Name = "Description" Then
'           '-------------------------------------------------------------------
'           'If text in text box matches the recordset, or the user has selected
'           'a different term from the grid
'           '-------------------------------------------------------------------
'           If LCase(Data1.Recordset!Description) = LCase(Text3(cTxt_FHDisease)) Or iUserclickedOnList = True Then
'              sMsg = Data1.Recordset!Description
'              If QMark Then
'                sMsg = "?" & sMsg
'              End If
'              lozcode = Data1.Recordset!code
'           Else
'              lozcode = 0
'              sMsg = Trim(Text3(cTxt_FHDisease))
'          End If
'     Else
'        lozcode = 0
'     End If
'     Text3(cTxt_FHDisease) = sMsg
'     Picture2.Visible = False
'     checkspelling Text3(cTxt_FHDisease)
'     If speller.ReplaceCount Then
'        Coding_HaveTerm_Getcode Trim(Text3(cTxt_FHDisease))
'     End If
'     bExitRoutine = False
'     iUserclickedOnList = False
'
' End Sub
' Sub PastHistory_Select_Condition()
'     Dim QMark  As Boolean
'     bExitRoutine = True
'     sMsg = Text3(cTxt_PHCondition).Text
'     '----------------------------------------------
'     'chop of a preceeding ? character from the term
'     '----------------------------------------------
'     If InStr(1, sMsg, "?") Then
'         sMsg = Trim(right(sMsg, Len(sMsg) - 1))
'         QMark = True
'     End If
'     If RecordsExist(Data1) And itdbgrid2_image = cGrID_Image_PastCondition _
'           And Data1.Recordset.Fields(0).Name = "Description" Then
'           '-------------------------------------------------------------------
'           'If text in text box matches the recordset, or the user has selected
'           'a different term from the grid
'           '-------------------------------------------------------------------
'           If LCase(Data1.Recordset!Description) = LCase(Text3(cTxt_PHCondition)) Or iUserclickedOnList = True Then
'              sMsg = Data1.Recordset!Description
'              If QMark Then
'                sMsg = "?" & sMsg
'              End If
'              lozcode = Data1.Recordset!code
'           Else
'              lozcode = 0
'              sMsg = Trim(Text3(cTxt_PHCondition))
'          End If
'     Else
'        lozcode = 0
'        If QMark Then
'           sMsg = "?" & sMsg
'        End If
'     End If
'     Text3(cTxt_PHCondition) = sMsg
'     Picture2.Visible = False
'     checkspelling Text3(cTxt_PHCondition)
'     If speller.ReplaceCount Then
'        Coding_HaveTerm_Getcode Trim(Text3(cTxt_PHCondition))
'     End If
'     bExitRoutine = False
'     iUserclickedOnList = False
' End Sub
' Sub Requests_Select_Condition()
'     Dim QMark  As Boolean
'     bExitRoutine = True
'     sMsg = Text3(cRequest_notes).Text
'     '----------------------------------------------
'     'chop of a preceeding ? character from the term
'     '----------------------------------------------
'     If InStr(1, sMsg, "?") Then
'         sMsg = Trim(right(sMsg, Len(sMsg) - 1))
'         QMark = True
'     End If
'     If RecordsExist(Data1) And itdbgrid2_image = cGrID_Image_Requests_notes _
'           And Data1.Recordset.Fields(0).Name = "Description" Then
'           '-------------------------------------------------------------------
'           'If text in text box matches the recordset, or the user has selected
'           'a different term from the grid
'           '-------------------------------------------------------------------
'           If LCase(Data1.Recordset!Description) = LCase(Text3(cRequest_notes)) Or iUserclickedOnList = True Then
'              sMsg = Data1.Recordset!Description
'              If QMark Then
'                sMsg = "?" & sMsg
'              End If
'              lozcode = Data1.Recordset!code
'           Else
'              lozcode = 0
'              sMsg = Trim(Text3(cRequest_notes))
'          End If
'     Else
'        lozcode = 0
'        If QMark Then
'           sMsg = "?" & sMsg
'        End If
'     End If
'    ' Text3(cRequest_notes) = sMsg
'     Picture2.Visible = False
'    ' checkspelling Text3(cRequest_notes)
'    ' If speller.ReplaceCount Then
'    '    Coding_HaveTerm_Getcode Trim(Text3(cRequest_notes))
'    ' End If
'     bExitRoutine = False
'     iUserclickedOnList = False
' End Sub
' Sub Requests_Select_Medication()
'      bExitRoutine = True
'      sMsg = Text3(cRequest_Medications).Text
'      If RecordsExist(Data1) And itdbgrid2_image = cGrID_Image_DrugProducts _
'           And Data1.Recordset.Fields(0).Name = "Description" Then
'           '-------------------------------------------------------------------
'           'If text in text box matches the recordset, or the user has selected
'           'a different term from the grid
'           '-------------------------------------------------------------------
'           If LCase(Data1.Recordset!Description) = LCase(Text3(cRequest_Medications)) Or iUserclickedOnList = True Then
'              sMsg = Data1.Recordset!Description
'           End If
'    End If
'    Picture2.Visible = False
'       bExitRoutine = False
'     iUserclickedOnList = False
' End Sub
' Sub FH_Select_FamilyRelationship()
'      '-----------------------------------------------------------------------
'      'Must enforce selection of one of the named relationships, not free text
'      '-----------------------------------------------------------------------
'     On Error GoTo 0
'      If RecordsExist(Data1) And itdbgrid2_image = cGrID_Image_FH_Relationships _
'           And Data1.Recordset.Fields(0).Name = "Description" Then
'
'         Picture2.Visible = False
'        'DoEvents
'         bExitRoutine = True
'         'If valid record exists, accept that family member
'        'If RecordsExist(Data1) Then
'              Text3(cTxt_FHRelationship) = Data1.Recordset!Description
'              iRelationship_ID = Data1.Recordset!Relationship_ID
'              sRelationship_Name = Data1.Recordset!Description
'
'       Else
'              Text3(cTxt_FHRelationship) = ""
'              iRelationship_ID = 0
'              sRelationship_Name = ""
'        'End If
'         bExitRoutine = False
'  End If
' End Sub
' Sub FH_displayMember()
'     Dim ix As Integer
'     bExitRoutine = True
'     '----------------------
'     'Clear the editing area
'     '----------------------
'     For icounter = cTxt_FHRelativeName To cTxt_FHDOB
'         Text3(icounter) = ""
'     Next
'     '--------------------------------------------------------------
'     'As the data is now being displayed in the editing area and the
'     'user can change it, set the editing flag
'     '--------------------------------------------------------------
'     iEditing = True
'     '-------------------------------------------------
'     'This gives the position of data in the data array
'     '-------------------------------------------------
'     ix = List1(0).ItemData(List1(0).ListIndex)
'     Text3(cTxt_FHRelativeName) = gtPatient(1).FamilyMembers(ix).Person_Name
'     Text3(cTxt_FHRelationship) = gtPatient(1).FamilyMembers(ix).Relationship
'     If gtPatient(1).FamilyMembers(ix).Age_Death <> -1 Then
'         Text3(cTxt_FHAgeDeath) = gtPatient(1).FamilyMembers(ix).Age_Death
'     Else
'         Text3(cTxt_FHAgeDeath) = ""
'     End If
'     If gtPatient(1).FamilyMembers(ix).Date_of_Birth <> "" Then
'         Text3(cTxt_FHDOB) = gtPatient(1).FamilyMembers(ix).Date_of_Birth
'     End If
'     iRelationship_ID = gtPatient(1).FamilyMembers(ix).Relationship_ID
'     sRelationship_Name = gtPatient(1).FamilyMembers(ix).Relationship
'     bExitRoutine = False
'    End Sub
' Sub FH_DisplayMembersList()
'     '-------------------------------------
'     'the error will trip if array is empty
'     '-------------------------------------
'     On Error GoTo FH_DME
'     '-----------------------------------------------
'     'List1(0) contains a list a family members names
'     '-----------------------------------------------
'     List1(0).Clear
'     List1(0).Columns = 1
'     For icounter = 0 To UBound(gtPatient(1).FamilyMembers())
'         If gtPatient(1).FamilyMembers(icounter).Deleted = False Then
'             List1(0).AddItem gtPatient(1).FamilyMembers(icounter).Person_Name & " (" & gtPatient(1).FamilyMembers(icounter).Relationship & ")"
'             List1(0).ItemData(List1(0).NewIndex) = icounter
'         End If
'     Next
'     List1(0).ListIndex = 0
'     Exit Sub
' FH_DME:
'     Exit Sub
' End Sub
' Sub FH_DisplayDisease(iIndex As Integer)
'         Dim ix As Integer
'         bExitRoutine = True
'         '---------------------------
'         'clear existing disease text
'         '---------------------------
'         For icounter = cTxt_FHDisease To cTxt_FHAgeOnset
'             Text3(icounter) = ""
'         Next
'         '---------------------------------------------------
'         'Display current disease details for list1(1) member
'         '---------------------------------------------------
'         ix = List1(0).ItemData(List1(0).ListIndex)
'         Text3(cTxt_FHDisease) = gtPatient(1).FamilyMembers(ix).Conditions(iIndex).Description
'         sSearchText = Text3(cTxt_FHDisease)
'         Text3(cTxt_FHComment) = gtPatient(1).FamilyMembers(ix).Conditions(iIndex).Comment
'         If gtPatient(1).FamilyMembers(ix).Conditions(iIndex).age_Onset <> -1 Then
'             Text3(cTxt_FHAgeOnset) = gtPatient(1).FamilyMembers(ix).Conditions(iIndex).age_Onset
'         End If
'         If gtPatient(1).FamilyMembers(ix).Conditions(iIndex).Cause_of_Death = True Then
'            Text3(cTxt_FHDiedOfThis) = "Yes"
'         ElseIf gtPatient(1).FamilyMembers(ix).Conditions(iIndex).Cause_of_Death = False Then
'             Text3(cTxt_FHDiedOfThis) = "No"
'         End If
'         lozcode = gtPatient(1).FamilyMembers(ix).Conditions(iIndex).Ozcode
'         bExitRoutine = False
'  End Sub
' Sub FH_DisplayDiseasesList()
'     On Error GoTo fh_DDLE
'     Dim iY As Integer 'the number of conditions
'     Dim ix As Integer 'the value of list1(0).listindex
'     '-----------------------------------------------------------------
'     'Displays all the diseases for a particular member as indicated by
'     'list1(0).listindex
'     '-----------------------------------------------------------------
'      If bExitRoutine Then Exit Sub
'      '------------------------------------------------------------------
'      'The family members disease history held in the array
'      'gtpatient(1).FamilyMembers() (see Medrec.bas) for type definitions
'      '------------------------------------------------------------------
'      Option2(0).Value = False 'the died of this yes
'      Option2(1).Value = False 'the died of ths no
'      List1(1).Clear
'      ix = List1(0).ItemData(List1(0).ListIndex) 'the current name highlighted in list1(0)
'      iY = UBound(gtPatient(1).FamilyMembers(ix).Conditions())
'      '------------------------------------------------------------------
'      'For each condition for this family member (there will always be at
'      'least one, loop though and display the conditions
'      '------------------------------------------------------------------
'      For icounter = 0 To iY
'          If gtPatient(1).FamilyMembers(ix).Conditions(icounter).Deleted <> True Then
'              sMsg = gtPatient(1).FamilyMembers(ix).Conditions(icounter).Description
'              If gtPatient(1).FamilyMembers(ix).Conditions(icounter).age_Onset <> -1 Then
'                  sMsg = sMsg & " age " & gtPatient(1).FamilyMembers(ix).Conditions(icounter).age_Onset
'              Else
'                  sMsg = sMsg & " age? "
'              End If
'              If gtPatient(1).FamilyMembers(ix).Conditions(icounter).Cause_of_Death <> 0 Then
'                   sMsg = sMsg & " Caused death:"
'                   If gtPatient(1).FamilyMembers(ix).Age_Death <> -1 Then
'                      sMsg = sMsg & gtPatient(1).FamilyMembers(ix).Age_Death
'                   Else
'                      sMsg = sMsg & "?age"
'                   End If
'              End If
'              List1(1).AddItem sMsg
'              List1(1).ItemData(List1(1).NewIndex) = icounter
'          End If
'      Next
'      List1(1).ListIndex = 0
'      Exit Sub
' fh_DDLE:
'     Exit Sub
' End Sub
' Sub Show_Section(SectionName As String)
'
'     iStopAllKeyBoardInput = True
'
'    Select Case SectionName
'    Case "Overview"
'         If iCurrentSection <> cSection_Overview Then
'           ' SSListBar1.Groups(1).ListItems(1).ForeColor = vbRed
'            iCurrentSection = cSection_Overview
'            Design_Panel_Overview
'            Display_SectionData
'         End If
'    Case "New Notes"
'             If iCurrentSection <> cSection_NewNotes Then
'
'                 iCurrentSection = cSection_NewNotes
'                 Design_InputPanels
'                 Display_SectionData
'             End If
'
'    Case "Family and Social"
'         If iCurrentSection <> cSection_FamilyandSocialHistory Then
'
'            iCurrentSection = cSection_FamilyandSocialHistory
'            Design_InputPanels
'            Display_SectionData
'            Command3_Click (1)
'         End If
'    Case "Past History"
'          If iCurrentSection <> cSection_PastHistory Then
'
'             iCurrentSection = cSection_PastHistory
'             Design_InputPanels
'             Display_SectionData
'             GetList_OzcodeTerms
'          End If
'          Command3_Click (1)
'     Case "Immunisations"
'         If iCurrentSection <> cSection_Immunisations Then
'
'           iCurrentSection = cSection_Immunisations
'
'          '  itdbgrid2_image = cGrID_Image_Immunisation_Schedules
'           Design_InputPanels
'           Display_SectionData
'           Call Text3_GotFocus(0)
'         End If
'     End Select
'     '--------------------------------------------------
'     'Remove display box overlay and contents if visible
'     '--------------------------------------------------
'
'      Picture5.Visible = False
'      Picture1(2).Visible = False
'      Picture2.Visible = False
'      iStopAllKeyBoardInput = False
'
' End Sub
'
'
' Sub Enable_Controls(Frm As Form, State As Integer)
'     Exit Sub
'     On Error Resume Next
'     Dim i   ' Declare variable.
'     For i = 0 To Frm.Controls.Count - 1
'        If Not TypeOf Frm.Controls(i) Is SSActiveToolBars Then
'             If Not TypeOf Frm.Controls(i) Is Timer Then
'                 Frm.Controls(i).Enabled = State
'             End If
'         End If
'     Next i
' End Sub
'
' Sub Select_Immunisation_Schedule()
'     '------------------------------------------------
'     'Pick schedule from the visible list eg influenza
'     '------------------------------------------------
'     If itdbgrid2_image = cGrID_Image_Immunisation_Schedules And Picture2.Visible Then
'     'If itdbgrid2_image = cList_ImmunisationSchedule And Picture2.Visible Then
'         If RecordsExist(Data1) Then
'            Text3(0) = Data1.Recordset!Schedule_Text
'            iSchedule_ID = Data1.Recordset!Schedule_ID
'            Picture2.Visible = False
'         End If
'     End If
'
' End Sub
' Sub IMM_Select_Vaccine_Name()
'     '------------------------------------------------------
'     'Select a vaccine from the list of those for a schedule
'     '------------------------------------------------------
'     'If itdbgrid2_image = cList_Vaccines Then
'      If itdbgrid2_image = CGrID_Image_Vaccines Then
'         If RecordsExist(Data1) Then
'             Text3(1) = Data1.Recordset!Trade_Name & " (" & Data1.Recordset!Description & ")"
'             iVaccine_ID = Data1.Recordset!vaccine_Id
'             sVaccine_Trade_Name = Data1.Recordset!Trade_Name
'             svaccine_Formulation = Data1.Recordset!Formulation
'             sVaccine_Abbreviation = "" & Data1.Recordset!Abbreviation
'             iLive_Vaccine = Data1.Recordset!live_vaccine
'             Text3(2) = sToday
'             Text3(3) = "" & Data1.Recordset!Last_Batch_No
'             If Text3(3) <> "" Then
'                Text3(4).SetFocus
'             Else
'                Text3(3).SetFocus
'             End If
'             Picture2.Visible = False
'         End If
'     End If
' End Sub
' Sub Script_Packs_Getlist()
'         Screen.MousePointer = vbHourglass
'         Set Db = OpenDatabase(sDrugs_MdB)
'         Set Q = Db.QueryDefs("MRQ_Packs_GetList")
'         Q("Enter Brand") = gtNew_ScriptItem(0).Brand
'         Q("Enter Form") = gtNew_ScriptItem(0).Formulation
'         Set Data1.Recordset = Q.OpenRecordset()
'         If RecordsExist(Data1) Then
'             Set Data1Rsclone = Data1.Recordset.Clone
'             Set ucfField_Active = Data1Rsclone.Fields!active
'             Set ucfField_Active_units = Data1Rsclone.Fields!active_units
'             Set ucfField_Per_volume = Data1Rsclone.Fields!per_volume
'             Set ucfField_Per_vol_units = Data1Rsclone!per_vol_units
'             Set ucfField_Unit_volume = Data1Rsclone.Fields!unit_volume
'             Set ucfField_Unit_vol_units = Data1Rsclone.Fields!unit_vol_units
'             Set ucfField_Units_per_pack = Data1Rsclone.Fields!units_per_pack
'             Set ucfField_No_of_Packs = Data1Rsclone.Fields!No_of_packs
'             Set ucfField_pbs = Data1Rsclone.Fields!pbs
'             Set ucfField_pbs_price = Data1Rsclone.Fields!pbs_price
'             Set ucfField_bpp = Data1Rsclone.Fields!bpp
'             Set ucfField_price = Data1Rsclone.Fields!price
'
'             If Data1Rsclone.RecordCount > 1 Then
'                Picture2.Visible = True: Picture2.ZOrder
'             End If
'         Else
'            Picture2.Visible = False
'         End If
'         Screen.MousePointer = vbArrow
'         bExitRoutine = False
'         TDBGrid2.ReBind
'         TDBGrid2.Refresh
'         If Data1.Recordset.RecordCount = 1 Then
'            Text3(4).SetFocus
'         End If
' End Sub
'
' Sub Script_Packs_Select()
'    '--------------------------------------
'    'User has selected a pack from the list
'    '--------------------------------------
'    Timer2.Enabled = False 'patch
'    bExitRoutine = True
'     If itdbgrid2_image = cGrID_Image_Packs Then
'        If RecordsExist(Data1) Then
'            With Data1.Recordset
'                 Text3(3) = TDBGrid2.Columns(0).Text
'                 '-----------------
'                 'Show the strength
'                 '-----------------
'                 sMsg = ""
'                 sMsg = "" & !active ' active eg 250
'                 sMsg = sMsg & "" & !active_units 'active_units eg mg
'                 If !per_volume <> "" Then
'                     sMsg = sMsg & "/" & !per_volume   'per volume
'                 End If
'                 sMsg = sMsg & "" & !per_vol_units & " "  'per_vol_units
'                 sMsg = sMsg & "" & !unit_volume 'unit_volume
'                 sMsg = sMsg & "" & !unit_vol_units & " "  'per_vol_units
'                 Text3(3) = Trim(sMsg)
'                 '-----------------
'                 'Show the quantity
'                 '-----------------
'                 Text1 = ""
'                 If !No_of_packs <> "" Then
'                     If !No_of_packs <> "1" Then 'eg 20 * 2
'                        Text1 = !No_of_packs & " " & Chr$(215)
'                     End If
'                 End If
'                 Text1 = Trim(Text1 & " " & !units_per_pack)
'                 Text3(6) = 0 + Val("" & !Rp)             'repeats
'                 gtNew_ScriptItem(0).active = !active
'                 gtNew_ScriptItem(0).active_units = !active_units
'                 gtNew_ScriptItem(0).per_volume = !per_volume
'                 gtNew_ScriptItem(0).per_vol_units = !per_vol_units
'                 gtNew_ScriptItem(0).unit_vol_units = !unit_vol_units
'                 gtNew_ScriptItem(0).unit_volume = !unit_volume
'                 gtNew_ScriptItem(0).units_per_pack = !units_per_pack
'                 gtNew_ScriptItem(0).No_of_packs = !No_of_packs
'                 gtNew_ScriptItem(0).Packcode = !Packcode
'                 gtNew_ScriptItem(0).pbs = "" & !pbs
'                 '--------------------------------------------------
'                 'If the drug is an authority drug and its not repat
'                 'only where patient is non repat
'                 '--------------------------------------------------
'                 If !authcode <> 0 Then ' Or _
'                    '-------------------------------------------------
'                    'if its a repat authority and patient is repat, or
'                    'its an ordinary authority then do authority bit
'                    '-------------------------------------------------
'                    gtNew_ScriptItem(0).authcode = !authcode
'                    Design_Panel_Script_Authorities True
'                    Dim iNumRows As Integer
'                    Script_Authority_GetDetails !authcode, iNumRows
'                    Script_Authority_DisplayList iNumRows
'                    gtNew_ScriptItem(0).authcode = !authcode
'                    '----------------------------------------------
'                    'display next authority number and put in array
'                    '----------------------------------------------
'                    If gtNew_ScriptItem(0).Authorityno = "" Then
'                      Script_Authority_GetNumber gtNew_ScriptItem(0).Authorityno
'                    End If
'                    Script_EditArea_Entitlement_Display
'                    Label8.Visible = True
'                    Label3.Caption = "No. " & gtNew_ScriptItem(0).Authorityno
'                 Else
'                    If !Restcode <> 0 Then
'                      gtNew_ScriptItem(0).Restcode = !Restcode
'                      Label7(1).Visible = True
'                    End If
'                    Design_Panel_Script_Authorities False
'                 End If
'                 Script_Item_Display_PBSStatus
'                 Picture2.Visible = False
'                 Sensitivity_Check bExitRoutine
'                 If bExitRoutine = True Then
'                    Command3_Click (1)
'                 End If
'                 bExitRoutine = False
'            End With
'         End If
'     End If
'    bExitRoutine = False
' End Sub
' Sub Script_Classes_Getlist()
'     '--------------------------------------------------------
'     'User has typed text into text3(0) to select a drug class
'     'Gets a list of all possible drug classes as *text3(0)*
'     '--------------------------------------------------------
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Q = Db.QueryDefs("MRQ_Script_Classes_GetList")
'     Q("Enter Class") = Trim(Text3(0))
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(Text3(0)) Then
'        If LCase(Data1.Recordset!Description) <> Trim(LCase(Text3(0))) Then
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'             Picture2.Visible = False
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
' Sub Script_Classes_SelectClass()
'     '---------------------------------------------
'     'User is selecting a class from the class list
'     '---------------------------------------------
'     bExitRoutine = True
'     If itdbgrid2_image = cGrID_Image_DrugClasses Then
'        If RecordsExist(Data1) And Trim(Text3(0)) <> "" Then
'           With Data1.Recordset
'                 Text3(0) = Data1.Recordset!Description
'                 Text3(0).Enabled = False
'                 Text3(1).Enabled = False
'            End With
'         End If
'     End If
'     Picture2.Visible = False
'     bExitRoutine = False
' End Sub
' Sub Script_Classes_Getlist_BrandsInClass()
'     '-------------------------------------------------------------------
'     'User has selected a drug class, now show them the list of brands in
'     'this class to select from
'     '-------------------------------------------------------------------
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Q = Db.QueryDefs("MRQ_Script_DrugsInClass")
'     Q("Enter Class") = Trim(Text3(0))
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(Text3(0)) Then
'        Picture2.Visible = True: Picture2.ZOrder
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
' Sub Script_Instructions_Expand()
'      Dim icharpos
'      Dim sMsg
'      Dim sMsg1
'      bExitRoutine = True
'      '-----------------------
'      'Make Bd = "twice daily"
'      '-----------------------
'      icharpos = InStr(Text3(4), "bd")
'      If icharpos Then
'         sMsg = Trim(left(Text3(4), icharpos - 1))
'         sMsg1 = Trim(right(Text3(4), Len(Text3(4)) - icharpos - 1))
'         Text3(4) = Trim(sMsg & " " & "twice daily " & sMsg1) & " "
'         Text3(4).SelStart = Len(Text3(4))
'      End If
'      '------------------------------
'      'Make tds = "three times daily"
'      '------------------------------
'     icharpos = InStr(Text3(4), "tds")
'      If icharpos Then
'         sMsg = Trim(left(Text3(4), icharpos - 1))
'         sMsg1 = Trim(right(Text3(4), Len(Text3(4)) - icharpos - 2))
'         Text3(4) = Trim(sMsg & " " & "three times daily " & sMsg1) & " "
'         Text3(4).SelStart = Len(Text3(4))
'      End If
'      '-----------------------------
'      'Make qid = "four times daily"
'      '-----------------------------
'     icharpos = InStr(Text3(4), "qid")
'      If icharpos Then
'         sMsg = Trim(left(Text3(4), icharpos - 1))
'         sMsg1 = Trim(right(Text3(4), Len(Text3(4)) - icharpos - 2))
'         Text3(4) = Trim(sMsg & " " & "four times daily " & sMsg1) & " "
'         Text3(4).SelStart = Len(Text3(4))
'      End If
'      '------------------------
'      'Make prn = "when needed"
'      '------------------------
'     icharpos = InStr(Text3(4), "prn")
'      If icharpos Then
'         sMsg = Trim(left(Text3(4), icharpos - 1))
'         sMsg1 = Trim(right(Text3(4), Len(Text3(4)) - icharpos - 2))
'         Text3(4) = Trim(sMsg & " " & "when needed " & sMsg1) & " "
'         Text3(4).SelStart = Len(Text3(4))
'      End If
'      '-----------------------
'      'Make nocte = "at night"
'      '-----------------------
'     icharpos = InStr(Text3(4), "nocte")
'      If icharpos Then
'         sMsg = Trim(left(Text3(4), icharpos - 1))
'         sMsg1 = Trim(right(Text3(4), Len(Text3(4)) - icharpos - 4))
'         Text3(4) = Trim(sMsg & " " & "at night " & sMsg1) & " "
'         Text3(4).SelStart = Len(Text3(4))
'      End If
'      '---------------------------
'      'Make mane = "in the morning"
'      '---------------------------
'     icharpos = InStr(Text3(4), "mane")
'      If icharpos Then
'         sMsg = Trim(left(Text3(4), icharpos - 1))
'         sMsg1 = Trim(right(Text3(4), Len(Text3(4)) - icharpos - 3))
'         Text3(4) = Trim(sMsg & " " & "in the morning " & sMsg1) & " "
'         Text3(4).SelStart = Len(Text3(4))
'      End If
'      '-----------------------
'      'Make stat = "immediately"
'      '-----------------------
'     icharpos = InStr(Text3(4), "stat")
'      If icharpos Then
'         sMsg = Trim(left(Text3(4), icharpos - 1))
'         sMsg1 = Trim(right(Text3(4), Len(Text3(4)) - icharpos - 3))
'         Text3(4) = Trim(sMsg & " " & "immediately " & sMsg1) & " "
'         Text3(4).SelStart = Len(Text3(4))
'      End If
' End Sub
'
' Sub Script_Brand_Get_GenericsANDClassCodes()
'     '------------------------------------------------------------------
'     'For the selected brand, get its generic components and their class
'     'codes. Note many drugs are not classified and cannot be given a
'     'generic name. Note that drugs in the Mims Sections 21 and 22 ie
'     'Vitamins and Minerals and Herbal and other complementary medicines
'     'may have many many generic components which are impossible to print
'     'on the script. Hence these generics are replaced with the section
'     'title as the generic
'     '-------------------------------------------------------------------
'     Dim ix As Integer
'     Dim Db As Database
'     Dim Q As QueryDef
'     Dim Rs As Recordset
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Q = Db.QueryDefs("MRQ_Script_GetGenericAndClasses")
'     Q("Enter Brand") = gtNew_ScriptItem(0).Brand
'     Set Rs = Q.OpenRecordset()
'     ix = 0
'     Erase gtNew_ScriptItem(0).Generic_components()
'     gtNew_ScriptItem(0).GenericString = ""
'     gtNew_ScriptItem(0).ClassCodeString = ""
'     With Rs
'      If .EOF + .BOF = -2 Then
'         ReDim Preserve gtNew_ScriptItem(0).Generic_components(ix)
'         gtNew_ScriptItem(0).Generic_components(ix) = "no generic name"
'         ReDim Preserve gtNew_ScriptItem(0).ClassCodes(ix)
'         gtNew_ScriptItem(0).ClassCodes(ix) = 9999
'         ReDim Preserve gtNew_ScriptItem(0).ClaDesc(ix)
'         gtNew_ScriptItem(0).ClaDesc(ix) = "Not yet classified"
'         gtNew_ScriptItem(0).ClassCodeString = "9999"
'      Else
'        Do Until .EOF
'         ReDim Preserve gtNew_ScriptItem(0).Generic_components(ix)
'         ReDim Preserve gtNew_ScriptItem(0).ClassCodes(ix)
'         ReDim Preserve gtNew_ScriptItem(0).ClaDesc(ix)
'         '---------------------------------------
'         'Patch for herbal medicines and vitamens
'         '---------------------------------------
'         If !Section = 21 Or !Section = 22 Then
'           gtNew_ScriptItem(0).Generic_components(ix) = !Title
'           gtNew_ScriptItem(0).GenericString = !Title & ";"
'         Else
'           gtNew_ScriptItem(0).Generic_components(ix) = "" & !Generic
'           If InStr(gtNew_ScriptItem(0).GenericString, !Generic) = False Then
'              gtNew_ScriptItem(0).GenericString = gtNew_ScriptItem(0).GenericString & !Generic & ";"
'          End If
'         End If
'         gtNew_ScriptItem(0).ClassCodes(ix) = !ClaCode
'         gtNew_ScriptItem(0).ClaDesc(ix) = !ClaDesc
'         gtNew_ScriptItem(0).ClassCodeString = gtNew_ScriptItem(0).ClassCodeString & !ClaCode & ","
'         ix = ix + 1
'         .MoveNext
'       Loop
'      End If
'     End With
'     Rs.Close
'     Db.Close
'     If gtNew_ScriptItem(0).GenericString = "" Then
'        gtNew_ScriptItem(0).GenericString = "no generic name"
'     Else
'         gtNew_ScriptItem(0).GenericString = left(gtNew_ScriptItem(0).GenericString, Len(gtNew_ScriptItem(0).GenericString) - 1)
'         gtNew_ScriptItem(0).ClassCodeString = left(gtNew_ScriptItem(0).ClassCodeString, Len(gtNew_ScriptItem(0).ClassCodeString) - 1)
'     End If
' End Sub
' Sub Script_Item_Accept()
'    bExitRoutine = True
'    '----------------------------------------------------------
'    'Accepts the data in the editing area into gtpatient(1).scripts()
'    '----------------------------------------------------------
'    Dim ix As Integer
'    Dim sMsg As String
'    '---------------------------------
'    'Insert validating code here first
'    '---------------------------------
'    For icounter = 0 To 6
'        If Trim(Text3(icounter)) = "" Then
'           If icounter = 4 Then
'               Text3(icounter) = "use as directed"
'           ElseIf icounter = 5 Then
'              Text3(icounter) = "not stated"
'           ElseIf icounter <> 3 Then
'                Text3(icounter).Enabled = True
'                Text3(icounter).SetFocus
'                bExitRoutine = False
'      Exit Sub
'           End If
'        End If
'    Next
'    If Text1 = "" Then
'       Text1.SetFocus
'       bExitRoutine = False
'       Exit Sub
'    End If
'    If gtNew_ScriptItem(0).AuthorityScript = True And _
'       gtNew_ScriptItem(0).Aia = "" Then
'       Text2(0).SetFocus
'       Text2(0).BackColor = vbYellow
'       bExitRoutine = False
'       Exit Sub
'    End If
'    '----------------------------------
'    'Now add stuff not yet in the array
'    '----------------------------------
'    If InStr(Trim(Text1), Chr$(215)) Then
'         gtNew_ScriptItem(0).Quantity = right(Trim(Text1), Len(Trim(Text1)) - InStr(Trim(Text1), Chr$(215)))
'    Else
'        gtNew_ScriptItem(0).Quantity = Trim(Text1)
'    End If
'    gtNew_ScriptItem(0).Instructions = Trim(Text3(4))
'    gtNew_ScriptItem(0).Prescribed_For = Trim(Text3(5))
'    gtNew_ScriptItem(0).Repeats = Trim(Text3(6))
'    gtNew_ScriptItem(0).Strength_Summary = Text3(3)
'    gtNew_ScriptItem(0).ClinicalNotes = Text3(7)
'    If gtNew_ScriptItem(0).Start_date = "" Then
'       gtNew_ScriptItem(0).Start_date = sToday
'    End If
'    gtNew_ScriptItem(0).Last_date = sToday
'    gtNew_ScriptItem(0).Script_Date = Trim(Text2(2))
'    If iEditing = False Then
'         '---------------
'         'Increment array
'         '---------------
'         On Error Resume Next
'         ix = -1
'         ix = UBound(gtPatient(1).Scripts())
'         ix = ix + 1
'         ReDim Preserve gtPatient(1).Scripts(ix)
'    Else
'         ix = List1(0).ItemData(List1(0).ListIndex)
'    End If
'    On Error GoTo 0
'    '-------------------------------------------------------------------
'    'Populate the script items array. If user has edited the item assume
'    'it is changed  - fix this later
'    '-------------------------------------------------------------------
'    gtPatient(1).Scripts(ix) = gtNew_ScriptItem(0)
'    gtPatient(1).Scripts(ix).Saved = False
'    gtPatient(1).Scripts(ix).Printed = False
'    '----------------------------------------------------------
'    'and display the new or changed item to the user in summary
'    '----------------------------------------------------------
'    sMsg = gtNew_ScriptItem(0).Brand
'    sMsg = sMsg & " " & gtNew_ScriptItem(0).Strength_Summary
'    sMsg = sMsg & " " & gtNew_ScriptItem(0).Formulation
'    If gtNew_ScriptItem(0).Script_Date <> sToday Then
'       If DateDiff("d", sToday, gtNew_ScriptItem(0).Script_Date) > 0 Then
'         sMsg = sMsg & " [DATED AHEAD - "
'       Else
'         sMsg = sMsg & " [BACK DATED - "
'       End If
'    sMsg = sMsg & gtNew_ScriptItem(0).Script_Date & "]"
'    End If
'    sMsg = sMsg & " - " & gtNew_ScriptItem(0).Instructions
'    If gtNew_ScriptItem(0).Prescribed_For <> "" Then
'       sMsg = sMsg & " for " & gtNew_ScriptItem(0).Prescribed_For & "."
'    End If
'    If iEditing Then
'       List1(0).List(ix) = sMsg
'    Else
'       List1(0).AddItem sMsg
'       List1(0).ItemData(List1(0).NewIndex) = ix 'position in gtp(1).scripts()
'    End If
'    Command3_Click (1)
' End Sub
' Sub Script_Print()
'    Dim sMsg As String
'    Dim Db As Database
'    Dim Rs As Recordset
'    Dim ws As Workspace
'    '---------------------------------
'    'Save consult if not already saved
'    '---------------------------------
'     If iConsultIDSaved = False Then
'         Save_ConsultID
'     End If
'     On Error GoTo sPError
'     On Error GoTo 0
'     Screen.MousePointer = vbHourglass
'     '------------------------------------------
'     'Print all items in the current script list
'     '------------------------------------------
'     Script_Print_GetCoordinates 'positions of text on the script
'     '--------------------------
'     'Swap to the script printer
'     '--------------------------
'     Printer_Lock
'     Printer_Set mrPrinter_Script
'     '-----------------------------------------------
'     'Obtain the next script number from the database
'     '-----------------------------------------------
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'     sSql = "Select * from Doctors where Doctor_ID = " & Chr$(34) & gtDoctor.Doctor_ID & Chr$(34)
'     Set Rs = Db.OpenRecordset(sSql)
'     With Rs
'         iNextScriptNo = Rs!Next_Script_number
'         '------------------------------------
'         'Print each type of script separately
'         '------------------------------------
'         Script_Print_Type "PBS"
'         Script_Print_Type "RPBS"
'         Script_Print_Type "PRIV"
'         Script_Print_Type "S8"
'         Script_Print_Type "Authority"
'         Script_Print_Type "Dated ahead"
'         '----------------------------------------------
'         'Now resave the incremented prescription number
'         '----------------------------------------------
'         .Edit
'         !Next_Script_number = iNextScriptNo
'         .Update
'         .Close
'     End With
'     Printer_Unlock
'     '-----------------------------------------------------------------
'     'Now write to the progress notes for each just printed script item
'     'split into lines 0 to n
'     '-----------------------------------------------------------------
'     Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'     With Rs
'         '--------------------------------------------------------------
'         'For each script item, save one or more lines of progress notes
'         '--------------------------------------------------------------
'         For icounter = 0 To UBound(gtPatient(1).Scripts())
'           If gtPatient(1).Scripts(icounter).Printed = False _
'                  And gtPatient(1).Scripts(icounter).Hidden = False _
'                  And gtPatient(1).Scripts(icounter).Deleted = False _
'                  And gtPatient(1).Scripts(icounter).Reprint = False Then
'                 '-------------------------------------------------------
'                 'Format basic information for the drug, split into lines
'                 '-------------------------------------------------------
'                 Script_PN_Format icounter, sMsg
'                 ProgressNotes_Save pnClinicalNotes, pnScriptPrinted, _
'                         pnScriptPrinted, "SCRIPTS", _
'                         sMsg, False, _
'                         mrTable_Scripts, _
'                         gtPatient(1).Scripts(icounter).ScriptDate_Id, _
'                         gtProgressNotes(0).Segments(pnClinicalNotes).SubHeadings(pnScriptPrinted).Notes_order, _
'                         Rs
'                         gtPatient(1).Scripts(icounter).Printed = True
'            End If
'          Next
'          .Close
'     End With
'     Db.Close
'     ws.CommitTrans
'     Screen.MousePointer = vbArrow
'     Exit Sub
' sPError:
'     On Error Resume Next
'     Rs.Close
'     Db.Close
'     ws.Rollback
'     ws.Close
'     Screen.MousePointer = vbArrow
' End Sub
'
' Sub Script_Print_Type(sType As String)
'     '---------------------------------------------------------
'     'This routine is passed "PBS","RPBS","PRIV","Authority"
'     'and "Dated ahead".
'     'if gtpatient(1).scripts(n).print_Status = sType then
'     'the script item is added to an appropriate array. Note
'     's8 and authority scripts are scripts always printed as a
'     'single item on a page. Mark off as printed
'     '---------------------------------------------------------
'     Dim ix As Integer
'     Dim icounter As Integer
'     Erase gtScript_ItemtoPrint()
'     Select Case sType
'     Case "Dated ahead"
'          ReDim gtScript_ItemtoPrint(0)
'          ' ix = 0
'              For icounter = 0 To UBound(gtPatient(1).Scripts())
'                 If gtPatient(1).Scripts(icounter).s8 = False _
'                   And gtPatient(1).Scripts(icounter).Hidden = False _
'                   And gtPatient(1).Scripts(icounter).AuthorityScript = False _
'                   And gtPatient(1).Scripts(icounter).Printed = False _
'                   And gtPatient(1).Scripts(icounter).Deleted = False _
'                   And gtPatient(1).Scripts(icounter).Script_Date <> sToday Then
'                   gtScript_ItemtoPrint(0) = gtPatient(1).Scripts(icounter)
'                   Script_Print_AllItems
'                End If
'             Next
'    Case "S8"
'          ReDim gtScript_ItemtoPrint(0)
'          For icounter = 0 To UBound(gtPatient(1).Scripts())
'            If gtPatient(1).Scripts(icounter).s8 = True _
'               And gtPatient(1).Scripts(icounter).AuthorityScript = False _
'               And gtPatient(1).Scripts(icounter).Printed = False _
'               And gtPatient(1).Scripts(icounter).Hidden = False _
'               And gtPatient(1).Scripts(icounter).Deleted = False Then
'               gtScript_ItemtoPrint(0) = gtPatient(1).Scripts(icounter)
'               Script_Print_AllItems
'            End If
'          Next
'     Case "Authority"
'          ReDim gtScript_ItemtoPrint(0)
'          For icounter = 0 To UBound(gtPatient(1).Scripts())
'             If gtPatient(1).Scripts(icounter).AuthorityScript = True _
'                And gtPatient(1).Scripts(icounter).Printed = False _
'                And gtPatient(1).Scripts(icounter).Hidden = False _
'                And gtPatient(1).Scripts(icounter).Deleted = False Then
'                gtScript_ItemtoPrint(0) = gtPatient(1).Scripts(icounter)
'                Script_Print_AllItems
'             End If
'          Next
'     Case "PBS", "RPBS", "PRIV"
'              '--------------------------------------------------
'              'Put all the items into one array as long as not an
'              's8 or authority script and have not been marked as
'              'deleted from the array
'              '--------------------------------------------------
'              ix = 0
'              For icounter = 0 To UBound(gtPatient(1).Scripts())
'                 If gtPatient(1).Scripts(icounter).Print_Status = sType _
'                   And gtPatient(1).Scripts(icounter).s8 = False _
'                   And gtPatient(1).Scripts(icounter).Hidden = False _
'                   And gtPatient(1).Scripts(icounter).AuthorityScript = False _
'                   And gtPatient(1).Scripts(icounter).Printed = False _
'                   And gtPatient(1).Scripts(icounter).Deleted = False _
'                   And gtPatient(1).Scripts(icounter).Script_Date = sToday Then
'                   ReDim Preserve gtScript_ItemtoPrint(ix)
'                   gtScript_ItemtoPrint(ix) = gtPatient(1).Scripts(icounter)
'                   ix = ix + 1
'                End If
'             Next
'             Script_Print_AllItems
'      End Select
' End Sub
' Sub Script_Print_AllItems()
'
'     Dim ix As Integer
'     Dim iArrayPos As Integer
'     Dim icounter As Integer
'     Dim iTotalPages As Integer
'     Dim sMsg1 As String
'     '-------------------------------------
'     'Exit this routine if nothing to print
'     '-------------------------------------
'     On Error Resume Next
'     ix = -1
'     ix = UBound(gtScript_ItemtoPrint())
'     If ix = -1 Then Exit Sub
'     On Error GoTo 0
'    '---------------------------------------------------
'    'Calculate the number of whole script pages to print
'    '---------------------------------------------------
'    ix = 0
'    For icounter = 0 To UBound(gtScript_ItemtoPrint())
'        If gtScript_ItemtoPrint(icounter).Printed = False Then
'          ix = ix + 1
'        End If
'    Next
'    iTotalPages = (ix \ 3) + fMinInteger(1, ix Mod 3)
' '----------------------------------------------------------
' 'Print all the script pages with up to three items per page
' '----------------------------------------------------------
' For icounter = 0 To iTotalPages - 1
'
'     '----------------------------------------------------------
'     'I tried lots of fonts and times new roman seemed to sit ok
'     '----------------------------------------------------------
'     Printer.ScaleMode = vbMillimeters
'     Printer.ScaleWidth = 213
'     Printer.ScaleHeight = 280
'     Printer.CurrentX = 0
'     Printer.CurrentY = 0
'     Printer.Font.Name = "Times New Roman"
'     Printer.FontBold = False
'     Printer.Font.Size = 9.6
'     '----------------------------------
'    'only print scripts not yet printed
'    '----------------------------------
'    If gtScript_ItemtoPrint(icounter).Printed = False Then
'        '------------------------------------------------
'        'Increment and print a unique prescription number
'        '------------------------------------------------
'        iNextScriptNo = iNextScriptNo + 1
'        '------------------------------
'        'Print a side by side duplicate
'        '------------------------------
'        For iInd = 0 To 1
'            '-------------------------------------------------------
'            'If Authority script print main heading. All Authorities
'            'must have an aia otherwise not allowed
'            '-------------------------------------------------------
'            If gtScript_ItemtoPrint(icounter).AuthorityScript = True Then
'                 Printer.Font.Bold = True
'                 Printer.Font.Underline = True
'                 Printer.CurrentY = 0
'                 Printer.CurrentX = 20 + (iInd * PageGap)
'                 If gtScript_ItemtoPrint(icounter).Print_Status = "PBS" Then
'                   sMsg = "PBS AUTHORITY FORM"
'                 Else
'                   sMsg = "RPBS AUTHORITY FORM"
'                 End If
'                 Printer.Print sMsg; Space$(10); gtScript_ItemtoPrint(icounter).Authorityno
'                 Printer.Font.Bold = False
'                 Printer.Font.Underline = False
'            End If
'            '-------------------------------------
'            'Print the Doctors and surgery details
'            '-------------------------------------
'            Printer.Font.Name = "Times New Roman"
'            Printer.Font.Size = 9.6
'            Printer.Font.Bold = False
'            Printer.Font.Underline = False
'            Printer.CurrentY = PrintDoctorY
'            Printer.CurrentX = PrintDoctorX + (iInd * PageGap)
'            Printer.Print "Dr " & UCase(gtDoctor.Firstname & " " & gtDoctor.Surname)
'            PrintAuthorityNoY = Printer.CurrentY
'            Printer.CurrentX = PrintDoctorX + (iInd * PageGap)
'            Printer.Print gtSurgery.Name
'            Printer.CurrentX = PrintDoctorX + (iInd * PageGap)
'            Printer.Print gtSurgery.Street1
'            If Len(gtSurgery.Street2) <> 0 Then
'                 Printer.CurrentX = PrintDoctorX + (iInd * PageGap)
'                 Printer.Print gtSurgery.Street2
'            End If
'            Printer.CurrentX = PrintDoctorX + (iInd * PageGap)
'            Printer.Print gtSurgery.suburb; " ";
'            Printer.Print gtSurgery.Postcode; Space$(5);
'            Printer.Print "Phone:" & gtSurgery.Phone
'            '-----------------------------------
'            'Print the Doctors Prescriber number
'            '-----------------------------------
'            Printer.CurrentX = PrintPrescriberNoX + (iInd * PageGap)
'            Printer.CurrentY = PrintPrescriberNoY
'            Printer.Print gtDoctor.Prescriber_Number
'
'            Printer.CurrentY = PrintScriptNoY
'            Printer.CurrentX = PrintScriptNoX + (iInd * PageGap)
'            Printer.Print "Prescription No:"; iNextScriptNo
'            '---------------------------------------------------------------
'            'Print a pharmaceutical benefits entitlement number if it exists
'            '---------------------------------------------------------------
'           If gtPatient(1).EntitlementNo <> "" Then
'                 Printer.CurrentY = PrintPharmBenefitNoY
'                 Printer.CurrentX = PrintPharmBenefitNoX + (iInd * PageGap)
'                 Printer.Print gtPatient(1).EntitlementNo
'            End If
'
'            '-----------------------------------
'            'Print the patients name and address
'            '-----------------------------------
'            sMsg1 = gtPatient(1).Street1
'            If Not gtPatient(1).Street2 <> "" Then
'                 sMsg1 = sMsg1 & " " & gtPatient(1).Street2
'            End If
'            Printer.CurrentX = PrintAddressX + (iInd * PageGap)
'            Printer.CurrentY = PrintAddressY
'            Printer.Print StrConv(gtPatient(1).Firstname & " " & gtPatient(1).Surname, vbProperCase)
'            Printer.CurrentX = PrintAddressX + (iInd * PageGap)
'            Printer.Print sMsg1
'            Printer.CurrentX = PrintAddressX + (iInd * PageGap)
'            Printer.Print gtPatient(1).suburb & " " & gtPatient(1).Postcode
'            '-----------------------
'            'Print the printout date
'            '-----------------------
'            Printer.CurrentX = PrintDateX + (iInd * PageGap)
'            Printer.CurrentY = PrintDateY
'            Printer.Print gtScript_ItemtoPrint(icounter).Script_Date
'            '----------------------------------------------------------
'            'If Authority form, print Return script and medicare number
'            '----------------------------------------------------------
'           ' If gtScript_ItemtoPrint(icounter).AuthorityScript = True Then
'            If gtScript_ItemtoPrint(icounter).Print_Status = "PBS" Then
'               sMsg = "Medicare No.:"
'               If gtPatient(1).MedicareNo <> "" Then
'                  sMsg = sMsg & Format(gtPatient(1).MedicareNo, "#### ##### #")
'               End If
'            Else
'               sMsg = "Repat No.:"
'               If gtPatient(1).VeteranNo <> "" Then
'                 sMsg = sMsg & gtPatient(1).EntitlementNo
'               End If
'            End If
'             Printer.CurrentY = PrintDateY 'on same line as date
'             Printer.CurrentX = Printer.CurrentX + 55 + (iInd * PageGap)
'             Printer.Print sMsg
'            '-------------------------------
'            'If authority script is PBS item
'            '-------------------------------
'           If gtScript_ItemtoPrint(icounter).AuthorityScript = True Then
'                 If gtScript_ItemtoPrint(icounter).AuthPostHome = True Then
'                    sMsg = "Y"
'                 Else
'                    sMsg = "N"
'                 End If
'                 Printer.CurrentY = PrintDateY + 8
'                 Printer.CurrentX = 55 + (iInd * PageGap)
'                 Printer.Print "Return to patient:[" & sMsg & "]"
'            End If
'            Printer.CurrentY = PrintDrugsY
'            '---------------------------------------------
'            'Now print a maximum of three items per script
'            '---------------------------------------------
'            For iInd1 = 0 To 2
'                 '---------------------------------------------------------
'                 'iArrayPos will always be set to the next position in then
'                 'gtScript_ItemtoPrint() array
'                 '---------------------------------------------------------
'                 iArrayPos = icounter * 3 + iInd1
'                 '---------------------------------------------------
'                 'If not at the end of the array, print the next drug
'                 '---------------------------------------------------
'                 If iArrayPos < (UBound(gtScript_ItemtoPrint()) + 1) Then
'                    Printer.CurrentX = PrintDrugsX + (iInd * PageGap)
'                    Printer.FontSize = 7.6
'                    Printer.Print "**************************************************************"
'                    Printer.FontSize = 9.6
'                    Printer.CurrentY = Printer.CurrentY - 1
'                    Printer.CurrentX = PrintDrugsX + (iInd * PageGap)
'                    Printer.Print gtScript_ItemtoPrint(iArrayPos).Print_Status & ":";
'                    Printer.CurrentX = (PrintDrugsX + 9) + (iInd * PageGap)
'                    If gtScript_ItemtoPrint(iArrayPos).Reg24 = True Then
'                       Printer.Print gtScript_ItemtoPrint(iArrayPos).Brand; Space$(5); " Reg 24"
'                    Else
'                       Printer.Print gtScript_ItemtoPrint(iArrayPos).Brand
'                    End If
'                    '------------------------------
'                    'print the generic component(s)
'                    '------------------------------
'                    If gtScript_ItemtoPrint(iArrayPos).GenericString <> "" Then
'                        Printer.FontSize = 7.6
'                        Printer.CurrentX = (PrintDrugsX + 9) + (iInd * PageGap)
'                        Printer.Print " (" & gtScript_ItemtoPrint(iArrayPos).GenericString & ")"
'                    End If
'                    Printer.FontSize = 9.6
'                    Printer.CurrentX = (PrintDrugsX + 9) + (iInd * PageGap)
'                    If gtScript_ItemtoPrint(iArrayPos).Strength_Summary = "" Then
'                       Printer.Print gtScript_ItemtoPrint(iArrayPos).No_of_packs & " * ";
'                       Printer.Print gtScript_ItemtoPrint(iArrayPos).Quantity & "'s";
'                    Else
'                       Printer.Print gtScript_ItemtoPrint(iArrayPos).Strength_Summary & " ";
'                       If gtScript_ItemtoPrint(iArrayPos).No_of_packs <> 1 Then
'                          Printer.Print gtScript_ItemtoPrint(iArrayPos).No_of_packs & "*";
'                       End If
'                       Printer.Print gtScript_ItemtoPrint(iArrayPos).Quantity & "'s";
'                    End If
'                    Printer.Print " (" & gtScript_ItemtoPrint(iArrayPos).Formulation & ")"
'                    Printer.CurrentX = (PrintDrugsX + 9) + (iInd * PageGap)
'                    Printer.Print gtScript_ItemtoPrint(iArrayPos).Instructions
'                    '------------------------------------------------
'                    'Don't print reason for encounter if "not stated"
'                    '------------------------------------------------
'                    If gtScript_ItemtoPrint(iArrayPos).Prescribed_For <> "not stated" Then
'                       Printer.CurrentX = (PrintDrugsX + 9) + (iInd * PageGap)
'                       Printer.Print "For "; gtScript_ItemtoPrint(iArrayPos).Prescribed_For;
'                    End If
'                    '--------------------
'                    'Print repeat details
'                    '--------------------
'                    Printer.CurrentX = (PrintDrugsX + 66) + (iInd * PageGap)
'                    Printer.Print "Rpts ";
'                    If gtScript_ItemtoPrint(iArrayPos).Repeats = "0" Then
'                       Printer.Print "Nil"
'                    Else
'                       Printer.Print gtScript_ItemtoPrint(iArrayPos).Repeats
'                    End If
'
'                 Else
'                    iArrayPos = iArrayPos - 1
'                    Exit For
'                 End If
'             Next iInd1
'             '----------------------------------------------------------------
'             'Having printed three items, now print the spot for signature etc
'             '----------------------------------------------------------------
'             Printer.CurrentX = PrintDrugsX + (iInd * PageGap)
'             Printer.FontSize = 7.6
'             Printer.Print "**************************************************************"
'             Printer.CurrentX = PrintDrugsX + (iInd * PageGap)
'             If iInd1 = 1 Then
'                  sMsg = "There is one item"
'             Else
'                  sMsg = "There are " & Str$(iInd1) & " items"
'             End If
'             Printer.Print sMsg & " listed on this script"
'             Printer.FontSize = 9.6
'             Printer.Print
'             Printer.CurrentX = PrintDrugsX + (iInd * PageGap)
'             Printer.Print "Signature of Dr " & StrConv((gtDoctor.Firstname & " " & gtDoctor.Surname), vbProperCase) & "............................"
'            '--------------------------------------------------------------
'            'If printing an authority script, do all the bits at the bottom
'            '--------------------------------------------------------------
'            If gtScript_ItemtoPrint(icounter).AuthorityScript = True Then
'                 Printer.Print: Printer.Print
'                 Printer.CurrentX = PrintDrugsX + (iInd * PageGap)
'                 Printer.FontSize = 7.6
'                 Printer.Print "**************************************************************"
'                 Printer.FontSize = 9.6
'                 Printer.CurrentX = PrintDrugsX + (iInd * PageGap)
'                 Printer.Print "Phone approval No.:"; gtScript_ItemtoPrint(iArrayPos).AuthPhoneApproval
'                 'If gtScript_ItemtoPrint(iArrayPos).AuthPhoneApproval <> False Then
'                 '   Printer.Print gtScript_ItemtoPrint(iArrayPos).AuthPhoneApproval
'                 'End If
'                 Printer.Print
'                 Printer.CurrentX = PrintDrugsX + (iInd * PageGap): Printer.Print "Quantity:";
'                 Printer.Print gtScript_ItemtoPrint(iArrayPos).Strength_Summary & " ";
'                 Printer.Print gtScript_ItemtoPrint(iArrayPos).Quantity & "'s";
'                 Printer.Print Spc(20); "Rpts "; gtScript_ItemtoPrint(iArrayPos).Repeats
'                 Printer.CurrentX = PrintDrugsX + (iInd * PageGap)
'                 Printer.FontSize = 7.6
'                 Printer.Print "**************************************************************"
'                 Printer.FontSize = 9.6
'                 Printer.Print: Printer.Print
'                 Printer.CurrentX = PrintDrugsX + (iInd * PageGap)
'                 Printer.Print "AUTHORIZED DELEGATE....................................."
'                 Printer.CurrentX = PrintDrugsX + (iInd * PageGap)
'                 Printer.CurrentY = PrintPoisonsDetailsY
'                 Printer.CurrentX = PrintPoisonsDetailsX + (iInd * PageGap)
'
'            If gtScript_ItemtoPrint(iArrayPos).s8 = True Then
'               Printer.Print "Issued under clause 82 of the Poisons Regulation 1994"
'            Else
'               Printer.Print "Issued under clause 37 of the Poisons Regulation 1994"
'            End If
'
'            PageFooterY = 180
'            Printer.CurrentY = PrintAuthorityDetailsY
'            Printer.CurrentX = PrintAuthorityDetailsX + (iInd * PageGap)
'            Printer.FontBold = True
'            Printer.FontUnderline = True
'            If gtScript_ItemtoPrint(iArrayPos).Print_Status = "PBS" Then
'                whoseCopy(0) = "HIC COPY:"
'            Else
'                whoseCopy(0) = "DVA COPY:"
'            End If
'            whoseCopy(1) = "DOCTORS COPY:"
'            Printer.Print whoseCopy(iInd);
'            Printer.Print " AUTHORITY NO. " & gtScript_ItemtoPrint(iArrayPos).Authorityno; Space$(5); sToday
'            Printer.FontUnderline = False
'            Printer.FontBold = False
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print "Dr " & UCase(gtDoctor.Firstname & " " & gtDoctor.Surname)
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print gtSurgery.Name
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print gtSurgery.Street1
'            If gtSurgery.Street2 <> "" Then
'               Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'               Printer.Print gtSurgery.Street2
'            End If
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print gtSurgery.suburb & " ";
'            Printer.Print gtSurgery.Postcode
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print "Phone:" & gtSurgery.Phone; Spc(10);
'            If iInd Then
'               Printer.Print
'            Else
'               Printer.Print "Prescriber No.:"; gtDoctor.Prescriber_Number
'            End If
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print "_______________________________________________"
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print gtPatient(1).Firstname & " " & gtPatient(1).Surname
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print gtPatient(1).Street1 & " " & gtPatient(1).Street2
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print gtPatient(1).suburb & " " & gtPatient(1).Postcode
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print "_______________________________________________"
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print gtScript_ItemtoPrint(iArrayPos).Print_Status & ":";
'            Printer.Print gtScript_ItemtoPrint(iArrayPos).Brand; Space$(30);
'            If iInd Then
'               Printer.Print "Approval No.:";
'               If gtScript_ItemtoPrint(iArrayPos).AuthPhoneApproval = "" Then
'                 Printer.Print "nil"
'               Else
'              Printer.Print gtScript_ItemtoPrint(iArrayPos).AuthPhoneApproval
'               End If
'            Else
'               Printer.Print
'            End If
'            Printer.CurrentX = Printer.CurrentX + 8 + (iInd * PageGap)
'            Printer.Print gtScript_ItemtoPrint(iArrayPos).Strength_Summary & " ";
'            Printer.Print gtScript_ItemtoPrint(iArrayPos).Quantity & "'s";
'            Printer.Print " (" & gtScript_ItemtoPrint(iArrayPos).Formulation & ")"
'            Printer.CurrentX = Printer.CurrentX + 8 + (iInd * PageGap):
'            Printer.Print gtScript_ItemtoPrint(iArrayPos).Instructions;
'            Printer.Print Space$(5); "Rpts "; gtScript_ItemtoPrint(iArrayPos).Repeats
'            Printer.FontUnderline = False
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print "_______________________________________________"
'            If gtScript_ItemtoPrint(iArrayPos).Previousauthority = True Then
'               sMsg = "Y"
'            Else
'               sMsg = "N"
'            End If
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print "PreviousAuthority [" & sMsg & "]"; Spc(20);
'            Printer.Print "Age:"; gtPatient(1).Age
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print "_______________________________________________"
'            Printer.FontBold = True
'            Printer.FontUnderline = True
'            Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'            Printer.Print "INDICATION FOR USE OF ITEM:"
'            Printer.FontUnderline = False
'            Printer.FontBold = False
'            Printer.FontName = "Verdana"
'            Printer.FontSize = 6.6
'            'make aia text fit on page
'             sMsg = gtScript_ItemtoPrint(icounter).Aia
'             split_lines 90, sMsg
'             Dim iZ As Integer
'             For iZ = 0 To UBound(AnyArray())
'                Printer.CurrentX = Printer.CurrentX + (iInd * PageGap)
'                Printer.Print AnyArray(iZ)
'            Next iZ
'            Printer.FontName = "Times New Roman"
'            Printer.FontSize = 9.6
'            Printer.FontBold = False
'            Printer.Print
'            DoEvents
'           Else
'           Printer.CurrentY = PrintPoisonsDetailsY
'           Printer.CurrentX = PrintPoisonsDetailsX + (iInd * PageGap)
'            If gtScript_ItemtoPrint(iArrayPos).s8 = True Then
'               Printer.Print "Issued under clause 82 of the Poisons Regulation 1994"
'            Else
'               Printer.Print "Issued under clause 37 of the Poisons Regulation 1994"
'            End If
'
'           End If 'End of Authority print section
'         Next iInd
'        Printer.EndDoc
'        DoEvents
'     End If
' Next icounter
' End Sub
'
'
'
' Sub Script_PastMeds_ReverseEntry()
'     On Error GoTo 0
'     '----------------------------------------------------------------
'     'If script item prescribed in current consultation reverses entry
'     'Note the entry in Data_SCript_Items table is archived using its
'     'scriptItem_ID, but the script item is marked deleted using the
'     'also unique scriptDate_ID via both this table and thet
'     ' data_Script_Item_Dates table
'     '----------------------------------------------------------------
'     If gtconsult.Consult_ID <> Data2.Recordset!Consult_last_Prescribed Then
'        Exit Sub
'     End If
'     Screen.MousePointer = vbHourglass
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'         '--------------------------------------------------------
'         'Archive the unique record in the data_script_dates table
'         '--------------------------------------------------------
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Q = Db.QueryDefs("MRQ_Script_Archive_PastMedication")
'         Q("Enter ScriptDate_ID") = Data2.Recordset!ScriptDate_Id
'         Q.Execute
'         '------------------------------------------------
'         'Now insert the consult_ID at which this was done
'         '------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_Script_Archive_PastMedication_DuringConsult")
'         Q("Enter ScriptDate_ID") = Data2.Recordset!ScriptDate_Id
'         Q("Enter Consult ID") = gtconsult.Consult_ID
'         Q("Enter Archive_Reason_ID") = mrReversalOfEntry
'         Q.Execute
'         '------------------------------
'         'Mark the record(s) as unavailable
'         '------------------------------
'         Set Q = Db.QueryDefs("MRQ_Script_Archive_PastMedication_MarkDeleted")
'         Q("Enter ScriptDate_ID") = Data2.Recordset!ScriptDate_Id
'         Q.Execute
'         '----------------------------------------------------------------
'         'entry is being reversed during same consultation, delete then
'         'associated progress note text entry
'         '----------------------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'         Q("Enter Consult_ID") = gtconsult.Consult_ID
'         Q("Enter Table_ID") = mrTable_Scripts
'         Q("Enter Record_ID") = Data2.Recordset!ScriptDate_Id
'         Q.Execute
'     ws.CommitTrans
'     '-------------------------------------
'     'Remove same item from the script list
'     '-------------------------------------
'     For icounter = 0 To UBound(gtPatient(1).Scripts())
'         If gtPatient(1).Scripts(icounter).ScriptDate_Id = Data2.Recordset!ScriptDate_Id Then
'            gtPatient(1).Scripts(icounter).Deleted = True
'            Exit For
'         End If
'     Next
'     '------------------------------------------------------------
'     'Refresh the medication list and list of scripts this consult
'     '------------------------------------------------------------
'     SSActiveTabs1.SelectedTab = 1
'     Patient_Get_Medications mrShowMedsActive
'     Script_Items_DisplayThosePrescribed
'     Screen.MousePointer = vbArrow
'     Exit Sub
'
'     On Error Resume Next
'     Db.Close
'     ws.Rollback
'     ws.Close
'     Screen.MousePointer = vbArrow
' End Sub
' Sub Script_Save()
'    Screen.MousePointer = vbHourglass
'    '------------------------------------------------------------
'    'Saves the script items in the current gtpatient(1).scripts()
'    'If an error occurrs the transaction is rolled back and the
'    'gtpatient(1).scripts(n).saved flag is reset to false
'    '------------------------------------------------------------
'    Dim iExistingRecord As Integer
'    Dim iSSCounter As Integer
'    Dim iSS As Integer
'    Dim sMsg As String
'    Dim ws As Workspace
'    Dim Db As Database
'    Dim Rs As Recordset
'    On Error Resume Next
'    iSS = -1
'    iSS = UBound(gtPatient(1).Scripts())
'    If iSS = -1 Then Exit Sub
'    '---------------------------------
'    'Save consult if not already saved
'    '---------------------------------
'     If iConsultIDSaved = False Then
'         Save_ConsultID
'     End If
'     On Error GoTo SSError
'     Database_Lock
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Set Db = ws.OpenDatabase(sMEDREC_MDB, False) 'open for read/write
'     For iSSCounter = 0 To UBound(gtPatient(1).Scripts())
'         If gtPatient(1).Scripts(iSSCounter).Saved = False _
'          And gtPatient(1).Scripts(iSSCounter).Deleted = False _
'          And gtPatient(1).Scripts(iSSCounter).Hidden = False Then
'             '-------------------------------------------
'             '2:Add new instructions to instruction table
'             '-------------------------------------------
'             Set Rs = Db.OpenRecordset("Data_Script_Instructions", dbOpenTable)
'             With Rs
'                  .Index = "Instructions"
'                  .Seek "=", gtPatient(1).Scripts(iSSCounter).Instructions
'                  If .NoMatch Then
'                     .AddNew
'                     !Instruction = LCase(gtPatient(1).Scripts(iSSCounter).Instructions)
'                     .Update
'                     .Seek "=", gtPatient(1).Scripts(iSSCounter).Instructions
'                     If Not .NoMatch Then
'                         gtPatient(1).Scripts(iSSCounter).Instructions_ID = !Instruction_ID
'                     End If
'                  Else
'                     .Edit
'                     gtPatient(1).Scripts(iSSCounter).Instructions_ID = !Instruction_ID
'                     .Update
'                  End If
'                  .Close
'             End With
'             '-------------------------------------------------
'             '3:Is the instruction_ID linked to the drug in the
'             '  instruction Habits table
'             '-------------------------------------------------
'                Set Rs = Db.OpenRecordset("Data_Script_Instruction_Habits", dbOpenTable)
'                With Rs
'                     .Index = "PrimaryKey"
'                     .Seek "=", gtPatient(1).Scripts(iSSCounter).Instructions_ID, _
'                                gtPatient(1).Scripts(iSSCounter).Brand, _
'                                gtDoctor.Doctor_ID, _
'                                gtPatient(1).Scripts(iSSCounter).Formulation
'                   If .NoMatch Then
'                       .AddNew
'                        !drug = gtPatient(1).Scripts(iSSCounter).Brand
'                        !Instruction_ID = gtPatient(1).Scripts(iSSCounter).Instructions_ID
'                        !Doctor_ID = gtDoctor.Doctor_ID
'                        !Formulation = gtPatient(1).Scripts(iSSCounter).Formulation
'                        .Update
'                    Else
'                       .Edit
'                       !Weighting = !Weighting + 1
'                       .Update
'                    End If
'                 End With
'                Rs.Close
'             '------------------------------------------------
'             '4:Add new Prescibed for's to Prescribed_For table
'             '------------------------------------------------
'             Set Rs = Db.OpenRecordset("Data_Script_Prescribed_For", dbOpenTable)
'             With Rs
'                  iExistingRecord = True
'                  .Index = "Prescribed_For"
'                  .Seek "=", gtPatient(1).Scripts(iSSCounter).Prescribed_For
'                  If .NoMatch Then
'                      iExistingRecord = False
'                     .AddNew
'                     !Prescribed_For = gtPatient(1).Scripts(iSSCounter).Prescribed_For
'                     !Ozcode = gtPatient(1).Scripts(iSSCounter).Termcode
'                     .Update
'                    .Seek "=", gtPatient(1).Scripts(iSSCounter).Prescribed_For
'                    If Not .NoMatch Then
'                         gtPatient(1).Scripts(iSSCounter).Prescribed_For_ID = !PrescribedFor_ID
'                    End If
'                  Else
'                    .Edit
'                    gtPatient(1).Scripts(iSSCounter).Prescribed_For_ID = !PrescribedFor_ID
'                  End If
'             End With
'             Rs.Close
'             '--------------------------------------------------------
'             '5:Add new Prescibed For habit to  PrescribedFor_Habit Table
'             '--------------------------------------------------------
'             Set Rs = Db.OpenRecordset("Data_Script_Prescribed_For_Habits", dbOpenTable)
'                With Rs
'                     .Index = "PrimaryKey"
'                     .Seek "=", gtPatient(1).Scripts(iSSCounter).Prescribed_For_ID, _
'                                gtPatient(1).Scripts(iSSCounter).Brand, _
'                                gtDoctor.Doctor_ID
'                     If .NoMatch Then
'                         .AddNew
'                         !drug = gtPatient(1).Scripts(iSSCounter).Brand
'                         !PrescribedFor_ID = gtPatient(1).Scripts(iSSCounter).Prescribed_For_ID
'                         !Doctor_ID = gtDoctor.Doctor_ID
'                         .Update
'                     Else
'                       .Edit
'                       !Weighting = !Weighting + 1
'                       .Update
'                     End If
'                 End With
'             Rs.Close
'             '-------------------------------------------------
'             'If the drug was an authority item, save the aia
'             '-------------------------------------------------
'             If gtPatient(1).Scripts(iSSCounter).AuthorityScript Then
'             '-------------------------------------------------------------
'             'See if already have Authority ID for this aia - this has been
'             'split in two to cope with those > 255  fields aia, aia1
'             '-------------------------------------------------------------
'           Set Rs = Db.OpenRecordset("Data_Script_AIA", dbOpenDynaset)
'           With Rs
'                 .FindFirst "Lcase(Indication) =" & Chr$(34) & LCase(gtPatient(1).Scripts(iSSCounter).Aia) & Chr$(34)
'                 If .NoMatch Then
'                    .AddNew
'                    !Indication = gtPatient(1).Scripts(iSSCounter).Aia
'                   ' !Aia = "1"
'                    .Update
'                    .MoveLast
'                     gtPatient(1).Scripts(iSSCounter).Authority_ID = !Authority_ID
'                 Else
'                     gtPatient(1).Scripts(iSSCounter).Authority_ID = !Authority_ID
'                 End If
'                 .Close
'               End With
'             End If
'             '-------------------------------------------------------------
'             '6:Save unallocated terms to the unassigned chapter (990000000)
'             'or increment the weighting for use
'             '-------------------------------------------------------------
'             Set Rs = Db.OpenRecordset("Reasons", dbOpenTable)
'             With Rs
'                  iExistingRecord = True
'                  .Index = "Description"
'                  .Seek "=", gtPatient(1).Scripts(iSSCounter).Prescribed_For
'                  If .NoMatch Then
'                      iExistingRecord = False
'                     .AddNew
'                     !code = "990000000"
'                     !Basecode = "9900000"
'                     !Description = gtPatient(1).Scripts(iSSCounter).Prescribed_For
'                     !Doctor_ID = gtDoctor.Doctor_ID
'                  Else
'                     .Edit
'                     !Weighting = !Weighting + 1
'                  End If
'                  .Update
'              End With
'              Rs.Close
'            '-------------------------------------------------------------
'            '7:Check if the script items details can be described by an
'            'existing Data_Script_RxDetails entry. when this is finished we have a Rx Id
'            'which is either an old one, or an incremented new one
'            '-------------------------------------------------------------
'            Set Rs = Db.OpenRecordset("Data_Script_RxDetails", dbOpenTable)
'            With Rs
'                 .Index = "unique"
'                 .Seek "=", gtPatient(1).Scripts(iSSCounter).Brand, _
'                            gtPatient(1).Scripts(iSSCounter).GenericString, _
'                            gtPatient(1).Scripts(iSSCounter).active, _
'                            gtPatient(1).Scripts(iSSCounter).active_units, _
'                            gtPatient(1).Scripts(iSSCounter).per_volume, _
'                            gtPatient(1).Scripts(iSSCounter).per_vol_units, _
'                            gtPatient(1).Scripts(iSSCounter).unit_volume, _
'                            gtPatient(1).Scripts(iSSCounter).unit_vol_units, _
'                            gtPatient(1).Scripts(iSSCounter).Formulation
'                 If .NoMatch Then
'                     iExistingRecord = False
'                     .AddNew
'                     '--------------------------------------------------
'                     'New combination:save this combination to RxDetails
'                     'and get the latest Rx_iD from here
'                     '--------------------------------------------------
'                     !drug = gtPatient(1).Scripts(iSSCounter).Brand
'                     !Generic = gtPatient(1).Scripts(iSSCounter).GenericString
'                     !active = gtPatient(1).Scripts(iSSCounter).active
'                     !active_units = gtPatient(1).Scripts(iSSCounter).active_units
'                     !per_volume = gtPatient(1).Scripts(iSSCounter).per_volume
'                     !per_vol_units = gtPatient(1).Scripts(iSSCounter).per_vol_units
'                     !unit_volume = gtPatient(1).Scripts(iSSCounter).unit_volume
'                     !unit_vol_units = gtPatient(1).Scripts(iSSCounter).unit_vol_units
'                     !Formulation = gtPatient(1).Scripts(iSSCounter).Formulation
'                     !ClassCodes = gtPatient(1).Scripts(iSSCounter).ClassCodeString
'                     !Section = gtPatient(1).Scripts(iSSCounter).Section
'                     !SubSection = gtPatient(1).Scripts(iSSCounter).SubSection
'                     !valid = True
'                     !Weighting = !Weighting + 1
'                     .Update
'                     .Index = "Unique"
'                     .Seek "=", gtPatient(1).Scripts(iSSCounter).Brand, _
'                            gtPatient(1).Scripts(iSSCounter).GenericString, _
'                            gtPatient(1).Scripts(iSSCounter).active, _
'                            gtPatient(1).Scripts(iSSCounter).active_units, _
'                            gtPatient(1).Scripts(iSSCounter).per_volume, _
'                            gtPatient(1).Scripts(iSSCounter).per_vol_units, _
'                            gtPatient(1).Scripts(iSSCounter).unit_volume, _
'                            gtPatient(1).Scripts(iSSCounter).unit_vol_units, _
'                            gtPatient(1).Scripts(iSSCounter).Formulation
'                            gtPatient(1).Scripts(iSSCounter).Rx_ID = !Rx_ID
'                Else
'                    .Edit
'                    iExistingRecord = True
'                    gtPatient(1).Scripts(iSSCounter).Rx_ID = !Rx_ID
'                    !Weighting = !Weighting + 1
'                   .Update
'                 End If
'                 .Close
'               End With
'
'             iExistingRecord = False
'            '----------------------------------------------------------------
'            'Has this drug combination been used before for this patient?
'            'find this via the Script_Items_date table, as need this value to
'            'insert into the script_items table later on
'            '-----------------------------------------------------------------
'            If gtPatient(1).Scripts(iSSCounter).ScriptDate_Id = 0 Then
'                 Set Q = Db.QueryDefs("MRQ_Scripts_DoesRXPatientID_Exist")
'                 Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'                 Q("enter Rx_ID") = gtPatient(1).Scripts(iSSCounter).Rx_ID
'                 Set Rs = Q.OpenRecordset()
'                 With Rs
'                    If .EOF + .BOF <> -2 Then
'                       '----------------------------------------------
'                       'existing record, just make today the last_date
'                       '----------------------------------------------
'                       iExistingRecord = True
'                       gtPatient(1).Scripts(iSSCounter).ScriptDate_Id = !ScriptDate_Id
'                     End If
'                 End With
'             End If
'            '-------------------------------------------------------
'            'If no entry in the Data_Script_Item_Dates table add one
'            '-------------------------------------------------------
'            Set Rs = Db.OpenRecordset("Data_Script_Item_Dates", dbOpenTable)
'            With Rs
'                 If gtPatient(1).Scripts(iSSCounter).ScriptDate_Id <> 0 Then
'                     iExistingRecord = True
'                     .Index = "PrimaryKey"
'                     .Seek "=", gtPatient(1).Scripts(iSSCounter).ScriptDate_Id
'                     .Edit
'                     !Last_date = sToday
'                 Else
'                     '--------------------------------------------------
'                     'The start and last date are the same = auto put in
'                     'by the database
'                     '--------------------------------------------------
'                     .AddNew
'                     iExistingRecord = False
'                 End If
'                  !Consult_last_Prescribed = gtconsult.Consult_ID
'                  .Update
'                 If iExistingRecord = False Then
'                     .MoveLast
'                     gtPatient(1).Scripts(iSSCounter).ScriptDate_Id = !ScriptDate_Id
'                     gtPatient(1).Scripts(iSSCounter).Consult_Last_prescibed = gtconsult.Consult_ID
'                 End If
'                 .Close
'             End With
'             '------------------------------------------------------------------
'             ' :For each and every drug add a new record to the Script_Items
'             'table which keeps a record of the consultation at which it was
'             'prescribed, a link to the Rx Details table, a link to the instruction
'             'table and reason for presciption.
'             '--------------------------------------------------------------------
'             Set Rs = Db.OpenRecordset("Data_Script_Items", dbOpenDynaset)
'             With Rs
'              .AddNew
'              !Consult_ID = gtconsult.Consult_ID
'              !Rx_ID = gtPatient(1).Scripts(iSSCounter).Rx_ID
'              !Instruction_ID = gtPatient(1).Scripts(iSSCounter).Instructions_ID
'              !PrescribedFor_ID = gtPatient(1).Scripts(iSSCounter).Prescribed_For_ID
'              !ScriptDate_Id = gtPatient(1).Scripts(iSSCounter).ScriptDate_Id
'              !Authority_ID = gtPatient(1).Scripts(iSSCounter).Authority_ID
'              !Print_Status = gtPatient(1).Scripts(iSSCounter).Print_Status
'              !Repeats = gtPatient(1).Scripts(iSSCounter).Repeats
'              !Quantity = gtPatient(1).Scripts(iSSCounter).Quantity ' the actual quantity
'              !Incr_Quantity_via_Auth = gtPatient(1).Scripts(iSSCounter).Inc_Quantity_via_Auth
'              !s8 = gtPatient(1).Scripts(iSSCounter).s8
'              !Current_medication = gtPatient(1).Scripts(iSSCounter).Current_medication
'              .Update
'              .MoveLast
'              gtPatient(1).Scripts(iSSCounter).Record_ID = !scriptItem_ID
'              .Close
'             End With
'             gtPatient(1).Scripts(iSSCounter).Saved = mrSaveUncommitted
'         End If
'      Next
'      Db.Close
'      ws.CommitTrans
'      Database_Unlock
'      '----------------------------------------------
'      'Once transaction is committed change the flags
'      '----------------------------------------------
'      For iSSCounter = 0 To UBound(gtPatient(1).Scripts())
'          If gtPatient(1).Scripts(iSSCounter).Saved = mrSaveUncommitted Then
'             gtPatient(1).Scripts(iSSCounter).Saved = mrSaveCommitted
'          End If
'      Next
'      Screen.MousePointer = vbArrow
'      '---------------------------
'      'Refresh the medication list
'      '---------------------------
'      Patient_Get_Medications mrShowMedsActive
'      Exit Sub
'
'
' SSError:
'      On Error Resume Next
'      ws.Rollback
'      Rs.Close
'      Db.Close
'      ws.Close
'      Database_Unlock
'      Screen.MousePointer = vbArrow
'      For iSSCounter = 0 To UBound(gtPatient(1).Scripts())
'          If gtPatient(1).Scripts(iSSCounter).Saved = mrSaveUncommitted Then
'             gtPatient(1).Scripts(iSSCounter).Saved = False
'          End If
'      Next
' End Sub
'
' Private Sub Script_Item_Display_PBSStatus()
'     '------------------------------------------------------------------
'     'Prompt user via lblMasterHeading.Caption with Item status:PBS,RPBS
'     'Private or authorities
'     '------------------------------------------------------------------
'     If Trim(Text3(2)) = "" Then Exit Sub
'     Select Case gtNew_ScriptItem(0).pbs
'     Case "Restricted - RPBS", "RPBS"
'          If check1(0).Value Then
'                  lblMasterHeading = "RPBS SCRIPT"
'                 gtNew_ScriptItem(0).Print_Status = "RPBS"
'                 Label2(7).Caption = "RPBS Drug"
'          Else
'             lblMasterHeading = "PRIVATE SCRIPT"
'             gtNew_ScriptItem(0).Print_Status = "PRIV"
'             Label2(7).Caption = "PRIV Drug"
'          End If
'     Case "Authority - RPBS"
'          If check1(0).Value Then
'             lblMasterHeading.Caption = "RPBS AUTHORITY (1800 552580)"
'             gtNew_ScriptItem(0).Print_Status = "RPBS"
'             gtNew_ScriptItem(0).AuthorityScript = True
'             Label2(7).Caption = "AUTH Drug"
'             Design_Panel_Script_Authorities True
'         Else
'             Design_Panel_Script_Authorities False
'             lblMasterHeading = "PRIVATE SCRIPT"
'             gtNew_ScriptItem(0).Print_Status = "PRIV"
'             Label2(7).Caption = "PRIV Drug"
'          End If
'     Case "Restricted - PBS/RPBS", "PBS/RPBS", "Section 100"
'          If check1(0).Value Then
'             gtNew_ScriptItem(0).Print_Status = "RPBS"
'             Label2(7).Caption = "RPBS Drug"
'          Else
'             lblMasterHeading = "PBS SCRIPT"
'             gtNew_ScriptItem(0).Print_Status = "PBS"
'             Label2(7).Caption = "PBS Drug"
'          End If
'     Case "Authority - PBS/RPBS"
'          If check1(0).Value Then
'             lblMasterHeading.Caption = "RPBS AUTHORITY (1800 552580)"
'             gtNew_ScriptItem(0).Print_Status = "RPBS"
'             gtNew_ScriptItem(0).AuthorityScript = True
'             Label2(7).Caption = "AUTH Drug"
'          Else
'             lblMasterHeading.Caption = "PBS AUTHORITY (1800 888333)"
'             gtNew_ScriptItem(0).Print_Status = "PBS"
'             gtNew_ScriptItem(0).AuthorityScript = True
'             Label2(7).Caption = "AUTH Drug"
'          End If
'       Case ""
'          lblMasterHeading = "PRIVATE SCRIPT"
'          gtNew_ScriptItem(0).Print_Status = "PRIV"
'          Label2(7).Caption = "PRIV Drug"
'     End Select
'     lblMasterHeading.Visible = True
' End Sub
'
'
' Sub Script_Items_DisplayThosePrescribed()
'     On Error GoTo DSIE
'     Dim ix As Integer
'     Dim iItemCount As Integer
'     '-----------------------------------------------------
'     'display scripts generated during current consultation
'     '-----------------------------------------------------
'     List1(0).Clear
'     For ix = 0 To UBound(gtPatient(1).Scripts())
'         If gtPatient(1).Scripts(ix).Deleted = False Then
'             iItemCount = iItemCount + 1
'             sMsg = gtPatient(1).Scripts(ix).Brand
'             sMsg = sMsg & " " & gtPatient(1).Scripts(ix).Strength_Summary
'             sMsg = sMsg & " " & gtPatient(1).Scripts(ix).Formulation
'             If gtPatient(1).Scripts(ix).Script_Date <> sToday Then
'                 If DateDiff("d", sToday, gtPatient(1).Scripts(ix).Script_Date) > 0 Then
'                     sMsg = sMsg & " [DATED AHEAD - "
'                 Else
'                     sMsg = sMsg & " [BACK DATED - "
'                 End If
'                 sMsg = sMsg & gtPatient(1).Scripts(ix).Script_Date & "]"
'             End If
'             sMsg = sMsg & " - " & gtPatient(1).Scripts(ix).Instructions
'             If gtPatient(1).Scripts(ix).Prescribed_For <> "" Then
'                 sMsg = sMsg & " for " & gtPatient(1).Scripts(ix).Prescribed_For & "."
'             End If
'             List1(0).AddItem sMsg
'             'save position in the array in case deleted etc
'             List1(0).ItemData(List1(0).NewIndex) = ix
'         End If
'     Next
'      sspanel2(2).Caption = Str$(iItemCount) & " script items prescribed this consultation"
'     Exit Sub
' DSIE:
'     Exit Sub
' End Sub
' Sub Requests_Forms_Ordered_Show()
'
'    On Error GoTo rSIE
'    Dim iZ As Integer
'    Dim iY As Integer
'     '-----------------------------------------------------
'     'display scripts generated during current consultation
'     '-----------------------------------------------------
'     List1(0).Clear
'     For iZ = 0 To UBound(gtPatient(1).Forms())
'         If gtPatient(1).Forms(iZ).Deleted = False Then
'            sMsg1 = StrConv(gtPatient(1).Forms(iZ).Provider.Type, vbProperCase) & " - "
'            sMsg1 = sMsg1 & StrConv(gtPatient(1).Forms(iZ).Provider.Name, vbProperCase) & " - "
'            '--------------------------------------
'            'Add each request to the display string
'            '--------------------------------------
'            For iY = 0 To UBound(gtPatient(1).Forms(iZ).Request())
'                If gtPatient(1).Forms(iZ).Request(iY).Deleted = False Then
'                sMsg1 = sMsg1 & gtPatient(1).Forms(iZ).Request(iY).Name & ";"
'                End If
'            Next
'            'sMsg1 = left(sMsg1, Len(sMsg1) - 1)  'chop of comma
'            '--------------------------------------------
'            'Add each clinical note to the display string
'            '--------------------------------------------
'            sMsg1 = sMsg1 & "  Notes:'"
'            sMsg1 = sMsg1 & gtPatient(1).Forms(iZ).Notes '& ";"
'            sMsg1 = left(sMsg1, Len(sMsg1) - 1) & "'"  'chop of comma
'            List1(0).AddItem sMsg1
'             'save position in the array in case deleted etc
'            List1(0).ItemData(List1(0).NewIndex) = iZ
'         End If
'     Next
'     Exit Sub
' rSIE:
'     Exit Sub
' End Sub
' Sub Allergy_Display()
'     On Error GoTo SADI
'     Dim ix As Integer
'     Dim sMsg As String
'     bExitRoutine = True
'     List1(0).Clear
'     For ix = 0 To UBound(gtPatient(1).Allergies())
'         If gtPatient(1).Allergies(ix).Deleted = False Then
'            If gtPatient(1).Allergies(ix).Type = mrDrug_Allergy Then
'                sMsg = "Allergy       - "
'             Else
'                sMsg = "Sensitivity - "
'             End If
'             If gtPatient(1).Allergies(ix).definite = True Then
'                sMsg = sMsg & "[definite] "
'             Else
'                sMsg = sMsg & "[POSSIBLE] "
'             End If
'             If gtPatient(1).Allergies(ix).Generic_Specific_Reaction = True Then
'                sMsg = sMsg & "Generic Specific"
'             Else
'                 sMsg = sMsg & gtPatient(1).Allergies(ix).Class_Description
'             End If
'             sMsg = sMsg & " (" & gtPatient(1).Allergies(ix).Generic & ")"
'             List1(0).AddItem sMsg
'             List1(0).ItemData(List1(0).NewIndex) = ix
'         End If
'     Next
'     If List1(0).ListCount Then
'        List1(0).ListIndex = 0
'     End If
'     bExitRoutine = False
'     Command3_Click (1)
'     Exit Sub
' SADI:
'     Exit Sub
' End Sub
' Private Sub Script_SplitX_Y(xval As Integer, yval As Integer)
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Labels (Removed)                                                                 *
' '*  ScriptCoordinateErr                                                                   *
' '******************************************************************************************
'
'     Dim iSpcPos
'     'On Error GoTo ScriptCoordinateErr
'     iSpcPos = InStr(1, Init1.Value, ",")
'     xval = Val(left(Init1.Value, iSpcPos - 1))
'     yval = Val(right(Init1.Value, Len(Init1.Value) - iSpcPos))
'     Exit Sub
'
'    sTitle = "PROBLEM"
'    sMsg = "An error was encountered whilst loading the script printing coordinates, which tell the program where to print the information on the script." & Chr$(10) & Chr$(10)
'    sMsg = sMsg & "You should run 'Script Configuration', from the DrsDesk program group to correct this before proceeding."
'    lresponse = MsgBox(sMsg, vbOKOnly, sTitle)
'    End
' End Sub
'
' Sub Script_Print_Single_Item()
'     '-------------------------------------------------------------------
'     'Prints a single item on the script according to its position in the
'     'gtpatient(1).scripts()) array, save in case not already saved
'     '-------------------------------------------------------------------
'     gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Printed = False
'     gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Saved = False
'     Script_Item_SaveAndPrint
' End Sub
' Sub Script_Print_GetCoordinates()
'     '----------------------------------------------------------
'     'Load default printer co-ordinates from the Medrec.ini file
'     '----------------------------------------------------------
'     Init1.FileName = "c:\medrec\medrec.ini"
'     Init1.Application = "script coordinates"
'     Init1.Parameter = "Practice_address"
'     Script_SplitX_Y xval, yval
'     PrintDoctorY = yval
'     PrintDoctorX = xval
'     Init1.Parameter = "prescriber_number"
'     Script_SplitX_Y xval, yval
'     PrintPrescriberNoX = xval
'     PrintPrescriberNoY = yval
'     Init1.Parameter = "script_number"
'     Script_SplitX_Y xval, yval
'     PrintScriptNoY = yval
'     PrintScriptNoX = xval
'     Init1.Parameter = "pharmbenefits_number"
'     Script_SplitX_Y xval, yval
'     PrintPharmBenefitNoY = yval
'     PrintPharmBenefitNoX = xval
'     Init1.Parameter = "safetynet_number"
'     Script_SplitX_Y xval, yval
'     PrintSaftNetNoY = yval
'     PrintSaftNetNoX = xval
'     Init1.Parameter = "pensionerconcession_number"
'     Script_SplitX_Y xval, yval
'     PrintPensConsNoY = yval
'     PrintPensConsNoX = xval
'     Init1.Parameter = "patient_address"
'     Script_SplitX_Y xval, yval
'     PrintAddressY = yval
'     PrintAddressX = xval
'     Init1.Parameter = "script_date"
'     Script_SplitX_Y xval, yval
'     PrintDateY = yval
'     PrintDateX = xval
'     Init1.Parameter = "brand_substitution"
'     Script_SplitX_Y xval, yval
'     PrintBrandSubstY = yval
'     PrintBrandSubstX = xval
'     Init1.Parameter = "script_drugs"
'     Script_SplitX_Y xval, yval
'     PrintDrugsY = yval
'     PrintDrugsX = xval
'     Init1.Parameter = "AuthorityDetails"
'     Script_SplitX_Y xval, yval
'     PrintAuthorityDetailsY = yval
'     PrintAuthorityDetailsX = xval
'     Init1.Parameter = "pagegap"
'     PageGap = Val(Init1.Value)
'     Init1.Parameter = "AuthorityDetails"
'     Script_SplitX_Y xval, yval
'     PrintAuthorityDetailsY = yval
'     PrintAuthorityDetailsX = xval
'     Init1.Parameter = "PoisonsDetails"
'     Script_SplitX_Y xval, yval
'     PrintPoisonsDetailsY = yval
'     PrintPoisonsDetailsX = xval
' End Sub
' Sub Script_Instructions_getlist_habits()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  ix                                                                                    *
' '******************************************************************************************
'
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Script_GetlistHabits")
'     Q("Enter Drug") = gtNew_ScriptItem(0).Brand
'     Q("Enter Doctor ID") = gtDoctor.Doctor_ID
'     Q("Enter Formulation") = gtNew_ScriptItem(0).Formulation
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) Then
'         Screen.MousePointer = vbArrow
'         bExitRoutine = False
'         TDBGrid2.ReBind
'         TDBGrid2.Refresh
'         If Len(Text3(4)) = 0 Then
'            Text3(5).SetFocus 'triggers transfer of instruction
'            DoEvents
'         End If
'    End If
'    Screen.MousePointer = vbArrow
' End Sub
' Sub Script_Brand_PrescribedFor_GetList()
'     '---------------------------------------------------------------------
'     'Gets all the reasons a particular drug was prescribed for. If reasons
'     'exist setting the focus to text3(7) = progress note triggers the
'     'transfer of this commonest via the lost focus event
'     'of text3(6) automatically filling in the reason. If > 1 reason exists
'     'the others are available when user hits the down arrow key when
'     'text3(6) has focus. NOTE: Doctor Specific
'     '--------------------------------------------------------------------
'     iGettingHabits = True
'     itdbgrid2_image = cGrID_Image_prescribed_For
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Scripts_PrescribedForHabits")
'     Q("Enter Drug") = gtNew_ScriptItem(0).Brand
'     Q("Enter Doctor ID") = gtDoctor.Doctor_ID
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) Then
'         bExitRoutine = False
'         TDBGrid2.ReBind
'         TDBGrid2.Refresh
'         If Len(Text3(5)) = 0 Then
'            Text3(7).SetFocus  'clinical notes for the drug
'         End If
'    Else
'        itdbgrid2_image = cGrID_Image_prescribed_For
'        Timer2.Enabled = True
'    End If
'    Screen.MousePointer = vbArrow
' End Sub
'
'
'
' Sub Script_Authority_GetDetails(iIndCode As Long, iNumRows As Integer)
'     '-------------------------------------------------------------
'     'given an authority code, get the list of approved indications
'     '-------------------------------------------------------------
'     Dim rs1 As Recordset
'     Dim db1 As Database
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Q = Db.QueryDefs("MRQ_Script_AuthorityIndications_Getlist")
'     Q("Enter Indcode") = iIndCode
'     Set Rs = Q.OpenRecordset()
'     With Rs
'         If .EOF + .BOF <> -2 Then
'             Split !Indication, ";"  'Split into varray()
'         End If
'         .Close
'      End With
'      sMsg = ""
'      '----------------------------------------------------------------
'      'Now delete any existing records in the indications table, a temp
'      'table, and populate it so it can be displayed by the bound grid
'      'iNumrows is the max length approx in lines to display a single aia
'      '----------------------------------------------------------------
'      Set db1 = OpenDatabase(sMEDREC_MDB, False)
'      db1.Execute "Delete * from Data_Script_Display_Indications"
'      Set rs1 = db1.OpenRecordset("Data_Script_Display_Indications")
'      iNumRows = 1
'      With rs1
'         For icounter = 0 To UBound(sArray())
'             .AddNew
'             !Indication = sArray(icounter)
'             .Update
'             If Len(sArray(icounter)) / 40 > iNumRows Then
'                iNumRows = Len(sArray(icounter)) / 40
'             End If
'
'             sMsg = sMsg & sArray(icounter) & vbLf
'         Next
'             .Close
'      End With
'      Db.Close
' End Sub
' Sub Script_Authority_DisplayList(iY As Integer)
'      '---------------------------------------------------------------
'      'Now display the aia in the grid. Note the  factor of max lines
'      'plus 0.8 to calculate the grid height seems to cover most items
'      'at this screen resolution
'      'aia = authorised indications for authority
'      '---------------------------------------------------------------
'      If TDBGrid1(0).Caption <> "Authority Indications" Then
'          Load_Layout "Authority_Indications", TDBGrid1(0), cGrID_Image_Authorities
'          itdbgrid1_image = cGrID_Image_Authorities
'          'PositionSSActiveTab1 "save"
'          SSActiveTabs1.height = Picture3.height
'          With TDBGrid1(0)
'              .RowHeight = (iY + 0.8) * TDBGrid1(0).RowHeight
'              .height = SSActiveTabPanel1.height - 100
'          End With
'      End If
'      sSql = "Select * from Data_Script_Display_Indications"
'      Data2.DatabaseName = sMEDREC_MDB
'      Data2.RecordSource = sSql
'      Data2.Refresh
'      TDBGrid2.ReBind
'      '-----------------------------------------------------------------
'      'Once refreshed the tdbgid1_rowcolchange(0) event will display the
'      'first indication as the default for the authority script
'      '-----------------------------------------------------------------
' End Sub
' Sub Design_Panel_Script_Authorities(iMakeVisible As Integer)
'     '-------------------------------------------------------------
'     'if iMakeVisible is true then change the screen display for an
'     'authority script
'     '-------------------------------------------------------------
'     If iMakeVisible Then
'        Label3.Visible = True
'        Label2(0).Visible = True
'        Label2(1).Visible = True
'        With Text2(0)
'         .Visible = True
'         .Enabled = True
'        End With
'        With Text2(1)
'         .Visible = True
'         .Enabled = True
'        End With
'
'        check2(0).Visible = True
'        check2(1).Visible = True
'        Command3(0).Caption = ">&Normal"
'        gtNew_ScriptItem(0).AuthorityScript = True
'        Label8.Visible = True
'      Else
'          Text2(0).Visible = False
'          Text2(1).Visible = False
'          Label3.Visible = False
'          Label2(0).Visible = False
'          Label2(1).Visible = False
'          check2(0).Visible = False
'          check2(1).Visible = False
'          Label8.Visible = False
'          Command3(0).Caption = ">&Authority"
'          '-----------------------------
'          'reset all the authority flags
'          '-----------------------------
'         bExitRoutine = True
'         gtNew_ScriptItem(0).AuthorityScript = False
'         gtNew_ScriptItem(0).Aia = "": Text2(0) = ""
'         gtNew_ScriptItem(0).Authorityno = "": Text2(1) = ""
'         gtNew_ScriptItem(0).AuthPhoneApproval = False
'         gtNew_ScriptItem(0).AuthPostHome = False: check2(0).Value = False
'         gtNew_ScriptItem(0).Previousauthority = False: check2(0).Value = False
'         lblMasterHeading.Caption = "SCRIPT"
'         bExitRoutine = False
'         If itdbgrid1_image <> cGrID_Image_Medications Then
'             SSActiveTabs1.SelectedTab = 1
'              Patient_Get_Medications True
'         End If
'       End If
' End Sub
' Sub Script_RefreshMedications()
'         itdbgrid1_image = cGrID_Image_Medications
'         SSActiveTabs1.SelectedTab = 1
'         Patient_Get_Medications True
'
' End Sub
'
' Sub Design_Panel_Script()
'    '-------------------------------------------
'    'hide controls not needed above editing area
'    '-------------------------------------------
'    Design_Panel_Basic
'    Init1.FileName = sMain_Dir & "\Medrec.ini"
'    Init1.Application = "Scripts Fonts " & gtDoctor.Doctor_ID
'    bExitRoutine = True
'     Text4(0).Visible = False
'     List1(0).Visible = False
'     List1(1).Visible = False
'    '------------
'    'The headings
'    '------------
'    With lblMasterHeading
'         .Caption = "SCRIPT"
'         .Visible = True
'    End With
'    With Label8
'         .height = lblMasterHeading.height
'         .toP = lblMasterHeading.toP
'         .Font = "Verdana"
'         .Caption = lblMeasure.Caption
'         .Font.Size = 7
'         .Visible = False
'         .left = 2800
'    End With
'    With Label3
'         .left = 4340
'    End With
'   lblMeasure.Caption = "    Indication    "
'    '-----------------------------------------------------
'    'The date prompt and labels, the authority stuff
'    '-----------------------------------------------------
'    With Label2(0)
'         .Caption = "Indication"
'         .height = 180
'         .left = Picture1(0).left
'         .toP = 324
'         .Font.Name = "Verdana"
'         .Font.Size = 7
'         .Font.Bold = True
'         .BackColor = vbLightGrey
'         .ForeColor = vbDarkBlue
'         .Visible = False
'         .width = lblMeasure.width
'    End With
'    With Label2(1)  'to indicate the phone approval # for authority script
'         .Caption = "Approval No"
'         .height = Shape3.height 'was 180
'         .left = Label2(0).left
'         .toP = Label2(0).toP + Label2(0).height + 100
'         .Font.Name = "Verdana"
'         .Font.Size = 7
'         .Font.Bold = True
'         .BackColor = vbLightGrey
'         .ForeColor = vbDarkBlue
'         .Visible = False
'         .width = Label2(0).width
'    End With
'
'    With Text2(0)  'to hold the indications for authority text
'         .toP = Label2(0).toP
'         .left = Picture1(1).left
'         .width = Picture1(1).width
'         .height = Shape3.height
'         .MaxLength = 0
'         .BackColor = vbWhite
'         .ForeColor = vbDarkGrey
'         .Font.Name = "Verdana"
'         .Font.Size = 6.5
'         .Visible = False
'         .Locked = False
'         .TabStop = True
'         .TabIndex = 0
'         .Text = ""
'     End With
'      lblMeasure = "N 1234 SS    "
'     With Text2(1)  'to hold the phone approval number
'         .toP = Label2(1).toP
'         .left = Picture1(1).left
'         .width = lblMeasure.width
'         .height = 180
'         .MaxLength = 0
'         .BackColor = vbWhite
'         .ForeColor = vbDarkGrey
'         .Font.Name = "Verdana"
'         .Font.Size = 6.5
'         .Visible = False
'         .Locked = False
'         .TabStop = True
'         .TabIndex = 0
'         .Text = ""
'    End With
'     lblMeasure.Caption = "    Previous    "
'     With check2(0)
'         .left = Text2(1).left + Text2(1).width + 100
'         .Caption = "Previous"
'         .Font.Size = 7
'         .toP = Label2(1).toP
'         .ForeColor = vbPurple
'         .Visible = False
'         .width = lblMeasure.width
'     End With
'     lblMeasure.Caption = "    Post Home    "
'     With check2(1)
'         .left = check2(0).left + check2(0).width + 100
'         .Caption = "Post Home"
'         .ForeColor = vbPurple
'         .Font.Size = 7
'         .toP = Label2(1).toP
'         .Visible = False
'         .width = lblMeasure.width
'     End With
'
'
'    lblMeasure.Caption = "   99/99/9999"
'    With Text2(2)
'          .toP = check2(1).toP
'          .width = lblMeasure.width
'          .left = Picture1(4).left + Picture1(4).width - Text2(2).width
'          .Text = sToday
'          .Font.Name = "Ms Sans Serif"
'          .Font.Size = 7
'          .height = Shape3.height
'          .ForeColor = vbRed
'          .Font.Bold = False
'          .MaxLength = 10
'          .Visible = True
'    End With
'    lblMeasure.Caption = "  Date  "
'    With Text5
'        ' .BackColor = vbPink
'       '  .ForeColor = vbRed
'       '  .Enabled = True
'       .Visible = True
'       ' .Height =
'       '  .MaxLength = 2
'    End With
'     With Label2(23)
'        .Caption = "Prescribe For"
'        .ForeColor = vbAqua
'        .left = 0
'        .width = Picture1(4).width
'    End With
'    '----------------------------------------------------------
'    'The prompts in picture1(0) for this section, including the
'    'four labels for preg class, resticted, drowsy and s8
'    '----------------------------------------------------------
'    With Label2(5)
'        .Caption = "Class(es)"
'       End With
'    With Label2(6)
'         .Caption = "Generic"
'    End With
'
'    With Label2(7)
'        .Caption = "Drug"
'    End With
'    With Label2(8)
'        .Caption = "Strength"
'         End With
'    With Label2(9)
'        .Caption = "Direction"
'        End With
'    With Label2(10)
'         .Caption = "For"
'         .Visible = True
'    End With
'    With Label2(11)
'         .Caption = "Progress Notes"
'         .Visible = True
'    End With
'
'    '--------------------------------------------------------
'    'Next the contents of the picture1(0) editing area
'    'first make controls in edit area invisible if not needed
'    '--------------------------------------------------------
'
'
'    With Text3(0)   'holds the drug class
'         .width = Picture1(1).width - 50
'    End With
'    With Text3(1) ' the generic
'         .MaxLength = 0
'         .width = 3000
'    End With
'    With Text3(2) ' the brand
'         .MaxLength = 255
'         .width = Text3(1).width
'    End With
'    With Text3(3)   'holds the directions
'          .width = Text3(0).width
'          .MaxLength = 60
'          .Visible = True
'    End With
'    lblMeasure.Caption = "    Veteran"
'    '----------------------------------------------------
'    'the labels to right in the area sit above each other
'    '----------------------------------------------------
'    With Label2(19)
'        .Caption = "Ve&teran"
'        .left = Text3(1).left + Text3(1).width + 20
'        .toP = Label2(6).toP
'        .BackColor = vbWhite
'        .ForeColor = vbDarkBlue
'        .Visible = True
'        .width = lblMeasure.width
'    End With
'    With Label2(17)
'         .Caption = "&Reg 24  "
'        .left = Label2(19).left
'        .toP = Label2(7).toP
'        .BackColor = vbWhite
'        .ForeColor = vbDarkBlue
'        .Visible = True
'        .width = Label2(19).width
'    End With
'    With Label2(15)
'        .Caption = "Quantity "
'        .left = Label2(19).left
'        .width = Label2(19).width
'        .toP = Label2(8).toP
'        .BackColor = vbWhite
'        .ForeColor = vbDarkBlue
'        .Visible = True
'    End With
'
'    With Label2(16)
'         .left = Label2(19).left
'         .width = Label2(19).width
'         .ForeColor = vbDarkBlue
'         .BackColor = vbWhite
'         .Caption = "Repeats"
'         .Visible = True
'         .toP = Text3(4).toP
'         .height = Text3(4).height
'    End With
'
'    With check1(0)  'the yes it is a veteran check box
'         .toP = Label2(6).toP
'         .left = Label2(19).left + Label2(19).width + 20
'         .width = Picture1(1).width - Label2(19).left - Label2(19).width - 50
'         .Caption = "Yes"
'         .Font.Bold = False
'         .BackColor = vbPink
'         .Value = False
'         .height = Text3(0).height
'         .Visible = True
'    End With '
'    With check1(1) 'yes it is reg 24
'         .toP = Label2(7).toP
'         .left = check1(0).left
'         .Caption = "Yes"
'         .Font.Bold = False
'         .BackColor = vbPink
'         .height = Text3(0).height
'         .width = check1(0).width
'         .Visible = True
'    End With
'
'    With Text3(3) 'to hold the pack data
'        .width = Text3(1).width
'        .Locked = True
'       End With
'    With Text3(4) 'to hold the instructions
'        .MaxLength = 60
'        .width = Text3(1).width
'
'    End With
'    With Text1 'holds quantity
'          .left = check1(0).left
'          .width = check1(0).width
'          .toP = Text3(3).toP
'          .MaxLength = 6  'eg to say 100 * 2
'          .height = Text3(3).height
'          .Locked = False
'          .BackColor = vbPink
'          .ForeColor = vbRed
'          .Visible = True
'          .TabStop = False
'    End With
'
'    With Text3(6) 'hold the number of repeats
'         .left = check1(0).left
'         .toP = Text3(4).toP
'         .width = check1(0).width
'         .Visible = True
'         .MaxLength = 50
'         .TabStop = False
'
'    End With
'    With Text3(5) 'the reason for prescribing
'         .width = Text3(1).width
'         .MaxLength = 50
'    End With
'    Text3(7).MaxLength = 255 'progress notes
'    With Label2(18)
'         .left = Label2(19).left
'         .width = Label2(19).width
'         .ForeColor = vbDarkBlue
'         .BackColor = vbWhite
'         .Caption = "Usual"
'         .Visible = True
'         .toP = Text3(5).toP
'         .height = Text3(5).height
'    End With
'    With check1(6)
'         .Visible = True
'         .Value = False
'         .toP = Text3(5).toP
'         .left = check1(0).left
'         .Font.Bold = False
'         .BackColor = vbPink
'         .Caption = "Yes"
'         .width = check1(0).width
'         .height = Text3(0).height
'    End With
'
'    lblMeasure.Caption = "    Reg 24      "
'    With Text3(7)
'         .Visible = True
'         .toP = Label2(11).toP
'         .left = Text3(0).left
'         .width = Picture1(1).width - 50
'         .TabStop = True
'         .TabIndex = 8
'         .Enabled = True
'    End With
'     lblMeasure = "    Authority    "
'    With Command3(0)
'        .Caption = ">&Authority"
'        .toP = Text3(7).toP + Text3(7).height + 50
'        .left = 50
'        .width = lblMeasure.width
'        .Visible = True
'        .Enabled = True
'    End With
'    Command3(1).toP = Command3(0).toP
'    Command3(2).toP = Command3(0).toP
'    With Command3(3)
'        .left = Command3(0).left + Command3(0).width + 100
'        .Caption = "Mims &PI"
'        .Visible = True
'        .toP = Command3(0).toP
'        .Enabled = True
'    End With
'    With Command3(4)
'        .left = Command3(3).left + Command3(3).width + 100
'        .Caption = "Equiv"
'        .Visible = False
'        .toP = Command3(0).toP
'        .Enabled = True
'    End With
'
'     Picture1(1).height = Text3(7).toP + Text3(7).height + Command3(cEdit_cancel).height + 120
'     Picture1(0).height = Picture1(1).height
'     For icounter = 0 To 3
'       Label7(icounter).toP = Picture1(1).height - Label7(icounter).height - 10
'       Label7(icounter).Visible = False
'     Next
'     With sspanel2(1)
'         .Caption = "Drug interactions"
'         .toP = Picture1(1).toP + Picture1(1).height + 100
'         .Visible = True
'     End With
'     Design_DisplayShadows
'
'    '------------------------------------------------------
'    'put up the richtextbox1(0) for brief interaction notes
'    '------------------------------------------------------
'    With RichTextBox1(0)
'         .toP = sspanel2(1).toP + sspanel2(1).height + Picture3.toP
'         .left = Picture3.left + 12
'         .height = (Picture3.height - (sspanel2(1).toP + (sspanel2(1).height * 2) + Picture3.toP)) * 0.35
'         .width = Picture3.width - 24
'         .Visible = True
'         .TabStop = False
'    End With
'    'label7 is used to display restricted, drowsy, pregcat and S8
'
'
'    With sspanel2(2)
'        .toP = RichTextBox1(0).toP + RichTextBox1(0).height - Picture3.toP
'        .left = 0 'shape_left_outline.width
'        .Caption = "Script items prescribed this consultation"
'    End With
'     Init1.Parameter = "Scripts"
'     Split Init1.Value, ","
'     With List1(0)
'         .ForeColor = vbBlack
'         .BackColor = vbWhite
'         .Columns = 1
'         .left = -6
'         .Font = sArray(0)
'         .Font.Size = sArray(1)
'         .Font.Bold = sArray(2)
'         .Font.Italic = sArray(3)
'         .width = Picture3.width
'         .Visible = True
'         .toP = sspanel2(2).toP + sspanel2(2).height
'         .height = Picture3.height - sspanel2(2).toP - Shape2(8).height - sspanel2(2).height
'     End With
'
'
'    SSActiveToolBars1.Tools("ID_Print").Enabled = True
'    bExitRoutine = False
'    '-------------------------------------------
'    'Things in the heading of the script section
'    '-------------------------------------------
'    lblMeasure = "    00012345"
'    With Label3
'         .width = lblMeasure.width
'         .left = Text2(2).left
'    End With
'    Resizer1.Rebuild
'    DoEvents
' End Sub
'
' Sub Script_Item_Display_Preg_text(Category As String, lProdcode As Long, lformcode As Long, sBrand As String, sGeneric As String)
'     '-------------------------------------------------------------------
'     'Get the pregnancy text from the drug database, displaying the drugs
'     'nominated category first, and the remainder of the categories after
'     '-------------------------------------------------------------------
'     Dim sText As String
'     Dim rs1 As Recordset
'     RTF_SetFontTables sText
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Q = Db.QueryDefs("MRQ_Script_Pregnancy_CategoryText")
'     Set Rs = Q.OpenRecordset()
'     With Rs
'         '-------------------------------------------
'         'Put the drugs pregnancy category up the top
'         '-------------------------------------------
'         .FindFirst "Pregnancy_Category = " & Chr$(34) & Category & Chr$(34)
'         Script_Preg_RTFFormat_heading sText, !Pregnancy_category, rtcDarkBlue
'         Script_Preg_RTFformat_text sText, !Description, rtcBlack
'         '----------------------------------
'         'Now add text peculiar to that drug
'         '----------------------------------
'         Set Q = Db.QueryDefs("MRQ_Script_Pregnancy_DrugSpecificText")
'         Q("Enter Prodcode") = lProdcode
'         Q("Enter Formcode") = lformcode
'         Set rs1 = Q.OpenRecordset()
'         With rs1
'             Do Until .EOF
'             If .EOF + .BOF <> -2 Then
'                If Not IsNull(!ADEC_Text) Or Not IsNull(!General_Text) Then
'                   sText = sText & "\par\cf" & Format(rtcDarkBlue) & " Notes on " & !Generic & ": " & "\b0\"
'                   sText = sText & "cf" & Format(rtcBrightRed)
'                   sText = sText & "" & !ADEC_Text & " " & "" & !General_Text & "\par"
'                End If
'             End If
'             .MoveNext
'             Loop
'             .Close
'          End With
'         '-----------------------------------------------------
'         'Reposition to start of recordset and add rest of text
'         '-----------------------------------------------------
'         .MoveFirst
'     Do Until .EOF
'        If !Pregnancy_category <> Category Then
'           Script_Preg_RTFFormat_heading sText, !Pregnancy_category, rtcDarkBlue
'           Script_Preg_RTFformat_text sText, !Description, rtcBlack
'        End If
'        .MoveNext
'     Loop
'     .Close
'     End With
'     '--------------------
'     'Now display the text
'     '--------------------
'      iCentralDisplay = cCentralDisplay_PregnancyCategory
'       If Picture5.Visible = False Then
'         With Picture5
'           .left = Picture3.left
'           .toP = Picture3.toP
'           .height = Picture3.height
'           .width = Picture3.width
'           .Visible = True 'the container
'           .ZOrder
'         End With
'       End If
'         '-----------------------------------------------------------
'         'Now downsize the text to make it readable on central screen
'         '-----------------------------------------------------------
'         With RichTextBox1(1)
'             .Visible = True
'             .Locked = True
'             .TextRTF = sText & "}"
'         End With
'         Text7.Visible = False 'text box to get tag changes in referrals
'         '------------------------------------------------------
'         'change heading on top of central area to indicate file
'         '------------------------------------------------------
'         Label4.Caption = UCase(sBrand) & " (" & sGeneric & ")"
'         Label1.Caption = "CATEGORY " & Category
'         Label1.left = 4500
'         Label1.Visible = True 'second label on top panel
'         '---------------------------------
'         'Change other buttons and captions
'         '---------------------------------
'         lblMeasure = "    Print Text     "
'         With Command2(3)
'              .Caption = "Print Text"
'              .width = lblMeasure.width
'         End With
'         bExitRoutine = False
' End Sub
' Sub Script_Preg_RTFformat_text(sText As String, sDescription As String, color As Integer)
'     sText = sText & "\ul0\b0\f16\fs16\cf" & Format(color)
'     sText = sText & sDescription & "\par"
' End Sub
'
' Sub RTF_SetFontTables(sFT)
'     sFT = "{\rtf1\deff0\deflang1033{\fonttbl "
'     sFT = sFT & "{\f0\froman\fcharset0\fprq2Times New Roman;}"
'     sFT = sFT & "{\f1\fswiss\fcharset0\fprq2MS Sans Serif;}"
'     sFT = sFT & "{\f16\fswiss\fcharset0\fprq2Small Fonts;} "
'     sFT = sFT & "{\f37\fscript\fcharset0\fprq2Comic Sans MS;}} "
'     sFT = sFT & "{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;"
'     sFT = sFT & "\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}"
' End Sub
' Sub Script_Preg_RTFFormat_heading(sText As String, Category As String, color As Integer)
'        '----------------------------------
'        'Prints eg Category B3 as a heading
'        '----------------------------------
'        sText = sText & "\par\ql\cf" & Format(rtcDarkBlue)
'        sText = sText & "\cb2\F0\fs14\b\ul0 "
'        sText = sText & "CATEGORY " & UCase(Category)
'        sText = sText & "\par\par"
' End Sub
' Private Sub Script_Authority_GetNumber(sNextAuthorityNumber)
'     '----------------------------------------------------------------------------
'     'How to generate authority numbers:from Pharm benefits branch:
'     'Number is 8 digits long. 1-7=actual number 8 = check digit
'     'checkdigit=Sum (1-7) divided by 9, using the remainder
'     'Step1:select the 4 digits preceeding the last digit (of the 7 digit number)
'     'Step2:Add the check digit
'     'This gives the first number in the series
'     'This authority number is saved back to the database now, if this script item
'     'is discarded, the authority number is lost forever
'     'What the heck, we throw away scripts don't we!
'     '----------------------------------------------------------------------------
'     Dim X  As Integer
'     Dim icounter As Integer
'     Dim Db As Database
'     Dim Q As QueryDef
'     Dim Rs As Recordset
'     '-----------------------------------------------------------------
'     'Open the doctors table, and extract the last used authority number
'     '------------------------------------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Script_GetDrsLastPrescriberNumbers")
'     Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'     Set Rs = Q.OpenRecordset()
'     With Rs
'         '----------------------------------------------
'         'First time use, create the first in the series
'         '----------------------------------------------
'         If IsNull(!NextAuthorityNumber) Then
'             '---------------------------
'             'Lift out 4 digits preceeding the last and Convert to a 7 digit number
'             '---------------------------
'            sNextAuthorityNumber = "000" & Mid$(!PrescriberNumber, Len(!PrescriberNumber) - 4, 4)
'             '-------------------------
'             'Add up the first 7 digits
'             '-------------------------
'             For icounter = 1 To 7
'                  X = X + Val(Mid$(sNextAuthorityNumber, icounter, 1))
'             Next icounter
'             '-----------------------
'             'Calculate the remainder
'             '-----------------------
'             X = X Mod 9
'             '---------------------------------------
'             'Generate the first number in the series
'             '---------------------------------------
'             sNextAuthorityNumber = sNextAuthorityNumber + Format(X)
'              Rs.Edit
'              !NextAuthorityNumber = sNextAuthorityNumber
'              Rs.Update
'          Else
'              '----------------------------
'              'Next number in the series is
'              '----------------------------
'             sNextAuthorityNumber = Format(Val(left(!NextAuthorityNumber, 7) + 1), "0000000")
'              X = 0
'              For icounter = 1 To 7
'                   X = X + Val(Mid$(sNextAuthorityNumber, icounter, 1))
'              Next icounter
'              X = X Mod 9
'             sNextAuthorityNumber = sNextAuthorityNumber + Format(X)
'              '-------------------------
'              'Save back to the database
'              '-------------------------
'              .Edit
'              !NextAuthorityNumber = sNextAuthorityNumber
'              .Update
'          End If
'          .Close
'      End With
'      Db.Close
' End Sub
' Sub Script_Instructions_Select()
'     bExitRoutine = True
'     If itdbgrid2_image = cGrID_Image_Instructions Then
'         If RecordsExist(Data1) Then
'           If (InStr(LCase(Data1.Recordset!Description), LCase(Trim(Text3(4)))) And Picture2.Visible) _
'               Then
'              Text3(4) = Data1.Recordset!Description
'           Else
'              If Picture2.Visible Or Text3(4) = "" Then
'                 Text3(4) = Data1.Recordset!Description
'             End If
'           End If
'           Picture2.Visible = False
'           Text3(5).SetFocus
'         End If
'     End If
'     bExitRoutine = False
'  End Sub
'
' Sub Script_Item_Edit()
'     Dim ix As Integer
'     '----------------------------------------------------------------
'     'Edits a medication in list1(iX) by the user clicking on list1(iX)
'     '----------------------------------------------------------------
'     Command3_Click (1) 'clear the editing area, reset flags
'     bExitRoutine = True
'     iEditing = True
'     '-----------------------------------------------------------------
'     'set the editing area script array to that of the highlighted item
'     '-----------------------------------------------------------------
'     ix = List1(ix).ItemData(List1(ix).ListIndex)
'     gtNew_ScriptItem(0) = gtPatient(1).Scripts(ix)
'     '----------------------------------------
'     'Now populate the editing area text boxes
'     '----------------------------------------
'     Text2(2) = gtPatient(1).Scripts(ix).Script_Date
'     For icounter = 0 To UBound(gtPatient(1).Scripts(ix).ClaDesc())
'        Text3(0) = Text3(0) & gtPatient(1).Scripts(ix).ClaDesc(icounter) & ","
'     Next
'     Text3(1) = gtPatient(1).Scripts(ix).GenericString
'     Text3(2) = gtPatient(1).Scripts(ix).Brand
'     Text3(3) = gtPatient(1).Scripts(ix).Strength_Summary
'     Text3(4) = gtPatient(1).Scripts(ix).Instructions
'     Text3(5) = gtPatient(1).Scripts(ix).Prescribed_For
'     Text3(6) = gtPatient(1).Scripts(ix).Repeats
'     Text3(7) = gtPatient(1).Scripts(ix).ClinicalNotes
'     Text1 = gtPatient(1).Scripts(ix).Quantity
'     Text3(0).Locked = True
'     Text3(1).Locked = True
'     If gtPatient(1).Scripts(ix).Veteran = True Then
'         check1(0).Value = 1
'     End If
'     If gtPatient(1).Scripts(ix).Reg24 = True Then
'        check1(1).Value = 1
'     End If
'     If gtPatient(1).Scripts(ix).Current_medication = True Then
'         check1(6).Value = 1
'     Else
'         check1(6).Value = False
'     End If
'     Script_Item_Display_PBSStatus
'     If gtPatient(1).Scripts(ix).drowsy = "Yes" Then
'       Label7(3).Visible = True
'     End If
'     If gtPatient(1).Scripts(ix).s8 Then
'        Label7(2).Visible = True
'     End If
'     If gtPatient(1).Scripts(ix).Restcode Then
'        Label7(1).Visible = True
'     End If
'     If gtPatient(1).Scripts(ix).pc <> "" Then
'        Label7(0).Caption = gtPatient(1).Scripts(ix).pc
'        Label7(0).Visible = True
'     End If
'     '-------------------------------------------------
'     'Put in any extra stuff it if is an authority item
'     '-------------------------------------------------
'      If gtPatient(1).Scripts(ix).AuthorityScript Then
'         Dim iNumRows As Integer
'         Script_Authority_GetDetails gtPatient(1).Scripts(ix).authcode, iNumRows
'         Script_Authority_DisplayList iNumRows
'         Text2(0) = gtPatient(1).Scripts(ix).Aia
'         Text2(1) = gtPatient(1).Scripts(ix).AuthPhoneApproval
'         If gtPatient(1).Scripts(ix).Previousauthority = True Then
'             check2(0).Value = 1
'         End If
'         If gtPatient(1).Scripts(ix).AuthPostHome = True Then
'            check2(1).Value = 1
'         End If
'         Label3.Caption = gtPatient(1).Scripts(ix).Authorityno
'         Design_Panel_Script_Authorities True
'         If check1(0).Value And InStr(gtNew_ScriptItem(0).pbs, "RPBS") Then
'             lblMasterHeading.Caption = "RPBS AUTHORITY (1800 552580)"
'             gtNew_ScriptItem(0).Print_Status = "RPBS"
'             gtNew_ScriptItem(0).AuthorityScript = True
'             Label2(6).Caption = "AUTH Drug"
'             Label8.Caption = "  " & gtPatient(1).VeteranNo & "  "
'         Else
'             lblMasterHeading.Caption = "PBS AUTHORITY (1800 888333)"
'             gtNew_ScriptItem(0).Print_Status = "PBS"
'             gtNew_ScriptItem(0).AuthorityScript = True
'             Label2(6).Caption = "AUTH Drug"
'             Label8.Caption = "  " & Format(gtPatient(1).MedicareNo, "#### #### #") & "  "
'         End If
'
'
'     End If
'     bExitRoutine = False
'     Command3(cEdit_Accept).SetFocus
' End Sub
' Sub Script_Preg_PromptPregCat()
'     '------------------------------------------
'     'put up a prompt for the pregnancy category
'     '------------------------------------------
'     If LCase(gtPatient(1).Sex) = "f" Then
'        If gtNew_ScriptItem(0).pc <> "" Then
'            Label7(0).Caption = gtNew_ScriptItem(0).pc
'            Label7(0).Visible = True
'        End If
'     End If
' End Sub
'
'
' Sub Script_Item_SaveAndPrint()
'     If gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Reprint = False Then
'        Script_Save
'     End If
'     Script_Print
' End Sub
'
' Sub Script_Item_MarkDeleted()
'     'mark the item as not to be saved or printed
'     gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Deleted = True
'     Script_Items_DisplayThosePrescribed
' End Sub
' Sub Script_ItemsMarkDeleted()
'     Dim ix As Integer
'     For ix = 0 To UBound(gtPatient(1).Scripts())
'        gtPatient(1).Scripts(ix).Deleted = True
'     Next
'     List1(0).Clear
' End Sub
'
' Sub Script_Packs_MakeSummary(sPackSummary As String, iActive As Variant, _
'         iActive_units As Variant, iPer_Volume As Variant, _
'         iPer_vol_units As Variant, iUnit_Volume As Variant, _
'         iunit_vol_units As Variant)
'     '----------------------------------------------------------------
'     'Construct the format eg 250mg 20's to show to user in pack table
'     '----------------------------------------------------------------
'     sPackSummary = ""
'     sPackSummary = "" & iActive ' active eg 250
'     sPackSummary = sPackSummary & "" & iActive_units             'active_units eg mg
'     If iPer_Volume <> "" Then
'         sPackSummary = sPackSummary & "/" & iPer_Volume         'per volume
'     End If
'     sPackSummary = sPackSummary & "" & iPer_vol_units & " "      'per_vol_units
'     sPackSummary = sPackSummary & "" & iUnit_Volume              'unit_volume
'     sPackSummary = Trim(sPackSummary & "" & iunit_vol_units)  '14May2000 & " "     'per_vol_units
'   '  If iNo_of_packs <> "" Then
'   '     If iNo_of_packs <> "1" Then
'   '         sPackSummary = sPackSummary & " " & iNo_of_packs & " " & Chr$(215) & " "
'   '     End If
'   '  End If
'   '  sPackSummary = sPackSummary & iunits_per_pack           'active_units eg mg
'   '  sMsg = Trim(sPackSummary) & "'s"
'
'      '----------------------------------------------------------------
'         'Construct the format eg 250mg 20's to show to user in pack table
'         '----------------------------------------------------------------
'      '   sPackSummary = ""
'      '   sPackSummary = ucfField_Active ' active eg 250
'      '   sPackSummary = sPackSummary & ucfField_Active_units 'active_units eg mg
'      '   If ucfField_Per_volume <> "" Then
'      '       sPackSummary = sPackSummary & "/" & ucfField_Per_volume   'per volume
'      '   End If
'      '   sPackSummary = sPackSummary & ucfField_Per_vol_units & " "  'per_vol_units
'      '   sPackSummary = sPackSummary & ucfField_Unit_volume 'unit_volume
'      '   sPackSummary = sPackSummary & ucfField_Unit_vol_units & " "  'per_vol_units
'      '
'      '   If iNo_of_packs <> "" Then
'      '      If iNo_of_packs <> "1" Then
'      '       sPackSummary = sPackSummary & " " & iNo_of_packs & " " & Chr$(215) & " "
'      '      End If
'      '   End If
'       '  sPackSummary = sPackSummary & ucfField_Units_per_pack  'eg 1 or 2
'       '  Value = Trim(sPackSummary) & "'s"
' End Sub
'
' Sub Design_Panel_Allergies()
'     Design_Panel_Basic
'      bExitRoutine = True
'     Init1.FileName = sMain_Dir & "\Medrec.ini"
'     Init1.Application = "Allergies Fonts " & gtDoctor.Doctor_ID
'
'     'Remove addition things not neede
'     Picture1(3).Visible = False
'     Picture1(4).Visible = False
'     List1(1).Visible = False
'     '-----------------
'     'Give it a heading
'     '-----------------
'     With lblMasterHeading
'          .Caption = "ALLERGIES"
'          .Visible = True
'     End With
'     '---------------------------
'     'The labels in the side area
'     '---------------------------
'     Label2(5).Caption = "Date"
'     Label2(6).Caption = "Search by drug"
'     Label2(7).Caption = "Generic"
'     Label2(8).Caption = "Class"
'     Label2(9).Caption = "Reaction"
'     With Label2(10)
'         .Caption = "Type"
'         .Visible = True
'     End With
'     '------------------------------
'     'The inside of the editing area
'     '1:the input text boxes
'     '------------------------------
'     With Text3(0)
'          .Text = sToday
'          .MaxLength = 10
'
'     End With
'     With Text3(1) 'the drug
'          .MaxLength = 75
'     End With
'     With Text3(2)  'the generic(s)
'         .MaxLength = 255
'         .Locked = True
'         .width = Picture1(1).width * 2 / 3
'     End With
'     lblMeasure.Caption = "    Generic specific   "
'    With check1(1)
'           .toP = Text3(2).toP
'           .left = Text3(2).left + Text3(2).width + 100
'           .Caption = "Generic specific"
'           .width = Text3(0).width - Text3(2).width - 100
'           .Value = False
'           .Visible = True
'           .height = Text3(2).height
'           .BackColor = vbWhite
'     End With
'     With Text3(3)  'the Class
'         .MaxLength = 70
'         .Locked = True
'     End With
'     With Text3(4)  'the description
'         .MaxLength = 255
'     End With
'     Text3(5).Visible = False
'     '-----------------------------------------------
'     '2:the option buttons for allergy or sensitivity
'     '-----------------------------------------------
'
'      lblMeasure = "    Allergy    "
'      With Option2(0)
'           .Caption = "Allergy"
'           .width = lblMeasure.width
'           .left = 100
'           .toP = Label2(10).toP + 20
'           .Visible = True
'           .TabIndex = 6
'           .TabStop = True
'      End With
'      lblMeasure = "    Sensitivity    "
'      With Option2(1)
'           .Caption = "Sensitivity"
'           .width = lblMeasure.width
'           .left = Option2(0).left + Option2(0).width + 10
'           .toP = Option2(0).toP
'           .Visible = True
'           .Value = False
'           .TabStop = True
'           .TabStop = 7
'      End With
'      lblMeasure = "   definite   "
'      With check1(0)
'           .toP = Option2(1).toP
'           .left = Option2(1).left + Option2(1).width + 100
'           .Caption = "definite"
'           .height = Option2(0).height
'           .width = lblMeasure.width
'           .Value = False
'           .Visible = True
'           .BackColor = vbWhite
'     End With
'      '---------------------------------------------------
'      'Now the lists and the heading for current allergies
'      '---------------------------------------------------
'      With sspanel2(1)
'         .Caption = "Drug                                                         Generic"
'         .toP = Picture1(1).toP + Picture1(1).height + 200
'         .left = 0
'         .Visible = True
'     End With
'     Init1.Parameter = "Allergies"
'     Split Init1.Value, ","
'     With List1(0) 'to hold the names of the drugs
'         .width = Picture3.width
'         .toP = sspanel2(1).toP + sspanel2(1).height
'         .Font = sArray(0)
'         .Font.Size = sArray(1)
'         .Font.Bold = sArray(2)
'         .Font.Italic = sArray(3)
'         .Visible = True
'         .left = -6
'     End With
'     'place to display the class code text
'     sspanel2(2).Caption = "Class text"
'     Init1.Parameter = "Allergy Class Notes"
'     Split Init1.Value, ","
'     With RichTextBox1(0)
'          .toP = sspanel2(2).toP + sspanel2(2).height + Picture3.toP
'          .width = Picture3.width - 40
'         .left = Picture3.left + 10
'         .BackColor = vbWhite
'         .BorderStyle = rtfNoBorder
'         .Font = sArray(0)
'         .Font.Size = sArray(1)
'         .Font.Bold = sArray(2)
'         .Font.Italic = sArray(3)
'         .height = Shape2(8).toP - RichTextBox1(0).toP
'         .Visible = True
'         .Locked = True
'     End With
'     SSActiveToolBars1.Tools("ID_Print").Enabled = False
'     Design_DisplayShadows
'     Resizer1.Rebuild
'     DoEvents
'      bExitRoutine = False
' End Sub
' Sub Script_Brand_PrescribedFor_Select()
'     '------------------------------------------------------
'     'Display the selected reason for prescribing this brand
'     '------------------------------------------------------
'     If Trim(Text3(5)) = "" Then
'         If itdbgrid2_image = cGrID_Image_prescribed_For Then
'            bExitRoutine = True
'            If RecordsExist(Data1) Then
'                 If InStr(LCase(Data1.Recordset!Description), LCase(Trim(Text3(5)))) Then
'                    Text3(5) = Data1.Recordset!Description
'                     gtNew_ScriptItem(0).Termcode = Data1.Recordset!code
'                 Else
'                    If Picture2.Visible Then
'                       Text3(5) = Data1.Recordset!Description
'                       gtNew_ScriptItem(0).Termcode = Data1.Recordset!code
'                    End If
'                 End If
'                 Picture2.Visible = False
'                 End If
'           End If
'           bExitRoutine = False
'     Else
'         sMsg = Text3(5).Text
'
'         General_GetTerm sMsg, cGrID_Image_prescribed_For, gtNew_ScriptItem(0).Termcode
'         bExitRoutine = True
'         Text3(5) = sMsg
'         bExitRoutine = False
'     End If
' End Sub
' Sub Allergy_Getlist_Drugs()
'     On Error GoTo AGLDError
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Q = Db.QueryDefs("MRQ_Allergies_GetlistDrugs")
'     Q("Enter Drug") = Trim(Text3(1))
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(Text3(1)) Then
'        Picture2.Visible = True: Picture2.ZOrder
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
'     Exit Sub
' AGLDError:
'     Screen.MousePointer = vbArrow
'     Exit Sub
'
' End Sub
' Sub Allergy_getlist_Generic_classes()
'     Dim sMsg As String
'     Dim sMsg1 As String
'     Dim ix As Integer
'     '--------------------------------------------------------------
'     'This query gets one of more generics, classes and descriptions
'     '--------------------------------------------------------------
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Q = Db.QueryDefs("MRQ_Allergies_Getlist_Generic_Classes")
'     Q("Enter Prodcode") = gtNew_allergy(0).Prodcode
'     Set Rs = Q.OpenRecordset()
'     ix = 0
'     With Rs
'          Do Until .EOF
'            '-----------------------------------------------------------
'            'If there is more than one component create new array member
'            '-----------------------------------------------------------
'            If ix > 0 Then
'               ReDim Preserve gtNew_allergy(ix)
'               gtNew_allergy(ix) = gtNew_allergy(0) 'copy basic data
'            End If
'            gtNew_allergy(ix).Class_Description = !ClaDesc
'            gtNew_allergy(ix).ClaCode = !ClaCode
'            gtNew_allergy(ix).Generic = !Generic
'            gtNew_allergy(ix).DataChanged = True
'            sMsg = sMsg & !ClaDesc & ", "
'            If InStr(sMsg1, !Generic) = False Then
'                 sMsg1 = sMsg1 & !Generic & ", "
'            End If
'            ix = ix + 1
'            .MoveNext
'          Loop
'          .Close
'     End With
'     Db.Close
'     Text3(3) = left(sMsg, Len(sMsg) - 2)
'     Text3(2) = left(sMsg1, Len(sMsg1) - 2)
'     bExitRoutine = False
' End Sub
' Sub Allergy_SelectDrug()
'     bExitRoutine = True
'     If itdbgrid2_image = cGrID_Image_Allergy_Drug Then
'         If RecordsExist(Data1) And Text3(1) <> "" Then
'           If InStr(LCase(Data1.Recordset!Description), LCase(Trim(Text3(1)))) Then
'              Text3(1) = Data1.Recordset!Description
'              gtNew_allergy(0).Product = Data1.Recordset!Description
'              gtNew_allergy(0).Prodcode = Data1.Recordset!Prodcode
'              Allergy_getlist_Generic_classes
'              Picture2.Visible = False
'         End If
'         End If
'      End If
'     bExitRoutine = False
' End Sub
' Sub Allergy_SelectReaction()
'      sMsg = Text3(4).Text
'      General_GetTerm sMsg, cGrID_image_Allergy_Reaction, gtNew_allergy(0).Ozcode
'      bExitRoutine = True
'      Text3(4) = sMsg
'      bExitRoutine = False
' End Sub
' Sub Allergy_Accept()
'     Dim ix As Integer
'     Dim iY As Integer
'     Dim iZ As Integer
'     Dim btReactionType As Byte 'mrDrug_Allergy, mrDrugClass_Sensitivity
'     Dim iAllergic As Integer
'     '-----------------------------------
'     'Ensure a minimum of data is present
'     '-----------------------------------
'     For iZ = 0 To 3
'         If Trim(Text3(iZ)) = "" Then
'            Text3(iZ).SetFocus
'   Exit Sub
'         End If
'     Next
'     '--------------------------------------------------
'     'Put stuff into the editing array not already there
'     '--------------------------------------------------
'     For iZ = 0 To UBound(gtNew_allergy())
'         If Trim(Text3(4)) = "" Then
'            gtNew_allergy(iZ).Reaction = "not stated"
'         Else
'             gtNew_allergy(iZ).Reaction = Trim(Text3(4))
'         End If
'         gtNew_allergy(iZ).Date = Trim(Text3(0))
'     Next
'     '-----------------------------------------------------------------
'     'puts allergies into gtpatient(1).allergy() list. There may be one
'     'or more member of the gtnew_allergy() array if more than one
'     'generic component
'     '-----------------------------------------------------------------
'     If iEditing = False Then
'         For iZ = 0 To UBound(gtNew_allergy())
'             '--------------------------------
'             'Increment patients allergy array
'             '--------------------------------
'             On Error Resume Next
'             ix = -1
'             ix = UBound(gtPatient(1).Allergies())
'             ix = ix + 1
'             ReDim Preserve gtPatient(1).Allergies(ix)
'             gtPatient(1).Allergies(ix) = gtNew_allergy(iZ)
'         Next
'    Else
'         ix = List1(0).ItemData(List1(0).ListIndex)
'         gtPatient(1).Allergies(ix) = gtNew_allergy(0)
'    End If
'    gtPatient(1).Allergies(ix).DataChanged = True
'    gtPatient(1).Allergy_DataChanged = True
'    gtPatient(1).DataChanged = True
'    '--------------------------------------------------------------------------
'    'Check there are no drugs prescribed this session to which patient allergic
'    'If there are prompt user, and flag deleted from list to print
'    '--------------------------------------------------------------------------
'    On Error Resume Next
'    iY = -1
'    iY = UBound(gtPatient(1).Scripts())
'    If iY <> -1 Then
'       On Error GoTo 0 'temp
'       For iZ = 0 To iY
'          '--------------------------------------------------------------------------
'          'Loop through all drugs not marked as deleted already prescribed or printed
'          'and warn user if conflict with allergy just being entered
'          '--------------------------------------------------------------------------
'           If gtPatient(1).Scripts(iZ).Deleted = False Then
'               Allergy_Check iAllergic, gtPatient(1).Scripts(iZ).ClassCodes(), False, btReactionType
'               If iAllergic Then
'                sMsg = "The patient has been noted to be "
'                 If btReactionType = mrDrug_Allergy Then
'                    sMsg = sMsg & "allergic to "
'                 Else
'                    sMsg = sMsg & "sensitive to "
'                 End If
'                 sMsg = sMsg & gtPatient(1).Allergies(ix).Product & "." & vbLf & vbLf & "You have already "
'                 If gtPatient(1).Scripts(iZ).Printed = True Then
'                    sMsg = sMsg & "printed a script for " & gtPatient(1).Scripts(iZ).Brand
'                 Else
'                    sMsg = sMsg & "prescribed " & gtPatient(1).Scripts(iZ).Brand & " (not yet printed)"
'                 End If
'                 sMsg = sMsg & " this consultion containing generic drug components to which the patient has "
'                 If btReactionType = mrDrug_Allergy Then
'                    sMsg = sMsg & "an allergy - " & gtPatient(1).Allergies(ix).Reaction & "." & vbLf & vbLf
'                    If gtPatient(1).Scripts(iZ).Printed = False Then
'                       gtPatient(1).Scripts(iZ).Deleted = True
'                       sMsg = sMsg & "It will be deleted from the list of unprinted drugs."
'                    End If
'                 Else
'                    sMsg = sMsg & "a sensitivity - " & gtPatient(1).Allergies(ix).Reaction & "."
'                 End If
'                 lresponse = MsgBox(sMsg, vbOKOnly + vbCritical, "CAUTION:")
'             End If
'            End If
'         Next
'    End If
'    '---------------------------------------
'    'Display the list and clear editing area
'    '---------------------------------------
'    Allergy_Display
' End Sub
' Sub Allergy_Edit()
'     Dim ix As Integer
'     bExitRoutine = True
'     If List1(0).ListIndex = -1 Then Exit Sub
'     '-----------------------------
'     'For this drug, show the brand
'     '-----------------------------
'     ix = List1(0).ItemData(List1(0).ListIndex)
'     Text3(0) = gtPatient(1).Allergies(ix).Date
'     Text3(1) = gtPatient(1).Allergies(ix).Product
'     Text3(2) = gtPatient(1).Allergies(ix).Generic
'     Text3(3) = gtPatient(1).Allergies(ix).Class_Description
'     Text3(4) = gtPatient(1).Allergies(ix).Reaction
'
'     If gtPatient(1).Allergies(ix).Type = mrDrug_Allergy Then
'        Option2(0).Value = True
'     Else
'        Option2(1).Value = True
'     End If
'     check1(0).Value = Abs(gtPatient(1).Allergies(ix).definite)
'     check1(1).Value = Abs(gtPatient(1).Allergies(ix).Generic_Specific_Reaction)
'     iEditing = True
'     ReDim gtNew_allergy(0)
'     gtNew_allergy(0) = gtPatient(1).Allergies(ix)
'     bExitRoutine = False
' End Sub
'
'
'
' Sub Allergy_save()
'    Dim dNumber As Double
'    If gtPatient(1).Allergy_DataChanged = False Then Exit Sub
'    Screen.MousePointer = vbHourglass
'    '----------------------------
'    'Saves the patients allergies
'    '----------------------------
'    Dim iExistingRecord As Integer
'    Dim icounter As Integer
'    Dim ix As Integer
'    Dim SProgressText As String
'    On Error Resume Next
'    ix = -1
'    ix = UBound(gtPatient(1).Allergies())
'    If ix = -1 Then Exit Sub
'    '---------------------------------
'    'Save consult if not already saved
'    '---------------------------------
'     If iConsultIDSaved = False Then
'         Save_ConsultID
'     End If
'     On Error GoTo ASError
'     Database_Lock
'     Set Db = ws.OpenDatabase(sMEDREC_MDB, False) 'open for read/write
'     '-----------------------------------
'     'for each class of drug in allergies
'     '-----------------------------------
'     For icounter = 0 To UBound(gtPatient(1).Allergies())
'       '------------------------------------------
'       'Only change record if the data was changed
'       '------------------------------------------
'       If gtPatient(1).Allergies(icounter).DataChanged _
'          And gtPatient(1).Allergies(icounter).Deleted = False Then
'         '--------------------------------------------------------------
'         'if editing an existing record, archive this record before edit
'         '--------------------------------------------------------------
'         If gtPatient(1).Allergies(icounter).Record_ID <> 0 Then
'             Set Q = Db.QueryDefs("MRQ_Allergies_Archive")
'             Q("Enter Allergy_ID") = gtPatient(1).Allergies(icounter).Record_ID
'             Q.Execute
'             '--------------------------------------------------
'             'Mark this archived record with consult archived at
'             '--------------------------------------------------
'             Set Q = Db.QueryDefs("MRQ_Allergies_Archive_Duringconsult")
'             Q("Enter Allergy_ID") = gtPatient(1).Allergies(icounter).Record_ID
'             Q("Enter Consult_ID") = gtconsult.Consult_ID
'             Q("Enter Archive_Reason_ID") = mrArchived_Changed
'             Q.Execute
'         End If
'         '---------------------------------------
'         'Now add a new record or edit the old one
'         '----------------------------------------
'         Set Rs = Db.OpenRecordset("Data_Allergies", dbOpenTable)
'         With Rs
'                If gtPatient(1).Allergies(icounter).Record_ID <> 0 Then
'                   iExistingRecord = True
'                   .Index = "PrimaryKey"
'                   .Seek "=", gtPatient(1).Allergies(icounter).Record_ID
'                   .Edit
'                   If gtPatient(1).Allergies(icounter).Consult_First_noted _
'                         <> gtconsult.Consult_ID Then
'                      dNumber = pnAllergy_Changed
'                   Else
'                     dNumber = pnAllergy
'                   End If
'                 Else
'                   .AddNew
'                   iExistingRecord = False
'                   dNumber = pnAllergy
'                   !Consult_First_noted = gtconsult.Consult_ID
'                   gtPatient(1).Allergies(icounter).Consult_First_noted = gtconsult.Consult_ID
'                 End If
'                 !Consult_ID = gtconsult.Consult_ID
'                 !ClaCode = gtPatient(1).Allergies(icounter).ClaCode
'                 !ClaDesc = gtPatient(1).Allergies(icounter).Class_Description
'                 !drug = gtPatient(1).Allergies(icounter).Product
'                 !Generic = gtPatient(1).Allergies(icounter).Generic
'                 !Reaction = gtPatient(1).Allergies(icounter).Reaction
'                 !Type = gtPatient(1).Allergies(icounter).Type
'                 !definate = gtPatient(1).Allergies(icounter).definite
'                 !Generic_Specific_Reaction = gtPatient(1).Allergies(icounter).Generic_Specific_Reaction
'                 .Update
'                 If iExistingRecord = False Then
'                    .Index = "Unique"
'                    .Seek "=", gtPatient(1).Allergies(icounter).ClaCode, _
'                               gtconsult.Consult_ID
'                    .Edit
'                     gtPatient(1).Allergies(icounter).Record_ID = !Allergy_ID
'                 End If
'                 .Close
'            End With
'             '---------------------------------------------------
'             'If this allergy item was created in current consult
'             'archive its existing progress note(s)
'             '---------------------------------------------------
'             If gtPatient(1).Allergies(icounter).Consult_ID = gtconsult.Consult_ID _
'                And iExistingRecord = True Then
'                 Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'                 Q("Enter Consult_ID") = gtPatient(1).Allergies(icounter).Consult_ID
'                 Q("Enter Table_ID") = mrTable_Allergy
'                 Q("Enter Record_ID") = gtPatient(1).Allergies(icounter).Record_ID
'                 Q.Execute
'             End If
'             gtPatient(1).Allergies(icounter).Consult_ID = gtconsult.Consult_ID
'             gtPatient(1).Allergies(icounter).Saved = mrSaveUncommitted
'             '------------------------------------------
'             'add the progress notes for this item
'             '------------------------------------------
'             If gtPatient(1).Allergies(icounter).definite = True Then
'                 SProgressText = "definite "
'             Else
'                SProgressText = "POSSIBLE "
'             End If
'             If gtPatient(1).Allergies(icounter).Type = mrDrug_Allergy Then
'                SProgressText = SProgressText & "ALLERGY:"
'             Else
'                SProgressText = SProgressText & "SENSITIVITY:"
'             End If
'             If gtPatient(1).Allergies(icounter).Generic_Specific_Reaction = True Then
'                SProgressText = SProgressText & "To the generic component " & gtPatient(1).Allergies(icounter).Generic _
'                 & ", (this has not been recorded as a drug class reaction)"
'             Else
'                 SProgressText = SProgressText & "To the drug class " & gtPatient(1).Allergies(icounter).Class_Description _
'                    & " e.g. " & gtPatient(1).Allergies(icounter).Product
'             End If
'             If gtPatient(1).Allergies(icounter).Reaction <> "not stated" Then
'                SProgressText = SProgressText & ", which caused the reaction '" _
'                   & gtPatient(1).Allergies(icounter).Reaction & "'."
'             Else
'                SProgressText = SProgressText & ", no reaction details were recorded."
'             End If
'             Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'                ProgressNotes_Save pnGeneralHistory, dNumber, _
'                       0, "", SProgressText, True, _
'                       mrTable_Allergy, _
'                       gtPatient(1).Allergies(icounter).Record_ID, _
'                       gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(dNumber).Notes_order, _
'                       Rs
'                  Rs.Close
'        End If ' end if data was not changed for this allergy
'     Next icounter
'     Db.Close
'     Database_Unlock
'     Exit Sub
' ASError:
'      On Error Resume Next
'      Rs.Close
'      Db.Close
'      Database_Unlock
'     '---------------------------------------------
'     'Transaction not committedflag as uncommitted
'     '---------------------------------------------
'     Allergy_SetCommitFlags False
'     'Screen.MousePointer = vbArrow
' End Sub
' Sub Allergy_GetForPatient()
'
'     Dim icounter As Integer
'     Dim sAllergies As String 'to hold list of allergies
'     Screen.MousePointer = vbHourglass
'     '-----------------------------------
'     'open database and get all allergies
'     '-----------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Allergies_GetForPatient")
'     Q("Enter Patient ID") = gtPatient(1).Patient_ID
'     Set Rs = Q.OpenRecordset()
'     Erase gtPatient(1).Allergies()
'     icounter = 0
'     With Rs
'          Do Until .EOF
'             ReDim Preserve gtPatient(1).Allergies(icounter)
'             '---------------------------------------
'             'Add only allergies to the allergy label
'             '---------------------------------------
'             If !Type <> mrDrugClass_Sensitivity Then
'                 If !Generic_Specific_Reaction = False Then
'                   If sAllergies = "" Then
'                      sAllergies = !ClaDesc & ", "
'                   Else
'                     sAllergies = sAllergies & !ClaDesc & ", "
'                   End If
'                 End If
'             End If
'             gtPatient(1).Allergies(icounter).Consult_ID = !Consult_ID
'             gtPatient(1).Allergies(icounter).Consult_First_noted = !Consult_First_noted
'             gtPatient(1).Allergies(icounter).Date = Format(!Consult_Date, "dd/mm/yyyy")
'             gtPatient(1).Allergies(icounter).Reaction = !Reaction
'             gtPatient(1).Allergies(icounter).Type = !Type
'             gtPatient(1).Allergies(icounter).Product = !drug
'             gtPatient(1).Allergies(icounter).ClaCode = !ClaCode
'             gtPatient(1).Allergies(icounter).Class_Description = !ClaDesc
'             gtPatient(1).Allergies(icounter).DataChanged = False
'             gtPatient(1).Allergies(icounter).Deleted = False
'             gtPatient(1).Allergies(icounter).Generic = !Generic
'             gtPatient(1).Allergies(icounter).Record_ID = !Allergy_ID
'             gtPatient(1).Allergies(icounter).definite = !definate
'             gtPatient(1).Allergies(icounter).Generic_Specific_Reaction = !Generic_Specific_Reaction
'             .MoveNext
'             icounter = icounter + 1
'         Loop
'         .Close
'     End With
'     Db.Close
'     Screen.MousePointer = vbArrow
'     If sAllergies <> "" Then
'         sAllergies = left(sAllergies, Len(sAllergies) - 2)
'     End If
'     SSActiveToolBars1.Tools("ID_Allergies").Edit.Locked = True
'     SSActiveToolBars1.Tools("ID_Allergies").Edit.Text = sAllergies
'
' End Sub
'
' Sub Allergy_Delete()
'     Dim sMsg As String
'     Dim sAuditText As String
'     Dim lAudit_ID As Long
'     Dim iCancel As Integer
'     Dim SProgressText As String
'     Dim ix As Integer
'     If iConsultIDSaved = False Then
'        Save_ConsultID
'     End If
'     '-------------------------------------------------------------
'     'Deletes record or (marks as deleted if not saved) the allergy
'     'highlighted. If saved the allergy has a record_iD then
'     '1:Archive record to Arch_data_allergies table
'     '2:insert consult_ID and audit text
'     '3:Delete the original record from data_allergies
'     'If the allergy has not yet been saved, simply mark deleted from
'     'the allergy array
'     '-------------------------------------------------------------
'     ix = List1(0).ItemData(List1(0).ListIndex)
'     '----------------------------------------------------------------
'     'Mark the highlighted row as deleted if not yet saved to database
'     'so when save any others at future point it won't be saved
'     '----------------------------------------------------------------
'     If gtPatient(1).Allergies(ix).Record_ID = 0 Then
'          gtPatient(1).Allergies(ix).Deleted = True
'     Else
'         '-------------------------------------------------------------------
'         'If the allergy being deleted was put in during current consultation
'         'then remove it without prompting for reason for deletion
'         '-------------------------------------------------------------------
'         If gtPatient(1).Allergies(ix).Consult_First_noted = gtconsult.Consult_ID Then
'            lAudit_ID = mrReversalOfEntry
'         Else
'             '---------------------------------------------------------------------
'             'If existing record get the reason for deletion to save as audit trail
'             '---------------------------------------------------------------------
'             sMsg = "Before deleting the record of allergy/sensitivity for the drug class " _
'                & gtPatient(1).Allergies(ix).Class_Description _
'                & " from the patients record, you must enter " _
'                & "a reason for doing this."
'                AuditTrail_Delete_GetReason sAuditText, lAudit_ID, sMsg, iCancel, "Allergies"
'             If iCancel Then
'       Exit Sub
'             End If
'          End If
'      End If
'     '------------------------------------------------------
'     'User wants to continue and do the deletion
'     'Save any members of the list not yet saved to database
'     'whether or not the record being deleted yet saved (there
'     'may be additional unsaved ones on the list
'     '------------------------------------------------------
'     On Error GoTo ADError
'     Screen.MousePointer = vbHourglass
'     Database_Lock
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Allergy_save
'     '---------------------------------------------------------
'     'Now do the work on previously saved allergy being deleted
'     '---------------------------------------------------------
'     If gtPatient(1).Allergies(ix).Record_ID <> 0 Then
'         Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'         '--------------------------------------------------------
'         'If the reason for archiving dosn't exist, first add this
'         '--------------------------------------------------------
'         If lAudit_ID = 0 Then
'             AuditTrail_SaveNewReason sAuditText, lAudit_ID
'         End If
'         '--------------------------------------
'         'First archive the record to be deleted
'         '--------------------------------------
'         Set Q = Db.QueryDefs("MRQ_Allergies_Archive")
'         Q("Enter Allergy_ID") = gtPatient(1).Allergies(ix).Record_ID
'         Q.Execute
'         '--------------------------------------------------
'         'Mark this archived record with consult archived at
'         '--------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_Allergies_Archive_Duringconsult")
'         Q("Enter Allergy_ID") = gtPatient(1).Allergies(ix).Record_ID
'         Q("Enter Consult_ID") = gtconsult.Consult_ID
'         Q("Enter Archive_Reason_ID") = lAudit_ID
'         Q.Execute
'         '----------------------------------------
'         'Mark this record as deleted in the table
'         '----------------------------------------
'         Set Q = Db.QueryDefs("MRQ_Allergies_Mark_Deleted")
'         Q("Enter Allergy_ID") = gtPatient(1).Allergies(ix).Record_ID
'         Q.Execute
'         SProgressText = "The record of "
'         If gtPatient(1).Allergies(ix).Type = mrDrug_Allergy Then
'            SProgressText = SProgressText & "allergy "
'         Else
'            SProgressText = SProgressText & "sensitivity "
'         End If
'         SProgressText = SProgressText & "to the drug class " _
'            & gtPatient(1).Allergies(ix).Class_Description _
'            & " has been deleted because '" & sAuditText & "'."
'         '----------------------------------------------------------------
'         'If entry is being reversed during same consultation, delete the
'         'associated progress note text entry and mark 'reversal of entry'
'         '----------------------------------------------------------------
'         If lAudit_ID = mrReversalOfEntry Then
'             Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'             Q("Enter Consult_ID") = gtPatient(1).Allergies(ix).Consult_ID
'             Q("Enter Table_ID") = mrTable_Allergy
'             Q("Enter Record_ID") = gtPatient(1).Allergies(ix).Record_ID
'             Q.Execute
'         Else
'             Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'             ProgressNotes_Save pnGeneralHistory, pnAllergy_Deleted, _
'                0, "", SProgressText, True, _
'                mrTable_Allergy, _
'                gtPatient(1).Allergies(ix).Record_ID, _
'                gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(pnAllergy_Deleted).Notes_order, _
'                Rs
'             Rs.Close
'             Db.Close
'        End If
'     End If
'     ws.CommitTrans
'     Database_Unlock
'     Allergy_SetCommitFlags True
'     gtPatient(1).Allergy_DataChanged = False
'     '-----------------------
'     'refresh the information
'     '-----------------------
'     Allergy_GetForPatient
'     Allergy_Display
'     Command3_Click (1) 'clear editing area
'     Screen.MousePointer = vbArrow
'     Exit Sub
' ADError:
'     On Error Resume Next
'     ws.Rollback
'     Db.Close
'     ws.Close
'     Database_Unlock
'     Allergy_SetCommitFlags False
'     Screen.MousePointer = vbArrow
'     gtPatient(1).Allergies(ix).Deleted = False
'     Exit Sub
' End Sub
' Sub allergy_ViewClassNotes()
'
'     On Error Resume Next
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Q = Db.QueryDefs("MRQ_Allergies_GetClassText")
'     Q("Enter Clacode") = gtPatient(1).Allergies(List1(0).ItemData(List1(0).ListIndex)).ClaCode
'     Set Rs = Q.OpenRecordset(dbOpenDynaset)
'     With Rs
'         If .EOF + .BOF <> -2 Then
'            RichTextBox1(0).Text = "" & !clatext
'            sspanel2(2).Caption = "Class notes for " & !ClaDesc
'         End If
'         .Close
'     End With
'     Db.Close
'     Screen.MousePointer = vbArrow
' End Sub
'
' Sub Allergy_Check(iAbort As Integer, ClassCodes() As Integer, _
'         bShowMessage As Boolean, btReactionType As Byte)
'     '------------------------------------------------------
'     'if iAbort = true abort action
'     'if Bmessage = true display caution message
'     'btReaction_Type = mrDrug_Allergy or mrDrugClass_Sensitivity
'     'Routine called from  Script_Brand_SelectBrand,
'     'Script_Brand_SelectBrand, Allergy_Accept
'     '------------------------------------------------------
'     On Error GoTo ExitRoutine
'     Dim ix As Integer
'     Dim iY As Integer
'     Dim sMsg As String
'     Dim sExtent As String
'     iAbort = False
'     '-----------------------------------------------------------
'     'Check each allergy class code against each drug class code
'     '-----------------------------------------------------------
'    For ix = 0 To UBound(gtPatient(1).Allergies())
'        '-------------------------------------------------------------
'        'Check each patient allergy clacode against each drug clacode
'        'If the reaction is an allergy set iAbort to true and show
'        'message if calling routine wants it
'        '-------------------------------------------------------------
'         For iY = 0 To UBound(ClassCodes())
'             '-----------------------------------------------------------
'             'If the drug being prescribed class code is one of the class
'             'codes the patient is allergic to
'             '-----------------------------------------------------------
'             If gtPatient(1).Allergies(ix).ClaCode = ClassCodes(iY) Then
'                btReactionType = gtPatient(1).Allergies(ix).Type
'                If btReactionType = mrDrug_Allergy Then
'                   If gtPatient(1).Allergies(ix).Generic_Specific_Reaction = True Then
'                      If gtPatient(1).Allergies(ix).Generic <> gtNew_ScriptItem(0).GenericString Then
'                         GoTo GenericAllergy
'                      Else
'                          GoTo Allergic
'                      End If
'                     iAbort = True
'                   End If
'                Else
'                    GoTo Allergic
'                    iAbort = True
'                End If
'                If bShowMessage Then
'                     GoTo Allergic
'                Else
'                    iAbort = True
'  Exit Sub
'                End If
'             End If
'         Next iY
'     Next ix
'     Exit Sub
' GenericAllergy:
'    sMsg = "The patient is recorded as having an allergy to the generic drug " _
'             & gtPatient(1).Allergies(ix).Generic & " which belongs to, " _
'             & "the same drug class as " _
'             & gtNew_ScriptItem(0).Brand _
'             & " that you are trying to prescribe." & vbLf & vbLf _
'             & "This is not recorded as class specific." & vbLf & vbLf _
'             & "Do you want to proceed?"
'             lresponse = MsgBox(sMsg, vbYesNo, "POSSIBLE DRUG ALLERGY")
'             If lresponse = vbYes Then
'                iAbort = False
'             Else
'                iAbort = True
'             End If
'     Exit Sub
' Allergic:
'    '--------------------------------------
'    'Patient is allergic, look at the level
'    '--------------------------------------
'    Select Case btReactionType
'
'    Case mrDrug_Allergy
'         '---------------------------------
'         'is it a generic specific  allergy
'         '---------------------------------
'         If gtPatient(1).Allergies(ix).Generic_Specific_Reaction = True Then
'            sMsg = "The patient is recorded as having an allergy to " _
'             & "the generic drug " _
'             & gtPatient(1).Allergies(ix).Generic & "," _
'             & " which caused the reaction '" & gtPatient(1).Allergies(ix).Reaction & "'." & vbLf & vbLf _
'             & "As this has been recorded as generic specific, there may or may not be allergies " _
'             & "to other members of the class:" _
'             & gtPatient(1).Allergies(ix).Class_Description & "." & vbLf & vbLf
'            sTitle = "GENERIC COMPONENT ALLERGY"
'            lresponse = MsgBox(sMsg, vbOKOnly + vbCritical, "CAUTION:" & sTitle)
'            iAbort = True
'         Else
'             sExtent = "allergic"
'             sMsg = "The patient is " & sExtent
'             sMsg = sMsg & " to the drug class:" & vbLf & vbLf
'             sMsg = sMsg & gtPatient(1).Allergies(ix).Class_Description & vbLf & vbLf
'             sMsg = sMsg & "The reaction which occurred was "
'             sMsg = sMsg & gtPatient(1).Allergies(ix).Reaction & "." & vbLf & vbLf
'             sTitle = "DRUG CLASS ALLERGY"
'             lresponse = MsgBox(sMsg, vbOKOnly + vbCritical, "CAUTION:" & sTitle)
'             iAbort = True
'         End If
'    Case mrDrugClass_Sensitivity
'         sExtent = "sensitive"
'         sTitle = "SENSITIVITY"
'         sMsg = "The patient has been noted to have '" _
'          & gtPatient(1).Allergies(ix).Reaction & "' when taking " _
'          & gtPatient(1).Allergies(ix).Generic & "." & vbLf & vbLf
'         sMsg = sMsg & "Do you still wish to prescribe " & gtNew_ScriptItem(0).Brand & "?"
'         lresponse = MsgBox(sMsg, vbYesNo + vbCritical, "CAUTION:" & sTitle)
'         If lresponse = vbNo Then
'            iAbort = True
'         End If
'    End Select
'    Exit Sub
' ExitRoutine:
'    Exit Sub
' End Sub
'
'
' Sub Sensitivity_Check(iAbort As Integer)
'     On Error GoTo ExitRoutine
'     Dim ix As Integer
'     Dim iY As Integer
'     Dim sMsg As String
'     Dim sExtent As String
'     iAbort = False
'     '-----------------------------------------------------------
'     'Check each allergy class code against each drug class code
'     '-----------------------------------------------------------
'     For ix = 0 To UBound(gtPatient(1).Allergies())
'        '-------------------------------------------------------------
'        'Check each patient allergy clacode against each drug clacode
'        '-------------------------------------------------------------
'         For iY = 0 To UBound(gtNew_ScriptItem(0).ClassCodes())
'             If gtPatient(1).Allergies(ix).ClaCode = gtNew_ScriptItem(0).ClassCodes(iY) _
'                And gtPatient(1).Allergies(ix).Type = mrDrugClass_Sensitivity Then
'                GoTo Sensitive
'             End If
'         Next iY
'     Next ix
'     Exit Sub
'
' Sensitive:
'    '--------------------
'    'Patient is Sensitive
'    '--------------------
'    '  Select Case gtPatient(1).Allergies(ix).Type
'  '  Case mrDrug_Allergy
'   '      sExtent = "allergic"
'   '      sTitle = "ALLERGY"
'   '      lResponse = MsgBox(sMsg, vbOKOnly + vbCritical, "CAUTION:" & sTitle)
'    '     iAbort = True
'   ' Case mrDrugClass_Sensitivity
'         sExtent = "sensitive"
'         sTitle = "SENSITIVITY"
'         sMsg = "The patient is " & sExtent & " to the drug class:" & vbLf & vbLf
'         sMsg = sMsg & gtPatient(1).Allergies(ix).Class_Description & vbLf & vbLf
'         sMsg = sMsg & "The reaction which occurred was "
'         sMsg = sMsg & gtPatient(1).Allergies(ix).Reaction & "." & vbLf & vbLf
'         sMsg = sMsg & "Do you still wish to prescribe " & gtNew_ScriptItem(0).Brand & "?"
'         lresponse = MsgBox(sMsg, vbYesNo + vbCritical, "CAUTION:" & sTitle)
'         If lresponse = vbNo Then
'            iAbort = True
'         End If
'   ' End Select
'
'    Exit Sub
' ExitRoutine:
'    Exit Sub
' End Sub
'
'
'
'
'
' Sub Script_Interactions_1_MakeArray()
'     On Error GoTo ExitRoutine
'    'On Error GoTo 0
'    Dim sMsg As String
'    Dim ix As Integer
'    Dim iY As Integer
'    Dim sGenerics() As String
'    '-----------------------------------------------------------------
'    'This puts drugs from all sources into a single array for checking
'    'The array will look like this:
'    '-----------------------------------------------------------------
'    ' gtalldrugs(0) = alcohol,9,liquid,ethanol,"A"
'    ' gtalldrugs(1) = amoxil,164,tablets, amoxycillin,"P" pres medict
'    ' gtalldrugs(2) = tenormin,nnn,tablets,atenalol, "P"  etc
'    '-----------------------------------------------------------------
'    '1:Always add alcohol
'    '-----------------------------------------------------------------
'     ReDim gtAllDrugs(0)
'     gtAllDrugs(0).Brand = "Alcohol"
'     gtAllDrugs(0).ClaCode = 9
'     gtAllDrugs(0).Form = "liquid"
'     gtAllDrugs(0).Generic = "ethanol"
'     gtAllDrugs(0).Source = "A"
'     '-----------------------------------------------------
'     '2:add active present medications, ensure list showing
'     '-----------------------------------------------------
'     If itdbgrid1_image <> cGrID_Image_Medications Then
'        Script_RefreshMedications
'        DoEvents
'     End If
'     ix = 1
'     If RecordsExist(Data2) Then
'       With Data2.Recordset
'         .MoveFirst
'         Do Until .EOF
'            '-----------------------------------------------
'            'split up multiple generics into sgenerics array
'            '-----------------------------------------------
'            sMsg = !Generic
'            Split sMsg, ","
'            ReDim sGenerics(UBound(sArray()))
'            For iY = 0 To UBound(sArray())
'                sGenerics(iY) = sArray(iY)
'            Next
'            sMsg = !ClassCodes
'            Split sMsg, ","
'            '--------------------------------------------------------
'            'create single array member for each different class code
'            '--------------------------------------------------------
'            For iY = 0 To UBound(sArray())
'                 ReDim Preserve gtAllDrugs(ix)
'                 gtAllDrugs(ix).Brand = !drug
'                 gtAllDrugs(ix).Form = !Formulation
'                 gtAllDrugs(ix).Source = "P"
'                 gtAllDrugs(ix).Generic = sGenerics(iY)
'                 gtAllDrugs(ix).ClaCode = sArray(iY)
'                 ix = ix + 1
'            Next
'            .MoveNext
'        Loop
'       End With
'     End If
'     '--------------------------------------------------------------------
'     'Next add all the drugs prescribed, but not saved
'     'if no drugs the error trip will simply push us out of the subroutine
'     'iX at this point will at least be 1 (0 taken by alcohol)
'     '--------------------------------------------------------------------
'
'     For icounter = 0 To UBound(gtPatient(1).Scripts())
'            '-----------------------------------------------
'            'split up multiple generics into sgenerics array
'            '-----------------------------------------------
'           If gtPatient(1).Scripts(icounter).Deleted <> True Then
'            sMsg = gtPatient(1).Scripts(icounter).GenericString
'            Split sMsg, ","
'            ReDim Preserve sGenerics(UBound(sArray()))
'            For iY = 0 To UBound(sArray())
'                sGenerics(iY) = sArray(iY)
'            Next
'            sMsg = gtPatient(1).Scripts(icounter).ClassCodeString
'            Split sMsg, ","
'            '--------------------------------------------------------
'            'create single array member for each different class code
'            '--------------------------------------------------------
'            For iY = 0 To UBound(sArray())
'                 ReDim Preserve gtAllDrugs(ix)
'                 gtAllDrugs(ix).Brand = gtPatient(1).Scripts(icounter).Brand
'                 gtAllDrugs(ix).Form = gtPatient(1).Scripts(icounter).Formulation
'                 gtAllDrugs(ix).Source = "S"
'                 gtAllDrugs(ix).Generic = sGenerics(iY)
'                 gtAllDrugs(ix).ClaCode = sArray(iY)
'                 ix = ix + 1
'            Next
'         End If
'        Next
'
'
'
'
'     Exit Sub
' ExitRoutine:
'      Exit Sub
'      Printer.Font.Name = "Times New Roman"
'      Printer.Font.Size = 14
'     For icounter = 0 To UBound(gtAllDrugs())
'         Printer.Print gtAllDrugs(icounter).Brand; "  ";
'         Printer.Print gtAllDrugs(icounter).ClaCode; "  ";
'         Printer.Print gtAllDrugs(icounter).Form; "  ";
'         Printer.Print gtAllDrugs(icounter).Generic; "  ";
'         Printer.Print gtAllDrugs(icounter).Source
'     Next
'     Printer.EndDoc
'      Exit Sub
' End Sub
'
' Sub Script_Interactions_3_DisplayText()
'       If gtInteraction.Text = "" Then Exit Sub
'       iCentralDisplay = cCentralDisplay_Interactions
'       Design_CentralDisplayBasic
'       Make_RTB1_BIG 1
'       '------------------------------------------------------
'       'change heading on top of central area to indicate file
'       '------------------------------------------------------
'       With Label4
'         .Caption = "INTERACTIONS"
'         .Visible = True
'       End With
'       Label1.Visible = False 'second label on top panel
'       '---------------------------------
'       'Change other buttons and captions
'       '---------------------------------
'       With Command2(3)
'           .Caption = "Print"
'           .Visible = True
'       End With
'       With Command2(4)
'          .Caption = "&Close"
'          .Visible = True
'       End With
'       With Label5
'         .BackColor = vbLightGrey
'         .ForeColor = vbRed
'      End With
'      bExitRoutine = False
'      RichTextBox1(1).TextRTF = gtInteraction.Text
'      Picture5.Visible = True
' End Sub
'
'
' Sub Script_Interactions_2_FormatText()
'     '------------------------------------------------------------------
'     'Checks the class codes of the drug in the editing area ie the one
'     'being prescribed, against past and present medications which have
'     'been put into the gtalldrugs() array, via all the class codes
'     'If interactions are found then two text displays are formatted
'     '1:for summary display under the script area displaying the name of
'     '  of the interacting components and a recommendation of action kept
'     '  in gtInteraction.summary
'     '2:the full text which is kept for a full screen display so it can
'     '  be re-displayed during the life of the editing area drug in
'     '  gtInteraction.text
'     '------------------------------------------------------------------
'     Dim sMsg3 As String
'     Dim icharpos As Integer
'     Dim iNewDrug As Integer
'     Dim iExisting As Integer
'     Dim iZ As Integer
'     Dim icounter As Integer
'     Dim sMsg As String
'     Dim sMsg1 As String
'     Dim sMsg2 As String
'     Dim actionMessage As String
'     '-------------------------------------------------------------------
'     'Make string for sSql of class codes of past meds and meds on script
'     '-------------------------------------------------------------------
'     For icounter = 0 To UBound(gtAllDrugs())
'         sMsg = sMsg & "Ia.cla1code=" & gtAllDrugs(icounter).ClaCode & " OR "
'     Next
'     sMsg = "(" & left(sMsg, Len(sMsg) - 4) & "))"
'     '-------------------------------------------------------------------
'     'after this sMsg = eg
'     '(Ia.cla1code=9 OR Ia.cla1code=94 OR Ia.cla1code=95 OR
'     'Ia.cla1code=53 OR Ia.cla1code=125 OR Ia.cla1code=112))
'     'which represents 9 = alcohol plus 5 other generic components or the
'     'patients current drugs
'     'now add the class codes contained in brand in edit area
'     '-------------------------------------------------------------------
'     For icounter = 0 To UBound(gtScript_ItemCopy(0).ClassCodes())
'        sMsg1 = " ((ia.cla2code=" & gtScript_ItemCopy(0).ClassCodes(icounter) & ")"
'        sMsg2 = sMsg2 & sMsg1 & " AND " & sMsg & " OR "
'     Next
'     sMsg2 = left(sMsg2, Len(sMsg2) - 4)
'     '-------------------------------------------------------------------
'     'At this pointgtInteraction.text= eg
'     '((ia.cla2code=10) AND (Ia.cla1code=9 OR Ia.cla1code=94
'     'OR Ia.cla1code=95 OR Ia.cla1code=53 OR Ia.cla1code=125
'     'OR Ia.cla1code=112))
'     'Here drug in edit area is zyloprim which has clacode of 10
'     'now combine this with the sql to do all the work
'     '-------------------------------------------------------------------
'     sSql = "SELECT DISTINCTROW ia.cla1code, ia.cla2code, ia.iatcode, "
'     sSql = sSql & "iaaction.actcode, iaeffect.iaeffect, iaaction.iaaction, "
'     sSql = sSql & "iatext.iatext, ia.effcode "
'     sSql = sSql & "FROM (iatoact INNER JOIN iaaction ON "
'     sSql = sSql & "iatoact.actcode = iaaction.actcode) INNER JOIN "
'     sSql = sSql & "((ia INNER JOIN iaeffect ON ia.effcode = iaeffect.effcode) "
'     sSql = sSql & "INNER JOIN iatext ON ia.iatcode = iatext.iatcode) ON "
'     sSql = sSql & "(iatoact.cla2code = ia.cla2code) AND "
'     sSql = sSql & "(iatoact.cla1code = ia.cla1code)"
'     sSql = sSql & " WHERE " & sMsg2 & " ORDER BY ia.cla2code, ia.cla1code"
'     '--------------------------------------------------------------------
'     'The sql now reads "SELECT DISTINCT ROW  .... get all information...
'     'WHERE ((ia.cla2code=10) AND (Ia.cla1code=9 OR Ia.cla1code=94
'     'OR Ia.cla1code=95 OR Ia.cla1code=53 OR Ia.cla1code=125
'     'OR Ia.cla1code=112))  ORDER BY ia.cla2code, ia.cla1code"
'     '--------------------------------------------------------------------
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Rs = Db.OpenRecordset(sSql)
'     '-------------------------------------
'     'If no interactions exist quit routine
'     '-------------------------------------
'     If Rs.EOF + Rs.BOF = -2 Then
'        Exit Sub
'     End If
'     '-------------------------------------------------------------------
'     'Set the font tables for the richtext we will be creating to display
'     'the full text of all interactions. This text is just the header to
'     'each lot of richtext
'     '-------------------------------------------------------------------
'     RTF_SetFontTables gtInteraction.Text
'     RTF_SetFontTables gtInteraction.Summary
'     '---------------------------------------------------------------
'     'We now have a recordset of the results
'     'For each class code for the drug in the editing area ie
'     'gtScript_ItemCopy(0).ClassCodes() check against each and every
'     'class code for all other active medications and any medications
'     ' on the script (gtalldrugs())
'     'clacode 2 = the drug in the edit area
'     'clacode 1 = the medication it will interact with
'     '---------------------------------------------------------------
'     For iNewDrug = 0 To UBound(gtScript_ItemCopy(0).ClassCodes())
'       For iExisting = 0 To UBound(gtAllDrugs())
'         '-----------------------------------------------------------
'         'move to the start of the dynaset which consists of pairs of
'         'class codes representing interactions. Loop through all of
'         'these checking if the current brand clacode has registered
'         'an interaction
'         '-----------------------------------------------------------
'         Rs.MoveFirst
'         iZ = 0
'         Do Until Rs.EOF
'             '----------------------------------------------------------
'             'recordset will look something like this eg headings
'             'clacode1|clacode2|iatcode|actcode|iaffect|iaction|iatext
'             ' 95     |10      | n     |n      | text  |text   |text
'             'Where 95 = current patient medication, 10 = new one in
'             'the edit area
'             'ie if clacode2 = new drug  and cla1 = old we have an
'             'interaction
'             '---------------------------------------------------------
'             If (Val(gtScript_ItemCopy(0).ClassCodes(iNewDrug)) = Rs!Cla2code) _
'                 And (Val(gtAllDrugs(iExisting).ClaCode) = Rs!Cla1code) Then
'             iZ = iZ + 1
'             '---------------------------------------------------
'             'Next put up the drugs involved in the interaction
'             'Drug    eg  "Alcohol(Ethanol) + Tagamet (cimetadine)
'             '----------------------------------------------------
'                If iZ = 1 Then
'                     gtInteraction.Summary = gtInteraction.Summary _
'                      & "\f16\fs14\b\ql\cf" & Format(rtcDarkBlue) _
'                      & gtAllDrugs(iExisting).Brand & ":\b0 " _
'                      & gtScript_ItemCopy(0).Generic_components(iNewDrug) & ": " '\par"
'                     '------------------------------------
'                     'Msg2 is use for the complete display
'                     '------------------------------------
'                    gtInteraction.Text = gtInteraction.Text _
'                      & "\f1\fs16\b\qc\cf" & Format(rtcDarkBlue) & " " _
'                      & gtScript_ItemCopy(0).Generic_components(iNewDrug) _
'                      & " and " & gtAllDrugs(iExisting).Generic _
'                      & "\par \f16\fs14\b0\cf" & Format(rtcTurquoise) & "(" _
'                      & gtScript_ItemCopy(0).Brand & " and " _
'                      & gtAllDrugs(iExisting).Brand & ")\par" _
'                      & "\f1\fs16\b\ql\cf" & Format(rtcDarkRed)
'
'                     If Not IsNull(Rs!iaeffect) Then
'                        gtInteraction.Text = gtInteraction.Text _
'                        & "Effect" & "\par" _
'                        & "\b0\cf" & Format(rtcBlack)
'                         '--------------------------------------------------------
'                         'A-R and V, adjust sentance with which drug effects which
'                         '--------------------------------------------------------
'                         If Asc(Rs!effcode) > (Asc("A") - 1) And Asc(Rs!effcode) < (Asc("R") + 1) Or Asc(Rs!effcode) = Asc("V") Then
'                           gtInteraction.Text = gtInteraction.Text & " " & gtAllDrugs(iExisting).Generic & " " & LCase(Rs!iaeffect) & " " & gtScript_ItemCopy(0).Generic_components(iNewDrug) & "\par"
'                         Else
'                             sMsg = gtAllDrugs(iExisting).Generic & " " & Rs!iaeffect & " " & gtScript_ItemCopy(0).Generic_components(iNewDrug) 'gtScript_ItemCopy(0).GenericString
'
'                             '---------------------------------------------------
'                             'Check if the words Drug 1 occur, if so, replace them
'                             'Drug1 = the patients past medication
'                             '---------------------------------------------------
'                             icharpos = InStr(sMsg, "Drug 1")
'                             If icharpos Then
'                                 sMsg = left(sMsg, icharpos - 1) & " " & gtAllDrugs(iExisting).Generic
'                                 sMsg = sMsg & " (" & gtAllDrugs(iExisting).Brand & ")"
'                             End If
'                             '---------------------------------------------------
'                             'Check if the words Drug 2 occur, if so, replace them
'                             'Drug 2 = the medication currently in edit area
'                             '---------------------------------------------------
'                             icharpos = InStr(sMsg, "Drug 2")
'                             If icharpos Then
'                                sMsg = left(sMsg, icharpos - 1) & " " & LCase(gtScript_ItemCopy(0).Generic_components(iNewDrug)) & " component of " & gtScript_ItemCopy(0).Brand
'                             End If
'                            gtInteraction.Text = gtInteraction.Text & sMsg & "\par"
'                         End If
'                     End If
'                     '---------------------------
'                     'Show reason for this effect
'                     '---------------------------
'                   gtInteraction.Text = gtInteraction.Text _
'                     & "\b\cf" + Format(rtcDarkRed) & "Reason\par" _
'                     & "\b0\cf" + Format(rtcBlack) & Rs!iatext & "\par " _
'                     & "\b\cf" + Format(rtcDarkRed) & "Recommendation\par" _
'                     & "\b0\cf" + Format(rtcBlack)
'                   actionMessage = ""
'                 End If
'                 '---------------------------------------------------------
'                 'At this point have constructed text of interactions under
'                 'edit area
'                 'Check if the words Drug 1 occur, if so, replace them
'                 'Drug1 = the patients past medication
'                 '---------------------------------------------------------
'                 sMsg3 = Rs!iaaction
'                 icharpos = InStr(sMsg3, "drug 1")
'                 If icharpos Then
'                     sMsg3 = left(sMsg3, icharpos - 1) & " "
'                     sMsg3 = sMsg3 & gtAllDrugs(iExisting).Generic
'                 End If
'                 '----------------------------------------------------
'                 'Check if the words Drug 2 occur, if so, replace them
'                 'Drug 2 = the medication currently in edit area
'                 '----------------------------------------------------
'                 icharpos = InStr(sMsg3, "drug 2")
'                 If icharpos Then
'                   sMsg3 = left(sMsg3, icharpos - 1) & " " & LCase(gtScript_ItemCopy(0).Generic_components(iNewDrug))
'                 End If
'                 '--------------------------------
'                 'Add the next action to take text
'                 '--------------------------------
'                 actionMessage = actionMessage & sMsg3 & ", "
'                 End If
'                 Rs.MoveNext
'                 Loop
'                 If iZ Then
'                     If Len(actionMessage) Then
'                        actionMessage = left(actionMessage, Len(actionMessage) - 2) & ".\par"
'                         Char = InStr(1, LCase(actionMessage), "never use this combination")
'                         If Char Then
'                             sTitle = "DANGER"
'                             sMsg = "The combination of " & gtScript_ItemCopy(0).Brand
'                             sMsg = sMsg & " and " & gtAllDrugs(iExisting).Brand
'                             sMsg = sMsg & " should not be used." & Chr$(10) & Chr$(10)
'                             sMsg = sMsg & "Please consult the details of this interaction by clicking on "
'                             sMsg = sMsg & "the interaction text at the bottom of the script."
'                             lresponse = MsgBox(sMsg, vbOKCancel + vbCritical, sTitle)
'                        End If
'                     End If
'                    gtInteraction.Text = gtInteraction.Text & actionMessage & "\par"
'                    gtInteraction.Summary = gtInteraction.Summary & "\cf" & Format(rtcBrightRed) & left(actionMessage, Len(actionMessage) - 4) & "\par"
'                 End If
'            Next iExisting
'    Next iNewDrug
'    gtInteraction.Summary = gtInteraction.Summary & "}"
'    '----------------------------------------------------------
'    'finally display the summary under the list of script items
'    '----------------------------------------------------------
'    gtInteraction.Text = gtInteraction.Text & "}"
'    bExitRoutine = True
'    With RichTextBox1(0)
'        .TextRTF = gtInteraction.Summary
'        .Visible = True
'    End With
'    bExitRoutine = False
' End Sub
'
'
'
' Sub Design_CentralDisplayBasic()
'       '----------------------------------------
'       'The container containing richtextbox1(1)
'       '----------------------------------------
'       With Picture5
'         .left = Picture3.left
'         .toP = Picture3.toP
'         .height = Picture3.height
'         .width = Picture3.width
'         .Visible = False 'the container
'         .ZOrder
'       End With
'       Text7.Visible = False 'text box to get tag changes
'       With Label4
'         .Visible = False
'         .Font.Name = "Verdana"
'         .Font.Size = 7
'         .Caption = ""
'       End With
'       Label1.Visible = False
' End Sub
' Sub Script_Interactions_4_Source_Pad()
'     '----------------------------------------------------------------
'     'displays interactions for any drug on script pad just prescribed
'     '----------------------------------------------------------------
'     Dim ix As Integer
'     ix = List1(0).ItemData(List1(0).ListIndex)
'     gtScript_ItemCopy(0) = gtPatient(1).Scripts(ix)
'     Script_Interactions_1_MakeArray
'     Script_Interactions_2_FormatText
'     Script_Interactions_3_DisplayText
' End Sub
'
' Sub Script_Interactions_5_Source_MedList()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  ix                                                                                    *
' '******************************************************************************************
'
'     If iCurrentSection <> cSection_Script Then
'        Script_Show_Section
'        DoEvents
'     End If
'     '-----------------------------------------------------
'     'displays interactions for any drug in medication list
'     '-----------------------------------------------------
'     Dim iY As Integer
'     Dim sMsg As String
'     gtScript_ItemCopy(0).Brand = Data2.Recordset!drug
'     sMsg = Data2.Recordset!ClassCodes
'     Split sMsg, ","
'     For iY = 0 To UBound(sArray())
'          ReDim Preserve gtScript_ItemCopy(0).ClassCodes(iY)
'          gtScript_ItemCopy(0).ClassCodes(iY) = sArray(iY)
'     Next
'     sMsg = Data2.Recordset!Generic
'     Split sMsg, ","
'     For iY = 0 To UBound(sArray())
'          ReDim Preserve gtScript_ItemCopy(0).Generic_components(iY)
'          gtScript_ItemCopy(0).Generic_components(iY) = sArray(iY)
'          gtScript_ItemCopy(0).GenericString = Data2.Recordset!Generic
'     Next
'     Script_Interactions_1_MakeArray
'     Script_Interactions_2_FormatText
'     Script_Interactions_3_DisplayText
' End Sub
'
'
'
'
' Sub Script_Brand_Class_Show()
'     '---------------------------------------------------------
'     'User has selected a drug by brand name, display the class
'     '---------------------------------------------------------
'     On Error GoTo SCSError
'     Dim icounter As Integer
'     bExitRoutine = True
'     Text3(0) = ""
'     For icounter = 0 To UBound(gtNew_ScriptItem(0).ClaDesc())
'         If InStr(Text3(0), gtNew_ScriptItem(0).ClaDesc(icounter)) = False Then
'            Text3(0) = Text3(0) & gtNew_ScriptItem(0).ClaDesc(icounter) & ","
'         End If
'     Next
'     Text3(0) = left(Text3(0), Len(Text3(0)) - 1)
'     Text3(0).Locked = True
'     bExitRoutine = False
' SCSError:
'    Exit Sub
' End Sub
'
' Sub Script_Item_MakeActiveOrInactive(istate As Boolean, bComment As Boolean)
'    Dim sMsg As String
'    Dim sAuditText As String
'    Dim lAudit_ID As Long
'    Dim iCancel As Integer
'    On Error GoTo 0
'    '---------------------------------------------------------------------
'    'If user wants to add comment to medication change of status, get this
'    '---------------------------------------------------------------------
'    If bComment Then
'         sMsg = "Please record the reason you are making this medication "
'         Select Case istate
'         Case mrMedication_Active
'             sMsg = sMsg & "active."
'         Case mrMedication_Inactive
'             sMsg = sMsg & "inactive."
'         End Select
'         AuditTrail_Delete_GetReason sAuditText, lAudit_ID, sMsg, iCancel, "Medications"
'         If iCancel Then
'       Exit Sub
'         End If
'    End If
'    Screen.MousePointer = vbHourglass
'     If iConsultIDSaved = False Then Save_ConsultID
'     On Error GoTo SISE
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'         '--------------------------------------------------------
'         'If the reason for archiving dosn't exist, first add this
'         '--------------------------------------------------------
'         If lAudit_ID = 0 And bComment = True Then
'              Set Db = ws.OpenDatabase(sMEDREC_MDB)
'              Set Q = Db.QueryDefs("MRQ_Lu_Archive_REasons_AddNew")
'              Q("Enter Reason") = sAuditText
'              Q.Execute
'              '--------------------------------------
'              'get the description ID for this reason
'              '--------------------------------------
'              Set Q = Db.QueryDefs("MRQ_Archive_GetReasonID")
'              Q("Enter Reason") = sAuditText
'              Set Rs = Q.OpenRecordset()
'              With Rs
'                  lAudit_ID = !Archive_Reason_iD
'                   .Close
'              End With
'         End If
'
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Q = Db.QueryDefs("MrQ_Scripts_Medication_ChangeStatus")
'         Q("Enter Rx_ID") = Data2.Recordset!Rx_ID
'         Q("Enter Instruction_ID") = Data2.Recordset!Instruction_ID
'         Q("Enter PrescribedFor_ID") = Data2.Recordset!PrescribedFor_ID
'         Q("Enter ScriptDate_iD") = Data2.Recordset!ScriptDate_Id
'         Q("Enter Print_Status") = Data2.Recordset!Print_Status
'         Q("Enter Authority_ID") = Data2.Recordset!Authority_ID
'         Q("Enter Repeats") = Data2.Recordset!Repeats
'         Q("Enter Quantity") = Data2.Recordset!Quantity
'         Q("Enter IQVA") = Data2.Recordset!Incr_Quantity_via_Auth
'         Q("Enter s8") = Data2.Recordset!s8
'         Q("Enter Status") = istate
'         Q.Execute
'         'If istate = False Then
'            sMsg = Data2.Recordset!drug & " " & TDBGrid1(0).Columns(1).Text _
'                 & " " & Data2.Recordset!Instruction _
'                 & " for " & "" & Data2.Recordset!Prescribed_For
'                 If bComment Then
'                    sMsg = sMsg & " notes: " & sAuditText
'                 End If
'            Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'                 ProgressNotes_Save pnGeneralHistory, pnScript_MedicationCeased, _
'                         0, "", sMsg, True, _
'                         mrTable_Scripts, _
'                         Data2.Recordset!ScriptDate_Id, _
'                        gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(pnScript_MedicationCeased).Notes_order, _
'                        Rs
'            Rs.Close
'        ' End If
'         Db.Close
'     ws.CommitTrans
'     ws.Close
'
'     Screen.MousePointer = vbArrow
'     On Error GoTo 0
'     Exit Sub
' SISE:
'     On Error Resume Next
'     Rs.Close: Db.Close: ws.Close: Screen.MousePointer = vbArrow
'     On Error GoTo 0
' End Sub
' Sub Design_Panel_Referrals()
'         '-----------------------------------------------------------
'         'Screen design for referrals to hospitals, other doctors etc
'         '-----------------------------------------------------------
'         Design_Panel_Basic
'         Init1.FileName = sMain_Dir & "\Medrec.ini"
'         Init1.Application = "Referrals Fonts " & gtDoctor.Doctor_ID
'         bExitRoutine = True
'         '------------
'         'The headings
'         '------------
'         With lblMasterHeading
'              .Caption = "REFERRALS"
'              .Visible = True
'         End With
'             Label2(5).Caption = "Name"
'             Label2(6).Caption = "Organisation"
'             Label2(7).Caption = "Street1"
'             Label2(8).Caption = "Street2"
'             Label2(9).Caption = "Street3"
'             With Label2(10)
'                 .Caption = "Suburb"
'                 .Visible = True
'             End With
'             With Label2(11)
'                 .Caption = "For"
'                 .Visible = True
'             End With
'             With Label2(12)
'               .Caption = "Include"
'               .Visible = True
'             End With
'             Picture1(3).toP = Picture1(3).toP - Picture1(3).height - shText3Spacer.height
'             Picture1(4).toP = Picture1(3).toP
'               With Text5
'                 .toP = Picture1(4).toP + 12
'                 .height = Picture1(4).height - 24
'                 .width = Picture1(4).width - Command1(3).width - 24
'                 .left = Picture1(4).left + 12
'                 .BackColor = vbWhite
'                 .ForeColor = vbAqua
'                 .Visible = True
'                 .Text = ""
'                 .ZOrder
'               End With
'               With Label2(23)
'                 .Caption = "Pers Category"
'                 .ForeColor = vbAqua
'                 .left = 0
'                 .width = Picture1(4).width
'             End With
'
'             '-------------------------------------------------
'             'Rearrange the text boxes for surname, name, title
'             '-------------------------------------------------
'              With Text3(0)  'the person's full name
'                  .width = Picture1(1).width * 0.5
'                  .MaxLength = 50
'             End With
'             With check1(6)
'                 .Caption = "Use Firstname"
'                 .left = Text3(0).left + Text3(0).width + 50
'                 .toP = Text3(0).toP
'                 .height = Text3(0).height
'                 .BackColor = vbWhite
'                 .ForeColor = vbDarkBlue
'                 .Visible = True
'                 .Font.Bold = True
'                 .width = Picture1(1).width - Text3(0).width - ShSpacerEndGap.width - 50 - Text3(0).left
'             End With
'            With Text3(1) 'the organisation
'                  .left = 10
'                  .width = Text3(0).width
'                  .Visible = True
'                  .toP = Label2(6).toP
'             End With
'             lblMeasure.Caption = " Postcode  " 'widest wording
'             With check1(7)
'                 .Caption = "Head Office"
'                 .left = check1(6).left
'                 .toP = Text3(1).toP
'                 .height = Text3(0).height
'                 .BackColor = vbWhite
'                 .ForeColor = vbDarkBlue
'                 .Visible = True
'                 .Font.Bold = True
'                 .width = check1(6).width
'             End With
'
'             With Text3(2) 'street1
'                 .left = 10
'                 .MaxLength = 50
'                 .toP = Label2(7).toP
'                 .Visible = True
'                 .width = Text3(1).width
'             End With
'             With Label2(19)
'                 .Caption = " W Phone "
'                 .left = check1(6).left
'                 .toP = Text3(2).toP
'                 .BackColor = vbWhite
'                 .ForeColor = vbDarkBlue
'                 .Visible = True
'                 .width = lblMeasure.width
'             End With
'             With Text3(cReferrals_Phone)  'Organisation Phone or Person phone if organisation blank
'                 .toP = Text3(2).toP
'                 .Visible = True
'                 .Text = ""
'                 .left = Label2(19).left + Label2(19).width + 50
'                 .width = Picture1(1).width - Text3(0).width - Text3(0).left - Label2(19).width - (ShSpacerEndGap.width * 2) - 50
'                 .Locked = False
'             End With
'
'             With Text3(cReferrals_Street2) 'street2
'                  .left = 10
'                  .toP = Label2(8).toP
'                  .width = Text3(cReferrals_Street1).width
'                  .Visible = True
'             End With
'             With Label2(14)
'                 .Caption = " W Fax "
'                 .left = Label2(19).left
'                 .toP = Text3(cReferrals_Street2).toP
'                 .BackColor = vbWhite
'                 .ForeColor = vbDarkBlue
'                 .Visible = True
'                 .width = Label2(19).width
'             End With
'             With Text3(cReferrals_Fax)
'                 .width = Text3(cReferrals_Phone).width
'                 .toP = Text3(cReferrals_Street2).toP
'                 .Visible = True
'                 .Text = "Fax"
'                 .left = Text3(cReferrals_Phone).left
'                 .Locked = False
'             End With
'
'             With Text3(cReferrals_Street3)
'                  .left = 10
'                  .width = Text3(cReferrals_Street2).width
'                  .Visible = True
'                  .toP = Label2(9).toP
'            End With
'            With Label2(15)
'                 .Caption = " W Email"
'                 .left = Label2(19).left
'                 .toP = Text3(cReferrals_Street3).toP
'                 .BackColor = vbWhite
'                 .ForeColor = vbDarkBlue
'                 .Visible = True
'                 .width = Label2(19).width
'             End With
'             With Text3(cReferrals_email)  'Organisation fax or phone
'                 .width = Text3(cReferrals_Phone).width
'                 .toP = Text3(cReferrals_Street3).toP
'                 .Visible = True
'                 .Text = "Email"
'                 .left = Text3(cReferrals_Phone).left
'                 .Locked = False
'             End With
'
'            With Text3(cReferrals_Suburb) 'Suburb
'                  .left = 10
'                  .width = Text3(cReferrals_Person).width
'                  .Visible = True
'                  .toP = Label2(10).toP
'            End With
'            With Label2(16)
'                 .Caption = " Postcode "
'                 .left = Label2(19).left
'                 .toP = Text3(cReferrals_Suburb).toP
'                 .BackColor = vbWhite
'                 .ForeColor = vbDarkBlue
'                 .Visible = True
'                 .width = Label2(19).width
'             End With
'             With Text3(cReferrals_Postcode)  'postcode
'                 .width = Text3(cReferrals_Phone).width
'                 .toP = Text3(cReferrals_Suburb).toP
'                 .Visible = True
'                 .Text = ""
'                 .left = Text3(cReferrals_Phone).left
'                 .Locked = True
'             End With
'             With Text3(cReferrals_ReasonFor) 'the type of referral eg opinion
'                 .width = Picture1(1).width - 50
'                 .toP = Label2(11).toP
'                 .Visible = True
'                 .left = 10
'             End With
'
'
'
'             For icounter = 0 To 2
'                  Command1(icounter).Visible = False
'             Next
'             Command1(3).Visible = True 'to drop down list of active problems
'             lblMeasure = "     Medications"
'             With check1(0)
'                 .Caption = "  &Medications"
'                 .left = Text3(0).left
'                 .width = Picture1(1).width / 3 '- ShSpacerEndGap.width
'                 .toP = Label2(12).toP   'Text3(3).Top
'                 .Visible = True
'                 .BackColor = vbPink
'                 .height = Text3(0).height
'             End With
'             lblMeasure = "    Social History"
'             With check1(1)
'                 .Caption = "  &Social History"
'                 .Visible = True
'                 .left = check1(0).left + check1(0).width  '+ ShSpacerEndGap.width
'                 .width = check1(0).width
'                 .toP = check1(0).toP
'                 .height = check1(0).height
'                 .BackColor = vbPink
'             End With
'             lblMeasure = "    Family History"
'             With check1(2)
'                 .Caption = "  &Family History"
'                 .left = check1(1).left + check1(1).width '+ ShSpacerEndGap.width
'                 .width = check1(0).width - ShSpacerEndGap.width
'                 .toP = check1(0).toP
'                 .Visible = True
'                 .BackColor = vbPink
'                 .height = check1(0).height
'             End With
'             lblMeasure = "    Past Problems"
'             With check1(3)
'                 .Caption = "  &Past Problems"
'                 .width = check1(0).width
'                 .height = check1(0).height
'                 .left = check1(0).left
'                 .toP = check1(0).toP + shText3Spacer.height + check1(0).height
'                 .BackColor = vbPink
'                 .Visible = True
'             End With
'             lblMeasure = "    Active Problems"
'             With check1(4)
'                 .Caption = "  &Active Problems"
'                 .width = check1(1).width
'                 .toP = check1(3).toP
'                 .height = check1(0).height
'                 .left = check1(1).left '+ ShSpacerEndGap.width
'                 .BackColor = vbPink
'                 .Visible = True
'             End With
'             With check1(5)
'                 .Caption = "  &Habits   "
'                 .width = check1(2).width 'underneath family history
'                 .height = check1(3).height
'                 .toP = check1(3).toP
'                 .left = check1(2).left '+ ShSpacerEndGap.width
'                 .BackColor = vbPink
'                 .Visible = True
'             End With
'
'
'            ' Text1.Visible = False
'             With Command3(cEdit_cancel)
'                 .toP = check1(5).toP + check1(5).height + 50
'             End With
'             With Command3(cEdit_Accept)
'                 .width = Command3(cEdit_AddText).width
'                 .Caption = "Pre&view"
'                 .Visible = True
'                 .ZOrder
'                 .toP = Command3(cEdit_cancel).toP
'                 .left = Command3(cEdit_cancel).left - .width - 50
'                 .Enabled = True
'             End With
'             With Picture1(1)
'                 .height = check1(5).toP + check1(5).height + Command3(cEdit_cancel).height + 150
'                 .toP = Picture1(3).toP + Picture1(3).height + shText3Spacer.height
'             End With
'             With Picture1(0)
'                 .height = Picture1(1).height
'                 .toP = Picture1(1).toP
'             End With
'             With sspanel2(1)
'                 .Caption = "Text of referral letter"
'                 .toP = Picture1(1).toP + Picture1(1).height + 200
'             End With
'
'             Design_DisplayShadows
'             '----------------------------------------------------
'             'Now move the Richtextbox1(0) to be the editor for the
'             'social history details
'             '----------------------------------------------------
'             Init1.Parameter = "Referral Letter Minimized"
'             Split Init1.Value, ","
'             With RichTextBox1(0)
'                 .toP = sspanel2(1).toP + sspanel2(1).height + Picture3.toP
'                 .Font = sArray(0)
'                 .Font.Size = sArray(1)
'                 .Font.Bold = sArray(2)
'                 .Font.Italic = sArray(3)
'                 .height = Shape2(8).toP - sspanel2(1).toP - sspanel2(1).height
'                 .left = Picture3.left  '+ shape_left_outline.width
'                 .Text = ""
'                 .Visible = True
'                 .Locked = False
'                 .BorderStyle = rtfFixedSingle
'                 .ZOrder
'             End With
'             List1(0).Visible = False
'             List1(1).Visible = False
'             SSActiveToolBars1.Tools("ID_Print").Enabled = True
'             bExitRoutine = False
'             Resizer1.Rebuild
' End Sub
'
' Sub Design_Panel_Recalls()
'         Design_Panel_Basic
'         bExitRoutine = True
'
'         '------------
'         'The headings
'         '------------
'         With lblMasterHeading
'              .Caption = "RECALLS"
'              .Visible = True
'         End With
'          'The prompts in picture1(0) for this section, including the
'    'four labels for preg class, resticted, drowsy and s8
'    '----------------------------------------------------------
'    With Label2(5)
'        .Caption = "Class"
'       ' .Top = 12
'       ' .Left = 10
'       ' .ForeColor = vbDarkBlue
'    End With
'    With Label2(6)
'        .Caption = "Drug"
'       ' .Top = Label2(5).Top + Label2(5).height + 12
'       ' .Left = 10
'       ' .ForeColor = vbDarkBlue
'    End With
'    With Label2(7)
'        .Caption = "Strength"
'       ' .Top = Label2(6).Top + Label2(6).height + 12
'       ' .Left = 10
'       ' .ForeColor = vbDarkBlue
'    End With
'    With Label2(8)
'        .Caption = "Direction"
'       ' .Top = Label2(7).Top + Label2(7).height + 12
'       ' .Left = 10
'       ' .ForeColor = vbDarkBlue
'    End With
'    With Label2(9)
'        .Caption = "For"
'    End With
'    Label2(10).Visible = False
'    For icounter = 0 To 3
'       Label7(icounter).toP = Picture1(1).height - Label7(icounter).height - 10
'       Label7(icounter).Visible = False
'    Next
'       'itdbgrid2_image = cList_Recalls   'xxx
'     '   sMsg = "Icpc Term| Add Recall"
'        Label2(5).Caption = "To see Dr"
'        Label2(6).Caption = "For"
'        Label2(7).Caption = "Date"
'        Label2(8).Caption = "Contact by"
'        Label2(9).Caption = "Finalised"
'        Label2(9).Visible = True
'
'    With lblHabits 'will contain prompting info age specific
'     .Caption = "" 'was sMSg
'     .width = sspanel2(2).width - 200
'     .height = 500
'     .left = 100
'     .toP = 324
'     .Font.Name = "Verdana"
'     .Font.Size = 7
'     .Font.Bold = False
'     .BackColor = vbLightGrey
'     .ForeColor = vbDarkBlue
'     .Visible = True
'  End With
'    Text3(0).MaxLength = 35
'    Text3(1).MaxLength = 50
'    Text3(2).MaxLength = 10
'
'
'    With check1(0) 'Yes for completed
'        .left = Text3(0).left
'        'Alignment = 0 'left
'        .Caption = "   &Yes   "
'        .toP = Label2(9).toP
'        .Value = False
'        .width = 950
'        .Visible = True
'        .BackColor = vbPink
'        .height = Label2(9).height
'    End With
'    lblMeasure.Caption = "  Reason  "
'    With Label2(19)
'            .Caption = " Reason "
'            .left = check1(0).left + check1(0).width + 100
'            .toP = check1(0).toP
'            .BackColor = vbWhite
'            .ForeColor = vbDarkBlue
'            .Visible = True
'            .width = lblMeasure.width
'    End With
'    With Text3(3)
'         .width = check1(0).width
'         .MaxLength = 15
'    End With
'    lblMeasure.Caption = " Appointment Type  "
'    With Label2(15)
'            .Caption = "Appointment Type"
'            .width = lblMeasure.width
'            .left = Text3(3).left + Text3(3).width + 100
'            .toP = Text3(3).toP
'            .BackColor = vbWhite
'            .ForeColor = vbDarkBlue
'             .Visible = True
'    End With
'    With Text3(4)
'         .MaxLength = 15
'         .toP = Text3(3).toP
'         .left = Label2(15).left + Label2(15).width + 100
'         .width = Text3(0).width - (Label2(15).left + Label2(15).width + 100)
'    End With
'    With Text3(5)
'         .left = Label2(19).left + Label2(19).width + 100
'         .toP = Label2(19).toP
'         .Visible = True
'         .width = Text3(0).width - (Label2(19).left + Label2(19).width + 100)
'         .MaxLength = 50
'    End With
'    Design_DisplayShadows
'    Text1.Visible = False
'    SSActiveToolBars1.Tools("ID_Print").Enabled = False
'     Resizer1.Rebuild
'    DoEvents
' End Sub
' Sub Design_Panel_Requests()
'     '------------------------------------------------
'     'requests form generation for any type of request
'     '------------------------------------------------
'     Design_Panel_Basic
'     bExitRoutine = True
'     '-------------------------------------
'     'Remove things not needed this display
'     '-------------------------------------
'     Text5.Visible = False 'the problem text box above edit area
'     Picture1(3).Visible = False
'     Picture1(4).Visible = False
'      List1(1).Visible = False
'     '------------
'     'The headings
'     '------------
'     With lblMasterHeading
'          .Caption = "REQUESTS"
'          .Visible = True
'     End With
'    lblMeasure.Caption = "   99/99/9999   "
'    With Text2(2)
'          .toP = Picture1(1).toP - Text2(2).height - 60
'          .width = lblMeasure.width
'          .left = Picture1(4).left + Picture1(4).width - Text2(2).width
'          .Text = sToday
'          .Font.Name = "Ms Sans Serif"
'          .Font.Size = 7
'          .height = 190
'          .ForeColor = vbRed
'          .Font.Bold = False
'          .MaxLength = 10
'          .Visible = True
'    End With
'     With Label2(5)
'         .Caption = "Type"
'         .ForeColor = vbAqua
'     End With
'     Label2(6).Caption = "Company"
'     Label2(7).Caption = "Street"
'     Label2(8).Caption = "Suburb"
'     Label2(9).Caption = "Request"
'     With Label2(10)
'         .Caption = "Notes on form"
'         .Visible = True
'     End With
'     With Label2(11)
'         .Caption = "Medications"
'         .Visible = True
'     End With
'     With Label2(12)
'         .Caption = "Copy to"
'         .Visible = True
'     End With
'     With Label2(13)
'         .Caption = "Progress notes"
'         .Visible = True
'     End With
'     With Text3(cRequest_Type)
'          .MaxLength = 50
'     End With
'     With Text3(cRequest_Company)
'        .MaxLength = 255
'     End With
'     With Text3(cRequest_Street123)
'        .MaxLength = 255
'        .Locked = True
'     End With
'     With Text3(cREquest_Suburb)
'        .width = Picture1(1).width * 0.5
'        .MaxLength = 30
'     End With
'     lblMeasure.Caption = "  Phone "
'     With Label2(16)
'         .Caption = " Phone "
'         .left = Text3(cREquest_Suburb).left + Text3(cREquest_Suburb).width + 50
'         .toP = Text3(cREquest_Suburb).toP
'         .BackColor = vbWhite
'         .ForeColor = vbDarkBlue
'         .Visible = True
'         .width = lblMeasure.width
'     End With
'     With Text3(cRequest_Phone)  'postcode
'         .width = Picture1(1).width - Text3(cREquest_Suburb).width - (ShSpacerEndGap.width * 1.5) - 50 - Text3(cREquest_Suburb).left
'         .toP = Text3(cREquest_Suburb).toP
'         .Visible = True
'         .Text = ""
'         .left = Label2(16).left + Label2(16).width + 50
'         .Locked = True
'     End With
'     With Text3(cRequest_request)
'         .MaxLength = 255
'     End With
'     With Text3(cRequest_notes) 'the notes on the form
'        .MaxLength = 255
'     End With
'     With Text3(cRequest_Medications) 'the medications
'        .width = 2500
'        .Visible = True
'
'     End With
'     Text3(cRequest_CopyTo).MaxLength = 255
'
'     With check1(0)
'         .Caption = "  &Include All Medications  "
'         .width = Picture1(1).width - Text3(cRequest_Medications).left - Text3(cRequest_Medications).width - ShSpacerEndGap.width - Text3(cRequest_Medications).left - 50
'         .height = Text3(cRequest_Medications).height
'         .toP = Text3(cRequest_Medications).toP
'         .left = Text3(cRequest_Medications).left + Text3(cRequest_Medications).width + 50
'         .BackColor = vbPink
'         .Visible = True
'     End With
'     With Text3(cRequest_CopyTo)
'         .Visible = True
'     End With
'     With Text3(cRequest_ProgressNote)
'         .Visible = True
'         .MaxLength = 255
'     End With
'     lblMeasure.Caption = "  Wk Cover  "
'     With Option2(0)
'          .Caption = "Bulk Bill"
'          .width = lblMeasure.width
'          .left = 50
'          .toP = Text3(cRequest_ProgressNote).toP + Text3(cRequest_ProgressNote).height + 50
'          .Visible = True
'          .Value = False
'          .TabStop = False
'     End With
'     With Option2(1)
'          .Caption = "Private"
'          .width = Option2(0).width
'          .left = Option2(0).left + Option2(0).width
'          .toP = Option2(0).toP
'          .Visible = True
'          .Value = False
'          .TabStop = False
'     End With
'     With Option2(2)
'          .Caption = "Rebate"
'          .width = Option2(0).width
'          .left = Option2(1).left + Option2(1).width + 10
'          .toP = Option2(0).toP
'          .Visible = True
'          .Value = False
'          .TabStop = False
'     End With
'     With Option2(3)
'          .Caption = "W/Cover"
'          .width = Option2(0).width
'          .left = Option2(2).left + Option2(2).width + 10
'          .toP = Option2(0).toP
'          .Visible = True
'          .Value = False
'          .TabStop = False
'     End With
'    Command3(cEdit_Accept).toP = Text3(cRequest_ProgressNote).toP + Text3(cRequest_ProgressNote).height + 50
'    Command3(cEdit_cancel).toP = Command3(cEdit_Accept).toP
'    Picture1(1).height = Text3(cRequest_ProgressNote).toP + Text3(cRequest_ProgressNote).height + Command3(cEdit_cancel).height + 100
'    Picture1(0).height = Picture1(1).height
'
'    With sspanel2(1)
'         .Caption = ""
'         .toP = Picture1(1).toP + Picture1(1).height + 200
'    End With
'     Design_DisplayShadows
'    With List1(0)
'      .toP = sspanel2(1).toP + sspanel2(1).height
'       .height = (Picture3.height - sspanel2(1).toP - sspanel2(1).height - Shape2(8).height)
'
'    End With
'    bExitRoutine = False
'    SSActiveToolBars1.Tools("ID_Print").Enabled = True
'   Resizer1.Rebuild
' End Sub
'
'
'
'
'
'
'
'
'
'
' Sub Requests_Section_Show()
'     '-----------------------------------------------------------------------------------
'     'Clear the edit area, use default provider type to load the default service provider
'     'and either default address or most commonly used address. If no Default provider
'     'exists, choose any provider in this category
'     '-----------------------------------------------------------------------------------
'     If iCurrentSection = cSection_requests Then
'        Exit Sub
'     End If
'     iCurrentSection = cSection_requests
'     Design_Panel_Requests                                            'design the screen
'     Command3_Click (cButtonCancel)                                   'reset arrays
'     gtNew_Form(0).Provider.Type_ID = gtProgramDefaults.Provider_Type 'set default type
'     gtNew_Form(0).Provider.Type = StrConv(gtProgramDefaults.Provider_Description, vbProperCase)
'     Requests_Providers_Default_Get gtProgramDefaults.Provider_Type   'get default address
'     bExitRoutine = True
'     Text3(cRequest_Type) = StrConv(gtProgramDefaults.Provider_Description, vbProperCase)
'     bExitRoutine = False
'     Requests_Forms_Ordered_Show                                               'show current forms
'  '   Requests_Patients_List_Get                                        'show old requests in list
'     If Text3(cRequest_Company) <> "" Then
'         Text3(cRequest_request).SetFocus
'     Else
'        Text3(cRequest_Company).SetFocus
'     End If
' End Sub
' Sub Measure_Section_Show()
'     If iCurrentSection <> cSection_Measure Then
'         SSActiveTabs1.SelectedTab = 3
'         Measure_AvailableList
'         SSActiveTabs1_Click
'         iCurrentSection = cSection_Measure
'         Measure_Design_panel
'         Measure_Display_Types
'     End If
'     Set Db = OpenDatabase(sMEDREC_MDB, False) 'read only
'     Set Q = Db.QueryDefs("MRQ_Measurements_GetLastEntered_ForType")
'     Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'     Q("Enter Type_ID") = mrMeasure_BP
'     Set Rs = Q.OpenRecordset()
'     bExitRoutine = True
'     With Rs
'        If .EOF + .BOF <> -2 Then
'            Text2(0) = Format(Int(!Measurement / 1000)) & "/" & Format(!Measurement Mod 1000) _
'
'            Label2(1) = "(" & !Date_Noted & ")"
'        End If
'        .Close
'     End With
'     Set Q = Db.QueryDefs("MRQ_Measurements_GetLastEntered_ForType")
'     Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'     Q("Enter Type_ID") = mrMeasure_Weight
'     Set Rs = Q.OpenRecordset
'     With Rs
'        If .EOF + .BOF <> -2 Then
'            Text2(1) = !Measurement & " " & StrConv(!Abbrev, vbProperCase) & "" & !Unit_ID_Qualifier
'            gtPatient(1).weight = !Measurement
'        End If
'        .Close
'     End With
'     Set Q = Db.QueryDefs("MRQ_Measurements_GetLastEntered_ForType")
'     Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'     Q("Enter Type_ID") = mrMeasure_Height
'     Set Rs = Q.OpenRecordset
'     With Rs
'        If .EOF + .BOF <> -2 Then
'            gtPatient(1).height = !Measurement
'            Text2(2) = gtPatient(1).weight / (gtPatient(1).height / 100 * gtPatient(1).height / 100)
'        End If
'        .Close
'     End With
'     bExitRoutine = False
'     Db.Close
'     Command3_Click (1)
' End Sub
' Sub Referrals_Organisation_Select()
'     bExitRoutine = True
'     '-------------------------------------------
'     'Select the name of organisation to refer to
'     '-------------------------------------------
'     If RecordsExist(Data1) And itdbgrid2_image = cGrID_Image_Organisations Then
'        Text3(cReferrals_Org_name) = Data1.Recordset!Description
'        gtNew_Referral(0).Organisation.Name = Data1.Recordset!Description
'        gtNew_Referral(0).Organisation.ID = Data1.Recordset!Organisation_ID
'        gtNew_Referral(0).Organisation.Category.ID = Data1.Recordset!Category_ID
'         gtNew_Referral(0).Organisation.Category.Name = "" & Data1.Recordset!Category
'        For icounter = cReferrals_Street1 To cReferrals_Postcode
'            Text3(icounter) = ""
'            Next
'        gtNew_Referral(0).Address.ID = 0
'        gtNew_Referral(0).Organisation.Communication.ID = 0
'        ' Text5 = "" & Data1.Recordset!Category
'        ' Label2(23) = "Org Category"
'        '-------------------------------------------
'        'Now get the addresses for this organisation
'        '-------------------------------------------
'        Set Db = OpenDatabase(sContacts_MDB)
'        Set Q = Db.QueryDefs("MRQ_Referrals_Organisations_Addresses_Getlist")
'        Q("Enter Organisation_ID") = gtNew_Referral(0).Organisation.ID
'        Set Rs = Q.OpenRecordset()
'        If Rs.EOF + Rs.BOF <> -2 Then
'             With Rs
'             .MoveLast
'              '-------------------------------------
'              'If there is only 1 address - use that
'              '-------------------------------------
'              If Rs.RecordCount = 1 Then
'                   gtNew_Referral(0).Address.ID = !Address_ID
'
'                   gtNew_Referral(0).Address.Street1 = "" & !Street1
'                   gtNew_Referral(0).Address.Street2 = "" & !Street2
'                   gtNew_Referral(0).Address.Street3 = "" & !Street3
'                   gtNew_Referral(0).Address.suburb = "" & !suburb
'                   gtNew_Referral(0).Address.Postcode = "" & !Postcode
'                   gtNew_Referral(0).Organisation.Communication.Work_Phone_Confidential = !Work_Phone_Confidential
'                   gtNew_Referral(0).Organisation.Communication.Fax = "" & !Fax
'                   gtNew_Referral(0).Organisation.Communication.Fax_Confidential = !Fax_Confidential
'                   gtNew_Referral(0).Organisation.Communication.Email = "" & !Email
'                   gtNew_Referral(0).Organisation.Communication.Email_Confidential = "" & !Email_Confidential
'                   gtNew_Referral(0).Organisation.Communication.HOme_Phone = "" & !HOme_Phone
'                   gtNew_Referral(0).Organisation.Communication.HOme_Phone_Confidential = "" & !HOme_Phone_Confidential
'                   gtNew_Referral(0).Organisation.Communication.Internet = "" & !Internet
'                   gtNew_Referral(0).Organisation.Communication.Internet_Confidential = "" & !Internet_Confidential
'                   gtNew_Referral(0).Organisation.Communication.Mobile = "" & !Mobile
'                   gtNew_Referral(0).Organisation.Communication.Mobile_Confidential = "" & !Mobile_Confidential
'                   gtNew_Referral(0).Organisation.Communication.ID = !Communication_ID
'                   gtNew_Referral(0).Address.Head_office = !Head_office
'                   gtNew_Referral(0).Address.Postal_Address = !Postal_Address
'                   Text3(cReferrals_Street1) = "" & !Street1
'                   Text3(cReferrals_Street2) = "" & !Street2
'                   Text3(cReferrals_Street3) = "" & !Street3
'                   Text3(cReferrals_Suburb) = "" & !suburb
'                   Text3(cReferrals_Postcode) = "" & !Postcode
'                   Text3(cReferrals_Phone) = "" & !Work_Phone
'                   Text3(cReferrals_Fax) = "" & !Fax
'                   Text3(cReferrals_email) = "" & !Email
'                   If !Head_office = True Then
'                        check1(7).Value = 1
'                   Else
'                        check1(7).Value = 0
'                   End If
'                   Text3(cReferrals_ReasonFor) = "Ongoing management"
'                   itdbgrid2_image = cGrID_Image_Referral_Reasons
'                   Referrals_ReasonsFor_Getlist
'                   Referrals_ReasonFor_Select
'                   RichTextBox1(0).SetFocus
'              Else
'                   '-----------------------------------------------------------------------
'                   'More than 1 address for the person in an organisation, possibly in more
'                   'than one organisation
'                   '------------------------------------------------------------------------
'                   Text3(cReferrals_Street1).SetFocus
'              End If
'              .Close
'          End With
'         End If
'     Else
'        '-----------------------------
'        'If this is a new organisation
'        '-----------------------------
'        If Trim(Text3(cReferrals_Org_name)) <> "" Then
'         gtNew_Referral(0).Organisation.ID = 0
'         gtNew_Referral(0).Organisation.Name = Trim(Text3(cReferrals_Org_name))
'         gtNew_Referral(0).Address.ID = 0
'         gtNew_Referral(0).Address.Street1 = ""
'         gtNew_Referral(0).Address.Street2 = ""
'         gtNew_Referral(0).Address.suburb = ""
'         gtNew_Referral(0).Address.Postcode = ""
'         gtNew_Referral(0).Address.Head_office = False
'         gtNew_Referral(0).Address.Postal_Address = False
'        End If
'     End If
'     Picture2.Visible = False
'
'     bExitRoutine = False
' End Sub
' Sub Referrals_Person_Select()
'      Dim iY As Integer
'      bExitRoutine = True
'      If gtNew_Referral(0).Person.ID <> 0 Then
'         ' Text3(cReferrals_Person) = Trim(gtNew_Referral(0).Person.Title _
'         '        & " " & Trim(gtNew_Referral(0).Person.Firstname) _
'         '        & " " & gtNew_Referral(0).Person.Surname)
'         'bExitRoutine = False
'         'Exit Sub
'      End If
'      If itdbgrid2_image = cGrID_Image_persons Or itdbgrid2_image = cGrID_Image_Referrals_PersonCategory Then 'And Picture2.Visible Then
'        '-----------------------------------------------------------
'        'If records exist, select the person highlighted in the grid
'        '-----------------------------------------------------------
'        If RecordsExist(Data1) Then
'              With Data1.Recordset
'                 Text5 = "" & !Category
'                 gtNew_Referral(0).Person.Category.Name = Data1.Recordset!Category
'                 gtNew_Referral(0).Person.Category.ID = Data1.Recordset!Category_ID
'                 Text3(cReferrals_Person) = "" & !Title _
'                 & " " & Trim(StrConv("" & !Firstname, vbProperCase)) _
'                 & " " & Trim(StrConv(!Surname, vbProperCase))
'                 gtNew_Referral(0).Person.ID = !Person_ID
'                 gtNew_Referral(0).Person.Title = "" & !Title
'                 gtNew_Referral(0).Person.Firstname = "" & !Firstname
'                 gtNew_Referral(0).Person.Surname = "" & !Surname
'                 gtNew_Referral(0).Person.Sex = "" & !Sex
'                 gtNew_Referral(0).Person.Communication.ID = !Person_Communication_ID
'                 gtNew_Referral(0).Person.Birthdate = "" & !Birthdate
'              End With
'              '----------------------------------------
'              'Is this person linked to an organisation
'              '----------------------------------------
'              Set Db = OpenDatabase(sContacts_MDB)
'              Set Q = Db.QueryDefs("MRQ_Referrals_Employees_Addresses")
'              Q("Enter Person_ID") = gtNew_Referral(0).Person.ID
'              Set Rs = Q.OpenRecordset()
'              '------------------------------------------
'              'If the person is linked to an organisation
'              '------------------------------------------
'              If Rs.EOF + Rs.BOF <> -2 Then
'                  With Rs
'                  .MoveLast
'                   '-------------------------------------
'                   'If there is only 1 address - use that
'                   '-------------------------------------
'                   If Rs.RecordCount = 1 Then
'                        Text3(cReferrals_Org_name) = "" & !Description
'                        gtNew_Referral(0).Organisation.Name = !Description
'                        gtNew_Referral(0).Organisation.ID = !Organisation_ID
'                        gtNew_Referral(0).Address.Street1 = "" & !Street1
'                        gtNew_Referral(0).Address.Street2 = "" & !Street2
'                        gtNew_Referral(0).Address.Street3 = "" & !Street3
'                        gtNew_Referral(0).Address.suburb = "" & !suburb
'                        gtNew_Referral(0).Address.Postcode = "" & !Postcode
'                        gtNew_Referral(0).Organisation.Communication.Work_Phone = "" & !Work_Phone
'                        gtNew_Referral(0).Organisation.Communication.Work_Phone_Confidential = !Work_Phone_Confidential
'                        gtNew_Referral(0).Organisation.Communication.Fax = "" & !Fax
'                        gtNew_Referral(0).Organisation.Communication.Fax_Confidential = !Fax_Confidential
'                        gtNew_Referral(0).Organisation.Communication.Email = "" & !Email
'                        gtNew_Referral(0).Organisation.Communication.Email_Confidential = "" & !Email_Confidential
'                        gtNew_Referral(0).Organisation.Communication.HOme_Phone = "" & !HOme_Phone
'                        gtNew_Referral(0).Organisation.Communication.HOme_Phone_Confidential = "" & !HOme_Phone_Confidential
'                        gtNew_Referral(0).Organisation.Communication.Internet = "" & !Internet
'                        gtNew_Referral(0).Organisation.Communication.Internet_Confidential = "" & !Internet_Confidential
'                        gtNew_Referral(0).Organisation.Communication.Mobile = "" & !Mobile
'                        gtNew_Referral(0).Organisation.Communication.Mobile_Confidential = "" & !Mobile_Confidential
'                        gtNew_Referral(0).Organisation.Communication.ID = !Communication_ID
'                        gtNew_Referral(0).Address.Head_office = !Head_office
'                        gtNew_Referral(0).Address.Postal_Address = !Postal_Address
'                        gtNew_Referral(0).Address.ID = !Address_ID
'                        Text3(cReferrals_Street1) = "" & !Street1
'                        Text3(cReferrals_Street2) = "" & !Street2
'                        Text3(cReferrals_Street3) = "" & !Street3
'                        Text3(cReferrals_Suburb) = "" & !suburb
'                        Text3(cReferrals_Postcode) = "" & !Postcode
'                        Text3(cReferrals_Phone) = "" & !Work_Phone
'                        Text3(cReferrals_Fax) = "" & !Fax
'                        Text3(cReferrals_email) = "" & !Email
'                        If !Head_office = True Then
'                             check1(7).Value = 1
'                        Else
'                             check1(7).Value = 0
'                        End If
'                        Text3(cReferrals_ReasonFor) = "Ongoing management"
'                        itdbgrid2_image = cGrID_Image_Referral_Reasons
'                        Referrals_ReasonsFor_Getlist
'                        Referrals_ReasonFor_Select
'                        RichTextBox1(0).SetFocus
'                   Else
'                        '-----------------------------------------------------------------------
'                        'More than 1 address for the person in an organisation, possibly in more
'                        'than one organisation
'                        '------------------------------------------------------------------------
'                        Text3(cReferrals_Org_name).SetFocus
'                   End If
'                   .Close
'                  End With
'              Else
'                 '-----------------------------------------------------------
'                 'Person not linked to an organisation, get person address(es)
'                 '------------------------------------------------------------
'                 Set Q = Db.QueryDefs("MRQ_Referrals_Persons_Addresses_GetList")
'                 Q("Enter Person_ID") = gtNew_Referral(0).Person.ID
'                 Set Rs = Q.OpenRecordset()
'                 '---------------------------------------------
'                 'If the person is linked to a person's address
'                 '---------------------------------------------
'                 If Rs.EOF + Rs.BOF <> -2 Then
'                  With Rs
'                     .MoveLast
'                     'On Error Resume Next
'                     '------------------------------------
'                     'If they have only 1 address use that
'                     '------------------------------------
'                     If Rs.RecordCount = 1 Then
'                         gtNew_Referral(0).Address.ID = !Address_ID
'                         gtNew_Referral(0).Address.Street1 = "" & !Street1
'                         gtNew_Referral(0).Address.Street2 = "" & !Street2
'                         gtNew_Referral(0).Address.Street3 = "" & !Street3
'                         gtNew_Referral(0).Address.suburb = "" & !suburb
'                         gtNew_Referral(0).Address.Postcode = "" & !Postcode
'                         gtNew_Referral(0).Person.Communication.Work_Phone = "" & !Work_Phone
'                         gtNew_Referral(0).Person.Communication.Work_Phone_Confidential = !Work_Phone_Confidential
'                         gtNew_Referral(0).Person.Communication.Fax = "" & !Fax
'                         gtNew_Referral(0).Person.Communication.Fax_Confidential = !Fax_Confidential
'                         gtNew_Referral(0).Person.Communication.Email = "" & !Email
'                         gtNew_Referral(0).Person.Communication.Email_Confidential = "" & !Email_Confidential
'                         gtNew_Referral(0).Person.Communication.HOme_Phone = "" & !HOme_Phone
'                         gtNew_Referral(0).Person.Communication.HOme_Phone_Confidential = "" & !HOme_Phone_Confidential
'                         gtNew_Referral(0).Person.Communication.Internet = "" & !Internet
'                         gtNew_Referral(0).Person.Communication.Internet_Confidential = "" & !Internet_Confidential
'                         gtNew_Referral(0).Person.Communication.Mobile = "" & !Mobile
'                         gtNew_Referral(0).Person.Communication.Mobile_Confidential = "" & !Mobile_Confidential
'                         gtNew_Referral(0).Person.Communication.ID = !Communication_ID
'                         gtNew_Referral(0).Address.Head_office = !Head_office
'                         gtNew_Referral(0).Address.Postal_Address = !Postal_Address
'                         Text3(cReferrals_Street1) = "" & !Street1
'                         Text3(cReferrals_Street2) = "" & !Street2
'                         Text3(cReferrals_Street3) = "" & !Street3
'                         Text3(cReferrals_Suburb) = "" & !suburb
'                         Text3(cReferrals_Postcode) = "" & !Postcode
'                         Text3(cReferrals_Phone) = "" & !Work_Phone
'                         Text3(cReferrals_Fax) = "" & !Fax
'                         Text3(cReferrals_email) = "" & !Email
'                         If !Head_office = True Then
'                             check1(7).Value = 1
'                         Else
'                             check1(7).Value = 0
'                         End If
'                         Text3(cReferrals_ReasonFor) = "Ongoing management"
'                         itdbgrid2_image = cGrID_Image_Referral_Reasons
'                         Referrals_ReasonsFor_Getlist
'                         Referrals_ReasonFor_Select
'                         RichTextBox1(0).SetFocus
'                     Else
'                              '---------------------------------------
'                              'Otherwise they have more than 1 address
'                              '---------------------------------------
'                               Text3(cReferrals_Street1).SetFocus
'                      End If
'                     .Close
'                    End With
'                 Else
'                        '---------------------------------------
'                        'The person is not linked to any address
'                        '---------------------------------------
'                          Text3(cReferrals_Org_name).SetFocus
'                 End If
'                 Db.Close
'
'              End If
'     Else        'matches  If itdbgrid2_image = cGrID_Image_person
'             gtNew_Referral(0).Person.ID = 0
'             gtNew_Referral(0).Person.Link_ID = 0
'             gtNew_Referral(0).Person.Salutation = ""
'             gtNew_Referral(0).Person.Title = ""
'             gtNew_Referral(0).Person.Firstname = ""
'             gtNew_Referral(0).Person.Surname = ""
'             gtNew_Referral(0).Person.Sex = ""
'             gtNew_Referral(0).Person.Communication.ID = 0
'             gtNew_Referral(0).Person.Birthdate = ""
'        '-----------------------------------------------------
'        'Split this line into person details on assumption of:
'        'title firstname surname with crude validation
'        '-----------------------------------------------------
'        If Len(Trim(Text3(cReferrals_Person))) Then
'          Text3(cReferrals_Person) = StrConv(Trim(Text3(cReferrals_Person)), vbProperCase)
'          Split Text3(cReferrals_Person), " "
'          iY = UBound(sArray())
'          Select Case iY
'          Case 0
'              gtNew_Referral(0).Person.Title = StrConv(sArray(0), vbProperCase)
'          Case 1
'             If InStr("Mr#Mrs#Dr#Prof#Ms#Master#Miss#", sArray(0)) = 0 Then
'                  gtNew_Referral(0).Person.Firstname = StrConv(sArray(0), vbProperCase)
'             Else
'                  gtNew_Referral(0).Person.Title = StrConv(sArray(0), vbProperCase)
'             End If
'             gtNew_Referral(0).Person.Surname = StrConv(sArray(1), vbProperCase)
'          Case 2
'             gtNew_Referral(0).Person.Title = StrConv(sArray(0), vbProperCase)
'             gtNew_Referral(0).Person.Firstname = StrConv(sArray(1), vbProperCase)
'             gtNew_Referral(0).Person.Surname = StrConv(sArray(2), vbProperCase)
'          End Select
'         End If
'     End If  'matches  If itdbgrid2_image = cGrID_Image_person
'    End If
'     Picture2.Visible = False
'
'     bExitRoutine = False
' End Sub
' Sub Requests_CopyTo_Select()
'      Dim iY As Integer
'      bExitRoutine = True
'
'      If gtNew_Form(0).CopyTo.ID <> 0 Then
'          Text3(cRequest_CopyTo) = Trim(gtNew_Form(0).CopyTo.Title _
'                 & " " & Trim(gtNew_Form(0).CopyTo.Firstname) _
'                 & " " & gtNew_Form(0).CopyTo.Surname) _
'                 & " " & Trim(gtNew_Form(0).CopyTo.Address.Street1 _
'                 & " " & gtNew_Form(0).CopyTo.Address.Street2 _
'                 & " " & gtNew_Form(0).CopyTo.Address.suburb _
'                 & " " & gtNew_Form(0).CopyTo.Address.Postcode)
'         bExitRoutine = False
'         Exit Sub
'      End If
'      If itdbgrid2_image = cGrID_Requests_copyTo And Picture2.Visible Then
'        If RecordsExist(Data1) Then
'              With Data1.Recordset
'                 Text3(cRequest_CopyTo) = Trim(Trim(StrConv("" & !Title, vbProperCase)) _
'                 & " " & Trim(StrConv("" & !Firstname, vbProperCase)) _
'                 & " " & Trim(StrConv(!Surname, vbProperCase))) _
'                 & " " & Trim(StrConv(!Street1, vbProperCase) _
'                 & " " & StrConv(!Street2, vbProperCase) _
'                 & " " & StrConv(!suburb, vbUpperCase) _
'                 & " " & !Postcode)
'
'                 gtNew_Form(0).CopyTo.ID = !Person_ID
'                 gtNew_Form(0).CopyTo.Title = "" & !Title
'                 gtNew_Form(0).CopyTo.Firstname = "" & !Firstname
'                 gtNew_Form(0).CopyTo.Surname = "" & !Surname
'                 gtNew_Form(0).CopyTo.Address.Street1 = "" & !Street1
'                 gtNew_Form(0).CopyTo.Address.Street2 = "" & !Street2
'                 ' gtNew_Form(0).CopyTo.Address.Street3 = "" & !Street3
'                 gtNew_Form(0).CopyTo.Address.suburb = "" & !suburb
'                 gtNew_Form(0).CopyTo.Address.State = "" & !State
'                 gtNew_Form(0).CopyTo.Address.Postcode = "" & !Postcode
'
'              End With
'         Else
'
'
'         End If
'     Else
'
'             gtNew_Form(0).CopyTo.ID = 0
'             gtNew_Form(0).CopyTo.Salutation = ""
'             gtNew_Form(0).CopyTo.Title = ""
'             gtNew_Form(0).CopyTo.Firstname = ""
'             gtNew_Form(0).CopyTo.Surname = ""
'             gtNew_Form(0).CopyTo.Address.Street1 = ""
'             gtNew_Form(0).CopyTo.Address.Street2 = ""
'             gtNew_Form(0).CopyTo.Address.suburb = ""
'             gtNew_Form(0).CopyTo.Address.State = ""
'             gtNew_Form(0).CopyTo.Address.Postcode = ""
'
'        '-----------------------------------------------------
'        'Split this line into person details on assumption of:
'        'title firstname surname with crude validation
'        '-----------------------------------------------------
'        If Len(Trim(Text3(cRequest_CopyTo))) Then
'          Text3(cRequest_CopyTo) = StrConv(Trim(Text3(cRequest_CopyTo)), vbProperCase)
'          Split Text3(cRequest_CopyTo), " "
'          iY = UBound(sArray())
'          Select Case iY
'          Case 0
'              gtNew_Form(0).CopyTo.Title = StrConv(gtNew_Form(0).CopyTo.Title, vbProperCase)
'          Case 1
'             If InStr("Mr#Mrs#Dr#Prof#Ms#Master#Miss#", gtNew_Form(0).CopyTo.Title) = 0 Then
'                  gtNew_Form(0).CopyTo.Firstname = StrConv(gtNew_Form(0).CopyTo.Firstname, vbProperCase)
'             Else
'                  gtNew_Form(0).CopyTo.Title = StrConv(gtNew_Form(0).CopyTo.Title, vbProperCase)
'             End If
'             gtNew_Form(0).CopyTo.Surname = StrConv(sArray(1), vbProperCase)
'          Case 2
'             gtNew_Form(0).CopyTo.Title = StrConv(gtNew_Form(0).CopyTo.Title, vbProperCase)
'             gtNew_Form(0).CopyTo.Firstname = StrConv(sArray(1), vbProperCase)
'             gtNew_Form(0).CopyTo.Surname = StrConv(sArray(2), vbProperCase)
'          End Select
'
'         ' gtNew_Form(0).CopyTo.Surname = Trim(Text3(cRequest_CopyTo))
'         '-----------------------------------------------------------------
'         'Now, does this person actually exist, but the user typed in their
'         'full details instead of surname in the search
'         '-----------------------------------------------------------------
'        '  Set Db = OpenDatabase(sContacts_MDB)
'        '  Set Q = Db.QueryDefs("MRQ_Referrals_CheckIfPersonExists")
'        '  Q("Enter Title") = gtNew_Form(0).CopyTo.Title
'        '  Q("Enter Firstname") = gtNew_Form(0).CopyTo.Firstname
'        '  Q("Enter Surname") = gtNew_Form(0).CopyTo.Surname
'        '  Set rs = Q.OpenRecordset()
'        '  With rs
'         '    If .EOF + .BOF <> -2 Then
'         '        gtNew_Form(0).CopyTo.ID = !Person_ID
'         '    End If
'         '    .Close
'         ' End With
'         ' Db.Close
'
'        End If
'     End If
'     Picture2.Visible = False
'
'     bExitRoutine = False
'
' End Sub
' Sub Referrals_ReasonFor_Select()
'      If itdbgrid2_image = cGrID_Image_Referral_Reasons Then  ' And Picture2.Visible Then
'         If RecordsExist(Data1) Then
'             With Data1.Recordset
'                 bExitRoutine = True
'                 Text3(cReferrals_ReasonFor) = !Description
'                 gtNew_Referral(0).Type = !Description
'                 gtNew_Referral(0).Type_ID = !Referral_Type_ID
'                 Picture2.Visible = False
'                 bExitRoutine = False
'             End With
'         End If
'      Else
'                 bExitRoutine = True
'                 Text3(cReferrals_ReasonFor) = ""
'                 gtNew_Referral(0).Type = ""
'                 gtNew_Referral(0).Type_ID = 0
'                 bExitRoutine = False
'      End If
' End Sub
' Sub Script_PastMeds_PrescribeAll()
'     Dim SelBks As TrueDBGrid60.SelBookmarks
'     iStopAllKeyBoardInput = True
'     If iCurrentSection <> cSection_Script Then
'        Script_Show_Section
'     End If
'     Screen.MousePointer = vbHourglass
'     Set SelBks = TDBGrid1(0).SelBookmarks
'     With Data2RsClone
'         .MoveFirst
'         While Not .EOF
'             SelBks.Add .Bookmark
'             .MoveNext
'         Wend
'     End With
'     Script_PastMeds_RePrescribe
'     Screen.MousePointer = vbArrow
'     iStopAllKeyBoardInput = False
' End Sub
' Sub Script_PastMeds_PrescribeSelected()
'     iStopAllKeyBoardInput = True
'     If iCurrentSection <> cSection_Script Then
'        Script_Show_Section
'     End If
'     Screen.MousePointer = vbHourglass
'     Script_PastMeds_RePrescribe
'     Screen.MousePointer = vbArrow
'     iStopAllKeyBoardInput = False
' End Sub
' Sub Script_Show_Section()
'         If Picture1(2).Visible Then
'       Exit Sub
'         End If
'         If iCurrentSection <> cSection_Script Then
'            iCurrentSection = cSection_Script
'             Design_Panel_Script
'             Command3_Click (cButtonCancel) 'zero arrays and editing area
'             If gtPatient(1).Concession = mrConcession_FullVeteran Then
'                 check1(0).Value = 1
'             End If
'             Script_Items_DisplayThosePrescribed
'             DoEvents 'force screen display update
'         End If
' End Sub
' Sub Script_PastMeds_ViewActive()
'     iStopAllKeyBoardInput = True
'     bExitRoutine = True
'     Patient_Get_Medications mrShowMedsActive
'     gtPatient(1).MedicationList_Status = mrShowMedsActive
'     SSActiveTabs1.SelectedTab = 1
'     TDBGrid1(0).Caption = "Active Medications"
'     iStopAllKeyBoardInput = False
' End Sub
' Sub Script_PastMeds_ViewInActive()
'     iStopAllKeyBoardInput = True
'     Patient_Get_Medications mrShowMedsInactive
'     gtPatient(1).MedicationList_Status = mrShowMedsInactive
'     TDBGrid1(0).Caption = "InActive Medications"
'     SSActiveTabs1.SelectedTab = 1
'     iStopAllKeyBoardInput = False
' End Sub
' Sub Script_Indications_Select()
'    bExitRoutine = True
'     If itdbgrid2_image = cGrID_Image_indications Then
'         If RecordsExist(Data1) Then
'            If InStr(LCase(Data1.Recordset!Description), LCase(Trim(Text5))) Then
'              Text5 = Data1.Recordset!Description
'           Else
'              If Picture2.Visible Then
'                 Text5 = Data1.Recordset!Description
'              End If
'           End If
'           Picture2.Visible = False
'         Else
'           bExitRoutine = False
'           Text5 = ""
'         End If
'     End If
'     bExitRoutine = False
' End Sub
' Sub Script_Indications_GetList()
'     '------------------------------
'     'gets a list eg "lice" in text5
'     '------------------------------
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Q = Db.QueryDefs("MRQ_Script_GetList_Indications")
'     Q("Enter Indication") = Trim(Text5)
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) Then
'        Picture2.Visible = True: Picture2.ZOrder
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
'
' End Sub
' Sub Script_PrescribeByIndication_MakeTable()
'     '------------------------------------------------------------------
'     'Makes a tempory table in the database of all drugs indicated for a
'     'particular condition
'     '------------------------------------------------------------------
'     On Error Resume Next
'
'
'     Dim Db As Database
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'         Set Q = Db.QueryDefs("MRQ_Script_PrescribeByIndication_ClearTable")
'         Q.Execute
'           On Error GoTo 0
'         Set Q = Db.QueryDefs("MRQ_Script_PrescribeByIndication_FillTable")
'         Q("Enter Indication") = Trim(Text5)
'         Q.Execute
'     'Now see if any drugs exist in this table
'     Set Rs = Db.OpenRecordset("Select * from Script_Drugs_For_Condition")
'     If Rs.RecordCount = 0 Then
'        Screen.MousePointer = vbArrow
'        MsgBox "There are no entries in the Mims Indication database corresponding" _
'                 & "to this term. You could try a similar term eg 'angina' for 'ischaemic heart disease'."
'        Db.Close
'        Exit Sub
'     End If
'     Db.Close
'     sSql = "Select * from Script_Drugs_For_Condition"
'     Data2.DatabaseName = sDrugs_MdB
'     Data2.RecordSource = sSql
'     Data2.Refresh
'     Set Data2RsClone = Data2.Recordset
'     If RecordsExist(Data2) Then
'        Load_Layout "Brands_For_Condition", TDBGrid1(0), cGrID_Image_indications
'        TDBGrid1(0).Caption = Trim(Text5)
'        TDBGrid1(0).SetFocus
'     Else
'        Command3_Click (1)
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
' Sub Measure_Design_panel()
'     Design_Panel_Basic
'     bExitRoutine = True
'     With lblMasterHeading
'         .Caption = "MEASUREMENT"
'         .Visible = True
'     End With
'     'Remove things not needed
'     Text3(4).Visible = False
'     Text3(5).Visible = False
'     Label2(10).Visible = False
'     Picture1(3).Visible = False
'     Picture1(4).Visible = False
'     '-----------------------------------------------
'     'The last recorded measurements for fixed values
'     '-----------------------------------------------
'     lblMeasure = "Last BP          "
'      With Label2(0)
'         .Caption = "Last BP "
'         .height = 180
'         .left = 100
'         .toP = 324
'         .Font.Name = "Verdana"
'         .Font.Size = 7
'         .Font.Bold = True
'         .BackColor = vbLightGrey
'         .ForeColor = vbDarkBlue
'         .width = lblMeasure.width
'         .Visible = True
'     End With
'     With Text2(0)  'the last BP
'       .toP = Label2(0).toP
'       .left = Label2(0).left + Label2(0).width + 100
'       .height = Label2(0).height
'       .width = Label2(0).width
'       .BackColor = vbWhite
'       .ForeColor = vbDarkGrey
'       .Font.Name = "Verdana"
'       .Font.Size = 7
'       .Visible = True
'       .Enabled = False
'       .TabStop = True
'       .TabIndex = 0
'       .MaxLength = 7
'     End With
'     With Label2(1)
'       .Caption = ""
'       .height = Label2(0).height
'       .left = Text2(0).left + Text2(0).width + 50
'       .toP = Label2(0).toP
'       .Font.Name = "Verdana"
'       .Font.Size = 7
'       .BackColor = vbLightGrey
'       .ForeColor = vbDarkBlue
'       .Visible = True
'     End With
'     With Label2(2)
'        .Caption = "Last weight"
'        .height = Label2(0).height
'        .left = Label2(0).left
'        .toP = Label2(0).toP + Label2(0).height + 100
'        .width = Label2(0).width
'        .BackColor = vbLightGrey
'        .ForeColor = vbDarkBlue
'        .Font.Name = "Verdana"
'        .Font.Bold = True
'        .Font.Size = 7
'        .Visible = True
'     End With
'     With Text2(1) 'last weight
'         .height = Label2(0).height
'         .left = Text2(0).left
'         .toP = Label2(3).toP
'         .BackColor = vbWhite
'         .ForeColor = vbDarkGrey
'         .Font.Name = "Verdana"
'         .Font.Size = 7
'         .width = Text2(0).width
'         .Visible = True
'         .Enabled = False
'         .TabStop = True
'         .TabIndex = 3
'         .MaxLength = 6
'     End With
'     With Label2(3)
'       .Caption = " BMI "
'       .height = Label2(0).height
'       .left = Text2(1).left + Text2(1).width + 50
'       .toP = Label2(2).toP
'       .Font.Name = "Verdana"
'       .Font.Size = 7
'       .Font.Bold = True
'       .BackColor = vbLightGrey
'       .ForeColor = vbDarkBlue
'       .Visible = True
'     End With
'     With Text2(2) 'BMI
'         .height = Label2(0).height
'         .left = Label2(3).left + Label2(3).width + 50
'         .toP = Text2(1).toP
'         .BackColor = vbWhite
'         .ForeColor = vbDarkGrey
'         .Font.Name = "Verdana"
'         .Font.Size = 7
'         .width = 400
'         .Visible = True
'         .Locked = True
'         .TabStop = True
'         .TabIndex = 3
'         .MaxLength = 3
'     End With
'    '----------------------------------------------------------
'    'The prompts in picture1(0) for this section, including the
'    'four labels for preg class, resticted, drowsy and s8
'    '----------------------------------------------------------
'    With Label2(5)  'type eg BP
'        .Caption = "Type"
'       End With
'    With Label2(6) ' eg 120/70
'        .Caption = "Value"
'    End With
'    With Label2(7)
'        .Caption = "Date"
'         End With
'    With Label2(8)
'        .Caption = "Comment"
'        End With
'    With Label2(9)
'         .Caption = "??"
'         .Visible = False
'    End With
'    With Command3(3)
'         .Caption = "Graph"
'         .Visible = True
'    End With
'    With Command3(0)
'         .Caption = "Next value"
'         .Visible = True
'    End With
'    Design_DisplayShadows
'    With List1(0) 'holds the measurement types
'        .width = Picture3.width / 2
'        .height = Shape2(8).toP - (sspanel2(1).toP + sspanel2(1).height)
'    End With
'    With List1(1)
'        .toP = List1(0).toP
'        .left = List1(0).left + List1(0).width - 12
'        .height = List1(0).height
'        .width = Picture3.width - List1(0).width
'        .Visible = True
'    End With
'
'    sspanel2(2).Visible = False
'    RichTextBox1(0).Visible = False
'     SSActiveToolBars1.Tools("ID_Print").Enabled = False
'    bExitRoutine = False
'   End Sub
' Sub Measurement_Types_getList()
'     '------------------------------------------------------------------
'     'Gets list of measurement types from database eg weight, height etc
'     '------------------------------------------------------------------
'      Set Db = OpenDatabase(sMEDREC_MDB, False)
'      Set Q = Db.QueryDefs("MRQ_Measure_GetListAllTypes")
'      Q("Enter Type") = Trim(Text3(0))
'      DisplayRecordset Data1, TDBGrid2, Text3(0)
' End Sub
' Sub DisplayRecordset(sDataCtrl As Control, sGrid As Control, sTextbox As Control)
'     '----------------------------------------------------------
'     'displays the recordset from the sCtrl datacontrol in sGrid
'     '----------------------------------------------------------
'     Screen.MousePointer = vbHourglass
'     Set sDataCtrl.Recordset = Q.OpenRecordset()
'     If RecordsExist(sDataCtrl) And Len(sTextbox) Then
'        Picture2.Visible = True: Picture2.ZOrder
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
' Sub General_getList(sText As String, sDataSource As String, sQuery As String)
'     Screen.MousePointer = vbHourglass
'     Data1.DatabaseName = sDataSource
'     Data1.RecordSource = sQuery
'
'     Data1.Refresh
'     TDBGrid2.ReBind
'     If RecordsExist(Data1) And Len(sText) Then
'        Picture2.Visible = True: Picture2.ZOrder
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
' Sub General_Select(iImage As Integer, sText As Control, datactrl As Control)
'     If bExitRoutine Then
'        Exit Sub
'     End If
'     bExitRoutine = True
'     If itdbgrid2_image = iImage And Picture2.Visible Then
'         If RecordsExist(datactrl) Then
'            With Data1.Recordset
'                sText = datactrl.Recordset!Description
'            End With
'         End If
'     End If
'     Picture2.Visible = False
'     bExitRoutine = False
' End Sub
' Sub Measure_Type_Select()
'    bExitRoutine = True
'    If itdbgrid2_image = cGrID_Image_Measurements And Picture2.Visible Then
'       If RecordsExist(Data1) Then
'          Picture2.Visible = False
'          DoEvents
'          With Data1.Recordset
'             Text3(0) = !Description
'             gtMeasurement(0).Description = Text3(0)
'             gtMeasurement(0).Key_Restriction_ID = !Key_Restriction_ID
'             gtMeasurement(0).Type_ID = !Type_ID
'             gtMeasurement(0).Unit_text = "" & !Unit_text
'             If Not IsNull(!Unit_ID) Then
'                 gtMeasurement(0).Unit_ID = !Unit_ID
'             End If
'             gtMeasurement(0).Full_Description = "" & !Full_Description
'           End With
'
'        End If
'     End If
'
'
'
'    bExitRoutine = False
' End Sub
' Sub Patient_GetMeasurements()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  lMeasurementType_ID           iY                                                      *
' '******************************************************************************************
'
'     On Error GoTo PGME:
'     '------------------------------------------------------------------
'     'Gets set of unique measurement types for patient. Note: the values
'     'are loaded as needed when list1(0) clicked on
'     '-------------------------------------------------------------------
'     Dim ix As Integer
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Measurements_GetTypesForPatient")
'     Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'     Set Rs = Q.OpenRecordset(dbOpenDynaset)
'     Erase gtPatient(1).Measurements()
'     With Rs
'         Do Until .EOF
'             ReDim Preserve gtPatient(1).Measurements(ix)
'             gtPatient(1).Measurements(ix).Data_Changed = False
'             gtPatient(1).Measurements(ix).Deleted = False
'             gtPatient(1).Measurements(ix).Type_ID = !Type_ID
'             gtPatient(1).Measurements(ix).Description = !Description
'             gtPatient(1).Measurements(ix).Full_Description = "" & !Full_Description
'             gtPatient(1).Measurements(ix).Key_Restriction_ID = !Key_Restriction_ID
'             On Error Resume Next
'             gtPatient(1).Measurements(ix).Unit_ID = !Unit_ID
'             On Error GoTo 0
'             gtPatient(1).Measurements(ix).Unit_text = "" & !Unit_text
'             ix = ix + 1
'            .MoveNext
'         Loop
'         .Close
'     End With
'     Db.Close
'     Exit Sub
' PGME:
'     On Error Resume Next
'     Db.Close
'     Exit Sub
' End Sub
' Sub Measure_Save()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  iExistingRecord               sMsg                                                    *
' '******************************************************************************************
'
'    If gtPatient(1).Measurement_DataChanged = False Then Exit Sub
'    On Error GoTo mserror
'    Screen.MousePointer = vbHourglass
'    '-------------------------------
'    'Saves the patients measurements
'    '-------------------------------
'    Dim ix As Integer
'    Dim iY As Integer
'    On Error Resume Next
'    ix = -1
'    ix = UBound(gtPatient(1).Measurements())
'    If ix = -1 Then Exit Sub
'    '---------------------------------
'    'Save consult if not already saved
'    '---------------------------------
'     If iConsultIDSaved = False Then
'         Save_ConsultID
'     End If
'     On Error GoTo 0
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Set Db = ws.OpenDatabase(sMEDREC_MDB, False) 'open for read/write
'     For ix = 0 To UBound(gtPatient(1).Measurements())
'       '------------------------------------------
'       'Only change record if the data was changed
'       '------------------------------------------
'       If gtPatient(1).Measurements(ix).Data_Changed _
'          And gtPatient(1).Measurements(ix).Deleted = False Then
'          '-----------------------------------------------------------
'          'For each set of values in each measurement type add or edit
'          '-----------------------------------------------------------
'          For iY = 0 To UBound(gtPatient(1).Measurements(ix).Values())
'           If gtPatient(1).Measurements(ix).Values(iY).DataChanged Then
'             '--------------------------------------------------------
'             'If this value is being edited do all the archiving stuff
'             '--------------------------------------------------------
'             If gtPatient(1).Measurements(ix).Values(iY).Measurement_ID <> 0 Then
'                Measure_DeleteAndArchiveValue ix, iY, mrArchived_Changed
'             End If
'             '-------------------------------------------------
'             'Now add the record to the data_measurements table
'             '-------------------------------------------------
'             Set Q = Db.QueryDefs("MRQ_Measurements_AddNew_Measurement")
'             Q("Enter Consult_ID") = gtconsult.Consult_ID
'             Q("Enter Type_ID") = gtPatient(1).Measurements(ix).Type_ID
'             Q("Enter Date_noted") = gtPatient(1).Measurements(ix).Values(iY).Date
'             Q("Enter Comment") = gtPatient(1).Measurements(ix).Values(iY).Comment
'             Q("Enter Measurement") = gtPatient(1).Measurements(ix).Values(iY).Value
'             Q.Execute
'             gtPatient(1).Measurements(ix).Values(iY).Saved = mrSaveUncommitted
'             '-------------------------------------------
'             'Now save progress notes for the measurement
'             '-------------------------------------------
'          End If
'         Next iY
'         End If
'     Next ix
'
'     Db.Close
'     ws.CommitTrans
'     If gtPatient(1).Measurement_DataChanged Then
'        Measure_SetcommitFlags True
'     End If
'     Screen.MousePointer = vbArrow
'     Exit Sub
' mserror:
'     On Error Resume Next
'     ws.Rollback
'     Db.Close
'     ws.Close
'      Screen.MousePointer = vbArrow
'     Measure_SetcommitFlags False
'   '  gtPatient(1).Allergies(ix).Deleted = False
'     Exit Sub
' End Sub
' Sub Measure_Accept()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  sMsg                                                                                  *
' '******************************************************************************************
'
'    bExitRoutine = True
'    '----------------------------------------------------------
'    'Accepts the data in the editing area into gtpatient(1).scripts()
'    '----------------------------------------------------------
'    Dim ix As Integer
'    Dim iY As Integer
'    Dim icounter As Integer
'    Dim iTypeExists As Integer
'    Dim sLastEnteredType As String
'    Dim sLastEnteredDetails As String
'    '-------------------
'    'Ensure minimum data
'    '-------------------
'    For icounter = 0 To 2
'        If Trim(Text3(icounter)) = "" Then
'           Text3(icounter).SetFocus
'           bExitRoutine = False
' Exit Sub
'        End If
'    Next
'    bExitRoutine = False
'    If iEditing = False Then
'         On Error Resume Next
'         '----------------------------------------------
'         'First does this measurement exist in the array
'         '----------------------------------------------
'          ix = UBound(gtPatient(1).Measurements())
'          If Err.Number = 9 Then
'              '------------------------
'              'No?, create first member
'              '------------------------
'              ReDim Preserve gtPatient(1).Measurements(0)
'              gtPatient(1).Measurements(0) = gtMeasurement(0)
'              ix = 0
'          Else
'              '-------------------------------
'              'Yes, find if measurement exists
'              '-------------------------------
'              iTypeExists = False
'              For ix = 0 To UBound(gtPatient(1).Measurements())
'                  If gtPatient(1).Measurements(ix).Type_ID = _
'                      gtMeasurement(0).Type_ID Then
'                      iTypeExists = True
'                      Exit For
'                  End If
'              Next
'              '-------------------------------------------------------
'              'If this type does not exists equate whole array to give
'              'new measurement type and its first data member
'              '-------------------------------------------------------
'              If iTypeExists = False Then
'                 ReDim Preserve gtPatient(1).Measurements(ix)
'                 gtPatient(1).Measurements(ix) = gtMeasurement(0)
'                 gtPatient(1).Measurements(ix).Data_Changed = True
'              End If
'          End If
'            '------------------------------------------------------------
'            'If this type of measurement exists it must have at least one
'            'values item, so increment this array and add the new data
'            '------------------------------------------------------------
'
'            If iTypeExists Then
'               iY = UBound(gtPatient(1).Measurements(ix).Values()) + 1
'                gtPatient(1).Measurements(ix).Data_Changed = True
'            End If
'            ReDim Preserve gtPatient(1).Measurements(ix).Values(iY)
'     Else
'         ix = List1(0).ItemData(List1(0).ListIndex)
'         iY = List1(1).ListIndex
'     End If
'     '--------------------------------------------------------
'     'BP measurement is the exception, always store a 6 digits
'     'convert 120/80 to 120080
'     '--------------------------------------------------------
'     sLastEnteredType = gtMeasurement(0).Full_Description
'     If gtMeasurement(0).Type_ID = mrMeasure_BP Then
'        lcharpos = InStr(gtMeasurement(0).Values(0).Value, "/")
'        gtMeasurement(0).Values(0).Value = Format(left(gtMeasurement(0).Values(0).Value, lcharpos - 1), "000") _
'        & Format(right(gtMeasurement(0).Values(0).Value, Len(gtMeasurement(0).Values(0).Value) - lcharpos), "000")
'     End If
'     gtPatient(1).Measurements(ix).Values(iY) = gtMeasurement(0).Values(0)
'     gtPatient(1).Measurements(ix).Data_Changed = True
'     gtPatient(1).Measurements(ix).Values(iY).DataChanged = True
'     gtPatient(1).DataChanged = True
'     gtPatient(1).Measurement_DataChanged = True
'     sLastEnteredDetails = gtMeasurement(0).Values(0).Date & " - " _
'                      & gtMeasurement(0).Values(0).Value & " "
'
'    Measure_Save
'    Measure_Values_GetForType gtPatient(1).Measurements(List1(0).ItemData(List1(0).ListIndex)).Type_ID, List1(0).ItemData(List1(0).ListIndex)
'    Measure_Display_Types
'    Command3_Click (0) 'clear area but keep the measurement type
'    '------------------------------------
'    'Reset the lists to reflect this type
'    '------------------------------------
'    For icounter = 0 To List1(0).ListCount
'        If InStr(List1(0).List(icounter), sLastEnteredType) Then
'           List1(0).ListIndex = icounter
'           Exit For
'        End If
'    Next
'    For icounter = 0 To List1(1).ListCount
'       If InStr(List1(1).List(icounter), sLastEnteredDetails) Then
'          List1(1).ListIndex = icounter
'         Exit For
'        End If
'    Next
'    bExitRoutine = False
' End Sub
' Sub Measure_Display_Types()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  icounter                                                                              *
' '******************************************************************************************
'
'     On Error GoTo MDTE
'     Dim ix As Integer
'     Dim sMsg As String
'     Dim sMeasurement As String 'don't use ID as may be zero
'     List1(0).Clear
'     List1(1).Clear
'     On Error Resume Next
'     ix = UBound(gtPatient(1).Measurements())
'     If Err.Number = 9 Then
'        Exit Sub
'     End If
'     For ix = 0 To UBound(gtPatient(1).Measurements())
'        If gtPatient(1).Measurements(ix).Deleted = False Then
'                 If gtPatient(1).Measurements(ix).Description <> sMeasurement Then
'                    sMsg = gtPatient(1).Measurements(ix).Description & "  ( "
'                    sMsg = sMsg & gtPatient(1).Measurements(ix).Full_Description & ") "
'                    List1(0).AddItem sMsg
'                    List1(0).ItemData(List1(0).NewIndex) = ix
'                    sMeasurement = gtPatient(1).Measurements(ix).Description
'                 End If
'
'         End If
'     Next
'
'     ReDim gtMeasurement(0)
'     List1(0).ListIndex = 0
'     Exit Sub
' MDTE:
'     Exit Sub
' End Sub
' Sub Measure_Values_DisplayForType()
'     '------------------------------------------------------------
'     'Displays all the values for the measurement type in list1(0)
'     'If get to this point there must be values in the values()
'     '------------------------------------------------------------
'     Dim iArrayIndex
'     Dim sMsg As String
'     Dim ix As Integer
'     List1(1).Clear
'     iArrayIndex = List1(0).ItemData(List1(0).ListIndex)
'     For ix = 0 To UBound(gtPatient(1).Measurements(iArrayIndex).Values())
'        If gtPatient(1).Measurements(iArrayIndex).Deleted = False Then
'             sMsg = gtPatient(1).Measurements(iArrayIndex).Values(ix).Date & " - " _
'                  & gtPatient(1).Measurements(iArrayIndex).Values(ix).Value & " " _
'                  & gtPatient(1).Measurements(iArrayIndex).Unit_text
'              List1(1).AddItem sMsg
'          End If
'      Next
' End Sub
' Sub Graph(sTitle As String, lTypeID As Long, yAxisTExt As String, sGraph_File As String, lozcode As Long)
'     '---------------------------------------------
'     'Open the database and run the parameter query
'     '---------------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Graph_Item")
'     Q("Enter ID") = gtPatient(1).Patient_ID
'     Q("Enter TypeID") = lTypeID
'     Set Rs = Q.OpenRecordset(dbOpenDynaset)
'     Pego1.PEactions = 20
'     With Pego1
'         '-------------------------------
'         'Set the properties of the graph
'         '-------------------------------
'          .MainTitle = ""
'          .MainTitleFont = "Ms Sans Serif"
'          .PointsToGraph = 10
'          .SubTitle = ""
'          .YAxisLabel = yAxisTExt
'          .FontSize = PEFS_LARGE
'          .GraphPlusTable = PEGPT_BOTH
'          .FocalRect = True
'          .FontSizeLegendCntl = 0.8
'          .FontSizeGlobalCntl = 1.1
'          .GridLineControl = 3
'          .GraphBackColor = vbLightYellow
'          .AllowHorizontalBar = True
'          .AllowAnnotationControl = True
'          .LineAnnotationTextSize = 95
'          '------------------------------------------------------
'          'The recordcount is the total number of graphing points
'          '------------------------------------------------------
'          .SubsetLineTypes(0) = PELT_THINSOLID
'          Pego1.NoStackedData = False
'          .PlottingMethod = Rs!PlottingMethod_ID
'
'          .ShowAnnotations = True
'           If Not IsNull(Rs!upper_Limit) Then
'                 .HorzLineAnnotation(0) = Rs!upper_Limit
'                 .HorzLineAnnotationType(0) = PELT_THINSOLID
'                 .HorzLineAnnotationColor(0) = QBColor(10)
'           Else
'                 .HorzLineAnnotation(0) = False
'           End If
'           If Not IsNull(Rs!lower_limit) Then
'                 .HorzLineAnnotation(1) = Rs!lower_limit
'                 .HorzLineAnnotationType(1) = PELT_THINSOLID
'                .HorzLineAnnotationColor(1) = QBColor(10)
'           Else
'             .HorzLineAnnotation(1) = False
'           End If
'           If IsNull(Rs!upper_Limit) And IsNull(Rs!lower_limit) Then
'              .ShowAnnotations = False
'           End If
'           If Rs!Type_ID = mrMeasure_BP Then
'                 .Subsets = 2
'                 .SubsetColors(0) = QBColor(12)
'                 .SubsetColors(1) = QBColor(2)
'                 .SubsetsToLegend(0) = -1
'                 .SubsetPointTypes(1) = PEPT_DOTSOLID
'           Else
'                 .SubsetColors(0) = QBColor(12)
'                 .Subsets = 1
'           End If
'          .Points = Rs.RecordCount
'     End With
'     icounter = 0
'     With Rs
'         Pego1.PlottingMethod = Rs!PlottingMethod_ID
'         sGraph_File = "" & !Graph_SupportFile
'         If Not IsNull(!Ozcode) Then
'            lozcode = !Ozcode
'         End If
'         Do Until .EOF
'             If !Type_ID = mrMeasure_BP Then
'                Pego1.YData(0, icounter) = Int(!Measurement / 1000)
'                Pego1.YData(1, icounter) = Int(!Measurement Mod 1000)
'             Else
'                 Pego1.YData(0, icounter) = !Measurement
'             End If
'             Pego1.PointLabels(icounter) = Format(!Date_Noted, "Short Date")
'             icounter = icounter + 1
'             .MoveNext
'         Loop
'
'         .Close
'    End With
'    Db.Close
'    Pego1.PEactions = 0  'Better than Refresh
'     With Picture5
'         .left = Picture3.left
'         .toP = Picture3.toP
'         .height = Picture3.height
'         .width = Picture3.width
'         .Visible = True 'the container
'         .ZOrder
'     End With
'          Command2(4).Visible = False
'          Command2(3).Visible = False
'          With Pego1
'             .ZOrder
'             .toP = Picture3.toP + sspanel2(0).height + 10
'             .width = RichTextBox1(1).width - 100
'             .height = (Picture3.height - sspanel2(0).height) / 2
'             .left = RichTextBox1(1).left
'             .Visible = True
'          End With
'           Analyse_Graph_Disease lozcode
'          With RichTextBox1(1)
'             .toP = Pego1.toP + Pego1.height + 20
'             .BorderStyle = rtfNoBorder
'             '.filename = "C:\medrec\decision support\DS_InR.rtf"
'             On Error Resume Next
'             If sGraph_File <> "" Then
'                .FileName = sDecSupp_Dir & "\" & sGraph_File
'                If Err.Number = 75 Then
'                  .Text = ""
'                End If
'             Else
'              .Text = ""
'             End If
'          End With
'         Image1.Visible = False
'         Label1.Visible = False
'         With Label4
'             .Visible = True
'             .Caption = StrConv(sTitle, vbUpperCase)
'             .Font.Name = "Verdana"
'             .Font.Size = 7
'
'         End With
'         Text7.Visible = False
'         iCentralDisplay = True
'
' End Sub
'
' Sub Measure_Graph_item()
'   '  Dim ix As Integer
'   '  If List1(0).ListIndex <> -1 Then
'   '      ix = List1(0).ItemData(List1(0).ListIndex)
'   '      Graph gtPatient(1).Measurements(ix).Full_Description, _
'   '             gtPatient(1).Measurements(ix).Type_ID, _
'   '             gtPatient(1).Measurements(ix).Description
'   '  End If
' End Sub
' Sub Measure_AvailableList()
'     '-------------------------------------------------------
'     'list of distinct graphable measurements for the patient
'     '-------------------------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Measurements_GetTypesForPatient")
'     Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'     Set Data2.Recordset = Q.OpenRecordset()
'     Load_Layout "Graphs", TDBGrid1(0), cGrID_Image_AvailableGraphs
'     DoEvents
'  End Sub
'
'
'
'
'
'
'
'
' Sub Script_HideArray(iFlag As Boolean)
'         '--------------------------
'         'Reset all the hidden flags
'         '--------------------------
'         For icounter = 0 To UBound(gtPatient(1).Scripts())
'             gtPatient(1).Scripts(icounter).Hidden = iFlag
'         Next
' End Sub
'
'
' Sub Requests_Forms_Save()
'    Dim iExistingRecord As Integer
'    Dim SProgressText As String
'    Dim sMsg As String
'    Dim iY As Integer
'    Dim iForm As Integer
'    Dim db1 As Database
'    '----------------
'    'Exit if no forms
'    '----------------
'    On Error Resume Next
'    iY = UBound(gtPatient(1).Forms())
'
'    If Err.Number = 9 Then Exit Sub
'    On Error GoTo 0
'    '---------------------------------
'    'Save consult if not already saved
'    '---------------------------------
'     If iConsultIDSaved = False Then
'         Save_ConsultID
'     End If
'    On Error GoTo RSError
'    Database_Lock
'    Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'    ws.BeginTrans
'    Set Db = ws.OpenDatabase(sMEDREC_MDB, False) 'open for read/write
'    Set db1 = ws.OpenDatabase(sContacts_MDB, False)
'    On Error GoTo 0
'    For iForm = 0 To UBound(gtPatient(1).Forms())
'       '------------------------------------------
'       'Only save record if the data was changed
'       '------------------------------------------
'       If gtPatient(1).Forms(iForm).DataChanged _
'          And gtPatient(1).Forms(iForm).Saved = False _
'          And gtPatient(1).Forms(iForm).Hidden = False Then
'          '--------------------------------------------------------------------------------------
'          'If provider and address used then update the MRQ_Data_Links_Organisations_RequestTypes
'          'table otherwise add a new record
'          '--------------------------------------------------------------------------------------
'         If gtPatient(1).Forms(iForm).Provider.Address_Weighting = 0 Then
'             Set Q = db1.QueryDefs("MRQ_Requests_Providers_Address_Weighting_AddNew")
'             Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'             Q("Enter Request_Type_ID") = gtPatient(1).Forms(iForm).Provider.Type_ID
'             Q("Enter Organisation_ID") = gtPatient(1).Forms(iForm).Provider.ID
'             Q("Enter Address_ID") = gtPatient(1).Forms(iForm).Provider.Address.ID
'             Q("Enter Weighting") = 1
'             Q.Execute
'          Else
'             Set Q = db1.QueryDefs("MRQ_Requests_Providers_Address_Weighting_Increment")
'             Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'             Q("Enter Request_Type_ID") = gtPatient(1).Forms(iForm).Provider.Type_ID
'             Q("Enter Organisation_ID") = gtPatient(1).Forms(iForm).Provider.ID
'             Q("Enter Address_ID") = gtPatient(1).Forms(iForm).Provider.Address.ID
'             Q("Enter Weighting") = gtPatient(1).Forms(iForm).Provider.Address_Weighting + 1
'             Q.Execute
'          End If
'          '-------------------------------------------------------------------------------------
'          'If the service provider is not linked to a request category, link it, or increment it
'          'if already linked
'          '-------------------------------------------------------------------------------------
'          If gtPatient(1).Forms(iForm).Provider.Request_Link_ID = 0 Then
'              Set Q = db1.QueryDefs("MRQ_Requests_Providers_Types_Weighting_AddNew")
'             Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'             Q("Enter Request_Type_ID") = gtPatient(1).Forms(iForm).Provider.Type_ID
'             Q("Enter Organisation_ID") = gtPatient(1).Forms(iForm).Provider.ID
'             Q("Enter Address_iD") = gtPatient(1).Forms(iForm).Provider.Address.ID
'             Q("Enter Weighting") = gtPatient(1).Forms(iForm).Provider.Provider_Weighting + 1
'             Q.Execute
'          Else
'             Set Q = db1.QueryDefs("MRQ_Requests_Providers_Types_Weighting_Increment")
'             Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'             Q("Enter Request_Type_ID") = gtPatient(1).Forms(iForm).Provider.Type_ID
'             Q("Enter Organisation_ID") = gtPatient(1).Forms(iForm).Provider.ID
'             Q("Enter Address_iD") = gtPatient(1).Forms(iForm).Provider.Address.ID
'             Q("Enter Weighting") = gtPatient(1).Forms(iForm).Provider.Provider_Weighting + 1
'             Q.Execute
'          End If
'          '----------------------------------------------------------
'          'First see if the clinical notes for this request exist, if
'          'yes get existing ID otherwise add a new record
'          '----------------------------------------------------------
'          Set Rs = Db.OpenRecordset("Data_Requests_FormsNotes", dbOpenTable)
'          With Rs
'              .Index = "Notes"
'              .Seek "=", gtPatient(1).Forms(iForm).Notes
'              If .NoMatch Then
'                 iExistingRecord = False
'                 .AddNew
'                 !Notes = gtPatient(1).Forms(iForm).Notes
'                 .Update
'                  .Seek "=", gtPatient(1).Forms(iForm).Notes
'                  gtPatient(1).Forms(iForm).Notes_ID = !ID
'              Else
'                 iExistingRecord = True
'                 .Edit
'                 gtPatient(1).Forms(iForm).Notes_ID = !ID
'              End If
'              .Close
'           End With
'           '--------------------------------------------------------
'           'If a form is being re-printed and the form requests have
'           'changed, archive the old form before adding a new one
'           'this is necessary because eg form notes as well as type
'           'and number of requests could have changed.
'           '--------------------------------------------------------
'           If gtPatient(1).Forms(iForm).Form_ID <> 0 Then
'               '---------------------------------
'               'Archive and mark deleted the form
'               '---------------------------------
'               Set Q = Db.QueryDefs("MRQ_Requests_Forms_Archive")
'               Q("Enter Form_ID") = gtPatient(1).Forms(iForm).Form_ID
'               Q.Execute
'               Set Q = Db.QueryDefs("MRQ_Requests_Forms_Archive_Duringconsult")
'               Q("Enter Form_ID") = gtPatient(1).Forms(iForm).Form_ID
'               Q("Enter Consult_ID") = gtconsult.Consult_ID
'               Q("Enter Archive_Reason_ID") = mrArchived_Changed
'               Q.Execute
'               Set Q = Db.QueryDefs("MRQ_Requests_Forms_MarkDeleted")
'               Q("Enter Form_ID") = gtPatient(1).Forms(iForm).Form_ID
'               Q.Execute
'               '-------------------------------------------------------
'               'Archive and mark deleted requests attatched to the form
'               '-------------------------------------------------------
'               Set Q = Db.QueryDefs("MRQ_Requests_FormsRequests_Archive")
'               Q("Enter Form_ID") = gtPatient(1).Forms(iForm).Form_ID
'               Q.Execute
'               Set Q = Db.QueryDefs("MRQ_Requests_FormsRequests_Archive_Duringconsult")
'               Q("Enter Form_ID") = gtPatient(1).Forms(iForm).Form_ID
'               Q("Enter Consult_ID") = gtconsult.Consult_ID
'               Q("Enter Archive_Reason_ID") = mrArchived_Changed
'               Set Q = Db.QueryDefs("MRQ_Requests_FormsRequests_MarkDeleted")
'               Q("Enter Record_ID") = gtPatient(1).Forms(iForm).Form_ID
'               Q.Execute
'               '---------------------------------------
'               'Archive the progress notes for the form
'               '---------------------------------------
'               Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'               Q("Enter Consult_ID") = gtconsult.Consult_ID
'               Q("Enter Table_ID") = MrTable_Requests
'               Q("Enter Record_ID") = gtPatient(1).Forms(iForm).Form_ID
'               Q.Execute
'           End If
'           '------------------------------------------------------
'           'Now add a new entry to the data_Requests_Forms table
'           'single entry for each request form generated
'           '------------------------------------------------------
'           Set Rs = Db.OpenRecordset("Data_Requests_Forms", dbOpenTable)
'           With Rs
'                 .AddNew
'                 !Consult_ID = gtconsult.Consult_ID
'                 !Type_ID = gtPatient(1).Forms(iForm).Provider.Type_ID
'                 !Notes_ID = gtPatient(1).Forms(iForm).Notes_ID
'                 !Requests_Summary = gtPatient(1).Forms(iForm).Request_Summary
'                 !Organisation_ID = gtPatient(1).Forms(iForm).Provider.ID
'                 .Update
'                 .MoveLast
'                  gtPatient(1).Forms(iForm).Form_ID = !Form_ID
'                 .Close
'           End With
'           '----------------------------------------------------------
'           'For each request add entry to Data_Requests_Requests table
'           '----------------------------------------------------------
'           Set Rs = Db.OpenRecordset("Data_Requests_FormsRequests", dbOpenTable)
'           With Rs
'               For iY = 0 To UBound(gtPatient(1).Forms(iForm).Request())
'                     If gtPatient(1).Forms(iForm).Request(iY).Deleted = False Then
'                         .AddNew
'                         !Form_ID = gtPatient(1).Forms(iForm).Form_ID
'                         !Request_ID = gtPatient(1).Forms(iForm).Request(iY).Request_ID
'                         !Provider_ID = gtPatient(1).Forms(iForm).Provider.ID
'                         !Lateralisation_ID = gtPatient(1).Forms(iForm).Request(iY).Lateralisation_ID
'                         .Update
'                         .MoveLast
'                         gtPatient(1).Forms(iForm).Request(iY).Record_ID = !Record_ID
'                     End If
'               Next iY
'               .Close
'            End With
'            gtPatient(1).Forms(iForm).Saved = mrSaveUncommitted
'            '-----------------------
'            'Save the progress notes
'            '-----------------------
'            With gtPatient(1).Forms(iForm)
'                 SProgressText = .Provider.Name & " for "
'                     sMsg = .Request_Summary
'                     ReplaceCharacter sMsg, ";", ", "
'                     TrimLastChar sMsg
'                 SProgressText = SProgressText & sMsg & ". "
'                      sMsg = .Notes
'                     ReplaceCharacter sMsg, ";", ", "
'                     TrimLastChar sMsg
'                 SProgressText = SProgressText & " Clinical information printed: " _
'                      & StrConv(sMsg, vbLowerCase) & ". "
'                 If .CopyTo.Surname <> "" Then
'                    SProgressText = SProgressText & "A Copy was sent to " _
'                      & Trim(.CopyTo.Title & " " & .CopyTo.Firstname & " " _
'                      & .CopyTo.Surname) & "."
'                 End If
'                 If gtPatient(1).Forms(iForm).ProgressNotes <> "" Then
'                    SProgressText = SProgressText & gtPatient(1).Forms(iForm).ProgressNotes & "."
'                 End If
'           End With
'
'           Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'             ProgressNotes_Save pnClinicalNotes, pnRequests, _
'                 pnRequests, "REQUESTS", _
'                 SProgressText, True, _
'                 MrTable_Requests, _
'                 gtPatient(1).Forms(iForm).Form_ID, _
'                 gtProgressNotes(0).Segments(pnClinicalNotes).SubHeadings(pnRequests).Notes_order, _
'                 Rs
'           Rs.Close
'        End If
'     Next
'     ws.CommitTrans
'     Db.Close
'     db1.Close
'     ws.Close
'     Database_Unlock
'     '--------------------------------------------
'     'Transaction committed flag as committed save
'     '--------------------------------------------
'     For iForm = 0 To UBound(gtPatient(1).Forms())
'         If gtPatient(1).Forms(iForm).Saved = mrSaveUncommitted Then
'                gtPatient(1).Forms(iForm).Saved = mrSaveCommitted
'                gtPatient(1).Forms(iForm).DataChanged = False
'         End If
'     Next
'     If SSActiveTabs1.SelectedTab.Key = "requests" Then
'         Requests_Patients_List_Get
'     End If
'     Screen.MousePointer = vbArrow
'     Exit Sub
' RSError:
'      On Error Resume Next
'      ws.Rollback
'      Rs.Close
'      Db.Close
'      ws.Close
'      Database_Unlock
'     '---------------------------------------------
'     'Transaction not committedflag as uncommitted
'     '---------------------------------------------
'     For iForm = 0 To UBound(gtPatient(1).Forms())
'         If gtPatient(1).Forms(iForm).Saved = mrSaveUncommitted Then
'            gtPatient(1).Forms(iForm).Saved = 0
'            gtPatient(1).Forms(iForm).DataChanged = True
'         End If
'     Next
'     Screen.MousePointer = vbArrow
'
' End Sub
'
' Sub Requests_Forms_Print_All()
'    On Error GoTo RFPError
'    Dim iForm As Integer
'    For iForm = 0 To UBound(gtPatient(1).Forms())
'         '---------------------------------------
'         'If the form has not been printed, do so
'         '---------------------------------------
'         If gtPatient(1).Forms(iForm).Hidden = False _
'            And gtPatient(1).Forms(iForm).Printed = False And gtPatient(1).Forms(iForm).Deleted = False Then
'            Requests_Forms_Print_Single (iForm)
'            gtPatient(1).Forms(iForm).Printed = True
'         End If
'     Next
'     Exit Sub
' RFPError:
'    Exit Sub
' End Sub
' Sub Script_EditArea_Clear()
'     '---------------------------------------------------
'     'Clears the editing area in preparation for new item
'     '---------------------------------------------------
'     Picture2.Visible = False
'     DoEvents
'     Label2(7).Caption = "Drug"
'     If itdbgrid1_image <> cGrID_Image_Medications Then
'        SSActiveTabs1.SelectedTab = 1
'       Patient_Get_Medications True
'     End If
'     bExitRoutine = True
'     Text5 = ""
'     Label8.Visible = False
'    ' RichTextBox1(0).Visible = False
'     ReDim gtNew_ScriptItem(0) 'erase existing data
'     ReDim gtNew_ScriptItem(0)
'     ReDim gtScript_ItemCopy(0)
'     For icounter = 0 To 1
'         check1(icounter).Value = False
'     Next
'     If gtPatient(1).Concession = 4 Then 'all veteran
'       gtNew_ScriptItem(0).Veteran = True
'       check1(0).Value = 1
'     End If
'     gtNew_ScriptItem(0).Current_medication = True
'     check1(6).Value = 1  'default to current medications
'     Label3.Caption = ""
'     Command3(0).Caption = ">&Authority"
'     With Text2(0)
'       .Visible = False
'       .Text = ""
'     End With
'     With Text2(1)
'        .Visible = False
'        .Text = ""
'     End With
'     Text2(2).Text = sToday
'     Label3.Visible = False
'     Label2(0).Visible = False
'     Label2(1).Visible = False
'     With check2(0)
'          .Visible = False
'          .Value = False
'     End With
'     With check2(1)
'       .Visible = False
'       .Value = False
'     End With
'       For icounter = 0 To 7
'           Text3(icounter) = ""
'           If icounter <> 3 Then
'               Text3(icounter).Locked = False
'               Text3(icounter).Enabled = True
'           End If
'       Next
'
'       For icounter = 0 To 3
'           Label7(icounter).Visible = False
'       Next
'
'       lblMasterHeading = "SCRIPT"
'       Text1 = ""
'       iEditing = False
'       TempText = ""
'       bExitRoutine = False
' End Sub
' Sub Script_PastMeds_Delete()
'    Dim sMsg As String
'    Dim sAuditText As String
'    Dim lAudit_ID As Long
'    Dim iCancel As Integer
'     sMsg = "Before deleting the script item " _
'         & Data2.Recordset.drug & " from the patients record, you must enter " _
'         & "a reason for doing this.  If the patient is no longer taking  the " _
'         & "medication, you should transfer it to the inactive list rather than " _
'         & "deleting it from the patients record."
'     AuditTrail_Delete_GetReason sAuditText, lAudit_ID, sMsg, iCancel, "Medications"
'     If iCancel Then
'         Exit Sub
'     End If
'    '---------------------------------
'    'Save consult if not already saved
'    '---------------------------------
'     If iConsultIDSaved = False Then
'         Save_ConsultID
'     End If
'     Screen.MousePointer = vbHourglass
'     On Error GoTo SMDE:
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'         '--------------------------------------------------------
'         'Archive the unique record in the data_script_dates table
'         '--------------------------------------------------------
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Q = Db.QueryDefs("MRQ_Script_Archive_PastMedication")
'         Q("Enter ScriptDate_ID") = Data2.Recordset!ScriptDate_Id
'         Q.Execute
'         '------------------------------------------------
'         'Now insert the consult_ID at which this was done
'         '------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_Script_Archive_PastMedication_DuringConsult")
'         Q("Enter ScriptDate_ID") = Data2.Recordset!ScriptDate_Id
'         Q("Enter Consult ID") = gtconsult.Consult_ID
'         Q("Enter Archive_Reason_ID") = mrArchived_Deleted
'         Q.Execute
'         '------------------------------
'         'Mark the record(s) as unavailable
'         '------------------------------
'         Set Q = Db.QueryDefs("MRQ_Script_Archive_PastMedication_MarkDeleted")
'         Q("Enter ScriptDate_ID") = Data2.Recordset!ScriptDate_Id
'         Q.Execute
'         '-----------------------
'         'Make the progress notes
'         '-----------------------
'         sMsg = Data2.Recordset!drug & " " & TDBGrid1(0).Columns(1).Text _
'           & " " & Data2.Recordset!Instruction _
'           & " for " & Data2.Recordset!Prescribed_For & " was deleted " _
'           & "from the patients medication list.(Audit trail -'" & sAuditText & "')."
'         '--------------------------------
'         'Add record to the progress notes
'         '--------------------------------
'         Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'             ProgressNotes_Save pnGeneralHistory, pnScript_ItemDeleted, _
'                     0, "", sMsg, True, _
'                     mrTable_Scripts, _
'                     Data2.Recordset!ScriptDate_Id, _
'                     gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(pnScript_ItemDeleted).Notes_order, _
'                     Rs
'         Rs.Close
'     Db.Close
'     ws.CommitTrans
'     '---------------------------
'     'Refresh the medication list
'     '---------------------------
'     SSActiveTabs1.SelectedTab = 1
'     Patient_Get_Medications mrShowMedsActive
'     Screen.MousePointer = vbArrow
'     On Error GoTo 0
'     Exit Sub
' SMDE:
'     On Error Resume Next
'     Rs.Close: Db.Close: ws.Rollback: ws.Close: Screen.MousePointer = vbArrow
'     On Error GoTo 0
' End Sub
'
'
' Sub Script_Save_SingleItem_NoPrint()
'     Dim sMsg As String
'
'     '-------------------------------------------------------
'     'Only want to save this item, so hide all items except
'     'the one we want to save without printing
'     '-------------------------------------------------------
'     Script_HideArray True
'     '---------------------------------------------
'     'Save hightlighted item and flag it as printed
'     '---------------------------------------------
'     gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Hidden = False
'     gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).Printed = True
'     Script_Save
'     On Error GoTo SSINPE
'     Screen.MousePointer = vbHourglass
'     Database_Lock
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'             Script_PN_Format List1(0).ItemData(List1(0).ListIndex), sMsg
'             ProgressNotes_Save pnGeneralHistory, pnScript_MedicationRecorded, _
'                     0, "", sMsg, True, _
'                     mrTable_Scripts, _
'                     gtPatient(1).Scripts(List1(0).ItemData(List1(0).ListIndex)).ScriptDate_Id, _
'                    gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(pnScript_MedicationRecorded).Notes_order, _
'                    Rs
'         Rs.Close
'         Db.Close
'     ws.CommitTrans
'     ws.Close
'     Database_Unlock
'     Script_HideArray False
'     Screen.MousePointer = vbArrow
'     On Error GoTo 0
'     Exit Sub
' SSINPE:
'     On Error Resume Next
'     Rs.Close: Db.Close: ws.Rollback: ws.Close: Screen.MousePointer = vbArrow
'     On Error GoTo 0
' End Sub
' Sub Script_PN_Format(iArrayIndex As Integer, sText As String)
'   Dim sMsg As String
'   sText = gtPatient(1).Scripts(iArrayIndex).Brand & " (" _
'         & gtPatient(1).Scripts(iArrayIndex).GenericString & ") " _
'         & gtPatient(1).Scripts(iArrayIndex).Strength_Summary & " " _
'          & gtPatient(1).Scripts(iArrayIndex).No_of_packs & " * " _
'         & gtPatient(1).Scripts(iArrayIndex).Quantity & " 's " _
'         & "Rpt " & gtPatient(1).Scripts(iArrayIndex).Repeats & ", "
'         If LCase(gtPatient(1).Scripts(iArrayIndex).Instructions) <> "use as directed" Then
'             sText = sText & gtPatient(1).Scripts(iArrayIndex).Instructions & ", "
'         End If
'         If gtPatient(1).Scripts(iArrayIndex).Prescribed_For <> "not stated" Then
'            sText = sText & "For " & gtPatient(1).Scripts(iArrayIndex).Prescribed_For
'         End If
'         If right(sText, 2) = ", " Then
'             sText = left(sText, Len(sText) - 2) & "."
'         Else
'             sText = sText & "."
'         End If
'         '--------------------------------------------------
'         'Add text if authority or dated ahead or re-printed
'         '--------------------------------------------------
'         If gtPatient(1).Scripts(iArrayIndex).AuthorityScript Then
'           sText = sText & " [AUTHORITY - "
'           If gtPatient(1).Scripts(iArrayIndex).AuthPhoneApproval <> "" Then
'              sText = sText & gtPatient(1).Scripts(iArrayIndex).AuthPhoneApproval
'           Else
'              sText = sText & "no approval number recorded"
'           End If
'              sText = sText & "]."
'         End If
'         If gtPatient(1).Scripts(iArrayIndex).Script_Date <> sToday Then
'            If DateDiff("d", sToday, gtPatient(1).Scripts(iArrayIndex).Script_Date) > 0 Then
'              sText = sText & " [DATED AHEAD - "
'            Else
'             sText = sText & " [BACK DATED - "
'            End If
'            sText = sText & gtPatient(1).Scripts(iArrayIndex).Script_Date & "]."
'         End If
'         If gtPatient(1).Scripts(iArrayIndex).ClinicalNotes <> "" Then
'            sText = sText & " Notes: " & gtPatient(1).Scripts(iArrayIndex).ClinicalNotes
'         End If
'         On Error Resume Next
'         sMsg = ""
'         Select Case SSActiveToolBars1.Tools("ID_ComboBox").ComboBox.ItemData((SSActiveToolBars1.Tools("ID_ComboBox").ComboBox.ListIndex))
'         Case mrConsult_PhoneConsult
'             sMsg = " [PHONE CONSULTATION]."
'         Case mrConsult_EmailConsult
'              sMsg = "  [EMAIL CONSULTATION]."
'         Case mrConsult_PatientAbsent
'               sMsg = "  [PATIENT NOT SEEN]."
'         End Select
'         sText = sText & sMsg
' End Sub
'
'
'
' Sub Script_Save_AllItems_NoPrint()
'     On Error GoTo SSAINPE
'     Dim sMsg As String
'     '------------------------------------------------
'     'Save all items on the list without printing them
'     '------------------------------------------------
'     Script_Save
'     Screen.MousePointer = vbHourglass
'     Database_Lock
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'     Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'         For icounter = 0 To UBound(gtPatient(1).Scripts())
'             If gtPatient(1).Scripts(icounter).Printed = False Then
'                Script_PN_Format icounter, sMsg
'                ProgressNotes_Save pnGeneralHistory, pnScript_MedicationRecorded, _
'                          0, "", sMsg, True, _
'                          mrTable_Scripts, _
'                          gtPatient(1).Scripts(icounter).ScriptDate_Id, _
'                         gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(pnScript_MedicationRecorded).Notes_order, _
'                         Rs
'                gtPatient(1).Scripts(icounter).Printed = True
'             End If
'         Next
'     Rs.Close
'     Db.Close
'     ws.CommitTrans
'     Database_Unlock
'     Screen.MousePointer = vbArrow
'     On Error GoTo 0
'     Exit Sub
' SSAINPE:
'     On Error Resume Next
'     Rs.Close:   Db.Close:    ws.Rollback: ws.Close:   Screen.MousePointer = vbArrow
'     Database_Unlock
'     On Error GoTo 0
' End Sub
'
'
' Sub ProgressNotes_Show(sReport As String)
'     '---------------------------------------------------------------
'     'Displays progress notes according to sReport, ie either for the
'     'individual patient or for the whole day for all patients
'     '---------------------------------------------------------------
'     Screen.MousePointer = vbHourglass
'     CrystalReport1.DataFiles(0) = sMEDREC_MDB
'     CrystalReport1.DataFiles(1) = sMEDREC_MDB
'     CrystalReport1.DataFiles(2) = sMEDREC_MDB
'     On Error Resume Next
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Db.Execute "Drop Table reports_patient"
'     Db.Execute "Drop Table Reports_ProgressNotes"
'     Select Case sReport
'     Case "Patient"
'         '-------------------------------------------------------------
'         'First put patient name and address into reports_Patient Table
'         '-------------------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_Reports_Patient")
'         Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'         Q.Execute
'         '---------------------------------------------------------------
'         'Next create a table with all that patients progress notes in it
'         '---------------------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_ProgressNotesReports")
'         Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'         Q.Execute
'         '--------------------------------------------------------
'         'and append any tempory notes generated this consultation
'         '--------------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_ProgressNotesReports_Currentconsult")
'         Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'         Q.Execute
'         CrystalReport1.ReportFileName = "c:\medrec\reports\New Version_V9.rpt"
'   Case "Whole day"
'        ' Set Q = Db.QueryDefs("MRQ_ProgressNotesReports_WholeDay")
'        ' Q("Enter Date") = sToday
'        ' Q.Execute
'        ' CrystalReport1.ReportFileName = "c:\medrec\reports\Progress notes for whole day1.rpt"
'   End Select
'     '----------------------------------------
'     'Now present the report window, maximised
'     '----------------------------------------
'
'     CrystalReport1.WindowShowPrintSetupBtn = True
'     CrystalReport1.WindowState = 2 'maximised
'     CrystalReport1.Destination = 0
'     CrystalReport1.Action = 1
'     CrystalReport1.PageShow CrystalReport1.PageCount
'     CrystalReport1.PageZoom 75
'     Screen.MousePointer = vbArrow
' End Sub
'
'
' Sub PositionSSActiveTab1(sAction As String)
'     If sAction = "save" Then
'         iKeepLRHW(0) = SSActiveTabs1.toP
'         iKeepLRHW(1) = SSActiveTabs1.left
'         iKeepLRHW(2) = SSActiveTabs1.height
'         iKeepLRHW(3) = SSActiveTabs1.width
'         iKeepLRHW(4) = TDBGrid1(0).width
'         iKeepLRHW(5) = TDBGrid1(0).height
'     Else
'         SSActiveTabs1.toP = iKeepLRHW(0)
'         SSActiveTabs1.left = iKeepLRHW(1)
'         SSActiveTabs1.height = iKeepLRHW(2)
'         SSActiveTabs1.width = iKeepLRHW(3)
'         TDBGrid1(0).width = iKeepLRHW(4)
'         TDBGrid1(0).height = iKeepLRHW(5)
'     End If
' End Sub
' Sub Graphs_DisplayGraph()
'     '-------------------------------------------------------------------
'     'Get all the plotting points for this measurement and put into graph
'     'Sub Graph returns any associated decision support notes for graph
'     '-------------------------------------------------------------------
'     'On Error Resume Next
'     If RecordsExist(Data2) Then
'         Graph Data2.Recordset!Full_Description, _
'             Data2.Recordset!Type_ID, _
'                 Data2.Recordset!Description & " " _
'                  & "" & Data2.Recordset!Unit_text & " " _
'                   & "" & Data2.Recordset!Unit_ID_Qualifier, _
'              "" & Data2.Recordset!Graph_SupportFile, _
'               Data2.Recordset!Ozcode
'     End If
' End Sub
' Sub Referrals_DisplaySection()
'     If Picture1(2).Visible Then
'          Exit Sub
'     End If
'     If iCurrentSection <> cSection_Referrals Then
'         iCurrentSection = cSection_Referrals
'         Design_Panel_Referrals
'         Referrals_GetList_ForPatient
'         Command3_Click (1) 'zero arrays and editing area
'     End If
'     Picture5.Visible = False
' End Sub
' Sub Recalls_DisplaySection()
'   If Picture1(2).Visible Then
'          Exit Sub
'     End If
'     iCurrentSection = cSection_Recalls
'     Design_Panel_Recalls
'     Recalls_GetForPatient
'     Recalls_Display
'     Command3_Click (1) 'zero arrays and editing area
' End Sub
' Sub patient_ShowDemographics()
'    bExitRoutine = True
'    iCentralDisplay = cCentralDisplay_Demographics
'    iCurrentSection = cSection_Demographics
'     '-----------------------------------------------------------
'     'Displays more detail on patient than available in title bar
'     '-----------------------------------------------------------
'     Dim sMsg As String
'     sMsg = StrConv(gtPatient(1).Firstname & " " & gtPatient(1).Surname, vbProperCase) & vbCrLf _
'           & StrConv(gtPatient(1).Street1, vbProperCase) & vbCrLf & StrConv(gtPatient(1).suburb, vbUpperCase) _
'           & " " & gtPatient(1).Postcode & vbCrLf & vbCrLf _
'           & "Home phone   :" & gtPatient(1).HomePhone & vbCrLf _
'           & "Occupation     :" & gtPatient(1).Occupation & vbCrLf _
'           & "Sex                  :" & gtPatient(1).Sex & vbCrLf _
'           & "Age                 :" & gtPatient(1).Age & vbCrLf _
'           & "Date of birth   :" & gtPatient(1).Date_of_Birth & vbCrLf _
'           & "Medicare no.   :" & gtPatient(1).MedicareNo & vbCrLf & vbCrLf _
'           & "Allergies          :"
'     If SSActiveToolBars1.Tools("ID_Allergies").Edit.Text = "" Then
'          sMsg = sMsg & "nil recorded" & vbCrLf
'     Else
'         sMsg = sMsg & SSActiveToolBars1.Tools("ID_Allergies").Edit.Text & vbCrLf
'     End If
'     sMsg = sMsg & "Entitlement no :"
'     If gtPatient(1).EntitlementNo = "" Then
'         sMsg = sMsg & "nil recorded" & vbCrLf
'     Else
'        sMsg = sMsg & gtPatient(1).EntitlementNo & vbCrLf
'     End If
'     If gtPatient(1).VeteranNo <> "" Then
'        sMsg = sMsg & "Veteran no.      :" & gtPatient(1).VeteranNo & vbCrLf
'     End If
'     sMsg = sMsg & "File number     :" & gtPatient(1).Folder_Number & vbCrLf
'     sMsg = sMsg & "Database File# :" & gtPatient(1).Patient_ID
'
'       If Picture5.Visible = False Then
'          With Picture5
'           .left = Picture3.left
'           .toP = Picture3.toP
'           .height = Picture3.height
'           .width = Picture3.width
'           .Visible = True 'the container
'           .ZOrder
'          End With
'          With Label5
'             .height = Shape2(8).height
'             .toP = Picture5.height - Shape2(8).height
'             .width = Picture5.width
'          End With
'          With sspanel2(5)
'             .height = sspanel2(0).height
'             .toP = 0
'          End With
'
'       End If
'      Init1.FileName = sMain_Dir & "\Medrec.ini"
'      Init1.Application = "Demographics Fonts " & gtDoctor.Doctor_ID
'      Init1.Parameter = "Demographic History"
'      Split Init1.Value, ","
'      Make_RTB1_BIG 1
'          With RichTextBox1(1)
'             .Font = sArray(0)
'             .Font.Size = sArray(1)
'             .Font.Bold = sArray(2)
'             .Font.Italic = sArray(3)
'             .Visible = True
'             .Locked = True
'             .Text = sMsg
'             .SelStart = 1
'       End With
'       Text7.Visible = False
'       Label1.Visible = False
'     Command2(3).Visible = False
'     Command2(4).Visible = False
'     Label5.Caption = ""
'     With Label4
'         .Caption = " DEMOGRAPHIC DETAILS "
'         .toP = lblMasterHeading.toP
'         .left = lblMasterHeading.left
'         .Font.Size = lblMasterHeading.Font.Size
'         .Font.Name = lblMasterHeading.Font.Name
'     End With
'     SSActiveToolBars1.Tools("ID_Print").Enabled = True
'     bExitRoutine = False
' End Sub
' Sub Script_Interactions_Print()
'    Printer.Print ""
'    RichTextBox1(1).SelPrint (Printer.hDC)
' End Sub
' Sub Allergy_SetCommitFlags(iStatus As Boolean)
'     For icounter = 0 To UBound(gtPatient(1).Allergies())
'         If gtPatient(1).Allergies(icounter).Saved = mrSaveUncommitted Then
'            If iStatus Then
'                 gtPatient(1).Allergies(icounter).Saved = mrSaveCommitted
'                 gtPatient(1).Allergies(icounter).DataChanged = False
'            Else
'                 gtPatient(1).Allergies(icounter).Saved = False
'                 gtPatient(1).Allergies(icounter).DataChanged = True
'            End If
'         End If
'     Next
' End Sub
' Sub Recalls_SetcommitFlags(iStatus As Boolean)
'     For icounter = 0 To UBound(gtPatient(1).Recalls())
'         If gtPatient(1).Recalls(icounter).Saved = mrSaveUncommitted Then
'            If iStatus Then
'                 gtPatient(1).Recalls(icounter).Saved = mrSaveCommitted
'                 gtPatient(1).Recalls(icounter).DataChanged = False
'            Else
'                 gtPatient(1).Recalls(icounter).Saved = False
'                 gtPatient(1).Recalls(icounter).DataChanged = True
'            End If
'         End If
'     Next
'
' End Sub
' Sub Measure_SetcommitFlags(iStatus As Boolean)
'     Dim ix As Integer
'     Dim iY As Integer
'     For ix = 0 To UBound(gtPatient(1).Measurements())
'         If gtPatient(1).Measurements(ix).Data_Changed = True Then
'             If iStatus Then
'                 gtPatient(1).Measurements(ix).Data_Changed = False
'             End If
'             For iY = 0 To UBound(gtPatient(1).Measurements(ix).Values())
'                 If gtPatient(1).Measurements(ix).Values(iY).Saved = mrSaveUncommitted Then
'                    If iStatus Then
'                       gtPatient(1).Measurements(ix).Values(iY).Saved = mrSaveCommitted
'                        gtPatient(1).Measurements(ix).Values(iY).DataChanged = False
'                    Else
'                      gtPatient(1).Measurements(ix).Values(iY).Saved = False
'                      gtPatient(1).Measurements(ix).Values(iY).DataChanged = True
'                    End If
'                 End If
'             Next
'         End If
'     Next
'     '---------------------------------------------------
'     'Not if the measurement list is showing, update this
'     '---------------------------------------------------
'     If SSActiveTabs1.SelectedTab.Key = "graphs" Then
'         bExitRoutine = True
'         Measure_AvailableList
'         bExitRoutine = False
'     End If
' End Sub
'
' Sub Referrals_Save_NewOrganisationClinicPerson(bCancel As Boolean)
'     Exit Sub
'     Dim lAddress_ID As Long
'     Dim bExists As Boolean
'     Dim bNewPerson As Boolean
'     Dim bNewOrganisation As Boolean
'     Dim bNewClinic As Boolean
'     Dim bNewAddress As Boolean
'     Dim lCategory_ID As Long
'     Dim lemployee_communicationID As Long
'     Dim sCategory As String
'     Dim rs1 As Recordset
'     Database_Lock
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Set Db = ws.OpenDatabase(sContacts_MDB, False)
'     '--------------------------------------------------------------
'     'It is possible to get a category in without an ID even if the
'     'category exists, eg if program has allocated the description
'     '--------------------------------------------------------------
'     sCategory = Trim(Text5)
'     Set Q = Db.QueryDefs("QC_Table_Categories_GetID")
'     Q("Enter Category") = sCategory
'     Set Rs = Q.OpenRecordset
'     With Rs
'          If .EOF + .BOF <> -2 Then
'             lCategory_ID = Rs!Category_ID
'          Else
'              lCategory_ID = 0
'          End If
'         .Close
'     End With
'     '-------------------------------------------------------
'     'first save any new categories and retrieve category_ID
'     '------------------------------------------------------
'     If lCategory_ID = 0 And sCategory <> "" Then
'        sMsg = "The category " & UCase(sCategory) & " does not " _
'         & "exist in the database." & vbLf & vbLf & "Accurate allocation of " _
'         & "records to categories, and accurate spelling of categories is vital " _
'         & "to the program's functioning. Every record must be allocated to a category." & vbLf & vbLf & "Are you sure you want " _
'         & "to add this new category?"
'         lresponse = MsgBox(sMsg, vbYesNoCancel, "NEW CATEGORY")
'         If lresponse <> vbYes Then
'             bCancel = True
'             Db.Close
'             ws.Rollback
'             ws.Close
'             Screen.MousePointer = vbArrow
'   Exit Sub
'         End If
'        Set Q = Db.QueryDefs("QC_Table_Categories_Edit_Add")
'        Q("Enter Category") = sCategory
'        Q.Execute
'        Set Q = Db.QueryDefs("QC_Table_Categories_GetID")
'        Q("Enter Category") = sCategory
'        Set Rs = Q.OpenRecordset
'        With Rs
'             If .EOF + .BOF <> -2 Then
'                 lCategory_ID = Rs!Category_ID
'             Else
'                 lCategory_ID = 0
'             End If
'            .Close
'        End With
'     End If
'     '---------------------------------------------------------------
'     'Adds any Organisations to the Contacts database and get the
'     'new organisaton ID, always add an address_ID even if no address
'     'and always a communications_ID, even if no communications
'     '---------------------------------------------------------------
'     If gtNew_Referral(0).Organisation.ID = 0 _
'         And Trim(Text3(cReferrals_Org_name)) <> "" Then
'         bNewOrganisation = True
'         Set Q = Db.QueryDefs("QC_Table_Organisations_Edit_Add_New")
'         Q("Enter Description") = Trim(Text3(cReferrals_Org_name))
'         Q("Enter Category_ID") = lCategory_ID
'         Q.Execute
'         '---------------------------------------------
'         'Next get organisation_ID if it does not exist
'         '---------------------------------------------
'         Set Rs = Db.OpenRecordset("Data_Organisations", dbOpenTable)
'         With Rs
'            .MoveLast
'             gtNew_Referral(0).Organisation.ID = !Organisation_ID
'            .Close
'         End With
'         '-------------------------------------------------------
'         'a communication ID kept for company even if no contents
'         'otherwise changes to this won't link back to subsequent
'         'records in links
'         '-------------------------------------------------------
'         Set Q = Db.QueryDefs("QC_Table_Communications_Edit_Add")
'         Q("Enter Home_Phone") = ""
'         Q("Enter Home_Phone_confidential") = False
'         Q("Enter Work_Phone") = Trim(Text3(cReferrals_Phone))
'         Q("Enter Work_Phone_Confidential") = False
'         Q("Enter Fax") = Trim(Text3(cReferrals_Fax))
'         Q("Enter Fax_Confidential") = False
'         Q("Enter Email") = Trim(Text3(cReferrals_email))
'         Q("Enter Email_Confidential") = False
'         Q("Enter Internet") = ""
'         Q("Enter Internet_Confidential") = False
'         Q("Enter Mobile") = ""
'         Q("Enter Mobile_Confidential") = False
'         Q.Execute
'         Set Rs = Db.OpenRecordset("data_Communications", dbOpenTable)
'         With Rs
'            .MoveLast
'            gtNew_Referral(0).Organisation.Communication.ID = !Communication_ID
'            .Close
'         End With
'     ElseIf gtNew_Referral(0).Organisation.Name <> "" And gtNew_Referral(0).Organisation.ID <> 0 Then
'         '-----------------------------------------------------------
'         'Otherwise if record exists for this organisation change its
'         'details
'         '-----------------------------------------------------------
'         bNewOrganisation = False
'         Set Q = Db.QueryDefs("QC_Table_Organisations_Edit_Change")
'         Q("Enter Organisation_ID") = gtNew_Referral(0).Organisation.ID
'         Q("Enter Description") = Trim(Text3(cReferrals_Org_name))
'         Q("Enter Category_iD") = gtNew_Referral(0).Organisation.Category.ID
'         Q.Execute
'         '---------------------------------------------------------------------
'         'Update any changes to communications for organisation at this address
'         '1:If existing address update communications
'         '---------------------------------------------------------------------
'         If gtNew_Referral(0).Address.ID <> 0 Then
'             Set Q = Db.QueryDefs("QC_Table_Communications_Edit_Change")
'             Q("Enter Communication_ID") = gtNew_Referral(0).Organisation.Communication.ID
'             Q("Enter Home_Phone") = gtNew_Referral(0).Organisation.Communication.HOme_Phone
'             Q("Enter Home_Phone_confidential") = gtNew_Referral(0).Organisation.Communication.HOme_Phone_Confidential
'             Q("Enter Work_Phone") = Trim(Text3(cReferrals_Phone))
'             Q("Enter Work_Phone_Confidential") = gtNew_Referral(0).Organisation.Communication.Work_Phone_Confidential
'             Q("Enter Fax") = Trim(Text3(cReferrals_Fax))
'             Q("Enter Fax_Confidential") = gtNew_Referral(0).Organisation.Communication.Fax_Confidential
'             Q("Enter Email") = Trim(Text3(cReferrals_email))
'             Q("Enter Email_Confidential") = gtNew_Referral(0).Organisation.Communication.Email_Confidential
'             Q("Enter Internet") = gtNew_Referral(0).Organisation.Communication.Internet
'             Q("Enter Internet_Confidential") = gtNew_Referral(0).Organisation.Communication.Internet_Confidential
'             Q("Enter Mobile") = gtNew_Referral(0).Organisation.Communication.Mobile
'             Q("Enter Mobile_Confidential") = gtNew_Referral(0).Organisation.Communication.Mobile_Confidential
'             Q.Execute
'
'        Else
'             '--------------------------------------------------------------
'             'otherwise add new record for communications at the new address
'             '--------------------------------------------------------------
'             Set Q = Db.QueryDefs("QC_Table_Communications_Edit_Add")
'             Q("Enter Home_Phone") = gtNew_Referral(0).Organisation.Communication.HOme_Phone
'             Q("Enter Home_Phone_confidential") = gtNew_Referral(0).Organisation.Communication.HOme_Phone_Confidential
'             Q("Enter Work_Phone") = Trim(Text3(cReferrals_Phone))
'             Q("Enter Work_Phone_Confidential") = gtNew_Referral(0).Organisation.Communication.Work_Phone_Confidential
'             Q("Enter Fax") = Trim(Text3(cReferrals_Fax))
'             Q("Enter Fax_Confidential") = gtNew_Referral(0).Organisation.Communication.Fax_Confidential
'             Q("Enter Email") = Trim(Text3(cReferrals_email))
'             Q("Enter Email_Confidential") = gtNew_Referral(0).Organisation.Communication.Email_Confidential
'             Q("Enter Internet") = gtNew_Referral(0).Organisation.Communication.Internet
'             Q("Enter Internet_Confidential") = gtNew_Referral(0).Organisation.Communication.Internet_Confidential
'             Q("Enter Mobile") = gtNew_Referral(0).Organisation.Communication.Mobile
'             Q("Enter Mobile_Confidential") = gtNew_Referral(0).Organisation.Communication.Mobile_Confidential
'             Q.Execute
'             Set Rs = Db.OpenRecordset("data_Communications", dbOpenTable)
'             With Rs
'                .MoveLast
'                gtNew_Referral(0).Organisation.Communication.ID = !Communication_ID
'                .Close
'             End With
'         End If
'     End If
'     '---------------------------------------
'     'Add any new persons to the person table
'     '---------------------------------------
'     If gtNew_Referral(0).Person.ID = 0 Then
'         '-------------------------------------------------------------
'         'Now add any Personal communications, which will always remain
'         'unique to the individual across any organisations, even if
'         'no data in the textboxes, otherwise Data_links won't work
'         '-------------------------------------------------------------
'         Set Q = Db.QueryDefs("QC_Table_Communications_Edit_Add")
'         Q("Enter Home_Phone") = ""
'         Q("Enter Home_Phone_confidential") = False
'         Q("Enter Work_Phone") = Trim(Text3(cReferrals_Phone))
'         Q("Enter Work_Phone_Confidential") = False
'         Q("Enter Fax") = Trim(Text3(cReferrals_Fax))
'         Q("Enter Fax_Confidential") = False
'         Q("Enter Email") = Trim(Text3(cReferrals_email))
'         Q("Enter Email_Confidential") = False
'         Q("Enter Internet") = ""
'         Q("Enter Internet_Confidential") = False
'         Q("Enter Mobile") = ""
'         Q("Enter Mobile_Confidential") = False
'         Q.Execute
'         Set Rs = Db.OpenRecordset("data_Communications", dbOpenTable)
'         With Rs
'            .MoveLast
'            gtNew_Referral(0).Person.Communication.ID = !Communication_ID
'            .Close
'         End With
'         '----------------------------------------------------
'         'If the person being added is being added as employee
'         '-----------------------------------------------------
'         If gtNew_Referral(0).Organisation.ID <> 0 Then
'             '------------------------------------------------------------------
'             'Now add any communications for the employee which will be specific
'             'for them in this organisations address
'             '------------------------------------------------------------------
'             Q("Enter Home_Phone") = ""
'             Q("Enter Home_Phone_confidential") = False
'             Q("Enter Work_Phone") = Trim(Text3(cReferrals_Phone))
'             Q("Enter Work_Phone_Confidential") = False
'             Q("Enter Fax") = Trim(Text3(cReferrals_Fax))
'             Q("Enter Fax_Confidential") = False
'             Q("Enter Email") = Trim(Text3(cReferrals_email))
'             Q("Enter Email_Confidential") = False
'             Q("Enter Internet") = ""
'             Q("Enter Internet_Confidential") = False
'             Q("Enter Mobile") = ""
'             Q("Enter Mobile_Confidential") = False
'             Q.Execute
'             Set Rs = Db.OpenRecordset("data_Communications", dbOpenTable)
'             With Rs
'                .MoveLast
'                lemployee_communicationID = !Communication_ID
'                .Close
'             End With
'         End If
'         '----------------------
'         'finally add the person
'         '----------------------
'         Set Q = Db.QueryDefs("QC_Table_Persons_Edit_Add_new")
'         Q("Enter Surname") = gtNew_Referral(0).Person.Surname
'         Q("Enter Firstname") = gtNew_Referral(0).Person.Firstname
'         Q("Enter Title") = gtNew_Referral(0).Person.Title
'         Q("Enter Sex") = ""
'         Q("Enter Birthdate") = ""
'         Q("Enter Person_Communication_ID") = gtNew_Referral(0).Person.Communication.ID
'         Q.Execute
'         '---------------------
'         'Get the new person_ID
'         '---------------------
'         Set Rs = Db.OpenRecordset("data_Persons", dbOpenTable)
'         With Rs
'             .MoveLast
'             gtNew_Referral(0).Person.ID = !Person_ID
'             .Close
'         End With
'         bNewPerson = True
'     Else
'         '---------------------------------
'         'Update the persons communications
'         '---------------------------------
'         If gtNew_Referral(0).Person.Communication.ID <> 0 Then
'             Set Q = Db.QueryDefs("QC_Table_Communications_Edit_Change")
'             Q("Enter Communication_ID") = gtNew_Referral(0).Person.Communication.ID
'             Q("Enter Home_Phone") = gtNew_Referral(0).Person.Communication.HOme_Phone
'             Q("Enter Home_Phone_confidential") = gtNew_Referral(0).Person.Communication.HOme_Phone_Confidential
'             Q("Enter Work_Phone") = Trim(Text3(cReferrals_Phone))
'             Q("Enter Work_Phone_Confidential") = gtNew_Referral(0).Person.Communication.Work_Phone_Confidential
'             Q("Enter Fax") = Trim(Text3(cReferrals_Fax))
'             Q("Enter Fax_Confidential") = gtNew_Referral(0).Person.Communication.Fax_Confidential
'             Q("Enter Email") = Trim(Text3(cReferrals_email))
'             Q("Enter Email_Confidential") = gtNew_Referral(0).Person.Communication.Email_Confidential
'             Q("Enter Internet") = gtNew_Referral(0).Person.Communication.Internet
'             Q("Enter Internet_Confidential") = gtNew_Referral(0).Person.Communication.Internet_Confidential
'             Q("Enter Mobile") = gtNew_Referral(0).Person.Communication.Mobile
'             Q("Enter Mobile_Confidential") = gtNew_Referral(0).Person.Communication.Mobile_Confidential
'             Q.Execute
'         Else
'             '---------------------------------------------
'             'New Communications being added for the person
'             '---------------------------------------------
'             If Trim(Text3(cReferrals_Phone)) <> "" Or Trim(Text3(cReferrals_Fax)) <> "" Or Trim(Text3(cReferrals_email)) <> "" Then
'                 Set Q = Db.QueryDefs("QC_Table_Communications_Edit_Add")
'                 Q("Enter Home_Phone") = ""
'                 Q("Enter Home_Phone_confidential") = False
'                 Q("Enter Work_Phone") = Trim(Text3(cReferrals_Phone))
'                 Q("Enter Work_Phone_Confidential") = False
'                 Q("Enter Fax") = Trim(Text3(cReferrals_Fax))
'                 Q("Enter Fax_Confidential") = False
'                 Q("Enter Email") = Trim(Text3(cReferrals_email))
'                 Q("Enter Email_Confidential") = False
'                 Q("Enter Internet") = ""
'                 Q("Enter Internet_Confidential") = False
'                 Q("Enter Mobile") = ""
'                 Q("Enter Mobile_Confidential") = False
'                 Q.Execute
'                 Set Rs = Db.OpenRecordset("data_Communications", dbOpenTable)
'                 With Rs
'                    .MoveLast
'                    gtNew_Referral(0).Person.Communication.ID = !Communication_ID
'                    .Close
'                 End With
'             End If
'         End If
'         '------------------------------------------------
'         'This is an existing person, change their details
'         '------------------------------------------------
'         Set Q = Db.QueryDefs("QC_Table_Persons_Edit_Change")
'         Q("Enter Person_ID") = gtNew_Referral(0).Person.ID
'         Q("Enter Surname") = gtNew_Referral(0).Person.Surname
'         Q("Enter Firstname") = gtNew_Referral(0).Person.Firstname
'         Q("Enter Title") = gtNew_Referral(0).Person.Title
'         Q("Enter Sex") = gtNew_Referral(0).Person.Sex
'         Q("Enter Birthdate") = gtNew_Referral(0).Person.Birthdate
'         Q("Enter Person_Communication_ID") = gtNew_Referral(0).Person.Communication.ID
'         Q.Execute
'
'
'
'        '-------------------------------------------------
'        'Update the persons category details in data_Links
'        '-------------------------------------------------
'     End If
'
'     '----------------------------------------------
'     'If this is a new address, add to address table
'     '----------------------------------------------
'      If gtNew_Referral(0).Address.ID = 0 Then
'         bNewAddress = True
'         Set Q = Db.QueryDefs("QC_Table_Addresses_Edit_Add")
'         '------------------------------------------------------------
'         'If person address ID is 0 and an address exists and an
'         'organisation is not present, add this address for the person
'         '------------------------------------------------------------
'         Q("Enter Street1") = Trim(Text3(cReferrals_Street1))
'         Q("Enter Street2") = Trim(Text3(cReferrals_Street2))
'         Q("Enter Street3") = Trim(Text3(cReferrals_Street3))
'         Q("Enter Suburb") = Trim(Text3(cReferrals_Suburb))
'         Q("Enter Postcode") = gtNew_Referral(0).Address.Postcode
'         Q("Enter State") = gtNew_Referral(0).Address.State
'         If check1(7).Value = 1 Then
'             Q("Enter Head_office") = True
'         Else
'             Q("Enter Head_office") = True
'         End If
'         Q("Enter Postal_Address") = False
'         Q.Execute
'         Set Rs = Db.OpenRecordset("Data_Addresses", dbOpenTable)
'         With Rs
'            .MoveLast
'            gtNew_Referral(0).Address.ID = !Address_ID
'            .Close
'         End With
'
'      Else
'           '-------------------------------------------------
'           'Update the address for the person or organisation
'           '-------------------------------------------------
'             Set Q = Db.QueryDefs("QC_Table_Addresses_Edit_Change")
'             Q("Enter Address_ID") = gtNew_Referral(0).Address.ID
'             Q("Enter Street1") = Trim(Text3(cReferrals_Street1))
'             Q("Enter Street2") = Trim(Text3(cReferrals_Street2))
'             Q("Enter Street3") = Trim(Text3(cReferrals_Street3))
'             Q("Enter Suburb") = gtNew_Referral(0).Address.suburb
'             Q("Enter Postcode") = gtNew_Referral(0).Address.Postcode
'             Q("Enter State") = gtNew_Referral(0).Address.State
'             If check1(7).Value = 1 Then
'                 Q("Enter Head_office") = True
'             Else
'                 Q("Enter Head_office") = True
'             End If
'             Q("Enter Postal_Address") = gtNew_Referral(0).Address.Postal_Address
'             Q.Execute
'             '-------------------------------------------------------------
'             'Only allowed one head office flag. If other addresses exist
'             'in data_addresses for this organisation set their head_office
'             'flag to false (ie all except gtNew_Referral(0).address.id
'             '-------------------------------------------------------------
'             If gtNew_Referral(0).Address.Head_office = True Then
'                Set Q = Db.QueryDefs("QC_Table_Addresses_SetHeadOfficeFalse")
'                Q("Enter Organisation_ID") = gtNew_Referral(0).Organisation.ID
'                Q("Enter Address_ID") = gtNew_Referral(0).Address.ID
'                Q.Execute
'             End If
'             '----------------------------------------------------------------
'             'Only allowed one postal_address flag. If other addresses exist
'             'in data_addresses for this organisation set their postal_address
'             'flag to false (ie all except gtNew_Referral(0).address.id
'             '----------------------------------------------------------------
'             If gtNew_Referral(0).Address.Postal_Address = True Then
'                Set Q = Db.QueryDefs("QC_Table_Addresses_SetPostalAddressFalse")
'                Q("Enter Organisation_ID") = gtNew_Referral(0).Organisation.ID
'                Q("Enter Address_ID") = gtNew_Referral(0).Address.ID
'                Q.Execute
'             End If
'       End If
'         '---------------------------------------------
'         'Now add any new links to the data_Links table
'         '---------------------------------------------
'         Set Rs = Db.OpenRecordset("Data_Links", dbOpenDynaset)
'         If bNewPerson = True Or (bNewPerson = False And bNewAddress = True) Then
'             With Rs
'             .AddNew
'             !Organisation_ID = gtNew_Referral(0).Organisation.ID
'             !Person_ID = gtNew_Referral(0).Person.ID
'             !Person_Category_ID = lCategory_ID 'gtNew_Referral(0).Person.Category.ID
'             !Employee_communication_ID = lemployee_communicationID
'             !Organisation_Communication_ID = gtNew_Referral(0).Organisation.Communication.ID
'             !Address_ID = gtNew_Referral(0).Address.ID
'             !Last_updated = Now
'             .Update
'            End With
'         Else
'                  Set Q = Db.QueryDefs("MRQ_Referrals_FindPerson_inLinks")
'                  Q("Enter Person_ID") = gtNew_Referral(0).Person.ID
'                  Q("Enter Organisation_ID") = gtNew_Referral(0).Organisation.ID
'                  Q("Enter Address_ID") = gtNew_Referral(0).Address.ID
'                  Set rs1 = Q.OpenRecordset
'                     If rs1.EOF + rs1.BOF = -2 Then
'                         With Rs
'                         .AddNew
'                         !Organisation_ID = gtNew_Referral(0).Organisation.ID
'                         !Person_ID = gtNew_Referral(0).Person.ID
'                         !Person_Category_ID = lCategory_ID 'gtNew_Referral(0).Person.Category.ID
'                         !Employee_communication_ID = lemployee_communicationID
'                         !Organisation_Communication_ID = gtNew_Referral(0).Organisation.Communication.ID
'                         !Address_ID = gtNew_Referral(0).Address.ID
'                         !Last_updated = Now
'                         .Update
'                         .Close
'                         End With
'                     End If
'                     rs1.Close
'
'
'                 ' !Person_Category_ID = lCategory_ID 'gtNew_Referral(0).Person.Category.ID
'                 '!Employee_communication_ID = lemployee_communicationID
'                ' !Organisation_Communication_ID = gtNew_Referral(0).Organisation.Communication.ID
'                ' !Last_updated = Now
'                 '.Update
'                 'Else
'                 'End If
'          End If
'
'         If bNewOrganisation = True Or (bNewOrganisation = False And gtNew_Referral(0).Organisation.ID <> 0 And bNewAddress = True) Then
'                 With Rs
'                    .AddNew
'                    !Organisation_ID = gtNew_Referral(0).Organisation.ID
'                    !Address_ID = gtNew_Referral(0).Address.ID
'                    !Organisation_Communication_ID = gtNew_Referral(0).Organisation.Communication.ID
'                    !Last_updated = Now
'                   .Update
'                   .Close
'                 End With
'         End If
'
'     Db.Close
'     ws.CommitTrans
'     Database_Unlock
' End Sub
'
'
'
'
' Sub FillLIst2_ActiveProblems()
'          List2.Clear
'          On Error Resume Next
'          For icounter = 0 To UBound(gtPatient(1).PastHistory())
'   If Err.Number = 9 Then Exit Sub
'             If gtPatient(1).PastHistory(icounter).active = True Then
'                 List2.AddItem gtPatient(1).PastHistory(icounter).Description
'             End If
'          Next
'          With List2
'              If .ListCount Then
'                 .toP = Text5.toP + Text5.height
'                 .width = Text5.width + Command1(3).width
'                 .height = (.ListCount + 1) * 200
'                 .Visible = True
'                 .left = Text5.left
'                 .Font.Name = "MS Sans Serif"
'                 .Font.Size = 7
'                 .SetFocus
'           Else
'                 Text5 = List2.List(0)
'
'             End If
'             itdbgrid2_image = cGrID_Image_ProblemList
'          End With
' End Sub
' Sub Recalls_SelectReason()
'      Dim sMsg As String
'      If itdbgrid2_image = cGrID_Image_RecallReason And _
'         Data1.Recordset.Fields(1).Name = "Description" Then
'         If RecordsExist(Data1) Then
'             Picture2.Visible = False
'             bExitRoutine = True
'             Text3(cRecall_For) = Data1.Recordset!Description
'             gtEditArea_Recall(0).Description = Data1.Recordset!Description
'             gtEditArea_Recall(0).Description_iD = Data1.Recordset!Description_iD
'             '--------------------------------------------------
'             'If no date exists put in the default time interval
'             '--------------------------------------------------
'             If Trim(Text3(cRecall_Date)) = "" Then
'                bExitRoutine = True
'                Select Case Data1.Recordset!Default_Interval_Units
'                Case mrUnits_Months
'                     sMsg = "m"
'                Case mrUnits_Years
'                     sMsg = "y"
'                Case mrUnits_Weeks
'                     sMsg = "ww"
'                End Select
'                Text3(cRecall_Date) = Format(DateAdd(sMsg, Data1.Recordset!Default_Interval, Now), "dd/mm/yyyy")
'                If Trim(Text3(cRecall_Method)) = "" Then
'                   Text3(cRecall_Method) = "Letter"
'                   gtEditArea_Recall(0).Method_ID = 1 'letter
'                   gtEditArea_Recall(0).ContactMethod_Name = "Letter"
'                End If
'                If Trim(Text3(cRecall_Length)) = "" Then
'                     Text3(cRecall_Length) = Data1.Recordset!consultLength_Name
'                     gtEditArea_Recall(0).Length_ID = Data1.Recordset!Default_Appointment_length_ID
'                     gtEditArea_Recall(0).consultLength_Name = Data1.Recordset!consultLength_Name
'                End If
'
'                bExitRoutine = False
'                On Error Resume Next
'                Command3(cEdit_Accept).SetFocus
'             End If
'             bExitRoutine = False
'
'         Else
'            gtEditArea_Recall(0).Description = Trim(Text3(cRecall_For))
'            gtEditArea_Recall(0).Description_iD = 0
'
'         End If
'   End If
' End Sub
' Sub Recalls_SelectDoctor()
'     If itdbgrid2_image = cGrID_Image_Doctors Then
'        If RecordsExist(Data1) And Data1.Recordset.Fields(3).Name = "Doctor_ID" Then
'             Picture2.Visible = False
'             bExitRoutine = True
'             Text3(0) = "Dr " & Data1.Recordset!Description
'             bExitRoutine = False
'             gtEditArea_Recall(0).Doctor_ID = Data1.Recordset!Doctor_ID
'             gtEditArea_Recall(0).Doctor_firstname = Data1.Recordset!Firstname
'             gtEditArea_Recall(0).Doctor_Surname = Data1.Recordset!Surname
'             Text3(1).SetFocus
'         End If
'      End If
' End Sub
' Sub Recalls_SelectMethod()
'     If itdbgrid2_image = cGrID_Recall_Methods Then
'           If RecordsExist(Data1) Then
'             Picture2.Visible = False
'             bExitRoutine = True
'             Text3(cRecall_Method) = Data1.Recordset!Description
'             bExitRoutine = False
'             gtEditArea_Recall(0).Method_ID = Data1.Recordset!Method_ID
'             gtEditArea_Recall(0).ContactMethod_Name = Data1.Recordset!Description
'             Text3(cRecall_Length).SetFocus
'           End If
'     End If
' End Sub
' Sub Recalls_SelectLength()
'    If itdbgrid2_image = cGrID_REcall_lengths Then
'         If RecordsExist(Data1) Then
'             Picture2.Visible = False
'             bExitRoutine = True
'             Text3(cRecall_Length) = Data1.Recordset!Description
'             bExitRoutine = False
'             gtEditArea_Recall(0).Length_ID = Data1.Recordset!Length_ID
'             gtEditArea_Recall(0).consultLength_Name = Data1.Recordset!Description
'             Command3(cEdit_Accept).SetFocus
'          End If
'     End If
' End Sub
'
' Sub Recalls_Delete_NEw(lconsult_ID As Long, sDescription As String, _
'    sDateDue As String, _
'    lRecord_ID As Long, lTypeOfDeletion As Long, _
'    iIncludeExplanation As Boolean)
'     Dim sMsg As String
'     Dim sAuditText As String
'     Dim SProgressText As String
'     Dim lAudit_ID As Long
'     Dim iCancel As Integer
'     Dim ix As Integer
'     If iConsultIDSaved = False Then
'        Save_ConsultID
'     End If
'     '-------------------------------------------------------------
'     'Deletes record or (marks as deleted if not saved) the recall
'     'highlighted. If saved the recall has a record_iD then
'     '1:Archive record to Arch_data_Review table
'     '2:insert consult_ID and lu_Archive_REasons pointer
'     '3:Delete the original record from data_Review
'     'If the recall has not yet been saved, simply mark deleted from
'     'the recall array
'     '-------------------------------------------------------------
'     If lRecord_ID = 0 Then
'         ix = List1(0).ItemData(List1(0).ListIndex)
'         gtPatient(1).Recalls(ix).Deleted = True
'     Else
'         If lconsult_ID = gtconsult.Consult_ID Then
'            lAudit_ID = mrReversalOfEntry
'         Else
'           '-------------------------------------------------
'           'If deleting or flagging complete with explanation
'           '-------------------------------------------------
'           SProgressText = "The recall for " & Data2.Recordset!Description _
'                     & " due " & Data2.Recordset!Last_date
'           If iIncludeExplanation = True Then
'                sMsg = "Before "
'                Select Case lTypeOfDeletion
'                        Case pnRecalls_Deleted
'                             sMsg = sMsg & "deleting "
'                             SProgressText = SProgressText & " has been deleted because "
'                        Case pnRecalls_Completed
'                             sMsg = sMsg & "flagging as complete "
'                             SProgressText = SProgressText & " has been flagged as complete because "
'                End Select
'                 '---------------------------------------------------------------------
'                 'If existing record get the reason for deletion to save as audit trail
'                 '---------------------------------------------------------------------
'                 sMsg = sMsg & "the record of recall/review " _
'                    & sDescription & " due on " & sDateDue & " from the patients record, you must enter " _
'                    & "a reason for doing this."
'                 AuditTrail_Delete_GetReason sAuditText, lAudit_ID, sMsg, iCancel, "Recalls"
'                 sAuditText = "'" & sAuditText & "'"
'                 If iCancel Then
'          Exit Sub
'                 End If
'                 SProgressText = SProgressText & sAuditText
'            Else
'                 SProgressText = SProgressText & " has been flagged as completed without explanation."
'                 lAudit_ID = mrFlagCompleted
'            End If
'         End If
'     End If
'     '------------------------------------------------------
'     'User wants to continue and do the deletion
'     'Save any members of the list not yet saved to database
'     'whether or not the record being deleted yet saved (there
'     'may be additional unsaved ones on the list
'     '------------------------------------------------------
'    ' On Error GoTo ADError:
'     On Error GoTo 0
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Recalls_Save
'     '---------------------------------------------------------
'     'Now do the work on previously saved recall being deleted
'     '---------------------------------------------------------
'     If lRecord_ID <> 0 Then
'        Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'        Screen.MousePointer = vbHourglass
'         '--------------------------------------------------------
'         'If the reason for archiving dosn't exist, first add this
'         '--------------------------------------------------------
'         If lAudit_ID = 0 Then
'              Set Q = Db.QueryDefs("MRQ_Lu_Archive_REasons_AddNew")
'              Q("Enter Reason") = sAuditText
'              Q.Execute
'              '--------------------------------------
'              'get the description ID for this reason
'              '--------------------------------------
'              Set Q = Db.QueryDefs("MRQ_Archive_GetReasonID")
'              Q("Enter Reason") = sAuditText
'              Set Rs = Q.OpenRecordset()
'              With Rs
'                  lAudit_ID = !Archive_Reason_iD
'                   .Close
'              End With
'           End If
'
'         '--------------------------------------
'         'First archive the record to be deleted
'         '--------------------------------------
'         Set Q = Db.QueryDefs("MRQ_Recall_Review_Archive")
'         Q("Enter Recall_Review_ID") = lRecord_ID
'         Q.Execute
'         '---------------------------------------------------------------
'         'Now insert the consult_ID at which this was done, and audit text
'         '----------------------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_Recall_Review_Archive_Duringconsult")
'         Q("Enter Recall_Review_ID") = lRecord_ID
'         Q("Enter Consult_ID") = gtconsult.Consult_ID
'         Q("Enter Archive_Reason_ID") = lAudit_ID
'         Q.Execute
'         '---------------------------------------------------
'         'Now mark this record deleted to make it unavailable
'         '---------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_Recall_Review_Mark_Deleted")
'         Q("Enter Recall_Review_ID") = lRecord_ID
'         Q.Execute
'         '----------------------------------------------------------------
'         'If entry is being reversed during same consultation, delete the
'         'associated progress note text entry and mark 'reversal of entry'
'         '----------------------------------------------------------------
'         If lAudit_ID = mrReversalOfEntry Then
'             Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'             Q("Enter Consult_ID") = lconsult_ID
'             Q("Enter Table_ID") = mrTable_Recalls
'             Q("Enter Record_ID") = lRecord_ID
'             Q.Execute
'         Else
'             Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'             ProgressNotes_Save pnGeneralHistory, pnRecalls_Deleted, _
'                0, "", SProgressText, True, _
'                mrTable_Recalls, _
'                lRecord_ID, _
'                gtProgressNotes(0).Segments(pnGeneralHistory).SubHeadings(pnRecalls_Deleted).Notes_order, _
'                Rs
'             Rs.Close
'         End If
'        Db.Close
'        ws.CommitTrans
'     End If
'     'Recalls_SetcommitFlags True
'     gtPatient(1).recalls_changed = False
'     '-----------------------
'     'refresh the information
'     '-----------------------
'
'     DoEvents
'     '--------------------------------------------------------------
'     'If a reversal of entry then mark deleted the entry in list1(0)
'     '--------------------------------------------------------------
'     If lAudit_ID = mrReversalOfEntry Then
'        For icounter = 0 To UBound(gtPatient(1).Recalls())
'            If gtPatient(1).Recalls(icounter).Record_ID = _
'               Data2.Recordset!REVIEW_ID Then ' = recall ID
'               gtPatient(1).Recalls(icounter).Deleted = True
'            End If
'        Next
'     End If
'     Recalls_GetForPatient
'
'     Recalls_Display
'     Command3_Click (1) 'clear editing area
'     Screen.MousePointer = vbArrow
'     Exit Sub
'
'     On Error Resume Next
'     ws.Rollback
'     Db.Close
'     ws.Close
'     Recalls_SetcommitFlags False
'     gtPatient(1).Recalls(ix).Deleted = False
'     Screen.MousePointer = vbArrow
' End Sub
'
'
'
'
'
'
'
'
'
'
'
'
'
'
' Sub Recalls_Save_Separately()
'    '----------------------------------------------------------------------
'    'Save the recalls not as part of overall consult save, only called from
'    'the recalls section
'    '----------------------------------------------------------------------
'     If iConsultIDSaved = False Then
'        Save_ConsultID
'     End If
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Recalls_Save
'     ws.CommitTrans
'     Recalls_SetcommitFlags True
'     gtPatient(1).recalls_changed = False
'     '-----------------------
'     'refresh the information
'     '-----------------------
'     Recalls_GetForPatient
'     'Recalls_Display
'     Command3_Click (1) 'clear editing area
'     Screen.MousePointer = vbArrow
' End Sub
' Sub ScratchPad_Edit()
'     '------------------------------------------------------
'     'May only edit items put in during current consultation
'     '------------------------------------------------------
'     If Data4.Recordset!Consult_ID = gtconsult.Consult_ID Then
'        With Data4.Recordset
'          Text6 = !Description
'          gtPatient(1).ScratchPad.Consult_First_noted = !Consult_First_noted
'          gtPatient(1).ScratchPad.Consult_ID = !Consult_ID
'          gtPatient(1).ScratchPad.Record_ID = !ScratchPad_iD
'        End With
'     End If
' End Sub
' Sub ScratchPad_Delete(iAddText As Boolean, iDelete As Boolean)
'     Dim sMsg As String
'     Dim lAudit_ID As Long
'     Dim sAuditText As String
'     Dim sProgressNoteText As String
'     Dim iCancel As Integer
'     If iConsultIDSaved = False Then
'         Save_ConsultID
'     End If
'     If iDelete And Data4.Recordset!Consult_ID = gtconsult.Consult_ID Then
'           lAudit_ID = mrReversalOfEntry
'     Else
'         '----------------------------------------------------------------------
'         'If user wants to add a reason the scratch pad item is complete, get it
'         '----------------------------------------------------------------------
'         sProgressNoteText = "'" & StrConv(Data4.Recordset!Description, vbProperCase) _
'                 & "' has been deleted. "
'         If iAddText Then
'            sMsg = "Before deleting the scratch pad item - '" _
'                & Data4.Recordset!Description & "', please enter the reason this task has been "
'                If iDelete Then
'                   sMsg = sMsg & "deleted."
'                Else
'                   sMsg = sMsg & "completed."
'                End If
'               AuditTrail_Delete_GetReason sAuditText, lAudit_ID, sMsg, iCancel, "Scratch Pad Reminders"
'             If iCancel Then
'      Exit Sub
'             Else
'                sProgressNoteText = sProgressNoteText & " Reason: ':" & sAuditText & "'."
'             End If
'         Else
'            sProgressNoteText = sProgressNoteText & " The task is flagged as complete with no explanatory text."
'         End If
'     End If
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'         '--------------------------------------------------------
'         'If the reason for archiving dosn't exist, first add this
'         '--------------------------------------------------------
'         If iAddText And lAudit_ID = 0 Then
'             AuditTrail_SaveNewReason sAuditText, lAudit_ID
'         End If
'         '--------------------------------------------------------------------
'         'Now delete the scratch pad item from the data_scratchPad table after
'         'archiving it and completing the archive trail
'         '--------------------------------------------------------------------
'         On Error GoTo 0
'         Set Q = Db.QueryDefs("MRQ_Scratchpad_Archive")
'         Q("Enter ScratchPad ID") = Data4.Recordset!ScratchPad_iD
'         Q.Execute
'         '------------------------------------------------------------------
'         'Insert the consult ID and archive_Reason_ID into the archive table
'         '------------------------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_ScratchPad_Archive_Duringconsult")
'         Q("Enter ScratchPad_ID") = Data4.Recordset!ScratchPad_iD
'         Q("Enter Consult_ID") = gtconsult.Consult_ID
'         If iAddText Then
'            Q("Enter Archive_Reason_ID") = lAudit_ID
'         Else
'            Q("Enter Archive_Reason_ID") = mrArchived_Deleted
'         End If
'         Q.Execute
'         '--------------------------------------------------
'         'finally Mark original scratchpad record as deleted
'         '--------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_ScratchPad_MarkDeleted")
'         Q("Enter ScratchPad_ID") = Data4.Recordset!ScratchPad_iD
'         Q.Execute
'         If lAudit_ID = mrReversalOfEntry Then
'             Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'             Q("Enter Consult_ID") = Data4.Recordset!Consult_ID
'             Q("Enter Table_ID") = mrTable_ScratchPad
'             Q("Enter Record_ID") = Data4.Recordset!ScratchPad_iD
'             Q.Execute
'          Else
'              '---------------------------------------
'             'Finally, add text to the progress notes
'             '---------------------------------------
'             Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'             ProgressNotes_Save pnClinicalNotes, pnScratchPad_Deleted, _
'                      pnScratchPad_Deleted, "REMINDERS", _
'                      sProgressNoteText, True, _
'                      mrTable_ScratchPad, _
'                      gtPatient(1).ScratchPad.Record_ID, _
'                      gtProgressNotes(0).Segments(pnClinicalNotes).SubHeadings(pnScratchPad_Deleted * 10 Mod pnClinicalNotes * 10).Notes_order, _
'                      Rs
'             Rs.Close
'         End If
'         Db.Close
'     ws.CommitTrans
'     ScratchPad_Get
' End Sub
' Sub AuditTrail_SaveNewReason(sAuditText As String, lAudit_ID As Long)
'    '-----------------------------------------------------------
'    'The sAuditText does not exist, so save it and get lAudit_Id
'    '-----------------------------------------------------------
'     Set Q = Db.QueryDefs("MRQ_Lu_Archive_REasons_AddNew")
'     Q("Enter Reason") = sAuditText
'     Q.Execute
'     '--------------------------------------
'     'get the description ID for this reason
'     '--------------------------------------
'     Set Q = Db.QueryDefs("MRQ_Archive_GetReasonID")
'     Q("Enter Reason") = sAuditText
'     Set Rs = Q.OpenRecordset()
'     With Rs
'         lAudit_ID = !Archive_Reason_iD
'         .Close
'     End With
' End Sub
'
' Sub Picture2_FullWidth()
'     With Picture2
'         .width = Command3(cEdit_Accept).left + Command3(cEdit_Accept).width
'         .height = 1500
'         .Visible = False
'         .left = Picture3.left + Picture1(1).left + 10
'     End With
' End Sub
' Sub Tdbgrid2_FullWidth()
'     With TDBGrid2
'         .Visible = True
'         .BackColor = vbWhite
'         .ForeColor = vbDarkGrey
'         .left = 12
'         .toP = 12
'         .height = Picture2.height - 24
'         .width = Picture2.width - 24
'     End With
' End Sub
' Sub Referrals_Letter_PrintAndSave()
'     Dim sLetterText As String
'     Dim bCancel As Boolean
'     '-----------------
'     'Ensure a category
'     '-----------------
'     If Trim(Text5) = "" Then
'        sMsg = "Please select a category before printing the referral letter"
'        MsgBox sMsg
'         If Picture5.Visible Then
'            Picture5.Visible = False
'         End If
'         Text5.SetFocus
'        Exit Sub
'     End If
'     Referrals_Save_NewOrganisationClinicPerson bCancel
'     If bCancel Then Exit Sub
'     mrReferral_status = mrReferral_Preview
'     If RichTextBox1(1).Visible = False Then
'         Referrals_Letter_Generate sLetterText
'     Else
'        sLetterText = RichTextBox1(1).Text
'     End If
'     Referrals_Letter_Print sLetterText
'     Referrals_Letter_Save sLetterText
'
'     Command3_Click (1) 'clear edit are
'     '--------------------------------------------------------
'     'If the list of referral letters is showing, refresh this
'     '--------------------------------------------------------
'     If SSActiveTabs1.SelectedTab.Key = "referrals" Then  'letters
'          Referrals_GetList_ForPatient
'     End If
' End Sub
' Sub Letter_ReprintExisting()
'    '----------------------------
'     'Reprinting a referral letter
'     '----------------------------
'     mrReferral_status = mrReferral_Reprint
'     If iEditing And Text7.Visible Then
'        If Trim(Text7) = "" Then
'           '------------------------------
'           'Ensure tag exists for filename
'           '------------------------------
'           sMsg = "To create a new file of this letter, " _
'               & "you must enter short identifing tag " _
'               & "in the text box above the letter." _
'               & "For example you could use the name of the doctor or " _
'               & "clinic you are referring to." & vbLf & vbLf _
'               & "This tag is incorporated in the filename to " _
'               & "make it easy for you to quickly see to whom " _
'               & "you made the referral." & vbCrLf & vbCrLf _
'               & "Do you wish to overwrite the existing file?"
'           lresponse = MsgBox(sMsg, vbYesNo, "Changing a referral letter")
'           If lresponse = vbNo Then
'               Picture5.ZOrder
'               Text7.SetFocus
'     Exit Sub
'           End If
'         End If
'        Referrals_Letter_Save RichTextBox1(1).Text
'        '----------------------------------------------
'        'Reset marquee to latest letter if showing list
'        '----------------------------------------------
'        If SSActiveTabs1.SelectedTab.Key = "referrals" Then
'           Data2.Recordset.FindFirst "File_Name = " & Chr$(34) & sFname & Chr$(34)
'        End If
'        Picture5.Visible = False
'        Referrals_Letter_Print RichTextBox1(1).Text
'        Exit Sub
'     Else
'     ' Referrals_Letter_Print
'     End If
'     If Text7 = "" And iEditing = True Then
'        Exit Sub
'     End If
'     Referrals_Letter_Print RichTextBox1(1).Text
' End Sub
' Sub Script_EditArea_Entitlement_Display()
'     '-------------------------------------------
'     'Display the repatriation or medicare number
'     '-------------------------------------------
'     If gtNew_ScriptItem(0).Veteran = True Then
'        If gtPatient(1).VeteranNo <> "" Then
'              Label8.Caption = "  Vet   " & gtPatient(1).VeteranNo & "  "
'        Else
'          Label8.Caption = " Veteran no. missing "
'        End If
'     Else
'         If gtPatient(1).MedicareNo <> "" Then
'              Label8.Caption = "  M/C   " & Format(gtPatient(1).MedicareNo, "#### ##### #") & "  "
'         Else
'              Label8.Caption = " Medicare no. missing "
'         End If
'     End If
' End Sub
' Sub Analyse_Graph_Disease(lozcode As Long)
'     Dim ix As Integer
'     Dim iMatch As Integer
'     On Error Resume Next
'     ix = UBound(gtPatient(1).PastHistory())
'     If Err.Number = 9 Then
'        Exit Sub
'     End If
'     '---------------------------------------------------------------
'     'See if the measurement being graphed reflects a patients active
'     'problem
'     '---------------------------------------------------------------
'     For ix = 0 To UBound(gtPatient(1).PastHistory())
'         If gtPatient(1).PastHistory(ix).Ozcode = lozcode Then
'            iMatch = True
'            Exit For
'         End If
'     Next
'     '-----------------------------------------------------------------
'     'If patient has this disease, see if they are on medication for it
'     '-----------------------------------------------------------------
'     If iMatch Then
'
'
'     End If
'
' End Sub
' Sub Measure_Values_GetForType(lTypeID As Long, iArrayIndex As Integer)
'     Dim iY As Integer
'     '-----------------------------------------------------------
'     'Fetches all the values for a measurement type from database
'     '-----------------------------------------------------------
'     Set Db = OpenDatabase(sMEDREC_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Measurements_GetValuesForPatientForType")
'     Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'     Q("Enter Type_ID") = lTypeID
'     Set Rs = Q.OpenRecordset(dbOpenDynaset)
'     With Rs
'       Do Until .EOF
'         '-----------------------------------------------------
'         'For each value for a particular measurement add these
'         '-----------------------------------------------------
'         ReDim Preserve gtPatient(1).Measurements(iArrayIndex).Values(iY)
'         gtPatient(1).Measurements(iArrayIndex).Values(iY).Measurement_ID = !Measurement_ID
'         gtPatient(1).Measurements(iArrayIndex).Values(iY).Comment = "" & !Comment
'         gtPatient(1).Measurements(iArrayIndex).Values(iY).DataChanged = False
'         gtPatient(1).Measurements(iArrayIndex).Values(iY).Date = !Date_Noted
'         gtPatient(1).Measurements(iArrayIndex).Values(iY).Deleted = False
'         gtPatient(1).Measurements(iArrayIndex).Values(iY).Saved = False
'         If lTypeID = mrMeasure_BP Then
'             gtPatient(1).Measurements(iArrayIndex).Values(iY).Value = Format(Int(!Measurement / 1000)) & "/" & Format(!Measurement Mod 1000)
'         Else
'              gtPatient(1).Measurements(iArrayIndex).Values(iY).Value = !Measurement
'         End If
'         iY = iY + 1
'         .MoveNext
'       Loop
'     End With
' End Sub
' Sub Measure_Delete()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  sProgressNoteText                                                                     *
' '******************************************************************************************
'
'     Dim sMsg As String
'     Dim sAuditText As String
'     Dim lAudit_ID As Long
'     Dim iCancel As Integer
'     Dim ix As Integer
'     Dim iY As Integer
'     If iConsultIDSaved = False Then
'        Save_ConsultID
'     End If
'     '-------------------------------------------------------------
'     'Deletes the Measurment highlighted
'     '1:Archive record to Arch_data_Measurements table
'     '2:insert consult_ID and Audit_ID
'     '3:Delete the original record from data_Measurements
'     '-------------------------------------------------------------
'     ix = List1(1).ListIndex 'position in value array
'     iY = List1(0).ItemData(List1(0).ListIndex)
'     sMsg = "Before deleting the value : " _
'         & List1(1).List(ix) _
'         & " from the patients record, you must enter " _
'         & "a reason for doing this."
'     AuditTrail_Delete_GetReason sAuditText, lAudit_ID, sMsg, iCancel, "Measurements"
'     If iCancel Then
'          Exit Sub
'     End If
'     '------------------------------------------
'     'User wants to continue and do the deletion
'     '------------------------------------------
'     On Error GoTo MDError:
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     '--------------------------------------------------------
'     'If the reason for archiving dosn't exist, first add this
'     '--------------------------------------------------------
'     If lAudit_ID = 0 Then
'          AuditTrail_SaveNewReason sAuditText, lAudit_ID
'     End If
'     '---------------------------------------------------------------------
'     'Archive, add reason for deletion, consult delted at etc to arch table
'     '---------------------------------------------------------------------
'     Set Db = ws.OpenDatabase(sMEDREC_MDB, False)
'     Screen.MousePointer = vbHourglass
'     Measure_DeleteAndArchiveValue iY, ix, lAudit_ID
'     Db.Close
'     sMsg = "The record of " & gtPatient(1).Measurements(iY).Description & "= " _
'            & gtPatient(1).Measurements(iY).Values(ix).Value _
'            & " has been deleted because '" & sAuditText & "'."
'          '  ProgressNote_Save mrMeasure, mrTextNote, sMsg, True
'     ws.CommitTrans
'     Screen.MousePointer = vbArrow
'     Measure_SetcommitFlags True
'     gtPatient(1).Measurement_DataChanged = False
'     '-----------------------
'     'refresh the information
'     '-----------------------
'     Measure_Values_GetForType gtPatient(1).Measurements(iY).Type_ID, iY
'     Measure_Display_Types
'     Command3_Click (1) 'clear editing area
'     Exit Sub
' MDError:
'     On Error Resume Next
'     ws.Rollback
'     Db.Close
'     ws.Close
'     Measure_SetcommitFlags False
'     gtPatient(1).Measurements(iY).Deleted = False
'      Screen.MousePointer = vbArrow
'
'     Exit Sub
' End Sub
' Sub Measure_DeleteAndArchiveValue(ix As Integer, iY As Integer, lAudit_ID As Long)
'     '------------------------------------------------
'     'archive original value to arch_data_Measurements
'     '------------------------------------------------
'     Set Q = Db.QueryDefs("MRQ_Measurements_Archive_Measurement")
'     Q("Enter Measurement_ID") = gtPatient(1).Measurements(ix).Values(iY).Measurement_ID
'     Q.Execute
'     '--------------------------------------------------
'     'Mark this archived record with consult archived at
'     '--------------------------------------------------
'     Set Q = Db.QueryDefs("MRQ_Measurements_Archive_Duringconsult")
'     Q("Enter Measurement_ID") = gtPatient(1).Measurements(ix).Values(iY).Measurement_ID
'     Q("Enter Consult_ID") = gtconsult.Consult_ID
'     Q("Enter Archive_Reason_ID") = lAudit_ID
'     Q.Execute
'     '------------------------------
'     'Now delete the original record
'     '------------------------------
'     Set Q = Db.QueryDefs("MRQ_Measurements_Archive_DeleteMeasurement")
'     Q("Enter Measurement_ID") = gtPatient(1).Measurements(ix).Values(iY).Measurement_ID
'     Q.Execute
' End Sub
' Sub Measure_Validate_Measurement()
' '******************************************************************************************
' '* Note: VBC id'd the following unreferenced items and handled them as described:         *
' '*                                                                                        *
' '* Local Variables (Removed)                                                              *
' '*  sMsg                                                                                  *
' '******************************************************************************************
'
'    If Len(Text3(1)) = 0 Then Exit Sub
'    Select Case gtMeasurement(0).Type_ID
'    Case mrMeasure_BP
'         '------------------------
'         'Ensure in format nnn/nnn
'         '------------------------
'         If InStr(Text3(1), "/") = Len(Text3(1)) Or InStr(Text3(1), "/") = 0 Then
'            Text3(1).SetFocus
'         End If
'
'    End Select
' End Sub
'
' Sub Referrals_Persons_Addresses_Getlist()
'       Screen.MousePointer = vbHourglass
'       Set Db = OpenDatabase(sContacts_MDB, False)
'       Set Q = Db.QueryDefs("MRQ_Referrals_Persons_Addresses_GetList")
'       Q("Enter Person_ID") = gtNew_Referral(0).Person.ID
'       Set Data1.Recordset = Q.OpenRecordset()
'       If RecordsExist(Data1) Then
'             If LCase(Data1.Recordset!Description) <> Trim(LCase(Text3(cReferrals_Street1))) Then
'                Picture2.Visible = True: Picture2.ZOrder
'             Else
'                Picture2.Visible = False
'             End If
'        Else
'             Picture2.Visible = False
'        End If
'        Screen.MousePointer = vbArrow
' End Sub
' Sub Referrals_Address_Select()
'     '-------------------------------------------------
'     'Select an address for this person or organisation
'     '-------------------------------------------------
'     bExitRoutine = True
'     Picture2.Visible = False
'
'   ' If gtNew_Referral(0).Address.ID <> 0 Then
'         'Text3(cReferrals_Street1) = gtNew_Referral(0).Address.Street1
'         'Text3(cReferrals_Street2) = gtNew_Referral(0).Address.Street2
'         'Text3(cReferrals_Street3) = gtNew_Referral(0).Address.Street3
'         'Text3(5) = gtNew_Referral(0).Address.suburb
'         'Text3(6) = gtNew_Referral(0).Address.State & " " & gtNew_Referral(0).Address.Postcode
'    '     bExitRoutine = False
'    '     Exit Sub
'    'End If
'     If RecordsExist(Data1) And itdbgrid2_image = cGrID_Image_Addresses Then
'        'And Text3(cReferrals_Street1) = "" Then
'        With Data1.Recordset
'             Text3(cReferrals_Street1) = "" & !Street1
'             Text3(cReferrals_Street2) = "" & !Street2
'             Text3(cReferrals_Street3) = "" & !Street3
'             Text3(cReferrals_Suburb) = "" & !suburb
'             Text3(cReferrals_Phone) = "" & !Work_Phone
'             Text3(cReferrals_Fax) = "" & !Fax
'             Text3(cReferrals_email) = "" & !Email
'             Text3(cReferrals_Postcode) = "" & !State & " " & "" & !Postcode
'             gtNew_Referral(0).Address.Street1 = "" & !Street1
'             gtNew_Referral(0).Address.Street2 = "" & !Street2
'             gtNew_Referral(0).Address.Street3 = "" & !Street3
'             gtNew_Referral(0).Address.suburb = "" & !suburb
'             gtNew_Referral(0).Address.State = "" & !State
'             gtNew_Referral(0).Address.Postcode = "" & !Postcode
'             gtNew_Referral(0).Address.Head_office = !Head_office
'             gtNew_Referral(0).Address.Postal_Address = !Postal_Address
'             gtNew_Referral(0).Address.ID = !Address_ID
'             If Text3(cReferrals_Org_name) <> "" Then
'                 gtNew_Referral(0).Organisation.Communication.Work_Phone_Confidential = !Work_Phone_Confidential
'                 gtNew_Referral(0).Organisation.Communication.Fax = "" & !Fax
'                 gtNew_Referral(0).Organisation.Communication.Fax_Confidential = !Fax_Confidential
'                 gtNew_Referral(0).Organisation.Communication.Email = "" & !Email
'                 gtNew_Referral(0).Organisation.Communication.Email_Confidential = "" & !Email_Confidential
'                 gtNew_Referral(0).Organisation.Communication.HOme_Phone = "" & !HOme_Phone
'                 gtNew_Referral(0).Organisation.Communication.HOme_Phone_Confidential = "" & !HOme_Phone_Confidential
'                 gtNew_Referral(0).Organisation.Communication.Internet = "" & !Internet
'                 gtNew_Referral(0).Organisation.Communication.Internet_Confidential = "" & !Internet_Confidential
'                 gtNew_Referral(0).Organisation.Communication.Mobile = "" & !Mobile
'                 gtNew_Referral(0).Organisation.Communication.Mobile_Confidential = "" & !Mobile_Confidential
'                 gtNew_Referral(0).Organisation.Communication.ID = !Communication_ID
'             Else
'                 'gtNew_Referral(0).Person.Communication.Work_Phone = "" & !Work_Phone
'                 'gtNew_Referral(0).Person.Communication.Work_Phone_Confidential = !Work_Phone_Confidential
'                 'gtNew_Referral(0).Person.Communication.Fax = "" & !Fax
'                 'gtNew_Referral(0).Person.Communication.Fax_Confidential = !Fax_Confidential
'                 'gtNew_Referral(0).Person.Communication.Email = "" & !Email
'                 'gtNew_Referral(0).Person.Communication.Email_Confidential = "" & !Email_Confidential
'                 'gtNew_Referral(0).Person.Communication.HOme_Phone = "" & !HOme_Phone
'                 'gtNew_Referral(0).Person.Communication.HOme_Phone_Confidential = "" & !HOme_Phone_Confidential
'                 'gtNew_Referral(0).Person.Communication.Internet = "" & !Internet
'                 'gtNew_Referral(0).Person.Communication.Internet_Confidential = "" & !Internet_Confidential
'                 'gtNew_Referral(0).Person.Communication.Mobile = "" & !Mobile
'                 'gtNew_Referral(0).Person.Communication.Mobile_Confidential = "" & !Mobile_Confidential
'                'gtNew_Referral(0).Organisation.Communication.ID = !Communication_ID
'             ' Else
'             End If
'        End With
'    Else
'       '---------------------------------
'       'No database saved address present
'       '---------------------------------
'              Text3(cReferrals_Street1) = Text3(cReferrals_Street1)
'              Text3(cReferrals_Street2) = Text3(cReferrals_Street2)
'              gtNew_Referral(0).Address.Street1 = Text3(cReferrals_Street1)
'              gtNew_Referral(0).Address.Street2 = Text3(cReferrals_Street2)
'              gtNew_Referral(0).Address.Street3 = Text3(cReferrals_Street3)
'              gtNew_Referral(0).Address.ID = 0
'              gtNew_Referral(0).Organisation.Communication.ID = 0
'              Text3(cReferrals_Street2).SetFocus
'       End If
'     bExitRoutine = False
' End Sub
' Sub Referrals_Organisations_Addresses_Getlist()
'        '-------------------------------------------------
'        'Gets list of all addresses for an organisation.ID
'        '-------------------------------------------------
'        Screen.MousePointer = vbHourglass
'        Set Db = OpenDatabase(sContacts_MDB, False)
'        Set Q = Db.QueryDefs("MRQ_Referrals_Organisations_Addresses_Getlist")
'        Q("Enter Organisation_ID") = gtNew_Referral(0).Organisation.ID
'        Set Data1.Recordset = Q.OpenRecordset()
'
'        With Data1.Recordset
'             If .EOF + .BOF <> -2 Then
'                 .MoveLast
'                 If .RecordCount = 1 Then
'                   '  If Len(Text3(cReferrals_Org_name)) = 0 Then
'
'                   '      Text3(cReferrals_ReasonFor).SetFocus
'                    ' End If
'                 Else
'                    .MoveFirst
'                     Picture2.Visible = True: Picture2.ZOrder
'                 End If
'                End If
'         End With
'         Screen.MousePointer = vbArrow
' End Sub
' Sub Referrals_Getlist_Suburbs()
'     '----------------------------------------------------------------
'     'Get list of suburbs unless street, person or organisation absent
'     '----------------------------------------------------------------
'     If Trim(Text3(cReferrals_Suburb)) = "" Then Exit Sub
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sContacts_MDB, False)
'     Set Q = Db.QueryDefs("QC_TDBG2_Suburbs_Getlist")
'     Q("Enter Suburb") = Trim(Text3(cReferrals_Suburb))
'     Q("Enter State") = "NSW"
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) Then
'        If LCase(Data1.Recordset!Description) <> Trim(LCase(Text3(cReferrals_Suburb))) Then
'             Picture2.Visible = True: Picture2.ZOrder
'        Else
'             Picture2.Visible = False
'        End If
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
' Sub Referrals_Suburb_Select()
'     '---------------------------------------------------------
'     'Select a suburb for this person or organisation's address
'     '---------------------------------------------------------
'     bExitRoutine = True
'     Picture2.Visible = False
'     If RecordsExist(Data1) And itdbgrid2_image = cGrID_Image_Suburbs _
'        And Data1.Recordset.Fields(1).Name = "Town" Then
'        'And  Text3(5)) <> "" Then
'        With Data1.Recordset
'
'             Text3(cReferrals_Suburb) = !Town
'              Text3(cReferrals_Postcode) = !State & " " & !Postcode
'                '          gtNew_Referral(0).Address.Street1 = "" & !Street1
'                ' gtNew_Referral(0).Address.Street2 = "" & !Street2
'                ' gtNew_Referral(0).Address.Street3 = "" & !Street3
'                  gtNew_Referral(0).Address.suburb = "" & !Town
'                  gtNew_Referral(0).Address.Postcode = "" & !Postcode
'                ' gtNew_Referral(0).Person.Communication.Work_Phone = "" & !Work_Phone
'                '  gtNew_Referral(0).Person.Communication.Email = "" & !Email
'                '  gtNew_Referral(0).Person.Communication.Fax = "" & !Fax
'
'                ' gtNew_Referral(0).Address.suburb = "" & !Town
'                ' gtNew_Referral(0).Address.Postcode = "" & !Postcode
'                  gtNew_Referral(0).Address.State = "" & !State
'
'       End With
'    Else
'       '------------------
'       'No suburb present
'       '------------------
'        If Text3(cReferrals_Suburb) = "" Then
'             gtNew_Referral(0).Address.State = ""
'             gtNew_Referral(0).Address.Postcode = ""
'             gtNew_Referral(0).Address.suburb = ""
'        Else
'             gtNew_Referral(0).Address.State = Text3(cReferrals_Suburb)
'             gtNew_Referral(0).Address.Postcode = Text3(cReferrals_Suburb)
'             gtNew_Referral(0).Address.suburb = Text3(cReferrals_Suburb)
'        End If
'     End If
'     bExitRoutine = False
' End Sub
' Sub Referrals_Address_DoesItExist(iExists As Integer, lAddress_ID As Long)
'     '----------------------------------------------------------------------
'     'Attempts to get an Address_ID for an address, if Fails iExists = false
'     'otherwise returns the address_ID as lAddress_ID
'     '----------------------------------------------------------------------
'     If gtNew_Referral(0).Address.Street2 = "" Then
'          Set Q = Db.QueryDefs("c99_Referrals_GetAddressIDStreet1")
'     Else
'          Set Q = Db.QueryDefs("c99_Referrals_GetAddressIDStreet2")
'          Q("Enter Street2") = gtNew_Referral(0).Address.Street2
'     End If
'     Q("Enter Street1") = gtNew_Referral(0).Address.Street1
'     Q("Enter Suburb") = gtNew_Referral(0).Address.suburb
'     Q("Enter State") = gtNew_Referral(0).Address.State
'     Q("Enter Postcode") = gtNew_Referral(0).Address.Postcode
'     Set Rs = Q.OpenRecordset()
'     lAddress_ID = 0
'     With Rs
'         If .EOF + .BOF <> -2 Then
'             lAddress_ID = !Address_ID
'             iExists = True
'         End If
'         .Close
'     End With
' End Sub
' Sub Requests_DrugBrandNames_List_Get()
'     Exit Sub
'     '---------------------------------------------------------
'     'Gets list of all drug products to include on request form
'     '---------------------------------------------------------
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'
'
'     Set Q = Db.QueryDefs("MRQ_Requests_DrugBrandNames_List_Get")
'     Q("Enter Product") = sSearchText
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(sSearchText) > 0 Then
'             If LCase(Data1.Recordset!Description) <> Trim(LCase(sSearchText)) Then
'                  Picture2.Visible = True: Picture2.ZOrder
'             Else
'                  Picture2.Visible = False
'             End If
'          Else
'             Picture2.Visible = False
'         End If
'         Screen.MousePointer = vbArrow
'
' End Sub
' Sub Requests_Forms_RePrint(iAll As Integer)
'     Requests_Forms_Save
'     Dim lX As Long
'     If iAll Then
'         For ix = 0 To UBound(gtPatient(1).Forms())
'                gtPatient(1).Forms(lX).Printed = False
'                Requests_Forms_Print_Single lX
'                gtPatient(1).Forms(lX).Printed = True
'         Next
'     Else
'        lX = List1(0).ItemData(List1(0).ListIndex)
'        gtPatient(1).Forms(lX).Printed = False
'        Requests_Forms_Print_Single lX
'        gtPatient(1).Forms(lX).Printed = True
'     End If
'
' End Sub
'
'
'
' Sub General_GetTerm(sText As String, cGridImage As Integer, lozcode As Long)
'      Dim RecordsetBookmark
'      Dim sMsg As String
'      Dim bUserTerminated As Boolean
'      '-------------------------------------------------------------------
'      'Passed the contents of a text box from editing area and makes some
'      'sort of intelligent matching with underlying recordset if it exists
'      'sText = either contents of textbox or part thereof
'      '-------------------------------------------------------------------
'      If itdbgrid2_image <> cGridImage Then
'         Exit Sub
'      End If
'      Picture2.Visible = False
'      DoEvents
'      bExitRoutine = True
'      sMsg = Trim(sText)
'      '---------------------------------------------------------------
'      'If records exist and text has been typed do all the parsing
'      'otherwise jump to end of the subroutine and set the ozcode to 0
'      '---------------------------------------------------------------
'      If RecordsExist(Data1) And Len(sMsg) Then
'         '----------------------------------------------
'         'chop of a preceeding ? character from the term
'         '----------------------------------------------
'         If InStr(1, sMsg, "?") Then
'            sMsg = Trim(right(sMsg, Len(sMsg) - 1))
'            HasQuestionMarkpreceedingTerm = True
'         Else
'            HasQuestionMarkpreceedingTerm = False
'         End If
'         '-------------------------------------------------------------------
'         'At this point will have:
'         '   sExistingText = any previously chosen terms on the line +
'         '   sMsg = the new bit, which could be the only bit
'         '   if the user actually double clicked on TDBGrid2 containing the
'         '   ozcode terms, append this to the end of the list.
'         '--------------------------------------------------------------------
'         If iUserclickedOnList Then
'          ' If RecordsExist(Data1) Then
'               If HasQuestionMarkpreceedingTerm Then
'                     sMsg = sExistingText & "?" & Trim(Data1.Recordset!Description) & ";"
'               Else
'                     sMsg = sExistingText & Trim(Data1.Recordset!Description) & ";"
'               End If
'           ' End If
'         Else
'           '------------------------------------------------------------------
'            'User must have pressed enter, or text3.lost focus. If they pressed
'            'enter must do some interpretation of what they most likely wanted
'            'to do in terms of this new text. The bookmark is the start of where
'            'the user is in the recordset, not the the first member
'            '------------------------------------------------------------------
'             '----------------------------------------------
'             'Firstly has the term got a terminator ie term;
'             '----------------------------------------------
'             If InStr(sMsg, ";") = Len(sMsg) Then
'                sMsg = left(sMsg, Len(sMsg) - 1)
'               bUserTerminated = True
'             End If
'
'           ' If RecordsExist(Data1) Then
'                RecordsetBookmark = Data1.Recordset.Bookmark
'                '---------------------------------------------------------
'                'Clone the recordset, and check if the text in the textbox
'                'exactly matches any of the records in the clone. If it
'                'does, keep that record, or if not, keep the nearest subset.
'                'If the users word is an entire space delimited word within
'                'any of the terms, assume a new variation on the term.
'                'start searching from marquee highlighted postition
'                '---------------------------------------------------------
'                Set Data1Rsclone = Data1.Recordset.Clone
'                Data1Rsclone.Bookmark = RecordsetBookmark
'                '-------------------------------------------------------
'                'If not at top of the recordset, user must have scrolled
'                'presumably because they didn't want the top member
'                'as long a term not terminated eg term; accept what it is
'                'showing under the marquee
'                '-------------------------------------------------------
'                If Data1Rsclone.AbsolutePosition <> 0 And bUserTerminated = False Then
'                   sText = Trim(Data1Rsclone!Description)
'                   lozcode = Data1Rsclone!code
'                   Set Data1Rsclone = Nothing
'                   bExitRoutine = False
'         Exit Sub
'                End If
'                '-----------------------------------------------------------
'                '1: Does text user typed in exactly match any member of list
'                '-----------------------------------------------------------
'                With Data1Rsclone
'                     Do Until .EOF
'                       If LCase(Trim(!Description)) = Trim(LCase(sMsg)) Then
'                           '------------------------------------------------------
'                           'the term the user has typed matches exactly any of the
'                           'terms in the whole recordset, keep that term and code
'                           '------------------------------------------------------
'                           If HasQuestionMarkpreceedingTerm Then
'                                sMsg = "?" & Trim(!Description)
'                           Else
'                              sMsg = Trim(!Description)
'                           End If
'                           sText = sMsg
'                           lozcode = !code
'                           bExitRoutine = False
'                           Set Data1Rsclone = Nothing
'       Exit Sub
'                        End If
'                       .MoveNext
'                     Loop
'                     If bUserTerminated Then
'                        sText = sMsg 'left(sMsg, Len(sMsg) - 1)
'                        'If lozcode <> 0 Then
'                        ' lozcode = 0
'                        bExitRoutine = False
'                        Set Data1Rsclone = Nothing
'    Exit Sub
'                     End If
'                     '-----------------------------------------------------
'                     '2. no exact match of phrase found in entire recordset
'                     'look for subset in entire subset xxx
'                     '-----------------------------------------------------
'                     .Bookmark = RecordsetBookmark  're-position the clone
'                     If InStr(LCase(!Description), Trim(LCase(sMsg))) Then
'                            If HasQuestionMarkpreceedingTerm Then
'                                sMsg = "?" & Trim(!Description)
'                            Else
'                                sMsg = Trim(!Description)
'                            End If
'                            sText = sMsg
'                            lozcode = !code
'                            Set Data1Rsclone = Nothing
'                            bExitRoutine = False
'        Exit Sub
'                     Else
'                         '---------------------------------------------
'                         'No exact subset match, find something similar
'                         '---------------------------------------------
'                         .MoveFirst 'included 26Sept99
'                         Do Until .EOF
'                             .FindFirst "Lcase(Description) like " & Chr$(34) & "*" & Trim(LCase(sMsg)) & "*" & Chr$(34)
'                             If .NoMatch Then
'                                Exit Do
'                             Else
'                                 If HasQuestionMarkpreceedingTerm Then
'                                 sMsg = "?" & Trim(!Description)
'                                 Else
'                                 sMsg = Trim(!Description)
'                                 End If
'                                 sText = sMsg
'                                 lozcode = !code
'                                 Set Data1Rsclone = Nothing
'                                 bExitRoutine = False
'   Exit Sub
'                                 End If
'                                Loop
'                     End If
'                     '---------------------------------------------------------
'                     'At this point there has been
'                     '- no exact match
'                     '- no substring match
'                     'so:3. If the recordset is not at the beginning, it is
'                     '      reasonable to assume the user has scrolled down the
'                     '      list - so accept the term the recordset is showing
'                     '---------------------------------------------------------
'                     If HasQuestionMarkpreceedingTerm Then
'                          sMsg = "?" & Trim(Data1.Recordset!Description)
'                     Else
'                          sMsg = Trim(Data1.Recordset!Description)
'                     End If
'                     sText = sMsg
'                     lozcode = Data1.Recordset!code
'                     bExitRoutine = False
' Exit Sub
'                 End With
'             End If
'     Else
'         lozcode = 0
'     End If
'     bExitRoutine = False
' End Sub
' Sub Coding_Add_NewTerm(lozcode As Long, sTerm As String)
'     '-------------------------------------------------------------
'     'If the text the user types in does not exist add as user term
'     'and return the new ozcode
'     '-------------------------------------------------------------
'     Set Q = Db.QueryDefs("MRQ_Coding_Add_UserTerm")
'     Q("Enter Code") = 990000000
'     Q("Enter Description") = sTerm
'     Q("Enter Basecode") = 9900000
'     Q("Enter Date_Added") = sToday
'     Q("Enter weighting") = 1
'     Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'     Q.Execute
'     lozcode = 990000000
' End Sub
' Sub Coding_HaveTerm_Getcode(sText As String)
'         Set Db = OpenDatabase(sMEDREC_MDB, False)
'         Set Q = Db.QueryDefs("MRQ_Coding_HaveTerm_Getcode")
'         Q("Enter Description") = Trim(sText)
'         Set Rs = Q.OpenRecordset
'         With Rs
'             If .EOF + .BOF <> -2 Then
'                 lozcode = !code
'             Else
'                 lozcode = 0
'             End If
'             .Close
'         End With
'     Db.Close
' End Sub
' Sub Requests_Patients_Medications_DisplayAll()
'               On Error GoTo RPMError
'               Dim ix As Integer
'               Dim sMsg As String
'               bExitRoutine = True
'               On Error GoTo RPMError
'               If UBound(gtPatient(1).medications()) Then
'                  For ix = 0 To UBound(gtPatient(1).medications())
'                      sMsg = sMsg & gtPatient(1).medications(ix).drug & ";"
'                  Next
'               End If
'               Text3(cRequest_Medications) = sMsg
'               bExitRoutine = False
'     Exit Sub
' RPMError:
'     Exit Sub
' End Sub
' Sub Script_GenericPrescribing_GetlistGenerics()
'     '---------------------------------------------------
'     'Gets a list of all generic components like text3(1)
'     '---------------------------------------------------
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Q = Db.QueryDefs("MRQ_Script_GenericPrescribing_Getlist_Generics")
'     Q("Enter Generic") = Trim(Text3(1))
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(Text3(1)) Then
'        Picture2.Visible = True: Picture2.ZOrder
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
' Sub Script_GenericPrescribing_SelectGeneric()
'     '----------------------------------------------
'     'User has selected a generic name from the list
'     '----------------------------------------------
'     bExitRoutine = True
'     If itdbgrid2_image = cGrID_Image_GenericDrugs And Picture2.Visible Then
'         If RecordsExist(Data1) Then
'            Text3(1) = Data1.Recordset!Description
'            Text3(1).Tag = Data1.Recordset!Gencode
'            Text3(0).Enabled = False
'            Text3(1).Enabled = False
'            Picture2.Visible = False
'         End If
'     End If
'     bExitRoutine = False
'
'
' End Sub
' Sub Script_GenericPrescribing_GetlistBrands()
'     '---------------------------------------------------------------
'     'Gets list of all brands containing the chosen generic component
'     '---------------------------------------------------------------
'     Screen.MousePointer = vbHourglass
'     Set Db = OpenDatabase(sDrugs_MdB, False)
'     Set Q = Db.QueryDefs("MRQ_Script_GenericPrescribing_BrandsForAGenericName")
'     Q("Enter Gencode") = Text3(1).Tag
'     Set Data1.Recordset = Q.OpenRecordset()
'     If RecordsExist(Data1) And Len(Text3(1)) Then
'        Picture2.Visible = True: Picture2.ZOrder
'     Else
'        Picture2.Visible = False
'     End If
'     Screen.MousePointer = vbArrow
' End Sub
'
'
'
' Sub Script_Instructions_Change()
'     '---------------------------------------------------------------------
'     'Changes the instructions for the drug highlighted in medications list
'     '---------------------------------------------------------------------
'     bExitRoutine = True
'     Text3(1) = Data2.Recordset!Generic
'     Text3(1).Locked = True
'     Text3(2) = Data2.Recordset!drug
'     Text3(2).Locked = True
'    ' Text3(3) = gtPatient(1).Scripts(ix).Strength_Summary
'     Text3(4) = Data2.Recordset!Instruction
'     Text3(5) = Data2.Recordset!Prescribed_For
'    bExitRoutine = False
'
' End Sub
' Sub UnprintedItems_Print()
'     Dim ix As Integer
'     Dim bPrint As Boolean
'     Dim sString
'     Dim sMsg
'     sMsg = "There are "
'     sString = "that have not yet been printed." & vbLf & vbLf _
'               & "Do you want to print these before closing the patient record?"
'     On Error Resume Next
'     ix = -1
'     '--------------------------------------------------------------------
'     'Are there any outstanding scripts, if yes either print automatically
'     'or prompt user
'     '--------------------------------------------------------------------
'     ix = UBound(gtPatient(1).Scripts())
'     If ix <> -1 Then
'         On Error GoTo 0
'         For ix = 0 To UBound(gtPatient(1).Scripts())
'            If gtPatient(1).Scripts(ix).Saved = False _
'              And gtPatient(1).Scripts(ix).Deleted = False _
'              And gtPatient(1).Scripts(ix).Hidden = False Then
'              If gtPreferences.AutoPrintOutstanding Then
'                 Script_Save
'                 Script_Print
'                 DoEvents
'              Else
'                 lresponse = MsgBox(sMsg & "scripts " & sString, vbYesNo, "Unprinted items")
'                 If lresponse = vbYes Then
'                    Script_Save
'                    Script_Print
'                    DoEvents
'                 End If
'               End If
'               Exit For
'            End If
'         Next
'     End If
'     '--------------------------------------------------------------------
'     'Are there any outstanding requests, if yes either print automatically
'     'or prompt user
'     '--------------------------------------------------------------------
'     On Error Resume Next
'     ix = -1
'     ix = UBound(gtPatient(1).Forms())
'     If ix <> -1 Then
'        On Error GoTo 0
'         For ix = 0 To UBound(gtPatient(1).Forms())
'            If gtPatient(1).Forms(ix).Saved = False _
'              And gtPatient(1).Forms(ix).Deleted = False Then
'              If gtPreferences.AutoPrintOutstanding Then
'                 Requests_Forms_Save
'                 Requests_Forms_Print_All
'                 DoEvents
'              Else
'                 lresponse = MsgBox(sMsg & "request forms " & sString, vbYesNo, "Unprinted items")
'                     If lresponse = vbYes Then
'                         Requests_Forms_Save
'                         Requests_Forms_Print_All
'                         DoEvents
'                     End If
'               End If
'               Exit For
'             End If
'         Next
'     End If
'
' End Sub
' Sub OverView_SaveFonts()
'     ' Set Cancel to True
'     CommonDialog1.CancelError = True
'     On Error GoTo ErrHandler
'     ' Set the Flags property
'     CommonDialog1.Flags = cdlCFEffects Or cdlCFBoth
'     ' Display the Font dialog box
'     CommonDialog1.ShowFont
'     RichTextBox1(0).Font.Name = CommonDialog1.FontName
'     RichTextBox1(0).Font.Size = CommonDialog1.FontSize
'     RichTextBox1(0).Font.Bold = CommonDialog1.FontBold
'     RichTextBox1(0).Font.Italic = CommonDialog1.FontItalic
'     '---------------------------
'     'Save the changes to iniFile
'     '---------------------------
'     Init1.FileName = sMedRec_Ini
'     Init1.Application = "Overview Fonts"
'     Init1.Parameter = "social history"
'     Init1.Value = CommonDialog1.FontName & "," & Format(CommonDialog1.FontSize)
'   Exit Sub
' ErrHandler:
'     ' User pressed the Cancel button
'     Exit Sub
'
' End Sub
' Sub Fonts_Save(DisplayItem As String, ControlName As Control)
'     '----------------------------------------------------------------------------
'     'Drcode = eg "RT", Section = eg "Overview", DisplayItem = eg "Social History"
'     '----------------------------------------------------------------------------
'     Dim Section As String
'     '--------------------------------------------------
'     ' Set Cancel to True, drop out of routine on cancel
'     '--------------------------------------------------
'     CommonDialog1.CancelError = True
'     On Error GoTo ErrHandler
'     ' Set the Flags property
'     CommonDialog1.Flags = cdlCFEffects Or cdlCFBoth
'     ' Display the Font dialog box
'     CommonDialog1.ShowFont
'     ControlName.Font.Name = CommonDialog1.FontName
'     ControlName.Font.Size = CommonDialog1.FontSize
'     ControlName.Font.Bold = CommonDialog1.FontBold
'     ControlName.Font.Italic = CommonDialog1.FontItalic
'     '---------------------------
'     'Save the changes to iniFile
'     '---------------------------
'      Select Case iCurrentSection
'         Case cSection_Overview
'              Section = "Overview"
'         Case cSection_PastHistory
'              Section = "PastHistory"
'         Case cSection_SOAP
'         Case cSection_FamilyandSocialHistory
'              Section = "FamilyandSocialHistory"
'         Case cSection_ProgressNotes
'         Case cSection_NewNotes
'         Case cSection_Immunisations
'         Case cSection_Referrals
'         Case cSection_Recalls
'         Case cSection_Script
'         Case cSection_Allergies
'         Case cSection_requests
'         Case cSection_Reports
'         Case cSection_Measure
'         Case cSection_Demographics
'    End Select
'     Init1.FileName = sMedRec_Ini
'     Init1.Application = Section & " Fonts " & gtDoctor.Doctor_ID
'     Init1.Parameter = DisplayItem
'     Init1.Value = CommonDialog1.FontName & "," & Format(CommonDialog1.FontSize)
'
'   Exit Sub
' ErrHandler:
'     ' User pressed the Cancel button
'     Exit Sub
'
'
' End Sub
' Sub Controls_Save_Font_Preference()
'     Dim bItalic As Byte
'     Dim bBold As Byte
'     Dim Section As String
'     '-------------------------------------------------
'     'Save the users font preferences to the medrec.ini
'     '-------------------------------------------------
'      Select Case iCurrentSection
'         Case cSection_Overview
'              Section = "Overview"
'         Case cSection_Demographics
'              Section = "Demographics"
'         Case cSection_PastHistory
'              Section = "PastHistory"
'         Case cSection_FamilyandSocialHistory
'              Section = "FamilyandSocialHistory"
'         Case cSection_Immunisations
'               Section = "Immunisations"
'         Case cSection_Referrals
'               Section = "Referrals"
'         Case cSection_Recalls
'              Section = "Recalls"
'         Case cSection_Script
'              Section = "Scripts"
'         Case cSection_Allergies
'            Section = "Allergies"
'         Case cSection_requests
'                  Section = "Requests"
'         Case cSection_Reports
'                 Section = "Reports"
'         Case cSection_Measure
'             Section = "Measurements"
'        End Select
'    If SourceControl.Font.Bold Then
'       bBold = 1
'    End If
'    If SourceControl.Font.Italic Then
'       bItalic = 1
'     End If
'
'     Init1.FileName = sMedRec_Ini
'     Init1.Application = Section & " Fonts " & gtDoctor.Doctor_ID
'     Init1.Parameter = SourceControl.Tag
'     Init1.Value = SourceControl.Font.Name & "," _
'         & Format(SourceControl.Font.Size) & "," _
'             & Format(bBold) & "," _
'             & Format(bItalic)
'     'Init1.Value = CommonDialog1.FontName & "," & Format(CommonDialog1.FontSize)
'
'   Exit Sub
' ErrHandler:
'     ' User pressed the Cancel button
'     Exit Sub
'
'
' End Sub
' Sub Requests_Patients_List_Delete()
'     '-----------------------------------------------------------------------------------
'     'Either deletes an unprinted form, deletes a test or tests on a form, or reverse the
'     'entry if form has been already printed
'     '-----------------------------------------------------------------------------------
'     Dim Rs As Recordset
'     Dim sMsg As String
'     Dim Q As QueryDef
'     Dim ws As Workspace
'     Dim Db As Database
'     Dim ix As Integer
'     Dim iY As Integer
'     Dim sAuditText As String
'     Dim lAudit_ID As Long
'     Dim iCancel As Integer
'     Dim SProgressText As String
'     Dim sFormsummary As String 'text appearing in list1
'     '---------------------------------------------------------------------
'     'If pathology test not ordered in this consult get reason for deletion
'     '---------------------------------------------------------------------
'     If gtconsult.Consult_ID <> Data2.Recordset!Consult_ID Then
'        sMsg = "Before deleting the request item " _
'         & Data2.Recordset.Description & " from the patients record, you must enter " _
'         & "a reason for doing this."
'         AuditTrail_Delete_GetReason sAuditText, lAudit_ID, sMsg, iCancel, "Requests"
'         If iCancel Then
'   Exit Sub
'         End If
'     Else
'        lAudit_ID = mrReversalOfEntry
'     End If
'     '---------------------------------
'     'Save consult if not already saved
'     '---------------------------------
'     If iConsultIDSaved = False Then
'         Save_ConsultID
'     End If
'     Screen.MousePointer = vbHourglass
'     sFormsummary = Data2.Recordset!Description & "  Notes:'" & left(Data2.Recordset!Notes, Len(Data2.Recordset!Notes) - 1) & "'"
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'         '---------------------------------------------------------------
'         'Archive the test from Data_Requests_FormsRequests. The notes on
'         'the request forms are never archived (unnecessary). Mark the test
'         'as deleted in Data_Requests_FormsRequests
'         '---------------------------------------------------------------
'         Set Db = ws.OpenDatabase(sMEDREC_MDB)
'         '--------------------------------------------------------
'         'If the reason for archiving dosn't exist, first add this
'         '--------------------------------------------------------
'         If lAudit_ID = 0 Then
'             AuditTrail_SaveNewReason sAuditText, lAudit_ID
'         End If
'         '-----------------------------------------
'         'If the user is reversing a single request
'         '-----------------------------------------
'         If gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsList Then
'             Set Q = Db.QueryDefs("MRQ_Requests_FormsSingleRequest_Archive")
'             Q("Enter Record_ID") = Data2.Recordset!Record_ID
'             Q.Execute
'             Set Q = Db.QueryDefs("MRQ_Requests_FormsSingleRequest_Archive_Duringconsult")
'             Q("Enter Record_ID") = Data2.Recordset!Record_ID
'             Q("Enter Consult_ID") = gtconsult.Consult_ID
'             Q("Enter Archive_Reason_ID") = lAudit_ID
'             Q.Execute
'             Set Q = Db.QueryDefs("MRQ_Requests_FormsSingleRequest_MarkDeleted")
'             Q("Enter Record_ID") = Data2.Recordset!Record_ID
'             Q.Execute
'             If lAudit_ID = mrReversalOfEntry Then
'                 '----------------------------------------------------------------
'                 'entry is being reversed during same consultation, delete then
'                 'associated progress note text entry
'                 '----------------------------------------------------------------
'                 Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'                 Q("Enter Consult_ID") = gtconsult.Consult_ID
'                 Q("Enter Table_ID") = MrTable_Requests
'                 Q("Enter Record_ID") = Data2.Recordset!Form_ID
'                 Q.Execute
'             End If
'             '-----------------------------------------------------------
'             'Now, are there any more tests left on this particular form?
'             '-----------------------------------------------------------
'             Set Q = Db.QueryDefs("MRQ_Requests_NumberTests_OnForm")
'             Q("Enter Form_ID") = Data2.Recordset!Form_ID
'             Set Rs = Q.OpenRecordset()
'             '-------------------------------
'             'If not, archive the entire form
'             '-------------------------------
'             If Rs.RecordCount = 0 Then
'                  Set Q = Db.QueryDefs("MRQ_Requests_Forms_Archive")
'                   Q("Enter Form_ID") = Data2.Recordset!Form_ID
'                   Q.Execute
'                   Set Q = Db.QueryDefs("MRQ_Requests_Forms_Archive_Duringconsult")
'                   Q("Enter Form_ID") = Data2.Recordset!Form_ID
'                   Q("Enter Consult_ID") = Data2.Recordset!Consult_ID
'                   Q("Enter Archive_Reason_ID") = lAudit_ID
'                   Q.Execute
'                   Set Q = Db.QueryDefs("MRQ_Requests_Forms_MarkDeleted")
'                   Q("Enter Form_ID") = Data2.Recordset!Form_ID
'                   Q.Execute
'                 If lAudit_ID = mrReversalOfEntry Then
'                     '---------------------------------------------------------
'                     'Remove the form from the list generated this consultation
'                     '---------------------------------------------------------
'                     For icounter = 0 To UBound(gtPatient(1).Forms())
'                         If gtPatient(1).Forms(icounter).Form_ID = Data2.Recordset!Form_ID Then
'                             gtPatient(1).Forms(icounter).Deleted = True
'                             Exit For
'                         End If
'                     Next
'                 End If
'             Else
'                '---------------------------------------------------------------------------------
'                'There are requests left on the form - redo the data_request_Forms.request_Summary
'                'to reflect the deleted test
'                '---------------------------------------------------------------------------------
'                Set Q = Db.QueryDefs("MRQ_Requests_GetList_Requests_OnForm")
'                Q("Enter form_ID") = Data2.Recordset!Form_ID
'                Set Rs = Q.OpenRecordset()
'
'                With Rs
'                   Do Until .EOF
'                      sMsg = sMsg & !Description & ";"
'                      .MoveNext
'                   Loop
'                End With
'                Set Q = Db.QueryDefs("MRQ_Requests_Forms_RequestSummary_Edit")
'                Q("Enter form_ID") = Data2.Recordset!Form_ID
'                Q("Enter Requests_Summary") = sMsg
'                Q.Execute
'                '-------------------------------------------------------------------------------
'                'Update the requests forms summary under the editing area to reflect the changes
'                '-------------------------------------------------------------------------------
'                If lAudit_ID = mrReversalOfEntry Then
'                     For icounter = 0 To UBound(gtPatient(1).Forms())
'                         If gtPatient(1).Forms(icounter).Form_ID = Data2.Recordset!Form_ID Then
'                            gtPatient(1).Forms(icounter).Request_Summary = sMsg
'                            '---------------------------------------------------
'                            'Mark deleted the request in the request items array
'                            '---------------------------------------------------
'                            For ix = 0 To UBound(gtPatient(1).Forms(icounter).Request())
'                                If gtPatient(1).Forms(icounter).Request(ix).Record_ID = Data2.Recordset!Record_ID Then
'                                   gtPatient(1).Forms(icounter).Request(ix).Deleted = True
'                                   Exit For
'                                End If
'                            Next ix
'                            Exit For
'                         End If
'                     Next
'                     '--------------------------------------------------------------
'                     'Now Redo the progress note for this consultation for this form
'                     '--------------------------------------------------------------
'                     With gtPatient(1).Forms(icounter)
'                         SProgressText = .Provider.Name & " for "
'                             sMsg = .Request_Summary
'                             ReplaceCharacter sMsg, ";", ", "
'                             TrimLastChar sMsg
'                         SProgressText = SProgressText & sMsg & ". "
'                              sMsg = .Notes
'                             ReplaceCharacter sMsg, ";", ", "
'                             TrimLastChar sMsg
'                         SProgressText = SProgressText & " Clinical information printed: " _
'                              & StrConv(sMsg, vbLowerCase) & ". "
'                         If .CopyTo.Surname <> "" Then
'                            SProgressText = SProgressText & "A Copy was sent to " _
'                              & Trim(.CopyTo.Title & " " & .CopyTo.Firstname & " " _
'                              & .CopyTo.Surname) & "."
'                         End If
'                         If gtPatient(1).Forms(icounter).ProgressNotes <> "" Then
'                            SProgressText = SProgressText & gtPatient(1).Forms(icounter).ProgressNotes & "."
'                         End If
'                     End With
'                 Else
'                  SProgressText = "The request for " & Data2.Recordset!Description & " on " _
'                    & Data2.Recordset!Date & " has been deleted because '" & sAuditText & "'."
'                 End If
'                 Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'                   ProgressNotes_Save pnClinicalNotes, pnRequests, _
'                       pnRequests, "REQUESTS", _
'                       SProgressText, True, _
'                       MrTable_Requests, _
'                       Data2.Recordset.Form_ID, _
'                       gtProgressNotes(0).Segments(pnClinicalNotes).SubHeadings(pnRequests).Notes_order, _
'                       Rs
'                 Rs.Close
'            End If
'         Else
'             '-----------------------------------------------------------
'             'User viewing as a form with lists of tests ie:
'             'gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsForm
'             '-----------------------------------------------------------
'             Set Q = Db.QueryDefs("MRQ_Requests_Forms_Archive")
'             Q("Enter Form_ID") = Data2.Recordset!Form_ID
'             Q.Execute
'             Set Q = Db.QueryDefs("MRQ_Requests_Forms_Archive_Duringconsult")
'             Q("Enter Form_ID") = Data2.Recordset!Form_ID
'             Q("Enter Consult_ID") = Data2.Recordset!Consult_ID
'             Q("Enter Archive_Reason_ID") = lAudit_ID
'             Q.Execute
'             Set Q = Db.QueryDefs("MRQ_Requests_Forms_MarkDeleted")
'             Q("Enter Form_ID") = Data2.Recordset!Form_ID
'             Q.Execute
'             If lAudit_ID = mrReversalOfEntry Then
'                 '----------------------------------------------------------------
'                 'entry is being reversed during same consultation, delete then
'                 'associated progress note text entry
'                 '----------------------------------------------------------------
'                 Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'                 Q("Enter Consult_ID") = gtconsult.Consult_ID
'                 Q("Enter Table_ID") = MrTable_Requests
'                 Q("Enter Record_ID") = Data2.Recordset!Form_ID
'                 Q.Execute
'                 '---------------------------------------------------------
'                 'Remove the form from the list generated this consultation
'                 '---------------------------------------------------------
'                 For icounter = 0 To UBound(gtPatient(1).Forms())
'                     If gtPatient(1).Forms(icounter).Form_ID = Data2.Recordset!Form_ID Then
'                        gtPatient(1).Forms(icounter).Deleted = True
'                        Exit For
'                     End If
'                 Next
'             Else
'                 SProgressText = "The request for " & Data2.Recordset!Description & " on " _
'                    & Data2.Recordset!Date & " has been deleted because '" & sAuditText & "'."
'
'                 Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'                   ProgressNotes_Save pnClinicalNotes, pnRequests, _
'                       pnRequests, "REQUESTS", _
'                       SProgressText, True, _
'                       MrTable_Requests, _
'                      Data2.Recordset!Form_ID, _
'                       gtProgressNotes(0).Segments(pnClinicalNotes).SubHeadings(pnRequests).Notes_order, _
'                       Rs
'                 Rs.Close
'             End If
'         End If
'         ws.CommitTrans
'         Screen.MousePointer = vbHourglass
'         Requests_Patients_List_Get
'         Requests_Forms_Ordered_Show
' End Sub
'
' Sub Save_Layouts()
'  Dim sLayoutName As String
'     'Saves layout of grid on basis of grid image
'     Select Case SourceControl.Tag
'     Case cGrID_Image_ScratchPad
'          sLayoutName = "ScratchPad"
'     Case cGrID_Image_Medications
'          sLayoutName = "Medications"
'     Case cGrID_Image_Requests
'          sLayoutName = "Requests"
'     Case cGrID_Image_Reviews
'          sLayoutName = "Review"
'     End Select
'      Save_Layout sLayoutName, sLayoutName, SourceControl
' End Sub
' Sub Update_Path()
'     Dim Db As Database
'     Dim Rs As Recordset
'     Dim Q As QueryDef
'     Dim q1 As QueryDef
'
'     Dim ws As Workspace
'     Dim Form_ID As Integer
'     Dim LastForm_Id As Integer
'     Dim Requests As String
'     'On Error GoTo crasherror
'     On Error GoTo 0
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'     Set Db = OpenDatabase(sMEDREC_MDB)
'     'open the forms table:
'     Set Q = Db.QueryDefs("MRQ_Requests_ListAllTestsOnForms")
'     Set Rs = Q.OpenRecordset()
'     With Rs
'     Do Until Rs.EOF
'         If LastForm_Id <> Rs!Form_ID Then
'            'update the form table
'            If LastForm_Id <> 0 Then
'             Set q1 = Db.QueryDefs("MRQ_Requests_AddSummaryToFormsTable")
'             q1("Enter Form_ID") = LastForm_Id
'             q1("Enter Requests") = Requests
'             q1.Execute
'            End If
'            LastForm_Id = Rs!Form_ID
'            Requests = Rs!Description
'         Else
'            Requests = Requests & ";" & !Description
'           ' MsgBox rs!Firstname & " " & rs!Surname & vbCrLf & vbCrLf & Requests
'         End If
'         Rs.MoveNext
'         Loop
'     End With
'     ws.CommitTrans
'     Rs.Close
'     Db.Close
'
'     ws.Close
'     Exit Sub
' crasherror:
'     ws.Rollback
'     ws.Close
'
'
' End Sub
' Sub Fonts_Change(SourceControl As Control)
'     '---------------------------------------------------------
'     'Accessed from ssactivetoolbars1 tool_ID = "ID_GeneralMenuChangefont"
'     'Changes the font in the calling control
'     '---------------------------------------------------------
'     On Error GoTo Fonts_Change_Err
'     '----------------------------------------------------------------------------
'     'Drcode = eg "RT", Section = eg "Overview", DisplayItem = eg "Social History"
'     '----------------------------------------------------------------------------
'     Dim Section As String
'     '--------------------------------------------------
'     ' Set Cancel to True, drop out of routine on cancel
'     '--------------------------------------------------
'     CommonDialog1.CancelError = True
'
'     ' Set the Flags property
'     CommonDialog1.Flags = cdlCFEffects Or cdlCFBoth
'     ' Display the Font dialog box
'     CommonDialog1.FontName = SourceControl.Font.Name
'     CommonDialog1.FontSize = SourceControl.Font.Size
'     CommonDialog1.FontBold = SourceControl.Font.Bold
'     CommonDialog1.ShowFont
'     SourceControl.Font.Name = CommonDialog1.FontName
'     SourceControl.Font.Size = CommonDialog1.FontSize
'     SourceControl.Font.Bold = CommonDialog1.FontBold
'     SourceControl.Font.Italic = CommonDialog1.FontItalic
' Fonts_Change_Err:
'     ' User pressed the Cancel button
'     Exit Sub
' End Sub
' Sub Referrals_Letter_Delete()
'     '----------------------------------------------------------------
'     'Marks an existing letter in database as deleted with audit trail
'     '----------------------------------------------------------------
'     Dim sMsg As String
'     Dim sAuditText As String
'     Dim lAudit_ID As Long
'     Dim iCancel As Integer
'     Dim SProgressText As String
'     Dim ix As Integer
'     Dim ws As Workspace
'     Dim Q As QueryDef
'     Dim Db As Database
'     sMsg = "Are you sure you wish to delete the letter: " & vbLf & vbLf _
'       & Data2.Recordset!File_name & vbLf & vbLf
'     lresponse = MsgBox(sMsg, vbYesNo, "DELETE REFERRAL LETTER")
'     If lresponse = vbNo Then
'        Exit Sub
'     End If
'     '------------------------------------------------------
'     'If letter written this consultation just reverse entry
'     '------------------------------------------------------
'     If Data2.Recordset!Consult_ID = gtconsult.Consult_ID Then
'            lAudit_ID = mrReversalOfEntry
'     Else
'         '---------------------------------------------------------------------
'         'If existing letter get the reason for deletion to save as audit trail
'         '---------------------------------------------------------------------
'             sMsg = "Before deleting the letter " & Data2.Recordset!File_name _
'                & " from the patients record, you must enter " _
'                & "a reason for doing this."
'                AuditTrail_Delete_GetReason sAuditText, lAudit_ID, sMsg, iCancel, "Referral Letters"
'             If iCancel Then
'      Exit Sub
'             End If
'     End If
'     If iConsultIDSaved = False Then
'        Save_ConsultID
'     End If
'
'     On Error GoTo Referrals_Delete_Error
'     On Error GoTo 0
'     Screen.MousePointer = vbHourglass
'     Database_Lock
'     Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'     ws.BeginTrans
'         Set Db = ws.OpenDatabase(sMEDREC_MDB)
'         '--------------------------------------------------------
'         'If the reason for archiving dosn't exist, first add this
'         '--------------------------------------------------------
'         If lAudit_ID = 0 Then
'             AuditTrail_SaveNewReason sAuditText, lAudit_ID
'         End If
'         '--------------------------------------
'         'First archive the letter to be deleted
'         '--------------------------------------
'         Set Q = Db.QueryDefs("MRQ_Referrals_Archive")
'         Q("Enter Referral_ID") = Data2.Recordset!Referral_ID
'         Q.Execute
'         '--------------------------------------------------
'         'Mark this archived record with consult archived at
'         '--------------------------------------------------
'         Set Q = Db.QueryDefs("MRQ_Referrals_Archive_Duringconsult")
'         Q("Enter Referral_ID") = Data2.Recordset!Referral_ID
'         Q("Enter Consult_ID") = gtconsult.Consult_ID
'         Q("Enter Archive_Reason_ID") = lAudit_ID
'         Q.Execute
'         '----------------------------------------
'         'Mark this record as deleted in the table
'         '----------------------------------------
'         Set Q = Db.QueryDefs("MRQ_Referrals_Mark_Deleted")
'         Q("Enter Referral_ID") = Data2.Recordset!Referral_ID
'         Q.Execute
'         '------------------
'         'Add progress notes
'         '------------------
'         SProgressText = "The referral letter '" & Data2.Recordset!File_name & "' " _
'          & "has been deleted because '" & sAuditText & "'."
'         '----------------------------------------------------------------
'         'If entry is being reversed during same consultation, delete the
'         'associated progress note text entry and mark 'reversal of entry'
'         '----------------------------------------------------------------
'         If lAudit_ID = mrReversalOfEntry Then
'             Set Q = Db.QueryDefs("MRQ_ProgressNotes_Archive")
'             Q("Enter Consult_ID") = gtconsult.Consult_ID
'             Q("Enter Table_ID") = mrTable_Referrals
'             Q("Enter Record_ID") = Data2.Recordset!Referral_ID
'             Q.Execute
'         Else
'             Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'             ProgressNotes_Save pnClinicalNotes, pnReferralLetter_Deleted, _
'                0, "", SProgressText, True, _
'                mrTable_Referrals, _
'                Data2.Recordset!Referral_ID, _
'                gtProgressNotes(0).Segments(pnClinicalNotes).SubHeadings(pnReferralLetter_Deleted).Notes_order, _
'                Rs
'             Rs.Close
'             Db.Close
'        End If
'     ws.CommitTrans
'     Database_Unlock
'     ws.Close
'     Referrals_GetList_ForPatient
'     Exit Sub
' Referrals_Delete_Error:
'     ws.Rollback
'
'
' End Sub
' Sub Design_DisplayShadows()
'         With Shape9(0)
'              .toP = Picture1(0).toP + 45
'              .left = Picture1(0).left + 45
'              .height = Picture1(0).height
'              .Visible = True
'              .width = Picture1(0).width
'         End With
'          With Shape9(1)
'              .toP = Picture1(1).toP + 45
'              .left = Picture1(1).left + 45
'              .Visible = True
'              .height = Picture1(1).height
'              .width = Picture1(1).width
'         End With
'           '-----------------------------------------------------
'       'This shape acts as the grey background for text boxes
'       'and the edit area
'       '-----------------------------------------------------
'       With Shape1
'           .left = 0
'           .toP = sspanel2(0).toP + sspanel2(0).height
'           .height = sspanel2(1).toP - sspanel2(0).toP  'Line2.y1 + 1
'           .width = Picture3.width
'           .Visible = True
'           .BackColor = vbLightGrey
'       End With
'
' End Sub
' Sub Display_Section_chosen()
'     '--------------------------------------
'     'Called form "ID_GeneralDisplayDetails"
'     '--------------------------------------
'     Dim sSectionname As String
'     Select Case iCurrentSection
'     Case cSection_Overview
'          Select Case SourceControl.Tag
'          Case "Social History"
'                sSectionname = "Family and Social"
'          Case "Family History"
'               sSectionname = "Family and Social"
'          Case "Habits", "Active Problems", "All Problems"
'               sSectionname = "Past History"
'                End Select
'             Show_Section sSectionname
'     Case cSection_Script
'          Script_Interactions_3_DisplayText
'     End Select
'
' End Sub
' Sub Requests_Providers_Select()
'     Dim bDefaultExists As Boolean
'     '------------------------------------
'     'Select the provider for a given type
'     '------------------------------------ 'Len(Text3(cRequest_Company)) And
'     If Picture2.Visible _
'        And itdbgrid2_image = cGrID_Image_Requests_Providers_Names Then
'        bExitRoutine = True
'        If RecordsExist(Data1) Then
'            With Data1.Recordset
'                Text3(cRequest_Company) = !Description
'                gtNew_Form(0).Provider.Name = !Description
'                gtNew_Form(0).Provider.ID = !Organisation_ID
'                '------------------------------------------------------------------------------
'                'Now get the most used address ID for this doctor and organisation if it exists.
'                'If there are multiple records in recordset use the first(most weighted)
'                '------------------------------------------------------------------------------
'                Set Db = OpenDatabase(sContacts_MDB, False)
'                Set Q = Db.QueryDefs("MRQ_Requests_Providers_GetPreferrredAddressForDr")
'                Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'                Q("Enter Request_Type_ID") = gtNew_Form(0).Provider.Type_ID
'                Q("Enter Organisation_ID") = gtNew_Form(0).Provider.ID
'                Set Rs = Q.OpenRecordset()
'                If Rs.EOF + Rs.BOF <> -2 Then
'                     bDefaultExists = True
'                     With Rs
'                         gtNew_Form(0).Provider.Doctor_reference_Number = "" & !Doctor_reference_Number
'                         gtNew_Form(0).Provider.Address.ID = !Address_ID
'                         gtNew_Form(0).Provider.Type_ID = !Request_Type_ID
'                         gtNew_Form(0).Provider.Provider_Weighting = !Provider_Weighting
'                         gtNew_Form(0).Provider.Address_Weighting = !Address_Weighting
'                         gtNew_Form(0).Provider.Request_Link_ID = !Link_ID
'                         '-------------------------------------------
'                         'has this provider been used for this doctor
'                         '-------------------------------------------
'                         'If Not IsNull(!Weighting) Then
'                         '    gtNew_Form(0).Provider.Provider_Weighting = !Weighting
'                         'Else
'                         '    gtNew_Form(0).Provider.Provider_Weighting = 0
'                         'End If
'
'                     End With
'                 Else
'                    '----------------------------------------------------------------------
'                    'This doctor has not used this organisation before - put up any address
'                    'later put in code preferably where postcode like local postcode
'                    '----------------------------------------------------------------------
'                     Set Q = Db.QueryDefs("MRQ_Requests_Providers_Address_Top1")
'                     Q("Enter Organisation_ID") = gtNew_Form(0).Provider.ID
'                     Set Rs = Q.OpenRecordset()
'                     gtNew_Form(0).Provider.Doctor_reference_Number = ""
'                     gtNew_Form(0).Provider.Address.ID = Rs!Address_ID
'                     gtNew_Form(0).Provider.Provider_Weighting = 0
'                     gtNew_Form(0).Provider.Address_Weighting = 0
'                     gtNew_Form(0).Provider.Request_Link_ID = 0
'                 End If
'                 Text3(cRequest_Street123) = "" & Rs!Street1 & ", " & "" & Rs!Street2 & " " & "" & Rs!Street3
'                 Text3(cREquest_Suburb) = "" & Rs!suburb
'                 Text3(cRequest_Phone) = "" & Rs!Work_Phone
'                 gtNew_Form(0).Provider.Address.Street1 = "" & Rs!Street1
'                 gtNew_Form(0).Provider.Address.Street2 = "" & Rs!Street2
'                 gtNew_Form(0).Provider.Address.Street3 = "" & Rs!Street3
'                 gtNew_Form(0).Provider.Address.suburb = "" & Rs!suburb
'                 gtNew_Form(0).Provider.Address.Postcode = "" & Rs!Postcode
'                 gtNew_Form(0).Provider.Address.State = "" & Rs!State
'                 gtNew_Form(0).Provider.Communication.Work_Phone = "" & Rs!Work_Phone
'                 Rs.Close
'                 Db.Close
'                 Requests_Providers_HeadOffice_Address_Get
'
'            End With
'         End If
'         bExitRoutine = False
'         Picture2.Visible = False
'     End If
' End Sub
' Sub Requests_Forms_Cancel()
'     bExitRoutine = True
'     If itdbgrid1_image <> cGrID_Image_Requests Then
'        Requests_Patients_List_Get
'     End If
'     For icounter = cRequest_Type To cRequest_Phone
'         Text3(icounter) = ""
'     Next
'     For icounter = 0 To 3
'        Option2(icounter).Value = False
'     Next
'     iEditing = False
'     'Erase gtServiceProvider()
'     Erase gtNew_Form()
'     Erase sRequestNames()
'     Erase lRequestIDs()
'     Picture2.Visible = False
'     check1(0).Value = 0
'     Text2(cTheDate) = sToday 'date of referral default to today
'     bExitRoutine = False
'     Text3(cRequest_Type).SetFocus
' End Sub
' Sub Requests_Providers_Suburbs_Get_List()
'     '---------------------------------------------
'     'display a list of service providers by suburb
'     '---------------------------------------------
'      If gtNew_Form(0).Provider.ID = 0 Then
'         For icounter = cRequest_Company To cREquest_Suburb
'             Text3(icounter) = ""
'         Next
'         Text3(cRequest_Company).SetFocus
'        Exit Sub
'     End If
'      Set Db = OpenDatabase(sContacts_MDB, False)
'      Set Q = Db.QueryDefs("MRQ_Requests_Providers_Suburbs_Get_List")
'      Q("Enter Organisation_ID") = gtNew_Form(0).Provider.ID
'      Q("Enter Suburb") = Text3(cREquest_Suburb)
'       Set Data1.Recordset = Q.OpenRecordset()
'           If RecordsExist(Data1) Then
'             If LCase(Data1.Recordset!suburb) <> LCase(Trim(Text3(cREquest_Suburb))) Then
'                Picture2.Visible = True: Picture2.ZOrder
'             Else
'                Picture2.Visible = False
'                 Text3(cREquest_Suburb) = ""
'             End If
'           Else
'             Picture2.Visible = False
'             Text3(cREquest_Suburb) = ""
'         End If
'         Screen.MousePointer = vbArrow
' End Sub
' Sub Requests_Providers_Suburb_Select()
'     '----------------------------------------------------------
'     'User is selecting a provider company by address and suburb
'     '----------------------------------------------------------
'     If Picture2.Visible _
'        And itdbgrid2_image = cGrID_Image_Requests_Providers_Suburbs Then
'        bExitRoutine = True
'        If RecordsExist(Data1) Then
'            With Data1.Recordset
'                 Text3(cRequest_Street123) = "" & !Street1 & " " & "" & !Street2 & " " & "" & !Street3
'                 Text3(cREquest_Suburb) = "" & !suburb
'                 Text3(cRequest_Phone) = "" & !Work_Phone
'                 gtNew_Form(0).Provider.Address.ID = !Address_ID
'                 gtNew_Form(0).Provider.Address.Street1 = "" & !Street1
'                 gtNew_Form(0).Provider.Address.Street2 = "" & !Street2
'                 gtNew_Form(0).Provider.Address.Street3 = "" & !Street3
'                 gtNew_Form(0).Provider.Address.suburb = "" & !suburb
'                 gtNew_Form(0).Provider.Address.Postcode = "" & !Postcode
'                 gtNew_Form(0).Provider.Address.State = "" & !State
'                 gtNew_Form(0).Provider.Communication.Work_Phone = "" & !Work_Phone
'                 '-----------------------------------------
'                 'Has this doctor used this address before?
'                 '-----------------------------------------
'                  Set Db = OpenDatabase(sContacts_MDB, False)
'                  Set Q = Db.QueryDefs("MRQ_Requests_Providers_Address_?UsedbyDoctorBefore")
'                  Q("Enter Doctor_ID") = gtDoctor.Doctor_ID
'                  Q("Enter Organisation_ID") = gtNew_Form(0).Provider.ID
'                  Q("Enter Address_ID") = gtNew_Form(0).Provider.Address.ID
'                  Set Rs = Q.OpenRecordset()
'                  If Rs.EOF + Rs.BOF <> -2 Then
'                     gtNew_Form(0).Provider.Address_Weighting = Rs!Address_Weighting
'                  Else
'                     gtNew_Form(0).Provider.Address_Weighting = 0
'                  End If
'                  Rs.Close
'            End With
'        End If
'        bExitRoutine = False
'        Picture2.Visible = False
'     End If
' End Sub
' Sub Get_Preferences()
'   '---------------
'     'Get Preferences
'     '---------------
'     Init1.FileName = sMedRec_Ini
'     Init1.Application = "Preferences"
'     Init1.Parameter = "AutoPrintOutstanding"
'     gtPreferences.AutoPrintOutstanding = Init1.Value
' End Sub
'
'
' Sub Requests_Provider_SpecificText_Get()
'    ' Set Db = OpenDatabase(sContacts_MDB)
'    ' Set Q = Db.QueryDefs("MRQ_Requests_Forms_Maintainance_ProviderSpecificText_Get")
'    ' Q("Enter Organisation_ID") = gtFormFeatures(0).Provider.ID
'    ' Q("Enter Request_Type_ID") = gtFormFeatures(0).Provider.Type_ID
'    ' Set rs = Q.OpenRecordset()
'    ' If rs.EOF + rs.BOF <> -2 Then
'    '      gtNew_Form(0).Provider.General_Text = "" & rs!Header_Text
'    '      gtNew_Form(0).Provider.Header_Text = "" & rs!General_Text
'    ' End If
'    ' rs.Close
'    ' Db.Close
' End Sub
' Sub Referrals_Persons_Getlist_LikeCategory()
'      '-------------------------------------------------------
'      'Gets a list of persons like a category in lu_categories
'      '-------------------------------------------------------
'      ContactsDB_Open
'     ' If Trim(Text3(cReferrals_Suburb)) <> "" Then
'     '        Set Q = ContactsDb.QueryDefs("MRQ_Referrals_Persons_GetThose_In_CategoryLike _BySuburb")
'     '        Q("Enter Category") = Trim(Text5)
'     '        Q("Enter Suburb") = Trim(Text3(cREquest_Suburb))
'     ' Else
'             Set Q = ContactsDb.QueryDefs("MRQ_Referrals_Persons_GetThose_In_CategoryLike")
'             Q("Enter Category") = Trim(Text5)
'     ' End If
'      Tdbgrid2_Show Text5
'
' End Sub
' Sub ContactsDB_Open()
'    Set ContactsDb = OpenDatabase(sContacts_MDB, False)
' End Sub
'
'
'
'
' Sub Referrals_Categories_Getlist()
'      ContactsDB_Open
'      Set Q = ContactsDb.QueryDefs("MRQ_Referrals_Categories_GetList")
'     ' if  iReferrals_Categories_Alone = true then
'      Q("Enter Category") = Trim(Text5)
'      Tdbgrid2_Show Text5
'
' End Sub
'
' Sub Requests_Sort(sDirection As String)
'     Dim sCriteria As String
'
'     Select Case SSActiveToolBars1.Tag
'             Case "Name"
'                 If gtPreferences.RequestsViewFormat <> gcPrefRequestsViewAsList Then
'                         gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsList
'                         Requests_Patients_List_Get
'
'                  End If
'                  sCriteria = "Description, date "
'             Case "Date"
'                  sCriteria = "Date "
'     End Select
'     Set Data2RsClone = Data2.Recordset.Clone
'     Data2RsClone.Sort = sCriteria & sDirection
'     Set Data2.Recordset = Data2RsClone.OpenRecordset
'     TDBGrid1(0).ReBind
' End Sub
' Sub Requests_Reports_View(btDestination As Byte)
'         Dim Db As Database
'         Dim Q As QueryDef
'
'         '---------------------------------------------
'         'Get patients records for use by Xstal Reports
'         '---------------------------------------------
'         Set Db = OpenDatabase(sMEDREC_MDB)
'         On Error Resume Next
'         Db.Execute "Drop Table Reports_Patients_REquests"
'         On Error GoTo RRVError
'
'         Set Q = Db.QueryDefs("MRQ_Requests_Reports_ForPatientByProviderType")
'         Q("Enter Patient_ID") = gtPatient(1).Patient_ID
'         Q.Execute
'         '------------
'         'View Reports
'         '------------
'         Screen.MousePointer = vbHourglass
'         With CrystalReport1
'             .WindowShowPrintBtn = True
'             .WindowShowPrintSetupBtn = True
'             .WindowMaxButton = True
'             .WindowControlBox = True
'             .WindowBorderStyle = crptNoBorder
'             .WindowMaxButton = True
'             .WindowMinButton = True
'             .WindowShowExportBtn = True
'             .WindowState = 2
'             .DataFiles(0) = sMEDREC_MDB
'             .DataFiles(1) = sContacts_MDB
'             .ReportFileName = sReport_dir & "\" & "Patients Requests by Type.rpt"
'             .Destination = btDestination
'             .Action = 1
'             .PageZoom (gtPreferences.ReportPageZoom)
'        End With
'        Screen.MousePointer = vbArrow
'        Exit Sub
' RRVError:
'       Screen.MousePointer = vbArrow
'       MsgBox "An error occurred whilst generating the report"
'       Exit Sub
' End Sub
'
' Sub Requests_Forms_Delete()
'     '---------------------------------------------------------------------------
'     'Called from popup menu over request forms generated in current consultation
'     'If form not yet printed simply delete it
'     '---------------------------------------------------------------------------
'     If gtPatient(1).Forms(List1(0).ItemData(List1(0).ListIndex)).Printed = False Then
'        gtPatient(1).Forms(List1(0).ItemData(List1(0).ListIndex)).Deleted = True
'        Requests_Forms_Ordered_Show
'     Else
'        '---------------------------------------------------------------------
'        'Form has already been printed, convert printed form list to form view
'        '---------------------------------------------------------------------
'        If gtPreferences.RequestsViewFormat <> gcPrefRequestsViewAsForm Then
'           gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsForm
'           Requests_Patients_List_Get
'        End If
'        Set Data2RsClone = Data2.Recordset.Clone
'        With Data2RsClone
'             .FindFirst "Form_ID = " & gtPatient(1).Forms(List1(0).ItemData(List1(0).ListIndex)).Form_ID
'             If .NoMatch Then
'      Exit Sub
'             Else
'                 Data2.Recordset.Bookmark = Data2RsClone.Bookmark
'
'             End If
'        End With
'        Requests_Patients_List_Delete
'     End If
'
'    ' Command3_Click (cButtonCancel)
' End Sub
' Sub Temp()
' '--------------------------------------------------------------
' '1:enter was pressed instead of user clicking on the popup list
' 'eg text could be dog;cat;mouse
' '--------------------------------------------------------------
' If iUserclickedOnList = False Then
'    If LastDelimiterPosition(sMsg, ";") Then
'       sLatestTextAdded = right(sMsg, Len(sMsg) - LastDelimiterPosition(sMsg, ";"))
'       If sLatestTextAdded <> "" Then
'         sMsg = sMsg & ";"
'       End If
'    Else
'       sLatestTextAdded = sMsg
'       sMsg = sMsg & ";"
'    End If
'    Exit Sub
'   ' sMsg = left(sMsg, LastDelimiterPosition(sMsg, ";"))
'    'If no delimiter on the end then add one
'
'     ix = Len(sMsg)
'     If InStr(sMsg, ";") <> Len(sMsg) Then
'         sMsg = sMsg & ";"
'     Else
'
'     End If
'     If InStr(sMsg, ";") = False And sMsg & ";" <> copyofClinicalNotes Then
'        sExistingText = ""
'        sLatestTextAdded = sMsg
'     End If
'     Picture2.Visible = False
'
' Else
'     '-------------------------------------------------------------------------------
'     'remove any text to right of the last ; in the line and add the picked list item
'     '-------------------------------------------------------------------------------
'     sMsg = left(sMsg, LastDelimiterPosition(sMsg, ";") - 1)
'
' End If
'
'
'
'
'
'
'
' End Sub
'
' Sub AddText(sSourceText As Control, sNewText As String, sDefaultText As String)
'         Dim sMsg As String
'         Dim lcharpos As Long
'         Dim sExistingText As String
'         Dim icounter As Integer
'         '--------------------------------------------------------------------------
'         'Expects Text in sSourceText control text box
'         '        Data1.Recordset!Description to be set
'         '
'         'Action  Takes a line of text which may be delimited eg "cat;rat;mouse"
'         '        and either adds a delimiter ";" or accepts chops off the last
'         '        piece of undelimited text and adds the data1.recordset!Description
'         '        If a question mark precededs the new text this is kept eg ?SCC;
'         '--------------------------------------------------------------------------
'         sMsg = sSourceText
'         '-----------------------------------------------------------------
'         'if there are other ; in the string, is a multiple term, otherwise
'         'this is the first word in the string
'         '------------------------------------
'         lcharpos = InStr(sMsg, ";")
'         '------------------------------------------------------------------
'         '1.There is no other ';' in the string, hence this must be the only
'         'term the user has attempted to put in
'         '------------------------------------------------------------------
'         If lcharpos = False And sMsg & ";" <> copyofClinicalNotes Then
'            sExistingText = ""
'            sNewText = sMsg
'         Else
'            '---------------------------------------------------------
'            'Terms already exist on the line, find the last one put in
'            '---------------------------------------------------------
'            icounter = 0
'            sExistingText = ""
'            Do Until lcharpos = False
'                lcharpos = InStr(sMsg, ";")
'                If lcharpos Then
'                   If Len(sExistingText) Then
'                      sExistingText = sExistingText & left(sMsg, lcharpos - 1) & ";"
'                   Else
'                      sExistingText = left(sMsg, lcharpos - 1) & ";"
'                   End If
'                   sMsg = right(sMsg, Len(sMsg) - lcharpos)
'                Else
'                   sNewText = sMsg
'                End If
'              Loop
'         End If
'         '-----------------------------------------------------------------
'         'Now have sExistingText= "Cat;Dog;" and sNewText = "mouse"
'         'Reconstruct the text in the source control
'         '-----------------------------------------------------------------
'         bExitRoutine = True
'         If sNewText <> "" Then
'             If iUserclickedOnList Then
'                 If InStr(sNewText, "?") Then
'                 sExistingText = sExistingText & "?"
'                 End If
'                 sSourceText = sExistingText & Data1.Recordset!Description & ";"
'             Else
'                 sSourceText = sExistingText & sNewText & ";"
'             End If
'         End If
'         '----------------------
'         'Now check the spelling
'         '----------------------
'         checkspelling sSourceText
'         If sSourceText = "" Then
'            sSourceText = sDefaultText
'            sNewText = ""
'         End If
'         bExitRoutine = False
' End Sub
' Sub Requests_Forms_Edit()
'         '-------------------------------------------------------------------------
'         'Allows editing on an existing form
'         'If form has already been printed then its entry in the database is erased
'         'and editing set back to false
'         '-------------------------------------------------------------------------
'         iEditing = True
'         bExitRoutine = True
'         '--------------------------------------------------------
'         'Jump to the correct array position in the requests array
'         '--------------------------------------------------------
'         iArrayPosition = List1(0).ItemData(List1(0).ListIndex)
'         '-----------------------------------------------------------------------------
'         'If previously printed this consultation and is being re-edited then warn user
'         '-----------------------------------------------------------------------------
'         If gtPatient(1).Forms(iArrayPosition).Printed = True Then
'            sMsg = "The request form has already been printed." & vbCrLf & vbCrLf _
'                     & "Do you wish to edit the form and reprint it?"
'            lresponse = MsgBox(sMsg, vbYesNo, "Editing forms")
'            If lresponse = vbNo Then
'     Exit Sub
'            Else
'               sMsg = "NOTE:Please destroy the form already printed." & vbCrLf & vbCrLf _
'               & "Any entries recorded in the database for this form will be removed."
'               lresponse = MsgBox(sMsg, vbCritical, "WARNING")
'               iEditing = False
'            End If
'            gtNew_Form(0) = gtPatient(1).Forms(iArrayPosition)
'            gtNew_Form(0).Form_ID = 0
'            gtNew_Form(0).DataChanged = False
'         Else
'             gtNew_Form(0) = gtPatient(1).Forms(iArrayPosition)
'         End If
'         gtNew_Form(cRequest_Type).Provider.Type = gtPatient(1).Forms(iArrayPosition).Provider.Type
'         Text3(0) = StrConv(gtPatient(1).Forms(iArrayPosition).Provider.Type, vbProperCase)
'         sMsg = ""
'         '-----------------------------------------------------------------
'         'If the test has not been deleted, add to requests in editing area
'         '-----------------------------------------------------------------
'         ix = 0
'         For icounter = 0 To UBound(gtPatient(1).Forms(iArrayPosition).Request())
'             If gtPatient(1).Forms(iArrayPosition).Request(icounter).Deleted = False Then
'                 ReDim Preserve gtNew_Form(0).Request(ix)
'                 gtNew_Form(0).Request(ix).Request_ID = gtPatient(1).Forms(iArrayPosition).Request(icounter).Request_ID
'                 gtNew_Form(0).Request(ix).Name = gtPatient(1).Forms(iArrayPosition).Request(icounter).Name
'                 sMsg = sMsg & gtPatient(1).Forms(iArrayPosition).Request(icounter).Name & ";"
'                 ix = ix + 1
'             End If
'         Next
'         Text3(cRequest_request) = sMsg
'         Text3(cRequest_notes) = gtPatient(1).Forms(iArrayPosition).Notes
'         Text3(cRequest_Medications) = gtPatient(1).Forms(iArrayPosition).medications
'         Text3(cRequest_CopyTo) = Trim(gtPatient(1).Forms(iArrayPosition).CopyTo.Title _
'                & " " & gtPatient(1).Forms(iArrayPosition).CopyTo.Firstname _
'                & " " & gtPatient(1).Forms(iArrayPosition).CopyTo.Surname) _
'                & " " & Trim(gtPatient(1).Forms(iArrayPosition).CopyTo.Address.Street1 _
'                & " " & gtPatient(1).Forms(iArrayPosition).CopyTo.Address.Street2 _
'                & " " & gtPatient(1).Forms(iArrayPosition).CopyTo.Address.suburb _
'                & " " & gtPatient(1).Forms(iArrayPosition).CopyTo.Address.Postcode)
'         Text3(cRequest_ProgressNote) = gtPatient(1).Forms(iArrayPosition).ProgressNotes
'         Text3(cRequest_Company) = gtPatient(1).Forms(iArrayPosition).Provider.Name
'         Text3(cRequest_Street123) = gtPatient(1).Forms(iArrayPosition).Provider.Address.Street1 & " " & gtPatient(1).Forms(iArrayPosition).Provider.Address.Street2
'         Text3(cREquest_Suburb) = gtPatient(1).Forms(iArrayPosition).Provider.Address.suburb
'         Text3(cRequest_Phone) = gtPatient(1).Forms(iArrayPosition).Provider.Communication.Work_Phone
'         Text2(cTheDate) = gtPatient(1).Forms(iArrayPosition).Date
'         bExitRoutine = False
'         Requests_Providers_HeadOffice_Address_Get
'         '--------------------------------------------------------------------
'         'Now if this form has already been printed, reverse entry in database
'         '--------------------------------------------------------------------
'         If gtPatient(1).Forms(iArrayPosition).Printed = True Then
'            Requests_Forms_Delete
'         End If
' End Sub
' Sub Requests_Forms_ReOrder()
'
'     Dim ix As Integer
'     Dim iY As Integer
'     Dim sMsg As String
'     Dim sSql As String
'     Dim iRequests As String
'     Dim sLaterality As String
'     Dim sRequests_Summary As String
'     iStopAllKeyBoardInput = True
'     If iCurrentSection <> cSection_requests Then
'        Requests_Section_Show
'     End If
'     iStopAllKeyBoardInput = False
'     '----------------------------------------------------------
'     'Reorders requests by form or by request onto a single form
'     'Add new member to the request array
'     '----------------------------------------------------------
'     On Error Resume Next
'     ix = UBound(gtPatient(1).Forms())
'     If Err.Number = 9 Then
'         ix = 0
'         ReDim gtPatient(1).Forms(0)
'     Else
'         ix = ix + 1
'         ReDim Preserve gtPatient(1).Forms(ix)
'     End If
'     On Error GoTo 0
'     With Data2.Recordset
'         gtPatient(1).Forms(ix).Date = sToday
'         gtPatient(1).Forms(ix).Notes = !Notes
'         gtPatient(1).Forms(ix).Provider.ID = !Organisation_ID
'         gtPatient(1).Forms(ix).Provider.Type_ID = !Provider_Type_ID
'         '----------------------------------------------
'         'If viewing as form list we have the request_ID
'         '----------------------------------------------
'         If gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsList Or _
'                   gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsType Then
'             ReDim Preserve gtPatient(1).Forms(ix).Request(iY)
'             gtPatient(1).Forms(ix).Request(iY).Name = !Description
'             gtPatient(1).Forms(ix).Request(iY).Request_ID = !Request_ID
'             gtPatient(1).Forms(ix).Request_Summary = !Description
'             gtPatient(1).Forms(ix).Request(iY).Instruction_ID = !Instruction_ID
'             If InStr(!Description, "Left") Or InStr(!Description, "Right") Or InStr(!Description, "Both") Then
'                     sMsg = !Description
'                     sLaterality = right(sMsg, Len(sMsg) - LastDelimiterPosition(sMsg, " "))
'                     Select Case sLaterality
'                         Case "Left"
'                             gtPatient(1).Forms(ix).Request(iY).Lateralisation_ID = mrLateralityLeft
'                         Case "Right"
'                             gtPatient(1).Forms(ix).Request(iY).Lateralisation_ID = mrLateralityRight
'                         Case "Both"
'                             gtPatient(1).Forms(ix).Request(iY).Lateralisation_ID = mrLateralityBoth
'                     End Select
'             End If
'
'         ElseIf gtPreferences.RequestsViewFormat = gcPrefRequestsViewAsForm Then
'            '------------------------------------------------------------
'            'Otherwise we must get all the request_ID's from the database
'            'Note:some requests will be lateralised in the text eg:
'            'Xray of Tibia & Fibula Left - qualifier always on the end
'            '------------------------------------------------------------
'            Set Db = OpenDatabase(sMEDREC_MDB, False)
'            sMsg = !Description
'            Split sMsg, ";"
'            iRequests = UBound(sArray())
'            sMsg = ""
'            For iY = 0 To iRequests - 1
'                 '--------------------------------------------------------------
'                 'Find the last space in the string remove laterality if present
'                 'and keep record of laterality in the array
'                 '--------------------------------------------------------------
'                If InStr(sArray(iY), "Left") Or InStr(sArray(iY), "Right") Or InStr(sArray(iY), "Both") Then
'                     sMsg = sArray(iY)
'                     sLaterality = right(sMsg, Len(sMsg) - LastDelimiterPosition(sMsg, " "))
'                     sArray(iY) = left(sMsg, LastDelimiterPosition(sMsg, " ") - 1)
'                End If
'                sSql = "Select * from Request_lu_names where Description = " & Chr$(34) & sArray(iY) & Chr$(34)
'                Set Rs = Db.OpenRecordset(sSql)
'                If Rs.EOF + Rs.BOF <> -2 Then
'                     ReDim Preserve gtPatient(1).Forms(ix).Request(iY)
'                     gtPatient(1).Forms(ix).Request(iY).Name = Trim(Rs!Description & " " & sLaterality)
'                     gtPatient(1).Forms(ix).Request(iY).Request_ID = Rs!Request_ID
'                     gtPatient(1).Forms(ix).Request(iY).Instruction_ID = Rs!Instruction_ID
'                     sRequests_Summary = sRequests_Summary & gtPatient(1).Forms(ix).Request(iY).Name & ";"
'                     Select Case sLaterality
'                         Case "Left"
'                     gtPatient(1).Forms(ix).Request(iY).Lateralisation_ID = mrLateralityLeft
'                         Case "Right"
'                     gtPatient(1).Forms(ix).Request(iY).Lateralisation_ID = mrLateralityRight
'                         Case "Both"
'                     gtPatient(1).Forms(ix).Request(iY).Lateralisation_ID = mrLateralityBoth
'                     End Select
'               End If
'            Next
'            gtPatient(1).Forms(ix).Request_Summary = sRequests_Summary
'         End If
'
'         gtPatient(1).Forms(ix).DataChanged = True
'         gtPatient(1).Forms(ix).Printed = False
'         gtPatient(1).Forms(ix).Saved = False
'         gtPatient(1).Forms(ix).Provider.Type = !Provider_Type
'     End With
'     '---------------------------------------
'     'Default to include patients medications
'     '---------------------------------------
'     On Error Resume Next
'     If UBound(gtPatient(1).medications()) Then
'       sMsg = ""
'       For iY = 0 To UBound(gtPatient(1).medications())
'           sMsg = sMsg & gtPatient(1).medications(iY).drug & ";"
'       Next
'     End If
'     gtPatient(1).Forms(ix).medications = sMsg
'     '-------------------------------------------
'     'Get the preferred address for this provider
'     '-------------------------------------------
'     Set Db = OpenDatabase(sContacts_MDB, False)
'     Set Q = Db.QueryDefs("MRQ_Requests_Providers_GetPreferrredAddressForDr")
'     Q("Enter Organisation_ID") = gtPatient(1).Forms(ix).Provider.ID
'     Q("enter Request_Type_ID") = gtPatient(1).Forms(ix).Provider.Type_ID
'     Q("enter Doctor_ID") = gtDoctor.Doctor_ID
'     Set Rs = Q.OpenRecordset(dbOpenDynaset)
'     With Rs
'         If .EOF + .BOF <> -2 Then
'            gtPatient(1).Forms(ix).Provider.Address.ID = !Address_ID
'            gtPatient(1).Forms(ix).Provider.Address.Street1 = "" & !Street1
'            gtPatient(1).Forms(ix).Provider.Address.Street2 = "" & !Street2
'            gtPatient(1).Forms(ix).Provider.Address.Street3 = "" & !Street3
'            gtPatient(1).Forms(ix).Provider.Address.suburb = "" & !suburb
'            gtPatient(1).Forms(ix).Provider.Address.Postcode = "" & !Postcode
'            gtPatient(1).Forms(ix).Provider.Address.State = "" & !State
'            gtPatient(1).Forms(ix).Provider.Communication.Work_Phone = "" & Rs!Work_Phone
'         End If
'         .Close
'     End With
'     '-----------------------------------------------
'     'We have the provider ID, so get the head office
'     '-----------------------------------------------
'
'     Set Q = Db.QueryDefs("MRQ_Requests_Forms_Maintainance_GetProviders_HaveOrganisationID")
'     Q("Enter Organisation_ID") = gtPatient(1).Forms(ix).Provider.ID
'     Set Rs = Q.OpenRecordset(dbOpenDynaset)
'     With Rs
'         If .EOF + .BOF <> -2 Then
'            gtPatient(1).Forms(ix).Provider.Name = !Description
'         End If
'         .Close
'     End With
'     Set Q = Db.QueryDefs("MRQ_Requests_Providers_HeadOffice_Get")
'     Q("Enter Organisation_ID") = gtPatient(1).Forms(ix).Provider.ID
'     Set Rs = Q.OpenRecordset(dbOpenDynaset)
'
'     With Rs
'         If Rs.EOF + Rs.BOF <> -2 Then
'             gtPatient(1).Forms(ix).Provider.HeadOffice.Address.Street1 = "" & !Street1
'             gtPatient(1).Forms(ix).Provider.HeadOffice.Address.Street2 = "" & !Street2
'             gtPatient(1).Forms(ix).Provider.HeadOffice.Address.Street3 = "" & !Street3
'             gtPatient(1).Forms(ix).Provider.HeadOffice.Address.suburb = "" & !suburb
'             gtPatient(1).Forms(ix).Provider.HeadOffice.Address.Postcode = "" & !Postcode
'             gtPatient(1).Forms(ix).Provider.HeadOffice.Address.State = "" & !State
'             gtPatient(1).Forms(ix).Provider.ACN = "" & !ACN
'             gtPatient(1).Forms(ix).Provider.HeadOffice.communications.Work_Phone = "" & !Work_Phone
'        End If
'         .Close
'     End With
'     '-----------------------------------------------------------------------
'     'Get provider specific type specific header and footer text for the form
'     '-----------------------------------------------------------------------
'     Set Q = Db.QueryDefs("MRQ_Requests_Forms_Maintainance_ProviderSpecificText_Get")
'     Q("Enter Organisation_ID") = gtPatient(1).Forms(ix).Provider.ID
'     Q("Enter Request_Type_ID") = gtPatient(1).Forms(ix).Provider.Type_ID
'     Set Rs = Q.OpenRecordset()
'     If Rs.EOF + Rs.BOF <> -2 Then
'          gtPatient(1).Forms(ix).Provider.General_Text = "" & Rs!General_Text
'          gtPatient(1).Forms(ix).Provider.Header_Text = "" & Rs!Header_Text
'     End If
'     Rs.Close
'     Db.Close
'     '-------------------------------------------------------------
'     'Finally show the request on the forms list under editing area
'     '-------------------------------------------------------------
'     Requests_Forms_Ordered_Show
' End Sub
' Sub Fix_FormsTable()
'     Set Db = OpenDatabase(sMEDREC_MDB)
'     Set Rs = Db.OpenRecordset("Data_Requests_Forms", dbOpenDynaset)
'     With Rs
'        Do Until .EOF
'
'           If LastDelimiterPosition("" & !Requests_Summary, ";") <> Len("" & !Requests_Summary) Then
'              'MsgBox Str$(!Form_ID)
'              'sgBox !Requests_Summary
'              .Edit
'              !Requests_Summary = "" & !Requests_Summary & ";"
'              .Update
'           End If
'           .MoveNext
'         Loop
'         .Close
'       End With
'       Db.Close
' End Sub
' Sub Consult_Summary_Save()
'     Dim bCancel As Boolean
'     Dim sMsg As String
'     Dim sAuditText As String
'     Dim lAudit_ID As Long
'     Dim SProgressText As String
'     Dim ix As Integer
'     Dim ws As Workspace
'     Dim Q As QueryDef
'     Dim Db As Database
'     On Error GoTo CSSError
'     '-------------------------------------------------------
'     'user encouraged to enter a consulation summary, if not
'     'no record is created
'     '-------------------------------------------------------
'     If gtconsult.Consult_ID Then
'        FrmAuditTrail.Caption = "Consultation Summary"
'        FrmAuditTrail.Show 1
'        If FrmAuditTrail.Command1(1).Cancel = True Or FrmAuditTrail.Text1 = "" Then
'           bCancel = True
'           Unload FrmAuditTrail
'           Screen.MousePointer = vbArrow
'           Exit Sub
'        End If
'        sAuditText = FrmAuditTrail.Text1
'        Unload FrmAuditTrail
'        DoEvents
'        '----------------------------
'        'Now save the consult summary
'        '----------------------------
'         Screen.MousePointer = vbHourglass
'         Database_Lock
'         Set ws = DBEngine.CreateWorkspace("path", "admin", "password")
'         Set Db = ws.OpenDatabase(sMEDREC_MDB)
'         ws.BeginTrans
'         If iConsultIDSaved = False Then
'           Save_ConsultID
'
'           '-----------------------------------------------------------------------------
'           'If no consult_ID at this point then nothing else was done this consult but
'           'typed in a summary, hence have to put in a progress note to allow the summary
'           'to be shown by the reporting tool
'           '-----------------------------------------------------------------------------
'          Set Rs = Db.OpenRecordset("data_progressNotes_Temp", dbOpenTable)
'                ProgressNotes_Save pnGeneralHistory, 1, _
'                       0, "", "no clinical notes entered", True, _
'                       mrTable_ClinicalNotes, _
'                       0, _
'                       0, _
'                       Rs
'          Rs.Close
'          Set Q = Db.QueryDefs("MRQ_ProgressNotes_Finalise")
'          Q.Execute
'          Set Q = Db.QueryDefs("MRQ_ProgressNotes_DeleteTempNotes")
'          Q.Execute
'
'         End If
'
'
'         Set Q = Db.QueryDefs("MRQ_Consult_Summary_AddNew")
'         Q("Enter Summary") = sAuditText
'         Q("Enter Consult_ID") = gtconsult.Consult_ID
'         Q.Execute
'         Database_Unlock
'         ws.CommitTrans
'     End If
'     Exit Sub
' CSSError:
'     On Error Resume Next
'     ws.Rollback
'     Db.Close
'     ws.Close
'     Database_Unlock
' End Sub
'
'
'====================================
'query to wipe my database for import
'====================================
' -- wipes the past history, family history, social history, occupational history, care plans
' -- wipes recreational drugs
' -- wipes clin_consult where we have previously imported past history
' -- all this to be able to do the final import from DrsDesk
'
' Delete from  clin_consult.consult where "summary" ILIKE 'Past History Imported';
' Delete from clin_history.past_history;
' ALTER SEQUENCE clin_history.past_history_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' Delete from clin_history.team_care_members;
' ALTER SEQUENCE clin_history.team_care_members_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' Delete from clin_history.care_plan_components;
' ALTER SEQUENCE clin_history.care_plan_components_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' Delete from clin_history.care_plan_components_due;
' ALTER SEQUENCE clin_history.care_plan_components_due_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' Delete from clin_history.family_conditions;
' ALTER SEQUENCE clin_history.family_conditions_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' Delete from clin_history.family_links;
' ALTER SEQUENCE clin_history.family_links_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' Delete from clin_history.family_members;
' ALTER SEQUENCE clin_history.family_members_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' Delete from  clin_history.lu_exposures;
' ALTER SEQUENCE clin_history.lu_exposures_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' Delete from  clin_history.occupational_history;
' ALTER SEQUENCE clin_history.occupational_history_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' delete from clin_history.occupations_exposures;
' ALTER SEQUENCE clin_history.occupations_exposures_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' delete from clin_history.lu_careplan_components;
' ALTER SEQUENCE clin_history.lu_careplan_components_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' delete from clin_history.team_care_members;
' ALTER SEQUENCE clin_history.team_care_members_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' delete from clin_history.social_history;
' ALTER SEQUENCE clin_history.social_history_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' delete from clin_history.recreational_drugs;
' ALTER SEQUENCE  clin_history.recreational_drugs_pk_seq
'     INCREMENT 1  MINVALUE 1
'     MAXVALUE 9223372036854775807  RESTART 1
'     CACHE 1  NO CYCLE;
'
' delete from  clin_consult.consult where pk >25 and pk < 1804;
' delete from clin_consult.progressnotes where pk > 25 and pk < 1804;
' --1;3389 = fk_consults both owned by test_patient
' --2;48015
'
' --select * from clin_consult.consult where pk=127
' --select distinct (fk_consult) from clin_history.past_history
'
