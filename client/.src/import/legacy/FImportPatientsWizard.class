' Gambas class file

'Wizard page constants
Private cPageWelcome As Integer = 0          'page to welcome the user
Private cPageTemplate As Integer = 1            'page telling them what's it all about
Private cPageSelectProgram As Integer = 2    'page where they select source program eg Pracsoft
Private cPageSelectFile As Integer = 3       'page where they select file with patients in
Private cPageAnalyseImport As Integer = 4    'page where file is analysed and imported
Private cPageFinished As Integer = 5         'page where all ends      
Private bImportAll As Boolean 
'Type of import
Private iImportType As Integer 
Private Const cImportNew As Integer = 1
Private Const cImportUpdate As Integer = 2
Private Const cImportCreateTemplate As Integer = 3

Private Member As Collection
Private icounter As Integer
Public Towns As Collection
Private patient As Collection 
Public patients As Collection
Private bKeyValid As Boolean
Private bExit As Boolean
Private iPracsoft As Integer = 0
Private iMDW2 As Integer = 1
Private iMDW3 As Integer = 2
Private iBestPractice As Integer = 3
Private iGenie As Integer = 4
Private iProfile As Integer = 5
Private iMedicalSpectrum As Integer = 6
Private SampleData As Collection 
Private SampleRow As Collection  
Private source_programs As Collection 
Private FieldData As String[]
Private iCurrentSampleRow As Integer
Private bFieldDefsInFirstRow As Boolean
Private Errorcount As Integer

Private hLogfile As File
'These currently only for pracsoft
Private hfile As File
Private sLineInput As String 
'fixme work in progress
Private RACGP_File As Integer = 2
Private iTitle As Integer
Private iFirstname As Integer
Private iSurname As Integer
Private iSex As Integer
Private iMarital As Integer
Private iOccupation As Integer
Private iStreet1 As Integer 
Private iStreet2 As Integer
Private iSuburb As Integer
Private Isalutatation As Integer  
Private iPostcode As Integer
Private iState As Integer 
Private missing_towns As New Collection
Private missing_town As String
Private missing_town_count As Integer
Private missing_postcode_count As Integer 
Private iBirthdate As Integer
Private iMedicareNumber As Integer
Private iMedicareNumber_cardPos As Integer
Private iDVA As Integer
Private iCard_concession As Integer
Private iPhone_Home As Integer
Private iPhone_Work As Integer
Private iphone_mobile As Integer
Private iRetired As Integer
Private old_pk As Integer
Private old_pk_view As Variant
Private bits As String[]
Private iCommCount As Integer
Private iError As Integer
Private person As Collection
Private Field_Names As String[]
Private Field_Contents As String[]
Private address As Collection
Private addresses As Collection 
Private comm As Collection
Private comms As Collection 
Private old_comms As Collection
Private old_data As Collection
Private sSuburb As String
Private sPostcode As String
Private FPreview As FHtmlViewer
Private obs As Observer
Private currentTemplate As Collection
Private fk_template As Integer       ' key to import.lu_demographic_field_templates
Private fk_source_program As Integer  'key to import.lu_source_Program eg 'Pracsoft'
Private templates As Collection
Private currentProgram As Collection 
Private Programs As Collection
Private FViewLog As FHtmlViewer
Private skipped_towns As String[] 

Static Private Form_Import_Patients_Wizard As FImportPatientsWizard

Static Public Sub Skipped_Towns_Add(sTown As String)
   
   Try Form_Import_Patients_Wizard.add_town(sTown)
   If Error Then 
      Try FImportLegacyData.add_town(sTown)
   End If  

End

Public Sub add_town(sTown As String)
   
   skipped_towns.Add(sTown)
   
End

Public Sub form_Open()
   
   Init()

End

Public Sub Init()
   '  Settings_Load()

   combos_load()                                                           'load combo's sex/title/marital
   Get_towns()      'collection of all AU towns/suburbs         
   Try Settings_Load()                                                                              'collection of all AU towns/suburbs                                                  'collection of all AU towns/suburbs
   FViewLog = New FHtmlViewer(Vbox_LogFile) 
   FViewLog.tbWebBrowserClose.Visible = False                                       'html viewer to show error messages if desired
   ' obs = New Observer(FPreview.tbWebBrowserClose) As "tbPreview"           'and over-ride its close button to allow this form to use it
   Form_Import_Patients_Wizard = Me  
   modEditAreaHelpers.Resize_labels(Vbox_SelectData_Source, lblMeasure)
   txtLogFile.text = "/tmp/easygp_demographic_import.log"
   Wizard1[1].enabled = False   
   tlWelcome.Foreground = Color.black
   Refresh() 

End

Public Sub tbImportPath_Click()
   '---------------------------------------------
   'Select a file to import demographic data from
   '---------------------------------------------

   Dialog.Path = "import/"
   
   Dialog.Title = "Select Demographic Data Source File"
   Dialog.Filter = ["*.csv;*.txt", "Text Files"]
   If Dialog.OpenFile() Then Return
   lblImportFilename.text = Dialog.Path
   Sample_Data_Show()

End

Public Sub Refresh()
   '---------------------------------------------------------------------
   'Refresh screen/combos/collections to start up state
   'A text file to be imported eg = surname|firstname|birthdate etc
   'Load all avialable templates = demographic data sources into 
   'the combo, these may be 'named' eg Medical Director, or user defined
   '---------------------------------------------------------------------

   HBox_ComboVersion.Visible = True                
   HBox_ComboTemplate.Visible = True   
   txtTemplateName.Visible = False
   txtTemplateVersion.Visible = False
   source_programs = modUtilGUI.LoadCombo(cmbDemographicSource, modImportDBI.Source_Programs_Get(), "program")
   templates = modImportDBI.Templates_Get()
   cmbDemographicSource.index = -1                                'user muset choose template
   cmbVersion.index = -1     
   skipped_towns = New String[]

End

Public Sub Sample_Data_Show()
   '------------------------------------------------------
   'Load some sample data from the source file, 10 records
   'display a list in the edit area
   '------------------------------------------------------

   Dim hFile As File
   Dim sLineInput As String
   Dim icounter As Integer

   lvSampleData.Clear()
   SampleData = New Collection
   Try hfile = Open lblImportFilename.Text For Input 
   While Not Eof(hfile) And icounter < 100
      Line Input #hfile, sLineInput
      ' If InStr(sLineInput, "\"") Then
      '  'chkStripQuotes.value = True
      '  sLineInput = Replace(sLineInput, "\"", "")  
      ' End If    
      If InStr(sLineInput, ",") Then
         txtCurrentDelimiter.text = ","
         ' sLineInput = Replace(sLineInput, ",", "|")
         sLineInput = Replace(sLineInput, "\".\"", "|") 'replace "," with |
         sLineInput = Replace(sLineInput, ",\"", "|")   'replace ," with |
         slineInput = Replace(sLineInput, "\",", "|")   'replace ", with |
         sLineInput = Replace(sLineInput, "\"", "") 'because my logic is faulty in lines above
         txtReplaceDelimiterWith.text = "|"
      Else
         If InStr(sLineInput, "|") Then
            sLineInput = Replace(sLineInput, "\"", "") 
         Endif
      Endif
      SampleData.Add(sLineInput, icounter)
      lvSampleData.Add(icounter, sLineInput)
      
      Inc icounter
   Wend
   Close hfile
   lvSampleData.MoveFirst
   bFieldDefsInFirstRow = False
   If lvSampleData.count Then
      If InStr(Lower(lvSampleData.Item.text), "surname") Then
         bFieldDefsInFirstRow = True
         lvSampleData.MoveNext
         
      Endif
   Endif
   
   '---------------------------------------------------------------------
   'if this is a built-in demographic profile known to use, show a sample
   '---------------------------------------------------------------------
   'tlPatient.text = modImportDBI.Sample_Patient_HTML()
   Try Temproutine()
   ' Determine_Fields()

End

Public Sub Temproutine()

   Dim birthdate_bits As String[]
   
   lvSampleData.MoveCurrent
   
   tlSamplePatient.text = modImportDBI.Sample_Patient_HTML()
   Field_Contents = Split(SampleData[lvSampleData.key], "|")
   
   If iTitle <> 0 Then 
      tlSamplePatient.text = Replace(tlSamplePatient.text, "%title", Field_Contents[iTitle])
   Else
      tlSamplePatient.text = Replace(tlSamplePatient.text, "%title", "")
   End If
   Select Case Field_Contents[iSex]
      Case "M"
         tlSamplePatient.text = Replace(tlSamplePatient.text, "%sex", "Male")
      Case "F"
         tlSamplePatient.text = Replace(tlSamplePatient.text, "%sex", "Female")
   End Select
   Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%surname", Field_Contents[Isurname])
   birthdate_bits = Split(Field_Contents[iBirthdate], "/")
   If Len(birthdate_bits[0]) = 4 Then
      Field_Contents[iBirthdate] = birthdate_bits[2] & "/" & birthdate_bits[1] & "/" & birthdate_bits[0]
   Endif
   
   Try Field_Contents[iBirthdate] = Format(Val(Field_Contents[iBirthdate]), "dd/mm/yyyy")
   
   '  If InStr(Field_Contents[iBirthdate], " ") Then
   '   Field_Contents[iBirthdate] = Left(Field_Contents[iBirthdate], Len(Field_Contents[iBirthdate]) - InStr(Field_Contents[iBirthdate], " "))
   ' Endif
   ' Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%birthdate", Format(Val(Field_Contents[iBirthdate]), "dd/mm/yyyy"))
   Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%birthdate", Field_Contents[iBirthdate])
   Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%firstname", Field_Contents[Ifirstname]) 
   Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%street1", Field_Contents[istreet1])
   Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%suburb", Field_Contents[Isuburb])
   If iOccupation <> 0 Then 
      Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%occupation", Field_Contents[iOccupation]) 
   Else
      tlSamplePatient.text = Replace(tlSamplePatient.text, "%occupation", "")
   End If
   If iMedicareNumber <> 0 Then 
      Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%medicarenumber", Field_Contents[iMedicareNumber]) 
   Else
      tlSamplePatient.text = Replace(tlSamplePatient.text, "%medicarenumber", "")
   End If
   If iPhone_Home <> 0 Then
      Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%homephone", Field_Contents[iPhone_Home]) 
   Else
      tlSamplePatient.text = Replace(tlSamplePatient.text, "%homephone", "")
   Endif
   If iPhone_Work <> 0 Then
      Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%workphone", Field_Contents[iPhone_Work]) 
   Else
      tlSamplePatient.text = Replace(tlSamplePatient.text, "%workphone", "")
   Endif
   If iphone_mobile <> 0 Then
      Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%mobilephone", Field_Contents[iphone_mobile]) 
   Else 
      tlSamplePatient.text = Replace(tlSamplePatient.text, "%mobilephone", "") 
   Endif
   
   Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%salutation", "")
   Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%street2", "")
   Try tlSamplePatient.text = Replace(tlSamplePatient.text, "%marital", "")
   
End

Sub Determine_Fields()
   '  Dim fieldcontents As String[]
   '  Dim field As String 
   '  Dim hCtrl As Control
   '  Dim HB As HBox
   '  Dim cb As ComboBox
   '  Dim icounter As Integer
   '  
   '  iPhone_Home = -1 
   '  iphone_mobile = -1
   '  iPhone_Work = -1
   '  Try hfile = Open lblImportFilename.text For Input 
   '  If Error Then
   '     Message.info("Unable to open designated file - check file exists and try again")
   '     Return 
   '  End If   
   '  Inc Application.busy
   '  While Not Eof(hfile)  
   '     Line Input #hfile, sLineInput
   '     If InStr(Lower(sLineInput), "surname") Then
   '        chkFieldDefsFirstRow.value = True
   '     Else  
   '       chkFieldDefsFirstRow.value = False   
   '     End If
   '     If chkFieldDefsFirstRow.value = True Then
   '       Inc icounter
   '     Endif
   '    If InStr(sLineInput, "\"") Then
   '       chkStripQuotes.value = True
   '       sLineInput = Replace(sLineInput, "\"", "")
   '    End If
   '    If InStr(sLineInput, "|") Then
   '      txtCurrentDelimiter.text = "|"
   '      txtReplaceDelimiterWith.text = "|"
   '    Else
   '     If InStr(sLineInput, ",") Then
   '       txtCurrentDelimiter.text = ","
   '       sLineInput = Replace(sLineInput, ",", "|")
   '       txtReplaceDelimiterWith.text = "|"
   '     Endif
   '    End If
   '    If chkFieldDefsFirstRow.value = True And icounter = 1 Then
   '     fieldcontents = Split(sLineInput, "|")
   '     Combos_Load_Fields(fieldcontents)
   '   
   '    End If
   '  
   '   If icounter = 2 Then 
   '       FieldData = Split(sLineInput, "|")
   '       Break
   '    End If
   '    Inc icounter 
   '  Wend
   '  Close #hfile
   ' 
   ' 
   ' 
   ' Dec Application.Busy

End

Public Sub Guess_Sex(p As Collection) 
   '-----------------------------------------
   'Guesses the sex of the patient if missing
   'if not possible, set to unknown
   '-----------------------------------------

   Dim sql As String
   Dim $Result As Result

   sql = "Select firstname,sex from contacts.lu_firstnames where Lower(firstname) = $$"
   sql &= Lower(Trim(p!firstname)) & "$$"
   $Result = modDBConnect.exec_query(sql)
   If $Result.count Then
      p!sex = $Result!sex
      Select Case Lower(p!sex)
         Case "m"
            p!fk_sex = const.cSexMale
         Case "f"
            p!fk_sex = const.cSexFemale
         Case Else
            p!fk_sex = const.cSexUnknown
      End Select
      p.Remove("sex")
   Else
      p!fk_sex = const.cSexUnknown
   End If

End

Public Sub Guess_Title(p As Collection)
   '-------------------------------
   'Guesses a title on basis of age
   '-------------------------------

   Dim Age As Integer
   age = DateDiff(p!Birthdate, Now, gb.Year)
   If age < 18 Then
      If p!fk_sex = Const.cSexFemale Then
         p!fk_title = const.ctitleMiss
      Else
         p!fk_title = const.ctitleMaster
      End If
   Else
      If p!fk_sex = const.cSexFemale Then
         If Lower(p!sex) = "f" Then
            p!fk_title = const.ctitleMs
         Else
            p!fk_title = const.ctitleMr
         End If
      End If
   End If

End

Public Function Town_Find(Town As String) As Collection 
   'FIXME THIS IS WRONG - DUPLICATE TOWNS
   'NEED THE POSTCODE AS WELL
   '  Dim ad As cAddress

   Dim x As Integer
   Dim Suburb As New Collection 

   For Each Member In Towns
      If Upper(Member!town) = Town Then
         suburb!postcode = Member!postcode
         suburb!pk = Member!pk
         suburb!suburb = Member!town
         
         Return suburb 
      End If
   Next
   
End

Public Sub Get_towns()
   '------------------------------------------------------------
   'Populations the towns collection with towns for later lookup
   '------------------------------------------------------------

   towns = modContactsDBI.Towns_Get()

End

Public Sub combos_load()
   ' cmbSex.Add("Male", 0)
   ' cmbSex.Add("Female", 1)
   ' cmbSex.Add("Unknown", 2)
   ' cmbSex.Add("Transexual", 3)
   ' cmbSex.Add("Hermaphrodite", 4)
   '   
   ' cmbTitle.Add("Mr", 0)
   ' cmbTitle.Add("Mrs", 1)
   ' cmbTitle.Add("Master", 2)
   ' cmbTitle.Add("Miss", 3)
   ' cmbTitle.Add("Dr", 4)
   ' cmbTitle.Add("Prof", 5)
   ' cmbTitle.Add("Ms")
   ' 
   ' cmbMarital.Add("Unknown", 0)
   ' cmbMarital.Add("Single", 1)
   ' cmbMarital.Add("Married", 2)
   ' cmbMarital.Add("Divorced", 3)
   ' cmbMarital.Add("Defacto", 4)
   ' cmbMarital.Add("Widow", 5)
   ' cmbMarital.Add("Widower", 6)
   
End

Public Sub Import(bWriteToDatabase As Boolean)
   '--------------------------------------------------------------
   'Read the data file.
   'bFieldDefsInFirstRow set when file was selected
   'If first row contains field definitions, then skip that line
   'Create a patient collection for each line in the file
   'Start writing to the log file
   'errored_rows ie those not imported are counted
   'total row count is in icounter
   '----------------------------- --------------------------------

   Dim errored_rows As Integer    
   Dim LastImportedPatient As Collection 
   Dim LastPatient As String 
   
   FViewLog.WebView1.HTML = ""
   Try hFile = Open lblImportFilename.text For Input
   Try hLogfile = Open Trim(txtLogFile.text) For Write Create
   If bWriteToDatabase = False Then
      Print #hLogfile, "Starting data analysis....."
   Else 
      Print #hLogfile, "Starting data import......"
   End If
   Errorcount = 0
   icounter = 0 
   Inc Application.busy
   While Not Eof(hfile)
      Line Input #hfile, sLineInput
      If bFieldDefsInFirstRow And icounter = 0 Then
         Line Input #hfile, sLineInput
      Endif
      '-------------------------------------------------------------------------------
      'User only wants to import patients new since last import
      'Works like this: Reads last patient in the patients view
      'lineinputs down to their name in the text file file, then goes from their
      'Caveat: if the patient name has been changed by EasyGP then this won't work
      'if duplicate patients with same birthdate and firstname and surname logic fails
      '-------------------------------------------------------------------------------
      If ChkOnlyNewPatients.value = True And bImportAll = False Then                 'user only wants patients since last update
         If IsNull(LastImportedPatient) Then                  'get patient collection for last patient in patients view   
            LastImportedPatient = modDBConnect.exec_query_first("Select pk_view, firstname, surname, birthdate From contacts.vwPatients ORDER BY FK_PATIENT DESC LIMIT 1")
         End If
         bits = Replace_Field_Delimiters(sLineInput)
         bits[iBirthdate] = Birthdate_Extract(bits[iBirthdate]) 
         If Val(bits[iBirthdate]) = LastImportedPatient!birthdate Then   'same birthdate? check if surname, firstname same.
            If (Lower(bits[iSurname]) = Lower(LastImportedPatient!surname)) And (Lower(bits[iFirstname]) = Lower(LastImportedPatient!firstname)) Then
               bImportAll = True   'at least, import "the rest" from this point
            Endif
         End If
      End If
      '
      If bImportAll = True Then                                                  
         Try SampleRow = Patient_Create(sLineInput, bWriteToDatabase) 
         If Error Then
            Print #hLogfile, "Parsing Failed:" & sLineInput
            Inc errored_rows
         End If
         Inc icounter
         lblPatientCount.text = icounter
      End If
      Wait 
   Wend
   Close #hfile
   Dec Application.Busy
   If bWriteToDatabase = False Then
      Print #hLogfile, "Finished analysis....."
   Else
      Print #hLogfile, "Finished importing...."
   End If
   If bWriteToDatabase = False Then 
      Print #hLogfile, Str(icounter) & " patients analysed<BR>"
      Print #hLogfile, Str(errored_rows) & "rows were not imported because of errors"
   Else
      Print #hLogfile, Str(icounter) & " patients imported<BR>"
      Print #hLogfile, Str(errored_rows) & "rows were not imported because of errors"
   End If
   If bWriteToDatabase = True Then
      modDBConnect.CommitTrans()
   End If
   Close #hlogfile
   view_Log()

End 

Public Function Birthdate_Extract(sBirthdate As String) As String

   Dim birthdate_bits As String[]
   
   birthdate_bits = Split(sBirthdate, "/")
   If Len(birthdate_bits[0]) = 4 Then
      bits[iBirthdate] = birthdate_bits[2] & "/" & birthdate_bits[1] & "/" & birthdate_bits[0]
   Endif
   
   Return Format(Val(bits[iBirthdate]), "dd/mm/yyyy")
   
End

Public Function Replace_Field_Delimiters(sLineInput As String) As String[]
   '-------------------------------------------------
   'Replaces existing delimiters with pipe characters
   '-------------------------------------------------  

   sLineInput = Replace$(sLineInput, txtCurrentDelimiter.text, txtReplaceDelimiterWith.text)
   If InStr(sLineInput, ",") Then
      sLineInput = Replace(sLineInput, "\".\"", "|") 'replace "," with |
      sLineInput = Replace(sLineInput, ",\"", "|")   'replace ," with |
      slineInput = Replace(sLineInput, "\",", "|")   'replace ", with |
      sLineInput = Replace(sLineInput, "\"", "") 'because my logic is faulty in lines above
   Endif
   sLineInput = Replace$(sLineInput, "\"", "") 'remove the double quotes.
   Return Split(sLineInput, "|")

End

Public Function Patient_Create(sLineInput As String, bSave As Boolean) As Collection 

   Dim C As Collection
   Dim sql As String 
   Dim bPatientExists As Boolean
   Dim currentSuburb As Collection 
   Dim birthdate_bits As String[]
   Dim skipped_town As String 
   Dim bSkipTown As Boolean
   Dim misspelt_town As Collection
   '-----------------------------------------------------------------------------------
   'Create  s the collections needed to import a patient, returns the patient collection
   'a bit different from usual in that I've included the address and comms in the 
   'collection, used for display purposes by the calling routine.
   '-----------------------------------------------------------------------------------
   iCommCount = 0
   ierror = False 'assume the best
   person = New Collection
   patient = New Collection 
   
   address = New Collection
   addresses = New Collection 
   comms = New Collection 
   'need to ask ian how to replace "field","field1","field,2","field3" etc so that comma within field not lost
   
   ' sLineInput = Replace$(sLineInput, txtCurrentDelimiter.text, txtReplaceDelimiterWith.text)
   '  If InStr(sLineInput, ",") Then
   '    sLineInput = Replace(sLineInput, "\".\"", "|") 'replace "," with |
   '    sLineInput = Replace(sLineInput, ",\"", "|")   'replace ," with |
   '    slineInput = Replace(sLineInput, "\",", "|")   'replace ", with |
   '    sLineInput = Replace(sLineInput, "\"", "") 'because my logic is faulty in lines above
   '  Endif
   ' sLineInput = Replace$(sLineInput, "\"", "") 'remove the double quotes.
   ' 
   bits = Replace_Field_Delimiters(sLineInput)
   '   bits = Split(sLineInput, "|")
   
   ' birthdate_bits = Split(bits[iBirthdate], "/")
   ' If Len(birthdate_bits[0]) = 4 Then
   '    bits[iBirthdate] = birthdate_bits[2] & "/" & birthdate_bits[1] & "/" & birthdate_bits[0]
   ' Endif
   bits[iBirthdate] = Birthdate_Extract(bits[iBirthdate])
   ' bits[iBirthdate] = Format(Val(bits[iBirthdate]), "dd/mm/yyyy")
   person!firstname = bits[iFirstname]
   If bits[iFirstname] = "" Then
      Print #hLogfile, "no firstname:" & person!firstname & " " & person!surname
      Inc Errorcount
      iError = True
   End If
   person!surname = bits[iSurname]
   If bits[iSurname] = "" Then
      Print #hLogfile, "no surname:" & person!firstname & " " & person!surname
      Inc Errorcount
      iError = True
   End If
   '-----------------------------------
   'Missing Birthdate, put in a default
   '-----------------------------------
   person!birthdate = Val(bits[iBirthdate])
   If Year(person!birthdate) = 0 Then
      Print #hLogfile, person!firstname & " " & person!surname & "- no birthdate"
      person!birthdate = Val("01/01/1901")
      Inc Errorcount
      iError = True
   End If
   '----------------------------------------------------------------
   'If missing sex, attempt to guess sex on basis of their iFirstname
   'from contacts.lu_iFirstnames table which has sex in there
   '----------------------------------------------------------------
   If bits[iSex] = "" Then
      Print #hLogfile, person!firstname & " " & person!surname & "- no sex"
      Inc Errorcount
      Guess_Sex(person)
   Else
      Select Case Upper(Trim(bits[iSex]))
         Case "M"
            person!fk_sex = const.cSexMale
         Case "F"
            person!fk_sex = const.cSexFemale
      End Select  
   End If
   '------------------------------------------------- 
   'If no title, try and guess it on basis of age/sex
   'We can't always be correct!!!!
   '-------------------------------------------------
   person!title = bits[iTitle]
   person!fk_title = const.ctitleUnKnown
   If bits[iTitle] = "" Then 
      Print #hLogfile, person!firstname & " " & person!surname & "- no title"
      Inc Errorcount
      Guess_Title(person)
   Else
      Select Case Upper(Trim(bits[ititle]))
         Case "MR"
            person!fk_title = const.ctitleMr
         Case "MRS"
            person!fk_title = const.ctitleMrs
         Case "MASTER", "MST"
            person!fk_title = const.ctitleMaster
         Case "MS"
            person!fk_title = const.ctitleMs
         Case "MISS"
            person!fk_title = const.ctitleMiss
         Case "PROF"
            person!fk_title = const.ctitleProf
         Case "DR"
            person!fk_title = const.ctitleDr
         Case Else
            person!fk_title = const.ctitleUnKnown
      End Select
   End If
   Try person.Remove("title")
   '--------------------------------------------------
   'only importing one address from pracsoft at moment
   '--------------------------------------------------
   address = New Collection 
   address!fk_lu_address_type = const.CommModalityHome
   address!street1 = Trim(bits[iStreet1])
   '----------------------------------------------------------------------
   'The staff in our practice seem to have constantly put in wrong suburbs
   'Do some massaging of common mistakes
   '1: Strip blanks off the end
   '2: Remove a fullstop eg Whitebridge. instead of whitebridge
   '3: substitute MOUNT for MT
   '4: warabrook instead of WARRABROOK
   '------------------------------------
   address!suburb = Upper(Trim(bits[iSuburb]))
   If Right(address!suburb, 1) = "." Then   
      address!suburb = Left(address!suburb, Len(address!suburb - 1))
   End If
   If InStr(address!suburb, "MT ") Then
      address!suburb = Replace$(address!suburb, "MT ", "MOUNT ")
   End If
   If InStr(address!suburb, " HTS") Then
      address!suburb = Replace$(address!suburb, " HTS", " HEIGHTS")
   End If
   If address!suburb = "WARRABROOK" Then
      address!suburb = "WARABROOK"
   End If
   If address!suburb = "JEWELS" Then
      address!suburb = "JEWELLS"
   End If
   
   If bits[iSuburb] = "" Then
      iError = True
   Else
      '----------------------------------------------------------------------------------------
      'Get key for the town, if fails, popup modal dialog box, give user chance to correct this
      '----------------------------------------------------------------------------------------
      currentSuburb = Town_Find(address!suburb)
      If Not IsNull(currentSuburb) Then
         address!fk_town = currentSuburb!pk
         address!postcode = currentSuburb!postcode 
      Else                                                               
         '-------------------------------------------------------
         'Town/Suburb not found, have we encountered this before?
         'Check contacts.lu_misspelt_towns table
         '-------------------------------------------------------
         missing_towns.Add(bits[iSuburb], missing_town_count)
         Inc missing_town_count
         Print #hLogfile, person!firstname & " " & person!surname & " - failed to match suburb:" & address!suburb & " checking misspelt towns table for match...."
         C = modContactsDBI.Misspelt_towns_Get(address!suburb)
         If IsNull(c)
            If chkPromptForPostcodes.value = True Then 
               'First check if we have encountered this, found no equivalent, and marked to skip
               bSkipTown = False  
               For Each skipped_town In skipped_towns
                  If Lower(skipped_town) = Lower(address!suburb) Then
                     bSkipTown = True
                     Print #hLogfile, person!firstname & " " & person!surname & " - skipping suburb - not found previously"
                     Break
                  Endif
               Next
               If bSkipTown = False Then                 
                  
                  misspelt_town = New Collection
                  misspelt_town!town_misspelt = address!suburb
                  FSelectTown.txtNotFound.text = address!suburb
                  FSelectTown.txtFirstname.text = person!firstname
                  FSelectTown.txtSurname.text = person!surname
                  FSelectTown.txtbirthdate.text = person!birthdate
                  FSelectTown.txtstreet1.text = address!street
                  Dec Application.Busy
                  FSelectTown.ShowModal()
                  Inc Application.Busy
                  If FSelectTown.fk_town Then
                     address!fk_town = FSelectTown.fk_town
                     misspelt_town!fk_town = FSelectTown.fk_town
                     misspelt_town!town = FSelectTown.town
                     modDBConnect.BeginTrans
                     modDBConnect.insert("contacts.lu_misspelt_towns", misspelt_town)
                     modDBConnect.CommitTrans
                  Else
                     Print #hLogfile, person!firstname & " " & person!surname & " - no suburb selected for substitution"
                     Inc Errorcount
                  End If
               End If
               Inc Errorcount
               iError = True
            End If
         Else
            address!fk_town = C!fk_town
            address!suburb = C!town
            Print #hLogfile, person!firstname & " " & person!surname & " -  substituted " & address!suburb
         End If
      End If
   End If
   '---------------------------
   'Importing up to three comms
   'home phone
   '---------------------------
   If iPhone_Home <> -1 Then
      If bits[iPhone_Home] <> "" Then
         comm = New Collection 
         comm!fk_type = const.CommModalityHome
         comm!value = bits[iPhone_Home] 
         Comms.Add(comm, iCommCount)
         Inc iCommCount
      End If
   End If
   '------------
   'mobile phone
   '------------
   If iphone_mobile <> -1 Then
      If bits[iphone_mobile] <> "" Then
         comm = New Collection 
         comm!fk_type = const.CommModalityMobile
         comm!value = bits[iphone_mobile] 
         Comms.Add(comm, iCommCount)
         Inc iCommCount
      End If
   End If
   '----------
   'work_phone
   '----------
   If iPhone_Work <> -1 Then 
      If bits[iPhone_Work] <> "" Then
         comm = New Collection 
         comm!fk_type = const.CommModalityWork
         comm!value = bits[iPhone_Work] 
         Comms.Add(comm, iCommCount)
         Inc iCommCount
      End If
   End If   
   '------------------------------------------------
   'Create the patient collection for future saving
   '------------------------------------------------
   patient = New Collection
   patient!medicare_number = bits[iMedicareNumber]
   patient!medicare_ref_number = bits[iMedicareNumber_cardPos]
   person!retired = False 
   sSuburb = address!suburb        'kept only to display to user as sample data
   sPostcode = address!postcode    'kept only to display to user as sample data
   address.Remove("postcode")
   address.Remove("suburb")
   address!country_code = "AU"
   addresses = New Collection
   addresses.Add(address, 0)    
   old_data = New Collection      'not needed except for the parameters needed by the save routines
   old_pk = 0                     'not needed except for the parameters needed by the save routines
   old_comms = New Collection     'not needed except for the parameters needed by the save routines
   If bSave = True Then 
      '-------------------------------------------------
      'if importing or updating, check if patient exists
      'FIXME: MAKE ME MORE SOPHISTICATED - EG IF NAME
      'NOT FOUND, BUT  firstname and address and DOB the
      'same then could have example got married and changed
      'names. If don't get around to this, can merge FIXME NOT IMPLEMENTED
      'with an existing record.
      '-------------------------------------------------
      bPatientExists = False 
      If iImportType = 2 Or iImportType = 1 Then       'update or add existing data.
         sql = "Select fk_patient, fk_person, surname, firstname, birthdate from contacts.vwPatients where "
         sql &= "lower (firstname)=$$" & Lower(person!firstname) & "$$ "
         sql &= " AND lower (surname)=$$" & Lower(person!surname) & "$$"
         sql &= " And birthdate = '" & Format(person!birthdate, "dd/mm/yyyy") & "'"
         C = modDBConnect.exec_query_first(sql)
         If IsNull(C) Then
            bPatientExists = False 
         Else
            bPatientExists = True   
         Endif
      End If
      'FIX ME  - EDIT EXISTING PATIENT.
      If bPatientExists = False Then
         person!fk_person = modContactsDBI.Person_Save(old_data, old_pk, person, comms, old_comms)
         modContactsDBI.Person_Addresses_Save(old_data, old_pk_view, addresses, person)
         patient!fk_person = person!fk_person
         patient!fk_patient = modContactsDBI.Patient_Save(old_data, old_pk, patient)
      Else
         'Existing patient ?how to ensure ID is correct, use the fk_person
         ' patient!fk_patient = modContactsDBI.Patient_Get_pk_Using_Person_pk(C!fk_person)
         patient!fk_person = C!fk_person
         patient!fk_patient = C!fk_patient
         old_data = New Collection
         old_data.Add(c, c!fk_patient)
         modContactsDBI.Patient_Save(old_data, patient!fk_patient, patient)
         
      End If
   End If
   '-----------------------------------------------------------------------------------------
   'The person collection is no longer needed during the save, but is for sample data display
   '-----------------------------------------------------------------------------------------
   person!comms = comms
   person!address = address
   person!address!suburb = sSuburb
   person!address!postcode = sPostcode
   Return person

End

Public Sub cmbDemographicSource_Click()
   '-------------------------------------------------------------------------
   'User has clicked on a demographic source - set all the field combo boxes
   '------------------------------------------------------------------------

   Dim template As Collection
   Dim fk_source_program As Integer = source_programs[cmbDemographicSource.index]!pk
   
   Dim x As Integer

   bExit = True  
   Ifirstname = 0
   Isurname = 0
   ititle = 0
   iBirthdate = 0
   Isex = 0
   iMarital = 0
   Istreet1 = 0
   Istreet2 = 0 
   Isuburb = 0
   Isalutatation = 0
   iMedicareNumber = 0
   iMedicareNumber_cardPos = 0
   iDVA = 0
   iCard_concession = 0
   iPhone_Home = 0
   iPhone_Work = 0
   iphone_mobile = 0
   iRetired = 0
   
   For Each template In Templates
      If template!pk_source_program = fk_source_program Then
         Field_Names = Split(template!field_names, "|")
         Print template!field_names
         '  Combos_Load_Fields(fieldcontents)
         ' Template_Versions_load() 'FIXME ALLOW THIS
         cmbVersion.Clear
         cmbVersion.Add(template!version)
         ' fieldcontents[x] = template!
         '  Try cmbFieldSurname.Index = template!surname_field_order
         Try Isurname = template!surname_field_order
         ' Try cmbFieldFirstname.index = template!firstname_field_order
         Try iFirstname = template!firstname_field_order
         '  Try cmbFieldBirthdate.index = template!birthdate_field_order
         Try iBirthdate = template!birthdate_field_order
         '  Try cmbFieldTitle.index = template!title_field_order
         Try iTitle = template!title_field_order
         '  Try cmbFieldSex.index = template!sex_field_order
         Try Isex = template!sex_field_order
         '  Try cmbFieldMarital.index = template!marital_field_order
         Try iMarital = template!marital_field_order
         ' Try cmbFieldSalutation.index = template!salutation_field_order
         Try Isalutatation = template!salutation_field_order
         Try iMedicareNumber = template!medicare_field_order
         ' Try cmbFieldStreet1.index = template!street1_field_order
         Try Istreet1 = template!street1_field_order
         '  Try cmbFieldStreet2.index = template!street2_field_order
         Try Istreet2 = template!street2_field_order
         '  Try cmbFieldsuburb.index = template!suburb_field_order
         Try Isuburb = template!suburb_field_order 
         '  Try cmbFieldPhoneHome.index = template!homephone_field_order
         Try iPhone_Home = template!homephone_field_order
         ' Try cmbFieldPhoneWork.index = template!workphone_field_order
         '  Try cmbFieldPhoneMobile.index = template!mobile_field_order
         Try iphone_mobile = template!mobile_field_order
         '  Try cmbFieldRetired.index = template!retired_field_order
         Try iRetired = template!retired_field_order
         Try iDVA = template!veterens_field_order
         Try iMedicareNumber_cardPos = template!medicare_card_pos_field_order
         Try iCard_concession = template!Card_concession_number_field_order
         Break
      Endif
   Next
   bExit = False
   
End

Public Sub lvSampleData_Select()
   
   Temproutine()
   
End

Public Sub tbAnalyse_Click()

   HBox_Log.Visible = True  
   Import()(False)
   
End

Public Sub view_Log()
   
   Dim hfile As File
   Dim sLineInput As String
   Dim sErrorLog As String

   Try hfile = Open Trim(txtLogFile.text) For Input
   While Not Eof(hfile)
      Line Input #hfile, sLineInput
      sErrorLog &= sLineInput & "<BR>"
   Wend
   Close #hfile
   FViewLog.WebView1.HTML = "<HTML><BODY>" & sErrorLog & "</BODY></HTML>"
   
End

Public Sub Reset()
   '-------------------------------------------------------
   'Resets all combos checkboxes, clears any lists and HTML
   '-------------------------------------------------------

   cmbDemographicSource.index = -1
   cmbVersion.index = -1
   chkPromptForPostcodes.value = False   
   lvSampleData.clear
   lblImportFilename.text = ""
   txtCurrentDelimiter.text = ""
   txtReplaceDelimiterWith.text = ""
   tlSamplePatient.text = ""
   lblAnalysing.text = ""
   FViewLog.WebView1.html = "<HTML></BODY></BODY></HTML>"
   
End

Public Sub Wizard1_Change()
   'Wizard has just changed to the current page
   
   Steps_FgColors_Reset()
   Select Case Wizard1.Index
      Case cPageWelcome
         tlWelcome.Foreground = Color.Black
         tlWelcome.Font.Bold = True
         Reset()
      Case cPageTemplate  
         tlNotes.Foreground = Color.Black
         tlNotes.Font.bold = True   
      Case cPageSelectProgram
         tlSelectSource.Foreground = Color.Black
         tlSelectSource.Font.Bold = True 
      Case cPageSelectFile
         tlSelectFile.Foreground = Color.Black
         tlSelectFile.Font.bold = True
      Case cPageAnalyseImport
         tlAnalyseImport.Foreground = Color.Black
         tlAnalyseImport.Font.Bold = True
      Case cPageFinished
         tlFinish.Foreground = Color.Black
         tlFinish.Font.Bold = True  
   End Select
   
End

Public Sub Wizard1_BeforeChange()
   '-------------------------------------------------------------------
   'This event triggers after the user has clicked the next button, but
   'before the page actually changes, so here is an opportunity to stop
   'the event if the information on the page is not correct
   'ie STOP EVENT > ABORTS THE PAGE CHANGE
   '--------------------------------------------------------------------

   Dim $str As String
   If Bexit Then Return 
   Select Case Wizard1.Index
         
      Case cPageWelcome
         Select Case iImportType
            Case 0
               Stop Event
               Message.info("Please select how you wish to import the data before proceeding")
            Case 4
            Case Else
               Stop Event
               bExit = True
               Wizard1.index = cPageSelectProgram
               bExit = False   
         End Select
         
      Case cPageTemplate
         
      Case cPageSelectProgram
         If cmbDemographicSource.index = -1 Or cmbVersion.index = -1 Then
            Message.Info("Please select the source program and version before proceeding")
            Stop Event
            Return 
         End If
         Try lblImportFilename.text = "home/richard/patients.csv"
         If Not Error Then
            Try Sample_Data_Show()
         Endif
      Case cPageSelectFile
         If lblImportFilename.text = "" Then
            Message.Info("Please select a file to import")
            Stop Event
            Return
         End If
         
         Try hfile = Open lblImportFilename.text For Input 
         If Error Then
            Message.info("Unable to open designated file - check file exists and try again")
            Return 
         Else
            Settings["Import/demographic_filename"] = lblImportFilename.text
         End If 
         Close #hfile 
         
   End Select

End

Public Sub Steps_FgColors_Reset()
   '-----------------------------------------------------------------------------
   'Just as the wizard changes, all the steps foreground set back to gray
   'so that when the current page is selected its 'step title' is made black bold
   'by wizard_change
   '-----------------------------------------------------------------------------

   Dim tl As TextLabel
   Dim hctrl As Control

   For Each hctrl In VBox_Steps.children
      If Hctrl Is TextLabel Then
         tl = hctrl
         tl.Foreground = Color.Gray
         tl.Font.Bold = False 
      Endif
   Next

End

Public Sub rbImportType_Click()
   'set to cImportNew, cImportUpdate, cImportCreateTemplat

   iImportType = Last.tag   
   bImportAll = True          'default to import whole file unless user selects otherwise next step
   Select Case iImportType
         
      Case cImportCreateTemplate
         Wizard1[1].enabled = False
         HSplit_UserDefinedTemplate.Visible = True   
         tlSamplePatient.Visible = False
      Case Else
         Wizard1[1].enabled = False
         HSplit_UserDefinedTemplate.Visible = False   
         tlSamplePatient.Visible = True
   End Select 
   
End

Public Sub wizard_buttons_Click()
   
   Select Case Last.tag
      Case "analyse"
         '-------------------------------------------------------------
         'Analyse the file, point out any glaring errors but don't save
         'Display progress as we go by counter, at end log is available
         '-------------------------------------------------------------
         With lblAnalysing
            .Visible = True   
            .text = "Analaysing ...."
         End With 
       Import(False)
    Case "import"
      With lblAnalysing
         .Visible = True   
         .text = "Importing ...."
      End With 

       Import(True)
    Case "log"
  End Select

End

Public Sub Wizard1_Close()

  Wizard1.index = 0
  Settings_Save()
End

Public Sub Settings_Save()
     Settings["Import_wizard_Patient/HSplit_UserDefinedTemplate.layout"] = HSplit_UserDefinedTemplate.layout
End

Private Sub Settings_Load()

    Try HSplit_UserDefinedTemplate.layout = Settings["Import_wizard_Patient/HSplit_UserDefinedTemplate.layout"] 
  
End





Public Sub ChkOnlyNewPatients_Click()
   
   If Last.value = True Then 
      bImportAll = False
   End If

End

