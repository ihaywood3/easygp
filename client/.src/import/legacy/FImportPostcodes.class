' Gambas class file

Private Localities As Collection 
Private Locality As String 
Private Existing_Localities As Collection 
Private postcode As Integer = 0
Private town As Integer = 1
Private state As Integer = 2
Private comment As Integer = 3
Private hLogfile As File
Private bFieldDefsInFirstRow As Boolean
Private Field_Contents As String[]
Private FViewLog As FHtmlViewer
Private countries As Collection 
Private country_code As String 
Private bExit As Boolean
Private iImportType As Integer
Private hFile As File 
Private log_file As String = "/tmp/easygp_postcode_import.log"
Private The_Collection As Collection 
Private form_help As FHtmlViewer
Private bBodgyData As Boolean
Private bTransactionCommitted As Boolean 

Public Sub Form_Open()
   
   Init()
   
End

Public Sub Init()
   
   rbUpdate.value = True
   lblMeasure.text = "Current Field Delimiter   "
   modEditAreaHelpers.Resize_labels(VBox_Page_Organisation, lblMeasure)
   cmbCountries.Add("Australia", 0)
   With form_help = New FHtmlViewer(VBox_Help_Page2)
      .HBox_Heading.Visible = True
      .tbWebBrowserZoomIn.Visible = True
      .tbWebBrowserZoomOut.Visible = True  
      .Padding = 5
      .Help_Show("updating-postcodes.html")
   End With
   FViewLog = New FHtmlViewer(Vbox_LogFile)
   Reload()                                         'load existing data  
   txtImportFilename.SetFocus()
   
End

Public Sub Reload()
   
   Dim sql As String
   
   Existing_Localities = modContactsDBI.Town_state_postcode_get() 'all the data in the lu_towns table ordered alphabetically
   
End

Public Sub EditAreaTextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub EditAreaTextBox_LostFocus()
   
   Last.BackGround = Color.White 
   
End

Private Sub Settings_Load()
   
   Try HSplit_Postcodes.Layout = Settings["Import/HSplit_Postcodes.Layout"] 
   
End

Public Sub Settings_Save()
   
   Settings["Import/HSplit_Postcodes.Layout"] = HSplit_Postcodes.Layout
   
End

Public Sub tbImportPath_Click()
   
   '--------------------------------------
   'Select a file to import Localities from
   '--------------------------------------
   Dim hfile As File
   Dim sFilename As String
   Dim sLineInput As String
   Dim hCtrl As Control
   Dim lbl As Label
   Dim x As Integer
   Dim filepath As String 
   
   Dim sMsg As String 
   
   Dialog.Path = "import/"
   
   Dialog.Title = "Select Demographic Data Source File"
   Dialog.Filter = ["*.csv;*.txt", "Text Files"]
   If Dialog.OpenFile() Then Return
   Wait 'visually removes the dialog quicker, visible on slow systems
   txtImportFilename.text = Dialog.Path
   Sample_Data_Show()
   
End

Public Sub Sample_Data_Show()
   '------------------------------------------------------
   'Load some sample data from the source file, 10 records
   'display a list in the edit area
   '------------------------------------------------------
   
   Dim hFile As File
   Dim sLineInput As String
   Dim icounter As Integer
   
   Inc Application.Busy
   lvSampleData.Clear()
   Localities = New Collection
   Try hfile = Open txtImportFilename.Text For Input 
   While Not Eof(hfile)
      Line Input #hfile, sLineInput
      If InStr(sLineInput, ",") Then
         txtCurrentDelimiter.text = ","
         sLineInput = Replace(sLineInput, "\"", "") 'replace " with nothing
         txtReplaceDelimiterWith.text = ",|"
      Endif
      Localities.Add(sLineInput, icounter)
      lvSampleData.Add(icounter, sLineInput)
      Inc icounter
   Wend
   Close hfile
   Dec Application.Busy
   lvSampleData.MoveFirst
   bFieldDefsInFirstRow = False
   If lvSampleData.count Then
      If Not InStr(Lower(lvSampleData.Item.text), "pcode")
         Message.info("Your file does not appear to be a genuine list of Australian Postcodes.")
         bBodgyData = True 
         Return
      Endif
      bBodgyData = False   
      lvSampleData.MoveFirst()
      If InStr(Lower(lvSampleData.Item.text), "pcode") Then
         bFieldDefsInFirstRow = True
         lvSampleData.MoveNext()
      Endif
      lvSampleData.Item.Selected = True 
      tbImport.enabled = True  
   Endif
   
End

Public Sub ShowData()
   
   tlSamplePostcode.text = modImportDBI.Sample_Postcode_HTML()
   Field_Contents = Split(Localities[lvSampleData.key], ",")
   tlSamplePostcode.text = Replace$(tlSamplePostcode.text, "%postcode", Field_Contents[0])
   tlSamplePostcode.text = Replace$(tlSamplePostcode.text, "%locality", Field_Contents[1])
   tlSamplePostcode.text = Replace$(tlSamplePostcode.text, "%state", Field_Contents[2])
   
End

Public Sub lvSampleData_Select()
   
   ShowData()
   
End

Public Sub tbImport_Click()
   
   If rbUpdate.value = False Then 
      Message.Info("Please select the type of import")
      rbUpdate.SetFocus()
      Return
   End If  
   If txtImportFilename.text = "" Or rbUpdate.value = False Then
      Message.Info("Please select a file to import by clicking on the select file button.")
      tbImportPath.SetFocus()
      Return
   End If   
   If bBodgyData = True Then
      Message.info("Your file does not appear to be a genuine list of Australian Postcodes.")
      Return
   End If   
   Try hfile = Open txtImportFilename.text For Input 
   If Error Then
      Message.info("Unable to open designated file - check file exists and try again")
      Return 
   End If 
   Close #hfile 
   Import()
   
End

Public Sub Import()
   'Check locality against existing data, only add if new ?FIXME: does a postcode ever change for a locality? ask Aust Post
   
   Dim R As Result
   Dim C As Collection 
   Dim icounter As Integer
   Dim iTownNew As Integer
   Dim sql As String
   Dim sMsg As String
   Dim existing_locality As Collection 
   Dim bNewTown As Boolean
   Dim sExistingData As String
   Dim sNewDAta As String 
   
   Inc Application.Busy
   
   bTransactionCommitted = False 
   lblAnalysing.text = ""
   FViewLog.WebView1.HTML = "<HTML><BODY>Analysing existing database postcocdes.....</BODY><HTML>"
   If rbImport.value = True Then
      sMsg = "Starting to import the postcode data...."
   Else
      sMsg = "Analysing postcode data for update ...."
   Endif
   Try hLogfile = Open Trim(log_file) For Write Create
   Print #hLogfile, sMsg 
   '---------------------------------------------------------------------------------
   'Each database entry in lu_towns has these fields
   'town (aka location - could be single entity or suburb in city)
   'postcode
   'state
   'comment - needed because Aust Post uses different postcode for post office boxes
   '---------------------------------------------------------------------------------
   For Each Locality In Localities                        'all the new data extracted from the cvs postcode file
      bNewTown = True                                   'assume new town
      Field_Contents = Split(Locality, ",")
      If icounter > 0 Then                              'skip field-defs in first row
         Field_Contents = Split(Locality, ",")
         sNewdata = Upper(Field_Contents[town] & Field_Contents[state] & Field_Contents[postcode])
         lblAnalysing.text = Field_Contents[town] & " " & Field_Contents[state] & " " & Field_Contents[postcode]
         Wait
         If Existing_Localities.Exist(sNewdata) Then 
            bNewTown = False
         Endif
         If bNewTown Then                          'add the new locality   
            If iTownNew = 0 Then
                Print #hLogfile, "The following new towns were found:"
            Endif
            C = New Collection
            C!town = Field_Contents[town]
            c!postcode = Field_Contents[postcode]
            C!state = Field_Contents[state]
            c!comment = Field_Contents[comment]
            C!pk = modDBConnect.insert("contacts.lu_towns", C)
            smsg = "" & Field_Contents[town] & " " & Field_Contents[state] & " " & Field_Contents[postcode] & " " & Field_Contents[comment]      
            Print #hLogfile, sMsg
            Inc iTownNew
         Endif
      End If   
      Inc icounter  
   Next
   sMsg = Str(icounter) & " towns analysed" 
   Print #hLogfile, sMsg
   
   Dec Application.Busy
   If iTownNew Then
      sMsg = Str(iTownNew) & " towns can be added to your existing database.\n\nDo you want to import these?"
      If Message.Question(sMsg, " Yes ", " No ") = 2 Then
         bTransactionCommitted = False 
         lblAnalysing.text = "No towns were added"
         Print #hLogfile, Str(iTownNew) & " towns could have been added to your database"
         Print #hLogfile, lblAnalysing.text & " as the user cancelled the transaction"
         modDBConnect.RollBack()
      Else
         bTransactionCommitted = True 
         lblAnalysing.text = Str(icounter) & " towns analysed" & " and " & Str(iTownNew) & " towns were added"
         Print #hLogfile, lblAnalysing.text
         modDBConnect.CommitTrans()
      Endif
   Else
      Message.info("Your postcode data is up to date")  
      lblAnalysing.text = "No towns were added"
      Print #hLogfile, "No towns were added"
      Print #hLogfile, "Your postcode data is up to date"
      modDBConnect.RollBack()
   End If  
   
   Close #hLogfile
   view_Log()
   Reload()
Catch
   Message.Info("An error occurred, please email the developers.")
   
End

Public Sub view_Log()
   
   Dim hfile As File
   Dim sLineInput As String
   Dim sErrorLog As String
   
   tabstrip1.Enabled = True   
   tabstrip1.index = 1
   Inc Application.Busy
   Try hfile = Open Trim(log_file) For Input
   While Not Eof(hfile)
      Line Input #hfile, sLineInput
      ' If bTransactionCommitted = False Then  
      ' '   sLineInput = Replace(sLineInput, "Added new record", "Found new town - not added")
      ' Endif
       sErrorLog &= sLineInput & "<BR>"
   Wend
   Close #hfile
   FViewLog.WebView1.HTML = "<HTML><BODY>" & sErrorLog & "</BODY></HTML>"
   Dec Application.Busy

End

Public Sub rbImportType_Click()
   
   iImportType = Last.TAG
   
End   
