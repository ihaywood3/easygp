' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' Gambas class file
' PURPOSE:  Maintain the EasyGP Database, for import and export
'           Import: drug data, codes etc
'           Export: patient records, lookup tables to rebuild database etc
'-------------------------------------------------------------------------
Public FICPC As New FICPCBrowser
Private Const cImport As Integer = 0 
Private Const cExport As Integer = 1
Private ImportDemographics As Integer 'type of import - see const.ImportDemographics
Private FContacts As FContacts

Private iCurrentTab As Integer
Private btnLabels As String[] 'was 2
Public sStr As String
Public hfile As File
Public sFilename As String
Public sLineInput As String

Public $Result As Result
Public sql As String
Public Towns As Collection
Private patient As Collection 
Public patients As Collection
Public Schemas As Collection
Public badcount As Integer
Private iPracsoft As Integer = 0
Private iMDW2 As Integer = 1
Private iMDW3 As Integer = 2
Private iBestPractice As Integer = 3
Private iGenie As Integer = 4
Private iProfile As Integer = 5
Private iMedicalSpectrum As Integer = 6
Private SelectedDemographicSource As Integer 
Private Errorcount As Integer
Private LogFileName As String 
Private icurrentpage As Integer
Private data_root_dir As String = user.homne &/ "coding/gambas2/gb2/data/postgres_lu_tables" ' FIXME - UNHARD CODE Me
Private FAddRequest As New FRequestAddNew 
Private newline As String = "\n"
Private wFile As File
Private cImportWizardPage_ImportChoice As Integer = 0
Private cImportWizardPage_ImportDemographics As Integer = 1
Private cImportWizardPage_ImportDrugs As Integer = 2
Private cImportWizardPage_ImportLegacy As Integer = 3
Private wizardHeading As String[] 'was 4
Private import_dir As String 'FIXME: need a proper system for import_dir
Private comm As Collection 
Private comms As Collection 
Private address As Collection 
Private addresses As Collection 
'Private #wfile As Stream
Private person As Collection 

Public Sub Form_Open()

   Dim f As FrmLogon

   Me.Center()
   If IsNull(modDBConnect.currentUser) Then
      f = New FrmLogon
      f.ShowModal() 
   End If
   Init()
   Application.font = Font["Arial,10"]
   Try Settings_Load()
   iCurrentTab = cImport
   TabStrip1.index = iCurrentTab 'temp whilst I'm working
   lblHeading.text = wizardHeading[cImportWizardPage_ImportChoice]
   tbImportExport.text = btnLabels[cImport]
   
   txtPrescribingDataPath.text = "/home/richard/downloads/mims/March2009/Abbrev20090300/Abbrev20090300.zip"
   txtPrescribingInteractClassic.text = "/home/richard/downloads/mims/March2009/Preg20090300/InteractClassic20090300.zip"
   txtPassword.text = ""
   txtPrescribingDataPregnancy.text = "/home/richard/downloads/mims/March2009/Preg20090300/Preg20090300.zip"

End

Public Sub Init()
   '-------------------------------
   'Default to updating all patients
   '--------------------------------

   rbUpdate.value = True
   '------------------------------------------
   'Stuff the the demographic data import page
   '------------------------------------------ 
   cmbDemographicSource.Add("Pracsoft Version 1.42D", iPracsoft)
   cmbDemographicSource.Add("Medical Director V2", iMDW2)
   cmbDemographicSource.Add("Medical Director V3", iMDW3)
   cmbDemographicSource.Add("Best Practice", iBestPractice)
   cmbDemographicSource.Add("Profile", iProfile)
   cmbDemographicSource.Add("Genie", iGenie)
   cmbDemographicSource.Add("Medical Spectrum", iMedicalSpectrum)
   '------------------------------------------
   'Stuff the the legacy clinical data import
   '------------------------------------------ 
   cmbMedicalProgram.Add("DrsDesk", iMDW2)
   cmbMedicalProgram.Add("Medical Director V2", iMDW2)
   cmbMedicalProgram.Add("Medical Director V3", iMDW3)
   cmbMedicalProgram.Add("Best Practice", iBestPractice)
   cmbMedicalProgram.Add("Profile", iProfile)
   cmbMedicalProgram.Add("Genie", iGenie)
   cmbMedicalProgram.Add("Medical Spectrum", iMedicalSpectrum)
   
   'for the moment only do practsoft for me
   cmbDemographicSource.Index = iPracsoft
   SelectedDemographicSource = iPracsoft
   btnLabels.Add("Import", cImport)
   btnLabels.Add("Export", cExport)
   wizardHeading.Add("Select what you want to import", cImportWizardPage_ImportChoice)
   wizardHeading.Add("Import Demographic Data", cImportWizardPage_ImportDemographics)
   wizardHeading.Add("Import Prescribing or Reference Drug Data", cImportWizardPage_ImportDrugs)
   wizardHeading.Add("Import Legacy Medical Record data", cImportWizardPage_ImportLegacy)
   ' wizardHeading.Add("", 1)
   FContacts = New FContacts(Vbox_Legacy)
   'FContacts.Hide()
   FContacts.Visible = False
   Get_towns()

End

Public Sub Settings_Save()
   
   Settings["ImportWizard/Font"] = sliderFont.Value
   Settings["Setup Wizard/Hsplit_Wizard"] = Hsplit_Wizard.Layout
   Settings["Setup Wizard/Hsplit_Demographics"] = Hsplit_Demographics.Layout
   Settings["Setup Wizard/Hsplit_Legacy"] = Hsplit_Legacy.Layout
   Settings["Setup Wizard/Vsplit_Legacy"] = Vsplit_Legacy.Layout
   
   Settings["Setup Wizard/Top"] = Me.Top
   Settings["Setup Wizard/Left"] = Me.Left
   Settings["Setup Wizard/Height"] = Me.Height 
   Settings["Setup Wizard/Width"] = Me.Width
   
End

Public Sub Settings_Load()

   Hsplit_Wizard.Layout = Settings["Setup Wizard/Hsplit_Wizard"] 
   Hsplit_Demographics.Layout = Settings["Setup Wizard/Hsplit_DataImport"]
   Hsplit_Legacy.Layout = Settings["Setup Wizard/Hsplit_Legacy"] 
   Vsplit_Legacy.Layout = Settings["Setup Wizard/Vsplit_Legacy"]
   Try sliderFont.Value = Settings["ImportWizard/Font"]
   Me.Top = Settings["Setup Wizard/Top", Me.Top]
   Me.Left = Settings["Setup Wizard/Left", Me.Left] 
   Me.Height = Settings["Setup Wizard/Height", Me.Height] 
   Me.Width = Settings["Setup Wizard/Width", Me.Width] 

End

Public Sub Form_Close()
   
   Settings_Save()
   
End

Public Sub TabStrip1_Click()
   
   Select Case Last.index
      Case cImport
         
      Case cExport
         
   End Select
   tbImportExport.text = btnLabels[Last.index]

End

Public Sub Audit_Build_Table_List()

   Dim sCommand As String
   Dim sStem As String
   Dim schema As Collection 
   Dim oldtablename As String 'eg lu_type
   Dim newtablename As String 'eg lu_sys_type
   Dim x As Integer
   Dim y As Integer
   Dim tables As Collection
   Dim table As Collection 
   Dim fk_schema As Integer
   Dim fk_table As Integer 
   Dim $Result As Result
   Dim Schemas As New Collection
   Dim sql As String
   '----------------------------------
   'Notify user we are doing something
   '----------------------------------
   Inc Application.Busy
   lvDataExportProgressMessages.Clear()
   lvwTables.Clear()
   
   modDBConnect.exec_query("delete From audit.lu_schemas")
   sql = "ALTER SEQUENCE audit.lu_schemas_pk_seq"
   " INCREMENT 1 MINVALUE 1 "
   "MAXVALUE 9223372036854775807 RESTART 1 "
   "CACHE 1 NO CYCLE"
   modDBConnect.exec_query(sql)
   modDBConnect.exec_query("delete From audit.lu_tables")
   sql = "ALTER SEQUENCE  audit.lu_tables_pk_seq"
   " INCREMENT 1 MINVALUE 1 "
   "MAXVALUE 9223372036854775807 RESTART 1 "
   "CACHE 1 NO CYCLE"
   modDBConnect.exec_query(sql)
   
   '---------------------------------------------------------------------------------------------------
   'The query to be executed will end up looking like this on the command line
   ' psql EasyGP -c "\Copy contacts.lu_marital To '/dir/schema.tablename.data' DELIMITER '|' NULL AS ''"
   ' currently the data is dumped to a fixed directory as you can see
   '---------------------------------------------------------------------------------------------------
   '----------------------------------------------------------------------
   'First, get all the schema's in the database, display these in the list
   'add these to a collection
   '---------------------------------------------------------------------- 
   lvDataExportProgressMessages.Add(lvDataExportProgressMessages.count, "Analysing database structure .............")
   $Result = modDBConnect.exec_query("select * FROM pg_namespace where nspowner <> 10")
   
   For Each $Result
      schema = New Collection 
      schema!schema = $Result!nspname
      schema!fk_schema = modDBConnect.insert("audit.lu_schemas", schema)
      
      Schemas.Add(schema, schema!fk_schema)
      lvDataExportProgressMessages.Add(schema!fk_schema, $Result!nspname)
      
   Next
   
   '----------------------------------
   'For each schema, get all the tables
   '-----------------------------------
   lvDataExportProgressMessages.Add(lvDataExportProgressMessages.count, "Extracting lookup table names .............")
   For Each Schema In Schemas
      ' sql = "Select * FROM pg_tables where schemaname =$$" & schema!schema & "$$"
      ' SQL &= schema!schema & "$$"
      $Result = modDBConnect.exec_query("Select * FROM pg_tables where schemaname =$$" & schema!schema & "$$")
      lvwTables.Clear()
      For Each $Result
         table = New Collection 
         ' If Left($Result!tablename, 3) = "lu_" Then
         '------------------------------
         table!tablename = $Result!tablename
         table!fk_schema = schema!fk_schema
         table!fk_table = modDBConnect.insert("audit.lu_tables", table)
         lvwTables.Add(table!fk_table, $Result!tablename)
         '   End If
      Next
   Next
   ' lvDataExportProgressMessages.Add(lvDataExportProgressMessages.count, "Data export completed")
   Dec Application.Busy
   ' '-------------------------
   ' 'Finally close the logfile
   ' '-------------------------
   modDBConnect.CommitTrans()

End

Public Sub Export_Lookup_Tables()
   '-----------------------------------------------------------------
   'Export all tables from the current database as lu_table.data
   'Note that the tables exported are meant to be called lu_tablename
   'and contain (usually) data not entered by the user, ie in theory
   'they belong to the core structure of the EasyGP database .eg
   'contacts.lu_titles data:
   '
   ' 0|Mr
   ' 1|Mrs
   ' 2|Master
   ' 3|Miss
   ' 4|Dr
   ' 5|Prof
   ' 6|Ms
   ' 7|Unkown
   '
   'PURPOSE : to have an up-to-date set of data tables to import back
   '          into a skeleton database during development
   'NB      : USE WITH CARE
   'PROBLEMS: In my database nspowner=10 for native tables ?allways
   'Write logfile on the fly in case it bombs in the middle
   '----------------------------------------------------------------

   Dim sCommand As String
   Dim sStem As String
   Dim schema As String
   Dim oldtablename As String 'eg lu_type
   Dim newtablename As String 'eg lu_sys_type
   Dim x As Integer
   Dim y As Integer
   Dim tables As Collection
   Dim table As String
   
   '-------------------------------------------------------------------------
   'First make sure that  audit.lu_tables and audit.lu_schemas are up-to-date
   '-------------------------------------------------------------------------
   Audit_Build_Table_List()
   '----------------------------
   'Open the logfile to write to
   '----------------------------
   wfile = Open user.home & "/FMaintenance.Export_Lookup_Tables" For Write Create
   Print #wfile, "Subroutine:Fmaintainance.Export_Lookup_Tables"
   Print #wfile, "User:" & modDBConnect.currentUser!wholename
   Print #wfile, "Started exporting lookup files"
   
   Schemas = New Collection
   
   '----------------------------------
   'Notify user we are doing something
   '----------------------------------
   Inc Application.Busy
   lvDataExportProgressMessages.Clear()
   lvwTables.Clear()
   telog.Clear()
   '---------------------------------------------------------------------------------------------------
   'The query to be executed will end up looking like this on the command line
   ' psql EasyGP -c "\Copy contacts.lu_marital To '/dir/schema.tablename.data' DELIMITER '|' NULL AS ''"
   ' currently the data is dumped to a fixed directory as you can see
   '---------------------------------------------------------------------------------------------------
   sStem = "psql " & modDBConnect.GetDbName() & " -c \"\\Copy schema.tablename to '"
   'sSTem &= user.home & "/easygp/import/postgres_lu_tables/"
   sSTem &= user.home & "/easygp/install/postgres_lu_tables/schema.tablename.data' DELIMITER '|' NULL AS ''\" "
   telog.text = sSTem & newline
   Print #wfile, sSTem
   '----------------------------------------------------------------------
   'First, get all the schema's in the database, display these in the list
   'add these to a collection
   '---------------------------------------------------------------------- 
   lvDataExportProgressMessages.Add(lvDataExportProgressMessages.count, "Analysing database structure .............")
   telog.text &= "Analysing database structure ............." & newline
   Print #wfile, "Analysing database structure ............."
   sql = "select * FROM pg_namespace where nspowner <> 10"
   telog.text &= sql & newline
   Print #wfile, sql
   $Result = modDBConnect.exec_query(sql)
   
   For Each $Result
      lvDataExportProgressMessages.Add(lvDataExportProgressMessages.count, $Result!nspname)
      Print #wfile, "Schemas:" & $Result!nspname
      Wait
      Schemas.Add($Result!nspname, lvDataExportProgressMessages.count)
   Next
   '------------------------------------------
   'For each schema, get all the lookup tables
   'i.e those starting with lu_
   '-------------------------------------------
   lvDataExportProgressMessages.Add(lvDataExportProgressMessages.count, "Extracting lookup table names .............")
   Print #wfile, "Extracting lookup table names ............."
   For Each Schema In Schemas
      sql = "Select * FROM pg_tables where schemaname =$$"
      SQL &= schema & "$$"
      Print #wfile, sql
      $Result = modDBConnect.exec_query(sql)
      For Each $Result
         If Left($Result!tablename, 3) = "lu_" Then
            '------------------------------
            'now export that data to a file
            'old tablename = lu_type
            '------------------------------
            lvwTables.Add(lvwTables.count, $Result!tablename)
            Print #wfile, "Table added:" & $Result!tablename
            Wait
            scommand = sStem
            sCommand = Replace(sCommand, "schema.tablename", schema & "." & $Result!tablename)
            Print #wfile, sCommand
            lblExporting.text = sCommand
            telog.text &= sCommand & newline
            Wait
            Shell sCommand Wait
         End If
      Next
   Next
   lvDataExportProgressMessages.Add(lvDataExportProgressMessages.count, "Data export completed")
   telog.text &= "Data export completed" & newline
   Print #wfile, "Data export completed"
   Dec Application.Busy
   '-------------------------
   'Finally close the logfile
   '-------------------------
   Close #wfile

End

Public Sub ReferenceData_Import()

   If chkDrugsReference.Value = True Then
      DrugReference_Import()
   End If
   If chkDrugsPrescribing.Value = True Then
      DrugPrescribing_Import()
   End If
   If chkICPC.value = True Then
      ICPC2_Import()
   End If
   
End

Public Sub ICPC2_Import()
   '-----------------------------------------------------
   'Import ICP2 FIXME at this time from a fixed directory
   'FIX ME APPEND USER TERMS FROM OLD DB TO NEW
   
   ' INSERT INTO coding.icpc2_user_terms
   '  (term,
   '    natural_language_term,
   '    icpc_code,
   '    term_code,
   '    status,
   '    replacement)
   '    
   ' 
   ' Select term,
   '    natural_language_term,
   '    icpc_code,
   '    term_code,
   '    status,
   '    replacement 
   ' 
   ' 
   '  From coding.icpc2_terms
   ' 
   '  where icpc_code = 'J99';
   '-----------------------------------------------------
   ' Open EasyGP.logfile_dir & "FMaintenance.ICPC2Plus_Import" For Write Create As #wfile 
   ' Print #wfile, "Subroutine:Fmaintainance.ICPC2Plus_Import"
   ' Print #wfile, "User:" & const.staff_member!wholename
   ' Print #wfile, "Started importing icpc2 plus data"
   lvwImport.Add(lvwImport.count, "Started importing icpc2 plus data...........")
   Wait
   lvwImport.Add(lvwImport.count, "Testing if " & "/tmp/easygp-install exists.....")
   Print #wfile, "Testing if " & "/tmp/easygp-install exists....." 
   Wait
   '---------------------------------------------
   'Create a tmp directory in /tmp/easygp-install 
   '---------------------------------------------
   If Not Exist("/tmp/easygp-install") Then
      Try Mkdir "/tmp/easygp-install"
      If Error Then
         Message.info("The temporary directory could not be created, the files will not be extracted")
         lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Failed to extract icpc data - check log for details")
         Wait
         Dec Application.busy 'failed - so remove busy cursor
         Return
      End If
   End If   
   '--------------------------------
   'Now, import icpc2
   '--------------------------------
   tbImportExport.Enabled = False
   lvwImport.Add(lvwImport.count, "Importing icpc2 data into tables..be patient... this will take some time.....") 
   Wait
   Print #wfile, "Importing icpc2 data into tables"
   Wait
   Shell "cd /tmp/easygp-install;" Wait
   'Shell "psql " & modDBConnect.Get_$hconn().Name & " -f " & EasyGP.import_dir & "/icpc2/scripts/icpc2_import_gambas.sql" Wait
   lvwImport.Add(lvwImport.count, "ICPC2 Plus data import is complete") 
   Wait
   Print #wfile, "ICPC2 Plus dat was successfully imported"
   
   Dec Application.busy
   ' tbImportMims.Enabled = True
   tbImportExport.Enabled = True
   
End

Public Sub WizardButtons_Click()

   Select Case TabStrip1.Index
      Case 0
         Select Case Tabstrip2.index
               
            Case 0 'cImportWizardPage_ImportDemographics
               Demographic_Data_Import()
            Case 1 'cImportWizardPage_ImportDrugs
               ReferenceData_Import()
            Case 2 'cImportWizardPage_ImportLegacy
               LegacyData_Import()
         End Select
         
      Case 1
         If chkExportLookUpTables.Value = True Then
            Export_Lookup_Tables()
         End If
         
   End Select 
   
End

Public Sub DrugPrescribing_Import()
   '---------------------------------------------------------
   'import into the database mims *.TXT files for prescribing
   'Need to insert all the 'Wait' commands otherwise
   'the screen dosn't update till the end of the routine or
   'the shell commands don't finish.
   'First check all the appropiate files have been located
   'as this is quite complex
   '---------------------------------------------------------
   'FIXME, PUT THIS IN.
   '---------------------------------------------------------
   'First, Check that a password exists  and if not
   'popup up a form as a prompt
   '---------------------------------------------------------
   
   ' If Trim(txtPassword.text) = "" Then
   '     FMimsPasswords.ShowModal()
   '     If modGlobal.globalstring = "" Then 
   '        txtPassword.Text.SetFocus
   '        Return
   '     End If
   '     txtPassword.text = modGlobal.globalstring
   ' End If
   Inc Application.Busy
   tbImportExport.Enabled = False
   '----------------------------------------------------------------------
   'Open the logfile To Write To, show user what we are doing in lvwImport
   '----------------------------------------------------------------------
   modUtil.Log("Subroutine:Fmaintainance.DrugsPrescribing_Import")
   modUtil.Log("User:" & modDBConnect.currentUser!wholename)
   modUtil.Log("Started importing prescribing drug data")
   lvwImport.Add(lvwImport.count, "Started importing prescribing drug data...........")
   Wait 
   '---------------------------------------------
   'Create a tmp directory in /tmp/easygp-install 
   '---------------------------------------------
   lvwImport.Add(lvwImport.count, "Testing if " & "/tmp/easygp-install exists.....")
   Print #wfile, "Testing if " & "/tmp/easygp-install exists....." 
   Wait
   If Not Exist("/tmp/easygp-install") Then
      Try Mkdir "/tmp/easygp-install"
      If Error Then
         Message.info("The temporary directory could not be created, the files will not be extracted")
         lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Failed to extract mims prescribing drug data - check log for details")
         Wait
         Dec Application.busy 'failed - so remove busy cursor
         Return
      End If
   End If   
   '----------------------------------------------
   'Now unpack the zip files, exit  if this fails
   'First the classic interactions file
   '----------------------------------------------
   Print #wfile, "Unpacking classic interactions zip file ..........."
   Print #wfile, "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtPrescribingInteractClassic.text & " -d " & "/tmp/easygp-install"
   lvwImport.Add(lvwImport.count, "unzip -o -P " & " " & Trim(txtPassword.text) & " " & txtPrescribingInteractClassic.text & " -d " & "/tmp/easygp-install")
   Wait
   Print "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtPrescribingInteractClassic.text & " -d " & "/tmp/easygp-install"
   Try Shell "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtPrescribingInteractClassic.text & " -d " & "/tmp/easygp-install" Wait
   '------------------------
   'Next the pregnancy files
   '------------------------
   Print #wfile, "Unpacking pregnancy zip file ..........."
   Print #wfile, "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtPrescribingDataPregnancy.text & " -d " & "/tmp/easygp-install"
   lvwImport.Add(lvwImport.count, "unzip -o -P " & " " & Trim(txtPassword.text) & " " & txtPrescribingDataPregnancy.text & " -d " & "/tmp/easygp-install")
   Wait
   Print "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtPrescribingDataPregnancy.text & " -d " & "/tmp/easygp-install"
   Try Shell "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtPrescribingDataPregnancy.text & " -d " & "/tmp/easygp-install" Wait
   '-----------------------------------------------------
   'The supplementary data file with new indication stuff
   '-----------------------------------------------------
   lvwImport.Add(lvwImport.count, "Unpacking supplementary drug data zip File...........")
   Print #wfile, "Unpacking supplementary drug data File..........."
   Print #wfile, "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtPrescribingDataSupplPath.text & " -d " & "/tmp/easygp-install"
   lvwImport.Add(lvwImport.count, "unzip -o -P " & " " & Trim(txtPassword.text) & " " & txtPrescribingDataSupplPath.text & " -d " & "/tmp/easygp-install")
   Wait
   Print "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtPrescribingDataSupplPath.text & " -d " & "/tmp/easygp-install"
   Try Shell "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtPrescribingDataSupplPath.text & " -d " & "/tmp/easygp-install" Wait
   
   '-----------------------------------------------------
   ' Lastly the data in Abbrev.zip  he main data files,
   ' containing for example Formdat, proddat etc
   ' Last because there are duplicated files in the
   '  zips, and not all contain the same data -
   
   ' these files:
   '
   ' genpreg        - contained in preg.zip
   ' gmdat gsmdat - contained in interactclassic.zip
   '
   ' in less complete form than the main drug file
   ' Abbrev.zip
   ' 
   ' not sure, but I will speak to MIMS and find out
   ' perhaps it is my mis-use of data or mis-understanding
   '------------------------------------------------------
   lvwImport.Add(lvwImport.count, "Unpacking prescribing drug data zip File...........")
   Print #wfile, "Unpacking prescribing drug data File..........."
   Print #wfile, "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtPrescribingDataPath.text & " -d " & "/tmp/easygp-install"
   lvwImport.Add(lvwImport.count, "unzip -o -P " & " " & Trim(txtPassword.text) & " " & txtPrescribingDataPath.text & " -d " & "/tmp/easygp-install")
   Wait
   Print "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtPrescribingDataPath.text & " -d " & "/tmp/easygp-install"
   Try Shell "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtPrescribingDataPath.text & " -d " & "/tmp/easygp-install" Wait
   '--------------------------------
   'Now, import all this to postgres
   '--------------------------------
   lvwImport.Add(lvwImport.count, "Importing Mims prescribing data into tables..be patient... this will take some time.....") 
   Wait
   modUtil.Log("Importing Mims prescribing data into tables")
   lvwImport.Add(lvwImport.count, "Importing Mims prescribing data into tables")
   Wait
   'Shell "cd /tmp/easygp-install;" Wait
   modDBConnect.Run_Import_Script(import_dir & "/drug_data/scripts/mimsbimonthly_importdata_gambas.sql")
   lvwImport.Add(lvwImport.count, "Mims prescribing data import is complete") 
   Wait
   modUtil.Log("Mims prescribing data import was successfully imported")
   
   tbImportExport.Enabled = True
   Dec Application.Busy
   
   '   Shell "cd /home/richard/tmp; rm *.TXT" 
   '    Shell "unzip" & " " & "-P" & "CMPMIMS5107" & " " & FileChooser1.Value & " -d " & "/home/richard/tmp" To strOutput
   ' Shell "psql EasyGP -f " & strSQLdir & "drugs_reference_createschema.sql " To strOutput
   '   txtConsole.text = txtConsole.text & strOutput
   
   '            "psql EasyGP -f drugs_reference_importdata_gambas.sql"
Catch
   modUtil.Log("An error occurred whilst trying to unzip the files")
   Dec Application.Busy
   Return
   
End

Public Sub DrugReference_Import()
   '-----------------------------------------------------
   'import into the database mims *.TXT files
   'Need to insert all the 'Wait' commands otherwise
   'the screen dosn't update till the end of the routine or
   'the shell commands don't finish.
   'First, Check that a password exists  and if not
   'popup up a form as a prompt
   '-----------------------------------------------------
   ' If Trim(txtPassword.text) = "" Then 'FIXME: need to work out what this is doing
   '     FMimsPasswords.ShowModal()
   '     If modGlobal.globalstring = "" Then 
   '        txtPassword.Text.SetFocus
   '        Return
   '     End If
   '     txtPassword.text = modGlobal.globalstring
   ' End If

   Inc Application.Busy
   tbImportExport.Enabled = False
   '----------------------------------------------------------------------
   'Open the logfile To Write To, show user what we are doing in lvwImport
   '----------------------------------------------------------------------
   modUtil.Log("Subroutine:Fmaintainance.DrugReference_Import")
   modUtil.Log("User:" & modDBConnect.currentUser!wholename)
   modUtil.Log("Started importing reference drugs data")
   lvwImport.Add(lvwImport.count, "Started importing reference drugs data...........")
   Wait 
   '---------------------------------------------
   'Create a tmp directory in /tmp/easygp-install 
   '---------------------------------------------
   lvwImport.Add(lvwImport.count, "Testing if " & "/tmp/easygp-install exists.....")
   Print #wfile, "Testing if " & "/tmp/easygp-install exists....." 
   Wait
   If Not Exist("/tmp/easygp-install") Then
      Try Mkdir "/tmp/easygp-install"
      If Error Then
         Message.info("The temporary directory could not be created, the files will not be extracted")
         lvDataImportProgressMessages.Add(lvDataImportProgressMessages.count, "Failed to extract mims full product information - check log for details")
         Wait
         Dec Application.busy 'failed - so remove busy cursor
         Return
      End If
   End If   
   '---------------------------------------------
   'Now unpack the zip files, exit  if this fails
   '---------------------------------------------
   lvwImport.Add(lvwImport.count, "Unpacking Mims Annual Zip File...........")
   Print #wfile, "Unpacking Mims Annual Zip File..........."
   Print #wfile, "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtReferenceDataPath.text & " -d " & "/tmp/easygp-install"
   lvwImport.Add(lvwImport.count, "unzip -o -P " & " " & Trim(txtPassword.text) & " " & txtReferenceDataPath.text & " -d " & "/tmp/easygp-install")
   Wait
   Print "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtReferenceDataPath.text & " -d " & "/tmp/easygp-install"
   Try Shell "unzip" & " " & "-o -P" & " " & Trim(txtPassword.text) & " " & txtReferenceDataPath.text & " -d " & "/tmp/easygp-install" Wait
   If Error Then
      Print #wfile, "An error occurred whilst trying to unzip the files" 
      Dec Application.Busy
      Return
   End If
   '--------------------------------
   'Now, import all this to postgres
   '--------------------------------
   lvwImport.Add(lvwImport.count, "Importing Mims Annual Data into tables..be patient... this will take some time.....") 
   Wait
   modUtil.Log("Importing Mims Annual Data into tables")
   modDBConnect.Run_Import_Script(import_dir & "/drug_data/scripts/drugs_reference_importdata_gambas.sql")
   lvwImport.Add(lvwImport.count, "Mims data import is complete") 
   Wait
   Print #wfile, "Mims full product information was successfully imported"
   
   Dec Application.busy
   ' tbImportMims.Enabled = True
   tbImportExport.Enabled = False

End 

Public Sub Log_Command(lv As Listview, sText As String)
   '---------------------------------------------------------
   'Updates the listview on the screen and writes to log file
   'forces update of screen display with WAIT command
   'DOES NOT WORK AT ALL, HOW TO GET POINTER TO #WFILE HERE
   '---------------------------------------------------------

   Print #wfile, sText
   lv.Add(lv.count, stext)
   Wait
   
End

Public Sub chkExport_Click()
   
   'lblLogfile.text = EasyGP.logfile_dir & "FMaintenance.Export_Lookup_Tables"
   
End

Public Sub chkImportDrugData_Click()
   '-------------------------------------------------------------------
   'User has checked a box, wants to load data for this segment
   'Search for the children of the Hbox the checkbox is in, when find
   'the only other Hbox which contains the toolbutton, enable or
   'disable the toolbutton according to whether the checkbox is checked
   '-------------------------------------------------------------------

   Dim hCtrl As Control
   Dim hCtrl1 As Control
   Dim aBox As Hbox
   Dim tb As Toolbutton
   Dim aTextBox As Textbox

   For Each hCtrl In Last.parent.children
      If hctrl Is Hbox Then
         aBox = hctrl
         Break
      End If
   Next
   For Each hCtrl In aBox.Children
      If hctrl Is Toolbutton Then
         tb = hctrl
         tb.Enabled = Last.value
         If Last.value = False Then
            For Each hCtrl1 In Last.parent.children
               If hCtrl1 Is TextBox Then
                  aTextbox = hCtrl1
                  aTextbox.text = "" 
               End If
            Next
         End If        
      End If
   Next
   
End

Public Sub tbImportPath_Click()
   '---------------------------------------------
   'Select a file to import demographic data from
   '---------------------------------------------

   Dim hfile As File
   Dim sFilename As String
   Dim sLineInput As String
   Dim hCtrl As Control
   Dim aTextbox As Textbox
   Dim x As Integer

   Dialog.Path = "import/"
   If Dialog.OpenFile() Then Return
   'textbox1.text = Dialog.Path
   For Each hctrl In Last.parent.parent.children
      If hctrl Is Textbox Then
         aTextbox = hctrl
         aTextbox.text = Dialog.Path
          'textbox1.text = Dia
         Break
      End If
   Next
   
End

Public Sub tbImportMims_Click()

   Inc Application.Busy
   lvwImport.Add(lvwImport.count, "Importing Mims Annual Data into tables")
   modDBConnect.Run_Import_Script(import_dir & "/drug_data/scripts/drugs_reference_importdata_gambas.sql")
   Wait
   lvwImport.Add(lvwImport.count, "Mims data import is complete")
   
   Dec Application.Busy
   tbImportExport.Enabled = True

End

Public Sub btnCleanData_Click()
   
   Clean_Data()
   
End

Sub Clean_Data_PreIan()
   ' '---------------------------------------------------------------------
   ' 'Loads the designated file derivated from alternate practice software
   ' 'and place all patients into a patient collection
   ' 'and attempst to cleanse the data as we go, ie lookup wrong postcodes
   ' 'insert sex if missing, check for missing DOB etc.
   ' 'Note: All the WAIT commands are in here to update the messages
   ' 'to the user, without them this will not occur
   ' '--------------------------------------------------------------------- 
   ' ' For pracsoft exported file:
   ' ' 0=nothing
   ' ' 1=filenumber
   ' ' 2=RACGP number
   ' ' 3=title
   ' ' 4=firstname
   ' ' 5=surname
   ' ' 6=sex
   ' ' 7=street1
   ' ' 8=street2
   ' ' 9=suburb
   ' ' 10=postcode
   ' ' 11=dob
   ' ' 12=mcn
   ' ' 13=mcn card position
   ' ' 14
   ' ' 15=dva
   ' ' 16
   ' ' 17=concession num ber
   ' ' 18=
   ' ' 19=home phone
   ' ' 20=work phone
   ' ' 21=
   ' ' 22=mobile
   '    Dim i As Integer
   '    Dim row As Integer
   '    Dim smsg As String
   '    Dim bits As String[]
   '    Dim RACGP_File As Integer = 2
   '    Dim title As Integer = 3
   '    Dim firstname As Integer = 4
   '    Dim surname As Integer = 5
   '    Dim sex As Integer = 6
   '    Dim street1 As Integer = 7
   '    Dim street2 As Integer = 8
   '    Dim suburb As Integer = 9
   '    Dim postcode As Integer = 10
   '    Dim missing_towns As New collection
   '    Dim missing_town As String
   '    Dim missing_town_count As Integer
   '    Dim dob As Integer = 11
   '    Dim mcn As Integer = 12
   '    Dim mcn_cardPos As Integer = 13
   '    Dim dva As Integer = 15
   '    Dim card_concession As Integer = 17
   '    Dim phone_home As Integer = 19
   '    Dim phone_work As Integer = 21
   '    Dim phone_mobile As Integer = 22
   '    Dim iCommCount As Integer
   '    Dim address As collection 
   '    Dim iError As Boolean
   '    Dim sFilename As String
   '    Dim HFile As File
   '    Dim sLineInput As String
   '    '----------------------------------------------------------------------------------
   '    ' This is a cAddress class where we will put the street data
   '    '
   '    ' Public pk As Integer 'pk of contacts.data_addresses 'FIXME TO PK_ADDRESS
   '    ' Public street As String 'may be chr$10 split
   '    ' Public fk_town As Integer 'fk to lu_towns table
   '    ' Public suburb As String
   '    ' Public postcode As String
   '    ' Public state As String
   '    ' Public fk_type As Integer '1=home,2=work,3= etc FIXME IS WRONG? see fill combo's
   '    ' Public preferred_address As Boolean
   '    ' Public postal_address As Boolean
   '    ' Public head_office As Boolean
   '    ' Public geolocation As String 'geographical location latitude AND longitude
   '    ' Public country_code As String 'eg AU fixme:put default code in ini file
   '    ' Public data_changed As Boolean
   '    '----------------------------------------------------------------------------------
   '     Dim comm As cComm
   '    '---------------------------------------------------------------------------------- 
   '    ' this is a communication class where we will save phone numbers etc 
   '    ' Public pk As Integer
   '    ' Public comm_value As String 'using straight value conflicts with language
   '    ' Public note As String
   '    ' Public fk_type As Integer
   '    ' Public comm_type As String  'eg email
   '    ' Public preferred_method As Boolean
   '    ' Public confidential As Boolean
   '    ' Public data_changed As Boolean
   '    ' Public delted As Boolean
   '    '----------------------------------------------------------------------------------
   '    lvProgressMessages.Clear()                            'Clear list viewer is watching
   '    tlImportInformation.text = ""
   '    If textbox1.text = "" Then
   '       Message.Info("Please select a file to import")
   '       Return
   '    End If
   '    '-----------------------------------
   '    'Try and open the file, quit if fail
   '    '-----------------------------------
   '    sFilename = Trim(textbox1.text)
   '    Try hfile = Open sFilename For Input 
   '    If Error Then
   '       lvProgressMessages.Add(lvProgressMessages.count, "Unable to open designated file - check file exists and try again")
   '       Dec Application.Busy
   '       Return
   '    End If   
   '    '-----------------------
   '    'Sucess, then keep going
   '    '------------------------
   '    lvProgressMessages.Add(lvProgressMessages.count, "Opened file..........starting to analyse data" & Trim(textbox1.text))
   '    lvProgressMessages.Add(lvProgressMessages.count, "Reading demographic data file........")
   '    Inc Application.busy
   '    '--------------------------------------------------------------
   '    'Start a new collection of patients, read each line of the file
   '    '--------------------------------------------------------------
   '    
   '    lvProgressMessages.Add(lvProgressMessages.count, "File to analyse:" & Trim(textbox1.text))
   '    patients = New collection
   '    lvProgressMessages.Add(lvProgressMessages.count, "Starting new patient collection........")
   '         While Not Eof(hfile)                                     'until the file ends
   '          '---------------------------------------------------------------
   '          'Each new line is a new patient, so create a new patient object,
   '          'new address collection (we will probably only have one) and
   '          'new communications collection
   '          '---------------------------------------------------------------
   '          iCommCount = 0
   '          iError = False 'assume the best
   '          patient = New Collection
   '          address = New Collection
   '          comms = New collection 
   '          '----------------------------------------------------------------
   '          'read line of the file, replace appropriate delimiters and quotes
   '          '----------------------------------------------------------------
   '          Line Input #hfile, sLineInput
   '          sLineInput = Replace$(sLineInput, txtCurrentDelimiter.text, txtReplaceDelimiterWith.text)
   '          sLineInput = Replace$(sLineInput, "\"", "")
   '         ' txtCurrentLine.text = sLineInput
   '          Wait
   '          '-----------------------------------
   '          'Now split the line at the delimeter
   '          '----------------------------------- 
   '           bits = Split(sLineInput, "|")
   '           bits[dob] = Right(bits[dob], 2) & "/" & Mid(bits[dob], 6, 2) & "/" & Left(bits[dob], 4)
   '           '-----------------------------
   '           'For each patient, add the data
   '           '-----------------------------
   '           With patient
   '             '------------------------------------------------
   '             'Allocate firstname, surname, dob, sex, title etc
   '             '------------------------------------------------
   '             .Firstname = bits[firstname]
   '             If bits[firstname] = "" Then
   '               ' Add_Error(columnview1, patient, "no firstname")
   '                lvProgressMessages.Add(lvProgressMessages.count, "no firstname:" & patient.Firstname & " " & patient.surname)
   '                Wait
   '                Inc Errorcount
   '                iError = True
   '              End If
   '             .Surname = bits[surname]
   '                 If bits[surname] = "" Then
   '               ' Add_Error(columnview1, patient, "no surname")
   '                lvProgressMessages.Add(lvProgressMessages.count, "no surname:" & patient.Firstname & " " & patient.surname)
   '               Wait
   '                Inc Errorcount
   '               iError = True
   '              End If
   '             '-----------------------------------
   '             'Missing Birthdate, put in a default
   '             '-----------------------------------
   '             .Birthdate = Val(bits[dob])
   '             If Year(.Birthdate) = 0 Then
   '                'Add_Error(columnview1, patient, "no birthdate")
   '                lvProgressMessages.Add(lvProgressMessages.count, "no birthdate:" & patient.Firstname & " " & patient.surname)
   ' 
   '                .Birthdate = CDate(Trim(txtMissingBirthdate.text))
   '                Wait
   '                Inc Errorcount
   '                iError = True
   '             End If
   '            .sex = bits[sex]
   '            '----------------------------------------------------------------
   '            'If missing sex, attempt to guess sex on basis of their firstname
   '            'from contacts.lu_firstnames table which has sex in there
   '            '----------------------------------------------------------------
   '            If bits[sex] = "" Then
   '                'Add_Error(columnview1, patient, "no sex")
   '             lvProgressMessages.Add(lvProgressMessages.count, "no sex:" & patient.Firstname & " " & patient.surname)
   '            Wait
   '            Inc Errorcount
   '                Guess_Sex(patient)
   '            Else
   '                Select Case Upper(Trim(bits[sex]))
   '                Case "M"
   '                   patient.fk_sex = const.cSexMale
   '                Case "F"
   '                   patient.fk_sex = const.cSexFemale
   '                End Select  
   '            End If
   '           '------------------------------------------------- 
   '           'If no title, try and guess it on basis of age/sex
   '           'We can't always be correct!!!!
   '           '-------------------------------------------------
   '           .title = bits[title]
   '             If bits[title] = "" Then 
   '               ' Add_Error(columnview1, patient, "no title")
   '                lvProgressMessages.Add(lvProgressMessages.count, "no title:" & patient.Firstname & " " & patient.surname)
   '                Wait
   '                Inc Errorcount
   '                Guess_Title(patient)
   '             Else
   '                Select Case Upper(Trim(bits[title]))
   '                Case "MR"
   '                 patient.fk_title = const.ctitleMr
   '                Case "MRS"
   '                   patient.fk_title = const.ctitleMrs
   '                Case "MASTER", "MST"
   '                   patient.fk_title = const.ctitleMaster
   '                Case "MS"
   '                   patient.fk_title = const.ctitleMs
   '                Case "MISS"
   '                   patient.fk_title = const.ctitleMiss
   '                Case "PROF"
   '                   patient.fk_title = const.ctitleProf
   '                Case "DR"
   '                   patient.fk_title = const.ctitleDr
   '                Case Else
   '                   patient.fk_title = const.ctitleUnKnown
   '                End Select
   '              End If
   '            End With
   '             '--------------------------------------------------
   '             'only importing one address from pracsoft at moment
   '             '--------------------------------------------------
   '             address1 = New cAddress
   '             address1.street = Trim(bits[street1])
   '             '----------------------------------------------------------------------
   '             'The staff in our practice seem to have constantly put in wrong suburbs
   '             'Do some massaging of common mistakes
   '             '1: Strip blanks off the end
   '             '2: Remove a fullstop eg Whitebridge. instead of whitebridge
   '             '3: substitute MOUNT for MT
   '             '4: warabrook instead of WARRABROOK
   '             '------------------------------------
   '             address1.suburb = Upper(Trim(bits[suburb]))
   '             If Right(address1.suburb, 1) = "." Then
   '                address1.suburb = Left(address1.suburb, Len(address1.suburb - 1))
   '             End If
   '             If InStr(address1.suburb, "MT ") Then
   '                address1.suburb = Replace$(address1.suburb, "MT ", "MOUNT ")
   '             End If
   '             If InStr(address1.suburb, " HTS") Then
   '                address1.suburb = Replace$(address1.suburb, " HTS", " HEIGHTS ")
   '             End If
   '             If address1.suburb = "WARRABROOK" Then
   '                address1.suburb = "WARABROOK"
   '             End If
   '             If address1.suburb = "JEWELS" Then
   '                address1.suburb = "JEWELLS"
   '             End If
   '    
   '             If bits[suburb] = "" Then 
   '               'Add_Error(columnview1, patient, "no suburb")
   '               lvProgressMessages.Add(lvProgressMessages.count, "no suburb:" & patient.Firstname & " " & patient.surname)
   '               Inc Errorcount
   '               Wait
   '               iError = True
   '             Else
   '                address1.fk_town = Towns_get_pk(address1.suburb)
   '                If address1.fk_town = 0 Then 
   '                   missing_towns.Add(bits[suburb], missing_town_count)
   '                   Inc missing_town_count
   '                  ' Add_Error(columnview1, patient, "wrong suburb information" & ":" & bits[suburb]) 
   '                   lvProgressMessages.Add(lvProgressMessages.count, "wrong suburb information:" & patient.Firstname & " " & patient.surname)
   '                   Wait
   '                   Inc Errorcount
   '                   iError = True
   '                End If
   '             End If
   '           
   '             address1.postcode = bits[postcode]
   '             If bits[postcode] = "" Then 
   '                'Add_Error(columnview1, patient, "no postcode")
   '                lvProgressMessages.Add(lvProgressMessages.count, "no postcode:" & patient.Firstname & " " & patient.surname)
   '               Wait
   '               Inc Errorcount
   '                iError = True
   '             End If
   '             patient.Address.Add(address1, 0)
   '             '---------------------------
   '             'Importing up to three comms
   '             'home phone
   '             '---------------------------
   '             If bits[phone_home] <> "" Then
   '                comm = New cComm
   '                comm.comm_type = const.CommModalityHome
   '                comm.comm_value = bits[phone_home] 
   '                patient.Comms.Add(comm, iCommCount)
   '                Inc iCommCount
   '              End If
   '             '------------
   '             'mobile phone
   '             '------------
   '             If bits[phone_mobile] <> "" Then
   '                comm = New cComm
   '                comm.comm_type = const.CommModalityMobile
   '                comm.comm_value = bits[phone_mobile] 
   '                patient.Comms.Add(comm, iCommCount)
   '                Inc iCommCount
   '             End If
   '             '----------
   '             'work_phone
   '             '----------
   '             If bits[phone_work] <> "" Then
   '                comm = New cComm
   '                comm.comm_type = const.CommModalityWork
   '                comm.comm_value = bits[phone_work] 
   '                patient.Comms.Add(comm, iCommCount)
   '                Inc iCommCount
   '             End If
   '          If Not iError Then 
   '              'listview3.Add(listview3.count, Str(i) & " " & patient.firstname & " " & patient.surname & Address1.street & " " & Str(Address1.fk_town))
   '              txtImportedPatient.Text = "Validated " & patient.firstname & " " & patient.surname 
   '              Wait
   '              patients.Add(patient, i)
   '             
   '          End If
   '          i = i + 1
   ' 
   '    Wend 
   '    
   '    Close hfile
   '           'lvProgressMessages.Clear()
   '           lvProgressMessages.Add(lvProgressMessages.count, "file contained " & Str$(i) & "lines")
   '           lvProgressMessages.Add(lvProgressMessages.count, "we added " & Str(patients.count) & " patients")
   '           lvProgressMessages.Add(lvProgressMessages.count, "file contained " & Str$(Errorcount) & "errors")
   '    ' columnview1.MoveFirst
   '    ' For i = 0 To columnview1.count - 1
   '    '      row = columnview1.Item.Key
   '    '      sMsg &= columnview1[row][0] & " " & columnview1[row][1] & "\n" 
   '    '      columnview1.MoveNext
   '    '  Next
   '    ' 
   '    
   '    
   '         
   '     write file (sMsg, User.home & "/pracsoft_export_errors.txt")  
   '     For Each missing_town In missing_towns
   '         sMsg &= missing_town & "\n"
   '     Next
   '     write file (sMsg, User.home & "/pracsoft_export_errors_missing_towns.txt")    
   '     'now match the town to a pk for contacts.lu_towns 
   '     'now match the town to a pk for contacts.lu_towns
   '     Dec Application.Busy
   '    ' btnImportDemographicData.enabled = True
   '     txtImportedPatient.text = "" 
   '    tlImportInformation.text = "<P><B>Importing Patients into EasyGP</B></P>"
   '    tlImportInformation.text &= "Please check the messages in the output window above. If there are a significant number "
   '    "of errors, you should print out the error log file and go back to your source database "
   '    "and correct the errors there, then try again<BR><BR>"
   '    "If you are happy the data is reasonably clean, then click the Import button to proceed"
   
End

Public Sub Save()
   
   ' Valid_Patient
   ' person!fk_sex = cmbTitle.Index
   ' person!fk_title = cmbTitle.Index
   ' person!fk_marital = cmbMarital.Index
    '------------------------------------------------------------
   'PURPOSE Save the current person
   'ok = I checked this is set correctly  
   'todo: Write a routine to loop through all textboxes
   'and set background to white. (Lost focus dosnt' always work
   '------------------------------------------------------------
   Dim old_pk As Integer 
   Dim Returned_collection As Collection
   '------------------------------------------------
   'address =   pk
   '      street              ok
   '      fk_town             ok
   '      address_type
   '      preferred_address
   '      postal-address      ok
   '      head_office         ok
   '      geolocation         not implemented FIXME
   '      country_code        ok
   '      fk_type
   '      deleted
   'currentaddress.address_type = not used at moment
   'currentaddress.preferred_adress = Not used at moment
   'FIXME ADD ME LATER currentaddress!street2 = Trim(txtStreet2.text)
   '------------------------------------------------
   
   '-------------------------------
   'now the patient specific stuff
   'this is a bit jumbled as I've currently no-where to store a person's occupation
   'who is not a patient, unless they are an employee - be patient!
   '-------------------------------
   ' If Isection = cSection_Patients Then
   '    If person!fk_occupation <> 0 Then
   '       patient!fk_occupation = person!fk_occupation
   '       Try person.Remove("fk_occupation")
   '    End If
   '    If chkRetired.value Then
   '       patient!retired = True
   '    Else
   '       patient!retired = False 
   '    End If   
   ' End If   
   '--------------------------------------------------------------------------
   'The person's details
   '
   'data_persons = pk
   '        firstname
   '        surname
   '        salutation
   '        birthdate
   '        fk_country_birth
   '        fk_ethnicity
   '        fk_language
   '        memo
   '        fk_marital
   '        fk_title
   '        fk_sex
   '--------------------------------------------------------------------------
   
   If Not IsNull(person) Then
      '    person!firstname = Trim(txtFirstname.text)
      '    person!surname = Trim(txtSurname.text)
      '    person!salutation = Trim(txtSalutation.text)
      '    person!birthdate = Val(txtBirthdate.text) 'previously validated
      ' 
      '    person!fk_title = cmbTitle.index
      '    person!fk_sex = cmbSex.index
      '    person!fk_marital = cmbMarital.index
      '    person!memo = Trim(txtMemo.text)
      '    If country_code <> "" Then 
      '       person!country_code = country_code
      '    End If
      '    If fk_ethnicity <> 0 Then
      '       person!fk_ethnicity = fk_ethnicity
      '    End If
      '    If fk_language <> 0 Then
      '       person!fk_language = fk_language
      '    End If
      '    Try person.remove("fk_occupation")
   End If   
   
  
   'Returned_collection = modContactsDBI.Patient_Save(rows_in_view, old_pk, patient, person, address, comms, views_comms)
   '---------------------------------------------------------
   'Now restore the gui to show the row just saved or changed
   '---------------------------------------------------------
   'If Not IsNull(rows_in_view["fk_"]) Then
   ' ' rows_in_view = modContactsDBI.Organisations_s_Get_By_Keys(Returned_collection["fk_organisation"], Returned_collection["fk_branch"], Returned_collection["fk_"])
   'Else
   ' rows_in_view = modContactsDBI.Organisations_s_Get_By_Keys(Returned_collection["fk_organisation"], Returned_collection["fk_branch"])
   
   'End If
   ' Org_List_Fill()
End

Sub Clean_Data()
   '---------------------------------------------------------------------
   'Loads the designated file derivated from alternate practice software
   'and place all patients into a patient collection
   'and attempst to cleanse the data as we go, ie lookup wrong postcodes
   'insert sex if missing, check for missing DOB etc.
   'Note: All the WAIT commands are in here to update the messages
   'to the user, without them this will not occur
   '--------------------------------------------------------------------- 
   ' For pracsoft exported file:
   ' 0=nothing
   ' 1=filenumber
   ' 2=RACGP number
   ' 3=title
   ' 4=firstname
   ' 5=surname
   ' 6=sex
   ' 7=street1
   ' 8=street2
   ' 9=suburb
   ' 10=postcode
   ' 11=dob
   ' 12=mcn
   ' 13=mcn card position
   ' 14
   ' 15=dva
   ' 16
   ' 17=concession num ber
   ' 18=
   ' 19=home phone
   ' 20=work phone
   ' 21=
   ' 22=mobile

   Dim i As Integer
   Dim row As Integer
   Dim smsg As String
   Dim bits As String[]
   Dim RACGP_File As Integer = 2
   Dim title As Integer = 3
   Dim firstname As Integer = 4
   Dim surname As Integer = 5
   Dim sex As Integer = 6
   Dim street1 As Integer = 7
   Dim street2 As Integer = 8
   Dim suburb As Integer = 9
   Dim postcode As Integer = 10
   Dim missing_towns As New Collection
   Dim missing_town As String
   Dim missing_town_count As Integer
   Dim dob As Integer = 11
   Dim mcn As Integer = 12
   Dim mcn_cardPos As Integer = 13
   Dim dva As Integer = 15
   Dim card_concession As Integer = 17
   Dim phone_home As Integer = 19
   Dim phone_work As Integer = 21
   Dim phone_mobile As Integer = 22
   Dim iCommCount As Integer
   Dim iError As Boolean
   Dim sFilename As String
   Dim HFile As File
   Dim errorsfile As File
   Dim sLineInput As String
   Dim ipersoncount As Integer
   Dim old_data As Collection
   Dim old_comms As Collection
   Dim old_pk As Integer
   Dim person As Collection 
   '----------------------------------------------------------------------------------
   ' This is a cAddress class where we will put the street data
   '
   ' Public pk As Integer 'pk of contacts.data_addresses 'FIXME TO PK_ADDRESS
   ' Public street As String 'may be chr$10 split
   ' Public fk_town As Integer 'fk to lu_towns table
   ' Public suburb As String
   ' Public postcode As String
   ' Public state As String
   ' Public fk_type As Integer '1=home,2=work,3= etc FIXME IS WRONG? see fill combo's
   ' Public preferred_address As Boolean
   ' Public postal_address As Boolean
   ' Public head_office As Boolean
   ' Public geolocation As String 'geographical location latitude AND longitude
   ' Public country_code As String 'eg AU fixme:put default code in ini file
   ' Public data_changed As Boolean
   '----------------------------------------------------------------------------------
   '---------------------------------------------------------------------------------- 
   ' this is a communication class where we will save phone numbers etc 
   ' Public pk As Integer
   ' Public comm_value As String 'using straight value conflicts with language
   ' Public note As String
   ' Public fk_type As Integer
   ' Public comm_type As String  'eg email
   ' Public preferred_method As Boolean
   ' Public confidential As Boolean
   ' Public data_changed As Boolean
   ' Public delted As Boolean
   '----------------------------------------------------------------------------------
   'If doing a total re-build then this will remove all patients,
   'their family structure and family members and reset sequences
   '--------------------------------------------------------------
   If ImportDemographics = const.ImportDemographics_Rebuild Then
      modContactsDBI.persons_erase() 
   End If
   
   lvProgressMessages.Clear()                            'Clear list viewer is watching
   tlImportInformation.text = ""
   If textbox1.text = "" Then
      Message.Info("Please select a file to import")
      Return
   End If
   '-----------------------------------
   'Try and open the file, quit if fail
   '-----------------------------------
   sFilename = Trim(textbox1.text)
   Try hfile = Open sFilename For Input 
   If Error Then
      lvProgressMessages.Add(lvProgressMessages.count, "Unable to open designated file - check file exists and try again")
      Dec Application.Busy
      Return
   End If   
   '-----------------------
   'Sucess, then keep going
   '------------------------
   lvProgressMessages.Add(lvProgressMessages.count, "Opened file..........starting to analyse data" & Trim(textbox1.text))
   lvProgressMessages.Add(lvProgressMessages.count, "Reading demographic data file........")
   Inc Application.busy
   '--------------------------------------------------------------
   'Start a new collection of patients, read each line of the file
   '--------------------------------------------------------------
   
   lvProgressMessages.Add(lvProgressMessages.count, "File to analyse:" & Trim(textbox1.text))
   
   lvProgressMessages.Add(lvProgressMessages.count, "Starting new person collection........")
   While Not Eof(hfile)                                     'until the file ends
      '---------------------------------------------------------------
      'Each new line is a new patient, so create a new patient object,
      'new address collection (we will probably only have one) and
      'new communications collection
      '---------------------------------------------------------------
      iCommCount = 0
      iError = False 'assume the best
      person = New Collection
      patient = New Collection 
      address = New Collection
      comms = New Collection 
      
      '----------------------------------------------------------------
      'read line of the file, replace appropriate delimiters and quotes
      '----------------------------------------------------------------
      Line Input #hfile, sLineInput
      sLineInput = Replace$(sLineInput, txtCurrentDelimiter.text, txtReplaceDelimiterWith.text)
      sLineInput = Replace$(sLineInput, "\"", "")
      ' txtCurrentLine.text = sLineInput
      Wait
      '-----------------------------------
      'Now split the line at the delimeter
      '----------------------------------- 
      bits = Split(sLineInput, "|")
      bits[dob] = Right(bits[dob], 2) & "/" & Mid(bits[dob], 6, 2) & "/" & Left(bits[dob], 4)
      '-----------------------------
      'For each patient, add the data
      '-----------------------------
      '------------------------------------------------
      'Allocate firstname, surname, dob, sex, title etc
      '------------------------------------------------
      person!firstname = bits[firstname]
      If bits[firstname] = "" Then
         ' Add_Error(columnview1, patient, "no firstname")
         lvProgressMessages.Add(lvProgressMessages.count, "no firstname:" & person!firstname & " " & person!surname)
         Wait
         Inc Errorcount
         iError = True
      End If
      person!surname = bits[surname]
      If bits[surname] = "" Then
         ' Add_Error(columnview1, patient, "no surname")
         lvProgressMessages.Add(lvProgressMessages.count, "no surname:" & person!firstname & " " & person!surname)
         Wait
         Inc Errorcount
         iError = True
      End If
      '-----------------------------------
      'Missing Birthdate, put in a default
      '-----------------------------------
      person!birthdate = Val(bits[dob])
      If Year(person!birthdate) = 0 Then
         'Add_Error(columnview1, patient, "no birthdate")
         lvProgressMessages.Add(lvProgressMessages.count, "no birthdate:" & person!firstname & " " & person!surname)
         
         person!birthdate = CDate(Trim(txtMissingBirthdate.text))
         Wait
         Inc Errorcount
         iError = True
      End If
      'patient!sex = bits[sex]
      '----------------------------------------------------------------
      'If missing sex, attempt to guess sex on basis of their firstname
      'from contacts.lu_firstnames table which has sex in there
      '----------------------------------------------------------------
      If bits[sex] = "" Then
         'Add_Error(columnview1, patient, "no sex")
         lvProgressMessages.Add(lvProgressMessages.count, "no sex:" & person!firstname & " " & person!surname)
         Wait
         Inc Errorcount
         Guess_Sex(person)
      Else
         Select Case Upper(Trim(bits[sex]))
            Case "M"
               person!fk_sex = const.cSexMale
            Case "F"
               person!fk_sex = const.cSexFemale
         End Select  
      End If
      '------------------------------------------------- 
      'If no title, try and guess it on basis of age/sex
      'We can't always be correct!!!!
      '-------------------------------------------------
      person!title = bits[title]
      If bits[title] = "" Then 
         ' Add_Error(columnview1, patient, "no title")
         lvProgressMessages.Add(lvProgressMessages.count, "no title:" & person!firstname & " " & person!surname)
         Wait
         Inc Errorcount
         Guess_Title(person)
      Else
         Select Case Upper(Trim(bits[title]))
            Case "MR"
               person!fk_title = const.ctitleMr
            Case "MRS"
               person!fk_title = const.ctitleMrs
            Case "MASTER", "MST"
               person!fk_title = const.ctitleMaster
            Case "MS"
               person!fk_title = const.ctitleMs
            Case "MISS"
               person!fk_title = const.ctitleMiss
            Case "PROF"
               person!fk_title = const.ctitleProf
            Case "DR"
               person!fk_title = const.ctitleDr
            Case Else
               person!fk_title = const.ctitleUnKnown
         End Select
      End If
      Try person.Remove("title")
      'End With
      '--------------------------------------------------
      'only importing one address from pracsoft at moment
      '--------------------------------------------------
      address = New Collection 
      
      address!street1 = Trim(bits[street1])
      '----------------------------------------------------------------------
      'The staff in our practice seem to have constantly put in wrong suburbs
      'Do some massaging of common mistakes
      '1: Strip blanks off the end
      '2: Remove a fullstop eg Whitebridge. instead of whitebridge
      '3: substitute MOUNT for MT
      '4: warabrook instead of WARRABROOK
      '------------------------------------
      address!suburb = Upper(Trim(bits[suburb]))
      If Right(address!suburb, 1) = "." Then
         address!suburb = Left(address!suburb, Len(address!suburb - 1))
      End If
      If InStr(address!suburb, "MT ") Then
         address!suburb = Replace$(address!suburb, "MT ", "MOUNT ")
      End If
      If InStr(address!suburb, " HTS") Then
         address!suburb = Replace$(address!suburb, " HTS", " HEIGHTS ")
      End If
      If address!suburb = "WARRABROOK" Then
         address!suburb = "WARABROOK"
      End If
      If address!suburb = "JEWELS" Then
         address!suburb = "JEWELLS"
      End If
      
      If bits[suburb] = "" Then 
         'Add_Error(columnview1, patient, "no suburb")
         lvProgressMessages.Add(lvProgressMessages.count, "no suburb:" & person!firstname & " " & person!surname)
         Inc Errorcount
         Wait
         iError = True
      Else
         address!fk_town = Towns_get_pk(address!suburb)
         If address!fk_town = 0 Then 
            missing_towns.Add(bits[suburb], missing_town_count)
            Inc missing_town_count
            ' Add_Error(columnview1, patient, "wrong suburb information" & ":" & bits[suburb]) 
            lvProgressMessages.Add(lvProgressMessages.count, "wrong suburb information:" & person!firstname & " " & person!surname)
            Wait
            Inc Errorcount
            iError = True
         End If
      End If
      address.Remove("suburb")
      address!postcode = bits[postcode]
      If bits[postcode] = "" Then 
         'Add_Error(columnview1, patient, "no postcode")
         lvProgressMessages.Add(lvProgressMessages.count, "no postcode:" & person!firstname & " " & person!surname)
         Wait
         Inc Errorcount
         iError = True
      End If
      '   Addresses.Add(address, 0)
      '---------------------------
      'Importing up to three comms
      'home phone
      '---------------------------
      If bits[phone_home] <> "" Then
         comm = New Collection 
         comm!fk_type = const.CommModalityHome
         comm!value = bits[phone_home] 
         Comms.Add(comm, iCommCount)
         Inc iCommCount
      End If
      '------------
      'mobile phone
      '------------
      If bits[phone_mobile] <> "" Then
         comm = New Collection 
         comm!fk_type = const.CommModalityMobile
         comm!value = bits[phone_mobile] 
         Comms.Add(comm, iCommCount)
         Inc iCommCount
      End If
      '----------
      'work_phone
      '----------
      If bits[phone_work] <> "" Then
         comm = New Collection 
         comm!fk_type = const.CommModalityWork
         comm!value = bits[phone_work] 
         Comms.Add(comm, iCommCount)
         Inc iCommCount
      End If
      If Not iError Then 
         'listview3.Add(listview3.count, Str(i) & " " & patient.firstname & " " & patient.surname & Address1.street & " " & Str(Address1.fk_town))
         txtImportedPatient.Text = "Validated " & person!firstname & " " & person!surname 
         Wait
         ' patients.Add(patient, i)
         
      End If
      '----------------
      'Save the patient
      '----------------
      patient = New Collection
      
      address.Remove("postcode")
      address!country_code = "AU"
      old_data = New Collection 'not needed
      old_pk = 0 'not needed
      old_comms = New Collection 'not needed
      modContactsDBI.Patient_Save(old_data, old_pk, patient, person, address, comms, old_comms)
      
      Inc ipersoncount   
      ' End If   
      
      i = i + 1
   Wend 
   
   Close hfile
   lvProgressMessages.Clear()
   lvProgressMessages.Add(lvProgressMessages.count, "file contained " & Str$(i) & "lines")
   lvProgressMessages.Add(lvProgressMessages.count, "we added " & Str(ipersoncount) & " persons")
   lvProgressMessages.Add(lvProgressMessages.count, "file contained " & Str$(Errorcount) & "errors")
   ' columnview1.MoveFirst
   ' For i = 0 To columnview1.count - 1
   '      row = columnview1.Item.Key
   '      sMsg &= columnview1[row][0] & " " & columnview1[row][1] & "\n" 
   '      columnview1.MoveNext
   '  Next
   ' 
   'write to file(sMsg, User.home & "/pracsoft_export_errors.txt")
   
   errorsfile = Open User.home & "/pracsoft_export_errors_missing_towns.txt" For Output Create
   For Each missing_town In missing_towns
      Print #errorsfile, missing_town
   Next
   Close #errorsfile    
   'now match the town to a pk for contacts.lu_towns 
   'now match the town to a pk for contacts.lu_towns
   Dec Application.Busy
   ' btnImportDemographicData.enabled = True
   txtImportedPatient.text = "" 
   tlImportInformation.text = "<P><B>Importing persons into EasyGP</B></P>"
   tlImportInformation.text &= "Please check the messages in the output window above. If there are a significant number "
   "of errors, you should print out the error log file and go back to your source database "
   "and correct the errors there, then try again<BR><BR>"
   "If you are happy the data is reasonably clean, then click the Import button to proceed"
   
End

Public Sub Guess_Sex(p As Collection) 

   Dim sql As String
   Dim $Result As Result

   sql = "Select firstname,sex from contacts.lu_firstnames "
   "where Lower(firstname) = $$"
   sql &= Lower(Trim(p!firstname)) & "$$"
   
   $Result = modDBConnect.exec_query(sql)
   If $Result.count Then
      p!sex = $Result!sex
      Select Case Lower(p!sex)
         Case "m"
            p!fk_sex = const.cSexMale
         Case "f"
            p!fk_sex = const.cSexFemale
         Case Else
            p!fk_sex = const.cSexUnknown
       End Select
      p.Remove("sex")
   Else
      'couldn't find a name
      p!fk_sex = const.cSexUnknown
   End If
   
End

Public Sub Guess_Title(p As Collection)
   '-------------------------------
   'Guesses a title on basis of age
   '-------------------------------

   Dim Age As Integer

   age = DateDiff(p!Birthdate, Now, gb.Year)
   If age < 18 Then
      If p!fk_sex = Const.cSexFemale Then
         ' If Lower(p!sex) = "f" Then
         ' p!title = "Miss"
         p!fk_title = const.ctitleMiss
      Else
         '  p!title = "Master"
         p!fk_title = const.ctitleMaster
      End If
   Else
      If p!fk_sex = const.cSexFemale Then
         If Lower(p!sex) = "f" Then
            ' p!title = "Ms"
            p!fk_title = const.ctitleMs
            
         Else
            '  p!title = "Mr"
            p!fk_title = const.ctitleMr
         End If
      End If
   End If

End

Public Function Towns_get_pk(suburb As String) As Integer
   '  'FIXME THIS IS WRONG - DUPLICATE TOWNS
   '  'NEED THE POSTCODE AS WELL
   ' ' Dim ad As cAddress
   '  Dim x As Integer
   '  For Each ad In Towns
   '     If Upper(ad.suburb) = suburb Then
   '        Return ad.fk_town
   '        
   '     End If
   '  Next
   '  Return 0

End

Public Sub Get_towns()
   ' Dim sql As String
   ' Dim $Result As Result
   ' 
   ' Dim ad As cAddress
   ' Dim x As Integer
   ' towns = New Collection
   ' 'temp, gets all towns into memory
   ' sql = "Select * from contacts.vwTowns"
   ' $Result = modDBConnect.exec_query(sql)
   ' For Each $Result
   '    ad = New cAddress
   '    ad.fk_town = $Result!pk
   '    ad.suburb = Lower($Result!Town)
   '    Towns.Add(ad, x)
   '    Inc x
   ' Next
   '     
   
End

Public Sub Page_ImportLegacyData()
   '--------------------------------------------------------------------------------
   'Creates database entry for the organisation who will run/own the easygp database
   '--------------------------------------------------------------------------------

   iCurrentPage = cImportWizardPage_ImportLegacy
   lblHeading.text = wizardHeading[cImportWizardPage_ImportLegacy]
   '   tbImportMims.Visible = False
   tbImportExport.text = " Import Legacy Data "
   tlHelp.text = "<B>Importing Clinical Data</B><P> "
   "<P>You may now import clinical data from a legacy database.</P>  "
   "<P>The exent to which this is possible varies between systems. </P>" 
   "One of the problems with legacy medical record systems such as "
   "Medical Director, is that the database structure  is not "
   "properly normalised, so that it may not be possible to import as "
   "much as you would like.</p>"

End 

Public Sub Page_ImportDrugData()
   '--------------------------------------------------------------------------------
   'Creates database entry for the organisation who will run/own the easygp database
   'see: Dim FDrugImport As New FMimsPasswords
   '--------------------------------------------------------------------------------

   iCurrentPage = cImportWizardPage_ImportDrugs
   lblHeading.text = wizardHeading[cImportWizardPage_ImportDrugs]
   '   tbImportMims.Enabled = False
   '   tbImportMims.Visible = True
   tbImportExport.text = "Unzip Mims Data Files "
   '   lblNewRecordType.text = "Add General Practice"
   tlHelp.text = "<B>Importing Drug Data</B><P> "
   "<P>EasyGP uses Mims(c) drug data which is proprietry, hence you must have a licence to use the data. </P>"
   "<P>If during the course of installation we are unable to find this licence, the installation will fail.</P>"
   
   "<P>You can use this import tool to either install drug data for the first time or " 
   "to update the data on a monthly basis.<P> "
   "Existing data will be erased prior to the import process, but this will not affect your " 
   "existing prescribing data within the program.</p>" 
   "<P>If you need to obtain a licence, please contact the MIMS on 1800 800 629 "
   "and ask for IT support. <P>"
   
End

Public Sub Page_ImportDemographics()
   '--------------------------------------------------------------------------------
   'Creates database entry for the organisation who will run/own the easygp database
   '--------------------------------------------------------------------------------
   
   iCurrentPage = cImportWizardPage_ImportDemographics
   lblHeading.text = wizardHeading[cImportWizardPage_ImportDemographics]
   tbImportExport.text = "Import Demographic Data"
   '   tbImportMims.Visible = False
   tlHelp.text = "<B>Importing Demographic Data</B><P> "
   "<P>Demographic data from a legacy database may or may not be 'clean'. Often the original data entry "
   "by the practice staff has been poor, and many legacy systems did not enforce data-integrity. "
   "<P>For example suburbs my be spelt incorrectly, or their endings abbreviated " 
   "e.g MT HUTTON instead Of  MOUNT HUTTON, and postcodes are often missing. "
   "Sometimes the patient data can be missing information such as sex, or title </p>"
   "<P>The program will analyze the file you provide for import, and attempt to correct as "
   "many of these errors as possible, filling in missing postcodes, guessing the sex on "
   "the basis of the name, or the title on the basis of the age. There will be mistakes "
   "with this - we can't guess if the person is married, so 'Ms' will be used instead for "
   "females of marriagable age!</P>"
   "<P>After the program analyzes the data you intend to import, if there are many "
   "errors you should probably go back and fix them in the original database before proceeding.</P> "
   "<P>You may return to this installation program at any time and resume where you left off."
   
   modDBConnect.ensure_login()
   
   Get_towns() 

End

Public Sub SliderFont_Change()

   tlHelp.Font.size = sliderFont.Value
   tlHelp.Font.size = sliderFont.Value
   
End

Public Sub Demographic_Data_Import()
   ' 
   '  '-----------------------------------------------
   '  'Import into postgres all validated patients
   '  ' modContactsDBI.Patient_Save checks if the
   '  ' patient exists, if duplicate it warns the user
   '  ' if succesful save returns true
   '  'fixme - get a better name for importdemographics integer
   '  '-----------------------------------------------
   '  Dim i As Integer
   '  Dim x As Integer
   '  Dim missingfksex As Boolean
   '  Dim missingfktitle As Boolean
   '  Dim p As cpatient
   '  Dim comm As cComm   
   '  Dim acom As cComm
   '  Dim $Result As Result
   '  Dim patientcount As Integer
   '  'Dim bRebuild As Boolean
   '  tbImportExport.Enabled = False
   '  Inc Application.Busy
   '  lvProgressMessages.Add(lvProgressMessages.count, "Importing patients to postgress.....")
   '  Wait
   '  $Result = modDBConnect.BeginTrans()             'start the transaction
   '  modDBConnect.SetDateStyle_isodmy()
   '  '------------------------------------
   '  'Wipe existing patients if rebuilding
   '  '------------------------------------
   '  If ImportDemographics = const.ImportDemographics_Rebuild Then
   '     modContactsDBI.Patients_erase() 
   '  End If
   '  '------------------------
   '  'Save each patient object
   '  '------------------------
   '  For Each p In patients                          'for each patient
   '     txtImportedPatient.text = "Processing....." & p.Firstname & " " & P.surname
   '     If modContactsDBI.Patient_Import_Legacy(p, ImportDemographics) Then      
   '        Inc patientcount                          'increment the saved count
   '     End If
   '     Wait   
   ' Next
   ' $Result = modDBConnect.CommitTrans()             'complete the transaction
   ' lvProgressMessages.Add(lvProgressMessages.count, "Successfully imported " & patientcount & " patients.")
   ' Dec Application.Busy
   ' tbImportExport.Enabled = True  

End

' Public Sub Wizard1_Change()
'  Select Case Wizard1.Index
'    Case cImportWizardPage_ImportChoice
'    
'    Case cImportWizardPage_ImportDemographics
'          Page_ImportDemographics()
'          
'    Case cImportWizardPage_ImportDrugs
'          Page_ImportDrugData()
'          
'    Case cImportWizardPage_ImportLegacy
'          Page_ImportLegacyData()
'  End Select
'  
' End

Public Sub LegacyData_Import()
   
   '---------------------------------------------------
   'Imports the legacy data from the designated program
   'First check that patients have been imported
   '---------------------------------------------------
   Dim $Result As Result

   $Result = modDBConnect.exec_query("Select * from contacts.vwpatients")
   If $Result.count = 0 Then
      Message.info("Please import your demographic data before proceeding")
      Return
   End If   
   tbImportExport.Enabled = False
   If chkScratchpad.Value Then
      ScratchPad_Import()
      chkScratchpad.Value = False
   End If
   If chkPastHistory.Value Then
      PastHistory_Import()
      chkPastHistory.Value = False
   End If
   
   If chkPathologyRequests.value Then
      RequestForms_Import()
      chkPathologyRequests.value = False
   End If
   If chkReferralLetters.Value Then
      ReferralLetters_Import()
      chkReferralLetters.Value = False
   End If
   If chkSocialHistory.Value Then
      SocialHistory_Import()
      chkSocialHistory.Value = False
   End If
   If chkRecalls.Value Then
      Recalls_Import()
      chkRecalls.Value = False
   End If
   tbImportExport.Enabled = True
   
End

Public Sub ScratchPad_Import()
   
End

Public Sub SocialHistory_Import()
   
End

Public Sub Recalls_Import()
   
End

Public Sub PastHistory_Import()

End

Public Function File_IO_Describe_Error(error_code As Integer) As String
   
End 

Public Sub ReferralLetters_Import()
   
End

Public Sub RequestForms_Import()

End

Public Sub chkLegacyData_Click()
   
End

Public Sub About_EasyGP()
   
End

Public Sub tbSelectlegacyFile_Click()
   
End

Public Sub txtLegacyImportPath_LostFocus()
   
End

Public Sub rbDemographicImportOptions_Click()
   
End
