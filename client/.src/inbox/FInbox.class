' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
'INBOX
'
'PURPOSE       Display any document coming into the practice for staff members
'              A Document is defined loosely, it could be a scanned document
'              an email, a HL7 message  either for a patient or just junk mail
'              for one or more doctors
'DATABASE      See Schema Documents
'              Documents.Documents contains every single document - they end up here
'                                  either by the HL7 parser automatically putting them there
'                                  having matched FMainpatients (if fails > unmatched table)
'                                  or by staff having allocated a docuForm_PreviousNotesment from another source
'                                  eg scanning (see Clerical.Scanning.FArchiveDocuments)
'              Documents.sending_entities contains defaults for anyone who sends stuff
'              Run GUI: Admin.HL7 Management.HL7 Sending Entities
'              Sources Source.Admin.HL7.FHLManagement
'
'HOW THIS WORKS: _New()
'                At Instantiation of this form Admin is prevented from accessing, calls Init()
'                Init()
'                A Timer is started, because otherwise I found that the gui dosn't come up
'                quickly enough as the database access slows this down, so look at Timer1.Timer()
'                Sending_Entities (collection) is loaded to describe their default options
'                timer1_Timer()Triggers And calls Inbox_Reload()
'                The inbox is filled with all unique names
'                The inbox though usually filled with patients names, may not be if the document
'                is not aimed so, i.e could be a staff circular
'                The first row of the inbox is automatically selected by the program and this then
'                fills the documents list with documents for that patient. The first of these is
'                automatically selected and the document displayed, by choosing the appropriate
'                viewer
'
'                SelectedDocument = Selected_Inbox!!documents[gvwDocuments.row] = the document currently slected
'
'               All documents must be actioned at least by viewing the meta - data of the document
'               and the user clicking File implicity means they have approved the document as 'OK'
'               The Form that does all the actioning, and indeed also contains the metadata form
'               is FActionDocument - this is basicFMainally a tab control on form, and other forms
'               are embedded on each tab to enable document actioning:
'                 FDocumentMetadata - Alter the metadata
'                 FPrescriptions    - write a prescription (Not implemented)
'                 FRecalls          - write a recall
'                 FPastHistory      - add or later a past history item
'                 FStaffTasks       - allocate tasks to themselves or 1 or more staff members for this document
'                 FScratchPad       - write a scratch pad note
'                + more... see the form.
'
'BUGS           Probably plenty please email me rterry@internode.on.net
'               Patient filter not working properly, something to  do with the timer.
'               mnuWebView_Click():
'                 if observations[pk]!loinc is null > crash, however I've patched this
'                 but problem surfaced with ?loinc code or some sort of code to do with
'                 ECG's starting with K, not being imported from douglas labs because
'                 segment wasn't parsed in the importer FIXME
'               EGfr'S DON'T graph properly - range/scale on graph are incorrect.
'TODO           Implement a limit on documents in the inbox, currently set at (gulp) 2000
'               Implement the staff archives and viewing the documents audit trail.
'-----------------------------------------------------------------------------------------------
Private Tabstrip_With_Focus As Integer         'used to by Zoom
Private Const cTabstripInbox As Integer = 0
Private Const cTabstrip_Documents As Integer = 1
Private Const clinicalList_Results As Integer = 1
Private Const clinicalList_Correspondance As Integer = 2
Private loincs As Collection 'temporary ?FIXME
Private obs As Observer
Private pfile As String ' name of temp picture file
Private cvwPatientsRequests_key As Variant 
'-------------
'Boolean flags
'-------------
Private bIniting As Boolean = True              'only  used to ensure gui loads before database accessed
Private bAutoFilePatient As Boolean             'if True this patients results will be auto-filed - used only by me
Private bAutoFileAll As Boolean                 'If true the entire inbox is auto filed  - used only by me
Private bexit As Boolean                        'used to prevent re-entry into routines
Private bIncludeUnmatcheddocuments As Boolean   'If true unmatched documents are included in the inbox
Private bExcludeFTReport As Boolean             'If true the FT Report segment is not shown in the html of the hl7 document
Private bExcludePIT As Boolean                  'If True the PIT segments are not shown in the html of the hl7 document
Private bRequestMatchFound As Boolean           'True if matching reuquest/result
'-----------
'Collections
'-----------
Private Staff_members As Collection             'Collection of all staff members in the surgery
Private Staff_member As Collection              'the currently selected staff member from the staff combo
Private Sending_Entities As Collection          'collection of documents.vwSendingEntities ie all who send documents
Private Inbox As Collection                     'the main inbox collection each member = collection of documents
Private RequestOrdered As Collection            'selected request which was ordered
Private Selected_Inbox As Collection            'the collection of documents for selected row in inbox (ie INbox[key])
Private SelectedDocument As Collection          'currently selected document
Private synonyms As Collection                  'collection matching a senders editorterms with readable users terms
Private Observations As Collection              'Any 'observations' ie measurement results, associated with a document
Private Documents As Collection
Private lu_requests_names As Collection 
Private Outstanding_forms As Collection      'all request where clin_requests.forms_requests.finalised is false
'-------------
'Database Keys
'-------------
Private fk_document As Variant                  'key to document.documents
Private fk_lu_message_display_style As Variant  'const.Document_Display_As_Letter or  const.Document_Display_As_Result
Private fk_lu_message_display_style_clerical As Variant   'what clerical original filed it us (will be this **unfiled** in FClinical
'--------------
'Integer Values
'--------------
Private Timer_Count As Integer                  'used to delay searching when using Timer1
Private fgc_errors As Integer = 16711680        'red foreground as default for errors
Private bgc_errors As Integer = 16777215        'yellow background as default for errors
Public currentconsult As CConsult               'do not make this private
Private Document_HTML As String
'-----------------------------------------------------------------------
'Constants to describe the tabs which action a document on tabStripInbox
'-----------------------------------------------------------------------
Private Const cTab_Metadata As Integer = 0
Private Const cTab_Documents As Integer = 0
Private Const cTab_Recalls As Integer = 1
Private Const cTab_HealthIssues As Integer = 2
Private Const cTab_PreviousNotes As Integer = 3
Private Const cTab_ProgressNotes As Integer = 4
Private Const cTab_INR_Management As Integer = 5
Private Const cTab_Prescriptions As Integer = 6
'---------------
'Embedded Forms
'---------------
Private Form_Graph As FGraph
Private Form_ActionDocument As FActionDocument           'This form contains minimum 1 (FArchiveMetadata) actioning form
Private FPreview_HtmlDocument As FHtmlViewer             'The main html viewer for hl7
Private PDForm As FPdf                                   'View any PDF files here
Private FMessage As FGenericHTMLMessage                  'popup message box
Private Form_Recall As FRecalls
Private Form_HealthIssues As FPastHistory
Public Form_PreviousNotes As FProgressNotesViewer
Private Form_ProgressNotes As FProgressNoteEditor
Private Form_INRs As FInr
Public Form_Prescriptions As FPrescriptions            'do not make this private
Private form_medications As FClinLists_Medications

Static Private Form_Inbox As FInbox                'allow access of this form globally

Public Sub _New()
   
   Init()                           'Initialse gui etc on the inbox tab
   Try Settings_Load()
   Form_Inbox = Me
   
End

Static Public Sub ReLoad_Requests_External()
   
   form_inbox.Patient_Outstanding_Requests_Show(True)
   
End

Static Public Sub Previous_Notes_Refresh()
   
   Try form_inbox.Previous_Notes_Reload  'invalid object bug here when closed the program
   
End

Static Public Function Is_Same_Patient(fk_patient As Variant) As Boolean
   
   If Not IsNull(Form_Inbox) Then   'if FINbox has not been created then Form_Inbox=Me not yet executed
      If Not IsNull(form_inbox.currentconsult) Then   
         If fk_patient = form_inbox.currentconsult!patient!fk_patient Then Return True
      End If   
   End If   
   
End

Static Public Sub Reload_Inbox_External()
   '-------------------------------------------------------------
   'Reloads the inbox from other forms if patient is same in both
   'eg from FclinList_ordering, where metadata has been accessed
   'and an unfiled document filed
   '-------------------------------------------------------------
   
   form_inbox.tbRefreshInbox_Click() 
   
End

Static Public Sub Reload_Allergies()
   'if allergies changed in FAllergies then reload these in the FInbox.Form_Prescriptions
   
   form_inbox.Allergies_Reload
   
End

Static Public Sub Medications_Refresh()
   '-----------------------------------------------------------------
   'if User prescribes medications then refresh the list in the inbox
   '-----------------------------------------------------------------
   
   form_inbox.Patient_Medications_Show
   
End 

Public Sub Previous_Notes_Reload()
   
   Form_PreviousNotes.WebView1.html = modProgressNotes.AllProgressNotes_Construct_Html(currentconsult)
   
End

Static Public Sub Switch_tab(iTab As Integer)
   '---------------------------------------------------------------
   'switch tabstrip containing document, recall, progress notes etc
   'called from FRecall to when a recall is saved to save me having
   'to click on the document tab all the time when 99% of the time
   'that's what I want to do after I've added recall in the inbox
   'FIXME currently does not see to work
   '----------------------------------------------------------------
   
   form_inbox.Tab_Switch(iTab)
   
End

Public Sub Tab_Switch(itab As Integer)
   
   Tabstrip1.index = iTab 
   
End

Static Public Sub tbFile_SetFocus()
   '----------------------------------------------------------------------------------
   'Called from the embedded metadata form to set focus to the button to file document
   '----------------------------------------------------------------------------------
   
   Form_Inbox.tbFile.SetFocus()
   
End

Public Sub Allergies_Reload()
   'called from FAllergies if same patient in inbox as in clinical and allergies have been changed
   
   Dim med As Collection
   Dim allergy_class_code As Collection
   Dim sMsg As String
   
   If Not IsNull(Form_Prescriptions) Then
      currentconsult.Refresh("allergy_class_codes")
      Form_Prescriptions.Allergies_For_Inbox_Refresh  'will refresh collection and reload the list
   End If   
   If Not IsNull(Form_Prescriptions.script_items) Then  
      For Each med In Form_Prescriptions.script_items
         If med!prescribed.Exist("pk") = False Then   'on list but not yet saved or printed
            For Each allergy_class_code In currentconsult!allergy_class_codes
               If allergy_class_code!class_code = Left(med!atccode, Len(allergy_class_code!class_code)) Then
                  sMsg = modAllergyDBI.Allergy_Warning(currentconsult, med, allergy_class_code!class_code)
                  sMsg &= "\n\nIt seems this drug has already been prescribed today by you in your Inbox Prescription Writer but not printed.\n\nYou should check the prescription is not a mistake."
                  Message.Warning(sMsg, "Ok")
                  sMsg = "The user was presented with a warning message about danger with a currently prescribed medication which has not yet been printed, and viewed and clicked OK in the popup dialog box.<BR><BR>" & sMsg 
                  If modAudit.MakeAudit(currentconsult, "warning to user", Null, 0, const.cSection_Prescriptions, sMsg) Then
                     modDBConnect.CommitTrans()
                  Endif
                  Break
               End If  
            Next
         End If  
      Next
   End If
   
End

Public Sub Settings_Save()
   
   Settings["FInbox/HSplit_Document"] = HSplit_Document.Layout
   Settings["FInbox/HSplit_Requests_Meds.Layout"] = HSplit_Requests_Meds.Layout
   Settings["FInbox/Vsplit_left"] = Vsplit_left.Layout
   Settings["FInbox/VSplit_Document"] = VSplit_Document.Layout
   Settings["FInbox/HSplit_Inbox_Documents_Lists.Layout"] = HSplit_Inbox_Documents_Lists.Layout
   Settings["FInbox/VSplit_PatientsDocumentList.Layout"] = VSplit_PatientsDocumentList.Layout
   Settings["FInbox/Results_Zoom"] = FPreview_HtmlDocument.Webview1.Zoom
   Settings["FInbox/VSplit_Prescriptions.Layout"] = VSplit_Prescriptions.Layout
   Settings["FInbox/HSplit_Prescriptions.Layout"] = HSplit_Prescriptions.Layout
   Try Form_Recall.Settings_Save()
   
End

Private Sub Settings_Load()
   
   txtMonthsToView.text = Settings["FInbox/months_to_view", 3] 
   VSplit_PatientsDocumentList.Layout = Settings["FInbox/VSplit_PatientsDocumentList.Layout", modUtilGUI.VSplit([237, 115])]
   HSplit_Inbox_Documents_Lists.Layout = Settings["FInbox/HSplit_Inbox_Documents_Lists.Layout", modUtilGUI.HSplit([1, 1])]
   VSplit_Document.Layout = Settings["FInbox/VSplit_Document.Layout", modUtilGUI.VSplit([662, 243])]
   Vsplit_left.Layout = Settings["FInbox/Vsplit_left", modUtilGUI.VSplit([480, 479])]
   HSplit_Requests_Meds.layout = Settings["FInbox/HSplit_Requests_Meds.Layout", modUtilGUI.HSplit([1, 1])]
   HSplit_Document.Layout = Settings["FInbox/HSplit_Document.Layout", modUtilGUI.HSplit([765, 954])]
   HSplit_Prescriptions.Layout = Settings["FInbox/HSplit_Prescriptions.Layout", modUtilGUI.HSplit([1, 1])]
   VSplit_Prescriptions.Layout = Settings["FInbox/VSplit_Prescriptions.Layout", modUtilGUI.VSplit([1, 4])]
   FPreview_HtmlDocument.Webview1.Zoom = Settings["FInbox/Results_Zoom", 1]
   gvwInboxDocuments.font = Font[Settings["Inbox/gvwInboxDocuments.font", "DejaVu Sans,9"]]
   cvwInbox.font = gvwInboxDocuments.font
   
End

' Public Sub Ini_new()
'    
'    chkOnlyRecent.value = True                                           'default to showing on last months inbox contents
'    ' timer1.start                                                         'delay loading inbox data until gui showing
'    synonyms = const.Synonyms()
'    staff_members = modUtilGUI.LoadCombo(cmbStaffMembers, modInboxDBI.Inbox_Staff_Get(), "wholename")  'combo box filled with staff members
'    cmbStaffMembers.index = cmbStaffMembers.Find(modDBConnect.currentUser!wholename)                'show name of current user in staff combo
'    Sending_Entities = modUtilGUI.LoadCombo(cmbSenders, modInboxDBI.Get_Document_Handling_Defaults(), "msh_sending_entity")
'    cmbSenders.index = -1
'    With Form_ActionDocument = New FActionDocument(Vbox_ActionDocument)
'       .Init("Inbox")                                                    'Loads its own forms, initially only an instance of the document metadata
'    End With
'    With Form_Graph = New FGraph(HBox_LowerLists)
'       .Visible = False
'       .Hbox_Default_Results.visible = False
'       .pnlTool.Visible = True
'       .Set_Embedded_Form("FInbox")
'    End With
'    lblMeasure.text = "Filter Senders   "
'    modEditAreaHelpers.Resize_labels(VBox_Filters, lblMeasure)
'    lblMeasure.text = "Patient  "
'    modEditAreaHelpers.Resize_labels(Vbox_Staff_Patient, lblMeasure)
'    obs = New Observer(Form_ActionDocument.FMetaData) As "FmetaData"
'    With FPreview_HtmlDocument = New FHtmlViewer(HBox_HTML_Viewer)                                       'Form to show html of hl7 received
'       .tbWebBrowserPrint.Visible = True
'       .tbWebBrowserZoomIn.visible = True
'       .tbWebBrowserZoomOut.Visible = True
'    End With
'    obs = New Observer(FPreview_HtmlDocument.Webview1) As "WebView"                               'over-ride menu on the web-view control
'    obs = New Observer(FPreview_HtmlDocument.mnuWebView) As "mnuWebView"                               'over-ride menu on the web-view control
'    obs = New Observer(Form_ActionDocument.FMetaData.txtUserObservationName) As "txtUserObservationName"                'detect when <enter> hit and file the document
'    With PDForm = New FPdf(Vbox_PDf)                                                                'pdf form to show any scanned doc's
'       .BtOpen.Visible = False
'       .Set_Embedded_Form("FInbox")
'       .BtPrint.Visible = True
'       .BtPrint.Enabled = True
'       .btZoomOut.Visible = True
'       .btZoomIn.Visible = True
'       .btRotate.Visible = True
'       .btRotate.Enabled = True
'    End With
'    With cvwPatientsRequests
'       .Columns.count = 2
'       .width = 80
'    End With
'    With gvwInboxDocuments
'       .Columns.count = 2
'    End With
'    tlMissingProvider.text = ""
'    "<HTML>"
'    "<P ALIGN=CENTER><B>Sending Entity Not found</B></P>"
'    "<P ALIGN=LEFT STYLE=\"font-weight: normal\">This document has been "
'    "received from a sending entity which we have not encountered before.</P>"
'    "<P ALIGN=LEFT STYLE=\"font-weight: normal\">Before you can deal with "
'    "this document, the system administrator will have to examine the file "
'    "and enter the details of the sending provider in the database.</P>"
'    "</HTML>"
'    loincs = New Collection
'    loincs.Add("eGFR", "33914-3")
'    loincs.Add("HBA1c", "4548-4")
'    loincs.Add("Platelets", "777-3")
'    loincs.Add("Haemoglobin", "718-7")
'    loincs.Add("UltrasensPSA", "35741-8")
'    loincs.Add("Bicarbonate", "1963-8")
'    loincs.Add("Sodium", "2951-2")
'    loincs.Add("Potassium", "2823-3")
'    loincs.Add("Total PSA", "2857-1")
'    loincs.Add("TSH", "3016-3")
'    loincs.Add("Free T3", "14928-6")
'    loincs.Add("Free T4", "14920-3")
'    loincs.Add("CK", "2157-6")
'    loincs.Add("CRP", "1988-5")
'    loincs.Add("Haematocrit", "16931-8")
'    loincs.Add("ESR", "4537-7")
'    loincs.Add("Carbamazepine", "14639-9")
'    loincs.Add("LDL Cholesterol", "22748-8")
'    loincs.Add("Lamotrigine", "25458-1")
'    loincs.Add("INR", "6301-6")
'    loincs.Add("AST", "1920-8")
'    loincs.Add("Alk Phos", "6769-4")
'    loincs.Add("Gamma GT", "2324-2")
'    ' With Form_Recall = New FRecalls(Vbox_Recalls)
'    '    .Hbox_ForINbox_Buttons.visible = True
'    '    .tbClear.visible = True
'    '    .set_embedded(True, "FInbox")
'    '    .cvwRecalls.visible = True 'the outstandingrecalls
'    '    .VBox_OutstandingRecalls.visible = True 'the outstandingrecalls
'    '    .VBox_Templates.visible = False
'    '    .HSplit_EditArea.Layout = [4, 1]
'    '    .HSplit_EditArea.Background = TabStrip1.Background
'    ' End With
'    ' With Form_PreviousNotes = New FProgressNotesViewer(Vbox_PreviousNotes)
'    '    .Embedded_In_Form_Set_Name("FInbox")
'    ' End With
'    ' With Form_HealthIssues = New FPastHistory(Vbox_HealthIssues)
'    '    .set_embedded(True, "FInbox")
'    '    .HBox_Buttons.Visible = True  'need save/new buttons in FClinical these are not visible
'    ' End With
'    ' With Form_ProgressNotes = New FProgressNoteEditor(Vbox_ProgressNotes)
'    '    .Set_Embedded_In_Form("FInbox")
'    '    .HBox_Save.Visible = True
'    ' End With
'    ' With Form_INRs = New FInr(VBox_INR)
'    '    .set_embedded_form("FInbox")
'    '    .HBox_InboxButtons.Visible = True   
'    ' End With
'    Inbox_Reload()
'    
' End

Public Sub Init()
   
   chkOnlyRecent.value = True                                           'default to showing on last months inbox contents
   timer1.start                                                         'delay loading inbox data until gui showing
   Synonyms_Reload
   With Form_ActionDocument = New FActionDocument(Vbox_ActionDocument)
      .Init("Inbox")                                                    'Loads its own forms, initially only an instance of the document metadata
   End With
   staff_members = modUtilGUI.LoadCombo(cmbStaffMembers, modInboxDBI.Inbox_Staff_Get(), "wholename")  'combo box filled with staff members
   cmbStaffMembers.index = cmbStaffMembers.Find(modDBConnect.currentUser!wholename)                   'show name of current user in staff combo
   Sending_Entities = modUtilGUI.LoadCombo(cmbSenders, modInboxDBI.Get_Document_Handling_Defaults(), "msh_sending_entity")
   cmbSenders.index = -1
   With Form_Graph = New FGraph(HBox_LowerLists)
      .Visible = False
      .Hbox_Default_Results.visible = False
      .pnlTool.Visible = True
      .Set_Embedded_Form("FInbox")
   End With
   lblMeasure.text = "Filter Senders   "
   modEditAreaHelpers.Resize_labels(VBox_Filters, lblMeasure)
   lblMeasure.text = "Patient  "
   modEditAreaHelpers.Resize_labels(Vbox_Staff_Patient, lblMeasure)
   obs = New Observer(Form_ActionDocument.FMetaData) As "FmetaData"
   With FPreview_HtmlDocument = New FHtmlViewer(HBox_HTML_Viewer)                                       'Form to show html of hl7 received
      .tbWebBrowserPrint.Visible = True
      .tbWebBrowserZoomIn.visible = True
      .tbWebBrowserZoomOut.Visible = True
   End With
   obs = New Observer(FPreview_HtmlDocument.Webview1) As "WebView"                               'over-ride menu on the web-view control
   obs = New Observer(FPreview_HtmlDocument.mnuWebView) As "mnuWebView"                               'over-ride menu on the web-view control
   obs = New Observer(Form_ActionDocument.FMetaData.txtUserObservationName) As "txtUserObservationName"                'detect when <enter> hit and file the document
   With PDForm = New FPdf(Vbox_PDf)                                                                'pdf form to show any scanned doc's
      .BtOpen.Visible = False
      .Set_Embedded_Form("FInbox")
      .BtPrint.Visible = True
      .BtPrint.Enabled = True
      .btZoomOut.Visible = True
      .btZoomIn.Visible = True
      .btRotate.Visible = True
      .btRotate.Enabled = True
   End With
   With cvwPatientsRequests
      .Columns.count = 2
      .width = 80
   End With
   With gvwInboxDocuments
      .Columns.count = 2
   End With
   tlMissingProvider.text = ""
   "<HTML>"
   "<P ALIGN=CENTER><B>Sending Entity Not found</B></P>"
   "<P ALIGN=LEFT STYLE=\"font-weight: normal\">This document has been "
   "received from a sending entity which we have not encountered before.</P>"
   "<P ALIGN=LEFT STYLE=\"font-weight: normal\">Before you can deal with "
   "this document, the system administrator will have to examine the file "
   "and enter the details of the sending provider in the database.</P>"
   "</HTML>"
   ' Ian temporary whilst I muck around with auto-graphing
   ' The loinc stuff needs alot of work e.g the english terms I've used often
   ' have a long winded version in the db
   ' also the extended version of the loinc seems to have disappeared from easygp
   loincs = New Collection
   loincs.Add("eGFR", "33914-3")
   loincs.Add("HBA1c", "4548-4")
   loincs.Add("Platelets", "777-3")
   loincs.Add("Haemoglobin", "718-7")
   loincs.Add("UltrasensPSA", "35741-8")
   loincs.Add("Bicarbonate", "1963-8")
   loincs.Add("Sodium", "2951-2")
   loincs.Add("Potassium", "2823-3")
   loincs.Add("Total PSA", "2857-1")
   loincs.Add("TSH", "3016-3")
   loincs.Add("Free T3", "14928-6")
   loincs.Add("Free T4", "14920-3")
   loincs.Add("CK", "2157-6")
   loincs.Add("CRP", "1988-5")
   loincs.Add("Haematocrit", "16931-8")
   loincs.Add("ESR", "4537-7")
   loincs.Add("Carbamazepine", "14639-9")
   loincs.Add("LDL Cholesterol", "22748-8")
   loincs.Add("Lamotrigine", "25458-1")
   loincs.Add("INR", "6301-6")
   loincs.Add("AST", "1920-8")
   loincs.Add("Alk Phos", "6769-4")
   loincs.Add("Gamma GT", "2324-2")
   lu_requests_names = modDBConnect.exec_query_collection("select distinct lower(item) as pk, item from clin_requests.lu_requests order by lower(item)")
   
End

Public Sub FmetaData_Keypress()
   
   Dim CtrlDown As Boolean
   
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Stop Event          'fixme test this fixed the FDocumentmetadata.EditArea_TextBox_Keypress
      Select Case Key.code
         Case Asc("=")
            If Vbox_PDf.Visible Then
               PDForm.zoom_in()
            End If
            If VSplit_Document.Visible Then
               FPreview_HtmlDocument.zoom_in()
            End If
         Case Asc("-")
            If Vbox_PDf.Visible Then
               PDForm.zoom_out()
            End If
            If VSplit_Document.Visible Then
               FPreview_HtmlDocument.zoom_out()
            End If
      End Select
   End If
   
End

Public Sub txtUserObservationName_Activate()
   '----------------------------------------------------------------------------------------
   'This textbox on Fmetadata is over-ridden because I want to automatically trigger
   'filing  of the document when the user hits <enter> on this textbox - makes usage quicker
   '----------------------------------------------------------------------------------------
   
   Stop Event
   If Last.tag = "user name" Then
      If Not Document_File("file") Then Return
   Endif
   Wait                                               'do not remove this  
   Document_Display_Next()                            'success > show next document
   
End

Public Function Synonyms_Update() As Boolean
   '----------------------------------------------------------------------------------
   'If user has added a new term then save to the backend after appropriate prompting
   '---------------------------------------------------------------------------------
   
   Dim syn As Collection
   Dim sMsg As String
   Dim bProvider_Synonym_Exists As Boolean
   Dim bTermExists As Boolean
   Dim new_term As CRow
   Dim terms As String[]
   Dim term As String
   Dim Link_data As CRow   
   Dim bSuccess As Boolean = True       'hope for the best
   
   If Right(Form_ActionDocument.FMetaData.txtUserObservationName.text) <> ";" Then
      Form_ActionDocument.FMetaData.txtUserObservationName.text &= ";"
   End If
   terms = Split(Form_ActionDocument.FMetaData.txtUserObservationName.text, ";", "", True)
   
   For Each term In terms  
      term = Lower(Trim(term))                'yes, shouldn't be possible but I've seen preceeding blanks.
      bTermExists = True   
      Print term
      If Not (lu_requests_names.Exist(term)) Then
         bTermExists = False 
      Endif
   Next
   If bTermExists Then Return True
   For Each Term In terms
      term = Trim(term)                 'yes, shouldn't be possible but I've seen preceeding blanks.
      For Each syn In synonyms
         If Lower(SelectedDocument!tag) = Lower(syn!provider_request_name) Then
            If Lower(term) = Lower(syn!user_request_name) Then
               bProvider_Synonym_Exists = True
               Break
            End If
         End If
      Next
      If Not bProvider_Synonym_Exists Then
         new_term = New CRow 
         new_term!fk_lu_request_type = Form_ActionDocument.FMetaData.Get_Request_Type_PK()
         new_term!item = term
         new_term!fk_laterality = Form_ActionDocument.FMetaData.get_laterality()
         smsg = "The term '" & new_term!item & "' does not exist in the requests table.\n\n"
         sMsg &= "The following is very important. Some tests can be ordered for the left "
         sMsg &= "right, or both sides of the body.\n\n"
         sMsg &= "If you want your requests to come up looking like this in the popup lists, your should answer 'Yes' to Add lateralisation:\n\n"
         sMsg &= new_term!item & " (LEFT)\n"
         sMsg &= new_term!item & " (RIGHT)\n"
         sMsg &= new_term!item & " (BOTH)\n\n"
         sMsg &= "Add Lateralisation?\n\n"
         Select Case Message.Warning(sMsg, "Yes - I want to see left/right/both ", "No - just add the term", "Cancel")
            Case 1
               sMsg = "The term '" & new_term!item & "' will be added, and can be left/right/both sides of the body.\n\n"
            Case 2
               sMsg = "The term '" & new_term!item & "' will be added without lateralisation.\n\n"
            Case 3
               Return False
         End Select
         If Message.Warning(sMsg & "Are you absolutely sure this is accurate?", "Yes", "No") = 2 Then
            Return False
         Else
            new_term.Save("clin_requests.lu_requests", "fk_lu_request")    
         End If
         Link_data = New CRow 
         Link_data!fk_lu_request = new_term!fk_lu_request
         Link_data!provider_request_name = SelectedDocument!tag
         Link_data!lateralisation = Form_ActionDocument.FMetaData.get_laterality()
         Link_data.Save("clin_requests.lu_link_provider_user_requests", "fk_link_data")
         synonyms_Reload() 'should pickup if user typed same one in twice
      End If
   Next
   Return bSuccess
   
End

Public Sub mnuPatientsInInbox_Click()
   
   Select Case Last.tag
      Case "delete from inbox"
         
      Case "move to holding file"
         
   End Select
Catch
   Return 
   
End

Public Function Inbox_Reload()
   '--------------------------------------------------------------------------
   'Reloads the contents of the inbox
   'These can be staff documents, patient documents of un-identified documents
   'cvwInbox_Select() is triggerd by cvwInbox.Item.Selected = True
   'which sets up the Next patient And any associated
   'tabs eg recalls and refreshes the document list
   '--------------------------------------------------------------------------
   
   Inc Application.Busy
   lblSendingEntity.text = ""
   gvwInboxDocuments.Clear()
   FPreview_HtmlDocument.WebView1.html = "<HTML><BODY></BODY></HTML>"
   Form_ActionDocument.FMetaData.EditArea_Clear()
   Inbox = Fill_Inbox()   'fill all documents, limit FIXME UNHARD CODE ME
   cvwInbox.MoveFirst()
   Try cvwInbox.Item.Selected = True   'Triggers loading of documents
   Dec Application.Busy
   
End

Public Sub gvwInboxDocuments_Menu()
   '-----------------------------------------------
   'User has requested the main documents menu
   'If this is  known patient - popup mnuDocuments
   'otherwise popup mnuNonPatientDocuments
   '-----------------------------------------------
   
   Dim x As Integer
   Dim y As Integer
   Dim mnu As Menu
   
   If Not gvwInboxDocuments.Rows.count Then Return
   
   If Selected_Inbox!fk_patient Then
      If chkDeletedDocuments.value = False Then    
         For Each mnu In mnuDocuments.Children
            mnu.Enabled = True
         Next
         If SelectedDocument!msh_transmitting_entity = "snail mail" Then  'scanned documents,not hl7
            mnuDocuments_ReFile.Enabled = True
         Else
            mnuDocuments_ReFile.enabled = False
         Endif
         For x = 0 To gvwInboxDocuments.Rows.count  '-1
            gvwInboxDocuments.row = x
            If gvwInboxDocuments.Rows[x].Selected = True Then
               Inc y
            Endif
         Next
         If y > 1 Then
            mnuDocuments_ReAllocateSingle.Enabled = False
            mnuDocuments_ReAllocateMultiple.Enabled = True
         Else
            mnuDocuments_ReAllocateSingle.Enabled = True
            mnuDocuments_ReAllocateMultiple.Enabled = False
         Endif
         mnuDocuments.Popup()
      Else
         mnuDocumentsUnDelete.Popup()
      End If   
   Else
      '--------------------------------------
      'This is not a patient related document
      '--------------------------------------
      mnuNonPatientDocuments.Popup()
   End If
   
End

Public Sub gvwInboxDocuments_Select()
   '----------------------------------------------------------------------------------
   'User, or the program has clickedf on the gridview showing the list of documents
   'for the currently selected Selected_Inbox (ie a patient or staff member)
   'This routine does everything
   'Special Notes
   '  fk_lu_message_display_style_clerical: When clerical files something, they
   '  give it a designation usually a letter (=1) or result (2) etc see const module
   '  Hence if the same patient is in FClinical as is in the inbox (not an infrequent
   '  occurrence as one often goes to the inbox to find a result, the tabs of clinical
   '  lists are likely to be loaded to some extent. Once loaded these will only be
   '  updated by explicit actions from whatever part of the program is changing data,
   '  Here in the Inbox, it could be the user. So If clerical has say incorrectlly
   '  designated a letter as a result or visa-versa it will be incorrectly filed in
   '  Fclinical, so the Inbox needs to know not only to refresh the tab of the type
   '  the user designates, but also the tab on which it currrently resides in FClinical
   '  See: FInbox.Document_File at the bottom on that routine
   '-----------------------------------------------------------------------------------
   
   Dim Guessed_user_Name As Collection
   Dim file_ext As String
   
   If bExit Or gvwInboxDocuments.rows.count = 0 Then Return        'No documents, show nothing
   Tabstrip1.index = cTab_Documents                                'Make sure we are actually on the documents tab
   bRequestMatchFound = False                                      'default to cannot match to ordering (fime not implemented)
   cvwPatientsRequests.UnSelectAll()                               'remove marquee on list of ordered requests
   bExit = True
   tlMissingProvider.Visible = False                               'could be showing from previous document
   If Selected_Inbox!fk_patient Then                               'if its a patient's doc's we are showing
      Form_ActionDocument.VBox10.Enabled = True                    'enable the actioning of these documents
   Else
      If Not IsNull(Selected_Inbox!fk_unmatched_patient) Then      'otherwise if an unmatched patient
         Form_ActionDocument.VBox10.Enabled = True                 'enable the actioning
      Else
         Form_ActionDocument.VBox10.Enabled = False                'Can't currently action a non patient document FIXME    Else
      End If
   End If
   tlMissingProvider.Visible = False
   Form_Graph.Visible = False
   tbFile.Enabled = True
   SelectedDocument = Selected_Inbox!documents[gvwInboxDocuments.Row]  'set current document
   fk_lu_message_display_style_clerical = SelectedDocument!fk_lu_message_display_style
   fk_document = SelectedDocument!pk_document
   file_ext = File.Ext(SelectedDocument!source_file)
   With Form_ActionDocument
      .Set_Document(SelectedDocument)
      .FMetaData.Init("Allocated Documents")                        'must be done each time, eg a sender-reallocation could have been aborted
      .FMetaData.Edit(SelectedDocument)
      Try .FTasks.fk_task = Null                                       'each document must have a re-zero'd task
      Try .FTasks.cvwStaffTasks.Clear                               'clear any tasks from form previously used 
   End With
   chkExcludePIT.value = SelectedDocument!exclude_pit              'do/do not display PIT segments
   chkExcludeFTReport.value = SelectedDocument!exclude_ft_report   'do/do not display FT report
   fgc_errors = SelectedDocument!abnormals_foreground_color        'FIXME Put in user-defined to overide this
   bgc_errors = SelectedDocument!abnormals_background_color        'FIXME Put in user-defined to overide this
   If Not SendingEntity_Recognised() Then                          'If the sending entity for this document hasn't been verified
      Form_ActionDocument.VBox10.Enabled = False                   'don't allow actioning of a document
      tbFile.Enabled = False                                       'or filing
      HBox_LowerLists.Padding = 10                                 'and explain to the user why and how to fix
      With tlMissingProvider
         .Foreground = color.Red
         .text = "<P ALIGN=CENTER><B>Unidentified HL7 Sender</B><P>"
         .text &= "The sender of this hl7 message cannot be found, the document may not be filed.<BR><BR>"
         .text &= "Please contact the System Administrator for assistance<BR><BR>"
         "The Administrator can correct this via the Admin.Hl7Management tab"
         .Visible = True
      End With
   End If
   If tlMissingProvider.Visible = False And SelectedDocument!fk_staff_destination Then
      tlMissingProvider.Visible = False
   Else
      If tlMissingProvider.Visible = False Then
         With tlMissingProvider
            .Visible = True
            .text = "<P ALIGN=CENTER><B>Unidentified Recipient " & cmbStaffMembers.text & "</B><P>"
            .text &= "The staff member cannot be found, the document may not be filed.<BR><BR>"
            .text &= "This document may or may not be destined for this practice.<BR><BR>"
            .text &= "Please contact the System Administrator for assistance."
         End With
      End If
   End If
   Form_ActionDocument.FMetaData.bexit = True
   Vbox_ActionDocument.Enabled = True
   '-------------------------
   'ok, now show the document
   '-------------------------
   Select Case Lower(file_ext)
      Case "pdf"
         PDF_Document_Show()
         Form_ActionDocument.FMetaData.txtUserObservationName.enabled = True 'put in 04Nov11 to try and fix weird bug, keypress not working
         Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
      Case "png", "jpeg", "tiff", "gif", "jpg"
         Image_File_Show()
         Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
      Case Else
         Observations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & fk_document & " ORDER BY observation_date, set_id")
         If SelectedDocument!fk_lu_message_display_style <> const.Document_Display_As_Letter Then
            Guessed_user_Name = modParseDocument.Guess_UserName(currentconsult, synonyms, SelectedDocument, Observations)
            If Guessed_user_Name!name <> "" Then
               Form_ActionDocument.FMetaData.txtUserObservationName.text = Guessed_user_Name!name
               Form_ActionDocument.FMetaData.txtUserObservationName.pos = 0
            End If
            Select Case Guessed_user_Name!laterality
               Case const.LateralityLeft
                  Form_ActionDocument.FMetaData.rbLateralityLeft.value = True
               Case const.LateralityRight
                  Form_ActionDocument.FMetaData.rbLateralityRight.Value = True
               Case const.LateralityBoth
                  Form_ActionDocument.FMetaData.rbLateralityBoth.Value = True
               Case Else
                  Form_ActionDocument.FMetaData.rbLateralityNone.Value = True
            End Select
         Else
            Form_ActionDocument.FMetaData.txtUserObservationName.text = modParseDocument.Guess_Letter_Content(observations)
         End If
         Allow_Filing(True)
         HTML_Document_Show(SelectedDocument!fk_lu_message_display_style, SelectedDocument, observations)
         Try Auto_Graph(Observations)
   End Select
   Try Form_ActionDocument.FTasks.txtTask.text = Form_ActionDocument.FMetaData.txtUserObservationName.text
   Try Form_ActionDocument.form_staff_message.Set_Text("For:" & Selected_Inbox!wholename & " (" & Selected_Inbox!street1 & " " & Selected_Inbox!town)
   If Not IsNull(SelectedDocument!organisation) Then
      lblSendingEntity.text = SelectedDocument!organisation
   Else
      lblSendingEntity.text = SelectedDocument!msh_sending_entity
   End If
   bexit = False
   Form_ActionDocument.FMetaData.bexit = False
   Tabstrip1.text = "Document for " & Selected_Inbox!wholename & " from " & Form_ActionDocument.FMetaData.txtSender.text
Catch
   bexit = False
   Form_ActionDocument.FMetaData.bexit = False
   
End

Public Sub Auto_Graph(observations As Collection)
   '-----------------------------------------------------------------------
   'An embyronic auto-graphing routine - graphs only abnormals in a result
   'Puts toolbuttons below the graph - each has the name of the test result
   'and its tag = the loinc code of that test
   'Really really bad code.... perhaps you can fix it
   '-----------------------------------------------------------------------
   
   Dim observation As Collection
   Dim tb As ToolButton
   Dim hCtrl As Control
   Dim sLoinc As String
   Dim sFirstMeasurement As String
   Dim sFirstLoinc As String
   Dim Buttoncount As Integer
   
   Inc Application.Busy
   '-----------------------------------------------
   'Remove any existing toolbuttons below the graph
   '-----------------------------------------------
   With Form_Graph
      .Init(currentconsult)
   End With
   For Each hCtrl In Form_Graph.pnlTool.Children
      hCtrl.Delete()
   Next
   '------------------------------------------------------------
   'For each test result, if it has a loinc code and is abnormal
   'add a button below the graph with its name on it
   'At moment, I've limited the loinc's able to be displayed to
   'common ones, but no reason why the whole loinc table couldn't
   'be used, but would need to be cached in memory
   '------------------------------------------------------------
   For Each observation In observations
      '-------------------------------------
      'Is this loinc, one we want to graph?
      '------------------------------------
      sLoinc = ""
      If Not IsNull(observation!abnormal) Then
         'variations for this field for normality in HL7 I've encountered beleive it or not are these
         If Trim(observation!abnormal) <> "N" Then '"N", " ", ""
            '-----------------------------------------------
            'If it is abnormal, then graph it
            'Keep first abnormal, it will be the first graph
            '-----------------------------------------------
            If Buttoncount = 0 Then
               sFirstMeasurement = observation!identifier
               Try sFirstLoinc = observation!loinc
            Endif
            Try sLoinc = observation!loinc
            '-------------------------------------------------------
            'Add a new toolbutton under the graph, common handler
            'It's tag is its loinc, its text label = the measurement
            '--------------------------------------------------------
            If sLoinc <> "" Then
               With tb = New ToolButton(Form_Graph.pnlTool) As "graph_buttons"
                  .name = observation!loinc
                  .tag = observation!loinc
                  .autoresize = True
                  .border = True
                  .height = 18
                  .text = observation!identifier
               End With
               Inc Buttoncount
            End If
         Else
            '----------------------------------------------------
            'It is flagged as normal, but we may want to graph it
            '----------------------------------------------------
            Select Case observation!loinc
               Case const.Loinc_UltraSensPSA, const.Loinc_TotalPSA, const.Loinc_EGFR, const.Loinc_HBA1c, const.loinc_INR, const.Loinc_TSH, const.Loinc_FreeF4, const.Loinc_FreeT3, const.Loinc_CReactiveProtein
                  If Buttoncount = 0 Then
                     sFirstMeasurement = observation!identifier
                     Try sFirstLoinc = observation!loinc
                  Endif
                  With tb = New ToolButton(Form_Graph.pnlTool) As "graph_buttons"
                     .name = observation!loinc
                     .tag = observation!loinc
                     .autoresize = True
                     .border = True
                     .height = 18
                     .text = observation!identifier
                  End With
                  Inc Buttoncount
            End Select
         End If
      Else
         '--------------------------------------------------------
         'Not abnormal, but one we want to graph, eg INR/HBa1c etc
         '--------------------------------------------------------
         Select Case observation!loinc
            Case const.Loinc_UltraSensPSA, const.Loinc_TotalPSA, const.Loinc_EGFR, const.Loinc_HBA1c, const.loinc_INR, const.Loinc_TSH, const.Loinc_FreeF4, const.Loinc_FreeT3, const.Loinc_CReactiveProtein
               If Buttoncount = 0 Then
                  sFirstMeasurement = observation!identifier
                  Try sFirstLoinc = observation!loinc
               Endif
               If observation!loinc = const.Loinc_INR Then
                  sFirstLoinc = observation!loinc 
               End If   
               With tb = New ToolButton(Form_Graph.pnlTool) As "graph_buttons"
                  .name = observation!loinc
                  .tag = observation!loinc
                  .autoresize = True
                  .border = True
                  .height = 18
                  .text = observation!identifier
               End With
               Inc Buttoncount
         End Select
      End If
   Next
   
   '-----------------------------------------------------------------
   'finally, show the first abnormal measurement as the default graph
   'in case of INR's common show the iNR not the PT
   '-----------------------------------------------------------------
   If Buttoncount Then
      If sFirstLoinc <> "" Then
         Show_Graph(sFirstLoinc, sFirstMeasurement)
      Endif
   End If
   Dec Application.Busy
Catch
   Dec Application.Busy '
   
End

Public Sub Graph_Buttons_click()
   '----------------------------------------------------------
   'User has clicked on a button underneath the embedded graph
   '----------------------------------------------------------
   
   Try Show_Graph(Last.tag, Last.text)
   
End

Public Sub Show_Graph(loinc As String, measurement As String)
   '------------------------------------------------
   'Show graph of this loinc code's values over time
   '------------------------------------------------
   
   Form_Graph.Measurement_Graph(loinc, measurement)
   tlMissingProvider.Visible = False
   Form_Graph.Visible = True
   
End

Public Sub Image_File_Show()
   
   Document_HTML = ""
   VSplit_Document.Visible = False
   Vbox_PDf.Visible = False
   Vbox_Images.visible = True
   modUtil.Kill_If_Temp(pfile)
   pfile = modFiles.Get("document_archiving_directory", selecteddocument!source_file)
   Pbox.picture = Picture.Load(pfile)
   
End

Public Sub Form_Close()
   
   modUtil.Kill_If_Temp(pfile)
   
End

Public Sub Form_KeyPress()
   
   Dim CtrlDown As Boolean
   Dim AltDown As Boolean
   
   Try CtrlDown = Key.Control
   If CtrlDown Then
      Select Case Key.code
         Case Asc("=")
            Zoom("zoom_in")
         Case Asc("-")
            Zoom("zoom_out")
      End Select
   End If
   
End

Public Sub Zoom(z As String)
   'fixme change the zoom on the other forms to pass a parameter
   
   Select Case Tabstrip_With_Focus
      Case cTabstripInbox
         Select Case tabStripInbox.index
            Case cTab_PreviousNotes
               If z = "zoom_in" Then Form_PreviousNotes.zoom_in
               If z = "zoom_out" Then Form_PreviousNotes.zoom_out
         End Select
      Case cTabstrip_Documents
   End Select
   
End

Public Sub PDF_Document_Show()
   
   Dim output_text As String
   
   Document_HTML = ""
   VSplit_Document.Visible = False
   Vbox_Images.Visible = False
   Vbox_PDf.Visible = True
   With PDForm
      .TxtFind.text = ""                      'remove any text user previously searching for
      .hPdf.Orientation = PdfDocument.Normal  'could have previously been rotated
      .Load_PDF(modFiles.Get("document_archiving_directory", selecteddocument!source_file))
   End With
   
End

Public Sub cvwInbox_Click()
   
   If cvwInbox.count <> 0 And gvwInboxDocuments.rows.count = 0 Then
      cvwInbox_Select
   Endif
   
End

Public Sub cvwInbox_Select()
   '--------------------------------------------------------------------
   'The Inbox list of patients or destination staff has been selected
   'If a patient, then either create a new cConsult or if documents for
   'this patient have already been filed today, reuse the consult.pk
   'this way, if for example  progress notes, past history or INR stuff
   'is written from the inbox as a result of viewing the document the
   'progress notes for the inbox remain discrete from any clinical notes
   'written for the same patient on the same day
   '--------------------------------------------------------------------
   '  If cvwInbox.count =  0 And gvwInboxDocuments.rows.count <>0 Then
   
   cvwPatientsRequests.Clear()                               'the list of recent requests for a patient
   Try form_medications.cvwMedications.Clear()               'if form loaded, clear its medications
   cvwInbox.MoveCurrent()                                    'sets internal cursor to match whats visible
   Selected_Inbox = Inbox[cvwInbox.Item.Key]                 'create SelectedPatient collection
   Form_ActionDocument.EmbeddedForms_Reset()                 'if exists, set all cons to null
   If Not IsNull(Selected_Inbox!fk_patient) Then             'if the name in the inbox is that of a patient
      cvwPatientsRequests.tag = 0                            'I forget what this was for!
      currentconsult = New CConsult(Selected_Inbox, const.ConsultType_Added_From_Inbox)    
      Form_ActionDocument.Init_Cons(currentconsult)          
      Form_ActionDocument.Tabstrip1.index = cTab_Metadata     'user only sees metadata first
      Patient_Outstanding_Requests_Show()                     'show requests for this category of provider
      TabStrip1.Enabled = True                                'Tabstrip with documents on it on the (R) side
   Else                                                       'this is a non-patient documment
      Tabstrip1.text = "Document"
      currentconsult = Null
   End If
   Document_RefreshList                                        'refresh the documents list and highlight the first row on the liset
   
Catch
   Inbox_Reload 
   
End

Public Function Document_File(sFilingAction As String) As Boolean
   '----------------------------------------
   'Make sure no half completed staff tasks
   'Filing action can be:
   ' 'file', 
   ' 'routine appointment'
   ' 'urgent appointment'
   ' If patient un-matched, warn user
   ' If no fk_patient exists and patient not unmatched then it is assumed to be a staff document
   ' which is being marked off as no longer needed
   '---------------------------------------------------------------------------------------------
   
   Dim sMsg As String
   Dim sProgressNotes As String                                'the audit text to be put into the progress notes
   Dim bHasTask As Boolean
   
   If IsNull(SelectedDocument!fk_patient) And Not IsNull(SelectedDocument!fk_unmatched_patient) Then  
      Message.Title = "Un-Allocated Patient"
      sMsg = "EasyGP has been unable to match this document to a known patient.\n\n"
      "You should type the patients surname,name in the highlighted textbox on the left of this screen "
      "and match the patient to a known patient, ensuring the names and birthdates match.\n\n"
      "There will be times that there are spelling mistakes or incorrect birthdates in the hl7 message "
      "segments received on your server, so please use common sense when allocating a document where an "
      "apparent discrepency exists."
      Message.Warning(smsg, "Ok")
      Return
   Endif
   
   If Not IsNull(Form_ActionDocument.FTasks) Then             ' check if task filled in but not saved
      If Form_ActionDocument.FTasks.txtTaskDetails.text <> "" Or Form_ActionDocument.FTasks.txtStaffAllocated.text <> "" Then
         If Not Form_ActionDocument.FTasks.Save() Then        'Yes? try and save it
            Return
         End If
      End If
      If Form_ActionDocument.FTasks.cvwStaffTasks.count Then  'either way, if task exists need for audit trail
         bHasTask = True   
      Endif
   End If
   If Not IsNull(Form_HealthIssues) Then
      If Form_HealthIssues.Vbox_EditingArea.Padding Then
         If Form_HealthIssues.txtCondition.text <> "" Then    'no condition, probably has data
            If Not Form_HealthIssues.Save() Then
               tabStripInbox.index = cTab_HealthIssues
               Return
            Endif
         End If   
         Form_HealthIssues.Vbox_EditingArea.Padding = 0       
         '   Form_HealthIssues = Null
      Endif
   End If   
   If Not IsNull(Form_Recall) Then  
      If Form_Recall.Vbox_EditArea_outer.Padding Then         'check if there is an unsaved recall user forgot to save
         If Not form_Recall.Save() Then
            tabStripInbox.index = cTab_Recalls
            Return
         Endif
      Endif
   End If   
   If Not IsNull(Form_INRs) Then    
      If Form_INRs.Vbox_EditArea_Outer.Padding Then
         If Not Form_INRs.Save() Then
            tabStripInbox.index = cTab_INR_Management
            Return
         Endif
      Endif
   End If   
   tbFile.Enabled = False
   '----------------------------------------------
   'Is this a non patient document?
   'If so, then filing = "I've read this document"
   '----------------------------------------------
   If IsNull(Selected_Inbox!fk_patient) Then
      Form_ActionDocument.FMetaData.Document_SignOff(SelectedDocument)        'Record who signed off the document, when
      modArchiveDocumentsDBI.Save(["pk_document": SelectedDocument!pk_document, "concluded": True])
      modDBConnect.CommitTrans()
   Else
      '--------------------------
      'This is a patient document
      '--------------------------
      If Not Valid_Document() Then                 'some inbox-related validation
         tbFile.Enabled = True                     'not valid, re-enable the file button
         Return                                   
      End If
      '----------------------------------------
      'Document valid, begin the filing process
      '----------------------------------------
      modDBConnect.BeginTrans()                           'start transaction NOOP
      Unmatched_Patient_Reconcile()                       'reconcile any just-matched unkown patients
      Form_ActionDocument.FMetaData.Save()   'file document
      SelectedDocument!tag_user = Form_ActionDocument.FMetaData.txtUserObservationName.text 'need this to pass to audit to have it make more sense
      '---------------------------------------------------------------------------
      'filing was successful, create an audit trail, if a task added, mention that
      '---------------------------------------------------------------------------
      sProgressNotes = modArchiveDocumentsDBI.Audit_Trail_Make_Progress_notes(sFilingAction, SelectedDocument)
      If bHasTask Then
         sProgressNotes &= ". A Task has been allocated to " & modStrings.Capitalise_Words_In_String(Form_ActionDocument.FTasks.cvwStaffTasks[0][2])
         sProgressNotes = Replace(sProgressNotes, "with no action taken", "")
      Endif
      modAudit.MakeAudit(currentconsult, "viewed and filed document", "documents.documents", SelectedDocument!pk_document, const.cSection_Documents, sProgressNotes)
      '--------------------------------------------------------------------------
      'Finally add any auto tasks for 'file with routine' or 'urgent appointments 
      '--------------------------------------------------------------------------
      If sFilingAction <> "file" 
         If Not Auto_Task(sFilingAction) Then
            modDBConnect.RollBack()
            tbFile.Enabled = True
            Return False
         Endif
      End If   
      modDBConnect.CommitTrans()                          'success - commit transaction
   End If
   ' Update the clinical list, and if user changed the filing type, eg from letter to result, then update that list too
   If FClinicalToolbar.IsSamePatient(currentconsult!patient!fk_patient) Then         ' If same patient in FClinical
      Select Case Form_ActionDocument.FMetaData.Filed_As()                           ' How was it filed e.g Letter, Result
         Case Const.Document_Display_As_Letter                                       ' e.g If a Letter then
            FClinicalLists.Refresh_List_External(clinicalList_Correspondance)     ' update the corresondence in list
         Case Const.Document_Display_As_Result
            FClinicalLists.Refresh_List_External(clinicalList_Results)
         Case Const.Document_Display_As_Certificate
            
         Case Const.Document_Display_As_Image
            
         Case Const.Document_Display_As_GP_Management_Plan
            
      End Select
      If Form_ActionDocument.FMetaData.Filed_As() <> fk_lu_message_display_style_clerical Then  'user changed clerical filing type
         Select Case fk_lu_message_display_style_clerical
            Case Const.Document_Display_As_Letter 
               FClinicalLists.Refresh_List_External(clinicalList_Correspondance)
            Case Const.Document_Display_As_Result
               FClinicalLists.Refresh_List_External(clinicalList_Results)
            Case Const.Document_Display_As_Certificate
               
            Case Const.Document_Display_As_Image
               
            Case Const.Document_Display_As_GP_Management_Plan
         End Select
      Endif
   Endif
   Selected_Inbox!documents.Remove(gvwInboxDocuments.row)
   Document_RefreshList()                                'refresh the documents list or clears it if none left
   tbFile.Enabled = True
   Return True
Catch
   Log.ErrorMsg("FInbox.Document_File: " & Error.Text & " " & Error.Where)
   modDBConnect.RollBack()                          'roll back transaction
   tbFile.Enabled = True
   Message.info("An error occurred whilst trying to file the document (subroutine=Document_File).\n\nIf this persists please contact technical support")
   Return False
   
End

Public Sub Unmatched_Patient_Reconcile()
   
   Dim fk_patient As Variant
   
   If Not IsNull(Selected_Inbox!fk_unmatched_patient) Then
      fk_patient = Form_ActionDocument.FMetaData.get_fk_patient()
      modInboxDBI.Document_SetPatientFK(fk_patient, Selected_Inbox!fk_unmatched_patient)
      modInboxDBI.Unmatched_Patient_Mark_Resolved(Selected_Inbox!fk_unmatched_patient, fk_patient)
   End If
   
End

Public Function Unmatched_Patient() As Boolean
   
   Dim sString As String
   
   If Not IsNull(Selected_Inbox!fk_unmatched_patient) Then
      If Form_ActionDocument.FMetaData.get_fk_patient() Then Return 'if non zero has already been matched
      If IsNull(FMessage) Then
         FMessage = New FGenericHTMLMessage
      End If
      With FMessage
         .Caption = "Inbox Error"
         .lblHeading.text = "Result Cannot be Filed"
         '  .lblHeading.text &= "</P>"
         sString = Selected_Inbox!firstname & " "
         sString &= Selected_Inbox!surname
         .textlabel1.text = "<B>Patient : </B>" & sstring & "<BR>"
         .textlabel1.text &= "<B>Result : </B>" & gvwInboxDocuments[gvwInboxDocuments.row, 1].text & " (Lab Name)<BR>"
         .textlabel1.text &= "<B>Problem: </B> no match for the patient "
         .textlabel1.text &= "was found in the database.<BR><BR>"
         .textlabel1.text &= "Possible causes for this may be:<BR>"
         .textlabel1.text &= "<UL>"
         .textlabel1.text &= "<LI>The patient may not be in the contact database"
         .textlabel1.text &= "<LI>The patient may be in the contact database "
         .textlabel1.text &= "but the details may have been mis-spelt either "
         .textlabel1.text &= "in the contact database or by the sending provider.<BR>"
         .textlabel1.text &= "We have tried all sorts of things before suggesting "
         .textlabel1.text &= "this such as swapping firstname/lastname, initials etc during out attempt to make a match."
         
         .textlabel1.text &= "<LI>You may have been sent this result in error - if "
         .textlabel1.text &= "you suspect this discuss with the message provider."
         .textlabel1.text &= "<LI>EasyGP may have bugged out though this is unlikely - "
         .textlabel1.text &= "please enter a bug report"
         .textlabel1.text &= "</UL>"
         .textlabel1.text &= "<P>You can search the contacts database by typing the patients surname,firstname "
         .textlabel1.text &= "in the textbox labeled ** PATIENT ?? ** - currently highted in red, and select the correct name from the list.</P>"
         ' .textlabel1.text &= "<P>If you can't fix up the name and address problem in the contacts database then "
         ' .textlabel1.text &= "as an interim solution to clear your inbox of this record you can "
         ' .textlabel1.text &= "right mouse click on the patients name, and select the following option "
         ' .textlabel1.text &= "'Move to holding file', then ask your system-admin to fix the problem.</P>"
         
         .textlabel1.text &= "<P>If you are absolutely certain this result is irrelevant e.g this was a "
         .textlabel1.text &= "fictitious patient in a test file, then right mouse click on the patient's name "
         .textlabel1.text &= "and send all associated results to a black hole never to be seen again.</P>"
         .textlabel1.text &= "<p>Your actions will however be recorded for posterity (Or an audit).</P>"
         
         .btnCancel.Visible = False
         .pnlRight.Visible = True
         .ShowModal
      End With
      
      Return True
   Else
      Return False
   End If
   
End

Public Sub tbFile_Click()
   '----------------------------------------------------------------
   'User wants to file this document, if successful, attempts to
   'show the next document for the patient, if none left, attempts
   'to go to the next row of the inbox.
   'There are three buttons under the inbox:
   'File, File - Routine Appointment, File - Urgent Appointment
   'Note that the other way to call Document_File is if the user
   'hits the <enter> key at FDocumentMetdata.txtUserObservationName
   'which then calls Document_File itself. That textboxes event is
   'over-ridden on this form see txtuserObservationName_Click
   'see Init() for the observor which creates this event
   'Last.tag = the buttons tag =:
   'urgent appointment' or 'routine appointment' or 'file'
   '----------------------------------------------------------------
   
   If Not gvwInboxDocuments.Rows.count Then Return    'no documents, nothing to file
   If Not Document_File(Last.tag) Then Return         'document filing failed bail out
   Wait                                               'do not remove this  
   Document_Display_Next()                            'success > show next document
   
End

Public Function Auto_Task(sFilingAction As String) As Boolean 
   '------------------------------------------------------------
   'Auto-file tasks for urgent or non urgent appointment
   'if user clicked on those buttons to file
   'Each task gets a 'master entry' in clerical.tasks table
   'Then components linked To the task
   'sFilingAction = 'routine appointment' or 'urgent appointment
   'These were the tags of the buttons clicked
   '------------------------------------------------------------
   
   Dim stafftask As CRow
   Dim TaskComponent As CRow
   
   '--------------------------------------------------------
   ' CREATE TABLE clerical.tasks
   ' (
   '   pk serial NOT NULL,
   '   related_to text NOT NULL,
   '   fk_staff_filed_task integer,
   '   fk_staff_finalised_task integer,
   '   fk_row integer,
   '   date_finalised date,
   '   deleted boolean DEFAULT false,
   '   fk_staff_must_finalise integer,
   '   fk_role_can_finalise integer,
   '   CONSTRAINT tasks_pkey PRIMARY KEY (pk )
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '--------------------------------------------------------
   stafftask = New CRow 
   staffTask!fk_staff_filed_task = modDBConnect.currentUser!fk_staff            'user filing document now
   stafftask!fk_row = SelectedDocument!pk_document                              'the document key
   staffTask!related_to = Form_ActionDocument.FMetaData.txtUserObservationName.Text  'what it's about
   staffTask!fk_staff_must_finalise = modDBConnect.currentUser!fk_staff         'must be finalised by he who filed
   stafftask!fk_role_can_finalise = const.StaffRole_Doctor
   staffTask.Save("clerical.tasks", "fk_task")
   '----------------------------------------------------
   ' CREATE TABLE clerical.task_components
   ' (
   '   pk serial NOT NULL,
   '   fk_task integer NOT NULL,
   '   fk_consult integer,
   '   date_logged date,
   '   fk_staff_allocated integer ,
   '   fk_staff_completed integer,
   '   allocated_staff text,
   '   fk_urgency integer DEFAULT 1,
   '   details text,
   '   date_completed date,
   '   deleted boolean DEFAULT false,
   '   fk_staff_filed integer,
   '   fk_role integer,
   '   CONSTRAINT task_components_pkey PRIMARY KEY (pk )
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   '-----------------------------------------------------
   TaskComponent = New CRow   
   TaskComponent!fk_task = stafftask!fk_task 
   TaskComponent!fk_consult = currentconsult.GetPK()
   TaskComponent!date_logged = Now()
   TaskComponent!fk_staff_allocated = Null
   TaskComponent!fk_role = const.StaffRole_Secretary
   TaskComponent!fk_staff_filed = staffTask!fk_staff_filed_task
   TaskComponent!details = "Make Appointment"
   If sFilingAction = "urgent appointment" Then
      TaskComponent!fk_urgency = const.UrgencyLevelUrgent
      TaskComponent!details &= " - Urgent"
   End If
   If sFilingAction = "routine appointment" Then 
      TaskComponent!fk_urgency = const.UrgencyLevelRoutine
      TaskComponent!details &= " - Routine"
   End If   
   TaskComponent!must_verify_completed = False  
   TaskComponent.Save("clerical.task_components", "fk_component") 
   Return True  
   
Catch
   Return    
   
End

Public Sub auto_file()
   
   '---------------------------------------------------------------
   'User wants to file this document, if successful, attempts to
   'show the next document for the patient, if none left, attempts
   'to go to the next row of the inbox.
   '---------------------------------------------------------------
   'Return               'HORST COMMENT THIS OUT
   If Not gvwInboxDocuments.rows.count Then Return      'no documents, no filing
   '---------------------------------------------
   'First, make sure no half completed staff tasks
   '----------------------------------------------
   If Not IsNull(Form_ActionDocument.FTasks) Then
      If Form_ActionDocument.FTasks.txtTaskDetails.text <> "" Or Form_ActionDocument.FTasks.txtStaffAllocated.text <> "" Then
         If Not Form_ActionDocument.FTasks.Save() Then
            Return
         End If
      End If
   End If
   ' Try Form_ProgressNotes.Save()
   If Not Document_File() Then Return              'filing failed
   Wait
   Document_Display_Next()
   
End

Public Sub Document_Display_Next()
   '--------------------------
   ' tbFile_Click()
   ' has called Document_File() which does validation/filing
   ' then removes the document from the list and refreshes it (the gvwInboxDocuments
   ' So now, if there are no rows left, Try and move to the next available InBox Collection
   ' If this fails, do a reload of the entire inbox (could be more waiting
   ' otherwise if there are rows left
   '
   '--------------------------
   
   tabStripInbox.index = 0                             'main tab
   Vbox_ActionDocument.Enabled = False
   Form_ActionDocument.Tabstrip1.Index = cTab_Metadata  'sucess. switch tab back to metadata
   If gvwInboxDocuments.rows.count = 0 Then             'no documents left?
      cvwInbox.MoveCurrent()                            'try and show next inbox item, usually next patient
      cvwInbox.Remove(cvwInbox.Item.key)
      Try cvwInbox.MoveFirst()
      Try cvwInbox.Item.Selected = True
      Try cvwInbox_Click()
      If cvwInbox.Count = 0 Then
         txtFilterDocuments.Clear()               'could be more, but filtered
         txtFilterPatient.Clear()
         cvwPatientsRequests.Clear()
         Selected_Inbox = Null
         currentconsult = Null
         tbRefreshInbox_Click
         modUtilGUI.Blank_PDF_Display(PDForm)
      End If
      bAutoFileAll = False                        'HORST DO NOT TOUCH THIS LINE
      bAutoFilePatient = False                    'HORST DO NOT TOUCH THIS LINE
   Else
      gvwInboxDocuments.Rows[0].Selected = True  'trigger showing the document
      Vbox_ActionDocument.Enabled = True
      Try Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
   End If
   
End

Public Sub Document_Display_Next_old()
   '--------------------------
   ' tbFile_Click()
   ' has called Document_File() which does validation/filing
   ' then removes the document from the list and refreshes it (the gvwInboxDocuments
   ' So now, if there are no rows left, Try and move to the next available InBox Collection
   ' If this fails, do a reload of the entire inbox (could be more waiting
   ' otherwise if there are rows left
   '
   '--------------------------
   
   tabStripInbox.index = 0                             'main tab
   Vbox_ActionDocument.Enabled = False
   Form_ActionDocument.Tabstrip1.Index = cTab_Metadata  'sucess. switch tab back to metadata
   If gvwInboxDocuments.rows.count = 0 Then             'no documents left?
      cvwInbox.MoveCurrent()                            'try and show next inbox item, usually next patient
      cvwInbox.Remove(cvwInbox.Item.key)
      Try cvwInbox.MoveFirst()
      Try cvwInbox.Item.Selected = True
      Try cvwInbox_Click()
      Wait
      If Error Then
         txtFilterDocuments.Clear()               'could be more, but filtered
         txtFilterPatient.Clear()
         cvwPatientsRequests.Clear()
         tbRefreshInbox_Click
         'Inbox_Reload()
         ' If cvwInbox.Count = 0 Then
         '    Selected_Inbox = Null
         '    currentconsult = Null
         ' Endif
      End If
      bAutoFileAll = False                        'HORST DO NOT TOUCH THIS LINE
      bAutoFilePatient = False                    'HORST DO NOT TOUCH THIS LINE
   Else
      gvwInboxDocuments.Rows[0].Selected = True  'trigger showing the document
      Vbox_ActionDocument.Enabled = True
      Try Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
   End If
   
End

Public Sub synonyms_Reload()
   
   synonyms = const.Synonyms()
   
End

Public Function Fill_Inbox(Optional fk_sending_entity As Variant = Null, Optional patient_filter As String, Optional sort_dir As String = "ASC") As Collection
   
   Dim sql As String
   Dim C As Collection
   Dim Document As Collection
   Dim fk_last_patient As String
   Dim patient As Collection
   Dim surname_firstname As String[]
   Dim x As Integer
   Dim total_doc_count_unfiled_all_staff As Integer
   Dim Unfiled_Document_Count_For_Staff_Member As Integer
   Dim bSkiPDocument As Boolean
   
   With cvwInbox
      .Columns.count = 1
      .Clear()
   End With
   lblStaffMembersTotalDocuments.text = ""
   tlOutstandingAllStaff.text = ""
   'If patient_filter = "" Then
   '
   If Trim(txtFilterPatient.text) = "" Then    
      sql = "Select count(pk) as count  from documents.Documents Where "
      If chkDeletedDocuments.value Then
         sql &= "concluded = False And deleted = True "
         sort_dir = "DESC"
      Else
         sql &= "concluded = False And deleted = False "
      End If   
      total_doc_count_unfiled_all_staff = Str(modDBConnect.exec_query(sql)!count)
      
      sql = "Select * from documents.vwDocuments Where "
      If chkDeletedDocuments.value Then
         sql &= "concluded = False And deleted = True "
         sort_dir = "DESC"
      Else
         sql &= "concluded = False And deleted = False "
      End If   
      
      If Not IsNull(fk_sending_entity) Then
         sql &= "AND fk_sending_entity = " & fk_sending_entity & " "
      End If
      
      staff_member = staff_members[cmbStaffMembers.index]
      If IsNull(Staff_member!fk_staff) Then
         sql &= "And fk_unmatched_staff = " & Staff_member!fk_unmatched_staff
         With tlMissingProvider
            .foreground = color.Red
            .text = "<P>The recipient of this message was not found.</P> "
            "You will have to ask the system adminstrator to "
            "enter the correct details in the staff database before proceeding"
         End With
      Else
         sql &= " AND fk_staff_destination = " & staff_member!fk_staff
         Unfiled_Document_Count_For_Staff_Member = modInboxDBI.Unfiled_Document_Count_For_Staff_Member(staff_member!fk_staff)
         tlMissingProvider.text = ""
      End If
      If Trim(txtFilterDocuments.text) Then
         sql &= " AND tag ILIKE $$%" & txtFilterDocuments.text & "%$$"
      Endif
      If chkOnlyRecent.Value = True Then
         'FIXME make me a global option
         sql &= " AND date_created > '" & Format(DateAdd(Now, gb.month, 0 - Val(txtMonthsToView.text)), "dd/mm/yyyy") & "'::date"
      Endif
      If chkExcludeDeceasedPatients.value = True Then
         sql &= " AND patient_deceased is not TRUE "
      Endif
      Print sql
      If chkExcludeInactivePatients.value = True Then
         sql &= " AND patient_fk_lu_active_status <>" & const.PatientStatus_Inactive
      Endif
      sql &= " ORDER BY patient_surname, patient_firstname, unmatched_patient_surname, unmatched_patient_firstname, date_created " & sort_dir
      If txtLimit.text <> 0 Then
         sql &= " LIMIT " & Val(txtLimit.text)
      Else
         sql &= " LIMIT 2500" 
      End If   
      Print sql
      Documents = modDBConnect.exec_query_collection(sql)   'all the documents in the inbox
   End If
   If Not Documents.count Then
      tlOutstandingAllStaff.text = Str(total_doc_count_unfiled_all_staff - Unfiled_Document_Count_For_Staff_Member) & " unread documents for other staff"
      Return
   End If
   If total_doc_count_unfiled_all_staff - Documents.count <> 0 Then
      tlOutstandingAllStaff.Visible = True
      tlOutstandingAllStaff.text = Str$(total_doc_count_unfiled_all_staff - Unfiled_Document_Count_For_Staff_Member) & " unread documents for other staff are not shown in this list"
   Else
      tlOutstandingAllStaff.Visible = False
   End If
   lblStaffMembersTotalDocuments.text = "Total of "
   If IsNull(Staff_member!fk_staff) Then
      lblStaffMembersTotalDocuments.text &= "?? "
   Else
      lblStaffMembersTotalDocuments.text &= Str(Unfiled_Document_Count_For_Staff_Member) 
   End If
   lblStaffMembersTotalDocuments.text &= " unfiled documents."  
   If chkOnlyRecent.value = True Then
      lblStaffMembersTotalDocuments.text &= Str(documents.count) & " received in the last " & txtMonthsToView.text & " months."
   Endif
   C = New Collection     'a misnomer content = who message intended for, or About Who
   For Each Document In Documents
      If IsNull(Document!fk_patient) Then
         If fk_last_patient <> Document!fk_unmatched_patient Then
            fk_last_patient = Document!fk_unmatched_patient
            patient = New Collection
            patient!documents = New Collection
            patient!fk_unmatched_patient = Document!fk_unmatched_patient
            patient!fk_person = Document!patient_fk_person
            patient!firstname = Document!unmatched_patient_firstname
            patient!surname = Document!unmatched_patient_surname
            patient!birthdate = Document!unmatched_patient_birthdate
            patient!sex = Document!unmatched_patient_sex
            patient!title = Document!unmatched_patient_title
            patient!wholename = patient!title & " " & patient!firstname & " " & patient!surname
            patient!street1 = Document!unmatched_patient_street
            patient!town = Document!unmatched_patient_town
            patient!postcode = Document!unmatched_patient_postcode
            x = cvwInbox.Count
            C.Add(patient, x)
            cvwInbox.Add(x, 0)
            cvwInbox[x][0] = document!unmatched_patient_surname & ", " & document!unmatched_patient_firstname
            If cvwInbox[x][0] = ", " Then
               cvwInbox[x][0] = "Non patient document"
            End If
         End If
         bSkiPDocument = False   
      Else
         If fk_last_patient <> Document!fk_patient Then
            fk_last_patient = Document!fk_patient
            If Trim(txtFilterPatient.text) <> "" Then                                'user filtering on patient
               Print Lower(Trim(txtFilterPatient.text))
               Print Lower(Left(Document!patient_surname, Len(Trim(txtFilterPatient.text))))
               If Lower(Left(Document!patient_surname, Len(Trim(txtFilterPatient.text)))) = Lower(Trim(txtFilterPatient.text)) Then  'match against part of surname
                  bSkiPDocument = False 
               Else                                                                  'no partial match
                  bSkiPDocument = True                                               'skip this document
               Endif
            Else                                                                     'not doing any filtering
               bSkiPDocument = False  
            End If 
            If Not bSkiPDocument Then
               patient = New Collection
               patient!documents = New Collection
               patient!fk_person = Document!patient_fk_person
               patient!fk_patient = Document!fk_patient
               patient!firstname = Document!patient_firstname
               patient!surname = Document!patient_surname
               patient!birthdate = Document!patient_birthdate
               patient!sex = Document!patient_sex
               patient!title = Document!patient_title
               patient!wholename = patient!title & " " & patient!firstname & " " & patient!surname
               patient!age_display = Str(Document!patient_age)
               patient!age_numeric = Document!patient_age
               patient!street1 = Document!patient_street1
               patient!street2 = Document!patient_street2
               patient!town = Document!patient_town
               patient!postcode = Document!patient_postcode
               x = cvwInbox.Count
               C.Add(patient, x)
               cvwInbox.Add(x, 0)
               cvwInbox[x][0] = document!patient_surname & ", " & document!patient_firstname
               If cvwInbox[x][0] = ", " Then
                  cvwInbox[x][0] = "Non patient document"
               End If
            End If   
         End If
      End If
      If C.count And bSkiPDocument = False Then 
         C[x]!documents.Add(Document, C[x]!documents.Count)
      End If   
   Next
   Dec Application.Busy
   Return C
   
End

Public Function Fill_Inbox_orig(Optional fk_sending_entity As Variant = Null, Optional patient_filter As String, Optional sort_dir As String = "ASC") As Collection
   
   Dim sql As String
   Dim C As Collection
   Dim Document As Collection
   Dim fk_last_patient As String
   Dim patient As Collection
   Dim surname_firstname As String[]
   Dim x As Integer
   Dim total_doc_count_unfiled_all_staff As Integer
   Dim Unfiled_Document_Count_For_Staff_Member As Integer
   
   With cvwInbox
      .Columns.count = 1
      .Clear()
   End With
   lblStaffMembersTotalDocuments.text = ""
   tlOutstandingAllStaff.text = ""
   sql = "Select count(pk) as count  from documents.Documents Where "
   If chkDeletedDocuments.value Then
      sql &= "concluded = False And deleted = True "
      sort_dir = "DESC"
   Else
      sql &= "concluded = False And deleted = False "
   End If   
   total_doc_count_unfiled_all_staff = Str(modDBConnect.exec_query(sql)!count)
   
   sql = "Select * from documents.vwDocuments Where "
   If chkDeletedDocuments.value Then
      sql &= "concluded = False And deleted = True "
      sort_dir = "DESC"
   Else
      sql &= "concluded = False And deleted = False "
   End If   
   
   If Not IsNull(fk_sending_entity) Then
      sql &= "AND fk_sending_entity = " & fk_sending_entity & " "
   End If
   
   staff_member = staff_members[cmbStaffMembers.index]
   If IsNull(Staff_member!fk_staff) Then
      sql &= "And fk_unmatched_staff = " & Staff_member!fk_unmatched_staff
      With tlMissingProvider
         .foreground = color.Red
         .text = "<P>The recipient of this message was not found.</P> "
         "You will have to ask the system adminstrator to "
         "enter the correct details in the staff database before proceeding"
      End With
   Else
      sql &= " AND fk_staff_destination = " & staff_member!fk_staff
      Unfiled_Document_Count_For_Staff_Member = modInboxDBI.Unfiled_Document_Count_For_Staff_Member(staff_member!fk_staff)
      tlMissingProvider.text = ""
   End If
   If Trim(txtFilterDocuments.text) Then
      sql &= " AND tag ILIKE $$%" & txtFilterDocuments.text & "%$$"
   Endif
   
   If patient_filter <> "" Then
      surname_firstname = Split(patient_filter, "'")
      Try sql &= " AND patient_firstname ILIKE $$" & surname_firstname[1] & "%$$"
      If Error Then
         sql &= " AND patient_surname ILIKE $$" & surname_firstname[0] & "%$$"
      Else
         sql &= " AND patient_surname ILIKE $$" & surname_firstname[0] & "%$$"
      Endif
      
   Endif
   If chkOnlyRecent.Value = True Then
      'FIXME make me a global option
      ' sql &= " AND date_created > '" & Format(DateAdd(Now, gb.month, -36), "dd/mm/yyyy") & "'::date"
      sql &= " AND date_created > '" & Format(DateAdd(Now, gb.month, 0 - Val(txtMonthsToView.text)), "dd/mm/yyyy") & "'::date"
   Endif
   sql &= " ORDER BY patient_surname, patient_firstname, unmatched_patient_surname, unmatched_patient_firstname, date_created " & sort_dir
   If txtLimit.text <> 0 Then
      sql &= " LIMIT " & Val(txtLimit.text)
   Else
      sql &= " LIMIT 2500" 
   End If   
   Documents = modDBConnect.exec_query_collection(sql)   'all the documents in the inbox
   If Not Documents.count Then
      tlOutstandingAllStaff.text = Str(total_doc_count_unfiled_all_staff - Unfiled_Document_Count_For_Staff_Member) & " unread documents for other staff"
      Return
   End If
   If total_doc_count_unfiled_all_staff - Documents.count <> 0 Then
      tlOutstandingAllStaff.Visible = True
      tlOutstandingAllStaff.text = Str$(total_doc_count_unfiled_all_staff - Unfiled_Document_Count_For_Staff_Member) & " unread documents for other staff are not shown in this list"
   Else
      tlOutstandingAllStaff.Visible = False
   End If
   lblStaffMembersTotalDocuments.text = "Total of "
   If IsNull(Staff_member!fk_staff) Then
      lblStaffMembersTotalDocuments.text &= "?? "
   Else
      lblStaffMembersTotalDocuments.text &= Str(Unfiled_Document_Count_For_Staff_Member) 
   End If
   lblStaffMembersTotalDocuments.text &= " unfiled documents."  
   If chkOnlyRecent.value = True Then
      lblStaffMembersTotalDocuments.text &= Str(documents.count) & " received in the last " & txtMonthsToView.text & " months."
   Endif
   C = New Collection     'a misnomer content = who message intended for, or About Who
   For Each Document In Documents
      If IsNull(Document!fk_patient) Then
         If fk_last_patient <> Document!fk_unmatched_patient Then
            fk_last_patient = Document!fk_unmatched_patient
            patient = New Collection
            patient!documents = New Collection
            patient!fk_unmatched_patient = Document!fk_unmatched_patient
            patient!fk_person = Document!patient_fk_person
            patient!firstname = Document!unmatched_patient_firstname
            patient!surname = Document!unmatched_patient_surname
            patient!birthdate = Document!unmatched_patient_birthdate
            patient!sex = Document!unmatched_patient_sex
            patient!title = Document!unmatched_patient_title
            patient!wholename = patient!title & " " & patient!firstname & " " & patient!surname
            patient!street1 = Document!unmatched_patient_street
            patient!town = Document!unmatched_patient_town
            patient!postcode = Document!unmatched_patient_postcode
            x = cvwInbox.Count
            C.Add(patient, x)
            cvwInbox.Add(x, 0)
            cvwInbox[x][0] = document!unmatched_patient_surname & ", " & document!unmatched_patient_firstname
            If cvwInbox[x][0] = ", " Then
               cvwInbox[x][0] = "Non patient document"
            End If
         End If
      Else
         If fk_last_patient <> Document!fk_patient Then
            fk_last_patient = Document!fk_patient
            patient = New Collection
            patient!documents = New Collection
            patient!fk_person = Document!patient_fk_person
            patient!fk_patient = Document!fk_patient
            patient!firstname = Document!patient_firstname
            patient!surname = Document!patient_surname
            patient!birthdate = Document!patient_birthdate
            patient!sex = Document!patient_sex
            patient!title = Document!patient_title
            patient!wholename = patient!title & " " & patient!firstname & " " & patient!surname
            patient!age_display = Str(Document!patient_age)
            patient!age_numeric = Document!patient_age
            patient!street1 = Document!patient_street1
            patient!street2 = Document!patient_street2
            patient!town = Document!patient_town
            patient!postcode = Document!patient_postcode
            x = cvwInbox.Count
            C.Add(patient, x)
            cvwInbox.Add(x, 0)
            cvwInbox[x][0] = document!patient_surname & ", " & document!patient_firstname
            If cvwInbox[x][0] = ", " Then
               cvwInbox[x][0] = "Non patient document"
            End If
         End If
      End If
      C[x]!documents.Add(Document, C[x]!documents.Count)
   Next
   Dec Application.Busy
   Return C
   
End

Public Sub HTML_Document_Show(display_style As Integer, Doc As Collection, Document_observations As Collection)
   '-----------------------------------------------------------------------------------------------------------
   'Shows a html version of a hl7 document according to the sending entities properties
   'See Admin.HL7 Management.HL7 Sending Entities
   'reason bPITYesNo and bFTReportYesNo is because user can over-ride the imported settings for PIT/FT Report
   'This is because some vendors are no consistant in including/not including PIT and if you set up their
   'HL7 defaults to exclude on/other/both, sometimes you get nothing in the message
   '-----------------------------------------------------------------------------------------------------------
   
   Dim bPITYesNo As Boolean = Doc!exclude_pit
   Dim bFTReportYesNo As Boolean = Doc!exclude_ft_report
   
   Vbox_PDf.Visible = False
   Vbox_Images.Visible = False
   VSplit_Document.Visible = True
   If bExcludePIT = True Then bPITYesNo = True   'bExcludePIT set by user clicking on the checkbox
   If bExcludeFTReport = True Then bFTReportYesNo = True
   
   '  Document_HTML = modHL7Process.Construct_HTML(Selected_Inbox, Doc, Document_observations, Doc!exclude_pit, Doc!exclude_ft_report, display_style, fgc_errors, bgc_errors)
   Document_HTML = modHL7Process.Construct_HTML(Selected_Inbox, Doc, Document_observations, bPITYesNo, bFTReportYesNo, display_style, fgc_errors, bgc_errors)
   Document_HTML = Replace(Document_HTML, "%filingas%", "")
   Form_ActionDocument.FMetaData.Document_HTML_Set(Document_HTML)
   lblFilingAs.text = "Filing as: " & Form_ActionDocument.FMetaData.txtUserObservationName.text
   FPreview_HtmlDocument.WebView1.html = Document_HTML
   
End

Public Sub rbDisplayFormat_Click()
   
   If Bexit = True Or IsNull(SelectedDocument) Then Return
   
   fk_lu_message_display_style = Last.tag
   SelectedDocument!fk_lu_message_display_style = Last.tag
   Try HTML_Document_Show(Last.tag, SelectedDocument, observations)
   '
   
End

Public Function SendingEntity_Recognised() As Boolean
   
   If Not IsNull(Selecteddocument!fk_sender_branch) Then
      If Not IsNull(Selecteddocument!fk_sender_branch) Then
         Return True
      End If
   End If
   If Not IsNull(Selecteddocument!fk_employee_branch) Then
      If Not IsNull(Selecteddocument!fk_employee_branch) Then
         Return True
      End If
   End If
   
   If Not IsNull(Selecteddocument!fk_sender_person) Then
      If Not IsNull(Selecteddocument!fk_sender_person) Then
         Return True
      Endif
   Endif
   Return False
   
End

Static Public Sub ReAllocate_Staff_Member(fk_staff_destination As Variant)
   '------------------------------------------------------
   'This is only called from the FDocumentMetadata when
   'a staff member has been re-allocated, so must re-load
   'the current users inbox after updating the document
   '------------------------------------------------------
   
   form_inbox.Staff_Member_ReAllocate(fk_staff_destination)
   
End

Public Sub Staff_Member_ReAllocate(fk_staff_destination As Variant)
   
   Dim sMsg As String
   
   Message.Title = "Re-allocation of document"
   sMsg = "You have selected to re-allocate the recipient  of this document\n\n"
   "Are you sure?"
   If Message.Warning(sMsg, "Yes", "No") = 2 Then Return
   modDBConnect.BeginTrans()
   modArchiveDocumentsDBI.Re_Allocate_Recipient(SelectedDocument!pk_document, fk_staff_destination)
   modDBConnect.CommitTrans()
   
   Inbox_Reload()
   
End

Static Public Sub ReAllocate_Sender()
   
   form_inbox.Sender_ReAllocate()
   
End

Static Public Sub Disable_Filing()
   
   form_inbox.Allow_Filing(False)
   
End

Static Public Sub Reload_Patient(bReallocating As Boolean)
   
   form_inbox.Unmatched_Patient_Resolve(bReallocating)
   
End

Static Public Sub Document_Filed_As_Update(name As String)
   '--------------------------------------------------------
   'Do not remove this routine it is called from other forms
   'eg FMetadata, when user clicks the option button to
   'change from say a result to a letter
   '--------------------------------------------------------
   
   form_inbox.lblFilingAs.text = "Filing as: " & name
   
End

Public Sub Allow_Filing(Flag As Boolean)
   '------------------------------------------------------------------------------------------
   'Called from eg PDForm if it couldn't find a file (eg documents partition/path not mounted)
   'or from this form if file can be displayed
   '------------------------------------------------------------------------------------------
   
   tbFile.Enabled = Flag
   Form_ActionDocument.Enabled = Flag
   
End

Public Sub Filed_As_Update(name As String)
   '---------------------------------------------------------------
   'Do not remove this routine it is used in static routine above
   '-------------------------------------------------------------
   
   lblFilingAs.text = name
   
End

Public Sub Unmatched_Patient_Resolve(bReallocating As Boolean)
   
   Dim fk_patient As Variant
   Dim sMsg As String
   Dim sName As String
   Dim x As Integer
   
   fk_patient = Form_ActionDocument.FMetaData.get_fk_patient()
   If bReallocating = False Then
      sName = SelectedDocument!unmatched_patient_title & " "
      sName &= SelectedDocument!unmatched_patient_firstname & " "
      sName &= SelectedDocument!unmatched_patient_surname & " "
      sName &= SelectedDocument!unmatched_patient_sex & " "
      If Not IsNull(SelectedDocument!unmatched_patient_birthdate) Then
         sName &= Format(SelectedDocument!unmatched_patient_birthdate, "dd/mm/yyyy") & " "
      End If
      sMsg &= sName & "\n\nhas been matched to the following existing patient:\n\n"
   Else
      
      If Not IsNull(SelectedDocument!patient_fk_person) Then
         sName = SelectedDocument!patient_title & " "
         sName &= SelectedDocument!patient_firstname & " "
         sName &= SelectedDocument!patient_surname & " "
         sName &= SelectedDocument!patient_sex & " "
         sName &= Format(SelectedDocument!patient_birthdate, "dd/mm/yyyy") & " "
         sMsg &= sName & "\n\nwill now be allocated to the following patient:\n\n"
      Else
         sMsg = "No previous patient was allocated.\n\nThis document will now be allocated to the following patient:\n\n"
      End If
      
   End If
   sname = Form_ActionDocument.FMetaData.txtPatient.text & " "
   sname &= Form_ActionDocument.FMetaData.lblBirthdate.text
   
   If mnuDocuments_ReAllocateMultiple.Enabled = True Then
      
      sMsg = "Multiple documents, currently allocated to\n\n" & sMsg
      sMsg &= "(Note: Be very careful - you have selected multiple documents to re-allocate!)\n\n"
   Else
      sMsg = "A single document currently allocated to\n\n" & sMsg
   Endif
   
   sMsg &= sName & "\n\nPlease confirm."
   Message.Title = "Confirm Patient Identity"
   If Message.warning(smsg, "Yes", "No") = 1 Then
      Selected_Inbox!fk_patient = fk_patient
      If bReallocating = False Then
         modInboxDBI.Document_SetPatientFK(fk_patient, SelectedDocument!fk_unmatched_patient)
         modInboxDBI.Unmatched_Patient_Mark_Resolved(SelectedDocument!fk_unmatched_patient, fk_patient)
      Else
         If mnuDocuments_ReAllocateMultiple.Enabled = True Then
            gvwInboxDocuments.row = 0                                  'move  to start
            For x = 0 To gvwInboxDocuments.count                       'check every item in the list
               If gvwInboxDocuments.Rows[x].Selected Then           'if it has been selected
                  modInboxDBI.Document_ReAllocate_To_Another_Patient(Selected_Inbox[gvwInboxDocuments.row]!pk_document, fk_patient) 'FIXME check this works with new grid
               Endif
            Next
         Else
            modInboxDBI.Document_ReAllocate_To_Another_Patient(SelectedDocument!pk_document, fk_patient)
         End If
      End If
      modDBConnect.CommitTrans()
   End If
   Inbox_Reload()
   
End

Public Sub tbRefreshInbox_Click()
   'Refreshes the inbox
   'also sets the patient filter to ""
   
   Dim fk_sending_entity As Variant
   
   Inc Application.Busy
   
   txtFilterPatient.text = ""
   With modHL7FileImport
      .Set_Notification_Panel(pnlDownloading)
      .Auto_Process()               'fixme remove me or at least make sure running on server
   End With
   cvwInbox.Clear()                               'clear everything from the inbox list of persons
   gvwInboxDocuments.Clear()
   Form_ActionDocument.FMetaData.EditArea_Clear() 'clear the document metadata
   FPreview_HtmlDocument.WebView1.html = ""       'clear the html in the webview
   If cmbSenders.index <> -1 Then                 'if user wants to filter on sender, set that
      fk_sending_entity = Sending_Entities[cmbSenders.Index]!pk_sending_entities
   Else
      fk_sending_entity = Null
   Endif
   Inbox = Fill_Inbox(fk_sending_entity, Trim(txtFilterPatient.text))   'fill all documents, limit FIXME UNHARD CODE ME
   If Not IsNull(Inbox) Then                       'Some items where found
      cvwInbox.MoveFirst()                         'move to first in the columnview
      If Not IsNull(cvwInbox.Item) Then
         cvwInbox.Item.Selected = True             'trigger the selected event
      Endif
   Else
      cmbSenders.index = -1                   'if this has been switched to a sender, reset to none
   Endif
   Dec Application.Busy
   pnlDownloading.visible = False 
   progressbar1.Value = 0.0
Catch
   pnlDownloading.visible = False 
   progressbar1.Value = 0.0
   
End

Public Sub chkResultFormatting_Click()
   ' legacy stuff - I don 't think used - these used to be visible
   
   If IsNull(SelectedDocument) Then Return
   Select Case Last.tag
      Case "exclude ft report"
         bExcludeFTReport = Last.value
      Case "exclude pit"
         bExcludePIT = Last.value
   End Select
   Try HTML_Document_Show(SelectedDocument!fk_lu_message_display_style, SelectedDocument, observations) 'display style = default of the vendor
   
End

Public Sub mnuWebView_Click()
   '----------------------------------------------------------
   'User has clicked on the popup graphing menu over web-view
   'over-ride that forms event, if no tag not a measurement
   'otherwise, attempt to graph it
   '----------------------------------------------------------
   
   Stop Event
   If IsNull(Last.tag) Then Return
   If Form_Graph.graph(currentconsult, Observations[Last.tag]!loinc, Observations[Last.tag]!identifier) Then
      tlMissingProvider.Visible = False
      Form_Graph.Visible = True
   End If
Catch
   Return
   
End

Public Sub WebView_Menu()
   
   Dim mnu As Menu
   Dim Observation As Collection
   
   Stop Event
   If Not currentconsult Or IsNull(Observations) Then Return
   
   FPreview_HtmlDocument.mnuWebView.Children.Clear()
   '--------------------------------------------
   'First, add some menu options for auto-recall
   '--------------------------------------------
   If InStr(Lower(SelectedDocument!tag), "pap smear") Then
      mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
      mnu.name = "mnuAutoREcall"
      mnu.caption = "Auto Recall"
      mnu.tag = "auto recall"
      mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
      mnu.name = "separator_2"
      mnu.caption = ""
   Endif
   mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
   mnu.name = "heading"
   mnu.caption = "Graph Cumulative"
   mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
   mnu.name = "separator_1"
   mnu.caption = "" '
   If Observations.count = 0 Then Return
   For Each Observation In Observations
      mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
      If Observation!value_type = "NM"                'graphable observation
         mnu.name = Observation!identifier
         mnu.caption = Observation!identifier
         mnu.tag = Observation!pk
         mnu.Checked = False
      End If
   Next
   FPreview_HtmlDocument.mnuWebView.Popup()
   
End

Public Sub Patient_Medications_Show()  'must be public otherwise FPrescriptions can't access this
   
   form_medications.Medications_Refresh()
   
End

Public Sub Patient_Outstanding_Requests_Show(Optional bReloadFromFClinical As Boolean = False)
   '------------------------------------------------------------------------------
   'Show the last 10 requests ordered, just to jog users memory what they ordered
   'Show requests ordered where date_finalised is null
   'as often what comes back is a different name, helps them put in the correct
   'user-tag to match what they ordered
   '------------------------------------------------------------------------------  
   
   Outstanding_forms = New Collection
   If cvwPatientsRequests.tag = 0 Or bReloadFromFClinical = True Then  'no patient
      Outstanding_forms = modEditAreaHelpers.Patient_Requests_Show(currentconsult, cvwPatientsRequests, 10,,,,,,, True)
      Outstanding_forms = modUtil.Copy_Collection_Keyed_Sequentially(Outstanding_forms)
      cvwPatientsRequests.tag = Selected_Inbox!fk_patient
   End If
   
End

Public Sub cvwPatientsRequests_Click()
   
   Dim bits As String[]
   
   bits = Split(Last.item.key, "-")
   If Split(Last.item.key, "-").count = 2
      If Not (InStr(Lower(Form_ActionDocument.FMetaData.txtUserObservationName.text), Lower(Last[Last.item.key][0]))) Then
         Form_ActionDocument.FMetaData.txtUserObservationName.text &= Last[Last.item.key][0] & ";"
         RequestOrdered = currentconsult!requests_ordered[Last.item.key]
      End If
   End If
   
End

Public Sub chkUnmatchedDocuments_Click()
   
   bIncludeUnmatcheddocuments = Last.value
   Inbox_Reload()
   
End

Public Sub mnuDocumentsUnDelete_Click()
   '----------------------------------------------------------
   'User has decided to undelete a previously deleted document
   '---------------------------------------------------------- 
   
   If Message.Question("Confirm undelete of current document.", "Yes", "No") = 2 Then Return
   If modArchiveDocumentsDBI.UnDelete(currentconsult, selecteddocument, const.cSection_Documents) Then
      modDBConnect.CommitTrans() 
   End If   
   Inbox_Reload()
Catch
   Return  
   
End

Public Sub mnuDocuments_Click()
   
   Dim x As Integer
   
   Select Case Last.tag
      Case "move to my library", "copy to my library", "copy to patient handouts", "move to patient handouts"
         FInboxTransferToLIbrary.Init(SelectedDocument, currentconsult, Last.tag)
         FInboxTransferToLIbrary.ShowModal()
      Case "mark deleted"                            'deletes a document and enforces an audit trail with reason
         Message.title = "Delete Inbox Document"    'as is first item on the menu, easy to slip off the mouse, so double check
         If Message.Question("Are you sure you want to delete this document?", "Yes", "No") = 2 Then Return
         Document_Delete(Last.tag)
         Inbox_Reload()
      Case "delete - duplicate document", "delete - preliminary result" 
         Document_Delete(Last.tag)
         Inbox_Reload()
      Case "move to reports due" 'tags this document as a report due effectively removing it from the inbox.
         
      Case "delete selected"
         modUtilGUI.NotImplemented("Multiple Document Deletion")
      Case "fonts"
         modUtilGUI.Columnview_SetFont(gvwInboxDocuments, "Inbox")
      Case "display as result"
         For x = 0 To gvwInboxDocuments.rows.count
            gvwInboxDocuments.row = x
            If gvwInboxDocuments.Rows[x].Selected = True Then
               If modArchiveDocumentsDBI.Change_Display_Mode(currentconsult, SelectedDocument, const.Document_Display_As_Result, const.ConsultType_ReviewOfCorrespondance) Then 
                  modDBConnect.CommitTrans()
               Endif
            End If
         Next
         Inbox_Reload()
      Case "display as letter"
         If modArchiveDocumentsDBI.Change_Display_Mode(currentconsult, selecteddocument, const.Document_Display_As_Letter, const.ConsultType_ReviewOfCorrespondance) Then
            Inbox_Reload()
         Endif
      Case "fix date"
         Form_ActionDocument.FMetaData.txtDocumentDate.SetFocus()
      Case "refile"
         Document_SendBack_For_ReFiling()
   End Select
   'Catch
   ' Return 
   
End

Public Sub Document_Delete(audit_action As String)
   '---------------------------------------------------------------
   'Delete currrently selected document, laying down an audit trail
   'Will appear in clinical notes as consult type audit
   '---------------------------------------------------------------
   
   If modArchiveDocumentsDBI.Delete(currentconsult, SelectedDocument, const.ConsultType_ReviewOfCorrespondance, audit_action) Then 
      modDBConnect.CommitTrans()
   Else
      modDBConnect.RollBack
   End If
   
End

Public Sub Document_RefreshList()
   '---------------------------------------------------------------------------------------------
   'Refreshes the list of documents associate with the current Inbox selection (usually a patient
   'The list shows date of creation and description eg FBC, or Letter from Mr Spec AList
   'Selected_Inbox!documents are keyed 0>n by default when all the Inbox collection was loaded
   'However as the gridview control doesnot have an 'index' like say a columnview
   'and this routine is used every time a document is filed, then we must re-order the collecition
   'on each refill
   '---------------------------------------------------------------------------------------------
   
   Dim document As Collection
   Dim x As Integer
   
   With gvwInboxDocuments                                            'Clear the grid which will contain the documents
      .Clear()
      .Rows.count = 0
   End With
   Selected_Inbox!documents = modutil.Copy_Collection_Keyed_Sequentially(Selected_Inbox!documents) 'all documents for this patient
   For Each document In Selected_Inbox!documents                                                   'by default keyed 0>n see Inbox_Fill
      Inc gvwInboxDocuments.Rows.Count                                                             'Add details to the documents list
      gvwInboxDocuments[x, 0].text = modUtil.Format_Date(document!date_created) & " "
      gvwInboxDocuments[x, 1].text = document!tag
      Inc x
   Next
   If gvwInboxDocuments.rows.count Then                                        'If we have documents
      lblMeasure.font = gvwInboxDocuments.Font
      modUtilGUI.Gridview_Columns_Set_Size(gvwInboxDocuments, lblMeasure)      'resize the columns
      gvwINboxDocuments.Row = 0                                                'start display on top row  
      gvwInboxDocuments.rows[0].Selected = True                                 'set the marquee
   End If
   
End

Public Sub Document_SendBack_For_ReFiling()
   '------------------------------------------------------------------------------------
   'User has decided there is something wrong with document allocation they cannot fix
   'eg, wrongly joined pages etc, not just simple things like wrongly allocated patients
   'so they send it back to clerical for re-filing. Only for scanned documents
   '------------------------------------------------------------------------------------
   
   If modArchiveDocumentsDBI.Document_SendBack_For_ReFiling(currentconsult, SelectedDocument) Then
      Inbox_Reload()
   Endif
   
End

Public Sub Document_SignOff()
   '------------------------------------------------------------
   'User has signed off the document, ie accepted responsibility
   '------------------------------------------------------------
   
   Dim signed_off As New Collection
   
   signed_off!fk_staff = modDBConnect.currentUser!fk_staff
   signed_off!fk_document = SelectedDocument!pk_document
   signed_off!date = Now()
   signed_off!pk = modInboxDBI.Document_SignOff(signed_off)
   
End

Public Sub mnuNonPatientDocuments_Click()
   
   Dim x As Integer
   
   Select Case Last.tag
      Case "delete non patient document"            'deletes a non-patient document
         Message.Title = "Delete a non-patient document"
         If Message.Question("Are you sure you want to delete this document?", "Yes", "No") = 2 Then Return
         modDBConnect.update("documents.documents", Null, ["pk": SelectedDocument!pk_document, "deleted": True])
         modDBConnect.CommitTrans()
         Inbox_Reload()
         
      Case "move to my library", "copy to my library", "copy to patient handouts", "move to patient handouts"
         FInboxTransferToLIbrary.Init(SelectedDocument, currentconsult, Last.tag)
         FInboxTransferToLIbrary.ShowModal()
         Inbox_Reload()
      Case "delete - sent in error"
         If Message.Warning("Please confirm that the patient to whom these documents are allocated, is not a patient of this practice", "Confirm - not our patient", "Cancel") = 2 Then Return
         For x = 1 To gvwInboxDocuments.count
            If gvwInboxDocuments.Rows[x].Selected = True Then
               If modArchiveDocumentsDBI.Delete(currentconsult, Selected_Inbox!documents[gvwInboxDocuments.row],, const.ConsultType_ReviewOfCorrespondance) Then
                  modDBConnect.CommitTrans()
               Else
                  modDBConnect.RollBack
               End If
            Endif
         Next
         Inbox_Reload()
   End Select
Catch
   Return 
   
End

Public Sub cmbStaffMembers_Click()
   
   If Bexit Then Return
   Wait              'all screen to refresh otherwise get a gray patch where the combo was
   Inbox_Reload()
   
End

Public Sub cmbSenders_Click()
   
   Last.pos = 0
   gvwInboxDocuments.Clear()         'WAIT or visually a 'grey hole' left after
   Wait                              'click activated and combo drop down removed
   Try tbRefreshInbox_Click()
   
End

Public Sub tbFile_KeyPress()
   
   If key.code = key.Return Then
      tbFile_Click()
   Endif
   
End

Public Sub txtFilterDocuments_Activate()
   
   Try tbRefreshInbox_Click()
   
End

Public Sub tbClearFilter_Click()
   
   txtFilterDocuments.Clear()
   Try tbRefreshInbox_Click
   
End

Public Function Valid_Document() As Boolean
   
   Dim sMsg As String
   Dim diagnosis_guess As String
   Dim button1_text As String
   Dim button2_text As String
   
   If Unmatched_Patient() Then Return
   
   Select Case Form_ActionDocument.FMetaData.iDisplay_As
      Case const.Document_Display_As_Result
         
         smsg = "Observation name:" & gvwInboxDocuments[gvwInboxDocuments.row, 1].text & "\n"
         smsg &= "User equivalent :" & Trim(Form_ActionDocument.FMetaData.txtUserObservationName.text) & "\n\n"
         "Often the name used by a company, i.e the name which it  delivers back, is not 'user-friendly' and dosn't correspond to the message content, nor what you ordered in the first place.\n\n"
         "We have attempted to match what you ordered, and outstanding requests are listed underneath the text of this message.\n\n"
         "To make it easier to view your messages later on, you should type an equivalent user name "
         "in the textbox labelled 'User name', or alternatively click on one or more names from what you ordered, to make the match.\n\n"
         "For example, a pathology result returned as 'Biochemistry', may have been ordered as "
         "'UEC;LFTs', which is pretty obvious if you examine the text of the message.\n\n"
         "If you cannot match from your ordering, then if you type in the user name textbox, a popup list will appear, you can choose one or more "
         "entries from the list sequentially, though you can use free text.\n\n"
         "Note, by convention, request names are separated by  ';' delimiter character.\n\n"
         "If the message is a letter from a specialist, you should type some sort of summary -"
         " e.g Operation report:cholecystectomy."
         
         If Trim(Form_ActionDocument.FMetaData.txtUserObservationName.text) = "" Then
            Message.Title = "Matching Delivered Request to What was Ordered"
            Message.info(sMsg)
            Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
            If Form_ActionDocument.Tabstrip1.index <> cTab_Metadata Then
               Form_ActionDocument.Tabstrip1.Index = cTab_Metadata
            End If
            Return
         End If
         If Not InStr(Lower(SelectedDocument!tag), "scanned") Then
            'does the txtuserObservation name exist in Requests.lu_terms?
            If SelectedDocument!tag <> "" Then
               If Not Synonyms_Update() Then
                  Message.Title = "User Term Not Found"
                  Message.info(sMsg)
                  Return
               End If
            End If
         End If
      Case const.Document_Display_As_Letter
         smsg = "Letter type:" & gvwInboxDocuments[gvwInboxDocuments.row, 1].text & "\n"
         smsg &= "Descriptive tag :%tag%\n\n"
         "Though not mandatory, to ensure the lists in your medical record system contain "
         "useful information it is advisable to put some sort of description of the letter contents.\n\n"
         "For example, if a hostpital discharge, or after hours visit, the reason eg 'Allergic Rash, or "
         "Insertion of Pacemaker"
         
         If Form_ActionDocument.FMetaData.txtUserObservationName.text = "" And Not IsNull(observations) Then 'scanned letters have no observation
            smsg = Replace$(sMsg, "%tag%", modParseDocument.Guess_Letter_Content(observations)) 'only really for GPAccess which has embedded ICPC diagnosis
         End If
         smsg = Replace$(sMsg, "%tag%", "")
         
         If Trim(Form_ActionDocument.FMetaData.txtUserObservationName.text) = "" Then
            Message.Title = "Adding a descriptor to the delivered document"
            If diagnosis_guess Then
               button1_text = "File with suggested descriptor"
               button2_text = "No, let me add my own descriptor"
            Else
               button1_text = "File without descriptor"
               button2_text = "Oops - Add Descriptor"
            End If
            Select Case Message.warning(sMsg, button1_text, Button2_text, "Skip descriptor - I'll wing it")
               Case 1
                  Form_ActionDocument.FMetaData.txtUserObservationName.text = diagnosis_guess
               Case 2
                  Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
                  If Form_ActionDocument.Tabstrip1.index <> cTab_Metadata Then
                     Form_ActionDocument.Tabstrip1.Index = cTab_Metadata
                  End If
                  Return
               Case 3
                  If Message.Warning("No descriptor will be added - File anyway.", "Yes", "No") = 2 Then
                     Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
                     If Form_ActionDocument.Tabstrip1.index <> cTab_Metadata Then
                        Form_ActionDocument.Tabstrip1.Index = cTab_Metadata
                     End If
                     Return
                  End If
            End Select
         End If
   End Select
   Return True
   
End

Public Sub timer1_Timer()
   
   Inc timer_count
   If bIniting Then
      timer1.Stop()
      synonyms_Reload()
      Inbox_Reload()
      bIniting = False
   Else
      If timer_count > 1 Then  'FIXME MAKE THESE USER CONFIGURABLE PER TYPING SPEED
         timer1.stop
         timer_count = 0
         Try tbRefreshInbox_Click()
      Endif
   End If
   
End

Public Sub txtFilterPatient_KeyRelease()
   
   Try Inbox = Inbox_Reload()
   
End

Public Sub cvwPatientsRequests_Select()
   
   ' Form_ActionDocument.context_date = "15/10/2010"
   cvwPatientsRequests.MoveCurrent
   cvwPatientsRequests_key = cvwPatientsRequests.Item.Key
   
End

Public Sub chkOnlyRecent_Click()
   
   Try tbRefreshInbox_Click()
   
End

Public Sub tabStripInbox_Click()
   'User has clicked on the main tabstrip
   'This has the headings 'Action & File, Health Issues, Recalls, INR's Scripts etc
   'fixme check efficiency of this code and reparenting 
   
   If IsNull(Selected_Inbox) Or cvwInbox.Count = 0 Then
      Stop Event
      Return
   Endif  
   Inc Application.Busy
   TabStrip1.Visible = True  
   If IsNull(Selected_Inbox!fk_patient) Then
      tabStripInbox.index = 0
   Else
      Select Case Last.Index
         Case cTab_INR_Management
            If Not InStr(Lower(Form_ActionDocument.FMetaData.txtUserObservationName.text), "inr") Then
               tabStripInbox.index = 0
            End If  
            If IsNull(Form_INRs) Then
               With Form_INRs = New FInr(VBox_INR)
                  .set_embedded_form("FInbox")
                  .HBox_InboxButtons.Visible = True   
               End With
            Endif
            If Not IsNull(currentconsult) Then
               With Form_INRs
                  .Init(currentconsult)
               End With  
            Endif
            Goto Reparent_Document
         Case cTab_Prescriptions                                                                    'User wants to write prescription in inbox
            If IsNull(Form_Prescriptions) Then                                                      'if prescription form not yet loaded
               With Form_Prescriptions = New FPrescriptions(Vbox_Prescriptions)                      'instantiate and tell it that it's in the Inbox
                  .set_embedded("FInbox")
               End With
            End If   
            Form_Prescriptions.Init(currentconsult)                                                  're-initialise with the currentconsult       
            If Vbox_PDf.Visible Then
               Tabstrip1.index = 0
               PDForm.Reparent(Vbox_Result_On_Prescription_Tab)
            Endif
            If VSplit_Document.Visible Then
               With FPreview_HtmlDocument
                  .Reparent(Vbox_Result_On_Prescription_Tab)
               End With
            End If
            If IsNull(form_medications) Then 
               With form_medications = New FClinLists_Medications(VBox_Medications_2)
                  .Set_Embedded_Form_Name("FInbox")
               End With
            End If
            form_medications.Init(currentconsult)
            TabStrip1.Visible = False 
         Case cTab_ProgressNotes
            If IsNull(Form_ProgressNotes) Then
               With Form_ProgressNotes = New FProgressNoteEditor(Vbox_ProgressNotes)
                  .Set_Embedded_In_Form("FInbox")
                  .HBox_Save.Visible = True
               End With  
            Endif
            If Not IsNull(currentconsult) Then
               With Form_ProgressNotes
                  .Set_Embedded_In_Form("FInbox")
                  .Init(currentconsult) 'fixme for adding codes
               End With
            Endif
            Goto Reparent_Document
         Case cTab_Recalls
            If IsNull(Form_Recall) Then
               With Form_Recall = New FRecalls(Vbox_Recalls)
                  .Hbox_ForINbox_Buttons.visible = True
                  .tbClear.visible = True
                  .set_embedded(True, "FInbox")
                  .cvwRecalls.visible = True              
                  .VBox_OutstandingRecalls.visible = True
                  .VBox_Templates.visible = False
                  .HSplit_EditArea.Layout = [4, 1]
                  .HSplit_EditArea.Background = TabStrip1.Background
               End With
            Endif
            If Not IsNull(currentconsult) Then 
               With Form_Recall
                  .Init(currentconsult)
                  .New_Entry()                                         'default to new recall entry
               End With
               
            Endif
            Goto Reparent_Document
         Case cTab_PreviousNotes
            If IsNull(Form_PreviousNotes) Then
               With Form_PreviousNotes = New FProgressNotesViewer(Vbox_PreviousNotes)
                  .Embedded_In_Form_Set_Name("FInbox")
               End With
            Endif
            If Not IsNull(currentconsult) Then
               Form_PreviousNotes.Init(currentconsult, modProgressNotes.AllProgressNotes_Construct_Html(currentconsult))
            Endif
         Case cTab_HealthIssues
            If IsNull(Form_HealthIssues) Then
               With Form_HealthIssues = New FPastHistory(Vbox_HealthIssues)
                  .set_embedded(True, "FInbox")
                  .HBox_Buttons.Visible = True  'need save/new buttons in FClinical these are not visible
               End With
            Endif
            If Not IsNull(currentconsult) Then
               With Form_HealthIssues
                  .Init(currentconsult)
                  .HealthIssue_New()            'default to new health issue
               End With
            Endif
         Case cTab_Documents
            Goto Reparent_Document
      End Select
   End If 
   Dec Application.Busy 
   Return   
Reparent_Document:
   If VSplit_Document.Visible Then
      With FPreview_HtmlDocument
         .Reparent(HBox_HTML_Viewer)
         .visible = True  
         .Stacking = Window.Above
      End With
   Endif
   If Vbox_PDf.Visible Then
      With PDForm
         .Reparent(Vbox_PDf)
         .Stacking = Window.Above
         .Visible = True   
      End With
   Endif
   Dec Application.Busy
   Wait
   
End

Public Sub chkDeletedDocuments_Click()
   'Reload the inbox with deleted documents
   
   Inbox_Reload()
   
End

Public Sub txtLimit_KeyPress()
   'User typing in a limit, only allow numbers  
   
   If Not modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, Key.code) Then Return
   
End

Public Sub tabStripInbox_BeforeArrange()
   
   If IsNull(Selected_Inbox) Then
      tabStripInbox.index = 0
      Return
   Endif  
   
End

Public Sub TabStrip1_Click()
   
   If Tabstrip1.index = 1 Then
      If Lower(File.Ext(SelectedDocument!source_file)) <> "pdf" Then
         Stop Event
         Tabstrip1.index = 0
      Endif
   Endif
   
End

Public Sub TabStrip1_Enter()
   'Used to know which tabstrip to apply zoom to
   
   Tabstrip_With_Focus = cTabstrip_Documents
   
End

Public Sub tabStripInbox_Enter()
   'Used to know which tabstrip to apply zoom to
   
   Tabstrip_With_Focus = cTabstripInbox
   
End

Public Sub txtMonthsToView_KeyPress()
   
   If Not modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, Key.code) Then
      Stop Event
      Return
   Endif
   
End

Public Sub txtMonthsToView_Change()
   
   Settings["FInbox/months_to_view"] = Val(txtMonthsToView.text)
   
End

Public Sub chkExcludeInactivePatients_Click()
   
   Fill_Inbox
   
End

Public Sub chkExcludeDeceasedPatients_Click()
   
   Fill_Inbox
   
End

Public Sub cvwPatientsRequests_Menu()
   
   Dim mnu As Menu
   Dim request As Collection
   Dim requests As Collection = Outstanding_forms[cvwPatientsRequests_key]!requests 
   Dim x As Integer
   
   mnuInbox_RecentRequests_Mark_Back.Children.Clear
   mnuInbox_RecentRequests_Mark_Not_Done.Children.Clear
   If cvwPatientsRequests.count Then
      For x = 0 To requests.count - 1
         With mnu = New Menu(mnuInbox_RecentRequests_Mark_Back) As "Mark_Request_Result_Back"
            .Name = requests[x]!item
            .text = requests[x]!item
            .tag = requests[x]!fk_forms_requests
         End With
         With mnu = New Menu(mnuInbox_RecentRequests_Mark_Not_Done) As "Mark_Request_Not_Done"
            .Name = requests[x]!item
            .text = requests[x]!item
            .tag = requests[x]!fk_forms_requests
         End With
      Next
      mnuInbox_RecentRequests.popup()
   Endif
   
End

Public Sub Mark_Request_Result_Back_Click()
   
   Dim sMsg As String
   Select Case Last.tag
      Case "mark back"
      Case "mark off" 
      Case "mark why not done"
      Case Else 'is a key to clin_requests.forms_requests
         Print Last.tag
         Message.Title = "Reconciling Requests"
         sMsg = "Mark off the test " & Last.text & " as having been completed"
         If Message.Question(sMsg, "Yes - Mark Off", "No") = 2 Then Return
         If modDBConnect.update("clin_requests.forms_requests", Null, ["pk": Last.tag, "finalised": True]) Then
            modDBConnect.CommitTrans()
            Patient_Outstanding_Requests_Show(True) 'reload outstanding requests, ie refresh the gui FIX ME
            'THIS Is USING THE WRONG FLAG 
         End If   
   End Select
   
End

Public Sub mnuInbox_RecentRequests_Click()
   
   Select Case Last.tag
      Case "mark back"
      Case "mark off" 
      Case "mark why not done"
      Case Else 'is a key to clin_requests.forms_requests
         Print Last.tag  
   End Select
   
End
