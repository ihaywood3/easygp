' Gambas class file

' Copyright (C) 2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
'INBOX
'
'PURPOSE       Display any document coming into the practice for staff members
'              A Document is defined loosely, it could be a scanned document
'              an email, a HL7 message  either for a patient or just junk mail
'              for one or more doctors
'DATABASE      See Schema Documents
'              Documents.Documents contains every single document - they end up here
'                                  either by the HL7 parser automatically putting them there
'                                  having matched patients (if fails > unmatched table)
'                                  or by staff having allocated a document from another source
'                                  eg scanning (see Clerical.Scanning.FArchiveDocuments)
'              Documents.sending_entities contains defaults for anyone who sends stuff
'              Run GUI: Admin.HL7 Management.HL7 Sending Entities
'              Sources Source.Admin.HL7.FHLManagement
'
'HOW THIS WORKS: _New()
'                At Instantiation of this form Admin is prevented from accessing, calls Init()
'                Init()
'                A Timer is started, because otherwise I found that the gui dosn't come up
'                quickly enough as the database access slows this down, so look at Timer1.Timer()
'                Sending_Entities (collection) is loaded to describe their default options
'                timer1_Timer()Triggers And calls Inbox_Reload()
'                The inbox is filled with all unique names
'                The inbox though usually filled with patients names, may not be if the document
'                is not aimed so, i.e could be a staff circular
'                The first row of the inbox is automatically selected by the program and this then
'                fills the documents list with documents for that patient. The first of these is
'                automatically selected and the document displayed, by choosing the appropriate
'                viewer
'
'                SelectedDocument = Selected_Inbox!!documents[gvwDocuments.row] = the document currently slected
'
'               All documents must be actioned at least by viewing the meta - data of the document
'               and the user clicking File implicity means they have approved the document as 'OK'
'               The Form that does all the actioning, and indeed also contains the metadata form
'               is FActionDocument - this is basically a tab control on form, and other forms
'               are embedded on each tab to enable document actioning:
'                 FDocumentMetadata - Alter the metadata
'                 FPrescriptions    - write a prescription (Not implemented)
'                 FRecalls          - write a recall
'                 FPastHistory      - add or later a past history item
'                 FStaffTasks       - allocate tasks to themselves or 1 or more staff members for this document
'                 FScratchPad       - write a scratch pad note
'                + more... see the form.
'
'BUGS           Probably plenty please email me rterry@pacific.net.au
'               Patient filter not working properly, something to  do with the timer.
'               mnuWebView_Click():
'                 if observations[pk]!loinc is null > crash, however I've patched this
'                 but problem surfaced with ?loinc code or some sort of code to do with
'                 ECG's starting with K, not being imported from douglas labs because
'                 segment wasn't parsed in the importer FIXME
'               EGfr'S DON'T graph properly - range/scale on graph are incorrect.
'TODO           Implement a limit on documents in the inbox, currently set at (gulp) 2000
'               Implement the staff archives and viewing the documents audit trail.
' select patient_firstname, patient_surname, tag_user, imported_time  from documents.vwdocuments
'
' where  date (Now()) - date '2012-06-25'  =1
'  order by pk_document desc limit 100 ;

'-----------------------------------------------------------------------------------------------
Private loincs As Collection 'temporary ?FIXME
Private obs As Observer
Private pfile As String ' name of temp picture file
'-------------
'Boolean flags
'-------------
Private bIniting As Boolean = True              'only  used to ensure gui loads before database accessed
Private bAutoFilePatient As Boolean             'if True this patients results will be auto-filed - used only by me
Private bAutoFileAll As Boolean                 'If true the entire inbox is auto filed  - used only by me
Private bexit As Boolean                        'used to prevent re-entry into routines
Private bIncludeUnmatcheddocuments As Boolean   'If true unmatched documents are included in the inbox
Private bExcludeFTReport As Boolean             'If true the FT Report segment is not shown in the html of the hl7 document
Private bExcludePIT As Boolean                  'If True the PIT segments are not shown in the html of the hl7 document
Private bRequestMatchFound As Boolean           'True if matching reuquest/result
Private bNoContext As Boolean                   'if true there are no context relevant notes
'-----------
'Collections
'-----------
Private Staff_members As Collection             'Collection of all staff members in the surgery
Private Staff_member As Collection              'the currently selected staff member from the staff combo
Private Sending_Entities As Collection          'collection of documents.vwSendingEntities ie all who send documents
Private Inbox As Collection                     'the main inbox collection each member = collection of documents
Private RequestOrdered As Collection            'selected request which was ordered
Private Selected_Inbox As Collection            'the collection of documents for selected row in inbox (ie INbox[key])
Private SelectedDocument As Collection          'currently selected document
Private synonyms As Collection                  'collection matching a senders terms with readable users terms
Private Observations As Collection              'Any 'observations' ie measurement results, associated with a document
Private Documents As Collection
Private Deleted_Documents As Collection         'allow multi-level undo of deleted documents Inbox-wide
'--------------
'Integer Values
'--------------
Private fk_lu_message_display_style As Integer  'const.Document_Display_As_Letter or  const.Document_Display_As_Result
Private Timer_Count As Integer                  'used to delay searching when using Timer1
Private fgc_errors As Integer = 16711680        'red foreground as default for errors
Private bgc_errors As Integer = 16777215        'yellow background as default for errors
'Private iSelectedDocument As Integer            'Key to the inbox_Documents collection
Private fk_document As Integer                  'key to document.documents
Private currentconsult As CConsult
Private EmbeddedForm As Object
Private Document_HTML As String
'-------------------------------------------------------------------
'Constants to describe the tabs which action a document on tabstrip1
'--------------------------------------------------------------------
Private Const Metadata_tab As Integer = 0
Private Const Documents_tab As Integer = 0
Private Const HealthIssue_tab As Integer = 2
Private Const recall_tab As Integer = 1
Private Const PreviousNotes_tab As Integer = 3
Private Const ProgressNotes_tab As Integer = 4
'-------------------------------------------------------
'Constants to describe the main tabs at top of this form
'-------------------------------------------------------
Private Const cTabInbox As Integer = 0
Private Const cTabAudit As Integer = 1

'---------------
'Embedded Forms
'---------------
Private Form_Graph As FGraph
Private Form_ActionDocument As FActionDocument           'This form contains minimum 1 (FArchiveMetadata) actioning form
Private FPreview_HtmlDocument As FHtmlViewer             'The main html viewer for hl7
Private PDForm As FPdf                                   'View any PDF files here
Private FAuditTrail As New FHtmlViewer                   'Not implemented - intended to allow viewing of audit trail on documents
Private FMessage As FGenericHTMLMessage                  'popup message box
Private Form_Recall As FRecalls
Private Form_HealthIssues As FPastHistory
Private Form_PreviousNotes As FProgressNotesViewer
Private Form_ProgressNotes As FProgressNotePage

Static Private Form_Inbox As FInbox                'allow access of this form globally

Public Sub _New()

   Init()                           'Initialse gui etc on the inbox tab
   Try Settings_Load()
   Form_Inbox = Me

End

Static Public Sub Switch_tab(iTab As Integer)
   '---------------------------------------------------------------
   'switch tabstrip containing document, recall, progress notes etc
   'called from FRecall to when a recall is saved to save me having
   'to click on the document tab all the time when 99% of the time
   'that's what I want to do after I've added recall in the inbox
   '----------------------------------------------------------------

   form_inbox.Tabstrip1.index = iTab

End

Static Public Sub tbFile_SetFocus()
   '----------------------------------------------------------------------------------
   'Called from the embedded metadata form to set focus to the button to file document
   '----------------------------------------------------------------------------------

   Form_Inbox.tbFile.SetFocus()

End

Public Sub Settings_Save()

   Settings["FInbox/HSplit_Document"] = HSplit_Document.Layout
   Settings["FInbox/Vsplit_left"] = Vsplit_left.Layout
   Settings["FInbox/VSplit_Document"] = VSplit_Document.Layout
   Settings["FInbox/HSplit_Inbox_Documents_Lists.Layout"] = HSplit_Inbox_Documents_Lists.Layout
   Settings["FInbox/VSplit_PatientsDocumentList.Layout"] = VSplit_PatientsDocumentList.Layout
   Settings["FInbox/Results_Zoom"] = FPreview_HtmlDocument.Webview1.Zoom
   Try Form_Recall.Settings_Save()

End

Private Sub Settings_Load()

   VSplit_PatientsDocumentList.Layout = Settings["FInbox/VSplit_PatientsDocumentList.Layout", modutil.VSplit([237, 115])]
   HSplit_Inbox_Documents_Lists.Layout = Settings["FInbox/HSplit_Inbox_Documents_Lists.Layout", modutil.HSplit([377, 377])]
   VSplit_Document.Layout = Settings["FInbox/VSplit_Document.Layout", modutil.VSplit([662, 243])]
   Vsplit_left.Layout = Settings["FInbox/Vsplit_left", modutil.VSplit([480, 479])]
   HSplit_Document.Layout = Settings["FInbox/HSplit_Document.Layout", modutil.HSplit([765, 954])]
   FPreview_HtmlDocument.Webview1.Zoom = Settings["FInbox/Results_Zoom", 1]
   gvwInboxDocuments.font = Font[Settings["Inbox/gvwInboxDocuments.font", "DejaVu Sans,9"]]
   cvwInbox.font = gvwInboxDocuments.font

End

Public Sub Init()

   chkOnlyRecent.value = True                                           'default to showing on last months inbox contents
   If modDBConnect.IsAdmin Then Return                                  'admin obviously not allowed to file stuff
   timer1.start                                                         'delay loading inbox data until gui showing
   With Form_ActionDocument = New FActionDocument(Vbox_ActionDocument)
      .Init("Inbox")                                                    'Loads its own forms, initially only an instance of the document metadata
   End With
   staff_members = modUtil.LoadCombo(cmbStaffMembers, modInboxDBI.Inbox_Staff_Get(), "wholename")  'combo box filled with staff members
   cmbStaffMembers.index = cmbStaffMembers.Find(modDBConnect.currentUser!wholename)                'show name of current user in staff combo
   Sending_Entities = modUtil.LoadCombo(cmbSenders, modInboxDBI.Get_Document_Handling_Defaults(), "msh_sending_entity")
   cmbSenders.index = -1
   With Form_Graph = New FGraph(HBox_LowerLists)
      .Visible = False
   End With
   obs = New Observer(Form_Graph.tbGraphRemove) As "tbGraph"
   obs = New Observer(Form_ActionDocument.FMetaData) As "FmetaData"
   With FPreview_HtmlDocument = New FHtmlViewer(HBox_HTML_Viewer)                                       'Form to show html of hl7 received
      .tbWebBrowserPrint.Visible = True
      .tbWebBrowserZoomIn.visible = True
      .tbWebBrowserZoomOut.Visible = True
   End With
   obs = New Observer(FPreview_HtmlDocument.Webview1) As "WebView"                               'over-ride menu on the web-view control
   obs = New Observer(FPreview_HtmlDocument.mnuWebView) As "mnuWebView"                               'over-ride menu on the web-view control
   obs = New Observer(Form_ActionDocument.FMetaData.txtUserObservationName) As "txtUserObservationName"                'detect when <enter> hit and file the document
   With PDForm = New FPdf(Vbox_PDf)                                                                'pdf form to show any scanned doc's
      .BtOpen.Visible = False
      .Set_Embedded_Form("FInbox")
      .BtPrint.Visible = True
      .BtPrint.Enabled = True
      .btZoomOut.Visible = True
      .btZoomIn.Visible = True
      .btRotate.Visible = True
      .btRotate.Enabled = True
   End With
   With cvwPatientsRequests
      .Columns.count = 2
      .width = 80
   End With
   With gvwInboxDocuments
      .Columns.count = 2
   End With
   tlMissingProvider.text = ""
   "<HTML>"
   "<P ALIGN=CENTER><B>Sending Entity Not found</B></P>"
   "<P ALIGN=LEFT STYLE=\"font-weight: normal\">This document has been "
   "received from a sending entity which we have not encountered before.</P>"
   "<P ALIGN=LEFT STYLE=\"font-weight: normal\">Before you can deal with "
   "this document, the system administrator will have to examine the file "
   "and enter the details of the sending provider in the database.</P>"
   "</HTML>"

   ' Ian temporary whilst I muck around with auto-graphing
   ' The loinc stuff needs alot of work e.g the english terms I've used often
   ' have a long winded version in the db
   ' also the extended version of the loinc seems to have disappeared from easygp
   loincs = New Collection
   loincs.Add("eGFR", "33914-3")
   loincs.Add("HBA1c", "4548-4")
   loincs.Add("Platelets", "777-3")
   loincs.Add("Haemoglobin", "718-7")
   loincs.Add("UltrasensPSA", "35741-8")
   loincs.Add("Bicarbonate", "1963-8")
   loincs.Add("Sodium", "2951-2")
   loincs.Add("Potassium", "2823-3")
   loincs.Add("Total PSA", "2857-1")
   loincs.Add("TSH", "3016-3")
   loincs.Add("Free T3", "14928-6")
   loincs.Add("Free T4", "14920-3")
   loincs.Add("CK", "2157-6")
   loincs.Add("CRP", "1988-5")
   loincs.Add("Haematocrit", "16931-8")
   loincs.Add("ESR", "4537-7")
   loincs.Add("Carbamazepine", "14639-9")
   loincs.Add("LDL Cholesterol", "22748-8")
   loincs.Add("Lamotrigine", "25458-1")
   loincs.Add("INR", "6301-6")
   loincs.Add("AST", "1920-8")
   loincs.Add("Alk Phos", "6769-4")
   loincs.Add("Gamma GT", "2324-2")
   loincs.Add("ALT", "1742-6")
   loincs.Add("Total Protein", "2885-2")
   loincs.Add("Albumin", "1751-7")
   loincs.Add("Globulin", "10834-0")
   loincs.Add("Vitamin B12", "15039-1")
   loincs.Add("Urea", "22664-7")
   loincs.Add("Creatinine", "14682-9")
   loincs.Add("LDH", "2532-0")
   loincs.Add("Bilirubun", "14631-6")
   loincs.Add("Red cell count", "789-8")
   loincs.Add("MCV", "787-2")
   loincs.Add("MCHC", "786-4")
   loincs.Add("RDW", "788-0")
   loincs.Add("Neutrophils", "6690-2")
   loincs.Add("Lymphocytes", "731-0")
   loincs.Add("Cholesterol", "14647-2")
   loincs.Add("HDL Cholesterol", "14646-4")
   loincs.Add("LDL Cholesterol", "22748-8")
   loincs.Add("Calcium", "2000-8")
   loincs.Add("Corrected Calcium", "29265-6")
   loincs.Add("Alb/Creat Ration", "14959-1")
   loincs.Add("Uric Acid", "3084-1")
   Deleted_Documents = New Collection
   With Form_Recall = New FRecalls(Vbox_Recalls)
      .Hbox_ForINbox_Buttons.visible = True
      .tbClear.visible = True
      .set_embedded(True, "FInbox")
      .cvwRecalls.visible = True 'the outstandingrecalls
      .VBox_OutstandingRecalls.visible = True 'the outstandingrecalls
      .VBox_Templates.visible = False
      .HSplit_EditArea.Layout = [4, 1]
      .HSplit_EditArea.Background = TabStrip1.Background
   End With

End

Public Sub FmetaData_Keypress()

   Dim CtrlDown As Boolean
   Dim FnDown As Boolean

   Try CtrlDown = Key.Control
   If CtrlDown Then
      Stop Event          'fixme test this fixed the FDocumentmetadata.EditArea_TextBox_Keypress
      Select Case Key.code
         Case Asc("=")
            If Vbox_PDf.Visible Then
               PDForm.zoom_in()
            End If
            If VSplit_Document.Visible Then
               FPreview_HtmlDocument.zoom_in()
            End If
         Case Asc("-")
            If Vbox_PDf.Visible Then
               PDForm.zoom_out()
            End If
            If VSplit_Document.Visible Then
               FPreview_HtmlDocument.zoom_out()
            End If

      End Select
   End If

End

Public Sub txtUserObservationName_Activate()
   '----------------------------------------------------------------------------------------
   'This textbox on Fmetadata is over-ridden because I want to automatically trigger
   'filing  of the document when the user hits <enter> on this textbox - makes usage quicker
   '----------------------------------------------------------------------------------------

   Stop Event
   If Last.tag = "user name" Then
      tbFile_Click()
   Endif

End

Public Function Synonyms_Update() As Boolean
   '----------------------------------------------------------------------------------
   'If user has added a new term then save to the backend after appropriate prompting
   '---------------------------------------------------------------------------------

   Dim syn As Collection
   Dim sMsg As String
   Dim synonym_exists As Boolean
   Dim bProvider_Synonym_Exists As Boolean
   Dim bUser_Synonym_Exists As Boolean
   Dim synonym As String
   Dim x As Integer
   Dim new_term As Collection
   Dim terms As String[]
   Dim term As String
   Dim provider_term As Collection
   Dim old_data As Collection           'not used but needed
   Dim pk_view As Integer               'not used but needed
   Dim Provider_Synonym As Collection
   Dim Link_data As New Collection
   Dim bSuccess As Boolean = True       'hope for the best

   If Right(Form_ActionDocument.FMetaData.txtUserObservationName.text) <> ";" Then
      Form_ActionDocument.FMetaData.txtUserObservationName.text &= ";"
   End If

   terms = Split(Form_ActionDocument.FMetaData.txtUserObservationName.text, ";", "", True)
   For Each Term In terms
      term = Trim(term)                 'yes, shouldn't be possible but I've seen preceeding blanks.
      For Each syn In synonyms
         If Lower(SelectedDocument!tag) = Lower(syn!provider_request_name) Then
            If Lower(term) = Lower(syn!user_request_name) Then
               bProvider_Synonym_Exists = True
               Break
            End If
         End If
      Next
      If Not bProvider_Synonym_Exists Then
         Link_data = New Collection
         Try Link_data!fk_lu_request = modRequestsDBI.Request_GetPk(term)
         If Error Then
            new_term = New Collection
            new_term!fk_lu_request_type = Form_ActionDocument.FMetaData.Get_Document_Type()
            new_term!item = term
            new_term!fk_laterality = Form_ActionDocument.FMetaData.get_laterality()
            smsg = "The term '" & new_term!item & "' does not exist in the requests table.\n\n"
            sMsg &= "The following is very important. Some tests can be ordered for the left "
            sMsg &= "right, or both sides of the body.\n\n"
            sMsg &= "If you want your requests to come up looking like this in the popup lists, your should answer 'Yes' to Add lateralisation:\n\n"
            sMsg &= new_term!item & " (LEFT)\n"
            sMsg &= new_term!item & " (RIGHT)\n"
            sMsg &= new_term!item & " (BOTH)\n\n"
            sMsg &= "Add Lateralisation?\n\n"

            Select Case Message.Warning(sMsg, "Yes - I want to see left/right/both ", "No - just add the term", "Cancel")
               Case 1
                  sMsg = "The term '" & new_term!item & "' will be added, and can be left/right/both sides of the body.\n\n"
               Case 2
                  sMsg = "The term '" & new_term!item & "' will be added without lateralisation.\n\n"
               Case 3
                  Return False
            End Select
            If Message.Warning(sMsg & "Are you absolutely sure this is accurate?", "Yes", "No") = 2 Then
               Return False
            Else
               Link_data!fk_lu_request = modRequestsDBI.Request_Save(old_data, pk_view, new_term)
            End If
         End If

         Link_data!provider_request_name = SelectedDocument!tag
         Link_data!lateralisation = Form_ActionDocument.FMetaData.get_laterality()
         link_data!fk_lu_provider_user_request = modInboxDBI.Link_SendingEntity_Name_UserName(link_data)
         synonyms_Reload() 'should pickup if user typed same one in twice
      End If
   Next

   Return bSuccess

End

Public Sub chkExcludeFTReport_Click()

   cvwInboxDocuments_Select()

End

Public Sub mnuPatientsInInbox_Click()

   Select Case Last.tag
      Case "delete from inbox"

      Case "move to holding file"

   End Select

End

Public Function Inbox_Reload()
   '--------------------------------------------------------------------------
   'Reloads the contents of the inbox
   'These can be staff documents, patient documents of un-identified documents
   'cvwInbox_Select() is triggerd by cvwInbox.Item.Selected = True
   'which sets up the Next patient And any associated
   'tabs eg recalls and refreshes the document list
   '--------------------------------------------------------------------------

   Inc Application.Busy
   lblSendingEntity.text = ""
   gvwInboxDocuments.Clear()
   FPreview_HtmlDocument.WebView1.html = "<HTML><BODY></BODY></HTML>"
   Form_ActionDocument.FMetaData.EditArea_Clear()
   Inbox = Fill_Inbox(0, 2500)   'fill all documents, limit FIXME UNHARD CODE ME
   cvwInbox.MoveFirst()
   Try cvwInbox.Item.Selected = True   'Triggers loading of documents
   Dec Application.Busy

End

Public Sub cvwInboxDocuments_Select()

   '    Dim request As Collection
   '    Dim Guessed_user_Name As Collection
   '    Dim item As Collection
   '    Dim items As Collection
   '    Dim file_ext As String
   '    Dim observation As Collection
   '    Dim sString As String
   '    Dim x As Integer
   '
   '    If bExit Or cvwInboxDocuments.count = 0 Then Return             'no documents > get outa here
   '
   '    Tabstrip1.index = Documents_tab
   '    bRequestMatchFound = False                                      'default to cannot match to ordering
   '    cvwPatientsRequests.UnSelectAll()                                'remove marquee on list of ordered requests
   '    bExit = True
   '    tlMissingProvider.Visible = False                               'could be showing from previous document
   '    If Selected_Inbox!fk_patient Then 'Or Selected_Inbox!fk_unmatched_patient Then
   '       Form_ActionDocument.VBox10.Enabled = True
   '    Else
   '       If Not IsNull(Selected_Inbox!fk_unmatched_patient) Then
   '          Form_ActionDocument.VBox10.Enabled = True
   '       Else
   '          Form_ActionDocument.VBox10.Enabled = False                     'Can't currently action a non patient document FIXME    Else
   '       End If
   '    End If
   '    tlMissingProvider.Visible = False
   '    Form_Graph.Visible = False
   '    tbFile.Enabled = True
   '
   '    cvwInboxDocuments.MoveCurrent()                                 'set internal cursor to visible row
   '    iSelectedDocument = cvwInboxDocuments.Item.key                  'key to Selected_Inbox!documents
   '    SelectedDocument = Selected_Inbox!documents[iSelectedDocument]  'set current document
   '    file_ext = File.Ext(SelectedDocument!source_file)
   '    With Form_ActionDocument
   '       .Set_Document(SelectedDocument)
   '       .FMetaData.Init("Allocated Documents") 'must be done each time, eg a sender-reallocation could have been aborted
   '       .FMetaData.Edit(Selected_Inbox!documents, iSelectedDocument)
   '       Try .FTasks.fk_task = 0 'each document must have a re-zero'd task
   '    End With
   '    chkExcludePIT.value = SelectedDocument!exclude_pit              'do/do not display PIT segments
   '    chkExcludeFTReport.value = SelectedDocument!exclude_ft_report   'do/do not display FT report
   '    fgc_errors = SelectedDocument!abnormals_foreground_color               'FIXME Put in user-defined to overide this
   '    bgc_errors = SelectedDocument!abnormals_background_color               'FIXME Put in user-defined to overide this
   '    '
   '    If Not SendingEntity_Recognised() Then            'If the sending entity for this document hasn't been verified
   '       Form_ActionDocument.VBox10.Enabled = False
   '       tbFile.Enabled = False
   '       HBox_LowerLists.Padding = 10
   '       With tlMissingProvider
   '          .Foreground = color.Red
   '          .text = "<P ALIGN=CENTER><B>Unidentified HL7 Sender</B><P>"
   '          .text &= "The sender of this hl7 message cannot be found, the document may not be filed.<BR><BR>"
   '          .text &= "Please contact the System Administrator for assistance<BR><BR>"
   '          "The Administrator can correct this via the Admin.Hl7Management tab"
   '          .Visible = True
   '       End With
   '    End If
   '
   '    If tlMissingProvider.Visible = False And SelectedDocument!fk_staff_destination Then
   '       tlMissingProvider.Visible = False
   '    Else
   '       If tlMissingProvider.Visible = False Then
   '          With tlMissingProvider
   '             .Visible = True
   '             .text = "<P ALIGN=CENTER><B>Unidentified Recipient " & cmbStaffMembers.text & "</B><P>"
   '             .text &= "The staff member cannot be found, the document may not be filed.<BR><BR>"
   '             .text &= "This document may or may not be destined for this practice.<BR><BR>"
   '             .text &= "Please contact the System Administrator for assistance."
   '          End With
   '       End If
   '    End If
   '    Form_ActionDocument.FMetaData.bexit = True
   '    If Lower(file_ext) <> "pdf" Then  'FIXME - add code to check not an image file
   '       Observations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & iSelectedDocument & " ORDER BY observation_date, set_id")
   '       If SelectedDocument!fk_lu_message_display_style <> const.Document_Display_As_Letter Then
   '          Guessed_user_Name = modParseDocument.Guess_UserName(currentconsult, synonyms, SelectedDocument, Observations)
   '          If Guessed_user_Name!name <> "" Then
   '             Form_ActionDocument.FMetaData.txtUserObservationName.text = Guessed_user_Name!name
   '             Form_ActionDocument.FMetaData.txtUserObservationName.pos = 0
   '          End If
   '          Select Case Guessed_user_Name!laterality
   '             Case const.LateralityLeft
   '                Form_ActionDocument.FMetaData.rbLateralityLeft.value = True
   '             Case const.LateralityRight
   '                Form_ActionDocument.FMetaData.rbLateralityRight.Value = True
   '             Case const.LateralityBoth
   '                Form_ActionDocument.FMetaData.rbLateralityBoth.Value = True
   '             Case Else
   '                Form_ActionDocument.FMetaData.rbLateralityNone.Value = True
   '          End Select
   '       Else
   '          Form_ActionDocument.FMetaData.txtUserObservationName.text = modParseDocument.Guess_Letter_Content(observations)
   '       End If
   '    End If
   '    Try Form_ActionDocument.FTasks.txtTask.text = Form_ActionDocument.FMetaData.txtUserObservationName.text
   ' ShowDocument:
   '    '---------------------------------------------------------------------------------
   '    'Bumma, wheras 99.9% of msh_sending_entities supplied are same as their companies,
   '    'some idiots who obviously programmed in the pre-dos area of 6 characters
   '    'concatenate the real name to something illedgible
   '    '---------------------------------------------------------------------------------
   '    Vbox_ActionDocument.Enabled = True
   '    If Not IsNull(SelectedDocument!organisation) Then
   '       lblSendingEntity.text = SelectedDocument!organisation
   '    Else
   '       lblSendingEntity.text = SelectedDocument!msh_sending_entity
   '    End If
   '    Select Case Lower(file_ext)
   '       Case "pdf"
   '          PDF_Document_Show()
   '          Form_ActionDocument.FMetaData.txtUserObservationName.enabled = True 'put in 04Nov11 to try and fix weird bug, keypress not working
   '          Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
   '       Case "png", "jpeg", "tiff", "gif", "jpg"
   '          Image_File_Show()
   '          Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
   '       Case Else
   '          Allow_Filing(True)
   '          HTML_Document_Show(SelectedDocument!fk_lu_message_display_style, SelectedDocument, observations)
   '          Try Auto_Graph(Observations)
   '    End Select
   '
   '    bexit = False
   '    Form_ActionDocument.FMetaData.bexit = False

End

Public Sub gvwInboxDocuments_Menu()
   '-----------------------------------------------
   'User has requested the main documents menu
   'If this is  known patient - popup mnuDocuments
   'otherwise popup mnuNonPatientDocuments
   '-----------------------------------------------

   Dim x As Integer
   Dim y As Integer
   Dim mnu As Menu

   If Not gvwInboxDocuments.Rows.count Then Return

   If Selected_Inbox!fk_patient Then
      If Not gvwInboxDocuments.Rows.count Then                ' no documents?
         If Deleted_Documents.count Then                 ' at least enable undo-delete if necessary
            For Each mnu In mnuDocuments.Children
               mnu.Enabled = False
            Next
            mnuDocuments_UnDelete.enabled = True
            Return
         Endif
      Else
         For Each mnu In mnuDocuments.Children
            mnu.Enabled = True
         Next
      End If
      If SelectedDocument!msh_transmitting_entity = "snail mail" Then  'scanned documents,not hl7
         mnuDocuments_ReFile.Enabled = True
      Else
         mnuDocuments_ReFile.enabled = False
      Endif
      '   gvwInboxDocuments.MoveFirst()
      For x = 0 To gvwInboxDocuments.Rows.count  '-1
         gvwInboxDocuments.row = x
         If gvwInboxDocuments.Rows[x].Selected = True Then
            Inc y
         Endif

      Next
      If y > 1 Then
         mnuDocuments_ReAllocateSingle.Enabled = False
         mnuDocuments_ReAllocateMultiple.Enabled = True
      Else
         mnuDocuments_ReAllocateSingle.Enabled = True
         mnuDocuments_ReAllocateMultiple.Enabled = False

      Endif
      If Deleted_Documents.count Then
         mnuDocuments_UnDelete.enabled = True

      Else
         mnuDocuments_UnDelete.enabled = False
      Endif
      mnuDocuments.Popup()
   Else
      '--------------------------------------
      'This is not a patient related document
      '--------------------------------------
      mnuNonPatientDocuments.Popup()
   End If

End

Public Sub gvwInboxDocuments_Select()
   '-------------------------------------------------------------------------------
   'User, or the program has clickedf on the gridview showing the list of documents
   'for the currently selected Selected_Inbox (ie a patient or staff member)
   'This routine does everything
   '-------------------------------------------------------------------------------

   Dim request As Collection
   Dim Guessed_user_Name As Collection
   Dim item As Collection
   Dim items As Collection
   Dim file_ext As String
   Dim observation As Collection
   Dim sString As String
   Dim x As Integer

   If bExit Or gvwInboxDocuments.rows.count = 0 Then Return        'No documents, show nothing
   Tabstrip1.index = Documents_tab                                 'Make sure we are actually on the documents tab
   bRequestMatchFound = False                                      'default to cannot match to ordering
   cvwPatientsRequests.UnSelectAll()                                'remove marquee on list of ordered requests
   bExit = True
   tlMissingProvider.Visible = False                               'could be showing from previous document
   If Selected_Inbox!fk_patient Then                               'if its a patient's doc's we are showing
      Form_ActionDocument.VBox10.Enabled = True                    'enable the actioning of these documents
   Else
      If Not IsNull(Selected_Inbox!fk_unmatched_patient) Then      'otherwise if an unmatched patient
         Form_ActionDocument.VBox10.Enabled = True                 'enable the actioning
      Else
         Form_ActionDocument.VBox10.Enabled = False                'Can't currently action a non patient document FIXME    Else
      End If
   End If
   tlMissingProvider.Visible = False
   Form_Graph.Visible = False
   tbFile.Enabled = True
   ' iSelectedDocument = gvwInboxDocuments.Row                      'key to Selected_Inbox!documents
   SelectedDocument = Selected_Inbox!documents[gvwInboxDocuments.Row]  'set current document
   fk_document = SelectedDocument!pk_document
   file_ext = File.Ext(SelectedDocument!source_file)
   With Form_ActionDocument
      .Set_Document(SelectedDocument)
      .FMetaData.Init("Allocated Documents")                        'must be done each time, eg a sender-reallocation could have been aborted
      .FMetaData.Edit(Selected_Inbox!documents, gvwInboxDocuments.Row)
      Try .FTasks.fk_task = 0                                       'each document must have a re-zero'd task
   End With
   chkExcludePIT.value = SelectedDocument!exclude_pit              'do/do not display PIT segments
   chkExcludeFTReport.value = SelectedDocument!exclude_ft_report   'do/do not display FT report
   fgc_errors = SelectedDocument!abnormals_foreground_color        'FIXME Put in user-defined to overide this
   bgc_errors = SelectedDocument!abnormals_background_color        'FIXME Put in user-defined to overide this
   If Not SendingEntity_Recognised() Then                          'If the sending entity for this document hasn't been verified
      Form_ActionDocument.VBox10.Enabled = False                   'don't allow actioning of a document
      tbFile.Enabled = False                                       'or filing
      HBox_LowerLists.Padding = 10                                 'and explain to the user why and how to fix
      With tlMissingProvider
         .Foreground = color.Red
         .text = "<P ALIGN=CENTER><B>Unidentified HL7 Sender</B><P>"
         .text &= "The sender of this hl7 message cannot be found, the document may not be filed.<BR><BR>"
         .text &= "Please contact the System Administrator for assistance<BR><BR>"
         "The Administrator can correct this via the Admin.Hl7Management tab"
         .Visible = True
      End With
   End If
   If tlMissingProvider.Visible = False And SelectedDocument!fk_staff_destination Then
      tlMissingProvider.Visible = False
   Else
      If tlMissingProvider.Visible = False Then
         With tlMissingProvider
            .Visible = True
            .text = "<P ALIGN=CENTER><B>Unidentified Recipient " & cmbStaffMembers.text & "</B><P>"
            .text &= "The staff member cannot be found, the document may not be filed.<BR><BR>"
            .text &= "This document may or may not be destined for this practice.<BR><BR>"
            .text &= "Please contact the System Administrator for assistance."
         End With
      End If
   End If
   Form_ActionDocument.FMetaData.bexit = True
   Vbox_ActionDocument.Enabled = True
   '-------------------------
   'ok, now show the document
   '-------------------------
   Select Case Lower(file_ext)
      Case "pdf"
         PDF_Document_Show()
         Form_ActionDocument.FMetaData.txtUserObservationName.enabled = True 'put in 04Nov11 to try and fix weird bug, keypress not working
         Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
      Case "png", "jpeg", "tiff", "gif", "jpg"
         Image_File_Show()
         Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
      Case Else
         Observations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & fk_document & " ORDER BY observation_date, set_id")
         If SelectedDocument!fk_lu_message_display_style <> const.Document_Display_As_Letter Then
            Guessed_user_Name = modParseDocument.Guess_UserName(currentconsult, synonyms, SelectedDocument, Observations)
            If Guessed_user_Name!name <> "" Then
               Form_ActionDocument.FMetaData.txtUserObservationName.text = Guessed_user_Name!name
               Form_ActionDocument.FMetaData.txtUserObservationName.pos = 0
            End If
            Select Case Guessed_user_Name!laterality
               Case const.LateralityLeft
                  Form_ActionDocument.FMetaData.rbLateralityLeft.value = True
               Case const.LateralityRight
                  Form_ActionDocument.FMetaData.rbLateralityRight.Value = True
               Case const.LateralityBoth
                  Form_ActionDocument.FMetaData.rbLateralityBoth.Value = True
               Case Else
                  Form_ActionDocument.FMetaData.rbLateralityNone.Value = True
            End Select
         Else
            Form_ActionDocument.FMetaData.txtUserObservationName.text = modParseDocument.Guess_Letter_Content(observations)
         End If
         Allow_Filing(True)
         HTML_Document_Show(SelectedDocument!fk_lu_message_display_style, SelectedDocument, observations)
         Try Auto_Graph(Observations)
   End Select
   Try Form_ActionDocument.FTasks.txtTask.text = Form_ActionDocument.FMetaData.txtUserObservationName.text

   If Not IsNull(SelectedDocument!organisation) Then
      lblSendingEntity.text = SelectedDocument!organisation
   Else
      lblSendingEntity.text = SelectedDocument!msh_sending_entity
   End If
   bexit = False
   Form_ActionDocument.FMetaData.bexit = False

   'ShowDocument:
   '---------------------------------------------------------------------------------
   'Bumma, wheras 99.9% of msh_sending_entities supplied are same as their companies,
   'some idiots who obviously programmed in the pre-dos area of 6 characters
   'concatenate the real name to something illedgible
   '---------------------------------------------------------------------------------
   ' Vbox_ActionDocument.Enabled = True
   ' If Not IsNull(SelectedDocument!organisation) Then
   '    lblSendingEntity.text = SelectedDocument!organisation
   ' Else
   '    lblSendingEntity.text = SelectedDocument!msh_sending_entity
   ' End If
   ' Select Case Lower(file_ext)
   '    Case "pdf"
   '       PDF_Document_Show()
   '       Form_ActionDocument.FMetaData.txtUserObservationName.enabled = True 'put in 04Nov11 to try and fix weird bug, keypress not working
   '       Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
   '    Case "png", "jpeg", "tiff", "gif", "jpg"
   '       Image_File_Show()
   '       Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
   '    Case Else
   '       Allow_Filing(True)
   '       HTML_Document_Show(SelectedDocument!fk_lu_message_display_style, SelectedDocument, observations)
   '       Try Auto_Graph(Observations)
   ' End Select

   '  bexit = False
   ' Form_ActionDocument.FMetaData.bexit = False

End

Public Sub Auto_Recall()
   '--------------------------------------------------------------
   'Save the current edit area recall and updates the recalls list
   'Need this amount of info to save
   'For table clin_recalls.recalls
   '     due date
   '     fk_reason
   '     fk_contact_method
   '     fk_urgency
   '     fk_appointment_length
   '     fk_staff          'NB: THIS MAY NOT BE current staff member
   '                            but current code dosn't implement this
   '     fk_lu_audit_action
   '     additional_text
   '     deleted boolean,
   '     "interval" ,
   '   fk_interval_unit ,
   '
   '   for table clin_recalls.lu_recall_intervals
   '     fk_reason
   '     fk_default_interval
   '     fk_default_interval_unit
   '--------------------------------------------------------------

   Dim recall As New Collection

End

Public Sub Auto_Graph(observations As Collection)
   '-----------------------------------------------------------------------
   'An embyronic auto-graphing routine - graphs only abnormals in a result
   'Puts toolbuttons below the graph - each has the name of the test result
   'and its tag = the loinc code of that test
   'Really really bad code.... perhaps you can fix it
   '-----------------------------------------------------------------------

   Dim observation As Collection
   Dim tb As ToolButton
   Dim hCtrl As Control
   Dim sLoinc As String
   Dim sFirstMeasurement As String
   Dim sFirstLoinc As String
   Dim Buttoncount As Integer

   Inc Application.Busy
   '-----------------------------------------------
   'Remove any existing toolbuttons below the graph
   '-----------------------------------------------
   For Each hCtrl In Form_Graph.pnlToolButtons.Children
      hCtrl.Delete()
   Next
   '------------------------------------------------------------
   'For each test result, if it has a loinc code and is abnormal
   'add a button below the graph with its name on it
   'At moment, I've limited the loinc's able to be displayed to
   'common ones, but no reason why the whole loinc table couldn't
   'be used, but would need to be cached in memory
   '------------------------------------------------------------
   For Each observation In observations
      '-------------------------------------
      'Is this loinc, one we want to graph?
      '------------------------------------
      sLoinc = ""
      If Not IsNull(observation!abnormal) Then
         'variations for this field for normality in HL7 I've encountered beleive it or not are these
         If Trim(observation!abnormal) <> "N" Then '"N", " ", ""
            '-----------------------------------------------
            'If it is abnormal, then graph it
            'Keep first abnormal, it will be the first graph
            '-----------------------------------------------
            If Buttoncount = 0 Then
               sFirstMeasurement = observation!identifier
               Try sFirstLoinc = observation!loinc
            Endif
            Try sLoinc = observation!loinc
            '-------------------------------------------------------
            'Add a new toolbutton under the graph, common handler
            'It's tag is its loinc, its text label = the measurement
            '--------------------------------------------------------
            If sLoinc <> "" Then
               With tb = New ToolButton(Form_Graph.pnlToolButtons) As "graph_buttons"
                  .name = observation!loinc
                  .tag = observation!loinc
                  .autoresize = True
                  .border = True
                  .height = 18
                  .text = observation!identifier
               End With
               Inc Buttoncount
            End If
         Else
            '----------------------------------------------------
            'It is flagged as normal, but we may want to graph it
            '----------------------------------------------------
            Select Case observation!loinc
               Case const.Loinc_UltraSensPSA, const.Loinc_TotalPSA, const.Loinc_EGFR, const.Loinc_HBA1c, const.loinc_INR, const.Loinc_TSH, const.Loinc_FreeF4, const.Loinc_FreeT3, const.Loinc_CReactiveProtein
                  If Buttoncount = 0 Then
                     sFirstMeasurement = observation!identifier
                     Try sFirstLoinc = observation!loinc
                  Endif
                  With tb = New ToolButton(Form_Graph.pnlToolButtons) As "graph_buttons"
                     .name = observation!loinc
                     .tag = observation!loinc
                     .autoresize = True
                     .border = True
                     .height = 18
                     .text = observation!identifier
                  End With
                  Inc Buttoncount
            End Select
         End If
      Else
         '--------------------------------------------------------
         'Not abnormal, but one we want to graph, eg INR/HBa1c etc
         '--------------------------------------------------------
         Select Case observation!loinc
            Case const.Loinc_UltraSensPSA, const.Loinc_TotalPSA, const.Loinc_EGFR, const.Loinc_HBA1c, const.loinc_INR, const.Loinc_TSH, const.Loinc_FreeF4, const.Loinc_FreeT3, const.Loinc_CReactiveProtein
               If Buttoncount = 0 Then
                  sFirstMeasurement = observation!identifier
                  Try sFirstLoinc = observation!loinc
               Endif
               With tb = New ToolButton(Form_Graph.pnlToolButtons) As "graph_buttons"
                  .name = observation!loinc
                  .tag = observation!loinc
                  .autoresize = True
                  .border = True
                  .height = 18
                  .text = observation!identifier
               End With
               Inc Buttoncount
         End Select
      End If

   Next

   '-----------------------------------------------------------------
   'finally, show the first abnormal measurement as the default graph
   '-----------------------------------------------------------------
   If Buttoncount Then
      If sFirstLoinc <> "" Then Show_Graph(sFirstLoinc, sFirstMeasurement)
   End If
   Dec Application.Busy
Catch
   Dec Application.Busy

End

Public Sub Graph_Buttons_click()
   '----------------------------------------------------------
   'User has clicked on a button underneath the embedded graph
   '----------------------------------------------------------

   Try Show_Graph(Last.tag, Last.text)

End

Public Sub Show_Graph(loinc As String, measurement As String)
   '------------------------------------------------
   'Show graph of this loinc code's values over time
   '------------------------------------------------

   Form_Graph.Graph(currentconsult, loinc, measurement)
   tlMissingProvider.Visible = False
   Form_Graph.Visible = True

End

Public Sub Image_File_Show()

   Document_HTML = ""
   VSplit_Document.Visible = False
   Vbox_PDf.Visible = False
   Vbox_Images.visible = True
   modUtil.Kill_If_Temp(pfile)
   pfile = modFiles.Get("document_archiving_directory", selecteddocument!source_file)
   Pbox.picture = Picture.Load(pfile)

End

Public Sub Form_Close()

   modUtil.Kill_If_Temp(pfile)

End

Public Sub PDF_Document_Show()

   Document_HTML = ""
   VSplit_Document.Visible = False
   Vbox_Images.Visible = False
   Vbox_PDf.Visible = True
   With PDForm
      .TxtFind.text = ""                      'remove any text user previously searching for
      .hPdf.Orientation = PdfDocument.Normal  'could have previously been rotated
      .Load_PDF(modFiles.Get("document_archiving_directory", selecteddocument!source_file))
   End With

End

Public Sub cvwInbox_Select()

   cvwPatientsRequests.Clear()
   cvwInbox.MoveCurrent()                                     'sets internal cursor to match whats visible
   Selected_Inbox = Inbox[cvwInbox.Item.Key]                 'create SelectedPatient collection
   Form_ActionDocument.EmbeddedForms_Reset()                 'if exists, set all cons to null
   If Selected_Inbox!fk_patient Then
      cvwPatientsRequests.Clear()
      cvwPatientsRequests.tag = 0
      currentconsult = New CConsult(Selected_Inbox)           'Each patient has a new consult
      currentconsult.Set(const.ConsultType_Added_From_Inbox, "importing document")
      Tabstrip1.index = 0                                     'tab which has document viewer
      Form_ActionDocument.Init_Cons(currentconsult)           'pass current cons to Any actioning forms
      With Form_Recall
         .Init(currentconsult)
         .New_Entry()                                         'default to new recall entry
      End With
      Try Form_PreviousNotes.Close()
      With Form_PreviousNotes = New FProgressNotesViewer(Vbox_PreviousNotes)
         .Init(currentconsult, modProgressNotes.AllProgressNotes_Construct_Html(currentconsult))
      End With
      Try Form_HealthIssues.Close()
      '   With Form_HealthIssues = New FPastHistory(Vbox_HealthIssues)
      '      .Init(currentconsult)
      '      .set_embedded(True, "FInbox")
      ' '     .HBox_Buttons.Visible = True  'need save/new buttons in FClinical these are not visible
      '      .HealthIssue_New()            'default to new health issue
      '   End With
      ' Try Form_ProgressNotes.Close()
      ' With Form_ProgressNotes = New FProgressNotePage(Vbox_ProgressNotes)
      '     .Set_Embedded_Form("FInbox")
      '     .Init(currentconsult, "Progress notes pertaining to this document")
      '     .HBox_Save.Visible = True
      ' End With
      Form_ActionDocument.Tabstrip1.index = Metadata_tab       'user only sees metadata first
      Patient_Outstanding_Requests_Show()                     'show requests for this category of provider
      TabStrip1.Enabled = True
   Else
      TabStrip1.Enabled = False
   End If
   '-------------------------------------------------------------------------
   'Refresh the list of individual documents for this staff member or patient
   'and highlight the first row in the list
   '--------------------------------------------------------------------------
   Document_RefreshList

End

Public Function Document_File() As Boolean
   '---------------------------------------------
   'First, is this a non patient document?
   'If so, then filing = "I've read this document
   '---------------------------------------------

   tbFile.Enabled = False
   If Selected_Inbox!fk_patient = 0 Then
      Form_ActionDocument.FMetaData.Document_SignOff(SelectedDocument)        'Record who signed off the document, when
      modArchiveDocumentsDBI.Save(["pk_document": SelectedDocument!pk_document, "concluded": True])
      modDBConnect.CommitTrans()
   Else
      If Not Valid_Document() Then
         tbFile.Enabled = True
         Return                 'some inbox-related validation
      End If
      modDBConnect.BeginTrans()                           'start transaction NOOP
      Unmatched_Patient_Reconcile()                       'reconcile any just-matched unkown patients
      If Not Form_ActionDocument.FMetaData.Save() Then                        'file document, unsucessful
         modDBConnect.RollBack()                          'roll back transaction FIXME does this work?
         tbFile.Enabled = True
         Return False
      End If
      modAudit.MakeAudit(currentconsult, "viewed and filed document", "documents.documents", SelectedDocument!pk_document, const.cSection_Documents, "")
      modDBConnect.CommitTrans()                          'success - commit transaction
   End If
   Selected_Inbox!documents.Remove(gvwInboxDocuments.row)
   Document_RefreshList()                                'refresh the documents list or clears it if none left
   tbFile.Enabled = True
   Return True
Catch
   Message.info("An error occurred whilst trying to file the document.\n\nIf this persists please contact technical support")
   Return

End

Public Sub Unmatched_Patient_Reconcile()

   Dim fk_patient As Integer

   If Not IsNull(Selected_Inbox!fk_unmatched_patient) Then
      fk_patient = Form_ActionDocument.FMetaData.get_fk_patient()
      modInboxDBI.Document_SetPatientFK(fk_patient, Selected_Inbox!fk_unmatched_patient)
      modInboxDBI.Unmatched_Patient_Mark_Resolved(Selected_Inbox!fk_unmatched_patient, fk_patient)
   End If

End

Public Function Unmatched_Patient() As Boolean

   Dim sString As String

   If Not IsNull(Selected_Inbox!fk_unmatched_patient) Then
      If Form_ActionDocument.FMetaData.get_fk_patient() Then Return 'if non zero has already been matched
      If IsNull(FMessage) Then
         FMessage = New FGenericHTMLMessage
      End If
      With FMessage
         .Caption = "Inbox Error"
         .lblHeading.text = "Result Cannot be Filed"
         .lblHeading.text = "<P>"
         sString = Selected_Inbox!firstname & " "
         sString &= Selected_Inbox!surname
         .textlabel1.text = "<B>Patient : </B>" & sstring & "<BR>"
         .textlabel1.text &= "<B>Result : </B>" & gvwInboxDocuments[gvwInboxDocuments.row, 1] & " (Lab Name)<BR>"
         .textlabel1.text &= "<B>Problem: </B> no match for the patient "
         .textlabel1.text &= "was found in the database.<BR><BR>"
         .textlabel1.text &= "Possible causes for this may be:<BR>"
         .textlabel1.text &= "<UL>"
         .textlabel1.text &= "<LI>The patient may not be in the contact database"
         .textlabel1.text &= "<LI>The patient may be in the contact database "
         .textlabel1.text &= "but the details may have been mis-spelt either "
         .textlabel1.text &= "in the contact database or by the sending provider.<BR>"
         .textlabel1.text &= "We have tried all sorts of things before suggesting "
         .textlabel1.text &= "this such as swapping firstname/lastname, initials etc during out attempt to make a match."

         .textlabel1.text &= "<LI>You may have been sent this result in error - if "
         .textlabel1.text &= "you suspect this discuss with the message provider."
         .textlabel1.text &= "<LI>EasyGP may have bugged out though this is unlikely - "
         .textlabel1.text &= "please enter a bug report"
         .textlabel1.text &= "</UL>"
         .textlabel1.text &= "<P>You can search the contacts database by typing the patients surname "
         .textlabel1.text &= "in the textbox labeled ** UNMATCHED ** - currently highted in red, and select the correct name from the list.</P>"
         .textlabel1.text &= "<P>If you can't fix up the name and address problem in the contacts database then "
         .textlabel1.text &= "as an interim solution to clear your inbox of this record you can "
         .textlabel1.text &= "right mouse click on the patients name, and select the following option "
         .textlabel1.text &= "'Move to holding file', then ask your system-admin to fix the problem.</P>"

         .textlabel1.text &= "<P>If you are absolutely certain this result is irrelevant e.g this was a "
         .textlabel1.text &= "fictitious patient in a test file, then right mouse click on the patient's name "
         .textlabel1.text &= "and send all associated results to a black hole never to be seen again. "
         .textlabel1.text &= "Your actions will however be recorded for posterity( Or an audit).</P>"

         .btnCancel.Visible = False
         .pnlRight.Visible = True
      End With

      Return True
   Else
      Return False
   End If

End

Public Sub tbFile_Click()
   '---------------------------------------------------------------
   'User wants to file this document, if successful, attempts to
   'show the next document for the patient, if none left, attempts
   'to go to the next row of the inbox.
   '---------------------------------------------------------------

   If Not gvwInboxDocuments.Rows.count Then Return    'nothing to file
   '---------------------------------------------
   'First, make sure no half completed staff tasks
   '----------------------------------------------
   If Not IsNull(Form_ActionDocument.FTasks) Then
      If Form_ActionDocument.FTasks.txtTaskDetails.text <> "" Or Form_ActionDocument.FTasks.txtStaffAllocated.text <> "" Then
         If Not Form_ActionDocument.FTasks.Save() Then
            Return
         End If
      End If
   End If
   ' Try Form_ProgressNotes.Save()
   If Not Document_File() Then Return                  'filing failed
   Wait
   Document_Display_Next()                             'success > show next document

End

Public Sub auto_file()

   '---------------------------------------------------------------
   'User wants to file this document, if successful, attempts to
   'show the next document for the patient, if none left, attempts
   'to go to the next row of the inbox.
   '---------------------------------------------------------------
   'Return               'HORST COMMENT THIS OUT
   If Not gvwInboxDocuments.rows.count Then Return      'no documents, no filing
   '---------------------------------------------
   'First, make sure no half completed staff tasks
   '----------------------------------------------
   If Not IsNull(Form_ActionDocument.FTasks) Then
      If Form_ActionDocument.FTasks.txtTaskDetails.text <> "" Or Form_ActionDocument.FTasks.txtStaffAllocated.text <> "" Then
         If Not Form_ActionDocument.FTasks.Save() Then
            Return
         End If
      End If
   End If
   ' Try Form_ProgressNotes.Save()
   If Not Document_File() Then Return              'filing failed
   Wait
   Document_Display_Next()

End

Public Sub Document_Display_Next()
   '--------------------------
   ' tbFile_Click()
   ' has called Document_File() which does validation/filing
   ' then removes the document from the list and refreshes it (the gvwInboxDocuments
   ' So now, if there are no rows left, Try and move to the next available InBox Collection
   ' If this fails, do a reload of the entire inbox (could be more waiting
   ' otherwise if there are rows left
   '
   '--------------------------

   Print "displaying next....."
   Vbox_ActionDocument.Enabled = False
   Form_ActionDocument.Tabstrip1.Index = Metadata_tab  'sucess. switch tab back to metadata
   If gvwInboxDocuments.rows.count = 0 Then             'no documents left?
      cvwInbox.MoveCurrent()                       'try and show next inbox item, usually next patient
      cvwInbox.Remove(cvwInbox.Item.key)
      Try cvwInbox.MoveFirst()
      Try cvwInbox.Item.Selected = True
      Wait
      ' Try auto_file()        'HORST UNCOMMENT THIS LINE FOR AUTO-FILE BUT DO NOT USE YET IS FAULTY
      If Error Then
         txtFilterDocuments.Clear()               'could be more, but filtered
         txtFilterPatient.Clear()
         cvwPatientsRequests.Clear()
         Inbox_Reload()
      End If
      bAutoFileAll = False                        'HORST DO NOT TOUCH THIS LINE
      bAutoFilePatient = False                    'HORST DO NOT TOUCH THIS LINE
   Else
      gvwInboxDocuments.Rows[0].Selected = True  'trigger showing the document
   End If

End

Public Sub synonyms_Reload()

   synonyms = const.Synonyms()

End

Public Function Fill_Inbox(Optional fk_sending_entity As Integer = 0, Optional limit As Integer = 0, Optional patient_filter As String, Optional sort_dir As String = "ASC") As Collection

   Dim sql As String
   Dim C As Collection
   Dim Document As Collection
   Dim fk_last_patient As String
   Dim fk_last_umatched_patient As String
   Dim patient As Collection
   Dim surname_firstname As String[]
   Dim x As Integer
   Dim total_doc_count As Integer

   With cvwInbox
      .Columns.count = 1
      .Clear()
   End With
   sql = "Select count(pk) as count  from documents.Documents Where concluded = false and deleted = False "
   total_doc_count = Str(modDBConnect.exec_query(sql)!count)
   sql = "Select * from documents.vwDocuments Where concluded = false and deleted = False "
   If fk_sending_entity Then
      sql &= "AND fk_sending_entity = " & fk_sending_entity & " "
   End If

   staff_member = staff_members[cmbStaffMembers.index]
   If IsNull(Staff_member!fk_staff) Then
      sql &= "And fk_unmatched_staff = " & Staff_member!fk_unmatched_staff
      With tlMissingProvider
         .foreground = color.Red
         .text = "<P>The recipient of this message was not found.</P> "
         "You will have to ask the system adminstrator to "
         "enter the correct details in the staff database before proceeding"
      End With
   Else
      sql &= " AND fk_staff_destination = " & staff_member!fk_staff
      tlMissingProvider.text = ""
   End If
   If Trim(txtFilterDocuments.text) Then
      sql &= " AND tag ILIKE $$%" & txtFilterDocuments.text & "%$$"
   Endif

   If patient_filter <> "" Then
      surname_firstname = Split(patient_filter, "'")
      Try sql &= " AND patient_firstname ILIKE $$" & surname_firstname[1] & "%$$"
      If Error Then
         sql &= " AND patient_surname ILIKE $$" & surname_firstname[0] & "%$$"
      Else
         sql &= " AND patient_surname ILIKE $$" & surname_firstname[0] & "%$$"
      Endif

   Endif
   If chkOnlyRecent.Value = True Then
      'FIXME make me a global option
      sql &= " AND date_created > '" & Format(DateAdd(Now, gb.month, -1), "dd/mm/yyyy") & "'::date"

   Endif
   sql &= " ORDER BY patient_surname, patient_firstname, unmatched_patient_surname, unmatched_patient_firstname, date_created " & sort_dir
   If limit Then
      sql &= " LIMIT " & limit
   End If
   Documents = modDBConnect.exec_query_collection(sql)   'all the documents in the inbox
   If Not Documents.count Then
      tlOutstandingStaffMember.Visible = False
      tlOutstandingStaffMember.text = staff_member!title & " " & staff_member!wholename & ":0"  'do not change from staff_member!
      tlOutstandingAllStaff.text = Str$(total_doc_count) & " unread documents for other staff"
      Return
   End If
   If total_doc_count - Documents.count <> 0 Then
      tlOutstandingAllStaff.Visible = True
      tlOutstandingAllStaff.text = Str$(total_doc_count - Documents.count) & " unread documents for other staff"
   Else
      tlOutstandingAllStaff.Visible = False
   End If
   tlOutstandingStaffMember.text = Str(Documents.count) & " unread documents for " & staff_member!title & " " & staff_member!wholename

   C = New Collection     'a misnomer content = who message intended for, or About Who
   For Each Document In Documents

      If IsNull(Document!fk_patient) Then
         If fk_last_patient <> Document!fk_unmatched_patient Then
            fk_last_patient = Document!fk_unmatched_patient
            patient = New Collection
            patient!documents = New Collection
            patient!fk_unmatched_patient = Document!fk_unmatched_patient
            patient!fk_person = Document!patient_fk_person
            patient!firstname = Document!unmatched_patient_firstname
            patient!surname = Document!unmatched_patient_surname
            patient!birthdate = Document!unmatched_patient_birthdate
            patient!sex = Document!unmatched_patient_sex
            patient!title = Document!unmatched_patient_title
            patient!wholename = patient!title & " " & patient!firstname & " " & patient!surname
            patient!street = Document!unmatched_patient_street
            patient!town = Document!unmatched_patient_town
            patient!postcode = Document!unmatched_patient_postcode
            x = cvwInbox.Count
            C.Add(patient, x)
            cvwInbox.Add(x, 0)
            cvwInbox[x][0] = document!unmatched_patient_surname & ", " & document!unmatched_patient_firstname
            If cvwInbox[x][0] = ", " Then
               cvwInbox[x][0] = "Non patient document"
            End If
         End If
      Else
         If fk_last_patient <> Document!fk_patient Then
            fk_last_patient = Document!fk_patient
            patient = New Collection
            patient!documents = New Collection
            patient!fk_person = Document!patient_fk_person
            patient!fk_patient = Document!fk_patient
            patient!firstname = Document!patient_firstname
            patient!surname = Document!patient_surname
            patient!birthdate = Document!patient_birthdate
            patient!sex = Document!patient_sex
            patient!title = Document!patient_title
            patient!wholename = patient!title & " " & patient!firstname & " " & patient!surname
            patient!age_display = Str(Document!patient_age)
            patient!street = Document!patient_street
            patient!town = Document!patient_town
            patient!postcode = Document!patient_postcode
            x = cvwInbox.Count
            C.Add(patient, x)
            cvwInbox.Add(x, 0)
            cvwInbox[x][0] = document!patient_surname & ", " & document!patient_firstname
            If cvwInbox[x][0] = ", " Then
               cvwInbox[x][0] = "Non patient document"
            End If
         End If
      End If
      C[x]!documents.Add(Document, C[x]!documents.Count)
   Next
   Dec Application.Busy
   Return C

End

Public Function Fill_Inbox_orig(Optional fk_sending_entity As Integer = 0, Optional limit As Integer = 0, Optional patient_filter As String, Optional sort_dir As String = "ASC") As Collection

   Dim sql As String
   Dim C As Collection
   Dim Document As Collection
   Dim fk_last_patient As String
   Dim fk_last_umatched_patient As String
   Dim patient As Collection
   Dim surname_firstname As String[]
   Dim x As Integer
   Dim total_doc_count As Integer

   With cvwInbox
      .Columns.count = 1
      .Clear()
   End With
   sql = "Select count(pk) as count  from documents.Documents Where concluded = false and deleted = False "
   total_doc_count = Str(modDBConnect.exec_query(sql)!count)
   sql = "Select * from documents.vwDocuments Where concluded = false and deleted = False "
   If fk_sending_entity Then
      sql &= "AND fk_sending_entity = " & fk_sending_entity & " "
   End If

   staff_member = staff_members[cmbStaffMembers.index]
   If IsNull(Staff_member!fk_staff) Then
      sql &= "And fk_unmatched_staff = " & Staff_member!fk_unmatched_staff
      With tlMissingProvider
         .foreground = color.Red
         .text = "<P>The recipient of this message was not found.</P> "
         "You will have to ask the system adminstrator to "
         "enter the correct details in the staff database before proceeding"
      End With
   Else
      sql &= " AND fk_staff_destination = " & staff_member!fk_staff
      tlMissingProvider.text = ""
   End If
   If Trim(txtFilterDocuments.text) Then
      sql &= " AND tag ILIKE $$%" & txtFilterDocuments.text & "%$$"
   Endif

   If patient_filter <> "" Then
      surname_firstname = Split(patient_filter, "'")
      Try sql &= " AND patient_firstname ILIKE $$" & surname_firstname[1] & "%$$"
      If Error Then
         sql &= " AND patient_surname ILIKE $$" & surname_firstname[0] & "%$$"
      Else
         sql &= " AND patient_surname ILIKE $$" & surname_firstname[0] & "%$$"
      Endif

   Endif
   If chkOnlyRecent.Value = True Then
      'FIXME make me a global option
      sql &= " AND date_created > '" & Format(DateAdd(Now, gb.month, -1), "dd/mm/yyyy") & "'::date"

   Endif
   sql &= " ORDER BY patient_surname, patient_firstname, unmatched_patient_surname, unmatched_patient_firstname, date_created " & sort_dir
   If limit Then
      sql &= " LIMIT " & limit
   End If
   Documents = modDBConnect.exec_query_collection(sql)
   If Not Documents.count Then
      tlOutstandingStaffMember.Visible = False
      tlOutstandingStaffMember.text = staff_member!title & " " & staff_member!wholename & ":0"  'do not change from staff_member!
      tlOutstandingAllStaff.text = Str$(total_doc_count) & " unread documents for other staff"
      Return
   End If
   If total_doc_count - Documents.count <> 0 Then
      tlOutstandingAllStaff.Visible = True
      tlOutstandingAllStaff.text = Str$(total_doc_count - Documents.count) & " unread documents for other staff"
   Else
      tlOutstandingAllStaff.Visible = False
   End If
   tlOutstandingStaffMember.text = Str(Documents.count) & " unread documents for " & staff_member!title & " " & staff_member!wholename

   C = New Collection     'a misnomer content = who message intended for, or About Who
   For Each Document In Documents

      If IsNull(Document!fk_patient) Then
         If fk_last_patient <> Document!fk_unmatched_patient Then
            fk_last_patient = Document!fk_unmatched_patient
            patient = New Collection
            patient!documents = New Collection
            patient!fk_unmatched_patient = Document!fk_unmatched_patient
            patient!fk_person = Document!patient_fk_person
            patient!firstname = Document!unmatched_patient_firstname
            patient!surname = Document!unmatched_patient_surname
            patient!birthdate = Document!unmatched_patient_birthdate
            patient!sex = Document!unmatched_patient_sex
            patient!title = Document!unmatched_patient_title
            patient!wholename = patient!title & " " & patient!firstname & " " & patient!surname
            patient!street = Document!unmatched_patient_street
            patient!town = Document!unmatched_patient_town
            patient!postcode = Document!unmatched_patient_postcode

            x = cvwInbox.Count

            C.Add(patient, x)
            cvwInbox.Add(x, 0)
            cvwInbox[x][0] = document!unmatched_patient_surname & ", " & document!unmatched_patient_firstname
            If cvwInbox[x][0] = ", " Then
               cvwInbox[x][0] = "Non patient document"
            End If

         End If
      Else
         If fk_last_patient <> Document!fk_patient Then

            fk_last_patient = Document!fk_patient
            patient = New Collection
            patient!documents = New Collection
            patient!fk_person = Document!patient_fk_person
            patient!fk_patient = Document!fk_patient
            patient!firstname = Document!patient_firstname
            patient!surname = Document!patient_surname
            patient!birthdate = Document!patient_birthdate
            patient!sex = Document!patient_sex
            patient!title = Document!patient_title
            patient!wholename = patient!title & " " & patient!firstname & " " & patient!surname
            patient!age_display = Str(Document!patient_age)

            patient!street = Document!patient_street
            patient!town = Document!patient_town
            patient!postcode = Document!patient_postcode
            x = cvwInbox.Count

            C.Add(patient, x)
            cvwInbox.Add(x, 0)
            cvwInbox[x][0] = document!patient_surname & ", " & document!patient_firstname
            If cvwInbox[x][0] = ", " Then
               cvwInbox[x][0] = "Non patient document"
            End If
         End If
      End If
      C[x]!documents.Add(Document, document!pk_document)
   Next
   Dec Application.Busy
   Return C

End

Public Sub HTML_Document_Show(display_style As Integer, Doc As Collection, Document_observations As Collection)
   '-----------------------------------------------------------------------------------
   'Shows a html version of a hl7 document according to the sending entities properties
   'See Admin.HL7 Management.HL7 Sending Entities
   '-----------------------------------------------------------------------------------

   Vbox_PDf.Visible = False
   Vbox_Images.Visible = False
   VSplit_Document.Visible = True

   Document_HTML = modHL7Process.Construct_HTML(Selected_Inbox, Doc, Document_observations, bExcludePIT, bExcludeFTReport, display_style, fgc_errors, bgc_errors)
   Document_HTML = Replace(Document_HTML, "%filingas%", "")
   Form_ActionDocument.FMetaData.Document_HTML_Set(Document_HTML)
   lblFilingAs.text = "Filing as: " & Form_ActionDocument.FMetaData.txtUserObservationName.text
   FPreview_HtmlDocument.WebView1.html = Document_HTML

End

Public Sub rbDisplayFormat_Click()

   If Bexit = True Or IsNull(SelectedDocument) Then Return

   fk_lu_message_display_style = Last.tag
   SelectedDocument!fk_lu_message_display_style = Last.tag
   Try HTML_Document_Show(Last.tag, SelectedDocument, observations)
   '

End

Public Function SendingEntity_Recognised() As Boolean

   Dim y As Integer

   If Not IsNull(Selecteddocument!fk_sender_branch) Then
      If Selecteddocument!fk_sender_branch <> 0 Then
         Return True
      End If
   End If
   If Not IsNull(Selecteddocument!fk_employee_branch) Then
      If Selecteddocument!fk_employee_branch <> 0 Then
         Return True
      End If
   End If

   If Not IsNull(Selecteddocument!fk_sender_person) Then
      If Selecteddocument!fk_sender_person <> 0 Then
         Return True
      Endif
   Endif
   Return False

End

Static Public Sub ReAllocate_Staff_Member(fk_staff_destination As Integer)
   '------------------------------------------------------
   'This is only called from the FDocumentMetadata when
   'a staff member has been re-allocated, so must re-load
   'the current users inbox after updating the document
   '------------------------------------------------------

   form_inbox.Staff_Member_ReAllocate(fk_staff_destination)

End

Public Sub Staff_Member_ReAllocate(fk_staff_destination As Integer)

   Dim Document As New Collection
   Dim sMsg As String

   Message.Title = "Re-allocation of document"
   sMsg = "You have selected to re-allocate the recipient  of this document\n\n"
   "Are you sure?"
   If Message.Warning(sMsg, "Yes", "No") = 2 Then Return
   modDBConnect.BeginTrans()
   modArchiveDocumentsDBI.Re_Allocate_Recipient(SelectedDocument!pk_document, fk_staff_destination)
   modDBConnect.CommitTrans()

   Inbox_Reload()

End

Static Public Sub ReAllocate_Sender()

   form_inbox.Sender_ReAllocate()

End

Public Sub Sender_ReAllocate()
   '---------------------------------------------------------------------------
   'Reallocate the sender, however I've disabled the menu item which calls this
   'If this is re-used, please note the keys in this will be wrong
   'since I used the grid instead of the columnview
   '---------------------------------------------------------------------------

   '    Dim sMsg As String
   '    Dim oldFilename As String = SelectedDocument!source_file
   '    Dim newfilename As String 'new name of source file
   '    Dim Document As New Collection
   '    Dim NewTag As String
   '    Dim s As String
   '
   '    Return
   '    Select Case Form_ActionDocument.FMetaData.Contact_Type
   '       Case const.contacttype_organisation
   '          NewTag = Form_ActionDocument.FMetaData.Organisation!organisation
   '          If Form_ActionDocument.FMetaData.Organisation!branch <> "HEAD OFFICE" Then
   '             NewTag &= "." & Form_ActionDocument.FMetaData.Organisation!branch
   '          Endif
   '       Case const.contacttype_employee
   '          NewTag = Trim(Form_ActionDocument.FMetaData.Organisation!organisation) & "."
   '          NewTag &= Form_ActionDocument.FMetaData.Organisation!wholename
   '       Case const.contacttype_patient, const.contacttype_person
   '          NewTag = Trim(Form_ActionDocument.FMetaData.person!firstname) & " " & Trim(Form_ActionDocument.FMetaData.person!surname)
   '    End Select
   '
   '    Message.Title = "Re-allocation of document"
   '    sMsg = "You have selected to re-allocate the sender of this document from:\n\n"
   '    sMsg &= Replace$(SelectedDocument!tag, " - scanned document", "")
   '    sMsg &= "\n\nto\n\n" & NewTag
   '
   '    If Message.Warning(sMsg, "Yes", "No") = 2 Then Return
   '
   '    Document!pk_document = SelectedDocument!pk_document
   '    'lEAVE IN FOR 1 WEEK   Document!fk_sending_entity = modInboxDBI.SendingEntity_GetPK(Form_ActionDocument.FMetaData.Get_Document_Type(), Form_ActionDocument.FMetaData.Get_Display_Style(), newtag, Form_ActionDocument.FMetaData.fk_branch, Form_ActionDocument.FMetaData.fk_employee, Form_ActionDocument.FMetaData.fk_person)
   '    Document!fk_sending_entity = modInboxDBI.SendingEntity_GetPK(Form_ActionDocument.FMetaData.Get_Display_Style(), newtag, Form_ActionDocument.FMetaData.fk_branch, Form_ActionDocument.FMetaData.fk_employee, Form_ActionDocument.FMetaData.fk_person)
   '    Document!originator = NewTag ' Form_ActionDocument.FMetaData.txtDocumentTag.text
   '    Document!tag = Document!originator & " - scanned document" 'FIXME WHAT IF THIS IS A RESULT - SHOULD NEVER HAPPEN HOWEVER
   '
   '    If Trim(Form_ActionDocument.FMetaData.txtPatient.text) <> "" Then
   '       newfilename &= Replace(Trim(Form_ActionDocument.FMetaData.txtPatient.text), " ", "_") & "." & modutil.DateString_Encode(Form_ActionDocument.FMetaData.lblbirthdate.text) & "." & Str(SelectedDocument!fk_patient) & "."
   '    Else
   '
   '    End If
   '    newfilename &= Replace(Document!originator, " ", "_") & "." & Str$(Document!pk_document) & "."
   '    newfilename &= File.Ext(Form_ActionDocument.FMetaData.txtFilename.text)
   '    Document!source_file = Lower(newfilename)
   '    modArchiveDocumentsDBI.Save(document, Selected_Inbox!documents[iSelectedDocument])
   '    s = modFiles.Get("document_archiving_directory", oldfilename)
   '    modFiles.Put("document_archiving_directory", Lower(newfilename), s)
   '    modUtil.Kill_If_Temp(s)
   '    modDBConnect.CommitTrans()
   '    Form_ActionDocument.FMetaData.Init("Allocated Documents")
   '    Inbox_Reload()
   ' Catch
   '    Log.ErrorMsg("error moving document FInbox.Sender_Reallocate: " & Error.Text & Error.Backtrace)
   '    Message.Error("Could not re-allocate, please see log")
   '    modDBConnect.RollBack()

End

Static Public Sub Disable_Filing()

   form_inbox.Allow_Filing(False)

End

Static Public Sub Reload_Patient(bReallocating As Boolean)

   form_inbox.Unmatched_Patient_Resolve(bReallocating)

End

Static Public Sub Document_Filed_As_Update(name As String)
   '--------------------------------------------------------
   'Do not remove this routine it is called from other forms
   'eg FMetadata, when user clicks the option button to
   'change from say a result to a letter
   '--------------------------------------------------------

   form_inbox.lblFilingAs.text = "Filing as: " & name

End

Public Sub Allow_Filing(Flag As Boolean)
   '------------------------------------------------------------------------------------------
   'Called from eg PDForm if it couldn't find a file (eg documents partition/path not mounted)
   'or from this form if file can be displayed
   '------------------------------------------------------------------------------------------

   tbFile.Enabled = Flag
   Form_ActionDocument.Enabled = Flag

End

Public Sub Filed_As_Update(name As String)
   '---------------------------------------------------------------
   'Do not remove this routine it is used in static routine above
   '-------------------------------------------------------------

   lblFilingAs.text = name

End

Public Sub Unmatched_Patient_Resolve(bReallocating As Boolean)

   Dim fk_patient As Integer
   Dim sMsg As String
   Dim sName As String
   Dim x As Integer
   Dim document_keys As Collection

   fk_patient = Form_ActionDocument.FMetaData.get_fk_patient()
   If bReallocating = False Then
      sName = SelectedDocument!unmatched_patient_title & " "
      sName &= SelectedDocument!unmatched_patient_firstname & " "
      sName &= SelectedDocument!unmatched_patient_surname & " "
      sName &= SelectedDocument!unmatched_patient_sex & " "
      If Not IsNull(SelectedDocument!unmatched_patient_birthdate) Then
         sName &= Format(SelectedDocument!unmatched_patient_birthdate, "dd/mm/yyyy") & " "
      End If
      sMsg &= sName & "\n\nhas been matched to the following existing patient:\n\n"
   Else

      If Not IsNull(SelectedDocument!patient_fk_person) Then
         sName = SelectedDocument!patient_title & " "
         sName &= SelectedDocument!patient_firstname & " "
         sName &= SelectedDocument!patient_surname & " "
         sName &= SelectedDocument!patient_sex & " "
         sName &= Format(SelectedDocument!patient_birthdate, "dd/mm/yyyy") & " "
         sMsg &= sName & "\n\nwill now be allocated to the following patient:\n\n"
      Else
         sMsg = "No previous patient was allocated.\n\nThis document will now be allocated to the following patient:\n\n"
      End If

   End If
   sname = Form_ActionDocument.FMetaData.txtPatient.text & " "
   sname &= Form_ActionDocument.FMetaData.lblBirthdate.text

   If mnuDocuments_ReAllocateMultiple.Enabled = True Then

      sMsg = "Multiple documents, currently allocated to\n\n" & sMsg
      sMsg &= "(Note: Be very careful - you have selected multiple documents to re-allocate!)\n\n"
   Else
      sMsg = "A single document currently allocated to\n\n" & sMsg
   Endif

   sMsg &= sName & "\n\nPlease confirm."
   Message.Title = "Confirm Patient Identity"
   If Message.warning(smsg, "Yes", "No") = 1 Then
      Selected_Inbox!fk_patient = fk_patient
      If bReallocating = False Then
         modInboxDBI.Document_SetPatientFK(fk_patient, SelectedDocument!fk_unmatched_patient)
         modInboxDBI.Unmatched_Patient_Mark_Resolved(SelectedDocument!fk_unmatched_patient, fk_patient)
      Else
         If mnuDocuments_ReAllocateMultiple.Enabled = True Then
            gvwInboxDocuments.row = 0                                  'move  to start
            For x = 0 To gvwInboxDocuments.count                       'check every item in the list
               If gvwInboxDocuments.Rows[x].Selected Then           'if it has been selected
                  modInboxDBI.Document_ReAllocate_To_Another_Patient(Selected_Inbox[gvwInboxDocuments.row]!pk_document, fk_patient) 'FIXME check this works with new grid
               Endif
            Next
         Else
            modInboxDBI.Document_ReAllocate_To_Another_Patient(SelectedDocument!pk_document, fk_patient)
         End If
      End If
      modDBConnect.CommitTrans()
   End If
   Inbox_Reload()
   cvwInbox_Select

End

Public Sub tbRefreshInbox_Click()

   Dim fk_sending_entity As Integer

   Inc Application.Busy
   Wait 1
   modHL7FileImport.Auto_Process()               'fixme remove me or at least make sure running on server
   cvwInbox.Clear()                               'clear everything from the inbox list of persons
   gvwInboxDocuments.Clear()
   Form_ActionDocument.FMetaData.EditArea_Clear() 'clear the document metadata
   FPreview_HtmlDocument.WebView1.html = ""       'clear the html in the webview
   If cmbSenders.index <> -1 Then                 'if user wants to filter on sender, set that
      fk_sending_entity = Sending_Entities[cmbSenders.Index]!pk_sending_entities
   Else
      fk_sending_entity = 0
   Endif
   Inbox = Fill_Inbox(fk_sending_entity, 2500, Trim(txtFilterPatient.text))   'fill all documents, limit FIXME UNHARD CODE ME
   If Not IsNull(Inbox) Then                       'Some items where found
      cvwInbox.MoveFirst()                         'move to first in the columnview
      If Not IsNull(cvwInbox.Item) Then
         cvwInbox.Item.Selected = True             'trigger the selected event
      Endif
   Else
      cmbSenders.index = -1                   'if this has been switched to a sender, reset to none
   Endif
   Dec Application.Busy

End

Public Sub chkResultFormatting_Click()

   If IsNull(SelectedDocument) Then Return
   Select Case Last.tag
      Case "exclude ft report"
         bExcludeFTReport = Last.value
      Case "exclude pit"
         bExcludePIT = Last.value
   End Select
   Try HTML_Document_Show(SelectedDocument!fk_lu_message_display_style, SelectedDocument, observations) 'display style = default of the vendor

End

Public Sub mnuWebView_Click()
   '----------------------------------------------------------
   'User has clicked on the popup graphing menu over web-view
   'over-ride that forms event, if no tag not a measurement
   'otherwise, attempt to graph it
   '----------------------------------------------------------

   Stop Event
   If IsNull(Last.tag) Then Return
   If IsNull(Observations[Last.tag]!loinc) Then
      Select Case Last.tag
         Case "auto recall"
            Auto_Recall
      End Select
      Return   'fixme see known bugs for this module
   Endif
   If Form_Graph.graph(currentconsult, Observations[Last.tag]!loinc, Observations[Last.tag]!identifier) Then
      tlMissingProvider.Visible = False
      Form_Graph.Visible = True
   End If

End

Public Sub WebView_Menu()

   Dim mnu As Menu
   Dim Observation As Collection

   Stop Event
   If Not currentconsult Or IsNull(Observations) Then Return

   FPreview_HtmlDocument.mnuWebView.Children.Clear()
   '--------------------------------------------
   'First, add some menu options for auto-recall
   '--------------------------------------------
   If InStr(Lower(SelectedDocument!tag), "pap smear") Then
      mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
      mnu.name = "mnuAutoREcall"
      mnu.caption = "Auto Recall"
      mnu.tag = "auto recall"
      mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
      mnu.name = "separator_2"
      mnu.caption = ""
   Endif
   mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
   mnu.name = "heading"
   mnu.caption = "Graph Cumulative"
   mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
   mnu.name = "separator_1"
   mnu.caption = "" '
   If Observations.count = 0 Then Return

   For Each Observation In Observations

      mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
      If Observation!value_type = "NM"                'graphable observation
         mnu.name = Observation!identifier
         mnu.caption = Observation!identifier
         mnu.tag = Observation!pk
         mnu.Checked = False
      End If
   Next

   FPreview_HtmlDocument.mnuWebView.Popup()

End

Private Sub Patient_Outstanding_Requests_Show()

   Dim x As Integer

   If cvwPatientsRequests.tag = 0 Then
      modEditAreaHelpers.Patient_Requests_Show(currentconsult, cvwPatientsRequests)
      cvwPatientsRequests.tag = Selected_Inbox!fk_patient
   End If

End

Public Sub cvwPatientsRequests_Click()

   Dim bits As String[]

   bits = Split(Last.item.key, "-")
   If Split(Last.item.key, "-").count = 2
      If Not (InStr(Lower(Form_ActionDocument.FMetaData.txtUserObservationName.text), Lower(Last[Last.item.key][0]))) Then
         Form_ActionDocument.FMetaData.txtUserObservationName.text &= Last[Last.item.key][0] & ";"
         RequestOrdered = currentconsult!requests_ordered[Last.item.key]
      End If
   End If

End

Public Sub chkUnmatchedDocuments_Click()

   bIncludeUnmatcheddocuments = Last.value
   Inbox_Reload()

End

Public Sub mnuDocuments_Click()

   Dim x As Integer
   Dim D As Collection
   Dim audit_notes As String

   Select Case Last.tag

      Case "move to my library", "copy to my library", "copy to patient handouts", "move to patient handouts"

         FInboxTransferToLIbrary.Init(SelectedDocument, currentconsult, Last.tag)
         FInboxTransferToLIbrary.ShowModal()

      Case "mark deleted", "delete - duplicate document", "delete - preliminary result"            'deletes a document and enforces an audit trail
         If IsNull(SelectedDocument!tag_user) Then
            Document_Delete(Last.tag, SelectedDocument!tag)
         Else
            Document_Delete(Last.tag, SelectedDocument!tag_user)
         Endif
         Inbox_Reload()
      Case "undo delete"                          'unmark the previous document as deleted
         For Each D In Deleted_Documents
            If modArchiveDocumentsDBI.UnDelete(currentconsult, d!pk_document, const.cSection_Documents) Then
               modDBConnect.CommitTrans()
               Deleted_Documents.Remove(d!pk_document)
               Inbox_Reload()
               Break
            Endif
         Next
      Case "move to reports due" 'tags this document as a report due effectively removing it from the inbox.

      Case "delete selected"
         modutil.NotImplemented("Multiple Document Deletion")
      Case "delete - sent in error"
         '    If Message.Warning("Please confirm that the patient to whom these documents are allocated, is not a patient of this practice", "Confirm - not our patient", "Cancel") = 2 Then Return
         '    gvwInboxDocuments.MoveFirst()
         '    For x = 1 To gvwInboxDocuments.rows.count
         '       If gvwInboxDocuments.Item.Selected = True Then
         '          iSelectedDocument = gvwInboxDocuments.row
         '          If IsNull(Selected_Inbox!documents[iSelectedDocument]!tag_user) Then
         '             audit_notes = Selected_Inbox!documents[iSelectedDocument]!tag
         '          Else
         '             audit_notes = Selected_Inbox!documents[iSelectedDocument]!tag_user
         '          Endif
         '          If modArchiveDocumentsDBI.Delete(currentconsult, Selected_Inbox!documents, iSelectedDocument, const.cSection_Inbox, Last.tag, audit_notes) Then
         '             modDBConnect.CommitTrans()
         '             Deleted_Documents.Add(SelectedDocument, iSelectedDocument)            'keep for undelete
         '          End If
         '       Endif
         '       gvwInboxDocuments.MoveNext()
         '    Next
         '    Inbox_Reload()
      Case "fonts"
         modutil.Columnview_SetFont(gvwInboxDocuments, "Inbox")

      Case "reallocate single", "reallocate multiple" 'currently menu item is  hidden
         ' SelectedDocument!fk_patient = Null
         ' With Form_ActionDocument.FMetaData
         '    .txtStreet1.text = ""
         '    .txtSuburb.text = ""
         '    .Reallocate()
         '    .rbTypeSender_Organisation.Value = True
         ' End With
      Case "display as result"
         For x = 0 To gvwInboxDocuments.rows.count
            gvwInboxDocuments.row = x
            If gvwInboxDocuments.Rows[x].Selected = True Then
               '   iSelectedDocument = gvwInboxDocuments.Row
               If modArchiveDocumentsDBI.Change_Display_Mode(currentconsult, selecteddocument, const.Document_Display_As_Result, const.cSection_Inbox, "") Then
                  modDBConnect.CommitTrans()
               Endif
            End If
         Next
         Inbox_Reload()
      Case "display as letter"
         If modArchiveDocumentsDBI.Change_Display_Mode(currentconsult, selecteddocument, const.Document_Display_As_Letter, const.cSection_Inbox, "") Then
            Inbox_Reload()
         Endif
      Case "refile"
         Document_SendBack_For_ReFiling()
      Case "reallocate sender"  'curently menu item is hidden
         ' With Form_ActionDocument.FMetaData
         '    .Init("Re_Allocate Sender")
         '    .Reset_Keys()
         '    .txtFindSender.SetFocus()
         ' End With
   End Select

End

Public Function Document_Make_Audit(SelectedDocument As Collection, iAuditAction As Integer, Optional reason As String) As Collection
   '---------------------------------------------------
   'Constructs a string for the notes part of the audit
   'uses modAudit.MakeAudit(..) to do the audit
   'Ian,pretty much a mess, don't touch, I'll fix
   '---------------------------------------------------

   Dim audit_notes As String
   Dim audit As New Collection 'fixme - fix and remove this and references to it in here collection not needed

   If SelectedDocument!fk_patient = 0 Then
      Message.Info("Richard, no patient")
      Return
   Endif
   audit_notes = ""

   Select Case iAuditAction
      Case const.cAuditAction_Delete

         If reason = "" Then
            FAudit.Init(Audit, Const.cSection_Documents, iAuditAction, currentconsult)
            If Not FAudit.ShowModal() Then Return
            Audit!reason = const.globalstring
         Else
            audit!reason = reason
         End If
      Case const.cAuditAction_StaffTaskAllocated

      Case const.cAuditAction_Completed
         audit!reason = "completed without reason being given"
      Case const.cAuditAction_Refused
         audit!reason = "nil reason given by patient"
      Case const.cAuditAction_DocumentFiled
         audit!reason = "viewed and filed document"
      Case const.cAuditAction_ScratchPad

      Case const.cAuditAction_MarkDeleted
         audit!reason = "moved to trash"

      Case const.cAuditAction_CompletedWithExplanation, const.cAuditAction_RefusedWithExplanation

   End Select
   'fixme remove this collection stuff above and from in here once its working.
   modAudit.MakeAudit(currentconsult, audit!reason, "documents.documents", SelectedDocument!pk_document, const.cSection_Documents, audit_notes)

   Return audit

End

Public Sub Document_Delete(audit_action As String, Optional audit_notes As String = "")
   '---------------------------------------------------------------
   'Delete currrently selected document, laying down an audit trail
   '---------------------------------------------------------------

   If modArchiveDocumentsDBI.Delete(currentconsult, SelectedDocument, const.cSection_Inbox, audit_action, audit_notes) Then
      modDBConnect.CommitTrans()
      Deleted_Documents.Add(SelectedDocument, fk_document)
   End If

End

Public Sub Document_RefreshList()
   '---------------------------------------------------------------------------------------------
   'Refreshes the list of documents associate with the current Inbox selection (usually a patient
   'The list shows date of creation and description eg FBC, or Letter from Mr Spec AList
   'Selected_Inbox!documents are keyed 0>n by default when all the Inbox collection was loaded
   'However as the gridview control doesnot have an 'index' like say a columnview
   'and this routine is used every time a document is filed, then we must re-order the collecition
   'on each refill
   '---------------------------------------------------------------------------------------------

   Dim document As Collection
   Dim x As Integer

   With gvwInboxDocuments
      .Clear()
      .Rows.count = 0
   End With
   Selected_Inbox!documents = modutil.Copy_Collection_Keyed_Sequentially(Selected_Inbox!documents)
   For Each document In Selected_Inbox!documents  'by default keyed 0>n see Inbox_Fill
      Inc gvwInboxDocuments.Rows.Count
      gvwInboxDocuments[x, 0].text = modUtil.Format_Date(document!date_created) & " "
      gvwInboxDocuments[x, 1].text = document!tag
      Inc x
   Next
   If gvwInboxDocuments.rows.count Then
      lblMeasure.font = gvwInboxDocuments.Font
      modutil.Gridview_Columns_Set_Size(gvwInboxDocuments, lblMeasure)
      gvwINboxDocuments.Row = 0
      gvwInboxDocuments.rows[0].Selected = True  'set the marquee
   End If

End

Public Sub Document_SendBack_For_ReFiling()
   '------------------------------------------------------------------------------------
   'User has decided there is something wrong with document allocation they cannot fix
   'eg, wrongly joined pages etc, not just simple things like wrongly allocated patients
   'so they send it back to clerical for re-filing. Only for scanned documents
   '------------------------------------------------------------------------------------

   If modArchiveDocumentsDBI.Document_SendBack_For_ReFiling(currentconsult, SelectedDocument) Then
      Inbox_Reload()
   Endif

End

Public Sub Document_SendBack_For_ReFiling_OLD()
   '------------------------------------------------------------------------------------
   'User has decided there is something wrong with document allocation they cannot fix
   'eg, wrongly joined pages etc, not just simple things like wrongly allocated patients
   'so they send it back to clerical for re-filing. Only for scanned documents
   '------------------------------------------------------------------------------------

   If modArchiveDocumentsDBI.Document_SendBack_For_ReFiling(currentconsult, Selected_Inbox!documents, fk_document) Then
      Inbox_Reload()
   Endif

End

Public Sub Document_SignOff()
   '------------------------------------------------------------
   'User has signed off the document, ie accepted responsibility
   '------------------------------------------------------------

   Dim signed_off As New Collection

   signed_off!fk_staff = modDBConnect.currentUser!fk_staff
   signed_off!fk_document = SelectedDocument!pk_document
   signed_off!date = Now()
   signed_off!pk = modInboxDBI.Document_SignOff(signed_off)

End

Public Sub mnuDocuments_Delete(bDeleteAll As Boolean, Optional reason As String)
   'Currently not used please do not delete this

   Dim x As Integer

   Message.Info("Richard in mnudocuments_Delete- stop and check this")
   ' If bDeleteAll Then cvwInboxDocuments.MoveFirst()
   ' For x = 1 To cvwInboxDocuments.count
   '    If bDeleteAll Then
   '       SelectedDocument = Selected_Inbox!documents[cvwInboxDocuments.Item.key]
   '       If Not Document_Delete(const.cAuditAction_Delete) Then Return
   '    Else
   '       cvwInboxDocuments.MoveCurrent()                  're-set was moved by the popup menu
   '       If cvwInboxDocuments.Item.Selected = True Then
   '          SelectedDocument = Selected_Inbox!documents[cvwInboxDocuments.Item.key]
   '          If Not Document_Delete(const.cAuditAction_Delete, reason) Then Return
   '       End If
   '    End If
   '    cvwInboxDocuments.MoveNext()
   ' Next
   ' Inbox_Reload()

End

Public Sub mnuNonPatientDocuments_Click()

   Dim x As Integer
   Dim D As Collection
   Dim audit_notes As String

   Message.Info("Richard Fix this routine")
   Select Case Last.tag
      Case "delete non patient document"            'deletes a non-patient document
         Message.Title = "Delete a non-patient document"
         If Message.Question("Are you sure you want to delete this document?", "Yes", "No") = 2 Then Return
         modDBConnect.update("documents.documents", Null, ["pk": SelectedDocument!pk_document, "deleted": True])
         modDBConnect.CommitTrans()
         Inbox_Reload()

      Case "move to my library", "copy to my library", "copy to patient handouts", "move to patient handouts"
         '  cvwInboxDocuments.MoveCurrent
         FInboxTransferToLIbrary.Init(SelectedDocument, currentconsult, Last.tag)
         FInboxTransferToLIbrary.ShowModal()
         Inbox_Reload()
      Case "delete - sent in error"
         If Message.Warning("Please confirm that the patient to whom these documents are allocated, is not a patient of this practice", "Confirm - not our patient", "Cancel") = 2 Then Return
         '   cvwInboxDocuments.MoveFirst()
         For x = 1 To gvwInboxDocuments.count
            If gvwInboxDocuments.Rows[x].Selected = True Then
               '  iSelectedDocument = cvwInboxDocuments.item.key
               If IsNull(Selected_Inbox!documents[gvwInboxDocuments.row]!tag_user) Then
                  audit_notes = Selected_Inbox!documents[gvwInboxDocuments.row]!tag
               Else
                  audit_notes = Selected_Inbox!documents[gvwINboxDocuments.row]!tag_user
               Endif
               'If modArchiveDocumentsDBI.Delete(currentconsult, Selected_Inbox!documents, iSelectedDocument, const.cSection_Inbox, Last.tag, audit_notes) Then
               If modArchiveDocumentsDBI.Delete(currentconsult, Selected_Inbox!documents[gvwInboxDocuments.row],, const.cSection_Inbox, Last.tag, audit_notes) Then
                  modDBConnect.CommitTrans()
                  Deleted_Documents.Add(SelectedDocument, fk_document)            'keep for undelete
               End If
            Endif

         Next
         Inbox_Reload()
   End Select

End

Public Sub cmbStaffMembers_Click()

   If Bexit Then Return
   Inbox_Reload()

End

Public Sub cmbSenders_Click()

   Last.pos = 0
   gvwInboxDocuments.Clear()         'WAIT or visually a 'grey hole' left after
   Wait                              'click activated and combo drop down removed
   Try tbRefreshInbox_Click()

End

Public Sub tbFile_KeyPress()

   If key.code = key.Return Then
      tbFile_Click()
   Endif

End

Public Sub txtFilterDocuments_Activate()

   Try tbRefreshInbox_Click()

End

Public Sub tbClearFilter_Click()

   txtFilterDocuments.Clear()
   Try tbRefreshInbox_Click

End

Public Function Valid_Document() As Boolean

   Dim sMsg As String
   Dim fk_patient As Integer
   Dim fk_unmatched_patient As Integer
   Dim fk_document As Integer
   Dim fk_lu_request As Integer 'fixme
   Dim D As New Collection
   Dim S As Collection
   Dim sql As String
   Dim diagnosis_guess As String
   Dim observation As Collection
   Dim button1_text As String
   Dim button2_text As String

   If Unmatched_Patient() Then Return

   Select Case Form_ActionDocument.FMetaData.iDisplay_As
      Case const.Document_Display_As_Result
         smsg = "Observation name:" & gvwInboxDocuments[gvwInboxDocuments.row, 1].text & "\n"
         smsg &= "User equivalent :" & Trim(Form_ActionDocument.FMetaData.txtUserObservationName.text) & "\n\n"
         "Often the name used by a company, i.e the name which it  delivers back, is not 'user-friendly' and dosn't correspond to the message content, nor what you ordered in the first place.\n\n"
         "We have attempted to match what you ordered, and outstanding requests are listed underneath the text of this message.\n\n"
         "To make it easier to view your messages later on, you should type an equivalent user name "
         "in the textbox labelled 'User name', or alternatively click on one or more names from what you ordered, to make the match.\n\n"
         "For example, a pathology result returned as 'Biochemistry', may have been ordered as "
         "'UEC;LFTs', which is pretty obvious if you examine the text of the message.\n\n"
         "If you cannot match from your ordering, then if you type in the user name textbox, a popup list will appear, you can choose one or more "
         "entries from the list sequentially, though you can use free text.\n\n"
         "Note, by convention, request names are separated by  ';' delimiter character.\n\n"
         "If the message is a letter from a specialist, you should type some sort of summary -"
         " e.g Operation report:cholecystectomy."

         If Trim(Form_ActionDocument.FMetaData.txtUserObservationName.text) = "" Then
            Message.Title = "Matching Delivered Request to What was Ordered"
            Message.info(sMsg)
            Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
            If Form_ActionDocument.Tabstrip1.index <> Metadata_tab Then
               Form_ActionDocument.Tabstrip1.Index = Metadata_tab
            End If
            Return
         End If
         If Not InStr(Lower(SelectedDocument!tag), "scanned") Then
            If SelectedDocument!tag <> "" Then
               If Not Synonyms_Update() Then
                  Message.Title = "User Term Not Found"
                  Message.info(sMsg)
                  Return
               End If
            End If
         End If
      Case const.Document_Display_As_Letter
         smsg = "Letter type:" & gvwInboxDocuments[gvwInboxDocuments.row, 1].text & "\n"
         smsg &= "Descriptive tag :%tag%\n\n"
         "Though not mandatory, to ensure the lists in your medical record system contain "
         "useful information it is advisable to put some sort of description of the letter contents.\n\n"
         "For example, if a hostpital discharge, or after hours visit, the reason eg 'Allergic Rash, or "
         "Insertion of Pacemaker"

         If Form_ActionDocument.FMetaData.txtUserObservationName.text = "" And Not IsNull(observations) Then 'scanned letters have no observation
            smsg = Replace$(sMsg, "%tag%", modParseDocument.Guess_Letter_Content(observations)) 'only really for GPAccess which has embedded ICPC diagnosis
         End If
         smsg = Replace$(sMsg, "%tag%", "")

         If Trim(Form_ActionDocument.FMetaData.txtUserObservationName.text) = "" Then
            Message.Title = "Adding a descriptor to the delivered document"
            If diagnosis_guess Then
               button1_text = "File with suggested descriptor"
               button2_text = "No, let me add my own descriptor"
            Else
               button1_text = "File without descriptor"
               button2_text = "Oops - Add Descriptor"
            End If
            Select Case Message.warning(sMsg, button1_text, Button2_text, "Skip descriptor - I'll wing it")
               Case 1
                  Form_ActionDocument.FMetaData.txtUserObservationName.text = diagnosis_guess
               Case 2
                  Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
                  If Form_ActionDocument.Tabstrip1.index <> Metadata_tab Then
                     Form_ActionDocument.Tabstrip1.Index = Metadata_tab
                  End If
                  Return
               Case 3
                  If Message.Warning("No descriptor will be added - File anyway.", "Yes", "No") = 2 Then
                     Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
                     If Form_ActionDocument.Tabstrip1.index <> Metadata_tab Then
                        Form_ActionDocument.Tabstrip1.Index = Metadata_tab
                     End If
                     Return
                  End If
            End Select
         End If
   End Select
   Return True

End

Public Sub timer1_Timer()

   Inc timer_count
   If bIniting Then
      timer1.Stop()
      synonyms_Reload()
      Inbox_Reload()
      bIniting = False
   Else

      If timer_count > 1 Then  'FIXME MAKE THESE USER CONFIGURABLE PER TYPING SPEED
         timer1.stop
         timer_count = 0
         Try tbRefreshInbox_Click()
      Endif
   End If

End

Public Sub txtFilterPatient_KeyRelease()

   timer_count = 0 'don't search for patient whilst typing

End

Public Sub txtFilterPatient_GotFocus()

   timer1.start

End

Public Sub txtFilterPatient_LostFocus()

   timer1.Stop

End

Public Sub cvwPatientsRequests_Select()

   Form_ActionDocument.context_date = "15/10/2010"

End

Public Sub tbGraph_Click()

   Stop Event
   Select Case Last.tag
      Case "remove"
         Form_Graph.Visible = False
         '  Vbox_OutstandingRequests.Visible = True
   End Select

End

Public Sub chkOnlyRecent_Click()

   Try tbRefreshInbox_Click()

End
