' Gambas class file
' Copyright (C) 2008-10 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
'INBOX
'
'PURPOSE       Display any document coming into the practice for staff members
'              A Document is defined loosely, it could be a scanned document
'              an email, a HL7 message  either for a patient or just junk mail
'              for one or more doctors
'DATABASE      See Schema Documents
'              Documents.Documents contains every single document - they end up here
'                                  either by the HL7 parser automatically putting them there
'                                  having matched patients (if fails > unmatched table)
'                                  or by staff having allocated a document from another source
'                                  eg scanning (see Clerical.Scanning.FArchiveDocuments)
'              Documents.sending_entities contains defaults for anyone who sends stuff
'              Run GUI: Admin.HL7 Management.HL7 Sending Entities 
'              Sources Source.Admin.HL7.FHLManagement
'
'HOW THIS WORKS: _New()
'                At Instantiation of this form Admin is prevented from accessing, calls Init()
'                Init()
'                A Timer is started, because otherwise I found that the gui dosn't come up
'                quickly enough as the database access slows this down, so look at Timer1.Timer()
'                Sending_Entities (collection) is loaded to describe their default options
'                timer1_Timer()Triggers And calls Inbox_Reload()
'                The inbox is filled with all unique names
'                The inbox though usually filled with patients names, may not be if the document
'                is not aimed so, i.e could be a staff circular
'                The first row of the inbox is automatically selected by the program and this then
'                fills the documents list with documents for that patient. The first of these is
'                automatically selected and the document displayed, by choosing the appropriate
'                viewer
'                       
'                All documents must be actioned at least by viewing the meta - data Of the document
'               and the user clicking File implicity means they have approved the document as 'OK'
'               The Form that does all the actioning, and indeed also contains the metadata form 
'               is FActionDocument - this is basically a tab control on form, and other forms
'               are embedded on each tab to enable document actioning:
'                 FDocumentMetadata - Alter the metadata
'                 FPrescriptions    - write a prescription (Not implemented)
'                 FRecalls          - write a recall
'                 FPastHistory      - add or later a past history item
'                 FStaffTasks       - allocate tasks to themselves or 1 or more staff members for this document
'                 FScratchPad       - write a scratch pad note 
'                + more... see the form.
'                
'BUGS           Probably plenty please email me rterry@pacific.net.au
'               Patient filter not working properly, something to  do with the timer.
'TODO           Implement a limit on documents in the inbox, currently set at (gulp) 2000
'               Implement the staff archives and viewing the documents audit trail.

'-----------------------------------------------------------------------------------------------
Private obs As Observer
'-------------
'Boolean flags
'-------------
Private bIniting As Boolean = True              'only  used to ensure gui loads before database accessed
Private bAutoFilePatient As Boolean             'if True this patients results will be auto-filed - used only by me
Private bAutoFileAll As Boolean                 'If true the entire inbox is auto filed  - used only by me
Private bexit As Boolean                        'used to prevent re-entry into routines
Private bIncludeUnmatcheddocuments As Boolean   'If true unmatched documents are included in the inbox
Private bExcludeFTReport As Boolean             'If true the FT Report segment is not shown in the html of the hl7 document
Private bExcludePIT As Boolean                  'If True the PIT segments are not shown in the html of the hl7 document
Private bRequestMatchFound As Boolean           'True if matching reuquest/result
Private bNoContext As Boolean                   'if true there are no context relevant notes
'-----------   
'Collections
'-----------
Private Staff_members As Collection             'Collection of all staff members in the surgery
Private Staff_member As Collection              'the currently selected staff member from the staff combo
Private Sending_Entities As Collection          'collection of documents.vwSendingEntities ie all who send documents
Private Inbox As Collection                     'the main inbox collection each member = collection of documents
Private RequestOrdered As Collection            'selected request which was ordered
Private Selected_Inbox As Collection            'the collection of documents for selected row in inbox (ie INbox[key])
Private SelectedDocument As Collection          'currently selected document
Private synonyms As Collection                  'collection matching a senders terms with readable users terms
Private Observations As Collection              'Any 'observations' ie measurement results, associated with a document
Private Documents As Collection 
'--------------
'Integer Values
'--------------
Private fk_lu_message_display_style As Integer  'const.Document_Display_As_Letter or  const.Document_Display_As_Result
Private Timer_Count As Integer                  'used to delay searching when using Timer1
Private fgc_errors As Integer = 16711680        'red foreground as default for errors
Private bgc_errors As Integer = 16777215        'yellow background as default for errors
Private iSelectedDocument As Integer            'Key to the inbox_Documents collection

Private currentconsult As CConsult  
Private EmbeddedForm As Object
Private Document_HTML As String 
'-------------------------------------------------------------------
'Constants to describe the tabs which action a document on tabstrip1
'--------------------------------------------------------------------
Private Const Metadata As Integer = 0
Private Const pasthistory As Integer = 1
Private Const script As Integer = 2
Private Const request As Integer = 3
Private Const recall As Integer = 4
Private Const scratch As Integer = 5
Private Const notes As Integer = 6
Private Const tasks As Integer = 7
Private Const appointment As Integer = 8
Private Const context As Integer = 9
'-------------------------------------------------------
'Constants to describe the main tabs at top of this form
'-------------------------------------------------------
Private Const cTabInbox As Integer = 0
Private Const CTabArchives As Integer = 1
Private Const cTabAudit As Integer = 2
'-------
'Strings
'-------
Private Form_ActionDocument As FActionDocument           'This form contains minimum 1 (FArchiveMetadata) actioning form
Private Form_PersonalArchives As FStaffInboxArchives     'Not Implemented yet - intended to be where we put inbox doc's not belonging to patient
Private FPreview_HtmlDocument As FHtmlViewer             'The main html viewer for hl7
Private PDForm As FPdf                                   'View any PDF files here
Private FAuditTrail As New FHtmlViewer                   'Not implemented - intended to allow viewing of audit trail on documents
Private FMessage As FGenericHTMLMessage                  'popup message box

Static Private Form_Inbox As FInbox                'allow access of this form globally
   

Public Sub _New()
   
   Init()                           'Initialse gui etc on the inbox tab
   Try Settings_Load()
   Form_Inbox = Me

End

Static Public Sub tbFile_SetFocus()
   '----------------------------------------------------------------------------------
   'Called from the embedded metadata form to set focus to the button to file document
   '----------------------------------------------------------------------------------   
   Form_Inbox.tbFile.SetFocus()
End

Public Sub Settings_Save()
   
   Settings["Inbox/HSplit_Document_" & Me.tag] = HSplit_Document.Layout
   Settings["Inbox/Vsplit_left_" & Me.tag] = Vsplit_left.Layout
   Settings["Inbox/VSplit_Document" & Me.tag] = VSplit_Document.Layout 
   ' Settings["Inbox/Results_Zoom"] = FPreview_HtmlDocument.Webview1.Zoom
   ' Settings["Inbox/Context_Zoom"] = Webview2.Zoom
   ' Settings["TabbedLists/cvwInboxDocuments.font"] = cvwInboxDocuments.font.ToString()     
   ' Settings["Inbox/HSplit_Inbox_Documents_Lists.Layout"] = HSplit_Inbox_Documents_Lists
  ' Try FTasks.Form_Settings("save")  'form my not be instantiated
   
End

Private Sub Settings_Load()

   Try HSplit_Inbox_Documents_Lists.Layout = Settings["Inbox/HSplit_Inbox_Documents_Lists.Layout"]
   Try VSplit_Document.Layout = Settings["Inbox/VSplit_Document" & Me.tag]
   Try Vsplit_left.Layout = Settings["Inbox/Vsplit_left_" & Me.tag]
   Try HSplit_Document.Layout = Settings["Inbox/HSplit_Document_" & Me.tag]
   Try FPreview_HtmlDocument.Webview1.Zoom = Settings["Inbox/Results_Zoom"] 
   Try cvwInboxDocuments.font = Font[Settings["TabbedLists/cvwInboxDocuments.font"]]
   Try cvwInbox.font = cvwInboxDocuments.font
   
End




Public Sub Init()
   
   If modDBConnect.IsAdmin Then Return                                  'admin obviously not allowed to file stuff
   timer1.start                                                         'delay loading inbox data until gui showing
   With Form_ActionDocument = New FActionDocument(Vbox_ActionDocument)
      .Init("Inbox")                                                    'Loads its own forms, initially only an instance of the document metadata
   End With
   staff_members = modUtil.LoadCombo(cmbStaffMembers, modInboxDBI.Inbox_Staff_Get(), "wholename")  'combo box filled with staff members
   cmbStaffMembers.index = cmbStaffMembers.Find(modDBConnect.currentUser!wholename)                'show name of current user in staff combo
   Sending_Entities = modUtil.LoadCombo(cmbSenders, modInboxDBI.Get_Document_Handling_Defaults(), "msh_sending_entity")
   cmbSenders.index = -1
   FPreview_HtmlDocument = New FHtmlViewer(HBox_HTML_Viewer)                                       'Form to show html of hl7 received
   obs = New Observer(FPreview_HtmlDocument.Webview1) As "mnuWebView"                              'over-ride menu on the web-view control
   obs = New Observer(Form_ActionDocument.FMetaData.txtUserObservationName) As "txtUserObservationName"                'detect when <enter> hit and file the document
   With PDForm = New FPdf(Vbox_PDf)                                                                'pdf form to show any scanned doc's
      .BtOpen.Visible = False
   End With
    cvwPatientsRequests.Columns.count = 2
    cvwInboxDocuments.Columns.count = 2
    tlMissingProvider.text = ""
                           "<HTML>"
                           "<P ALIGN=CENTER><B>Sending Entity Not found</B></P>"
                           "<P ALIGN=LEFT STYLE=\"font-weight: normal\">This document has been "
                           "received from a sending entity which we have not encountered before.</P>"
                           "<P ALIGN=LEFT STYLE=\"font-weight: normal\">Before you can deal with "
                           "this document, the system administrator will have to examine the file "
                           "and enter the details of the sending provider in the database.</P>"
                           "</HTML>"
    
   
End

Public Sub txtUserObservationName_Activate()
   '----------------------------------------------------------------------------------------
   'This textbox on Fmetadata is over-ridden because I want to automatically trigger 
   'filing  of the document when the user hits <enter> on this textbox - makes usage quicker
   '----------------------------------------------------------------------------------------  
   Stop Event
   If Last.tag = "user name" Then
      tbFile_Click()
   Endif
   
End




Public Sub cvwRequestsOrdered_Click()
   
End

Public Sub Get_Requests()
   
End

Public Function Synonyms_Update() As Boolean
   
   Dim syn As Collection 
   Dim sMsg As String 
   Dim synonym_exists As Boolean
   Dim bProvider_Synonym_Exists As Boolean
   Dim bUser_Synonym_Exists As Boolean
   Dim synonym As String
   Dim x As Integer
   Dim new_term As Collection 
   Dim terms As String[]
   Dim term As String
   Dim provider_term As Collection 
   Dim old_data As Collection          'not used but needed
   Dim pk_view As Integer           'not used but needed
   Dim Provider_Synonym As Collection 
   
   Dim Link_data As New Collection 
   Dim bSuccess As Boolean = True 'hope for the best
   
   
   If Right(Form_ActionDocument.FMetaData.txtUserObservationName.text) <> ";" Then
      Form_ActionDocument.FMetaData.txtUserObservationName.text &= ";"
   End If
   terms = Split(Form_ActionDocument.FMetaData.txtUserObservationName.text, ";", "", True)
   
   For Each Term In terms  
      
      For Each syn In synonyms
         
         If Lower(SelectedDocument!tag) = Lower(syn!provider_request_name) Then
            
            If Lower(term) = Lower(syn!user_request_name) Then
               bProvider_Synonym_Exists = True
               Break
            End If
         End If             
      Next
      
      If Not bProvider_Synonym_Exists Then
         
         chkAutoProcess.Value = False 
         Link_data = New Collection 
         Try Link_data!fk_lu_request = modRequestsDBI.Request_GetPk(term)
         If Error Then
            new_term = New Collection
            new_term!fk_lu_request_type = Form_ActionDocument.FMetaData.Get_Document_Type()
            new_term!item = term 
            new_term!fk_laterality = Form_ActionDocument.FMetaData.get_laterality()
            smsg = "The term '" & new_term!item & "' does not exist in the requests table.\n\n"
            sMsg &= "The following is very important. Some tests can be ordered for the left "
            sMsg &= "right, or both sides of the body.\n\n" 
            sMsg &= "If you want your requests to come up looking like this in the popup lists, your should answer 'Yes' to Add lateralisation:\n\n"
            sMsg &= new_term!item & " (LEFT)\n"
            sMsg &= new_term!item & " (RIGHT)\n"
            sMsg &= new_term!item & " (BOTH)\n\n"
            sMsg &= "Add Lateralisation?\n\n"
            
            Select Case Message.Warning(sMsg, "Yes - I want to see left/right/both ", "No - just add the term", "Cancel")
               Case 1
                  sMsg = "The term '" & new_term!item & "' will be added, and can be left/right/both sides of the body.\n\n"
               Case 2
                  sMsg = "The term '" & new_term!item & "' will be added without lateralisation.\n\n"
               Case 3
                  Return False   
            End Select
            If Message.Warning(sMsg & "Are you absolutely sure this is accurate?", "Yes", "No") = 2 Then
               Return False
            Else
                 Link_data!fk_lu_request = modRequestsDBI.Request_Save(old_data, pk_view, new_term)
            End If 
         End If
         
         Link_data!provider_request_name = SelectedDocument!tag
         Link_data!lateralisation = Form_ActionDocument.FMetaData.get_laterality()
         link_data!fk_lu_provider_user_request = modInboxDBI.Link_SendingEntity_Name_UserName(link_data)
         synonyms_Reload() 'should pickup if user typed same one in twice
      End If     
   Next
   
   Return bSuccess
   
End


Public Sub chkExcludeFTReport_Click()
   
   cvwInboxDocuments_Select()
   
End

Public Sub mnuPatientsInInbox_Click()
   
   Select Case Last.tag
      Case "delete from inbox"
         
      Case "move to holding file"
  
   End Select
   
End




Public Function Inbox_Reload()
   
   Inc Application.Busy
   lblSendingEntity.text = ""
   

   cvwInboxDocuments.Clear()
   FPreview_HtmlDocument.WebView1.html = "<HTML><BODY></BODY></HTML>"
   Form_ActionDocument.FMetaData.EditArea_Clear()
   Inbox = Fill_Inbox(0, 2000)   'fill all documents, limit FIXME UNHARD CODE ME
   cvwInbox.MoveFirst()          
   Try cvwInbox.Item.Selected = True   'Triggers loading of documents
   If Error Then
      Print Error.where, Error.Text
   End If
   Dec Application.Busy
   
End

Public Sub cvwInboxDocuments_Select() 
   
   Dim request As Collection
   Dim Guessed_user_Name As Collection 
   Dim item As Collection 
   Dim items As Collection 
   Dim file_ext As String 
   Dim observation As Collection 
   Dim sString As String 
   Dim x As Integer
   
   If bExit Or cvwInboxDocuments.count = 0 Then Return             'no documents > get outa here
   bRequestMatchFound = False                                      'default to cannot match to ordering
   cvwPatientsRequests.SelectAll(False)                            'remove marquee on list of ordered requests
   bExit = True
   
   cvwInboxDocuments.MoveCurrent()                                 'set internal cursor to visible row
   iSelectedDocument = cvwInboxDocuments.Item.key                  'key to Selected_Inbox!documents
   SelectedDocument = Selected_Inbox!documents[iSelectedDocument]  'set current document
   file_ext = File.Ext(SelectedDocument!source_file)
   With Form_ActionDocument
         .Set_Document(SelectedDocument)
         .FMetaData.Edit(Selected_Inbox!documents, iSelectedDocument)
   End With 
   chkExcludePIT.value = SelectedDocument!exclude_pit              'do/do not display PIT segments
   chkExcludeFTReport.value = SelectedDocument!exclude_ft_report   'do/do not display FT report
   fgc_errors = SelectedDocument!abnormals_foreground_color               'FIXME Put in user-defined to overide this
   bgc_errors = SelectedDocument!abnormals_background_color               'FIXME Put in user-defined to overide this
   ' 
   If Not SendingEntity_Recognised() Then            'If the sending entity for this document hasn't been verified
     ' Form_ActionDocument.TabStrip1.Enabled = False  'don't allow filing or editing admin must fix it first 
      Vbox_ActionDocument.Enabled = False
      tbDiscard.Enabled = False 
      tbFile.Enabled = False
      chkAutoProcess.Enabled = False  
      HBox_LowerLists.Padding = 10
      With tlMissingProvider
         .Foreground = color.Red
         .text = "<P ALIGN=CENTER><B>Unidentified HL7 Sender</B><P>"
         .text &= "The sender of this hl7 message cannot be found, the document may not be filed.<BR><BR>"
         .text &= "Please contact the System Administrator for assistance<BR><BR>"
                 "The Administrator can correct this via the Admin.Hl7Management tab"
         .Visible = True  
      End With
      Vbox_OutstandingRequests.Visible = False 
   Else
    ' Form_ActionDocument.TabStrip1.Enabled = True
      Vbox_ActionDocument.Enabled = True
      tbDiscard.Enabled = True 
      tbFile.Enabled = True
      chkAutoProcess.Enabled = True                              'temporary checkbox FIXME REMOVE ME FROM FORM
   End If
   
   If tlMissingProvider.Visible = False And SelectedDocument!fk_staff_destination Then
      tlMissingProvider.Visible = False
      Vbox_OutstandingRequests.Visible = True  
   Else
      
      Vbox_OutstandingRequests.Visible = False  
      If tlMissingProvider.Visible = False Then 
         With tlMissingProvider
            .Visible = True
            .text = "<P ALIGN=CENTER><B>Unidentified Recipient " & cmbStaffMembers.text & "</B><P>"
            .text &= "The staff member cannot be found, the document may not be filed.<BR><BR>"
            .text &= "This document may or may not be destined for this practice.<BR><BR>"
            .text &= "Please contact the System Administrator for assistance."
         End With   
      End If
   End If
   Form_ActionDocument.FMetaData.bexit = True
   If Lower(file_ext) <> "pdf" Then  'FIXME - add code to check not an image file
      Observations = modDBConnect.exec_query_collection("Select  * from documents.observations where fk_document =" & iSelectedDocument & " ORDER BY observation_date, set_id")
      
      If SelectedDocument!fk_lu_message_display_style <> const.Document_Display_As_Letter Then 
         Guessed_user_Name = modParseDocument.Guess_UserName(currentconsult, synonyms, SelectedDocument, Observations)
         If Guessed_user_Name!name <> "" Then
            Form_ActionDocument.FMetaData.txtUserObservationName.text = Guessed_user_Name!name
            Form_ActionDocument.FMetaData.txtUserObservationName.pos = 0
         End If   
         Select Case Guessed_user_Name!laterality
            Case const.LateralityLeft
               Form_ActionDocument.FMetaData.rbLateralityLeft.value = True  
            Case const.LateralityRight
               Form_ActionDocument.FMetaData.rbLateralityRight.Value = True   
            Case const.LateralityBoth
               Form_ActionDocument.FMetaData.rbLateralityBoth.Value = True
            Case Else
               Form_ActionDocument.FMetaData.rbLateralityNone.Value = True 
         End Select
      Else
         
         Form_ActionDocument.FMetaData.txtUserObservationName.text = modParseDocument.Guess_Letter_Content(observations)
      End If
   End If
   
   ShowDocument:
   '---------------------------------------------------------------------------------
   'Bumma, wheras 99.9% of msh_sending_entities supplied are same as their companies, 
   'some idiots who obviously programmed in the pre-dos area of 6 characters
   'concatenate the real name to something illedgible
   '---------------------------------------------------------------------------------
   Vbox_ActionDocument.Enabled = True  
   If Not IsNull(SelectedDocument!organisation) Then
      lblSendingEntity.text = SelectedDocument!organisation
   Else
      lblSendingEntity.text = SelectedDocument!msh_sending_entity
   End If
   Select Case Lower(file_ext)
      Case "pdf"
         PDF_Document_Show()
         Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
      Case "png", "jpeg", "tiff", "gif", "jpg"
         Image_File_Show()
         Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
      Case Else
         HTML_Document_Show(SelectedDocument!fk_lu_message_display_style, SelectedDocument, observations)
   End Select
   
   bexit = False
   Form_ActionDocument.FMetaData.bexit = False
   
   If Not bRequestMatchFound And cvwPatientsRequests.count Then
      
   End If
  

End

Public Sub Image_File_Show()
   
   Document_HTML = ""
   VSplit_Document.Visible = False 
   Vbox_PDf.Visible = False
   Vbox_Images.visible = True
   Pbox.picture = Picture.Load(modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/documents/") &/ selecteddocument!source_file)
   
End 

Public Sub PDF_Document_Show()
   
   Document_HTML = ""
   VSplit_Document.Visible = False 
   Vbox_Images.Visible = False   
   Vbox_PDf.Visible = True
   PDForm.Load_PDF(modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/documents/") &/ selecteddocument!source_file)
   
End

Public Sub cvwInbox_Select()
   
   cvwInboxDocuments.Clear()                                  'clear showing lists
   cvwPatientsRequests.Clear()
   cvwInbox.MoveCurrent()                                     'sets internal cursor to match whats visible
   Selected_Inbox = Inbox[cvwInbox.Item.Key]                 'create SelectedPatient collection 
   Form_ActionDocument.EmbeddedForms_Reset()                 'if exists, set all cons to null
   
   If Selected_Inbox!fk_patient Then 
      cvwPatientsRequests.Clear()
      cvwPatientsRequests.tag = 0
      
      currentconsult = New CConsult(Selected_Inbox)           'Each patient has a new consult 
      Form_ActionDocument.Init_Cons(currentconsult)           'pass current cons to Any actioning forms
      Form_ActionDocument.Tabstrip1.index = Metadata          'user only sees metadata first
      Patient_Outstanding_Requests_Show()                     'show requests for this category of provider
      
   End If
   Document_RefreshList()    'fill document list                              'display list of observations e.g list of tests, fbc, etc
   cvwInboxDocuments.MoveFirst   
   cvwInboxDocuments.Item.Selected = True                                      
   
End

Public Function Document_File() As Boolean
   
   Dim Audit As Collection
   
   If Not Valid_Document() Then Return                 'some inbox-related validation
   
   modDBConnect.BeginTrans()                           'start transaction NOOP
   Unmatched_Patient_Reconcile()                       'reconcile any just-matched unkown patients
   If Not Form_ActionDocument.FMetaData.Save() Then                        'file document, unsucessful 
      modDBConnect.RollBack()                          'roll back transaction FIXME does this work?
      Return False 
   End If   
   modConsultDBI.Make_Audit(Document_Make_Audit(SelectedDocument, const.cAuditAction_DocumentFiled), "documents", "documents")   
   modDBConnect.CommitTrans()                          'success - commit transaction
   Selected_Inbox!documents.Remove(iSelectedDocument)  'remove document from document collection 
   cvwInboxDocuments.Remove(iSelectedDocument)         'visually remove from list
   Return True                                         
   
End

Public Sub Unmatched_Patient_Reconcile()
   
   Dim fk_patient As Integer
   
   If Not IsNull(Selected_Inbox!fk_unmatched_patient) Then
      fk_patient = Form_ActionDocument.FMetaData.get_fk_patient()
      modInboxDBI.Document_SetPatientFK(fk_patient, Selected_Inbox!fk_unmatched_patient)
      modInboxDBI.Unmatched_Patient_Mark_Resolved(Selected_Inbox!fk_unmatched_patient, fk_patient)
   End If  
   
End

Public Function Unmatched_Patient() As Boolean
   
   Dim sString As String 
   
   If Not IsNull(Selected_Inbox!fk_unmatched_patient) Then
      If Form_ActionDocument.FMetaData.get_fk_patient() Then Return 'if non zero has already been matched
      If IsNull(FMessage) Then
           FMessage = New FGenericHTMLMessage
      End If   
      With FMessage 
         .Caption = "Inbox Error"
         .lblHeading.text = "Result Cannot be Filed"
         .lblHeading.text = "<P>"
         sString = Selected_Inbox!firstname & " "
         sString &= Selected_Inbox!surname 
         .textlabel1.text = "<B>Patient : </B>" & sstring & "<BR>"
         .textlabel1.text &= "<B>Result : </B>" & cvwInboxDocuments[cvwInboxDocuments.item.key][1] & " (Lab Name)<BR>"
         .textlabel1.text &= "<B>Problem: </B> no match for the patient "
         .textlabel1.text &= "was found in the database.<BR><BR>"
         .textlabel1.text &= "Possible causes for this may be:<BR>"
         .textlabel1.text &= "<UL>"
         .textlabel1.text &= "<LI>The patient may not be in the contact database"
         .textlabel1.text &= "<LI>The patient may be in the contact database "
         .textlabel1.text &= "but the details may have been mis-spelt either "
         .textlabel1.text &= "in the contact database or by the sending provider.<BR>"
         .textlabel1.text &= "We have tried all sorts of things before suggesting "
         .textlabel1.text &= "this such as swapping firstname/lastname, initials etc during out attempt to make a match."
         
         .textlabel1.text &= "<LI>You may have been sent this result in error - if "
         .textlabel1.text &= "you suspect this discuss with the message provider."
         .textlabel1.text &= "<LI>EasyGP may have bugged out though this is unlikely - "
         .textlabel1.text &= "please enter a bug report"
         .textlabel1.text &= "</UL>"
         .textlabel1.text &= "<P>You can search the contacts database by typing the patients surname "
         .textlabel1.text &= "in the textbox labeled ** UNMATCHED ** - currently highted in red, and select the correct name from the list.</P>"                 
         .textlabel1.text &= "<P>If you can't fix up the name and address problem in the contacts database then "
         .textlabel1.text &= "as an interim solution to clear your inbox of this record you can "
         .textlabel1.text &= "right mouse click on the patients name, and select the following option "
         .textlabel1.text &= "'Move to holding file', then ask your system-admin to fix the problem.</P>"
         
         .textlabel1.text &= "<P>If you are absolutely certain this result is irrelevant e.g this was a "
         .textlabel1.text &= "fictitious patient in a test file, then right mouse click on the patient's name "
         .textlabel1.text &= "and send all associated results to a black hole never to be seen again. "
         .textlabel1.text &= "Your actions will however be recorded for posterity( Or an audit).</P>"
         
         .btnCancel.Visible = False
         .pnlRight.Visible = True
      End With
      
      Return True
   Else
      Return False
   End If   
   
End

Public Sub tbFile_Click()
   '---------------------------------------------------------------
   'User wants to file this document, if successful, attempts to
   'show the next document for the patient, if none left, attempts
   'to go to the next row of the inbox
   '---------------------------------------------------------------   
   If Not cvwInboxDocuments.count Then Return      'no documents, no filing
   If Not Document_File() Then Return              'filing failed
   Vbox_ActionDocument.Enabled = False 
   Form_ActionDocument.Tabstrip1.Index = Metadata  'sucess. switch tab back to metadata
   If cvwInboxDocuments.count = 0 Then             'no documents left?
      cvwInbox.MoveCurrent()                       'try and show next inbox item, usually next patient
      cvwInbox.Remove(cvwInbox.Item.key)
      Try cvwInbox.MoveFirst()
      Try cvwInbox.Item.Selected = True
      If Error Then
         txtFilterDocuments.Clear()               'could be more, but filtered
         txtFilterPatient.Clear()
         modHL7FileImport.Auto_Process()          'FIXME REMOVE ME ONCE AUTO PROCESS ON SERVER
         Inbox_Reload()
      End If   
      chkAutoProcess.Value = False                'Lest we forget and skips past on next auto-fill of inbox fixme I've hidden this
      bAutoFileAll = False                        'fixme remove autoprocess left in here for me
      bAutoFilePatient = False 
   Else
      Document_RefreshList() 
      If Not cvwInboxDocuments.MoveFirst() Then     'if not a void view
         cvwInboxDocuments.Item.Selected = True
      Else
         tbRefreshInbox_Click()
      End If
   End If                                       
   
End

Public Sub synonyms_Reload()
   
   synonyms = modInboxDBI.Sender_User_Synonyms_get()
   
End


Public Sub TabStripInbox_Click()
   '----------------------------------------------------------
   'User has clicked on the main tabstrip at top of the screen
   'Load appropriate form if null
   '----------------------------------------------------------   
   Select Case Last.index
      Case CTabArchives
         If IsNull(Form_PersonalArchives) Then
            Form_PersonalArchives = New FStaffInboxArchives(Vbox_StaffArchives)
         End If
     
      Case cTabAudit
         If IsNull(FAuditTrail) Then
            FAuditTrail = New FHtmlViewer(Vbox_DocumentAudit)
         Endif
End Select

End

Public Function Fill_Inbox(Optional fk_sending_entity As Integer = 0, Optional limit As Integer = 0, Optional patient_filter As String) As Collection 
   
   Dim sql As String
   Dim C As Collection 
   Dim Document As Collection
   Dim fk_last_patient As String
   Dim fk_last_umatched_patient As String 
   Dim patient As Collection 
   Dim surname_firstname As String[]
   Dim x As Integer
   Dim total_doc_count As Integer
   
   With cvwInbox
      .Columns.count = 1
      .Clear()
   End With
   sql = "Select count(pk) as count  from documents.Documents Where concluded = false and deleted = False "
   total_doc_count = Str(modDBConnect.exec_query(sql)!count) 
   sql = "Select * from documents.vwDocuments Where concluded = false and deleted = False "
   If fk_sending_entity Then
      sql &= "AND fk_sending_entity = " & fk_sending_entity & " "
   End If 
   
   staff_member = staff_members[cmbStaffMembers.index]
   If IsNull(Staff_member!fk_staff) Then
      sql &= "And fk_unmatched_staff = " & Staff_member!fk_unmatched_staff
      With tlMissingProvider
         .foreground = color.Red
         .text = "<P>The recipient of this message was not found.</P> "
         "You will have to ask the system adminstrator to "
         "enter the correct details in the staff database before proceeding"
      End With  
   Else
      sql &= " AND fk_staff_destination = " & staff_member!fk_staff
      tlMissingProvider.text = ""
   End If
   If Trim(txtFilterDocuments.text) Then
      sql &= " AND tag ILIKE $$%" & txtFilterDocuments.text & "%$$" 
   Endif
   
   If patient_filter <> "" Then
      surname_firstname = Split(patient_filter, "'")
      Try sql &= " AND patient_firstname ILIKE $$" & surname_firstname[1] & "%$$"
      If Error Then
         sql &= " AND patient_surname ILIKE $$" & surname_firstname[0] & "%$$"
      Else
         sql &= " AND patient_surname ILIKE $$" & surname_firstname[0] & "%$$"
      Endif
      
   Endif
   sql &= " ORDER BY patient_surname, patient_firstname "
   If limit Then 
      sql &= " LIMIT " & limit
   End If
   Documents = modDBConnect.exec_query_collection(sql)
   If Not Documents.count Then
      tlOutstandingStaffMember.Visible = False  
      tlOutstandingStaffMember.text = staff_member!title & " " & staff_member!wholename & ":0"  'do not change from staff_member!
      tlOutstandingAllStaff.text = "There are " & Str$(total_doc_count) & " unread documents for other staff"
      Return 
   End If
   If total_doc_count - Documents.count <> 0 Then 
      tlOutstandingAllStaff.Visible = True 
      tlOutstandingAllStaff.text = "There are " & Str$(total_doc_count - Documents.count) & " unread documents for other staff"
   Else
      tlOutstandingAllStaff.Visible = False  
   End If   
   tlOutstandingStaffMember.text = "There are " & Str(Documents.count) & " unread documents for " & staff_member!title & " " & staff_member!wholename 
   
   C = New Collection     'a misnomer content = who message intended for, or About Who
   For Each Document In Documents   
      
      If IsNull(Document!fk_patient) Then
         If fk_last_patient <> Document!fk_unmatched_patient Then
            fk_last_patient = Document!fk_unmatched_patient
            patient = New Collection
            patient!documents = New Collection
            patient!fk_unmatched_patient = Document!fk_unmatched_patient
            patient!fk_person = Document!patient_fk_person
            patient!firstname = Document!unmatched_patient_firstname
            patient!surname = Document!unmatched_patient_surname
            patient!birthdate = Document!unmatched_patient_birthdate
            patient!sex = Document!unmatched_patient_sex
            patient!title = Document!unmatched_patient_title
            patient!wholename = patient!title & " " & patient!firstname & " " & patient!surname
            patient!street = Document!unmatched_patient_street
            patient!town = Document!unmatched_patient_town
            patient!postcode = Document!unmatched_patient_postcode
            
            x = cvwInbox.Count
            
            C.Add(patient, x)
            cvwInbox.Add(x, 0)    
            cvwInbox[x][0] = document!unmatched_patient_surname & ", " & document!unmatched_patient_firstname
            If cvwInbox[x][0] = ", " Then 
               cvwInbox[x][0] = "Non patient document"
            End If
            
         End If 
      Else
         If fk_last_patient <> Document!fk_patient Then
            
            fk_last_patient = Document!fk_patient
            patient = New Collection
            patient!documents = New Collection
            patient!fk_person = Document!patient_fk_person
            patient!fk_patient = Document!fk_patient
            patient!firstname = Document!patient_firstname
            patient!surname = Document!patient_surname
            patient!birthdate = Document!patient_birthdate
            patient!sex = Document!patient_sex
            patient!title = Document!patient_title 
            patient!wholename = patient!title & " " & patient!firstname & " " & patient!surname
            patient!age = Str(Document!patient_age)
            
            patient!street = Document!patient_street
            patient!town = Document!patient_town
            patient!postcode = Document!patient_postcode
            x = cvwInbox.Count
            
            C.Add(patient, x)
            cvwInbox.Add(x, 0)    
            cvwInbox[x][0] = document!patient_surname & ", " & document!patient_firstname 
            If cvwInbox[x][0] = ", " Then 
               cvwInbox[x][0] = "Non patient document"
            End If
         End If
      End If
      C[x]!documents.Add(Document, document!pk_document)
   Next
   Dec Application.Busy
   Return C
   
End

Public Sub HTML_Document_Show(display_style As Integer, Doc As Collection, Document_observations As Collection)
   '-----------------------------------------------------------------------------------
   'Shows a html version of a hl7 document according to the sending entities properties
   'See Admin.HL7 Management.HL7 Sending Entities
   '-----------------------------------------------------------------------------------   
   Vbox_PDf.Visible = False
   Vbox_Images.Visible = False   
   VSplit_Document.Visible = True   
   
   Document_HTML = modHL7Process.Construct_HTML(Selected_Inbox, Doc, Document_observations, bExcludePIT, bExcludeFTReport, display_style, fgc_errors, bgc_errors)
   Document_HTML = Replace(Document_HTML, "%filingas%", "")
   Form_ActionDocument.FMetaData.Document_HTML_Set(Document_HTML)
   lblFilingAs.text = "Filing as: " & Form_ActionDocument.FMetaData.txtUserObservationName.text
   If TabStripInbox.index = 0 Then
      FPreview_HtmlDocument.WebView1.html = Document_HTML
   End If
   
End

Public Sub rbDisplayFormat_Click()
   
   If Bexit = True Or IsNull(SelectedDocument) Then Return 
   
   fk_lu_message_display_style = Last.tag
   SelectedDocument!fk_lu_message_display_style = Last.tag
   Try HTML_Document_Show(Last.tag, SelectedDocument, observations) 
   ' 
End

Public Function SendingEntity_Recognised() As Boolean
   
   Dim y As Integer

   If Not IsNull(Selecteddocument!fk_sender_branch) Then
      If Selecteddocument!fk_sender_branch <> 0 Then
         Return True 
      End If
   End If
   If Not IsNull(Selecteddocument!fk_employee_branch) Then
      If Selecteddocument!fk_employee_branch <> 0 Then
         Return True 
      End If
   End If
   
   If Not IsNull(Selecteddocument!fk_sender_person) Then
      If Selecteddocument!fk_sender_person <> 0 Then 
         Return True
      Endif
   Endif
   Return False

End

Static Public Sub ReAllocate_Staff_Member(fk_staff_destination As Integer)
   '------------------------------------------------------
   'This is only called from the FDocumentMetadata when
   'a staff member has been re-allocated, so must re-load
   'the current users inbox after updating the document
   '------------------------------------------------------
    form_inbox.Staff_Member_ReAllocate(fk_staff_destination)
  
End

Public Sub Staff_Member_ReAllocate(fk_staff_destination As Integer)
  Dim Document As New Collection 
  Dim sMsg As String 
  
  Message.Title = "Re-allocation of document"
  sMsg = "You have selected to re-allocate the recipient  of this document\n\n"
          "Are you sure?"
  If Message.Warning(sMsg, "Yes", "No") = 2 Then Return 
  modDBConnect.BeginTrans()
       modArchiveDocumentsDBI.Re_Allocate_Recipient(SelectedDocument!pk_document, fk_staff_destination)
  modDBConnect.CommitTrans()
  
  Inbox_Reload()
End

Static Public Sub ReAllocate_Sender()
   
   form_inbox.Sender_ReAllocate()
   
End

Public Sub Sender_ReAllocate()
   
   Dim sMsg As String
   Dim oldFilename As String = SelectedDocument!source_file
   Dim newfilename As String 'new name of source file
   Dim Document As New Collection 
   Dim NewTag As String
   Dim docdir As String
   
   Select Case Form_ActionDocument.FMetaData.Contact_Type
      Case const.contacttype_organisation
         NewTag = Form_ActionDocument.FMetaData.Organisation!organisation
         If Form_ActionDocument.FMetaData.Organisation!branch <> "HEAD OFFICE" Then
            NewTag &= "." & Form_ActionDocument.FMetaData.Organisation!branch
         Endif
      Case const.contacttype_employee
          NewTag = Trim(Form_ActionDocument.FMetaData.Organisation!organisation) & "."
          NewTag &= Form_ActionDocument.FMetaData.Organisation!wholename
      Case const.contacttype_patient, const.contacttype_person
             NewTag = Trim(Form_ActionDocument.FMetaData.person!firstname) & " " & Trim(Form_ActionDocument.FMetaData.person!surname)
   End Select  
   
   Message.Title = "Re-allocation of document"
   sMsg = "You have selected to re-allocate the sender of this document from:\n\n"
   sMsg &= Replace$(SelectedDocument!tag, " - scanned document", "")
   sMsg &= "\n\nto\n\n" & NewTag
   
   If Message.Warning(sMsg, "Yes", "No") = 2 Then Return 
   
   Document!pk_document = SelectedDocument!pk_document
   Document!fk_sending_entity = modInboxDBI.SendingEntity_GetPK(Form_ActionDocument.FMetaData.Get_Document_Type(), Form_ActionDocument.FMetaData.Get_Display_Style(), newtag, Form_ActionDocument.FMetaData.fk_branch, Form_ActionDocument.FMetaData.fk_employee, Form_ActionDocument.FMetaData.fk_person)
   Document!originator = NewTag ' Form_ActionDocument.FMetaData.txtDocumentTag.text
   Document!tag = Document!originator & " - scanned document" 'FIXME WHAT IF THIS IS A RESULT - SHOULD NEVER HAPPEN HOWEVER
   
   If Trim(Form_ActionDocument.FMetaData.txtPatient.text) <> "" Then 
      newfilename &= Replace(Trim(Form_ActionDocument.FMetaData.txtPatient.text), " ", "_") & "." & modutil.DateString_Encode(Form_ActionDocument.FMetaData.lblbirthdate.text) & "." & Str(SelectedDocument!fk_patient) & "."
   Else
      
   End If   
   newfilename &= Replace(Document!originator, " ", "_") & "." & Str$(Document!pk_document) & "."
   newfilename &= File.Ext(Form_ActionDocument.FMetaData.txtFilename.text)
   Document!source_file = Lower(newfilename)
   modArchiveDocumentsDBI.Save(Selected_Inbox!documents, iSelectedDocument, Document)
   docdir = modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/documents/")
   Try Move docdir &/ oldfilename To docdir &/ Lower(newfilename) 
   If Not Error Then
      modDBConnect.CommitTrans()
   Else
      Message.Error("An error occured and the file could not be re-allocated")
      modDBConnect.RollBack()
   Endif
   Form_ActionDocument.FMetaData.Init("Allocated Documents")
   Inbox_Reload()
   
End

Static Public Sub Reload_Patient(bReallocating As Boolean)
   
   form_inbox.Unmatched_Patient_Resolve(bReallocating)
   
End

Static Public Sub Document_Filed_As_Update(name As String)
   
   form_inbox.lblFilingAs.text = "Filing as: " & name
   
End

Public Sub Filed_As_Update(name As String)
   
   lblFilingAs.text = name
   
End

Public Sub Unmatched_Patient_Resolve(bReallocating As Boolean)
   
   Dim fk_patient As Integer
   Dim sMsg As String 
   Dim sName As String 
   Dim x As Integer
   Dim document_keys As Collection 
   
   fk_patient = Form_ActionDocument.FMetaData.get_fk_patient()
   If bReallocating = False Then 
      sName = SelectedDocument!unmatched_patient_title & " "
      sName &= SelectedDocument!unmatched_patient_firstname & " "
      sName &= SelectedDocument!unmatched_patient_surname & " "
      sName &= SelectedDocument!unmatched_patient_sex & " "
      sName &= Format(SelectedDocument!unmatched_patient_birthdate, "dd/mm/yyyy") & " " 
      sMsg &= sName & "\n\nhas been matched to the following existing patient:\n\n"
   Else
      
      If Not IsNull(SelectedDocument!patient_fk_person) Then 
         sName = SelectedDocument!patient_title & " "
         sName &= SelectedDocument!patient_firstname & " "
         sName &= SelectedDocument!patient_surname & " "
         sName &= SelectedDocument!patient_sex & " "
         sName &= Format(SelectedDocument!patient_birthdate, "dd/mm/yyyy") & " " 
         sMsg &= sName & "\n\nwill now be allocated to the following patient:\n\n"
      Else
         sMsg = "No previous patient was allocated.\n\nThis document will now be allocated to the following patient:\n\n"
      End If
      
   End If
   sname = Form_ActionDocument.FMetaData.txtPatient.text & " "
   sname &= Form_ActionDocument.FMetaData.lblBirthdate.text
   
   If mnuDocuments_ReAllocateMultiple.Enabled = True Then
      
      sMsg = "Multiple documents, currently allocated to\n\n" & sMsg 
      sMsg &= "Note: Be very careful - you have selected multiple documents to re-allocate!\n\n"   
   Else
      sMsg = "A single document currently allocated to\n\n" & sMsg
   Endif
   
   sMsg &= sName & "\n\nPlease confirm."
   Message.Title = "Confirm Patient Identity"
   If Message.warning(smsg, "Yes", "No") = 1 Then 
      Selected_Inbox!fk_patient = fk_patient
      If bReallocating = False Then 
         
         modInboxDBI.Document_SetPatientFK(fk_patient, SelectedDocument!fk_unmatched_patient)
         modInboxDBI.Unmatched_Patient_Mark_Resolved(SelectedDocument!fk_unmatched_patient, fk_patient)
         
      Else
         
         If mnuDocuments_ReAllocateMultiple.Enabled = True Then
            cvwInboxDocuments.MoveFirst()                                'move internal cursor to start
            For x = 0 To cvwInboxDocuments.count - 1                     'check every item in the list
               If cvwInboxDocuments.Item.Selected = True Then           'if it has been selected
                  
                  modInboxDBI.Document_ReAllocate_To_Another_Patient(cvwInboxDocuments.Item.key, fk_patient)
               Endif
               cvwInboxDocuments.MoveNext()
            Next
         Else
            modInboxDBI.Document_ReAllocate_To_Another_Patient(SelectedDocument!pk_document, fk_patient)
         End If   
      End If
      modDBConnect.CommitTrans()
   End If
   
   Inbox_Reload()
   cvwInbox_Select
   
End

Public Sub tbRefreshInbox_Click()
   
   Dim fk_sending_entity As Integer
   
   Inc Application.Busy 
   modHL7FileImport.Auto_Process()         'fixme remove me or at least make sure running on server
   cvwInbox.Clear()
   cvwInboxDocuments.Clear()
   Form_ActionDocument.FMetaData.EditArea_Clear()
   FPreview_HtmlDocument.WebView1.html = ""
   If cmbSenders.index <> -1 Then 
      fk_sending_entity = Sending_Entities[cmbSenders.Index]!pk_sending_entities
   Else
      fk_sending_entity = 0 
   Endif
   Inbox = Fill_Inbox(fk_sending_entity, 2000, Trim(txtFilterPatient.text))   'fill all documents, limit FIXME UNHARD CODE ME
   cvwInbox.MoveFirst()
   Try cvwInbox.Item.Selected = True
   If Error Then
      Print Error.where, Error.Text
   End If
   Dec Application.Busy
   
End

Public Sub chkResultFormatting_Click()
   
   If IsNull(SelectedDocument) Then Return 
   Select Case Last.tag
      Case "exclude ft report"
         bExcludeFTReport = Last.value
      Case "exclude pit"
         bExcludePIT = Last.value
   End Select
   Try HTML_Document_Show(SelectedDocument!fk_lu_message_display_style, SelectedDocument, observations) 'display style = default of the vendor

End

Public Sub mnuWebView_Menu()
   
   Dim mnu As Menu
   Dim Observation As Collection 
   
   Stop Event
   If Not currentconsult Then Return
   
   FPreview_HtmlDocument.mnuWebView.Children.Clear()
   mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
   mnu.name = "heading"
   mnu.caption = "Graph Cumulative"
   mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
   mnu.name = "separator_1"
   mnu.caption = ""
   If Observations.count = 0 Then Return 
   
   For Each Observation In Observations
      
      mnu = New Menu(FPreview_HtmlDocument.mnuWebview) As "mnuWebview"
      If Observation!value_type = "NM"                'graphable observation
         mnu.name = Observation!identifier
         mnu.caption = Observation!identifier
         mnu.tag = Observation!pk
         mnu.Checked = False  
      End If
   Next
   
   FPreview_HtmlDocument.mnuWebView.Popup()
   
End

Private Sub Patient_Outstanding_Requests_Show()
   
   Dim x As Integer
   
   If cvwPatientsRequests.tag = 0 Then 
      modEditAreaHelpers.Patient_Requests_Show(currentconsult, cvwPatientsRequests)
      cvwPatientsRequests.tag = Selected_Inbox!fk_patient
   End If  
   
End

Public Sub cvwPatientsRequests_Click() 
   
   Dim bits As String[]
   bits = Split(Last.item.key, "-")
   If Split(Last.item.key, "-").count = 2
      If Not (InStr(Lower(Form_ActionDocument.FMetaData.txtUserObservationName.text), Lower(Last[Last.item.key][0]))) Then
         Form_ActionDocument.FMetaData.txtUserObservationName.text &= Last[Last.item.key][0] & ";" 
         RequestOrdered = currentconsult!requests_ordered[Last.item.key]
      End If   
   End If
   
End

Public Sub chkUnmatchedDocuments_Click()
   
   bIncludeUnmatcheddocuments = Last.value
   Inbox_Reload()
   
End

Public Sub mnuDocuments_Click()
   
   Select Case Last.tag
      Case "preliminary result not required", "duplicate result", "delete selected"
         mnuDocuments_Delete(False, Last.tag)
      Case "delete all"
         
      Case "font"
         Try cvwInboxDocuments.font = modUtil.Change_Fonts(cvwInboxDocuments.font)
         If Not Error Then 
            cvwInbox.font = cvwInboxDocuments.font
            Settings_Save()
         End If
      Case "reallocate single", "reallocate multiple"
         SelectedDocument!fk_patient = Null
         With Form_ActionDocument.FMetaData
           .txtStreet.text = ""
           .txtSuburb.text = ""
           .Reallocate()
           .rbTypeSender_Organisation.Value = True
         End With
      Case "Display as result"
      Case "Display as letter"
      Case "refile"
         
         Document_SendBack_For_ReFiling()
      Case "reallocate sender"     
          With Form_ActionDocument.FMetaData
           .Init("Re_Allocate Sender")
           .Reset_Keys()
           .txtFindSender.SetFocus()
           End With   
         '    .HBox_Author.Visible = True
         '    .VBox_Organisation.Visible = True  
         '    .HBox_Editarea_8.visible = True 
         '    .HBox_Document_Tag.Visible = False 
         '    .HBox_Comment.Visible = False  
         '    .HBox_Laterality.visible = False
         '    .hBox_Urgency.Visible = False 
         '    .HBox_HealthIssue.Visible = False
         '    .HBox_DocumentDate.Visible = False
         '    .HBox_UserObservationName.Visible = False 
         '    .Vbox_Lock.Visible = False
         '    .Hbox_Requested.Visible = False  
         '    .txtRecipient.Background = Color.White
         '    .txtRecipient.Enabled = True
         '    .lblMeasure.text = " Staff Responsible "
         '    .HBox_DocumentType.Visible = False  
         '    modEditAreaHelpers.Resize_labels(.VBox_Organisation, .lblMeasure)
         '    modEditAreaHelpers.Resize_labels(.Vbox_Person, .lblmeasure)
         ' End With     
         
      Case "auto file single patient"
         bAutoFilePatient = True
         tbFile_Click()
      Case "auto file all patients"
   End Select
   
End

Public Function Document_Make_Audit(SelectedDocument As Collection, iAuditAction As Integer, Optional reason As String) As Collection 
   
   Dim audit As Collection 
   
   If SelectedDocument!fk_patient = 0 Then
      Message.Info("Richard, no patient") 
      Return
   Endif
   audit = New Collection 
   audit!tablename = "documents.documents"
   audit!fk_row = SelectedDocument!pk_document
   audit!fk_consult = currentconsult.GetPK()
   audit!fk_section = const.cSection_Documents
   audit!fk_action = iAuditAction
   
   audit!data_summary = "<B>" & Form_ActionDocument.FMetaData.txtPatient.text & " (" & Form_ActionDocument.FMetaData.lblBirthdate.text & ")</B><BR>" 
   audit!data_summary &= Form_ActionDocument.FMetaData.cmbDocumentTypes.Text
   Select Case SelectedDocument!fk_lu_message_display_style
      Case const.Document_Display_As_Letter
         audit!data_summary &= " Letter "
      Case Else
         audit!data_summary &= " Result "
   End Select
   audit!data_summary &= SelectedDocument!msh_sending_entity & " "
   If Lower(SelectedDocument!tag) <> Lower(Form_ActionDocument.FMetaData.txtUserObservationName.text) Then
      audit!data_summary &= Form_ActionDocument.FMetaData.txtUserObservationName.text & " (" & SelectedDocument!tag & ") "
   Else
      audit!data_summary &= Form_ActionDocument.FMetaData.txtUserObservationName.text
   Endif
   audit!data_summary &= "<BR><small><small>file:" & Form_ActionDocument.FMetaData.txtFilename.text & "/<small></small>"
   Select Case iAuditAction
      Case const.cAuditAction_Delete
         
         If reason = "" Then 
            FAudit.Init(Audit, Const.cSection_Documents, iAuditAction, currentconsult)
            If Not FAudit.ShowModal() Then Return 
            Audit!reason = const.globalstring
         Else
            audit!reason = reason
         End If
      Case const.cAuditAction_StaffTaskAllocated
         
      Case const.cAuditAction_Completed
         audit!reason = "completed without reason being given"
      Case const.cAuditAction_Refused
         audit!reason = "nil reason given by patient"
      Case const.cAuditAction_DocumentFiled
         audit!reason = "viewed and filed"
      Case const.cAuditAction_ScratchPad
         
      Case const.cAuditAction_MarkDeleted
         audit!reason = "moved to trash"
         
      Case const.cAuditAction_CompletedWithExplanation, const.cAuditAction_RefusedWithExplanation
         
   End Select
   audit.Remove("tablename") 'was used in the popup, not needed to save.
   Return audit
   
End

Public Sub Document_Delete(iAuditAction As Integer, Optional reason As String) As Boolean
   
   modConsultDBI.Make_Audit(Document_Make_Audit(SelectedDocument, const.cAuditAction_Delete, reason), "documents", "documents")
   modDBConnect.exec_query("Update documents.documents set deleted = True where pk = " & SelectedDocument!pk_document)
   modDBConnect.CommitTrans()
   Return True
   
End

Public Sub Document_RefreshList()
   '---------------------------------------------------------------------------------------------
   'Refreshes the list of documents associate with the current Inbox selection (usually a patient
   'The list shows date of creation and description eg FBC, or Letter from Mr Spec AList
   '---------------------------------------------------------------------------------------------   
   Dim document As Collection
   Dim x As Integer
   
   cvwInboxDocuments.Clear()
   
   For Each document In Selected_Inbox!documents
      x = document!pk_document
      cvwInboxDocuments.Add(x, 0)
      cvwInboxDocuments[x][0] = modUtil.Format_Date(document!date_created)
      cvwInboxDocuments[x][1] = document!tag
   Next
   
End

Public Sub Document_SendBack_For_ReFiling()  
   '------------------------------------------------------------------------------------
   'User has decided there is something wrong with document allocation they cannot fix
   'eg, wrongly joined pages etc, not just simple things like wrongly allocated patients
   'so they send it back to clerical for re-filing
   '------------------------------------------------------------------------------------   
   Dim sMsg As String
   Dim newdoc As Collection 
   Dim oldname As String
   Dim newname As String
   
   sMsg = SelectedDocument!tag 
   sMsg &= "\n\nSend back for clerical to re-allocate?"
   If Message.Warning(sMsg, "Yes", "No") = 2 Then Return 
   modInboxDBI.Document_Mark_Deleted(SelectedDocument!pk_document)        'remove from circulation, sorry ian
   oldname = modAdminDBI.Config_Get("document_archiving_directory", "/var/easygp/scanning", "Directories/scanning") &/ SelectedDocument!source_file
   newname = modAdminDBI.Config_Get("document_scanning_directory", "/var/easygp/archiving", "Directories/archiving") &/ SelectedDocument!source_file
   Try Move oldname To newname
   If Error Then
      Try Copy OldName To NewName
      If Not Error Then Kill OldName
   Endif
   If Not Error Then
      modDBConnect.CommitTrans()
   Else
      Message.Error("An error occured and the file could not be re-allocated")
      modDBConnect.RollBack()
   Endif
   Inbox_Reload()

End


Public Sub Document_SignOff()
   '------------------------------------------------------------
   'User has signed off the document, ie accepted responsibility
   '------------------------------------------------------------   
   Dim signed_off As New Collection 
   
   signed_off!fk_staff = modDBConnect.currentUser!fk_staff
   signed_off!fk_document = SelectedDocument!pk_document   
   signed_off!date = Now()
   signed_off!pk = modInboxDBI.Document_SignOff(signed_off)

End

Public Sub mnuDocuments_Delete(bDeleteAll As Boolean, Optional reason As String)
   
   Dim x As Integer
   
   If bDeleteAll Then cvwInboxDocuments.MoveFirst()
   For x = 1 To cvwInboxDocuments.count
      If bDeleteAll Then
         SelectedDocument = Selected_Inbox!documents[cvwInboxDocuments.Item.key]
         If Not Document_Delete(const.cAuditAction_Delete) Then Return 
      Else
         cvwInboxDocuments.MoveCurrent()                  're-set was moved by the popup menu
         If cvwInboxDocuments.Item.Selected = True Then
            SelectedDocument = Selected_Inbox!documents[cvwInboxDocuments.Item.key]
            If Not Document_Delete(const.cAuditAction_Delete, reason) Then Return 
         End If
      End If   
      cvwInboxDocuments.MoveNext()
   Next
   Inbox_Reload()
   
End

Public Sub cvwInboxDocuments_Menu()
   
   Dim x As Integer
   Dim y As Integer
   
   If Not cvwInboxDocuments.count Then Return
   
   cvwInboxDocuments.MoveFirst()
   For x = 0 To cvwInboxDocuments.count - 1
      If cvwInboxDocuments.Item.Selected = True Then
         Inc y
      Endif
      cvwInboxDocuments.MoveNext()
   Next
   If y > 1 Then
      mnuDocuments_ReAllocateSingle.Enabled = False  
      mnuDocuments_ReAllocateMultiple.Enabled = True
   Else
      mnuDocuments_ReAllocateSingle.Enabled = True  
      mnuDocuments_ReAllocateMultiple.Enabled = False
      
   Endif
   mnuDocuments.Popup()
   
End

Public Sub cmbStaffMembers_Click()
   
   If Bexit Then Return 
   TabStripInbox.text = "Pending documents for " & cmbStaffMembers.text
   Inbox_Reload()
   
End




Public Sub cmbSenders_Click() 
   
   Last.pos = 0
   cvwInboxDocuments.Clear()         'WAIT or visually a 'grey hole' left after
   Wait                              'click activated and combo drop down removed
   tbRefreshInbox_Click()
   
End

Public Sub Audit_Trail()
   
   Dim audit_rows As Collection
   Dim sHtml As String 
   
   audit_rows = modInboxDBI.View_AuditTrail()
   FAuditTrail.WebView1.html = modAuditDBI.Audit_HTML_Construct(audit_rows, "Documents").GetData()
   
End

Public Sub tbFile_KeyPress()
   
   If key.code = key.Return Then
      tbFile_Click()
   Endif
   
End

Public Sub txtFilterDocuments_Activate()
   
   tbRefreshInbox_Click
   
End

Public Sub tbClearFilter_Click()
   
   txtFilterDocuments.Clear()
   tbRefreshInbox_Click
   
End

Public Function Valid_Document() As Boolean
   
   Dim sMsg As String
   Dim fk_patient As Integer
   Dim fk_unmatched_patient As Integer
   Dim fk_document As Integer
   Dim fk_lu_request As Integer 'fixme
   Dim D As New Collection
   Dim S As Collection 
   Dim sql As String 
   Dim diagnosis_guess As String
   Dim observation As Collection  
   Dim button1_text As String
   Dim button2_text As String
   
   If Unmatched_Patient() Then Return                               
   
   cvwInboxDocuments.MoveCurrent()              'I put this in because of an odd crash here ?fixes it?
   
   Select Case Form_ActionDocument.FMetaData.iDisplay_As
      Case const.Document_Display_As_Result   
         smsg = "Observation name:" & cvwInboxDocuments[cvwInboxDocuments.item.key][1] & "\n" 
         smsg &= "User equivalent :" & Trim(Form_ActionDocument.FMetaData.txtUserObservationName.text) & "\n\n"
         "Often the name used by a company, i.e the name which it  delivers back, is not 'user-friendly' and dosn't correspond to the message content, nor what you ordered in the first place.\n\n" 
         "We have attempted to match what you ordered, and outstanding requests are listed underneath the text of this message.\n\n"
         "To make it easier to view your messages later on, you should type an equivalent user name "
         "in the textbox labelled 'User name', or alternatively click on one or more names from what you ordered, to make the match.\n\n" 
         "For example, a pathology result returned as 'Biochemistry', may have been ordered as "
         "'UEC;LFTs', which is pretty obvious if you examine the text of the message.\n\n" 
         "If you cannot match from your ordering, then if you type in the user name textbox, a popup list will appear, you can choose one or more "
         "entries from the list sequentially, though you can use free text.\n\n" 
         "Note, by convention, request names are separated by  ';' delimiter character.\n\n"
         "If the message is a letter from a specialist, you should type some sort of summary -"
         " e.g Operation report:cholecystectomy."
         
         If Trim(Form_ActionDocument.FMetaData.txtUserObservationName.text) = "" Then
            Message.Title = "Matching Delivered Request to What was Ordered"
            Message.info(sMsg)
            Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
            If Form_ActionDocument.Tabstrip1.index <> Metadata Then
               Form_ActionDocument.Tabstrip1.Index = Metadata
            End If  
            Return 
         End If
         If Not InStr(Lower(SelectedDocument!tag), "scanned") Then 
            If Not Synonyms_Update() Then
               Message.Title = "User Term Not Found"
               Message.info(sMsg)
               Return 
            End If
         End If   
      Case const.Document_Display_As_Letter 
         smsg = "Letter type:" & cvwInboxDocuments[cvwInboxDocuments.item.key][1] & "\n" 
         smsg &= "Descriptive tag :%tag%\n\n"
         "Though not mandatory, to ensure the lists in your medical record system contain "
         "useful information it is advisable to put some sort of description of the letter contents.\n\n" 
         "For example, if a hostpital discharge, or after hours visit, the reason eg 'Allergic Rash, or "
         "Insertion of Pacemaker"
         
         If Form_ActionDocument.FMetaData.txtUserObservationName.text = "" And Not IsNull(observations) Then 'scanned letters have no observation
            smsg = Replace$(sMsg, "%tag%", modParseDocument.Guess_Letter_Content(observations)) 'only really for GPAccess which has embedded ICPC diagnosis
         End If   
         smsg = Replace$(sMsg, "%tag%", "")
         
         If Trim(Form_ActionDocument.FMetaData.txtUserObservationName.text) = "" Then
            Message.Title = "Adding a descriptor to the delivered document"
            If diagnosis_guess Then 
               button1_text = "File with suggested descriptor"
               button2_text = "No, let me add my own descriptor"
            Else
               button1_text = "File without descriptor"
               button2_text = "Oops - Add Descriptor"
            End If 
            Select Case Message.warning(sMsg, button1_text, Button2_text, "Skip descriptor - I'll wing it")
               Case 1
                  Form_ActionDocument.FMetaData.txtUserObservationName.text = diagnosis_guess
               Case 2
                  Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
                  If Form_ActionDocument.Tabstrip1.index <> Metadata Then
                     Form_ActionDocument.Tabstrip1.Index = Metadata
                  End If  
                  Return
               Case 3 
                  If Message.Warning("No descriptor will be added - File anyway.", "Yes", "No") = 2 Then
                     Form_ActionDocument.FMetaData.txtUserObservationName.SetFocus()
                     If Form_ActionDocument.Tabstrip1.index <> Metadata Then
                        Form_ActionDocument.Tabstrip1.Index = Metadata
                     End If  
                     Return
                  End If
            End Select
         End If
   End Select 
   Return True

End

Public Sub timer1_Timer()
   
   Inc timer_count
   If bIniting Then
      timer1.Stop()
      synonyms_Reload()
      Inbox_Reload()
      bIniting = False
   Else
      
      If timer_count > 1 Then  'FIXME MAKE THESE USER CONFIGURABLE PER TYPING SPEED
         timer1.stop
         timer_count = 0
         tbRefreshInbox_Click()   
      Endif
   End If

End

Public Sub txtFilterPatient_KeyRelease()
   
   timer_count = 0 'don't search for patient whilst typing

End

Public Sub txtFilterPatient_GotFocus()
   
   timer1.start

End

Public Sub txtFilterPatient_LostFocus()

   timer1.Stop

End


Public Sub cvwPatientsRequests_Select()

  Form_ActionDocument.context_date = "15/10/2010"

End
