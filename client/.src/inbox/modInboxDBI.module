' Gambas module file

' Copyright (C)2008-2013 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'-----------------------------------------------------------------------

Public $Result As Result

Public Function Document_SignOff(signed_off As Collection) As Integer
   '-----------------------------------------
   'Mark the document as actioned by the user
   '-----------------------------------------

   Return modDBConnect.insert("documents.signed_off", signed_off)

End

Public Sub Document_Mark_Deleted(pk_document As Integer)
   '-------------------------------------------------------------
   'Marks a document as deleted, doesn't remove it from the table
   '-------------------------------------------------------------

   modDBConnect.exec_query("Update documents.documents set deleted = True where pk = " & pk_document)

End

Public Sub Document_SetPatientFK(fk_patient As Integer, fk_unmatched_patient As Integer)

   modDBConnect.exec_query("Update documents.documents set fk_patient = " & fk_patient & "where fk_unmatched_patient =" & fk_unmatched_patient)

End

Public Sub Document_Set_SendingEntity(fk_sending_entity As Integer)

   ' modDBConnect.exec_query("Update documents.documents set fk_patient = " & fk_patient & "where fk_unmatched_patient =" & fk_unmatched_patient)

End

Public Sub Document_ReAllocate_To_Another_Patient(fk_document As Integer, fk_patient As Integer)
   '-----------------------------------------------------------------------
   'In situation where a document has been wrongly allocated to one patient
   'swap the fk_patient for the correct one
   '-----------------------------------------------------------------------

   modDBConnect.exec_query("Update documents.documents set fk_patient = " & fk_patient & " WHERE pk =" & fk_document)

End

Public Sub Unmatched_Patient_Mark_resolved(fk_unmatched_patient As Integer, fk_patient As Integer)
   '-------------------------------------------------------
   'Match an umatched to matched patient - mark as resolved
   '-------------------------------------------------------

   modDBConnect.exec_query("UPDATE documents.unmatched_patients set  fk_real_patient = " & fk_patient & " WHERE pk = " & fk_unmatched_patient)

End

Public Sub Link_SendingEntity_Name_UserName(data As Collection) As Integer

   Return modDBConnect.insert("clin_requests.lu_link_provider_user_requests", data)

End

Public Function User_Name_Get_Synonyms(fk_lu_request As Integer) As Collection

   Return modDBConnect.exec_query_collection("Select * from clin_requests.vwRequestSynonyms WHERE fk_lu_request = " & fk_lu_request)

End

Public Function User_Names_With_Synonym_Get(Optional filter As String = "") As Collection
   'FIXME DECIDE IF I LIVE HERE: USED IN FRequestSynonyms (admin)

   Dim sql As String

   sql = "Select distinct fk_lu_request as pk_lu_request, user_request_name from clin_requests.vwRequestSynonyms "
   If filter <> "" Then sql &= " WHERE user_request_name ILIKE $$%" & filter & "%$$ "
   sql &= "ORDER BY user_request_name"
   Return modDBConnect.exec_query_collection(sql)

End

Public Function Sender_User_Synonyms_get() As Collection

   Return modCache.Query("clin_requests.vwrequestsynonyms", "select * from clin_requests.vwrequestsynonyms where deleted is not true")

End

Public Function category_get(txt As TextBox, lvw As ListView)
   'FIXME - REMOVE THIS AND USE THE CONTACTS ROUTINES

   Dim sql As String

   If Trim(txt.text) = "" Then Return
   sql = "SELECT * FROM contacts.lu_categories "
   "WHERE category ILIKE $$"
   sql &= Trim(txt.text) & "%$$  LIMIT 20"
   $Result = modDBConnect.exec_query(sql)
   lvw.Clear()
   If $Result.count Then
      For Each $Result
         lvw.Add($Result!pk, $Result!category)
      Next
      lvw.tag = txt
      lvw.Visible = True
      lvw.Raise
   Else
      lvw.Visible = False
   End If

End

Public Function Inbox_Staff_Get() As Collection

   Return modDBConnect.exec_query_collection("Select * from documents.vwInboxStaff")

End

Public Function Merge_Sending_Entities(fk_source_entity As Integer, fk_destination_entity As Integer) As Boolean
   '--------------------------------------------------------------
   'Allows merging of sending entities, returns true if successful
   'Ian: HOW TO VERIFY THESE TRANSACTIONS ARE OK AND RETURN FLAG
   'IVE JUST STUCK A TRUE IN HERE FOR TIME BEING.
   '--------------------------------------------------------------

   Dim sql As String
   Dim R As Result

   sql = "Update documents.documents set fk_sending_entity = " & fk_destination_entity & " WHERE fk_sending_entity = " & fk_source_entity
   R = modDBConnect.exec_query(sql)
   sql = "Update Documents.sending_entities set deleted = True where pk = " & fk_source_entity
   R = modDBConnect.exec_query(sql)
   Return True

End

Public Function Save_HL7_FileHandling_Defaults(old_data As Collection, pk_view As Integer, newdata As Collection) As Integer
   '---------------------------------------------------------------------------
   'Saves information about sending entities and how to handle message defaults
   '---------------------------------------------------------------------------

   Dim data As New Collection

   If IsNull(newdata!pk_sending_entities) Then
      newdata!pk_sending_entities = modDBConnect.insert("documents.sending_entities", newdata)
      Return newdata!pk_sending_entities
   Else
      modDBConnect.update("documents.sending_entities", old_data[pk_view], newdata, "pk_sending_entities")
      Return 1
   End If

End

Public Function Get_Sending_Entities(filter As String) As Collection

   Dim sql As String = "Select * from documents.SendingEntities "

   If filter Then
      sql &= "WHERE msh_sending_entity ILIKE $$%" & filter & "%$$ and deleted = FALSE"
   End If
   Return modDBConnect.exec_query_collection(sql)

End

Public Function Get_Document_Handling_Defaults(Optional filter As String = "", Optional bNonHL7Senders As Boolean = False) As Collection
   '----------------------------------------------------------------------------------------
   'Gets defaults for how to handle incoming documents
   'Documents could be hl7, email or scanned documents
   'if bHL7Only then all 'snail mail' usually scanned document sending entities are excluded
   '----------------------------------------------------------------------------------------

   Dim sql As String = "Select * from documents.vwSendingEntities WHERE "

   If bNonHL7Senders = False Then
      sql &= " msh_transmitting_entity <> 'snail mail'"
   Else
      sql &= " msh_transmitting_entity = 'snail mail'"
   Endif
   sql &= " AND Deleted = False ORDER BY msh_sending_entity"
   Return modDBConnect.exec_query_collection(sql)

End

Public Function Reconcile_Umatched_Staff(fk_unmatched_staff As Integer, fk_real_staff As Integer)
   '--------------------------------------------------------------------------------------
   'Documents schema is the only place an unmatched staff member could ever be found
   'Where an unmatched staff has ended up in the documents table, and has been reconciled
   'by sysadmin, fix up the keys to point to real staff member in documents schema
   '--------------------------------------------------------------------------------------

   Dim sql As String

   sql = "UPDATE documents.unmatched_staff  SET fk_real_staff =" & fk_real_staff
   sql &= " WHERE pk = " & fk_unmatched_staff
   modDBConnect.exec_query(sql)
   sql = "UPDATE documents.documents  SET fk_staff_destination=" & fk_real_staff
   sql &= ", fk_unmatched_staff= Null "
   sql &= "WHERE fk_unmatched_staff = " & fk_unmatched_staff
   modDBConnect.exec_query(sql)

End

Public Function Documents_Get(from_date As Date, to_date As Date, Optional deleted As Boolean = False, Optional patient As String = "", Optional LIMIT As Integer = 50, Optional filter_on_tag As String = "") As Collection
   '-------------------------------------------------------------------------------------------
   'See Inbox.Inbox_Fill which fills the inbox
   'However, this routine just used at moment in FClerical.FDocumentsImported to allow staff to
   'find documents imported, e.g patient rings up and says 'is my CXR back?
   '-------------------------------------------------------------------------------------------

   Dim sql As String
   Dim bits As String[]

   sql = "Select * FROM documents.vwDocuments where deleted = "
   If deleted Then
      sql &= " TRUE "
   Else
      sql &= " FALSE "
   End If
   sql &= " AND  date_created  between $$" & Format(from_date, "dd/mm/yyyy") & "$$ AND $$"
   If IsNull(to_date) Then
      sql &= Format(Now(), "dd/mm/yyyy") & "$$ "
   Else
      sql &= Format(to_date, "dd/mm/yyyy") & "$$ "
   End If
   bits = Split(patient, ",")
   Select Case bits.count
      Case 1
         sql &= " AND patient_surname ILIKE $$" & Trim(bits[0]) & "%$$ "
      Case 2
         sql &= " AND patient_surname ILIKE $$" & Trim(bits[0]) & "%$$ "
         sql &= " AND patient_firstname ILIKE $$" & Trim(bits[1]) & "%$$ "
   End Select
   If filter_on_tag <> "" Then
      sql &= " AND tag_user ILIKE $$%" & filter_on_tag & "%$$ "
   Endif
   sql &= "ORDER BY patient_surname, patient_firstname, date_created "
   Return modDBConnect.exec_query_collection(sql)

End

Public Sub Document_Get(pk As Integer) As Collection

   Return modDBConnect.exec_query_First("Select * from documents.vwDocuments where pk_document =" & pk)

End

Public Function SendingEntity_Set_fk_lu_request_type(fk_lu_request_Type As Integer, pk_sending_entity As Integer)
   '-----------------------------------------------------------------------------------
   'Scanned documents by default are mostly letters, but in some cases, eg a cardiology
   'practice, they also send results. So we know the category next time - save this
   '------------------------------------------------------------------------------------

   modDBConnect.exec_query("Update documents.sending_entities set fk_lu_request_type = " & fk_lu_request_type & " WHERE pk=" & pk_sending_entity)

End

'LEAVE IN THE 1 WEEK: Public Function SendingEntity_GetPK(fk_lu_document_type, fk_lu_message_display_style As Integer, originator As String, Optional fk_branch As Integer = 0, Optional fk_employee As Integer = 0, Optional fk_person As Integer = 0) As Integer
Public Function SendingEntity_GetPK(fk_lu_message_display_style As Integer, originator As String, Optional fk_branch As Integer = 0, Optional fk_employee As Integer = 0, Optional fk_person As Integer = 0) As Integer

   Dim sql As String
   Dim R As Result
   Dim SendingEntity As Collection
   Dim EmptyCollection As Collection
   '---------------------------------------------------------------------------------
   '  FIXME fk_lu_provider_type seems not used in this query?legacy stuff see above the parameter passed in
   'First, see if we have an entry in documents.sending_entities, if so, get the key
   '   pk serial NOT NULL,
   '   fk_lu_request_type integer, -- The type of provider eg pathology provider, radiology provider
   '   msh_sending_entity text NOT NULL, -- the entity sending, could be unintelligable eg a NATA/number or a recognizable name eg Hunter Radiology, however often bears no relationship to a real person or company
   '   msh_transmitting_entity text, -- could be the sending entity or third party transmitter eg Medical Objects, or the name of a computer program generating the hl7
   '   fk_lu_message_display_style integer NOT NULL, -- display as letter or result style
   '   fk_branch integer,
   '   fk_employee integer,
   '   fk_person integer,
   '   fk_lu_message_standard integer NOT NULL, -- hl7 or pit
   '   exclude_ft_report boolean DEFAULT false, -- if true then no free text segments will be shown
   '   exclude_pit boolean DEFAULT false, -- if contains PIT segments if true these will not be shown (often duplicated the hl7 data itself)
   '   abnormals_foreground_color integer DEFAULT 16711680,
   '   abnormals_background_color integer DEFAULT 16777215,
   '
   '   The fk_lu_display_style is only passed to this routine to set a default display for a new sender
   '----------------------------------------------------------------------------------------------------
   sql = "Select * from documents.sending_entities where "
   If fk_branch <> 0 Then
      sql &= "fk_branch=" & fk_branch
      If fk_employee <> 0 Then
         sql &= " AND fk_employee = " & fk_employee
      Else
         sql &= " AND fk_employee = 0"
      Endif
   Else
      '------------------------------------------------------------------
      'if not a company and employee must be just a sole trader or person
      '------------------------------------------------------------------
      If fk_person <> 0 Then sql &= " fk_person=" & fk_person
   End If
   R = modDBConnect.exec_query(sql)
   SendingEntity = New Collection
   If R.count Then
      SendingEntity!fk_sending_entity = R!pk
   Else
      'if fk_branch supplied and have no sending entity - get the branch name
      If fk_branch <> 0 Then
         sql = "Select * from contacts.vwOrganisations where fk_branch = " & fk_branch
         R = modDBConnect.exec_query(sql)
         If R.count Then
            originator = R!organisation & "." & R!branch
         Endif
      Endif
      SendingEntity!msh_transmitting_entity = "snail mail"
      SendingEntity!fk_lu_message_display_style = fk_lu_message_display_style
      SendingEntity!msh_sending_entity = originator
      SendingEntity!fk_branch = fk_branch
      SendingEntity!fk_employee = fk_employee
      SendingEntity!fk_person = fk_person
      SendingEntity!fk_lu_message_standard = const.document_message_standard_none 'this routine only used by scanned docs
      SendingEntity!fk_sending_entity = modInboxDBI.Save_HL7_FileHandling_Defaults(EmptyCollection, 0, SendingEntity)
      modDBConnect.CommitTrans()
   Endif
   Return SendingEntity!fk_sending_entity

End

Public Sub Document_Unallocate_Patient(fk_document As Integer)
   '---------------------------------------
   'Unlinks a patient to a current document
   '----------------------------------------

   modDBConnect.exec_query("Update documents.documents set fk_patient = null WHERE pk =" & fk_document)

End
