' Gambas class file

' Gambas module file

' Copyright (C) 2008-2015 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' Database interface for research
'--------------------------------------------------------------------------------------------------
'A MODULE TO ANALYSE PATIENT'S WITH HBA1C
'  - This will be changed once I've imported my data to be patients
'    with a coded diagnoses of diabetes. If then there are patients
'    with hba1'c they will be added. IE the module's patient selection
'    will need heaps more intelligence - ie allow coded diabetes even
'    if they have no hba1c FIXME DO THIS
'    in Reload work out patient's BMI if possi7.47.4ble
'    add column to the patients table of BMI and OverweightKG.
'    hence could later do things like - show all patient more than Xkg overweight
'    or grade them into overweight, obese, morbid obese
'KNOWN BUGS
'  1) The hba1c >7 query when clicking on a cell dosn't match the initial count.
'  2)the eye review number overdue Is Wrong, As Is eye - review In date.
'  3)The BP number done but overdue Is Wrong
'TO DECIDE
'  the level of systolic BP you regard as abnormal for a diabetic, I've chosen 139, should be lower
'  to document this somewhere, to check via appropriate papers
'---------------------------------------------------------------------------------------------------  
' In Report
' 
' Total number of patients with hba1c (100)
' 
' Patients Excluded
' 
' Name - reason
' 
' total number of patients included in analysis (91)
' 
' surname, firstname DOB age address contact details
' 
' 
' Print the columnized grid
' 
' 
' Summary of findings
' 
' Diabetic Control 
' 
' Very Good  <= 7.0% 
' Adequate 7.1 - 8.0% 
' Suboptimal 8.1 - 9.0%
' 
' Poor >9.0%
' 
' Diabetic control is good in 75% of patients
' Diabetic control is adequate in 18% of patients
' 

Private Const abnormal_systolic_level As Integer = 139   'fixme see above.
Private bExit As Boolean
Private dacc_in_date As Picture = Picture["icons/12/green_dot.png"]
Private dacc_out_of_date As Picture = Picture["icons/12/red_dot.png"]
Private empty_2020png As Picture = Picture["icons/20/empty2020.png"]
Private patients As Collection
Private Patient As Collection
Private iTotalDataSetcount As Integer 
Private sSortOrder As String = "ASC"
Private LessThan6 As Integer
Private Between6and7 As Integer
Private Between7and7point5 As Integer
Private Between7point5and8 As Integer
Private num_control_very_good As Integer
Private num_control_adequate As Integer
Private num_control_suboptimal As Integer
Private num_control_poor As Integer

Private Over8 As Integer
Private num_underweight As Integer
Private num_weight_normal As Integer
Private num_overweight As Integer
Private num_obese As Integer
Private Form_Graph_Hba1c As FGraph
Private Form_Graph_Lipids As FGraph
Private Form_Graph_eGFR As FGraph

Private Form_Graph_Weight As FGraph
Private Form_Graph_BP As FGraph
Private iGraphFontSize As Integer 'applies to all graphs.
Private form_pdf As FPdf
Private medications As Collection
Private medications_display_by As String
Private colours As Variant[]
Private titles As String[]
Private total_value1 As Float = 0
Private values1 As New Float[]
Private titles1 As String[]
Private form_Progress_Notes As FProgressNotesViewer
Private iCurrentTab As Integer
Private cTab_Summary As Integer = 0
Private cTab_LastDACC As Integer = 1 
Private cTab_ProgressNotes As Integer = 2
'Private cTab_CarePlanning As Integer = 3
Private cTab_Recalls As Integer = 3
'Private cTab_StaffTasks As Integer = 5
Private CurrentConsult As CConsult  
Private Patients_Not_Diabetic As Collection
Private form_recalls As FRecalls
Private form_tasks As FStaffTasks
Private form_dacc As FDACC
Private form_medications As FMedicationsList
Private egFRs As Collection

Private bTempory_Table_Exists As Boolean
'Same order as in FDACC display
Private iGridRow_DACC As Integer = 0
Private iGridRow_Hba1c As Integer = 1
Private iGridRow_Eyes As Integer = 2
Private iGridRow_BP As Integer = 3
Private iGridRow_Height As Integer = 4
Private iGridRow_Weight As Integer = 5
Private iGridRow_Cholesterol As Integer = 6
Private iGridRow_Microalbumin As Integer = 7
Private iGridRow_RenalFunction As Integer = 8

Private LastRow As Integer
Private lastcol As Integer
Private tbstats_tags As Collection
Private tbstat_tag As Collection 
Private cNotDone As Integer = 0
Private cOverdue As Integer = 1
Private cAbnormal As Integer = 2
Private cInDate As Integer = 3
Private FBMI_Pie As FPie   
Private FHba1c_Pie As FPie

Public Sub Init()
   
   lblHba1cRange.width = lblFindPatient.Width
   cvwPatients.Columns.count = 8
   cvwPatients.Columns[2].Text = "Age"
   cvwPatients.Columns[3].Text = "hba1c Date" 
   cvwPatients.Columns[4].Text = "Hba1c"
   cvwValues.Columns.count = 2
   cvwValues.Columns[0].text = "Date"
   cvwValues.Columns[1].text = "Hba1c"
   cmbSortBy.Add("surname", 0)
   cmbSortBy.Add("age", 1)
   cmbSortBy.Add("hba1c")
   cmbHba1cRange.Add("all")
   cmbHba1cRange.Add("<6.0")
   cmbHba1cRange.Add("6.0-7.0")
   cmbHba1cRange.Add("7.0-7.5")
   cmbHba1cRange.Add("7.5-8.0")
   cmbHba1cRange.Add(">8.0") 
   Colours = New Variant[]
   colours.Add(Color.Blue)
   colours.Add(Color.Red)
   colours.Add(Color.Orange)
   colours.Add(Color.Yellow)
   colours.Add(Color.Green)
   colours.Add(Color.Gray)
   colours.Add(Color.Pink)
   colours.Add(Color.Cyan)
   colours.Add(Color.Magenta)
   colours.Add(Color.DarkBlue)
   colours.Add(Color.DarkGreen)
   
   FHba1c_Pie = New FPie(HBox_Pies) 
   FBMI_Pie = New FPie(HBox_Pies)
  
   Try Settings_Load()
   bExit = True   
   
   With Form_Graph_HBa1c = New FGraph(Hbox_GraphHba1c)
      .tbGraphRemove.Visible = False   
      .tbInboxResults_AddGraph.Visible = False  
      .chkGraph_MakeDefault.Visible = False  
      .HBox_Styletypes.Visible = False 
      .Vbox_Left.visible = False
      .VBox_Right.visible = False   
      .pbMeasurementGraph.Background = Color.White
      .slGraphFontSize.value = iGraphFontSize
   End With
   With Form_Graph_Weight = New FGraph(Hbox_GraphWeight)
      .tbGraphRemove.Visible = False   
      .tbInboxResults_AddGraph.Visible = False  
      .chkGraph_MakeDefault.Visible = False  
      .HBox_Styletypes.Visible = False 
      .Vbox_Left.visible = False
      .VBox_Right.visible = False   
      .pbMeasurementGraph.Background = Color.White
      .slGraphFontSize.value = iGraphFontSize
   End With
   With Form_Graph_Lipids = New FGraph(Hbox_GraphLipids)
      .tbGraphRemove.Visible = False   
      .tbInboxResults_AddGraph.Visible = False  
      .chkGraph_MakeDefault.Visible = False
      .HBox_Styletypes.visible = False
      .Vbox_Left.visible = False
      .VBox_Right.visible = False   
      .pbMeasurementGraph.Background = Color.White
      .slGraphFontSize.value = iGraphFontSize
   End With
   With Form_Graph_eGFR = New FGraph(Hbox_GraphEGFR)
      .tbGraphRemove.Visible = False   
      .tbInboxResults_AddGraph.Visible = False  
      .chkGraph_MakeDefault.Visible = False  
      .HBox_Styletypes.Visible = False 
      .Vbox_Left.visible = False
      .VBox_Right.visible = False   
      .pbMeasurementGraph.Background = Color.White
      .slGraphFontSize.value = iGraphFontSize
   End With
   With Form_Graph_BP = New FGraph(Hbox_GraphBP)
      .tbGraphRemove.Visible = False     
      .tbInboxResults_AddGraph.Visible = False  
      .chkGraph_MakeDefault.Visible = False  
      .HBox_Styletypes.Visible = False 
      .Vbox_Left.visible = False
      .VBox_Right.visible = False   
      .pbMeasurementGraph.Background = Color.White
      .slGraphFontSize.value = iGraphFontSize
   End With
    With form_medications = New FMedicationsList(Vbox_Medications)
      .Set_Embedded_Form_Name("FResearch")
   End With
   bExit = False 
   lblMeasure.text = "Last Total cholesterol"
   modEditAreaHelpers.Resize_labels(VBox_LastMeasurements, lblMeasure)
   Gridview1_Init()
   
End

Public Sub cvwPatients_Refresh()       'fixme remove flag                                     
   '----------------------------------------------------------
   'Displays a list of separate patients with their last hab1c
   '----------------------------------------------------------
   
   Dim key As Integer
   
   Gui_Clear()
   cvwPatients.Columns[0].width = 24
   For Each patient In patients  
      key = patient!pk 
    '  key = patient!fk_patient
      If patient!date_last_dacc = "01/01/1900" Then
         cvwPatients.Add(key, "", empty_2020png)
      Else
         If patient!dacc_overdue = True Then
            cvwPatients.Add(key, "", dacc_out_of_date)
         Else
            cvwPatients.Add(key, "", dacc_in_date)
         Endif
      Endif
      cvwPatients[key][1] = patient!surname & "," & patient!firstname
      cvwPatients[key][2] = patient!age_numeric
      cvwPatients[key][3] = Format(patient!observation_date, "dd/mm/yyyy")
      cvwPatients[key][4] = Format(patient!value_numeric, "##.0")  'the hba1c
      cvwPatients.Columns[4].text = "HbA1c"
      
      Select Case gridview1.row
         Case iGridRow_BP
            
            If patient!last_bp <> "" Then 
               cvwPatients[key][5] = Format(patient!date_last_bp, "dd/mm/yyyy")
               cvwPatients[key][6] = modMeasurementsDBI.BP_Format(patient!last_bp)
               If Val(Left(Str(patient!last_bp), 3)) > abnormal_systolic_level Then 
                  cvwPatients[key][7] = "HIGH"
               Endif
            End If   
            cvwPatients.Columns[5].text = "Date BP"
            cvwPatients.Columns[6].text = "mmHg"
         Case iGridRow_Weight
            cvwPatients[key][5] = Format(patient!date_last_weight, "dd/mm/yyyy")
            cvwPatients[key][6] = Format(patient!last_weight, "###.0")
            cvwPatients.Columns[5].text = "Date Weight"
            cvwPatients.Columns[6].text = "W(kg)"
            'fixme put in bmi, overweight
            
         Case iGridRow_Cholesterol
            cvwPatients[key][3] = Format(patient!date_last_ldlcholesterol, "dd/mm/yyyy")
            cvwPatients[key][4] = patient!ldl_cholesterol  'the cholesterol
            cvwPatients.Columns[4].text = "LDL"
            If patient!ldlcholesterol_reference_range <> "" Then 
               cvwPatients[key][5] = patient!ldl_cholesterol & " (" & patient!ldlcholesterol_reference_range & ")"
            End If   
            cvwPatients.Columns[5].text = "Range"
         Case iGridRow_Microalbumin
            
         Case iGridRow_RenalFunction
            cvwPatients[key][3] = Format(patient!date_last_egfr, "dd/mm/yyyy")
            cvwPatients[key][4] = patient!last_egfr & " (" & patient!egfr_reference_range & ")"  'the cholesterol
            cvwPatients.Columns[4].text = "eGFR"
            
         Case Else
            cvwPatients[key][3] = Format(patient!observation_date, "dd/mm/yyyy")
            cvwPatients[key][4] = patient!value_numeric  'the hba1c
            cvwPatients.Columns[4].text = "HbA1c"
            cvwPatients.Columns[5].text = ""
      End Select
   Next
   
End

Public Sub tbRefresh_Click()
   
   Patients_Reload()
   
End

Public Sub Reload()
   '------------------------------------------------------------------------------------
   'Reloads the data for all unique patients with hba1c no ordering into temporary table
   'The data is as yet incomplete, and unordered
   'we will insert new information such as data of last DACC
   'Have checked the numbers, the ranges are ok
   '------------------------------------------------------------------------------------   

   Dim data As Collection
   Dim date_last_hba1c As Date
   Dim last_hba1c As Variant
   Dim bhba1c_overdue As Boolean
   Dim num_hba1c_older_than_6months As Integer
   Dim num_hba1c_in_date As Integer
   '------------------------------------ 
   Dim LatestMicroalbumins As Collection
   Dim num_microalbumin_not_recorded As Integer
   Dim num_microalbumin_overdue As Integer
   Dim num_microalbumin_abnormal As Integer
   Dim num_microalbumin_in_date As Integer    
   Dim bMicroalbumin_overdue As Boolean
   Dim bmicroalbumin_not_recorded As Boolean 'per patient
   Dim bMicroalbumin_abnormal As Boolean     'per patient
   Dim date_last_microalbumin As Date
   Dim microalbumin_reference_range As String   
   Dim vMicroalbumin As Variant
   '------------------------------------  
   Dim num_had_dacc_but_overdue As Integer
   Dim num_without_dacc As Integer
   Dim num_had_dacc_in_date As Integer
   Dim RDacc As Result
   Dim bDaccOverdue As Boolean
   Dim Latex As String
   Dim date_last_dacc As Date
   '------------------------------------  
   Dim date_last_egfr As Date
   '  Dim seGFR As String  'eg > 90
   Dim vEgFR As Variant    'don't make me an integer, must be able to be null
   Dim beGFR_Abnormal As Boolean
   Dim eGFR_Reference_Range As String
   Dim bEgfr_Not_recorded As Boolean
   Dim bEGFR_Overdue As Boolean
   Dim num_egfr_not_recorded As Integer
   Dim num_egfr_abnormal As Integer
   Dim num_egfr_in_date As Integer
   Dim num_egfr_overdue As Integer
   '------------------------------------ 
   Dim num_eye_review_not_recorded As Integer
   Dim num_eye_review_Overdue As Integer
   Dim num_eye_review_in_date As Integer
   Dim eyedocuments As Collection 
   Dim eyereview_date As Date
   Dim beyereview_overdue As Boolean
   Dim beyereview_not_recorded As Boolean
   '------------------------------------ 
   Dim LatestBPs As Collection
   Dim last_bp As Variant
   Dim bBP_Overdue As Boolean
   Dim bBP_Not_Recorded As Boolean
   Dim bBP_Abnormal As Boolean
   Dim date_last_bp As Date
   Dim num_bp_overdue As Integer
   Dim num_bp_in_date As Integer
   Dim num_bp_not_recorded As Integer
   Dim num_bp_abnormal As Integer
   '------------------------------------ 
   Dim LatestWeights As Collection
   Dim bweight_overdue As Boolean
   Dim bweight_not_recorded As Boolean
   Dim date_last_weight As Date
   Dim last_weight As Variant
   Dim num_weight_overdue As Integer
   Dim num_weight_not_recorded As Integer
   Dim num_weight_abnormal As Integer 'abnormal BMI
   Dim num_weight_in_date As Integer
   
   Dim BMI As Variant
   Dim bBmi_abnormal As Boolean
   Dim bBMI_normal As Boolean
   Dim bBMI_Overweight As Boolean
   Dim bBMI_Obese As Boolean
   Dim bBMI_underweight As Boolean
   '------------------------------------ 
   Dim LatestHeights As Collection
   Dim bHeight_overdue As Boolean
   Dim bHeight_not_recorded As Boolean
   Dim date_last_height As Date
   Dim last_height As Variant
   Dim num_height_overdue As Integer
   Dim num_height_not_recorded As Integer
   Dim num_height_in_date As Integer
   '------------------------------------ 
   Dim LatestLDLCholesterols As Collection
   Dim LDlCholesterol As Variant
   Dim bLDLcholesterol_overdue As Boolean
   Dim bLDLCholesterol_abnormal As Boolean
   Dim bLDLCholesterol_not_at_target As Boolean
   Dim LDLCholesterol_Reference_Range As String
   Dim last_ldlcholesterol_date As Date
   Dim num_ldlcholesterol_overdue As Integer
   Dim num_ldlcholesterol_not_recorded As Integer
   Dim num_ldlcholesterol_not_at_target As Integer 
   Dim num_ldlcholesterol_in_date As Integer
   Dim ldl_upper_range As Variant
   '--------------------------------------------------
   'only examined for patients with high triglycerides
   '--------------------------------------------------
   Dim LatestTotalCholesterols As Collection 
   Dim TotalCholesterol As Variant
   Dim bTotalCholesterol_overdue As Boolean
   Dim bTotalCholesterol_abnormal As Boolean
   Dim bTotalCholesterol_not_at_target As Boolean
   Dim last_totalcholesterol_date As Date
   Dim TotalCholesterol_Reference_Range As String
   Dim num_TotalCholesterol_overdue As Integer
   Dim num_TotalCholesterol_not_recorded As Integer
   Dim num_TotalCholesterol_not_at_target As Integer 
   Dim num_TotalCholesterol_in_date As Integer
   Dim totalcholesterol_upper_range As Variant
   
   Inc Application.Busy
   Gui_Clear()
   LessThan6 = 0 
   Between6and7 = 0
   Between7and7point5 = 0  
   Between7point5and8 = 0
   Over8 = 0
   num_underweight = 0
   num_weight_normal = 0
   num_overweight = 0
   num_obese = 0
   Patients_Not_Diabetic = modResearchDBI.Patients_Not_Diabetic_Get()
   modResearchDBI.Patients_With_Hba1c_Tempory_Table_Create()                  'create the table we will use
   bTempory_Table_Exists = True
   patients = modResearchDBI.Patients_Get_Hba1cs()                            'get unique & latest but unordered and incomplete data
   If Not patients.count Then
      Dec Application.Busy
      Message.Info("No patient's could be identified as diabetic")
      Return 
   End If   
   '----------------------------------------------------------------------------------------------------------
   'this is a bug-fix I've not to date found why some measurements were not auto-parsed when a consult is save
   'so this checks all the patients progress notes and saves back to the back-end FIXME find the bug
   '-----------------------------------------------------------------------------------------------------------
   ' For Each patient In patients
   '    modMeasurementsDBI.Run_Measurement_Fix(modConsultDBI.progressnotes_get(patient!fk_patient), patient!fk_patient)
   ' Next
   egFRs = modResearchDBI.Patients_EgfR_Get()                                 'get egFr's for all these patients.
   eyedocuments = modResearchDBI.Patients_Get_Most_Recent_Eye_Documents()
   LatestBPs = modResearchDBI.Patients_Get_Most_Recent_BP()
   LatestWeights = modResearchDBI.Patients_Get_Most_Recent_Weight()
   LatestHeights = modResearchDBI.Patients_Get_Most_Recent_Height()
   LatestLDLCholesterols = modResearchDBI.Patients_Get_LDLCholesterol()   'all patients not just diabetes
   LatestTotalCholesterols = modResearchDBI.Patients_Get_TotalCholesterol()
   LatestMicroAlbumins = modResearchDBI.Patients_Microalbumins_Get()
   For Each patient In patients  
      If Not Patients_Not_Diabetic.Exist(patient!fk_patient) Then 
         '------------------------------------------------------------------------
         'Increment the counts for the hba1c ranges, work out if hba1c out of date
         '------------------------------------------------------------------------
         date_last_hba1c = patient!observation_date
         last_hba1c = patient!value_numeric  
         If patient!value_numeric <= 5.9 Then Inc LessThan6
         If patient!value_numeric >= 6 And patient!value_numeric <= 6.9 Then Inc Between6and7
         If patient!value_numeric >= 7.0 And patient!value_numeric <= 7.4 Then Inc Between7and7point5
         If patient!value_numeric >= 7.5 And patient!value_numeric <= 7.9 Then Inc Between7point5and8
         If patient!value_numeric >= 8.0 Then Inc Over8
         
         If patient!value_numeric <= 7.0 Then Inc num_control_very_good
         If patient!value_numeric > 7.0 And patient!value_numeric <= 8.0 Then Inc num_control_adequate
         If patient!value_numeric > 8.0 And patient!value_numeric <= 9.0 Then Inc num_control_suboptimal
         If patient!value_numeric > 9 Then Inc num_control_poor
         
         If DateDiff(patient!observation_date, Now(), gb.Month) > 6 Then
            Inc num_hba1c_older_than_6months 
            bhba1c_overdue = True
         Else
            bhba1c_overdue = False
            Inc num_hba1c_in_date
         Endif
         '---------------------------------
         'get the last DACC for the patient
         '---------------------------------
         bDaccOverdue = False                                                    'default to overdue DACC
         Latex = ""                                                              'default to no Latex
         date_last_dacc = Date(1900, 01, 01)
         RDacc = modResearchDBI.Patient_GetDaysSinceDACC(patient!fk_patient)     'get last DACC days/LaTex
         If RDacc.count Then 
            If Not IsNull(RDacc!days_since_dacc_done) Then
               If RDacc!days_since_dacc_done > 365 Then
                  bDaccOverdue = True  
                  Inc num_had_dacc_but_overdue
               Else
                  Inc num_had_dacc_in_date
               Endif
               latex = RDacc!latex
               date_last_dacc = RDacc!date_completed
            Else
               Inc num_without_dacc 'these are partially completed DACC's
            Endif
         Else
            Inc num_without_dacc
         End If 
         '------------------------------------------------------------------------------
         'get the last renal function egfr for the patient
         'unfortunately there are records with egfr Loinc but not value in value_numeric
         '------------------------------------------------------------------------------
         bEgfr_Not_recorded = False 
         bEGFR_Overdue = False   
         vEgFR = Null
         date_last_egfr = Date(1900, 01, 01) 
         If Not IsNull(egFRs[patient!fk_patient]) Then
            If Not IsNull(egFRs[patient!fk_patient]!value_numeric)
               ' seGFRseGFR = Str(egFRs[patient!fk_patient]!value_numeric) & egFRs[patient!fk_patient]!qualifier
               vEgFR = egFRs[patient!fk_patient]!value_numeric
               date_last_egfr = egFRs[patient!fk_patient]!observation_date
               If IsNull(date_last_egfr) Then date_last_egfr = Date(1900, 01, 01) 
               beGFR_Abnormal = False  
               eGFR_Reference_Range = Replace(egFRs[patient!fk_patient]!reference_range, "(", "")   'most labs don't bracket the range
               eGFR_Reference_Range = Replace(eGFR_Reference_Range, ")", "") 'some cretins do, HAPS I think
               If Not IsNull(egFRs[patient!fk_patient]!abnormal) Then
                  If egFRs[patient!fk_patient]!abnormal <> "N" Then 
                     beGFR_Abnormal = True
                     Inc num_egfr_abnormal
                  End If   
               Endif
               If Not (DateDiff(Now, DateAdd(date_last_egfr, gb.Year, 1), gb.day) <= 0) Then 'was it over  a year ago?
                  Inc num_egfr_in_date
               Else
                  Inc num_egfr_overdue
                  bEGFR_Overdue = True 
               End If   
            Else
               bEgfr_Not_recorded = True 
               beGFR_Abnormal = False   
               bEGFR_Overdue = False    'not recorded not included in overdue.
               Inc num_egfr_not_recorded
            End If
         Else
            Inc num_egfr_not_recorded
            bEgfr_Not_recorded = True  
            bEGFR_Overdue = False    'not recorded not included in overdue.
            beGFR_Abnormal = False  
         Endif
         '------------------------------------------------------------------------------
         'get the last microalbumin for the patient
         '------------------------------------------------------------------------------
         bmicroalbumin_not_recorded = False                                      'assume no microalbumin present
         bMicroalbumin_overdue = False  
         vMicroalbumin = Null
         date_last_microalbumin = Date(1900, 01, 01)                             'distinctive date if not done
         If Not IsNull(Latestmicroalbumins[patient!fk_patient]) Then
            If Not IsNull(Latestmicroalbumins[patient!fk_patient]!value_numeric)       'with this view should never be null
               vMicroalbumin = Latestmicroalbumins[patient!fk_patient]!value_numeric
               date_last_microalbumin = Latestmicroalbumins[patient!fk_patient]!observation_date
               bMicroalbumin_abnormal = False                                    'assume not abnormal
               microalbumin_reference_range = Replace(Latestmicroalbumins[patient!fk_patient]!reference_range, "(", "")   'most labs don't bracket the range
               microalbumin_reference_range = Replace(microalbumin_reference_range, ")", "") 'some cretins do, HAPS I think
               If Not (DateDiff(Now, DateAdd(date_last_microalbumin, gb.Year, 1), gb.day) <= 0) Then 'was it over  a year ago?
                  bMicroalbumin_overdue = False                                                     'microalbumin date < 1yr, not overdue
                  Inc num_microalbumin_in_date
               Else
                  bMicroalbumin_overdue = True                                                      'microalbumin > 1 year = ovedue
                  Inc num_microalbumin_overdue
               End If 
               If Not IsNull(Latestmicroalbumins[patient!fk_patient]!abnormal) Then     'but if is abnormal
                  If Latestmicroalbumins[patient!fk_patient]!abnormal <> "N" Then       'some vendors of hl7 put a normal flag in this field
                     bMicroalbumin_abnormal = True
                     Inc num_microalbumin_abnormal
                  Else
                     bMicroalbumin_abnormal = False   
                  End If   
               Endif
            Else
               bmicroalbumin_not_recorded = True 
               bMicroalbumin_abnormal = False   
               Inc num_microalbumin_not_recorded
            End If
         Else
            Inc num_microalbumin_not_recorded
            bmicroalbumin_not_recorded = True  
            bMicroalbumin_abnormal = False  
         Endif
         '--------------------------------------------------------------------------
         'get the last ldl cholesterol for the patient, also count how many too high
         '--------------------------------------------------------------------------
         bLDLcholesterol_overdue = True                                      'assume overdue
         bLDLCholesterol_abnormal = False 
         LDlCholesterol = ""
         LDLCholesterol_Reference_Range = ""
         last_ldlcholesterol_date = Date(1900, 01, 01)                                           'default to having no cholesterol
         If Not IsNull(LatestLDLCholesterols[patient!fk_patient]) Then                           'has had cholesterol done at some point
            LDlCholesterol = LatestLDLCholesterols[patient!fk_patient]!value_numeric             ' & LatestLDLCholesterols[patient!fk_patient]!reference_range
            last_ldlcholesterol_date = LatestLDLCholesterols[patient!fk_patient]!observation_date
            If Not (DateDiff(Now, DateAdd(last_ldlcholesterol_date, gb.Year, 1), gb.day) <= 0) Then 'was it over  a year ago?
               bLDLcholesterol_overdue = False                                                     'cholesterol date < 1yr, not overdue
               Inc num_ldlcholesterol_in_date
            Else
               bLDLcholesterol_overdue = True                                                      'cholesterol > 1 year = ovedue
               Inc num_ldlcholesterol_overdue
            End If 
            'References ranges are a problem, some labs give eg n1-n2 others only the upper eg <n2
            If Not IsNull(LatestLDLCholesterols[patient!fk_patient]!reference_range) Then          'do we have a reference range
               LDLCholesterol_Reference_Range = LatestLDLCholesterols[patient!fk_patient]!reference_range
               If InStr(LDLCholesterol_Reference_Range, "-") Then 
                  ldl_upper_range = Val(Split(LatestLDLCholesterols[patient!fk_patient]!reference_range, "-")[1])
               Else 
                  If Left(LDLCholesterol_Reference_Range, 1) = "<" Then
                     ldl_upper_range = Val(Right(LDLCholesterol_Reference_Range, Len(LDLCholesterol_Reference_Range) - 1))
                  End If
               End If   
            Endif
            
            If Not IsNull(LatestLDLCholesterols[patient!fk_patient]!abnormal) Then                  'if  cholesterol flagged as abnormal
               If LatestLDLCholesterols[patient!fk_patient]!abnormal <> "N" Then                    'some labs put a normal flag in this field
                  If LatestLDLCholesterols[patient!fk_patient]!value_numeric > ldl_upper_range Then   'if over the top
                     bLDLCholesterol_abnormal = True                                                'flag abnormal
                     bLDLCholesterol_not_at_target = True
                     Inc num_ldlcholesterol_not_at_target                                           'incremement the not at target count
                  Else
                     bLDLCholesterol_not_at_target = False
                     bLDLCholesterol_abnormal = False  
                  End If 
               End If   
            Else
               bLDLCholesterol_not_at_target = False  
            Endif
         Else                                                                                        'never had ldl cholesterol measured.
            Inc num_ldlcholesterol_not_recorded
            bLDLcholesterol_overdue = False  
            bLDLCholesterol_not_at_target = False  
            last_ldlcholesterol_date = Date(1900, 01, 01)                                           'default to having no cholesterol
            
         Endif
         '-----------------------------------------------------------------------------
         'get the last total cholesterol for the patient
         'This is a fallback position for those with high trig's and can't measure LDL
         '-----------------------------------------------------------------------------
         bTotalCholesterol_overdue = True                                      'assume overdue
         bTotalCholesterol_abnormal = False 
         TotalCholesterol = ""
         TotalCholesterol_Reference_Range = ""
         last_TotalCholesterol_date = Date(1900, 01, 01)                                             'default to having no cholesterol
         If Not IsNull(LatestTotalCholesterols[patient!fk_patient]) Then                             'has had cholesterol done at some point
            TotalCholesterol = LatestTotalCholesterols[patient!fk_patient]!value_numeric             ' & LatestTotalCholesterols[patient!fk_patient]!reference_range
            last_TotalCholesterol_date = LatestTotalCholesterols[patient!fk_patient]!observation_date
            If Not (DateDiff(Now, DateAdd(last_TotalCholesterol_date, gb.Year, 1), gb.day) <= 0) Then 'was it over  a year ago?
               bTotalCholesterol_overdue = False                                                      'cholesterol date < 1yr, not overdue
               Inc num_TotalCholesterol_in_date
            Else
               bTotalCholesterol_overdue = True                                                       'cholesterol > 1 year = ovedue
               Inc num_TotalCholesterol_overdue
            End If 
            'References ranges are a problem, some labs give eg n1-n2 others only the upper eg <n2
            If Not IsNull(LatestTotalCholesterols[patient!fk_patient]!reference_range) Then           'do we have a reference range
               TotalCholesterol_Reference_Range = LatestTotalCholesterols[patient!fk_patient]!reference_range
               If InStr(TotalCholesterol_Reference_Range, "-") Then 
                  totalcholesterol_upper_range = Val(Split(LatestTotalCholesterols[patient!fk_patient]!reference_range, "-")[1])
               Else 
                  If Left(TotalCholesterol_Reference_Range, 1) = "<" Then
                     totalcholesterol_upper_range = Val(Right(TotalCholesterol_Reference_Range, Len(TotalCholesterol_Reference_Range) - 1))
                  End If
               End If   
            Endif
            
            If Not IsNull(LatestTotalCholesterols[patient!fk_patient]!abnormal) Then                   'if  cholesterol flagged as abnormal
               If LatestTotalCholesterols[patient!fk_patient]!abnormal <> "N" Then                     'some labs put a normal flag in this field
                  If LatestTotalCholesterols[patient!fk_patient]!value_numeric > totalcholesterol_upper_range Then  'if over the top
                     bTotalCholesterol_abnormal = True                                                 'flag abnormal
                     bTotalCholesterol_not_at_target = True
                     Inc num_TotalCholesterol_not_at_target                                            'incremement the not at target count
                  Else
                     bTotalCholesterol_not_at_target = False
                     bTotalCholesterol_abnormal = False  
                  End If 
               End If   
            Else
               bTotalCholesterol_not_at_target = False  
            Endif
         Else                                                                                        'never had ldl cholesterol measured.
            Inc num_TotalCholesterol_not_recorded
            bTotalCholesterol_overdue = False  
            bTotalCholesterol_not_at_target = False  
            last_TotalCholesterol_date = Date(1900, 01, 01)                                           'default to having no cholesterol
         Endif
         '-------------------------------------------------------
         'get the last eye review for the patient
         'regarded as overdue previously done but out of date
         'hence num_eye_review_not_recorded = never had eye check
         '--------------------------------------------------------
         
         If Not IsNull(eyedocuments[patient!fk_patient]) Then
            eyereview_date = eyedocuments[patient!fk_patient]!date_created
            beyereview_not_recorded = False  
            If Not (DateDiff(Now, DateAdd(eyedocuments[patient!fk_patient]!date_created, gb.Year, 2), gb.day) <= 0) Then
               beyereview_overdue = False
               Inc num_eye_review_in_date
            Else
               Inc num_eye_review_Overdue
               beyereview_overdue = True 
            End If 
         Else
            eyereview_date = Date(1900, 01, 01)
            beyereview_not_recorded = True   
            beyereview_overdue = False  'kept false by definition all false = those with none + those overdue.  
            Inc num_eye_review_not_recorded
         Endif
         '-------------------------------------------
         'get the last BP measurement for the patient
         '-------------------------------------------
         bBp_Abnormal = False 
         If Not IsNull(LatestBPs[patient!fk_patient]) Then
            date_last_bp = LatestBPs[patient!fk_patient]!consult_date
            last_bp = LatestBPs[patient!fk_patient]!measurement
            If Len(Str(last_bp)) > 6 Or IsNull(LatestBPs[patient!fk_patient]!measurement) Then
               ' Message.Info("Richard, data error with BP") 'FIXME should never happen
               modMeasurementsDBI.Run_Measurement_Fix(modConsultDBI.progressnotes_get(patient!fk_patient), patient!fk_patient)
               LatestBPs = modResearchDBI.Patients_Get_Most_Recent_BP()
               Print LatestBPs[patient!fk_patient]!measurement
            Endif
            If Val(Left(Str(last_bp), 3)) > abnormal_systolic_level Then 'see top of file comments
               Inc num_bp_abnormal
               bBp_Abnormal = True
            End If   
            bBP_Not_Recorded = False 
            If Not (DateDiff(Now, DateAdd(LatestBPs[patient!fk_patient]!consult_date, gb.Month, 6), gb.day) <= 0) Then
               bBP_Overdue = False
               Inc num_bp_in_date
            Else
               Inc num_bp_overdue
               bBP_Overdue = True
            End If 
         Else  'no BP ever recorded for this patient
            Last_bp = ""
            Inc num_bp_not_recorded
            bBP_Not_Recorded = False    'fix me can I use null
            date_last_bp = Date(1900, 01, 01)
            bBP_Overdue = False  
         Endif
         
         '-----------------------------------------------
         'get the last weight measurement for the patient
         '-----------------------------------------------
         last_weight = 0
         If Not IsNull(LatestWeights[patient!fk_patient]) Then             'yes, there is a weight, check if in date
            date_last_weight = LatestWeights[patient!fk_patient]!consult_date
            bweight_not_recorded = False
            last_weight = LatestWeights[patient!fk_patient]!measurement
            If Not (DateDiff(Now, DateAdd(LatestWeights[patient!fk_patient]!consult_date, gb.Month, 6), gb.day) <= 0) Then
               bweight_overdue = False
               Inc num_weight_in_date
            Else
               Inc num_weight_overdue
               bweight_overdue = True
            End If 
         Else
            Inc num_weight_not_recorded
            bweight_not_recorded = False  'wrong nomenclature FIXME DO NOT MAKE THIS TRUE SHOULD BE NULL
            date_last_weight = Date(1900, 01, 01)
            bweight_overdue = False
         Endif
         '-----------------------------------------------
         'get the last height measurement for the patient
         '-----------------------------------------------
         last_height = 0
         If Not IsNull(Latestheights[patient!fk_patient]) Then             'yes, there is a height, check if in date
            date_last_height = Latestheights[patient!fk_patient]!consult_date
            bheight_not_recorded = False
            last_height = Latestheights[patient!fk_patient]!measurement
            If Not (DateDiff(Now, DateAdd(Latestheights[patient!fk_patient]!consult_date, gb.Month, 12), gb.day) <= 0) Then
               bheight_overdue = False
               Inc num_height_in_date
            Else
               Inc num_height_overdue
               bheight_overdue = True
            End If 
         Else
            Inc num_height_not_recorded
            bheight_not_recorded = False  'wrong nomenclature FIXME DO NOT MAKE THIS TRUE SHOULD BE NULL
            date_last_height = Date(1900, 01, 01)
            bheight_overdue = False
         Endif
         '-----------------------------
         'Calculate the BMI if possible
         '-----------------------------
         bBMI_Abnormal = False   
         BMI = Null
         bBMI_underweight = False
         bBMI_normal = False 
         bBMI_Overweight = False
         bBMI_Obese = False
         If last_weight <> 0 And last_height <> 0 Then
            BMI = modUtil.Calc_BMI(last_height, last_weight)
            If BMI < 20 Then 
               Inc num_underweight
               bBMI_underweight = True
               bBMI_abnormal = True
            End If   
            If BMI >= 20 And BMI <= 25 Then 
               Inc num_weight_normal
               bBmi_abnormal = False
               bBMI_normal = True
            End If   
            If BMI > 25 And BMI < 30 Then
               Inc num_overweight
               bBMI_Abnormal = True
               bBMI_Overweight = True
            End If   
            If BMI >= 30 Then 
               Inc num_obese
               bBMI_abnormal = True
               bBMI_Obese = True
            End If   
         Endif
         
         data = New Collection 
         data!fk_patient = patient!fk_patient
         data!fk_person = patient!fk_person
         data!fk_image = patient!fk_image
         data!pk_observations = patient!pk_observations
         data!firstname = patient!firstname
         data!surname = patient!surname
         data!wholename = patient!wholename
         data!birthdate = patient!birthdate
         data!age_numeric = patient!age_numeric
         data!street1 = patient!street1
         data!street2 = patient!street2
         data!town = patient!town
         data!postcode = patient!postcode
         data!observation_date = patient!observation_date
         data!value_numeric = patient!value_numeric
         data!date_last_dacc = date_last_dacc
         data!dacc_overdue = bDaccOverdue
         data!latex = Latex
         data!date_last_hba1c = date_last_hba1c
         data!hba1c_overdue = bhba1c_overdue   'older than 6 months
         data!last_hba1c = last_hba1c
         
         data!date_last_egfr = date_last_egfr
         data!last_egfr = veGFR
         data!egfr_abnormal = beGFR_Abnormal
         data!egfr_reference_range = eGFR_Reference_Range
         data!egfr_not_recorded = bEgfr_Not_recorded
         data!egfr_overdue = bEGFR_Overdue
         
         data!date_last_eye_review = eyereview_date
         data!eye_review_overdue = beyereview_overdue
         data!eye_review_not_recorded = beyereview_not_recorded
         
         data!date_last_bp = date_last_bp
         data!bp_overdue = bBP_OverDue
         data!bp_not_recorded = bBP_Not_Recorded
         data!last_bp = last_bp
         data!bp_abnormal = bBp_Abnormal
         
         data!date_last_height = date_last_height
         data!height_overdue = bHeight_overdue
         data!height_not_recorded = bheight_not_recorded
         data!last_height = last_height
         
         data!date_last_weight = date_last_weight
         data!weight_overdue = bweight_overdue
         data!weight_not_recorded = bweight_not_recorded
         data!last_weight = last_weight
         data!last_bmi = BMI
         data!bmi_abnormal = bBMI_Abnormal
         data!bmi_normal = bBMI_normal
         data!bmi_overweight = bBMI_Overweight
         data!bmi_obese = bBMI_Obese 
         data!bmi_underweight = bBMI_Underweight
         
         data!date_last_ldlcholesterol = last_ldlcholesterol_date
         data!ldl_cholesterol = LDlCholesterol
         data!ldlcholesterol_overdue = bLDLcholesterol_overdue
         data!ldlcholesterol_not_at_target = bLDLCholesterol_not_at_target
         data!ldlcholesterol_reference_range = LDLCholesterol_Reference_Range
         
         data!date_last_totalcholesterol = last_totalcholesterol_date
         data!total_cholesterol = totalCholesterol
         data!totalcholesterol_overdue = btotalcholesterol_overdue
         data!totalcholesterol_not_at_target = btotalCholesterol_not_at_target
         data!totalcholesterol_reference_range = totalCholesterol_Reference_Range
         
         data!last_microalbumin = vMicroalbumin                   'variant can be set to null
         data!date_last_microalbumin = date_last_microalbumin
         data!microalbumin_abnormal = bMicroalbumin_abnormal
         data!microalbumin_reference_range = microalbumin_reference_range
         data!microalbumin_not_recorded = bmicroalbumin_not_recorded
         data!microalbumin_overdue = bMicroalbumin_overdue
         
         modDBConnect.insert("patients_latest_hba1c", data)
      End If   
   Next
   modDBConnect.CommitTrans()
   '------------------------------------------------
   'Now, reload the genuine diabetics for future use
   'put up the headings and fill the statistics grid
   'iTotalDataSetcount
   '------------------------------------------------
   
   patients = modDBConnect.exec_query_collection("Select * from patients_latest_hba1c ORDER BY surname asc")
   If patients.count = 0 Then
      Message.info("No patient's with an hba1c value were found.")
      Return 
   Endif
   iTotalDataSetcount = patients.Count
   lblPatientsListHeading.Text = "Listing of all Patients" 
   cvwPatients.Columns[1].text = Str(iTotalDataSetcount) & " patients were found" 
   '-----------
   'Cholesterol
   '-----------
   Gridview1[iGridRow_Cholesterol, cNotDone].text = Str(num_ldlcholesterol_not_recorded) & " (" & modUtil.As_Percent(num_ldlcholesterol_not_recorded, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_Cholesterol, cOverdue].text = Str(num_ldlcholesterol_overdue) & " (" & modUtil.As_Percent(num_ldlcholesterol_overdue, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_Cholesterol, cAbnormal].text = Str(num_ldlcholesterol_not_at_target) & " (" & modUtil.As_Percent(num_ldlcholesterol_not_at_target, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_Cholesterol, cInDate].text = Str(num_ldlcholesterol_in_date) & " (" & modUtil.As_Percent(num_ldlcholesterol_in_date, iTotalDataSetcount) & ")"
   '--------------
   'Cycle of Care    
   '------------
   Gridview1[iGridRow_DACC, cNotDone].text = Str(num_without_dacc) & " (" & modUtil.As_Percent(num_without_dacc, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_DACC, cOverdue].text = Str(num_had_dacc_but_overdue) & " (" & modUtil.As_Percent(num_had_dacc_but_overdue, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_DACC, cAbnormal].text = "N/A"
   Gridview1[iGridRow_DACC, cInDate].text = Str(num_had_dacc_in_date) & " (" & modUtil.As_Percent(num_had_dacc_in_date, iTotalDataSetcount) & ")"
   '------------------------------------------------
   'Hba1c, arbitrarily selecting good control as < 7
   '------------------------------------------------
   lblhba1c.text = "HBA1c (n=" & Str(iTotalDataSetcount) & ") Very Good Control =" & modUtil.As_Percent(num_control_very_good, iTotalDataSetcount)
   ' lblhba1c.text = "HBA1c (n=" & Str(iTotalDataSetcount) & ") total < 7=" & modUtil.As_Percent(LessThan6 + Between6and7, iTotalDataSetcount)
   
   Gridview1[iGridRow_Hba1c, cNotDone].text = Str(0) & " (" & modUtil.As_Percent(0, iTotalDataSetcount) & ")" 'by definition will change once work on coded diagnoses for diabetes.
   Gridview1[iGridRow_Hba1c, cOverdue].text = Str(num_hba1c_older_than_6months) & " (" & modUtil.As_Percent(num_hba1c_older_than_6months, iTotalDataSetcount) & ")"
   ' Gridview1[iGridRow_Hba1c, cAbnormal].text = ">7 = " & Str(Between7and7point5 + Between7point5and8 + Over8) & " (" & modUtil.As_Percent(Between7and7point5 + Between7point5and8 + Over8) & ")"
   Gridview1[iGridRow_Hba1c, cAbnormal].text = ">7 = " & Str(iTotalDataSetcount - num_control_very_good) & " (" & modUtil.As_Percent(iTotalDataSetcount - num_control_very_good, iTotalDataSetcount) & ")"
   
   Gridview1[iGridRow_Hba1c, cInDate].text = Str(num_hba1c_in_date) & " (" & modUtil.As_Percent(num_hba1c_in_date, iTotalDataSetcount) & ")"
   '----------
   'Eye Review 
   '----------
   Gridview1[iGridRow_Eyes, cNotDone].text = Str(num_eye_review_not_recorded) & " (" & modUtil.As_Percent(num_eye_review_not_recorded, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_Eyes, cOverdue].text = Str(num_eye_review_Overdue) & " (" & modUtil.As_Percent(num_eye_review_Overdue, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_Eyes, cAbnormal].text = "N/A"
   Gridview1[iGridRow_Eyes, cInDate].text = Str(num_eye_review_in_date) & " (" & modUtil.As_Percent(num_eye_review_in_date, iTotalDataSetcount) & ")"
   '---------------
   'Blood Pressure   
   '---------------
   Gridview1[iGridRow_BP, cNotDone].text = Str(num_bp_not_recorded) & " (" & modUtil.As_Percent(num_bp_not_recorded, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_BP, cOverdue].text = Str(num_bp_overdue) & " (" & modUtil.As_Percent(num_bp_overdue, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_BP, cAbnormal].text = Str(num_bp_abnormal) & " (" & modUtil.As_Percent(num_bp_abnormal, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_BP, cInDate].text = Str(num_bp_in_date) & " (" & modUtil.As_Percent(num_bp_in_date, iTotalDataSetcount) & ")"
   '------
   'Weight    
   '------
   num_weight_abnormal = num_underweight + num_overweight + num_obese   
   Gridview1[iGridRow_Weight, cNotDone].text = Str(num_weight_not_recorded) & " (" & modUtil.As_Percent(num_weight_not_recorded, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_Weight, cOverdue].text = Str(num_weight_overdue) & " (" & modUtil.As_Percent(num_weight_overdue, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_Weight, cAbnormal].text = Str(num_weight_abnormal) & " (" & modUtil.As_Percent(num_weight_abnormal, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_Weight, cInDate].text = Str(num_weight_in_date) & " (" & modUtil.As_Percent(num_weight_in_date, iTotalDataSetcount) & ")"
   '------
   'height    
   '------
   Gridview1[iGridRow_height, cNotDone].text = Str(num_height_not_recorded) & " (" & modUtil.As_Percent(num_height_not_recorded, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_height, cOverdue].text = Str(num_height_overdue) & " (" & modUtil.As_Percent(num_height_overdue, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_height, cInDate].text = Str(num_height_in_date) & " (" & modUtil.As_Percent(num_height_in_date, iTotalDataSetcount) & ")"
   
   '--------------
   'Microalbumin    
   '------------
   Gridview1[iGridRow_Microalbumin, cNotDone].text = Str(num_microalbumin_not_recorded) & " (" & modUtil.As_Percent(num_microalbumin_not_recorded, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_Microalbumin, cOverdue].text = Str(num_microalbumin_overdue) & " (" & modUtil.As_Percent(num_microalbumin_overdue, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_Microalbumin, cAbnormal].text = Str(num_microalbumin_abnormal) & " (" & modUtil.As_Percent(num_microalbumin_abnormal, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_Microalbumin, cInDate].text = Str(num_microalbumin_in_date) & " (" & modUtil.As_Percent(num_microalbumin_in_date, iTotalDataSetcount) & ")"
   '------
   'eGFR    
   '------
   Gridview1[iGridRow_RenalFunction, cNotDone].text = Str(num_egfr_not_recorded) & " (" & modUtil.As_Percent(num_egfr_not_recorded, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_RenalFunction, cOverdue].text = Str(num_egfr_overdue) & " (" & modUtil.As_Percent(num_egfr_overdue, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_RenalFunction, cAbnormal].text = Str(num_egfr_abnormal) & " (" & modUtil.As_Percent(num_egfr_abnormal, iTotalDataSetcount) & ")"
   Gridview1[iGridRow_RenalFunction, cInDate].text = Str(num_egfr_in_date) & " (" & modUtil.As_Percent(num_egfr_in_date, iTotalDataSetcount) & ")"
   '---------------------------
   'Finally, make the pie chart
   '---------------------------
   ' HBA1C_Make_Pie()
   Pie_Chart_Hba1c()
   Pie_Chart_BMI()
   Dec Application.Busy
'Catch
 '  Message.Info("An error occurred whilst trying to analyse the data.\n\nIf this persists please email the developers.")
   
End

Public Sub mnuDiabeticPatients_Click()
   '-----------------------------------------------------------------
   'Popup the menu over the patient's list, allow cleaning up of data
   '-----------------------------------------------------------------   
   
   Dim x As Integer
   Dim icount As Integer
   Dim sMsg As String
   
   sMsg = "You have selected to alter the status of %number%  %status%.\n\nThey will no longer appear in "
   "the patients list or the clinical record, but will not actually be removed from the database."
   "\n\nAre you sure you wish to proceed?"
   
   Select Case Last.tag
      Case "change font"
         modUtilGUI.Columnview_SetFont(cvwPatients, "FDiabetesResearch")
      Case "show marked as left"      'show diabetic patients marked as left
         
      Case "re-joined practice"
         modDBConnect.update("clerical.data_patients", Null, ["pk": patient!fk_patient, "fk_lu_active_status": const.PatientStatus_Active])
         modDBConnect.CommitTrans()
         Goto Reload_DATA
      Case "show deceased" 'show diabetic patients marked as deceased
         
      Case "mark not deceased"  'make them alive again if accidently marked dead
         Message.Title = "Resurrecting a Dead Patient" 
         If Message.Question("Play God... bring back to life?", "Yes", "No") = 2 Then Return
         modDBConnect.update("contacts.data_persons", Null, ["pk": patient!fk_person, "deceased": False]) 'mark person deceased
         modDBConnect.CommitTrans()    
         Goto Reload_DATA   
         
      Case "left practice"
         '------------------------------------------------
         'create appropriate message for 1 or more patient
         '------------------------------------------------
         cvwPatients.MoveFirst
         For x = 0 To cvwPatients.count - 1
            If cvwPatients.Item.Selected = True Then
               Inc icount 
            End If    
            cvwPatients.MoveNext
         Next
         If icount = 1 Then 
            Message.Title = "Marking a Patient as Left The Practice"
            sMsg = Replace(sMsg, "%number%", "a patient")
            sMsg = Replace(sMsg, "%status%", "who has left the practice")  
         Else If icount > 1 Then
            Message.Title = "Marking Patients as Left The Practice"
            sMsg = Replace(sMsg, "%number%", "a number of patients")
            sMsg = Replace(sMsg, "%status%", "who have left the practice")
         Endif
         If Message.Question(sMsg, "Yes", "No") = 2 Then Return
         '---------------------
         'User wants to proceed
         '---------------------
         ' modDBConnect.exec_query("drop table patients_latest_hba1c") 
         cvwPatients.MoveFirst
         For x = 0 To cvwPatients.count - 1
            If cvwPatients.Item.Selected = True Then
               patient = patients[cvwPatients.Item.Key]
               modDBConnect.update("clerical.data_patients", Null, ["pk": patient!fk_patient, "fk_lu_active_status": const.PatientStatus_Inactive])
               modDBConnect.CommitTrans()
            Endif
            cvwPatients.MoveNext 
         Next    
         Goto Reload_DATA
      Case "exclude giving reason"
         '------------------------------------------------------------------------------
         'allowable reasons could be e.g 'dying of cancer' or 'demented in nursing home'
         '------------------------------------------------------------------------------
      Case "mark not diabetic"
         ' modDBConnect.exec_query("drop table patients_latest_hba1c")   
         modResearchDBI.Patient_Not_Diabetic_Mark(patient!fk_patient)
         modDBConnect.CommitTrans()
         Goto Reload_DATA
      Case "mark deceased"
         '------------------------------------------------
         'create appropriate message for 1 or more patient
         '------------------------------------------------
         cvwPatients.MoveFirst
         For x = 0 To cvwPatients.count - 1
            If cvwPatients.Item.Selected = True Then
               Inc icount 
            End If    
            cvwPatients.MoveNext
         Next
         If icount = 1 Then 
            Message.Title = "Marking a Patient as Deceased"
            sMsg = Replace(sMsg, "%number%", "a patient")
            sMsg = Replace(sMsg, "%status%", "who has died")  
         Else If icount > 1 Then
            Message.Title = "Marking Patients as Deceased"
            sMsg = Replace(sMsg, "%number%", "a number of patients")
            sMsg = Replace(sMsg, "%status%", "who have died")
         Endif
         If Message.Question(sMsg, "Yes", "No") = 2 Then Return
         '---------------------
         'User wants to proceed
         '---------------------
         '  modDBConnect.exec_query("drop table patients_latest_hba1c")  'will have to be refreshed
         cvwPatients.MoveFirst
         For x = 0 To cvwPatients.count - 1
            If cvwPatients.Item.Selected = True Then
               patient = patients[cvwPatients.Item.Key]
               modDBConnect.update("contacts.data_persons", Null, ["pk": patient!fk_person, "deceased": True]) 'mark person deceased
               modDBConnect.CommitTrans()
            Endif
            cvwPatients.MoveNext
         Next    
         Goto Reload_DATA
   End Select 
   Return 
   
Reload_DATA:
   modDBConnect.exec_query("drop table patients_latest_hba1c") 
   Reload()
   cvwPatients_Refresh()
   If cvwPatients.count Then
      cvwPatients.MoveFirst
      cvwPatients.Item.Selected = True
      cvwPatients.SetFocus()
   Else
      'bumma none are left 
      Gui_Clear()
   Endif
Catch
   Return

End

Public Sub cvwPatients_Menu()
   
   If Last.count Then mnuDiabeticPatients.popup()
   
End

Public Sub cvwPatients_Select()
   
   If cvwPatients.count = 0 Then Return   
   cvwPatients.MoveCurrent()
   patient = patients[cvwPatients.Item.Key]
   Patient_Display()
   
End

Public Sub Patient_Display_Summary()
   '------------------------------------------------------------------------
   'Display a summary of the patient's diabetic data
   '  - Their picture, with red/green or white outline as per the convention
   '  - summary of when last components done and if overdue
   '  - a list of their medications
   '------------------------------------------------------------------------
   
   Vbox_PictureFrame.Background = Vbox_PictureFrame.Parent.Background
   pbPatientPicture.Picture = Null
   lblhba1c.Foreground = Color.Black
   lbllastBP.Foreground = Color.Black
   lblLastBMI.Foreground = Color.Black
   lblLasteGFR.Foreground = Color.Black
   lblLastTotalCholesterol.Foreground = Color.Black
   lblLastEyecheck.Background = Color.Background
   lblLastheight.Foreground = Color.Black
   lblLastWeight.Foreground = Color.Black
   lblLastMicroalbumin.Foreground = Color.Black
   '------------------------------------------------------------------
   'Display information about the DACC (diabetes annual cycle of care)
   '------------------------------------------------------------------
   If Year(patient!date_last_dacc) = 1900 Then
      lblsummaryheading.text = "No Diabetes Cycle of Care Recorded"
   Else
      If patient!dacc_overdue = True Then
         lblsummaryheading.text = "Overdue Diabetes Cycle of Care - Last " & Format(patient!date_last_dacc, "dd/mm/yyyy")
      Else
         lblsummaryheading.text = "Current Diabetes Cycle of Care - Due " & Format(DateAdd(patient!date_last_dacc, gb.year, 1), "dd/mm/yyyy")
      Endif
   End If   
   Try pbPatientPicture.Picture = modContactsDBI.Person_Get_Photo(patient!fk_image)
   If Year(patient!date_last_dacc) = 1900 Then
      Vbox_PictureFrame.Background = Color.White
   Else If patient!dacc_overdue = True Then
      Vbox_PictureFrame.background = Color.Red
   Else
      Vbox_PictureFrame.Background = Color.Green
   End If 
   Wait                                                              'update the gui.
   VBox_Summary.visible = True
   Consult_CheckStarted()
   lblpatientID.text = "ID=" & Str(patient!fk_patient)
   lblPatientName.text = modStrings.Capitalise_Words_In_String(patient!wholename)
   tlPatientDetails.text = ""
   tlPatientDetails.text &= "Age:" & patient!age_numeric & "<BR>"
   tlPatientDetails.text &= "DOB:" & patient!birthdate & "<BR>"
   tlPatientDetails.text &= Patient!street1 & "<BR>"
   If Not IsNull(patient!street2) Then
      tlPatientDetails.text &= Patient!street2 & "<BR>"
   Endif
   tlPatientDetails.text &= Patient!town & " " & patient!postcode & "<BR><BR>"
   ' medications = modPrescribingDBI.Prescriptions_Written(patient!fk_patient)
   ' modPrescribingDBI.Prescriptions_Fill_Columnview(cvwMedications, medications, medications_display_by, True) 'active meds
   ' cvwMedications.Height = (cvwMedications.count + 1) * 18
   
   Try lblLastHba1c.text = Format(patient!observation_date, "dd/mm/yyyy") & " " & Str(patient!last_hba1c)
   If patient!last_hba1c > 8.0 Then
      lblLastHba1c.Foreground = Color.Red
   End If   
   '---------------------------------------------------------------------------
   'The egFR can never be null but if never done is arbitrarily 01/01/1900
   '---------------------------------------------------------------------------
   If patient!date_last_efr <> "01/01/1900" Then 
      lblLasteGFR.text = Format(patient!date_last_egfr, "dd/mm/yyyy") & " " & patient!last_egfr & " (" & patient!egfr_reference_range & ")"
      If patient!egr_abnormal Then
         lblLasteGFR.Foreground = Color.Red
      Endif
      If patient!egfr_overdue = True Then
         lblLasteGFR.text &= " [OVERDUE]"
      Endif
   Else
      lblLasteGFR.text = "No egfr"
   End If   
   '---------------------------------------------------------------------------
   'The eye check can never be null but if never done is arbitrarily 01/01/1900
   '---------------------------------------------------------------------------
   If patient!date_last_eye_review <> "01/01/1900" Then 
      lblLastEyecheck.text = Format(patient!date_last_eye_review, "dd/mm/yyyy")
      If patient!eye_review_overdue = True Then
         lblLastEyecheck.text &= " [OVERDUE]"
      Endif
   Else
      lblLastEyecheck.text = "No letter found"
   End If   
   '---------------------------------------------------------------------------
   'The last BP date can never be null but if never done is arbitrarily 01/01/1900
   '---------------------------------------------------------------------------
   
   If patient!last_bp <> "" Then 
      
      lbllastBP.text = Format(patient!date_last_bp, "dd/mm/yyyy") & " " & modMeasurementsDBI.BP_Format(patient!last_bp)
      If patient!bp_abnormal Then
         lbllastBP.Foreground = Color.Red
      Endif
      If patient!bp_overdue = True Then
         lbllastBP.text &= " [OVERDUE]"
      Endif
   Else
      lbllastBP.text = "No BP found'"
   End If  
   '----------------------------------------------------------------------------------
   'The last height date can never be null but if never done is arbitrarily 01/01/1900
   '----------------------------------------------------------------------------------
   If patient!date_last_height <> "01/01/1900" Then 
      lblLastheight.text = Format(patient!date_last_height, "dd/mm/yyyy") & " " & Format(patient!last_height, "###.#") & "cm"
      If patient!height_overdue = True Then
         lblLastheight.text &= " [OVERDUE]"
      Endif
   Else
      lblLastheight.text = "No height found'"
   End If  
   
   '----------------------------------------------------------------------------------
   'The last weight date can never be null but if never done is arbitrarily 01/01/1900
   '----------------------------------------------------------------------------------
   If patient!date_last_weight <> "01/01/1900" Then 
      lblLastWeight.text = Format(patient!date_last_weight, "dd/mm/yyyy") & " " & Format(patient!last_weight, "##.#") & "Kg"
      
      If patient!weight_overdue = True Then
         lblLastWeight.text &= " [OVERDUE]"
      Endif
   Else
      lblLastWeight.text = "No Weight found'"
   End If  
   '----------------------------------------------------------------------------------
   'The last BMI
   '----------------------------------------------------------------------------------
   If Not IsNull(patient!last_bmi) Then 
      lblLastBMI.text = Format(patient!last_bmi, "##.0")
      If patient!bmi_normal Then lblLastBMI.text &= " - normal"
      If patient!bmi_underweight Then lblLastBMI.text &= " - underweight"
      If patient!bmi_overweight Then lblLastBMI.text &= " - overweight"
      If patient!bmi_obese Then lblLastBMI.text &= " - obese" 
      If Not patient!bmi_normal Then
         lblLastBMI.Foreground = Color.Red
      Endif
   Else
      lblLastWeight.text = "No Weight found"
   End If  
   '----------------------------------------------------------------------------------
   'The last cholesterol date can never be null but if never done is arbitrarily 01/01/1900
   '----------------------------------------------------------------------------------
   If patient!date_last_totalcholesterol <> "01/01/1900" Then 
      lblLastTotalCholesterol.text = Format(patient!date_last_totalcholesterol, "dd/mm/yyyy") & " " & Format(patient!total_cholesterol, "#.0")
      If patient!totalcholesterol_overdue = True Then
         lblLastTotalCholesterol.text &= " [OVERDUE]"
      Endif
      If patient!totalcholesterol_not_at_target Then
         lblLastTotalCholesterol.Foreground = Color.Red
      Endif
   Else
      lblLastTotalCholesterol.text = "No total cholesterol found'"
   End If  
   
   '----------------------------------------------------------------------------------
   'The last ldlcholesterol date can never be null but if never done is arbitrarily 01/01/1900
   '----------------------------------------------------------------------------------
   If patient!date_last_ldlcholesterol <> "01/01/1900" Or Not IsNull(patient!ldl_cholesterol) Then 
      If Not IsNull(patient!ldl_cholesterol) Then  
         lblLastLDLCholesterol.text = Format(patient!date_last_ldlcholesterol, "dd/mm/yyyy") & " " & Format(patient!ldl_cholesterol, "#.0")
      End If   
      If patient!ldlcholesterol_overdue = True Then
         
         lblLastLDLCholesterol.text &= " [OVERDUE]"
         If Not IsNull(patient!total_cholesterol) Then
            lblLastLDLCholesterol.text &= " ?measured ?triglycerides high"
         Endif
      Endif
      If patient!ldlcholesterol_not_at_target Then
         lblLastLDLCholesterol.Foreground = Color.Red
      Endif
   Else
      lblLastLDLCholesterol.text = "No ldl cholesterol found"
   End If  
   '----------------------------------------------------------------------------------
   'The last microalbumin date can never be null but if never done is arbitrarily 01/01/1900
   '----------------------------------------------------------------------------------
   If patient!date_last_microalbumin <> "01/01/1900" Then 
      lblLastMicroalbumin.text = Format(patient!date_last_microalbumin, "dd/mm/yyyy") & " " & patient!last_microalbumin 
      lblLastMicroalbumin.text &= " (" & patient!microalbumin_reference_range & ")"
      If patient!microalbumin_overdue = True Then
         lblLastMicroalbumin.text &= " [OVERDUE]"
      Endif
      If patient!microalbumin_abnormal Then
         lblLastMicroalbumin.Foreground = Color.Red
      Endif
   Else
      lblLastMicroalbumin.text = "No microalbumin found'"
   End If 
   form_medications.init(currentconsult)     'display active meds list 
   '------------------------
   'Finally graph everything
   '------------------------
   Hba1c_ShowGraph
   Lipids_ShowGraph
   EGFR_ShowGraph
   Weight_ShowGraph
   BP_ShowGraph '
   
End

Public Sub Patient_Display_Notes()
   
   Consult_CheckStarted()
   If IsNull(form_Progress_Notes) Then 
      With form_Progress_Notes = New FProgressNotesViewer(VBox_ProgressNotes)
         .HBox_EditMode.Visible = False
      End With
   End If   
   form_Progress_Notes.Init(currentconsult, modProgressNotes.AllProgressNotes_Construct_Html(currentconsult)) 
   
End

Public Sub Patient_Display_DACC()
   
   ' If IsNull(form_pdf) Then
   '    With form_pdf = New FPdf(VBox_DACC)
   '       .visible = True  
   '       .btZoomIn.Visible = True
   '       .btZoomOut.Visible = True  
   '       .BtPrint.Visible = True 
   '    End With
   ' Endif
   If IsNull(form_dacc) Then
      With form_dacc = New FDacc(VBox_DACC)
         .Init(currentconsult)
      End With
   Endif
   '  Dacc_View_Last()
   
End

Public Sub Patient_Recalls()
   
   Consult_CheckStarted()
   If IsNull(form_recalls) Then
      form_recalls = New FRecalls(Vbox_Recalls)
      form_recalls.Init(CurrentConsult)
   Endif
   
End

Public Sub Patient_StaffTasks()
   
   ' Consult_CheckStarted()
   ' If IsNull(form_tasks) Then
   '    form_tasks = New FStaffTasks(Vbox_Staff_Tasks)
   '    form_tasks.Init()
   ' Endif
   
End

Public Sub Patient_Display()
   '-----------------------------------------------------
   'display a summary of the patients diabetes parameters
   '-----------------------------------------------------
    
   lblPatientName.text = patient!title & " " & patient!wholename
   currentconsult = Null
   Select Case iCurrentTab
      Case cTab_Summary
         Patient_Display_Summary
      Case cTab_ProgressNotes
         Patient_Display_Notes
      Case cTab_LastDACC
         Patient_Recalls()
   End Select
 
   
End

Public Sub Weight_ShowGraph()
   
   With Form_Graph_Weight
      .Set_fk_Patient(Patient!fk_patient)
      .Graph(Null, "", "weight")
   End With 
   
End

Public Sub Lipids_ShowGraph()
   
   With Form_Graph_Lipids
      .Set_fk_Patient(Patient!fk_patient)
      .Graph(Null, const.Loinc_TotalCholesterol, "HDL")
   End With 
   
End

Public Sub EGFR_ShowGraph()
   
   With Form_Graph_EGFR
      .Set_fk_Patient(Patient!fk_patient)
      .Graph(Null, const.Loinc_EGFR, "eGFR")
   End With 
   
End

Public Sub BP_ShowGraph()
   
   With Form_Graph_BP
      .Set_fk_Patient(Patient!fk_patient)
      .Graph(Null, "", "blood pressure")
   End With 
   
End

Public Sub Hba1c_ShowGraph()
   
   With Form_Graph_HBA1c
      .Set_fk_Patient(Patient!fk_patient)
      .Graph(Null, const.Loinc_HBA1c, "Hba1c")
   End With 
   
End

Public Sub rbSortAscendingDescending_Click()
   
   sSortOrder = Last.tag   
   Patients_Reload()   
   
End

Public Sub cmbsortBy_Click()
   
   Patients_Reload()   
   
End

Public Sub Patients_Reload()
   
   Dim fieldname As String
   Dim sql As String
   Dim iNoPatient_In_Range As Integer
   
   If IsNull(patients) Then Return 
   '  iDisplay_Subset = cDisplaySubset_hba1c
   Select Case cmbSortBy.text
      Case "hba1c"
         fieldname = "value_numeric"
      Case "age"
         fieldname = "age_numeric"
      Case "surname"
         fieldname = "surname"
   End Select
   sql = "Select * from patients_latest_hba1c "
   Select Case cmbHba1cRange.Text
      Case "<6.0"
         iNoPatient_In_Range = LessThan6
         sql &= "WHERE value_numeric <= 5.9 "
      Case "6.0-7.0"
         iNoPatient_In_Range = Between6and7
         sql &= " WHERE value_numeric between 6 and 6.9 "
      Case "7.0-7.5"
         iNoPatient_In_Range = Between7and7point5 
         sql &= " WHERE value_numeric between 7 and 7.4 "
      Case "7.5-8.0"  
         iNoPatient_In_Range = Between7point5and8 
         sql &= " WHERE value_numeric between 7.5 and 7.9 "
      Case ">8.0" 
         sql &= " WHERE value_numeric >= 8"
   End Select
   If Trim(txtSearch.text) <> "" Then
      If InStr(sql, "value_numeric") Then
         sql &= " AND "
      Else
         sql &= " WHERE "
      End If   
      sql &= "surname ILIKE $$%" & Trim(txtSearch.text) & "%$$"
   Endif
   Patients = modDBConnect.exec_query_collection(sql & " order by " & fieldname & " " & sSortOrder)
   cvwPatients_Refresh()   
   If cvwPatients.count And Trim(txtSearch.text) = "" Or cvwPatients.count = 1 Then
      cvwPatients.MoveFirst
      cvwPatients.Item.Selected = True
      cvwPatients.SetFocus()
      cvwPatients.Columns[0].text = Str(patients.count)
      If cmbHba1cRange.text <> "all" Then
         cvwPatients.Columns[0].text &= " (" & modUtil.As_Percent(iNoPatient_In_Range, iTotalDataSetcount) & ")"
      End If    
   Endif
   
End

Public Sub cmbHba1cRange_Click()
   
   Patients_Reload()   
   
End

Private Sub Gui_Clear()
   
   cvwPatients.Clear 
   cvwValues.Clear
   Form_Graph_Hba1c.Measurement_Graph_Picture_Clear
   Form_Graph_Lipids.Measurement_Graph_Picture_Clear
   Form_Graph_EGfr.Measurement_Graph_Picture_Clear
   Form_Graph_BP.Measurement_Graph_Picture_Clear
   Form_Graph_Weight.Measurement_Graph_Picture_Clear
   
End

Public Sub txtSearch_KeyRelease()
   '----------------------------------------------------
   'Except in hospital won't have many patients
   'so not using timer - if you want one I'll put one in
   '----------------------------------------------------
   
   If Not IsNull(patients) Then Patients_Reload()
   
End

Public Sub txtSearch_GotFocus()
   
   txtSearch.text = ""  
   
End

Public Sub txtSearch_KeyPress()
   
   If key.code = key.down Then
      If cvwPatients.count Then
         cvwPatients.MoveFirst
         cvwPatients.Item.Selected = True
         cvwPatients.SetFocus()
      End If
   Endif
   
End

Private Sub Settings_Load()
   
   Hsplit1.Layout = Settings["FDiabetesResearch/Hsplit1.layout", modUtilGUI.HSplit([617, 1076])] 
   Hsplit_PatientData.Layout = Settings["FDiabetesResearch/Hsplit_PatientData.layout", modUtilGUI.HSplit([561, 428])] 
   iGraphFontSize = Settings["FDiabetesResearch/graph_font.size", 3]
   cvwPatients.Font = Font[Settings["FDiabetesResearch/cvwPatients.font"], "DejaVu Sans,9"]
   
End

Public Sub Settings_Save()
   
   Settings["FDiabetesResearch/Hsplit1.layout"] = Hsplit1.Layout
   Settings["FDiabetesResearch/graph_font.size"] = iGraphFontSize
   Settings["FDiabetesResearch/Hsplit_PatientData.layout"] = Hsplit_PatientData.Layout
   
End

Public Sub SpinBox1_Change()
   
   If bExit Then Return  
   SpinBox1.Refresh()
   SpinBox1.Enabled = False
   Inc Application.Busy
   Form_Graph_Hba1c.slGraphFontSize.value = Last.value
   Form_Graph_Lipids.slGraphFontSize.value = Last.value
   Form_Graph_eGFR.slGraphFontSize.value = Last.value
   Dec Application.Busy
   SpinBox1.Enabled = True 
   
End


Public Sub Pie_Chart_Hba1c()
   '----------------------------------------------- 
   'Display the pie chart + labels with percentages
   '-----------------------------------------------
   
   Dim c As New Collection
   Dim data As Collection
   
   data = New Collection
   data!label = "very good <7"
   data!number = num_control_very_good
   c.Add(data, c.count)
   
   data = New Collection
   data!label = "adequate 7.1-8"
   data!number = num_control_adequate
   c.Add(data, c.count)
   
   data = New Collection
   data!label = "suboptimal 8.1-9"
   data!number = num_control_suboptimal
   c.Add(data, c.count)
   
   data = New Collection
   data!label = "poor >9"
   data!number = num_control_poor
   c.Add(data, c.count)
   
   FHba1c_Pie.Init(patients.count, c)
   
End

Public Sub Pie_Chart_BMI()
   
   Dim c As New Collection
   Dim data As Collection
   
   data = New Collection
   data!label = "Unknown"
   data!number = patients.count - num_underweight - num_weight_normal - num_overweight - num_obese
   c.Add(data, c.count)
   
   data = New Collection
   data!label = "Underweight"
   data!number = num_underweight
   c.Add(data, c.count)
   
   data = New Collection
   data!label = "Normal"
   data!number = num_weight_normal
   c.Add(data, c.count)
   
   data = New Collection
   data!label = "Overweight"
   data!number = num_overweight
   c.Add(data, c.count)
   
   data = New Collection
   data!label = "Obese"
   data!number = num_obese
   c.Add(data, c.count)
   
   FBMI_Pie.Init(patients.count, c)
   
End

Public Sub Dacc_View_Last()
   '--------------------------------------------------------
   'If it exists, then view the latex as pdf of the last DCC
   '-------------------------------------------------------- 
   
   If Not IsNull(patient!latex) Then
      With form_pdf
         .Load_PDF(modPrinting.Latex_To_PDF(patient!latex))
      End With
   Else
      TabStrip1.index = cTab_Summary
      Message.Info("Missing latex definition, sorry........")   
   Endif  
   
End

Public Sub Consult_CheckStarted()
   
   If IsNull(currentconsult) Then  
      currentconsult = New CConsult(Patient)           'Each patient has a new consult 
      'there is no commit until the consult type is set
      'currentconsult.Set(const.ConsultType_NotesPatientNotPresent, "diabetes audit") 
   End If
   
End

Public Sub TabStrip1_Click()
   
   If IsNull(Patient) Then 
      Last.index = 0  
      Return  
   End If   
   iCurrentTab = Last.index
   Select Case Last.Index
      Case cTab_Summary
         Patient_Display_Summary()
      Case cTab_LastDACC
         Patient_Display_DACC
      Case cTab_ProgressNotes
         Patient_Display_Notes()      
    '  Case cTab_CarePlanning
    '  Case cTab_StaffTasks 
     '    Patient_StaffTasks  
      Case cTab_Recalls
         Patient_Recalls 
   End Select
   
End

Public Sub tbstats_Click()
   
   Gridview1_View_Cell_Data(tbstats_tags[gridview1.row][gridview1.Column])
   
End

Public Sub Gridview1_View_Cell_Data(stxt As String)
   '---------------------------------------------------------------------
   'Filter diabetic cycle of care patients as "due", "overdue", "in date"
   '---------------------------------------------------------------------
   
   ' iDisplay_Subset = cDisplaySubset_hba1c
   If IsNull(patients) Or sTxt = "" Then Return   
   Select Case stxt
      Case "dacc overdue", "dacc in date", "no dacc"
         patients = modResearchDBI.Diabetic_Cycle_Of_Care_Status(sTxt)  
         lblPatientsListHeading.Text = "Patients DACC Status:" & sTxt  
      Case "hba1c", "hba1c in date", "hba1c overdue", "hba1c control suboptimal"
         patients = modResearchDBI.Patients_Get_HBA1C_Status(stxt)
         lblPatientsListHeading.Text = "Patients with " & stxt
      Case "eye review not recorded", "eye review overdue", "eye review in date"
         patients = modResearchDBI.Patients_Eye_Review_Status(sTxt)
         lblPatientsListHeading.Text = "Patients with " & stxt
      Case "bp not recorded", "bp measurement overdue", "systolic bp abnormal", "bp measurement in date"
         patients = modResearchDBI.Patients_BP_Status(sTxt)
         lblPatientsListHeading.Text = "Patient with " & sTxt
      Case "no height recorded", "height measurement overdue", "a height measurement in date"
         patients = modResearchDBI.Patients_Height_status(stxt)
         lblPatientsListHeading.Text = "Patients with "
      Case "no weight recorded", "weight measurement overdue", "an abnormal BMI", "a weight measurement in date"
         patients = modResearchDBI.Patients_Weight_status(stxt)
         lblPatientsListHeading.Text = "Patients with "
      Case "no cholesterol result", "a cholesterol overdue", "a cholesterol not at target", "a cholesterol in date"
         patients = modResearchDBI.Patients_Cholesterol_Status(stxt)
         lblPatientsListHeading.Text = "Patients with " & sTxt
      Case "no microalbumin recorded", "a microalbumin overdue", "a microalbumin in date", "an abnormal microalbumin"
         patients = modResearchDBI.microalbumin_status(sTxt)
         lblPatientsListHeading.Text = "Patients with " & sTxt
         
      Case "no eGFR recorded", "an eGFR overdue", "an abnormal eGFR", "an eGFR in date"
         patients = modResearchDBI.Patients_egfr_Status(stxt)
         lblPatientsListHeading.Text = "Patients with " & sTxt
   End Select
   
   cvwPatients.Columns[1].text = Str(patients.count) & "/" & Str(iTotalDataSetcount) & " " & sTxt
   cvwPatients_Refresh() 
   If cvwPatients.count Then
      cvwPatients.MoveFirst
      cvwPatients.Item.Selected = True
   Endif
   
End

Public Sub cvwMedications_Leave()
   
   Last.ScrollBar = Scroll.None
   
End

Public Sub cvwMedications_Enter()
   
   If Last.count Then Last.ScrollBar = Scroll.Horizontal
   
End

Public Sub Analyse()  
   '-------------------------------------------------------------------------------
   'Do the basic data analysis
   'As this can take some time, it is not automatically started when the form loads
   'otherwise the gui just seems to freeze
   '-------------------------------------------------------------------------------
   
   If bTempory_Table_Exists Then
      Try modDBConnect.exec_query("drop table patients_latest_hba1c") 
      modDBConnect.CommitTrans()   'fixme could just truncate it
   End If   
   Reload()                                        'create temporary table, load all data work out stats
   cvwPatients_Refresh()                           'fill the columnview to display the data
   If cvwPatients.count Then
      cvwPatients.MoveFirst
      cvwPatients.Item.Selected = True             'trigger cvwPatients_Select()
      cvwPatients.SetFocus()                       'which shows the first patient's data summary   
   Endif  
   
End

Public Sub Generate_Report()
   
   modUtilGUI.NotImplemented("Generating the report")
   
End

Public Sub Save_Snapshot()
   
   modUtilGUI.NotImplemented("Generating the report")
   
End

Public Sub tbEditArea_Click()
   
   Select Case Last.tag
      Case "analyse"
         Analyse()
      Case "generate report"
         Generate_Report()
      Case "save snapshot"
         Save_Snapshot()
   End Select
   
End

Public Sub Hbox_Stats_Leave()
   
   Last.background = Color.Default
   
End

Public Sub Hbox_Stats_Enter()
   '------------------------------------------------------------------------------
   'With some many stats lines, its hard to see which show button belongs to which
   'so just hightlight the row a bit
   '------------------------------------------------------------------------------
   
   Last.background = Color.SetRGB(210, 210, 210)
   
End

Public Sub Gridview1_Init()
   
   With Gridview1 
      .Rows.count = 9
      .Rows[iGridRow_DACC].text = "Cycle of Care  "
      .Rows[iGridRow_Hba1c].text = "Hba1c  "
      .Rows[iGridRow_BP].text = "Blood Pressure  "
      .Rows[iGridRow_Height].text = "Height"
      .Rows[iGridRow_Weight].text = "Weight"
      .Rows[iGridRow_RenalFunction].text = "Renal Function  "
      .Rows[iGridRow_Microalbumin].text = "Microalbumin"
      .Rows[iGridRow_Cholesterol].text = "LDL Cholesterol"
      .Rows[iGridRow_Eyes].text = "Eye Review"
      .Columns.count = 4
      .Columns[0].text = "  Not Done  "
      .Columns[1].text = "  Done But Overdue   " 
      .Columns[2].text = "  Abnormal      "
      .Columns[3].text = "  In Date   "
   End With
   tbstats_tags = New Collection
   tbstat_tag = New Collection
   tbstat_tag.Add("no dacc", 0)
   tbstat_tag.Add("dacc overdue", 1)
   tbstat_tag.Add("", 2)
   tbstat_tag.Add("dacc in date", 3)
   tbstats_tags.Add(tbstat_tag, 0)                 'tbstats_tags 0
   tbstat_tag = New Collection
   tbstat_tag.Add("hba1c", 0) '
   tbstat_tag.Add("hba1c overdue", 1) 
   tbstat_tag.Add("hba1c control suboptimal", 2) 
   tbstat_tag.Add("hba1c in date", 3) 
   tbstats_tags.Add(tbstat_tag, 1)               
   tbstat_tag = New Collection
   tbstat_tag.Add("eye review not recorded", 0)
   tbstat_tag.Add("eye review overdue", 1)
   tbstat_tag.Add("eye review abnormal", 2)         'FIXME not implemented
   tbstat_tag.Add("eye review in date", 3)
   tbstats_tags.Add(tbstat_tag, 2)                 
   tbstat_tag = New Collection
   tbstat_tag.Add("bp not recorded", 0)
   tbstat_tag.Add("bp measurement overdue", 1)
   tbstat_tag.Add("systolic bp abnormal", 2)          'FIXME not implemented
   tbstat_tag.Add("bp measurement in date", 3)
   tbstats_tags.Add(tbstat_tag, 3)   
   tbstat_tag = New Collection
   tbstat_tag.Add("no height recorded", 0)
   tbstat_tag.Add("height measurement overdue", 1)
   tbstat_tag.Add("", 2)                           
   tbstat_tag.Add("a height measurement in date", 3)  
   tbstats_tags.Add(tbstat_tag, 4)              
   tbstat_tag = New Collection
   tbstat_tag.Add("no weight recorded", 0)
   tbstat_tag.Add("weight measurement overdue", 1)
   tbstat_tag.Add("an abnormal BMI", 2)                'FIXME not implemented
   tbstat_tag.Add("a weight measurement in date", 3)
   tbstats_tags.Add(tbstat_tag, 5)    
   tbstat_tag = New Collection
   tbstat_tag.Add("no cholesterol result", 0)    
   tbstat_tag.Add("a cholesterol overdue", 1)    
   tbstat_tag.Add("a cholesterol not at target", 2)    
   tbstat_tag.Add("a cholesterol in date", 3)    
   tbstats_tags.Add(tbstat_tag, 6)                     
   tbstat_tag = New Collection
   tbstat_tag.Add("no microalbumin recorded", 0)
   tbstat_tag.Add("a microalbumin overdue", 1)
   tbstat_tag.Add("an abnormal microalbumin", 2)
   tbstat_tag.Add("a microalbumin in date", 3)
   tbstats_tags.Add(tbstat_tag, 7)
   tbstat_tag = New Collection
   tbstat_tag.Add("no eGFR recorded", 0)
   tbstat_tag.Add("an eGFR overdue", 1)
   tbstat_tag.Add("an abnormal eGFR", 2)
   tbstat_tag.Add("an eGFR in date", 3)
   tbstats_tags.Add(tbstat_tag, 8)
   
End

Public Sub Show_StatsButton()
   
End

Public Sub GridView1_Click()
   '----------------------------------------
   'User has clicked on a cell in the grid
   'Show the underlying data-set of patients
   '----------------------------------------
   
   gridview1[lastrow, lastcol].background = Color.White
   gridview1[gridview1.row, gridview1.Column].background = Color.Green
   LastRow = gridview1.Row
   lastcol = gridview1.Column
   Gridview1_View_Cell_Data(tbstats_tags[gridview1.row][gridview1.Column])
   
End

Public Sub Button1_Click()
   
   Dim key As Integer
   
   If IsNull(patients) Then Return
   
   cvwPatientsHighRisk.Clear()
   
   cvwPatientsHighRisk.Columns.count = 4
   patients = modResearchDBI.Diabetes_High_Risk_Patients()
   For Each patient In patients
      key = patient!pk
      cvwPatientsHighRisk.Add(key, 0)
      cvwPatientsHighRisk[key][0] = patient!surname & "," & patient!firstname
      cvwPatientsHighRisk[key][1] = patient!age_numeric
      
   Next
   
End
