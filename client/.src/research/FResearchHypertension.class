' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'----------------------------------------------------------------------
' PURPOSE   A research module for hypertension in the practics
'----------------------------------------------------------------------

' "K86005" "K85004"
Private Form_PreviousNotes As FProgressNotesViewer
Private Form_Medications As FClinLists_Medications
Private Form_Graph As FGraph
Private Average_BPs As Collection
Private currentconsult As CConsult
Private cvwPatients_Key As Integer
Private fk_patient As Variant
Private Patients_With_Coded_Hypertension As Collection   

Public Sub _new()
   
   With Form_PreviousNotes = New FProgressNotesViewer(Vbox_PreviousNotes)
      .Embedded_In_Form_Set_Name("FResearchHypertension")
   End With
   Form_Medications = New FClinLists_Medications(Vbox_Medications)
   With Form_Graph = New FGraph(HBox_Graph)
      .Set_Embedded_Form(Me.Name)
   End With
   With cvwPatients
      .Columns.Count = 5   
   End With
   Settings_Load
   Reload
   ' 
   
End

Public Sub EditArea_TxtBox_KeyPress()
   
   If EditArea_TxtBox_ExcludeKeys(key.code, Last.tag) = False Then  
      Stop Event
      Return
   End If
   If Key.code = Key.tab Or Key.code = Key.Return Then
      If Last.tag = "systolic" Then txtDiastolic.SetFocus
   Endif
   
End

Public Function EditArea_TxtBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   
   Dim bKeyValid As Boolean
   
   Select Case tag
      Case "systolic", "diastolic"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TxtBox_LostFocus()
   
   Last.BackGround = Color.white
   
End

Public Sub EditArea_TxtBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End

Public Sub tbReload_Click()
   
   Reload  
   
End

Public Sub Reload()
   
   Dim Average_BP As Collection
   Dim x As Integer
   
   If Trim(txtSystolic.text) = "" Or Trim(txtDiastolic.text) = "" Then 
      Message.Info("Please indicate the blood pressure range you are interested in")
      txtSystolic.SetFocus
      Return
   Endif
   Patients_With_Coded_Hypertension = modResearchDBI.Hypertension_Patients_With_Coded_Diagnosis()
   cvwPatients.Clear
   tlStats.text = "<TABLE>"
   tlStats.TEXT &= Row_Template()
   tlStats.TEXT = Replace(tlStats.Text, "col1", "Patients with coded diagnosis of Hypertension or equivalent")
   tlStats.TEXT = Replace(tlStats.Text, "col2", Str(Patients_With_Coded_Hypertension.count))
   tlStats.TEXT &= Row_Template()
   tlStats.TEXT = Replace(tlStats.Text, "col1", "Patients with hypertension without a coded diagnosis")
   Average_BPs = modUtil.Copy_Collection_Keyed_Sequentially(modResearchDBI.Blood_Pressure_Averages_Get(Val(txtSystolic.text), Val(txtDiastolic.text)))
   For Each average_BP In Average_BPs
      cvwPatients.Add(x, 0)
      cvwPatients[x][0] = average_BP!surname
      cvwPatients[x][1] = average_BP!firstname
      cvwPatients[x][2] = average_BP!age_numeric
      cvwPatients[x][3] = Str(average_BP!average_systolic) & "/" & Str(average_BP!average_diastolic)
      If Not Patients_With_Coded_Hypertension.Exist(average_BP!fk_patient) Then
         If InStr(tlStats.text, "col2") Then
            tlStats.TEXT = Replace(tlStats.Text, "col2", average_BP!surname & average_BP!firstname)
         Else
            tlStats.TEXT &= Row_Template()
            tlStats.TEXT = Replace(tlStats.Text, "col1", "")
            tlStats.TEXT = Replace(tlStats.Text, "col2", average_BP!surname & average_BP!firstname)
         Endif
      Endif
      Inc x 
   Next
   tlStats.text &= "</TABLE>"
   modUtilGUI.Columnview_Columns_Set_Size(cvwPatients, lblMeasure)
   
End

Public Function Row_Template() As String
   'for each row in the quiz
   'col 1 = the question, col2 = the text eg high, medium, low, none, col3 = a spacer
   
   Return ""
   "<COL WIDTH=50%>"
   "<COL WIDTH=20%>"
   "<TR VALIGN=TOP>"
   "<TD WIDTH=50%>"
   "col1"
   "</TD>"
   "<TD WIDTH=20%>"
   "col2"
   "</TR>"
   
End

Public Sub EditArea_TxtBox_Activate()
   
   If Trim(txtSystolic.text) <> "" And Trim(txtDiastolic.text) <> "" Then
      If Val(txtSystolic.text) > Val(txtDiastolic.text) Then
         tbReload_Click
      Endif
   End If   
   
End

Public Sub cvwPatients_Select()
   
   cvwPatients.MoveCurrent
   cvwPatients_Key = cvwPatients.Item.Key
   currentconsult = Null   
   lblPatient.text = Average_BPs[cvwPatients_Key]!title & " " & Average_BPs[cvwPatients_Key]!firstname & " " & Average_BPs[cvwPatients_Key]!surname   
   Patient_Show_Notes   
   Patient_Show_Medications
   Patient_Show_BP_Measurements
   Form_Graph.Init(currentconsult)
   
End

Public Sub Patient_Show_BP_Measurements()
   '-----------------------------------------------------
   'when user clicks on the tabbed lists for measurments
   'show list for bp/height/weight in a numerical list
   '-----------------------------------------------------
   
   Dim M As Collection
   Dim Measurement_value As String
   
   With cvwMeasurementValues
      .Clear
      .Columns.count = 2
      .Columns[0].width = 80
   End With
   currentconsult.Refresh("measurements")
   For Each M In currentconsult!measurements
      If M!fk_type = const.Measurement_BP Then
         'bad bug in measurements Ive not found FIXME
         'MEASUREMENT can be null bad bug
         If Not IsNull(M!measurement) Then
            measurement_value = modMeasurementsDBI.BP_Format(M!measurement)
            cvwMeasurementValues.Add(M!pk_measurement, 0)
            cvwMeasurementValues[M!pk_measurement][0] = Format(M!consult_date, "dd/mm/yyyy")
            cvwMeasurementValues[M!pk_measurement][1] = measurement_value
         End If
      Endif
   Next
Catch
   Return 'may have been called when currentconsult in this module is null (i.e not yet created)
   
End

Private Sub Patient_Show_Medications()
   
   Form_Medications.Init(currentconsult) 
   
End

Public Sub Patient_Show_Notes()
   
   currentconsult = New CConsult(Average_BPs[cvwPatients_key], const.ConsultType_NotesPatientNotPresent)  
   If Not IsNull(currentconsult) Then
      With Form_PreviousNotes
         .Embedded_In_Form_Set_Name("FInbox")
         .Init(currentconsult, modProgressNotes.AllProgressNotes_Construct_Html(currentconsult))
      End With
   Endif
   
End

Public Sub cvwPatients_Menu()
   
   If cvwPatients.count Then mnuPatients.Popup
   
End

Public Sub mnuPatients_Click()

   Dim sMsg As String = "Are you sure you want to mark this patient as "
   
   Select Case Last.tag
      Case "mark deceased"
         smsg &= "deceased."
         If Message.Question(smsg, "Yes", "No") = 2 Then Return
         If modDBConnect.update("contacts.data_persons", Null, ["pk": Average_BPs[cvwPatients_Key]!fk_person, "deceased": True]) Then
            modDBConnect.CommitTrans
            Reload 
         Endif
      Case "mark inactive"
         smsg &= "inactive"
         If Message.Question(smsg, "Yes", "No") = 2 Then Return
         If modDBConnect.update("clerical.data_patients", Null, ["pk": Average_BPs[cvwPatients_Key]!fk_patient, "fk_lu_active_status": const.PatientStatus_Inactive]) Then
            modDBConnect.CommitTrans()
            Reload 
         Endif
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwpatients, Me.name)
   End Select 
   
End

' drop view clin_measurements.vwSystolicDiastolic cascade;
' 
' Create or replace view clin_measurements.vwSystolicDiastolic as
' SELECT  
'    vwmeasurements.fk_patient, 
'         vwpatients.wholename, 
'         vwpatients.fk_person,
'         vwPatients.surname, 
'         vwpatients.firstname,
'         vwPatients.title,
'         vwPatients.sex,
'         vwPatients.age_numeric,
'         vwPatients.fk_lu_active_status,
'         vwPatients.deceased,
'         vwmeasurements.pk_measurement, 
'    vwmeasurements.consult_date,
'    vwmeasurements.measurement,
'    round(vwmeasurements.measurement/1000) as systolic,
'    vwmeasurements.measurement%1000 as diastolic
' FROM 
'    clin_measurements.vwmeasurements
' JOIN 
'    contacts.vwpatients on vwpatients.fk_patient = vwMeasurements.fk_patient
' WHERE 
'    vwmeasurements.deleted = false AND 
'    vwmeasurements.fk_type = 1 AND
'    vwPatients.deceased = False AND
'    vwPatients.fk_lu_active_status = 1 -- active
' ORDER BY
'    vwmeasurements.fk_patient, vwmeasurements.consult_date DESC;
' 
' ALTER TABLE clin_measurements.vwSystolicDiastolic   OWNER TO easygp;
' GRANT ALL ON TABLE clin_measurements.vwSystolicDiastolic TO staff;
' 
' Create or replace view clin_measurements.vwAverageBP as 
' select 
'    fk_patient,
'    fk_patient as pk, 
'    fk_person,
'    surname, 
'    firstname,  
'    title,
'    sex,
'    age_numeric,
'    round(avg (systolic)) as average_systolic,
'    round(avg (diastolic)) as average_diastolic 
' FROM   
'    clin_measurements.vwSystolicDiastolic
' GROUP BY
'    fk_patient, fk_person, surname , firstname, title, sex,age_numeric order by surname;
' 
' ALTER TABLE clin_measurements.vwAverageBP   OWNER TO easygp;
' GRANT ALL ON TABLE clin_measurements.vwAverageBP TO staff;
'  

Public Sub Settings_Load()
   
   cvwPatients.Font = Font[Settings[Me.Name & "/cvwPatients.font", "DejaVu Sans,9"]]
   Hsplit1.Layout = Settings[Me.Name & "/Hsplit1.Layout", modUtilGUI.HSplit([1, 1])]
   Vsplit1.Layout = Settings[Me.Name & "/Vsplit1.Layout", modUtilGUI.VSplit([2, 1])]
   Vsplit_Measurements.Layout = Settings[Me.Name & "/Vsplit_Measurements.Layout", modUtilGUI.VSplit([1, 1])]
   
End

Public Sub VSplit1_Resize()
   
   Settings[Me.Name & "/Vsplit1.Layout"] = Vsplit1.Layout
   
End

Public Sub HSplit1_Resize()
   
   Settings[Me.Name & "/Hsplit1.Layout"] = Hsplit1.Layout
   
End

Public Sub VSplit_Measurements_Resize()
   
   Settings[Me.Name & "/Vsplit_Measurements.Layout"] = VSplit_Measurements.layout
   
End
