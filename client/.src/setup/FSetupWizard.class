' Gambas class file

' Copyright (C) 2008-2011 Dr. Richard Terry, Dr. Ian Haywood

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
Private Const cPage_Welcome As Integer = 0
Private Const cPage_Licence As Integer = 1
Private Const cPage_EnterOrganisation As Integer = 3
Private Const cPage_ReviewSettings As Integer = 4
Private staff As Collection 
Private Multiple_Collections As Collection 
Private Towns As Collection 
Private town As Collection 
Private collection_member As Collection 
Private fk_town As Integer
Private fk_occupation As Integer
Private fk_category As Integer
Private fk_branch As Integer
Private fk_organisation As Integer 
Private fk_employee_category As Integer
Private clinic As Collection 

Public Sub wizard1_Close()
   'The final button in the wizard reached, logon the new user

   Me.Close(1)

End

Public Sub Wizard1_Cancel()
   '---------------------------------------------------
   'User has clicked cancel, give change to change mind
   '---------------------------------------------------  

   Me.Close(0)

End

Public Sub _new()

   Me.Title = "Welcome to EasyGP"
   Me.Center()
   Page_Welcome()
   
End

Public Sub Form_Close()
   '-------------------------------------------------------------------
   'May have accidentally clicked close, once change to salvage install
   'FIXME: EG. REMOVE DATABASE IF CREATED.
   '-------------------------------------------------------------------

   Me.Close(0)

End

Public Sub Save_Example_Patient()
   '---------------------------------------------------------------------
   'Note this routine is encapsulated in a begin-commit trans from save()
   'Put in a dummy patient Mr Test Patient
   '---------------------------------------------------------------------

   Dim old_pk As Integer                      'not used
   Dim Returned_collection As Collection      'not used
   Dim rows_in_view As Collection             'not used
   Dim views_comms As New Collection          'not used
   Dim comm As New Collection
   Dim comms As New Collection
   Dim address As New Collection
   Dim addresses As New Collection 
   Dim patient As New Collection
   Dim person As New Collection 
   
   '------------------------------------------------
   address!street1 = "The Gables"
   address!street2 = "1 Leafy Grove"
   address!fk_town = 230
   address!fk_lu_address_type = const.AddressType_Home
   addresses.Add(address, 0)
   '-------------------------------
   'now the patient specific stuff
   '-------------------------------
   person!retired = False 
   '--------------------------------------------------------------------------
   'The person's details
   '
   'data_persons = pk
   '        firstname
   '        surname
   '        salutation
   '        birthdateTrim(txtPhone.text)
   '        fk_country_birth
   '        fk_ethnicity
   '        fk_language
   '        memo
   '        fk_marital
   '        fk_title
   '        fk_sex0418 59219
   'FIXME: MIX UP PATIENT MEMO OR PERSON MEMO
   '--------------------------------------------------------------------------
   person!firstname = "Test"
   person!surname = "Patient"
   person!salutation = "Fred"
   person!birthdate = Date(1950, 09, 10)
   person!fk_title = 0 
   person!fk_sex = 0
   person!fk_marital = 0
   person!memo = "This is your test patient"
   person!country_code = "AU"
   person!fk_ethnicity = 1 'Australian
   person!fk_language = 22 'English
   '----------------------------------------------------
   'comms - remove unwanted keys prior to save
   '        if an existing record, comm_type will exist
   '----------------------------------------------------
   comm = New Collection
   comm!fk_type = const.CommModalityPhone
   comm!value = "02 49 5102912"
   comms.Add(comm, comms.count)
   
   comm = New Collection
   comm!fk_type = Const.CommModalityMobile
   comm!value = "0418 592195"
   comms.Add(comm, comms.count)
   
   comm = New Collection
   comm!fk_type = Const.CommModalityEmail
   comm!value = "tpatient@ozemail.com.au"
   comms.Add(comm, comms.count)
   patient!fk_person = modContactsDBI.Person_Save(rows_in_view, old_pk, person, comms, views_comms)
   modContactsDBI.Person_Addresses_Save(rows_in_view, old_pk, addresses, person)
   patient!fk_patient = modContactsDBI.Patient_Save(rows_in_view, old_pk, patient)

End

Public Sub Save_Organisation() As Boolean
   '----------------------------------------------------------------------
   'Creates the database entries for the main clinic for the organisation
   'If we get to this point we have already validated the data
   'returns true (at least will once I've discussed this with IAN
   'and sorted out a mechanism
   'Note this routine is encapsulated in a begin-commit trans from save()
   '----------------------------------------------------------------------

   Dim old_data As Collection 
   Dim old_pk As Integer
   Dim organisation As New Collection
   Dim branch As New Collection
   Dim address As New Collection 
   Dim comms As New Collection
   Dim comm As Collection 
   Dim old_comms As Collection
   Dim org_branch_keys As Collection  'keyed as "fk_organisation", "fk_branch"
   
   organisation!organisation = Trim(txtOrganisation.text)
   '--------------------------------------------------------------------
   'Note the branch branch will be "HEAD OFFICE" by default
   'The category is definable as not all users at General practitioners
   '--------------------------------------------------------------------
   branch!category = Trim(txtCategory.text)
   branch!branch = Trim(txtBranch.text) 
   address!street1 = Trim(txtStreet1.text)
   address!street2 = Trim(txtStreet2.text)
   address!head_office = True
   address!fk_town = fk_town
   '-------------------------------------
   'Add at a minimum the phone (enforced)
   '-------------------------------------
   comm = New Collection
   comm!fk_type = const.CommModalityPhone
   comm!value = Trim(txtPhone.text)
   comm!preferred_method = False
   comm!confidential = False
   comms.Add(comm, comms.count)
   If Trim(txtFax.text) <> "" Then
      comm = New Collection
      comm!fk_type = const.CommModalityFax
      comm!value = Trim(txtFax.text)
      comm!preferred_method = False
      comm!confidential = False
      comms.Add(comm, comms.count)
   End If
   If Trim(txtEmail.text) <> "" Then
      comm = New Collection
      comm!fk_type = const.CommModalityEmail
      comm!value = Trim(txtEmail.text)
      comm!preferred_method = False
      comm!confidential = False
      comms.Add(comm, comms.count)
   End If
   If Trim(txtWeb.text) <> "" Then
      comm = New Collection
      comm!fk_type = const.CommModalityWeb
      comm!value = Trim(txtWeb.text)
      comm!preferred_method = False
      comm!confidential = False
      comms.Add(comm, comms.count)
   End If
   org_branch_keys = modContactsDBI.organisation_save(old_data, old_pk, organisation, branch, address, comms, old_comms)
   fk_branch = org_branch_keys!fk_branch
   fk_organisation = org_branch_keys!fk_organisation
   '-----------------------------------------------------------------
   'Now, this organisation = a clinic, so save to admin.clinics table
   '-----------------------------------------------------------------
   clinic = New Collection 
   clinic!fk_branch = fk_branch
   clinic!fk_clinic = modAdminDBI.Clinic_Save(clinic)

End

Public Sub Save()
   '--------------------------------------------------------
   'Save_Organisation:
   '  Creates an entry in contacts schema for the organisation
   '  Creates an etnry in admin.clinics for the organisation
   '----------------------------------------------------------

   modDBConnect.BeginTrans
   Save_Organisation() 
   Save_Example_Patient()
   modDBConnect.CommitTrans()
   '------------------------------------------------------------------------------------------------------
   'Try and copy a default config file - this will only work when user running easygp from the source-code
   '------------------------------------------------------------------------------------------------------
   Try Copy Application.Path &/ "config/default_config" To User.Home &/ ".config/gambas3/client.conf"
   Try Copy Application.Path &/ "config/default_config" To User.Home &/ ".config/gambas3/easygp.conf"
End  

Public Sub Install_ICD10()
   
   Try Shell "psql easygp -f " & Replace(Application.path, "client", "db/coding/icd10_import_gambas.sql") & " Wait"
   
End

Public Sub Page_Welcome()

   tlStepWelcome.text = "<B>Welcome</B>"
   tlStepWelcome.Foreground = Color.DarkBlue

End

Public Sub Page_Licence()

   tlStepLicence.Foreground = Color.DarkBlue
   tlStepLicence.text = "<B>Accept Licence</B>"
   textedit1.ReadOnly = True
   textedit1.Text = File.Load("COPYING")

End

Public Sub Page_EnterOrganisation()

   tlStepPracticeDetails.Foreground = Color.DarkBlue
   tlStepPracticeDetails.text = "<B>Practice Details</B>"

End

Public Sub Page_ReviewSettings()
   '------------------------------------------------------
   'User reviews settings, just in case they've stuffed up
   'HTML substitution
   '------------------------------------------------------

   Dim sHtml As String
   Dim sMsg As String 

   tlReviewSettings.text = "<B>Review Settings</B>"
   tlReviewSettings.Foreground = Color.DarkBlue
   shtml = modHTML.SetupWizard_Review_Data
   shtml = Replace(shtml, "%name", txtOrganisation.text)
   shtml = Replace(shtml, "%street1", txtStreet1.text)
   If Trim(txtStreet2.text) <> "" Then
      shtml = Replace(shtml, "%street2", txtStreet2.text)
   Else
      shtml = Replace(shtml, "%street2<BR>", "")
   End If
   shtml = Replace(shtml, "%phone", txtPhone.text)
   
   If Trim(txtFax.text) = "" Then
      shtml = Replace(shtml, "%fax", txtFax.text)
   Else
      shtml = Replace(shtml, "%fax<BR>", "")
   End If   
   
   shtml = Replace(shtml, "%email", txtemail.text)
   shtml = Replace(shtml, "%web", txtWeb.text)
   sMsg = UCase(txtSuburb.text) & " " & txtState.text & " " & txtPostcode.Text
   shtml = Replace(shtml, "%suburb", sMsg)
   tlSummary.text = shtml
   
End

Public Sub Wizard1_Change()
   
   '-------------------------------------------------------------
   '
   '-------------------------------------------------------------
   
   Steps_FgColors_Reset
   Select Case Wizard1.Index
      Case cPage_Welcome
         Page_Welcome
      Case cPage_Licence
         Page_Licence
      Case cPage_EnterOrganisation
         Page_EnterOrganisation
      Case cPage_ReviewSettings
         Page_ReviewSettings
   End Select

End

Public Sub Wizard1_BeforeChange()
   '-------------------------------------------------------------------
   'This event triggers after the user has clicked the next button, but
   'before the page actually changes, so here is an opportunity to stop
   'the event if the information on the page is not correct
   'ie STOP EVENT > ABORTS THE PAGE CHANGE
   'Inspect the relevant validation events for what's the minumum
   'information required e.g.Valid_Organisation()
   '--------------------------------------------------------------------

   Dim $str As String

   Select Case Wizard1.Index
         
      Case cPage_Licence
         If Not chkLicence.value Then
            Hbox_Licence.Padding = 1
            Stop Event
            Return 
         Else
            Hbox_Licence.Padding = 0
         End If   
      Case cPage_EnterOrganisation
         If Not Valid_Organisation() Then Stop Event
         
      Case cPage_ReviewSettings
         '-------------------------------------------------------
         'Attempt To save the organisation, install coding system
         '-------------------------------------------------------
         Try Save() 
         If Error Then
            $str = Error.Text
            Stop Event
            Message.Info(Subst$("An error occurred whilst attempting to initialise EasyGP (&1).", $str))
            Me.Close(0)
         End If
         
   End Select

End

Public Function Valid_Organisation() As Boolean
   '--------------------------------------------
   'Validate the organisation, minimum allowable
   'is name, street, suburb and a phone
   '--------------------------------------------

   If Trim(txtOrganisation.text) = "" Then  
      txtOrganisation.SetFocus()
      Return False
   End If
   If Trim(txtStreet1.text) = "" Then
      txtStreet1.SetFocus()
      Return False
   End If
   If fk_town = 0 Then
      txtSuburb.SetFocus()
      Return False
   End If 
   If Trim(txtCategory.text) = "" Then
      txtCategory.SetFocus()
      Return False
   End If   
   If Trim(txtPhone.text) = "" Then  
      txtPhone.SetFocus()
      Return False
   End If
   Return True

End

Public Sub chkLicence_Click()

   If Last.value Then
      Hbox_Licence.Padding = 0
   Else
      Hbox_Licence.Padding = 1
   End If 
   
End

Public Sub Steps_FgColors_Reset()

   tlStepWelcome.Foreground = Color.DarkGray
   tlStepWelcome.text = "Welcome"
   tlStepLicence.Foreground = Color.DarkGray
   tlStepLicence.text = "Accept Licence"
   tlStepPracticeDetails.Foreground = Color.DarkGray
   tlStepPracticeDetails.text = "Practice Details"
   tlReviewSettings.text = "Review Settings"
   tlReviewSettings.Foreground = Color.DarkGray
   
End

Public Sub EditArea_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   Select Case Last.tag
      Case "organisation" 
         With Listview1
            .top = VBox_Organisation.Top + HBox_Suburb.top + txtSuburb.Height + VBox_Organisation.Padding
            .left = Wizard1.left + VBox_Organisation.Padding + txtSuburb.Left + Vbox_Page_Organisation.padding
            .width = txtSuburb.Width
            .raise
         End With  
      Case "suburb"
         With Listview1
            .top = VBox_Organisation.top + VBox_Page_Organisation.padding + HBox_Suburb.top + txtsuburb.height + FSetupWizard.padding
            .left = Wizard1.left + txtsuburb.Left + Vbox_Page_Organisation.padding + Hbox_Suburb.Left + FSetupWizard.padding
            .width = txtsuburb.Width
            .raise
         End With   
         
      Case "category"
         With Listview1
            .top = VBox_Organisation.top + VBox_Page_Organisation.padding + HBox_Category.top + txtCategory.height + FSetupWizard.padding
            .left = Wizard1.left + VBox_Organisation.Padding + txtCategory.Left + Vbox_Page_Organisation.padding + FSetupWizard.padding
            .width = txtCategory.Width 
            .raise
         End With   
   End Select

End

Public Sub Suburb_Selection(action As String, Optional calling_control As String) 
   '--------------------------------
   'PURPOSE    :Select a suburb
   'CALLED BY  :user typing in txtSuburb or
   '           listview1_DblClick()
   '--------------------------------

   Dim iMatched As Boolean

   Select Case action
      Case "get"
         '----------------------------------------------------------
         'Load all the towns  like txtSuburb into the popup listview1
         '----------------------------------------------------------
         Listview1.Visible = False  
         If Trim(txtSuburb.text) = "" Then Return 
         towns = modContactsDBI.Get_Town(Lower(Trim$(txtSuburb.text)))
         Listview1.Clear
         If towns.count Then 
            For Each town In towns 
               Listview1.Add(town!pk, town!town & " " & town!state & " " & town!postcode)
            Next 
            If towns.count = 1 Then 
               Suburb_Selection("accept")
            Else 
               Listview1.Visible = True
               Listview1.Raise
               Listview1.tag = txtSuburb
            End If
         Else
            Listview1.Visible = False  
         End If
      Case "accept"
         If calling_control = "textbox" Then
            '-------------------------------------------------------
            'User has just hit <enter> without scrolling on the list
            'try and find a match
            '-------------------------------------------------------
            If Listview1.Visible Then
               Listview1.MoveFirst
               Do Until Listview1.MoveNext()
                  If InStr(Lower(Listview1.Item.text), Trim(Lower(txtsuburb.text))) Then
                     iMatched = True 
                     Break
                  End If
               Loop
               If Not iMatched Then
                  Listview1.Visible = False
                  txtSuburb.SetFocus()
                  Return 'no match found for suburb user typed in 
               End If 
            End If
         Else
            '-------------------------------------
            'User is selecting from the popup list
            '-------------------------------------
            If Listview1.Visible Then
               
               Listview1.MoveCurrent()             'match internal cursor to marquee
            End If
         End If
         '------------------------------------------------------------------------------------------
         'either way, a match has been found within the list, or the user has selected from the list
         '------------------------------------------------------------------------------------------
         txtSuburb.text = towns[Listview1.Item.key]!town
         txtState.text = towns[Listview1.Item.key]!state 
         txtPostcode.text = towns[Listview1.Item.key]!postcode
         fk_town = towns[Listview1.Item.key]!pk
         txtCategory.SetFocus()
         Listview1.Visible = False  
   End Select
   
End

Public Sub Listview1_DblClick()
   '------------------------------------------------------
   'CALLED BY  listview1_keypress() if enter was pressed
   '           or user double clicking on the popup list
   '           or user hitting <enter> when list has focus
   '------------------------------------------------------

   Select Case Last.Tag.tag
      Case "category"
         Organisation_Category_Selection("accept", "list")  
      Case "suburb"
         Suburb_Selection("accept", "list")
   End Select
   Listview1.visible = False

End

Public Sub Listview1_KeyPress()
   '-------------------------------------------
   'popup list visible, user hits the enter key
   '-------------------------------------------

   If Key.Code = Key.RETURN Then 
      Listview1_DblClick()
   End If

End

Public Sub Organisation_Category_Selection(action As String, Optional calling_control As String)

   Select Case action
      Case "get"
         
         '----------------------------------------------------------------
         'Load all the categories like txtCategory into the popup listview1
         'Category can be allocated To either a person Or a branch
         '---------------------------------------------------------------
         Listview1.Visible = False  
         If Trim$(txtCategory.text) = "" Then Return 
         Multiple_Collections = modContactsDBI.Get_Category(Lower(Trim$(txtCategory.text)))
         Listview1.Clear
         '-----------------------------------------------------------------
         'If categories exist to match the text, auto-select or show a list
         '-----------------------------------------------------------------
         If Multiple_Collections.count Then 
            For Each collection_member In Multiple_Collections
               Listview1.Add(collection_member!pk, collection_member!category)
            Next 
            If Multiple_Collections.count = 1 Then 
               If Trim(Lower(txtCategory.text)) = Lower(collection_member!category) Then
                  Organisation_Category_Selection("select")
                  Return
               End If
            End If
            Listview1.Visible = True
            Listview1.Raise
            Listview1.tag = txtCategory
            Return 
            
         Else
            '---------------------------------------------------------------------
            'The text user has typed in dosn't exist yet in contacts.lu_categories
            'i.e this is a new category
            '---------------------------------------------------------------------
            fk_category = 0
         End If
         Listview1.Visible = False  
         
      Case "accept"
         '---------------------------------------------------------------
         'User has selected a category for either a branch or an employee
         '---------------------------------------------------------------
         If calling_control = "textbox" Then
            '-------------------------------------------------------
            'User has just hit <enter> without scrolling on the list
            'try and find a match
            '-------------------------------------------------------
            If Listview1.Visible Then
               Listview1.MoveFirst
               Do Until Listview1.MoveNext()
                  If Lower(Listview1.Item.text) = Trim(Lower(txtCategory.text)) Then
                     fk_category = Listview1.Item.Key
                     Listview1.Visible = False  
                     Break
                  End If
               Loop
            End If
         Else
            '-----------------------------------------------------------
            'Routine called by user clicking on list or pressing <enter>
            '-----------------------------------------------------------
            If Listview1.Visible Then
               Listview1.MoveCurrent   'set internal cursor to match marquee
               fk_category = Listview1.Item.key
               txtCategory.Text = Listview1.Item.Text
            Else
               fk_category = 0
               
            End If
         End If
         Listview1.Visible = False  
         txtPhone.SetFocus()
   End Select

End

Public Sub EditArea_Change()

   Select Case Last.tag
      Case "suburb"
         'user deletes suburb, delete everything else"
         If Trim(txtSuburb.text) = "" Then  
            txtState.Text = ""
            txtPostcode.text = ""
            fk_town = 0
         End If
   End Select

End

Public Sub EditArea_KeyPress()
   '------------------------------------------------
   'Key validation, not acceptable > exit subroutine
   'used  here only for birthdate
   '------------------------------------------------

   Select Case Key.Code
      Case Key.Return, key.tab
         Select Case Last.tag
            Case "organisation"
               txtStreet1.SetFocus()
            Case "street1"
               txtStreet2.SetFocus()
            Case "street2"
               txtSuburb.SetFocus()
            Case "suburb"
               txtCategory.SetFocus()
            Case "category"
               txtPhone.SetFocus()
            Case "phone"
               txtFax.SetFocus()
            Case "fax"
               txtEmail.SetFocus()
            Case "email"
               txtWeb.SetFocus()
               
         End Select
         Listview1.Visible = False  
      Case key.Down
         If Listview1.Visible Then
            Listview1.MoveFirst
            Listview1.SetFocus
            Listview1.Item.Selected = True
         End If   
   End Select
   
End

Public Sub EditArea_KeyRelease()

   Select Case Last.tag
      Case "suburb"
         Suburb_selection("get")
      Case "category"
         Organisation_Category_Selection("get")
   End Select

End

Public Sub EditArea_LostFocus()
   
   Last.background = Color.white
   
End
