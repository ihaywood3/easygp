' Gambas class file

' Copyright (C) 2008-2015 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
Private timer_count As Integer
Private bExit As Boolean
Private bEditing As Boolean
Private bKeyValid As Integer
Private StaffPicture As Collection
Private StaffTypes As Collection
Private unmatched_staff As Collection
Private collection_Members As Collection
Private Collection_Member As Collection
Private age As Integer
Private Views_addresses As Collection
Private addresses As Collection
Private address As Collection
Private occupations As Collection 
Private bNewAddress As Boolean
Private employees_place_of_work As Collection
Private iAddress As Integer
Private branches As Collection
Private branch_comms As Collection
Private roles As Collection
Private views_comms As Collection
Private bNewCommunication As Boolean
Private comm As Collection
Private comms As Collection
Private iCommunication As Integer
Private staff_member As Collection
Private fk_staff As Integer
Private fk_image As Integer
Private employee As Collection
Private staff_Members As Collection
Private person As Collection
Private pk_view As String     'staff member can have multiple addresses
Private pk_view_address As Integer
Private fk_branch As Integer
Private fk_clinic As Integer
Private fk_person As Integer
Private fk_employee As Integer
Private fk_organisation As Integer
Private fk_occupation As Integer
Private fk_town_employee As Integer
Private fk_town_organisation As Integer
Private fk_link_staff_clinic As Integer
Public FHelp As FHtmlViewer

Static Public form_staff As FStaff 'form_staff = Me declared in Form_Open()

Static Public Sub Staff_Refresh_External()
   
   form_staff.Reload()
   
End

Static Public Function Help_Show(sPath As String, flag As Boolean)
   '----------------------------------------------
   'show help
   '----------------------------------------------
   
   form_staff.VSplit_DataEntry.Visible = Not flag
   
   form_staff.FHelp.Visible = flag
   If flag Then
      form_staff.FHelp.Help_Show(sPath)
   End If
   
End

Public Sub tbHelp_close_Click()
   
   Stop Event
   ' Shell "rm -rf " & Shell$(WebSettings.Cache.Path) &/ "*" Wait
   Help_Show("", False)
   
End

Public Sub tbHome_Click()
   
   Stop Event
   ' form_staff.FHelp.$currenthview.url =
   ' PnlRequestPreferences.Help()
   
End

Public Sub Init()
   
   form_staff = Me
   
   FHelp = New FHtmlViewer(Vbox_Main)
   FHelp.Visible = False
   FHelp.Help_Show("practice-staff.html")
   Combos_Load()
   lblmeasure.text = " Qualifications (Degree)  "
   modEditAreaHelpers.Resize_labels(VBox_EditArea_Left, lblmeasure)
   modEditAreaHelpers.Resize_labels(Vbox_EditArea_Right, lblmeasure)
   Reset_Fonts(VBox_EditArea_Left)
   Reset_Fonts(Vbox_EditArea_Right)
   With cvwStaffMembers
      .Columns.count = 7
      .Columns[0].text = "Name"
      .Columns[1].text = "Role"
      .Columns[2].text = "Occupation"
      .Columns[4].text = "Location"
   End With
   cvwPersonContacts.Columns.count = 3
   cvwPersonsAddresses.Columns.count = 3
   Settings_Load()
   Reload()
   
End

Public Sub unmatched_staff_Get()
   
   Dim unmatched As Collection
   
   cvwUnmatchedSTaff.columns.count = 2
   cvwUnmatchedSTaff.Clear()
   unmatched_staff = modContactsDBI.Unmatched_Staff_Get()
   For Each unmatched In unmatched_staff
      cvwUnmatchedSTaff.Add(unmatched!pk, 0)
      cvwUnmatchedSTaff[unmatched!pk][0] = unmatched!title & " " & unmatched!firstname & " " & unmatched!surname
      cvwUnmatchedSTaff[unmatched!pk][1] = unmatched!provider_number
   Next
   
End

Public Sub Combos_Load()
   '-------------------------------------------
   'Load data into all the combo's on the form
   'included to keep other routines readable
   'FIXME load all combo's from lookup tables
   'Cache lookup tables in memory IAN FIXME
   'as these combo - filling actions used
   'extensively throughout the database.
   '-------------------------------------------
   
   cmbEmployeeCommunicationType.Add("At Home", 0)
   cmbEmployeeCommunicationType.Add("At Work", 1)
   cmbEmployeeCommunicationType.Add("Fax", 2)
   cmbEmployeeCommunicationType.Add("Email", 3)
   cmbEmployeeCommunicationType.Add("Mobile", 4)
   cmbEmployeeCommunicationType.Add("VOIP", 5)
   cmbEmployeeCommunicationType.Add("Web URL", 6)
   cmbEmployeeCommunicationType.Add("Phone", 7)
   cmbEmployeeCommunicationType.Add("Toll Free ", 8)
   
   cmbSex.Add("Male", 0)
   cmbSex.Add("Female", 1)
   cmbSex.Add("Unknown", 2)
   
   cmbTitle.Add("Mr", 0)
   cmbTitle.Add("Mrs", 1)
   cmbTitle.Add("Master", 2)
   cmbTitle.Add("Miss", 3)
   cmbTitle.Add("Dr", 4)
   cmbTitle.Add("Prof", 5)
   cmbTitle.Add("Ms", 6)
   
   cmbMarital.Add("Unkown", 0)
   cmbMarital.Add("Single", 1)
   cmbMarital.Add("Married", 2)
   
   cmbMarital.Add("Divorced", 3)
   cmbMarital.Add("Defacto", 4)
   cmbMarital.Add("Widow", 5)
   cmbMarital.Add("Widower", 6)
   
   cmbEmployeeAddressType.Add("Home", 0)
   cmbEmployeeAddressType.Add("Work", 1)
   cmbEmployeeAddressType.Add("PO Box", 2)
   cmbEmployeeAddressType.Add("Parents", 3)
   cmbEmployeeAddressType.Add("Nursing Home", 4)
   cmbEmployeeAddressType.Add("Refuge", 5)
   
   modUtilGUI.LoadCombo(cmbStaffStatus, modContactsDBI.Staff_Status_Get(), "status")
   StaffTypes = modAdminDBI.Staff_Types_Get()
   StaffTypes = modUtil.Copy_Collection_Keyed_Sequentially(modAdminDBI.Staff_Types_Get())
   modUtilGUI.LoadCombo(cmbStafftype, StaffTypes, "type")
   '----------------------------------------------------------------
   'Get roles, the roles collection will be indexed to the combo-key
   'that way roles[cmbAccessLevel.index]!fk_role will be correct
   '----------------------------------------------------------------
   collection_Members = modAdminDBI.Roles_Get()
   roles = New Collection
   cmbAccessLevel.Add("")
   For Each collection_Member In collection_Members
      roles.Add(collection_Member, cmbAccessLevel.count)
      cmbAccessLevel.Add(collection_Member!role, cmbAccessLevel.count)
   Next
   
End

Public Sub Settings_Save()
   
   Settings["FStaff/HSplit_Staff_Members.Layout"] = HSplit_Staff_Members.Layout
   Settings["FStaff/VSplit_DataEntry.Layout"] = VSplit_DataEntry.Layout
   Settings["FStaff/HSplit_Staff_EditArea.Layout"] = HSplit_Staff_EditArea.Layout
   
End

Private Sub Settings_Load()
   
   HSplit_Staff_Members.Layout = Settings["FStaff/HSplit_Staff_Members.Layout", modUtilGUI.HSplit([1371, 326])]
   VSplit_DataEntry.Layout = Settings["FStaff/VSplit_DataEntry.Layout", modUtilGUI.VSplit([335, 579])]
   HSplit_Staff_EditArea.layout = Settings["FStaff/HSplit_Staff_EditArea.Layout", modUtilGUI.HSplit([830, 867])]
   cvwStaffMembers.Font = Font[Settings["FStaff/cvwStaffMembers.font", "DejaVu Sans,9"]]
   
End

Public Sub EditArea_TextBox_Change()
   
   If bExit Then Return
   Select Case Last.tag
      Case "birthdate"
         
         If txtBirthdate.text <> "" Then
            age = -1
            Try age = modUtil.Calc_age(Val(Trim(txtBirthdate.text)))
            If Not Error Then
               If age > 0 And age < 100 Then 'most unlikely to have centarian working in practice
                  txtage.text = age
               End If
            End If
         Else
            txtage.text = ""
         End If
      Case "occupation"
         If Trim(Last.text) = "" Then 'Or Trim(Last.text) = "" And Listview1.Visible = False Then
            fk_occupation = 0
            listview1.Visible = False 'could be showing if user backspaced
         End If
      Case "employee suburb"
         If Trim(Last.text) = "" Then
            fk_town_employee = 0
            txtEmployee_State.text = ""
            txtEmployee_Postcode.text = ""
            listview1.Visible = False 'could be showing if user backspaced
            tbnAcceptAddress_Employee.Foreground = Color.red
         End If
      Case "employee street1", "employee street2"
         tbnAcceptAddress_Employee.Foreground = Color.red
      Case "employee comm value"
         If InStr(Last.text, "@") Then
            cmbEmployeeCommunicationType.index = const.CommModalityEmail
         Else If Left$(Trim(Last.text), 2) = "04" Then
            cmbEmployeeCommunicationType.index = const.CommModalityMobile
         Else If InStr(Last.text, "www") Then
            cmbEmployeeCommunicationType.index = const.CommModalityWeb
         Else If InStr(Last.text, "1800") Then
            cmbEmployeeCommunicationType.index = Const.CommModalityTollFree
         End If
         btnAddContact_Employee.Foreground = Color.red
      Case "employee comm notes"
         btnAddContact_Employee.Foreground = Color.red
   End Select
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_TextBox_KeyPress()
   
   If bExit Then Return
   '---------------------------------------------------------------
   'Validate key entry on a per-textbox basis, reject unwanted keys
   '---------------------------------------------------------------
   If Not EditArea_Textbox_ExcludeKeys(key.code, Last.tag) Then
      Stop Event
      Return
   End If
   Select Case Key.Code
      Case key.Down
         If listview1.Visible Then
            listview1.SetFocus()
            listview1.MoveFirst
            listview1.Item.Selected = True
         End If
      Case Key.Return, Key.Tab
         listview1.Visible = False
         Select Case Last.tag
            Case "surname"
               cmbTitle.SetFocus()
            Case "firstname"
               listview1.Visible = False 'could have been visible, user matched name, didn't scroll to list
               cmbsex.SetFocus()
            Case "birthdate"
               txtOccupation.SetFocus()
            Case "salutation"
               cmbMarital.SetFocus()
            Case "occupation"
               txtEmployee_Street1.SetFocus()
            Case "qualifications"
               txtEmployee_Street1.SetFocus()
            Case "employee street1"
               '--------------------------------------------------------------------
               'If user hits <enter> assume they want no futher addresses > contacts
               '--------------------------------------------------------------------
               If Trim(Last.text) = "" Then
                  cmbEmployeeCommunicationType.SetFocus()
               Else
                  txtEmployee_suburb.SetFocus()
               End If
            Case "employee street2"
               txtEmployee_suburb.SetFocus()
            Case "employee suburb"
               tbnAcceptAddress_Employee.SetFocus()
            Case "employee postcode"
            Case "employee state"
               
            Case "employee comm value"
               txtEmployee_CommNotes.SetFocus()
            Case "employee comm notes"
               'skip this section if nothing to keep
               If Trim(txtEmployee_CommValue.text) = ""
                  txtMemo.SetFocus()
               Else
                  btnAddContact_Employee.SetFocus()
               End If
            Case "employee memo"
               cmbStaffStatus.SetFocus()
               
            Case "organisation"
               '  txtBranch.SetFocus()
            Case "branch"
               txtBranch_Street1.SetFocus()
            Case "branch street1"
               txtBranch_suburb.SetFocus()
            Case "branch street2"
               txtBranch_suburb.SetFocus()
            Case "branch suburb"
            Case "branch postcode"
            Case "branch state"
            Case "staff_username"
               txtValidFrom.SetFocus()
            Case "logon date from"
               txtExpires.SetFocus()
            Case "logon date to"
               modEditAreaHelpers.Calculate_Date_From_Interval(Last)
               txtPasswordNew.SetFocus()
            Case "staff_password_current"
            Case "staff_password_new"
               txtPasswordRepeat.SetFocus()
            Case "staff_password_repeat"
               tbAccept.SetFocus()
               
         End Select
   End Select
   
End

Public Sub Employee_New()
   '-------------------------------------------------------
   'PURPOSE    :adds a new employee to the the organisation
   '--------------------------------------------------------
   
   Vbox_EditArea.Enabled = True
   cvwStaffMembers.UnSelectAll()
   bexit = True
   Comms = New Collection
   addresses = New Collection
   Views_addresses = New Collection
   pk_view_address = -1
   StaffPicture = New Collection
   fk_staff = 0
   fk_person = 0
   fk_employee = 0
   fk_image = 0
   fk_link_staff_clinic = 0
   pk_view = 0
   EditArea_Clear()
   cmbAccessLevel.index = -1
   cmbStaffStatus.index = -1
   With tbnAcceptAddress_Employee
      .text = "Save new address to the list "
   End With
   With btnAddContact_Employee
      .text = "Save new contact to the list "
   End With
   
   cmbEmployeeCommunicationType.index = Const.CommModalityHome
   txtValidFrom.text = Format(Now, "dd/mm/yyyy")
   lblPasswordCurrent.Enabled = False
   txtPasswordCurrent.Enabled = False
   cvwPersonsAddresses.Clear()
   Employee_Address_New()       'res-sets variables for new address
   Employee_Communication_New() 'res-sets variables for new communcation
   Show_Head_Office()           'default to having them at head office
   EditArea_Notify_DataChange(False)
   cmbStaffStatus.index = cmbStaffStatus.Find("Active")
   bExit = False
   txtSurname.SetFocus()
   
End

Public Sub Show_Head_Office()
   '----------------------------------------------------
   'Display the head office of our practice organisation
   'and load all available branches into the combo's
   '-----------------------------------------------------
   
   Dim clinic As Collection
   
   branches = New Collection
   cmbBranches.Clear()
   For Each clinic In modAdminDBI.Clinics_Get()
      cmbBranches.Add(clinic!branch)                 'combo in the editing area
      cmbBranches_Filter_For_list.Add(clinic!branch) 'combo above the list of staff
      branches.Add(clinic, branches.count)           'the key to combo = key to clinic 0 based
      If clinic!head_office Then
         txtOrganisation.text = clinic!organisation
         cmbBranches.index = 0
         Branch_Display()
      End If
   Next
   
End

Public Sub Branch_Display()
   '--------------------------------------------------------------------
   'Display the branch highlighted in the branches combo in editing area
   '--------------------------------------------------------------------
   
   If cmbBranches.index <> -1 Then
      txtBranch_Street1.text = branches[cmbBranches.index]!street1
      txtBranch_Street2.text = branches[cmbBranches.index]!street2
      txtBranch_suburb.text = branches[cmbBranches.index]!town
      txtBranch_state.text = branches[cmbBranches.index]!state
      txtBranch_Postcode.text = branches[cmbBranches.index]!postcode
      fk_branch = branches[cmbBranches.index]!fk_branch
      fk_clinic = branches[cmbBranches.index]!fk_clinic
      '-----------------------------
      'Get the Branch_Comms for that branch
      '-----------------------------
      Branch_Comms = modContactsDBI.Branch_Comms_Get(branches[cmbBranches.index]!fk_branch)
      lvwBranchComms.Clear()
      If Branch_Comms.count Then
         For Each Comm In Branch_Comms
            If comm!value Then
               lvwBranchComms.Add(lvwBranchComms.count, comm!type & ":  " & comm!value) 'display in contact list
            End If
         Next
      End If
      '   Hbox_CmbBranches.Background = Color.White
   Else
      '   Hbox_CmbBranches.Background = Color.Red
   End If
   
End

Public Sub EditArea_Clear()
   
   bexit = True
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_Right)
   modEditAreaHelpers.EditArea_Clear(Vbox_EditArea_Left)
   '--------------------------------
   'Now clear the employee's picture
   '--------------------------------
   Picture_Staff_Clear()
   cvwPersonContacts.Clear()
   cvwPersonsAddresses.Clear()
   Listview1.Visible = False
   
   bexit = False
   
End

Public Sub Picture_Display()
   
   Dim tempFile As String
   Dim tempPicture As Variant
   
   tempFile = Temp() & ".png"
   tempPicture = Staff_Members[pk_view]!image
   If tempPicture.data Then
      File.Save(tempFile, tempPicture.data)
      PictureBox2.Picture = Picture.Load(Tempfile)
      PictureBox2.tag = Tempfile
      StaffPicture = New Collection
      StaffPicture!fk_image = fk_image
      StaffPicture!picture = PictureBox2.Picture
      StaffPicture!path = Tempfile
   End If
   
End

Public Sub Picture_Staff_Clear()
   '---------------------------------------------
   ' Clears the picture from the main picture box
   ' puts back in the default
   '---------------------------------------------
   
   With PictureBox2
      .Picture = Picture.Load("icons/misc/no_photo.png")
      .tag = "icons/misc/no_photo.png"
      .Refresh()
   End With
   Wait        'otherwise, visually, picture won't disappear
   If fk_image Then
      StaffPicture!path = "icons/misc/no_photo.png"
      StaffPicture!picture = Picturebox2.picture
   End If
   EditArea_Notify_DataChange(True)
   
End

Public Function EditArea_TextBox_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   'Note - date of injury = string because could be e.g January 2009
   
   Select Case tag
      Case "birthdate", "logon date from", "logon date expires"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_DateFormat, keycode)
      Case "health provider number individual", "prescriber number"
         bKeyValid = modUtilGUI.AllowKeys(const.AllowKeys_NumbersOnly, keycode)
      Case Else
         bKeyValid = True
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TextBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   With listview1
      .top = Last.Parent.Parent.top + Last.Parent.height
      .left = Last.Parent.left + VBox_EditArea_Left.Padding
      If Last.tag = "surname" Then
         .width = txtEmployee_Street1.Width
      Else
         .width = txtOccupation.Width 'just a guess
      End If
      .Clear
      .Visible = False
   End With
   ' With listview2
   '    .top = Last.Parent.Parent.top + Last.Parent.height
   '    .left = Last.Parent.left + VBox_EditArea_Right.Padding
   '    .width = 200 'just a guess
   '    .Clear
   '    .Visible = False
   ' End With
   '---------------------------------------------------------------
   'If user is editing an existing suburb, could, just do something
   'stupid and change the spelling and re-save. Whearas this dosn't
   'matter, because fk_town_employee isn't changed, it looks stupid
   'so we won't accept that. Anyway, it they've given focus to an
   'existing town, they probably want to change it
   'the EditArea_Textbox_Change event will take care once the
   'suburb is set to ""
   '---------------------------------------------------------------
   Select Case Last.tag
      Case "employee suburb"
         If bNewaddress = False Then
            txtEmployee_suburb.text = ""
         End If
         
   End Select
   
End

Public Sub EditArea_TextBox_LostFocus()
   
   Last.BackGround = Color.rgb(255, 255, 255)
   Select Case Last.tag
      Case "logon date from", "logon date to", "birthdate"
         If Not IsDate(Last.text) Then
            Last.text = ""
         Else
            Last.text = Format(Val(Last.text), "dd/mm/yyyy")
         End If
   End Select
   Last.pos = 0
   
End

Public Sub EditArea_Buttons_Keypress()
   
   If key.code = key.return Then
      EditArea_Buttons_Click()
   End If
   
End

Public Sub EditArea_Buttons_Click()
   
   Listview1.Visible = False
   Select Case Last.tag
      Case "refresh"
         Reload()
      Case "load picture"
         Staff_Picture_Import()
      Case "remove picture"
         Picture_Staff_Clear()
      Case "new address employee"
         Employee_Address_New()
      Case "accept address employee"
         Employee_Address_Accept()
      Case "add communication employee"
         Employee_Communication_Accept()
      Case "new communication employee"
         Employee_Communication_New()
         txtEmployee_CommValue.SetFocus
      Case "new staff member"
         Employee_New()
      Case "accept"
         Save()
   End Select
   
End

Public Sub Employee_Communication_Accept()
   '---------------------------------------------------------------------------------------
   'PURPOSE:   Either adds a new communication for branch or employee
   '           Or updates an edited existing one
   '----------------------------------------------------------------------------------------
   
   Dim sMsg As String           'used to show message on status bar as to what we are doing
   
   If Trim(txtEmployee_CommValue.Text) = "" Then
      '--------------------------------------------------------------
      'If no value to save, change background to pink, re-set cursor
      'and notify user in status bar
      '--------------------------------------------------------------
      txtEmployee_CommValue.SetFocus
      sMsg = "Hint: Contacts must consist of at least one value eg phone number, email address etc"
      Return
   End If
   
   If bNewCommunication = True Then
      '-------------------------------------------------------------------------
      'problem here:
      'When the communications were loaded for the organisation or employee,
      'the data_communications.pk primary key was used as the key to the
      'lvwContacts (hence could be 1,2,3.... etc) so what to use for the key
      'for the new communication which is unique
      
      'add the new data into the contacts list below
      'Call Communication_New() to clear input area and
      'create a new communication instance
      '------------------------------------------------------------------------
      comm = New Collection
      cvwPersonContacts.Add(iCommunication, 0)
      cvwPersonContacts[iCommunication][0] = cmbEmployeeCommunicationType.text
      cvwPersonContacts[iCommunication][1] = txtEmployee_CommValue.text
      cvwPersonContacts[iCommunication][2] = txtEmployee_CommNotes.Text
      Comm!fk_type = cmbEmployeeCommunicationType.Index
      Comm!type = cmbEmployeeCommunicationType.text 'need this for display
      Comm!value = txtEmployee_CommValue.Text
      Comm!note = txtEmployee_CommNotes.Text
      If chkemployeePreferredCommunication.value Then
         Comm!preferred_method = True
      Else
         Comm!preferred_method = False
      End If
      If chkEmployeeCommunicationConfidential.Value Then
         Comm!confidential = True
      Else
         Comm!confidential = False
      End If
      Comms.Add(Comm, iCommunication)
   Else
      '-------------------------------------------------------------
      'we are editing existing contact, write the new values to the
      'appropriate spot in the array
      '------------------------------------------------------------
      
      Comms[iCommunication]!value = txtEmployee_CommValue.Text
      Comms[iCommunication]!note = txtEmployee_CommNotes.Text
      
      If chkemployeePreferredCommunication.value Then
         Comms[iCommunication]!preferred_method = True
      Else
         Comms[iCommunication]!preferred_method = False
      End If
      If chkEmployeeCommunicationConfidential.Value Then
         Comms[iCommunication]!confidential = True
      Else
         Comms[iCommunication]!confidential = False
      End If
      Comms[iCommunication]!fk_type = cmbEmployeeCommunicationType.index
      Comms[iCommunication]!type = cmbEmployeeCommunicationType.text
      '-------------------------
      'then re-load the listview
      '-------------------------
      Employee_Communications_FillList()
   End If
   'default to adding new one
   Employee_Communication_New()
   txtEmployee_CommValue.SetFocus
   
End

Public Sub Employee_Communication_Edit()
   '------------------------------------------------------
   'PURPOSE: Display the currently highlighted row of data
   '         back in the text boxes above for editing
   '------------------------------------------------------
   
   bExit = True
   bNewCommunication = False
   cvwPersonContacts.MoveCurrent 'move internal cursor to the item showing
   iCommunication = cvwPersonContacts.Item.Key
   comm = Comms[iCommunication]
   txtEmployee_CommValue.text = Comms[iCommunication]!value
   txtEmployee_CommNotes.text = Comms[iCommunication]!note
   cmbEmployeeCommunicationType.index = Comms[iCommunication]!fk_type
   chkEmployeeCommunicationConfidential.value = Comms[iCommunication]!confidential
   chkEmployeePreferredCommunication.Value = Comms[iCommunication]!preferred_method
   bExit = False
   
End

Public Sub Employee_Communications_FillList()
   '----------------------------------------------------
   'Fills the contacts list with list of communications
   'Comms = the existing collection of org/emp comms
   'key to comms = position in the listview 0-n
   '---------------------------------------------------
   
   Dim comm As Collection
   Dim x As Integer
   
   If IsNull(Comms) Then Return
   cvwPersonContacts.Clear()
   If comms.count Then
      For Each Comm In comms
         x = cvwPersonContacts.Count
         cvwPersonContacts.Add(x, 0)
         cvwPersonContacts[x][0] = comm!type
         cvwPersonContacts[x][1] = comm!value
         cvwPersonContacts[x][2] = comm!note
      Next
   End If
   
End

Public Sub Employee_Communication_New()
   '------------------------------------------------------------------
   'clears comms input prior to adding new comms info
   'note this does not save it to database
   'the new iCurrentOrgComm is one greater than the zero based count
   'of the contacts list
   '------------------------------------------------------------------
   
   bExit = True
   bNewCommunication = True
   
   comm = New Collection
   iCommunication = cvwPersonContacts.Count 'if 3, then this is 0,1,2 so 3 will be new
   txtEmployee_CommValue.text = ""
   txtEmployee_CommNotes.text = ""
   cmbEmployeeCommunicationType.index = const.CommModalityPhone
   chkEmployeeCommunicationConfidential.Value = False
   chkEmployeePreferredCommunication.Value = False
   txtEmployee_CommValue.enabled = True
   txtEmployee_CommNotes.enabled = True
   chkEmployeeCommunicationConfidential.Enabled = True
   chkEmployeePreferredCommunication.Enabled = True
   bExit = False
   
End

Public Sub Employee_Address_New()
   '-----------------------------------------------------------
   'Clears the address fields to allow new address to be added.
   '-----------------------------------------------------------
   
   bExit = True
   bNewAddress = True
   address = New Collection
   iAddress = cvwPersonsAddresses.count
   txtEmployee_Street1.text = ""
   txtEmployee_Street2.Text = ""
   txtEmployee_Suburb.text = ""
   txtEmployee_Postcode.text = ""
   txtEmployee_state.text = ""
   chkEmployeeAddressPostal.value = False
   chkEmployeeAddressPreferred.Value = False
   cmbEmployeeAddressType.index = 0
   fk_town_employee = 0
   bExit = False
   txtEmployee_Street1.SetFocus()
   
End

Public Sub Employee_Address_Accept()
   '--------------------------------------------------------------------
   'PURPOSE:   Either adds a new address for employee
   '           Or updates an edited existing one
   '           Note that address fields, type, town, state and postcode
   '           are only kept in case of editing and are discared in save
   '--------------------------------------------------------------------
   
   If Not Employee_Address_Valid() Then Return
   
   If bNewaddress Then
      '------------------------------------------------------------------------
      address = New Collection
      cvwPersonsAddresses.Add(iAddress, cmbEmployeeAddressType.text & ": " & Trim(txtEmployee_Street1.text & " " & txtEmployee_Street2.text) & " " & txtEmployee_Suburb.text)
      address!fk_lu_address_type = cmbEmployeeAddressType.Index
      address!type = cmbEmployeeAddressType.Text           'kept for display purposes
      address!street1 = Trim(txtEmployee_Street1.text)
      address!street2 = Trim(txtEmployee_Street2.text)
      address!fk_town = fk_town_employee
      address!country_code = "AU"
      address!town = Trim(txtEmployee_suburb.text)
      address!state = Trim(txtEmployee_State.text)
      address!postcode = Trim(txtEmployee_Postcode.text)
      If chkEmployeeAddressPostal.value = True Then
         address!postal_address = True
      End If
      If chkEmployeeAddressPreferred.value = True Then
         address!preferred_address = True
      End If
      addresses.Add(address, iAddress)
   Else
      '-------------------------------------------------------------
      'we are editing existing address, write the new values to the
      'appropriate spot in the array
      '------------------------------------------------------------
      addresses[iAddress]!fk_lu_address_type = cmbEmployeeAddressType.Index
      addresses[iAddress]!type = cmbEmployeeAddressType.text
      addresses[iAddress]!street1 = Trim(txtEmployee_Street1.text)
      addresses[iAddress]!street2 = Trim(txtEmployee_Street2.text)
      addresses[iAddress]!fk_town = fk_town_employee
      addresses[iAddress]!country_code = "AU"
      addresses[iAddress]!town = Trim(txtEmployee_suburb.text)
      addresses[iAddress]!state = Trim(txtEmployee_State.text)
      addresses[iAddress]!postcode = Trim(txtEmployee_Postcode.text)
      If chkEmployeeAddressPostal.value = True Then
         addresses[iAddress]!postal_address = True
      End If
      If chkEmployeeAddressPreferred.value = True Then
         addresses[iAddress]!preferred_address = True
      End If
      '-------------------------
      'then re-load the listview
      '-------------------------
      Employee_Addresses_FillList()
   End If
   '---------------------------------
   'default to adding new address now
   '---------------------------------
   Employee_Address_New()
   txtEmployee_Street1.SetFocus()
   
End

Public Sub Employee_Addresses_FillList()
   '-------------------------------------------------
   'Fills the employee address list with addresses
   'Addresses = the existing collection of addresses
   'key to Addresses = position in the listview 0-n
   '------------------------------------------------
   
   Dim address As Collection
   
   If IsNull(Addresses) Then Return
   cvwPersonsAddresses.Clear()
   If Addresses.count Then
      For Each address In Addresses
         cvwPersonsAddresses.Add(cvwPersonsAddresses.count, address!type & ": " & Trim(address!street1 & " " & address!street2) & " " & address!town)
      Next
   End If
   
End

Public Sub ListView1_KeyPress()
   '-------------------------------------------------------------------------
   'User has hit the enter key having scrolled onto or clicked the popup list
   '-------------------------------------------------------------------------
   
   If Key.code = Key.Return Then
      ListView1_DblClick
   End If
   
End

Public Sub ListView1_DblClick()
   
   listview1.MoveCurrent
   Last.tag.text = listview1.Item.Text
   Select Case ListView1.tag.tag
      Case "surname"
         'Surname_Selection("accept", "list")
         Surname_Duplicates_Selection("accept", "list")
      Case "occupation"
         occupation_select(occupations[listview1.Item.key])
      Case "employee suburb"
         Employee_Suburb_Selection("accept", "list")
      Case "branch suburb"
         Branch_Suburb_Selection("accept", "list")
   End Select
   listview1.Visible = False
   
End

Public Sub Reset_Fonts(VB As Vbox)
   '-----------------------------------------------------------------------------
   'PURPOSE     :If application.fonts has been changed, then the labels could
   '            no longer be wide enough so the display would look funny
   '
   'HOW IT WORKS:loop through all the labels on the form and make sure they
   '             are correct size.LblMeasure is a hidden control.
   'NB:         :Resize those labels in the gui with autoresize = false
   '             I have set ones I don't want to be resized manually by this
   '             routine too auto-resize = True - ie they will do it themselves
   '-----------------------------------------------------------------------------
   
   Dim hCtrl As Control
   Dim ABox As HBox
   Dim lbl As Label
   
   For Each Hctrl In VB.Children
      If hctrl Is Hbox Then
         Abox = hctrl
         For Each hctrl In Abox.Children
            If hctrl Is Label Then
               lbl = hctrl
               If lbl.AutoResize = False Then
                  lbl.width = lblmeasure.Width
               End If
               Break
            End If
         Next
      End If
   Next
   
End

Public Sub Save()
   '---------------------------------------------------------------------
   'Finally, the main save routine
   'Note when you notice the jumbled code and style in this module
   'it and contacts where the first ones written when I started learning
   'gambas - the code is a patched amalgum of crap and needs total
   'rewriting FIXME
   '--------------------------------------------------------------------
   
   Dim person_employee As Collection
   Dim fk_unmatched_staff As Integer
   Dim image As CRow
   Dim data_numbers As CRow
   Dim data_numbers_persons As CRow
   Dim R As Result
   Dim toolbar_button As CRow  
   Dim clinical_modules As Collection
   Dim clinical_module As Collection
   Dim display_order As Integer
   Dim Request_Provider_Defaults As Collection
   Dim RPD As Collection
   Dim bNewStaffMember As Boolean
   Dim user_provider_default As CRow   
   
   If Not Employee_Valid() Then Return
   
   '---------------------------------------------------------------
   'remove these, they were only kept in case address was re-edited
   '---------------------------------------------------------------
   For Each address In addresses
      address.Remove("type")
      address.Remove("town")
      address.Remove("state")
      address.Remove("postcode")
   Next
   '------------------------------------------------------------------
   'Encapsulate in transaction in case something fails
   'BeginTrans is not needed, it's a noop, I just like the look of it!
   'for calming my symmetrical mind
   '------------------------------------------------------------------
   modDBConnect.BeginTrans()
   '------------------------------------------------------------------------
   'First thing: is this new person in the umatched staff table in documents
   'if a match, returned fk_unmatched_staff = documents.unmatched_staff.pk
   'After staff members saved and its real pk retreived, then reconcile.
   '------------------------------------------------------------------------
   If fk_staff = 0 Then
      fk_unmatched_staff = New_Staff_Match_To_Umatched_Staff()
   End If
   '-------------------------------------------------------------------------------------
   'An employee must first be a person, but we don't need the sort of info
   'we would need if that person was patient, so all these fields not used **
   '
   'data_persons = pk (as fk_person here)
   '        firstname
   '        surname
   '        salutation
   '      **fk_country_birth
   '      **fk_ethnicity
   '      **fk_languageStaff_Members[pk_view]!
   '      ** memo              'FIXME FIND ME SPACE
   '        fk_marital
   '        fk_title
   '        fk_sex
   '      **country_code  = country of birth
   '        retired            note this boolean value is property of person not employee
   '-------------------------------------------------------------------------------------
   person = New Collection
   If fk_person <> 0 Then
      person!fk_person = fk_person
   End If
   person!firstname = Trim(txtFirstname.text)
   person!surname = Trim(txtSurname.text)
   person!salutation = Trim(txtSalutation.text)
   person!fk_title = cmbTitle.Index
   person!fk_sex = cmbSex.Index
   person!fk_marital = cmbMarital.Index
   If chkPersonRetired.value Then
      person!retired = True
   Else
      person!retired = False
   End If
   bExit = False                                   'allow change event to calc age
   Try person!birthdate = Format(Val(txtBirthdate.text), "dd/mm/yyyy")
   bExit = True
   '----------------------------------------
   'Now the employee
   'data_employees:   pk (as fk_employee here)
   '                  fk_branch integer,
   '                  fk_person integer,
   '                  fk_occupation integer,
   '                  memo text,
   '-----------------------------------------
   employee = New Collection
   If fk_employee <> 0 Then
      employee!fk_employee = fk_employee
   End If
   employee!fk_branch = fk_branch
   If fk_occupation Then
      employee!fk_occupation = fk_occupation
   Else
      employee!occupation = Trim(txtOccupation.text)
      If Trim(txtOccupation.text) <> "" Then             'have an occupation but no key - is a new occupation
         employee!fk_occupation = modCommonDBI.Occupation_Save(Lower(Trim(txtOccupation.text)))
      End If
      
   End If
   employee!memo = Trim(txtMemo.text)
   '----------------------------------------------------------------------
   'The picture belongs to the person and stored in contacts.data_persons,
   'Either save or edit the record and return the key
   '----------------------------------------------------------------------
   ' If fk_image = 0
   '    If Not InStr(PictureBox2.tag, "no_photo.png") Then
   '       ' If StaffPicture!fk_image Then
   '       '-------------------------------------------------------------------
   '       'An image has already been saved, may have been changed. If deleted
   '       'then the image saved is the empty person icon
   '       '-------------------------------------------------------------------
   '       StaffPicture!path = PictureBox2.tag
   '       person!fk_image = modContactsDBI.Image_Save(StaffPicture)
   '    End If
   ' End If
   If Not IsNull(StaffPicture) Then
      If StaffPicture!path Then
         If fk_image Then                                            'patient has existing photo
            If StaffPicture!path = "icons/misc/no_photo.png" Then  'if is a 'no photo' then must have deleted the real image
               person!fk_image = Null                                'set this back to null in backend
               modDBConnect.exec_query("update contacts.data_persons set fk_image = null where pk=" & person!fk_person)
               modDBConnect.CommitTrans()
               Image = New CRow
               Image.put_unchanged(fk_image, "fk_image")             'and mark existing image in blobs
               Image!deleted = True                                  'to deleted (still recoverable via fk_consult
               Image.Save("blobs.images", "fk_image")
            Else
               person!fk_image = modContactsDBI.Image_Save(StaffPicture)
            End If
         Else                                                        ' no fk_image?
            person!fk_image = modContactsDBI.Image_Save(StaffPicture) 'save their new photo
         End If
      End If
   End If
   '--------------------------------------------------------------------------
   'person_employee = person_employee!fk_person andperson_employee!fk_employee
   '--------------------------------------------------------------------------
   person_employee = modContactsDBI.employee_save(Staff_Members, pk_view, person, employee, comms, views_comms) ', ' ' ' branch_comms)
   modContactsDBI.Person_Addresses_Save(Views_addresses, pk_view_address, addresses, person) 'remove pk_view_address not used.
   '---------------------------------------------------------------------------------------------------------
   'At this point, the employee is linked to the branch of the orgainsation
   'Remember that the contacts datbase is 'generic', ie nothing whatsoever to do with the general practice or
   'organisation using EasyGP, except as a repository of the organisation and employee's
   'Now, they must be registered as an actual staff member in admin.staff, given a role, linked to a clinic
   '--------------------------------------------------------------------------------------------------------
   staff_member = New Collection
   staff_member!fk_person = person_employee!fk_person
   If fk_staff > 0 Then
      staff_member!fk_staff = fk_staff
   Else
      bNewStaffMember = True  
   End If
   staff_member!fk_status = cmbStaffStatus.Index            'because zero based, should fix at some point
   staff_member!fk_lu_staff_type = StaffTypes[cmbStafftype.index]!pk 'this collection has been re-set to zero based.
   staff_member!logon_name = Trim(txtLogonName.text)    'logon name
   staff_member!password = Trim(txtPasswordNew.text)    'password
   staff_member!logon_date_from = Val(txtValidFrom.text)
   staff_member!logon_date_to = Val(txtExpires.Text)  'bug in next few lines
   staff_member!fk_role = roles[cmbAccessLevel.Index]!pk_role
   staff_member!qualifications = Trim(txtQualifications.text)
   employees_place_of_work = New Collection
   If fk_link_staff_clinic <> 0 Then
      employees_place_of_work!fk_link_staff_clinic = fk_link_staff_clinic
   End If
   employees_place_of_work!fk_clinic = fk_clinic
   staff_member!fk_staff = modContactsDBI.Staff_Member_Save(Staff_Members, pk_view, staff_member, employees_place_of_work) 'fixme Replace With crow
   
   If staff_member!fk_staff = 0 Then   'we encountered a major error
      modDBConnect.RollBack()
      Goto Reload_StaffList
   End If   
   '-----------------------------------------------------------------------------
   'put in default toolbar for clinical users who are doctors 'fixme later nurses
   '-----------------------------------------------------------------------------
   If staff_member!fk_role = const.StaffRole_Doctor Or staff_member!fk_role = const.StaffRole_locum Or staff_member!fk_role = const.StaffRole_Practice_Principal Or staff_member!fk_role = const.StaffRole_Registered_Nurse Then   
      If modAdminDBI.Clinical_Toolbuttons_Get(fk_staff).count = 0 Then  'no buttons yet for this staff member   
         modAdminDBI.Toolbuttons_Add_All(staff_member!fk_staff)
      End If   
      '---------------------------------------------------------------------------------------------------
      'next check and see if this (new only) staff member has default providers for all that are available
      ' CREATE TABLE clin_requests.user_provider_defaults
      ' (
      '   pk serial NOT NULL,
      '   fk_staff integer NOT NULL, -- key to admin.staff table ie describes the user
      '   fk_default_branch integer NOT NULL, -- key to contacts.branches table...
      '   fk_request_provider integer, -- foreign key to clin_requests.requests_provideris which ultimately will point to contact details of person/employee or organisation...
      '   send_electronically boolean DEFAULT false,
      '   print_paper boolean DEFAULT true,
      '   deleted boolean DEFAULT false,
      '   fk_lu_request_type integer NOT NULL,
      '   FIXME - will later need to add to FRequestProviders these last flags
      '---------------------------------------------------------------------------------------------------
      If bNewStaffMember Then    
         Request_Provider_Defaults = modRequestsDBI.Request_Provider_Staff_Defaults_Get()
         For Each RPD In Request_Provider_Defaults
            user_provider_default = New CRow   
            user_provider_default!fk_staff = staff_member!fk_staff
            user_provider_default!fk_default_branch = RPD!fk_default_branch
            user_provider_default!fk_request_provider = RPD!pk_request_provider
            user_provider_default!fk_lu_request_type = RPD!fk_lu_request_type
            user_provider_default.Save("clin_requests.user_provider_defaults", "fk_user_provider_default")
         Next
      End If   
   End If   
   
   '-------------------------------------------------------------------------------------------------------------------------
   ' finally save the prescriber/provider numbers in their special table FIX ME FIX THIS WHOLE MODULE REWRITE IT INTERIM CODE
   '-----------------------------------------------------------------------------------------------------------------
   'Save in numbers, the adress specific numbers go into data_numbers in staff case this is only the provider_number
   '-----------------------------------------------------------------------------------------------------------------
   ' CREATE TABLE contacts.data_numbers
   ' (
   '   fk_person integer,
   '   fk_branch integer, -- can be NULL for individuals in solo practices who aren't part of an 'organisation' in our system.
   '   prescriber_number text,
   '   australian_business_number text,
   '   pk serial NOT NULL,
   '   hpio text, -- Health Provider Identifier - Organisation
   '   CONSTRAINT data_numbers_pkey PRIMARY KEY (pk ),
   '   CONSTRAINT data_numbers_fk_branch_fkey FOREIGN KEY (fk_branch)
   '       REFERENCES contacts.data_branches (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT data_numbers_fk_person_fkey FOREIGN KEY (fk_person)
   '       REFERENCES contacts.data_persons (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT data_numbers_hpio_check CHECK (hpio ~ '^[0-9]+$'::text),
   '   CONSTRAINT employees_no_hpio CHECK (NOT (hpio IS NOT NULL AND fk_person IS NOT NULL AND fk_branch IS NOT NULL)),
   '   CONSTRAINT one_of_branch_person CHECK (NOT (fk_branch IS NULL AND fk_person IS NULL))
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   ' 'flaws with this logic - what if they move from a branch
   '-------------------------------------------------------------------------------------------------------------------------------
   R = modDBConnect.exec_query("Select * from contacts.data_numbers where fk_branch = " & fk_branch & " AND fk_person =" & staff_member!fk_person)
   If R.count Then                                                                     'the organisation already an entry in data numbers
      data_numbers = New CRow
      data_numbers.put_unchanged(R!pk, "fk_data_numbers")
      data_numbers!provider_number = Trim(txtProviderNumber.text)                       'Provider number specific to site
      data_numbers.Save("contacts.data_numbers", "fk_data_numbers")
   Else                                                                                'the organisation does not yet have an entry in data numbers
      If Employee_Has_Data_for_Data_Numbers() Then                                      'No data saved to this table yet, if there is data to save here
         data_numbers = New CRow
         data_numbers!fk_person = staff_member!fk_person
         data_numbers!fk_branch = fk_branch  
         data_numbers!provider_number = Trim(txtProviderNumber.text)
         data_numbers.Save("contacts.data_numbers", "fk_data_numbers")
      Endif
   End If
   '------------------------------------------------------------------------------------------------
   'Now save the staff members prescriber_number and hpii
   '----------------------------------------------------------------------------------------------
   ' CREATE TABLE contacts.data_numbers_persons
   ' (
   '   pk serial NOT NULL,
   '   fk_person integer NOT NULL,
   '   prescriber_number text, -- the Medicare Australia numeric prescriber number.
   '   hpii text, -- Health Provider Identifier - Individual - numeric
   '   CONSTRAINT data_numbers_persons_pkey PRIMARY KEY (pk ),
   '   CONSTRAINT data_numbers_fk_person_fkey FOREIGN KEY (fk_person)
   '       REFERENCES contacts.data_persons (pk) MATCH SIMPLE
   '       ON UPDATE NO ACTION ON DELETE NO ACTION,
   '   CONSTRAINT data_numbers_hpii_check CHECK (hpii ~ '^[0-9]+$'::text),
   '   CONSTRAINT data_numbers_prescriber_number_check CHECK (prescriber_number ~ '^[0-9]+$'::text)
   ' )
   ' WITH (
   '   OIDS=FALSE
   ' );
   ' FIXME put the keys in the view to make this easier
   '------------------------------------------------------------------------------------------------ 
   R = modDBConnect.exec_query("Select * from contacts.data_numbers_persons where fk_person =" & staff_member!fk_person)
   If R.count Then                                                                     'the organisation already an entry in data numbers
      data_numbers_persons = New CRow
      data_numbers_persons.put_unchanged(R!pk, "fk_data_numbers")
      data_numbers_persons!prescriber_number = Trim(txtPrescriberNumber.text)                   'prescriber number gets carried with the person
      data_numbers_persons!hpii = Trim(TxtHealthProviderNumberIndividual.text)
      data_numbers_persons.Save("contacts.data_numbers_persons", "fk_data_numbers")
   Else                                                                                'the organisation does not yet have an entry in data numbers
      If Employee_Has_Data_for_Data_Numbers_Persons() Then                                      'No data saved to this table yet, if there is data to save here
         data_numbers_persons = New CRow
         data_numbers_persons!fk_person = staff_member!fk_person
         data_numbers_persons!prescriber_number = Trim(txtPrescriberNumber.text)                   'prescriber number gets carried with the person 
         data_numbers_persons!hpii = Trim(TxtHealthProviderNumberIndividual.text)
         data_numbers_persons.Save("contacts.data_numbers_persons", "fk_data_numbers")
      End If
   End If
   '------------------------------------------------------------------------------------------
   'If current user has just given themself or changed a provider number update currentuser
   'this prevents annoyance and having to restart easygp if they go to the prescribing section
   '------------------------------------------------------------------------------------------
   If Not IsNull(modDBConnect.currentUser) Then  '<< if user is easygp then this will be null
      If Trim(txtPrescriberNumber.text) <> "" Then
         If staff_member!fk_staff = modDBConnect.currentUser!fk_staff Then
            modDBConnect.currentUser!prescriber_number = Trim(txtPrescriberNumber.text)
         Endif
      Endif
      If Trim(txtProviderNumber.text) <> "" Then
         If staff_member!fk_staff = modDBConnect.currentUser!fk_staff Then
            modDBConnect.currentUser!provider_number = Trim(txtProviderNumber.text) 
         Endif
      Endif
      If Trim(txtQualifications.text) <> "" Then
         modDBConnect.currentUser!qualifications = Trim(txtQualifications.text)
      Endif
      
   Endif   
   If fk_unmatched_staff Then
      modInboxDBI.Reconcile_Umatched_Staff(fk_unmatched_staff, staff_member!fk_staff)
   End If
   modDBConnect.CommitTrans()
   Goto Reload_StaffList
   
Reload_StaffList:
   
   '----------------------------------------------------------------------
   'should not need this but the lost-focus event of textbox won't trigger
   'in gambas if the control getting focus is a button and then a text
   'box could be left 'green'.
   '----------------------------------------------------------------------
   modEditAreaHelpers.EditArea_ResetTextBox_BackColor(VBox_EditArea_Left)
   modEditAreaHelpers.EditArea_ResetTextBox_BackColor(Vbox_EditArea_Right)
   btnAddContact_Employee.Foreground = Color.Black
   tbnAcceptAddress_Employee.Foreground = Color.Black
   tbAccept.Foreground = Color.Black
   Reload()
   
Catch
   modDBConnect.RollBack()
   modUtilGUI.ReportError(Error.Text, Error.Backtrace)
   Goto Reload_StaffList
   
End

Public Function Employee_Valid() As Boolean
   '----------------------------------------------------
   'Returns FALSE if insufficient information for a save
   '----------------------------------------------------
   
   Dim sMsg As String
   
   If Trim(txtSurname.text) = "" Then
      txtSurname.SetFocus()
      Return
   End If
   If Trim(txtFirstname.text) = "" Then
      txtFirstname.SetFocus()
      Return
   End If
   If Trim(txtOccupation.text) = "" Then
      txtOccupation.SetFocus()
      Return
   Else
      fk_occupation = modCommonDBI.Occupation_Check_Valid(txtOccupation)
      If fk_occupation = -1 Then Return
   End If   
   If cmbAccessLevel.index = -1 Then
      cmbAccessLevel.SetFocus()
      Return
   End If
   If cmbStaffStatus.index = -1 Then
      cmbStaffStatus.SetFocus()
      Return
   End If
   If cmbBranches.index = -1 Then
      cmbBranches.SetFocus()
      Return
   End If
   
   If Trim(txtLogonName.text) = "" Then
      txtLogonName.SetFocus()
      Return
   Else
      If fk_staff = 0 Then
         If modContactsDBI.Staff_Exists(Lower$(txtLogonName.Text)) Then
            Message.title = "Database User Name"
            smsg = "Each user of EasyGP must have a unique logon name.\n\n"
            smsg &= "Your choice: " & txtLogonName.Text & "is already in use in your system.\n\n"
            smsg &= "Please select an alternate logon mame."
            Message.Info(sMsg, "Ok")
            txtLogonName.Clear()
            txtLogonName.Background = Color.rgb(95, 255, 175)
            txtLogonName.SetFocus()
            Return
         End If
      End If
   End If
   
   '--------------------------------------------------
   'Validate dates and check that date to not < date 1
   '--------------------------------------------------
   If Not IsDate(txtValidFrom.text) Then
      txtValidFrom.SetFocus()
      Return
   End If
   If Not IsDate(txtExpires.text) Then
      txtExpires.SetFocus()
      Return
   End If
   If DateDiff(Val(txtValidFrom.text), Val(txtExpires.text), gb.day) < 0 Then
      Message.info("Invalid Expiry date for the staff members access permissions.")
      txtExpires.Text.SetFocus()
      txtExpires.Background = Color.rgb(95, 255, 175)
      Return
   End If
   '----------------------------------------------------
   'If new password typed in, then check it is accurate
   'at moment, only validate this if a new employee
   '----------------------------------------------------
   If txtPasswordNew.text <> "" Then
      If txtPasswordNew.text <> txtPasswordRepeat.text Then
         Message.Info("The passwords do not match, please try again")
         txtPasswordNew.Clear()
         txtPasswordRepeat.Clear()
         Color.rgb(95, 255, 175)
         txtPasswordNew.SetFocus
         Return
      End If
   Else
      If fk_staff = 0 Then
         'password can't be blank with new patient
         txtPasswordNew.SetFocus()
         Return
      End If
   Endif
   If Trim(txtProviderNumber.text) <> "" Then
      If modUtil.Provider_Number_Check(Trim(txtProviderNumber.text)) = "*INVALID*" Then
         Message.Info("The provider number is invalid")
         txtProviderNumber.SetFocus
         Return
      Endif
   Endif
   
   'Nothing much else matters, so move on
   Return True
   
End

Public Sub Reload()
   '----------------------------------------
   'Reloads unmatched or known staff members
   '----------------------------------------
   
   Dim x$ As String 'for readability
   Dim col_widths As New Integer[7]
   Dim x As Integer
   
   lblmeasure.font = cvwStaffMembers.Font
   
   Unmatched_staff_Get()
   Staff_Members = modContactsDBI.Staff_Get()
   
   cvwStaffMembers.Clear()
   For Each staff_member In Staff_Members
      x$ = Staff_Member!pk_view
      cvwStaffMembers.Add(x$, 0)
      cvwStaffMembers[x$][0] = staff_member!title & " " & staff_member!wholename
      lblmeasure.text = " " & cvwStaffMembers[x$][0] & " "
      col_widths[0] = Max(lblmeasure.Width, col_widths[0])
      cvwStaffMembers[x$][1] = staff_member!role
      lblmeasure.text = " " & staff_member!role
      col_widths[1] = Max(lblmeasure.Width, col_widths[1])
      cvwStaffMembers[x$][2] = staff_member!occupation
      lblmeasure.text = " " & staff_member!occupation
      col_widths[2] = Max(lblmeasure.Width, col_widths[2])
      cvwStaffMembers[x$][4] = staff_member!branch
      col_widths[4] = Max(lblmeasure.Width, col_widths[4])
      lblmeasure.text = " " & staff_member!branch
      cvwStaffMembers[x$][5] = Trim(staff_member!street1 & " " & staff_member!street2)
      lblmeasure.text = " " & Trim(staff_member!street1 & " " & staff_member!street2)
      col_widths[5] = Max(lblmeasure.Width, col_widths[5])
      cvwStaffMembers[x$][6] = staff_member!town
      lblmeasure.text = " " & staff_member!town
      col_widths[6] = Max(lblmeasure.Width, col_widths[6])
   Next
   For x = 0 To 6
      Print x
      cvwStaffMembers.Columns[x].width = col_widths[x]
   Next
   With Vbox_EditArea
      .Padding = 0
      .Enabled = False
   End With
   
End

Public Sub Staff_Picture_Import()
   '--------------------------------------
   'Allow user to import a single picture
   '--------------------------------------
   
   Dim sMsg As String
   
   Dialog.Title = "Select Image File"
   Dialog.Filter = ["*.png", "Image Files", "*", "All files"]
   
   If Dialog.OpenFile() Then Return
   Try PictureBox2.picture = Picture.Load(Dialog.Path)
   If Error Then
      sMsg = "An error occurred the file couldn't be loaded.\n\n"
      sMsg &= "Filename:" & Dialog.Path & "\n\n"
      sMsg &= "Perhaps it was not a valid picture file?"
      Message.Info(sMsg)
      Picture_Staff_Clear
      Return
   End If
   Try PictureBox2.tag = Dialog.Path
   StaffPicture = New Collection
   StaffPicture!path = Dialog.Path
   StaffPicture!picture = Picturebox2.picture
   EditArea_Notify_DataChange(True)
   
End

Public Sub timer1_Timer()
   
   Inc timer_count
   If timer_count > 3 Then
      Surname_Duplicates_Selection("get")
   Endif
   
End

Public Sub EditArea_TextBox_KeyRelease()
   
   Select Case Last.tag
         
      Case "surname"
         Timer1.Enabled = True
         timer_count = 0
      Case "occupation"
         occupations = modCommonDBI.Occupations_Get(listview1, txtOccupation)
      Case "employee suburb"
         Employee_Suburb_Selection("get")
      Case "branch suburb"
         Branch_Suburb_Selection("get")
   End Select
   
End

Public Sub Occupation_Select(occupation As Collection)
   
   bexit = True   
   txtOccupation.Text = occupation!occupation
   bexit = False
   fk_occupation = occupation!pk
   txtEmployee_Street1.SetFocus
Catch
   Return
   
End

Public Sub Branch_Suburb_Selection(action As String, Optional calling_control As String)
   '--------------------------------
   'PURPOSE    :Select a suburb
   'CALLED BY  :listview1_DblClick()
   '--------------------------------
   
   Dim iMatched As Boolean
   Dim x As Integer
   
   Select Case action
      Case "get"
         '-----------------------------------------------------------------
         'Load all the towns like txtBranch_Suburb into the popup listview1
         '-----------------------------------------------------------------
         With listview1
            .Clear
            .Visible = False  
         End With
         If Trim(txtBranch_suburb.text) = "" Then Return
         Collection_Members = modContactsDBI.Get_Town(Lower(Trim$(txtBranch_Suburb.text)))
         listview1.Clear
         If Collection_Members.count Then
            For Each Collection_Member In Collection_Members
               listview1.Add(Collection_Member!pk, Collection_Member!town & " " & Collection_Member!state & " " & Collection_Member!postcode)
            Next
            If Collection_Members.count = 1 Then
               Branch_Suburb_Selection("accept")
            Else
               listview1.Visible = True
               listview1.Raise
               listview1.tag = txtBranch_Suburb
            End If
         Else
            listview1.Visible = False
         End If
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            '-------------------------------------------------------
            'User has just hit <enter> without scrolling on the list
            'try and find a match
            '-------------------------------------------------------
            If listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If InStr(Lower(listview1.Item.text), Trim(Lower(txtBranch_Suburb.text))) Then
                     
                     iMatched = True
                     Break
                  End If
               Next
               If Not iMatched Then
                  listview1.Visible = False
                  txtBranch_Suburb.SetFocus()
                  Return 'no match found for suburb user typed in
               End If
            End If
         Else
            '-------------------------------------
            'User is selecting from the popup list
            '-------------------------------------
            If listview1.Visible Then
               
               listview1.MoveCurrent()             'match internal cursor to marquee
            End If
         End If
         '------------------------------------------------------------------------------------------
         'either way, a match has been found within the list, or the user has selected from the list
         '------------------------------------------------------------------------------------------
         txtBranch_Suburb.text = Collection_Members[listview1.Item.key]!town
         txtBranch_State.text = Collection_Members[listview1.Item.key]!state
         txtBranch_Postcode.text = Collection_Members[listview1.Item.key]!postcode
         fk_town_organisation = Collection_Members[listview1.Item.key]!pk
         'address!country_code = "AU" 'FIXME make me configurable
         
         cmbAccessLevel.SetFocus
         listview1.Visible = False
         bExit = False
   End Select
Catch
   bexit = False  
   Return
   
End

Public Sub Employee_Suburb_Selection(action As String, Optional calling_control As String)
   '--------------------------------
   'PURPOSE    :Select a suburb
   'CALLED BY  :listview1_DblClick()
   '--------------------------------
   
   Dim iMatched As Boolean
   Dim x As Integer
   
   Select Case action
      Case "get"
         '--------------------------------------------------------------------
         'Load all the towns like txtEmployee_Suburb into the popup listview1
         '--------------------------------------------------------------------
         With listview1
            .Clear
            .Visible = False  
         End With
         If Trim(txtEmployee_Suburb.text) = "" Then Return
         Collection_Members = modContactsDBI.Get_Town(Lower(Trim$(txtEmployee_Suburb.text)))
         If Collection_Members.count Then
            For Each Collection_Member In Collection_Members
               listview1.Add(Collection_Member!pk, Collection_Member!town & " " & Collection_Member!state & " " & Collection_Member!postcode)
            Next
            If Collection_Members.count = 1 Then
               Employee_Suburb_Selection("accept")
            Else
               listview1.Visible = True
               listview1.Raise
               listview1.tag = txtEmployee_Suburb
            End If
         Else
            listview1.Visible = False
         End If
      Case "accept"
         
         bExit = True
         If calling_control = "textbox" Then
            '-------------------------------------------------------
            'User has just hit <enter> without scrolling on the list
            'try and find a match
            '-------------------------------------------------------
            If listview1.Visible Then
               listview1.MoveFirst
               For x = 0 To listview1.count - 1
                  If InStr(Lower(listview1.Item.text), Trim(Lower(txtEmployee_suburb.text))) Then
                     iMatched = True
                     Break
                  End If
               Next
               If Not iMatched Then
                  listview1.Visible = False
                  txtEmployee_Suburb.SetFocus()
                  Return 'no match found for suburb user typed in
               End If
            End If
         Else
            '-------------------------------------
            'User is selecting from the popup list
            '-------------------------------------
            If listview1.Visible Then
               
               listview1.MoveCurrent()             'match internal cursor to marquee
            End If
         End If
         '------------------------------------------------------------------------------------------
         'either way, a match has been found within the list, or the user has selected from the list
         '------------------------------------------------------------------------------------------
         txtEmployee_Suburb.text = Collection_Members[listview1.Item.key]!town
         txtEmployee_State.text = Collection_Members[listview1.Item.key]!state
         txtEmployee_Postcode.text = Collection_Members[listview1.Item.key]!postcode
         fk_town_employee = Collection_Members[listview1.Item.key]!pk
         tbnAcceptAddress_Employee.SetFocus()
         listview1.Visible = False
         bExit = False
   End Select
Catch
   bexit = False  
   Return
   
End

Public Sub mnuSTaff_Click()
   
   Select Case Last.tag
      Case "edit"
         
      Case "delete"
         modUtilGUI.NotImplemented("Deleting an employee")
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwStaffMembers, "FStaff")
      Case "help"
         modUtilGUI.NotImplemented("Help for this section")
   End Select
Catch
   Return 
   
End

Public Sub mnuEmployeeContacts_Click()
   
   Select Case Last.tag
      Case "add contact details"
         Employee_Communication_New()
      Case "delete contact details"
         modUtilGUI.NotImplemented(Last.tag)
      Case "edit contact details"
         Employee_Communication_Edit()
      Case "font"
         modUtilGUI.Columnview_SetFont(cvwStaffMembers, "FStaff")
   End Select
Catch
   Return 
   
End

Public Sub cvwPersonContacts_Menu()
   
   If cvwPersonContacts.Count = 0 Then Return
   mnuEmployeeContacts.Popup
   
End

Public Sub Surname_Duplicates_Selection(action As String, Optional calling_control As String)
   '-------------------------------------------------------
   'PURPOSE    :Allow selection of existing employee to put
   '            into a new organisation or branch
   'CALLED BY  :Listview1_DblClick()
   '-------------------------------------------------------
   
   Dim sMsg As String
   
   Select Case action
      Case "get"
         '----------------------------------------------------------
         'Get all peresons, surname like
         '----------------------------------------------------------
         Timer1.Stop
         With listview1
            .Clear
            .Visible = False  
         End With
         If Trim(txtSurname.text) = "" Then Return
         Collection_Members = modContactsDBI.Person_Get(Trim(txtSurname.text), const.contacttype_PersonsAndPatients)
         Collection_Members.Remove("sql_in_english")
         If Collection_Members.count Then
            For Each collection_Member In Collection_Members
               smsg = collection_Member!firstname & " " & collection_Member!surname
               If Not IsNull(collection_Member!occupation) Then
                  smsg &= " (" & collection_Member!occupation & ")"
               End If
               sMsg &= Trim(collection_Member!street1 & " " & collection_Member!street2) & " " & collection_Member!suburb & " " & collection_Member!postcode
               Listview1.Add(collection_Member!pk_view, sMsg)
            Next
            '--------------------------------------------------------------------
            'If this case, as we **MAYNOT ** want this person, always show list
            '--------------------------------------------------------------------
            Listview1.Visible = True
            Listview1.Raise
            Listview1.tag = txtSurname
         Else
            Listview1.Visible = False
         End If
      Case "accept"
         
         bExit = True
         '-------------------------------------
         'User is selecting from the popup list
         '-------------------------------------
         If Listview1.Visible Then
            Listview1.MoveCurrent()             'match internal cursor to marquee
         End If
         '------------------------------------------------------------------------------
         'code is a bit jumbled, but basically when this person has been created
         'as a staff member, as the person exists, the save routine will need 'old data'
         'to compare to - which in the syntax in the save routine is staff_members
         'which in this case has only 1 collection member. Sorry, you fix it
         'in fact - you fix everything!
         'as I'm only a proof of concept coder, not a programmer!!!
         '------------------------------------------------------------------------------
         staff_Members = Collection_Members
         pk_view = Listview1.Item.key
         
         txtSurname.text = Collection_Members[Listview1.Item.key]!surname
         txtFirstname.text = Collection_Members[Listview1.Item.key]!firstname
         txtoccupation.text = Collection_Members[Listview1.Item.key]!occupation
         Try fk_occupation = Collection_Members[Listview1.Item.key]!fk_occupation
         fk_person = Collection_Members[Listview1.Item.key]!fk_person
         Try txtBirthdate.text = Format(Collection_Members[Listview1.Item.key]!birthdate, "dd/mm/yyyy")
         fk_town_employee = Collection_Members[Listview1.Item.key]!fk_town
         Try cmbSex.index = Collection_Members[Listview1.Item.key]!fk_sex
         Try cmbTitle = Collection_Members[Listview1.Item.key]!fk_title
         txtLogonName.text = UCase(Left(txtFirstname.text) & Left(txtSurname.text))
         Try fk_image = Collection_Members[Listview1.Item.key]!fk_image
         If fk_image Then
            Picture_Display()
         End If
         Employee_Comms_Get()
         Employee_Communication_New()
         Employee_Addresses_get()
         Employee_Address_New()
         bExit = False
         txtOccupation.SetFocus()
   End Select
Catch
   bexit = False  
   Return
   
End

Public Sub EditArea_Combo_KeyPress()
   
   Select Case Key.Code
      Case Key.Return, key.Tab
         Select Case Last.tag
            Case "staff title"
               txtFirstname.SetFocus()
            Case "staff sex"
               txtSalutation.SetFocus()
            Case "staff marital"
               txtBirthdate.SetFocus()
            Case "staff address type"
               txtEmployee_Street1.SetFocus()
            Case "employee comm type"
               txtEmployee_CommValue.SetFocus()
            Case "staff type"
               cmbAccessLevel.SetFocus()
            Case "staff status"
               cmbStaffType.SetFocus()
            Case "staff access level"
               txtLogonName.SetFocus()
         End Select
   End Select
   
End

Public Sub EditArea_Combo_Click()
   
   If bexit Then Return
   Select Case Last.tag
      Case "branches"
         Branch_Display()
      Case "branches filter"
      Case "staff type"
         cmbAccessLevel.SetFocus()
      Case "staff access level"
         txtLogonName.SetFocus()
      Case "staff status"
         cmbStaffType.SetFocus()
      Case "employee comm type"
         btnAddContact_Employee.Foreground = Color.red
   End Select
   EditArea_Notify_DataChange(True)
   
End

Public Sub EditArea_Notify_DataChange(bflag As Boolean)
   
   If bFlag Then
      Vbox_EditArea.Padding = 1
      tbAccept.Foreground = Color.Red
   Else
      Vbox_EditArea.Padding = 0
      tbAccept.Foreground = Color.Black
   End If
   
End

Public Sub chkFilterByBranch_Click()
   
   If Last.value Then
      cmbBranches_Filter_For_list.Visible = True
   Else
      cmbBranches_Filter_For_list.Visible = False
   End If
   
End

Public Function Employee_Address_Valid() As Boolean
   '----------------------------------------------------------
   'Makes sure have proper address prior to accept to the list
   'Returns TRUE Flag if have street1 and suburb
   '----------------------------------------------------------
   
   If Trim(txtEmployee_Street1.text) = "" Then
      txtEmployee_Street1.SetFocus()
      Return False
   End If
   If fk_town_employee = 0 Then
      txtEmployee_Suburb.text = ""
      txtEmployee_Suburb.SetFocus()
      Return False
   End If
   Return True
   
End

Public Sub Employee_Address_Edit()
   '--------------------------------------------------------------------------
   'User has clicked on the edit option on the popup address menu for employee
   '--------------------------------------------------------------------------
   
   bExit = True
   bNewAddress = False
   cvwPersonsAddresses.MoveCurrent
   iAddress = cvwPersonsAddresses.Item.Key
   address = addresses[iAddress]
   txtEmployee_Street1.text = addresses[iAddress]!street1
   txtEmployee_Street2.text = addresses[iAddress]!street2
   txtEmployee_suburb.text = addresses[iAddress]!town
   fk_town_employee = addresses[iAddress]!fk_town
   txtEmployee_State.text = addresses[iAddress]!state
   txtEmployee_Postcode.text = addresses[iAddress]!postcode
   cmbEmployeeAddressType.index = addresses[iAddress]!fk_lu_address_type
   If addresses[iAddress]!preferred_address = True Then
      chkEmployeeAddressPreferred.Value = True
   Else
      chkEmployeeAddressPreferred.Value = False
   End If
   If addresses[iAddress]!postal_address = True Then
      chkEmployeeAddressPostal.value = True
   Else
      chkEmployeeAddressPostal.value = False
   End If
   With tbnAcceptAddress_Employee
      .text = "Save modified address to the list "
      .Foreground = Color.Red
   End With
   bExit = False
   
End

Public Sub Employee_Address_Delete()
   
   modUtilGUI.NotImplemented("Delete employee address")
   
End

Public Sub mnuEmployeeAddressesPopup_Click()
   '----------------------------------------------------------------
   'the popup menu over the employee's address list has been clicked
   '----------------------------------------------------------------
   
   Select Case Last.tag
      Case "delete employee address"
         Employee_Address_Delete()
      Case "new employee address"
         Employee_Address_New()
      Case "edit employee address"
         Employee_Address_Edit()
   End Select
Catch
   Return 
   
End

Public Sub cvwPersonsAddresses_Menu()
   
   If Last.count Then
      mnuEmployeeAddressesPopup.Popup()
   End If
   
End

Public Sub cvwStaffMembers_Click()
   
   Employee_Display()
   
End Sub

Public Sub Employee_Display()
   '-----------------------------------------------------------------------------------
   'User has clicked on an existing staff member > display the member ready for editing
   '-----------------------------------------------------------------------------------
   
   Dim bAddOccupation As Boolean
   
   cvwStaffMembers.MoveCurrent
   employee = New Collection
   comms = New Collection
   addresses = New Collection
   fk_image = 0
   Show_Head_Office()
   
   '---------------------------
   'Keep all the necessary keys
   '---------------------------
   pk_view = cvwStaffMembers.Item.Key
   fk_staff = Staff_Members[pk_view]!fk_staff
   fk_employee = Staff_Members[pk_view]!fk_employee
   Try fk_occupation = Staff_Members[pk_view]!fk_occupation 'imported persons may not have an occupation
   If Error Then
      Message.title = "Missing Occupation"
      Message.Info("You should edit this person's record and add their occupation")
      bAddOccupation = True
   Endif
   fk_person = Staff_Members[pk_view]!fk_person
   fk_clinic = Staff_Members[pk_view]!fk_clinic
   fk_link_staff_clinic = Staff_Members[pk_view]!fk_link_staff_clinic
   fk_organisation = Staff_Members[pk_view]!fk_organisation
   fk_branch = Staff_Members[pk_view]!fk_branch
   EditArea_Clear()
   bexit = True
   bEditing = True
   With tbnAcceptAddress_Employee
      .text = "Save modifications to list "
   End With
   With btnAddContact_Employee
      .text = "Save modifications to list "
   End With
   '-----------------------------------------------------------------
   'Put up the organisations name and the branch where employee works
   '-----------------------------------------------------------------
   cmbBranches.index = cmbBranches.Find(Staff_Members[pk_view]!branch)
   txtOrganisation.text = Staff_Members[pk_view]!organisation
   txtBranch_Street1.text = Staff_Members[pk_view]!street1
   txtBranch_Street2.text = Staff_Members[pk_view]!street2
   txtBranch_suburb.text = Staff_Members[pk_view]!town
   txtBranch_Postcode.text = Staff_Members[pk_view]!postcode
   txtBranch_state.text = Staff_Members[pk_view]!state
   '-------------------------------------------------------------------
   'Put up all the right hand sid to do with access level, username etc
   '-------------------------------------------------------------------
   lblEmployee.text = Staff_Members[pk_view]!title & " " & Staff_Members[pk_view]!wholename
   lblPasswordCurrent.Enabled = True
   txtPasswordCurrent.Enabled = True
   txtLogonName.text = Staff_Members[pk_view]!logon_name
   txtValidFrom.text = Format(Staff_Members[pk_view]!logon_date_from, "dd/mm/yyyy")
   txtExpires.text = Format(Staff_Members[pk_view]!logon_date_to, "dd/mm/yyyy")
   txtProvidernumber.text = Staff_Members[pk_view]!provider_number
   Try txtQualifications.text = Staff_Members[pk_view]!qualifications
   txtPrescribernumber.text = Staff_Members[pk_view]!prescriber_number
   TxtHealthProviderNumberIndividual.text = Staff_Members[pk_view]!hpii
   cmbStaffStatus.index = cmbStaffStatus.Find(Staff_Members[pk_view]!status)
   For Each collection_Member In roles
      If collection_Member!pk_role = Staff_Members[pk_view]!fk_role Then
         cmbAccessLevel.index = roles.key
         Break
      End If
   Next
   cmbStafftype.index = cmbStafftype.Find(Staff_Members[pk_view]!staff_type)
   '------------------------------------------
   'Put up all the employee's personal details
   '------------------------------------------
   txtSurname.text = Staff_Members[pk_view]!surname
   txtFirstname.text = Staff_Members[pk_view]!firstname
   txtSalutation.text = Staff_Members[pk_view]!salutation
   cmbTitle.index = Staff_Members[pk_view]!fk_title
   cmbMarital.index = Staff_Members[pk_view]!fk_marital
   cmbSex.index = Staff_Members[pk_view]!fk_sex
   If Staff_Members[pk_view]!retired Then
      chkPersonRetired.value = True
   Else
      chkPersonRetired.value = False
   End If
   '-------------------------------------------------------
   'allow the change event of txtBirthdate to calculate age
   '-------------------------------------------------------
   bexit = False
   Try txtBirthdate.text = Format(Staff_Members[pk_view]!birthdate, "dd/mm/yyyy")
   bexit = True
   txtOccupation.text = Staff_Members[pk_view]!occupation
   txtMemo.text = Staff_Members[pk_view]!memo
   '------------------------------------------------------
   'Get the person's comms, and default to a new comm
   'Note: the existing comms are kept in view_comms
   'comms is hence a mixture of old comms (with a fk_comm)
   'and new comms without a fk_comm.  Ditto for addresses
   '-----------------------------------------------------
   Employee_Comms_Get()
   Employee_Communication_New()
   '------------------------------------------------------------
   'Get any addresses for the person, there could be more than 1
   '------------------------------------------------------------
   ' views_addresses = modContactsDBI.person_addresses_get(fk_person)
   ' cvwPersonsAddresses.Clear()
   ' For Each address In views_addresses
   '      x = cvwPersonsAddresses.Count
   '      addresses.Add(address, x)
   '      cvwPersonsAddresses.Add(x, 0)
   '      cvwPersonsAddresses[x][0] = address!type
   '      cvwPersonsAddresses[x][1] = address!street
   '      cvwPersonsAddresses[x][2] = address!town & " " & address!state & " " & address!postcode
   ' Next
   Employee_Addresses_get()
   Employee_Address_New()
   Try fk_image = Staff_Members[pk_view]!fk_image
   If fk_image Then
      Picture_Display()
   End If
   bexit = False
   With Vbox_EditArea
      .Padding = 0
      .Enabled = True
   End With
   If bAddOccupation Then txtOccupation.SetFocus()
   
End

Public Function Employee_Has_Data_for_Data_Numbers() As Boolean
   '----------------------------------------------
   'Returns true if there is data to be put in the
   'contacts.data_numbers table
   '----------------------------------------------
   
   If Trim(txtProviderNumber.text) <> "" Then Return True
   Return 'false  
   
End

Public Function Employee_Has_Data_for_Data_Numbers_Persons() As Boolean
   '----------------------------------------------
   'Returns true if there is data to be put in the
   'contacts.data_numbers table
   '----------------------------------------------
   
   If Trim(txtPrescribernumber.text) <> "" Then Return True
   If Trim(TxtHealthProviderNumberIndividual.text) <> "" Then Return True
   Return 'false  
   
End

Public Sub Employee_Comms_Get()
   
   Dim x As Integer
   Dim col_widths As New Integer[3]
   
   lblmeasure.font = cvwPersonContacts.Font
   comms = New Collection
   views_comms = modContactsDBI.person_Comms_Get(fk_person)
   cvwPersonContacts.Clear()
   For Each comm In views_comms
      x = cvwPersonContacts.Count
      comms.Add(comm, x)
      cvwPersonContacts.Add(x, 0)
      cvwPersonContacts[x][0] = comm!type
      lblmeasure.text = comm!type & " "
      col_widths[0] = Max(lblmeasure.Width, col_widths[0])
      cvwPersonContacts[x][1] = comm!value
      lblmeasure.text = comm!value & " "
      col_widths[1] = Max(lblmeasure.Width, col_widths[1])
      cvwPersonContacts[x][2] = comm!note
   Next
   cvwPersonContacts.Columns[0].Width = col_widths[0]
   cvwPersonContacts.Columns[1].Width = col_widths[1]
   
End

Public Sub Employee_Addresses_get()
   
   Dim x As Integer
   '------------------------------------------------------------
   'Get any addresses for the person, there could be more than 1
   '------------------------------------------------------------
   views_addresses = modContactsDBI.person_addresses_get(fk_person)
   cvwPersonsAddresses.Clear()
   For Each address In views_addresses
      x = cvwPersonsAddresses.Count
      addresses.Add(address, x)
      cvwPersonsAddresses.Add(x, 0)
      cvwPersonsAddresses[x][0] = address!type
      cvwPersonsAddresses[x][1] = Trim(address!street1 & " " & address!street2)
      cvwPersonsAddresses[x][2] = address!town & " " & address!state & " " & address!postcode
   Next
   
End

Public Sub ToolButtons_Click()
   
   Select Case Last.tag
      Case "help"
         '  Select Case TabStrip1.index
         '  Case 0
         
         '   Case 1
         '  PnlRequestPreferences.FPreview.Visible = True
         '  PnlRequestPreferences.Help()
         Help_Show("practice-staff.html", True)
         
         'End Select
   End Select
   
End

Public Sub EditAreaChkBox_Click()
   
   Select Case Last.tag
      Case "employee communication confidential", " employee communication preferred"
         btnAddContact_Employee.Foreground = Color.Red
   End Select
   
End

Public Function New_Staff_Match_To_Umatched_Staff() As Integer
   '--------------------------------------------------------------------------
   'looks at the new staff member, tries to match to documents.unmatched_staff
   'returns pk of documents.unmatched_staff or 0 if unsuccessful
   '--------------------------------------------------------------------------
   
   Dim smsg As String
   Dim sNewStaff As String
   Dim sql As String
   Dim r As Collection
   
   sNewStaff = cmbTitle.text & " " & Trim(txtFirstname.text) & " " & Trim(txtSurname.Text) & "\n"
   sNewStaff &= "Provider number:" & Trim(txtProvidernumber.text) & "\n\n"
   
   sql = "Select * from documents.unmatched_staff  WHERE provider_number = $$" & Trim(txtProvidernumber.text) & "$$ limit 1"
   r = modDBConnect.exec_query_first(sql)
   If Not IsNull(r) Then
      sMsg = "You have entered a new staff member:\n\n" & sNewStaff
      sMsg &= "EasyGP has received a number of documents for an as yet unmatched person "
      sMsg &= "by the name of:\n\n " & r!title & " " & r!firstname & " " & r!surname & "\n"
      sMsg &= "Provider number is: " & r!provider_number & ".\n\n"
      sMsg &= "Is this the same person?"
      Goto Matchfound
   End If
   Return 0
   
Matchfound:
   Message.title = "Unmatched staff member reconciliation"
   Select Case Message.Warning(smsg, "Yes", "No")
      Case 1
         smsg = "Ok, as you are certain they are the same person, we will now "
         "update all the pointers in the documents table to that "
         sMsg &= "of the new staff member " & cmbTitle.text & " " & Trim(txtFirstname.text) & " " & Trim(txtSurname.Text) & ".\n\n"
         sMsg &= "Is it ok to do this?"
         Message.Title = "Confirm - Update all umatched documents"
         If Message.Warning(smsg, "Yes, update all unmatched documents", "No, don't proceed") = 2 Then
            Return 0
         Else
            Return r!pk
         End If
      Case 2
         Return 0
         ' '-------------------------------------------------------------------------
         ' 'The user is saying no, to match this person on identical provider numbers
         ' '-------------------------------------------------------------------------
         '  smsg = "Are you really sure about that - the provider number is the same."
         '  If Message.Warning("Yes, update all unmatched documents", "No, don't proceed") = 2 Then
         '    Return False
         '  Else
         '    Return True
         '  End If
         
   End Select
   
End

Public Sub cvwUnmatchedStaff_Click()
   '-----------------------------------------------------------
   'Assume add new staff member to match to the highlighted row
   '-----------------------------------------------------------
   
   Last.MoveCurrent()
   Employee_New()
   
   txtSurname.text = unmatched_staff[cvwUnmatchedStaff.item.key]!surname
   txtFirstname.text = unmatched_staff[cvwUnmatchedStaff.item.key]!firstname
   txtProvidernumber.text = unmatched_staff[cvwUnmatchedStaff.item.key]!provider_number
   cmbTitle.index = cmbTitle.Find(unmatched_staff[cvwUnmatchedStaff.item.key]!title)
   cmbTitle.index = cmbTitle.Find("Dr")
   
End

Public Sub chkShowUnmatchedStaff_Click()
   
   VBox_UnMatchedStaff.Visible = Last.value
   
End

Public Sub cvwStaffMembers_Menu()
   
   If cvwStaffMembers.count Then
      mnuStaff.Popup()
   Endif
   
End
