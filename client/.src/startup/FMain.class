' Gambas class file

' Copyright (C) 2008-2016 Dr. Richard Terry
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
' ------------------------------------------------------------------------------
' FMain is called by modStartup, if logon successful, and 'runs the whole show'
'------------------------------------------------------------------------------
Public CurrentForm As Object
Private form_stopwatch As New FStopWatch
Public sidebarfont As Font
Private Btn_Section_Tasks As CCoolButton
Private btnSection_Clinical As CCoolButton
Private btnSection_WorkCentre As CCoolButton
Private btnSection_DrugRef As CCoolButton   'these are temporary
Private btnSection_Library As CCoolButton
Private btnSection_Clerical As CCoolButton
Private btnSection_Research As CCoolButton
Private BtnSection_Admin As CCoolButton
Private BtnSection_Patients As CCoolButton
Private btnSection_Contacts As CCoolButton
Private btnSection_Help As CCoolButton
Private BtnSection_RoomSetup As CCoolButton
Private btnSection_Scanning As CCoolButton
Private btnSection_Preferences As CCoolButton
Private btnSection_Shutdown As CCoolButton

Public pnlDayBook As FDayBook                'nerve centre to organise your day
Public pnlDrugReference As FDrugReference    'Drug drug bible - currently not implemented
Public pnlLibrary As FLibrary                'The Library for staff documents or patient handouts
Public pnlClerical As FClerical              'Clerical tasks such as scanning, managing recalls
Public pnlResearch As FResearch              'All research stuff
Public pnlAdmin As FAdmin                    'Admin = tasks such as importing/exporting data
Public pnlContacts As FContacts              'Contacts database for organisations and people who are not patients or staff
Public pnlPatients As FPatients              'Patient details, currently only demographic.
Public pnlStaff As FStaff                    'Staff module - including basic staff preferences
Public pnlHelp As FHelp                      'The main program help browser, sort of like a chm file
Public pnlPopUpHelp As FHtmlViewer           'overlays the program with a html viewer - used by any form except FClinical
Public pnlSetupWorkStation As FRoomSetup     'Setup just for this Workstation
Public pnlStaffPreferences As FStaffPreferences
Public pnlScanning As FScanning
Public pnlWorkCentre As FWorkCentre
Public pnlAppointments As FMakeAppointments
Public pnlDayList As FDayList
Public pnlToolBar As FClinicalToolbar

Private Const POS_BUTTON As Integer = 0
Private HEIGHT_BUTTON As Integer = Desktop.Scale * 3

Static Private form_main As FMain

Private Const admin_user_error As String = "The admin user is not allowed to access this module."
" Please create an ordinary user in the Staff tab and log in as them"

Public Sub Form_Open()

   If modStartUp.Startup(Me) Then
   Else
      Me.Close(0)
   Endif

End

Static Public Function Get_SideBar_Font() As String

   Return form_main.sidebarfont.ToString()

End

Static Public Sub Set_SideBar_Fonts(theFont As Font)

   form_main.mnuSideBar_FontSet(theFont)

End

Public Sub Set_PopUp_Help(sPath As String)

   Try form_main.pnlPopUpHelp.WebBrowser1.path = modUtil.Find_File("help" &/ sPath)
   If Error Then
      form_main.pnlPopUpHelp = New FHtmlViewer(VBoxMain)
      form_main.pnlPopUpHelp.WebView1.Url = modUtil.Find_File("help" &/ sPath)
   End If

End

Public Sub Show_PopUp_Help(flag As Boolean)

   If flag Then
      Try CurrentForm.Hide()
      Try form_main.pnlPopUpHelp.Show()
      If Error Then
         form_main.pnlHelp1 = New PnlHelp1(VBoxMain)
         pnlHelp1.Show()
      End If
   Else
      form_main.pnlPopUpHelp.Close()
      CurrentForm.Show()
   End If

End

Public Sub Init()

   form_main = Me                               'Allow access from other modules.
   Settings_Load()
   Create_SideBar_Buttons()                     'create sidebar buttons
   tlWARNINGTESTDB.text = Replace(tlWARNINGTESTDB.text, "DBName", modDBConnect.DbName)
   FMain.Background = VboxSideBar.Background
   const.init()                                 'init some constant string arrays, global preferences
   Expose_SideBar_Buttons(True)
   ' basic title while we are still loading: user data will come later
   Me.Title = "EasyGP Version " & Application.Version & " (on " & modDBConnect.DbHost & "/" & modDBConnect.DbName & ")"

   If modDBConnect.DbName <> "easygp" Then
      pnlTestDBTOp.Visible = True
   Endif
   Resize_Side_Bar
   With form_stopwatch = New FStopWatch(Vbox_Stopwatch)
      .Background = Me.Background
   End With
   If Not IsNull(modDBConnect.currentUser) Then
      modLater.Add(Class.Load("modAdminDBI"), "Pathways_Exist_And_Writable")
   End If
   modLater.Add(Me, "Init_User")
   modLater.Add(Class.Load("const"), "Check_For_ICPC2")
   const.Clinical_Toolbuttons_Refresh()

End

Public Sub Resize_Side_Bar()

   With lblMeasure
      .font = btnSection_Preferences.Font
      .text = "        User Preferences        "
   End With
   HSplit_Main.Layout = [lblMeasure.width, Me.Width - lblMeasure.Width]
   VboxSideBar.width = lblMeasure.width

End

' initialisations that require user data
Public Sub Init_User()

   Me.Title = UCase(modDBConnect.currentUser!title & " " & modDBConnect.currentUser!wholename) & " [" & modStrings.Capitalise_Words_In_String(modDBConnect.currentUser!role) & "] " & "  - EasyGP Version " & Application.Version & " (on " & modDBConnect.DbHost & "/" & modDBConnect.DbName & ")"
   If Not IsNull(modDBConnect.currentUser) Then
      const.iClinicalNotesDisplayOrder = modAdminDBI.Config_Get_Staff_Member("notes_date_display_order", 0, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff)
      Sidebarfont = Font[modAdminDBI.Config_Get_Staff_Member("user_sidebar_font", FMain.Get_Sidebar_Font(), Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff)]
      Try Application.font = Font[modAdminDBI.Config_Get_Staff_Member("user_application_font", Application.font.ToString(), Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff)]
      Try form_main.Adjust_Colors(modAdminDBI.Config_Get_Staff_Member("user_background_color", 5737869, Null, modDBConnect.currentUser!fk_clinic, modDBConnect.currentUser!fk_staff))
   Endif
   Expose_SideBar_Buttons(False)

End

Public Sub Create_SideBar_Buttons()
   '-------------------------------------------------------
   'Creates the buttons on the side bar, sets the fonts etc
   '-------------------------------------------------------

   Dim sidebarfontString As String
   Dim W As Integer

   sidebarfontString = sidebarfont.ToString()
   W = VboxSideBar.width

   btnSection_Clinical = New CCoolButton(VBox6, 0, POS_BUTTON, W, HEIGHT_BUTTON, ("Clinical Desktop"), "", sidebarfontString) As "btnSection_Clinical"
   btnSection_Clinical.Foreground = Color.SelectedForeground
   btnSection_Clinical.Visible = False

   btnSection_WorkCentre = New CCoolButton(VBox6, 0, POS_BUTTON + HEIGHT_BUTTON + VBox6.height, W, HEIGHT_BUTTON, ("Work Centre"), "", sidebarfontstring) As "btnSection_WorkCentre"
   btnSection_WorkCentre.Foreground = Color.SelectedForeground
   btnSection_WorkCentre.visible = False

   btnSection_Clerical = New CCoolButton(VBox6, 0, POS_BUTTON + HEIGHT_BUTTON * 7, W, HEIGHT_BUTTON, ("Clerical"), "", sidebarfontstring) As "btnSection_Clerical"
   btnSection_Clerical.Foreground = Color.SelectedForeground
   btnSection_Clerical.Visible = False

   btnSection_Scanning = New CCoolButton(VBox6, 0, POS_BUTTON + HEIGHT_BUTTON * 7, W, HEIGHT_BUTTON, ("Scanning"), "", sidebarfontstring) As "btnSection_Scanning"
   btnSection_Scanning.Foreground = Color.SelectedForeground
   btnSection_Scanning.Visible = False

   btnSection_Research = New CCoolButton(Vbox6, 0, POS_BUTTON + HEIGHT_BUTTON * 3, W, HEIGHT_BUTTON, ("Research"), "icons/20/calipers2020.png", sidebarfontstring) As "btnSection_Research"
   btnSection_Research.Foreground = Color.SelectedForeground
   btnSection_Research.visible = False

   btnSection_Admin = New CCoolButton(VBox6, 0, POS_BUTTON + HEIGHT_BUTTON * 3, W, HEIGHT_BUTTON, ("Admin"), "", sidebarfontstring) As "btnSection_Admin"
   btnSection_Admin.Foreground = Color.SelectedForeground
   btnSection_Admin.Visible = False

   btnSection_Patients = New CCoolButton(VBox6, 0, POS_BUTTON + HEIGHT_BUTTON * 3, W, HEIGHT_BUTTON, ("Patients"), "", sidebarfontstring) As "btnSection_Patients"
   btnSection_Patients.Foreground = Color.SelectedForeground
   btnSection_Patients.Visible = False

   btnSection_Contacts = New CCoolButton(VBox6, 0, POS_BUTTON + HEIGHT_BUTTON * 4, W, HEIGHT_BUTTON, ("Contacts"), "", sidebarfontstring) As "btnSection_Contacts"
   btnSection_Contacts.Foreground = Color.SelectedForeground
   btnSection_Contacts.Visible = False

   Btn_Section_Tasks = New CCoolButton(VBox6, 0, POS_BUTTON, W, HEIGHT_BUTTON, ("My Tasks"), "", sidebarfontString, "") As "Btn_Section_Tasks"
   Btn_Section_Tasks.Foreground = Color.SelectedForeground
   Btn_Section_Tasks.Visible = False

   BtnSection_RoomSetup = New CCoolButton(VBox6, 0, POS_BUTTON, W, HEIGHT_BUTTON, ("Room Setup"), "", sidebarfontString) As "btnSection_Roomsetup"
   BtnSection_RoomSetup.Foreground = Color.SelectedForeground
   BtnSection_RoomSetup.Visible = False

   btnSection_Preferences = New CCoolButton(VBox6, 0, POS_BUTTON, W, HEIGHT_BUTTON, ("User Preferences"), "", sidebarfontString) As "btnSection_Preferences"
   btnSection_Preferences.Foreground = Color.SelectedForeground
   btnSection_Preferences.Visible = False

   btnSection_DrugRef = New CCoolButton(VBox6, 0, POS_BUTTON + HEIGHT_BUTTON * 2, W, HEIGHT_BUTTON, ("PI"), "", sidebarfontstring) As "btnSection_DrugRef"
   btnSection_DrugRef.Foreground = Color.SelectedForeground
   btnSection_DrugRef.Visible = False

   btnSection_Library = New CCoolButton(VBox6, 0, POS_BUTTON + HEIGHT_BUTTON * 5, W, HEIGHT_BUTTON, ("Library"), "", sidebarfontstring) As "btnSection_Library"
   btnSection_Library.Foreground = Color.SelectedForeground
   btnSection_Library.Visible = False

   btnSection_Help = New CCoolButton(VBox6, 0, POS_BUTTON + HEIGHT_BUTTON * 7, W, HEIGHT_BUTTON, ("Help"), "", sidebarfontstring) As "btnSection_Help"
   btnSection_Help.Foreground = Color.SelectedForeground
   btnSection_Help.visible = False

   btnSection_Shutdown = New CCoolButton(VBox6, 0, POS_BUTTON + HEIGHT_BUTTON * 7, W, HEIGHT_BUTTON, ("Shutdown"), "", sidebarfontstring) As "btnSection_Shutdown"
   btnSection_Shutdown.Foreground = Color.SelectedForeground
   btnSection_Shutdown.visible = False

End

Public Sub Expose_SideBar_Buttons(initial_startup As Boolean)
   '---------------------------------------------------------------------
   'Setup easyGp according to role.
   'This is just for proof of concept, now need to debate with ian/horst
   'about making roles, access permissions more sophisticated
   '--------------------------------------------------------------------

   Dim r As String
   Dim bDisableSections As Boolean

   If initial_startup Then
      r = Settings["Cached/role/" & modDBConnect.currentUser!logon_name, "doctor"]
   Else
      r = modDBConnect.currentUser!role
      Settings["Cached/role/" & modDBConnect.currentUser!logon_name] = r
   Endif
   Select Case r
      Case "doctor", "locum", "registered nurse", "practice principal"
         btnSection_Clinical.Visible = True
         btnSection_WorkCentre.visible = True
         btnSection_Library.Visible = True
         btnSection_Clerical.Visible = True
         btnSection_Patients.visible = True
         btnSection_Contacts.Visible = True
         BtnSection_RoomSetup.Visible = True
         btnSection_Preferences.Visible = True
         btnSection_Research.Visible = True
         btnSection_Help.Visible = True
         If r = "practice principal" Then
            btnSection_Admin.Visible = True
         Else
            btnSection_Admin.Visible = False
         End If
         VBox_StopWatch.Visible = True
         If initial_startup Then btnSection_Clinical_Click()
      Case "secretary", "practice manager"
         btnSection_Library.Visible = True
         btnSection_Clerical.Visible = True
         Btn_Section_Tasks.Visible = True
         btnSection_Help.Visible = True
         btnSection_Preferences.Visible = True
         btnSection_RoomSetup.Visible = True
         btnSection_Admin.Visible = False
         If initial_startup Then btnSection_Clerical_Click()
      Case "sysadmin"
         btnSection_Clinical.Visible = False
         btnSection_WorkCentre.visible = False
         btnSection_Library.Visible = False
         btnSection_Clerical.Visible = False
         btnSection_Patients.visible = True
         btnSection_Contacts.Visible = True
         BtnSection_RoomSetup.Visible = False
         btnSection_Preferences.Visible = False
         btnSection_Research.Visible = False
         btnSection_Help.Visible = True
         btnSection_Admin.Visible = True
         If initial_startup Then btnSection_Admin_Click()
   End Select

End

Public Sub btnSection_Clinical_click()
   '---------------------------------------------------------------------------
   'Access the clinical section, ie where patient data is entered and displayed
   'Clinical needs some things to be present before we can use it
   '1) A user with valid access rights
   '2) A default coding system
   '---------------------------------------------------------------------------

   Dim sMsg As String

   If IsNull(modDBConnect.currentUser) Then
      Message.Error(admin_user_error)
      Return
   Endif
   If Not modCodingDBI.Coding_System_Check_Default_Exists() Then
      sMsg = "You must set a default coding system before using the clinical section.\n\n"
      "This must be set by someone with administrator privileges and can be \n"
      "done by selecting the Admin tab, and then the import data/coding system data tabs"
      Message.Info(sMsg)
      Return
   End If
   Try CurrentForm.Hide()
   Try pnlToolBar.Show()
   If Error Then
      With pnlToolBar = New FClinicalToolbar(VBoxMain)
         .Show()
      End With
   End If
   CurrentForm = pnlToolBar

End

Public Sub Btn_Section_Tasks_Click()
   '----------------------------------------------------------------------------------------
   'Inbox:  everything which comes into/is generated by the clinic which could be considered
   'a document ends up here - we use this term loosely, to mean eg a scanned bit of paper,
   'an email, a patients result, a staff memo
   '----------------------------------------------------------------------------------------

   If IsNull(modDBConnect.currentUser) Then
      Message.Error(admin_user_error)
      Return
   Endif

   Try CurrentForm.Hide()
   Try pnlDayBook.Show()
   If Error Then
      With pnlDayBook = New FDayBook(VBoxMain)
         .HBox_Heading.Background = VboxSideBar.Background
         .lblSectionHeading.Background = VboxSideBar.Background
         .Show()
      End With
   End If
   CurrentForm = pnlDayBook

End

Public Sub btnSection_Preferences_Click()
   '-----------------------------------------------
   'Shown the chm style help viewer for EasyGP help
   '-----------------------------------------------

   Try form_main.pnlStaffPreferences.Close()
   Try CurrentForm.Hide()
   Try pnlStaffPreferences.Show()
   If Error Then
      pnlStaffPreferences = New FStaffPreferences(VBoxMain)
      pnlStaffPreferences.lblSectionHeading.Background = VboxSideBar.Background
      pnlStaffPreferences.Init()
      pnlStaffPreferences.Show()
   End If
   CurrentForm = pnlStaffPreferences

End

Public Sub btnSection_WorkCentre_Click()
   '----------------------------------------------------------------------------------------
   'Inbox:  everything which comes into/is generated by the clinic which could be considered
   'a document ends up here - we use this term loosely, to mean eg a scanned bit of paper,
   'an email, a patients result, a staff memo
   '----------------------------------------------------------------------------------------

   If IsNull(modDBConnect.currentUser) Then
      Message.Error(admin_user_error)
      Return
   Endif
   Try CurrentForm.Hide()
   Try pnlWorkCentre.Show()
   If Error Then
      With pnlWorkCentre = New FWorkCentre(VBoxMain)
         .HBox_Heading.Background = VboxSideBar.Background
         .lblSectionHeading.Background = VboxSideBar.Background
         .Show()
      End With
   End If
   CurrentForm = pnlWorkCentre

End

Public Sub BtnSection_ProductInformation()

   '--------------------------------------------------------------------------------------
   'The 'drug bible' - currently not implemented, though I've written the code for MIMS it
   'can't be put into open source. The gui exists though
   '--------------------------------------------------------------------------------------

   Try CurrentForm.Hide()
   Try pnlDrugReference.Show()
   If Error Then
      With pnlDrugReference = New FDrugReference(VBoxMain)
         .HBox_Heading.Background = VboxSideBar.Background
         .lblSectionHeading.Background = VboxSideBar.Background
         .Show
      End With
   Endif

End

Public Sub btnSection_DrugRef_Click()
   '--------------------------------------------------------------------------------------
   'The 'drug bible' - currently not implemented, though I've written the code for MIMS it
   'can't be put into open source. The gui exists though
   '--------------------------------------------------------------------------------------

   Try CurrentForm.Hide()
   Try pnlDrugReference.Show()
   If Error Then
      With pnlDrugReference = New FDrugReference(VBoxMain)
         .HBox_Heading.Background = VboxSideBar.Background
         .lblSectionHeading.Background = VboxSideBar.Background
         .Show
      End With
   End If
   CurrentForm = pnlDrugReference

End

Public Sub btnSection_Library_Click()
   '----------------------------------------------------------------------------
   'Repository of all things of knowlege - documents can be html/images/pdfs
   'the libary mirrors the library tree  on the HDD as designated in preferences
   'FIXME - IMPLEMENT LIBRARY DIRECTORY IN PREFERENCES
   '----------------------------------------------------------------------------

   Try CurrentForm.Hide()
   Try pnlLibrary.Show()
   If Error Then
      With pnlLibrary = New FLibrary(VBoxMain)
         .HBox_Heading.Background = VboxSideBar.Background
         .lblSectionHeading.Background = VboxSideBar.Background
         .Show
      End With
   End If
   CurrentForm = pnlLibrary

End

Public Sub btnSection_Clerical_Click()
   '------------------------------------------------------------------------------
   'Selects the clerical tasks section - e.g to manage recall, monitor staff tasks
   'allocate scanned documents
   '------------------------------------------------------------------------------

   If IsNull(modDBConnect.currentUser) Then
      Message.Error(admin_user_error)
      Return
   Endif

   Try CurrentForm.Hide()
   Try pnlClerical.Show()
   If Error Then
      With pnlClerical = New FClerical(VBoxMain)
         .HBox_Heading.Background = VboxSideBar.Background
         .lblSectionHeading.Background = VboxSideBar.Background
         .Show()
      End With
   End If
   CurrentForm = pnlClerical

End

Public Sub btnSection_Research_Click()
   '-------------------------------------
   'Do all research here when implemented
   '-------------------------------------

   Try CurrentForm.Hide()
   Try pnlResearch.Show()
   If Error Then
      With pnlResearch = New FResearch(VBoxMain)
         .HBox_Heading.Background = VboxSideBar.Background
         .lblSectionHeading.Background = VboxSideBar.Background
         .Show()
      End With
   End If
   CurrentForm = pnlResearch

End

Public Sub BtnSection_RoomSetup_Click()
   '-------------------------------------
   'User sets up printers etc
   '-------------------------------------

   Try CurrentForm.Hide()
   Try pnlSetupWorkStation.Show()
   If Error Then
      With pnlSetupWorkStation = New FRoomSetup(VBoxMain)
         .HBox_Heading.Background = VboxSideBar.Background
         .lblSectionHeading.Background = VboxSideBar.Background
         .Show()
      End With
   End If
   CurrentForm = pnlSetupWorkStation

End

Public Sub btnSection_Patients_Click()
   '--------------------------------------------------------------------------
   'Contacts manager for patients
   'NB: this is entirely untested, will be buggy as I don't use it as I import
   'from a legacy database, so needs debugging FIXME- DEBUG PATIENTS
   '--------------------------------------------------------------------------

   Try CurrentForm.Hide()
   Try pnlPatients.Show()
   If Error Then
      With pnlPatients = New FPatients(VBoxMain)
         .HBox_Heading.Visible = True
         .lblSectionHeading.Background = VboxSideBar.Background
         .Show()
      End With
   End If
   CurrentForm = pnlPatients

End

Public Sub BtnSection_Scanning_Click()
   '-------------------------------------
   'Do all research here when implemented
   '-------------------------------------

   Try CurrentForm.Hide()
   Try pnlScanning.Show()
   If Error Then
      pnlScanning = New FScanning(VBoxMain)
      pnlScanning.Show()
   End If
   CurrentForm = pnlScanning

End

Public Sub btnSection_Admin_Click()
   '-------------------------------------------------------------------------------------------------
   'All admin tasks here - eg setting global preferences, setting hl7 import, library directories etc
   'importing/updating postcodes, exporting or importing clinical records
   '-------------------------------------------------------------------------------------------------

   Try CurrentForm.Hide()
   Try pnlAdmin.Show()
   If Error Then
      With pnlAdmin = New FAdmin(VBoxMain)
         .Init()
         .Show()
         .lblSectionHeading.Background = VboxSideBar.Background
         .HBox_Heading.Background = VboxSideBar.Background

      End With
   End If
   CurrentForm = pnlAdmin

End

Public Sub btnSection_Contacts_Click()
   '----------------------------------------------------------------------------
   'Contacts manager for all organisations/clinics/branches/persons not patients
   'To fix this rename all occurrences of FContacts_Newest to Fcontacts and
   'comment out the message and the return below
   '----------------------------------------------------------------------------
   '  Message.Info("If this message popups up Richard has forgotton to re-set the working copy of contacts to the old version.\n\nIf you know what you are doing  fix this in FMain.BtnSectionContacts")
   ' Return

   Try form_main.pnlPopUpHelp.Close()
   Try CurrentForm.Hide()
   Try pnlContacts.Show()
   If Error Then
      With pnlContacts = New FContacts(vBoxMain)
         .HBox_Heading.Visible = True
         .lblSectionHeading.Background = VboxSideBar.Background
         .Show()
      End With
   End If
   CurrentForm = pnlContacts

End

'

Public Sub btnSection_Help_Click()
   '-----------------------------------------------
   'Shown the chm style help viewer for EasyGP help
   '-----------------------------------------------

   Try form_main.pnlPopUpHelp.Close()
   Try CurrentForm.Hide()
   Try pnlHelp.Show()
   If Error Then
      With pnlHelp = New FHelp(VBoxMain)
         .lblSectionHeading.Background = VboxSideBar.Background
         .HBox_Heading.Background = VboxSideBar.Background
         .Show()
      End With
   End If
   CurrentForm = pnlHelp

End

Public Sub btnSection_Shutdown_Click()

   Dim sMsg As String
   Dim bHaltMachine As Boolean

   Message.Title = "Quit EasyGP"
   sMsg = "Selecting 'Quit' will just end this program and return you to the operating system.\n\nSelecting 'Turn off' the computer will power down your actual computer, or, if using a Virtual Machine, will close the machine and return you to the host opeating system."
   If Message.Question(sMsg, "Quit", "Turn off the computer") = 2 Then
      bHaltMachine = True
   End If
   Settings_Save()
   modDBConnect.Close_Listener()
   'pnlClinical = Null
   form_main = Null
   If bHaltMachine Then
      Exec ["/usr/bin/sudo", "/sbin/shutdown", "-h", "now"]
   Else
      Quit
   End If

End

Public Sub Settings_Save()
   '---------------------------------------------------------------------
   'Saves settings of the EasyGP main window, and all splits on all forms
   'Settings for FClinical are saved when the form closes.
   '---------------------------------------------------------------------

   Settings["FMain/Top"] = Me.Top
   Settings["FMain/Left"] = Me.Left
   Settings["FMain/Height"] = Me.Height
   Settings["FMain/Width"] = Me.Width
   Settings["FMain/Hsplit_Main.Layout"] = HSplit_Main.Layout
   Try pnlWorkCentre.Settings_Save()
   Try pnlDrugReference.Settings_Save()
   Try pnlClerical.Settings_Save()
   Try pnlResearch.Settings_Save()
   Try pnlAdmin.Settings_Save()
   Try pnlContacts.frmOrganisations.Settings_Save()
   Try pnlContacts.frmPersons.Settings_Save()
   Try pnlPatients.Settings_Save()
   Try pnlStaffPreferences.Settings_Save()
   Try pnlHelp.Settings_Save()
   Try pnlSetupWorkStation.Settings_Save()
   Try pnlLibrary.Settings_Save()

End

Private Sub Settings_Load()
   '------------------------------------------------------------------------------------
   'Each user can have different application and side bar fonts and different main split
   'Try and load these, or if not use defaults
   '------------------------------------------------------------------------------------

   Dim username As String

   Me.Left = Settings["FMain/Left", 0]
   Me.Height = Settings["FMain/Height", Desktop.Height]
   Me.Width = Settings["FMain/Width", Desktop.Width]
   username = "easygp"
   sidebarfont = New Font
   HSplit_Main.layout = Settings["FMain/Hsplit_Main.Layout", modUtilGUI.HSplit([1, 10])]

End

Public Sub Form_Close()

   Settings_Save() 'save this form and all child forms settings
   modDBConnect.Close_Listener()
   modDBConnect.Shutdown()
   form_main = Null
   Settings.Save()

End

Public Sub mnuSideBar_FontSet(theFont As Font)
   '----------------------------------------------------
   'Expects a font object, sets all buttons to that font
   '----------------------------------------------------

   Dim hCtrl As Control
   Dim pnl As Panel
   Dim lbl As Label

   For Each hCtrl In VBox6.children
      If hctrl Is Panel Then
         pnl = hctrl
         For Each hctrl In pnl.Children
            If hctrl Is Label Then
               lbl = hctrl
               lbl.font = theFont
               Break
            Endif
         Next
      Endif
   Next
   Resize_Side_Bar

End

Static Public Sub Adjust_Colors(bgc As Integer)

   form_main.VboxSideBar.Background = bgc
   form_main.Vbox1.Background = bgc
   form_main.VBox3.Background = bgc

End

Public Sub StaffTasks_For_Staff_Member_ReLoad()
   '--------------------------------------------------------------------
   'Reloads and fills columnview of tasks just for a single staff member
   'Each task = 1 component of the overall task which could have several
   'staff members involved
   '--------------------------------------------------------------------

   Dim TasksComponents As Collection

   If IsNull(modDBConnect.currentUser) Then Return
   Inc Application.Busy

   TasksComponents = modDayBookDBI.Staff_Tasks_Get(modDBConnect.currentUser!fk_staff, 0, True, 0, const.cTaskCompletionNo, const.cTaskRestriction_User, "ASC")              'get uncompleted tasks
   Dec Application.Busy

End

Public Sub Import_Nata()
   'File must be pipe delimited with no " around name
   'original nata supplied data is kept
   'Accreditation_No, LabName, LabName2, Address,
   'Address2, Address3, Suburb, State, Postcode,
   ' Contact, Phone, Fax, Mobile, Email, Website,
   '  Facility_Type, Last_Updated,

   Dim hFile As File
   Dim sOneLine As String
   Dim labs As Collection
   Dim lab As Crow
   Dim bits As String[]

   labs = New Collection

   hFile = Open "/home/richard/Downloads/easygp/nata.txt" For Read
   While Not Eof(hFile)
      Line Input #hFile, sOneLine
      bits = Split(soneline, "|")
      lab = New Crow
      lab!accreditation_no = bits[0]
      lab!labname = bits[1]
      If bits[2] = "" Then
         Print bits[2]
      Endif
      lab!labname2 = bits[2]
      lab!address = bits[3]
      lab!address2 = bits[4]
      lab!address3 = bits[5]
      lab!suburb = bits[6]
      lab!state = bits[7]
      lab!postcode = bits[8]
      lab!contact = bits[9]
      lab!phone = bits[10]
      lab!fax = bits[11]
      lab!mobile = bits[12]
      lab!email = bits[13]
      lab!website = bits[14]
      lab!facility_type = bits[15]
      lab!last_updated = bits[16]
      If bits[8] = "" Then
         Print lab
      Endif
      lab.Save("documents.lu_nata_laboratories", "fk_lab")
      Labs.Add(lab, labs.count)
   Wend
   Close #hFile
   modDBConnect.CommitTrans
   'Now construct the sending entities
   'some lab's eg healthlink have multiple labs - we will only allow a 'generic' company name and always use head office
   'when loading the hl7, will use the nata number to get the 'generic' company name
   ' distinct_labnames = modDBConnect.exec_query_collection("select distinct labname as pk, labname from documents.nata_laboritories order by labname")      'distinct lab names
   ' For Each l In distinct_labnames
   '    '  R = modDBConnect.exec_query("Select distinct accreditation_no, labname from documents.nata_laboritories where labname ='" & l!labname & "'")  'are there more than 1 accreditation numbers
   '     R = modDBConnect.exec_query("Select * from documents.sending_entities where msh_sending_entity ILIKE '" & l!labname & "'")
   '    If R.count = 0 Then  'do we already have this company no?
   '       sending_entity = New CRow
   '       sending_entity!msh_sending_entity = l!labname
   '       sending_entity!fk_lu_message_standard = const.document_message_standard_hl7
   '       sending_entity!fk_lu_message_display_style = const.Document_Display_As_Result
   '       sending_entity!fk_lu_request_type = const.Request_Type_Pathology
   '       sending_entity.Save("documents.sending_entities", "fk_sendingentity")
   '
   '    Else
   '       Print R!msh_sending_entity
   '    End If
   '
   ' Next
   '
   ' For Each l In labs
   '    'check if this lab number is distinct
   '    sql = "Select count (pk) from documents.nata_laboritories where accreditation-no ="
   ' Next
   modDBConnect.CommitTrans

End

Public Sub view_images()

   'just mucking around......

   Dim tempFile As String
   Dim tempPicture As Variant
   Dim $Result As Result
   Dim x As Integer

   $Result = modDBConnect.exec_query("Select * from blobs.images where deleted = false")
   Print $Result.Count
   Repeat
      tempFile = Temp("image" & $Result!pk) & ".jpg"
      tempPicture = $Result!image
      If tempPicture.data Then
         File.Save(tempFile, tempPicture.data)
      End If
      Inc x
      Print x
   Until $Result.MoveNext()

End

Public Sub rt_fix_links_data_persons()

   'data_persons accidentally imported with no link to an address
   'check keys are sequential
   Dim all_links As Collection
   Dim a_link As Collection
   Dim icounter As Integer
   Dim x As Integer
   Dim sql As String

   'all the links with no person in the persons table
   sql = ""
   "select links_persons_addresses.pk as  pk_link, data_persons.pk as pk_data_persons "
   "from contacts.links_persons_addresses "
   "left join contacts.data_persons ON links_persons_addresses.fk_person = contacts.data_persons.pk "
   "where data_persons.pk is null order by links_persons_addresses.pk "
   all_links = modDBConnect.exec_query_collection(sql)
   x = 12459 'the last link to a person in the persons table where person exists

   For Each a_link In all_links
      Print a_link!pk_link, x + 1
      If a_link!pk_link <> x + 1 Then
         Print "out of order", a_link!pk_link
      Endif
      Inc x
      ' Inc icounter
      ' If icounter = 10 Then Break
   Next

End

Public Sub rt_check_link_persons_comms()

   Dim LPComs As Collection
   Dim LPC As Collection
   Dim sql As String
   Dim x As Integer

   '"links_persons_comms.pk between 22292 and 37061"
   sql =
      "select "
   "links_persons_comms.fk_person, "
   "links_persons_comms.pk as pk_links_persons_comms, "
   "data_persons.pk as fk_data_persons "
   "from contacts.links_persons_comms "
   "left join contacts.data_persons ON links_persons_comms.fk_person = contacts.data_persons.pk "
   "where data_persons.pk is null "
   "order by links_persons_comms.pk"
   LPComs = modDBConnect.exec_query_collection(sql)
   x = 22291 'the one before the start of the missin persons

   For Each LPC In LPComs
      Print LPC!pk_links_persons_comms, x + 1
      If LPC!pk_links_persons_comms <> x + 1 Then
         Print "out of order", LPC!pk_links_persons_comms
      Endif
      Inc x
   Next

End

Public Sub Button1_Click()

   Dim sMsg As String
   Dim Blob_Data As Collection
   Dim tempFile As String = Temp$
   Dim tempPicture As Variant
   Dim P As Picture
   Dim all_blobs As New Collection

 
   ' DO NOT NEED TO RUN rt_check_link_persons_comms
   ' DO NOT NEED TO RUN rt_fix_links_data_persons
   Return
    rt_fix_family_history_no_pk_progressnote ' can run this but only once or it will crash    HORST YOU DO NOT NEED THIS

    rt_fix_fh_conditions_no_consult_or_progressNotes          'HORST RUN THIS (IT TAKES A WHILE)

    rt_fix_fh_conditions_have_fk_consult_no_fk_progressnote()  'HORST RUN THIS

    rt_fix_social_history_no_pk_progressnote                   'HORST RUN THIS
   
    rt_fix_recalls_no_pk_progressnote                          'HORST RUN THIS 
   
    rt_fix_medical_certificates                                  'HORST RUN THIS 
   
   ' rt_fix_recalls_no_pk_progressnote                          'HORST RUN THIS

   ' rt_fix_medical_certificates                                  'HORST RUN THIS

    rt_fix_vaccination_imports                                       'HORST RUN THIS BUT WON'T HAVE ANY I THINK

    rt_fix_past_history_imports                                'HORST RUN THIS BUT WON'T HAVE ANY I THINK
    rt_fix_occupational_history_no_progress_note_Key              'HORST RUN THIS 
    RT_Fix_imported_habits                                      'DONT NEED TO RUN THIS HORST
   ' rt_fix_past_history_imports                                'HORST RUN THIS BUT WON'T HAVE ANY I THINK
   '  rt_fix_occupational_history_no_progress_note_Key              'HORST RUN THIS
   ' RT_Fix_imported_habits                                      'DONT NEED TO RUN THIS HORST
   '-------------------------------------------
   'HORST DO NOT RUN ANYTHING UNDER THIS RETURN
   '-------------------------------------------
   Return
   ' Blob_Data = modDBConnect.exec_query_first("Select * from blobs.images where fk_consult = 1797 LIMIT 1")
   '
   ' File.Save(tempFile, Blob_Data!image.data)
   ' P = Picture.Load(tempfile)
   ' PictureBox2.Picture = P
   ' Print Blob_Data
   Return
   Import_Nata
   Return
   ' Private Function Read_Page_Count() As Integer
   '

   view_images  'rt only
   Return
   smsg = "<span style='color: red;'>&#x2B24;</span> <span style='color: green;' >&#x2B24;</span>"

   Message.Info(sMsg)

   Return
   If Message.Question("Update Audit, this will take some time?", " Yes ", " No ") = 2 Then Return
   Inc Application.Busy
   If Not Audits_Update_Document_Notes_Delete_Duplicate() Then
      Goto Roll_Back_Transaction
   Endif
   If Not Audits_Update_Document_Notes_Delete_Preliminary() Then
      Goto Roll_Back_Transaction
   Endif
   If Not Audits_Update_Document_Notes_Mark_Deleted() Then
      Goto Roll_Back_Transaction
   Endif
   If Not Audit_update_recall_notes() Then
      Goto Roll_Back_Transaction
   Endif
   If Not Audits_Update_Document_Notes_Import_Scanning() Then
      Goto Roll_Back_Transaction
   Endif
   If Not Audits_Update_Document_Notes_Viewed_And_Filed() Then
      Goto Roll_Back_Transaction
   Endif
   ' Audits_Update_Tasks
   ' Return
   modDBConnect.CommitTrans
   Message.Info("Completed the audit update - do not run this again")
   Dec Application.Busy
   Return

Roll_Back_Transaction:
   modDBConnect.RollBack
   Dec Application.Busy

End

Public Function Audits_Update_Document_Notes_Import_Scanning() As Boolean
   '---------------------------------------------------------------------------
   'This sub updates the notes associated with these flags to add the details
   'of these documents in the audit trail so that it makes sense to the viewer
   'fk_audit_action 26 = 'scanned document imported'
   'There has been a bug at some stage
   '---------------------------------------------------------------------------

   Dim audits As New Collection
   Dim audit As Collection
   Dim new_notes As String
   Dim sql As String
   Dim x As Integer
   Dim tb As TextBox

   With tb = New TextBox(Me)
      .Visible = False
   End With
   sql = ""
   "SELECT distinct"
   " vwDocuments.pk_document,"
   "  vwpatients.wholename, "
   "  vwdocuments.source_file, "
   "  vwdocuments.imported_time, "
   "  vwdocuments.date_created, "
   "  vwdocuments.originator, "
   "  vwDocuments.msh_sending_entity,"
   "  vwdocuments.tag, "
   "  vwdocuments.tag_user,"
   "  vwprogressnotes.pk_progressnote,"
   "  vwprogressnotes.fk_row,"
   "  vwprogressnotes.linked_table,"
   "  vwprogressnotes.notes,"
   "  vwProgressNotes.fk_audit_action,"
   "  vwProgressNotes.audit_action "
   "FROM "
   "  clin_consult.vwprogressnotes, "
   "  documents.vwdocuments, "
   "  contacts.vwpatients "
   "WHERE "
   "  vwprogressnotes.fk_row = vwdocuments.pk_document "
   "  AND   vwdocuments.fk_patient = vwpatients.fk_patient"
   "  and linked_table='documents.documents'::regclass "
   " And fk_audit_action = 26"

   audits = modDBConnect.exec_query_collection(sql)
   Print audits.Count
   For Each audit In audits
      Print Str(x), "fixing scanned document import for " & audit!wholename
      If IsNull(audit!date_created) Then           'bugfix crept in during development e.g I have 5/89,0000 records with no date created.
         tb.text = Format(audit!imported_time, "dd/mm/yyyy")
         modDBConnect.exec_query("update documents.documents set date_created = '" & Format(audit!imported_time, "dd/mm/yyyy") & "' WHERE pk = " & audit!pk_document)
         audit!date_created = Val(tb.text)
         Print audit!date_created
      Endif
      new_notes = "Document which was dated " & Format(audit!date_created, "dd/mm/yyyy")
      new_notes &= " and was imported on " & Format(audit!imported_time, "dd/mm/yyyy")
      new_notes &= " was scanned - the original document was sent by " & audit!originator
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": audit!pk_progressnote, "notes": new_notes])
      Inc x
   Next
   Return True
   'Catch
   ' Return False

End

Public Function Audits_Update_Document_Notes_Delete_Preliminary() As Boolean
   '---------------------------------------------------------------------------
   'This sub updates the notes associated with these flags to add the details
   'of these documents in the audit trail so that it makes sense to the viewer
   'fk_audit_action 29= delete prelimary results
   '---------------------------------------------------------------------------

   Dim audits As New Collection
   Dim audit As Collection
   Dim new_notes As String
   Dim sql As String
   Dim tb As TextBox

   With tb = New TextBox(Me)
      .Visible = False
   End With
   sql = ""
   "SELECT distinct"
   " vwDocuments.pk_document,"
   "  vwpatients.wholename, "
   "  vwdocuments.source_file, "
   "  vwdocuments.imported_time, "
   "  vwdocuments.date_created, "
   "  vwdocuments.originator, "
   "  vwDocuments.msh_sending_entity,"
   "  vwdocuments.tag, "
   "  vwdocuments.tag_user,"
   "  vwprogressnotes.pk_progressnote,"
   "  vwprogressnotes.fk_row,"
   "  vwprogressnotes.linked_table,"
   "  vwprogressnotes.notes,"
   "  vwProgressNotes.fk_audit_action,"
   "  vwProgressNotes.audit_action "
   "FROM "
   "  clin_consult.vwprogressnotes, "
   "  documents.vwdocuments, "
   "  contacts.vwpatients "
   "WHERE "
   "  vwprogressnotes.fk_row = vwdocuments.pk_document "
   "  AND   vwdocuments.fk_patient = vwpatients.fk_patient"
   "  and linked_table='documents.documents'::regclass "
   " And fk_audit_action = 29"
   audits = modDBConnect.exec_query_collection(sql)
   For Each audit In audits
      If IsNull(audit!date_created) Then           'bugfix crept in during development e.g I have 5/89,0000 records with no date created.
         tb.text = Format(audit!imported_time, "dd/mm/yyyy")
         modDBConnect.exec_query("update documents.documents set date_created = '" & Format(audit!imported_time, "dd/mm/yyyy") & "' WHERE pk = " & audit!pk_document)
         audit!date_created = Val(tb.text)
      End If
      new_notes = "Preminary result which was dated " & Format(audit!date_created, "dd/mm/yyyy")
      Print "fixing delete prelimary for " & audit!wholename
      new_notes &= " and was imported on " & Format(audit!imported_time, "dd/mm/yyyy") & "  was deleted - the original document was sent by " & audit!originator & " with the tag '" & audit!tag & "' "
      If Not IsNull(audit!tag_user) Then
         new_notes &= " and the user tag was '" & audit!tag_user & "'"
      Endif
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": audit!pk_progressnote, "notes": new_notes])
   Next
   Return True

   'Catch
   ' Return False

End

Public Function Audits_Update_Document_Notes_Viewed_And_Filed() As Boolean
   '---------------------------------------------------------------------------
   'This sub updates the notes associated with these flags to add the details
   'of these documents in the audit trail so that it makes sense to the viewer
   'fk_audit_action 21= viewed and filed the document
   '---------------------------------------------------------------------------

   Dim audits As New Collection
   Dim audit As Collection
   Dim new_notes As String
   Dim sql As String
   Dim R As Result
   Dim x As Integer
   Dim tb As TextBox
   Dim sTaskAllocatedTo As String

   With tb = New TextBox(Me)
      .Visible = False
   End With

   sql = ""
   "SELECT distinct"
   " vwDocuments.pk_document,"
   "  vwpatients.wholename, "
   "  vwdocuments.source_file, "
   "  vwdocuments.imported_time, "
   "  vwdocuments.date_created, "
   "  vwdocuments.originator, "
   "  vwDocuments.msh_sending_entity,"
   "  vwdocuments.tag, "
   "  vwdocuments.tag_user,"
   "  vwprogressnotes.pk_progressnote,"
   "  vwprogressnotes.fk_row,"
   "  vwprogressnotes.linked_table,"
   "  vwprogressnotes.notes,"
   "  vwProgressNotes.fk_audit_action,"
   "  vwProgressNotes.audit_action "
   "FROM "
   "  clin_consult.vwprogressnotes, "
   "  documents.vwdocuments, "
   "  contacts.vwpatients "
   "WHERE "
   "  vwprogressnotes.fk_row = vwdocuments.pk_document "
   "  AND   vwdocuments.fk_patient = vwpatients.fk_patient"
   "  and linked_table='documents.documents'::regclass "
   " And fk_audit_action = 21"

   audits = modDBConnect.exec_query_collection(sql)
   For Each audit In audits
      If IsNull(audit!date_created) Then           'bugfix crept in during development e.g I have 5/89,0000 records with no date created.
         tb.text = Format(audit!imported_time, "dd/mm/yyyy")
         modDBConnect.exec_query("update documents.documents set date_created = '" & Format(audit!imported_time, "dd/mm/yyyy") & "' WHERE pk = " & audit!pk_document)
         audit!date_created = Val(tb.text)
      End If
      Print Str(x), "fixing viewed & filed document import for " & audit!wholename
      new_notes = "Inbox document which was dated " & Format(audit!date_created, "dd/mm/yyyy")
      new_notes &= " and was imported on " & Format(audit!imported_time, "dd/mm/yyyy")
      New_Notes &= " was viewed and filed with "
      'need to look here and see if any tasks actually were attached to this.
      sTaskAllocatedTo = ""
      R = modDBConnect.exec_query("Select * from clerical.vwtaskscomponents where fk_row =" & audit!fk_row)
      If R.count Then
         'we have a task...
         Select Case R!fk_urgency
            Case const.UrgencyLevelRoutine
               If IsNull(R!fk_staff_allocated) Then
                  New_Notes &= "auto-task generated for a routine appointment"
               Else
                  sTaskAllocatedTo = ". A task has been allocated to " & modStrings.Capitalise_Words_In_String(R!staff_allocated_title & " " & R!staff_allocated_wholename)
               End If
            Case const.UrgencyLevelUrgent
               If IsNull(R!fk_staff_allocated) Then
                  New_Notes &= "auto-task generated for an urgent appointment"
               Else
                  sTaskAllocatedTo = ". A task has been allocated to " & modStrings.Capitalise_Words_In_String(R!staff_allocated_title & " " & R!staff_allocated_wholename)
               End If
         End Select
      Else
         New_Notes &= " no action taken"
      Endif
      New_Notes &= " - the original document was sent by " & audit!originator & " with the tag '" & audit!tag & "' "
      If Not IsNull(audit!tag_user) Then
         new_notes &= " and the user tag was '" & audit!tag_user & "'"
      Endif
      If sTaskAllocatedTo Then
         Print
      Endif
      new_notes &= sTaskAllocatedTo
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": audit!pk_progressnote, "notes": new_notes])

      Inc x
      '  If x = 2000 Then Break
   Next
   Return True
   'Catch
   ' Return False

End

Public Function Audits_Update_Document_Notes_Delete_Duplicate() As Boolean
   '---------------------------------------------------------------------------
   'This sub updates the notes associated with these flags to add the details
   'of these documents in the audit trail so that it makes sense to the viewer
   'fk_audit_action 28= delete duplicate document
   '---------------------------------------------------------------------------

   Dim audits As New Collection
   Dim audit As Collection
   Dim new_notes As String
   Dim sql As String
   Dim tb As TextBox

   With tb = New TextBox(Me)
      .Visible = False
   End With

   sql = ""
   "SELECT distinct"
   " vwDocuments.pk_document,"
   "  vwpatients.wholename, "
   "  vwdocuments.source_file, "
   "  vwdocuments.imported_time, "
   "  vwdocuments.date_created, "
   "  vwdocuments.originator, "
   "  vwDocuments.msh_sending_entity,"
   "  vwdocuments.tag, "
   "  vwdocuments.tag_user,"
   "  vwprogressnotes.pk_progressnote,"
   "  vwprogressnotes.fk_row,"
   "  vwprogressnotes.linked_table,"
   "  vwprogressnotes.notes,"
   "  vwProgressNotes.fk_audit_action,"
   "  vwProgressNotes.audit_action "
   "FROM "
   "  clin_consult.vwprogressnotes, "
   "  documents.vwdocuments, "
   "  contacts.vwpatients "
   "WHERE "
   "  vwprogressnotes.fk_row = vwdocuments.pk_document "
   "  AND   vwdocuments.fk_patient = vwpatients.fk_patient"
   "  and linked_table='documents.documents'::regclass "
   " And fk_audit_action = 28"

   audits = modDBConnect.exec_query_collection(sql)
   For Each audit In audits
      Print "fixing delete duplicate for " & audit!wholename
      If IsNull(audit!date_created) Then           'bugfix crept in during development e.g I have 5/89,0000 records with no date created.
         tb.text = Format(audit!imported_time, "dd/mm/yyyy")
         modDBConnect.exec_query("update documents.documents set date_created = '" & Format(audit!imported_time, "dd/mm/yyyy") & "' WHERE pk = " & audit!pk_document)
         audit!date_created = Val(tb.text)
      End If
      new_notes = "Duplicate document which was dated " & Format(audit!date_created, "dd/mm/yyyy")
      new_notes &= " and was imported on " & Format(audit!imported_time, "dd/mm/yyyy") & "  was deleted - the original document was sent by " & audit!originator & " with the tag '" & audit!tag & "' "
      If Not IsNull(audit!tag_user) Then
         new_notes &= " and the user tag was '" & audit!tag_user & "'"
      Endif
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": audit!pk_progressnote, "notes": new_notes])
   Next
   Return True
   'Catch
   ' Return False

End

Public Function Audits_Update_Document_Notes_Mark_Deleted() As Boolean
   '---------------------------------------------------------------------------
   'This sub updates the notes associated with these flags to add the details
   'of these documents in the audit trail so that it makes sense to the viewer
   'fk_audit_action 4= 'mark deleted'
   '---------------------------------------------------------------------------

   Dim audits As New Collection
   Dim audit As Collection
   Dim new_notes As String
   Dim sql As String
   Dim tb As TextBox

   With tb = New TextBox(Me)
      .Visible = False
   End With
   sql = ""
   "SELECT distinct"
   " vwDocuments.pk_document,"
   "  vwpatients.wholename, "
   "  vwdocuments.source_file, "
   "  vwdocuments.imported_time, "
   "  vwdocuments.date_created, "
   "  vwdocuments.originator, "
   "  vwDocuments.msh_sending_entity,"
   "  vwdocuments.tag, "
   " vwdocuments.fk_lu_display_as,"
   "  vwdocuments.tag_user,"
   "  vwprogressnotes.pk_progressnote,"
   "  vwprogressnotes.fk_row,"
   "  vwprogressnotes.linked_table,"
   "  vwprogressnotes.notes,"
   "  vwProgressNotes.fk_audit_action,"
   "  vwProgressNotes.audit_action, "
   "  vwProgressnotes.audit_reason "
   "FROM "
   "  clin_consult.vwprogressnotes, "
   "  documents.vwdocuments, "
   "  contacts.vwpatients "
   "WHERE "
   "  vwprogressnotes.fk_row = vwdocuments.pk_document "
   "  AND   vwdocuments.fk_patient = vwpatients.fk_patient"
   "  and linked_table='documents.documents'::regclass "
   " And fk_audit_action = 4"

   audits = modDBConnect.exec_query_collection(sql)
   For Each audit In audits
      Print "fixing mark deleted for " & audit!wholename
      If IsNull(audit!date_created) Then           'bugfix crept in during development e.g I have 5/89,0000 records with no date created.
         tb.text = Format(audit!imported_time, "dd/mm/yyyy")
         modDBConnect.exec_query("update documents.documents set date_created = '" & Format(audit!imported_time, "dd/mm/yyyy") & "' WHERE pk = " & audit!pk_document)
         audit!date_created = Val(tb.text)
      End If
      Select Case audit!fk_lu_display_as
         Case 1
            new_notes = "Letter "
         Case 2
            new_notes = "Result "
         Case 3
            new_notes = "Certificate "
         Case 4
            new_notes = "Image "
      End Select
      new_notes = "which was dated " & Format(audit!date_created, "dd/mm/yyyy")
      new_notes &= " and was imported on " & Format(audit!imported_time, "dd/mm/yyyy") & "  was deleted - the original document was sent by " & audit!originator & " with the tag '" & audit!tag & "' "
      If Not IsNull(audit!tag_user) Then
         new_notes &= " and the user tag was '" & audit!tag_user & "' "
      End If
      new_notes &= ". The reason given for the deletion was:<BR>'" & audit!audit_reason & "'."
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": audit!pk_progressnote, "notes": new_notes])
   Next
   Return True
   'Catch
   ' Return False

End

Public Function Task_Audit_Notes_Save(task As Collection, sTaskDetails As String, audit_action As String)
   '----------------------------------------------------
   'Create the clin_consult entry
   ' CREATE TABLE clin_consult.consult
   ' (
   '   pk serial NOT NULL,
   '   consult_date timestamp without time zone NOT NULL,
   '   fk_patient integer NOT NULL,
   '   fk_staff integer NOT NULL,
   '   fk_type integer,
   '   summary text,
   '   CONSTRAINT consult_pkey PRIMARY KEY (pk )
   ' )
   '----------------------------------------------------------

   Dim cons As CRow
   Dim audit As CRow

   cons = New CRow
   cons!consult_date = Task!date_component_logged
   cons!fk_patient = Task!fk_patient
   cons!fk_staff = Task!fk_staff_filed_task
   cons!fk_type = const.consult_type_audit
   cons.Save("clin_consult.consult", "fk_consult")
   '-----------------------------------------------------------
   'create the progress note audit entry
   ' CREATE TABLE clin_consult.progressnotes
   ' (
   '   pk serial NOT NULL,
   '   fk_consult integer,
   '   notes text,
   '   fk_section integer,
   '   fk_code bigint,
   '   problem text,
   '   fk_problem integer,
   '   fk_audit_action integer DEFAULT 1,
   '   linked_table regclass,
   '   fk_row integer,
   '   fk_audit_reason integer,
   '   deleted boolean DEFAULT false
   '--------------------------------------------------------------------
   audit = New CRow
   audit!fk_consult = cons!fk_consult
   audit!notes = sTaskDetails
   audit!fk_section = const.cSection_StaffTasks
   If audit_action = "staff task allocated" Then
      audit!fk_audit_action = 22 'staff task allocated
   End If
   If audit_action = "note on task" Then
      audit!fk_audit_action = 24
   Endif
   ' If Not IsNull(Task!fk_row) Then
   ' audit!linked_table = "documents.documents"
   ' audit!fk_row = Task!fk_row
   '  End If
   audit!linked_table = "clerical.tasks"
   audit!fk_row = Task!fk_task
   audit.Save("clin_consult.progressnotes", "fk_progressnote")

End

Public Function Audits_Update_Tasks() As Boolean
   '---------------------------------------------------------------------------
   'This sub inserts into progress notes all staff tasks allocated
   '---------------------------------------------------------------------------

   Dim audits As New Collection
   Dim new_notes As String
   Dim sql As String
   Dim tasks As Collection
   Dim Document As Collection
   Dim task As Collection
   Dim sTaskDetails As String
   Dim fk_last_task As Variant
   Dim audit As CRow

   Tasks = modDBConnect.exec_query_collection("Select * from clerical.vwtaskscomponentsandnotes where fk_patient = 17891 order by fk_patient, fk_task, fk_component")
   Print tasks
   For Each task In tasks
      If Not IsNull(Task!fk_patient) Then
         If fk_last_task <> Task!fk_task Then
            If Not IsNull(Task!fk_row) Then
               Document = modDBConnect.exec_query_first("Select * from documents.documents where pk=" & Task!fk_row)
            Endif
            sTaskDetails = modArchiveDocumentsDBI.Audit_Trail_Make_Progress_notes("staff task allocated", Document) & "<BR>"
            sTaskDetails &= "The task allocated to " & task!staff_allocated_title & " " & task!staff_allocated_wholename
            sTaskDetails &= " was:<BR>- " & task!details & "<BR>"
            If Not IsNull(task!staff_must_finalise_task_wholename) Then
               sTaskDetails &= " and the staff member allocated to finalise this was " & task!staff_must_finalise_task_title & " " & task!staff_must_finalise_task_wholename
            End If
            fk_last_task = Task!fk_task
            Print "Task Key:" & Str(Task!fk_task) & " patient:" & Task!fk_patient & " " & sTaskDetails
            Task_Audit_Notes_SAve(task, sTaskDetails, "staff task allocated")
         End If

      End If
      If Not IsNull(Task!fk_row) Then
         sTaskDetails = modArchiveDocumentsDBI.Audit_Trail_Make_Progress_notes("note on task", Document) & "<BR>"
      End If
      If Not IsNull(Task!note) Then
         sTaskDetails &= "The notes made by " & Task!staff_made_note_title & " " & Task!staff_made_note_wholename & " were - '" & Task!note & "'."
      Endif
      Print sTaskDetails
      Task_Audit_Notes_SAve(task, sTaskDetails, "note on task") 'saves the notes components as an audit
   Next

   modDBConnect.CommitTrans
   Return
   sql = ""
   audits = modDBConnect.exec_query_collection(sql)
   For Each audit In audits
      If audit!fk_audit_action = 28 Then
         new_notes = "Duplicate document"
         Print "fixing delete duplicate for " & audit!wholename
      End If
      If audit!fk_audit_action = 29 Then
         new_notes = "Preminary result"
         Print "fixing delete prelimary for " & audit!wholename
      End If
      new_notes &= " which was imported on " & Format(audit!imported_time, "dd/mm/yyyy") & "  was deleted - the original document was sent by " & audit!originator & " with the tag '" & audit!tag & "' "
      If Not IsNull(audit!tag_user) Then
         new_notes &= " and the user tag was '" & audit!tag_user & "'"
      Endif

      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": audit!pk_progressnote, "notes": new_notes])

   Next
   Return True
Catch
   Return False

End

Public Function Audit_update_recall_notes() As Boolean
   '------------------------------------------------------------------------------------------
   ' in Early october 2013 we implemented showing audits in the progress notes
   ' It became clear that the text we have added for all previous audit trails was inadequate
   ' This subroutine fixes this but reading the row in the table audited, extracting the
   ' subject e.g in Recalls this is the recall reason and updating the audit entry so that
   ' it now makes sense
   ' All subsequent audit trails will now incorporate a more appropriate note.
   ' This includes update for recalls sent by the system (lu_audit_action=18)
   ' back porting this to an address could be inaccurate, they may have moved since.
   ' -----------------------------------------------------------------------------------------

   Dim audits As New Collection
   Dim audit As Collection
   Dim icounter As Integer
   Dim sql As String
   Dim auditnotes As String
   Dim R As Result

   sql = ""
   "SELECT "
   " vwprogressnotes.linked_table,"
   " vwProgressNotes.consult_date,"
   "  vwpatients.wholename,"
   " vwrecalls.reason, "
   " vwrecalls.due, "
   " vwrecalls.urgency, "
   "  vwprogressnotes.fk_row, "
   "  vwrecalls.fk_patient, "
   "  vwprogressnotes.pk_progressnote, "
   "  vwprogressnotes.section, "
   "  vwprogressnotes.problem, "
   "  vwprogressnotes.notes, "
   "  vwprogressnotes.summary, "
   "  vwprogressnotes.fk_row,"
   "  vwprogressnotes.audit_action,"
   " vwProgressnotes.fk_audit_action "
   " "
   "FROM "
   "  clin_consult.vwprogressnotes, "
   "  clin_recalls.vwrecalls,"
   "  contacts.vwPatients "
   "WHERE "
   "  vwprogressnotes.fk_row = vwrecalls.pk_recall "
   "  and "
   "  vwProgressnotes.fk_patient=vwPatients.fk_patient "
   "   and linked_table = 'clin_recalls.recalls'::regclass"
   "   and( fk_audit_action <> 1 and fk_audit_action <> 2) "
   audits = modDBConnect.exec_query_collection(sql)

   For Each audit In audits
      Print Str(icounter) & " updating notes for " & audit!wholename & " ... " & audit!reason
      If audit!fk_audit_action = 18 Then  'letters sent by clerical
         auditnotes = "Recall reminder for " & audit!reason & " due on " & Format(audit!due, "dd/mm/yyyy") & " [" & audit!urgency & "] was actioned. "
         auditnotes &= "A letter was sent "
         R = modDBConnect.exec_query("Select * from contacts.vwPatients where fk_patient=" & audit!fk_patient)
         If R.count Then
            auditnotes &= "to " & Trim(R!street1 & " " & R!street2) & " " & R!town & " " & R!postcode
         Else
            Print
         Endif
      Else
         auditnotes = audit!reason & " - " & audit!notes
      Endif
      modDBConnect.update("clin_consult.progressnotes", Null, ["pk": audit!pk_progressnote, "notes": auditnotes])
   Next
   Return True
   ' Return True'/ Catch
   '  Return False

End

Public Sub Button1_Click_Clean_occupations()
   'clean up my occupations imported from pracsoft - many aAudit of Recalls - 'reminder sent'
   'do not use without checking and having good reason the backend structure has changed

   Dim R As Result
   Dim sql As String
   Dim R1 As Result
   Dim occupational_history As CRow
   Dim OC As Collection
   Dim fk_occupation As Variant
   Dim patients As Collection
   Dim patient As Collection
   Dim sMsg As String
   Dim currentconsult As CConsult
   Dim x As Integer

   patients = modDBConnect.exec_query_collection("Select * From contacts.vwPatients where fk_occupation > 0")
   'find all the patients who have an occupation in the data_persons table
   If patients.count Then
      For Each patient In patients
         If patient!age_numeric < 18 Then
            sql = "Update contacts.data_persons set fk_occupation = null where pk = " & patient!fk_person
            modDBConnect.exec_query(sql)
            modDBConnect.CommitTrans()
         Else
            sql = "select * from clin_history.vwOccupationalHistory where fk_patient = " & patient!fk_patient & " AND  fk_occupation =" & patient!fk_occupation
            R1 = modDBConnect.exec_query(sql)
            If R1.count = 0 Then  'not entered via easyGP
               'fix the crap ones
               If patient!fk_occupation = 741 Or patient!fk_occupation = 119 Or patient!fk_occupation = 102 Or patient!fk_occupation = 401 Or patient!fk_occupation = 374 Or patient!fk_occupation = 124 Or patient!fk_occupation = 146 Or patient!fk_occupation = 124 Then
                  sql = "Update contacts.data_persons set fk_occupation = null where pk = " & patient!fk_person
                  modDBConnect.exec_query(sql)
                  modDBConnect.CommitTrans()
               Endif
            Endif
         End If
      Next
      'now get what is left
      patients = modDBConnect.exec_query_collection("Select * From contacts.vwPatients where fk_occupation > 0")
      For Each patient In patients
         '  Message.Info(patient!wholename)
         Print patient!wholename
         'for each of these, check if it exists in the occupational history table
         sql = "select * from clin_history.vwOccupationalHistory where fk_patient = " & patient!fk_patient & " AND  fk_occupation =" & patient!fk_occupation
         R1 = modDBConnect.exec_query(sql)
         'no records, this must have been an imported occupation

         If R1.count = 0 Then                                                   'occupation in persons table not in occupational history table
            OC = modCommonDBI.Occupation_Get(Trim(patient!occupation))         'check if occupation is in the database
            If Not IsNull(OC) Then                                             'if it is retrieive the key
               fk_occupation = OC!pk
            Else
               smsg = "The occupation:\n\n " & Trim(R!occupation) & "\n\nwas not found in the database.\n\n"
               "Please check the spelling and if ok confirm you wish to add this occupation to the database.\n\n"
               "Note also that this occupation will be registered as the current and main occupation. You can "
               "always go back and change any  of this in the occupations module."
               If Message.Question(sMsg, "Yes - Add Occupation", "Cancel") = 2 Then
                  Message.info("The program will now halt")
                  Quit
                  Return
               Else
                  fk_occupation = modCommonDBI.Occupation_Save(Lower(Trim(patient!occuption))) 'should never happen
               End If
            End If
            'Now insert into the clin_history.occupational_history table
            currentconsult = New CConsult(patient, const.ConsultType_NotesPatientNotPresent)
            modOccupationalHistoryDBI.Patient_Occupations_Mark_NotCurrentOrMain(currentconsult)
            '--------------------------------------------------------------------------
            'Now save the new occupation for this patient
            'Bizaare as it may seem the occupation is kept in two places. argue with me
            'and you can then fix the code base (historical)
            '--------------------------------------------------------------------------
            sMsg = "New occupation noted:" & modStrings.Capitalise_Words_In_String(Trim(patient!occupation))
            occupational_history = New CRow
            occupational_history!fk_occupation = fk_occupation
            occupational_history!fk_consult = currentconsult.GetPK()
            occupational_history!current = True
            occupational_history!main_occupation = True
            occupational_history!fk_progressnote = modConsultDBI.ProgressNote_Save(currentconsult, sMsg, const.cSection_OccupationalHistory, -1, "occupations", 0, False)
            occupational_history.Save("clin_history.occupational_history", "fk_occupational_history")
            modDBConnect.CommitTrans
            Inc x
            '    If x = 5 Then Break
         Endif
      Next
   Endif

   Message.Info("The changes were committed")

End

Public Sub Fix_Tasks_Components()
   'put in for RT (and maybe horst) when bug in FInbox was causing a task to be generate
   'when enter key hit on txtuserObservationName

   Dim R As Result

   R = modDBConnect.exec_query("select * from  clerical.task_components where details = 'Make Appointment'")
   If R.count Then
      For Each R
         modDBConnect.exec_query("update clerical.tasks set deleted = True where pk=" & R!fk_task)
         modDBConnect.exec_query("update clerical.task_components set deleted = true where pk= " & R!pk)
      Next
   Endif
   modDBConnect.CommitTrans()

End

Public Sub Form_Resize()

   Resize_Side_Bar

End

Public Sub Notify(its_us As Boolean, param As String)

   Log.DataMsg("HEARTBEAT")
   Debug Now(); " HEARTBEAT"

End

Public Sub rt_fix_vaccination_imports()
   'first fix the errors in the original import where the summary was somehow set to social history
   'have changed the view to include deleted past history as this needs to be done as well

   Dim sql As String
   Dim Vaccinations As Collection
   Dim VAX As Collection
   Dim existing_pn As Collection
   Dim x As Integer
   Dim vaccination_item As CRow
   Dim progressnote As CRow
   Dim last_fk_consult As Integer
   Dim issues As String

   sql = ""
   "select "
   "   fk_consult,"
   "   vwVaccinesGiven.fk_vaccination as pk_vaccination,"
   "   vwVaccinesGiven.fk_progressnote, "
   "   vwVaccinesGiven.brand,"
   "   consult.consult_date,"
   "   consult.fk_type,"
   "   lu_consult_type.type,"
   "   consult.summary,"
   "   vwPatients.wholename"
   "   from clin_vaccination.vwVaccinesGiven"
   "         join clin_consult.consult on consult.pk = vwVaccinesGiven.fk_consult"
   "         join contacts.vwPatients on vwPatients.fk_patient = consult.fk_patient"
   "         join clin_consult.lu_consult_type on lu_consult_type.pk = consult.fk_type"
   "   where vwVaccinesGiven.fk_progressnote = 0 order by fk_consult ASC"
   Vaccinations = modDBConnect.exec_query_collection(sql)
   x = 1
   For Each VAX In Vaccinations
      modDBConnect.update("clin_consult.consult", Null, ["pk": VAX!fk_consult, "summary": "Vaccinations Imported"])
      If last_fk_consult <> VAX!fk_consult Then                                                 'if importing more than 1 recreational drug will have the same fk_consult
         ProgressNote = New CRow
         ProgressNote!notes = "Imported from legacy database vaccinations"
         ProgressNote!fk_audit_action = const.cAuditAction_LegacyDataNotProgressNote    'is imported legacy data, don't show in progress note
         ProgressNote!fk_consult = VAX!fk_consult
         ProgressNote!fk_section = const.cSection_Vaccination
         ProgressNote!problem = "Vaccination"
         ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
      End If
      modDBConnect.update("clin_vaccination.vaccinations", Null, ["pk": VAX!pk_vaccination, "fk_progressnote": progressnote!fk_progressnote])
      last_fk_consult = VAX!fk_consult
      Inc x
      Print x
      ' If x = 18 Then
      '    Break
      ' Endif
   Next
   modDBConnect.CommitTrans

End

Public Function ProgressNote_Html(FH As Collection) As CTemplate
   '------------------------------------------------------------
   'Generates the progress note html for the family history item
   '------------------------------------------------------------

   Dim sString As String

   Dim templ As CTemplate

   templ = New CTemplate(modHTML.familyhistory_progressnotes_structured_html)
   sSTring = FH!relationship
   If Not IsNull(FH!name) Then
      sString &= " (" & modUtil.Ucase_Word_First_Letter(FH!name) & ")"
   Endif
   templ.Subst("relationship", sstring)
   sString = FH!condition
   If FH!diagnosis_certain = True Then
      sstring &= " - diagnosis certain"
   Else
      sSTring &= " - diagnosis uncertain"
   Endif
   If IsNull(FH!term) Then
      sString = "[Not coded]"
   Else
      sSTring &= " [" & FH!term & " (" & FH!code & ")]"
   End If
   If Not IsNull(FH!notes) Then
      sstring &= " " & modUtil.Ucase_Word_First_Letter(FH!notes)
   Endif
   templ.Subst("condition", sstring)
   If Not IsNull(FH!age_of_onset) Then
      sstring = FH!age_of_onset
   Else
      sstring = "?"
   Endif
   Templ.Subst("age-onset", sstring)
   If FH!cause_of_death = True Then
      sstring = "Yes"
   Else
      sstring = "No"
      If FH!contributed_to_death = True Then
         sstring &= " but contributed to death"
      End If
   Endif
   templ.Subst("caused-death", sSTring)
   If Not IsNull(FH!age_of_death) Then
      templ.Subst("age-death", FH!age_of_death)
   Else
      templ.Subst("age-death", "unknown")
   Endif
   Return templ

End

Public Sub rt_fix_fh_conditions_have_fk_consult_no_fk_progressnote()
   'put progress note into clin_history.family_conditions where have fk_consult
   'even though may have been subsequently deleted, needed for data integrity

   Dim sql As String
   Dim missing_keys As Collection
   Dim missing_key As Collection
   Dim a_consult As Collection
   Dim fk_person As Integer
   Dim existing_fk_consult As Integer
   Dim sql_update As String
   Dim R As Result
   Dim new_fk_consult As Integer
   Dim x As Integer
   Dim last_fk_patient As Variant
   Dim fk_first_consult As Integer
   Dim sProgressNote As String
   Dim progressnote As CRow

   sql = ""
   "select  "
   "vwPatients.wholename, family_links.fk_patient,"
   " clin_history.family_conditions.*,"
   " family_members.name,family_members.age_of_death, lu_family_relationships.relationship,"
   " generic_terms.term, generic_terms.code "
   " from clin_history.family_conditions "
   "   left join clin_history.family_links ON family_links.fk_member = family_conditions.fk_member"
   "   left join clin_history.family_members on family_links.fk_member = family_members.pk"
   "   left join common.lu_family_relationships on lu_family_relationships.pk = family_members.fk_relationship"
   "   LEFT JOIN coding.generic_terms ON family_conditions.fk_code = generic_terms.code"
   "   left join contacts.vwPatients on vwPatients.fk_patient = family_links.fk_patient"
   "    where family_conditions.fk_progressnote is null and family_conditions.fk_consult is not null"
   ""
   missing_keys = modDBConnect.exec_query_collection(sql)
   Print missing_keys.Count
   'all the records in clin_history.family_conditions missing a fk_consult and fk_progressnote ~223
   For Each missing_key In missing_keys
      sProgressNote = ProgressNote_Html(missing_key).GetData()
      progressnote = New CRow                                        'save the data
      ProgressNote!notes = sProgressNote
      ProgressNote!fk_audit_action = const.cAuditAction_LegacyDataNotProgressNote
      ProgressNote!fk_consult = missing_key!fk_consult
      ProgressNote!fk_section = const.cSection_FamilyHistory
      ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
      modDBConnect.update("clin_history.family_conditions", Null, ["pk": missing_key!pk, "fk_progressnote": ProgressNote!fk_progressnote])
      Inc x
   Next
   modDBConnect.CommitTrans

End

Public Sub rt_fix_fh_conditions_no_consult_or_progressNotes()
   ' fixes import bugs in clin_history.family_conditions where fk_consult and fk_progressnote are null
   ' by looking up the first fk_consult for the patient and attributing the import to that date
   ' then making up what would have been the import progress notes
   ' in my db ~223 rocords

   Dim sql As String
   Dim missing_keys As Collection
   Dim missing_key As Collection
   Dim a_consult As Collection
   Dim fk_person As Integer
   Dim existing_fk_consult As Integer
   Dim sql_update As String
   Dim R As Result
   Dim new_fk_consult As Integer
   Dim x As Integer
   Dim last_fk_patient As Variant
   Dim fk_first_consult As Integer
   Dim sProgressNote As String
   Dim progressnote As CRow

   sql = ""
   "select  "
   "vwPatients.wholename, family_links.fk_patient,"
   " clin_history.family_conditions.*,"
   " family_members.name,family_members.age_of_death, lu_family_relationships.relationship,"
   " generic_terms.term, generic_terms.code "
   " from clin_history.family_conditions "
   "   left join clin_history.family_links ON family_links.fk_member = family_conditions.fk_member"
   "   left join clin_history.family_members on family_links.fk_member = family_members.pk"
   "   left join common.lu_family_relationships on lu_family_relationships.pk = family_members.fk_relationship"
   "   LEFT JOIN coding.generic_terms ON family_conditions.fk_code = generic_terms.code"
   "   left join contacts.vwPatients on vwPatients.fk_patient = family_links.fk_patient"
   "    where family_conditions.fk_progressnote is null and family_conditions.fk_consult is null;"
   missing_keys = modDBConnect.exec_query_collection(sql)
   Print missing_keys.Count
   'all the records in clin_history.family_conditions missing a fk_consult and fk_progressnote ~223
   For Each missing_key In missing_keys
      sProgressNote = ProgressNote_Html(missing_key).GetData()
      fk_first_consult = get_first_fk_consult(missing_key!fk_patient)
      progressnote = New CRow                                        'save the data
      ProgressNote!notes = sProgressNote
      ProgressNote!fk_audit_action = const.cAuditAction_LegacyDataNotProgressNote
      ProgressNote!fk_consult = fk_first_consult
      ProgressNote!fk_section = const.cSection_FamilyHistory
      ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
      modDBConnect.update("clin_history.family_conditions", Null, ["pk": missing_key!pk, "fk_consult": fk_first_consult, "fk_progressnote": ProgressNote!fk_progressnote])
      Inc x
   Next
   modDBConnect.CommitTrans

End

Public Function get_first_fk_consult(fk_patient As Variant) As Variant
   'used this whilst fixing errors in my imported family history

   Dim sql_first_consult_key As Variant 'first ever consult key for the patient in easygp

   sql_first_consult_key = ""
   "select vwProgressNotes.fk_consult, vwPatients.wholename"
   " from clin_consult.vwProgressNotes "
   "      JOIN contacts.vwPatients on vwPatients.fk_patient = vwProgressnotes.fk_patient"
   " where vwProgressNotes.fk_patient = "
   sql_first_consult_key &= fk_patient & " order by consult_date ASC LIMIT 1"
   Print sql_first_consult_key
   Return modDBConnect.exec_query(sql_first_consult_key)!fk_consult

End

Public Sub rt_fix_fh_no_fk_consult()
   'puts an fk_consult back into clin_history.family_members where it is null
   'probably won't use this, rely on clin_history.family_condition only

   ' Dim sql As String
   ' Dim missing_fk_consults As Collection
   ' Dim a_consult As Collection
   ' Dim fk_person As Integer
   ' Dim existing_fk_consult As Integer
   ' Dim sql_update As String
   ' Dim R As Result
   ' Dim new_fk_consult As Integer
   ' Dim x As Integer
   ' Dim last_fk_patient As Variant
   '
   ' sql = ""
   ' "select  vwPatients.wholename, "
   ' "  family_links.pk, family_links.fk_member, family_links.fk_patient, family_links.deleted,"
   ' "  family_members.name, family_members.fk_consult,family_members.deleted"
   ' " from"
   ' "    clin_history.family_links"
   ' "    join contacts.vwPatients on family_links.fk_patient = vwPatients.fk_patient "
   ' "    left join clin_history.family_members on family_members.pk = family_links.fk_member "
   ' "   order by fk_patient, fk_consult "
   ' '"     where family_members.fk_consult is null and fk_patient = 177"
   ' missing_fk_consults = modDBConnect.exec_query_collection(sql)
   ' For Each a_consult In missing_fk_consults
   '    If a_consult!fk_patient <> last_fk_patient Then
   '       new_fk_consult = 0
   '       last_fk_patient = a_consult!fk_patient
   '    Endif
   '    If IsNull(a_consult!fk_consult) Then
   '       Print a_consult!wholename
   '       If new_fk_consult <> 0 Then
   '          modDBConnect.update("clin_history.family_members", Null, ["pk": a_consult!fk_member, "fk_consult": new_fk_consult])
   '       Endif
   '    Else
   '       new_fk_consult = a_consult!fk_consult
   '    Endif
   '    Inc x
   '    ' If x > 1310 Then Break
   ' Next
   ' modDBConnect.CommitTrans
   '
End

Public Sub rt_fix_occupational_history_no_progress_note_Key()
   'fixes previous bugs where occupation saved with no progres note

   Dim sql As String
   Dim occupational_histories As Collection
   Dim history As Collection
   Dim sProgressNote As String
   Dim progressnote As CRow
   Dim x As Integer
   Dim fk_consult As Integer
   Dim pk_progressnote As Integer

   sql = ""
   "select * from clin_history.vwOccupationalHistory where  fk_progressnote is null"
   occupational_histories = modDBConnect.exec_query_collection(sql)
   For Each history In occupational_histories
      If IsNull(history!occupation) Then
         Print
      End If
      sProgressNote = "New occupation noted: " & history!occupation
      Print x, sProgressNote
      progressnote = New CRow                                              'save the data
      ProgressNote!notes = sProgressNote
      ProgressNote!fk_audit_action = const.cAuditAction_Insert
      ProgressNote!fk_consult = history!fk_consult
      ProgressNote!fk_section = const.cSection_OccupationalHistory
      ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
      modDBConnect.update("clin_history.occupational_history", Null, ["pk": history!fk_occupational_history, "fk_progressnote": ProgressNote!fk_progressnote])
      Inc x
   Next
   modDBConnect.CommitTrans()

End

Public Sub rt_fix_family_history_no_pk_progressnote()
   'Puts in a progress note for clin_history.family_conditions
   'where it wasn't put in when imported

   Dim sql As String
   Dim family_history As Collection
   Dim All_Histories As Collection
   Dim fk_last_patient As Integer
   Dim history As Collection
   Dim fk_last_memebr As Integer
   Dim sProgressNote As String
   Dim progressnote As CRow
   Dim x As Integer
   Dim fk_consult As Integer
   Dim pk_progressnote As Integer

   sql = ""
   SQL = " select  vwPatients.wholename, clin_history.vwFamilyhistory.*"
   "    from clin_history.vwFamilyHistory"
   "    join contacts.vwPatients on vwpatients.fk_patient = vwFamilyhistory.fk_patient"
   "    where vwFamilyhistory.fk_progressnote is null and vwFamilyhistory.fk_consult_condition is not null"
   "    order by vwFamilyHistory.fk_patient " ' , vwFamilyHistory.fk_member;"
   All_Histories = modDBConnect.exec_query_collection(sql)

   For Each history In All_Histories

      If fk_last_patient <> history!fk_patient And fk_last_patient <> 0 Then  'changing patient
         modDBConnect.update("clin_consult.progressnotes", Null, ["pk": pk_progressnote, "notes": sProgressNote])
         sProgressNote = ""
         '   If x = 13 Then Break
      End If
      If Len(sProgressNote) = 0 Then
         Print "starting", x, history!wholename
         fk_last_patient = history!fk_patient
         fk_consult = history!fk_consult_condition
         progressnote = New CRow                                              'save the data
         ProgressNote!notes = "placeholder "                                  'save the note, but nothing there yet
         ProgressNote!fk_audit_action = const.cAuditAction_LegacyDataNotProgressNote
         ProgressNote!fk_consult = fk_consult
         ProgressNote!fk_section = const.cSection_FamilyHistory
         ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
         Print "saved pn key was ", ProgressNote!fk_progressnote
         pk_progressnote = ProgressNote!fk_progressnote
      End If
      sProgressNote &= ProgressNote_Html(history).GetData()
      modDBConnect.update("clin_history.family_conditions", Null, ["pk": history!fk_condition, "fk_progressnote": pk_progressnote])
      Print "added history..." & Str(x), " for ", history!wholename
      Inc x

   Next
   modDBConnect.update("clin_consult.progressnotes", Null, ["pk": pk_progressnote, "notes": sProgressNote]) 'do the last person
   modDBConnect.CommitTrans

End

Public Sub rt_fix_social_history_no_pk_progressnote()
   'When social histories were imported, no fk_progress note created
   'when finalising constraints had to fix this

   Dim sql As String
   Dim Social_Histories As Collection
   Dim SOCIAL_HISTORY As Collection
   Dim x As Integer
   Dim progressnote As CRow
   Dim last_fk_consult As Integer

   sql = ""
   ""
   "select social_history.history,"
   "       social_history.pk as pk_social_history,"
   "       consult.pk as fk_consult "
   "from   clin_history.social_history"
   "       JOIN clin_consult.consult on consult.pk = social_history.fk_consult"
   "       where social_history.fk_progressnote = 0"
   "       order by fk_consult "
   Social_Histories = modDBConnect.exec_query_collection(sql)
   x = 1
   For Each SOCIAL_HISTORY In Social_Histories
      '  modDBConnect.update("clin_consult.consult", Null, ["pk": RECALL!fk_consult, "summary": "Recalls Imported"])
      If last_fk_consult <> SOCIAL_HISTORY!fk_consult Then
         ProgressNote = New CRow
         If Not IsNull(SOCIAL_HISTORY!history) Then
            ProgressNote!notes = "<B>Social History (Imported)</B><BR>" & SOCIAL_HISTORY!history
         Else
            ProgressNote!notes = "<B>Social History</B><BR>Details of responsible person were added"
         End If
         Print ProgressNote!notes
         ProgressNote!fk_audit_action = const.cAuditAction_Insert
         ProgressNote!fk_consult = SOCIAL_HISTORY!fk_consult
         ProgressNote!fk_section = const.cSection_SocialHistory
         ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
      End If
      modDBConnect.update("clin_history.social_history", Null, ["pk": SOCIAL_HISTORY!pk_social_history, "fk_progressnote": progressnote!fk_progressnote])
      last_fk_consult = SOCIAL_HISTORY!fk_consult
      Inc x
      Print x
      ' If x = 2 Then
      '    Break
      ' Endif
   Next
   modDBConnect.CommitTrans

End

Public Sub rt_fix_recalls_no_pk_progressnote()
   'code bug no progress notes being inserted BY FDacc when it logged recalls fk_progressnote of 0
   'have changed the view to include deleted past history as this needs to be done as well

   Dim sql As String
   Dim Recalls As Collection
   Dim RECALL As Collection
   Dim x As Integer
   Dim progressnote As CRow
   Dim last_fk_consult As Integer

   sql = "select "
   "     vwPatients.wholename,"
   "     vwrecalls.*"
   " from  clin_recalls.vwrecalls "
   "      join clin_consult.consult on vwREcalls.fk_consult = consult.pk "
   "     join contacts.vwPatients on vwPatients.fk_patient = consult.fk_patient "
   " where vwrecalls.fk_progressnote = 0;"
   Recalls = modDBConnect.exec_query_collection(sql)
   x = 1
   For Each RECALL In Recalls
      '  modDBConnect.update("clin_consult.consult", Null, ["pk": RECALL!fk_consult, "summary": "Recalls Imported"])
      If last_fk_consult <> RECALL!fk_consult Then
         ProgressNote = New CRow
         ProgressNote!notes = "Recall logged for " & RECALL!reason & " on " & Format(RECALL!due, "dd/mm/yyyy")
         ProgressNote!fk_audit_action = const.cAuditAction_Edit
         ProgressNote!fk_consult = RECALL!fk_consult
         ProgressNote!fk_section = const.cSection_Recalls
         '  ProgressNote!problem = ""
         ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
      End If
      modDBConnect.update("clin_recalls.recalls", Null, ["pk": RECALL!pk_recall, "fk_progressnote": progressnote!fk_progressnote])
      last_fk_consult = RECALL!fk_consult
      Inc x
      Print x
      ' If x = 2 Then
      '    Break
      ' Endif
   Next
   modDBConnect.CommitTrans

End

Public Sub rt_fix_medical_certificates()
   'insert progress notes for those created before fk_progressnote existed in the table
   'make up the progress notes from existing data
   ' --Medical certificate
   ' -- - dated 25/08/2015 for sore throat [Sore throat (R21005)]
   ' -- - is unfit for work from 24/08/2015 to 24/08/2015
   '

   Dim sql As String
   Dim Medical_Certificates As Collection
   Dim CERT As Collection
   Dim existing_pn As Collection
   Dim x As Integer
   Dim progressnote As CRow
   Dim last_fk_consult As Integer
   Dim issues As String
   Dim notes As String

   sql = ""
   "select "
   "   fk_consult,"
   "   vwMedicalCertificates.pk_medicalcertificate,"
   "   vwMedicalCertificates.fk_progressnote,"
   "   vwMedicalCertificates.fitness,"
   "   vwMedicalCertificates.reason,"
   "   vwMedicalCertificates.from_date,"
   "   vwMedicalCertificates.to_date,"
   "   vwMedicalCertificates.certificate_date,"
   "   vwMedicalCertificates.fk_code,"
   "   vwMedicalCertificates.term, "
   "   consult.consult_date,"
   "   consult.fk_type,"
   "   consult.fk_patient,"
   "   lu_consult_type.type,"
   "   consult.summary,"
   "   vwPatients.wholename"
   "   from clin_certificates.vwMedicalCertificates"
   "         join clin_consult.consult on consult.pk = vwMedicalCertificates.fk_consult"
   "         join contacts.vwPatients on vwPatients.fk_patient = consult.fk_patient"
   "         join clin_consult.lu_consult_type on lu_consult_type.pk = consult.fk_type"
   "    where vwMedicalCertificates.fk_progressnote = 0 order by fk_consult, fk_patient ASC;"
   Medical_Certificates = modDBConnect.exec_query_collection(sql)
   x = 1
   For Each CERT In Medical_Certificates
      If last_fk_consult <> CERT!fk_consult Then                                                 'if importing more than 1 recreational drug will have the same fk_consult
         ProgressNote = New CRow
         notes = "<P><B>Medical Certificate</B></P>"
         notes &= "- dated " & Format(CERT!from_date, "dd/mm/yyyy")
         notes &= " for " & CERT!reason & " [" & CERT!term & "(" & CERT!fk_code & ")]" & "<BR>"
         notes &= " - is " & CERT!fitness & " for work from " & Format(CERT!from_date, "dd/mm/yyyy")
         If Not IsNull(CERT!to_date) Then
            Notes &= " to " & CERT!to_date
         Endif
         Print notes
         ProgressNote!notes = notes
         ProgressNote!fk_audit_action = const.cAuditAction_Insert
         ProgressNote!fk_consult = CERT!fk_consult
         ProgressNote!fk_section = const.cSection_MedicalCertificates
         ProgressNote!problem = "Medical Certificate"
         ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
      End If
      modDBConnect.update("clin_certificates.medical_certificates", Null, ["pk": CERT!pk_medicalcertificate, "fk_progressnote": progressnote!fk_progressnote])
      last_fk_consult = CERT!fk_consult
      Inc x
      Print x
      ' If x = 5 Then
      '    Break
      ' Endif
   Next
   modDBConnect.CommitTrans

End

Public Sub rt_fix_documents()

   'fixes documents.documents where a fk_patient was set to 0
   Dim sql As String
   Dim documents As Collection

   sql = "select  * from documents.documents where fk_patient = null and deleted is false"

End

Public Sub rt_fix_past_history_imports()
   'first fix the errors in the original import where the summary was somehow set to social history
   'have changed the view to include deleted past history as this needs to be done as well

   Dim sql As String
   Dim PastHistory As Collection
   Dim PH As Collection
   Dim existing_pn As Collection
   Dim x As Integer
   Dim past_history_item As CRow
   Dim progressnote As CRow
   Dim last_fk_consult As Integer
   Dim issues As String

   sql = ""
   "select "
   "   fk_consult,"
   "   vwHealthIssues.pk_pasthistory,"
   "   vwHealthIssues.description,"
   "   consult.consult_date,"
   "   consult.fk_type,"
   "   consult.summary,"
   "   lu_consult_type.type,"
   "   vwPatients.wholename "
   " from clin_history.vwHealthIssues "
   "         join clin_consult.consult on consult.pk = vwHealthIssues.fk_consult"
   "         join contacts.vwPatients on vwPatients.fk_patient = consult.fk_patient"
   "         join clin_consult.lu_consult_type on lu_consult_type.pk = consult.fk_type "
   " where vwHealthIssues.fk_progressnote = 0 order by fk_consult asc"
   PastHistory = modDBConnect.exec_query_collection(sql)
   x = 1
   For Each PH In PastHistory
      modDBConnect.update("clin_consult.consult", Null, ["pk": PH!fk_consult, "summary": "Past History Imported"])
      If last_fk_consult <> PH!fk_consult Then                                                 'if importing more than 1 recreational drug will have the same fk_consult
         ProgressNote = New CRow
         ProgressNote!notes = "Imported from legacy database details for past history aka health issues"
         ProgressNote!fk_audit_action = const.cAuditAction_LegacyDataNotProgressNote    'is imported legacy data, don't show in progress note
         ProgressNote!fk_consult = PH!fk_consult
         ' ProgressNote!linked_table = "clin_history.past_history"
         ' progressnote!fk_row = PH!pk_pasthistory
         ProgressNote!fk_section = const.cSection_PastHistory
         ProgressNote!problem = "Past History"
         ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
      End If
      modDBConnect.update("clin_history.past_history", Null, ["pk": PH!pk_pasthistory, "fk_progressnote": progressnote!fk_progressnote])
      last_fk_consult = PH!fk_consult
      Inc x
      Print x
      ' If x = 11 Then
      '    Break
      '  Endif
   Next
   modDBConnect.CommitTrans

End

Public Sub RT_Fix_imported_habits()

   'adds a progress note, needed as the db evolved each habit has
   'an fk_progress note, these had none as the field didn't exist
   Dim sql As String
   Dim imported_stuff As Collection
   Dim Impstuff As Collection
   Dim existing_pn As Collection
   Dim x As Integer
   Dim recreational_drug As CRow
   Dim progressnote As CRow
   Dim last_fk_consult As Integer

   sql = ""
   "select "
   " recreational_drugs.pk as pk_recreational_drug, "
   "   fk_consult,"
   "   consult.fk_patient, "
   "   consult.consult_date,"
   "   consult.fk_type,"
   "   lu_consult_type.type,"
   "   vwPatients.wholename "
   "from clin_history.recreational_drugs "
   "         join clin_consult.consult on consult.pk = recreational_drugs.fk_consult"
   "         join contacts.vwPatients on vwPatients.fk_patient = consult.fk_patient"
   "         join clin_consult.lu_consult_type on lu_consult_type.pk = consult.fk_type "
   " where recreational_drugs.fk_progressnote = 0"
   imported_stuff = modDBConnect.exec_query_collection(sql)
   Print imported_stuff
   'Now make up a progress note
   Print "count of recreation missing pn=", imported_stuff.Count
   For Each Impstuff In imported_stuff                                                                  'all the recreational records with no progress notes
      If Impstuff!fk_type = 10 Or Impstuff!fk_type = 1 Then                                                                     '10 = imported legacy notes
         If last_fk_consult <> Impstuff!fk_consult Then                                                 'if importing more than 1 recreational drug will have the same fk_consult
            ' sql = " Select * From clin_consult.vwProgressNotes where fk_consult = " & Impstuff!fk_consult & " LIMIT 1"
            ' existing_pn = modDBConnect.exec_query_first(sql)
            ' If Not IsNull(existing_pn) Then
            '    If existing_pn!fk_consult <> last_fk_consult Then
            '       Print "have an existing pn"
            '    End If
            ' Endif
            '   Print Impstuff
            ProgressNote = New CRow
            ProgressNote!notes = "Imported from legacy database details for smoking and alcohol."
            ProgressNote!fk_audit_action = const.cAuditAction_LegacyDataNotProgressNote    'is imported legacy data, don't show in progress note
            ProgressNote!fk_consult = Impstuff!fk_consult
            ProgressNote!linked_table = "clin_history.recreational_drugs"
            progressnote!fk_row = Impstuff!pk_recreational_drug
            ProgressNote!fk_section = const.cSection_RecreationalDrugs
            ProgressNote!problem = "Recreational Drugs"
            ProgressNote.Save("clin_consult.progressnotes", "fk_progressnote")
         End If
         modDBConnect.update("clin_history.recreational_drugs", Null, ["pk": Impstuff!pk_recreational_drug, "fk_progressnote": progressnote!fk_progressnote])
         last_fk_consult = Impstuff!fk_consult
         Print x
         Inc x
         '  If x = 10 Then

         '    Break
         ' Endif
      End If
   Next
   modDBConnect.CommitTrans()

End
