' Gambas class file

' Copyright (C) 2008-2011 Dr. Richard Terry

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'----------------------------------------------------------------------
' PURPOSE      A simple manual BMI calculator
'----------------------------------------------------------------------
Private BMI As Variant
Private bExit As Boolean
Private height As Variant
Private weight As Variant

Public Sub Form_Open()
   
   Me.title = "Body Mass Index Utility"
   Me.Center
   
End

Public Sub Slider1_Change()
   '-----------------------------------------------------
   'Calculate what the weight would be if the BMI changes
   '-----------------------------------------------------
   
   If Bexit Then Return 
   txtAdjustedBMI.text = Format(Slider1.Value, "##.#")
   
   Try txtAdjustedweight.text = Format(Slider1.Value * height ^ 2, "###.#")
   If Not Error Then
      Calc_Normal_Range
   End If
Catch
   Print Error.Text 
   
End

Public Sub Calc_Normal_Range()
   
   Dim lowest As Variant
   Dim heighest As Variant
   
   lowest = Format(20 * height ^ 2, "##.#")
   heighest = Format(25 * height ^ 2, "###.#")
   
   Try txtIdeal.text = Format(20 * height ^ 2, "##.#") & " - " & Format(25 * height ^ 2, "###.#") & "Kg"
   If weight > 25 * height ^ 2 Then
      lblWeightGuide.text = "Overweight"
      txtweightGuide.text = Format(weight - 25 * height ^ 2, "###.#")
   Else If weight < 20 * height ^ 2 Then 
      lblWeightGuide.text = "Underweight" 
      txtweightGuide.text = Format(20 * height ^ 2 - weight, "##.#")
   Else
      lblWeightGuide.Visible = False   
      lblWeightRangeKg.Visible = False 
      txtweightGuide.Visible = False  
      Return 
   Endif
   lblWeightGuide.Visible = True   
   lblWeightRangeKg.Visible = True 
   txtweightGuide.Visible = True  
   
End

Public Sub EditArea_TxtBox_Change()
   
   Select Case Last.tag
      Case "height" 
         If Last.text = "" Then
            txtBMI.text = ""
            txtIdeal.text = ""
            lblWeightGuide.Visible = False   
            lblWeightRangeKg.Visible = False 
            txtweightGuide.Visible = False 
            txtAdjustedWeight.text = ""
            txtAdjustedBMI.text = ""
         Else   
            Try Calc_BMI
         End If   
      Case "weight"
         If Last.text = "" Then
            txtBMI.text = ""
            txtIdeal.text = ""
            lblWeightGuide.Visible = False   
            lblWeightRangeKg.Visible = False 
            txtweightGuide.Visible = False  
            txtAdjustedWeight.text = ""
            txtAdjustedBMI.text = ""
         Else   
            Try Calc_BMI
         End If   
         
   End Select
   
End

Public Sub Calc_BMI()
   
   height = Val(txtHeight.text) / 100
   weight = Val(txtweight.text)
   
   Try BMI = Format((weight / (height ^ 2)), "##.#")
   
   If Not Error Then
      bExit = True  
      txtBMI.text = BMI
      bexit = False 
      Slider1.Value = Val(txtBMI.text)
   Endif
Catch
   Print Error.Text
   
End

Public Sub tbEditArea_Click()
   
   Select Case Last.tag
      Case "clear"
         modEditAreaHelpers.EditArea_Clear(Vbox_EditArea) 
         lblWeightGuide.Visible = False   
         lblWeightRangeKg.Visible = False 
         txtweightGuide.Visible = False   
         bExit = False 
         txtHeight.SetFocus()
      Case "save" 
   End Select
   
End

Public Function EditArea_ExcludeKeys(keycode As Integer, tag As String) As Boolean
   '----------------------------------------------------------
   'PURPOSE       Restrict key presses for validation purposes
   'HOW IT WORKS  see routines names
   'FIXME         Ian would do this much simpler I'm sure
   '-----------------------------------------------------------
   
   Dim bKeyValid As Integer
   
   Select Case Last.Tag
      Case "height", "weight"
         bKeyValid = modUtil.AllowKeys(const.AllowKeys_NumbersDecimal, keycode)
   End Select
   Return bKeyValid
   
End

Public Sub EditArea_TxtBox_KeyPress()
   
   Dim bkeyvalid As Boolean
   '----------------------------------------------------
   'Each line may have a different set of key exclusions
   'so only keep valid keypresses
   '----------------------------------------------------
   bkeyvalid = EditArea_ExcludeKeys(key.code, Last.tag)
   
   If bkeyvalid = False Then
      Stop Event
      Return
   End If
   Select Case key.Code
      Case key.return, key.Tab
         Select Case Last.tag
            Case "height"
               txtweight.SetFocus() 
         End Select
   End Select
   
End

Public Sub EditArea_TxtBox_LostFocus()
   
   Last.BackGround = Color.rgb(255, 255, 255)
   
End

Public Sub EditArea_TxtBox_GotFocus()
   
   Last.BackGround = Color.rgb(95, 255, 175)
   
End
