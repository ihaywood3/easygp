.TH "easygp" "8" "October 2010" "Debian" "System Adminstration"
.SH "NAME"
easygp \- database administration

.SH "INTRODUCTION"

This manpage documents how to create and maintain a EasyGP
database.

Maintaining a database does require some limited command-line
work. This is not difficult, and often in practice the only way as the
EasyGP server system will be a separate server machine which may have no video card.

.SH "PLATFORM"

These instructions are written for Linux Ubuntu. Other Linux distros
and MacOS X will work fine but some of the shell commands will vary,
you will need to check the manual for your distro or ask an
expert. The main difference is in root access, on Ubuntu you
type "sudo" before each command, on most other systems you type "su"
at the start to get a root shell and then proceed without the "sudo".

In principle Windows could be used as a server but given the client
requires Linux it is unclear why anyone would ever want to do this.

.SH "PROMPT"

"$" below refers to your command-line prompt, type the letters after it but not the "$" itself.
Similarly "<something>" means something you need to substitute, like a local network address or a password, 
not the literal < and > themselves.

.SH "INSTALLATION"

.SS "Accessing the server"

 First you need to obtain the IP or domain name of the server. Second you need shell access to the server,
this is usually by opening a console and typing

$   ssh <your.server.ip.address>

.SS "Installing postgresql"

Postgresql version 8.4 or higher is required, all recent Linux systems will have this available.

$    sudo apt-get install postgresql postgresql-contrib

.SS "Download EasyGP"

If you are reading this file on the client computer, you need to install
the files on the server too. Use this command:

$    svn co svn://easygp.net.au/easygp/trunk/db/

Make sure the directory containing this README is the current directory.

.SS "Configure the server"

The main issue with configuring servers is getting the host access permissions right.
Many distros have settings that are far too conservative, others too liberal.

The file pg_hba.conf.example in this directory contains the settings I use, to copy across do

$    sudo cp pg_hba.conf.example /etc/postgresql/9.1/main/pg_hba.conf

Unfortunately the location of this file varies a lot. So for version 8.1 postgres it will
be elsewhere, as for on different distros.

You then need to restart the server for these settings to take effect.

$    sudo /etc/init.d/postgresql restart
    
.SS "Create the administrator login"

$    sudo su postgres -c "psql template1"

You are  now logged in as the postgres super-user (NB not
the same as the system super-user) and can enter commands at the postgresql prompt

Create the login to control the EasyGP installation. It must be
called "easygp", you don't get any choice at all. (You
can create other users later.)

$    create role easygp login createrole password '<your password>';

Also a group should be created for ordinary users. Note this MUST
be called "staff", again you don't get a choice here.

$    create role staff nologin admin easygp;


.SS "Create the database"

$    create database easygp owner easygp;

The name doesn't have to be "easygp", but it is strongly recommended
you stick to this name unless you really know
what you are doing. It does need to be owned by user
"easygp" in all cases. 
Various database options such as TABLESPACE can be added here if you know
what you are doing, see the PostgreSQL documentation at www.postgresql.org

.SS "Re-connect to the new database"

$    \\c easygp

.SS "Install the database"

$   \\i easygp.schema.sql

$   \\i easygp.data.sql

Each command will give a lot of output including warnings, but no errors.
If there are errors please cut and paste them into an e-mail and forward
to a developer (see the AUTHORS file)

.SS "Install a coding system"

EasyGP needs at least one disease coding system installed. Options are ICPC-2,
ICD-10, in the near future, FreeCodes. You can install more than one system.
Order is important, the last system installed is the 'preferred' system
that will be used first for searching for disease codes, usually this is
will be ICPC-2 or FreeCodes. 
    
.TP 1
ICD-10
     
    ICD-10 is owned by the WHO, there are few restrictions on its use and a copy is
    included with EasyGP, it can be installed with one command.
    It is very specific but not very convenient, so it is usually the 'backup'
    system with another one (ICPC-2 or FreeCodes) installed as the preferred system.
    
    $    \\i coding/icd10_import_gambas.sql

.TP 1
ICPC-2 Plus
    
    ICPC-2 Plus is a GP-centric coding system developed by the Family Medicine
    Research Centre at the University of Sydney. ICPC-2 Plus is proprietary,
    a licence must be purchased and a copy of the code files obtained.
    How this is done is up to the user, the EasyGP developers cannot provide
    copies of ICPC-2.
    
    This may mean unpacking a provided .ZIP file (at the shell prompt, use 
    "\q" to get out of postgres)
    
    $   unzip <the zip file>
    
    The unpacked files must be in the current directory (where this README file is), 
    so if the zip file puts them in a subdirectory, you need to copy them back.
    
    $   cp <the directory>/* .
    
    Finally you can run the provided script (now back in postgres)
    
    $   \\i coding/icpc2_import_gambas.sql
    
.TP 1
FreeCodes
    
    FreeCodes is a basic coding system developed by Ian Haywood, using a set
    of terms provided by Richard Terry and Malcolm Ireland, they are mapped to
    ICD10. It is also provided free with EasyGP.
    
    $    \\i coding/freecodes_import_gambas.sql


.SS "Installing drug database"

Currently only a standard drug database is supported, this is 
included in the existing SQL files.

.SS "Completion"

The process is complete, you can now use the client, which should display the 
setup wizard. You log on to the client using the username and password of the 
administrator account created above. 

.SH "ONLINE SERVICES"

Online services such as Medicare Online, Medicare HI Service and the PCEHR are
accessed via a daemon with runs on the server only, written in python. It
is available in trunk/db/python in the svn repository, or /usr/share/easygp/python
if you have installed the packages.

The daemon should be run without arguments.

$  python trunk/db/python/daemon.py

It will run continuously in the background. It is a number of features for 
different types of online services as explained below. You will need to configure the services you require
before running the daemon,

.SS "Common options"

The daemon is configured by editing the config file found at /etc/easygp.conf.

The following options are common to all functions. Most except the first 3 can be left
as their defaults and don't need to be specified.

.TP 1
password

The password to log on to the local database.

.TP 1
db_user

The username to log on to the database (defaults to the current UNIX username)

.TP 1
tasks_user

If the daemon encounters a serious error it will create a user task for this user.
Defaults to the same user as the one logged in to the database.

.TP 1
host

The host (server) the database is running on, defaults to the same as the daemon

.TP 1
logfile

The server log, defaults to /var/log/easygp.log

.TP 1
pidfile

The file to write the daemon PID, defaults /var/run/easygp-python.pid

.TP 1
syslog

set to true to the syslog.

.TP 1
drivers

The directory where the proprietary drivers are, default /usr/lib/easygp/drivers

.TP 1
keydir

The directory where the cryptographic key files are. The names of individual
keyfiles are fixed: see below. Defaults to /usr/lib/easygp/keys


.SS "Health Identifers Service"

To use the HI service you need to obtain the closed-source driver 
.I hi_service.py
and copy it to 
.I /usr/lib/easygp/drivers

To obtain a driver ask Ian Haywood <ian@haywood.id.au>.

Medicare will provide you will a set of crypto keys in two files:
fac_encrypt.p12 and fac_sign.p12. fac_sign.p12 is the only one used.

To extract the private key do

$  openssl pkcs12 -in fac_sign.p12 -nodes -nocerts -out hi_service.key

To extract the public certificate do

$  openssl pkcs12 -in fac_sign.p12 -nodes -nokeys -out hi_service.pem

These two files
.I hi_service.key
and
.I hi_service.pem
, with those exact names, must then be installed at 
.I /usr/lib/easygp/keys
.
Make sure the files are readable by whatever user the daemon is running as. 

The client must be configured in that each user must have their HPI-I
set in the Staff screen, and the clinics HPI-O must be recorded in the
Contacts screen.

You can now download IHIs for patients by setting their "PCEHR Consent"
status to 'Consented' in the Patients screen. The daemon works in the background,
if an IHI is found it will appear on screen in the "Health Idenitifer" textbox
and the "PCEHR Consent" status will become "Active/Veritied"  

.SS "E-prescriptions"

Onl the MediSecure prescription repository is supported. You must ask MediSecure
for a copy of their Java client. It does run on Linux, lauch with the command

$   cd MediSecureAdapter; java -jar medisecure-adapter.jar

You also need a closed-source driver, 
.I medisecure.py
, again mail Ian Haywood
<ian@haywood.id.au>, and install at
.I /usr/lib/easygp/drivers

Two options are available in 
.I easygp.conf

.TP 1
medisecure

the host running the MediSecure client. Defaults to the localhost

.TP 1
medisecure_location_id

the Location ID of the crypto certificate loaded into the MediSecure adapter (see MediSecure's
documentation for further details). 

.SS "Troubleshooting"

Look in the log at /var/log/easygp.log to see what the daemon is doing. Also check the Audit logs
for individual patients where you have attempted to download an IHI.

You can also run the daemon from a console using the '-d' option to get more information
about what might be going wrong.

.SH "MAINTAINING THE DATABASE"


.SS "Coding System"

If you are using ICPC-2 new versions are published every few months. They 
need to be unpacked into the same db/ directory as for installation, and then
(in postgres) run the update script.

$   \i coding/icpc2_update.sql


.SS "Drug Update"

Every month an update file is provided of new PBS drugs and some new private drugs
contributed by users. E-mail Ian Haywood <ian@haywood.id.au> to be put on the distribution
list. The file provided is an LZMA compressed sql file. Download it and as the "easygp" user
do

$  lzcat pbs-XX.sql.lzma | psql easygp

The script will take some time to run and should produce no output. 

.SS "New Database Versions"

Scripts to update the database to a new version are in trunk/db/updates in svn.
Once you have downloaded a new version you can runthe updates via the update-db.sh script
in trunk/db. 

$ svn update
$ cd trunk/db
$ ./update-db.sh


.SH "BACKUP"

To be written.

.SH "AUTHORS"


Written by Dr. Ian Haywood
